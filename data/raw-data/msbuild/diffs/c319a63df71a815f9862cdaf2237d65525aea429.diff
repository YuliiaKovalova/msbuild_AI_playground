diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index e90e7f4fbf3..5b62b7ef4e3 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -58,7 +58,7 @@
     <!-- Don't localize unit test projects -->
     <PackageReference Remove="XliffTasks" />
 
-    <Compile Include="$(RepoRoot)src\Shared\UnitTests\TestAssemblyInfo.cs" />
+    <Compile Include="$(RepoRoot)src\Shared\UnitTests\TestAssemblyInfo.cs" Condition="'$(IsLibraryTestProject)' != 'true'" />
     <Compile Include="$(RepoRoot)src\Shared\UnitTests\TestProgram.cs" />
   </ItemGroup>
 
diff --git a/src/StringTools.UnitTests/InterningTestData.cs b/src/StringTools.UnitTests/InterningTestData.cs
new file mode 100644
index 00000000000..857e9032850
--- /dev/null
+++ b/src/StringTools.UnitTests/InterningTestData.cs
@@ -0,0 +1,68 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System.Collections.Generic;
+
+namespace Microsoft.NET.StringTools.Tests
+{
+    public static class InterningTestData
+    {
+        /// <summary>
+        /// Represents an array of string fragments to initialize an InternableString with.
+        /// </summary>
+        public class TestDatum
+        {
+            private string _string;
+            public string[] Fragments { get; }
+
+            public int Length => _string.Length;
+
+            public TestDatum(params string[] fragments)
+            {
+                Fragments = fragments;
+                _string = string.Join(string.Empty, Fragments);
+            }
+
+            public char this[int index] => _string[index];
+
+            public override string ToString()
+            {
+                return _string;
+            }
+        }
+
+        public static IEnumerable<object[]> TestData
+        {
+            get
+            {
+                yield return new object[] { new TestDatum((string)null) };
+                yield return new object[] { new TestDatum("") };
+                yield return new object[] { new TestDatum("Test") };
+                yield return new object[] { new TestDatum(null, "All") };
+                yield return new object[] { new TestDatum("", "All") };
+                yield return new object[] { new TestDatum("", "All", "") };
+                yield return new object[] { new TestDatum("Test", "All", "The", "Things") };
+            }
+        }
+
+        public static IEnumerable<object[]> TestDataForTrim
+        {
+            get
+            {
+                yield return new object[] { new TestDatum((string)null) };
+                yield return new object[] { new TestDatum("") };
+                yield return new object[] { new TestDatum(" ") };
+                yield return new object[] { new TestDatum("  ") };
+                yield return new object[] { new TestDatum(null, "") };
+                yield return new object[] { new TestDatum(null, " ") };
+                yield return new object[] { new TestDatum(" T ") };
+                yield return new object[] { new TestDatum("  Test  ") };
+                yield return new object[] { new TestDatum(null, " Test ") };
+                yield return new object[] { new TestDatum(null, "  Test All  ") };
+                yield return new object[] { new TestDatum(" ", "  Test", "", "All  ", " ") };
+                yield return new object[] { new TestDatum("Test", "  ", "", "  ", " ") };
+                yield return new object[] { new TestDatum("Test", " All ", " The ", "Things") };
+            }
+        }
+    }
+}
diff --git a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
new file mode 100644
index 00000000000..9be63b4b714
--- /dev/null
+++ b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
@@ -0,0 +1,154 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#if NET35_UNITTEST
+extern alias StringToolsNet35;
+#endif
+
+using System.Collections.Generic;
+
+using Shouldly;
+using Xunit;
+
+#if NET35_UNITTEST
+using StringToolsNet35::Microsoft.NET.StringTools;
+#endif
+
+namespace Microsoft.NET.StringTools.Tests
+{
+    public class SpanBasedStringBuilder_Tests
+    {
+        private SpanBasedStringBuilder MakeSpanBasedStringBuilder(InterningTestData.TestDatum datum, bool appendSubStrings = false)
+        {
+            bool wrapFirstFragment = datum.Fragments.Length > 0 && datum.Fragments[0] != null;
+
+            SpanBasedStringBuilder stringBuilder = wrapFirstFragment
+                ? new SpanBasedStringBuilder(datum.Fragments[0])
+                : new SpanBasedStringBuilder();
+
+            for (int i = 1; i < datum.Fragments.Length; i++)
+            {
+                if (appendSubStrings)
+                {
+                    int index = datum.Fragments[i].Length / 2;
+                    stringBuilder.Append(datum.Fragments[i], 0, index);
+                    stringBuilder.Append(datum.Fragments[i], index, datum.Fragments[i].Length - index);
+                }
+                else
+                {
+                    stringBuilder.Append(datum.Fragments[i]);
+                }
+            }
+            return stringBuilder;
+        }
+
+        public static IEnumerable<object[]> TestData => InterningTestData.TestData;
+        public static IEnumerable<object[]> TestDataForTrim => InterningTestData.TestDataForTrim;
+
+        [Theory]
+        [MemberData(nameof(TestData))]
+        public void LengthReturnsLength(InterningTestData.TestDatum datum)
+        {
+            MakeSpanBasedStringBuilder(datum).Length.ShouldBe(datum.Length);
+        }
+
+        [Theory]
+        [MemberData(nameof(TestData))]
+        public void EnumeratorEnumeratesCharacters(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            int index = 0;
+            foreach (char ch in stringBuilder)
+            {
+                ch.ShouldBe(datum[index]);
+                index++;
+            }
+        }
+
+        [Theory]
+        [MemberData(nameof(TestData))]
+        public void EqualsReturnsExpectedValue(InterningTestData.TestDatum datum)
+        {
+            InternableString internableString = new InternableString(MakeSpanBasedStringBuilder(datum));
+            internableString.Equals(string.Empty).ShouldBe(internableString.Length == 0);
+
+            string substr = datum.Fragments[0] ?? string.Empty;
+            internableString.Equals(substr).ShouldBe(substr.Length == internableString.Length);
+
+            if (datum.Fragments.Length > 1)
+            {
+                substr += datum.Fragments[1];
+                internableString.Equals(substr).ShouldBe(substr.Length == internableString.Length);
+
+                internableString.Equals(datum.ToString()).ShouldBeTrue();
+            }
+
+            internableString.Equals("Things").ShouldBeFalse();
+        }
+
+        [Fact]
+        public void ReferenceEqualsReturnsExpectedValue()
+        {
+            string str = "Test";
+            InternableString internableString = new InternableString(str);
+            internableString.ReferenceEquals(str).ShouldBeTrue();
+            internableString = new InternableString(new string(str.ToCharArray()));
+            internableString.ReferenceEquals(str).ShouldBeFalse();
+        }
+
+        [Theory]
+        [MemberData(nameof(TestData))]
+        public void AppendAppendsString(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum, false);
+            new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString());
+        }
+
+        [Theory]
+        [MemberData(nameof(TestData))]
+        public void AppendAppendsSubstring(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum, true);
+            new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString());
+        }
+
+#if !NET35_UNITTEST
+        [Theory]
+        [MemberData(nameof(TestDataForTrim))]
+        public void TrimStartRemovesLeadingWhiteSpace(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            stringBuilder.TrimStart();
+            new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString().TrimStart());
+        }
+
+        [Theory]
+        [MemberData(nameof(TestDataForTrim))]
+        public void TrimEndRemovesTrailingWhiteSpace(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            stringBuilder.TrimEnd();
+            new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString().TrimEnd());
+        }
+
+        [Theory]
+        [MemberData(nameof(TestDataForTrim))]
+        public void TrimRemovesLeadingAndTrailingWhiteSpace(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            stringBuilder.Trim();
+            new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString().Trim());
+        }
+#endif
+
+        [Theory]
+        [MemberData(nameof(TestData))]
+        public void ClearRemovesAllCharacters(InterningTestData.TestDatum datum)
+        {
+            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            stringBuilder.Clear();
+            stringBuilder.Length.ShouldBe(0);
+            stringBuilder.GetEnumerator().MoveNext().ShouldBeFalse();
+        }
+    }
+}
diff --git a/src/StringTools.UnitTests/StringTools.UnitTests.csproj b/src/StringTools.UnitTests/StringTools.UnitTests.csproj
new file mode 100644
index 00000000000..e11fc1d60ce
--- /dev/null
+++ b/src/StringTools.UnitTests/StringTools.UnitTests.csproj
@@ -0,0 +1,30 @@
+ï»¿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
+
+    <IsPackable>false</IsPackable>
+
+    <AssemblyName>Microsoft.NET.StringTools.UnitTests</AssemblyName>
+    <IsTestProject>true</IsTestProject>
+    <IsLibraryTestProject>true</IsLibraryTestProject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Shouldly" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\StringTools\StringTools.csproj" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <None Include="..\Shared\UnitTests\App.config">
+      <Link>App.config</Link>
+      <SubType>Designer</SubType>
+    </None>
+    <None Include="..\Shared\UnitTests\xunit.runner.json">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
+  </ItemGroup>
+</Project>
diff --git a/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj b/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj
new file mode 100644
index 00000000000..0c10b4d1f04
--- /dev/null
+++ b/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj
@@ -0,0 +1,40 @@
+ï»¿<Project Sdk="Microsoft.NET.Sdk">
+
+  <!-- The .NET Core version of MSBuild doesn't support targeting .NET Framework 3.5.  So in that case, we import
+       a .props file that prevents building the project from doing much of anything. -->
+  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(MSBuildRuntimeType)' == 'Core' or '$(MonoBuild)' == 'true'" />
+
+  <PropertyGroup>
+    <TargetFrameworks>$(FullFrameworkTFM)</TargetFrameworks>
+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
+
+    <IsPackable>false</IsPackable>
+
+    <AssemblyName>Microsoft.NET.StringTools.net35.UnitTests</AssemblyName>
+    <IsTestProject>true</IsTestProject>
+    <IsLibraryTestProject>true</IsLibraryTestProject>
+    <DefineConstants>$(DefineConstants);NET35_UNITTEST</DefineConstants>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Shouldly" />
+    <PackageReference Include="xunit.core" />
+    <PackageReference Include="xunit.assert" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\StringTools\StringTools.csproj" Aliases="StringToolsNet35">
+      <SetTargetFramework>TargetFramework=net35</SetTargetFramework>
+    </ProjectReference>
+  </ItemGroup>
+
+  <ItemGroup>
+    <None Include="..\Shared\UnitTests\App.config">
+      <Link>App.config</Link>
+      <SubType>Designer</SubType>
+    </None>
+    <None Include="..\Shared\UnitTests\xunit.runner.json">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
+  </ItemGroup>
+</Project>
diff --git a/src/StringTools.UnitTests/StringTools_Tests.cs b/src/StringTools.UnitTests/StringTools_Tests.cs
new file mode 100644
index 00000000000..7f396ab32b6
--- /dev/null
+++ b/src/StringTools.UnitTests/StringTools_Tests.cs
@@ -0,0 +1,61 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#if NET35_UNITTEST
+extern alias StringToolsNet35;
+#endif
+
+using System;
+
+using Shouldly;
+using Xunit;
+
+#if NET35_UNITTEST
+using StringToolsNet35::Microsoft.NET.StringTools;
+using Shouldly.Configuration;
+#else
+using Microsoft.NET.StringTools;
+#endif
+
+namespace Microsoft.NET.StringTools.Tests
+{
+    public class StringTools_Tests
+    {
+        [Theory]
+        [InlineData("")]
+        [InlineData("A")]
+        [InlineData("Hello")]
+        [InlineData("HelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHello")]
+        public void InternsStrings(string str)
+        {
+            string internedString1 = Strings.WeakIntern(str);
+            internedString1.Equals(str).ShouldBeTrue();
+            string internedString2 = Strings.WeakIntern(str);
+            internedString1.Equals(str).ShouldBeTrue();
+            Object.ReferenceEquals(internedString1, internedString2).ShouldBeTrue();
+
+#if !NET35_UNITTEST
+            ReadOnlySpan<char> span = str.AsSpan();
+            internedString1 = Strings.WeakIntern(span);
+            internedString1.Equals(str).ShouldBeTrue();
+            internedString2 = Strings.WeakIntern(span);
+            internedString1.Equals(str).ShouldBeTrue();
+            Object.ReferenceEquals(internedString1, internedString2).ShouldBeTrue();
+#endif
+        }
+
+        [Fact]
+        public void CreatesDiagnosticReport()
+        {
+            string statisticsNotEnabledString = "EnableStatisticsGathering() has not been called";
+
+            Strings.CreateDiagnosticReport().ShouldContain(statisticsNotEnabledString);
+
+            Strings.EnableDiagnostics();
+            string report = Strings.CreateDiagnosticReport();
+
+            report.ShouldNotContain(statisticsNotEnabledString);
+            report.ShouldContain("Eliminated Strings");
+        }
+    }
+}
diff --git a/src/StringTools.UnitTests/WeakStringCache_Tests.cs b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
new file mode 100644
index 00000000000..bddfc60917b
--- /dev/null
+++ b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
@@ -0,0 +1,195 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#if NET35_UNITTEST
+extern alias StringToolsNet35;
+#endif
+
+using System;
+using System.Linq;
+using System.Runtime.CompilerServices;
+using System.Text;
+
+using Shouldly;
+using Xunit;
+
+#if NET35_UNITTEST
+using StringToolsNet35::Microsoft.NET.StringTools;
+#endif
+
+namespace Microsoft.NET.StringTools.Tests
+{
+    public class WeakStringCache_Tests : IDisposable
+    {
+        /// <summary>
+        /// The weak string cache under test.
+        /// </summary>
+        private WeakStringCache _cache = new WeakStringCache();
+
+        public void Dispose()
+        {
+            _cache.Dispose();
+        }
+
+        /// <summary>
+        /// Adds a string to the cache under test.
+        /// </summary>
+        /// <param name="strPart1">Part one of the string (split to prevent runtime interning and unintended GC roots).</param>
+        /// <param name="strPart2">Part two of the string (split to prevent runtime interning and unintended GC roots).</param>
+        /// <param name="callbackToRunWithTheStringAlive">Callback to be invoked after the string has been added but before the strong GC ref is released.</param>
+        /// <returns>The hash code of the string as calculated by WeakStringCache.</returns>
+        [MethodImpl(MethodImplOptions.NoInlining)]
+        private int AddString(string strPart1, string strPart2, Action<string> callbackToRunWithTheStringAlive)
+        {
+            // Compose the string with SB so it doesn't get interned by the runtime.
+            string testString = new StringBuilder(strPart1).Append(strPart2).ToString();
+            InternableString testStringTarget = new InternableString(testString);
+
+            int hashCode = testStringTarget.GetHashCode();
+
+            string cachedString = _cache.GetOrCreateEntry(ref testStringTarget, out bool cacheHit);
+            cacheHit.ShouldBeFalse();
+            cachedString.ShouldBeSameAs(testString);
+
+            callbackToRunWithTheStringAlive(cachedString);
+
+            // Verify that the string is really in the cache and the cache returns the interned instance.
+            string testStringCopy = new StringBuilder(strPart1).Append(strPart2).ToString();
+            InternableString testStringCopyTarget = new InternableString(testStringCopy);
+            cachedString = _cache.GetOrCreateEntry(ref testStringCopyTarget, out cacheHit);
+            cacheHit.ShouldBeTrue();
+            cachedString.ShouldBeSameAs(testString);
+
+            // Trigger full GC and verify that nothing has changed since we're still keeping testString alive.
+            GC.Collect();
+
+            callbackToRunWithTheStringAlive(cachedString);
+
+            testStringCopyTarget = new InternableString(testStringCopy);
+            cachedString = _cache.GetOrCreateEntry(ref testStringCopyTarget, out cacheHit);
+            cacheHit.ShouldBeTrue();
+            cachedString.ShouldBeSameAs(testString);
+
+            return hashCode;
+        }
+
+        /// <summary>
+        /// Adds strings that are known to have a hash code collision to the cache under test.
+        /// </summary>
+        [MethodImpl(MethodImplOptions.NoInlining)]
+        private void AddStringsWithSameHashCode(int numberOfStrings)
+        {
+            string[] cachedStrings = new string[numberOfStrings];
+            int[] hashCodes = new int[numberOfStrings];
+
+            for (int i = 0; i < numberOfStrings; i++)
+            {
+                string strPart2 = "1" + String.Concat(Enumerable.Repeat("4428939786", i));
+                hashCodes[i] = AddString("Random string ", strPart2, (string cachedString) =>
+                {
+                    _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
+                    {
+                        LiveStringCount = 1,
+                        CollectedStringCount = 0,
+                    });
+                    cachedStrings[i] = cachedString;
+                });
+
+                if (i > 0)
+                {
+                    // The strings have been carefully constructed to have the same hash code.
+                    hashCodes[i].ShouldBe(hashCodes[i - 1]);
+                }
+            }
+
+            // There are no cache hits when iterating over our strings again because the last one always wins and steals the slot.
+            for (int i = 0; i < numberOfStrings; i++)
+            {
+                InternableString stringCopy = new InternableString(new string(cachedStrings[i].ToCharArray()));
+                string cachedStringFromCache =_cache.GetOrCreateEntry(ref stringCopy, out bool cacheHit);
+                cacheHit.ShouldBeFalse();
+                cachedStringFromCache.ShouldNotBeSameAs(cachedStrings[i]);
+            }
+        }
+
+        /// <summary>
+        /// Simple test case to verify that:
+        /// 1. A string added to the cache stays in the cache as long as it's alive.
+        /// 2. The string is no longer retrievable after all strong GC refs are gone.
+        /// 3. The cache completely removes the handle after calling Scavenge on it.
+        /// </summary>
+        /// <remarks>
+        /// Disabled on MacOS Mono because it doesn't play well with conservative GC scanning.
+        /// https://www.mono-project.com/docs/advanced/garbage-collector/sgen/#precise-stack-marking
+        /// </remarks>
+        [Fact]
+        [Trait("Category", "mono-osx-failing")]
+        public void RetainsStringUntilCollected()
+        {
+            // Add a string to the cache using a non-inlinable method to make sure it's not reachable from a GC root.
+            AddString("Random string ", "test", (string cachedString) =>
+            {
+                _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
+                {
+                    LiveStringCount = 1,
+                    CollectedStringCount = 0,
+                });
+            });
+
+            // Trigger full GC.
+            GC.Collect();
+
+            // The handle is still in the cache but it's unused now as the string has been collected.
+            _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
+            {
+                LiveStringCount = 0,
+                CollectedStringCount = 1,
+            });
+
+            // Ask the cache to get rid of unused handles.
+            _cache.Scavenge();
+
+            // The cache should be empty now.
+            _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
+            {
+                LiveStringCount = 0,
+                CollectedStringCount = 0,
+            });
+        }
+
+        /// <summary>
+        /// Same as RetainsStringUntilCollected but with multiple strings sharing the same hash code.
+        /// </summary>
+        /// <remarks>
+        /// Disabled on MacOS Mono because it doesn't play well with conservative GC scanning.
+        /// https://www.mono-project.com/docs/advanced/garbage-collector/sgen/#precise-stack-marking
+        /// </remarks>
+        [Fact]
+        [Trait("Category", "mono-osx-failing")]
+        public void RetainsLastStringWithGivenHashCode()
+        {
+            // Add 3 strings with the same hash code.
+            AddStringsWithSameHashCode(3);
+
+            // Trigger full GC.
+            GC.Collect();
+
+            // The handle is still in the cache but it's unused now as the strings have been collected.
+            _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
+            {
+                LiveStringCount = 0,
+                CollectedStringCount = 1,
+            });
+
+            // Ask the cache to get rid of unused handles.
+            _cache.Scavenge();
+
+            // The cache should be empty now.
+            _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
+            {
+                LiveStringCount = 0,
+                CollectedStringCount = 0,
+            });
+        }
+    }
+}
