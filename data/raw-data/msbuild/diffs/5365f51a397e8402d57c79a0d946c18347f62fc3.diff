diff --git a/src/Framework/JsonTranslator.cs b/src/Framework/JsonTranslator.cs
index 649ca2516d4..b832169d20e 100644
--- a/src/Framework/JsonTranslator.cs
+++ b/src/Framework/JsonTranslator.cs
@@ -92,107 +92,7 @@ public void Dispose()
 
     internal static class JsonTranslatorExtensions
     {
-        internal static object GetNumberValue(JsonElement valueElement) =>
-            (valueElement.TryGetInt32(out int intValue), valueElement.TryGetInt64(out long longValue)) switch
-            {
-                (true, _) => intValue,
-                (false, true) => longValue,
-                _ => valueElement.GetDouble()
-            };
-
-        internal static void WriteValue(Utf8JsonWriter writer, object value, JsonSerializerOptions jsonSerializerOptions)
-        {
-            switch (value)
-            {
-                case null:
-                    writer.WriteNullValue();
-                    break;
-                case string str:
-                    writer.WriteStringValue(str);
-                    break;
-                case int i:
-                    writer.WriteNumberValue(i);
-                    break;
-                case long l:
-                    writer.WriteNumberValue(l);
-                    break;
-                case double d:
-                    writer.WriteNumberValue(d);
-                    break;
-                case float f:
-                    writer.WriteNumberValue(f);
-                    break;
-                case decimal dec:
-                    writer.WriteNumberValue(dec);
-                    break;
-                case bool b:
-                    writer.WriteBooleanValue(b);
-                    break;
-                case DateTime dt:
-                    writer.WriteStringValue(dt);
-                    break;
-                case ITaskItem taskItem:
-                    WriteTaskItem(writer, taskItem);
-                    break;
-                case ITaskItem[] taskItems:
-                    WriteTaskItemArray(writer, taskItems);
-                    break;
-                case IEnumerable enumerable:
-                    WriteEnumerable(writer, enumerable, jsonSerializerOptions);
-                    break;
-                default:
-                    JsonSerializer.Serialize(writer, value, value.GetType(), jsonSerializerOptions);
-                    break;
-            }
-        }
-
-        private static void WriteTaskItemArray(Utf8JsonWriter writer, ITaskItem[] taskItems)
-        {
-            writer.WriteStartArray();
-
-            foreach (var item in taskItems)
-            {
-                WriteTaskItem(writer, item);
-            }
-
-            writer.WriteEndArray();
-        }
-
-        private static void WriteEnumerable(Utf8JsonWriter writer, IEnumerable enumerable, JsonSerializerOptions jsonSerializerOptions)
-        {
-            writer.WriteStartArray();
-
-            foreach (var item in enumerable)
-            {
-                WriteValue(writer, item, jsonSerializerOptions);
-            }
-
-            writer.WriteEndArray();
-        }
-
-        private static void WriteTaskItem(Utf8JsonWriter writer, ITaskItem taskItem)
-        {
-            writer.WriteStartObject();
-
-            writer.WritePropertyName("itemSpec");
-            writer.WriteStringValue(taskItem.ItemSpec);
-
-            if (taskItem.MetadataCount > 0)
-            {
-                writer.WritePropertyName("metadata");
-                writer.WriteStartObject();
-
-                foreach (string name in taskItem.MetadataNames)
-                {
-                    writer.WritePropertyName(name);
-                    writer.WriteStringValue(taskItem.GetMetadata(name));
-                }
-
-                writer.WriteEndObject();
-            }
-
-            writer.WriteEndObject();
-        }
+        
     }
 }
 #endif
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index a3c7b635280..90a23a2660a 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -14,6 +14,8 @@
 
 using Microsoft.Build.Shared;
 using System.Linq;
+using System.Collections;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
@@ -596,17 +598,123 @@ public override TaskParameter Read(ref Utf8JsonReader reader, Type typeToConvert
                     throw new JsonException("Invalid TaskParameter format");
                 }
 
-                object value = valueElement.ValueKind switch
+                if (element.TryGetProperty("parameterType", out JsonElement typeElement))
+                {
+                    var parameterType = (TaskParameterType)typeElement.GetInt32();
+
+                    if (parameterType == TaskParameterType.Null)
+                    {
+                        return new TaskParameter(null);
+                    }
+
+                    if (element.TryGetProperty("typeCode", out JsonElement typeCodeElement))
+                    {
+                        var typeCode = (TypeCode)typeCodeElement.GetInt32();
+                        object value = parameterType switch
+                        {
+                            TaskParameterType.PrimitiveType => DeserializePrimitiveValue(valueElement, typeCode),
+                            TaskParameterType.PrimitiveTypeArray => DeserializeArray(valueElement, typeCode),
+                            TaskParameterType.ITaskItem => DeserializeTaskItem(valueElement),
+                            TaskParameterType.ITaskItemArray => DeserializeTaskItemArray(valueElement),
+                            TaskParameterType.ValueType or TaskParameterType.ValueTypeArray => valueElement.GetString(),
+                            TaskParameterType.Invalid => DeserializeException(valueElement),
+                            _ => null
+                        };
+                        return new TaskParameter(value);
+                    }
+                }
+
+                // Fallback to simple value handling
+                object simpleValue = valueElement.ValueKind switch
                 {
                     JsonValueKind.String => valueElement.GetString(),
-                    JsonValueKind.Number => JsonTranslatorExtensions.GetNumberValue(valueElement),
+                    JsonValueKind.Number => GetNumberValue(valueElement),
                     JsonValueKind.True or JsonValueKind.False => valueElement.GetBoolean(),
                     JsonValueKind.Array => JsonSerializer.Deserialize<object[]>(valueElement.GetRawText(), options),
-                    JsonValueKind.Object => JsonSerializer.Deserialize<Dictionary<string, object>>(valueElement.GetRawText(), options),
+                    JsonValueKind.Object => DeserializeComplexObject(valueElement, options),
                     _ => null
                 };
 
-                return new TaskParameter(value);
+                return new TaskParameter(simpleValue);
+            }
+
+            private object DeserializePrimitiveValue(JsonElement element, TypeCode typeCode) => typeCode switch
+            {
+                TypeCode.Boolean => element.GetBoolean(),
+                TypeCode.Byte => (byte)element.GetInt32(),
+                TypeCode.Int16 => (short)element.GetInt32(),
+                TypeCode.UInt16 => (ushort)element.GetInt32(),
+                TypeCode.Int32 => element.GetInt32(),
+                TypeCode.Int64 => element.GetInt64(),
+                TypeCode.Double => element.GetDouble(),
+                TypeCode.String => element.GetString(),
+                TypeCode.DateTime => element.GetDateTime(),
+                _ => Convert.ChangeType(element.GetString(), typeCode, CultureInfo.InvariantCulture)
+            };
+
+            private Array DeserializeArray(JsonElement element, TypeCode elementTypeCode)
+            {
+                if (element.ValueKind != JsonValueKind.Array)
+                {
+                    return null;
+                }
+
+                var values = element.EnumerateArray().ToList();
+
+                return elementTypeCode switch
+                {
+                    TypeCode.Boolean => values.Select(v => v.GetBoolean()).ToArray(),
+                    TypeCode.Int32 => values.Select(v => v.GetInt32()).ToArray(),
+                    TypeCode.String => values.Select(v => v.GetString()).ToArray(),
+                    _ => values.Select(v => v.GetString()).ToArray() // Fallback to string array
+                };
+            }
+
+            private static ITaskItem DeserializeTaskItem(JsonElement element)
+            {
+                string itemSpec = element.GetProperty("itemSpec").GetString();
+                string definingProject = element.TryGetProperty("definingProject", out JsonElement dp)
+                    ? dp.GetString()
+                    : null;
+
+                var metadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                if (element.TryGetProperty("metadata", out JsonElement metadataElement))
+                {
+                    foreach (JsonProperty prop in metadataElement.EnumerateObject())
+                    {
+                        metadata[prop.Name] = prop.Value.GetString();
+                    }
+                }
+
+                return new TaskParameter.TaskParameterTaskItem(
+                    EscapingUtilities.Escape(itemSpec),
+                    EscapingUtilities.Escape(definingProject),
+                    metadata);
+            }
+
+            private ITaskItem[] DeserializeTaskItemArray(JsonElement element)
+            {
+                if (element.ValueKind != JsonValueKind.Array)
+                {
+                    return null;
+                }
+
+                return [.. element.EnumerateArray().Select(DeserializeTaskItem)];
+            }
+
+            private object DeserializeException(JsonElement element) => new Exception(element.TryGetProperty("message", out JsonElement messageElement)
+                    ? messageElement.GetString()
+                    : "Unknown error");
+
+            private object DeserializeComplexObject(JsonElement element, JsonSerializerOptions options)
+            {
+                // Check if it's a TaskItem-like structure
+                if (element.TryGetProperty("itemSpec", out _))
+                {
+                    return DeserializeTaskItem(element);
+                }
+
+                return JsonSerializer.Deserialize<Dictionary<string, object>>(element.GetRawText(), options);
             }
 
             public override void Write(Utf8JsonWriter writer, TaskParameter value, JsonSerializerOptions options)
@@ -618,21 +726,147 @@ public override void Write(Utf8JsonWriter writer, TaskParameter value, JsonSeria
                 }
 
                 writer.WriteStartObject();
-                writer.WritePropertyName("value");
 
+                // Write parameter type info
+                writer.WriteNumber("parameterType", (int)value.ParameterType);
+                writer.WriteNumber("typeCode", (int)value.ParameterTypeCode);
+
+                // Write the actual value
+                writer.WritePropertyName("value");
                 object wrappedValue = value.WrappedParameter;
+
                 if (wrappedValue == null)
                 {
                     writer.WriteNullValue();
                 }
                 else
                 {
-                    JsonTranslatorExtensions.WriteValue(writer, wrappedValue, s_jsonSerializerOptions);
+                    switch (value.ParameterType)
+                    {
+                        case TaskParameterType.ITaskItem:
+                            WriteTaskItem(writer, (ITaskItem)wrappedValue);
+                            break;
+                        case TaskParameterType.ITaskItemArray:
+                            WriteTaskItemArray(writer, (ITaskItem[])wrappedValue);
+                            break;
+                        case TaskParameterType.Invalid:
+                            WriteException(writer, (Exception)wrappedValue);
+                            break;
+                        default:
+                            WriteValue(writer, wrappedValue, options);
+                            break;
+                    }
+                }
+
+                writer.WriteEndObject();
+            }
+
+            private void WriteTaskItem(Utf8JsonWriter writer, ITaskItem item)
+            {
+                writer.WriteStartObject();
+                writer.WriteString("itemSpec", item.ItemSpec);
+
+                // Write metadata if present
+                var metadata = item.CloneCustomMetadata();
+                if (metadata?.Count > 0)
+                {
+                    writer.WritePropertyName("metadata");
+                    writer.WriteStartObject();
+                    foreach (DictionaryEntry entry in metadata)
+                    {
+                        writer.WriteString(entry.Key.ToString(), entry.Value?.ToString());
+                    }
+
+                    writer.WriteEndObject();
+                }
+
+                writer.WriteEndObject();
+            }
+
+            private void WriteTaskItemArray(Utf8JsonWriter writer, ITaskItem[] items)
+            {
+                writer.WriteStartArray();
+                foreach (var item in items)
+                {
+                    WriteTaskItem(writer, item);
                 }
+                writer.WriteEndArray();
+            }
 
+            private void WriteException(Utf8JsonWriter writer, Exception ex)
+            {
+                writer.WriteStartObject();
+                writer.WriteString("message", ex.Message);
                 writer.WriteEndObject();
             }
+
+            internal static object GetNumberValue(JsonElement valueElement) =>
+            (valueElement.TryGetInt32(out int intValue), valueElement.TryGetInt64(out long longValue)) switch
+            {
+                (true, _) => intValue,
+                (false, true) => longValue,
+                _ => valueElement.GetDouble()
+            };
+
+            internal void WriteValue(Utf8JsonWriter writer, object value, JsonSerializerOptions jsonSerializerOptions)
+            {
+                switch (value)
+                {
+                    case null:
+                        writer.WriteNullValue();
+                        break;
+                    case string str:
+                        writer.WriteStringValue(str);
+                        break;
+                    case int i:
+                        writer.WriteNumberValue(i);
+                        break;
+                    case long l:
+                        writer.WriteNumberValue(l);
+                        break;
+                    case double d:
+                        writer.WriteNumberValue(d);
+                        break;
+                    case float f:
+                        writer.WriteNumberValue(f);
+                        break;
+                    case decimal dec:
+                        writer.WriteNumberValue(dec);
+                        break;
+                    case bool b:
+                        writer.WriteBooleanValue(b);
+                        break;
+                    case DateTime dt:
+                        writer.WriteStringValue(dt);
+                        break;
+                    case ITaskItem taskItem:
+                        WriteTaskItem(writer, taskItem);
+                        break;
+                    case ITaskItem[] taskItems:
+                        WriteTaskItemArray(writer, taskItems);
+                        break;
+                    case IEnumerable enumerable:
+                        WriteEnumerable(writer, enumerable, jsonSerializerOptions);
+                        break;
+                    default:
+                        JsonSerializer.Serialize(writer, value, value.GetType(), jsonSerializerOptions);
+                        break;
+                }
+            }
+
+            private void WriteEnumerable(Utf8JsonWriter writer, IEnumerable enumerable, JsonSerializerOptions jsonSerializerOptions)
+            {
+                writer.WriteStartArray();
+
+                foreach (var item in enumerable)
+                {
+                    WriteValue(writer, item, jsonSerializerOptions);
+                }
+
+                writer.WriteEndArray();
+            }
         }
+
 #endif
     }
 }
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 3b6265ca4d9..b0398856f7c 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -717,7 +717,7 @@ private void TranslateValueTypeArray(ITranslator translator)
         /// <summary>
         /// Super simple ITaskItem derivative that we can use as a container for read items.
         /// </summary>
-        private class TaskParameterTaskItem :
+        internal class TaskParameterTaskItem :
 #if FEATURE_APPDOMAIN
             MarshalByRefObject,
 #endif
