diff --git a/src/Analyzers/API/BuildAnalysisContext.cs b/src/Analyzers/API/BuildAnalysisContext.cs
index 098ae5470f6..8dbb5ae5041 100644
--- a/src/Analyzers/API/BuildAnalysisContext.cs
+++ b/src/Analyzers/API/BuildAnalysisContext.cs
@@ -19,9 +19,9 @@ public class BuildAnalysisContext
 
     internal BuildAnalysisContext(LoggingContext loggingContext) => _loggingContext = loggingContext;
 
-    public void ReportResult(BuildAnalysisResult result)
+    public void ReportResult(BuildAnalyzerResult result)
     {
-        BuildEventArgs eventArgs = result.ToEventArgs(ConfigurationProvider.GetMergedConfiguration(result.BuildAnalysisRule).Severity);
+        BuildEventArgs eventArgs = result.ToEventArgs(ConfigurationProvider.GetMergedConfiguration(result.BuildAnalyzerRule).Severity);
         eventArgs.BuildEventContext = _loggingContext.BuildEventContext;
         _loggingContext.LogBuildEvent(eventArgs);
     }
diff --git a/src/Analyzers/API/BuildAnalyzer.cs b/src/Analyzers/API/BuildAnalyzer.cs
index cbe39d9c8a6..f05c452521d 100644
--- a/src/Analyzers/API/BuildAnalyzer.cs
+++ b/src/Analyzers/API/BuildAnalyzer.cs
@@ -8,8 +8,8 @@ namespace Microsoft.Build.Experimental;
 public abstract class BuildAnalyzer
 {
     public abstract string FriendlyName { get; }
-    public abstract ImmutableArray<BuildAnalysisRule> SupportedRules { get; }
+    public abstract ImmutableArray<BuildAnalyzerRule> SupportedRules { get; }
     public abstract void Initialize(ConfigurationContext configurationContext);
 
-    public abstract void RegisterActions(IBuildAnalyzerContext context);
+    public abstract void RegisterActions(IBuildCopContext context);
 }
diff --git a/src/Analyzers/API/BuildAnalyzerConfiguration.cs b/src/Analyzers/API/BuildAnalyzerConfiguration.cs
index b9479d88cff..7a5b75a506c 100644
--- a/src/Analyzers/API/BuildAnalyzerConfiguration.cs
+++ b/src/Analyzers/API/BuildAnalyzerConfiguration.cs
@@ -11,7 +11,7 @@ public class BuildAnalyzerConfiguration
         SupportedInvocationConcurrency = InvocationConcurrency.Parallel,
         PerformanceWeightClass = Experimental.PerformanceWeightClass.Normal,
         EvaluationAnalysisScope = Experimental.EvaluationAnalysisScope.AnalyzedProjectOnly,
-        Severity = BuildAnalysisResultSeverity.Info,
+        Severity = BuildAnalyzerResultSeverity.Info,
         IsEnabled = false,
     };
 
@@ -21,6 +21,6 @@ public class BuildAnalyzerConfiguration
     public InvocationConcurrency? SupportedInvocationConcurrency { get; internal init; }
     public PerformanceWeightClass? PerformanceWeightClass { get; internal init; }
     public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }
-    public BuildAnalysisResultSeverity? Severity { get; internal init; }
+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }
     public bool? IsEnabled { get; internal init; }
 }
diff --git a/src/Analyzers/API/BuildAnalysisResult.cs b/src/Analyzers/API/BuildAnalyzerResult.cs
similarity index 73%
rename from src/Analyzers/API/BuildAnalysisResult.cs
rename to src/Analyzers/API/BuildAnalyzerResult.cs
index 0b5fc893d06..88291ce2c67 100644
--- a/src/Analyzers/API/BuildAnalysisResult.cs
+++ b/src/Analyzers/API/BuildAnalyzerResult.cs
@@ -8,40 +8,40 @@
 
 namespace Microsoft.Build.Experimental;
 
-public class BuildAnalysisResult
+public class BuildAnalyzerResult
 {
-    public static BuildAnalysisResult Create(BuildAnalysisRule rule, ElementLocation location, params string[] messageArgs)
+    public static BuildAnalyzerResult Create(BuildAnalyzerRule rule, ElementLocation location, params string[] messageArgs)
     {
-        return new BuildAnalysisResult(rule, location, messageArgs);
+        return new BuildAnalyzerResult(rule, location, messageArgs);
     }
 
-    public BuildAnalysisResult(BuildAnalysisRule buildAnalysisRule, ElementLocation location, string[] messageArgs)
+    public BuildAnalyzerResult(BuildAnalyzerRule buildAnalyzerRule, ElementLocation location, string[] messageArgs)
     {
-        BuildAnalysisRule = buildAnalysisRule;
+        BuildAnalyzerRule = buildAnalyzerRule;
         Location = location;
         MessageArgs = messageArgs;
     }
 
-    internal BuildEventArgs ToEventArgs(BuildAnalysisResultSeverity severity)
+    internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)
         => severity switch
         {
-            BuildAnalysisResultSeverity.Info => new BuildAnalysisResultMessage(this),
-            BuildAnalysisResultSeverity.Warning => new BuildAnalysisResultWarning(this),
-            BuildAnalysisResultSeverity.Error => new BuildAnalysisResultError(this),
+            BuildAnalyzerResultSeverity.Info => new BuildAnalysisResultMessage(this),
+            BuildAnalyzerResultSeverity.Warning => new BuildAnalysisResultWarning(this),
+            BuildAnalyzerResultSeverity.Error => new BuildAnalysisResultError(this),
             _ => throw new ArgumentOutOfRangeException(nameof(severity), severity, null),
         };
 
-    public BuildAnalysisRule BuildAnalysisRule { get; }
+    public BuildAnalyzerRule BuildAnalyzerRule { get; }
     public ElementLocation Location { get; }
     public string[] MessageArgs { get; }
 
     private string? _message;
-    public string Message => _message ??= $"{(Equals(Location ?? ElementLocation.EmptyLocation, ElementLocation.EmptyLocation) ? string.Empty : (Location!.LocationString + ": "))}{BuildAnalysisRule.Id}: {string.Format(BuildAnalysisRule.MessageFormat, MessageArgs)}";
+    public string Message => _message ??= $"{(Equals(Location ?? ElementLocation.EmptyLocation, ElementLocation.EmptyLocation) ? string.Empty : (Location!.LocationString + ": "))}{BuildAnalyzerRule.Id}: {string.Format(BuildAnalyzerRule.MessageFormat, MessageArgs)}";
 }
 
 public sealed class BuildAnalysisResultWarning : BuildWarningEventArgs
 {
-    public BuildAnalysisResultWarning(BuildAnalysisResult result)
+    public BuildAnalysisResultWarning(BuildAnalyzerResult result)
     {
         this.Message = result.Message;
     }
@@ -66,7 +66,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
 public sealed class BuildAnalysisResultError : BuildErrorEventArgs
 {
-    public BuildAnalysisResultError(BuildAnalysisResult result)
+    public BuildAnalysisResultError(BuildAnalyzerResult result)
     {
         this.Message = result.Message;
     }
@@ -91,7 +91,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
 public sealed class BuildAnalysisResultMessage : BuildMessageEventArgs
 {
-    public BuildAnalysisResultMessage(BuildAnalysisResult result)
+    public BuildAnalysisResultMessage(BuildAnalyzerResult result)
     {
         this.Message = result.Message;
     }
diff --git a/src/Analyzers/API/BuildAnalysisResultSeverity.cs b/src/Analyzers/API/BuildAnalyzerResultSeverity.cs
similarity index 84%
rename from src/Analyzers/API/BuildAnalysisResultSeverity.cs
rename to src/Analyzers/API/BuildAnalyzerResultSeverity.cs
index d3eeb7c7bd1..3e067db3cf8 100644
--- a/src/Analyzers/API/BuildAnalysisResultSeverity.cs
+++ b/src/Analyzers/API/BuildAnalyzerResultSeverity.cs
@@ -3,7 +3,7 @@
 
 namespace Microsoft.Build.Experimental;
 
-public enum BuildAnalysisResultSeverity
+public enum BuildAnalyzerResultSeverity
 {
     Info,
     Warning,
diff --git a/src/Analyzers/API/BuildAnalysisRule.cs b/src/Analyzers/API/BuildAnalyzerRule.cs
similarity index 89%
rename from src/Analyzers/API/BuildAnalysisRule.cs
rename to src/Analyzers/API/BuildAnalyzerRule.cs
index 8858b8dc44a..5c9f739497c 100644
--- a/src/Analyzers/API/BuildAnalysisRule.cs
+++ b/src/Analyzers/API/BuildAnalyzerRule.cs
@@ -3,9 +3,9 @@
 
 namespace Microsoft.Build.Experimental;
 
-public class BuildAnalysisRule
+public class BuildAnalyzerRule
 {
-    public BuildAnalysisRule(string id, string title, string description, string category, string messageFormat,
+    public BuildAnalyzerRule(string id, string title, string description, string category, string messageFormat,
         BuildAnalyzerConfiguration defaultConfiguration)
     {
         Id = id;
diff --git a/src/Analyzers/API/BuildAnalysisLoggerFactory.cs b/src/Analyzers/API/BuildCopLoggerFactory.cs
similarity index 74%
rename from src/Analyzers/API/BuildAnalysisLoggerFactory.cs
rename to src/Analyzers/API/BuildCopLoggerFactory.cs
index 4ed8d920770..accd1db9c2e 100644
--- a/src/Analyzers/API/BuildAnalysisLoggerFactory.cs
+++ b/src/Analyzers/API/BuildCopLoggerFactory.cs
@@ -11,10 +11,10 @@
 
 namespace Microsoft.Build.Experimental;
 
-public class BuildAnalysisLoggerFactory : IBuildAnalysisLoggerFactory
+public class BuildCopLoggerFactory : IBuildCopLoggerFactory
 {
     public ILogger CreateBuildAnalysisLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory)
     {
-        return new AnalyzersConnectorLogger(loggingContextFactory, BuildAnalysisManager.Instance);
+        return new BuildCopConnectorLogger(loggingContextFactory, BuildCopManager.Instance);
     }
 }
diff --git a/src/Analyzers/Analyzers/SharedOutputPathAnalyzer.cs b/src/Analyzers/Analyzers/SharedOutputPathAnalyzer.cs
index a49e4769ed9..2cddcf3da27 100644
--- a/src/Analyzers/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Analyzers/Analyzers/SharedOutputPathAnalyzer.cs
@@ -16,25 +16,25 @@ namespace Microsoft.Build.Analyzers.Analyzers;
 //  * https://github.com/dotnet/roslyn/issues/40351
 //
 // quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'
-//  maybe - BS - build styling; BA - build authoring; BE - build execution/environment; BC - build configuration
+//  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration
 
 internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer
 {
-    public static BuildAnalysisRule SupportedRule = new BuildAnalysisRule("BC0101", "ConflictingOutputPath",
+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0101", "ConflictingOutputPath",
         "Two projects should not share their OutputPath nor IntermediateOutputPath locations", "Configuration",
         "Projects {0} and {1} have conflicting output paths: {2}.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalysisResultSeverity.Warning, IsEnabled = true });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
 
     public override string FriendlyName => "MSBuild.SharedOutputPathAnalyzer";
 
-    public override ImmutableArray<BuildAnalysisRule> SupportedRules { get; } =[SupportedRule];
+    public override ImmutableArray<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];
 
     public override void Initialize(ConfigurationContext configurationContext)
     {
         /* This is it - no custom configuration */
     }
 
-    public override void RegisterActions(IBuildAnalyzerContext context)
+    public override void RegisterActions(IBuildCopContext context)
     {
         context.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);
     }
@@ -81,7 +81,7 @@ private void EvaluatedPropertiesAction(EvaluatedPropertiesContext context)
 
         if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))
         {
-            context.ReportResult(BuildAnalysisResult.Create(
+            context.ReportResult(BuildAnalyzerResult.Create(
                 SupportedRule,
                 // TODO: let's support transmitting locations of specific properties
                 ElementLocation.EmptyLocation,
diff --git a/src/Analyzers/Infrastructure/AnalyzersDelegates.cs b/src/Analyzers/Infrastructure/AnalyzersDelegates.cs
new file mode 100644
index 00000000000..1eecd0c5c9d
--- /dev/null
+++ b/src/Analyzers/Infrastructure/AnalyzersDelegates.cs
@@ -0,0 +1,8 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Experimental;
+
+public delegate void EvaluatedPropertiesAction(EvaluatedPropertiesContext context);
+
+public delegate void ParsedItemsAction(ParsedItemsContext context);
diff --git a/src/Analyzers/Infrastructure/BuildAnalyzerConfigurationInternal.cs b/src/Analyzers/Infrastructure/BuildAnalyzerConfigurationInternal.cs
index cef5165db2f..fdffcb98a27 100644
--- a/src/Analyzers/Infrastructure/BuildAnalyzerConfigurationInternal.cs
+++ b/src/Analyzers/Infrastructure/BuildAnalyzerConfigurationInternal.cs
@@ -19,6 +19,6 @@ internal sealed class BuildAnalyzerConfigurationInternal
     public InvocationConcurrency SupportedInvocationConcurrency { get; internal init; }
     public PerformanceWeightClass PerformanceWeightClass { get; internal init; }
     public EvaluationAnalysisScope EvaluationAnalysisScope { get; internal init; }
-    public BuildAnalysisResultSeverity Severity { get; internal init; }
+    public BuildAnalyzerResultSeverity Severity { get; internal init; }
     public bool IsEnabled { get; internal init; }
 }
diff --git a/src/Analyzers/Infrastructure/BuildAnalyzerContext.cs b/src/Analyzers/Infrastructure/BuildAnalyzerContext.cs
deleted file mode 100644
index 832bb94872a..00000000000
--- a/src/Analyzers/Infrastructure/BuildAnalyzerContext.cs
+++ /dev/null
@@ -1,99 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Concurrent;
-using System.Collections.Generic;
-using System.Diagnostics;
-
-namespace Microsoft.Build.Experimental;
-
-public delegate void EvaluatedPropertiesAction(EvaluatedPropertiesContext context);
-public delegate void ParsedItemsAction(ParsedItemsContext context);
-
-internal sealed class CentralBuildAnalyzerContext
-{
-    private EvaluatedPropertiesAction? _evaluatedPropertiesActions;
-    private ParsedItemsAction? _parsedItemsActions;
-
-    // This we can potentially use to subscribe for receiving evaluated props in the
-    //  build event args. However - this needs to be done early on, when analyzers might not be known yet
-    internal bool HasEvaluatedPropertiesActions => _evaluatedPropertiesActions != null;
-    internal bool HasParsedItemsActions => _parsedItemsActions != null;
-
-    internal void RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction evaluatedPropertiesAction)
-    {
-        // Here we might want to communicate to node that props need to be sent.
-        //  (it was being communicated via MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION)
-        _evaluatedPropertiesActions += evaluatedPropertiesAction;
-    }
-
-    internal void RegisterParsedItemsAction(ParsedItemsAction parsedItemsAction)
-    {
-        _parsedItemsActions += parsedItemsAction;
-    }
-
-    internal void RunEvaluatedPropertiesActions(EvaluatedPropertiesContext evaluatedPropertiesContext)
-    {
-        _evaluatedPropertiesActions?.Invoke(evaluatedPropertiesContext);
-    }
-
-    internal void RunParsedItemsActions(ParsedItemsContext parsedItemsContext)
-    {
-        _parsedItemsActions?.Invoke(parsedItemsContext);
-    }
-}
-
-internal sealed class BuildAnalyzerTracingWrapper
-{
-    private readonly Stopwatch _stopwatch = new Stopwatch();
-
-    public BuildAnalyzerTracingWrapper(BuildAnalyzer buildAnalyzer)
-        => BuildAnalyzer = buildAnalyzer;
-
-    internal BuildAnalyzer BuildAnalyzer { get; }
-
-    internal TimeSpan Elapsed => _stopwatch.Elapsed;
-
-    internal IDisposable StartSpan()
-    {
-        _stopwatch.Start();
-        return new CleanupScope(_stopwatch.Stop);
-    }
-
-    internal readonly struct CleanupScope(Action disposeAction) : IDisposable
-    {
-        public void Dispose() => disposeAction();
-    }
-}
-
-public interface IBuildAnalyzerContext
-{
-    void RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction evaluatedPropertiesAction);
-    void RegisterParsedItemsAction(ParsedItemsAction parsedItemsAction);
-}
-
-internal sealed class BuildAnalyzerContext(BuildAnalyzerTracingWrapper analyzer, CentralBuildAnalyzerContext centralContext) : IBuildAnalyzerContext
-{
-    public void RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction evaluatedPropertiesAction)
-    {
-        void WrappedEvaluatedPropertiesAction(EvaluatedPropertiesContext context)
-        {
-            using var _ = analyzer.StartSpan();
-            evaluatedPropertiesAction(context);
-        }
-
-        centralContext.RegisterEvaluatedPropertiesAction(WrappedEvaluatedPropertiesAction);
-    }
-
-    public void RegisterParsedItemsAction(ParsedItemsAction parsedItemsAction)
-    {
-        void WrappedParsedItemsAction(ParsedItemsContext context)
-        {
-            using var _ = analyzer.StartSpan();
-            parsedItemsAction(context);
-        }
-
-        centralContext.RegisterParsedItemsAction(WrappedParsedItemsAction);
-    }
-}
diff --git a/src/Analyzers/Infrastructure/BuildAnalyzerTracingWrapper.cs b/src/Analyzers/Infrastructure/BuildAnalyzerTracingWrapper.cs
new file mode 100644
index 00000000000..21895de6818
--- /dev/null
+++ b/src/Analyzers/Infrastructure/BuildAnalyzerTracingWrapper.cs
@@ -0,0 +1,30 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Diagnostics;
+
+namespace Microsoft.Build.Experimental;
+
+internal sealed class BuildAnalyzerTracingWrapper
+{
+    private readonly Stopwatch _stopwatch = new Stopwatch();
+
+    public BuildAnalyzerTracingWrapper(BuildAnalyzer buildAnalyzer)
+        => BuildAnalyzer = buildAnalyzer;
+
+    internal BuildAnalyzer BuildAnalyzer { get; }
+
+    internal TimeSpan Elapsed => _stopwatch.Elapsed;
+
+    internal IDisposable StartSpan()
+    {
+        _stopwatch.Start();
+        return new CleanupScope(_stopwatch.Stop);
+    }
+
+    internal readonly struct CleanupScope(Action disposeAction) : IDisposable
+    {
+        public void Dispose() => disposeAction();
+    }
+}
diff --git a/src/Analyzers/Infrastructure/BuildCopCentralContext.cs b/src/Analyzers/Infrastructure/BuildCopCentralContext.cs
new file mode 100644
index 00000000000..f3f2476abcd
--- /dev/null
+++ b/src/Analyzers/Infrastructure/BuildCopCentralContext.cs
@@ -0,0 +1,37 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Experimental;
+
+internal sealed class BuildCopCentralContext
+{
+    private EvaluatedPropertiesAction? _evaluatedPropertiesActions;
+    private ParsedItemsAction? _parsedItemsActions;
+
+    // This we can potentially use to subscribe for receiving evaluated props in the
+    //  build event args. However - this needs to be done early on, when analyzers might not be known yet
+    internal bool HasEvaluatedPropertiesActions => _evaluatedPropertiesActions != null;
+    internal bool HasParsedItemsActions => _parsedItemsActions != null;
+
+    internal void RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction evaluatedPropertiesAction)
+    {
+        // Here we might want to communicate to node that props need to be sent.
+        //  (it was being communicated via MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION)
+        _evaluatedPropertiesActions += evaluatedPropertiesAction;
+    }
+
+    internal void RegisterParsedItemsAction(ParsedItemsAction parsedItemsAction)
+    {
+        _parsedItemsActions += parsedItemsAction;
+    }
+
+    internal void RunEvaluatedPropertiesActions(EvaluatedPropertiesContext evaluatedPropertiesContext)
+    {
+        _evaluatedPropertiesActions?.Invoke(evaluatedPropertiesContext);
+    }
+
+    internal void RunParsedItemsActions(ParsedItemsContext parsedItemsContext)
+    {
+        _parsedItemsActions?.Invoke(parsedItemsContext);
+    }
+}
diff --git a/src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs b/src/Analyzers/Infrastructure/BuildCopConnectorLogger.cs
similarity index 84%
rename from src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs
rename to src/Analyzers/Infrastructure/BuildCopConnectorLogger.cs
index 2ed68e9c706..2999bd2218c 100644
--- a/src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs
+++ b/src/Analyzers/Infrastructure/BuildCopConnectorLogger.cs
@@ -4,6 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
@@ -13,7 +16,7 @@
 using Microsoft.Build.Logging.Analyzers;
 
 namespace Microsoft.Build.Analyzers.Infrastructure;
-internal sealed class AnalyzersConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildAnalysisManager buildAnalysisManager)
+internal sealed class BuildCopConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCopManager buildCopManager)
     : ILogger
 {
     public LoggerVerbosity Verbosity { get; set; }
@@ -32,7 +35,7 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         {
             try
             {
-                buildAnalysisManager.ProcessEvaluationFinishedEventArgs(
+                buildCopManager.ProcessEvaluationFinishedEventArgs(
                     loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),
                     projectEvaluationFinishedEventArgs);
             }
@@ -55,7 +58,7 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();
 
         // TODO: here flush the tracing stats: https://github.com/dotnet/msbuild/issues/9629
-        loggingContext.LogCommentFromText(MessageImportance.High, buildAnalysisManager.CreateTracingStats());
+        loggingContext.LogCommentFromText(MessageImportance.High, buildCopManager.CreateTracingStats());
     }
 
     public void Shutdown()
diff --git a/src/Analyzers/Infrastructure/BuildCopContext.cs b/src/Analyzers/Infrastructure/BuildCopContext.cs
new file mode 100644
index 00000000000..c97fc9af7f7
--- /dev/null
+++ b/src/Analyzers/Infrastructure/BuildCopContext.cs
@@ -0,0 +1,32 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Concurrent;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Experimental;
+
+internal sealed class BuildCopContext(BuildAnalyzerTracingWrapper analyzer, BuildCopCentralContext buildCopCentralContext) : IBuildCopContext
+{
+    public void RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction evaluatedPropertiesAction)
+    {
+        void WrappedEvaluatedPropertiesAction(EvaluatedPropertiesContext context)
+        {
+            using var _ = analyzer.StartSpan();
+            evaluatedPropertiesAction(context);
+        }
+
+        buildCopCentralContext.RegisterEvaluatedPropertiesAction(WrappedEvaluatedPropertiesAction);
+    }
+
+    public void RegisterParsedItemsAction(ParsedItemsAction parsedItemsAction)
+    {
+        void WrappedParsedItemsAction(ParsedItemsContext context)
+        {
+            using var _ = analyzer.StartSpan();
+            parsedItemsAction(context);
+        }
+
+        buildCopCentralContext.RegisterParsedItemsAction(WrappedParsedItemsAction);
+    }
+}
diff --git a/src/Analyzers/Infrastructure/BuildAnalysisManager.cs b/src/Analyzers/Infrastructure/BuildCopManager.cs
similarity index 82%
rename from src/Analyzers/Infrastructure/BuildAnalysisManager.cs
rename to src/Analyzers/Infrastructure/BuildCopManager.cs
index 113186bac9d..2153125e9a7 100644
--- a/src/Analyzers/Infrastructure/BuildAnalysisManager.cs
+++ b/src/Analyzers/Infrastructure/BuildCopManager.cs
@@ -19,14 +19,14 @@
 
 namespace Microsoft.Build.Analyzers.Infrastructure;
 
-internal sealed class BuildAnalysisManager : IBuildAnalysisManager
+internal sealed class BuildCopManager : IBuildCopManager
 {
     private readonly List<BuildAnalyzerTracingWrapper> _analyzers = new();
-    private readonly CentralBuildAnalyzerContext _centralContext = new();
+    private readonly BuildCopCentralContext _buildCopCentralContext = new();
 
-    private BuildAnalysisManager() { }
+    private BuildCopManager() { }
 
-    internal static IBuildAnalysisManager Instance => CreateBuildAnalysisManager();
+    internal static IBuildCopManager Instance => CreateBuildAnalysisManager();
 
     public void RegisterAnalyzer(BuildAnalyzer analyzer)
     {
@@ -47,7 +47,7 @@ public void RegisterAnalyzer(BuildAnalyzer analyzer)
         ConfigurationContext configurationContext = ConfigurationContext.Null;
         analyzer.Initialize(configurationContext);
         var wrappedAnalyzer = new BuildAnalyzerTracingWrapper(analyzer);
-        var wrappedContext = new BuildAnalyzerContext(wrappedAnalyzer, _centralContext);
+        var wrappedContext = new BuildCopContext(wrappedAnalyzer, _buildCopCentralContext);
         analyzer.RegisterActions(wrappedContext);
         _analyzers.Add(wrappedAnalyzer);
     }
@@ -70,9 +70,9 @@ public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buil
             new ReadOnlyDictionary<string, string>(propertiesLookup),
             evaluationFinishedEventArgs.ProjectFile!);
 
-        _centralContext.RunEvaluatedPropertiesActions(context);
+        _buildCopCentralContext.RunEvaluatedPropertiesActions(context);
 
-        if (_centralContext.HasParsedItemsActions)
+        if (_buildCopCentralContext.HasParsedItemsActions)
         {
             ProjectRootElement xml = ProjectRootElement.OpenProjectOrSolution(evaluationFinishedEventArgs.ProjectFile!, /*unused*/
                 null, /*unused*/null, _cache, false /*Not explicitly loaded - unused*/);
@@ -80,12 +80,12 @@ public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buil
             ParsedItemsContext parsedItemsContext = new ParsedItemsContext(loggingContext,
                 new ItemsHolder(xml.Items, xml.ItemGroups));
 
-            _centralContext.RunParsedItemsActions(parsedItemsContext);
+            _buildCopCentralContext.RunParsedItemsActions(parsedItemsContext);
         }
     }
 
     // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
-    // should have infra as well, should log to AnalyzersConnectorLogger upon shutdown (if requested)
+    // should have infra as well, should log to BuildCopConnectorLogger upon shutdown (if requested)
     public string CreateTracingStats()
     {
         return string.Join(Environment.NewLine,
@@ -95,9 +95,9 @@ string GetAnalyzerDescriptor(BuildAnalyzer buildAnalyzer)
             => buildAnalyzer.FriendlyName + " (" + buildAnalyzer.GetType() + ")";
     }
 
-    internal static BuildAnalysisManager CreateBuildAnalysisManager()
+    internal static BuildCopManager CreateBuildAnalysisManager()
     {
-        var buildAnalysisManager = new BuildAnalysisManager();
+        var buildAnalysisManager = new BuildCopManager();
         buildAnalysisManager.RegisterAnalyzer(new SharedOutputPathAnalyzer());
         // ... Register other internal analyzers
         return buildAnalysisManager;
diff --git a/src/Analyzers/Infrastructure/ConfigurationProvider.cs b/src/Analyzers/Infrastructure/ConfigurationProvider.cs
index f0935938997..11abc7a75a1 100644
--- a/src/Analyzers/Infrastructure/ConfigurationProvider.cs
+++ b/src/Analyzers/Infrastructure/ConfigurationProvider.cs
@@ -74,7 +74,7 @@ private static Dictionary<string, BuildAnalyzerConfiguration> LoadConfiguration(
     /// </summary>
     /// <param name="analyzerRule"></param>
     /// <returns></returns>
-    public static BuildAnalyzerConfigurationInternal GetMergedConfiguration(BuildAnalysisRule analyzerRule)
+    public static BuildAnalyzerConfigurationInternal GetMergedConfiguration(BuildAnalyzerRule analyzerRule)
     {
         if (!_editorConfig.TryGetValue(analyzerRule.Id, out BuildAnalyzerConfiguration? editorConfig))
         {
diff --git a/src/Analyzers/Infrastructure/IBuildCopContext.cs b/src/Analyzers/Infrastructure/IBuildCopContext.cs
new file mode 100644
index 00000000000..4c6ac35a4ec
--- /dev/null
+++ b/src/Analyzers/Infrastructure/IBuildCopContext.cs
@@ -0,0 +1,10 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Experimental;
+
+public interface IBuildCopContext
+{
+    void RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction evaluatedPropertiesAction);
+    void RegisterParsedItemsAction(ParsedItemsAction parsedItemsAction);
+}
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 8a8cb91f608..a8e59cf6f38 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -629,7 +629,7 @@ ILoggingService InitializeLoggingService()
             {
                 ILoggingService loggingService = CreateLoggingService(
                     AppendDebuggingLoggers(_buildParameters.Loggers),
-                    _buildParameters.BuildAnalysisLoggerFactory,
+                    _buildParameters.BuildCopLoggerFactory,
                     _buildParameters.ForwardingLoggers,
                     _buildParameters.WarningsAsErrors,
                     _buildParameters.WarningsNotAsErrors,
@@ -2947,7 +2947,7 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
         /// </summary>
         private ILoggingService CreateLoggingService(
             IEnumerable<ILogger> loggers,
-            IBuildAnalysisLoggerFactory buildAnalysisLoggerFactory,
+            IBuildCopLoggerFactory buildCopLoggerFactory,
             IEnumerable<ForwardingLoggerRecord> forwardingLoggers,
             ISet<string> warningsAsErrors,
             ISet<string> warningsNotAsErrors,
@@ -2975,11 +2975,11 @@ private ILoggingService CreateLoggingService(
             loggingService.WarningsNotAsErrors = warningsNotAsErrors;
             loggingService.WarningsAsMessages = warningsAsMessages;
 
-            if (buildAnalysisLoggerFactory != null)
+            if (buildCopLoggerFactory != null)
             {
                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]
                 {
-                    buildAnalysisLoggerFactory.CreateBuildAnalysisLogger(
+                    buildCopLoggerFactory.CreateBuildAnalysisLogger(
                         new AnalyzerLoggingContextFactory(loggingService))
                 });
             }
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 697387a5f73..525a335dc37 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -310,7 +310,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             DiscardBuildResults = other.DiscardBuildResults;
             LowPriority = other.LowPriority;
             Question = other.Question;
-            BuildAnalysisLoggerFactory = other.BuildAnalysisLoggerFactory;
+            BuildCopLoggerFactory = other.BuildCopLoggerFactory;
             ProjectCacheDescriptor = other.ProjectCacheDescriptor;
         }
 
@@ -839,7 +839,7 @@ public bool Question
         /// <summary>
         /// Gets or sets a factory for build analysis infrastructure logger
         /// </summary>
-        public IBuildAnalysisLoggerFactory BuildAnalysisLoggerFactory { get; set; }
+        public IBuildCopLoggerFactory BuildCopLoggerFactory { get; set; }
 
         /// <summary>
         /// Gets or sets the project cache description to use for all <see cref="BuildSubmission"/> or <see cref="GraphBuildSubmission"/>
diff --git a/src/Framework/Analyzers/IBuildAnalysisLoggerFactory.cs b/src/Framework/Analyzers/IBuildCopLoggerFactory.cs
similarity index 87%
rename from src/Framework/Analyzers/IBuildAnalysisLoggerFactory.cs
rename to src/Framework/Analyzers/IBuildCopLoggerFactory.cs
index 2f7fae150aa..4d7c3d76d81 100644
--- a/src/Framework/Analyzers/IBuildAnalysisLoggerFactory.cs
+++ b/src/Framework/Analyzers/IBuildCopLoggerFactory.cs
@@ -5,7 +5,7 @@
 
 namespace Microsoft.Build.Experimental;
 
-public interface IBuildAnalysisLoggerFactory
+public interface IBuildCopLoggerFactory
 {
     ILogger CreateBuildAnalysisLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory);
 }
diff --git a/src/Framework/Analyzers/IBuildAnalysisManager.cs b/src/Framework/Analyzers/IBuildCopManager.cs
similarity index 93%
rename from src/Framework/Analyzers/IBuildAnalysisManager.cs
rename to src/Framework/Analyzers/IBuildCopManager.cs
index 8a1a7c0d215..9cc66a52525 100644
--- a/src/Framework/Analyzers/IBuildAnalysisManager.cs
+++ b/src/Framework/Analyzers/IBuildCopManager.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.Experimental;
 
-public interface IBuildAnalysisManager
+public interface IBuildCopManager
 {
     void ProcessEvaluationFinishedEventArgs(
         IBuildAnalysisLoggingContext buildAnalysisContext,
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index e680e3f20c5..35d2241c072 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1185,7 +1185,7 @@ public void InvalidToolsVersionErrors()
                                         graphBuildOptions: null,
                                         lowPriority: false,
                                         question: false,
-                                        buildAnalysisLoggerFactory: null,
+                                        buildCopLoggerFactory: null,
                                         inputResultsCaches: null,
                                         outputResultsCache: null,
                                         saveProjectResult: false,
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 59db32fed19..1cea300db64 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -717,7 +717,7 @@ public static ExitType Execute(
                 string[] inputResultsCaches = null;
                 string outputResultsCache = null;
                 bool question = false;
-                IBuildAnalysisLoggerFactory buildAnalysisLoggerFactory = null;
+                IBuildCopLoggerFactory buildCopLoggerFactory = null;
                 string[] getProperty = Array.Empty<string>();
                 string[] getItem = Array.Empty<string>();
                 string[] getTargetResult = Array.Empty<string>();
@@ -764,7 +764,7 @@ public static ExitType Execute(
 #endif
                                             ref lowPriority,
                                             ref question,
-                                            ref buildAnalysisLoggerFactory,
+                                            ref buildCopLoggerFactory,
                                             ref getProperty,
                                             ref getItem,
                                             ref getTargetResult,
@@ -865,7 +865,7 @@ public static ExitType Execute(
                                     graphBuildOptions,
                                     lowPriority,
                                     question,
-                                    buildAnalysisLoggerFactory,
+                                    buildCopLoggerFactory,
                                     inputResultsCaches,
                                     outputResultsCache,
                                     saveProjectResult: outputPropertiesItemsOrTargetResults,
@@ -1247,7 +1247,7 @@ internal static bool BuildProject(
             GraphBuildOptions graphBuildOptions,
             bool lowPriority,
             bool question,
-            IBuildAnalysisLoggerFactory buildAnalysisLoggerFactory,
+            IBuildCopLoggerFactory buildCopLoggerFactory,
             string[] inputResultsCaches,
             string outputResultsCache,
             bool saveProjectResult,
@@ -1449,7 +1449,7 @@ internal static bool BuildProject(
                     parameters.InputResultsCacheFiles = inputResultsCaches;
                     parameters.OutputResultsCacheFile = outputResultsCache;
                     parameters.Question = question;
-                    parameters.BuildAnalysisLoggerFactory = buildAnalysisLoggerFactory;
+                    parameters.BuildCopLoggerFactory = buildCopLoggerFactory;
 #if FEATURE_REPORTFILEACCESSES
                     parameters.ReportFileAccesses = reportFileAccesses;
 #endif
@@ -2421,7 +2421,7 @@ private static bool ProcessCommandLineSwitches(
 #endif
             ref bool lowPriority,
             ref bool question,
-            ref IBuildAnalysisLoggerFactory buildAnalysisLoggerFactory,
+            ref IBuildCopLoggerFactory buildCopLoggerFactory,
             ref string[] getProperty,
             ref string[] getItem,
             ref string[] getTargetResult,
@@ -2563,7 +2563,7 @@ private static bool ProcessCommandLineSwitches(
 #endif
                                                            ref lowPriority,
                                                            ref question,
-                                                           ref buildAnalysisLoggerFactory,
+                                                           ref buildCopLoggerFactory,
                                                            ref getProperty,
                                                            ref getItem,
                                                            ref getTargetResult,
@@ -2645,7 +2645,7 @@ private static bool ProcessCommandLineSwitches(
 
                     question = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Question);
 
-                    buildAnalysisLoggerFactory = ProcessBuildAnalysisLoggerFactorySwitch(commandLineSwitches);
+                    buildCopLoggerFactory = ProcessBuildAnalysisLoggerFactorySwitch(commandLineSwitches);
 
                     inputResultsCaches = ProcessInputResultsCaches(commandLineSwitches);
 
@@ -2721,11 +2721,11 @@ private static bool ProcessCommandLineSwitches(
             return invokeBuild;
         }
 
-        private static IBuildAnalysisLoggerFactory ProcessBuildAnalysisLoggerFactorySwitch(CommandLineSwitches commandLineSwitches)
+        private static IBuildCopLoggerFactory ProcessBuildAnalysisLoggerFactorySwitch(CommandLineSwitches commandLineSwitches)
         {
             // todo: opt-in behavior: https://github.com/dotnet/msbuild/issues/9723
             bool isAnalysisEnabled = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Analyze);
-            return isAnalysisEnabled ? new BuildAnalysisLoggerFactory() : null;
+            return isAnalysisEnabled ? new BuildCopLoggerFactory() : null;
         }
 
         private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches commandLineSwitches, out string aggregatedParameters)
