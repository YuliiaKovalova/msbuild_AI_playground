diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 370af2c3a2e..9ddf9e96ec1 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -239,7 +239,7 @@ internal sealed class OrderedItemDataCollection
             #region Inner types
 
             /// <summary>
-            /// An efficient multi-value wrapper holding one or more versioned items.
+            /// An efficient multi-value wrapper holding one or more items.
             /// </summary>
             internal struct DictionaryValue
             {
@@ -280,42 +280,24 @@ public void Reset()
                     }
                 }
 
-                /// <summary>
-                /// The version of the containing collection at the time this value was last changed.
-                /// </summary>
-                private int _version;
-
                 /// <summary>
                 /// Holds one value or a list of values.
                 /// </summary>
                 private object _value;
 
-                public DictionaryValue(int version, I item)
+                public DictionaryValue(I item)
                 {
-                    _version = version;
                     _value = item;
                 }
 
-                public void Add(int version, I item)
+                public void Add(I item)
                 {
-                    if (_value is List<I> list)
+                    if (_value is not ImmutableList<I> list)
                     {
-                        if (version != _version)
-                        {
-                            list = new List<I>(list);
-                        }
-                        list.Add(item);
-                    }
-                    else
-                    {
-                        list = new List<I>
-                        {
-                            (I)_value,
-                            item
-                        };
+                        list = ImmutableList<I>.Empty;
+                        list = list.Add((I)_value);
                     }
-                    _version = version;
-                    _value = list;
+                    _value = list.Add(item);
                 }
 
                 public Enumerator GetEnumerator()
@@ -329,11 +311,6 @@ public Enumerator GetEnumerator()
             /// </summary>
             internal sealed class Builder : IEnumerable<ItemData>
             {
-                /// <summary>
-                /// The current version of the collection.
-                /// </summary>
-                private int _version;
-
                 /// <summary>
                 /// The list of items in the collection. Defines the enumeration order.
                 /// </summary>
@@ -344,9 +321,8 @@ internal sealed class Builder : IEnumerable<ItemData>
                 /// </summary>
                 private ImmutableDictionary<string, DictionaryValue>.Builder _dictionaryBuilder;
 
-                internal Builder(int version, ImmutableList<ItemData>.Builder listBuilder, ImmutableDictionary<string, DictionaryValue>.Builder dictionaryBuilder)
+                internal Builder(ImmutableList<ItemData>.Builder listBuilder, ImmutableDictionary<string, DictionaryValue>.Builder dictionaryBuilder)
                 {
-                    _version = version;
                     _listBuilder = listBuilder;
                     _dictionaryBuilder = dictionaryBuilder;
                 }
@@ -468,7 +444,7 @@ public void RemoveMatchingItems(ItemSpec<P, I> itemSpec)
                 /// </summary>
                 public OrderedItemDataCollection ToImmutable()
                 {
-                    return new OrderedItemDataCollection(_version, _listBuilder.ToImmutable(), _dictionaryBuilder?.ToImmutable());
+                    return new OrderedItemDataCollection(_listBuilder.ToImmutable(), _dictionaryBuilder?.ToImmutable());
                 }
 
                 private IDictionary<string, DictionaryValue> GetOrCreateDictionaryBuilder()
@@ -490,20 +466,18 @@ private void AddToDictionary(I item)
 
                     if (!_dictionaryBuilder.TryGetValue(key, out var dictionaryValue))
                     {
-                        dictionaryValue = new DictionaryValue(_version, item);
+                        dictionaryValue = new DictionaryValue(item);
+                    }
+                    else
+                    {
+                        dictionaryValue.Add(item);
                     }
-                    dictionaryValue.Add(_version, item);
                     _dictionaryBuilder[key] = dictionaryValue;
                 }
             }
 
             #endregion
 
-            /// <summary>
-            /// The current version of the collection.
-            /// </summary>
-            private int _version;
-
             /// <summary>
             /// The list of items in the collection. Defines the enumeration order.
             /// </summary>
@@ -514,9 +488,8 @@ private void AddToDictionary(I item)
             /// </summary>
             private ImmutableDictionary<string, DictionaryValue> _dictionary;
 
-            private OrderedItemDataCollection(int version, ImmutableList<ItemData> list, ImmutableDictionary<string, DictionaryValue> dictionary)
+            private OrderedItemDataCollection(ImmutableList<ItemData> list, ImmutableDictionary<string, DictionaryValue> dictionary)
             {
-                _version = version;
                 _list = list;
                 _dictionary = dictionary;
             }
@@ -526,7 +499,7 @@ private OrderedItemDataCollection(int version, ImmutableList<ItemData> list, Imm
             /// </summary>
             public static Builder CreateBuilder()
             {
-                return new Builder(0, ImmutableList.CreateBuilder<ItemData>(), null);
+                return new Builder(ImmutableList.CreateBuilder<ItemData>(), null);
             }
 
             /// <summary>
@@ -534,7 +507,7 @@ public static Builder CreateBuilder()
             /// </summary>
             public Builder ToBuilder()
             {
-                return new Builder(_version + 1, _list.ToBuilder(), _dictionary?.ToBuilder());
+                return new Builder(_list.ToBuilder(), _dictionary?.ToBuilder());
             }
         }
 
