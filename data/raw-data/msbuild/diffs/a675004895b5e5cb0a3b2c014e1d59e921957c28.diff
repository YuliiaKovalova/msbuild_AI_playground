diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 06614c42125..dfbc51d1d8b 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -187,7 +187,7 @@ private static BuildEventContext CreateInitialContext(
         /// <summary>
         /// Log that the project has finished
         /// </summary>
-        /// <param name="success">Did the build succeede or not</param>
+        /// <param name="success">Did the build succeed or not</param>
         internal void LogProjectFinished(bool success)
         {
             ErrorUtilities.VerifyThrow(this.IsValid, "invalid");
diff --git a/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs b/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs
new file mode 100644
index 00000000000..d971d49d838
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs
@@ -0,0 +1,74 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+
+namespace Microsoft.Build.Logging
+{
+    using System;
+    using System.Collections.Generic;
+    using System.IO;
+    using System.Linq;
+    using System.Text;
+    using System.Threading.Tasks;
+    using Microsoft.Build.Framework.Logging;
+    using Microsoft.Build.Shared;
+
+    /// <summary>
+    /// Implements <see cref="IBinaryReader"/> on a <see cref="System.IO.BinaryReader "/>.
+    /// </summary>
+    internal class BinaryReaderWrapper : IBinaryReader
+    {
+        private readonly BinaryReader _binaryReader;
+
+        // This is used to verify that events deserialization is not overreading expected size.
+        private readonly TransparentReadStream _readStream;
+
+        public BinaryReaderWrapper(BinaryReader binaryReader)
+        {
+            this._readStream = TransparentReadStream.EnsureTransparentReadStream(binaryReader.BaseStream);
+
+            this._binaryReader = binaryReader.BaseStream == _readStream
+                ? binaryReader
+                : new BinaryReader(_readStream);
+        }
+
+        int IBinaryReader.BytesCountAllowedToReadRemaining => _readStream.BytesCountAllowedToReadRemaining;
+
+        int? IBinaryReader.BytesCountAllowedToRead { set => _readStream.BytesCountAllowedToRead = value; }
+
+        long IBinaryReader.Position => _readStream.Position;
+
+        public const int MaxBulkRead7BitLength = 10;
+        private int[] resultInt = new int[MaxBulkRead7BitLength];
+
+        int[] IBinaryReader.BulkRead7BitEncodedInt(int numIntegers)
+        {
+            for (int i = 0; i < numIntegers; i++)
+            {
+                resultInt[i] = _binaryReader.Read7BitEncodedInt();
+            }
+
+            return resultInt;
+        }
+
+        void IBinaryReader.Seek(int count, SeekOrigin current) => _binaryReader.BaseStream.Seek(count, current);
+
+        Stream IBinaryReader.Slice(int numBytes) => _binaryReader.BaseStream.Slice(numBytes);
+
+        int IBinaryReader.Read7BitEncodedInt() => _binaryReader.Read7BitEncodedInt();
+
+        byte IBinaryReader.ReadByte() => _binaryReader.ReadByte();
+
+        byte[] IBinaryReader.ReadBytes(int count) => _binaryReader.ReadBytes(count);
+
+        bool IBinaryReader.ReadBoolean() => _binaryReader.ReadBoolean();
+
+        long IBinaryReader.ReadInt64() => _binaryReader.ReadInt64();
+
+        string IBinaryReader.ReadString() => _binaryReader.ReadString();
+
+        int IBinaryReader.ReadInt32() => _binaryReader.ReadInt32();
+
+        void IDisposable.Dispose() => _binaryReader.Dispose();
+    }
+}
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 074844ffd7c..02e706b378a 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -26,10 +26,12 @@ namespace Microsoft.Build.Logging
     /// </summary>
     public class BuildEventArgsReader : IBuildEventArgsReaderNotifications, IDisposable
     {
+        /// <summary>
+        /// This is used to keep the stream alive.  Use <see cref="_binaryReader"/> instead.
+        /// </summary>
+        private readonly BinaryReader _baseBinaryReader;
+
         private readonly IBinaryReader _binaryReader;
-        private readonly BinaryReader _basedBinaryReader;
-        // This is used to verify that events deserialization is not overreading expected size.
-        // private readonly TransparentReadStream _readStream;
         private readonly int _fileFormatVersion;
         private long _recordNumber = 0;
         private bool _skipUnknownEvents;
@@ -70,9 +72,14 @@ public class BuildEventArgsReader : IBuildEventArgsReaderNotifications, IDisposa
         /// <param name="fileFormatVersion">The file format version of the log file being read.</param>
         public BuildEventArgsReader(BinaryReader binaryReader, int fileFormatVersion)
         {
+#if FALSE
             this._binaryReader = new BufferedBinaryReader(binaryReader.BaseStream);
+#else
+            this._binaryReader = new BinaryReaderWrapper(binaryReader);
+#endif
+
             this._fileFormatVersion = fileFormatVersion;
-            this._basedBinaryReader = binaryReader;
+            this._baseBinaryReader = binaryReader;
         }
 
         /// <summary>
@@ -136,7 +143,7 @@ public void Dispose()
             if (CloseInput)
             {
                 _binaryReader.Dispose();
-                _basedBinaryReader.Dispose();
+                _baseBinaryReader.Dispose();
             }
         }
 
@@ -1449,21 +1456,23 @@ private void SetCommonFields(BuildEventArgs buildEventArgs, BuildEventArgsFields
 
         private BuildEventContext ReadBuildEventContext()
         {
-            int nodeId = ReadInt32();
-            int projectContextId = ReadInt32();
-            int targetId = ReadInt32();
-            int taskId = ReadInt32();
-            int submissionId = ReadInt32();
-            int projectInstanceId = ReadInt32();
+            var result = this._binaryReader.BulkRead7BitEncodedInt(_fileFormatVersion > 1 ? 7 : 6);
+
+            int nodeId = result[0];
+            int projectContextId = result[1];
+            int targetId = result[2];
+            int taskId = result[3];
+            int submissionId = result[4];
+            int projectInstanceId = result[5];
 
             // evaluationId was introduced in format version 2
             int evaluationId = BuildEventContext.InvalidEvaluationId;
             if (_fileFormatVersion > 1)
             {
-                evaluationId = ReadInt32();
+                evaluationId = result[6];
             }
 
-            var result = new BuildEventContext(
+            return new BuildEventContext(
                 submissionId,
                 nodeId,
                 evaluationId,
@@ -1471,7 +1480,6 @@ private BuildEventContext ReadBuildEventContext()
                 projectContextId,
                 targetId,
                 taskId);
-            return result;
         }
 
         private IDictionary<string, string>? ReadStringDictionary()
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 294d96bae2c..b441cd05e7a 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -7,6 +7,7 @@
 using System.Globalization;
 using System.IO;
 using System.Linq;
+using System.Runtime.CompilerServices;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
@@ -1076,15 +1077,34 @@ private void WriteProperties(IEnumerable properties)
             nameValueListBuffer.Clear();
         }
 
+        private byte[] buildEventContextBuffer = new byte[5 * 7];
+
         private void Write(BuildEventContext buildEventContext)
         {
-            Write(buildEventContext.NodeId);
-            Write(buildEventContext.ProjectContextId);
-            Write(buildEventContext.TargetId);
-            Write(buildEventContext.TaskId);
-            Write(buildEventContext.SubmissionId);
-            Write(buildEventContext.ProjectInstanceId);
-            Write(buildEventContext.EvaluationId);
+            int index = 0;
+            Span<int> ints =
+            [
+                buildEventContext.NodeId,
+                buildEventContext.ProjectContextId,
+                buildEventContext.TargetId,
+                buildEventContext.TaskId,
+                buildEventContext.SubmissionId,
+                buildEventContext.ProjectInstanceId,
+                buildEventContext.EvaluationId,
+            ];
+
+            foreach(int num in ints)
+            {
+                uint v = (uint)num;   // support negative numbers
+                while (v >= 0x80)
+                {
+                    buildEventContextBuffer[index++] = (byte)(v | 0x80);
+                    v >>= 7;
+                }
+
+                buildEventContextBuffer[index++] = (byte)v;
+            }
+            this.binaryWriter.Write(buildEventContextBuffer, 0, index);
         }
 
         private void Write(IEnumerable<KeyValuePair<string, string>> keyValuePairs)
@@ -1198,9 +1218,12 @@ private void Write(BinaryLogRecordKind kind)
             Write((int)kind);
         }
 
-        internal void Write(int value)
+        private byte[] int7Buffer = new byte[5];
+
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+        private void Write(int value)
         {
-            BinaryWriterExtensions.Write7BitEncodedInt(binaryWriter, value);
+            BinaryWriterExtensions.Write7BitEncodedInt(binaryWriter, value, int7Buffer);
         }
 
         private void Write(long value)
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
new file mode 100644
index 00000000000..4dd9afa0300
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
@@ -0,0 +1,114 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Logging
+{
+    /// <summary>
+    /// A wrapper stream that allows position tracking and forward seeking.
+    /// </summary>
+    internal sealed class TransparentReadStream : Stream
+    {
+        private readonly Stream _stream;
+        private long _position;
+        private long _maxAllowedPosition = long.MaxValue;
+
+        public static Stream EnsureSeekableStream(Stream stream)
+        {
+            if (stream.CanSeek)
+            {
+                return stream;
+            }
+
+            if (!stream.CanRead)
+            {
+                throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_MustBeReadable"));
+            }
+
+            return new TransparentReadStream(stream);
+        }
+
+        public static TransparentReadStream EnsureTransparentReadStream(Stream stream)
+        {
+            if (stream is TransparentReadStream transparentReadStream)
+            {
+                return transparentReadStream;
+            }
+
+            if (!stream.CanRead)
+            {
+                throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_MustBeReadable"));
+            }
+
+            return new TransparentReadStream(stream);
+        }
+
+        private TransparentReadStream(Stream stream)
+        {
+            _stream = stream;
+        }
+
+        public int? BytesCountAllowedToRead
+        {
+            set { _maxAllowedPosition = value.HasValue ? _position + value.Value : long.MaxValue; }
+        }
+
+        // if we haven't constrained the allowed read size - do not report it being unfinished either.
+        public int BytesCountAllowedToReadRemaining =>
+            _maxAllowedPosition == long.MaxValue ? 0 : (int)(_maxAllowedPosition - _position);
+
+        public override bool CanRead => _stream.CanRead;
+        public override bool CanSeek => true;
+        public override bool CanWrite => false;
+        public override long Length => _stream.Length;
+        public override long Position
+        {
+            get => _position;
+            set => this.SkipBytes(value - _position);
+        }
+
+        public override void Flush()
+        {
+            _stream.Flush();
+        }
+
+        public override int Read(byte[] buffer, int offset, int count)
+        {
+            if (_position + count > _maxAllowedPosition)
+            {
+                count = (int)(_maxAllowedPosition - _position);
+            }
+
+            int cnt = _stream.Read(buffer, offset, count);
+            _position += cnt;
+            return cnt;
+        }
+
+        public override long Seek(long offset, SeekOrigin origin)
+        {
+            if (origin != SeekOrigin.Current)
+            {
+                throw new NotSupportedException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_SeekNonOrigin"));
+            }
+
+            this.SkipBytes(offset);
+
+            return _position;
+        }
+
+        public override void SetLength(long value)
+        {
+            throw new NotSupportedException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_SetLengthUnsupported"));
+        }
+
+        public override void Write(byte[] buffer, int offset, int count)
+        {
+            throw new NotSupportedException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_WriteUnsupported"));
+        }
+
+        public override void Close() => _stream.Close();
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 068000050b2..933006f4b4e 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -170,6 +170,7 @@
     <Compile Include="FileAccess\ReportedFileOperation.cs" />
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
+    <Compile Include="Logging\BinaryLogger\BinaryReaderWrapper.cs" />
     <Compile Include="Logging\BinaryLogger\BufferedBinaryReader.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
diff --git a/src/Shared/BinaryWriterExtensions.cs b/src/Shared/BinaryWriterExtensions.cs
index 5f7a0046a6e..8f954991cb8 100644
--- a/src/Shared/BinaryWriterExtensions.cs
+++ b/src/Shared/BinaryWriterExtensions.cs
@@ -55,18 +55,37 @@ public static void WriteTimestamp(this BinaryWriter writer, DateTime timestamp)
 #if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
 #endif
-        public static void Write7BitEncodedInt(this BinaryWriter writer, int value)
+        public static void Write7BitEncodedInt(this BinaryWriter writer, int value, byte[]? buffer = null)
         {
-            // Write out an int 7 bits at a time.  The high bit of the byte,
-            // when on, tells reader to continue reading more bytes.
-            uint v = (uint)value;   // support negative numbers
-            while (v >= 0x80)
+            if (buffer == null)
             {
-                writer.Write((byte)(v | 0x80));
-                v >>= 7;
+                // Write out an int 7 bits at a time.  The high bit of the byte,
+                // when on, tells reader to continue reading more bytes.
+                uint v = (uint)value;   // support negative numbers
+                while (v >= 0x80)
+                {
+                    writer.Write((byte)(v | 0x80));
+                    v >>= 7;
+                }
+
+                writer.Write((byte)v);
+                return;
             }
+            else
+            {
+                // Write out an int 7 bits at a time.  The high bit of the byte,
+                // when on, tells reader to continue reading more bytes.
+                int index = 0;
+                uint v = (uint)value;   // support negative numbers
+                while (v >= 0x80)
+                {
+                    buffer[index++] = (byte)(v | 0x80);
+                    v >>= 7;
+                }
 
-            writer.Write((byte)v);
+                buffer[index++] = (byte)v;
+                writer.Write(buffer, 0, index);
+            }
         }
 
 #if !TASKHOST
