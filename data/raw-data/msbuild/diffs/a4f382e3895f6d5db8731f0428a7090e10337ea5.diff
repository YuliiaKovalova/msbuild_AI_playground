diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 493e9c821c0..10406b2bd6f 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -174,7 +174,7 @@ public void BuildsWhileBuildIsRunningOnServer()
 
                 foreach (Process p in Process.GetProcesses())
                 {
-                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}");
+                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
                     p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
                 }
 
@@ -189,7 +189,7 @@ public void BuildsWhileBuildIsRunningOnServer()
                 _output.WriteLine("next batch");
                 foreach (Process p in Process.GetProcesses())
                 {
-                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}");
+                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
                     p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
                 }
 
@@ -208,10 +208,10 @@ public void BuildsWhileBuildIsRunningOnServer()
             {
                 foreach (string? file in Directory.GetFiles(Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder")))
                 {
-                    _output.WriteLine($"New file: {file}");
+                    _output.WriteLine($"New file: {file}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
                     foreach (string line in File.ReadLines(file!))
                     {
-                        _output.WriteLine(line);
+                        _output.WriteLine(line + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
                     }
                 }
 
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 004f97e80b2..31b9ed35465 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -107,7 +107,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                     }
                 };
 
-                outputHelper?.WriteLine("Executing [{0} {1}]", process, parameters);
+                outputHelper?.WriteLine("Executing [{0} {1}]; TID: {2}, timestamp:{3}", process, parameters, System.Threading.Thread.CurrentThread.ManagedThreadId, System.DateTime.Now.Ticks);
                 Console.WriteLine("Executing [{0} {1}]", process, parameters);
 
                 p.Start();
@@ -121,8 +121,8 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
             }
 
             outputHelper?.WriteLine("==== OUTPUT ====");
-            outputHelper?.WriteLine(output);
-            outputHelper?.WriteLine("Process ID is " + pid + "\r\n");
+            outputHelper?.WriteLine(output + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
+            outputHelper?.WriteLine("Process ID is " + pid + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}" + "\r\n");
             outputHelper?.WriteLine("==============");
 
             Console.WriteLine("==== OUTPUT ====");
