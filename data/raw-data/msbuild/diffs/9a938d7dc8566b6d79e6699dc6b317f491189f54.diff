diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 25198f6a823..e5a3c9e8304 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -47,7 +47,7 @@ public override bool Execute()
 
             if (translationTable != null)
             {
-                Log.LogMessage($"Current Project's Translation Table: {string.Join(";", translationTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
+                Log.LogMessage(MessageImportance.Low, $"Current Project's Translation Table: {string.Join(";", translationTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
             }
 
             AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
@@ -69,7 +69,7 @@ public override bool Execute()
 
                 if (childPlatformLookupTable != null)
                 {
-                    Log.LogMessage($"Referenced Project's Translation Table: {string.Join(";", childPlatformLookupTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
+                    Log.LogMessage(MessageImportance.Low, $"Referenced Project's Translation Table: {string.Join(";", childPlatformLookupTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
                 }
 
                 HashSet<string> childPlatforms = new HashSet<string>();
@@ -84,16 +84,16 @@ public override bool Execute()
                 if (childPlatforms.Contains(CurrentProjectPlatform))
                 {
                     buildChildProjectAs = CurrentProjectPlatform;
-                    Log.LogMessage($"Child and parent have the same platform.");
+                    Log.LogMessage(MessageImportance.Low, $"Child and parent have the same platform.");
                 }
-                // If the referenced project has a translation table, it came from the ProjectReference item's metadata.
-                // Prioritize that over the current project's translation table.
+                // Prioritize PlatformLookupTable **metadata** attached to the ProjectReference item
+                // before the current project's table. We do this to allow per-ProjectReference fine tuning.
                 else if (childPlatformLookupTable != null &&
                         childPlatformLookupTable.ContainsKey(CurrentProjectPlatform) &&
                         childPlatforms.Contains(childPlatformLookupTable[CurrentProjectPlatform]))
                 {
                     buildChildProjectAs = childPlatformLookupTable[CurrentProjectPlatform];
-                    Log.LogMessage($"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the referenced project's translation table.");
+                    Log.LogMessage(MessageImportance.Low, $"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the referenced project's translation table.");
                 }
                 // Current project's translation table follows
                 else if (translationTable != null &&
@@ -101,13 +101,13 @@ public override bool Execute()
                         childPlatforms.Contains(translationTable[CurrentProjectPlatform]))
                 {
                     buildChildProjectAs = translationTable[CurrentProjectPlatform];
-                    Log.LogMessage($"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the current project's translation table.");
+                    Log.LogMessage(MessageImportance.Low, $"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the current project's translation table.");
                 }
                 // AnyCPU if possible
                 else if (childPlatforms.Contains("AnyCPU"))
                 {
                     buildChildProjectAs = "AnyCPU";
-                    Log.LogMessage($"Defaulting to AnyCPU.");
+                    Log.LogMessage(MessageImportance.Low, $"Defaulting to AnyCPU.");
                 }
                 else
                 {
@@ -117,7 +117,7 @@ public override bool Execute()
                 }
 
                 AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildChildProjectAs);
-                Log.LogMessage($"Project '{AssignedProjectsWithPlatform[i].ItemSpec}' will build with Platform: '{buildChildProjectAs}'");
+                Log.LogMessage(MessageImportance.Low, $"Project '{AssignedProjectsWithPlatform[i].ItemSpec}' will build with Platform: '{buildChildProjectAs}'");
             }
 
             return !Log.HasLoggedErrors;
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index e33c292a363..172c4089e8b 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1607,10 +1607,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ====================================================================================
                                         _GetProjectReferencePlatformProperties
 
-    If a project is opted in via $(EnableDynamicPlatformResolution), this target builds the GetPlatforms
-    target of all existing references to get a list of all possible platforms of the referenced projects. 
-    Calls the GetCompatiblePlatform task to determine the most compatible platform for each project.
-    This prevents overbuilding a project when 'AnyCPU' is available, for example.
+    If a project is opted in via $(EnableDynamicPlatformResolution), this target calls the 
+    GetCompatiblePlatform task on all ProjectReference items to determine the most compatible 
+    platform for each project. It then sets SetPlatform metadata on each ProjectReference.
+    This prevents overbuilding a project when 'AnyCPU' is available.
 
     ======================================================================================
   -->
@@ -1623,6 +1623,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <UseDefaultPlatformLookupTables Condition="'$(UseDefaultPlatformLookupTables)' == ''">true</UseDefaultPlatformLookupTables>
   </PropertyGroup>
 
+  <!-- This target skips VS builds because they already supply Platform and
+       Configuration information. -->
   <Target Name="_GetProjectReferencePlatformProperties"
           Condition="'$(EnableDynamicPlatformResolution)' == 'true'
                      and '$(BuildingInsideVisualStudio)' != 'true'
