diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 60bc769d75f..2c6592add66 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -389,7 +389,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <PropertyGroup Condition="'$(MSBuildCopyMarkerName)' == ''">
     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>
     <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->
-    <MSBuildCopyMarkerName Condition="'$(MSBuildCopyMarkerName.Length)' &gt; '17'">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString("X8"))</MSBuildCopyMarkerName>
+    <ShortenAndHashProjectName ProjectName="$(MSBuildCopyMarkerName)">
+      <Output TaskParameter="ShortProjectName" ItemName="MSBuildCopyMarkerName" />
+    </ShortenAndHashProjectName>
     <MSBuildCopyMarkerName>$(MSBuildCopyMarkerName).Up2Date</MSBuildCopyMarkerName>
   </PropertyGroup>
 
@@ -5579,7 +5581,6 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         File="$(IntermediateOutputPath)$(CleanFile)"
         Lines="@(_CleanUniqueRemainingFileWritesAfterIncrementalClean)"
         Condition="'@(_CleanUnfilteredPriorFileWrites)'!='@(_CleanUniqueRemainingFileWritesAfterIncrementalClean)'"
-        Encoding="Unicode"
         Overwrite="true"/>
 
   </Target>
diff --git a/src/Tasks/ShortenAndHashProjectName.cs b/src/Tasks/ShortenAndHashProjectName.cs
new file mode 100644
index 00000000000..e28573a9e70
--- /dev/null
+++ b/src/Tasks/ShortenAndHashProjectName.cs
@@ -0,0 +1,35 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.Utilities;
+
+#nullable disable
+
+namespace Microsoft.Build.Tasks
+{
+    // For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash.
+    public sealed class ShortenAndHashProjectName : Task
+    {
+        [Required]
+        public string ProjectName { get; set; }
+
+        [Output]
+        public string ShortProjectName { get; set; }
+
+        public override bool Execute()
+        {
+            if (ProjectName.Length <= 17)
+            {
+                ShortProjectName = ProjectName;
+                return true;
+            }
+
+            // if the last char of string is a surrogate, cutting it in half would confuse encoder
+            int length = char.IsHighSurrogate(ProjectName[7]) ? 9 : 8;
+            string truncatedProjectName = ProjectName.Substring(0, length);
+            string originalProjectNameHash = StableStringHash(ProjectName);
+            ShortProjectName = $"{truncatedProjectName}.{originalProjectNameHash}".ToString("X8");
+            return true;
+    }
+}
\ No newline at end of file
