diff --git a/src/Build/Definition/ProjectImportPathMatch.cs b/src/Build/Definition/ProjectImportPathMatch.cs
index 7e739caa1b8..581b944a7bf 100644
--- a/src/Build/Definition/ProjectImportPathMatch.cs
+++ b/src/Build/Definition/ProjectImportPathMatch.cs
@@ -11,9 +11,13 @@ namespace Microsoft.Build.Evaluation
 {
     /// <summary>
     /// Class representing a reference to a project import path with property fall-back
+    /// This class is immutable.
+    /// If mutability would be needed in the future, it should be implemented via copy-on-write or
+    ///  a DeepClone would need to be added (and called from DeepClone methods of owning types)
     /// </summary>
     internal class ProjectImportPathMatch : ITranslatable
     {
+        // Those are effectively readonly and should stay so. Cannot be marked readonly due to ITranslatable
         private string _propertyName;
         private string _msBuildPropertyFormat;
         private List<string> _searchPaths;
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index 28a66373972..bb8eb35a1f0 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -953,7 +953,7 @@ private void InitializeProperties(ILoggingService loggingServices, BuildEventCon
 
                 // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the
                 // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.
-                string subToolsetVersion = this.GenerateSubToolsetVersion();
+                string subToolsetVersion = GenerateSubToolsetVersion();
                 SubToolset subToolset;
                 ICollection<ProjectPropertyInstance> subToolsetProperties = null;
 
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index e164bd78ff8..45a01a5e21d 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -564,7 +564,8 @@ internal ProjectInstance(Evaluation.Project.Data data, string directory, string
             this.SubToolsetVersion = data.SubToolsetVersion;
             this.TaskRegistry = data.TaskRegistry?.DeepClone();
 
-            // If the task registry uses toolset identical to the one in data instance - deep clone it just once.
+            // If the task registry uses toolset identical to the one in data instance - deep clone it just once,
+            // by reusing the already cloned Toolset member of TaskRegistry.
             this.Toolset = data.TaskRegistry?.Toolset == data.Toolset
                 ? this.TaskRegistry?.Toolset
                 : data.Toolset?.DeepClone();
@@ -647,7 +648,8 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject
                         ProjectItemDefinitionInstance>)that).AfterTargets, StringComparer.OrdinalIgnoreCase);
 
                 this.TaskRegistry = that.TaskRegistry.DeepClone();
-                // If the task registry uses toolset identical to the one in project instance - deep clone it just once.
+                // If the task registry uses toolset identical to the one in data instance - deep clone it just once,
+                // by reusing the already cloned Toolset member of TaskRegistry.
                 this.Toolset = that.TaskRegistry?.Toolset == that.Toolset
                     ? this.TaskRegistry?.Toolset
                     : that.Toolset?.DeepClone();
