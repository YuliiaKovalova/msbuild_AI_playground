diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 318f41032aa..681e0d155c4 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -635,6 +635,7 @@ public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
 
         public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
         {
+            throw new NotImplementedException();
         }
 
         #endregion
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 3b1f2874d95..75fcdbfbbbc 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -270,7 +270,7 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFileFromMemory(metaprojectArgs.ProjectFile, metaprojectArgs.metaprojectXml);
             }
-            else if (e is ResponseFileUsedEventArgs responseFileArgs && responseFileArgs.ResponseFilePath != "")
+            else if (e is ResponseFileUsedEventArgs responseFileArgs && responseFileArgs.ResponseFilePath != null)
             {
                 projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
             }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 5f55ae02c82..fda33ca1341 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -732,14 +732,8 @@ private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
 
         private BuildEventArgs ReadResponseFileUsedEventArgs()
         {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
-
             var responseFilePathName = ReadDeduplicatedString();
-
             var e = new ResponseFileUsedEventArgs(responseFilePathName);
-
-            SetCommonFields(e, fields);
-
             return e;
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 50dc011b060..7dd97286859 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -428,13 +428,13 @@ private void Write(BuildMessageEventArgs e)
         {
             switch (e)
             {
+                case ResponseFileUsedEventArgs responseFileUsed: Write(responseFileUsed); break;
                 case TaskParameterEventArgs taskParameter: Write(taskParameter); break;
                 case ProjectImportedEventArgs projectImported: Write(projectImported); break;
                 case TargetSkippedEventArgs targetSkipped: Write(targetSkipped); break;
                 case PropertyReassignmentEventArgs propertyReassignment: Write(propertyReassignment); break;
                 case TaskCommandLineEventArgs taskCommandLine: Write(taskCommandLine); break;
                 case UninitializedPropertyReadEventArgs uninitializedPropertyRead: Write(uninitializedPropertyRead); break;
-                case ResponseFileUsedEventArgs responseFileUsed: Write(responseFileUsed); break;
                 case EnvironmentVariableReadEventArgs environmentVariableRead: Write(environmentVariableRead); break;
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: Write(propertyInitialValueSet); break;
                 case CriticalBuildMessageEventArgs criticalBuildMessage: Write(criticalBuildMessage); break;
@@ -509,8 +509,9 @@ private void Write(EnvironmentVariableReadEventArgs e)
         }
         private void Write(ResponseFileUsedEventArgs e)
         {
+            // TODO: Apparently this causes the build to appear as failed on the binlogger.
+            // I assume it is because the binlogger doesn't know how to interpret it??
             Write(BinaryLogRecordKind.ResponseFileUsed);
-            WriteMessageFields(e, writeImportance: true);
             WriteDeduplicatedString(e.ResponseFilePath);
         }
         private void Write(TaskCommandLineEventArgs e)
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index aac7eb742ba..07154a581da 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1340,7 +1340,7 @@ string[] commandLine
                     }
 
                     // Log a message for every response file and include it in log
-                    foreach (var responseFilePath in s_includedResponseFiles)
+                    foreach (var responseFilePath in s_includedResponseFiles.ToList())
                     {
                         messagesToLogInBuildLoggers = messagesToLogInBuildLoggers.Append(
                             new BuildManager.DeferredBuildMessage(
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 7dcb332958f..7d518897aa6 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -1243,9 +1243,7 @@ private BuildMessageEventArgs ReadBuildMessageEventFromStream(ITranslator transl
 
         private ResponseFileUsedEventArgs ReadResponseFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
         {
-            MessageImportance importance = MessageImportance.Normal;
-            translator.TranslateEnum(ref importance, (int)importance);
-            string responseFilePath = "";
+            string responseFilePath = String.Empty;
             translator.Translate(ref responseFilePath);
             ResponseFileUsedEventArgs buildEvent = new ResponseFileUsedEventArgs(responseFilePath);
             return buildEvent;
