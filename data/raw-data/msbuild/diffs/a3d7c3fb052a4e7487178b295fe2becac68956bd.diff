diff --git a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
index 79418bb00ce..8f162834b18 100644
--- a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
@@ -163,6 +163,47 @@ public void FileExists_WhenFileDoesNotExist_ReturnsFalse()
             actualProperty.EvaluatedValue.ShouldBe("False");
         }
 
+        [Fact]
+        public void SystemIODirectoryExists_WhenDirectoryExists_ReturnsTrue()
+        {
+            using TestEnvironment env = TestEnvironment.Create();
+            string testDirPath = Path.Combine(env.DefaultTestDirectory.Path, "TestDir");
+
+            Directory.CreateDirectory(testDirPath);
+
+            string projectContent = $@"
+                <Project>
+                    <PropertyGroup>
+                        <TestDirPath>{testDirPath.Replace(@"\", @"\\")}</TestDirPath>
+                        <DirExists>$([System.IO.Directory]::Exists($(TestDirPath)))</DirExists>
+                    </PropertyGroup>
+                </Project>";
+
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
+
+            ProjectProperty actualProperty = project.GetProperty("DirExists");
+            actualProperty.EvaluatedValue.ShouldBe("True");
+        }
+
+        [Fact]
+        public void SystemIODirectoryExists_WhenDirectoryDoesNotExist_ReturnsFalse()
+        {
+            const string projectContent = @"
+            <Project>
+                <PropertyGroup>
+                    <TestDirPath>TestDir</TestDirPath>
+                    <DirExists>$([System.IO.Directory]::Exists($(TestDirPath)))</DirExists>
+                </PropertyGroup>
+            </Project>";
+
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
+
+            ProjectProperty actualProperty = project.GetProperty("DirExists");
+            actualProperty.EvaluatedValue.ShouldBe("False");
+        }
+
         [Fact]
         public void DirectoryExists_WhenDirectoryExists_ReturnsTrue()
         {
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index fc992aef817..fb0cf5d5376 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -319,12 +319,12 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Environment::Version", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::WorkingSet", environmentType);
 
+                        availableStaticMethods.TryAdd("System.IO.Directory::Exists", directoryType);
                         availableStaticMethods.TryAdd("System.IO.Directory::GetDirectories", directoryType);
                         availableStaticMethods.TryAdd("System.IO.Directory::GetFiles", directoryType);
                         availableStaticMethods.TryAdd("System.IO.Directory::GetLastAccessTime", directoryType);
                         availableStaticMethods.TryAdd("System.IO.Directory::GetLastWriteTime", directoryType);
-                        availableStaticMethods.TryAdd("System.IO.Directory::GetParent", directoryType);
-                        availableStaticMethods.TryAdd("System.IO.Directory::Exists", directoryType);
+                        availableStaticMethods.TryAdd("System.IO.Directory::GetParent", directoryType);                      
 
                         availableStaticMethods.TryAdd("System.IO.File::Exists", fileType);
                         availableStaticMethods.TryAdd("System.IO.File::GetCreationTime", fileType);
