diff --git a/.editorconfig b/.editorconfig
index e64a0519df7..8c3c8e8b8c7 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -415,6 +415,18 @@ dotnet_diagnostic.IDE0301.severity = suggestion
 dotnet_diagnostic.IDE0305.severity = suggestion
 dotnet_diagnostic.IDE0306.severity = suggestion
 
+# Private member is unused
+dotnet_diagnostic.IDE0051.severity = suggestion
+
+# Private member can be removed as the value assigned to it is never read
+dotnet_diagnostic.IDE0052.severity = suggestion
+
+# Accessibility modifiers unnecessary
+dotnet_diagnostic.IDE0040.severity = suggestion
+
+# Lambda expression can be simplified
+dotnet_diagnostic.IDE0350.severity = suggestion
+
 # Temporarily disable SA1010 "Opening square brackets should not be preceded by a space" until https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/3687 is fixed
 dotnet_diagnostic.SA1010.severity = none
 
diff --git a/eng/BootStrapMsBuild.targets b/eng/BootStrapMsBuild.targets
index d4330ba658d..0d2419cd47c 100644
--- a/eng/BootStrapMsBuild.targets
+++ b/eng/BootStrapMsBuild.targets
@@ -63,14 +63,34 @@
     </ItemGroup>
   </Target>
 
+  <!-- The task allows to find VS bits on machine. These files will be used as a source for patching on the top of them. -->
+  <UsingTask TaskName="LocateVisualStudioTask"
+             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
+             TaskFactory="RoslynCodeTaskFactory">
+    <Task>
+      <Code Source="$(MSBuildThisFileDirectory)..\src\MSBuild.Bootstrap.Utils\Tasks\LocateVisualStudioTask.cs" Language="cs" />
+    </Task>
+  </UsingTask>
   <Target Name="BootstrapFull" DependsOnTargets="CleanBootstrapFolder;SetBinPaths;GatherNuGetDependencies">
+
+      <!-- MSBuildSdkResolver bits from stage1 if available. The folder is absent if the current runtime if .NET. -->
+      <PropertyGroup>
+        <DefaultSdkResolverPath>$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver</DefaultSdkResolverPath>
+      </PropertyGroup>
+      <LocateVisualStudioTask Condition="!Exists('$(DefaultSdkResolverPath)')">
+        <Output TaskParameter="VsInstallPath" PropertyName="AvailableVsInstallPath" />
+      </LocateVisualStudioTask>
     <ItemGroup>
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\*.targets" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\*.props" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.dll" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.exe" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\FileTracker*.dll" />
-      <SdkResolverFiles Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\**\*.*" />
+
+      <!-- If the bits from stage1 are available we take them otherwise copy from the local VS instance. -->
+      <SdkResolverFiles Include="$(DefaultSdkResolverPath)\**\*.*" Condition="'$(AvailableVsInstallPath)' == ''" />
+      <SdkResolverFiles Include="$(AvailableVsInstallPath)\MSBuild\Current\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\**\*.*" Condition="'$(AvailableVsInstallPath)' != ''" />
+
       <NuGetSdkResolverManifest Include="$(RepoRoot)src\MSBuild\SdkResolvers\VS\Microsoft.Build.NuGetSdkResolver.xml" />
       <InstalledSdks Include="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Sdks\**\*.*" />
 
diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs
new file mode 100644
index 00000000000..97baea864a1
--- /dev/null
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs
@@ -0,0 +1,76 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+using System.Text;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+
+namespace MSBuild.Bootstrap.Utils.Tasks
+{
+    public class LocateVisualStudioTask : ToolTask
+    {
+        private StringBuilder _standardOutput = new StringBuilder();
+
+        [Output]
+        public string VsInstallPath { get; set; }
+
+        protected override string ToolName => "powershell.exe";
+
+        protected override string GenerateFullPathToTool() => ToolName;
+
+        protected override string GenerateCommandLineCommands()
+        {
+            string script = @"
+                $vsWherePath = ""${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe""
+                if (Test-Path $vsWherePath) {
+                    try {
+                        $vsPath = & $vsWherePath -latest -property installationPath
+                        if ($vsPath -and (Test-Path $vsPath)) {
+                            Write-Output $vsPath
+                            exit 0
+                        }
+                    } catch {
+                        Write-Warning ""VSWhere failed: $_""
+                    }
+                }
+
+                # No installation found
+                exit 1
+            ";
+
+            script = script.Replace("\"", "\\\"");
+
+            return $"-NoProfile -ExecutionPolicy Bypass -Command \"{script}\"";
+        }
+
+        public override bool Execute()
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                Log.LogMessage(MessageImportance.High, "Not running on Windows. Skipping Visual Studio detection.");
+                return true;
+            }
+
+            _ = ExecuteTool(ToolName, string.Empty, GenerateCommandLineCommands());
+
+            if (!Log.HasLoggedErrors)
+            {
+                VsInstallPath = _standardOutput.ToString().Trim();
+            }
+
+            return true;
+        }
+
+        // Override to capture standard output
+        protected override void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance)
+        {
+            if (!string.IsNullOrWhiteSpace(singleLine))
+            {
+                _ = _standardOutput.AppendLine(singleLine);
+            }
+
+            base.LogEventsFromTextOutput(singleLine, messageImportance);
+        }
+    }
+}
