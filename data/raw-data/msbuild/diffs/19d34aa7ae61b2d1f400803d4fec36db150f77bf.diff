diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 58a4b26a555..4cf1d3ec5f2 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -929,6 +929,16 @@ private async Task<BuildEngineResult> BuildProjectFilesInParallelAsync(string[]
                         {
                             overallSuccess = false;
                         }
+
+                        if (!string.IsNullOrEmpty(results[i].SchedulerInducedError))
+                        {
+                            LoggingContext.LogErrorFromText(
+                                subcategoryResourceName: null,
+                                errorCode: null,
+                                helpKeyword: null,
+                                file: new BuildEventFileInfo(ProjectFileOfTaskNode, LineNumberOfTaskNode, ColumnNumberOfTaskNode),
+                                message: results[i].SchedulerInducedError);
+                        }
                     }
 
                     ErrorUtilities.VerifyThrow(results.Length == projectFileNames.Length || overallSuccess == false, "The number of results returned {0} cannot be less than the number of project files {1} unless one of the results indicated failure.", results.Length, projectFileNames.Length);
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 5b672934922..3c1aa0491c5 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1832,22 +1832,15 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
                     : string.Join(";", request.Targets));
 
             // Issue a failed build result to have the msbuild task marked as failed and thus stop the build
-            BuildResult result = new BuildResult(request, new InvalidOperationException(errorMessage));
+            BuildResult result = new BuildResult(request);
             result.SetOverallResult(false);
 
+            // Log an error to have something useful displayed to the user and to avoid having a failed build with 0 errors
+            result.SchedulerInducedError = errorMessage;
+
             var response = GetResponseForResult(nodeForResults, request, result);
             responses.Add(response);
 
-            // Log an error to have something displayed to the user and to avoid having a failed build with 0 errors
-            // todo Search if there's a way to have the error automagically logged in response to the failed build result
-            _componentHost.LoggingService.LogErrorFromText(
-                NewBuildEventContext(),
-                null,
-                null,
-                null,
-                new BuildEventFileInfo(requestConfig.ProjectFullPath),
-                errorMessage);
-
             return false;
 
             BuildEventContext NewBuildEventContext()
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 95a3d097e03..8eb05af2ec0 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -114,6 +114,8 @@ public class BuildResult : INodePacket, IBuildResults
         /// </summary>
         private ProjectInstance _projectStateAfterBuild;
 
+        private string _schedulerInducedError;
+
         /// <summary>
         /// Constructor for serialization.
         /// </summary>
@@ -470,6 +472,16 @@ internal List<string> DefaultTargets
             { _defaultTargets = value; }
         }
 
+        /// <summary>
+        /// Container used to transport errors from the scheduler (issued while computing a build result)
+        /// to the TaskHost that has the proper logging context (project id, target id, task id, file location)
+        /// </summary>
+        internal string SchedulerInducedError
+        {
+            get => _schedulerInducedError;
+            set => _schedulerInducedError = value;
+        }
+
         /// <summary>
         /// Indexer which sets or returns results for the specified target
         /// </summary>
@@ -564,6 +576,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _baseOverallResult);
             translator.Translate(ref _projectStateAfterBuild, ProjectInstance.FactoryForDeserialization);
             translator.Translate(ref _savedCurrentDirectory);
+            translator.Translate(ref _schedulerInducedError);
             translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase);
         }
 
