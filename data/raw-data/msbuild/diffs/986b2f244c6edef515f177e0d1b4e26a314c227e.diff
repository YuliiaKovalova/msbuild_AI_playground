diff --git a/documentation/wiki/Binary-Log.md b/documentation/wiki/Binary-Log.md
index d18badefef0..1252255ea99 100644
--- a/documentation/wiki/Binary-Log.md
+++ b/documentation/wiki/Binary-Log.md
@@ -161,6 +161,8 @@ public sealed class BinaryLogReaderErrorEventArgs : EventArgs
 /// <summary>
 /// Receives recoverable errors during reading.
 /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
+/// In case of <see cref="ReaderErrorType.UnknownEventData"/> this is raised before returning the structured representation of a build event
+/// that has some extra unknown data in the binlog. In case of other error types this event is raised and the offending build event is skipped and not returned.
 /// </summary>
 event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
 ```
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index a88867058b0..d91afc7fee0 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -301,7 +301,7 @@ private static void AssertBinlogsHaveEqualContent(string firstPath, string secon
 
             void AddArchiveFile(Dictionary<string, string> files, ArchiveFileEventArgs arg)
             {
-                ArchiveFile embedFile = arg.ArchiveData.ToArchString();
+                ArchiveFile embedFile = arg.ArchiveData.ToArchiveFile();
                 files.Add(embedFile.FullPath, embedFile.Content);
             }
 
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index 19c68a081ea..d15c2a63c95 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -38,10 +38,8 @@ void DeferredInitialize(
     internal interface IBinaryLogReplaySource :
         IEventSource,
         IRawLogEventsSource,
-        IBuildEventStringsReader,
-        IEmbeddedContentSource,
-        IBuildFileReader,
-        IBinaryLogReaderErrors
+        IBuildEventArgsReaderNotifications,
+        IEmbeddedContentSource
     { }
 
     /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index c2c3c533054..d421cf154b8 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -410,7 +410,7 @@ private void ReadEmbeddedContent(BinaryLogRecordKind recordKind)
                         {
                             projectImportsCollector.AddFileFromMemory(
                                 resultFile.FullPath,
-                                resultFile.ToArchString().Content,
+                                resultFile.ToArchiveFile().Content,
                                 makePathAbsolute: false,
                                 entryCreationStamp: entry.LastWriteTime);
                         }
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
index 9dc48ac32b5..762bf9a0616 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
@@ -26,7 +26,7 @@ public abstract class ArchiveData : IDisposable
         /// Materializes the whole content of the embedded file in memory as a string.
         /// </summary>
         /// <returns></returns>
-        public abstract ArchiveFile ToArchString();
+        public abstract ArchiveFile ToArchiveFile();
 
         public virtual void Dispose()
         { }
@@ -47,8 +47,8 @@ public ArchiveFile(string fullPath, string content)
         /// </summary>
         public string Content { get; }
 
-        /// <inheritdoc cref="ArchiveData.ToArchString" />
-        public override ArchiveFile ToArchString()
+        /// <inheritdoc cref="ArchiveData.ToArchiveFile" />
+        public override ArchiveFile ToArchiveFile()
             => this;
     }
 
@@ -77,8 +77,8 @@ internal static ArchiveStream From(ZipArchiveEntry entry)
             return new ArchiveStream(entry.FullName, new StreamReader(entry.Open()));
         }
 
-        /// <inheritdoc cref="ArchiveData.ToArchString" />
-        public override ArchiveFile ToArchString()
+        /// <inheritdoc cref="ArchiveData.ToArchiveFile" />
+        public override ArchiveFile ToArchiveFile()
         {
             var content = ContentReader.ReadToEnd();
             ContentReader.Dispose();
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
index f3f38ed1624..697cad442f8 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
@@ -32,7 +32,7 @@ public static Action<ArchiveFileEventArgs> ToArchiveFileHandler(this Action<Stri
     {
         return args =>
         {
-            var archiveFile = args.ArchiveData.ToArchString();
+            var archiveFile = args.ArchiveData.ToArchiveFile();
             var pathArgs = new StringReadEventArgs(archiveFile.FullPath);
             stringHandler(pathArgs);
             var contentArgs = new StringReadEventArgs(archiveFile.Content);
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
index 2d121fc6dc1..3f7cfc090fe 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
@@ -10,6 +10,8 @@ public interface IBinaryLogReaderErrors
         /// <summary>
         /// Receives recoverable errors during reading.
         /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
+        /// In case of <see cref="ReaderErrorType.UnknownEventData"/> this is raised before returning the structured representation of a build event
+        /// that has some extra unknown data in the binlog. In case of other error types this event is raised and the offending build event is skipped and not returned.
         /// </summary>
         event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
     }
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs
index c849d88580b..f25d62ea3e5 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs
@@ -12,7 +12,7 @@ public interface IBuildFileReader
     /// When subscriber is OK with greedy reading entire content of the file and is interested only in the individual strings (e.g. for sensitive data redaction purposes),
     ///  it can simplify subscribing to this event, by using handler with same signature as handler for <see cref="IBuildEventStringsReader.StringReadDone"/> and wrapping it via
     /// <see cref="ArchiveFileEventArgsExtensions.ToArchiveFileHandler"/> extension.
-    ///
+    /// </summary>
     /// <example>
     /// <code>
     /// private void OnStringReadDone(StringReadEventArgs e)
@@ -27,6 +27,5 @@ public interface IBuildFileReader
     /// }
     /// </code>
     /// </example>
-    /// </summary>
     public event Action<ArchiveFileEventArgs>? ArchiveFileEncountered;
 }
