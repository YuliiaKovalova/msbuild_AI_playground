diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 676c89573d0..27b9e28457c 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -26,6 +26,7 @@
 using Microsoft.Build.Utilities;
 
 using BackendNativeMethods = Microsoft.Build.BackEnd.NativeMethods;
+using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -164,7 +165,7 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
                 {
                     // If we're able to connect to such a process, send a packet requesting its termination
                     CommunicationsUtilities.Trace("Shutting down node with pid = {0}", nodeProcess.Id);
-                    NodeContext nodeContext = new NodeContext(0, nodeProcess.Id, nodeStream, factory, terminateNode);
+                    NodeContext nodeContext = new NodeContext(0, nodeProcess, nodeStream, factory, terminateNode);
                     nodeContext.SendData(new NodeBuildComplete(false /* no node reuse */));
                     nodeStream.Dispose();
                 }
@@ -230,7 +231,7 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
                     {
                         // Connection successful, use this node.
                         CommunicationsUtilities.Trace("Successfully connected to existed node {0} which is PID {1}", nodeId, nodeProcess.Id);
-                        return new NodeContext(nodeId, nodeProcess.Id, nodeStream, factory, terminateNode);
+                        return new NodeContext(nodeId, nodeProcess, nodeStream, factory, terminateNode);
                     }
                 }
             }
@@ -268,20 +269,20 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
 #endif
 
                 // Create the node process
-                int msbuildProcessId = LaunchNode(msbuildLocation, commandLineArgs);
-                _processesToIgnore.Add(GetProcessesToIgnoreKey(hostHandshake, msbuildProcessId));
+                Process msbuildProcess = LaunchNode(msbuildLocation, commandLineArgs);
+                _processesToIgnore.Add(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id));
 
                 // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
                 // gotten back from CreateProcess is that of the debugger, which causes this to try to connect
                 // to the debugger process. Instead, use MSBUILDDEBUGONSTART=1
 
                 // Now try to connect to it.
-                Stream nodeStream = TryConnectToProcess(msbuildProcessId, TimeoutForNewNodeCreation, hostHandshake);
+                Stream nodeStream = TryConnectToProcess(msbuildProcess.Id, TimeoutForNewNodeCreation, hostHandshake);
                 if (nodeStream != null)
                 {
                     // Connection successful, use this node.
-                    CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcessId);
-                    return new NodeContext(nodeId, msbuildProcessId, nodeStream, factory, terminateNode);
+                    CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcess.Id);
+                    return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);
                 }
             }
 
@@ -417,7 +418,7 @@ private Stream TryConnectToProcess(int nodeProcessId, int timeout, Handshake han
         /// <summary>
         /// Creates a new MSBuild process
         /// </summary>
-        private int LaunchNode(string msbuildLocation, string commandLineArgs)
+        private Process LaunchNode(string msbuildLocation, string commandLineArgs)
         {
             // Should always have been set already.
             ErrorUtilities.VerifyThrowInternalLength(msbuildLocation, nameof(msbuildLocation));
@@ -516,7 +517,7 @@ private int LaunchNode(string msbuildLocation, string commandLineArgs)
                 }
 
                 CommunicationsUtilities.Trace("Successfully launched {1} node with PID {0}", process.Id, exeName);
-                return process.Id;
+                return process;
             }
             else
             {
@@ -574,7 +575,7 @@ out processInfo
                 }
 
                 CommunicationsUtilities.Trace("Successfully launched {1} node with PID {0}", childProcessId, exeName);
-                return childProcessId;
+                return Process.GetProcessById(childProcessId);
             }
         }
 
@@ -623,9 +624,9 @@ internal class NodeContext
             private int _nodeId;
 
             /// <summary>
-            /// The process id
+            /// The node process.
             /// </summary>
-            private int _processId;
+            private readonly Process _process;
 
             /// <summary>
             /// An array used to store the header byte for each packet when read.
@@ -645,7 +646,7 @@ internal class NodeContext
             /// <summary>
             /// Node was requested to terminate.
             /// </summary>
-            private bool _closeSent;
+            private bool _isExiting;
 
             /// <summary>
             /// Per node read buffers
@@ -655,12 +656,12 @@ internal class NodeContext
             /// <summary>
             /// Constructor.
             /// </summary>
-            public NodeContext(int nodeId, int processId,
+            public NodeContext(int nodeId, Process process,
                 Stream nodePipe,
                 INodePacketFactory factory, NodeContextTerminateDelegate terminateDelegate)
             {
                 _nodeId = nodeId;
-                _processId = processId;
+                _process = process;
                 _clientToServerStream = nodePipe;
                 _serverToClientStream = nodePipe;
                 _packetFactory = factory;
@@ -785,7 +786,7 @@ public void SendData(INodePacket packet)
 #else
                             _serverToClientStream.WriteAsync(writeStreamBuffer, i, lengthToWrite);
 #endif
-                            return;
+                            break;
                         }
                         else
                         {
@@ -801,7 +802,7 @@ public void SendData(INodePacket packet)
 #endif
                         }
                     }
-                    _closeSent = packet is NodeBuildComplete buildCompletePacket && !buildCompletePacket.PrepareForReuse;
+                    _isExiting = packet is NodeBuildComplete buildCompletePacket && !buildCompletePacket.PrepareForReuse;
                 }
                 catch (IOException e)
                 {
@@ -819,7 +820,6 @@ public void SendData(INodePacket packet)
             /// </summary>
             private void Close()
             {
-                _processId = -1;
                 _clientToServerStream.Dispose();
                 if (!object.ReferenceEquals(_clientToServerStream, _serverToClientStream))
                 {
@@ -833,49 +833,33 @@ private void Close()
             /// </summary>
             public async Task WaitForExitAsync()
             {
-                int processId = _processId;
-                if (processId != -1)
+                // Wait for the process to exit.
+                if (_isExiting)
                 {
-                    Process childProcess;
-                    try
-                    {
-                        childProcess = Process.GetProcessById(processId);
-                    }
-                    catch (System.ArgumentException)
-                    {
-                        // The process has terminated already.
-                        return;
-                    }
-
-                    // Wait for the process to terminate.
-                    CommunicationsUtilities.Trace("Waiting for node with pid = {0} to terminate", processId);
+                    CommunicationsUtilities.Trace("Waiting for node with pid = {0} to exit", _process.Id);
 
-                    if (_closeSent)
+                    // .NET 5 introduces a real WaitForExitAsyc.
+                    // This is a poor man's implementation that uses polling.
+                    int timeout = TimeoutForWaitForExit;
+                    int delay = 5;
+                    while (timeout > 0)
                     {
-                        // .NET 5 introduces a real WaitForExitAsyc.
-                        // This is a poor man's implementation that uses polling.
-                        int timeout = TimeoutForWaitForExit;
-                        int delay = 5;
-                        while (timeout > 0)
+                        bool exited = _process.WaitForExit(milliseconds: 0);
+                        if (exited)
                         {
-                            bool exited = childProcess.WaitForExit(milliseconds: 0);
-                            if (exited)
-                            {
-                                return;
-                            }
-                            timeout -= delay;
-                            await Task.Delay(delay).ConfigureAwait(false);
-
-                            // Double delay up to 500ms.
-                            delay = Math.Min(delay * 2, 500);
+                            return;
                         }
-                    }
+                        timeout -= delay;
+                        await Task.Delay(delay).ConfigureAwait(false);
 
-                    // Kill the child and do a blocking wait.
-                    CommunicationsUtilities.Trace("Killing node with pid = {0}", processId);
-                    childProcess.Kill();
-                    childProcess.WaitForExit();
+                        // Double delay up to 500ms.
+                        delay = Math.Min(delay * 2, 500);
+                    }
                 }
+
+                // Kill the child and do a blocking wait.
+                CommunicationsUtilities.Trace("Killing node with pid = {0}", _process.Id);
+                _process.KillTree(timeout: -1);
             }
 
 #if FEATURE_APM
@@ -899,17 +883,16 @@ private bool ProcessHeaderBytesRead(int bytesRead)
             {
                 if (bytesRead != _headerByte.Length)
                 {
-                    CommunicationsUtilities.Trace(_nodeId, "COMMUNICATIONS ERROR (HRC) Node: {0} Process: {1} Bytes Read: {2} Expected: {3}", _nodeId, _processId, bytesRead, _headerByte.Length);
+                    CommunicationsUtilities.Trace(_nodeId, "COMMUNICATIONS ERROR (HRC) Node: {0} Process: {1} Bytes Read: {2} Expected: {3}", _nodeId, _process.Id, bytesRead, _headerByte.Length);
                     try
                     {
-                        Process childProcess = Process.GetProcessById(_processId);
-                        if (childProcess?.HasExited != false)
+                        if (_process.HasExited)
                         {
-                            CommunicationsUtilities.Trace(_nodeId, "   Child Process {0} has exited.", _processId);
+                            CommunicationsUtilities.Trace(_nodeId, "   Child Process {0} has exited.", _process.Id);
                         }
                         else
                         {
-                            CommunicationsUtilities.Trace(_nodeId, "   Child Process {0} is still running.", _processId);
+                            CommunicationsUtilities.Trace(_nodeId, "   Child Process {0} is still running.", _process.Id);
                         }
                     }
                     catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 2a98b2fdf32..37a0bb91438 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -24,6 +24,7 @@
 using Microsoft.Build.Utilities;
 
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
+using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Build.BackEnd
 {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index b14c97d1565..ba6fe6ae510 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -28,6 +28,7 @@
 
   <ItemGroup>
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
 
     <PackageReference Include="System.Collections.Immutable" />
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
diff --git a/src/Utilities/ProcessExtensions.cs b/src/Utilities/ProcessExtensions.cs
index 04d6afb3f36..886b069eb4f 100644
--- a/src/Utilities/ProcessExtensions.cs
+++ b/src/Utilities/ProcessExtensions.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.Utilities
 {
-    internal static class ProcessExtensions
+    public static class ProcessExtensions
     {
         public static void KillTree(this Process process, int timeout)
         {
@@ -77,10 +77,16 @@ private static void GetAllChildIdsUnix(int parentId, ISet<int> children)
 
         private static void KillProcessUnix(int processId)
         {
-            RunProcessAndWaitForExit(
-                "kill",
-                $"-TERM {processId}",
-                out string _);
+            try
+            {
+                using Process process = Process.GetProcessById(processId);
+                process.Kill();
+            }
+            catch (ArgumentException)
+            {
+                // Process already terminated.
+                return;
+            }
         }
 
         private static int RunProcessAndWaitForExit(string fileName, string arguments, out string stdout)
