diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 1bacf84bbe7..a20aa36c571 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -1469,7 +1469,9 @@ private static object LookupProperty(IPropertyProvider<T> properties, string pro
             /// </summary>
             private static object LookupProperty(IPropertyProvider<T> properties, string propertyName, int startIndex, int endIndex, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)
             {
-                T property = properties.GetProperty(propertyName, startIndex, endIndex);
+                string propertyNameValue = propertyName.Substring(startIndex, endIndex - startIndex + 1);
+                T property = properties.GetProperty(propertyNameValue, 0, propertyNameValue.Length - 1);
+                EnvironmentUtilities.EnvironmentVariablesUsedAsProperties[propertyNameValue] = Environment.GetEnvironmentVariable(propertyNameValue);
 
                 object propertyValue;
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 64a26269a78..9aeecc7347e 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -362,12 +362,14 @@ private BuildEventArgs ReadBuildFinishedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
             var succeeded = ReadBoolean();
+            var environmentProperties = ReadStringDictionary();
 
             var e = new BuildFinishedEventArgs(
                 fields.Message,
                 fields.HelpKeyword,
                 succeeded,
-                fields.Timestamp);
+                fields.Timestamp,
+                environmentVariables: environmentProperties);
             SetCommonFields(e, fields);
             return e;
         }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index e9db5412a24..4ea9d105985 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -259,6 +259,7 @@ private void Write(BuildFinishedEventArgs e)
             Write(BinaryLogRecordKind.BuildFinished);
             WriteBuildEventArgsFields(e);
             Write(e.Succeeded);
+            Write(EnvironmentUtilities.EnvironmentVariablesUsedAsProperties);
         }
 
         private void Write(ProjectEvaluationStartedEventArgs e)
diff --git a/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
index 2bf43e98406..eca867cd1cc 100644
--- a/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
@@ -27,7 +27,7 @@ public void EventArgsCtors()
             buildFinishedEvent = new BuildFinishedEventArgs("{0}", "HelpKeyword", true, new DateTime(), "Message");
             buildFinishedEvent = new BuildFinishedEventArgs(null, null, true);
             buildFinishedEvent = new BuildFinishedEventArgs(null, null, true, new DateTime());
-            buildFinishedEvent = new BuildFinishedEventArgs(null, null, true, new DateTime(), null);
+            buildFinishedEvent = new BuildFinishedEventArgs(null, null, true, new DateTime(), messageArgs: null);
         }
 
         /// <summary>
diff --git a/src/Framework/BuildFinishedEventArgs.cs b/src/Framework/BuildFinishedEventArgs.cs
index 1647591416c..1e3accf4353 100644
--- a/src/Framework/BuildFinishedEventArgs.cs
+++ b/src/Framework/BuildFinishedEventArgs.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 
 #nullable disable
@@ -25,6 +26,11 @@ public class BuildFinishedEventArgs : BuildStatusEventArgs
         /// </summary>
         private bool succeeded;
 
+        /// <summary>
+        /// Environment variable-derived properties
+        /// </summary>
+        private IDictionary<string, string> environmentVariables;
+
         /// <summary>
         /// Default constructor
         /// </summary>
@@ -65,7 +71,7 @@ public BuildFinishedEventArgs
             bool succeeded,
             DateTime eventTimestamp
         )
-            : this(message, helpKeyword, succeeded, eventTimestamp, null)
+            : this(message, helpKeyword, succeeded, eventTimestamp, messageArgs: null)
         {
             // do nothing
         }
@@ -91,6 +97,30 @@ params object[] messageArgs
             this.succeeded = succeeded;
         }
 
+        /// <summary>
+        /// Constructor which allows environment variable-derived properties to be set
+        /// </summary>
+        /// <param name="message">text message</param>
+        /// <param name="helpKeyword">help keyword </param>
+        /// <param name="succeeded">True indicates a successful build</param>
+        /// <param name="eventTimestamp">Timestamp when the event was created</param>
+        /// <param name="environmentVariables">Properties derived from environment variables</param>
+        /// <param name="messageArgs">message arguments</param>
+        public BuildFinishedEventArgs
+        (
+            string message,
+            string helpKeyword,
+            bool succeeded,
+            DateTime eventTimestamp,
+            IDictionary<string, string> environmentVariables,
+            params object[] messageArgs
+        )
+            : base(message, helpKeyword, "MSBuild", eventTimestamp, messageArgs)
+        {
+            this.succeeded = succeeded;
+            this.environmentVariables = environmentVariables;
+        }
+
 
         #region CustomSerializationToStream
         /// <summary>
@@ -125,5 +155,16 @@ public bool Succeeded
                 return succeeded;
             }
         }
+
+        /// <summary>
+        /// Gets all environment variables read when trying to evaluate properties along with their values.
+        /// </summary>
+        public IDictionary<string, string> EnvironmentVariables
+        {
+            get
+            {
+                return environmentVariables;
+            }
+        }
     }
 }
diff --git a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
index e69de29bb2d..813fa92a36d 100644
--- a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -0,0 +1,2 @@
+Microsoft.Build.Framework.BuildFinishedEventArgs.BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, System.DateTime eventTimestamp, System.Collections.Generic.IDictionary<string, string> environmentVariables, params object[] messageArgs) -> void
+Microsoft.Build.Framework.BuildFinishedEventArgs.EnvironmentVariables.get -> System.Collections.Generic.IDictionary<string, string>
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index e69de29bb2d..813fa92a36d 100644
--- a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -0,0 +1,2 @@
+Microsoft.Build.Framework.BuildFinishedEventArgs.BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, System.DateTime eventTimestamp, System.Collections.Generic.IDictionary<string, string> environmentVariables, params object[] messageArgs) -> void
+Microsoft.Build.Framework.BuildFinishedEventArgs.EnvironmentVariables.get -> System.Collections.Generic.IDictionary<string, string>
\ No newline at end of file
diff --git a/src/Shared/EnvironmentUtilities.cs b/src/Shared/EnvironmentUtilities.cs
index e9e0482619f..0e875a72fe3 100644
--- a/src/Shared/EnvironmentUtilities.cs
+++ b/src/Shared/EnvironmentUtilities.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
 #nullable disable
@@ -14,5 +15,7 @@ internal static partial class EnvironmentUtilities
 
         public static bool Is64BitOperatingSystem =>
             Environment.Is64BitOperatingSystem;
+
+        public static Dictionary<string, string> EnvironmentVariablesUsedAsProperties { get; } = new();
     }
 }
