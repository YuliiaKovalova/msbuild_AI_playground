diff --git a/eng/Packages.props b/eng/Packages.props
index 2f3f2796438..30ae007906c 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -11,7 +11,6 @@
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.15" />
     <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="1.16.30" />
     <PackageReference Update="Microsoft.Win32.Registry" Version="4.3.0" />
-    <PackageReference Update="Newtonsoft.Json" Version="9.0.1" />
     <PackageReference Update="NuGet.Build.Tasks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="PdbGit" Version="3.0.41" />
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 950e93323a5..ae1d70e5aa7 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -48,8 +48,8 @@ public void TestSerializeBool()
         public void TestSerializeByte()
         {
             byte val = 0x55;
-            HelperTestSimpleType((byte) 0, val);
-            HelperTestSimpleType(val, (byte) 0);
+            HelperTestSimpleType((byte)0, val);
+            HelperTestSimpleType(val, (byte)0);
         }
 
         /// <summary>
@@ -59,8 +59,8 @@ public void TestSerializeByte()
         public void TestSerializeShort()
         {
             short val = 0x55AA;
-            HelperTestSimpleType((short) 0, val);
-            HelperTestSimpleType(val, (short) 0);
+            HelperTestSimpleType((short)0, val);
+            HelperTestSimpleType(val, (short)0);
         }
 
         /// <summary>
@@ -70,8 +70,8 @@ public void TestSerializeShort()
         public void TestSerializeLong()
         {
             long val = 0x55AABBCCDDEE;
-            HelperTestSimpleType((long) 0, val);
-            HelperTestSimpleType(val, (long) 0);
+            HelperTestSimpleType((long)0, val);
+            HelperTestSimpleType(val, (long)0);
         }
 
         /// <summary>
@@ -81,8 +81,8 @@ public void TestSerializeLong()
         public void TestSerializeDouble()
         {
             double val = 3.1416;
-            HelperTestSimpleType((double) 0, val);
-            HelperTestSimpleType(val, (double) 0);
+            HelperTestSimpleType((double)0, val);
+            HelperTestSimpleType(val, (double)0);
         }
 
         /// <summary>
@@ -103,8 +103,8 @@ public void TestSerializeTimeSpan()
         public void TestSerializeInt()
         {
             int val = 0x55AA55AA;
-            HelperTestSimpleType((int) 0, val);
-            HelperTestSimpleType(val, (int) 0);
+            HelperTestSimpleType((int)0, val);
+            HelperTestSimpleType(val, (int)0);
         }
 
         /// <summary>
@@ -125,7 +125,7 @@ public void TestSerializeString()
         public void TestSerializeStringArray()
         {
             HelperTestArray(new string[] { }, StringComparer.Ordinal);
-            HelperTestArray(new string[] {"foo", "bar"}, StringComparer.Ordinal);
+            HelperTestArray(new string[] { "foo", "bar" }, StringComparer.Ordinal);
             HelperTestArray(null, StringComparer.Ordinal);
         }
 
@@ -160,10 +160,10 @@ public void TestSerializeDateTime()
         public void TestSerializeEnum()
         {
             TranslationDirection value = TranslationDirection.ReadFromStream;
-            TranslationHelpers.GetWriteTranslator().TranslateEnum(ref value, (int) value);
+            TranslationHelpers.GetWriteTranslator().TranslateEnum(ref value, (int)value);
 
             TranslationDirection deserializedValue = TranslationDirection.WriteToStream;
-            TranslationHelpers.GetReadTranslator().TranslateEnum(ref deserializedValue, (int) deserializedValue);
+            TranslationHelpers.GetReadTranslator().TranslateEnum(ref deserializedValue, (int)deserializedValue);
 
             Assert.Equal(value, deserializedValue);
         }
@@ -265,7 +265,7 @@ public void TestSerializeWithFactoryNull()
         [Fact]
         public void TestSerializeArray()
         {
-            DerivedClass[] value = new DerivedClass[] {new DerivedClass(1, 2), new DerivedClass(3, 4)};
+            DerivedClass[] value = new DerivedClass[] { new DerivedClass(1, 2), new DerivedClass(3, 4) };
             TranslationHelpers.GetWriteTranslator().TranslateArray(ref value);
 
             DerivedClass[] deserializedValue = null;
@@ -295,7 +295,7 @@ public void TestSerializeArrayNull()
         [Fact]
         public void TestSerializeArrayWithFactory()
         {
-            BaseClass[] value = new BaseClass[] {new BaseClass(1), new BaseClass(2)};
+            BaseClass[] value = new BaseClass[] { new BaseClass(1), new BaseClass(2) };
             TranslationHelpers.GetWriteTranslator().TranslateArray(ref value, BaseClass.FactoryForDeserialization);
 
             BaseClass[] deserializedValue = null;
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index 0bd6dbc004f..8c62a178e05 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -1011,6 +1011,10 @@ public void GetObjectData(SerializationInfo info, StreamingContext context)
             info.AddValue("remapped", remappedFrom);
         }
 
+        /// <summary>
+        /// Reads/writes this class
+        /// </summary>
+        /// <param name="translator"></param>
         public void Translate(ITranslator translator)
         {
             translator.Translate(ref asAssemblyName);
diff --git a/src/Shared/TranslatorHelpers.cs b/src/Shared/TranslatorHelpers.cs
index 5524d802659..1b316dcd564 100644
--- a/src/Shared/TranslatorHelpers.cs
+++ b/src/Shared/TranslatorHelpers.cs
@@ -6,6 +6,7 @@
 using System.Configuration.Assemblies;
 using System.Globalization;
 using System.Reflection;
+using AssemblyHashAlgorithm = System.Configuration.Assemblies.AssemblyHashAlgorithm;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -214,7 +215,7 @@ public static void Translate(this ITranslator translator, ref AssemblyName assem
             AssemblyNameFlags flags = default;
             ProcessorArchitecture processorArchitecture = default;
             CultureInfo cultureInfo = null;
-            System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm = default;
+            AssemblyHashAlgorithm hashAlgorithm = default;
             AssemblyVersionCompatibility versionCompatibility = default;
             string codeBase = null;
 
diff --git a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
index 2c804fa0320..120adbb9ed4 100644
--- a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
+++ b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
@@ -8,6 +8,7 @@
 using System.Linq;
 using System.Reflection;
 using System.Runtime.Serialization.Formatters.Binary;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
@@ -740,9 +741,55 @@ public void VerifyAssemblyNameExSerializationWithRemappedFrom()
             assemblyNameDeserialized.RemappedFromEnumerator.Count().ShouldBe(1);
             assemblyNameDeserialized.RemappedFromEnumerator.First().ShouldBe(assemblyRemappedFrom);
         }
-    }
-}
 
+        [Theory]
+        [InlineData("System.Xml")]
+        [InlineData("System.XML, Version=2.0.0.0")]
+        [InlineData("System.Xml, Culture=de-DE")]
+        [InlineData("System.Xml, Version=10.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a, Retargetable=Yes")]
+        [InlineData("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
+        public void VerifyAssemblyNameExSerializationByTranslator(string assemblyName)
+        {
+            AssemblyNameExtension assemblyNameOriginal = new AssemblyNameExtension(assemblyName);
+            AssemblyNameExtension assemblyNameDeserialized = null;
+
+            MemoryStream serializationStream = new MemoryStream();
+            ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(serializationStream);
+
+            writeTranslator.Translate(ref assemblyNameOriginal, (ITranslator t) => new AssemblyNameExtension(t));
+
+            serializationStream.Seek(0, SeekOrigin.Begin);
+            ITranslator readTranslator = BinaryTranslator.GetReadTranslator(serializationStream, null);
+
+            readTranslator.Translate(ref assemblyNameDeserialized, (ITranslator t) => new AssemblyNameExtension(t));
+
+            assemblyNameDeserialized.ShouldBe(assemblyNameOriginal);
+        }
+
+        [Fact]
+        public void VerifyAssemblyNameExSerializationWithRemappedFromByTranslator()
+        {
+            AssemblyNameExtension assemblyNameOriginal = new AssemblyNameExtension("System.Xml, Version=10.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
+            AssemblyNameExtension assemblyRemappedFrom = new AssemblyNameExtension("System.Xml, Version=9.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
+            assemblyRemappedFrom.MarkImmutable();
+            assemblyNameOriginal.AddRemappedAssemblyName(assemblyRemappedFrom);
+            assemblyNameOriginal.RemappedFromEnumerator.Count().ShouldBe(1);
+
+            AssemblyNameExtension assemblyNameDeserialized = null;
 
+            MemoryStream serializationStream = new MemoryStream();
+            ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(serializationStream);
 
+            writeTranslator.Translate(ref assemblyNameOriginal, (ITranslator t) => new AssemblyNameExtension(t));
 
+            serializationStream.Seek(0, SeekOrigin.Begin);
+            ITranslator readTranslator = BinaryTranslator.GetReadTranslator(serializationStream, null);
+
+            readTranslator.Translate(ref assemblyNameDeserialized, (ITranslator t) => new AssemblyNameExtension(t));
+
+            assemblyNameDeserialized.Equals(assemblyNameOriginal).ShouldBeTrue();
+            assemblyNameDeserialized.RemappedFromEnumerator.Count().ShouldBe(1);
+            assemblyNameDeserialized.RemappedFromEnumerator.First().ShouldBe(assemblyRemappedFrom);
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 4c7f04f2b13..6ea128680d9 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -5,7 +5,6 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using Newtonsoft.Json;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
@@ -13,17 +12,16 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
     public class ResolveAssemblyReferenceCacheSerialization : IDisposable
     {
         // Maintain this two in sync with the constant in SystemState
-        private static readonly byte[] TranslateContractSignature = new[] { (byte)'M', (byte)'B', (byte)'R', (byte)'S', (byte)'C', }; // Microsoft Build Rar State Cache
+        private static readonly byte[] TranslateContractSignature = { (byte)'M', (byte)'B', (byte)'R', (byte)'S', (byte)'C' }; // Microsoft Build RAR State Cache
         private static readonly byte TranslateContractVersion = 0x01;
 
-        private string _tempPath;
-        private string _rarCacheFile;
-        private TaskLoggingHelper _taskLoggingHelper;
+        private readonly string _rarCacheFile;
+        private readonly TaskLoggingHelper _taskLoggingHelper;
 
         public ResolveAssemblyReferenceCacheSerialization()
         {
-            _tempPath = Path.GetTempPath();
-            _rarCacheFile = Path.Combine(_tempPath, Guid.NewGuid() + ".UnitTest.RarCache");
+            var tempPath = Path.GetTempPath();
+            _rarCacheFile = Path.Combine(tempPath, Guid.NewGuid() + ".UnitTest.RarCache");
             _taskLoggingHelper = new TaskLoggingHelper(new MockEngine(), "TaskA")
             {
                 TaskResources = AssemblyResources.PrimaryResources
@@ -124,26 +122,6 @@ public void CorrectFileVersion()
             Assert.NotNull(deserialized);
         }
 
-        [Theory]
-        [InlineData("Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache")]
-        [InlineData("Microsoft.CodeAnalysis.csprojAssemblyReference.cache")]
-        [InlineData("Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.vbprojAssemblyReference.cache")]
-        [InlineData("Roslyn.Compilers.Extension.csprojAssemblyReference.cache")]
-        public void RoundTripSampleFileState(string sampleName)
-        {
-            var fileSample = GetTestPayloadFileName($@"AssemblyDependency\CacheFileSamples\BinaryFormatter\{sampleName}");
-            // read old file
-            var deserialized = SystemState.DeserializeCacheByBinaryFormatter(fileSample, _taskLoggingHelper);
-            // white as TR
-            deserialized.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-            // read as TR
-            var deserializedByTranslator = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-
-            var sOld = JsonConvert.SerializeObject(deserialized, Formatting.Indented);
-            var sNew = JsonConvert.SerializeObject(deserializedByTranslator, Formatting.Indented);
-            Assert.Equal(sOld, sNew);
-        }
-
         [Fact]
         public void VerifySampleStateDeserialization()
         {
@@ -228,7 +206,7 @@ public void VerifySampleStateDeserialization()
 
         private static string GetTestPayloadFileName(string name)
         {
-            var codeBaseUrl = new Uri(Assembly.GetExecutingAssembly().CodeBase);
+            var codeBaseUrl = new Uri(Assembly.GetExecutingAssembly().Location);
             var codeBasePath = Uri.UnescapeDataString(codeBaseUrl.AbsolutePath);
             var dirPath = Path.GetDirectoryName(codeBasePath) ?? string.Empty;
             return Path.Combine(dirPath, name);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
new file mode 100644
index 00000000000..96314391e09
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
@@ -0,0 +1,63 @@
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Runtime.Versioning;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Tasks;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
+{
+    public class TaskTranslatorHelpers
+    {
+        MemoryStream _serializationStream;
+
+        [Fact]
+        public void NullFrameworkName()
+        {
+            FrameworkName value = null;
+
+            GetWriteTranslator().Translate(ref value);
+            GetReadTranslator().Translate(ref value);
+
+            Assert.Null(value);
+        }
+
+        [Theory]
+        [MemberData(nameof(SampleFrameworkNames))]
+        public void ValidFrameworkName(FrameworkName value)
+        {
+            FrameworkName deserialized = null;
+
+            GetWriteTranslator().Translate(ref value);
+            GetReadTranslator().Translate(ref deserialized);
+
+            Assert.NotNull(deserialized);
+            Assert.Equal(value, deserialized);
+        }
+
+        public static IEnumerable<object[]> SampleFrameworkNames =>
+            new List<object[]>
+            {
+                new object[] { new FrameworkName("X, Version=3.4.5") },
+                new object[] { new FrameworkName("X, Version=3.4, Profile=Compact") },
+                new object[] { new FrameworkName("Y", new Version(1, 2, 3)) },
+                new object[] { new FrameworkName("Z", new Version(1, 2, 3), "P") },
+            };
+
+        private ITranslator GetReadTranslator()
+        {
+            if (_serializationStream == null)
+                throw new InvalidOperationException("GetWriteTranslator has to be called before GetReadTranslator");
+
+            _serializationStream.Seek(0, SeekOrigin.Begin);
+            return BinaryTranslator.GetReadTranslator(_serializationStream, null);
+        }
+
+        private ITranslator GetWriteTranslator()
+        {
+            _serializationStream = new MemoryStream();
+            return BinaryTranslator.GetWriteTranslator(_serializationStream);
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 8f337f1b61e..796c77744d9 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -12,7 +12,6 @@
   </PropertyGroup>
 
   <ItemGroup>
-    <PackageReference Include="Newtonsoft.Json" />
     <PackageReference Include="System.Security.Principal.Windows" />
     <PackageReference Include="System.Xml.XPath" />
     <PackageReference Include="Shouldly" />
@@ -139,18 +138,6 @@
 
   <ItemGroup>
     <None Update="ResourceHandling\*.txt" CopyToOutputDirectory="PreserveNewest" />
-    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Microsoft.CodeAnalysis.csprojAssemblyReference.cache">
-      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
-    </None>
-    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.vbprojAssemblyReference.cache">
-      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
-    </None>
-    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache">
-      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
-    </None>
-    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Roslyn.Compilers.Extension.csprojAssemblyReference.cache">
-      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
-    </None>
     <None Update="AssemblyDependency\CacheFileSamples\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index b987cebdd6b..e4ea1eba602 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1905,26 +1905,6 @@ private void WriteStateFile()
                 _cache.SerializeCacheByTranslator(_stateFile, Log);
             }
         }
-
-        /// <summary>
-        /// TODO: to be deleted
-        /// </summary>
-        private void ReadStateFileBinaryFormatter()
-        {
-            _cache = SystemState.DeserializeCacheByBinaryFormatter(_stateFile, Log);
-        }
-
-        /// <summary>
-        /// Write out the state file if a state name was supplied and the cache is dirty.
-        /// TODO: to be deleted
-        /// </summary>
-        private void WriteStateFileBinaryFormatter()
-        {
-            if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
-            {
-                _cache.SerializeCache(_stateFile, Log);
-            }
-        }
         #endregion
 
         #region App.config
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index cb35f0b945b..8d8a5ad5dc6 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -89,7 +89,7 @@
     <Compile Include="..\Shared\NGen.cs">
       <Link>NGen.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs" />
+    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs"/>
     <Compile Include="..\Shared\PropertyParser.cs">
       <Link>PropertyParser.cs</Link>
       <ExcludeFromStyleCop>True</ExcludeFromStyleCop>
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index f89eb5b239e..288947b495a 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -2,16 +2,13 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Linq;
-using System.Runtime.Serialization;
 using System.Runtime.Versioning;
-using System.Security.Permissions;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -24,9 +21,9 @@ namespace Microsoft.Build.Tasks
     /// Class is used to cache system state.
     /// </summary>
     [Serializable]
-    internal sealed class SystemState : StateFileBase, ISerializable, ITranslatable
+    internal sealed class SystemState : StateFileBase, ITranslatable
     {
-        private static readonly byte[] TranslateContractSignature = new []{(byte)'M', (byte)'B', (byte)'R', (byte)'S', (byte)'C', }; // Microsoft Build Rar State Cache
+        private static readonly byte[] TranslateContractSignature = { (byte) 'M', (byte) 'B', (byte) 'R', (byte) 'S', (byte) 'C'}; // Microsoft Build RAR State Cache
         private static readonly byte TranslateContractVersion = 0x01;
 
         /// <summary>
@@ -39,7 +36,6 @@ internal sealed class SystemState : StateFileBase, ISerializable, ITranslatable
         /// Cache at the SystemState instance level. It is serialized and reused between instances.
         /// </summary>
         private Dictionary<string, FileState> instanceLocalFileStateCache = new Dictionary<string, FileState>(StringComparer.OrdinalIgnoreCase);
-        private Hashtable instanceLocalFileStateCacheForBfDeserialize = new Hashtable(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
         /// LastModified information is purely instance-local. It doesn't make sense to
@@ -116,7 +112,7 @@ internal sealed class SystemState : StateFileBase, ISerializable, ITranslatable
         /// Class that holds the current file state.
         /// </summary>
         [Serializable]
-        private sealed class FileState : ISerializable, ITranslatable
+        private sealed class FileState : ITranslatable
         {
             /// <summary>
             /// The last modified time for this file.
@@ -164,50 +160,6 @@ internal FileState(ITranslator translator)
                 Translate(translator);
             }
 
-            /// <summary>
-            /// Deserializing constuctor.
-            /// </summary>
-            internal FileState(SerializationInfo info, StreamingContext context)
-            {
-                ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
-
-                lastModified = new DateTime(info.GetInt64("mod"), (DateTimeKind)info.GetInt32("modk"));
-                assemblyName = (AssemblyNameExtension)info.GetValue("an", typeof(AssemblyNameExtension));
-                dependencies = (AssemblyNameExtension[])info.GetValue("deps", typeof(AssemblyNameExtension[]));
-                scatterFiles = (string[])info.GetValue("sfiles", typeof(string[]));
-                runtimeVersion = (string)info.GetValue("rtver", typeof(string));
-                if (info.GetBoolean("fn"))
-                {
-                    var frameworkNameVersion = (Version) info.GetValue("fnVer", typeof(Version));
-                    var frameworkIdentifier = info.GetString("fnId");
-                    var frameworkProfile = info.GetString("fmProf");
-                    frameworkName = new FrameworkName(frameworkIdentifier, frameworkNameVersion, frameworkProfile);
-                }
-            }
-
-            /// <summary>
-            /// Serialize the contents of the class.
-            /// </summary>
-            [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
-            public void GetObjectData(SerializationInfo info, StreamingContext context)
-            {
-                ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
-
-                info.AddValue("mod", lastModified.Ticks);
-                info.AddValue("modk", (int)lastModified.Kind);
-                info.AddValue("an", assemblyName);
-                info.AddValue("deps", dependencies);
-                info.AddValue("sfiles", scatterFiles);
-                info.AddValue("rtver", runtimeVersion);
-                info.AddValue("fn", frameworkName != null);
-                if (frameworkName != null)
-                {
-                    info.AddValue("fnVer", frameworkName.Version);
-                    info.AddValue("fnId", frameworkName.Identifier);
-                    info.AddValue("fmProf", frameworkName.Profile);
-                }
-            }
-
             /// <summary>
             /// Reads/writes this class
             /// </summary>
@@ -272,44 +224,6 @@ internal SystemState()
         {
         }
 
-        /// <summary>
-        /// Deserialize the contents of the class.
-        /// </summary>
-        internal SystemState(SerializationInfo info, StreamingContext context)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
-
-            instanceLocalFileStateCacheForBfDeserialize = (Hashtable)info.GetValue("fileState", typeof(Hashtable));
-
-            isDirty = false;
-        }
-
-        /// <summary>
-        /// Deserialize cache of this class using BinaryFormatter
-        /// </summary>
-        internal static SystemState DeserializeCacheByBinaryFormatter(string stateFile, TaskLoggingHelper log)
-        {
-            SystemState systemSate  = (SystemState)StateFileBase.DeserializeCache(stateFile, log, typeof(SystemState));
-
-            // Construct the cache if necessary.
-            if (systemSate == null)
-            {
-                systemSate = new SystemState();
-            }
-
-            if (systemSate.instanceLocalFileStateCacheForBfDeserialize != null)
-            {
-                foreach (DictionaryEntry entry in systemSate.instanceLocalFileStateCacheForBfDeserialize)
-                {
-                    systemSate.instanceLocalFileStateCache.Add((string)entry.Key, (FileState)entry.Value);
-                }
-
-                systemSate.instanceLocalFileStateCacheForBfDeserialize = null;
-            }
-
-            return systemSate;
-        }
-
         /// <summary>
         /// Set the target framework paths.
         /// This is used to optimize IO in the case of files requested from one
@@ -347,6 +261,7 @@ internal void SerializeCacheByTranslator(string stateFile, TaskLoggingHelper log
                     translator.Writer.Write(TranslateContractVersion);
 
                     Translate(translator);
+                    isDirty = false;
                 }
             }
             catch (Exception e)
@@ -389,6 +304,7 @@ internal static SystemState DeserializeCacheByTranslator(string stateFile, TaskL
 
                     SystemState systemState = new SystemState();
                     systemState.Translate(translator);
+                    systemState.isDirty = false;
 
                     return systemState;
                 }
@@ -412,22 +328,9 @@ internal static SystemState DeserializeCacheByTranslator(string stateFile, TaskL
         }
 
         /// <summary>
-        /// Serialize the contents of the class.
+        /// Reads/writes this class.
+        /// Used for serialization and deserialization of this class persistent cache.
         /// </summary>
-        [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
-        public void GetObjectData(SerializationInfo info, StreamingContext context)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
-
-            var localFilesAsHashtable = new Hashtable();
-            foreach (var pair in instanceLocalFileStateCache)
-            {
-                localFilesAsHashtable.Add(pair.Key, pair.Value);
-            }
-
-            info.AddValue("fileState", localFilesAsHashtable);
-        }
-
         public void Translate(ITranslator translator)
         {
             if (instanceLocalFileStateCache is null)
