diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index 9a4a3f7bd58..d9cb65d4b93 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -33,8 +33,12 @@ public void LogProjectEvaluationStarted()
         }
 
         /// <summary>
-        /// Log that the project has finished
+        /// Logs that the project evaluation has finished.
         /// </summary>
+        /// <param name="globalProperties">Global properties used in the project evaluation.</param>
+        /// <param name="properties">Properties used in the project evaluation.</param>
+        /// <param name="items">Items used in the project evaluation.</param>
+        /// <param name="profilerResult">Parameter contains the profiler result of the project evaluation.</param>
         internal void LogProjectEvaluationFinished(IEnumerable globalProperties, IEnumerable properties, IEnumerable items, ProfilerResult? profilerResult)
         {
             ErrorUtilities.VerifyThrow(IsValid, "invalid");
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 1a16e9f2190..308e26cae4d 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -311,6 +311,7 @@ internal void UnregisterAllEventHandlers()
             StatusEventRaised = null;
             AnyEventRaised = null;
             TelemetryLogged = null;
+            BuildCheckEventRaised = null;
         }
 
         #endregion
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index 03cb9381080..4940db20fd1 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -16,7 +16,7 @@ public class BuildAnalyzerConfiguration
     //  nor in the editorconfig configuration file.
     public static BuildAnalyzerConfiguration Default { get; } = new()
     {
-        EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.AnalyzedProjectOnly,
+        EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.ProjectOnly,
         Severity = BuildAnalyzerResultSeverity.Info,
         IsEnabled = false,
     };
diff --git a/src/Build/BuildCheck/API/EvaluationAnalysisScope.cs b/src/Build/BuildCheck/API/EvaluationAnalysisScope.cs
index 7ff6471a39a..39781649359 100644
--- a/src/Build/BuildCheck/API/EvaluationAnalysisScope.cs
+++ b/src/Build/BuildCheck/API/EvaluationAnalysisScope.cs
@@ -14,20 +14,20 @@ public enum EvaluationAnalysisScope
     /// <summary>
     /// Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.
     /// </summary>
-    AnalyzedProjectOnly,
+    ProjectOnly,
 
     /// <summary>
     /// Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.
     /// </summary>
-    AnalyzedProjectWithImportsFromCurrentWorkTree,
+    ProjectWithImportsFromCurrentWorkTree,
 
     /// <summary>
     /// Imports from SDKs will not be sent to the analyzer. Other imports will be sent.
     /// </summary>
-    AnalyzedProjectWithImportsWithoutSdks,
+    ProjectWithImportsWithoutSdks,
 
     /// <summary>
     /// All data will be sent to the analyzer.
     /// </summary>
-    AnalyzedProjectWithAllImports,
+    ProjectWithAllImports,
 }
diff --git a/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs b/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
index a746f581e14..125dc27458e 100644
--- a/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
+++ b/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.BuildCheck.Acquisition;
 
-// https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=52643036
+// https://github.com/dotnet/msbuild/issues/9633
 // Acquisition
 //  define the data that will be passed to the acquisition module (and remoted if needed)
 internal class AnalyzerAcquisitionData(string assemblyPath)
diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index 08e8c753bdc..606759a34e2 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -2,13 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Configuration.Assemblies;
 using System.Linq;
 using System.Reflection;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.BuildCheck.Analyzers;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
@@ -21,7 +16,7 @@ internal class BuildCheckAcquisitionModule
         /// <summary>
         /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory
         /// </summary>
-        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new CoreClrAssemblyLoader();
+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();
 #endif
         public BuildAnalyzerFactory? CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)
         {
@@ -38,12 +33,9 @@ internal class BuildCheckAcquisitionModule
 
                 if (analyzerType != null)
                 {
-                    return () =>
-                    {
-                        return Activator.CreateInstance(analyzerType) is not BuildAnalyzer instance
+                    return () => Activator.CreateInstance(analyzerType) is not BuildAnalyzer instance
                             ? throw new InvalidOperationException($"Failed to create an instance of type {analyzerType.FullName} as BuildAnalyzer.")
                             : instance;
-                    };
                 }
             }
             catch (ReflectionTypeLoadException ex)
@@ -52,6 +44,7 @@ internal class BuildCheckAcquisitionModule
                 {
                     foreach (Exception? loaderException in ex.LoaderExceptions)
                     {
+                        // How do we plan to handle these errors?
                         Console.WriteLine(loaderException?.Message ?? "Unknown error occurred.");
                     }
                 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs
index 92673cf7f79..06e0aaa2439 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs
@@ -25,6 +25,8 @@ public BuildAnalyzerWrapper(BuildAnalyzer buildAnalyzer)
     internal BuildAnalyzer BuildAnalyzer { get; }
     private bool _isInitialized = false;
 
+    // Let's optimize for the scenario where users have a single .editorconfig file that applies to the whole solution.
+    // In such case - configuration will be same for all projects. So we do not need to store it per project in a collection.
     internal BuildAnalyzerConfigurationInternal? CommonConfig { get; private set; }
 
     // start new project
@@ -43,6 +45,7 @@ internal void StartNewProject(
             }
         }
 
+        // The Common configuration is not common anymore - let's nullify it and we will need to fetch configuration per project.
         if (CommonConfig == null || !userConfigs.All(t => t.IsSameConfigurationAs(CommonConfig)))
         {
             CommonConfig = null;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 68d924c9e5e..a5860c27bb4 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -3,101 +3,107 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Linq;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Acquisition;
-using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.BuildCheck.Infrastructure;
-
-internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCheckManager buildCheckManager)
-    : ILogger
+namespace Microsoft.Build.BuildCheck.Infrastructure
 {
-    public LoggerVerbosity Verbosity { get; set; }
-
-    public string? Parameters { get; set; }
-
-    public void Initialize(IEventSource eventSource)
+    internal sealed class BuildCheckConnectorLogger : ILogger
     {
-        eventSource.AnyEventRaised += EventSource_AnyEventRaised;
-        eventSource.BuildFinished += EventSource_BuildFinished;
-    }
+        private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
+        private readonly IBuildCheckManager _buildCheckManager;
+        private readonly IBuildAnalysisLoggingContextFactory _loggingContextFactory;
 
-    private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
-    {
-        if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
+        internal BuildCheckConnectorLogger(
+            IBuildAnalysisLoggingContextFactory loggingContextFactory,
+            IBuildCheckManager buildCheckManager)
         {
-            if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
-            {
-                return;
-            }
+            _buildCheckManager = buildCheckManager;
+            _loggingContextFactory = loggingContextFactory;
+            _eventHandlers = GetBuildEventHandlers();
+        }
 
-            try
-            {
-                buildCheckManager.ProcessEvaluationFinishedEventArgs(
-                    loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),
-                    projectEvaluationFinishedEventArgs);
-            }
-            catch (Exception exception)
-            {
-                Debugger.Launch();
-                Console.WriteLine(exception);
-                throw;
-            }
+        public LoggerVerbosity Verbosity { get; set; }
 
-            buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
-        }
-        else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStartedEventArgs)
-        {
-            if (projectEvaluationStartedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
-            {
-                return;
-            }
+        public string? Parameters { get; set; }
 
-            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!, projectEvaluationStartedEventArgs.ProjectFile!);
+        public void Initialize(IEventSource eventSource)
+        {
+            eventSource.AnyEventRaised += EventSource_AnyEventRaised;
+            eventSource.BuildFinished += EventSource_BuildFinished;
         }
-        else if (e is ProjectStartedEventArgs projectStartedEvent)
+
+        public void Shutdown()
         {
-            buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
         }
-        else if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
+
+        private void HandleProjectEvaluationEvent(ProjectEvaluationFinishedEventArgs eventArgs)
         {
-            buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
+            if (!IsMetaProjFile(eventArgs.ProjectFile))
+            {
+                try
+                {
+                    _buildCheckManager.ProcessEvaluationFinishedEventArgs(_loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!), eventArgs);
+                }
+                catch (Exception exception)
+                {
+                    Console.WriteLine(exception);
+                    throw;
+                }
+
+                _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);
+            }
         }
-        else if (e is BuildCheckEventArgs buildCheckBuildEventArgs)
+
+        private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)
         {
-            if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
+            if (!IsMetaProjFile(eventArgs.ProjectFile))
             {
-                _stats.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
+                _buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!, eventArgs.ProjectFile!);
             }
-            else if (buildCheckBuildEventArgs is BuildCheckAcquisitionEventArgs acquisitionEventArgs)
+        }
+
+        private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase);
+
+        private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
+        {
+            if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))
             {
-                buildCheckManager.ProcessAnalyzerAcquisition(acquisitionEventArgs.ToAnalyzerAcquisitionData());
+                handler(e);
             }
         }
-    }
 
-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();
+        private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();
 
-    private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
-    {
-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);
-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + ": " + a.Value));
+        private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
+        {
+            _stats.Merge(_buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);
+            string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + ": " + a.Value));
 
+            BuildEventContext buildEventContext = e.BuildEventContext
+                ?? new BuildEventContext(
+                    BuildEventContext.InvalidNodeId,
+                    BuildEventContext.InvalidTargetId,
+                    BuildEventContext.InvalidProjectContextId,
+                    BuildEventContext.InvalidTaskId);
 
-        BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(
-            BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,
-            BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
+            LoggingContext loggingContext = _loggingContextFactory.CreateLoggingContext(buildEventContext);
 
-        LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext);
+            // Tracing: https://github.com/dotnet/msbuild/issues/9629
+            loggingContext.LogCommentFromText(MessageImportance.High, msg);
+        }
 
-        // Tracing: https://github.com/dotnet/msbuild/issues/9629
-        loggingContext.LogCommentFromText(MessageImportance.High, msg);
+        private Dictionary<Type, Action<BuildEventArgs>> GetBuildEventHandlers() => new()
+        {
+            { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationEvent((ProjectEvaluationFinishedEventArgs) e) },
+            { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs) e) },
+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
+            { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
+            { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => _stats.Merge(((BuildCheckTracingEventArgs)e).TracingData, (span1, span2) => span1 + span2) },
+            { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => _buildCheckManager.ProcessAnalyzerAcquisition(((BuildCheckAcquisitionEventArgs)e).ToAnalyzerAcquisitionData()) },
+        };
     }
-
-    public void Shutdown()
-    { }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
index 3546a6ab7b8..19a4e3d6967 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
@@ -9,28 +9,13 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 internal sealed class BuildCheckRegistrationContext(BuildAnalyzerWrapper analyzerWrapper, BuildCheckCentralContext buildCheckCentralContext) : IBuildCheckRegistrationContext
 {
-    private int _evaluatedPropertiesActionCount;
-    private int _parsedItemsActionCount;
-
     public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
     {
-        if (Interlocked.Increment(ref _evaluatedPropertiesActionCount) > 1)
-        {
-            throw new BuildCheckConfigurationException(
-                $"Analyzer '{analyzerWrapper.BuildAnalyzer.FriendlyName}' attempted to call '{nameof(RegisterEvaluatedPropertiesAction)}' multiple times.");
-        }
-
         buildCheckCentralContext.RegisterEvaluatedPropertiesAction(analyzerWrapper, evaluatedPropertiesAction);
     }
 
     public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction)
     {
-        if (Interlocked.Increment(ref _parsedItemsActionCount) > 1)
-        {
-            throw new BuildCheckConfigurationException(
-                $"Analyzer '{analyzerWrapper.BuildAnalyzer.FriendlyName}' attempted to call '{nameof(RegisterParsedItemsAction)}' multiple times.");
-        }
-
         buildCheckCentralContext.RegisterParsedItemsAction(analyzerWrapper, parsedItemsAction);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 9cc89118eef..79dcbbb820f 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -3,22 +3,13 @@
 
 using System;
 using System.Collections.Generic;
-using System.Collections.ObjectModel;
-using System.Diagnostics;
-using System.Diagnostics.Tracing;
-using System.IO;
 using System.Linq;
-using System.Runtime.ConstrainedExecution;
 using System.Threading;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Acquisition;
 using Microsoft.Build.BuildCheck.Analyzers;
 using Microsoft.Build.BuildCheck.Logging;
-using Microsoft.Build.Collections;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -33,9 +24,9 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 /// </summary>
 internal sealed class BuildCheckManagerProvider : IBuildCheckManagerProvider
 {
-    private static int s_isInitialized = 0;
-    private static IBuildCheckManager s_globalInstance = new NullBuildCheckManager();
-    internal static IBuildCheckManager GlobalInstance => s_isInitialized != 0 ? s_globalInstance : throw new InvalidOperationException("BuildCheckManagerProvider not initialized");
+    private static IBuildCheckManager? s_globalInstance;
+
+    internal static IBuildCheckManager GlobalInstance => s_globalInstance ?? throw new InvalidOperationException("BuildCheckManagerProvider not initialized");
 
     public IBuildCheckManager Instance => GlobalInstance;
 
@@ -49,31 +40,32 @@ public void InitializeComponent(IBuildComponentHost host)
     {
         ErrorUtilities.VerifyThrow(host != null, "BuildComponentHost was null");
 
-        if (Interlocked.CompareExchange(ref s_isInitialized, 1, 0) == 1)
+        if (s_globalInstance == null)
         {
-            // Initialization code already run(ing)
-            return;
-        }
+            IBuildCheckManager instance;
+            if (host!.BuildParameters.IsBuildCheckEnabled)
+            {
+                instance = new BuildCheckManager(host.LoggingService);
+            }
+            else
+            {
+                instance = new NullBuildCheckManager();
+            }
 
-        if (host!.BuildParameters.IsBuildCheckEnabled)
-        {
-            s_globalInstance = new BuildCheckManager(host.LoggingService);
-        }
-        else
-        {
-            s_globalInstance = new NullBuildCheckManager();
+            // We are fine with the possibility of double creation here - as the construction is cheap
+            //  and without side effects and the actual backing field is effectively immutable after the first assignment.
+            Interlocked.CompareExchange(ref s_globalInstance, instance, null);
         }
     }
 
     public void ShutdownComponent() => GlobalInstance.Shutdown();
 
-
     private sealed class BuildCheckManager : IBuildCheckManager
     {
         private readonly TracingReporter _tracingReporter = new TracingReporter();
         private readonly BuildCheckCentralContext _buildCheckCentralContext = new();
         private readonly ILoggingService _loggingService;
-        private readonly List<BuildAnalyzerFactoryContext> _analyzersRegistry =[];
+        private readonly List<BuildAnalyzerFactoryContext> _analyzersRegistry;
         private readonly bool[] _enabledDataSources = new bool[(int)BuildCheckDataSource.ValuesCount];
         private readonly BuildEventsProcessor _buildEventsProcessor;
         private readonly BuildCheckAcquisitionModule _acquisitionModule = new();
@@ -100,7 +92,10 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData)
             if (IsInProcNode)
             {
                 var factory = _acquisitionModule.CreateBuildAnalyzerFactory(acquisitionData);
-                RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, factory);
+                if (factory != null)
+                {
+                    RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, factory);
+                }
             }
             else
             {
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index baecbac2423..00516fb758b 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -3,9 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Acquisition;
 using Microsoft.Build.BuildCheck.Logging;
@@ -20,11 +17,15 @@ public void Shutdown()
     {
     }
 
-    public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buildAnalysisContext, ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
+    public void ProcessEvaluationFinishedEventArgs(
+        AnalyzerLoggingContext buildAnalysisContext,
+        ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
     {
     }
 
-    public void SetDataSource(BuildCheckDataSource buildCheckDataSource) { }
+    public void SetDataSource(BuildCheckDataSource buildCheckDataSource)
+    {
+    }
 
     public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData) { }
 
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index acabdac5e5f..7e1dd5ec428 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -5,7 +5,6 @@
 using System.Collections;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
@@ -13,7 +12,6 @@
 using System.Reflection;
 using System.Runtime.CompilerServices;
 using System.Text.RegularExpressions;
-using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation.Context;
@@ -320,7 +318,6 @@ private void FlushFirstValueIfNeeded()
         /// </summary>
         internal EvaluationContext EvaluationContext { get; }
 
-
         /// <summary>
         /// Creates an expander passing it some properties to use.
         /// Properties may be null.
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 625246427fc..f8cb37bce93 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -3,17 +3,13 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.IO;
 using System.Runtime.CompilerServices;
-using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
 using System.Text;
 using System.Text.RegularExpressions;
-using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
@@ -32,7 +28,7 @@ namespace Microsoft.Build.Evaluation
 {
     /// <summary>
     /// The Intrinsic class provides static methods that can be accessed from MSBuild's
-    /// property functions using $([MSBuild]::Function(x,y))
+    /// property functions using $([MSBuild]::Function(x,y)).
     /// </summary>
     internal static class IntrinsicFunctions
     {
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 539fd2c3e4d..b7edcb5161a 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -60,7 +60,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
     }
 }
 
-public sealed class BuildCheckAcquisitionEventArgs(string acquisitionPath) : BuildCheckEventArgs
+internal sealed class BuildCheckAcquisitionEventArgs(string acquisitionPath) : BuildCheckEventArgs
 {
     internal BuildCheckAcquisitionEventArgs()
         : this(string.Empty)
diff --git a/template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs b/template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs
index e6d225f21dd..78dae77947b 100644
--- a/template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs
+++ b/template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs
@@ -1,34 +1,39 @@
-﻿using System;
+﻿using Microsoft.Build.Construction;
+using Microsoft.Build.Experimental.BuildCheck;
+using System.Collections.Generic;
 
 namespace Company.AnalyzerTemplate
 {
     public sealed class Analyzer1 : BuildAnalyzer
     {
-        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("X01234", "Title",
-            "Description", "Category",
+        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
+            "X01234",
+            "Title",
+            "Description",
             "Message format: {0}",
-            new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+            new BuildAnalyzerConfiguration());
 
         public override string FriendlyName => "Company.Analyzer1";
 
-        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];
+        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = new List<BuildAnalyzerRule>() { SupportedRule };
 
         public override void Initialize(ConfigurationContext configurationContext)
         {
             // configurationContext to be used only if analyzer needs external configuration data.
         }
 
-        public override void RegisterActions(IBuildCopRegistrationContext registrationContext)
+
+        public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)
         {
             registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);
         }
-        
-        private void EvaluatedPropertiesAction(BuildCopDataContext<EvaluatedPropertiesAnalysisData> context)
+
+        private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)
         {
-            context.ReportResult(BuildCopResult.Create(
+            context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
                 ElementLocation.EmptyLocation,
-                "Argument for the message format");
+                "Argument for the message format"));
         }
     }
 }
