diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 890a5d6caf2..7137eff120a 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -632,7 +632,7 @@ public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
         {
             throw new NotImplementedException();
         }
-        public void LogResponseFile(BuildEventContext buildEventContext, string filePath)
+        public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
         {
         }
 
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index c2b9e3ecdb6..89df1804592 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -257,11 +257,6 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private IEnumerable<DeferredBuildMessage> _deferredBuildMessages;
 
-        /// <summary>
-        /// Response files to be included
-        /// </summary>
-        private IEnumerable<DeferredResponseFile> _deferredResponseFiles;
-
         private ProjectCacheService _projectCacheService;
 
         private bool _hasProjectCacheServiceInitializedVsScenario;
@@ -403,22 +398,18 @@ public readonly struct DeferredBuildMessage
 
             public string Text { get; }
 
+            public string FilePath { get; }
+
             public DeferredBuildMessage(string text, MessageImportance importance)
             {
                 Importance = importance;
                 Text = text;
+                FilePath = "";
             }
-        }
-
-        /// <summary>
-        /// <see cref="BuildManager.BeginBuild(BuildParameters, IEnumerable{DeferredBuildMessage}, IEnumerable{DeferredResponseFile})"/>
-        /// </summary>
-        public readonly struct DeferredResponseFile
-        {
-            public string FilePath { get; }
-
-            public DeferredResponseFile(string filePath)
+            public DeferredBuildMessage(string text, MessageImportance importance, string filePath)
             {
+                Importance = importance;
+                Text = text;
                 FilePath = filePath;
             }
         }
@@ -446,17 +437,6 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess
             _deferredBuildMessages = null;
         }
 
-        // TODO: Review
-        // TODO: Add comments
-        public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMessage> deferredBuildMessages, IEnumerable<DeferredResponseFile> deferredResponseFiles)
-        {
-            _deferredBuildMessages = deferredBuildMessages;
-            _deferredResponseFiles = deferredResponseFiles;
-            BeginBuild(parameters);
-            _deferredBuildMessages = null;
-            _deferredResponseFiles = null;
-        }
-
         private void UpdatePriority(Process p, ProcessPriorityClass priority)
         {
             try
@@ -563,7 +543,6 @@ public void BeginBuild(BuildParameters parameters)
 
                 // Log deferred messages and response files
                 LogDeferredMessages(loggingService, _deferredBuildMessages);
-                LogDeferredResponseFiles(loggingService, _deferredResponseFiles);
 
                 InitializeCaches();
 
@@ -2902,19 +2881,11 @@ private static void LogDeferredMessages(ILoggingService loggingService, IEnumera
             foreach (var message in deferredBuildMessages)
             {
                 loggingService.LogCommentFromText(BuildEventContext.Invalid, message.Importance, message.Text);
-            }
-        }
-
-        private static void LogDeferredResponseFiles(ILoggingService loggingService, IEnumerable<DeferredResponseFile> deferredResponseFiles)
-        {
-            if (deferredResponseFiles == null)
-            {
-                return;
-            }
-
-            foreach (var responseFile in deferredResponseFiles)
-            {
-                loggingService.LogResponseFile(BuildEventContext.Invalid, responseFile.FilePath);
+                // If message includes a file path, include that file
+                if (message.FilePath != "")
+                {
+                    loggingService.LogIncludeFile(BuildEventContext.Invalid, message.FilePath);
+                }
             }
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 4b05c5775f8..d5ceccb6dfc 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -608,11 +608,11 @@ BuildEventContext LogProjectStarted(
 
         #region Log response files
         /// <summary>
-        /// Helper method to create an event for including response files
+        /// Helper method to create an event for including files. Typically response files
         /// </summary>
         /// <param name="buildEventContext">Event context information which describes where is the event getting logged</param>
         /// <param name="filePath">Full path to the response file</param>
-        void LogResponseFile(BuildEventContext buildEventContext, string filePath);
+        void LogIncludeFile(BuildEventContext buildEventContext, string filePath);
         #endregion
     }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingContext.cs b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
index bc5eeffddc1..3a24dcffcab 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
@@ -270,13 +270,13 @@ internal void LogFatalBuildError(Exception exception, BuildEventFileInfo file)
             _hasLoggedErrors = true;
         }
         /// <summary>
-        /// Logs a response file to be included in the binary logger
+        /// Logs a file to be included in the binary logger
         /// </summary>
         /// <param name="filePath">Path to response file</param>
-        internal void LogResponseFile(string filePath)
+        internal void LogIncludeFile(string filePath)
         { 
             ErrorUtilities.VerifyThrow(IsValid, "must be valid");
-            _loggingService.LogResponseFile(BuildEventContext, filePath);
+            _loggingService.LogIncludeFile(BuildEventContext, filePath);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index b908d7829d3..e9c1cde6045 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -818,11 +818,11 @@ public void LogTelemetry(BuildEventContext buildEventContext, string eventName,
 
         #region log response files
         /// <summary>
-        /// Logs a response file to include in the binlogs
+        /// Logs a file to include in the binlogs
         /// </summary>
         /// <param name="buildEventContext">Event context information which describes who is logging the event</param>
         /// <param name="filePath">Full path to response file</param>
-        public void LogResponseFile(BuildEventContext buildEventContext, string filePath)
+        public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
         {
             ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
             ErrorUtilities.VerifyThrow(filePath != null, "response file path was null");
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b022968938d..aac7eb742ba 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1087,11 +1087,6 @@ private static void ResetGatheringSwitchesState()
         /// </summary>
         private static IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = Enumerable.Empty<BuildManager.DeferredBuildMessage>();
 
-        /// <summary>
-        /// Response files to be included in loggers
-        /// </summary>
-        private static IEnumerable<BuildManager.DeferredResponseFile> responseFileToLogInBuildLoggers = Enumerable.Empty<BuildManager.DeferredResponseFile>();
-
         /// <summary>
         /// Initializes the build engine, and starts the project building.
         /// </summary>
@@ -1350,14 +1345,13 @@ string[] commandLine
                         messagesToLogInBuildLoggers = messagesToLogInBuildLoggers.Append(
                             new BuildManager.DeferredBuildMessage(
                                 String.Format("Included response file: {0}", responseFilePath),
-                                MessageImportance.Normal
+                                MessageImportance.Normal,
+                                responseFilePath
                             ));
-                        responseFileToLogInBuildLoggers = responseFileToLogInBuildLoggers.Append(
-                            new BuildManager.DeferredResponseFile(responseFilePath));
                     }
 
 
-                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers, responseFileToLogInBuildLoggers);
+                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);
 
                     Exception exception = null;
                     try
