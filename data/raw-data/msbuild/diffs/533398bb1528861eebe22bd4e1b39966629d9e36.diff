diff --git a/src/Build/Construction/ProjectUsingTaskElement.cs b/src/Build/Construction/ProjectUsingTaskElement.cs
index 4d8b2358194..3b5c8ed6e45 100644
--- a/src/Build/Construction/ProjectUsingTaskElement.cs
+++ b/src/Build/Construction/ProjectUsingTaskElement.cs
@@ -127,6 +127,19 @@ public string Architecture
             }
         }
 
+        /// <summary>
+        /// Gets and sets the value of the Architecture attribute.
+        /// </summary>
+        public string Override
+        {
+            get => GetAttributeValue(XMakeAttributes.overrideUsingTask);
+
+            set
+            {
+                SetOrRemoveAttribute(XMakeAttributes.overrideUsingTask, value, "Set usingtask Override {0}", value);
+            }
+        }
+
         /// <summary>
         /// Get any contained TaskElement.
         /// </summary>
@@ -181,6 +194,11 @@ public UsingTaskParameterGroupElement ParameterGroup
         /// </summary>
         public ElementLocation TaskFactoryLocation => GetAttributeLocation(XMakeAttributes.taskFactory);
 
+        /// <summary>
+        /// Location of the Override attribute, if any
+        /// </summary>
+        public ElementLocation OverrideLocation => GetAttributeLocation(XMakeAttributes.overrideUsingTask);
+
         /// <summary>
         /// Convenience method that picks a location based on a heuristic:
         ///     Adds a new ParameterGroup to the using task to the end of the using task element
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 91d6d55c8d8..b61ed89cdd0 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -379,6 +379,7 @@ IFileSystem fileSystem
             Dictionary<string, string> taskFactoryParameters = null;
             string runtime = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Runtime, expanderOptions, projectUsingTaskXml.RuntimeLocation);
             string architecture = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Architecture, expanderOptions, projectUsingTaskXml.ArchitectureLocation);
+            string overrideUsingTask = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Override, expanderOptions, projectUsingTaskXml.OverrideLocation);
 
             if ((runtime != String.Empty) || (architecture != String.Empty))
             {
@@ -388,6 +389,12 @@ IFileSystem fileSystem
                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);
             }
 
+            if (overrideUsingTask.Equals("true", StringComparison.OrdinalIgnoreCase))
+            {
+                taskFactoryParameters ??= CreateTaskFactoryParametersDictionary();
+                taskFactoryParameters.Add(XMakeAttributes.overrideUsingTask, overrideUsingTask);
+            }
+
             taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);
         }
 
