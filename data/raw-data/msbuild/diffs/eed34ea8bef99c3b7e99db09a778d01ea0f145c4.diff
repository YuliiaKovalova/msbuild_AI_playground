diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index d5ca972b0fb..c8af765c87c 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -46,10 +46,7 @@ public void Initialize(IEventSource eventSource)
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine("");
-           /* for (int i = 0; i < 100; i++)
-            {
-                FancyLoggerBuffer.WriteNewLine(new string(Convert.ToString(i, 16)[0], 120));
-            }*/
+            // FancyLoggerBuffer.WriteNewLine("Hello, this is some text... Lorem ipsum dolor sit amet. ABCDEFGHIJKLMNOPQRSTUVWXYZ-ABCDEFGHIJKLMNOPQRSTUVWXYZ-ABCDEFGHIJKLMNOPQRSTUVWXYZ");
         }
 
         // Build
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 81faac3ac5f..787e202e050 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -22,7 +22,7 @@ public string Text
             {
                 _text = value;
                 // TODO: Replace with console.bufferwidth
-                WrappedText = ANSIBuilder.ANSIWrap(value, 80);
+                WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
             }
         }
 
@@ -50,13 +50,13 @@ public static void Initialize()
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
 
-            Task.Run(async () => {
+            /*Task.Run(async () => {
                 while (true)
                 {
                     await Task.Delay((1/60)/1000);
                     Render();
                 }
-            });
+            });*/
 
             Task.Run(() =>
             {
@@ -66,9 +66,11 @@ public static void Initialize()
                     {
                         case ConsoleKey.UpArrow:
                             if (TopLineIndex > 0) TopLineIndex--;
+                            Render();
                             break;
                         case ConsoleKey.DownArrow:
                             TopLineIndex++;
+                            Render();
                             break;
                         case ConsoleKey.Spacebar:
                         case ConsoleKey.Escape:
@@ -88,7 +90,6 @@ public static void Terminate()
         }
 
         #region Rendering
-        // private static List<string> lineContents = new();
         public static void Render()
         {
             // Write Header
@@ -99,28 +100,29 @@ public static void Render()
                 // Write footer
                 ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
                 // TODO: Remove and replace with actual footer
-                new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
+                // new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + TopLineIndex
+                new string('-', Console.BufferWidth) +$"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}"
             );
             if (Lines.Count == 0) return;
-
-            // Get lines with wrappings
-            List<string> lineContents = new();
-            int lineCount = Lines.Count;
-            for (int i = 0; i < lineCount; i++)
-            {
-                lineContents.AddRange(Lines[i].WrappedText);
-            }
-            // Print lines
-            for (int i = 0; i < Console.BufferHeight - 3; i++)
+            // Iterate over lines and display on terminal
+            // TODO: Try to improve performance when scrolling
+            int accumulatedLineCount = 0;
+            foreach (FancyLoggerBufferLine line in Lines)
             {
-                int lineIndex = i + TopLineIndex;
-                Console.Write(
-                    ANSIBuilder.Cursor.Position(i + 2, 0) +
-                    ANSIBuilder.Eraser.LineCursorToEnd() + 
-                    (lineIndex < Lines.Count ? Lines[lineIndex].Text : String.Empty)
-                );
+                // Skip for lines that are not visible in the scroll area
+                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) continue;
+                foreach (string s in line.WrappedText) {
+                    // Get line index relative to scroll area
+                    int lineIndex = accumulatedLineCount - TopLineIndex;
+                    if (lineIndex >= 0 && lineIndex < Console.BufferHeight - 3)
+                    {
+                        Console.Write(ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s);
+                    }
+                    // Stop when exceeding buffer height
+                    if (lineIndex > Console.BufferHeight - 3) return;
+                    accumulatedLineCount++;
+                }
             }
-            Console.Out.Flush();
         }
         #endregion
         #region Line identification
@@ -167,6 +169,7 @@ public static int GetLineIndexById(int lineId)
             // Get updated top line index
             // TopLineIndex = GetLineIndexById(topLineId);
             // Return
+            // ??
             return line;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 146dd90b665..324785cbbf8 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -85,6 +85,9 @@ public void Log()
                 if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 node.Log();
             }
+
+            // Update buffer
+            FancyLoggerBuffer.Render();
         }
 
         public void AddTarget(TargetStartedEventArgs args)
