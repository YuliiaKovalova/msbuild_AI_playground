diff --git a/.editorconfig b/.editorconfig
index 9b55907f943..7b0f1419bb8 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -409,7 +409,3 @@ dotnet_diagnostic.IDE0290.severity = suggestion
 dotnet_diagnostic.IDE0300.severity = suggestion
 dotnet_diagnostic.IDE0301.severity = suggestion
 dotnet_diagnostic.IDE0305.severity = suggestion
-
-# Do not use blocking task operations in test method https://github.com/xunit/xunit/issues/2780
-dotnet_diagnostic.xUnit1031.severity = none
-
diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index d75b7ca1de0..a67068c7fe8 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -52,7 +52,7 @@ public void ParseSolution_VC()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-                Assert.Fail("Should not get here");
+                Assert.True(false, "Should not get here");
             });
         }
         /// <summary>
@@ -273,7 +273,7 @@ public void ParseSolutionFileWithDescriptionInformation()
             }
             catch (Exception ex)
             {
-                Assert.Fail("Failed to parse solution containing description information. Error: " + ex.Message);
+                Assert.True(false, "Failed to parse solution containing description information. Error: " + ex.Message);
             }
         }
 
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index d87a4feefe9..71aef5e0df8 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -720,7 +720,7 @@ public void UnloadProjectXml()
                 // an attempt to load it by the pretend filename should fail,
                 // so it makes a good test to see that the UnloadProject method worked.
                 ProjectCollection.GlobalProjectCollection.LoadProject(xml.FullPath);
-                Assert.Fail("An InvalidProjectFileException was expected.");
+                Assert.True(false, "An InvalidProjectFileException was expected.");
             }
             catch (InvalidProjectFileException)
             {
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
index df69636bc7d..e16bc08dab2 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
@@ -212,7 +212,7 @@ public void WaitForCancelCompletion()
             {
                 if (!_builderThread.Join(5000))
                 {
-                    Assert.Fail("Builder thread did not terminate on cancel.");
+                    Assert.True(false, "Builder thread did not terminate on cancel.");
 #if FEATURE_THREAD_ABORT
                     _builderThread.Abort();
 #endif
@@ -529,11 +529,11 @@ private void WaitForEvent(WaitHandle evt, string eventName)
             int index = WaitHandle.WaitAny(events, 5000);
             if (WaitHandle.WaitTimeout == index)
             {
-                Assert.Fail("Did not receive " + eventName + " callback before the timeout expired.");
+                Assert.True(false, "Did not receive " + eventName + " callback before the timeout expired.");
             }
             else if (index == 0)
             {
-                Assert.Fail("Received engine exception " + _engineException_Exception);
+                Assert.True(false, "Received engine exception " + _engineException_Exception);
             }
         }
 
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index ec8055ddd86..1bae3f8adde 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -1123,13 +1123,13 @@ private void VerifyShutdownExceptions(ILogger logger, string className, Type exp
             try
             {
                 _initializedService.ShutdownComponent();
-                Assert.Fail("No Exceptions Generated");
+                Assert.True(false, "No Exceptions Generated");
             }
             catch (Exception e)
             {
                 if (e.GetType() != expectedExceptionType)
                 {
-                    Assert.Fail("Expected a " + expectedExceptionType + " but got a " + e.GetType() + " Stack:" + e.ToString());
+                    Assert.True(false, "Expected a " + expectedExceptionType + " but got a " + e.GetType() + " Stack:" + e.ToString());
                 }
             }
         }
diff --git a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
index a5cb2cbcfde..3d29df4b00a 100644
--- a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
@@ -330,7 +330,7 @@ public void AsynchronousData()
             endpoints.ManagerEndpoint.SendData(managerPacket);
             if (!_host.DataReceivedEvent.WaitOne(1000))
             {
-                Assert.Fail("Data not received before timeout expired.");
+                Assert.True(false, "Data not received before timeout expired.");
             }
             Assert.Equal(_host.DataReceivedContext.packet, managerPacket);
             Assert.NotEqual(_host.DataReceivedContext.thread.ManagedThreadId, Thread.CurrentThread.ManagedThreadId);
@@ -340,7 +340,7 @@ public void AsynchronousData()
             endpoints.NodeEndpoint.SendData(nodePacket);
             if (!_host.DataReceivedEvent.WaitOne(1000))
             {
-                Assert.Fail("Data not received before timeout expired.");
+                Assert.True(false, "Data not received before timeout expired.");
             }
             Assert.Equal(_host.DataReceivedContext.packet, nodePacket);
             Assert.NotEqual(_host.DataReceivedContext.thread.ManagedThreadId, Thread.CurrentThread.ManagedThreadId);
diff --git a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
index 2349068c275..8f436af4e0a 100644
--- a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
@@ -327,7 +327,7 @@ private void WaitForEvent(WaitHandle evt, string eventName)
         {
             if (!evt.WaitOne(5000))
             {
-                Assert.Fail("Did not receive " + eventName + " callback before the timeout expired.");
+                Assert.True(false, "Did not receive " + eventName + " callback before the timeout expired.");
             }
         }
 
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 9df7a65e344..5ee9b497a9b 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -32,7 +32,7 @@ public class TaskHostConfiguration_Tests
         private bool _continueOnErrorDefault = true;
 
         /// <summary>
-        /// Test that an exception is thrown when the task name is null.
+        /// Test that an exception is thrown when the task name is null. 
         /// </summary>
         [Fact]
         public void ConstructorWithNullName()
@@ -67,7 +67,7 @@ public void ConstructorWithNullName()
             });
         }
         /// <summary>
-        /// Test that an exception is thrown when the task name is empty.
+        /// Test that an exception is thrown when the task name is empty. 
         /// </summary>
         [Fact]
         public void ConstructorWithEmptyName()
@@ -176,7 +176,7 @@ public void ConstructorWithEmptyLocation()
 #endif
 
         /// <summary>
-        /// Test the valid constructors.
+        /// Test the valid constructors.  
         /// </summary>
         [Fact]
         public void TestValidConstructors()
@@ -326,7 +326,7 @@ public void TestValidConstructors()
         }
 
         /// <summary>
-        /// Test serialization / deserialization when the parameter dictionary is null.
+        /// Test serialization / deserialization when the parameter dictionary is null. 
         /// </summary>
         [Fact]
         public void TestTranslationWithNullDictionary()
@@ -429,7 +429,7 @@ public void TestTranslationWithAppDomainSetup(byte[] configBytes)
 #endif
 
         /// <summary>
-        /// Test serialization / deserialization when the parameter dictionary is empty.
+        /// Test serialization / deserialization when the parameter dictionary is empty. 
         /// </summary>
         [Fact]
         public void TestTranslationWithEmptyDictionary()
@@ -477,7 +477,7 @@ public void TestTranslationWithEmptyDictionary()
         }
 
         /// <summary>
-        /// Test serialization / deserialization when the parameter dictionary contains just value types.
+        /// Test serialization / deserialization when the parameter dictionary contains just value types. 
         /// </summary>
         [Fact]
         public void TestTranslationWithValueTypesInDictionary()
@@ -527,7 +527,7 @@ public void TestTranslationWithValueTypesInDictionary()
         }
 
         /// <summary>
-        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem.
+        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem. 
         /// </summary>
         [Fact]
         public void TestTranslationWithITaskItemInDictionary()
@@ -575,7 +575,7 @@ public void TestTranslationWithITaskItemInDictionary()
         }
 
         /// <summary>
-        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem array.
+        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem array. 
         /// </summary>
         [Fact]
         public void TestTranslationWithITaskItemArrayInDictionary()
@@ -627,7 +627,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
         }
 
         /// <summary>
-        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem array.
+        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem array. 
         /// </summary>
         [Fact]
         public void TestTranslationWithWarningsAsErrors()
@@ -723,7 +723,7 @@ public void TestTranslationWithWarningsAsMessages()
         }
 
         /// <summary>
-        /// Helper methods for testing the task host-related packets.
+        /// Helper methods for testing the task host-related packets. 
         /// </summary>
         internal static class TaskHostPacketHelpers
         {
@@ -739,12 +739,12 @@ internal static void AreEqual(ITaskItem[] x, ITaskItem[] y)
 
                 if (x == null || y == null)
                 {
-                    Assert.Fail("The two item lists are not equal -- one of them is null");
+                    Assert.True(false, "The two item lists are not equal -- one of them is null");
                 }
 
                 if (x.Length != y.Length)
                 {
-                    Assert.Fail("The two item lists have different lengths, so they cannot be equal");
+                    Assert.True(false, "The two item lists have different lengths, so they cannot be equal");
                 }
 
                 for (int i = 0; i < x.Length; i++)
@@ -765,7 +765,7 @@ internal static void AreEqual(ITaskItem x, ITaskItem y)
 
                 if (x == null || y == null)
                 {
-                    Assert.Fail("The two items are not equal -- one of them is null");
+                    Assert.True(false, "The two items are not equal -- one of them is null");
                 }
 
                 Assert.Equal(x.ItemSpec, y.ItemSpec);
@@ -779,7 +779,7 @@ internal static void AreEqual(ITaskItem x, ITaskItem y)
                 {
                     if (!metadataFromY.Contains(metadataName))
                     {
-                        Assert.Fail(string.Format("Only one item contains the '{0}' metadata", metadataName));
+                        Assert.True(false, string.Format("Only one item contains the '{0}' metadata", metadataName));
                     }
                     else
                     {
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 3b86b226915..2306910aabc 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -1264,7 +1264,7 @@ public void Regress751742_SkipNonexistentProjects()
                 }
                 else
                 {
-                    Assert.Fail("Unexpected project seen:" + item.ItemSpec);
+                    Assert.True(false, "Unexpected project seen:" + item.ItemSpec);
                 }
             }
         }
@@ -1910,7 +1910,7 @@ public void SolutionGeneratorCanEmitSolutions()
                 }
                 else
                 {
-                    Assert.Fail("Something went really wrong!  The SolutionFile wasn't even created!");
+                    Assert.True(false, "Something went really wrong!  The SolutionFile wasn't even created!");
                 }
             }
         }
diff --git a/src/Build.UnitTests/Definition/Toolset_Tests.cs b/src/Build.UnitTests/Definition/Toolset_Tests.cs
index 89f915cf8c1..2bf6e660b37 100644
--- a/src/Build.UnitTests/Definition/Toolset_Tests.cs
+++ b/src/Build.UnitTests/Definition/Toolset_Tests.cs
@@ -154,7 +154,7 @@ public void ValidateToolsetTranslation()
                 }
                 else
                 {
-                    Assert.Fail($"Sub-toolset {key} was lost in translation.");
+                    Assert.True(false, $"Sub-toolset {key} was lost in translation.");
                 }
             }
 
@@ -188,8 +188,8 @@ public void TestDefaultSubToolsetFor40()
                 }
                 else
                 {
-                    // Otherwise, it's the highest one numerically.  Since by definition if Dev10 isn't
-                    // installed and subtoolsets exists we must be at least Dev11, it should be "11.0"
+                    // Otherwise, it's the highest one numerically.  Since by definition if Dev10 isn't 
+                    // installed and subtoolsets exists we must be at least Dev11, it should be "11.0" 
                     Assert.Equal("11.0", t.DefaultSubToolsetVersion);
                 }
             }
@@ -438,8 +438,8 @@ public void TestGenerateSubToolsetVersion_SolutionVersionOverrides()
                 Assert.Equal("12.0", t.GenerateSubToolsetVersion(null, 13));
                 Assert.Equal("v13.0", t.GenerateSubToolsetVersion(null, 14));
 
-                // however, if there is no matching solution version, we just fall back to the
-                // default sub-toolset.
+                // however, if there is no matching solution version, we just fall back to the 
+                // default sub-toolset. 
                 Assert.Equal(t.DefaultSubToolsetVersion, t.GenerateSubToolsetVersion(null, 55));
             }
             finally
@@ -488,27 +488,27 @@ public void TestGetPropertyFromSubToolset()
         }
 
         /// <summary>
-        /// Creates a standard ProjectCollection and adds a fake toolset with the following contents to it:
-        ///
+        /// Creates a standard ProjectCollection and adds a fake toolset with the following contents to it:  
+        /// 
         /// ToolsVersion = Fake
-        /// Base Properties:
+        /// Base Properties: 
         /// a = a1
         /// b = b1
-        ///
-        /// SubToolset "12.0":
+        /// 
+        /// SubToolset "12.0": 
         /// d = d4
         /// e = e5
-        ///
-        /// SubToolset "v11.0":
+        /// 
+        /// SubToolset "v11.0": 
         /// b = b2
         /// c = c2
-        ///
+        /// 
         /// SubToolset "FakeSubToolset":
         /// a = a3
         /// c = c3
-        ///
+        /// 
         /// SubToolset "v13.0":
-        /// f = f6
+        /// f = f6 
         /// g = g7
         /// </summary>
         private Toolset GetFakeToolset(IDictionary<string, string> globalPropertiesForProjectCollection)
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 64870b3b989..221ea0026e2 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -1869,11 +1869,11 @@ public void AllEvaluatedProperties()
 
                 if (!allEvaluatedPropertiesWithNoBackingXmlAndNoDuplicates.TryGetValue(property.Name, out propertyFromAllEvaluated))
                 {
-                    Assert.Fail(String.Format("project.Properties contained property {0}, but AllEvaluatedProperties did not.", property.Name));
+                    Assert.True(false, String.Format("project.Properties contained property {0}, but AllEvaluatedProperties did not.", property.Name));
                 }
                 else if (!property.Equals(propertyFromAllEvaluated))
                 {
-                    Assert.Fail(String.Format("The properties in project.Properties and AllEvaluatedProperties for property {0} were different.", property.Name));
+                    Assert.True(false, String.Format("The properties in project.Properties and AllEvaluatedProperties for property {0} were different.", property.Name));
                 }
             }
 
@@ -2031,11 +2031,11 @@ public void AllEvaluatedPropertiesAndImports()
 
                     if (!allEvaluatedPropertiesWithNoBackingXmlAndNoDuplicates.TryGetValue(property.Name, out propertyFromAllEvaluated))
                     {
-                        Assert.Fail(String.Format("project.Properties contained property {0}, but AllEvaluatedProperties did not.", property.Name));
+                        Assert.True(false, String.Format("project.Properties contained property {0}, but AllEvaluatedProperties did not.", property.Name));
                     }
                     else if (!property.Equals(propertyFromAllEvaluated))
                     {
-                        Assert.Fail(String.Format("The properties in project.Properties and AllEvaluatedProperties for property {0} were different.", property.Name));
+                        Assert.True(false, String.Format("The properties in project.Properties and AllEvaluatedProperties for property {0} were different.", property.Name));
                     }
                 }
 
@@ -4363,7 +4363,7 @@ public void VerifyConditionEvaluatorResetStateOnFailure()
                     null,
                     new BuildEventContext(1, 2, 3, 4),
                     FileSystems.Default);
-                Assert.Fail("Expect exception due to the value of property \"TargetOSFamily\" is not a number.");
+                Assert.True(false, "Expect exception due to the value of property \"TargetOSFamily\" is not a number.");
             }
             catch (InvalidProjectFileException e)
             {
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index ae134588f38..030c6db60c3 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -4209,7 +4209,7 @@ public void Medley()
                 {
                     string message = "FAILURE: " + validTests[i][0] + " expanded to '" + result + "' instead of '" + validTests[i][1] + "'";
                     Console.WriteLine(message);
-                    Assert.Fail(message);
+                    Assert.True(false, message);
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/InvalidProjectFileException_Tests.cs b/src/Build.UnitTests/InvalidProjectFileException_Tests.cs
index 0987c3e9d6a..8e1d50c18d6 100644
--- a/src/Build.UnitTests/InvalidProjectFileException_Tests.cs
+++ b/src/Build.UnitTests/InvalidProjectFileException_Tests.cs
@@ -72,7 +72,7 @@ public void LogErrorShouldHavePathAndLocation()
                 MockLogger logger = new MockLogger(_testOutput);
                 ObjectModelHelpers.BuildTempProjectFileExpectFailure(file, logger);
 
-                Assert.Fail("Loading an invalid project should have thrown an InvalidProjectFileException.");
+                Assert.True(false, "Loading an invalid project should have thrown an InvalidProjectFileException.");
             }
             catch (InvalidProjectFileException e)
             {
diff --git a/src/Shared/UnitTests/ErrorUtilities_Tests.cs b/src/Shared/UnitTests/ErrorUtilities_Tests.cs
index e97a46f1943..c3ac1d5a7be 100644
--- a/src/Shared/UnitTests/ErrorUtilities_Tests.cs
+++ b/src/Shared/UnitTests/ErrorUtilities_Tests.cs
@@ -26,7 +26,7 @@ public void VerifyThrowFalse()
                 return;
             }
 
-            Assert.Fail("Should have thrown an exception");
+            Assert.True(false, "Should have thrown an exception");
         }
 
         [Fact]
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index cb89dd8e06d..5e5c6aca707 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -651,7 +651,7 @@ private static IReadOnlyList<string> GetFileSystemEntries(FileMatcher.FileSystem
             else
             {
                 Console.WriteLine("GetFileSystemEntries('{0}', '{1}')", path, pattern);
-                Assert.Fail("Unexpected input into GetFileSystemEntries");
+                Assert.True(false, "Unexpected input into GetFileSystemEntries");
             }
             return new string[] { "<undefined>" };
         }
@@ -2118,7 +2118,7 @@ private int GetMatchingFiles(string[] candidates, string path, string pattern, I
                             }
                             else
                             {
-                                Assert.Fail(String.Format("Unhandled case in GetMatchingFiles: {0}", pattern));
+                                Assert.True(false, String.Format("Unhandled case in GetMatchingFiles: {0}", pattern));
                             }
                         }
                     }
@@ -2175,7 +2175,7 @@ private void GetMatchingDirectories(string[] candidates, string path, string pat
                                 }
                                 else
                                 {
-                                    Assert.Fail(String.Format("Unhandled case in GetMatchingDirectories: {0}", pattern));
+                                    Assert.True(false, String.Format("Unhandled case in GetMatchingDirectories: {0}", pattern));
                                 }
                             }
                         }
@@ -2498,7 +2498,7 @@ private static void ValidateSplitFileSpec(
                 Console.WriteLine("Expect Fixed '{0}' got '{1}'", expectedFixedDirectoryPart, fixedDirectoryPart);
                 Console.WriteLine("Expect Wildcard '{0}' got '{1}'", expectedWildcardDirectoryPart, wildcardDirectoryPart);
                 Console.WriteLine("Expect Filename '{0}' got '{1}'", expectedFilenamePart, filenamePart);
-                Assert.Fail("FileMatcher Regression: Failure while validating SplitFileSpec.");
+                Assert.True(false, "FileMatcher Regression: Failure while validating SplitFileSpec.");
             }
         }
 
@@ -2526,7 +2526,7 @@ private static void ValidateFileMatch(
         {
             if (!IsFileMatchAssertIfIllegal(filespec, fileToMatch, shouldBeRecursive))
             {
-                Assert.Fail("FileMatcher Regression: Failure while validating that files match.");
+                Assert.True(false, "FileMatcher Regression: Failure while validating that files match.");
             }
 
             // Now, simulate a filesystem with only fileToMatch. Make sure the file exists that way.
@@ -2551,7 +2551,7 @@ private static void ValidateNoFileMatch(
         {
             if (IsFileMatchAssertIfIllegal(filespec, fileToMatch, shouldBeRecursive))
             {
-                Assert.Fail("FileMatcher Regression: Failure while validating that files don't match.");
+                Assert.True(false, "FileMatcher Regression: Failure while validating that files don't match.");
             }
 
             // Now, simulate a filesystem with only fileToMatch. Make sure the file doesn't exist that way.
@@ -2579,7 +2579,7 @@ private static void ValidateIllegal(
 
             if (isLegalFileSpec)
             {
-                Assert.Fail("FileMatcher Regression: Expected an illegal filespec, but got a legal one.");
+                Assert.True(false, "FileMatcher Regression: Expected an illegal filespec, but got a legal one.");
             }
 
             // Now, FileMatcher is supposed to take any legal file name and just return it immediately.
@@ -2604,7 +2604,7 @@ private static bool IsFileMatchAssertIfIllegal(
             if (!match.isLegalFileSpec)
             {
                 Console.WriteLine("Checking FileSpec: '{0}' against '{1}'", filespec, fileToMatch);
-                Assert.Fail("FileMatcher Regression: Invalid filespec.");
+                Assert.True(false, "FileMatcher Regression: Invalid filespec.");
             }
             if (shouldBeRecursive != match.isFileSpecRecursive)
             {
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index ae35c29b63b..df21aa2f2e6 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -176,9 +176,9 @@ internal string FullLog
 
         /*
          * Property:    Parameters
-         *
+         * 
          * The mock logger does not take parameters.
-         *
+         * 
          */
         public string Parameters { get; set; }
 
@@ -223,9 +223,9 @@ public void ClearLog()
 
         /*
          * Method:  Shutdown
-         *
+         * 
          * The mock logger does not need to release any resources.
-         *
+         * 
          */
         public void Shutdown()
         {
@@ -497,7 +497,9 @@ internal void AssertLogContains(bool isCaseSensitive, params string[] contains)
                         PrintFullLog();
                     }
 
-                    Assert.Fail($"Log was expected to contain '{contains[index]}', but did not. Full log:\n=======\n{FullLog}\n=======");
+                    Assert.True(
+                        false,
+                        $"Log was expected to contain '{contains[index]}', but did not. Full log:\n=======\n{FullLog}\n=======");
                 }
             }
         }
@@ -521,7 +523,7 @@ internal void AssertLogDoesntContain(string contains)
                         PrintFullLog();
                     }
 
-                    Assert.Fail($"Log was not expected to contain '{contains}', but did.");
+                    Assert.True(false, $"Log was not expected to contain '{contains}', but did.");
                 }
             }
         }
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 5c31af8e3ee..659aea6dab9 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -442,7 +442,7 @@ internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] ac
             // Log an error for any leftover items in the expectedItems collection.
             foreach (ITaskItem expectedItem in expectedItems)
             {
-                Assert.Fail(string.Format("Item '{0}' was expected but not returned.", expectedItem.ItemSpec));
+                Assert.True(false, string.Format("Item '{0}' was expected but not returned.", expectedItem.ItemSpec));
             }
 
             if (outOfOrder)
@@ -450,7 +450,7 @@ internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] ac
                 Console.WriteLine("ERROR:  Items were returned in the incorrect order...");
                 Console.WriteLine("Expected:  " + expectedItemSpecs);
                 Console.WriteLine("Actual:    " + actualItemSpecs);
-                Assert.Fail("Items were returned in the incorrect order.  See 'Standard Out' tab for more details.");
+                Assert.True(false, "Items were returned in the incorrect order.  See 'Standard Out' tab for more details.");
             }
         }
 
@@ -1144,7 +1144,7 @@ internal static string GetOSPlatformAsString()
             }
             else
             {
-                Assert.Fail("unrecognized current platform");
+                Assert.True(false, "unrecognized current platform");
             }
 
             return currentPlatformString;
@@ -1873,7 +1873,7 @@ internal static void VerifyAssertThrowsSameWay(Action method1, Action method2)
 
             if (ex1 == null && ex2 == null)
             {
-                Assert.Fail("Neither threw");
+                Assert.True(false, "Neither threw");
             }
 
             Assert.NotNull(ex1); // "First method did not throw, second: {0}", ex2 == null ? "" : ex2.GetType() + ex2.Message);
@@ -1931,7 +1931,7 @@ internal static void VerifyAssertLineByLine(string expected, string actual, bool
                 string output = "\r\n#################################Expected#################################\n" + string.Join("\r\n", expectedLines);
                 output += "\r\n#################################Actual#################################\n" + string.Join("\r\n", actualLines);
 
-                Assert.Fail(output);
+                Assert.True(false, output);
             }
 
             if (actualLines.Length > expectedLines.Length)
@@ -1939,14 +1939,14 @@ internal static void VerifyAssertLineByLine(string expected, string actual, bool
                 LogLine("\n#################################Expected#################################\n" + string.Join("\n", expectedLines));
                 LogLine("#################################Actual#################################\n" + string.Join("\n", actualLines));
 
-                Assert.Fail("Expected content was shorter, actual had this extra line: '" + actualLines[expectedLines.Length] + "'");
+                Assert.True(false, "Expected content was shorter, actual had this extra line: '" + actualLines[expectedLines.Length] + "'");
             }
             else if (actualLines.Length < expectedLines.Length)
             {
                 LogLine("\n#################################Expected#################################\n" + string.Join("\n", expectedLines));
                 LogLine("#################################Actual#################################\n" + string.Join("\n", actualLines));
 
-                Assert.Fail("Actual content was shorter, expected had this extra line: '" + expectedLines[actualLines.Length] + "'");
+                Assert.True(false, "Actual content was shorter, expected had this extra line: '" + expectedLines[actualLines.Length] + "'");
             }
         }
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 8d5e09f4628..43d8b0b2016 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -553,17 +553,17 @@ public void Basic()
                 {
                     // The version of System.Xml.dll in C:\MyProject is an older version.
                     // This version is not a match. When want the current version which should have been in a different directory.
-                    Assert.Fail("Wrong version of System.Xml.dll matched--version was wrong");
+                    Assert.True(false, "Wrong version of System.Xml.dll matched--version was wrong");
                 }
                 else if (String.Equals(item.ItemSpec, Path.Combine(s_myProjectPath, "System.Data.dll"), StringComparison.OrdinalIgnoreCase))
                 {
                     // The version of System.Data.dll in C:\MyProject has an incorrect PKT
                     // This version is not a match.
-                    Assert.Fail("Wrong version of System.Data.dll matched--public key token was wrong");
+                    Assert.True(false, "Wrong version of System.Data.dll matched--public key token was wrong");
                 }
                 else
                 {
-                    Assert.Fail(String.Format("A new resolved file called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
+                    Assert.True(false, String.Format("A new resolved file called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
                 }
             }
 
@@ -593,14 +593,14 @@ public void Basic()
                 }
                 else
                 {
-                    Assert.Fail(String.Format("A new dependency called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
+                    Assert.True(false, String.Format("A new dependency called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
                 }
             }
 
             // Process the related files.
             foreach (ITaskItem item in t.RelatedFiles)
             {
-                Assert.Fail(String.Format("A new dependency called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
+                Assert.True(false, String.Format("A new dependency called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
             }
 
             // Process the satellites.
@@ -622,7 +622,7 @@ public void Basic()
                 }
                 else
                 {
-                    Assert.Fail(String.Format("A new dependency called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
+                    Assert.True(false, String.Format("A new dependency called '{0}' was found. If this is intentional, then add unittests above.", item.ItemSpec));
                 }
             }
 
@@ -786,7 +786,7 @@ public void EmbedInteropTypes()
 
                     if (j == assembliesCount)
                     {
-                        Assert.Fail(String.Format("{0}: A new resolved file called '{1}' was found. If this is intentional, then add unittests above.", fxVersion, item.ItemSpec));
+                        Assert.True(false, String.Format("{0}: A new resolved file called '{1}' was found. If this is intentional, then add unittests above.", fxVersion, item.ItemSpec));
                     }
                 }
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 81227523095..6b025c4256d 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -323,7 +323,7 @@ internal void StopIOMonitoringAndAssert_Minimal_IOUse(int ioThreshold = 1)
                 if (count > ioThreshold)
                 {
                     string message = String.Format("File.Exists() was called {0} times with path {1}.", count, path);
-                    Assert.Fail(message);
+                    Assert.True(false, message);
                 }
             }
 
@@ -344,7 +344,7 @@ internal void StopIOMonitoringAndAssert_Zero_IOUse()
                 if (count > 0)
                 {
                     string message = String.Format("File.Exists() was called {0} times with path {1}.", count, path);
-                    Assert.Fail(message);
+                    Assert.True(false, message);
                 }
             }
 
@@ -356,7 +356,7 @@ internal void StopIOMonitoringAndAssert_Zero_IOUse()
                 if (count > 0)
                 {
                     string message = String.Format("GetAssemblyName() was called {0} times with path {1}.", count, path);
-                    Assert.Fail(message);
+                    Assert.True(false, message);
                 }
             }
 
@@ -640,7 +640,7 @@ internal static string[] GetFiles(string path, string pattern)
             }
             else
             {
-                Assert.Fail("Unsupported GetFiles pattern " + pattern);
+                Assert.True(false, "Unsupported GetFiles pattern " + pattern);
             }
 
             ArrayList matches = new ArrayList();
@@ -2752,7 +2752,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
                 }
             }
 
-            Assert.Fail($"New GetRegistrySubKeyNames parameters encountered, need to add unittesting support for subKey={subKey}");
+            Assert.True(false, $"New GetRegistrySubKeyNames parameters encountered, need to add unittesting support for subKey={subKey}");
             return null;
         }
 
@@ -2891,7 +2891,7 @@ private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string
                 }
             }
 
-            Assert.Fail($"New GetRegistrySubKeyDefaultValue parameters encountered, need to add unittesting support for subKey={subKey}");
+            Assert.True(false, $"New GetRegistrySubKeyDefaultValue parameters encountered, need to add unittesting support for subKey={subKey}");
             return null;
         }
 
diff --git a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
index ce9d7feadcb..9965648369b 100644
--- a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
+++ b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
@@ -81,7 +81,7 @@ public void KeyContainer()
                 }
                 else
                 {
-                    Assert.Fail("Key container could not be created (perhaps you are not running as admin).");
+                    Assert.True(false, "Key container could not be created (perhaps you are not running as admin).");
                 }
             }
             finally
@@ -192,7 +192,7 @@ public void KeyFileWithSpaces()
         }
 
         /// <summary>
-        /// Tests the SdkToolsPath property:  Should log an error if it's null or a bad path.
+        /// Tests the SdkToolsPath property:  Should log an error if it's null or a bad path.  
         /// </summary>
         [Fact]
         public void SdkToolsPath()
@@ -226,7 +226,7 @@ public void SdkToolsPath()
         }
 
         /// <summary>
-        /// Tests the ToolPath property:  Should log an error if it's null or a bad path.
+        /// Tests the ToolPath property:  Should log an error if it's null or a bad path.  
         /// </summary>
         [Fact]
         public void ToolPath()
@@ -286,13 +286,13 @@ public void TaskFailsWhenImproperlySigned()
                 t.KeyFile = tempKeyFile;
                 Utilities.ExecuteTaskAndVerifyLogContainsErrorFromResource(t, "AxTlbBaseTask.CannotSpecifyBothKeyFileAndKeyContainer");
 
-                // All the inputs are correct, but the KeyContainer passed in is bad
+                // All the inputs are correct, but the KeyContainer passed in is bad            
                 t.DelaySign = false;
                 t.KeyContainer = tempKeyContainer;
                 t.KeyFile = null;
                 Utilities.ExecuteTaskAndVerifyLogContainsErrorFromResource(t, "AxTlbBaseTask.StrongNameUtils.NoKeyPairInContainer", t.KeyContainer);
 
-                // All the inputs are correct, but the KeyFile passed in is bad
+                // All the inputs are correct, but the KeyFile passed in is bad            
                 t.KeyContainer = null;
                 t.KeyFile = tempKeyFile;
                 Utilities.ExecuteTaskAndVerifyLogContainsErrorFromResource(t, "AxTlbBaseTask.StrongNameUtils.NoKeyPairInFile", t.KeyFile);
@@ -316,7 +316,7 @@ internal sealed class Utilities
         /// <summary>
         /// Given an instance of an AxImp task, executes that task (assuming all necessary parameters
         /// have been set ahead of time) and verifies that the execution log contains the error
-        /// corresponding to the resource name passed in.
+        /// corresponding to the resource name passed in. 
         /// </summary>
         /// <param name="t">The task to execute and check</param>
         /// <param name="errorResource">The name of the resource string to check the log for</param>
@@ -349,7 +349,7 @@ internal static void VerifyLogContainsErrorFromResource(MockEngine e, TaskLoggin
         /// <summary>
         /// Given an instance of an AxImp task, executes that task (assuming all necessary parameters
         /// have been set ahead of time) and verifies that the execution log does not contain the error
-        /// corresponding to the resource name passed in.
+        /// corresponding to the resource name passed in. 
         /// </summary>
         /// <param name="t">The task to execute and check</param>
         /// <param name="errorResource">The name of the resource string to check the log for</param>
diff --git a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
index e816ca11e4d..97b019804eb 100644
--- a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
@@ -18,7 +18,7 @@ public sealed class CommandLineBuilderExtensionTest
         /*
         * Method:   AppendItemWithInvalidBooleanAttribute
         *
-        * When appending an ITaskItem[] where some of the flags are 'bool', it's possible that
+        * When appending an ITaskItem[] where some of the flags are 'bool', it's possible that 
         * the boolean flag has a string value that cannot be converted to a boolean. In this
         * case we expect an exception.
         */
@@ -47,7 +47,7 @@ public void AppendItemWithInvalidBooleanAttribute()
                 }
                 catch (ArgumentException e)
                 {
-                    Assert.Fail("Got an unexpected exception:" + e.Message);
+                    Assert.True(false, "Got an unexpected exception:" + e.Message);
                 }
 
                 // Now try a bogus boolean.
diff --git a/src/Tasks.UnitTests/CommandLine_Support.cs b/src/Tasks.UnitTests/CommandLine_Support.cs
index faf373a6a5c..36ca55794f3 100644
--- a/src/Tasks.UnitTests/CommandLine_Support.cs
+++ b/src/Tasks.UnitTests/CommandLine_Support.cs
@@ -96,13 +96,13 @@ internal static int ValidateHasParameter(ToolTaskExtension t, string parameter,
 
             msg += "Not found!\r\n";
             Console.WriteLine(msg);
-            Assert.Fail(msg); // Could not find the parameter.
+            Assert.True(false, msg); // Could not find the parameter.
 
             return 0;
         }
 
         /// <summary>
-        /// Validates that the given ToolTaskExtension's command line does not contain
+        /// Validates that the given ToolTaskExtension's command line does not contain 
         /// any parameter starting with the given string.
         /// </summary>
         /// <param name="t">task to get the command line from</param>
@@ -114,7 +114,7 @@ internal static void ValidateNoParameterStartsWith(ToolTaskExtension t, string s
         }
 
         /// <summary>
-        /// Validates that the given ToolTaskExtension's command line does not contain
+        /// Validates that the given ToolTaskExtension's command line does not contain 
         /// any parameter starting with the given string.
         /// </summary>
         /// <param name="t">task to get the command line from</param>
@@ -125,7 +125,7 @@ internal static void ValidateNoParameterStartsWith(ToolTaskExtension t, string s
         }
 
         /// <summary>
-        /// Validates that the given ToolTaskExtension's command line does not contain
+        /// Validates that the given ToolTaskExtension's command line does not contain 
         /// any parameter starting with the given string.
         /// </summary>
         /// <param name="t">task to get the command line from</param>
@@ -137,7 +137,7 @@ internal static void ValidateNoParameterStartsWith(ToolTaskExtension t, string s
         }
 
         /// <summary>
-        /// Validates that the given ToolTaskExtension's command line does not contain
+        /// Validates that the given ToolTaskExtension's command line does not contain 
         /// any parameter starting with the given string.
         /// </summary>
         /// <param name="t">task to get the command line from</param>
@@ -185,7 +185,7 @@ internal static void ValidateNoParameterStartsWith(
                     {
                         msg += String.Format(" Found something!\r\n");
                         Console.WriteLine(msg);
-                        Assert.Fail(msg); // Found the startsWith but shouldn't have.
+                        Assert.True(false, msg); // Found the startsWith but shouldn't have.
                         return;
                     }
                 }
@@ -221,7 +221,7 @@ internal static void ValidateContains(ToolTaskExtension t, string lookFor, bool
             {
                 msg += "Not found!\r\n";
                 Console.WriteLine(msg);
-                Assert.Fail(msg);
+                Assert.True(false, msg);
             }
         }
 
@@ -253,7 +253,7 @@ internal static void ValidateDoesNotContain(ToolTaskExtension t, string lookFor,
             {
                 msg += "Found!\r\n";
                 Console.WriteLine(msg);
-                Assert.Fail(msg);
+                Assert.True(false, msg);
             }
         }
 
@@ -284,7 +284,7 @@ internal static void ValidateEquals(ToolTaskExtension t, string lookFor, bool us
             {
                 msg += "Does not match!\r\n";
                 Console.WriteLine(msg);
-                Assert.Fail(msg);
+                Assert.True(false, msg);
             }
         }
 
diff --git a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
index b32ac6fe883..ab9c9fbc182 100644
--- a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
@@ -756,7 +756,7 @@ namespace ClassLibrary2
 namespace ClassLibrary3
 #endif
 {
-    class MyForm
+    class MyForm 
     {
     }
 }"),
@@ -780,7 +780,7 @@ private Stream CreateFileStream(string path, FileMode mode, FileAccess access)
             {
                 return StreamHelpers.StringToStream("namespace MyStuff.Namespace { class Class {} }");
             }
-            Assert.Fail(String.Format("Encountered a new path {0}, needs unittesting support", path));
+            Assert.True(false, String.Format("Encountered a new path {0}, needs unittesting support", path));
             return null;
         }
 
diff --git a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
index 70ec1fb1452..884509b1b86 100644
--- a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
@@ -41,8 +41,8 @@ public void Basic()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -67,8 +67,8 @@ public void RelativeDependentUpon()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace TestNamespace
-    Class TestClass
+Namespace TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -93,8 +93,8 @@ public void AbsoluteDependentUpon()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -119,8 +119,8 @@ public void DependentWithCulture()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -146,8 +146,8 @@ public void DependentWithCultureMetadata()
                     culture: "en-GB",
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -172,8 +172,8 @@ public void DependentWithCultureAndRootNamespace()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -198,8 +198,8 @@ public void DependentWithEmbeddedCulture()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 "),
@@ -417,14 +417,14 @@ private Stream CreateFileStream(string path, FileMode mode, FileAccess access)
             {
                 return StreamHelpers.StringToStream(
 @"
-Namespace Nested.TestNamespace
-    Class TestClass
+Namespace Nested.TestNamespace 
+    Class TestClass 
     End Class
 End Namespace
 ");
             }
 
-            Assert.Fail(String.Format("Encountered a new path {0}, needs unittesting support", path));
+            Assert.True(false, String.Format("Encountered a new path {0}, needs unittesting support", path));
             return null;
         }
 
@@ -454,7 +454,7 @@ public void Regress419591()
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(
 @"
-    Class MyForm
+    Class MyForm 
     End Class
 "),
                     log: null);
@@ -492,8 +492,8 @@ Namespace ClassLibrary1
 Namespace ClassLibrary2
 #else
 Namespace ClassLibrary3
-#end if
-    Class MyForm
+#end if 
+    Class MyForm 
     End Class
 End Namespace
 "),
diff --git a/src/Tasks.UnitTests/MockTypeInfo.cs b/src/Tasks.UnitTests/MockTypeInfo.cs
index 3ba35b10e37..aabf7050f11 100644
--- a/src/Tasks.UnitTests/MockTypeInfo.cs
+++ b/src/Tasks.UnitTests/MockTypeInfo.cs
@@ -47,7 +47,7 @@ public TYPEDESC CreateTypeDesc(IntPtr finalTypeHRef, MockUnmanagedMemoryHelper m
         }
 
         /// <summary>
-        /// Defer to the base element to get the final type info - this will eventually terminate at a MockTypeInfo node
+        /// Defer to the base element to get the final type info - this will eventually terminate at a MockTypeInfo node 
         /// which returns itself
         /// </summary>
         /// <returns></returns>
@@ -278,11 +278,11 @@ void IFixedTypeInfo.GetRefTypeInfo(System.IntPtr hRef, out IFixedTypeInfo ppTI)
             else
             {
                 ppTI = null;
-                Assert.Fail("unexpected hRef value");
+                Assert.True(false, "unexpected hRef value");
             }
         }
 
-        #endregion
+        #endregion 
 
         #region Implemented ITypeInfo members
 
@@ -345,7 +345,7 @@ public void GetRefTypeInfo(int hRef, out ITypeInfo ppTI)
             else
             {
                 ppTI = null;
-                Assert.Fail("unexpected hRef value");
+                Assert.True(false, "unexpected hRef value");
             }
         }
 
diff --git a/src/Tasks.UnitTests/MockTypeLib.cs b/src/Tasks.UnitTests/MockTypeLib.cs
index fd3fd1e5ebb..28b42a5fa5c 100644
--- a/src/Tasks.UnitTests/MockTypeLib.cs
+++ b/src/Tasks.UnitTests/MockTypeLib.cs
@@ -223,7 +223,7 @@ public void GetCustData(ref Guid guid, out object pVarVal)
             }
             else
             {
-                Assert.Fail("unexpected guid in ITypeLib2.GetCustData");
+                Assert.True(false, "unexpected guid in ITypeLib2.GetCustData");
                 pVarVal = null;
             }
         }
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 49ecb661be0..72117637d4a 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -65,7 +65,7 @@ private static bool FileExists(string path)
             {
                 return true;
             }
-            Assert.Fail("Unexpected file exists: " + path);
+            Assert.True(false, "Unexpected file exists: " + path);
 
             return true;
         }
@@ -87,7 +87,7 @@ private static FileStream FileCreate(string path)
             }
 
 
-            Assert.Fail("Unexpected file create: " + path);
+            Assert.True(false, "Unexpected file create: " + path);
             return null;
         }
 
@@ -114,7 +114,7 @@ private static FileAttributes GetAttributes(string path)
                 return System.IO.FileAttributes.ReadOnly;
             }
 
-            Assert.Fail("Unexpected file attributes: " + path);
+            Assert.True(false, "Unexpected file attributes: " + path);
             return a;
         }
 
@@ -128,7 +128,7 @@ private static void SetAttributes(string path, FileAttributes attributes)
             {
                 return;
             }
-            Assert.Fail("Unexpected set file attributes: " + path);
+            Assert.True(false, "Unexpected set file attributes: " + path);
         }
 
         /// <summary>
@@ -153,7 +153,7 @@ private static void SetLastAccessTime(string path, DateTime timestamp)
                 throw new IOException();
             }
 
-            Assert.Fail("Unexpected set last access time: " + path);
+            Assert.True(false, "Unexpected set last access time: " + path);
         }
 
         /// <summary>
@@ -178,7 +178,7 @@ private static void SetLastWriteTime(string path, DateTime timestamp)
             }
 
 
-            Assert.Fail("Unexpected set last write time: " + path);
+            Assert.True(false, "Unexpected set last write time: " + path);
         }
 
         [Fact]
diff --git a/src/Tasks.UnitTests/XamlTestHelpers.cs b/src/Tasks.UnitTests/XamlTestHelpers.cs
index 58c8858e1aa..15e4609b432 100644
--- a/src/Tasks.UnitTests/XamlTestHelpers.cs
+++ b/src/Tasks.UnitTests/XamlTestHelpers.cs
@@ -38,7 +38,7 @@ internal static class XamlTestHelpers
                                               <StringProperty Name=`BasicFileWOSwitch` />
                                               <StringProperty Name=`BasicDirectory` />
                                               <DynamicEnumProperty Name=`BasicDynamicEnum` />
-
+                                              
                                               <!-- More Complex types -->
                                               <BoolProperty Name=`ComplexReversible` Switch=`/Cr:CT` ReverseSwitch=`/Cr:CF` Separator=`:` />
                                               <BoolProperty Name=`ComplexNonreversibleWArgument` Switch=`/Cnrwa`>
@@ -54,7 +54,7 @@ internal static class XamlTestHelpers
                                               <IntProperty Name=`ComplexInteger` Switch=`/Ci` MinValue=`64` MaxValue=`255` />
 
                                               <!-- Dependencies, fallbacks, and so on -->
-                                              <BoolProperty Name=`OtherNonreversible` Switch=`/Onr`>
+                                              <BoolProperty Name=`OtherNonreversible` Switch=`/Onr`> 
                                                 <Argument IsRequired=`true` Property=`ComplexFileNoDefault` />
                                               </BoolProperty>
                                               <StringProperty Name=`ComplexDirectory` />
@@ -89,7 +89,7 @@ internal static class XamlTestHelpers
         private static string s_pathToMSBuildBinaries = null;
 
         /// <summary>
-        /// Returns the path to the MSBuild binaries
+        /// Returns the path to the MSBuild binaries 
         /// </summary>
         public static string PathToMSBuildBinaries
         {
@@ -121,7 +121,7 @@ public static Assembly SetupGeneratedCode(string xml)
             }
             catch (XamlParseException)
             {
-                Assert.Fail("Parse of FakeTask XML failed");
+                Assert.True(false, "Parse of FakeTask XML failed");
             }
 
             TaskGenerator tg = new TaskGenerator(tp);
@@ -147,7 +147,7 @@ public static Assembly SetupGeneratedCode(string xml)
                 cp.ReferencedAssemblies.Add(Path.Combine(PathToMSBuildBinaries, "Microsoft.Build.Utilities.Core.dll"));
                 cp.ReferencedAssemblies.Add(Path.Combine(PathToMSBuildBinaries, "Microsoft.Build.Tasks.Core.dll"));
 
-                // Generate an executable instead of
+                // Generate an executable instead of 
                 // a class library.
                 cp.GenerateExecutable = false;
                 // Set the assembly file name to generate.
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index d38d9f8e763..e449c1e8dea 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -127,7 +127,7 @@ public void XmlXslParameters()
                             t.XmlInputPaths = (TaskItem[])xmlValue;
                             break;
                         default:
-                            Assert.Fail("Test error");
+                            Assert.True(false, "Test error");
                             break;
                     }
 
@@ -143,7 +143,7 @@ public void XmlXslParameters()
                             t.XslCompiledDllPath = (TaskItem)xslValue;
                             break;
                         default:
-                            Assert.Fail("Test error");
+                            Assert.True(false, "Test error");
                             break;
                     }
 
@@ -188,7 +188,7 @@ public void MissingXslParameter()
                         t.XmlInputPaths = (TaskItem[])xmlValue;
                         break;
                     default:
-                        Assert.Fail("Test error");
+                        Assert.True(false, "Test error");
                         break;
                 }
 
@@ -237,7 +237,7 @@ public void MissingXmlParameter()
                         t.XslCompiledDllPath = (TaskItem)xslValue;
                         break;
                     default:
-                        Assert.Fail("Test error");
+                        Assert.True(false, "Test error");
                         break;
                 }
 
@@ -1213,7 +1213,7 @@ private void Compile(string inputFile, string outputFile)
             }
             catch (Exception e)
             {
-                Assert.Fail("Compiler didn't work" + e.ToString());
+                Assert.True(false, "Compiler didn't work" + e.ToString());
             }
 
             asmBldr.Save(Path.GetFileName(outputFile), PortableExecutableKinds.ILOnly, ImageFileMachine.I386);
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index 34b5c48c128..22a0dae0bf4 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -79,7 +79,7 @@ public FileTrackerTests()
 
         public void Dispose()
         {
-            // Reset PATH to its original value.
+            // Reset PATH to its original value. 
             if (s_oldPath != null)
             {
                 Environment.SetEnvironmentVariable("PATH", s_oldPath);
@@ -123,8 +123,8 @@ public void FileTrackerNoUIDll()
                     Directory.Delete(testDirectory, true);
                 }
 
-                // create an empty directory and copy Tracker.exe -- BUT NOT TrackerUI.dll -- to
-                // that directory.
+                // create an empty directory and copy Tracker.exe -- BUT NOT TrackerUI.dll -- to 
+                // that directory. 
                 Directory.CreateDirectory(testDirectory);
                 File.Copy(s_defaultTrackerPath, testTrackerPath);
 
@@ -132,14 +132,14 @@ public void FileTrackerNoUIDll()
 
                 Assert.Equal(9, exit);
                 // It's OK to look for the English message since that's all we're capable of printing when we can't find
-                // our resource dll.
+                // our resource dll. 
                 Assert.Contains("FileTracker : ERROR : Could not load UI satellite dll 'TrackerUI.dll'", log);
             }
             finally
             {
-                // Doesn't delete the directory itself, but deletes its contents.  If you try to delete the directory,
-                // even after calling this method, it sometimes throws IO exceptions due to not recognizing that the
-                // contents have been deleted yet.
+                // Doesn't delete the directory itself, but deletes its contents.  If you try to delete the directory, 
+                // even after calling this method, it sometimes throws IO exceptions due to not recognizing that the 
+                // contents have been deleted yet. 
                 ObjectModelHelpers.DeleteDirectory(testDirectory);
             }
         }
@@ -303,11 +303,11 @@ class Program
         static void Main(string[] args)
         {
             File.GetAttributes(Directory.GetCurrentDirectory());
-            GetFileAttributes(Directory.GetCurrentDirectory());
+            GetFileAttributes(Directory.GetCurrentDirectory()); 
         }
 
         [DllImport(""Kernel32.dll"", SetLastError = true, CharSet = CharSet.Unicode)]
-        private extern static uint GetFileAttributes(string FileName);
+        private extern static uint GetFileAttributes(string FileName); 
     }
 }";
 
@@ -344,7 +344,7 @@ static void Main(string[] args)
                 Console.WriteLine("");
                 Assert.Equal(0, exit);
 
-                // With '/a', should *not* track GetFileAttributes on directories, even though we do so on files.
+                // With '/a', should *not* track GetFileAttributes on directories, even though we do so on files. 
                 FileTrackerTestHelper.AssertDidntFindStringInTLog("GetFileAttributesExW:" + FileUtilities.EnsureTrailingSlash(Directory.GetCurrentDirectory()).ToUpperInvariant(), "directoryattributes.read.1.tlog");
                 FileTrackerTestHelper.AssertDidntFindStringInTLog("GetFileAttributesW:" + FileUtilities.EnsureTrailingSlash(Directory.GetCurrentDirectory()).ToUpperInvariant(), "directoryattributes.read.1.tlog");
 
@@ -382,7 +382,7 @@ static void Main(string[] args)
                 Console.WriteLine("");
                 Assert.Equal(0, exit);
 
-                // With '/a', should *not* track GetFileAttributes on directories, even though we do so on files.
+                // With '/a', should *not* track GetFileAttributes on directories, even though we do so on files. 
                 FileTrackerTestHelper.AssertDidntFindStringInTLog(FileUtilities.EnsureTrailingSlash(Directory.GetCurrentDirectory()).ToUpperInvariant(), "directoryattributes.read.1.tlog");
 
                 File.Delete("directoryattributes.read.1.tlog");
@@ -470,12 +470,12 @@ public void FileTrackerDoNotRecordWriteAsRead()
                 writeFile = Path.Combine(testDirectory, "test.out");
                 string codeFile = Path.Combine(testDirectory, "code.cs");
                 string codeContent = @"
-using System.IO;
+using System.IO; 
 using System.Runtime.InteropServices;
-class X
-{
-    static void Main()
-    {
+class X 
+{ 
+    static void Main() 
+    { 
         FileStream f = File.Open(@""" + writeFile + @""", FileMode.CreateNew, FileAccess.ReadWrite, FileShare.ReadWrite);
         f.WriteByte(8);
         f.Close();
@@ -501,9 +501,9 @@ static void Main()
             }
             finally
             {
-                // Doesn't delete the directory itself, but deletes its contents.  If you try to delete the directory,
-                // even after calling this method, it sometimes throws IO exceptions due to not recognizing that the
-                // contents have been deleted yet.
+                // Doesn't delete the directory itself, but deletes its contents.  If you try to delete the directory, 
+                // even after calling this method, it sometimes throws IO exceptions due to not recognizing that the 
+                // contents have been deleted yet. 
                 ObjectModelHelpers.DeleteDirectory(testDirectory);
             }
 
@@ -1381,7 +1381,7 @@ public void InProcTrackingStartProcessFindStrIn()
             }
             Console.WriteLine("");
             Assert.Equal(0, exit);
-            // This line is the problem.  It seems to have been reliable in MSTest
+            // This line is the problem.  It seems to have been reliable in MSTest 
             // but in xunit when run with other tests (NOT by itself), filetracker
             // puts a PID in the path, so this tries to open the wrong file and throws.
             FileTrackerTestHelper.AssertFoundStringInTLog(Path.GetFullPath("test.in").ToUpperInvariant(), "InProcTrackingStartProcessFindStrIn-findstr.read.1.tlog");
@@ -2239,7 +2239,7 @@ public void LaunchMultipleOfSameTool_ToolLaunchesOthers()
 
                 Directory.CreateDirectory(testDir);
 
-                // File to run findstr against.
+                // File to run findstr against. 
                 string tempFilePath = Path.Combine(testDir, "bar.txt");
                 File.WriteAllText(tempFilePath, "");
 
@@ -2430,7 +2430,7 @@ private static void LaunchDuplicateToolsAndVerifyTlogExistsForEach(string tlogPa
 
                 // make sure the disk write gets time for NTFS to recognize its existence.  Estimate time needed to sleep based
                 // roughly on the number of tlogs that we're looking for (presumably roughly proportional to the number of tlogs
-                // being written.
+                // being written. 
                 Thread.Sleep(Math.Max(200, 250 * tlogCount));
 
                 // Item1: The pattern the tlog name should follow
@@ -2524,7 +2524,7 @@ public static void AssertDidntFindStringInTLog(string file, string tlog)
             {
                 if (file.Equals(lines[i], StringComparison.OrdinalIgnoreCase))
                 {
-                    Assert.Fail("Found string '" + file + "' in '" + tlog + "' at line " + i + ", when it shouldn't have been in the log at all.");
+                    Assert.True(false, "Found string '" + file + "' in '" + tlog + "' at line " + i + ", when it shouldn't have been in the log at all.");
                 }
             }
         }
@@ -2549,7 +2549,7 @@ public static void AssertFoundStringInTLog(string file, string tlog, int timesFo
 
             if (timesFound != timesFoundSoFar)
             {
-                Assert.Fail("Searched " + tlog + " but didn't find " + timesFound + " instances of " + file);
+                Assert.True(false, "Searched " + tlog + " but didn't find " + timesFound + " instances of " + file);
             }
         }
 
