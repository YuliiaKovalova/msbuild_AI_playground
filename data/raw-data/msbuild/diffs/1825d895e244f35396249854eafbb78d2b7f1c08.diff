diff --git a/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs b/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
index 1bd6c390892..98ad9f1f8b0 100644
--- a/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
@@ -12,4 +12,6 @@ public interface IBuildCheckRegistrationContext
     void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsCheckData>> parsedItemsAction);
 
     void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationCheckData>> taskInvocationAction);
+
+    void RegisterEnvironmentVariableReadAction(Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction);
 }
diff --git a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
index 62f6b5df9bc..13a32c74678 100644
--- a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
+++ b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
@@ -40,9 +40,9 @@ public override void Initialize(ConfigurationContext configurationContext)
         }
     }
 
-    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEvaluatedPropertiesAction(ProcessEnvironmentVariableReadAction);
+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEnvironmentVariableReadAction(ProcessEnvironmentVariableReadAction);
 
-    private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)
+    private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<EnvironmentVariableCheckData> context)
     {
         if (context.Data.EvaluatedEnvironmentVariables.Count != 0)
         {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index fd72d1a6e8e..e8c36f1b31d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -4,10 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Infrastructure;
-using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
@@ -27,9 +24,13 @@ private record CallbackRegistry(
         List<(CheckWrapper, Action<BuildCheckDataContext<TaskInvocationCheckData>>)> TaskInvocationActions,
         List<(CheckWrapper, Action<BuildCheckDataContext<PropertyReadData>>)> PropertyReadActions,
         List<(CheckWrapper, Action<BuildCheckDataContext<PropertyWriteData>>)> PropertyWriteActions,
-        List<(CheckWrapper, Action<BuildCheckDataContext<ProjectProcessingDoneData>>)> ProjectProcessingDoneActions)
+        List<(CheckWrapper, Action<BuildCheckDataContext<ProjectProcessingDoneData>>)> ProjectProcessingDoneActions,
+        List<(CheckWrapper, Action<BuildCheckDataContext<EnvironmentVariableCheckData>>)> EnvironmentVariableCheckDataActions)
     {
-        public CallbackRegistry() : this([], [], [], [], [], []) { }
+        public CallbackRegistry()
+            : this([], [], [], [], [], [], [])
+        {
+        }
 
         internal void DeregisterCheck(CheckWrapper check)
         {
@@ -51,9 +52,14 @@ internal void DeregisterCheck(CheckWrapper check)
     internal bool HasParsedItemsActions => _globalCallbacks.ParsedItemsActions.Count > 0;
 
     internal bool HasTaskInvocationActions => _globalCallbacks.TaskInvocationActions.Count > 0;
+
     internal bool HasPropertyReadActions => _globalCallbacks.PropertyReadActions.Count > 0;
+
     internal bool HasPropertyWriteActions => _globalCallbacks.PropertyWriteActions.Count > 0;
 
+    internal void RegisterEnvironmentVariableReadAction(CheckWrapper check, Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction)
+       => RegisterAction(check, environmentVariableAction, _globalCallbacks.EnvironmentVariableCheckDataActions);
+
     internal void RegisterEvaluatedPropertiesAction(CheckWrapper check, Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction)
         // Here we might want to communicate to node that props need to be sent.
         //  (it was being communicated via MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION)
@@ -92,10 +98,14 @@ void WrappedHandler(BuildCheckDataContext<T> context)
         }
     }
 
-    internal void DeregisterCheck(CheckWrapper check)
-    {
-        _globalCallbacks.DeregisterCheck(check);
-    }
+    internal void DeregisterCheck(CheckWrapper check) => _globalCallbacks.DeregisterCheck(check);
+
+    internal void RunEnvironmentVariableActions(
+        EnvironmentVariableCheckData environmentVariableCheckData,
+        ICheckContext checkContext,
+        Action<CheckWrapper, ICheckContext, CheckConfigurationEffective[], BuildCheckResult>
+            resultHandler)
+        => RunRegisteredActions(_globalCallbacks.EnvironmentVariableCheckDataActions, environmentVariableCheckData, checkContext, resultHandler);
 
     internal void RunEvaluatedPropertiesActions(
         EvaluatedPropertiesCheckData evaluatedPropertiesCheckData,
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
index c3910395ad2..84972841224 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
@@ -7,18 +7,15 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 internal sealed class BuildCheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext) : IBuildCheckRegistrationContext
 {
-    public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction)
-    {
+    public void RegisterEnvironmentVariableReadAction(Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction) =>
+        buildCheckCentralContext.RegisterEnvironmentVariableReadAction(checkWrapper, environmentVariableAction);
+
+    public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction) =>
         buildCheckCentralContext.RegisterEvaluatedPropertiesAction(checkWrapper, evaluatedPropertiesAction);
-    }
 
-    public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsCheckData>> parsedItemsAction)
-    {
+    public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsCheckData>> parsedItemsAction) =>
         buildCheckCentralContext.RegisterParsedItemsAction(checkWrapper, parsedItemsAction);
-    }
 
-    public void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationCheckData>> taskInvocationAction)
-    {
+    public void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationCheckData>> taskInvocationAction) =>
         buildCheckCentralContext.RegisterTaskInvocationAction(checkWrapper, taskInvocationAction);
-    }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 8ad601ab424..d768f9b0cfe 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -350,6 +350,7 @@ public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext,
             if (projectEvaluationEventArgs is EnvironmentVariableReadEventArgs evr)
             {
                 _buildEventsProcessor.ProcessEnvironmentVariableReadEventArgs(
+                    checkContext,
                     evr.EnvironmentVariableName,
                     evr.Message ?? string.Empty,
                     evr.File,
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 1eb68e8a02b..d9629d8a555 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -67,8 +67,7 @@ internal void ProcessEvaluationFinishedEventArgs(
             EvaluatedPropertiesCheckData checkData =
                 new(evaluationFinishedEventArgs.ProjectFile!,
                     evaluationFinishedEventArgs.BuildEventContext?.ProjectInstanceId,
-                    propertiesLookup!,
-                    _evaluatedEnvironmentVariables);
+                    propertiesLookup!);
 
             _buildCheckCentralContext.RunEvaluatedPropertiesActions(checkData, checkContext, ReportResult);
         }
@@ -91,11 +90,18 @@ internal void ProcessEvaluationFinishedEventArgs(
     /// <summary>
     /// The method collects events associated with the used environment variables in projects.
     /// </summary>
-    internal void ProcessEnvironmentVariableReadEventArgs(string envVarName, string envVarValue, string file, int line, int column)
+    internal void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext, string envVarName, string envVarValue, string file, int line, int column)
     {
         if (!_evaluatedEnvironmentVariables.ContainsKey(envVarName))
         {
             _evaluatedEnvironmentVariables.Add(envVarName, (envVarValue, file, line, column));
+
+            EnvironmentVariableCheckData checkData =
+               new(file,
+                   checkContext.BuildEventContext?.ProjectInstanceId,
+                   _evaluatedEnvironmentVariables);
+
+            _buildCheckCentralContext.RunEnvironmentVariableActions(checkData, checkContext, ReportResult);
         }
     }
 
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 8281c67a3f4..272a25d75ad 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -98,7 +98,4 @@ public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, CheckLoggi
 
     public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
     { }
-
-    public void ProcessIntrinsicTasksExecutionFinishedEventArgs(IAnalysisContext analysisContext, ProjectIntrinsicTasksExecutionFinishedEventArgs projectIntrinsicTasksExecutionFinishedEventArgs)
-    { }
 }
diff --git a/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs b/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
new file mode 100644
index 00000000000..084e428d861
--- /dev/null
+++ b/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
@@ -0,0 +1,23 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+/// <summary>
+/// BuildCheck OM data representing the environment variables used in a project file and its imports.
+/// </summary>
+public class EnvironmentVariableCheckData : CheckData
+{
+    internal EnvironmentVariableCheckData(
+        string projectFilePath,
+        int? projectConfigurationId,
+        IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)
+        : base(projectFilePath, projectConfigurationId) => EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
+
+    /// <summary>
+    /// Gets the evaluated environment variables and their metadata.
+    /// </summary>
+    public IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }
+}
diff --git a/src/Build/BuildCheck/OM/EvaluatedPropertiesCheckData.cs b/src/Build/BuildCheck/OM/EvaluatedPropertiesCheckData.cs
index 9b84e9ca2f9..fdf60017a4a 100644
--- a/src/Build/BuildCheck/OM/EvaluatedPropertiesCheckData.cs
+++ b/src/Build/BuildCheck/OM/EvaluatedPropertiesCheckData.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using Microsoft.Build.BackEnd.Logging;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
@@ -14,21 +13,11 @@ public class EvaluatedPropertiesCheckData : CheckData
     internal EvaluatedPropertiesCheckData(
         string projectFilePath,
         int? projectConfigurationId,
-        IReadOnlyDictionary<string, string> evaluatedProperties,
-        IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)
-        : base(projectFilePath, projectConfigurationId)
-    {
-        EvaluatedProperties = evaluatedProperties;
-        EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
-    }
+        IReadOnlyDictionary<string, string> evaluatedProperties)
+        : base(projectFilePath, projectConfigurationId) => EvaluatedProperties = evaluatedProperties;
 
     /// <summary>
     /// Gets the evaluated properties of the project.
     /// </summary>
     public IReadOnlyDictionary<string, string> EvaluatedProperties { get; }
-
-    /// <summary>
-    /// Gets the evaluated environment variables and their metadata.
-    /// </summary>
-    public IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }
 }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 319fcb2aafc..0f9e93efd4e 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using System.IO.Ports;
 using System.Linq;
 using System.Xml;
 using Microsoft.Build.Shared;
diff --git a/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs b/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs
index 5ead0d0369f..4c858fdf455 100644
--- a/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs
+++ b/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs
@@ -51,6 +51,7 @@ public void TriggerEvaluatedPropertiesAction(EvaluatedPropertiesCheckData data)
 
         private void ResultHandler(CheckWrapper wrapper, ICheckContext context, CheckConfigurationEffective[] configs, BuildCheckResult result)
             => Results.Add(result);
+
+        public void RegisterEnvironmentVariableReadAction(Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction) => throw new NotImplementedException();
     }
 }
-
diff --git a/src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs b/src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs
index 629775901a4..e3bc5adab4f 100644
--- a/src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs
+++ b/src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs
@@ -30,8 +30,7 @@ private EvaluatedPropertiesCheckData MakeEvaluatedPropertiesAction(
             return new EvaluatedPropertiesCheckData(
                 projectFile,
                 null,
-                evaluatedProperties ?? new Dictionary<string, string>(),
-                evaluatedEnvVars ?? new Dictionary<string, (string EnvVarValue, string File, int Line, int Column)>());
+                evaluatedProperties ?? new Dictionary<string, string>());
         }
 
         [Fact]
