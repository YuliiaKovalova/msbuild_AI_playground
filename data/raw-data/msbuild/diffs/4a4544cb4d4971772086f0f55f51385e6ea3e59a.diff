diff --git a/src/Build/Evaluation/FowlerNollVo1aHash.cs b/src/Build/Evaluation/FowlerNollVo1aHash.cs
new file mode 100644
index 00000000000..4ae34818799
--- /dev/null
+++ b/src/Build/Evaluation/FowlerNollVo1aHash.cs
@@ -0,0 +1,41 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Text;
+
+namespace Microsoft.Build.Evaluation
+{
+    internal static class FowlerNollVo1aHash
+    {
+        // Fowler/Noll/Vo hashing.
+        // http://www.isthe.com/chongo/tech/comp/fnv/
+        // https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash
+        // http://www.isthe.com/chongo/src/fnv/hash_32a.c
+
+        // 32 bit FNV prime and offset basis for FNV-1a.
+        private const uint fnvPrimeA = 16777619;
+        private const uint fnvOffsetBasisA = 2166136261;
+
+        /// <summary>
+        /// Computes 32 bit Fowler/Noll/Vo-1a hash of a UTF8 decoded string.
+        /// </summary>
+        /// <param name="text">String to be hashed.</param>
+        /// <returns>32 bit signed hash</returns>
+        internal static int ComputeHash(string text)
+        {
+            uint hash = fnvOffsetBasisA;
+
+            // We want this to be stable across platforms, so we need to use UTF8 encoding.
+            foreach (byte b in Encoding.UTF8.GetBytes(text))
+            {
+                unchecked
+                {
+                    hash ^= b;
+                    hash *= fnvPrimeA;
+                }
+            }
+
+            return unchecked((int)hash);
+        }
+    }
+}
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 3fff5c28e65..a74ebc1310c 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -398,11 +398,11 @@ internal static string ConvertFromBase64(string toDecode)
         }
 
         /// <summary>
-        /// Hash the string independent of bitness and target framework.
+        /// Hash the string independent of bitness, target framework and default codepage of the environment.
         /// </summary>
         internal static int StableStringHash(string toHash)
         {
-            return CommunicationsUtilities.GetHashCode(toHash);
+            return FowlerNollVo1aHash.ComputeHash(toHash);
         }
 
         /// <summary>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index a42e76cc270..8465a1d66cd 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -153,6 +153,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="Evaluation\FowlerNollVo1aHash.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
     <Compile Include="FileAccess\FileAccessData.cs" />
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 2b6ed93fe5c..142040bc605 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -388,7 +388,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   
   <PropertyGroup>
     <MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName)' == ''">$(MSBuildProjectFile)</MSBuildCopyMarkerName>
-    <MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName.Length)' &gt; '16' and '$(ProjectGuid)' != ''">$(MSBuildCopyMarkerName.Substring(0,8)).$(ProjectGuid.Substring(1,8))</MSBuildCopyMarkerName>
+	<!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and either the ProjectGuid if it exists -->
+    <MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName.Length)' &gt; '17' and '$(ProjectGuid)' != ''">$(MSBuildProjectFile.Substring(0,8)).$(ProjectGuid.Substring(1,8))</MSBuildCopyMarkerName>
+	<!-- or a filename hash if the guid is not present (in such case the filename was not shortened and is still over 17 chars long). -->
+	<MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName.Length)' &gt; '17'">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString("X8"))</MSBuildCopyMarkerName>
   </PropertyGroup>
 
   <ItemGroup>
