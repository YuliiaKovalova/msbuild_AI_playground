diff --git a/eng/Versions.props b/eng/Versions.props
index 1924e4b68dc..ef00a7e39aa 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -57,7 +57,7 @@
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
   </PropertyGroup>
   <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
-    <BootstrapSdkVersion>9.0.100-preview.6.24328.19</BootstrapSdkVersion>
+    <BootstrapSdkVersion>9.0.100-preview.7.24407.12</BootstrapSdkVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 3d63ec7b261..307cf91adc8 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -86,7 +86,7 @@ try {
   {
     $buildToolPath = Join-Path $bootstrapRoot "core\dotnet.exe"
     # The version must be consistent with BootstrapSdkVersion
-    $buildToolCommand = Join-Path $bootstrapRoot "core\sdk\9.0.100-preview.6.24328.19\MSBuild.dll"
+    $buildToolCommand = Join-Path $bootstrapRoot "core\sdk\9.0.100-preview.7.24407.12\MSBuild.dll"
     $buildToolFramework = "net9.0"
   }
 
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index 19c43b357dc..a15ca04be34 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -60,7 +60,7 @@ if [ $host_type = "core" ]
 then
   _InitializeBuildTool="$bootstrapRoot/core/dotnet"
   # The version must be consistent with BootstrapSdkVersion
-  _InitializeBuildToolCommand="$bootstrapRoot/core/sdk/9.0.100-preview.6.24328.19/MSBuild.dll"
+  _InitializeBuildToolCommand="$bootstrapRoot/core/sdk/9.0.100-preview.7.24407.12/MSBuild.dll"
   _InitializeBuildToolFramework="net9.0"
 else
   echo "Unsupported hostType ($host_type)"
diff --git a/global.json b/global.json
index 2a05e07afeb..7c5581a49d2 100644
--- a/global.json
+++ b/global.json
@@ -3,7 +3,7 @@
     "allowPrerelease": true
   },
   "tools": {
-    "dotnet": "9.0.100-preview.6.24328.19",
+    "dotnet": "9.0.100-preview.7.24407.12",
     "vs": {
       "version": "17.8.0"
     },
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 0eacfd24c73..fe1b7c6e2b0 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -1522,5 +1522,16 @@ internal static void ClearFileExistenceCache()
             FileExistenceCache.Clear();
         }
 #endif
+
+        internal static void ReadFromStream(this Stream stream, byte[] content, int startIndex, int length)
+        {
+#if NET7_0_OR_GREATER
+            stream.ReadExactly(content, startIndex, length);
+#else
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
+            stream.Read(content, 0, length);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
+#endif
+        }
     }
 }
diff --git a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
index 9c1ec38ea78..947fbaf755c 100644
--- a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
+++ b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
@@ -7,6 +7,7 @@
 using System.IO;
 using System.Runtime.InteropServices;
 using System.Threading;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -99,15 +100,7 @@ public bool UpdateResources(string filename, BuildResults results)
                             {
                                 fileLength = (int)fs.Length;
                                 fileContent = new byte[fileLength];
-
-#if NET7_0_OR_GREATER
-                                fs.ReadExactly(fileContent, 0, fileLength);
-#else
-#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
-                                // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
-                                fs.Read(fileContent, 0, fileLength);
-#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
-#endif
+                                fs.ReadFromStream(fileContent, 0, fileLength);
                             }
 
                             // Update the resources to include this file's data
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index ca70f639802..6a7ae609617 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -127,15 +127,8 @@ private bool ResolveAssemblyKey()
                             fs = File.OpenRead(KeyFile);
                             int fileLength = (int)fs.Length;
                             var keyBytes = new byte[fileLength];
-#if NET7_0_OR_GREATER
-                            // fail fast in case the file is not read till the end
-                            fs.ReadExactly(keyBytes, 0, fileLength);
-#else
-#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
-                            // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
-                            fs.Read(keyBytes, 0, fileLength);
-#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
-#endif
+                            fs.ReadFromStream(keyBytes, 0, fileLength);
+
                             UInt64 hash = HashFromBlob(keyBytes);
                             hash ^= HashFromBlob(userNameBytes); // modify it with the username hash, so each user would get different hash for the same key
 
