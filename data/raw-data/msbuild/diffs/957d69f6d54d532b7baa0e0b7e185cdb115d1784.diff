diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 7190cf382d5..00c41a4601b 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -10,6 +10,8 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Text;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
@@ -3476,10 +3478,27 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                     }
                 }
 
+                if (Traits.Instance.LogPropertyFunctionsRequiringReflection)
+                {
+                    LogFunctionCall("PropertyFunctionsRequiringReflection", objectInstance, args);
+                }
+
                 returnVal = null;
                 return false;
             }
 
+            [MethodImpl(MethodImplOptions.AggressiveInlining)]
+            private void LogFunctionCall(string fileName, object objectInstance, object[] args)
+            {
+                var logFile = Path.Combine(Directory.GetCurrentDirectory(), fileName);
+
+                var argSignature = args != null
+                    ? string.Join(", ", args.Select(a => a?.GetType().Name ?? "null"))
+                    : string.Empty;
+
+                File.AppendAllText(logFile, $"ReceiverType={_receiverType?.FullName}; ObjectInstanceType={objectInstance?.GetType().FullName}; MethodName={_methodMethodName}({argSignature})\n");
+            }
+
             private static bool TryGetArg(object[] args, out int arg0)
             {
                 if (args.Length != 1)
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index 1a10361576b..f8187fddf4e 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -72,6 +72,11 @@ public Traits()
         /// </summary>
         public readonly bool EmitSolutionMetaproj = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildEmitSolution"));
 
+        /// <summary>
+        /// Log statistics about property functions which require reflection
+        /// </summary>
+        public readonly bool LogPropertyFunctionsRequiringReflection = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildLogPropertyFunctionsRequiringReflection"));
+
         private static int ParseIntFromEnvironmentVariableOrDefault(string environmentVariable, int defaultValue)
         {
             return int.TryParse(Environment.GetEnvironmentVariable(environmentVariable), out int result)
