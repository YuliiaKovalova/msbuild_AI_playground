diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index f7898f06700..707587dd7b8 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -565,26 +565,6 @@ public void RoundtripBuildCheckTracingEventArgs()
                     .Select(v => v.TotalSeconds.ToString(CultureInfo.InvariantCulture)).ToCsvString(false));
         }
 
-        // Let's not have this event in the binlog at all
-        //[Fact]
-        //public void RoundtripWorkerNodeTelemetryEventArgs()
-        //{
-        //    WorkerNodeTelemetryData td = new WorkerNodeTelemetryData(
-        //        new Dictionary<string, TaskExecutionStats>()
-        //        {
-        //            { "task1", new TaskExecutionStats(TimeSpan.FromMinutes(1), 5) },
-        //            { "task2", new TaskExecutionStats(TimeSpan.Zero, 0) },
-        //            { "task3", new TaskExecutionStats(TimeSpan.FromTicks(1234), 12) }
-        //        },
-        //        new Dictionary<string, bool>() { { "target1", false }, { "target2", true }, });
-
-        //    WorkerNodeTelemetryEventArgs args = new WorkerNodeTelemetryEventArgs(td);
-
-        //    Roundtrip(args,
-        //        e => e.WorkerNodeTelemetryData.TasksExecutionData.Select(kp => $"{kp.Key}:{kp.Value.CumulativeExecutionTime.Ticks}:{kp.Value.ExecutionsCount}").OrderBy(k => k).ToCsvString(),
-        //        e => e.WorkerNodeTelemetryData.TargetsExecutionData.Select(kp => $"{kp.Key}:{kp.Value}").OrderBy(k => k).ToCsvString());
-        //}
-
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
diff --git a/src/Build.UnitTests/TelemetryTests.cs b/src/Build.UnitTests/TelemetryTests.cs
index 09e20462c58..5ca8f2a03e3 100644
--- a/src/Build.UnitTests/TelemetryTests.cs
+++ b/src/Build.UnitTests/TelemetryTests.cs
@@ -5,7 +5,6 @@
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.UnitTests;
 using Shouldly;
@@ -20,7 +19,6 @@ public class TelemetryTests
 
         public TelemetryTests(ITestOutputHelper output)
         {
-            ProjectBuildStats.DurationThresholdForTopN = TimeSpan.Zero;
             _output = output;
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index c3620b78415..cd65494d68f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1278,13 +1278,25 @@ private void UpdateStatisticsPostBuild()
 
             foreach (var projectTargetInstance in _requestEntry.RequestConfiguration.Project.Targets)
             {
+                bool wasExecuted =
+                    unfilteredResult.ResultsByTarget.TryGetValue(projectTargetInstance.Key, out TargetResult targetResult) &&
+                    // We need to match on location of target as well - as multiple targets with same name can be defined.
+                    // E.g. _SourceLinkHasSingleProvider can be brought explicitly via nuget (Microsoft.SourceLink.GitHub) as well as sdk
+                    projectTargetInstance.Value.Location.Equals(targetResult.TargetLocation);
+
+                bool isFromNuget = FileClassifier.Shared.IsInNugetCache(projectTargetInstance.Value.FullPath);
+
+                bool isCustom = IsCustomTargetPath(projectTargetInstance.Value.FullPath) ||
+                                // add the isFromNuget to condition - to prevent double checking of nonnuget package
+                                (isFromNuget && FileClassifier.Shared.IsMicrosoftPackageInNugetCache(projectTargetInstance.Value.FullPath));
+
                 collector.AddTarget(
                     projectTargetInstance.Key,
                     // would we want to distinguish targets that were executed only during this execution - we'd need
                     //  to remember target names from ResultsByTarget from before execution
-                    unfilteredResult.ResultsByTarget.ContainsKey(projectTargetInstance.Key),
-                    IsCustomTargetPath(projectTargetInstance.Value.FullPath),
-                    FileClassifier.Shared.IsInNugetCache(projectTargetInstance.Value.FullPath));
+                    wasExecuted,
+                    isCustom,
+                    isFromNuget);
             }
 
             TaskRegistry taskReg = _requestEntry.RequestConfiguration.Project.TaskRegistry;
@@ -1302,6 +1314,7 @@ void CollectTasksStats(TaskRegistry taskRegistry)
                     collector.AddTask(registeredTaskRecord.TaskIdentity.Name,
                         registeredTaskRecord.Statistics.ExecutedTime,
                         registeredTaskRecord.Statistics.ExecutedCount,
+                        registeredTaskRecord.Statistics.TotalMemoryConsumption,
                         registeredTaskRecord.GetIsCustom(),
                         registeredTaskRecord.IsFromNugetCache);
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index deafed17428..dd7d1d9f437 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -90,6 +90,11 @@ internal class TargetBuilder : ITargetBuilder, ITargetBuilderCallback, IBuildCom
         /// </summary>
         private bool _legacyCallTargetContinueOnError;
 
+        /// <summary>
+        /// Flag indicating whether telemetry is requested.
+        /// </summary>
+        private bool _isTelemetryRequested;
+
         /// <summary>
         /// Builds the specified targets.
         /// </summary>
@@ -214,6 +219,7 @@ public void InitializeComponent(IBuildComponentHost host)
         {
             ErrorUtilities.VerifyThrowArgumentNull(host);
             _componentHost = host;
+            _isTelemetryRequested = host.BuildParameters.IsTelemetryEnabled;
         }
 
         /// <summary>
@@ -518,6 +524,11 @@ await PushTargets(errorTargets, currentTargetEntry, currentTargetEntry.Lookup, t
                         // CallTarget, make sure we don't contribute this failure to the overall success of the build.
                         targetResult.TargetFailureDoesntCauseBuildFailure = _legacyCallTargetContinueOnError;
 
+                        if (_isTelemetryRequested)
+                        {
+                            targetResult.TargetLocation = currentTargetEntry.Target.Location;
+                        }
+
                         // This target is no longer actively building.
                         _requestEntry.RequestConfiguration.ActivelyBuildingTargets.Remove(currentTargetEntry.Name);
 
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index d251633ab56..814ca4ff202 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -174,6 +174,13 @@ internal bool AfterTargetsHaveFailed
             set => _afterTargetsHaveFailed = value;
         }
 
+        /// <summary>
+        /// The defining location of the target for which this is a result.
+        /// This is not intended to be remoted via node-2-node remoting - it's intended only for in-node telemetry.
+        /// Warning!: This data is not guaranteed to be populated when Telemetry is not being collected (e.g. this is "sampled out")
+        /// </summary>
+        internal IElementLocation TargetLocation { get; set; }
+
         #region INodePacketTranslatable Members
 
         /// <summary>
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 443d3320b73..ee4dbc07384 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1182,12 +1182,15 @@ internal class RegisteredTaskRecord : ITranslatable
             internal class Stats()
             {
                 public short ExecutedCount { get; private set; } = 0;
+                public long TotalMemoryConsumption { get; private set; } = 0;
                 private readonly Stopwatch _executedSw  = new Stopwatch();
+                private long _memoryConsumptionOnStart;
 
                 public TimeSpan ExecutedTime => _executedSw.Elapsed;
 
                 public void ExecutionStarted()
                 {
+                    _memoryConsumptionOnStart = GC.GetTotalMemory(false);
                     _executedSw.Start();
                     ExecutedCount++;
                 }
@@ -1195,6 +1198,7 @@ public void ExecutionStarted()
                 public void ExecutionStoped()
                 {
                     _executedSw.Stop();
+                    TotalMemoryConsumption += GC.GetTotalMemory(false) - _memoryConsumptionOnStart;
                 }
 
                 public void Reset()
@@ -1258,9 +1262,11 @@ public bool GetIsCustom()
                         //  so we need to check file as well (the very last condition).
                         !string.IsNullOrEmpty(_parameterGroupAndTaskBody?.InlineTaskXmlBody) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyName) &&
-                         !IsMicrosoftAssembly(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
+                         !FileClassifier.IsMicrosoftAssembly(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) &&
-                         !IsMicrosoftAssembly(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) &&
+                         // This condition will as well capture Microsoft tasks pulled from NuGet cache - since we decide based on assembly name.
+                         // Hence we do not have to add the 'IsMicrosoftPackageInNugetCache' call anywhere here 
+                         !FileClassifier.IsMicrosoftAssembly(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) &&
                          !FileClassifier.Shared.IsBuiltInLogic(_taskFactoryAssemblyLoadInfo.AssemblyFile)))
                     // and let's consider all tasks imported by common targets as non custom logic.
                     && !FileClassifier.Shared.IsBuiltInLogic(_definingFileFullPath);
@@ -1270,9 +1276,6 @@ public bool IsFromNugetCache
                 => FileClassifier.Shared.IsInNugetCache(_taskFactoryAssemblyLoadInfo.AssemblyFile) ||
                    FileClassifier.Shared.IsInNugetCache(_definingFileFullPath);
 
-            private static bool IsMicrosoftAssembly(string assemblyName)
-                => assemblyName.StartsWith("Microsoft.", StringComparison.Ordinal);
-
             /// <summary>
             /// Gets the task name this record was registered with.
             /// </summary>
diff --git a/src/Build/Telemetry/ITelemetryCollector.cs b/src/Build/Telemetry/ITelemetryCollector.cs
index 78f36e586fc..b342a031794 100644
--- a/src/Build/Telemetry/ITelemetryCollector.cs
+++ b/src/Build/Telemetry/ITelemetryCollector.cs
@@ -17,7 +17,7 @@ internal interface ITelemetryCollector
 {
     bool IsTelemetryCollected { get; }
 
-    void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom,
+    void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom,
         bool isFromNugetCache);
 
     // wasExecuted - means anytime, not necessarily from the last time target was added to telemetry
@@ -68,10 +68,10 @@ public class TelemetryCollector : ITelemetryCollector
         // in future, this might ber per event type
         public bool IsTelemetryCollected => true;
 
-        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom, bool isFromNugetCache)
+        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache)
         {
             name = GetName(name, isCustom, isFromNugetCache);
-            _workerNodeTelemetryData.AddTask(name, cumulativeExectionTime, executionsCount);
+            _workerNodeTelemetryData.AddTask(name, cumulativeExectionTime, executionsCount, totalMemoryConsumed);
         }
 
         public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isFromNugetCache)
@@ -84,12 +84,12 @@ private static string GetName(string name, bool isCustom, bool isFromNugetCache)
         {
             if (isCustom)
             {
-                name = "C:" + name;
+                name = WorkerNodeTelemetryData.CustomPrefix + name;
             }
 
             if (isFromNugetCache)
             {
-                name = "N:" + name;
+                name = WorkerNodeTelemetryData.FromNugetPrefix + name;
             }
 
             return name;
@@ -107,7 +107,7 @@ public class NullTelemetryCollector : ITelemetryCollector
     {
         public bool IsTelemetryCollected => false;
 
-        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom, bool isFromNugetCache) { }
+        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache) { }
         public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isFromNugetCache) { }
 
         public void FinalizeProcessing(LoggingContext loggingContext) { }
diff --git a/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs b/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs
index 1e16466b567..152e6c84f14 100644
--- a/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs
@@ -20,9 +20,9 @@ public void SerializationDeserializationTest()
             WorkerNodeTelemetryData td = new WorkerNodeTelemetryData(
                 new Dictionary<string, TaskExecutionStats>()
                 {
-                        { "task1", new TaskExecutionStats(TimeSpan.FromMinutes(1), 5) },
-                        { "task2", new TaskExecutionStats(TimeSpan.Zero, 0) },
-                        { "task3", new TaskExecutionStats(TimeSpan.FromTicks(1234), 12) }
+                        { "task1", new TaskExecutionStats(TimeSpan.FromMinutes(1), 5, 1234) },
+                        { "task2", new TaskExecutionStats(TimeSpan.Zero, 0, 0) },
+                        { "task3", new TaskExecutionStats(TimeSpan.FromTicks(1234), 12, 987654321) }
                 },
                 new Dictionary<string, bool>() { { "target1", false }, { "target2", true }, });
 
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index bdfffdb5a4f..55e91747020 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -7,6 +7,7 @@
 using System.IO;
 using System.Linq;
 using System.Runtime.InteropServices;
+using Microsoft.Build.Shared;
 #if !RUNTIME_TYPE_NETCORE
 using System.Diagnostics;
 using System.Text.RegularExpressions;
@@ -73,6 +74,12 @@ private set
         /// </summary>
         private static readonly Lazy<FileClassifier> s_sharedInstance = new(() => new FileClassifier());
 
+        private const string MicrosoftAssemblyPrefix = "Microsoft.";
+
+        // Surrogate for the span - to prevent array allocation on each span access.
+        private static readonly char[] s_microsoftAssemblyPrefixChars = MicrosoftAssemblyPrefix.ToCharArray();
+        private static ReadOnlySpan<char> MicrosoftAssemblyPrefixSpan => s_microsoftAssemblyPrefixChars;
+
         /// <summary>
         ///     Serves purpose of thread safe set of known immutable directories.
         /// </summary>
@@ -92,7 +99,7 @@ private set
         /// </summary>
         private volatile IReadOnlyList<string> _knownBuiltInLogicDirectoriesSnapshot = [];
 
-        private string? _nugetCacheLocation;
+        private IReadOnlyList<string> _nugetCacheLocations = [];
 
         /// <summary>
         ///     Creates default FileClassifier which following immutable folders:
@@ -203,6 +210,22 @@ static string GetFolderAbove(string path, int count = 1)
         /// </summary>
         public static FileClassifier Shared => s_sharedInstance.Value;
 
+        /// <summary>
+        ///    Checks if assembly name indicates it is a Microsoft assembly.
+        /// </summary>
+        /// <param name="assemblyName"></param>
+        public static bool IsMicrosoftAssembly(string assemblyName)
+            => assemblyName.StartsWith("Microsoft.", StringComparison.OrdinalIgnoreCase);
+
+        /// <summary>
+        ///    Checks if assembly name indicates it is a Microsoft assembly.
+        /// </summary>
+        public static bool IsMicrosoftAssembly(ReadOnlySpan<char> assemblyName)
+            => assemblyName.StartsWith(MicrosoftAssemblyPrefixSpan, StringComparison.OrdinalIgnoreCase);
+
+        private static bool IsInLocationList(string filePath, IReadOnlyList<string> locations)
+            => GetFirstMatchingLocationfromList(filePath, locations) is not null;
+
         /// <summary>
         ///     Try add path into set of known immutable paths.
         ///     Files under any of these folders are considered non-modifiable.
@@ -251,9 +274,19 @@ public void RegisterKnownImmutableLocations(Func<string, string?> getPropertyVal
             RegisterImmutableDirectory(getPropertyValue("FrameworkPathOverride")?.Trim(), false);
             // example: C:\Program Files\dotnet\
             RegisterImmutableDirectory(getPropertyValue("NetCoreRoot")?.Trim(), false);
-            // example: C:\Users\<username>\.nuget\packages\
-            _nugetCacheLocation = getPropertyValue("NuGetPackageFolders")?.Trim();
-            RegisterImmutableDirectory(_nugetCacheLocation, true);
+            // example: C:\Users\<username>\.nuget\packages\;...
+            string[]? nugetLocations =
+                getPropertyValue("NuGetPackageFolders")
+                    ?.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries)
+                    .Select(p => EnsureTrailingSlash(p.Trim())).ToArray();
+            if (nugetLocations is { Length: > 0 })
+            {
+                _nugetCacheLocations = nugetLocations ?? [];
+                foreach (string location in nugetLocations!)
+                {
+                    RegisterImmutableDirectory(location, true);
+                }
+            }
 
             IsImmutablePathsInitialized = true;
         }
@@ -349,20 +382,24 @@ public bool IsNonModifiable(string filePath)
         ///    Gets whether a file is assumed to be inside a nuget cache location.
         /// </summary>
         public bool IsInNugetCache(string filePath)
+            => IsInLocationList(filePath, _nugetCacheLocations);
+
+        /// <summary>
+        ///    Gets whether a file is assumed to be in the nuget cache and name indicates it's produced by Microsoft.
+        /// </summary>
+        public bool IsMicrosoftPackageInNugetCache(string filePath)
         {
-            string? nugetCache = _nugetCacheLocation;
-            if (string.IsNullOrEmpty(filePath) || string.IsNullOrEmpty(nugetCache))
-            {
-                return false;
-            }
-            return filePath.StartsWith(nugetCache, PathComparison);
+            string? containingNugetCache = GetFirstMatchingLocationfromList(filePath, _nugetCacheLocations);
+
+            return containingNugetCache != null &&
+                   IsMicrosoftAssembly(filePath.AsSpan(containingNugetCache.Length));
         }
 
-        private static bool IsInLocationList(string filePath, IReadOnlyList<string> locations)
+        private static string? GetFirstMatchingLocationfromList(string filePath, IReadOnlyList<string> locations)
         {
             if (string.IsNullOrEmpty(filePath))
             {
-                return false;
+                return null;
             }
 
             // Avoid a foreach loop or linq.Any because they allocate.
@@ -371,11 +408,11 @@ private static bool IsInLocationList(string filePath, IReadOnlyList<string> loca
             {
                 if (filePath.StartsWith(locations[i], PathComparison))
                 {
-                    return true;
+                    return locations[i];
                 }
             }
 
-            return false;
+            return null;
         }
     }
 }
diff --git a/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs b/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
index a3ccae6b16a..447ad0a623f 100644
--- a/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
+++ b/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
@@ -14,9 +14,10 @@
 namespace Microsoft.Build.Framework;
 
 
-internal struct TaskExecutionStats(TimeSpan cumulativeExecutionTime, short executionsCount)
+internal class TaskExecutionStats(TimeSpan cumulativeExecutionTime, short executionsCount, long totalMemoryConsumption)
 {
     public TimeSpan CumulativeExecutionTime { get; set; } = cumulativeExecutionTime;
+    public long TotalMemoryConsumption { get; set; } = totalMemoryConsumption;
     public short ExecutionsCount { get; set; } = executionsCount;
 }
 
@@ -28,6 +29,9 @@ internal interface IWorkerNodeTelemetryData
 
 internal class WorkerNodeTelemetryData : IWorkerNodeTelemetryData
 {
+    public const string CustomPrefix = "C:";
+    public const string FromNugetPrefix = "N:";
+
     public WorkerNodeTelemetryData(Dictionary<string, TaskExecutionStats> tasksExecutionData, Dictionary<string, bool> targetsExecutionData)
     {
         TasksExecutionData = tasksExecutionData;
@@ -38,7 +42,7 @@ public void Add(IWorkerNodeTelemetryData other)
     {
         foreach (var task in other.TasksExecutionData)
         {
-            AddTask(task.Key, task.Value.CumulativeExecutionTime, task.Value.ExecutionsCount);
+            AddTask(task.Key, task.Value.CumulativeExecutionTime, task.Value.ExecutionsCount, task.Value.TotalMemoryConsumption);
         }
 
         foreach (var target in other.TargetsExecutionData)
@@ -47,18 +51,19 @@ public void Add(IWorkerNodeTelemetryData other)
         }
     }
 
-    public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount)
+    public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumption)
     {
-        TaskExecutionStats taskExecutionStats;
+        TaskExecutionStats? taskExecutionStats;
         if (!TasksExecutionData.TryGetValue(name, out taskExecutionStats))
         {
-            taskExecutionStats = new(cumulativeExectionTime, executionsCount);
+            taskExecutionStats = new(cumulativeExectionTime, executionsCount, totalMemoryConsumption);
             TasksExecutionData[name] = taskExecutionStats;
         }
         else
         {
             taskExecutionStats.CumulativeExecutionTime += cumulativeExectionTime;
             taskExecutionStats.ExecutionsCount += executionsCount;
+            taskExecutionStats.TotalMemoryConsumption += totalMemoryConsumption;
         }
     }
 
@@ -93,6 +98,7 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.Write(entry.Key);
             writer.Write(entry.Value.CumulativeExecutionTime.Ticks);
             writer.Write(entry.Value.ExecutionsCount);
+            writer.Write(entry.Value.TotalMemoryConsumption);
         }
 
         writer.Write7BitEncodedInt(WorkerNodeTelemetryData.TargetsExecutionData.Count);
@@ -110,7 +116,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         for (int i = 0; i < count; i++)
         {
             tasksExecutionData.Add(reader.ReadString(),
-                new TaskExecutionStats(TimeSpan.FromTicks(reader.ReadInt64()), reader.ReadInt16()));
+                new TaskExecutionStats(TimeSpan.FromTicks(reader.ReadInt64()), reader.ReadInt16(), reader.ReadInt64()));
         }
 
         count = reader.Read7BitEncodedInt();
@@ -149,6 +155,48 @@ private void EventSource5_WorkerNodeTelemetryLogged(object? sender, WorkerNodeTe
     private void EventSourceOnBuildFinished(object sender, BuildFinishedEventArgs e)
     {
         TestOnly_InternalTelemetryAggregted?.Invoke(_workerNodeTelemetryData);
+        FlushDataIntoConsoleIfRequested();
+    }
+
+    private void FlushDataIntoConsoleIfRequested()
+    {
+        if (Environment.GetEnvironmentVariable("MSBUILDOUTPUTNODESTELEMETRY") != "1")
+        {
+            return;
+        }
+
+        Console.WriteLine("==========================================");
+        Console.WriteLine($"Targets ({_workerNodeTelemetryData.TargetsExecutionData.Count}):");
+        foreach (var target in _workerNodeTelemetryData.TargetsExecutionData)
+        {
+            Console.WriteLine($"{target.Key} : {target.Value}");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine($"Tasks: ({_workerNodeTelemetryData.TasksExecutionData.Count})");
+        Console.WriteLine("Custom tasks:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.Where(t => t.Key.StartsWith(WorkerNodeTelemetryData.CustomPrefix) || t.Key.StartsWith(WorkerNodeTelemetryData.FromNugetPrefix + WorkerNodeTelemetryData.CustomPrefix)))
+        {
+            Console.WriteLine($"{task.Key}");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine("Tasks by time:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.CumulativeExecutionTime).Take(20))
+        {
+            Console.WriteLine($"{task.Key} - {task.Value.CumulativeExecutionTime}");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine("Tasks by memory consumption:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.TotalMemoryConsumption).Take(20))
+        {
+            Console.WriteLine($"{task.Key} - {task.Value.TotalMemoryConsumption / 1024.0:0.00}kB");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine("Tasks by Executions count:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.ExecutionsCount))
+        {
+            Console.WriteLine($"{task.Key} - {task.Value.ExecutionsCount}");
+        }
+        Console.WriteLine("==========================================");
     }
 
     public void Shutdown()
