diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 7346954557d..58105527c16 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -598,7 +598,7 @@ private enum ExitPacketState
             /// <summary>
             /// Per node read buffers
             /// </summary>
-            private SharedReadBuffer _sharedReadBuffer;
+            private BinaryReaderFactory _binaryReaderFactory;
 
             /// <summary>
             /// Constructor.
@@ -616,7 +616,7 @@ public NodeContext(int nodeId, Process process,
                 _readBufferMemoryStream = new MemoryStream();
                 _writeBufferMemoryStream = new MemoryStream();
                 _terminateDelegate = terminateDelegate;
-                _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
+                _binaryReaderFactory = InterningBinaryReader.CreateSharedBuffer();
             }
 
             /// <summary>
@@ -982,7 +982,7 @@ private bool ReadAndRoutePacket(NodePacketType packetType, byte[] packetData, in
                     // Since the buffer is publicly visible dispose right away to discourage outsiders from holding a reference to it.
                     using (var packetStream = new MemoryStream(packetData, 0, packetLength, /*writeable*/ false, /*bufferIsPubliclyVisible*/ true))
                     {
-                        ITranslator readTranslator = BinaryTranslator.GetReadTranslator(packetStream, _sharedReadBuffer);
+                        ITranslator readTranslator = BinaryTranslator.GetReadTranslator(packetStream, _binaryReaderFactory);
                         _packetFactory.DeserializeAndRoutePacket(_nodeId, packetType, readTranslator);
                     }
                 }
diff --git a/src/Framework/SharedReadBuffer.cs b/src/Framework/BinaryReaderFactory.cs
similarity index 87%
rename from src/Framework/SharedReadBuffer.cs
rename to src/Framework/BinaryReaderFactory.cs
index f41320fba49..5cc76fe84ea 100644
--- a/src/Framework/SharedReadBuffer.cs
+++ b/src/Framework/BinaryReaderFactory.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build;
 /// <summary>
 /// Opaque holder of shared buffer.
 /// </summary>
-internal abstract class SharedReadBuffer
+internal abstract class BinaryReaderFactory
 {
     public abstract BinaryReader Create(Stream stream);
 }
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index 754dc473ef7..a2eab07d302 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -27,7 +27,7 @@ internal static class BinaryTranslator
         /// Returns a read-only serializer.
         /// </summary>
         /// <returns>The serializer.</returns>
-        internal static ITranslator GetReadTranslator(Stream stream, SharedReadBuffer buffer)
+        internal static ITranslator GetReadTranslator(Stream stream, BinaryReaderFactory buffer)
         {
             return new BinaryReadTranslator(stream, buffer);
         }
@@ -62,7 +62,7 @@ private class BinaryReadTranslator : ITranslator
             /// <summary>
             /// Constructs a serializer from the specified stream, operating in the designated mode.
             /// </summary>
-            public BinaryReadTranslator(Stream packetStream, SharedReadBuffer buffer)
+            public BinaryReadTranslator(Stream packetStream, BinaryReaderFactory buffer)
             {
                 _packetStream = packetStream;
                 _reader = buffer.Create(packetStream);
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 6adbd62f600..294d9ec988a 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -113,8 +113,8 @@
     <Compile Include="..\Shared\InterningBinaryReader.cs">
       <Link>InterningBinaryReader.cs</Link>
     </Compile>
-    <Compile Include="..\Framework\SharedReadBuffer.cs">
-      <Link>SharedReadBuffer.cs</Link>
+    <Compile Include="..\Framework\BinaryReaderFactory.cs">
+      <Link>BinaryReaderFactory.cs</Link>
     </Compile>
     <Compile Include="..\Shared\BinaryReaderExtensions.cs">
       <Link>BinaryReaderExtensions.cs</Link>
diff --git a/src/Shared/InterningBinaryReader.cs b/src/Shared/InterningBinaryReader.cs
index dac15c6ff64..8513d60cee5 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Shared/InterningBinaryReader.cs
@@ -191,7 +191,7 @@ public override String ReadString()
         /// <remarks>
         /// The caller is responsible for managing the lifetime of the returned buffer and for passing it to <see cref="Create"/>.
         /// </remarks>
-        internal static SharedReadBuffer CreateSharedBuffer()
+        internal static BinaryReaderFactory CreateSharedBuffer()
         {
             return new Buffer();
         }
@@ -202,7 +202,7 @@ internal static SharedReadBuffer CreateSharedBuffer()
         /// <remarks>
         /// Lifetime of the pooled buffer is managed by InterningBinaryReader (tied to BinaryReader lifetime wrapping the buffer)
         /// </remarks> 
-        internal static SharedReadBuffer PoolingBuffer => NullBuffer.Instance;
+        internal static BinaryReaderFactory PoolingBuffer => NullBuffer.Instance;
 
         /// <summary>
         /// Gets a buffer from the pool or creates a new one.
@@ -240,7 +240,7 @@ protected override void Dispose(bool disposing)
         /// Create a BinaryReader. It will either be an interning reader or standard binary reader
         /// depending on whether the interning reader is possible given the buffer and stream.
         /// </summary>
-        private static BinaryReader Create(Stream stream, SharedReadBuffer sharedBuffer)
+        private static BinaryReader Create(Stream stream, BinaryReaderFactory sharedBuffer)
         {
             Buffer buffer = (Buffer)sharedBuffer;
             if (buffer != null)
@@ -253,7 +253,7 @@ private static BinaryReader Create(Stream stream, SharedReadBuffer sharedBuffer)
         /// <summary>
         /// Holds thepreallocated buffer. 
         /// </summary>
-        private class Buffer : SharedReadBuffer
+        private class Buffer : BinaryReaderFactory
         {
             private char[] _charBuffer;
             private byte[] _byteBuffer;
@@ -295,12 +295,12 @@ public override BinaryReader Create(Stream stream)
             }
         }
 
-        private class NullBuffer : SharedReadBuffer
+        private class NullBuffer : BinaryReaderFactory
         {
             private NullBuffer()
             { }
 
-            public static readonly SharedReadBuffer Instance = new NullBuffer();
+            public static readonly BinaryReaderFactory Instance = new NullBuffer();
 
             public override BinaryReader Create(Stream stream)
             {
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index ac7f5509236..f9abb54236e 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -101,7 +101,7 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
         /// <summary>
         /// Per-node shared read buffer.
         /// </summary>
-        private SharedReadBuffer _sharedReadBuffer;
+        private BinaryReaderFactory _sharedReadBuffer;
 
         /// <summary>
         /// A way to cache a byte array when writing out packets
