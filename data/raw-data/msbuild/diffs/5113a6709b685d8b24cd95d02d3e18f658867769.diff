diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index 21274c28eed..9d84f59dd30 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -476,8 +476,7 @@ public void TargetsSwitchIdentificationTests(string @switch)
         public void TargetsSwitchParameter()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>() { "/targets:targets.txt" }, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>() { "/targets:targets.txt" }, switches);
 
             switches.HaveErrors().ShouldBeFalse();
             switches[CommandLineSwitches.ParameterizedSwitch.Targets].ShouldBe(new[] { "targets.txt" });
@@ -487,8 +486,7 @@ public void TargetsSwitchParameter()
         public void TargetsSwitchDoesNotSupportMultipleOccurrences()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>() { "/targets /targets" }, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>() { "/targets /targets" }, switches);
 
             switches.HaveErrors().ShouldBeTrue();
         }
@@ -566,8 +564,7 @@ public void GraphBuildSwitchCanHaveParameters()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string> { "/graph", "/graph:true;  NoBuild  ;;  ;", "/graph:foo"}, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string> { "/graph", "/graph:true;  NoBuild  ;;  ;", "/graph:foo"}, switches);
 
             switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(new[] {"true", "  NoBuild  ", "  ", "foo"});
 
@@ -579,8 +576,7 @@ public void GraphBuildSwitchCanBeParameterless()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string> { "/graph" }, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string> { "/graph" }, switches);
 
             switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(Array.Empty<string>());
 
@@ -592,8 +588,7 @@ public void InputResultsCachesSupportsMultipleOccurrence()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(){"/irc", "/irc:a;b", "/irc:c;d"}, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(){"/irc", "/irc:a;b", "/irc:c;d"}, switches);
 
             switches[CommandLineSwitches.ParameterizedSwitch.InputResultsCaches].ShouldBe(new []{null, "a", "b", "c", "d"});
 
@@ -605,8 +600,7 @@ public void OutputResultsCache()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(){"/orc:a"}, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(){"/orc:a"}, switches);
 
             switches[CommandLineSwitches.ParameterizedSwitch.OutputResultsCache].ShouldBe(new []{"a"});
 
@@ -618,8 +612,7 @@ public void OutputResultsCachesDoesNotSupportMultipleOccurrences()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(){"/orc:a", "/orc:b"}, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(){"/orc:a", "/orc:b"}, switches);
 
             switches.HaveErrors().ShouldBeTrue();
         }
@@ -793,24 +786,24 @@ public void AppendErrorTests1()
             Assert.False(switchesLeft.HaveErrors());
             Assert.False(switchesRight.HaveErrors());
 
-            switchesLeft.Append(switchesRight, string.Empty);
+            switchesLeft.Append(switchesRight);
 
             Assert.False(switchesLeft.HaveErrors());
             Assert.False(switchesRight.HaveErrors());
 
-            switchesLeft.SetUnknownSwitchError("/bogus", string.Empty);
+            switchesLeft.SetUnknownSwitchError("/bogus");
 
             Assert.True(switchesLeft.HaveErrors());
             Assert.False(switchesRight.HaveErrors());
 
-            switchesLeft.Append(switchesRight, string.Empty);
+            switchesLeft.Append(switchesRight);
 
             Assert.True(switchesLeft.HaveErrors());
             Assert.False(switchesRight.HaveErrors());
 
             VerifySwitchError(switchesLeft, "/bogus");
 
-            switchesRight.Append(switchesLeft, string.Empty);
+            switchesRight.Append(switchesLeft);
 
             Assert.True(switchesLeft.HaveErrors());
             Assert.True(switchesRight.HaveErrors());
@@ -828,8 +821,8 @@ public void AppendErrorTests2()
             Assert.False(switchesLeft.HaveErrors());
             Assert.False(switchesRight.HaveErrors());
 
-            switchesLeft.SetUnknownSwitchError("/bogus", string.Empty);
-            switchesRight.SetUnexpectedParametersError("/nologo:foo", string.Empty);
+            switchesLeft.SetUnknownSwitchError("/bogus");
+            switchesRight.SetUnexpectedParametersError("/nologo:foo");
 
             Assert.True(switchesLeft.HaveErrors());
             Assert.True(switchesRight.HaveErrors());
@@ -837,7 +830,7 @@ public void AppendErrorTests2()
             VerifySwitchError(switchesLeft, "/bogus");
             VerifySwitchError(switchesRight, "/nologo:foo");
 
-            switchesLeft.Append(switchesRight, string.Empty);
+            switchesLeft.Append(switchesRight);
 
             VerifySwitchError(switchesLeft, "/bogus");
             VerifySwitchError(switchesRight, "/nologo:foo");
@@ -860,7 +853,7 @@ public void AppendParameterlessSwitchesTests()
             Assert.False(switchesRight1.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.Help));
             Assert.True(switchesRight1.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger));
 
-            switchesLeft.Append(switchesRight1, string.Empty);
+            switchesLeft.Append(switchesRight1);
 
             Assert.Equal("/noconlog", switchesLeft.GetParameterlessSwitchCommandLineArg(CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger));
             Assert.True(switchesLeft.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger));
@@ -878,7 +871,7 @@ public void AppendParameterlessSwitchesTests()
             Assert.False(switchesRight2.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.Help));
             Assert.True(switchesRight2.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger));
 
-            switchesLeft.Append(switchesRight2, string.Empty);
+            switchesLeft.Append(switchesRight2);
 
             Assert.Equal("/NOCONSOLELOGGER", switchesLeft.GetParameterlessSwitchCommandLineArg(CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger));
             Assert.True(switchesLeft.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger));
@@ -908,7 +901,7 @@ public void AppendParameterizedSwitchesTests1()
             Assert.False(switchesRight.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Project));
             Assert.True(switchesRight.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Target));
 
-            switchesLeft.Append(switchesRight, string.Empty);
+            switchesLeft.Append(switchesRight);
 
             Assert.Equal("tempproject.proj", switchesLeft.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.Project));
             Assert.True(switchesLeft.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Project));
@@ -944,7 +937,7 @@ public void AppendParameterizedSwitchesTests2()
 
             Assert.True(switchesRight.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Target));
 
-            switchesLeft.Append(switchesRight, string.Empty);
+            switchesLeft.Append(switchesRight);
 
             Assert.Equal("/t:\"RESOURCES\";build", switchesLeft.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.Target));
             Assert.True(switchesLeft.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Target));
@@ -973,7 +966,7 @@ public void AppendParameterizedSwitchesTests3()
 
             Assert.True(switchesRight.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Project));
 
-            switchesLeft.Append(switchesRight, string.Empty);
+            switchesLeft.Append(switchesRight);
 
             Assert.Equal("tempproject.proj", switchesLeft.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.Project));
             Assert.True(switchesLeft.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Project));
@@ -1100,8 +1093,7 @@ public void ProcessWarnAsErrorSwitchNotSpecified()
         {
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "" }), commandLineSwitches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "" }), commandLineSwitches);
 
             Assert.Null(MSBuildApp.ProcessWarnAsErrorSwitch(commandLineSwitches));
         }
@@ -1116,7 +1108,6 @@ public void ProcessWarnAsErrorSwitchWithCodes()
 
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
             MSBuildApp.GatherCommandLineSwitches(new List<string>(new[]
             {
                 "\"/warnaserror: a,B ; c \"", // Leading, trailing, leading and trailing whitespace
@@ -1125,7 +1116,7 @@ public void ProcessWarnAsErrorSwitchWithCodes()
                 "/err:D,d;E,e",               // A different source with new items and uses the short form
                 "/warnaserror:a",             // A different source with a single duplicate
                 "/warnaserror:a,b",           // A different source with  multiple duplicates
-            }), commandLineSwitches, command);
+            }), commandLineSwitches);
 
             ISet<string> actualWarningsAsErrors = MSBuildApp.ProcessWarnAsErrorSwitch(commandLineSwitches);
 
@@ -1142,12 +1133,11 @@ public void ProcessWarnAsErrorSwitchEmptySwitchClearsSet()
         {
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
             MSBuildApp.GatherCommandLineSwitches(new List<string>(new[]
             {
                 "/warnaserror:a;b;c",
                 "/warnaserror",
-            }), commandLineSwitches, command);
+            }), commandLineSwitches);
 
             ISet<string> actualWarningsAsErrors = MSBuildApp.ProcessWarnAsErrorSwitch(commandLineSwitches);
 
@@ -1166,13 +1156,12 @@ public void ProcessWarnAsErrorSwitchValuesAfterEmptyAddOn()
 
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
             MSBuildApp.GatherCommandLineSwitches(new List<string>(new[]
             {
                 "/warnaserror:a;b;c",
                 "/warnaserror",
                 "/warnaserror:e;f;g",
-            }), commandLineSwitches, command);
+            }), commandLineSwitches);
 
             ISet<string> actualWarningsAsErrors = MSBuildApp.ProcessWarnAsErrorSwitch(commandLineSwitches);
 
@@ -1189,8 +1178,7 @@ public void ProcessWarnAsErrorSwitchEmpty()
         {
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new [] { "/warnaserror" }), commandLineSwitches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(new [] { "/warnaserror" }), commandLineSwitches);
 
             ISet<string> actualWarningsAsErrors = MSBuildApp.ProcessWarnAsErrorSwitch(commandLineSwitches);
 
@@ -1246,7 +1234,6 @@ public void ProcessWarnAsMessageSwitchWithCodes()
 
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
             MSBuildApp.GatherCommandLineSwitches(new List<string>(new[]
             {
                 "\"/warnasmessage: a,B ; c \"", // Leading, trailing, leading and trailing whitespace
@@ -1255,7 +1242,7 @@ public void ProcessWarnAsMessageSwitchWithCodes()
                 "/nowarn:D,d;E,e",              // A different source with new items and uses the short form
                 "/warnasmessage:a",             // A different source with a single duplicate
                 "/warnasmessage:a,b",           // A different source with  multiple duplicates
-            }), commandLineSwitches, command);
+            }), commandLineSwitches);
 
             ISet<string> actualWarningsAsMessages = MSBuildApp.ProcessWarnAsMessageSwitch(commandLineSwitches);
 
@@ -1272,8 +1259,7 @@ public void ProcessProfileEvaluationEmpty()
         {
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "/profileevaluation" }), commandLineSwitches, command);
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "/profileevaluation" }), commandLineSwitches);
             commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation][0].ShouldBe("no-file");
         }
 
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 65fb5a0b776..9f086025d34 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -51,8 +51,7 @@ public void GatherCommandLineSwitchesTwoProperties()
             var arguments = new List<string>();
             arguments.AddRange(new[] { "/p:a=b", "/p:c=d" });
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(arguments, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
             string[] parameters = switches[CommandLineSwitches.ParameterizedSwitch.Property];
             parameters[0].ShouldBe("a=b");
@@ -69,8 +68,7 @@ public void GatherCommandLineSwitchesAnyDash()
                 "--p:maxcpucount=8"
             };
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(arguments, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
             string[] parameters = switches[CommandLineSwitches.ParameterizedSwitch.Property];
             parameters[0].ShouldBe("a=b");
@@ -85,8 +83,7 @@ public void GatherCommandLineSwitchesMaxCpuCountWithArgument()
             var arguments = new List<string>();
             arguments.AddRange(new[] { "/m:2" });
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(arguments, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
             string[] parameters = switches[CommandLineSwitches.ParameterizedSwitch.MaxCPUCount];
             parameters[0].ShouldBe("2");
@@ -103,8 +100,7 @@ public void GatherCommandLineSwitchesMaxCpuCountWithoutArgument()
             var arguments = new List<string>();
             arguments.AddRange(new[] { "/m:3", "/m" });
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(arguments, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
             string[] parameters = switches[CommandLineSwitches.ParameterizedSwitch.MaxCPUCount];
             parameters[1].ShouldBe(Convert.ToString(NativeMethodsShared.GetLogicalCoreCount()));
@@ -124,8 +120,7 @@ public void GatherCommandLineSwitchesMaxCpuCountWithoutArgumentButWithColon()
             var arguments = new List<string>();
             arguments.AddRange(new[] { "/m:" });
 
-            string command = string.Empty;
-            MSBuildApp.GatherCommandLineSwitches(arguments, switches, command);
+            MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
             string[] parameters = switches[CommandLineSwitches.ParameterizedSwitch.MaxCPUCount];
             parameters.Length.ShouldBe(0);
@@ -610,7 +605,6 @@ public void InvalidMaxCPUCountSwitch3()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
-                // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "foo" });
             }
            );
@@ -621,6 +615,7 @@ public void InvalidMaxCPUCountSwitch4()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
+                // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "1025" });
             }
            );
@@ -773,7 +768,7 @@ private void RobustDelete(string path)
         /// Tests that the environment gets passed on to the node during build.
         /// </summary>
         [Fact]
-        public void TestEnvironment()
+        public void TestEnvironmentTest()
         {
             string projectString = ObjectModelHelpers.CleanupFileContents(
                    @"<?xml version=""1.0"" encoding=""utf-8""?>
@@ -953,6 +948,25 @@ public void ResponseFileInProjectDirectoryFoundImplicitly()
             output.ShouldContain("[A=1]");
         }
 
+        [Fact]
+        public void ResponseFileSwitchesAppearInCommandLine()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                TransientTestFile autoRspFile = env.CreateFile(folder, AutoResponseFileName, "-nowarn:MSB1001 @myRsp.rsp %NONEXISTENTENVIRONMENTVARIABLE%");
+                TransientTestFile projectFile = env.CreateFile(folder, "project.proj", "<Project><Target Name=\"T\"><Message Text=\"Text\"/></Target></Project>");
+                TransientTestFile rpsFile = env.CreateFile(folder, "myRsp.rsp", "-nr:false -m:2");
+                env.SetCurrentDirectory(folder.Path);
+                string output = RunnerUtilities.ExecMSBuild("project.proj -nologo", out bool success);
+                success.ShouldBeFalse();
+                output.ShouldContain("-nr:false -m:2");
+                output.ShouldContain("-nowarn:MSB1001 @myRsp.rsp %NONEXISTENTENVIRONMENTVARIABLE%");
+                output.ShouldContain("project.proj -nologo");
+                output.ShouldContain(": %NONEXISTENTENVIRONMENTVARIABLE%");
+            }
+        }
+
         /// <summary>
         /// Any msbuild.rsp in the directory of the specified project/solution should be read, and should
         /// take priority over any other response files.
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index 3220ddfec53..5510116f5e1 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -712,7 +712,7 @@ internal bool HaveAnySwitchesBeenSet()
         /// Called to flag an error when an unrecognized switch is detected on the command line.
         /// </summary>
         /// <param name="badCommandLineArg"></param>
-        internal void SetUnknownSwitchError(string badCommandLineArgValue, string commandLine)
+        internal void SetUnknownSwitchError(string badCommandLineArgValue, string commandLine = "")
         {
             SetSwitchError("UnknownSwitchError", badCommandLineArgValue, commandLine);
         }
@@ -721,7 +721,7 @@ internal void SetUnknownSwitchError(string badCommandLineArgValue, string comman
         /// Called to flag an error when a switch that doesn't take parameters is found with parameters on the command line.
         /// </summary>
         /// <param name="badCommandLineArg"></param>
-        internal void SetUnexpectedParametersError(string badCommandLineArgValue, string commandLine)
+        internal void SetUnexpectedParametersError(string badCommandLineArgValue, string commandLine = "")
         {
             SetSwitchError("UnexpectedParametersError", badCommandLineArgValue, commandLine);
         }
@@ -825,7 +825,7 @@ internal void ThrowErrors()
         /// considered to be on the "left", and the switches being appended are on the "right".
         /// </remarks>
         /// <param name="switchesToAppend"></param>
-        internal void Append(CommandLineSwitches switchesToAppend, string commandLine)
+        internal void Append(CommandLineSwitches switchesToAppend, string commandLine = "")
         {
             // if this collection doesn't already have an error registered, but the collection being appended does
             if (!HaveErrors() && switchesToAppend.HaveErrors())
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 729251033ac..e07b381a253 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1552,7 +1552,7 @@ private static void GatherAllSwitches(
         /// <remarks>
         /// Internal for unit testing only.
         /// </remarks>
-        internal static void GatherCommandLineSwitches(List<string> commandLineArgs, CommandLineSwitches commandLineSwitches, string commandLine)
+        internal static void GatherCommandLineSwitches(List<string> commandLineArgs, CommandLineSwitches commandLineSwitches, string commandLine = "")
         {
             foreach (string commandLineArg in commandLineArgs)
             {
