diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 4ad0b7cdd52..78f971b430a 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -70,9 +70,6 @@
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\InternalErrorException.cs">
-      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
-    </Compile>
     <Compile Include="..\Shared\NativeMethodsShared.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index d561fcaf9ef..9b151a10fc7 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -3,6 +3,7 @@
 
 using Xunit;
 using Shouldly;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Utilities;
 using Microsoft.Build.UnitTests;
diff --git a/src/Build.UnitTests/Scanner_Tests.cs b/src/Build.UnitTests/Scanner_Tests.cs
index 869a90027cf..8fb33e821cd 100644
--- a/src/Build.UnitTests/Scanner_Tests.cs
+++ b/src/Build.UnitTests/Scanner_Tests.cs
@@ -3,6 +3,7 @@
 
 using System;
 
+using Microsoft.Build.Framework;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Shared;
@@ -39,9 +40,9 @@ public void ErrorPosition()
                 { " $(",                    "2",    "AllowAll"},              // Position of $
                 { " $",                     "2",    "AllowAll"},              // Position of $
                 { " @(foo)",                "2",    "AllowProperties"},       // Position of @
-                { " '@(foo)'",              "3",    "AllowProperties"},       // Position of @    
+                { " '@(foo)'",              "3",    "AllowProperties"},       // Position of @
                 /* test escaped chars: message shows them escaped so count should include them */
-                { "'%24%28x' == '%24(x''",   "21",  "AllowAll"}               // Position of extra quote 
+                { "'%24%28x' == '%24(x''",   "21",  "AllowAll"}               // Position of extra quote
             };
 
             // Some errors are caught by the Parser, not merely by the Lexer/Scanner. So we have to do a full Parse,
diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index 990a8b686cb..e2df26e70dd 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
@@ -135,8 +136,8 @@ private ToolsetConfigurationSection ConfigurationSection
                     }
                     catch (ConfigurationException ex)
                     {
-                        // ConfigurationException is obsolete, but we catch it rather than 
-                        // ConfigurationErrorsException (which is what we throw below) because it is more 
+                        // ConfigurationException is obsolete, but we catch it rather than
+                        // ConfigurationErrorsException (which is what we throw below) because it is more
                         // general and we don't want to miss catching some other derived exception.
                         InvalidToolsetDefinitionException.Throw(ex, "ConfigFileReadError", ElementLocation.Create(ex.Source, ex.Line, 0).LocationString, ex.BareMessage);
                     }
diff --git a/src/Build/Evaluation/Conditionals/Scanner.cs b/src/Build/Evaluation/Conditionals/Scanner.cs
index 5d24ea0949b..04af6a1a016 100644
--- a/src/Build/Evaluation/Conditionals/Scanner.cs
+++ b/src/Build/Evaluation/Conditionals/Scanner.cs
@@ -5,6 +5,7 @@
 using System;
 using System.Diagnostics;
 
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
@@ -18,7 +19,7 @@ namespace Microsoft.Build.Evaluation
     ///    do {
     ///      s.Advance();
     ///    while (s.IsNext(Token.EndOfInput));
-    /// 
+    ///
     ///  After Advance() is called, you can get the current token (s.CurrentToken),
     ///  check it's type (s.IsNext()), get the string for it (s.NextString()).
     /// </summary>
@@ -112,7 +113,7 @@ internal int GetErrorPosition()
             return _errorPosition;
         }
 
-        // The string (usually a single character) we found unexpectedly. 
+        // The string (usually a single character) we found unexpectedly.
         // We might want to show it in the error message, to help the user spot the error.
         internal string UnexpectedlyFound
         {
@@ -265,7 +266,7 @@ internal bool Advance()
         }
 
         /// <summary>
-        /// Parses either the $(propertyname) syntax or the %(metadataname) syntax, 
+        /// Parses either the $(propertyname) syntax or the %(metadataname) syntax,
         /// and returns the parsed string beginning with the '$' or '%', and ending with the
         /// closing parenthesis.
         /// </summary>
@@ -552,7 +553,7 @@ private bool ParseItemList()
         }
 
         /// <summary>
-        /// Parse any part of the conditional expression that is quoted. It may contain a property, item, or 
+        /// Parse any part of the conditional expression that is quoted. It may contain a property, item, or
         /// metadata element that needs expansion during evaluation.
         /// </summary>
         private bool ParseQuotedString()
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index aa1cdeaa90b..479d5578559 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -7,6 +7,7 @@
 using System.Runtime.InteropServices;
 using System.Text.RegularExpressions;
 
+using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
diff --git a/src/Build/Globbing/MSBuildGlob.cs b/src/Build/Globbing/MSBuildGlob.cs
index 3fdf05a6b9c..706933b8c43 100644
--- a/src/Build/Globbing/MSBuildGlob.cs
+++ b/src/Build/Globbing/MSBuildGlob.cs
@@ -6,6 +6,7 @@
 using System.IO;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using Microsoft.NET.StringTools;
diff --git a/src/Framework/BuildEnvironmentState.cs b/src/Framework/BuildEnvironmentState.cs
index a34621e4d8d..fae6127700e 100644
--- a/src/Framework/BuildEnvironmentState.cs
+++ b/src/Framework/BuildEnvironmentState.cs
@@ -1,12 +1,6 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index d97becfa1d0..90eed3b8aad 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -4,7 +4,7 @@
 using System;
 using System.Linq;
 
-namespace Microsoft.Build.Utilities
+namespace Microsoft.Build.Framework
 {
     internal enum ChangeWaveConversionState
     {
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index d4212f1d09b..e747dbcc9a3 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -15,7 +15,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 #if FEATURE_APPDOMAIN
 using System.Runtime.Remoting;
 #endif
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 80f684bb52e..3b17b183367 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -39,6 +39,9 @@
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
     </Compile>
+    <Compile Include="..\Framework\BuildEnvironmentState.cs">
+      <Link>BuildEnvironmentState.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\AssemblyNameComparer.cs">
       <Link>AssemblyNameComparer.cs</Link>
     </Compile>
@@ -96,7 +99,7 @@
       <Link>ITranslator.cs</Link>
     </Compile>
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
-    <Compile Include="..\Shared\InternalErrorException.cs">
+    <Compile Include="..\Framework\InternalErrorException.cs">
       <Link>InternalErrorException.cs</Link>
     </Compile>
     <Compile Include="..\Shared\InterningBinaryReader.cs">
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 49f095228fa..487080a3dff 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -14,7 +14,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System.Reflection;
-using Microsoft.Build.Utilities;
 
 #if !CLR2COMPATIBILITY
 using Microsoft.Build.Shared.Debugging;
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index 913b93c50dc..0ba09dac396 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using System;
 using System.Diagnostics;
 using System.IO;
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index 9ac1ab79f9b..f359e71a71d 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -23,7 +23,6 @@ namespace Microsoft.Build.AppxPackage.Shared
 using Microsoft.Build.Shared.Debugging;
 #endif
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Shared
 #endif
diff --git a/src/Shared/FileSystem/ManagedFileSystem.cs b/src/Shared/FileSystem/ManagedFileSystem.cs
index d5d80a07e35..982a7d97273 100644
--- a/src/Shared/FileSystem/ManagedFileSystem.cs
+++ b/src/Shared/FileSystem/ManagedFileSystem.cs
@@ -1,7 +1,7 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using Microsoft.Build.Utilities;
+using Microsoft.Build.Framework;
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index c3f55803195..5d90ac65a18 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -18,7 +18,6 @@
 using System.Text;
 using System.Threading;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared.FileSystem;
 
 namespace Microsoft.Build.Shared
diff --git a/src/Shared/InternalErrorException.cs b/src/Shared/InternalErrorException.cs
deleted file mode 100644
index 448cc5f6a46..00000000000
--- a/src/Shared/InternalErrorException.cs
+++ /dev/null
@@ -1,139 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Diagnostics;
-using System.Runtime.Serialization;
-
-namespace Microsoft.Build.Shared
-{
-    /// <summary>
-    /// This exception is to be thrown whenever an assumption we have made in the code turns out to be false. Thus, if this
-    /// exception ever gets thrown, it is because of a bug in our own code, not because of something the user or project author
-    /// did wrong.
-    /// 
-    /// !~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~
-    /// WARNING: When this file is shared into multiple assemblies each assembly will view this as a different type.
-    ///          Don't throw this exception from one assembly and catch it in another.
-    /// !~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~
-    ///     
-    /// </summary>
-    [Serializable]
-    internal sealed class InternalErrorException : Exception
-    {
-        /// <summary>
-        /// Default constructor.
-        /// SHOULD ONLY BE CALLED BY DESERIALIZER. 
-        /// SUPPLY A MESSAGE INSTEAD.
-        /// </summary>
-        internal InternalErrorException() : base()
-        {
-            // do nothing
-        }
-
-        /// <summary>
-        /// Creates an instance of this exception using the given message.
-        /// </summary>
-        internal InternalErrorException
-        (
-            String message
-        ) :
-            base("MSB0001: Internal MSBuild Error: " + message)
-        {
-            ConsiderDebuggerLaunch(message, null);
-        }
-
-        /// <summary>
-        /// Creates an instance of this exception using the given message and inner exception.
-        /// Adds the inner exception's details to the exception message because most bug reporters don't bother
-        /// to provide the inner exception details which is typically what we care about.
-        /// </summary>
-        internal InternalErrorException
-        (
-            String message,
-            Exception innerException
-        ) :
-            base("MSB0001: Internal MSBuild Error: " + message + (innerException == null ? String.Empty : ("\n=============\n" + innerException.ToString() + "\n\n")), innerException)
-        {
-            ConsiderDebuggerLaunch(message, innerException);
-        }
-
-        #region Serialization (update when adding new class members)
-
-        /// <summary>
-        /// Private constructor used for (de)serialization. The constructor is private as this class is sealed
-        /// If we ever add new members to this class, we'll need to update this.
-        /// </summary>
-        private InternalErrorException(SerializationInfo info, StreamingContext context)
-            : base(info, context)
-        {
-            // Do nothing: no fields
-        }
-
-        // Base implementation of GetObjectData() is sufficient; we have no fields
-        #endregion
-
-        #region ConsiderDebuggerLaunch
-        /// <summary>
-        /// A fatal internal error due to a bug has occurred. Give the dev a chance to debug it, if possible.
-        /// 
-        /// Will in all cases launch the debugger, if the environment variable "MSBUILDLAUNCHDEBUGGER" is set.
-        /// 
-        /// In DEBUG build, will always launch the debugger, unless we are in razzle (_NTROOT is set) or in NUnit,
-        /// or MSBUILDDONOTLAUNCHDEBUGGER is set (that could be useful in suite runs).
-        /// We don't launch in retail or LKG so builds don't jam; they get a callstack, and continue or send a mail, etc.
-        /// We don't launch in NUnit as tests often intentionally cause InternalErrorExceptions.
-        /// 
-        /// Because we only call this method from this class, just before throwing an InternalErrorException, there is 
-        /// no danger that this suppression will cause a bug to only manifest itself outside NUnit
-        /// (which would be most unfortunate!). Do not make this non-private.
-        /// 
-        /// Unfortunately NUnit can't handle unhandled exceptions like InternalErrorException on anything other than
-        /// the main test thread. However, there's still a callstack displayed before it quits.
-        /// 
-        /// If it is going to launch the debugger, it first does a Debug.Fail to give information about what needs to
-        /// be debugged -- the exception hasn't been thrown yet. This automatically displays the current callstack.
-        /// </summary>
-        private static void ConsiderDebuggerLaunch(string message, Exception innerException)
-        {
-            string innerMessage = (innerException == null) ? String.Empty : innerException.ToString();
-
-            if (Environment.GetEnvironmentVariable("MSBUILDLAUNCHDEBUGGER") != null)
-            {
-                LaunchDebugger(message, innerMessage);
-                return;
-            }
-
-#if DEBUG
-            if (!RunningTests() && Environment.GetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER") == null
-                && Environment.GetEnvironmentVariable("_NTROOT") == null)
-            {
-                LaunchDebugger(message, innerMessage);
-                return;
-            }
-#endif
-        }
-
-        private static void LaunchDebugger(string message, string innerMessage)
-        {
-#if FEATURE_DEBUG_LAUNCH
-            Debug.Fail(message, innerMessage);
-            Debugger.Launch();
-#else
-            Console.WriteLine("MSBuild Failure: " + message);    
-            if (!string.IsNullOrEmpty(innerMessage))
-            {
-                Console.WriteLine(innerMessage);
-            }
-            Console.WriteLine("Waiting for debugger to attach to process: " + Process.GetCurrentProcess().Id);
-            while (!Debugger.IsAttached)
-            {
-                System.Threading.Thread.Sleep(100);
-            }
-#endif
-        }
-        #endregion
-
-        private static bool RunningTests() => BuildEnvironmentHelper.Instance.RunningTests;
-    }
-}
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 2a53e31acfc..6569346f5e8 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -16,7 +16,6 @@
 
 using FILETIME = System.Runtime.InteropServices.ComTypes.FILETIME;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Shared
 {
diff --git a/src/Shared/ToolsetElement.cs b/src/Shared/ToolsetElement.cs
index 9902fd49a06..f3f240f8537 100644
--- a/src/Shared/ToolsetElement.cs
+++ b/src/Shared/ToolsetElement.cs
@@ -6,6 +6,7 @@
 using System.Configuration;
 using System.IO;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index 471e1536b63..f544b884b99 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -1,6 +1,7 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Shouldly;
 using System;
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 9922585a325..d3e93024a61 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -17,7 +17,6 @@
 
 using TempPaths = System.Collections.Generic.Dictionary<string, string>;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
-using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.UnitTests
 {
