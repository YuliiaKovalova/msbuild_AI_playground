diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 328239d841d..093f1620a07 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -625,8 +625,8 @@ public NodeContext(int nodeId, Process process,
                 _packetEnqueued = new AutoResetEvent(false);
                 _packetQueueDrainDelayCancellation = new CancellationTokenSource();
 
-                // specify the smallest stack size - 256kb
-                drainPacketQueueThread = new Thread(DrainPacketQueue, 256 * 1024);
+                // specify the smallest stack size - 64kb
+                drainPacketQueueThread = new Thread(DrainPacketQueue, 64 * 1024);
                 drainPacketQueueThread.IsBackground = true;
                 drainPacketQueueThread.Start(this);
             }
@@ -728,30 +728,25 @@ public void SendData(INodePacket packet)
             }
 
             /// <summary>
-            /// Schedule a task to drain the packet write queue. We could have had a
-            /// dedicated thread that would pump the queue constantly, but
-            /// we don't want to allocate a dedicated thread per node (1MB stack)
+            /// We use a dedicated thread to
             /// </summary>
             /// <remarks>Usually there'll be a single packet in the queue, but sometimes
-            /// a burst of SendData comes in, with 10-20 packets scheduled. In this case
-            /// the first scheduled task will drain all of them, and subsequent tasks
-            /// will run on an empty queue. I tried to write logic that avoids queueing
-            /// a new task if the queue is already being drained, but it didn't show any
-            /// improvement and made things more complicated.</remarks>
+            /// a burst of SendData comes in, with 10-20 packets scheduled.</remarks>
             private void DrainPacketQueue(object state)
             {
                 NodeContext context = (NodeContext)state;
+                MemoryStream writeStream = context._writeBufferMemoryStream;
+                Stream serverToClientStream = context._serverToClientStream;
+                ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
+
                 while (true)
                 {
                     context._packetEnqueued.WaitOne();
                     while (context._packetWriteQueue.TryDequeue(out var packet))
                     {
-                        MemoryStream writeStream = context._writeBufferMemoryStream;
-
                         // clear the buffer but keep the underlying capacity to avoid reallocations
                         writeStream.SetLength(0);
 
-                        ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
                         try
                         {
                             writeStream.WriteByte((byte)packet.Type);
@@ -771,7 +766,8 @@ private void DrainPacketQueue(object state)
                             for (int i = 0; i < writeStreamLength; i += MaxPacketWriteSize)
                             {
                                 int lengthToWrite = Math.Min(writeStreamLength - i, MaxPacketWriteSize);
-                                context._serverToClientStream.Write(writeStreamBuffer, i, lengthToWrite);
+
+                                serverToClientStream.Write(writeStreamBuffer, i, lengthToWrite);
                             }
 
                             if (IsExitPacket(packet))
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index 0a05628bff6..a392e432f2e 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -102,7 +102,15 @@ public ITaskItem[] Items
             {
                 lock (_result)
                 {
-                    RetrieveItemsFromCache();
+                    if (_items == null)
+                    {
+                        string cacheFile = GetCacheFile(_cacheInfo.ConfigId, _cacheInfo.TargetName);
+                        using Stream stream = File.OpenRead(cacheFile);
+                        using ITranslator resultCacheTranslator = GetResultsCacheTranslator(TranslationDirection.ReadFromStream, stream);
+
+                        TranslateItems(resultCacheTranslator);
+                        _cacheInfo = new CacheInfo();
+                    }
 
                     return _items;
                 }
@@ -210,7 +218,16 @@ void ITranslatable.Translate(ITranslator translator)
                 {
                     // Should we have cached these items but now want to send them to another node, we need to
                     // ensure they are loaded before doing so.
-                    RetrieveItemsFromCache();
+                    if (_items == null)
+                    {
+                        string cacheFile = GetCacheFile(_cacheInfo.ConfigId, _cacheInfo.TargetName);
+                        using Stream stream = File.OpenRead(cacheFile);
+                        using ITranslator resultCacheTranslator = GetResultsCacheTranslator(TranslationDirection.ReadFromStream, stream);
+
+                        TranslateItems(resultCacheTranslator);
+                        _cacheInfo = new CacheInfo();
+                    }
+
                     InternalTranslate(translator);
                 }
             }
@@ -301,25 +318,6 @@ private void InternalTranslate(ITranslator translator)
             TranslateItems(translator);
         }
 
-        /// <summary>
-        /// Retrieve the items from the cache.
-        /// </summary>
-        private void RetrieveItemsFromCache()
-        {
-            lock (_result)
-            {
-                if (_items == null)
-                {
-                    string cacheFile = GetCacheFile(_cacheInfo.ConfigId, _cacheInfo.TargetName);
-                    using Stream stream = File.OpenRead(cacheFile);
-                    using ITranslator translator = GetResultsCacheTranslator(TranslationDirection.ReadFromStream, stream);
-
-                    TranslateItems(translator);
-                    _cacheInfo = new CacheInfo();
-                }
-            }
-        }
-
         private void TranslateItems(ITranslator translator)
         {
             var itemsCount = _items?.Length ?? 0;
