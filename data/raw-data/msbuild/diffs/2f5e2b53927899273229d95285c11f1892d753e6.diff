diff --git a/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
new file mode 100644
index 00000000000..41e3db02aa5
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
@@ -0,0 +1,58 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Framework;
+using Shouldly;
+using System;
+using System.Collections.Generic;
+using Xunit;
+
+namespace Microsoft.Build.Engine.UnitTests.BackEnd
+{
+    public class SdkResultItemComparison_Tests
+    {
+        [Fact]
+        public void SdkResultItem_Equal_WithDefaultCtor()
+        {
+            var sdkResultItem1 = new SdkResultItem();
+            sdkResultItem1.ItemSpec = "AnySpec";
+            sdkResultItem1.Metadata.Add("key1", "value1");
+            sdkResultItem1.Metadata.Add("key2", "value2");
+            var sdkResultItem2 = new SdkResultItem();
+            sdkResultItem2.ItemSpec = "AnySpec";
+            sdkResultItem2.Metadata.Add("key2", "value2");
+            sdkResultItem2.Metadata.Add("key1", "value1");
+
+            sdkResultItem1.ShouldBe(sdkResultItem2);
+        }
+
+        [Fact]
+        public void SdkResultItem_Equal_CtorParam_MetadataNull()
+        {
+            var sdkResultItem1 = new SdkResultItem("anyspec", new Dictionary<string, string>());
+            var sdkResultItem2 = new SdkResultItem("anyspec", null);
+
+            // Should not be the same, because passing metadata = null is allowed and the Metadata property value allows null.
+            sdkResultItem1.ShouldNotBe(sdkResultItem2);
+        }
+
+        [Fact]
+        public void SdkResultItem_GetHashCode_Compare_MetadataIgnoreKeyOrder()
+        {
+            var sdkResultItem1 = new SdkResultItem();
+            sdkResultItem1.ItemSpec = "AnySpec";
+            sdkResultItem1.Metadata.Add("key1", "value1");
+            sdkResultItem1.Metadata.Add("key2", "value2");
+            var hashSdkItem1 = sdkResultItem1.GetHashCode();
+
+            var sdkResultItem2 = new SdkResultItem();
+            sdkResultItem2.ItemSpec = "AnySpec";
+            sdkResultItem2.Metadata.Add("key2", "value2");
+            sdkResultItem2.Metadata.Add("key1", "value1");
+            var hashSdkItem2 = sdkResultItem2.GetHashCode();
+
+            hashSdkItem1.ShouldBe(hashSdkItem2);
+        }
+
+    }
+}
diff --git a/src/Framework/Sdk/SdkResultItem.cs b/src/Framework/Sdk/SdkResultItem.cs
index 5c24ad028b8..baaa023f4f3 100644
--- a/src/Framework/Sdk/SdkResultItem.cs
+++ b/src/Framework/Sdk/SdkResultItem.cs
@@ -3,19 +3,25 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
+using System.Linq;
 
 namespace Microsoft.Build.Framework
 {
+
+    #nullable enable
+    
     /// <summary>
     /// The value of an item and any associated metadata to be added by an SDK resolver.  See <see cref="SdkResult.ItemsToAdd"/>
     /// </summary>
     public class SdkResultItem
     {
         public string ItemSpec { get; set; }
-        public Dictionary<string, string> Metadata { get;}
+        public Dictionary<string, string>? Metadata { get;}
 
         public SdkResultItem()
         {
+            ItemSpec = string.Empty;
             Metadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
         }
 
@@ -24,7 +30,7 @@ public SdkResultItem()
         /// </summary>
         /// <param name="itemSpec">The value (itemspec) for the item</param>
         /// <param name="metadata">A dictionary of item metadata.  This should be created with <see cref="StringComparer.OrdinalIgnoreCase"/> for the comparer.</param>
-        public SdkResultItem(string itemSpec, Dictionary<string, string> metadata)
+        public SdkResultItem(string itemSpec, Dictionary<string, string>? metadata)
         {
             ItemSpec = itemSpec;
             Metadata = metadata;
@@ -34,20 +40,10 @@ public override bool Equals(object obj)
         {
             if (obj is SdkResultItem item &&
                    ItemSpec == item.ItemSpec &&
-                   Metadata?.Count == item.Metadata?.Count)
+                   item.Metadata is not null &&
+                   Metadata?.Count == item.Metadata.Count)
             {
-                if (Metadata != null)
-                {
-                    foreach (var kvp in Metadata)
-                    {
-                        if (item.Metadata[kvp.Key] != kvp.Value)
-                        {
-                            return false;
-                        }
-                    }
-                }
-
-                return true;
+                return Metadata.All(m => item.Metadata.TryGetValue(m.Key, out var itemValue) && itemValue == m.Value);
             }
             return false;
         }
@@ -55,14 +51,13 @@ public override bool Equals(object obj)
         public override int GetHashCode()
         {
             int hashCode = -849885975;
-            hashCode = (hashCode * -1521134295) + EqualityComparer<string>.Default.GetHashCode(ItemSpec);
+            hashCode = hashCode ^ ItemSpec.GetHashCode();
 
             if (Metadata != null)
             {
                 foreach (var kvp in Metadata)
                 {
-                    hashCode = (hashCode * -1521134295) + kvp.Key.GetHashCode();
-                    hashCode = (hashCode * -1521134295) + kvp.Value.GetHashCode();
+                    hashCode ^= StringComparer.OrdinalIgnoreCase.GetHashCode(kvp.Key) * (StringComparer.OrdinalIgnoreCase.GetHashCode(kvp.Value ?? "V") + 1);
                 }
             }
 
