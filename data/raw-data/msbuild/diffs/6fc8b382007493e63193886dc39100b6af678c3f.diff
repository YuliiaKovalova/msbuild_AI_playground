diff --git a/src/Build/Evaluation/ItemDataCollectionValue.cs b/src/Build/Evaluation/ItemDataCollectionValue.cs
new file mode 100644
index 00000000000..d2664500a1b
--- /dev/null
+++ b/src/Build/Evaluation/ItemDataCollectionValue.cs
@@ -0,0 +1,78 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System.Collections.Generic;
+using System.Collections.Immutable;
+
+namespace Microsoft.Build.Evaluation
+{
+    /// <summary>
+    /// An efficient multi-value wrapper holding one or more items.
+    /// </summary>
+    internal struct ItemDataCollectionValue<I>
+    {
+        /// <summary>
+        /// A non-allocating enumerator for the multi-value.
+        /// </summary>
+        public struct Enumerator : IEnumerator<I>
+        {
+            private object _value;
+            private int _index;
+
+            public Enumerator(object value)
+            {
+                _value = value;
+                _index = -1;
+            }
+
+            public I Current => (_value is IList<I> list) ? list[_index] : (I)_value;
+            object System.Collections.IEnumerator.Current => Current;
+
+            public void Dispose()
+            { }
+
+            public bool MoveNext()
+            {
+                int count = (_value is IList<I> list) ? list.Count : 1;
+                if (_index + 1 < count)
+                {
+                    _index++;
+                    return true;
+                }
+                return false;
+            }
+
+            public void Reset()
+            {
+                _index = -1;
+            }
+        }
+
+        /// <summary>
+        /// Holds one value or a list of values.
+        /// </summary>
+        private object _value;
+
+        public bool IsEmpty => _value == null || (_value is ImmutableList<I> list && list.Count == 0);
+
+        public ItemDataCollectionValue(I item)
+        {
+            _value = item;
+        }
+
+        public void Add(I item)
+        {
+            if (_value is not ImmutableList<I> list)
+            {
+                list = ImmutableList<I>.Empty;
+                list = list.Add((I)_value);
+            }
+            _value = list.Add(item);
+        }
+
+        public Enumerator GetEnumerator()
+        {
+            return new Enumerator(_value);
+        }
+    }
+}
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 44332124f80..fbc0b6f6b1a 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -321,6 +321,48 @@ public IEnumerable<ItemSpecFragment> FragmentsMatchingItem(string itemToMatch, o
             return result;
         }
 
+        /// <summary>
+        /// Returns a list of normalized paths that are common between this itemspec and keys of the given dictionary.
+        /// </summary>
+        /// <param name="itemsByNormalizedValue">The dictionary to match this itemspec against.</param>
+        /// <returns>The keys of <paramref name="itemsByNormalizedValue"/> that are also referenced by this itemspec.</returns>
+        public IList<string> IntersectsWith(IReadOnlyDictionary<string, ItemDataCollectionValue<I>> itemsByNormalizedValue)
+        {
+            IList<string> matches = null;
+
+            foreach (var fragment in Fragments)
+            {
+                IEnumerable<string> referencedItems = fragment.GetReferencedItems();
+                if (referencedItems != null)
+                {
+                    // The fragment can enumerate its referenced items, we can do dictionary lookups.
+                    foreach (var spec in referencedItems)
+                    {
+                        string key = FileUtilities.NormalizePathForComparisonNoThrow(spec, fragment.ProjectDirectory);
+                        if (itemsByNormalizedValue.TryGetValue(key, out var multiValue))
+                        {
+                            matches ??= new List<string>();
+                            matches.Add(key);
+                        }
+                    }
+                }
+                else
+                {
+                    // The fragment cannot enumerate its referenced items. Iterate over the dictionary and test each item.
+                    foreach (var kvp in itemsByNormalizedValue)
+                    {
+                        if (fragment.IsMatchNormalized(kvp.Key))
+                        {
+                            matches ??= new List<string>();
+                            matches.Add(kvp.Key);
+                        }
+                    }
+                }
+            }
+
+            return matches ?? Array.Empty<string>();
+        }
+
         /// <summary>
         ///     Return an MSBuildGlob that represents this ItemSpec.
         /// </summary>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
index dc31afd5fc4..c93c0d73576 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
@@ -19,74 +19,6 @@ internal sealed class OrderedItemDataCollection
         {
             #region Inner types
 
-            /// <summary>
-            /// An efficient multi-value wrapper holding one or more items.
-            /// </summary>
-            internal struct DictionaryValue
-            {
-                /// <summary>
-                /// A non-allocating enumerator for the multi-value.
-                /// </summary>
-                public struct Enumerator : IEnumerator<I>
-                {
-                    private object _value;
-                    private int _index;
-
-                    public Enumerator(object value)
-                    {
-                        _value = value;
-                        _index = -1;
-                    }
-
-                    public I Current => (_value is IList<I> list) ? list[_index] : (I)_value;
-                    object System.Collections.IEnumerator.Current => Current;
-
-                    public void Dispose()
-                    { }
-
-                    public bool MoveNext()
-                    {
-                        int count = (_value is IList<I> list) ? list.Count : 1;
-                        if (_index + 1 < count)
-                        {
-                            _index++;
-                            return true;
-                        }
-                        return false;
-                    }
-
-                    public void Reset()
-                    {
-                        _index = -1;
-                    }
-                }
-
-                /// <summary>
-                /// Holds one value or a list of values.
-                /// </summary>
-                private object _value;
-
-                public DictionaryValue(I item)
-                {
-                    _value = item;
-                }
-
-                public void Add(I item)
-                {
-                    if (_value is not ImmutableList<I> list)
-                    {
-                        list = ImmutableList<I>.Empty;
-                        list = list.Add((I)_value);
-                    }
-                    _value = list.Add(item);
-                }
-
-                public Enumerator GetEnumerator()
-                {
-                    return new Enumerator(_value);
-                }
-            }
-
             /// <summary>
             /// A mutable and enumerable version of <see cref="OrderedItemDataCollection"/>.
             /// </summary>
@@ -100,9 +32,9 @@ internal sealed class Builder : IEnumerable<ItemData>
                 /// <summary>
                 /// A dictionary of items keyed by their normalized value.
                 /// </summary>
-                private ImmutableDictionary<string, DictionaryValue>.Builder _dictionaryBuilder;
+                private ImmutableDictionary<string, ItemDataCollectionValue<I>>.Builder _dictionaryBuilder;
 
-                internal Builder(ImmutableList<ItemData>.Builder listBuilder, ImmutableDictionary<string, DictionaryValue>.Builder dictionaryBuilder)
+                internal Builder(ImmutableList<ItemData>.Builder listBuilder, ImmutableDictionary<string, ItemDataCollectionValue<I>>.Builder dictionaryBuilder)
                 {
                     _listBuilder = listBuilder;
                     _dictionaryBuilder = dictionaryBuilder;
@@ -130,6 +62,25 @@ public ItemData this[int index]
                     }
                 }
 
+                /// <summary>
+                /// Gets or creates a dictionary keyed by normalized values.
+                /// </summary>
+                public ImmutableDictionary<string, ItemDataCollectionValue<I>>.Builder Dictionary
+                {
+                    get
+                    {
+                        if (_dictionaryBuilder == null)
+                        {
+                            _dictionaryBuilder = ImmutableDictionary.CreateBuilder<string, ItemDataCollectionValue<I>>(StringComparer.OrdinalIgnoreCase);
+                            foreach (ItemData item in _listBuilder)
+                            {
+                                AddToDictionary(item.Item);
+                            }
+                        }
+                        return _dictionaryBuilder;
+                    }
+                }
+
                 public void Add(ItemData data)
                 {
                     _listBuilder.Add(data);
@@ -145,6 +96,9 @@ public void Clear()
                     _dictionaryBuilder?.Clear();
                 }
 
+                /// <summary>
+                /// Removes all items passed in a collection.
+                /// </summary>
                 public void RemoveAll(ICollection<I> itemsToRemove)
                 {
                     _listBuilder.RemoveAll(item => itemsToRemove.Contains(item.Item));
@@ -153,69 +107,29 @@ public void RemoveAll(ICollection<I> itemsToRemove)
                 }
 
                 /// <summary>
-                /// Removes items from the collection that match the given ItemSpec.
+                /// Removes all items whose normalized path is passed in a collection.
                 /// </summary>
-                /// <remarks>
-                /// If <see cref="_dictionaryBuilder"/> does not exist yet, it is created in this method to avoid the cost of comparing each item
-                /// being removed with each item already in the collection. The dictionary is kept in sync with the <see cref="_listBuilder"/>
-                /// as long as practical. If an operation would result in too much of such work, the dictionary is simply dropped and recreated
-                /// later if/when needed.
-                /// </remarks>
-                public void RemoveMatchingItems(ItemSpec<P, I> itemSpec)
+                public void RemoveAll(ICollection<string> itemPathsToRemove)
                 {
-                    HashSet<I> items = null;
-                    List<string> keysToRemove = null;
-                    var dictionaryBuilder = GetOrCreateDictionaryBuilder();
-
-                    foreach (var fragment in itemSpec.Fragments)
+                    var dictionary = Dictionary;
+                    HashSet<I> itemsToRemove = null;
+                    foreach (string itemValue in itemPathsToRemove)
                     {
-                        IEnumerable<string> referencedItems = fragment.GetReferencedItems();
-                        if (referencedItems != null)
-                        {
-                            // The fragment can enumerate its referenced items, we can do dictionary lookups.
-                            foreach (var spec in referencedItems)
-                            {
-                                string key = FileUtilities.NormalizePathForComparisonNoThrow(spec, fragment.ProjectDirectory);
-                                if (dictionaryBuilder.TryGetValue(key, out var multiValue))
-                                {
-                                    items ??= new HashSet<I>();
-                                    foreach (I item in multiValue)
-                                    {
-                                        items.Add(item);
-                                    }
-                                    keysToRemove ??= new List<string>();
-                                    keysToRemove.Add(key);
-                                }
-                            }
-                        }
-                        else
+                        if (dictionary.TryGetValue(itemValue, out var multiItem))
                         {
-                            // The fragment cannot enumerate its referenced items. Iterate over the dictionary and test each item.
-                            foreach (var kvp in dictionaryBuilder)
+                            foreach (I item in multiItem)
                             {
-                                if (fragment.IsMatchNormalized(kvp.Key))
-                                {
-                                    items ??= new HashSet<I>();
-                                    foreach (I item in kvp.Value)
-                                    {
-                                        items.Add(item);
-                                    }
-                                    keysToRemove ??= new List<string>();
-                                    keysToRemove.Add(kvp.Key);
-                                }
+                                itemsToRemove ??= new HashSet<I>();
+                                itemsToRemove.Add(item);
                             }
                         }
                     }
 
-                    // Finish by removing items from the list.
-                    if (keysToRemove != null)
-                    {
-                        dictionaryBuilder.RemoveRange(keysToRemove);
-                    }
-                    if (items != null)
+                    if (itemsToRemove != null)
                     {
-                        _listBuilder.RemoveAll(item => items.Contains(item.Item));
+                        _listBuilder.RemoveAll(item => itemsToRemove.Contains(item.Item));
                     }
+                    _dictionaryBuilder.RemoveRange(itemPathsToRemove);
                 }
 
                 /// <summary>
@@ -226,26 +140,13 @@ public OrderedItemDataCollection ToImmutable()
                     return new OrderedItemDataCollection(_listBuilder.ToImmutable(), _dictionaryBuilder?.ToImmutable());
                 }
 
-                private ImmutableDictionary<string, DictionaryValue>.Builder GetOrCreateDictionaryBuilder()
-                {
-                    if (_dictionaryBuilder == null)
-                    {
-                        _dictionaryBuilder = ImmutableDictionary.CreateBuilder<string, DictionaryValue>(StringComparer.OrdinalIgnoreCase);
-                        foreach (ItemData item in _listBuilder)
-                        {
-                            AddToDictionary(item.Item);
-                        }
-                    }
-                    return _dictionaryBuilder;
-                }
-
                 private void AddToDictionary(I item)
                 {
                     string key = FileUtilities.NormalizePathForComparisonNoThrow(item.EvaluatedInclude, item.ProjectDirectory);
 
                     if (!_dictionaryBuilder.TryGetValue(key, out var dictionaryValue))
                     {
-                        dictionaryValue = new DictionaryValue(item);
+                        dictionaryValue = new ItemDataCollectionValue<I>(item);
                     }
                     else
                     {
@@ -265,9 +166,9 @@ private void AddToDictionary(I item)
             /// <summary>
             /// A dictionary of items keyed by their normalized value.
             /// </summary>
-            private ImmutableDictionary<string, DictionaryValue> _dictionary;
+            private ImmutableDictionary<string, ItemDataCollectionValue<I>> _dictionary;
 
-            private OrderedItemDataCollection(ImmutableList<ItemData> list, ImmutableDictionary<string, DictionaryValue> dictionary)
+            private OrderedItemDataCollection(ImmutableList<ItemData> list, ImmutableDictionary<string, ItemDataCollectionValue<I>> dictionary)
             {
                 _list = list;
                 _dictionary = dictionary;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 9005ea5be18..fe5a270f1a6 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -45,18 +45,19 @@ protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder,
                     return;
                 }
 
-                if (_matchOnMetadata.IsEmpty && ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType) && _conditionResult)
-                {
-                    // Perf optimization: If the Remove operation references itself (e.g. <I Remove="@(I)"/>)
-                    // then all items are removed and matching is not necessary
-                    listBuilder.Clear();
-                    return;
-                }
-
-                // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
                 if (_matchOnMetadata.IsEmpty)
                 {
-                    listBuilder.RemoveMatchingItems(_itemSpec);
+                    if (ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType))
+                    {
+                        // Perf optimization: If the Remove operation references itself (e.g. <I Remove="@(I)"/>)
+                        // then all items are removed and matching is not necessary
+                        listBuilder.Clear();
+                        return;
+                    }
+
+                    // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
+                    IList<string> matches = _itemSpec.IntersectsWith(listBuilder.Dictionary);
+                    listBuilder.RemoveAll(matches);
                 }
                 else
                 {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index aa8d3ae1dc0..f89fc770232 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -265,6 +265,7 @@
     <Compile Include="Evaluation\LazyItemEvaluator.ItemFactoryWrapper.cs" />
     <Compile Include="Evaluation\LazyItemEvaluator.RemoveOperation.cs" />
     <Compile Include="Evaluation\LazyItemEvaluator.OrderedItemDataCollection.cs" />
+    <Compile Include="Evaluation\ItemDataCollectionValue.cs" />
     <Compile Include="Evaluation\MetadataReference.cs" />
     <Compile Include="Graph\ProjectGraphEntryPoint.cs" />
     <Compile Include="Graph\ProjectGraph.cs" />
