diff --git a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
index 4be84f14473..0da144267c5 100644
--- a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
+++ b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
@@ -977,53 +977,73 @@ private static void VerifyTaskFinished(TaskFinishedEventArgs genericEvent, TaskF
 
 
         [Fact]
-        public void TestTelemetryEventArgs()
+        public void TestTelemetryEventArgs_AllProperties()
         {
             // Test using reasonable values
             TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = "Good", Properties = new Dictionary<string, string> { { "Key", "Value" } } };
             genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);
 
-            // Serialize
-            genericEvent.WriteToStream(_writer);
-            long streamWriteEndPosition = _stream.Position;
+            TelemetryEventArgs newGenericEvent = RoundTrip(genericEvent);
 
-            // Deserialize and Verify
-            _stream.Position = 0;
-            TelemetryEventArgs newGenericEvent = new TelemetryEventArgs();
-            newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
-            _stream.Position.ShouldBe(streamWriteEndPosition); // "Stream End Positions Should Match"
             VerifyGenericEventArg(genericEvent, newGenericEvent);
             VerifyTelemetryEvent(genericEvent, newGenericEvent);
+        }
+
+        [Fact]
+        public void TestTelemetryEventArgs_NullProperties()
+        {
+            // Test using reasonable values
+            TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = "Good", Properties = null };
+            genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);
 
+            TelemetryEventArgs newGenericEvent = RoundTrip(genericEvent);
+
+            // quirk - the properties dict is initialized to an empty dictionary by the default constructor, so it's not _really_ round-trippable.
+            // so we modify the source event for easier comparison here.
+            genericEvent.Properties = new Dictionary<string, string>();
+
+            VerifyGenericEventArg(genericEvent, newGenericEvent);
+            VerifyTelemetryEvent(genericEvent, newGenericEvent);
+        }
+
+        [Fact]
+        public void TestTelemetryEventArgs_NullEventName()
+        {
             // Test using null event name
-            _stream.Position = 0;
-            genericEvent = new TelemetryEventArgs { EventName = null, Properties = new Dictionary<string, string> { { "Key", "Value" } } };
-            // Serialize
-            genericEvent.WriteToStream(_writer);
-            streamWriteEndPosition = _stream.Position;
+            TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = null, Properties = new Dictionary<string, string> { { "Key", "Value" } } };
+            genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);
+
+            TelemetryEventArgs newGenericEvent = RoundTrip(genericEvent);
 
-            // Deserialize and Verify
-            _stream.Position = 0;
-            newGenericEvent = new TelemetryEventArgs();
-            newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
-            _stream.Position.ShouldBe(streamWriteEndPosition); // "Stream End Positions Should Match"
             VerifyGenericEventArg(genericEvent, newGenericEvent);
             VerifyTelemetryEvent(genericEvent, newGenericEvent);
+        }
 
+        [Fact]
+        public void TestTelemetryEventArgs_NullPropertyValue()
+        {
             // Test using null property value name
+            TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = "Good", Properties = new Dictionary<string, string> { { "Key", null } } };
+            genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);
+
+            TelemetryEventArgs newGenericEvent = RoundTrip(genericEvent);
+
+            VerifyGenericEventArg(genericEvent, newGenericEvent);
+            VerifyTelemetryEvent(genericEvent, newGenericEvent);
+        }
+
+        private T RoundTrip<T>(T original)
+            where T : BuildEventArgs, new()
+        {
             _stream.Position = 0;
-            genericEvent = new TelemetryEventArgs { EventName = "Good", Properties = new Dictionary<string, string> { { "Key", null } } };
-            // Serialize
-            genericEvent.WriteToStream(_writer);
-            streamWriteEndPosition = _stream.Position;
+            original.WriteToStream(_writer);
+            long streamWriteEndPosition = _stream.Position;
 
-            // Deserialize and Verify
             _stream.Position = 0;
-            newGenericEvent = new TelemetryEventArgs();
-            newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
+            var actual = new T();
+            actual.CreateFromStream(_reader, _eventArgVersion);
             _stream.Position.ShouldBe(streamWriteEndPosition); // "Stream End Positions Should Match"
-            VerifyGenericEventArg(genericEvent, newGenericEvent);
-            VerifyTelemetryEvent(genericEvent, newGenericEvent);
+            return actual;
         }
 
         private static void VerifyTelemetryEvent(TelemetryEventArgs expected, TelemetryEventArgs actual)
diff --git a/src/Framework/TelemetryEventArgs.cs b/src/Framework/TelemetryEventArgs.cs
index 37fdcf0589c..d3d57e9c5e5 100644
--- a/src/Framework/TelemetryEventArgs.cs
+++ b/src/Framework/TelemetryEventArgs.cs
@@ -6,8 +6,6 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -19,12 +17,12 @@ public sealed class TelemetryEventArgs : BuildEventArgs
         /// <summary>
         /// Gets or sets the name of the event.
         /// </summary>
-        public string EventName { get; set; }
+        public string? EventName { get; set; }
 
         /// <summary>
         /// Gets or sets a list of properties associated with the event.
         /// </summary>
-        public IDictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();
+        public IDictionary<string, string?> Properties { get; set; } = new Dictionary<string, string?>();
 
         internal override void WriteToStream(BinaryWriter writer)
         {
@@ -34,6 +32,11 @@ internal override void WriteToStream(BinaryWriter writer)
             int count = Properties?.Count ?? 0;
             writer.Write7BitEncodedInt(count);
 
+            if (Properties == null)
+            {
+                return;
+            }
+
             foreach (var kvp in Properties)
             {
                 writer.Write(kvp.Key);
@@ -50,7 +53,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             for (int i = 0; i < count; i++)
             {
                 string key = reader.ReadString();
-                string value = reader.ReadOptionalString();
+                string? value = reader.ReadOptionalString();
                 Properties.Add(key, value);
             }
         }
