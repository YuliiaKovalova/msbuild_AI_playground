diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index 015e2e5be64..6b8021c1ec9 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -269,7 +269,7 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                 }
                 else if (eventArgs is BuildErrorEventArgs)
                 {
-                    BuildErrorEventArgs e = (BuildErrorEventArgs) eventArgs;
+                    var e = (BuildErrorEventArgs) eventArgs;
 
                     string logMessage = string.Format(
                         "{0}({1},{2}): {3} error {4}: {5}",
@@ -288,8 +288,7 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                 else
                 {
                     // Log the message unless we are a build finished event and logBuildFinished is set to false.
-                    bool logMessage = !(eventArgs is BuildFinishedEventArgs) ||
-                                      (eventArgs is BuildFinishedEventArgs && LogBuildFinished);
+                    bool logMessage = !(eventArgs is BuildFinishedEventArgs) || LogBuildFinished;
                     if (logMessage)
                     {
                         _fullLog.AppendLine(eventArgs.Message);
@@ -365,12 +364,9 @@ private static ResourceManager EngineResourceManager
         {
             get
             {
-                if (s_engineResourceManager == null)
-                {
-                     s_engineResourceManager = new ResourceManager("Microsoft.Build.Strings", typeof(ProjectCollection).GetTypeInfo().Assembly);
-                }
-
-                return s_engineResourceManager;
+                return s_engineResourceManager ?? (s_engineResourceManager = new ResourceManager(
+                           "Microsoft.Build.Strings",
+                           typeof(ProjectCollection).GetTypeInfo().Assembly));
             }
         }
 
@@ -400,7 +396,7 @@ internal void AssertLogContains(bool isCaseSensitive, params string[] contains)
         {
             lock (_lockObj)
             {
-                StringReader reader = new StringReader(FullLog);
+                var reader = new StringReader(FullLog);
                 int index = 0;
 
                 string currentLine = reader.ReadLine();
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 6a072e2050f..037b21343d8 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -17,6 +17,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 
@@ -31,7 +32,7 @@ public class Copy_Tests : IDisposable
         /// <summary>
         /// Max copy parallelism to provide to the Copy task.
         /// </summary>
-        public int ParallelismThreadCount { get; set; } = int.MaxValue;
+        private const int ParallelismThreadCount = int.MaxValue;
 
         private const int NoParallelismThreadCount = 1;
 
@@ -1389,16 +1390,7 @@ private void CopyWithDuplicatesUsingFolder(int parallelism)
             Assert.Equal(4, t.CopiedFiles.Length);
 
             // Copy calls to different destinations can come in any order when running in parallel.
-
-            string aPath = Path.Combine(tempPath, "foo", "a.cs");
-            var aCopies = filesActuallyCopied.Where(f => f.Value.Name == aPath).ToList();
-            Assert.Equal(1, aCopies.Count);
-            Assert.Equal(Path.Combine(tempPath, "a.cs"), aCopies[0].Key.Name);
-
-            string bPath = Path.Combine(tempPath, "foo", "b.cs");
-            var bCopies = filesActuallyCopied.Where(f => f.Value.Name == bPath).ToList();
-            Assert.Equal(1, bCopies.Count);
-            Assert.Equal(Path.Combine(tempPath, "b.cs"), bCopies[0].Key.Name);
+            filesActuallyCopied.Select(f => f.Key.Name).ShouldBe(new[] { "a.cs", "b.cs" }, ignoreOrder: true);
 
             ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
         }
@@ -1474,7 +1466,6 @@ private void CopyWithDuplicatesUsingFiles(int parallelism)
             Assert.Equal(5, t.CopiedFiles.Length);
 
             // Copy calls to different destinations can come in any order when running in parallel.
-
             string xaPath = Path.Combine(tempPath, "xa.cs");
             var xaCopies = filesActuallyCopied.Where(f => f.Value.Name == xaPath).ToList();
             Assert.Equal(3, xaCopies.Count);
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 8b09cc2067e..2b8e10550a1 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -361,7 +361,7 @@ int parallelism
             }
 
             // Track successfully copied subset.
-            List <ITaskItem> destinationFilesSuccessfullyCopied;
+            List<ITaskItem> destinationFilesSuccessfullyCopied;
 
             // Use single-threaded code path when requested or when there is only copy to make
             // (no need to create all the parallel infrastructure for that case).
@@ -482,7 +482,8 @@ private bool CopyParallel(
                 sourceIndices.Add(i);
             }
 
-            var successFlags = new IntPtr[DestinationFiles.Length];  // Lockless flags updated from each thread.
+            // Lockless flags updated from each thread - each needs to be a processor word for atomicity.
+            var successFlags = new IntPtr[DestinationFiles.Length];
             var actionBlockOptions = new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = parallelism };
             var partitionCopyActionBlock = new ActionBlock<List<int>>(
                 async (List<int> partition) =>
@@ -535,8 +536,8 @@ private bool CopyParallel(
                 if (!partitionAccepted)
                 {
                     // Retail assert...
-                    throw new InvalidOperationException(
-                        "BUGCHECK: Failed posting a file copy to an ActionBlock. Should not happen with block at max int capacity");
+                    ErrorUtilities.VerifyThrow(partitionAccepted,
+                        "Failed posting a file copy to an ActionBlock. Should not happen with block at max int capacity.");
                 }
             }
 
