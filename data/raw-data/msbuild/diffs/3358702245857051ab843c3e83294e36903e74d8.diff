diff --git a/MSBuild.sln b/MSBuild.sln
index 01e91980f6a..73d5104b6db 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -70,8 +70,6 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools.UnitTests", "sr
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools.UnitTests.net35", "src\StringTools.UnitTests\StringTools.UnitTests.net35.csproj", "{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}"
 EndProject
-Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Microsoft.Build.UnGAC", "src\Package\Microsoft.Build.UnGAC\Microsoft.Build.UnGAC.csproj", "{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}"
-EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ProjectCachePlugin", "src\Samples\ProjectCachePlugin\ProjectCachePlugin.csproj", "{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}"
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools.Benchmark", "src\StringTools.Benchmark\StringTools.Benchmark.csproj", "{65749C80-47E7-42FE-B441-7A86289D46AA}"
@@ -1182,46 +1180,6 @@ Global
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.Build.0 = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.ActiveCfg = Debug|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.Build.0 = Debug|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.Build.0 = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|Any CPU.Build.0 = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|ARM64.ActiveCfg = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|ARM64.Build.0 = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.ActiveCfg = Release|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.Build.0 = Release|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.ActiveCfg = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.Build.0 = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1357,7 +1315,6 @@ Global
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA} = {0AC7F677-AD87-48C8-A51C-008A68136929}
 		{16DBDF17-3E0E-4140-989A-B42638126A40} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943} = {760FF85D-8BEB-4992-8095-A9678F88FD47}
 		{71E59632-D644-491B-AF93-22BC93167C56} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 	EndGlobalSection
diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index ab5d34af0e4..e35da0bde40 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -15,6 +15,7 @@ namespace Microsoft.Build.Exceptions
     /// <summary>
     /// An exception representing the case where the build was aborted by request, as opposed to being
     /// unceremoniously shut down due to another kind of error exception.
+    /// todo
     /// </summary>
     /// <remarks>
     /// This is public because it may be returned in the Exceptions collection of a BuildResult.
diff --git a/src/Build/BackEnd/Shared/CircularDependencyException.cs b/src/Build/BackEnd/Shared/CircularDependencyException.cs
index 08cfb2a4783..049fa9ee40b 100644
--- a/src/Build/BackEnd/Shared/CircularDependencyException.cs
+++ b/src/Build/BackEnd/Shared/CircularDependencyException.cs
@@ -11,6 +11,7 @@ namespace Microsoft.Build.Exceptions
     /// <summary>
     /// An exception representing the case where a BuildRequest has caused a circular project dependency.  This is used to
     /// terminate the request builder which initiated the failure path.
+    /// TODO: this
     /// </summary>
     /// <remarks>
     /// If you add fields to this class, add a custom serialization constructor and override GetObjectData().
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 6e6725c439d..e5afe2801bb 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -110,8 +110,6 @@
     <Compile Include="..\Shared\INodePacket.cs" />
     <Compile Include="..\Shared\INodePacketFactory.cs" />
     <Compile Include="..\Shared\INodePacketHandler.cs" />
-    <Compile Include="..\Shared\ITranslatable.cs" />
-    <Compile Include="..\Shared\ITranslator.cs" />
     <Compile Include="..\Shared\BinaryTranslator.cs" />
     <Compile Include="..\Shared\LogMessagePacketBase.cs" />
     <Compile Include="..\Shared\NodePacketFactory.cs" />
diff --git a/src/Framework/BuildException.cs b/src/Framework/BuildException.cs
new file mode 100644
index 00000000000..db37e292b5f
--- /dev/null
+++ b/src/Framework/BuildException.cs
@@ -0,0 +1,195 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Collections.ObjectModel;
+using System.Linq;
+using System.Runtime.Serialization;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd;
+
+namespace Microsoft.Build.Framework
+{
+
+    public static class TranslatorExtensions
+    {
+        public static Exception ReadException(this ITranslator translator)
+        {
+            // read message
+
+            // read inner exception
+
+            // create new exception
+
+            // populate it
+        }
+
+        public static void WriteException(this ITranslator translator, Exception exception)
+        {
+            Exception? exception = null;
+            translator.Translate(ref exception);
+            return exception!;
+        }
+
+    }
+
+    internal class BuildTranslatedException : Exception
+    {
+        public MyException()
+        {
+        }
+
+        public MyException(string message) : base(message)
+        {
+        }
+
+        public MyException(string message, Exception inner) : base(message, inner)
+        {
+        }
+    }
+
+    public abstract class BuildExceptionBase : Exception
+    {
+        protected BuildExceptionBase()
+        {
+            Exception e;
+            //e.TargetSite
+
+        }
+
+        protected BuildExceptionBase(string? message) : base(message)
+        { }
+
+        protected BuildExceptionBase(string? message, Exception? inner) : base(message, inner)
+        { }
+
+        protected virtual void InitializeCustomState(Dictionary<string, string>? customData)
+        { /* This is it. Override for exceptions with custom state */ }
+
+        protected virtual Dictionary<string, string>? FlushCustomState(Dictionary<string, string>? customData)
+        {
+             /* This is it. Override for exceptions with custom state */
+             return null;
+        }
+    }
+
+    public class BxM : BuildException2
+    {
+        public BxM(string message) : base(message)
+        { }
+    }
+
+    public class MyException2 : Exception
+    {
+        public MyException2()
+        {
+        }
+
+        public MyException2(string message) : base(message)
+        { }
+
+        public MyException2(string message, Exception inner) : base(message, inner)
+        { }
+    }
+
+
+    public abstract class BuildException: Exception, ITranslatable
+    {
+        public const string UnknownTypeName = "Unknown";
+        private string? _deserializedStackTrace;
+
+        public virtual string TypeName => this.GetType().FullName ?? UnknownTypeName;
+
+        protected virtual void TranslateCustomState(ITranslator translator)
+        { /* This is it. Override for exceptions with custom state */ }
+
+        protected virtual void DeepTranslate(ITranslator translator)
+        {
+            if(translator.Mode == TranslationDirection.WriteToStream)
+            {
+                string? stackTrace = this.StackTrace;
+                translator.Translate(ref stackTrace);
+                string? source = this.Source;
+                translator.Translate(ref source);
+                int hresult = this.HResult;
+                translator.Translate(ref hresult);
+                string? helpLink = this.HelpLink;
+                translator.Translate(ref helpLink);
+
+            }
+            else
+            {
+                translator.Translate(ref _deserializedStackTrace);
+                string? source = null;
+                translator.Translate(ref source);
+                this.Source = source;
+                int hresult = 0;
+                translator.Translate(ref hresult);
+                this.HResult = hresult;
+                string? helpLink = null;
+                translator.Translate(ref helpLink);
+                this.HelpLink = helpLink;
+                string? message = null;
+                translator.Translate(ref message);
+                
+            }
+            
+            translator.Translate(ref this.StackTrace);
+        }
+
+        void ITranslatable.Translate(ITranslator translator)
+        {
+            this.DeepTranslate(translator);
+        }
+
+        public override string? StackTrace => _deserializedStackTrace ?? base.StackTrace;
+
+        protected virtual IDictionary CustomData => new Dictionary<string, string>();
+
+        public override IDictionary Data => CustomData;
+    }
+
+    public class MyException : Exception
+    {
+        public MyException()
+        {
+        }
+
+        public MyException(string message) : base(message)
+        {
+        }
+
+        public MyException(string message, Exception inner) : base(message, inner)
+        {
+        }
+
+        public MyException(SerializationInfo si, StreamingContext c): base(si, c)
+        {
+            
+        }
+    }
+
+
+    public class BuildAbortedException: BuildException
+    {
+        public BuildAbortedException()
+        {
+        }
+
+        override void Translate(ITranslator translator)
+        {
+
+        }
+
+         public BuildAbortedException(string? message) : base(message)
+        {
+        }
+
+        public BuildAbortedException(string? message, Exception? innerException) : base(message, innerException)
+        {
+        }
+    }
+}
diff --git a/src/Framework/InternalErrorException.cs b/src/Framework/InternalErrorException.cs
index 86383e09bbb..337aabd3f4d 100644
--- a/src/Framework/InternalErrorException.cs
+++ b/src/Framework/InternalErrorException.cs
@@ -21,6 +21,7 @@ internal sealed class InternalErrorException : Exception
         /// Default constructor.
         /// SHOULD ONLY BE CALLED BY DESERIALIZER.
         /// SUPPLY A MESSAGE INSTEAD.
+        /// todo
         /// </summary>
         internal InternalErrorException() : base()
         {
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index 724e1a38496..fd57bc2874a 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -41,6 +41,9 @@
     <Compile Include="..\Shared\BinaryWriterExtensions.cs">
       <Link>Shared\BinaryWriterExtensions.cs</Link>
     </Compile>
+
+    <Compile Include="..\Shared\ITranslatable.cs" />
+    <Compile Include="..\Shared\ITranslator.cs" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index dfff888c132..7fb997e8dfc 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -127,8 +127,6 @@
     <Compile Include="..\Shared\INodePacketFactory.cs" />
     <Compile Include="..\Shared\NodePacketFactory.cs" />
     <Compile Include="..\Shared\INodePacketHandler.cs" />
-    <Compile Include="..\Shared\ITranslatable.cs" />
-    <Compile Include="..\Shared\ITranslator.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
     <Compile Include="..\Shared\BinaryTranslator.cs" />
     <Compile Include="..\Shared\CommunicationsUtilities.cs" />
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 180e2c0db87..3bb950c7251 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -1108,6 +1108,7 @@ public void TranslateException(ref Exception value)
                 if (value != null)
                 {
                     Console.WriteLine("Translating exception: " + value.GetType());
+                    Debugger.Launch();
 
                     if (value is not InternalErrorException)
                     {
diff --git a/src/Shared/ITranslatable.cs b/src/Shared/ITranslatable.cs
index fdddd566135..aa7d98de3b4 100644
--- a/src/Shared/ITranslatable.cs
+++ b/src/Shared/ITranslatable.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.BackEnd
     /// <summary>
     /// An interface representing an object which may be serialized by the node packet serializer.
     /// </summary>
-    internal interface ITranslatable
+    public interface ITranslatable
     {
         /// <summary>
         /// Reads or writes the packet to the serializer.
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index abe32f8d96f..367d54ff2ab 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -16,25 +16,25 @@ namespace Microsoft.Build.BackEnd
     /// another method.  When invoked, this delegate should return a new object which has been translated appropriately.
     /// </summary>
     /// <typeparam name="T">The type to be translated.</typeparam>
-    internal delegate T NodePacketValueFactory<T>(ITranslator translator);
+    public delegate T NodePacketValueFactory<T>(ITranslator translator);
 
     /// <summary>
     /// Delegate for users that want to translate an arbitrary structure that doesn't implement <see cref="ITranslatable"/> (e.g. translating a complex collection)
     /// </summary>
     /// <param name="translator">the translator</param>
     /// <param name="objectToTranslate">the object to translate</param>
-    internal delegate void ObjectTranslator<T>(ITranslator translator, ref T objectToTranslate);
+    public delegate void ObjectTranslator<T>(ITranslator translator, ref T objectToTranslate);
 
     /// <summary>
     /// This delegate is used to create arbitrary collection types for serialization.
     /// </summary>
     /// <typeparam name="T">The type of dictionary to be created.</typeparam>
-    internal delegate T NodePacketCollectionCreator<T>(int capacity);
+    public delegate T NodePacketCollectionCreator<T>(int capacity);
 
     /// <summary>
     /// The serialization mode.
     /// </summary>
-    internal enum TranslationDirection
+    public enum TranslationDirection
     {
         /// <summary>
         /// Indicates the serializer is operating in write mode.
@@ -64,7 +64,7 @@ internal enum TranslationDirection
     ///    that by ensuring a single Translate method on a given object can handle both reads and
     ///    writes without referencing any field more than once.
     /// </remarks>
-    internal interface ITranslator : IDisposable
+    public interface ITranslator : IDisposable
     {
         /// <summary>
         /// Returns the current serialization mode.
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index c63833c89dd..44a744fb2a5 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -30,8 +30,6 @@
   </ItemGroup>
   <ItemGroup>
     <!-- Binary serialization by ITranslatable -->
-    <Compile Include="..\Shared\ITranslatable.cs" />
-    <Compile Include="..\Shared\ITranslator.cs" />
     <Compile Include="..\Shared\BinaryTranslator.cs" />
     <Compile Include="..\Shared\InterningBinaryReader.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
