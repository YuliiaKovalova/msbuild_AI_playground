diff --git a/eng/Versions.props b/eng/Versions.props
index 774ac3743d4..fb9c50502cc 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -26,8 +26,8 @@
   </PropertyGroup>
   <!-- Production Dependencies -->
   <PropertyGroup>
-    <SystemCollectionsImmutableVersion>6.0.0</SystemCollectionsImmutableVersion>
-    <SystemConfigurationConfigurationManagerVersion>6.0.0</SystemConfigurationConfigurationManagerVersion>
+    <SystemCollectionsImmutableVersion>7.0.0</SystemCollectionsImmutableVersion>
+    <SystemConfigurationConfigurationManagerVersion>7.0.0</SystemConfigurationConfigurationManagerVersion>
     <!--
         Modifying the version of System.Memory is very high impact and causes downstream breaks in third-party tooling that uses the MSBuild API.
         When updating the version of System.Memory file a breaking change here: https://github.com/dotnet/docs/issues/new?assignees=gewarren&labels=breaking-change%2CPri1%2Cdoc-idea&template=breaking-change.yml&title=%5BBreaking+change%5D%3A+
@@ -35,12 +35,12 @@
     -->
     <SystemMemoryVersion>4.5.5</SystemMemoryVersion>
     <SystemNetHttpVersion>4.3.4</SystemNetHttpVersion>
-    <SystemReflectionMetadataLoadContextVersion>6.0.0</SystemReflectionMetadataLoadContextVersion>
-    <SystemReflectionMetadataVersion>6.0.0</SystemReflectionMetadataVersion>
-    <SystemResourcesExtensionsPackageVersion>6.0.0</SystemResourcesExtensionsPackageVersion>
-    <SystemSecurityPermissionsVersion>6.0.0</SystemSecurityPermissionsVersion>
+    <SystemReflectionMetadataLoadContextVersion>7.0.0</SystemReflectionMetadataLoadContextVersion>
+    <SystemReflectionMetadataVersion>7.0.0</SystemReflectionMetadataVersion>
+    <SystemResourcesExtensionsPackageVersion>7.0.0</SystemResourcesExtensionsPackageVersion>
+    <SystemSecurityPermissionsVersion>7.0.0</SystemSecurityPermissionsVersion>
     <SystemSecurityPrincipalWindowsVersion>5.0.0</SystemSecurityPrincipalWindowsVersion>
-    <SystemTextEncodingCodePagesVersion>6.0.0</SystemTextEncodingCodePagesVersion>
+    <SystemTextEncodingCodePagesVersion>7.0.0</SystemTextEncodingCodePagesVersion>
   </PropertyGroup>
   <!-- Toolset Dependencies -->
   <PropertyGroup>
@@ -49,13 +49,13 @@
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
     <MicrosoftCodeAnalysisCollectionsVersion>4.2.0-1.22102.8</MicrosoftCodeAnalysisCollectionsVersion>
     <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.23060.6</MicrosoftDotNetXUnitExtensionsVersion>
-    <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
+    <MicrosoftExtensionsDependencyModelVersion>7.0.0</MicrosoftExtensionsDependencyModelVersion>
     <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
     <MicrosoftNetCompilersToolsetVersion>4.5.0-3.23062.15</MicrosoftNetCompilersToolsetVersion>
     <NuGetBuildTasksVersion>6.5.0-preview.3.136</NuGetBuildTasksVersion>
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
-    <SystemTextJsonVersion>6.0.0</SystemTextJsonVersion>
-    <SystemThreadingTasksDataflowVersion>6.0.0</SystemThreadingTasksDataflowVersion>
+    <SystemTextJsonVersion>7.0.0</SystemTextJsonVersion>
+    <SystemThreadingTasksDataflowVersion>7.0.0</SystemThreadingTasksDataflowVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index dc823e73741..cdd69e6ed40 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -34,7 +34,7 @@
     <PackageReference Update="Shouldly" Version="3.0.0" />
     <PackageReference Update="Shouldly" Condition="'$(ShouldlyVersion)' != ''" Version="$(ShouldlyVersion)" />
 
-    <PackageReference Update="System.CodeDom" Version="6.0.0" />
+    <PackageReference Update="System.CodeDom" Version="7.0.0" />
     <PackageReference Update="System.CodeDom" Condition="'$(SystemCodeDomVersion)' != ''" Version="$(SystemCodeDomVersion)" />
 
     <PackageReference Update="System.Private.Uri" Version="4.3.2" />
@@ -43,10 +43,10 @@
     <PackageReference Update="System.Runtime" Version="4.3.1" />
     <PackageReference Update="System.Runtime" Condition="'$(SystemRuntimeVersion)' != ''" Version="$(SystemRuntimeVersion)" />
 
-    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="6.0.1" />
+    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="7.0.0" />
     <PackageReference Update="System.Security.Cryptography.Pkcs" Condition="'$(SystemSecurityCryptographyPkcsVersion)' != ''" Version="$(SystemSecurityCryptographyPkcsVersion)" />
 
-    <PackageReference Update="System.Security.Cryptography.Xml" Version="6.0.1" />
+    <PackageReference Update="System.Security.Cryptography.Xml" Version="7.0.1" />
     <PackageReference Update="System.Security.Cryptography.Xml" Condition="'$(SystemSecurityCryptographyXmlVersion)' != ''" Version="$(SystemSecurityCryptographyXmlVersion)" />
 
     <PackageReference Update="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 555327a9452..50555793ae3 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -11,9 +11,11 @@ namespace Microsoft.Build.Logging.FancyLogger
     internal static class ANSIBuilder
     {
         public static string ANSIRegex = @"\x1b(?:[@-Z\-_]|\[[0-?]*[ -\/]*[@-~]|(?:\]8;;.*?\x1b\\))";
+        // TODO: This should replace ANSIRegex once FancyLogger's API is internal
+        public static Regex ANSIRegexRegex = new Regex(ANSIRegex);
         public static string ANSIRemove(string text)
         {
-            return Regex.Replace(text, ANSIRegex, "");
+            return ANSIRegexRegex.Replace(text, "");
         }
 
         /// <summary>
@@ -22,11 +24,16 @@ public static string ANSIRemove(string text)
         /// <param name="text">String to split.</param>
         /// <param name="position">Number of visible characters to split after.</param>
         /// <returns>Index in <paramref name="text"/> that represents <paramref name="position"/> visible characters.</returns>
+        // TODO: This should be an optional parameter for ANSIBreakpoint(string text, int positioon, int initialPosition = 0)
         public static int ANSIBreakpoint(string text, int position)
+        {
+            return ANSIBreakpoint(text, position, 0);
+        }
+        public static int ANSIBreakpoint(string text, int position, int initialPosition)
         {
             if (position >= text.Length) return text.Length;
             int nonAnsiIndex = 0;
-            Match nextMatch = Regex.Match(text, ANSIRegex);
+            Match nextMatch = ANSIRegexRegex.Match(text, initialPosition);
             int logicalIndex = 0;
             while (logicalIndex < text.Length && nonAnsiIndex != position)
             {
@@ -45,15 +52,16 @@ public static int ANSIBreakpoint(string text, int position)
 
         public static List<string> ANSIWrap(string text, int maxLength)
         {
+            ReadOnlySpan<char> textSpan = text.AsSpan();
             List<string> result = new();
             int breakpoint = ANSIBreakpoint(text, maxLength);
-            while (text.Length > breakpoint)
+            while (textSpan.Length > breakpoint)
             {
-                result.Add(text.Substring(0, breakpoint));
-                text = text.Substring(breakpoint);
-                breakpoint = ANSIBreakpoint(text, maxLength);
+                result.Add(textSpan.Slice(0, breakpoint).ToString());
+                textSpan = textSpan.Slice(breakpoint);
+                breakpoint = ANSIBreakpoint(text, maxLength, breakpoint);
             }
-            result.Add(text);
+            result.Add(textSpan.ToString());
             return result;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index fc36d0c21f6..ff364aecbc8 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -44,11 +45,54 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Cancelled
             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);
+            
+            Task.Run(() =>
+            {
+                Render();
+            });
+        }
+
+        void Render()
+        {
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine(string.Empty);
+            // First render
             FancyLoggerBuffer.Render();
+            int i = 0;
+            // Rerender periodically
+            while (!FancyLoggerBuffer.IsTerminated)
+            {
+                i++;
+                // Delay by 1/60 seconds
+                // Use task delay to avoid blocking the task, so that keyboard input is listened continously
+                Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
+                {
+                    // Rerender projects only when needed
+                    foreach (var project in projects) project.Value.Log();
+                    // Rerender buffer
+                    FancyLoggerBuffer.Render();
+                });
+                // Handle keyboard input
+                if (Console.KeyAvailable)
+                {
+                    ConsoleKey key = Console.ReadKey().Key;
+                    switch (key)
+                    {
+                        case ConsoleKey.UpArrow:
+                            if (FancyLoggerBuffer.TopLineIndex > 0) FancyLoggerBuffer.TopLineIndex--;
+                            FancyLoggerBuffer.ShouldRerender = true;
+                            break;
+                        case ConsoleKey.DownArrow:
+                            FancyLoggerBuffer.TopLineIndex++;
+                            FancyLoggerBuffer.ShouldRerender = true;
+                            break;
+                        default:
+                            break;
+                    }
+                }
+            }
         }
 
         // Build
@@ -72,7 +116,7 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
             projects[id] = node;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
@@ -83,7 +127,7 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
             // Update line
             node.Finished = true;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         // Target
@@ -95,7 +139,7 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             // Update
             node.AddTarget(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
@@ -106,7 +150,7 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
             // Update
             node.FinishedTargets++;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         // Task
@@ -119,7 +163,7 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             node.AddTask(e);
             existingTasks++;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
@@ -137,7 +181,7 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             // Update
             node.AddMessage(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
@@ -148,7 +192,7 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
             // Update
             node.AddWarning(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
@@ -158,7 +202,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
             // Update
             node.AddError(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 26e8b305357..6ad3e657818 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -6,7 +6,6 @@
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
-using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
@@ -26,6 +25,8 @@ public string Text
                 _text = value;
                 if (ShouldWrapLines) WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
                 else WrappedText = new List<string> { value };
+                // Buffer should rerender
+                FancyLoggerBuffer.ShouldRerender = true;
             }
         }
 
@@ -53,51 +54,22 @@ public class FancyLoggerBuffer
         private static List<FancyLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
-        private static bool AutoScrollEnabled = true;
-        private static bool IsTerminated = false;
-        public static void Initialize()
+        internal static bool IsTerminated = false;
+        internal static bool ShouldRerender = true;
+        internal static int ScrollableAreaHeight
         {
-
-            Task.Run(() =>
+            get
             {
-                // Configure buffer, encoding and cursor
-                Console.OutputEncoding = Encoding.UTF8;
-                Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
-                Console.Write(ANSIBuilder.Cursor.Invisible());
-
-                // Counter for delaying render
-                int i = 0;
-
-                // Execute while the buffer is active
-                while (!IsTerminated)
-                {
-                    // Delay by 1/60 seconds
-                    i++;
-                    Task.Delay((i/60) * 1_000).ContinueWith((t) =>
-                    {
-                        Render();
-                    });
-                    if (Console.KeyAvailable)
-                    { 
-                        // Handle keyboard input
-                        ConsoleKey key = Console.ReadKey().Key;
-                        switch (key)
-                        {
-                            case ConsoleKey.UpArrow:
-                                if (TopLineIndex > 0) TopLineIndex--;
-                                break;
-                            case ConsoleKey.DownArrow:
-                                TopLineIndex++;
-                                break;
-                            case ConsoleKey.Spacebar:
-                                AutoScrollEnabled = !AutoScrollEnabled;
-                                break;
-                            default:
-                                break;
-                        }
-                    }
-                }
-            });
+                // Height of the buffer -3 (titlebar, footer, and footer line)
+                return Console.BufferHeight - 3;
+            }
+        }
+        public static void Initialize()
+        {
+            // Configure buffer, encoding and cursor
+            Console.OutputEncoding = Encoding.UTF8;
+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+            Console.Write(ANSIBuilder.Cursor.Invisible());
         }
 
         public static void Terminate()
@@ -117,7 +89,8 @@ public static void Terminate()
         #region Rendering
         public static void Render()
         {
-            if (IsTerminated) return;
+            if (IsTerminated || !ShouldRerender) return;
+            ShouldRerender = false;
             Console.Write(
                 // Write header
                 ANSIBuilder.Cursor.Home() +
@@ -130,31 +103,38 @@ public static void Render()
             if (Lines.Count == 0) return;
 
             // Iterate over lines and display on terminal
-            // TODO: Delimit range to improve performance 
+            string contents = string.Empty;
             int accumulatedLineCount = 0;
+            int lineIndex = 0;
             foreach (FancyLoggerBufferLine line in Lines)
             {
+                // Continue if accum line count + next lines < scrolling area
+                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) {
+                    accumulatedLineCount += line.WrappedText.Count;
+                    continue;
+                }
+                // Break if exceeds scrolling area
+                if (accumulatedLineCount - TopLineIndex > ScrollableAreaHeight) break;
                 foreach (string s in line.WrappedText) {
                     // Get line index relative to scroll area
-                    int lineIndex = accumulatedLineCount - TopLineIndex;
+                    lineIndex = accumulatedLineCount - TopLineIndex;
                     // Print if line in scrolling area
-                    if (lineIndex >= 0 && lineIndex < Console.BufferHeight - 3)
-                    {
-                        Console.Write(ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s);
-                    }
+                    if (lineIndex >= 0 && lineIndex < ScrollableAreaHeight) contents += ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s;
                     accumulatedLineCount++;
                 }
             }
+            // Iterate for the rest of the screen
+            for (int i = lineIndex + 1; i < ScrollableAreaHeight; i++)
+            {
+                contents += ANSIBuilder.Cursor.Position(i + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd();
+            }
+            Console.Write(contents);
         }
         #endregion
         #region Line identification
         public static int GetLineIndexById(int lineId)
         {
-            for (int i = 0; i < Lines.Count; i++)
-            {
-                if (Lines[i].Id == lineId) return i;
-            }
-            return -1;
+            return Lines.FindIndex(x => x.Id == lineId);
         }
 
         public static FancyLoggerBufferLine? GetLineById(int lineId)
@@ -190,7 +170,6 @@ public static int GetLineIndexById(int lineId)
             {
                 Lines.Add(line);
             }
-            // TODO: Handle autoscrolling
             return line;
         }
 
@@ -209,15 +188,10 @@ public static int GetLineIndexById(int lineId)
         }
 
         // Update line
+        // TODO: Remove. Use line.Text instead
         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
         {
-            // Get line
-            FancyLoggerBufferLine? line = GetLineById(lineId);
-            if (line == null) return null;
-            line.Text = text;
-            // Return
-            return line;
-            // TODO: Handle autoscrolling
+            return null;
         }
 
         // Delete line
@@ -226,11 +200,9 @@ public static void DeleteLine(int lineId)
             // Get line index
             int lineIndex = GetLineIndexById(lineId);
             if (lineIndex == -1) return;
-            // Save top line
-            int topLineId = Lines[TopLineIndex].Id;
             // Delete
             Lines.RemoveAt(lineIndex);
-            // TODO: Handle autoscrolling
+            ShouldRerender = true;
         }
         #endregion
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 6474a615081..765c295fd00 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -86,10 +86,11 @@ public string ToANSIString()
             }
         }
 
+        // TODO: Rename to Log after FancyLogger's API becomes internal
         public void Log()
         {
             if (Line == null) return;
-            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ToANSIString()}");
+            Line.Text = $"    └── {ToANSIString()}";
         }
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 989a2b4585d..831732d7def 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -39,6 +39,8 @@ private static string GetUnambiguousPath(string path)
         public int MessageCount = 0;
         public int WarningCount = 0;
         public int ErrorCount = 0;
+        // Bool if node should rerender
+        internal bool ShouldRerender = true;
         public FancyLoggerProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
@@ -78,38 +80,40 @@ public string ToANSIString()
             return icon + " " + ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), color) + " " + ANSIBuilder.Formatting.Inverse(TargetFramework);
         }
 
+        // TODO: Rename to Render() after FancyLogger's API becomes internal
         public void Log()
         {
+            if (!ShouldRerender) return;
+            ShouldRerender = false;
             // Project details
             string lineContents = ANSIBuilder.Alignment.SpaceBetween(ToANSIString(), $"({MessageCount} ℹ️, {WarningCount} ⚠️, {ErrorCount} ❌)", Console.BufferWidth - 1);
             // Create or update line
-            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
-            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);
+            if (Line is null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
+            else Line.Text = lineContents;
 
             // For finished projects
             if (Finished)
             {
-                if (CurrentTargetLine != null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                if (CurrentTargetLine is not null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
                 foreach (FancyLoggerMessageNode node in AdditionalDetails.ToList())
                 {
                     // Only delete high priority messages
                     if (node.Type != FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                    if (node.Line != null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
-                    // AdditionalDetails.Remove(node);
+                    if (node.Line is not null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
                 }
             }
 
             // Current target details
-            if (CurrentTargetNode == null) return;
+            if (CurrentTargetNode is null) return;
             string currentTargetLineContents = $"    └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
-            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
-            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);
+            if (CurrentTargetLine is null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+            else CurrentTargetLine.Text = currentTargetLineContents;
 
             // Messages, warnings and errors
             foreach (FancyLoggerMessageNode node in AdditionalDetails)
             {
                 if (Finished && node.Type == FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                if (node.Line is null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 node.Log();
             }
         }
diff --git a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
index 15a96bb74dc..66c92fac193 100644
--- a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -1303,6 +1303,11 @@ elementFormDefault="qualified">
 
     <xs:element name="VisualStudioVersion" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="MinimumVisualStudioVersion" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
+    <xs:element name="AccelerateBuildsInVisualStudio" type="msb:boolean" substitutionGroup="msb:Property">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="AccelerateBuildsInVisualStudio" _locComment="" -->Indicates whether to enable acceleration when building in Visual Studio (boolean).</xs:documentation>
+        </xs:annotation>
+    </xs:element>
     <xs:element name="AdditionalFileItemNames" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="AllowUnsafeBlocks" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="AnalysisMode" substitutionGroup="msb:Property">
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index 664d8a094c5..37ad6179283 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -56,8 +56,8 @@
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\Microsoft.Bcl.AsyncInterfaces.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\Microsoft.Bcl.AsyncInterfaces.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -78,8 +78,8 @@
         <!-- Pull plugins that reference SCI up to our version in case they depended on our copy of the older version -->
         <dependentAssembly>
           <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Collections.Immutable.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Collections.Immutable.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
@@ -93,18 +93,18 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Reflection.Metadata" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Reflection.Metadata.dll" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Reflection.Metadata.dll" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Reflection.MetadataLoadContext" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Reflection.MetadataLoadContext.dll" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Reflection.MetadataLoadContext.dll" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Resources.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Resources.Extensions.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Resources.Extensions.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -113,18 +113,18 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Text.Encodings.Web.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Text.Encodings.Web.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Text.Json.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Text.Json.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Dataflow" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
-          <codeBase version="6.0.0.0" href="..\System.Threading.Tasks.Dataflow.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
+          <codeBase version="7.0.0.0" href="..\System.Threading.Tasks.Dataflow.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index 8864b5931da..195274749e3 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -41,7 +41,7 @@
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -58,7 +58,7 @@
         <!-- Pull plugins that reference SCI up to our version in case they depended on our copy of the older version -->
         <dependentAssembly>
           <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
@@ -70,15 +70,15 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Reflection.Metadata" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Reflection.MetadataLoadContext" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Resources.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -86,15 +86,15 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Dataflow" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
diff --git a/src/Tasks/System.Resources.Extensions.pkgdef b/src/Tasks/System.Resources.Extensions.pkgdef
index 6c5ef517c6e..9315270511f 100644
--- a/src/Tasks/System.Resources.Extensions.pkgdef
+++ b/src/Tasks/System.Resources.Extensions.pkgdef
@@ -4,4 +4,4 @@
 "publicKeyToken"="cc7b13ffcd2ddd51"
 "culture"="neutral"
 "oldVersion"="0.0.0.0-99.9.9.9"
-"newVersion"="6.0.0.0"
+"newVersion"="7.0.0.0"
