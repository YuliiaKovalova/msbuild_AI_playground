diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index 659ce98e4bc..8f3f8268c55 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -9,14 +9,13 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Definition;
-using Microsoft.Build.Engine.UnitTests;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
 using Shouldly;
 using Xunit;
-using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
@@ -131,7 +130,6 @@ public void SdkImportsAreInImportList(string projectFormatString, bool expectImp
             ResolvedImport initialResolvedImport = project.Imports[0];
             Assert.Equal(_sdkPropsPath, initialResolvedImport.ImportedProject.FullPath);
 
-
             ResolvedImport finalResolvedImport = project.Imports[1];
             Assert.Equal(_sdkTargetsPath, finalResolvedImport.ImportedProject.FullPath);
 
@@ -139,6 +137,10 @@ public void SdkImportsAreInImportList(string projectFormatString, bool expectImp
             VerifyPropertyFromImplicitImport(project, "FinalImportProperty", _sdkTargetsPath, "World");
 
             // TODO: Check the location of the import, maybe it should point to the location of the SDK attribute?
+            initialResolvedImport.ImportingElement.SdkLocation.ShouldNotBeNull();
+            initialResolvedImport.ImportingElement.SdkLocation.ShouldNotBe(ElementLocation.EmptyLocation);
+            finalResolvedImport.ImportingElement.SdkLocation.ShouldNotBeNull();
+            finalResolvedImport.ImportingElement.SdkLocation.ShouldNotBe(ElementLocation.EmptyLocation);
         }
 
         /// <summary>
@@ -291,7 +293,7 @@ public void ProjectWithInvalidSdkName()
 
                 Project project = new Project(ProjectRootElement.Create(XmlReader.Create(new StringReader(content))));
             });
-            
+
             Assert.Equal("MSB4229", exception.ErrorCode);
         }
 
@@ -469,7 +471,7 @@ public void IgnoreMissingImportsSdkNotFoundDoesNotThrow()
                 loadSettings: ProjectLoadSettings.IgnoreMissingImports);
 
             project.GetPropertyValue("Success").ShouldBe("true");
-            
+
             ProjectImportedEventArgs[] events = logger.BuildMessageEvents.OfType<ProjectImportedEventArgs>().ToArray();
 
             // There are two implicit imports so there should be two logged ProjectImportedEventArgs
@@ -485,53 +487,118 @@ public void IgnoreMissingImportsSdkNotFoundDoesNotThrow()
         }
 
         [Theory]
-        [InlineData(ProjectTemplateSdkAsAttributeWithVersion, "min=1.0.0", null, null, "1.0.0", typeof(ProjectRootElement))]
-        [InlineData(ProjectTemplateSdkAsAttributeWithVersion, "1.0.0", null, "1.0.0", null, typeof(ProjectRootElement))]
-        [InlineData(ProjectTemplateSdkAsElementWithVersion, "2.0.0", "1.0.0", "2.0.0", "1.0.0", typeof(ProjectSdkElement))]
-        public void ImplicitImportsShouldHaveParsedSdkInfo(
-            string projectTemplate,
+        [InlineData("min=1.0.0", null, "1.0.0")]
+        [InlineData("1.0.0", "1.0.0", null)]
+        public void ImplicitProjectSdkImportsShouldHaveParsedSdkInfo(
             string version,
-            string minimumVersion,
             string expectedVersion,
-            string expectedMinimumVersion,
-            Type expectedOriginalElementType)
+            string expectedMinimumVersion)
         {
             _env.SetEnvironmentVariable("MSBuildSDKsPath", _testSdkRoot);
             File.WriteAllText(_sdkPropsPath, _sdkPropsContent);
             File.WriteAllText(_sdkTargetsPath, _sdkTargetsContent);
-            string projectContents = string.Format(projectTemplate, SdkName, _projectInnerContents, version, minimumVersion);
+            var projectContents = string.Format(
+                ProjectTemplateSdkAsAttributeWithVersion,
+                SdkName,
+                _projectInnerContents,
+                version
+            );
+
+            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
+            var project = Project.FromXmlReader(xmlReader, new ProjectOptions());
+
+            var expectedReference = new SdkReference(SdkName, expectedVersion, expectedMinimumVersion);
+            var expectedOrigin = new SdkReferenceOrigin(
+                project.Xml.SdkLocation,
+                project.Xml.SdkLocation,
+                project.Xml.SdkLocation
+            );
 
-            var project = Project.FromXmlReader(XmlReader.Create(new StringReader(projectContents)), new ProjectOptions());
+            var imports = project.Imports;
+
+            imports.Count.ShouldBe(2);
+
+            AssertImplicitImportElement(imports[0], ImplicitImportLocation.Top);
+            AssertImplicitImportElement(imports[1], ImplicitImportLocation.Bottom);
+
+            void AssertImplicitImportElement(ResolvedImport import, ImplicitImportLocation location) =>
+                AssertImplicitImportElement<ProjectRootElement>(expectedReference, expectedOrigin, import, location);
+        }
+
+        [Theory]
+        [InlineData("2.0.0", "1.0.0", "2.0.0", "1.0.0")]
+        public void ImplicitSdkElementImportsShouldHaveParsedSdkInfo(
+            string version,
+            string minimumVersion,
+            string expectedVersion,
+            string expectedMinimumVersion)
+        {
+            _env.SetEnvironmentVariable("MSBuildSDKsPath", _testSdkRoot);
+            File.WriteAllText(_sdkPropsPath, _sdkPropsContent);
+            File.WriteAllText(_sdkTargetsPath, _sdkTargetsContent);
+            var projectContents = string.Format(
+                ProjectTemplateSdkAsElementWithVersion,
+                SdkName,
+                _projectInnerContents,
+                version,
+                minimumVersion
+            );
+
+            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
+            var project = Project.FromXmlReader(xmlReader, new ProjectOptions());
+
+            var projectSdkElement = project.Xml.Children.OfType<ProjectSdkElement>().Single();
+
+            var expectedReference = new SdkReference(SdkName, expectedVersion, expectedMinimumVersion);
+            var expectedOrigin = new SdkReferenceOrigin(
+                projectSdkElement.GetAttributeLocation(XMakeAttributes.sdkName),
+                projectSdkElement.GetAttributeLocation(XMakeAttributes.sdkVersion),
+                projectSdkElement.GetAttributeLocation(XMakeAttributes.sdkMinimumVersion)
+            );
+
+            expectedOrigin.ShouldNotBeNull();
+            expectedOrigin.Name.ShouldNotBeNull();
+            expectedOrigin.Version.ShouldNotBeNull();
+            expectedOrigin.MinimumVersion.ShouldNotBeNull();
 
-            project.Imports.Count.ShouldBe(2);
             var imports = project.Imports;
 
-            for (var i = 0; i < 2; i++)
-            {
-                var import = imports[i];
-                var importingElement = import.ImportingElement;
-                importingElement.Sdk.ShouldBe(SdkName + $"/{version}");
-                importingElement.SdkReference.Name.ShouldBe(SdkName);
-                importingElement.SdkReference.Version.ShouldBe(expectedVersion);
-                importingElement.SdkReference.MinimumVersion.ShouldBe(expectedMinimumVersion);
-                importingElement.SdkLocation.ShouldBe(ElementLocation.EmptyLocation);
-                importingElement.OriginalElement.ShouldBeOfType(expectedOriginalElementType);
+            imports.Count.ShouldBe(2);
 
-                var implicitLocation = i == 0
-                    ? ImplicitImportLocation.Top
-                    : ImplicitImportLocation.Bottom;
+            AssertImplicitImportElement(imports[0], ImplicitImportLocation.Top);
+            AssertImplicitImportElement(imports[1], ImplicitImportLocation.Bottom);
 
-                importingElement.ImplicitImportLocation.ShouldBe(implicitLocation);
+            void AssertImplicitImportElement(ResolvedImport import, ImplicitImportLocation location) =>
+                AssertImplicitImportElement<ProjectSdkElement>(expectedReference, expectedOrigin, import, location);
+        }
 
-                import.SdkResult.SdkReference.ShouldBeSameAs(importingElement.SdkReference);
+        private void AssertImplicitImportElement<T>(SdkReference expectedReference, SdkReferenceOrigin expectedOrigin,
+            ResolvedImport import, ImplicitImportLocation implicitLocation)
+        {
+            var importingElement = import.ImportingElement;
+            importingElement.Sdk.ShouldBe(expectedReference.Name);
 
-                var expectedSdkPath = i == 0
-                    ? _sdkPropsPath
-                    : _sdkTargetsPath;
+            var sdkReference = importingElement.SdkReferenceWithOrigin;
+            sdkReference.ShouldNotBeNull();
+            sdkReference.Value.Reference.ShouldBe(expectedReference);
+            sdkReference.Value.Origin.ShouldBe(expectedOrigin);
 
-                import.SdkResult.Path.ShouldBe(Path.GetDirectoryName(expectedSdkPath));
-                import.SdkResult.Version.ShouldBeEmpty();
-            }
+            importingElement.SdkReference.ShouldNotBeNull();
+            importingElement.SdkReference.ShouldBe(expectedReference);
+            importingElement.SdkLocation.ShouldBe(expectedOrigin.Name);
+            importingElement.OriginalElement.ShouldBeOfType<T>();
+            importingElement.ImplicitImportLocation.ShouldBe(implicitLocation);
+
+            var expectedSdkPath = implicitLocation switch
+            {
+                ImplicitImportLocation.Top => _sdkPropsPath,
+                ImplicitImportLocation.Bottom => _sdkTargetsPath,
+                _ => throw new ArgumentOutOfRangeException(nameof(implicitLocation))
+            };
+
+            import.SdkResult.SdkReference.ShouldBe(expectedReference);
+            import.SdkResult.Path.ShouldBe(Path.GetDirectoryName(expectedSdkPath));
+            import.SdkResult.Version.ShouldBeEmpty();
         }
 
         public void Dispose()
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 158555f4f41..34926338fba 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -177,7 +177,7 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
         }
 
         /// <summary>
-        /// Used for unit tests only.  This is currently only called through reflection in Microsoft.Build.Engine.UnitTests.TransientSdkResolution.CallResetForTests
+        /// Used for unit tests only.
         /// </summary>
         /// <param name="resolverLoader">An <see cref="SdkResolverLoader"/> to use for loading SDK resolvers.</param>
         /// <param name="resolvers">Explicit set of SdkResolvers to use for all SDK resolution.</param>
diff --git a/src/Build/Construction/ISdkReferenceMutableSource.cs b/src/Build/Construction/ISdkReferenceMutableSource.cs
new file mode 100644
index 00000000000..c805dc5f79f
--- /dev/null
+++ b/src/Build/Construction/ISdkReferenceMutableSource.cs
@@ -0,0 +1,15 @@
+#nullable enable
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     Interface for the XML-element-backed <see cref="ISdkReferenceSource" />.
+    /// </summary>
+    internal interface ISdkReferenceMutableSource : ISdkReferenceSource
+    {
+        SdkReferenceSourceFullQuery SdkReferenceFullQuery { get; }
+        SdkReferenceSourceQuery SdkReferenceNameQuery { get; }
+        SdkReferenceSourceQuery SdkReferenceVersionQuery { get; }
+        SdkReferenceSourceQuery SdkReferenceMinimumVersionQuery { get; }
+    }
+}
diff --git a/src/Build/Construction/ISdkReferenceSource.cs b/src/Build/Construction/ISdkReferenceSource.cs
new file mode 100644
index 00000000000..b9323f7f528
--- /dev/null
+++ b/src/Build/Construction/ISdkReferenceSource.cs
@@ -0,0 +1,12 @@
+#nullable enable
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     Represents a source of Microsoft Build SDK references data. Implementing this interface is not enough, you have to
+    ///     also make changes to <see cref="ProjectImportElement" />.
+    /// </summary>
+    internal interface ISdkReferenceSource
+    {
+    }
+}
diff --git a/src/Build/Construction/ProjectImportElement.cs b/src/Build/Construction/ProjectImportElement.cs
index 0260a1eae46..3cf9a359f8d 100644
--- a/src/Build/Construction/ProjectImportElement.cs
+++ b/src/Build/Construction/ProjectImportElement.cs
@@ -1,7 +1,11 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable enable
+
+using System;
 using System.Diagnostics;
+using System.Xml;
 using Microsoft.Build.Framework;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
@@ -9,44 +13,75 @@
 namespace Microsoft.Build.Construction
 {
     /// <summary>
-    /// Initializes a ProjectImportElement instance.
+    ///     Initializes a ProjectImportElement instance.
     /// </summary>
     [DebuggerDisplay("Project={Project} Condition={Condition}")]
-    public class ProjectImportElement : ProjectElement
+    public class ProjectImportElement : ProjectElement, ISdkReferenceMutableSource
     {
-        internal ProjectImportElementLink ImportLink => (ProjectImportElementLink)Link;
+        private static readonly SdkReferenceAttribute NameAttributeFactory =
+            new SdkReferenceAttribute(
+                XMakeAttributes.sdk, "Set Import Sdk {0}"
+            );
+
+        private static readonly SdkReferenceAttribute VersionAttributeFactory =
+            new SdkReferenceAttribute(
+                XMakeAttributes.sdkVersion, "Set Import Version {0}"
+            );
+
+        private static readonly SdkReferenceAttribute MinimumVersionAttributeFactory =
+            new SdkReferenceAttribute(
+                XMakeAttributes.sdkMinimumVersion, "Set Import Minimum Version {0}"
+            );
+
+        internal ProjectImportElementLink? ImportLink => (ProjectImportElementLink) Link;
 
-        private ImplicitImportLocation _implicitImportLocation;
-        private ProjectElement _originalElement;
+        private ImplicitImportLocation _implicitImportLocation = ImplicitImportLocation.None;
+        private ProjectElement? _originalElement;
+        private readonly ISdkReferenceSource _sdkReferenceSource;
 
         /// <summary>
-        /// External projects support
+        ///     External projects support
         /// </summary>
         internal ProjectImportElement(ProjectImportElementLink link)
-            : base(link)
-        {
-        }
+            : base(link) =>
+            _sdkReferenceSource = this;
 
         /// <summary>
-        /// Initialize a parented ProjectImportElement
+        ///     Initialize a parented ProjectImportElement
         /// </summary>
-        internal ProjectImportElement(XmlElementWithLocation xmlElement, ProjectElementContainer parent, ProjectRootElement containingProject, SdkReference sdkReference = null)
-            : base(xmlElement, parent, containingProject)
+        internal ProjectImportElement(XmlElementWithLocation xmlElement, ProjectElementContainer parent,
+                                      ProjectRootElement containingProject)
+            : this(xmlElement, parent, containingProject, null)
         {
             ErrorUtilities.VerifyThrowArgumentNull(parent, nameof(parent));
-            SdkReference = sdkReference;
         }
 
         /// <summary>
-        /// Initialize an unparented ProjectImportElement
+        ///     Initialize an unparented ProjectImportElement
         /// </summary>
         internal ProjectImportElement(XmlElementWithLocation xmlElement, ProjectRootElement containingProject)
-            : base(xmlElement, null, containingProject)
+            : this(xmlElement, null, containingProject, null)
         {
         }
 
+        private ProjectImportElement(XmlElement xmlElement, ProjectElementContainer? parent,
+                                     ProjectRootElement containingProject, ISdkReferenceSource? referenceSource)
+            : base(xmlElement, parent, containingProject)
+        {
+            _sdkReferenceSource = referenceSource ?? this;
+
+            if (referenceSource is SdkReferenceConstantSource source)
+            {
+                SetValue(this, NameAttributeFactory, source.SdkReference.Reference.Name);
+                SetValue(this, VersionAttributeFactory, source.SdkReference.Reference.Version);
+                SetValue(this, MinimumVersionAttributeFactory, source.SdkReference.Reference.MinimumVersion);
+            }
+        }
+
+#nullable restore
+
         /// <summary>
-        /// Gets or sets the Project value. 
+        ///     Gets or sets the Project value.
         /// </summary>
         public string Project
         {
@@ -60,144 +95,341 @@ public string Project
         }
 
         /// <summary>
-        /// Location of the project attribute
+        ///     Location of the project attribute
         /// </summary>
         public ElementLocation ProjectLocation => GetAttributeLocation(XMakeAttributes.project);
 
+#nullable enable
+
         /// <summary>
-        /// Gets or sets the SDK that contains the import.
+        ///     Gets or sets the SDK that contains the import.
         /// </summary>
-        public string Sdk
+        public string? Sdk
         {
-            get => FileUtilities.FixFilePath(GetAttributeValue(XMakeAttributes.sdk));
+            get
+            {
+                switch (_sdkReferenceSource)
+                {
+                    case ISdkReferenceMutableSource mutableSource:
+                        var query = mutableSource.SdkReferenceNameQuery;
+                        return GetValue(query.Element, query.Factory);
+                    case SdkReferenceConstantSource constantSource:
+                        return constantSource.SdkReference.Reference.Name;
+                    default:
+                        throw CreateUnknownSourceException();
+                }
+            }
             set
             {
-                ErrorUtilities.VerifyThrowArgumentLength(value, XMakeAttributes.sdk);
-                if (UpdateSdkReference(name: value, SdkReference?.Version, SdkReference?.MinimumVersion))
+                ErrorUtilities.VerifyThrowArgumentLength(value, nameof(value));
+
+                if (_sdkReferenceSource is ISdkReferenceMutableSource source)
+                {
+                    var query = source.SdkReferenceNameQuery;
+                    Mutate(in query, NameAttributeFactory, value);
+                }
+                else
                 {
-                    SetOrRemoveAttribute(XMakeAttributes.sdk, value, "Set Import Sdk {0}", value);
+                    PushValueFromImmutable(Sdk, value, NameAttributeFactory);
                 }
             }
         }
 
         /// <summary>
-        /// Gets or sets the version associated with this SDK import
+        ///     Gets or sets the version associated with this SDK import
         /// </summary>
-        public string Version
+        public string? Version
         {
-            get => GetAttributeValue(XMakeAttributes.sdkVersion);
+            get
+            {
+                switch (_sdkReferenceSource)
+                {
+                    case ISdkReferenceMutableSource mutableSource:
+                        var query = mutableSource.SdkReferenceVersionQuery;
+                        return GetValue(query.Element, query.Factory);
+                    case SdkReferenceConstantSource constantSource:
+                        return constantSource.SdkReference.Reference.Version;
+                    default:
+                        throw CreateUnknownSourceException();
+                }
+            }
             set
             {
-                if (UpdateSdkReference(SdkReference?.Name, version: value, SdkReference?.MinimumVersion))
+                if (_sdkReferenceSource is ISdkReferenceMutableSource source)
+                {
+                    var query = source.SdkReferenceVersionQuery;
+                    Mutate(in query, VersionAttributeFactory, value);
+                }
+                else
                 {
-                    SetOrRemoveAttribute(XMakeAttributes.sdkVersion, value, "Set Import Version {0}", value);
+                    PushValueFromImmutable(Version, value, VersionAttributeFactory);
                 }
             }
         }
 
         /// <summary>
-        /// Gets or sets the minimum SDK version required by this import.
+        ///     Gets or sets the minimum SDK version required by this import.
         /// </summary>
-        public string MinimumVersion
+        public string? MinimumVersion
         {
-            get => GetAttributeValue(XMakeAttributes.sdkMinimumVersion);
+            get
+            {
+                switch (_sdkReferenceSource)
+                {
+                    case ISdkReferenceMutableSource mutableSource:
+                        var query = mutableSource.SdkReferenceMinimumVersionQuery;
+                        return GetValue(query.Element, query.Factory);
+                    case SdkReferenceConstantSource constantSource:
+                        return constantSource.SdkReference.Reference.MinimumVersion;
+                    default:
+                        throw CreateUnknownSourceException();
+                }
+            }
             set
             {
-                if (UpdateSdkReference(SdkReference?.Name, SdkReference?.Version, minimumVersion: value))
+                if (_sdkReferenceSource is ISdkReferenceMutableSource source)
+                {
+                    var query = source.SdkReferenceMinimumVersionQuery;
+                    Mutate(in query, MinimumVersionAttributeFactory, value);
+                }
+                else
                 {
-                    SetOrRemoveAttribute(XMakeAttributes.sdkMinimumVersion, value, "Set Import Minimum Version {0}", value);
+                    PushValueFromImmutable(MinimumVersion, value, MinimumVersionAttributeFactory);
                 }
             }
         }
 
         /// <summary>
-        /// Location of the Sdk attribute
+        ///     Location of the Sdk attribute
         /// </summary>
-        public ElementLocation SdkLocation => GetAttributeLocation(XMakeAttributes.sdk);
+        public ElementLocation? SdkLocation => SdkReferenceOrigin?.Name as ElementLocation;
 
         /// <summary>
-        /// Gets the <see cref="ImplicitImportLocation"/> of the import.  This indicates if the import was implicitly
-        /// added because of the <see cref="ProjectRootElement.Sdk"/> attribute and the location where the project was
-        /// imported.
+        ///     Gets the <see cref="ImplicitImportLocation" /> of the import.  This indicates if the import was implicitly
+        ///     added because of the <see cref="ProjectRootElement.Sdk" /> attribute and the location where the project was
+        ///     imported.
         /// </summary>
-        public ImplicitImportLocation ImplicitImportLocation { get => Link != null ? ImportLink.ImplicitImportLocation : _implicitImportLocation; internal set => _implicitImportLocation = value; }
+        public ImplicitImportLocation ImplicitImportLocation
+        {
+            get => ImportLink?.ImplicitImportLocation ?? _implicitImportLocation;
+            internal set => _implicitImportLocation = value;
+        }
 
         /// <summary>
-        /// If the import is an implicit one (<see cref="ImplicitImportLocation"/> != None) then this element points
-        /// to the original element which generated this implicit import.
+        ///     If the import is an implicit one (<see cref="ImplicitImportLocation" /> != None) then this element points
+        ///     to the original element which generated this implicit import.
         /// </summary>
-        public ProjectElement OriginalElement { get => Link != null ? ImportLink.OriginalElement : _originalElement; internal set => _originalElement = value; }
-
+        public ProjectElement? OriginalElement
+        {
+            get => ImportLink != null ? ImportLink.OriginalElement : _originalElement;
+            internal set => _originalElement = value;
+        }
 
         /// <summary>
-        /// <see cref="Framework.SdkReference"/> if applicable to this import element.
+        ///     <see cref="Framework.SdkReference" /> if applicable to this import element.
         /// </summary>
-        internal SdkReference SdkReference { get; set; }
+        internal SdkReference? SdkReference => _sdkReferenceSource switch
+        {
+            ISdkReferenceMutableSource mutableSource => ComputeSdkReference(mutableSource),
+            SdkReferenceConstantSource constantSource => constantSource.SdkReference.Reference,
+            _ => throw CreateUnknownSourceException()
+        };
+
+        internal SdkReferenceWithOrigin? SdkReferenceWithOrigin => _sdkReferenceSource switch
+        {
+            ISdkReferenceMutableSource mutableSource => ComputeSdkReferenceWithOrigin(mutableSource),
+            SdkReferenceConstantSource constantSource => constantSource.SdkReference,
+            _ => throw CreateUnknownSourceException()
+        };
+
+        private SdkReferenceOrigin? SdkReferenceOrigin => _sdkReferenceSource switch
+        {
+            ISdkReferenceMutableSource mutableSource => ComputeSdkReferenceOrigin(mutableSource),
+            SdkReferenceConstantSource constantSource => constantSource.SdkReference.Origin,
+            _ => throw CreateUnknownSourceException()
+        };
 
         /// <summary>
-        /// Creates an unparented ProjectImportElement, wrapping an unparented XmlElement.
-        /// Validates the project value.
-        /// Caller should then ensure the element is added to a parent
+        ///     Creates an unparented ProjectImportElement, wrapping an unparented XmlElement.
+        ///     Validates the project value.
+        ///     Caller should then ensure the element is added to a parent
         /// </summary>
         internal static ProjectImportElement CreateDisconnected(string project, ProjectRootElement containingProject)
         {
             XmlElementWithLocation element = containingProject.CreateElement(XMakeElements.import);
-            return new ProjectImportElement(element, containingProject) {Project = project};
+            return new ProjectImportElement(element, containingProject)
+            {
+                Project = project
+            };
         }
 
         /// <summary>
-        /// Creates an implicit ProjectImportElement as if it was in the project.
+        ///     Creates an implicit ProjectImportElement as if it was in the project.
         /// </summary>
-        /// <returns></returns>
         internal static ProjectImportElement CreateImplicit(
             string project,
             ProjectRootElement containingProject,
             ImplicitImportLocation implicitImportLocation,
-            SdkReference sdkReference,
+            ISdkReferenceSource? sdkReferenceSource,
             ProjectElement originalElement)
         {
             XmlElementWithLocation element = containingProject.CreateElement(XMakeElements.import);
-            return new ProjectImportElement(element, containingProject)
+            return new ProjectImportElement(element, null, containingProject, sdkReferenceSource)
             {
                 Project = project,
-                Sdk = sdkReference.ToString(),
                 ImplicitImportLocation = implicitImportLocation,
-                SdkReference = sdkReference,
                 OriginalElement = originalElement
             };
         }
 
+#nullable restore
+
+        /// <inheritdoc />
+        internal override void VerifyThrowInvalidOperationAcceptableLocation(ProjectElementContainer parent,
+                                                                             ProjectElement previousSibling,
+                                                                             ProjectElement nextSibling) =>
+            ErrorUtilities.VerifyThrowInvalidOperation(
+                parent is ProjectRootElement || parent is ProjectImportGroupElement,
+                "OM_CannotAcceptParent"
+            );
+
+        /// <inheritdoc />
+        protected override ProjectElement CreateNewInstance(ProjectRootElement owner) =>
+            owner.CreateImportElement(Project);
+
+#nullable enable
+
         /// <summary>
-        /// Overridden to verify that the potential parent and siblings
-        /// are acceptable. Throws InvalidOperationException if they are not.
+        ///     Ensure that the value set on this element is equal to the value from the immutable source.
         /// </summary>
-        internal override void VerifyThrowInvalidOperationAcceptableLocation(ProjectElementContainer parent, ProjectElement previousSibling, ProjectElement nextSibling)
+        /// <param name="current">The current attribute value</param>
+        /// <param name="candidate">The value expected to be set after mutation</param>
+        /// <param name="attribute">The <see cref="SdkReferenceAttribute" /> on which the mutation is performed</param>
+        /// <exception cref="NotSupportedException">Exception thrown when candidate value isn't equal to the current value</exception>
+        // ReSharper disable once ParameterOnlyUsedForPreconditionCheck.Local
+        private void PushValueFromImmutable(string? current, string? candidate, SdkReferenceAttribute attribute)
         {
-            ErrorUtilities.VerifyThrowInvalidOperation(parent is ProjectRootElement || parent is ProjectImportGroupElement, "OM_CannotAcceptParent");
-        }
+            if (!string.Equals(current, candidate))
+                throw CreateImmutableSourceException();
 
-        /// <inheritdoc />
-        protected override ProjectElement CreateNewInstance(ProjectRootElement owner)
-        {
-            return owner.CreateImportElement(Project);
+            SetValue(this, attribute, candidate);
         }
 
         /// <summary>
-        /// Helper method to update the <see cref="SdkReference" /> property if necessary (update only when changed).
+        ///     Apply the attribute mutation, both to the data source and this element.
         /// </summary>
-        /// <returns>True if the <see cref="SdkReference" /> property was updated, otherwise false (no update necessary).</returns>
-        private bool UpdateSdkReference(string name, string version, string minimumVersion)
+        /// <param name="query">The <see cref="ISdkReferenceMutableSource" /> data source context</param>
+        /// <param name="attribute">The <see cref="SdkReferenceAttribute" /> on which the mutation is performed</param>
+        /// <param name="value">The new value to be set</param>
+        private void Mutate(in SdkReferenceSourceQuery query, SdkReferenceAttribute attribute, string? value)
+        {
+            SetValue(query.Element, query.Factory, value);
+
+            if (!ReferenceEquals(query.Element, this))
+                SetValue(this, attribute, value);
+        }
+
+        private static SdkReferenceWithOrigin? ComputeSdkReferenceWithOrigin(ISdkReferenceMutableSource source)
         {
-            SdkReference sdk = new SdkReference(name, version, minimumVersion);
+            var query = source.SdkReferenceFullQuery;
+
+            GetValueLocation(query.Element, query.Sdk, out var name, out var nameLocation);
+
+            if (name == null)
+                return null;
+
+            GetValueLocation(query.Element, query.Version, out var version, out var versionLocation);
+            GetValueLocation(query.Element, query.MinimumVersion,
+                             out var minimumVersion, out var minimumVersionLocation);
+
+            return new SdkReferenceWithOrigin(
+                new SdkReference(name, version, minimumVersion),
+                new SdkReferenceOrigin(nameLocation, versionLocation, minimumVersionLocation)
+            );
+        }
+
+        private static SdkReference? ComputeSdkReference(ISdkReferenceMutableSource source)
+        {
+            var query = source.SdkReferenceFullQuery;
+
+            var name = GetValue(query.Element, query.Sdk);
+
+            if (name == null)
+                return null;
+
+            var version = GetValue(query.Element, query.Version);
+            var minimumVersion = GetValue(query.Element, query.MinimumVersion);
+
+            return new SdkReference(name, version, minimumVersion);
+        }
 
-            if (sdk.Equals(SdkReference))
+        private static SdkReferenceOrigin? ComputeSdkReferenceOrigin(ISdkReferenceMutableSource source)
+        {
+            var query = source.SdkReferenceFullQuery;
+
+            GetValueLocation(query.Element, query.Sdk, out var name, out var nameLocation);
+
+            if (name == null)
+                return null;
+
+            var versionLocation = GetLocation(query.Element, query.Version);
+            var minimumVersionLocation = GetLocation(query.Element, query.MinimumVersion);
+
+            return new SdkReferenceOrigin(nameLocation, versionLocation, minimumVersionLocation);
+        }
+
+        private static ArgumentOutOfRangeException CreateUnknownSourceException() =>
+            new ArgumentOutOfRangeException(nameof(_sdkReferenceSource));
+
+        private static Exception CreateImmutableSourceException() =>
+            new NotSupportedException();
+
+        private static string? GetValue(ProjectElement element, SdkReferenceAttribute factory) =>
+            element.GetAttributeValue(factory.AttributeName, true);
+
+        private static void SetValue(ProjectElement element, SdkReferenceAttribute factory, string? value)
+        {
+            var attributeName = factory.AttributeName;
+
+            if (string.Equals(element.GetAttributeValue(attributeName, true), value))
+                return;
+
+            element.SetOrRemoveAttribute(attributeName, value, factory.ChangeReasonMessage, value);
+        }
+
+        private static IElementLocation? GetLocation(ProjectElement element, SdkReferenceAttribute factory) =>
+            element.GetAttributeLocation(factory.AttributeName);
+
+        private static void GetValueLocation(ProjectElement element, SdkReferenceAttribute factory,
+                                             out string? value, out IElementLocation? location)
+        {
+            var attributeName = factory.AttributeName;
+
+            if (element.Link == null &&
+                element.XmlElement?.GetAttributeNode(attributeName) is XmlAttributeWithLocation attribute)
             {
-                return false;
+                value = attribute.Value;
+                location = attribute.Location;
             }
+            else
+            {
+                value = element.GetAttributeValue(attributeName, true);
+                location = element.GetAttributeLocation(attributeName);
+            }
+        }
 
-            SdkReference = sdk;
+        SdkReferenceSourceQuery ISdkReferenceMutableSource.SdkReferenceNameQuery =>
+            new SdkReferenceSourceQuery(this, NameAttributeFactory);
 
-            return true;
-        }
+        SdkReferenceSourceQuery ISdkReferenceMutableSource.SdkReferenceVersionQuery =>
+            new SdkReferenceSourceQuery(this, VersionAttributeFactory);
+
+        SdkReferenceSourceQuery ISdkReferenceMutableSource.SdkReferenceMinimumVersionQuery =>
+            new SdkReferenceSourceQuery(this, MinimumVersionAttributeFactory);
+
+        SdkReferenceSourceFullQuery ISdkReferenceMutableSource.SdkReferenceFullQuery =>
+            new SdkReferenceSourceFullQuery(
+                this, NameAttributeFactory, VersionAttributeFactory, MinimumVersionAttributeFactory
+            );
     }
 }
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 287b965ab35..53d9bd2bbff 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -1852,53 +1852,60 @@ internal void MarkAsExplicitlyLoaded()
             IsExplicitlyLoaded = true;
         }
 
+#nullable enable
+
         /// <summary>
         /// Creates and returns a list of <see cref="ProjectImportElement"/> nodes which are implicitly
         /// referenced by the Project.
         /// </summary>
         /// <param name="currentProjectOrImport">Current project</param>
-        /// <returns>An <see cref="IEnumerable{SdkReference}"/> containing details of the SDKs referenced by the project.</returns>
+        /// <returns>A <see cref="List{ProjectImportElement}"/> of implicit &lt;Import /&gt; elements for the SDKs referenced by the project.</returns>
         internal List<ProjectImportElement> GetImplicitImportNodes(ProjectRootElement currentProjectOrImport)
         {
             var nodes = new List<ProjectImportElement>();
 
-            string sdkAttribute = Sdk;
+            var sdkAttribute = Sdk;
             if (!string.IsNullOrWhiteSpace(sdkAttribute))
             {
-                foreach (var referencedSdk in ParseSdks(sdkAttribute, SdkLocation))
+                var location = SdkLocation;
+                var origin = new SdkReferenceOrigin(location, location, location);
+
+                foreach (var sdk in sdkAttribute.Split(MSBuildConstants.SemicolonChar).Select(i => i.Trim()))
                 {
-                    nodes.Add(ProjectImportElement.CreateImplicit("Sdk.props", currentProjectOrImport, ImplicitImportLocation.Top, referencedSdk, this));
-                    nodes.Add(ProjectImportElement.CreateImplicit("Sdk.targets", currentProjectOrImport, ImplicitImportLocation.Bottom, referencedSdk, this));
+                    if (!SdkReference.TryParse(sdk, out var reference))
+                    {
+                        ProjectErrorUtilities.ThrowInvalidProject(location, "InvalidSdkFormat", sdkAttribute);
+                        break;
+                    }
+
+                    var sdkReferenceWithOrigin = new SdkReferenceWithOrigin(reference, origin);
+                    AddImplicitImports(new SdkReferenceConstantSource(in sdkReferenceWithOrigin), this);
                 }
             }
 
             foreach (var sdkNode in Children.OfType<ProjectSdkElement>())
-            {
-                var referencedSdk = new SdkReference(
-                    sdkNode.XmlElement.GetAttribute("Name"),
-                    sdkNode.XmlElement.GetAttribute("Version"),
-                    sdkNode.XmlElement.GetAttribute("MinimumVersion"));
-
-                nodes.Add(ProjectImportElement.CreateImplicit("Sdk.props", currentProjectOrImport, ImplicitImportLocation.Top, referencedSdk, sdkNode));
-                nodes.Add(ProjectImportElement.CreateImplicit("Sdk.targets", currentProjectOrImport, ImplicitImportLocation.Bottom, referencedSdk, sdkNode));
-            }
+                AddImplicitImports(sdkNode, sdkNode);
 
             return nodes;
-        }
 
-        private static IEnumerable<SdkReference> ParseSdks(string sdks, IElementLocation sdkLocation)
-        {
-            foreach (string sdk in sdks.Split(MSBuildConstants.SemicolonChar).Select(i => i.Trim()))
+            void AddImplicitImports(ISdkReferenceSource? sdkReferenceSource, ProjectElement originalElement)
             {
-                if (!SdkReference.TryParse(sdk, out SdkReference sdkReference))
-                {
-                    ProjectErrorUtilities.ThrowInvalidProject(sdkLocation, "InvalidSdkFormat", sdks);
-                }
-
-                yield return sdkReference;
+                const string sdkProps = "Sdk.props";
+                const string sdkTargets = "Sdk.targets";
+
+                var props = ProjectImportElement.CreateImplicit(sdkProps, currentProjectOrImport,
+                                                                ImplicitImportLocation.Top,
+                                                                sdkReferenceSource, originalElement);
+                var targets = ProjectImportElement.CreateImplicit(sdkTargets, currentProjectOrImport,
+                                                                  ImplicitImportLocation.Bottom,
+                                                                  sdkReferenceSource, originalElement);
+                nodes.Add(props);
+                nodes.Add(targets);
             }
         }
 
+#nullable restore
+
         /// <summary>
         /// Determines if the specified file is an empty XML file meaning it has no contents, contains only whitespace, or
         /// only an XML declaration.  If the file does not exist, it is not considered empty.
diff --git a/src/Build/Construction/ProjectSdkElement.cs b/src/Build/Construction/ProjectSdkElement.cs
index e95d8ea5b12..24034ea833d 100644
--- a/src/Build/Construction/ProjectSdkElement.cs
+++ b/src/Build/Construction/ProjectSdkElement.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 //-----------------------------------------------------------------------
 
+#nullable enable
+
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
@@ -10,8 +12,23 @@ namespace Microsoft.Build.Construction
     /// <summary>
     ///     ProjectSdkElement represents the Sdk element within the MSBuild project.
     /// </summary>
-    public class ProjectSdkElement : ProjectElementContainer
+    public class ProjectSdkElement : ProjectElementContainer, ISdkReferenceMutableSource
     {
+        private static readonly SdkReferenceAttribute NameAttributeFactory =
+            new SdkReferenceAttribute(
+                XMakeAttributes.sdkName, "Set SDK Name to {0}"
+            );
+
+        private static readonly SdkReferenceAttribute VersionAttributeFactory =
+            new SdkReferenceAttribute(
+                XMakeAttributes.sdkVersion, "Set SDK Version to {0}"
+            );
+
+        private static readonly SdkReferenceAttribute MinimumVersionAttributeFactory =
+            new SdkReferenceAttribute(
+                XMakeAttributes.sdkMinimumVersion, "Set SDK MinimumVersion to {0}"
+            );
+
         /// <summary>
         /// External projects support
         /// </summary>
@@ -35,45 +52,46 @@ internal ProjectSdkElement(XmlElementWithLocation xmlElement, ProjectRootElement
         /// </summary>
         private ProjectSdkElement(XmlElementWithLocation xmlElement, ProjectRootElement containingProject)
             : base(xmlElement, null, containingProject)
-        { }
+        {
+        }
 
         /// <summary>
         /// Gets or sets the name of the SDK.
         /// </summary>
         public string Name
         {
-            get => GetAttributeValue(XMakeAttributes.sdkName);
+            get => GetAttributeValue(XMakeAttributes.sdkName, true);
             set
             {
                 ErrorUtilities.VerifyThrowArgumentLength(value, XMakeAttributes.sdkName);
-                SetOrRemoveAttribute(XMakeAttributes.sdkName, value, $"Set SDK Name to {value}", XMakeAttributes.sdkName);
+                SetOrRemoveAttribute(XMakeAttributes.sdkName, value,
+                                     NameAttributeFactory.ChangeReasonMessage, XMakeAttributes.sdkName);
             }
         }
 
         /// <summary>
         /// Gets or sets the version of the SDK.
         /// </summary>
-        public string Version
+        public string? Version
         {
-            get => GetAttributeValue(XMakeAttributes.sdkVersion);
-            set
-            {
-                SetOrRemoveAttribute(XMakeAttributes.sdkVersion, value, $"Set SDK Version to {value}", XMakeAttributes.sdkVersion);
-            }
+            get => GetAttributeValue(XMakeAttributes.sdkVersion, true);
+            set => SetOrRemoveAttribute(XMakeAttributes.sdkVersion, value,
+                                        VersionAttributeFactory.ChangeReasonMessage, XMakeAttributes.sdkVersion);
         }
 
         /// <summary>
         /// Gets or sets the minimum version of the SDK required to build the project.
         /// </summary>
-        public string MinimumVersion
+        public string? MinimumVersion
         {
-            get => GetAttributeValue(XMakeAttributes.sdkMinimumVersion);
-            set
-            {
-                SetOrRemoveAttribute(XMakeAttributes.sdkMinimumVersion, value, $"Set SDK MinimumVersion to {value}", XMakeAttributes.sdkMinimumVersion);
-            }
+            get => GetAttributeValue(XMakeAttributes.sdkMinimumVersion, true);
+            set => SetOrRemoveAttribute(XMakeAttributes.sdkMinimumVersion, value,
+                                        MinimumVersionAttributeFactory.ChangeReasonMessage,
+                                        XMakeAttributes.sdkMinimumVersion);
         }
 
+#nullable restore
+
         /// <inheritdoc />
         internal override void VerifyThrowInvalidOperationAcceptableLocation(ProjectElementContainer parent,
             ProjectElement previousSibling, ProjectElement nextSibling)
@@ -87,6 +105,8 @@ protected override ProjectElement CreateNewInstance(ProjectRootElement owner)
             return owner.CreateProjectSdkElement(Name, Version);
         }
 
+#nullable enable
+
         /// <summary>
         ///     Creates a non-parented ProjectSdkElement, wrapping an non-parented XmlElement.
         ///     Caller should then ensure the element is added to a parent
@@ -96,13 +116,25 @@ internal static ProjectSdkElement CreateDisconnected(string sdkName, string sdkV
         {
             var element = containingProject.CreateElement(XMakeElements.sdk);
 
-            var sdkElement = new ProjectSdkElement(element, containingProject)
+            return new ProjectSdkElement(element, containingProject)
             {
                 Name = sdkName,
                 Version = sdkVersion
             };
-
-            return sdkElement;
         }
+
+        SdkReferenceSourceQuery ISdkReferenceMutableSource.SdkReferenceNameQuery =>
+            new SdkReferenceSourceQuery(this, NameAttributeFactory);
+
+        SdkReferenceSourceQuery ISdkReferenceMutableSource.SdkReferenceVersionQuery =>
+            new SdkReferenceSourceQuery(this, VersionAttributeFactory);
+
+        SdkReferenceSourceQuery ISdkReferenceMutableSource.SdkReferenceMinimumVersionQuery =>
+            new SdkReferenceSourceQuery(this, MinimumVersionAttributeFactory);
+
+        SdkReferenceSourceFullQuery ISdkReferenceMutableSource.SdkReferenceFullQuery =>
+            new SdkReferenceSourceFullQuery(
+                this, NameAttributeFactory, VersionAttributeFactory, MinimumVersionAttributeFactory
+            );
     }
 }
diff --git a/src/Build/Construction/SdkReferenceAttribute.cs b/src/Build/Construction/SdkReferenceAttribute.cs
new file mode 100644
index 00000000000..9a59eee70a9
--- /dev/null
+++ b/src/Build/Construction/SdkReferenceAttribute.cs
@@ -0,0 +1,19 @@
+﻿#nullable enable
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     <see cref="ProjectImportElement" /> implementation detail.
+    /// </summary>
+    internal sealed class SdkReferenceAttribute
+    {
+        public readonly string AttributeName;
+        public readonly string ChangeReasonMessage;
+
+        public SdkReferenceAttribute(string attributeName, string changeReasonMessage)
+        {
+            AttributeName = attributeName;
+            ChangeReasonMessage = changeReasonMessage;
+        }
+    }
+}
diff --git a/src/Build/Construction/SdkReferenceConstantSource.cs b/src/Build/Construction/SdkReferenceConstantSource.cs
new file mode 100644
index 00000000000..498d5c6b5f2
--- /dev/null
+++ b/src/Build/Construction/SdkReferenceConstantSource.cs
@@ -0,0 +1,16 @@
+#nullable enable
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     <see cref="ProjectImportElement" /> implementation detail for the &lt;Project /&gt; "Sdk" attribute.
+    /// </summary>
+    internal sealed class SdkReferenceConstantSource : ISdkReferenceSource
+    {
+        private readonly SdkReferenceWithOrigin _sdkReference;
+
+        public SdkReferenceConstantSource(in SdkReferenceWithOrigin source) => _sdkReference = source;
+
+        public ref readonly SdkReferenceWithOrigin SdkReference => ref _sdkReference;
+    }
+}
diff --git a/src/Build/Construction/SdkReferenceOrigin.cs b/src/Build/Construction/SdkReferenceOrigin.cs
new file mode 100644
index 00000000000..4295aed39cd
--- /dev/null
+++ b/src/Build/Construction/SdkReferenceOrigin.cs
@@ -0,0 +1,61 @@
+#nullable enable
+
+using System;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     Storage for the XML attributes locations for the matching <see cref="SdkReference" /> values.
+    /// </summary>
+    internal sealed class SdkReferenceOrigin : IEquatable<SdkReferenceOrigin>
+    {
+        public readonly IElementLocation? MinimumVersion;
+        public readonly IElementLocation? Name;
+        public readonly IElementLocation? Version;
+
+        public SdkReferenceOrigin(IElementLocation? name, IElementLocation? version, IElementLocation? minimumVersion)
+        {
+            Name = name;
+            Version = version;
+            MinimumVersion = minimumVersion;
+        }
+
+        /// <inheritdoc />
+        public bool Equals(SdkReferenceOrigin? other)
+        {
+            if (other is null) return false;
+            if (ReferenceEquals(this, other)) return true;
+            return Equals(Name, other.Name) && Equals(Version, other.Version) &&
+                   Equals(MinimumVersion, other.MinimumVersion);
+        }
+
+        /// <inheritdoc />
+        public override bool Equals(object? obj) =>
+            ReferenceEquals(this, obj) || obj is SdkReferenceOrigin other && Equals(other);
+
+        /// <inheritdoc />
+        public override int GetHashCode()
+        {
+            unchecked
+            {
+                var hashCode = Name != null ? Name.GetHashCode() : 0;
+                hashCode = (hashCode * 397) ^ (Version != null ? Version.GetHashCode() : 0);
+                hashCode = (hashCode * 397) ^ (MinimumVersion != null ? MinimumVersion.GetHashCode() : 0);
+                return hashCode;
+            }
+        }
+
+        public static bool operator ==(SdkReferenceOrigin? left, SdkReferenceOrigin? right) => Equals(left, right);
+
+        public static bool operator !=(SdkReferenceOrigin? left, SdkReferenceOrigin? right) => !Equals(left, right);
+
+        /// <inheritdoc />
+        public override string ToString() =>
+            $"{nameof(Name)}: {FormatNullable(Name)}, {nameof(Version)}: {FormatNullable(Version)}, {nameof(MinimumVersion)}: {FormatNullable(MinimumVersion)}";
+
+        private static string FormatNullable(IElementLocation? elementLocation) =>
+            elementLocation?.ToString() ?? "<null>";
+    }
+}
diff --git a/src/Build/Construction/SdkReferenceSourceFullQuery.cs b/src/Build/Construction/SdkReferenceSourceFullQuery.cs
new file mode 100644
index 00000000000..eb45b2b38d0
--- /dev/null
+++ b/src/Build/Construction/SdkReferenceSourceFullQuery.cs
@@ -0,0 +1,26 @@
+#nullable enable
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     <see cref="ProjectImportElement" /> implementation detail.
+    /// </summary>
+    internal readonly ref struct SdkReferenceSourceFullQuery
+    {
+        public readonly ProjectElement Element;
+        public readonly SdkReferenceAttribute Sdk;
+        public readonly SdkReferenceAttribute Version;
+        public readonly SdkReferenceAttribute MinimumVersion;
+
+        public SdkReferenceSourceFullQuery(ProjectElement element,
+                                           SdkReferenceAttribute sdk,
+                                           SdkReferenceAttribute version,
+                                           SdkReferenceAttribute minimumVersion)
+        {
+            Sdk = sdk;
+            Version = version;
+            MinimumVersion = minimumVersion;
+            Element = element;
+        }
+    }
+}
diff --git a/src/Build/Construction/SdkReferenceSourceQuery.cs b/src/Build/Construction/SdkReferenceSourceQuery.cs
new file mode 100644
index 00000000000..f59cbaa57d7
--- /dev/null
+++ b/src/Build/Construction/SdkReferenceSourceQuery.cs
@@ -0,0 +1,19 @@
+#nullable enable
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     <see cref="ProjectImportElement" /> implementation detail.
+    /// </summary>
+    internal readonly ref struct SdkReferenceSourceQuery
+    {
+        public readonly ProjectElement Element;
+        public readonly SdkReferenceAttribute Factory;
+
+        public SdkReferenceSourceQuery(ProjectElement element, SdkReferenceAttribute factory)
+        {
+            Element = element;
+            Factory = factory;
+        }
+    }
+}
diff --git a/src/Build/Construction/SdkReferenceWithOrigin.cs b/src/Build/Construction/SdkReferenceWithOrigin.cs
new file mode 100644
index 00000000000..920821ceaa3
--- /dev/null
+++ b/src/Build/Construction/SdkReferenceWithOrigin.cs
@@ -0,0 +1,22 @@
+#nullable enable
+
+using System;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Construction
+{
+    /// <summary>
+    ///     Microsoft Build SDK reference values and their XML attributes' locations.
+    /// </summary>
+    internal readonly struct SdkReferenceWithOrigin
+    {
+        public readonly SdkReference Reference;
+        public readonly SdkReferenceOrigin Origin;
+
+        public SdkReferenceWithOrigin(SdkReference reference, SdkReferenceOrigin origin)
+        {
+            Reference = reference;
+            Origin = origin;
+        }
+    }
+}
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 449d9e4f3c2..a6bcd128554 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1776,8 +1776,10 @@ private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
 
             string project = importElement.Project;
 
-            if (importElement.SdkReference != null)
+            if (importElement.SdkReferenceWithOrigin is {} sdkReferenceWithOrigin)
             {
+                var sdkReference = sdkReferenceWithOrigin.Reference;
+
                 // Try to get the path to the solution and project being built. The solution path is not directly known
                 // in MSBuild. It is passed in as a property either by the VS project system or by MSBuild's solution
                 // metaproject. Microsoft.Common.CurrentVersion.targets sets the value to *Undefined* when not set, and
@@ -1788,17 +1790,19 @@ private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
                 var projectPath = _data.GetProperty(ReservedPropertyNames.projectFullPath)?.EvaluatedValue;
 
                 // Combine SDK path with the "project" relative path
-                sdkResult = _sdkResolverService.ResolveSdk(_submissionId, importElement.SdkReference, _evaluationLoggingContext, importElement.Location, solutionPath, projectPath, _interactive);
+                sdkResult = _sdkResolverService.ResolveSdk(_submissionId, sdkReference, _evaluationLoggingContext, importElement.Location, solutionPath, projectPath, _interactive);
 
                 if (!sdkResult.Success)
                 {
+                    var sdkReferenceNameLocation = sdkReferenceWithOrigin.Origin.Name ?? importElement.Location;
+
                     if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports))
                     {
                         ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
-                            importElement.Location.Line,
-                            importElement.Location.Column,
+                            sdkReferenceNameLocation.Line,
+                            sdkReferenceNameLocation.Column,
                             ResourceUtilities.GetResourceString("CouldNotResolveSdk"),
-                            importElement.SdkReference.ToString())
+                            sdkReference.ToString())
                         {
                             BuildEventContext = _evaluationLoggingContext.BuildEventContext,
                             UnexpandedProject = importElement.Project,
@@ -1814,7 +1818,11 @@ private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
                         return;
                     }
 
-                    ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, "CouldNotResolveSdk", importElement.SdkReference.ToString());
+                    ProjectErrorUtilities.ThrowInvalidProject(
+                        sdkReferenceNameLocation,
+                        "CouldNotResolveSdk",
+                        sdkReference.ToString()
+                    );
                 }
 
                 if (sdkResult.Path == null)
diff --git a/src/Build/Evaluation/ProjectParser.cs b/src/Build/Evaluation/ProjectParser.cs
index cbdb79a738e..8c1d38f59b1 100644
--- a/src/Build/Evaluation/ProjectParser.cs
+++ b/src/Build/Evaluation/ProjectParser.cs
@@ -457,16 +457,7 @@ private ProjectImportElement ParseProjectImportElement(XmlElementWithLocation el
             ProjectXmlUtilities.VerifyThrowProjectRequiredAttribute(element, XMakeAttributes.project);
             ProjectXmlUtilities.VerifyThrowProjectNoChildElements(element);
 
-            SdkReference sdk = null;
-            if (element.HasAttribute(XMakeAttributes.sdk))
-            {
-                sdk = new SdkReference(
-                    ProjectXmlUtilities.GetAttributeValue(element, XMakeAttributes.sdk, nullIfNotExists: true),
-                    ProjectXmlUtilities.GetAttributeValue(element, XMakeAttributes.sdkVersion, nullIfNotExists: true),
-                    ProjectXmlUtilities.GetAttributeValue(element, XMakeAttributes.sdkMinimumVersion, nullIfNotExists: true));
-            }
-
-            return new ProjectImportElement(element, parent, _project, sdk);
+            return new ProjectImportElement(element, parent, _project);
         }
 
         /// <summary>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 43a84039b2e..83c0b1c6dd6 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -241,8 +241,6 @@
     <Compile Include="Collections\RetrievableEntryHashSet\HashHelpers.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
-    <Compile Include="Construction\ImplicitImportLocation.cs" />
-    <Compile Include="Construction\ProjectSdkElement.cs" />
     <Compile Include="Definition\ProjectOptions.cs" />
     <Compile Include="Definition\NewProjectFileOptions.cs" />
     <Compile Include="Definition\ProjectCollectionChangedEventArgs.cs" />
@@ -378,26 +376,27 @@
     <!-- ######################## -->
     <Compile Include="Collections\WeakValueDictionary.cs" />
     <!-- #### CONSTRUCTION MODEL ### -->
+    <Compile Include="Construction\ProjectChooseElement.cs" />
     <Compile Include="Construction\ProjectElement.cs" />
     <Compile Include="Construction\ProjectElementContainer.cs" />
+    <Compile Include="Construction\ProjectExtensionsElement.cs" />
     <Compile Include="Construction\ProjectImportElement.cs" />
     <Compile Include="Construction\ProjectImportGroupElement.cs" />
-    <Compile Include="Construction\ProjectItemDefinitionGroupElement.cs" />
     <Compile Include="Construction\ProjectItemDefinitionElement.cs" />
-    <Compile Include="Construction\ProjectItemGroupElement.cs" />
+    <Compile Include="Construction\ProjectItemDefinitionGroupElement.cs" />
     <Compile Include="Construction\ProjectItemElement.cs" />
+    <Compile Include="Construction\ProjectItemGroupElement.cs" />
     <Compile Include="Construction\ProjectMetadataElement.cs" />
     <Compile Include="Construction\ProjectOnErrorElement.cs" />
     <Compile Include="Construction\ProjectOtherwiseElement.cs" />
     <Compile Include="Construction\ProjectOutputElement.cs" />
-    <Compile Include="Construction\ProjectExtensionsElement.cs" />
-    <Compile Include="Construction\ProjectPropertyGroupElement.cs" />
     <Compile Include="Construction\ProjectPropertyElement.cs" />
+    <Compile Include="Construction\ProjectPropertyGroupElement.cs" />
+    <Compile Include="Construction\ProjectRootElement.cs" />
+    <Compile Include="Construction\ProjectSdkElement.cs" />
     <Compile Include="Construction\ProjectTargetElement.cs" />
     <Compile Include="Construction\ProjectTaskElement.cs" />
     <Compile Include="Construction\ProjectUsingTaskElement.cs" />
-    <Compile Include="Construction\ProjectRootElement.cs" />
-    <Compile Include="Construction\ProjectChooseElement.cs" />
     <Compile Include="Construction\ProjectWhenElement.cs" />
     <Compile Include="Construction\UsingTaskParameterGroupElement.cs" />
     <Compile Include="Construction\ProjectUsingTaskParameterElement.cs" />
@@ -410,6 +409,15 @@
     <Compile Include="Construction\Solution\SolutionFile.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="Construction\ISdkReferenceMutableSource.cs" />
+    <Compile Include="Construction\ISdkReferenceSource.cs" />
+    <Compile Include="Construction\ImplicitImportLocation.cs" />
+    <Compile Include="Construction\SdkReferenceAttribute.cs" />
+    <Compile Include="Construction\SdkReferenceConstantSource.cs" />
+    <Compile Include="Construction\SdkReferenceOrigin.cs" />
+    <Compile Include="Construction\SdkReferenceSourceFullQuery.cs" />
+    <Compile Include="Construction\SdkReferenceSourceQuery.cs" />
+    <Compile Include="Construction\SdkReferenceWithOrigin.cs" />
     <!-- #### DEFINITION MODEL ### -->
     <Compile Include="Definition\BuiltInMetadata.cs" />
     <Compile Include="Definition\ProjectCollection.cs" />
