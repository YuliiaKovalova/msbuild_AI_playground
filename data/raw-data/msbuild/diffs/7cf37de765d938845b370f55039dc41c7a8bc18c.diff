diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 0006011545f..7bdc4c6eced 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -94,6 +94,48 @@ public void ConstructWithSingleNodeWithProjectInstanceFactory()
             }
         }
 
+        [Fact]
+        public void ProjectGraphNodeConstructorNoNullArguments()
+        {
+            _env.DoNotLaunchDebugger();
+            Assert.Throws<InternalErrorException>(() => new ProjectGraphNode(null));
+        }
+
+        [Fact]
+        public void UpdatingReferencesIsBidirectional()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var projectInstance = new Project().CreateProjectInstance();
+                var node = new ProjectGraphNode(projectInstance);
+                var reference1 = new ProjectGraphNode(projectInstance);
+                var reference2 = new ProjectGraphNode(projectInstance);
+
+                node.AddProjectReference(reference1);
+                node.AddProjectReference(reference2);
+
+                node.ProjectReferences.ShouldBeEquivalentTo(new []{reference1, reference2});
+                node.ReferencingProjects.ShouldBeEmpty();
+
+                reference1.ReferencingProjects.ShouldBeEquivalentTo(new[] {node});
+                reference1.ProjectReferences.ShouldBeEmpty();
+
+                reference2.ReferencingProjects.ShouldBeEquivalentTo(new[] {node});
+                reference2.ProjectReferences.ShouldBeEmpty();
+
+                node.RemoveReferences();
+
+                node.ProjectReferences.ShouldBeEmpty();
+                node.ReferencingProjects.ShouldBeEmpty();
+
+                reference1.ProjectReferences.ShouldBeEmpty();
+                reference1.ReferencingProjects.ShouldBeEmpty();
+
+                reference2.ProjectReferences.ShouldBeEmpty();
+                reference2.ReferencingProjects.ShouldBeEmpty();
+            }
+        }
+
         [Fact]
         public void ConstructWithProjectInstanceFactory_FactoryReturnsNull_Throws()
         {
@@ -1193,6 +1235,9 @@ private static void AssertOuterBuildAsNonRoot(ProjectGraphNode outerBuild, Dicti
                 foreach (var innerBuild in innerBuilds)
                 {
                     AssertInnerBuildEvaluation(innerBuild, true, additionalGlobalProperties);
+
+                    innerBuild.ReferencingProjects.ShouldContain(outerBuildReferencer);
+                    innerBuild.ReferencingProjects.ShouldNotContain(outerBuild);
                 }
             }
         }
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 0e3f4ab9228..6d4e977b3c4 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -361,7 +361,6 @@ private void CreateEdgesAndDetectCycles(
 
                     var parsedProjectReference = allParsedProjects[referenceConfig];
                     node.AddProjectReference(parsedProjectReference);
-                    parsedProjectReference.AddReferencingProject(node);
                 }
 
                 nodeState[node] = NodeVisitationState.Processed;
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index eeab5860a50..2bb4036d119 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -3,6 +3,7 @@
 
 using System.Collections.Generic;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.Graph
 {
@@ -17,6 +18,7 @@ public sealed class ProjectGraphNode
         // No public creation.
         internal ProjectGraphNode(ProjectInstance projectInstance)
         {
+            ErrorUtilities.VerifyThrowInternalNull(projectInstance, nameof(projectInstance));
             ProjectInstance = projectInstance;
         }
 
@@ -35,12 +37,21 @@ internal ProjectGraphNode(ProjectInstance projectInstance)
         /// </summary>
         public ProjectInstance ProjectInstance { get; }
 
-        internal void AddProjectReference(ProjectGraphNode projectGraphNode) => _projectReferences.Add(projectGraphNode);
-
-        internal void RemoveReferences() => _projectReferences.Clear();
+        internal void AddProjectReference(ProjectGraphNode reference)
+        {
+            _projectReferences.Add(reference);
+            reference._referencingProjects.Add(this);
+        }
 
-        internal void RemoveProjectReference(ProjectGraphNode projectGraphNode) => _projectReferences.Remove(projectGraphNode);
+        internal void RemoveReferences()
+        {
+            foreach (var reference in _projectReferences)
+            {
+                ErrorUtilities.VerifyThrow(reference._referencingProjects.Contains(this), "references should point the nodes referencing them");
+                reference._referencingProjects.Remove(this);
+            }
 
-        internal void AddReferencingProject(ProjectGraphNode projectGraphNode) => _referencingProjects.Add(projectGraphNode);
+            _projectReferences.Clear();
+        }
     }
 }
