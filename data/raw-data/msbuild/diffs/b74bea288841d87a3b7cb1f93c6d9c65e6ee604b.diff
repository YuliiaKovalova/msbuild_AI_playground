diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 62b03198bbf..6ee918506a4 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -38,18 +38,10 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                 ImmutableArray<I>.Builder? itemsToAdd = null;
 
                 Lazy<Func<string, bool>>? excludeTester = null;
-                ImmutableList<string>.Builder excludePatterns = ImmutableList.CreateBuilder<string>();
-                // STEP 4: Evaluate, split, expand and subtract any Exclude
-                foreach (string exclude in _excludes)
-                {
-                    string excludeExpanded = _expander.ExpandIntoStringLeaveEscaped(exclude, ExpanderOptions.ExpandPropertiesAndItems, _itemElement.ExcludeLocation);
-                    var excludeSplits = ExpressionShredder.SplitSemiColonSeparatedList(excludeExpanded);
-                    excludePatterns.AddRange(excludeSplits);
-                }
 
-                if (excludePatterns.Count > 0)
+                if (_excludes.Count > 0)
                 {
-                    excludeTester = new Lazy<Func<string, bool>>(() => EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory));
+                    excludeTester = new Lazy<Func<string, bool>>(() => EngineFileUtilities.GetFileSpecMatchTester(_excludes, _rootDirectory));
                 }
 
                 ISet<string>? excludePatternsForGlobs = null;
@@ -95,7 +87,7 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
 
                             if (excludePatternsForGlobs == null)
                             {
-                                excludePatternsForGlobs = BuildExcludePatternsForGlobs(globsToIgnore, excludePatterns);
+                                excludePatternsForGlobs = BuildExcludePatternsForGlobs(globsToIgnore, _excludes);
                             }
 
                             string[] includeSplitFilesEscaped;
@@ -137,7 +129,7 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                 return itemsToAdd?.ToImmutable() ?? ImmutableArray<I>.Empty;
             }
 
-            private static ISet<string> BuildExcludePatternsForGlobs(ImmutableHashSet<string> globsToIgnore, ImmutableList<string>.Builder excludePatterns)
+            private static ISet<string> BuildExcludePatternsForGlobs(ImmutableHashSet<string> globsToIgnore, ImmutableSegmentedList<string> excludePatterns)
             {
                 var anyExcludes = excludePatterns.Count > 0;
                 var anyGlobsToIgnore = globsToIgnore.Count > 0;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index b207ae6ad6d..b96023e1bd5 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -562,7 +562,7 @@ private IncludeOperation BuildIncludeOperation(string rootDirectory, ProjectItem
             {
                 // Expand properties here, because a property may have a value which is an item reference (ie "@(Bar)"), and
                 //  if so we need to add the right item reference
-                string evaluatedExclude = _expander.ExpandIntoStringLeaveEscaped(itemElement.Exclude, ExpanderOptions.ExpandProperties, itemElement.ExcludeLocation);
+                string evaluatedExclude = _expander.ExpandIntoStringLeaveEscaped(itemElement.Exclude, ExpanderOptions.ExpandPropertiesAndItems, itemElement.ExcludeLocation);
 
                 if (evaluatedExclude.Length > 0)
                 {
