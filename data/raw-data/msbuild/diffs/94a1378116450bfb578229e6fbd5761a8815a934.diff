diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 41bfaf94f50..c44a4cb3ecd 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -2,6 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics.CodeAnalysis;
+using System.Linq;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Logging;
@@ -328,6 +330,45 @@ protected WriteHandler WriteHandler
 
         #region Methods
 
+        /// <summary>
+        /// Creates a Terminal logger if possible, or a Console logger.
+        /// </summary>
+        /// <param name="verbosity">Level of detail to show in the log.</param>
+        /// <param name="args">Command line arguments for the logger configuration. Currently, only '--tl:on' and '--tl:off' are supported.</param>
+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)
+        {
+            string tlArg = args?.LastOrDefault(a => a.StartsWith("--tl:", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;
+
+            bool isDisabled =
+                tlArg.Equals("--tl:on", StringComparison.InvariantCultureIgnoreCase) ? false :
+                tlArg.Equals("--tl:off", StringComparison.InvariantCultureIgnoreCase) ? true :
+                (Environment.GetEnvironmentVariable("MSBUILDTERMINALLOGGER") ?? string.Empty).Equals("off", StringComparison.InvariantCultureIgnoreCase);
+
+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
+
+            if (isDisabled || !supportsAnsi || !outputIsScreen)
+            {
+                NativeMethodsShared.RestoreConsoleMode(originalConsoleMode);
+                return new ConsoleLogger(verbosity);
+            }
+
+            return new TerminalLogger.TerminalLogger(verbosity, originalConsoleMode);
+        }
+
+        /// <summary>
+        /// DO NOT USE THIS METHOD. This implementation should be internal, but it's temporarily public for technical reasons. 
+        /// </summary>
+        [Obsolete("Use CreateTerminalOrConsoleLogger instead.")]
+        public static ILogger CreateTerminalLogger(LoggerVerbosity verbosity, string aggregatedLoggerParameters, out string[] configurableForwardingLoggerParameters)
+        {
+            configurableForwardingLoggerParameters = TerminalLogger.TerminalLogger.ConfigurableForwardingLoggerParameters;
+
+            return new TerminalLogger.TerminalLogger(verbosity)
+            {
+                Parameters = aggregatedLoggerParameters
+            };
+        }
+
         /// <summary>
         /// Apply a parameter.
         /// NOTE: This method was public by accident in Whidbey, so it cannot be made internal now. It has
diff --git a/src/MSBuild/TerminalLogger/BuildMessage.cs b/src/Build/Logging/TerminalLogger/BuildMessage.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/BuildMessage.cs
rename to src/Build/Logging/TerminalLogger/BuildMessage.cs
diff --git a/src/MSBuild/TerminalLogger/ITerminal.cs b/src/Build/Logging/TerminalLogger/ITerminal.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/ITerminal.cs
rename to src/Build/Logging/TerminalLogger/ITerminal.cs
diff --git a/src/MSBuild/TerminalLogger/MessageSeverity.cs b/src/Build/Logging/TerminalLogger/MessageSeverity.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/MessageSeverity.cs
rename to src/Build/Logging/TerminalLogger/MessageSeverity.cs
diff --git a/src/MSBuild/TerminalLogger/NodeStatus.cs b/src/Build/Logging/TerminalLogger/NodeStatus.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/NodeStatus.cs
rename to src/Build/Logging/TerminalLogger/NodeStatus.cs
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/Build/Logging/TerminalLogger/NodesFrame.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/NodesFrame.cs
rename to src/Build/Logging/TerminalLogger/NodesFrame.cs
diff --git a/src/MSBuild/TerminalLogger/Project.cs b/src/Build/Logging/TerminalLogger/Project.cs
similarity index 95%
rename from src/MSBuild/TerminalLogger/Project.cs
rename to src/Build/Logging/TerminalLogger/Project.cs
index e32d3686dc7..53b4893b918 100644
--- a/src/MSBuild/TerminalLogger/Project.cs
+++ b/src/Build/Logging/TerminalLogger/Project.cs
@@ -18,7 +18,9 @@ internal sealed class Project
     /// <summary>
     /// Initialized a new <see cref="Project"/> with the given <paramref name="targetFramework"/>.
     /// </summary>
+    /// <param name="projectFile">The full path to the project file.</param>
     /// <param name="targetFramework">The target framework of the project or null if not multi-targeting.</param>
+    /// <param name="stopwatch">A stopwatch to time the build of the project.</param>
     public Project(string projectFile, string? targetFramework, StopwatchAbstraction? stopwatch)
     {
         File = projectFile;
@@ -58,7 +60,7 @@ public Project(string projectFile, string? targetFramework, StopwatchAbstraction
     public bool IsTestProject { get; set; }
 
     /// <summary>
-    /// True when the project has run target with name "_CachePluginRunStart" defined in <see cref="TerminalLogger._cachePluginStartTarget"/>.
+    /// True when the project has run target with name "_CachePluginRunStart".
     /// </summary>
     public bool IsCachePluginProject { get; set; }
 
diff --git a/src/MSBuild/TerminalLogger/StopwatchAbstraction.cs b/src/Build/Logging/TerminalLogger/StopwatchAbstraction.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/StopwatchAbstraction.cs
rename to src/Build/Logging/TerminalLogger/StopwatchAbstraction.cs
diff --git a/src/MSBuild/TerminalLogger/SystemStopwatch.cs b/src/Build/Logging/TerminalLogger/SystemStopwatch.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/SystemStopwatch.cs
rename to src/Build/Logging/TerminalLogger/SystemStopwatch.cs
diff --git a/src/MSBuild/TerminalLogger/Terminal.cs b/src/Build/Logging/TerminalLogger/Terminal.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/Terminal.cs
rename to src/Build/Logging/TerminalLogger/Terminal.cs
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/Build/Logging/TerminalLogger/TerminalLogger.cs
similarity index 96%
rename from src/MSBuild/TerminalLogger/TerminalLogger.cs
rename to src/Build/Logging/TerminalLogger/TerminalLogger.cs
index ba48d4785ab..8faaa979746 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/Build/Logging/TerminalLogger/TerminalLogger.cs
@@ -253,7 +253,7 @@ internal TerminalLogger(ITerminal terminal)
     /// <summary>
     /// Private constructor invoked by static factory.
     /// </summary>
-    private TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()
+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()
     {
         Verbosity = verbosity;
         _originalConsoleMode = originalConsoleMode;
@@ -1080,36 +1080,13 @@ private void EraseNodes()
 
     #region Helpers
 
-    /// <summary>
-    /// Creates a Terminal logger or Console logger based on the environment.
-    /// This method is called by reflection from dotnet. Do not modify the name or parameters without adapting the SDK.
-    /// </summary>
-    public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[]? args)
-    {
-        string tlArg = args?.FirstOrDefault(a => a.StartsWith("--tl:", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;
-
-        bool isDisabled =
-            tlArg.Equals("--tl:on", StringComparison.InvariantCultureIgnoreCase) ? false :
-            tlArg.Equals("--tl:off", StringComparison.InvariantCultureIgnoreCase) ? true :
-            (Environment.GetEnvironmentVariable("MSBUILDTERMINALLOGGER") ?? string.Empty).Equals("off", StringComparison.InvariantCultureIgnoreCase);
-
-        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
-
-        if (isDisabled || !supportsAnsi || !outputIsScreen)
-        {
-            NativeMethodsShared.RestoreConsoleMode(originalConsoleMode);
-            return new ConsoleLogger(verbosity);
-        }
-
-        return new TerminalLogger(verbosity, originalConsoleMode);
-    }
-
     /// <summary>
     /// Construct a build result summary string.
     /// </summary>
     /// <param name="succeeded">True if the build completed with success.</param>
-    /// <param name="hasError">True if the build has logged at least one error.</param>
-    /// <param name="hasWarning">True if the build has logged at least one warning.</param>
+    /// <param name="countErrors">The number of errors encountered during the build.</param>
+    /// <param name="countWarnings">The number of warnings encountered during the build.</param>
+    /// <returns>A string representing the build result summary.</returns>
     private static string GetBuildResultString(bool succeeded, int countErrors, int countWarnings)
     {
         if (!succeeded)
diff --git a/src/MSBuild/TerminalLogger/TestSummary.cs b/src/Build/Logging/TerminalLogger/TestSummary.cs
similarity index 100%
rename from src/MSBuild/TerminalLogger/TestSummary.cs
rename to src/Build/Logging/TerminalLogger/TestSummary.cs
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 66d6c38d007..cde4841334f 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -176,6 +176,17 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Logging\BuildEventArgsExtensions.cs" />
+    <Compile Include="Logging\TerminalLogger\BuildMessage.cs" />
+    <Compile Include="Logging\TerminalLogger\ITerminal.cs" />
+    <Compile Include="Logging\TerminalLogger\MessageSeverity.cs" />
+    <Compile Include="Logging\TerminalLogger\NodesFrame.cs" />
+    <Compile Include="Logging\TerminalLogger\NodeStatus.cs" />
+    <Compile Include="Logging\TerminalLogger\Project.cs" />
+    <Compile Include="Logging\TerminalLogger\StopwatchAbstraction.cs" />
+    <Compile Include="Logging\TerminalLogger\SystemStopwatch.cs" />
+    <Compile Include="Logging\TerminalLogger\Terminal.cs" />
+    <Compile Include="Logging\TerminalLogger\TerminalLogger.cs" />
+    <Compile Include="Logging\TerminalLogger\TestSummary.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Framework/ILogger.cs b/src/Framework/ILogger.cs
index 5f3a31f5464..86309b35644 100644
--- a/src/Framework/ILogger.cs
+++ b/src/Framework/ILogger.cs
@@ -1,6 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Linq;
+using System;
 using System.Runtime.InteropServices;
 
 namespace Microsoft.Build.Framework
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 2ce4c96e4bf..076fba4d9a1 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -136,7 +136,6 @@
     <Compile Include="CommandLineSwitchException.cs" />
     <Compile Include="..\Shared\CoreCLRAssemblyLoader.cs" Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'" />
     <Compile Include="DistributedLoggerRecord.cs" />
-    <Compile Include="TerminalLogger\*.cs" />
     <Compile Include="InitializationException.cs" />
     <Compile Include="MSBuildClientApp.cs" />
     <Compile Include="NodeEndpointOutOfProcTaskHost.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index aeddef7aba4..b813ff2e0ac 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -41,7 +41,6 @@
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using SimpleErrorLogger = Microsoft.Build.Logging.SimpleErrorLogger.SimpleErrorLogger;
-using TerminalLogger = Microsoft.Build.Logging.TerminalLogger.TerminalLogger;
 
 #if NETFRAMEWORK
 // Use I/O operations from Microsoft.IO.Redist which is generally higher perf
@@ -52,6 +51,8 @@
 using File = Microsoft.IO.File;
 using FileInfo = Microsoft.IO.FileInfo;
 using Path = Microsoft.IO.Path;
+using BuildXL.Processes.Tracing;
+using Microsoft.Build.Utilities;
 #endif
 
 #nullable disable
@@ -4019,11 +4020,10 @@ private static void ProcessTerminalLogger(bool noConsoleLogger,
         {
             if (!noConsoleLogger)
             {
+#pragma warning disable CS0618 // Intentional use due to technical debt
                 // A central logger will be created for both single proc and multiproc.
-                TerminalLogger logger = new TerminalLogger(verbosity)
-                {
-                    Parameters = aggregatedLoggerParameters
-                };
+                ILogger logger = ConsoleLogger.CreateTerminalLogger(verbosity, aggregatedLoggerParameters, out string[] configurableForwardingLoggerParameters);
+#pragma warning restore CS0618 
 
                 // Check to see if there is a possibility we will be logging from an out-of-proc node.
                 // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
@@ -4034,7 +4034,7 @@ private static void ProcessTerminalLogger(bool noConsoleLogger,
                 else
                 {
                     // For performance, register this logger using the forwarding logger mechanism.
-                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", TerminalLogger.ConfigurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
+                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", configurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
                     distributedLoggerRecords.Add(forwardingLoggerRecord);
                 }
             }
