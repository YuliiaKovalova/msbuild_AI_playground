diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 09301134140..cfd53b89220 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -557,7 +557,7 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
             return false;
         }
 
-        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
+        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
         {
             throw new NotImplementedException();
         }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 60025a4ad32..e8257651162 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -225,7 +225,7 @@ bool IncludeTaskInputs
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
         /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>
-        HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context);
+        ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context);
 
         #region Register
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index d96fac64850..cd2b92bb029 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -528,7 +528,7 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
         /// A set containing warning codes to be logged as errors.
         /// Null if no warnings should be treated as errors.
         /// </returns>
-        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
+        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
         {
             if (_warningsAsErrorsByProject == null)
             {
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index ad0af0ff9a3..2f4758b2196 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -146,7 +146,7 @@ internal void LogTaskWarningFromException(Exception exception, BuildEventFileInf
             LoggingService.LogTaskWarningFromException(BuildEventContext, exception, file, taskName);
         }
 
-        internal HashSet<string> GetWarningsAsErrors()
+        internal ICollection<string> GetWarningsAsErrors()
         {
             return LoggingService.GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext);
         }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 21e340a7bf0..75676f2bd9d 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -677,13 +677,13 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         #endregion
 
         #region IBuildEngine8 Members
-        private HashSet<string> _warningsAsErrors;
+        private ICollection<string> _warningsAsErrors;
 
         /// <summary>
         /// Contains all warnings that should be logged as errors.
         /// Non-null empty set when all warnings should be treated as errors.
         /// </summary>
-        private HashSet<string> WarningsAsErrors
+        private ICollection<string> WarningsAsErrors
         {
             get
             {
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 3ce5eb53d1c..865f2c5fd00 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -272,7 +272,7 @@ public bool Execute()
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
-                        _taskLoggingContext.LoggingService.GetWarningsToBeLoggedAsErrorsByProject(_taskLoggingContext.BuildEventContext)
+                        _taskLoggingContext.LoggingService.GetWarningsToBeLoggedAsErrorsByProject(_taskLoggingContext.BuildEventContext) as HashSet<string>
                         
                     );
 
