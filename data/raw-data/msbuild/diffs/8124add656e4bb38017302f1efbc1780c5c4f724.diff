diff --git a/src/Tasks/AssemblyRegistrationCache.cs b/src/Tasks/AssemblyRegistrationCache.cs
index 63ae6fdd833..eb1f0eda8c3 100644
--- a/src/Tasks/AssemblyRegistrationCache.cs
+++ b/src/Tasks/AssemblyRegistrationCache.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
@@ -10,18 +9,17 @@ namespace Microsoft.Build.Tasks
     /// <remarks>
     /// This class is a caching mechanism for the Register/UnregisterAssembly task to keep track of registered assemblies to clean up
     /// </remarks>
-    [Serializable()]
     internal sealed class AssemblyRegistrationCache : StateFileBase
     {
         /// <summary>
         /// The list of registered assembly files.
         /// </summary>
-        private readonly List<string> _assemblies = new List<string>();
+        internal List<string> _assemblies = new List<string>();
 
         /// <summary>
         /// The list of registered type library files.
         /// </summary>
-        private readonly List<string> _typeLibraries = new List<string>();
+        internal List<string> _typeLibraries = new List<string>();
 
         /// <summary>
         /// The number of entries in the state file
diff --git a/src/Tasks/Dependencies.cs b/src/Tasks/Dependencies.cs
index 80761d7464f..aac1fc0b13b 100644
--- a/src/Tasks/Dependencies.cs
+++ b/src/Tasks/Dependencies.cs
@@ -1,32 +1,30 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-using System.Collections;
+using System.Collections.Generic;
 
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
     /// Represents a cache of inputs to a compilation-style task.
     /// </summary>
-    /// <remarks>On-disk serialization format, don't change field names or types or use readonly.</remarks>
-    [Serializable]
     internal class Dependencies
     {
         /// <summary>
         /// Hashtable of other dependency files.
         /// Key is filename and value is DependencyFile.
         /// </summary>
-        private Hashtable dependencies = new Hashtable();
+        internal Dictionary<string, DependencyFile> dependencies = new();
 
         /// <summary>
-        /// Look up a dependency file. Return null if its not there.
+        /// Look up a dependency file. Return null if it isn't there.
         /// </summary>
         /// <param name="filename"></param>
         /// <returns></returns>
         internal DependencyFile GetDependencyFile(string filename)
         {
-            return (DependencyFile)dependencies[filename];
+            dependencies.TryGetValue(filename, out DependencyFile file);
+            return file;
         }
 
         /// <summary>
diff --git a/src/Tasks/DependencyFile.cs b/src/Tasks/DependencyFile.cs
index f8306894c3b..1851506118d 100644
--- a/src/Tasks/DependencyFile.cs
+++ b/src/Tasks/DependencyFile.cs
@@ -12,20 +12,17 @@ namespace Microsoft.Build.Tasks
     /// <remarks>
     /// Represents a single input to a compilation-style task.
     /// Keeps track of timestamp for later comparison.
-    /// 
-    /// On-disk serialization format, don't change field names or types or use readonly.
     /// </remarks>
-    [Serializable]
     internal class DependencyFile
     {
         // Filename
-        private string filename;
+        internal string filename;
 
         // Date and time the file was last modified           
-        private DateTime lastModified;
+        internal DateTime lastModified;
 
         // Whether the file exists or not.
-        private bool exists = false;
+        internal bool exists = false;
 
         /// <summary>
         /// The name of the file.
@@ -70,6 +67,10 @@ internal DependencyFile(string filename)
             }
         }
 
+        internal DependencyFile()
+        {
+        }
+
         /// <summary>
         /// Checks whether the file has changed since the last time a timestamp was recorded.
         /// </summary>
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index 3632a916d83..e86e81f4e50 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -22,18 +22,17 @@ namespace Microsoft.Build.Tasks
     /// 
     /// This is an on-disk serialization format, don't change field names or types or use readonly.
     /// </remarks>
-    [Serializable]
     internal sealed class ResGenDependencies : StateFileBase
     {
         /// <summary>
         /// The list of resx files.
         /// </summary>
-        private Dependencies resXFiles = new Dependencies();
+        internal Dependencies resXFiles = new Dependencies();
 
         /// <summary>
         /// A list of portable libraries and the ResW files they can produce.
         /// </summary>
-        private Dependencies portableLibraries = new Dependencies();
+        internal Dependencies portableLibraries = new Dependencies();
 
         /// <summary>
         /// A newly-created ResGenDependencies is not dirty.
@@ -47,7 +46,7 @@ internal sealed class ResGenDependencies : StateFileBase
         ///  If this is NULL then we use the directory in which the .resx is in (that should always
         ///  be the default!)
         /// </summary>
-        private string baseLinkedFileDirectory;
+        internal string baseLinkedFileDirectory;
 
         internal string BaseLinkedFileDirectory
         {
@@ -93,8 +92,7 @@ internal bool UseSourcePath
         internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
         {
             // First, try to retrieve the resx information from our hashtable.
-            var retVal = (ResXFile)resXFiles.GetDependencyFile(resxFile);
-            if (retVal == null)
+            if (resXFiles.GetDependencyFile(resxFile) is not ResXFile retVal || retVal == null)
             {
                 // Ok, the file wasn't there.  Add it to our cache and return it to the caller.  
                 retVal = AddResxFile(resxFile, useMSBuildResXReader);
@@ -192,7 +190,7 @@ internal static ResGenDependencies DeserializeCache(string stateFile, bool useSo
         internal sealed class ResXFile : DependencyFile
         {
             // Files contained within this resx file.
-            private string[] linkedFiles;
+            internal string[] linkedFiles;
 
             internal string[] LinkedFiles => linkedFiles;
 
@@ -209,6 +207,10 @@ internal ResXFile(string filename, string baseLinkedFileDirectory, bool useMSBui
                 }
             }
 
+            internal ResXFile()
+            {
+            }
+
             /// <summary>
             /// Given a .RESX file, returns all the linked files that are referenced within that .RESX.
             /// </summary>
@@ -284,9 +286,13 @@ private static string[] GetLinkedFiles(string filename, string baseLinkedFileDir
         [Serializable]
         internal sealed class PortableLibraryFile : DependencyFile
         {
-            private string[] outputFiles;
-            private string neutralResourceLanguage;
-            private string assemblySimpleName;
+            internal string[] outputFiles;
+            internal string neutralResourceLanguage;
+            internal string assemblySimpleName;
+
+            internal PortableLibraryFile()
+            {
+            }
 
             internal PortableLibraryFile(string filename)
                 : base(filename)
diff --git a/src/Tasks/ResolveComReferenceCache.cs b/src/Tasks/ResolveComReferenceCache.cs
index d0f80dca18f..87fa0210464 100644
--- a/src/Tasks/ResolveComReferenceCache.cs
+++ b/src/Tasks/ResolveComReferenceCache.cs
@@ -2,7 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
+using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Tasks
@@ -16,7 +16,6 @@ namespace Microsoft.Build.Tasks
     /// 
     /// This is an on-disk serialization format, don't change field names or types or use readonly.
     /// </remarks>
-    [Serializable]
     internal sealed class ResolveComReferenceCache : StateFileBase
     {
         /// <summary>
@@ -24,9 +23,9 @@ internal sealed class ResolveComReferenceCache : StateFileBase
         /// Key: Component path on disk
         /// Value: DateTime struct
         /// </summary>
-        private Hashtable componentTimestamps;
-        private string tlbImpLocation;
-        private string axImpLocation;
+        internal Dictionary<string, DateTime> componentTimestamps;
+        internal string tlbImpLocation;
+        internal string axImpLocation;
 
         /// <summary>
         /// indicates whether the cache contents have changed since it's been created
@@ -46,7 +45,7 @@ internal ResolveComReferenceCache(string tlbImpPath, string axImpPath)
 
             tlbImpLocation = tlbImpPath;
             axImpLocation = axImpPath;
-            componentTimestamps = new Hashtable();
+            componentTimestamps = new();
         }
 
         /// <summary>
@@ -69,9 +68,9 @@ internal DateTime this[string componentPath]
         {
             get
             {
-                if (componentTimestamps.ContainsKey(componentPath))
+                if (componentTimestamps.TryGetValue(componentPath, out DateTime time))
                 {
-                    return (DateTime)componentTimestamps[componentPath];
+                    return time;
                 }
 
                 // If the entry is not present in the cache, return the current time. Since no component should be timestamped
@@ -81,7 +80,7 @@ internal DateTime this[string componentPath]
             set
             {
                 // only set the value and dirty the cache if the timestamp doesn't exist yet or is different than the current one
-                if (DateTime.Compare(this[componentPath], value) != 0)
+                if (!DateTime.Equals(this[componentPath], value))
                 {
                     componentTimestamps[componentPath] = value;
                     _dirty = true;
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index b5b34a31b0b..01ec834fa4d 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -3,17 +3,16 @@
 
 using System;
 using System.IO;
-using System.Runtime.Serialization.Formatters.Binary;
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.BackEnd;
 
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
     /// Base class for task state files.
     /// </remarks>
-    [Serializable()]
     internal class StateFileBase
     {
         // Current version for serialization. This should be changed when breaking changes
@@ -43,18 +42,16 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
 
                     using (var s = new FileStream(stateFile, FileMode.CreateNew))
                     {
-                        var formatter = new BinaryFormatter();
-                        formatter.Serialize(s, this);
+                        var translator = BinaryTranslator.GetWriteTranslator(s);
+                        StateFileBase thisCopy = this;
+                        translator.Translate(ref thisCopy, thisCopy.GetType());
                     }
                 }
             }
-            catch (Exception e)
+            // If there was a problem writing the file (like it's read-only or locked on disk, for
+            // example), then eat the exception and log a warning.  Otherwise, rethrow.
+            catch (Exception e) when (!ExceptionHandling.NotExpectedSerializationException(e))
             {
-                // If there was a problem writing the file (like it's read-only or locked on disk, for
-                // example), then eat the exception and log a warning.  Otherwise, rethrow.
-                if (ExceptionHandling.NotExpectedSerializationException(e))
-                    throw;
-
                 // Not being able to serialize the cache is not an error, but we let the user know anyway.
                 // Don't want to hold up processing just because we couldn't read the file.
                 log.LogWarningWithCodeFromResources("General.CouldNotWriteStateFile", stateFile, e.Message);
@@ -75,43 +72,30 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
                 {
                     using (FileStream s = new FileStream(stateFile, FileMode.Open))
                     {
-                        var formatter = new BinaryFormatter();
-                        object deserializedObject = formatter.Deserialize(s);
-                        retVal = deserializedObject as StateFileBase;
+                        var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);
+                        translator.Translate(ref retVal, requiredReturnType);
 
-                        // If the deserialized object is null then there would be no cast error but retVal would still be null
-                        // only log the message if there would have been a cast error
-                        if (retVal == null && deserializedObject != null)
+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.
+                        // For the latter case, internals may be unexpectedly null.
+                        if (retVal == null || retVal._serializedVersion != CurrentSerializationVersion)
                         {
                             // When upgrading to Visual Studio 2008 and running the build for the first time the resource cache files are replaced which causes a cast error due
                             // to a new version number on the tasks class. "Unable to cast object of type 'Microsoft.Build.Tasks.SystemState' to type 'Microsoft.Build.Tasks.StateFileBase".
                             // If there is an invalid cast, a message rather than a warning should be emitted.
                             log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
+                            return null;
                         }
-
-                        if ((retVal != null) && (!requiredReturnType.IsInstanceOfType(retVal)))
+                        else if (!requiredReturnType.IsInstanceOfType(retVal))
                         {
                             log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile,
                                 log.FormatResourceString("General.IncompatibleStateFileType"));
                             retVal = null;
                         }
-
-                        // If we get back a valid object and internals were changed, things are likely to be null. Check the version before we use it.
-                        if (retVal != null && retVal._serializedVersion != CurrentSerializationVersion)
-                        {
-                            log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
-                            retVal = null;
-                        }
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 // The deserialization process seems like it can throw just about 
                 // any exception imaginable.  Catch them all here.
                 // Not being able to deserialize the cache is not an error, but we let the user know anyway.
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 3f5ea428b0c..d121def739c 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -21,7 +21,6 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// Class is used to cache system state.
     /// </summary>
-    [Serializable]
     internal sealed class SystemState : StateFileBase, ITranslatable
     {
         private static readonly byte[] TranslateContractSignature = { (byte) 'M', (byte) 'B', (byte) 'R', (byte) 'S', (byte) 'C'}; // Microsoft Build RAR State Cache
@@ -112,7 +111,6 @@ internal sealed class SystemState : StateFileBase, ITranslatable
         /// <summary>
         /// Class that holds the current file state.
         /// </summary>
-        [Serializable]
         internal sealed class FileState : ITranslatable
         {
             /// <summary>
diff --git a/src/Tasks/TaskTranslatorHelpers.cs b/src/Tasks/TaskTranslatorHelpers.cs
index 7db48cf61ae..c5bb030a4e4 100644
--- a/src/Tasks/TaskTranslatorHelpers.cs
+++ b/src/Tasks/TaskTranslatorHelpers.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
 using System.Runtime.Versioning;
 using Microsoft.Build.BackEnd;
 
@@ -34,5 +35,94 @@ public static void Translate(this ITranslator translator, ref FrameworkName fram
                 frameworkName = new FrameworkName(identifier, version, profile);
             }
         }
+
+        public static void TranslateDictionary(this ITranslator translator, ref Dictionary<string, DateTime> dict, StringComparer comparer)
+        {
+            int count = 0;
+            if (translator.Mode == TranslationDirection.ReadFromStream)
+            {
+                dict = new Dictionary<string, DateTime>(comparer);
+                translator.Translate(ref count);
+                string key = string.Empty;
+                DateTime val = DateTime.Now;
+                for (int i = 0; i < count; i++)
+                {
+                    translator.Translate(ref key);
+                    translator.Translate(ref val);
+                    dict.Add(key, val);
+                }
+            }
+            else
+            {
+                count = dict.Count;
+                translator.Translate(ref count);
+                foreach (KeyValuePair<string, DateTime> kvp in dict)
+                {
+                    string key = kvp.Key;
+                    DateTime val = kvp.Value;
+                    translator.Translate(ref key);
+                    translator.Translate(ref val);
+                }
+            }
+        }
+
+        public static void Translate(this ITranslator translator, ref Dependencies dependencies, Type t)
+        {
+            translator.TranslateDictionary(ref dependencies.dependencies, (ITranslator translator, ref DependencyFile dependency) => {
+                if (t == typeof(ResGenDependencies.ResXFile))
+                {
+                    ResGenDependencies.ResXFile resx = dependency as ResGenDependencies.ResXFile;
+                    resx ??= new();
+                    translator.Translate(ref resx.linkedFiles);
+                    dependency = resx;
+                }
+                else if (t == typeof(ResGenDependencies.PortableLibraryFile))
+                {
+                    ResGenDependencies.PortableLibraryFile lib = dependency as ResGenDependencies.PortableLibraryFile;
+                    lib ??= new();
+                    translator.Translate(ref lib.assemblySimpleName);
+                    translator.Translate(ref lib.outputFiles);
+                    translator.Translate(ref lib.neutralResourceLanguage);
+                    dependency = lib;
+                }
+
+                dependency ??= new();
+                translator.Translate(ref dependency.filename);
+                translator.Translate(ref dependency.lastModified);
+                translator.Translate(ref dependency.exists);
+            });
+        }
+
+        public static void Translate(this ITranslator translator, ref StateFileBase stateFile, Type t)
+        {
+            if (t == typeof(ResGenDependencies))
+            {
+                ResGenDependencies rgd = stateFile as ResGenDependencies;
+                rgd ??= new();
+                translator.Translate(ref rgd.resXFiles, typeof(ResGenDependencies.ResXFile));
+                translator.Translate(ref rgd.portableLibraries, typeof(ResGenDependencies.PortableLibraryFile));
+                translator.Translate(ref rgd.baseLinkedFileDirectory);
+                stateFile = rgd;
+            }
+#if NETFRAMEWORK
+            else if (t == typeof(ResolveComReferenceCache))
+            {
+                ResolveComReferenceCache rcrc = stateFile as ResolveComReferenceCache;
+                rcrc ??= new(string.Empty, string.Empty);
+                translator.Translate(ref rcrc.axImpLocation);
+                translator.Translate(ref rcrc.tlbImpLocation);
+                translator.TranslateDictionary(ref rcrc.componentTimestamps, StringComparer.Ordinal);
+                stateFile = rcrc;
+            }
+            else if (t == typeof(AssemblyRegistrationCache))
+            {
+                AssemblyRegistrationCache arc = stateFile as AssemblyRegistrationCache;
+                arc ??= new();
+                translator.Translate(ref arc._assemblies);
+                translator.Translate(ref arc._typeLibraries);
+                stateFile = arc;
+            }
+#endif
+        }
     }
 }
