diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 2c492e93f7c..f54ab0520b5 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -499,7 +499,7 @@ private void DetectCycles(
             }
         }
 
-        private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
+        private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata, Boolean enableDynamicPlatformResolution)
         {
             // TODO: ProjectInstance just converts the dictionary back to a PropertyDictionary, so find a way to directly provide it.
             var globalProperties = configurationMetadata.GlobalProperties.ToDictionary();
@@ -517,7 +517,7 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
 
 
             var graphNode = new ProjectGraphNode(projectInstance);
-            if(globalProperties.ContainsKey(EnableDynamicPlatformResolutionMetadataName)){
+            if(enableDynamicPlatformResolution){
                 
                 var Platforms = projectInstance.GetProperty("Platforms");
                 var Platform = projectInstance.GetProperty("Platform");
@@ -530,15 +530,15 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
                     globalProperties["platform"] = SelectedPlatform;
                 }
 
-                var projectInstancePlatform = _projectInstanceFactory(
+                projectInstance = _projectInstanceFactory(
                     configurationMetadata.ProjectFullPath,
                     globalProperties,
                     _projectCollection);
 
-                graphNode = new ProjectGraphNode(projectInstancePlatform);
+                graphNode = new ProjectGraphNode(projectInstance);
             }
-
-            var referenceInfos = ParseReferences(graphNode);
+            
+            var referenceInfos = ParseReferences(graphNode, ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)));
 
 
             return new ParsedProject(configurationMetadata, graphNode, referenceInfos);
@@ -553,7 +553,7 @@ private Dictionary<ConfigurationMetadata, ParsedProject> FindGraphNodes()
         {
             foreach (ConfigurationMetadata projectToEvaluate in _entryPointConfigurationMetadata)
             {
-                SubmitProjectForParsing(projectToEvaluate);
+                SubmitProjectForParsing(projectToEvaluate, false);
                                 /*todo: fix the following double check-then-act concurrency bug: one thread can pass the two checks, loose context,
                              meanwhile another thread passes the same checks with the same data and inserts its reference. The initial thread regains context
                              and duplicates the information, leading to wasted work
@@ -565,12 +565,12 @@ meanwhile another thread passes the same checks with the same data and inserts i
             return _graphWorkSet.CompletedWork;
         }
 
-        private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate)
+        private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate, Boolean enableDynamicPlatformResolution)
         {
-            _graphWorkSet.AddWork(projectToEvaluate, () => ParseProject(projectToEvaluate));
+            _graphWorkSet.AddWork(projectToEvaluate, () => ParseProject(projectToEvaluate, enableDynamicPlatformResolution));
         }
 
-        private List<ProjectInterpretation.ReferenceInfo> ParseReferences(ProjectGraphNode parsedProject)
+        private List<ProjectInterpretation.ReferenceInfo> ParseReferences(ProjectGraphNode parsedProject, Boolean enableDynamicPlatformResolution)
         {
             var referenceInfos = new List<ProjectInterpretation.ReferenceInfo>();
 
@@ -585,7 +585,7 @@ private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate)
                         ));
                 }
                 
-                SubmitProjectForParsing(referenceInfo.ReferenceConfiguration);
+                SubmitProjectForParsing(referenceInfo.ReferenceConfiguration, enableDynamicPlatformResolution);
 
                 referenceInfos.Add(referenceInfo);
             }
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index fd5fd706e31..c05778fc662 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -23,7 +23,6 @@ namespace Microsoft.Build.Graph
 {
     internal sealed class ProjectInterpretation
     {
-        private const string EnableDynamicPlatformResolutionMetadataName = "EnableDynamicPlatformResolution";
         private const string FullPathMetadataName = "FullPath";
         private const string ToolsVersionMetadataName = "ToolsVersion";
         private const string SetConfigurationMetadataName = "SetConfiguration";
@@ -98,10 +97,6 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
                             requesterInstance.FullPath));
                 }
 
-                if (requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName) == "true")
-                {
-                    requesterInstance.GlobalPropertiesDictionary.Set(requesterInstance.GetProperty(EnableDynamicPlatformResolutionMetadataName));
-                }
                 var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);
 
                 var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, globalPropertiesModifiers);
