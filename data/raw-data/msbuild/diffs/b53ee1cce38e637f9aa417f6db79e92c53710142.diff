diff --git a/src/Framework/Logging/AnsiCodes.cs b/src/Framework/Logging/AnsiCodes.cs
index 8466220026b..e3a8c3aabbf 100644
--- a/src/Framework/Logging/AnsiCodes.cs
+++ b/src/Framework/Logging/AnsiCodes.cs
@@ -1,6 +1,8 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Text.RegularExpressions;
+
 namespace Microsoft.Build.Logging.TerminalLogger;
 
 /// <summary>
@@ -150,4 +152,14 @@ public static string MakeBold(string? s)
     /// <param name="column">Column index.</param>
     /// <returns>Control codes to set the desired position.</returns>
     public static string SetCursorHorizontal(int column) => $"{CSI}{column}G";
+
+    /// <summary>
+    /// Removes all ANSI codes from the text.
+    /// </summary>
+    /// <param name="text"></param>
+    /// <returns></returns>
+    public static string RemoveAnsiCodes(string text)
+    {
+        return new Regex(@"\x1B\[[^@-~]*[@-~]").Replace(text, "");
+    }
 }
diff --git a/src/MSBuild.UnitTests/NodeStatus_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Tests.cs
index 42e821c4ae6..238ba625ae3 100644
--- a/src/MSBuild.UnitTests/NodeStatus_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_Tests.cs
@@ -3,8 +3,10 @@
 
 using System;
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
 using System.Text;
+using System.Text.RegularExpressions;
 using System.Threading.Tasks;
 
 using Microsoft.Build.Logging.TerminalLogger;
@@ -19,11 +21,11 @@
 namespace Microsoft.Build.CommandLine.UnitTests;
 
 [UsesVerify]
-public class NodeStatus_Tests
+public class NodeStatus_SizeChange_Tests
 {
     private readonly NodeStatus _status = new("Namespace.Project", "TargetFramework", "Target", new MockStopwatch());
 
-    public NodeStatus_Tests()
+    public NodeStatus_SizeChange_Tests()
     {
         UseProjectRelativeDirectory("Snapshots");
     }
diff --git a/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
new file mode 100644
index 00000000000..bcc3dc607b8
--- /dev/null
+++ b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
@@ -0,0 +1,171 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Text.RegularExpressions;
+using System.Threading.Tasks;
+
+using Microsoft.Build.Logging.TerminalLogger;
+
+using VerifyTests;
+using VerifyXunit;
+using Xunit;
+
+using static VerifyXunit.Verifier;
+
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+[UsesVerify]
+public class NodeStatus_Transition_Tests
+{
+    public NodeStatus_Transition_Tests()
+    {
+        UseProjectRelativeDirectory("Snapshots");
+    }
+
+    [Fact]
+    public async Task NodeTargetChanges()
+    {
+        var rendered = Animate(
+            [
+                new("Namespace.Project", "TargetFramework", "Build", new MockStopwatch())
+            ],
+            [
+               new("Namespace.Project", "TargetFramework", "Testing", new MockStopwatch())
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    [Fact]
+    public async Task NodeTargetUpdatesTime()
+    {
+        // This test look like there is no change between the frames, but we ask the stopwatch for time they will increase the number.
+        // We need this because animations check that NodeStatus reference is the same.
+        // And we cannot use MockStopwatch because we don't know when to call Tick on them, and if we do it right away, the time will update in "both" nodes.
+        NodeStatus node = new("Namespace.Project", "TargetFramework", "Build", new TickingStopwatch());
+        var rendered = Animate(
+            [
+                node,
+            ],
+            [
+               node,
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    [Fact]
+    public async Task NodeTargetChangesToColoredTarget()
+    {
+        var rendered = Animate(
+            [
+                new("Namespace.Project", "TargetFramework", "Testing", new MockStopwatch())
+            ],
+            [
+               new("Namespace.Project", "TargetFramework", $"{AnsiCodes.Colorize("failed", TerminalColor.Red)} MyTestName1", new MockStopwatch())
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    [Fact]
+    public async Task NodeWithColoredTargetUpdatesTime()
+    {
+        // This test look like there is no change between the frames, but we ask the stopwatch for time they will increase the number.
+        // We need this because animations check that NodeStatus reference is the same.
+        // And we cannot use MockStopwatch because we don't know when to call Tick on them, and if we do it right away, the time will update in "both" nodes.
+        NodeStatus node = new("Namespace.Project", "TargetFramework", $"{AnsiCodes.Colorize("passed", TerminalColor.Green)} MyTestName1", new TickingStopwatch());
+        var rendered = Animate(
+            [
+                node,
+            ],
+            [
+               node
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    /// <summary>
+    /// Chains and renders node status updates and outputs replay able string of all the transitions.
+    /// </summary>
+    /// <param name="nodeStatusesUpdates">Takes array of arrays. The inner array is collection of nodes that are currently running. The outer array is how they update over time.</param>
+    /// <returns></returns>
+    private string Animate(params NodeStatus[][] nodeStatusesUpdates)
+    {
+        var width = 80;
+        var height = 1;
+
+        NodesFrame previousFrame = new(Array.Empty<NodeStatus>(), 0, 0);
+        StringBuilder result = new StringBuilder();
+        foreach (var nodeStatuses in nodeStatusesUpdates)
+        {
+            NodesFrame currentFrame = new NodesFrame(nodeStatuses, width, height);
+            result.Append(currentFrame.Render(previousFrame));
+            previousFrame = currentFrame;
+        }
+
+        return result.ToString();
+    }
+
+    private async Task VerifyReplay(string rendered)
+    {
+        try
+        {
+            await Verify(rendered);
+        }
+        catch (Exception ex)
+        {
+            if (ex.GetType().Name != "VerifyException")
+            {
+                throw;
+            }
+
+            if (!ex.Message.StartsWith("Directory:"))
+            {
+                throw;
+            }
+
+            string? directory = null;
+            string? received = null;
+            string? verified = null;
+            foreach (var line in ex.Message.Split('\n'))
+            {
+                var trimmed = line.TrimStart(' ', '-');
+                Extract(trimmed, "Directory", ref directory);
+                Extract(trimmed, "Received", ref received);
+                Extract(trimmed, "Verified", ref verified);
+            }
+
+            if (directory == null || received == null || verified == null)
+            {
+                throw;
+            }
+
+            var pipeline = $$""" | % { "`n`n" } { $_ -split "(?=`e)" | % { Write-Host -NoNewline $_; Start-Sleep 0.5 }; Write-Host }""";
+            throw new Exception($$"""
+                {{ex.Message.TrimEnd('\n')}}
+
+                Received replay:
+                    Get-Content {{Path.Combine(directory, received)}} {{pipeline}}
+
+                Verified replay:
+                    Get-Content {{Path.Combine(directory, verified)}} {{pipeline}}
+                """);
+        }
+
+        void Extract(string line, string prefix, ref string? output)
+        {
+            if (line.StartsWith($"{prefix}: "))
+            {
+                output = line.Substring(prefix.Length + 2);
+            }
+        }
+    }
+}
diff --git a/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.EverythingFits.verified.txt b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.EverythingFits.verified.txt
new file mode 100644
index 00000000000..5f282702bb0
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.EverythingFits.verified.txt
@@ -0,0 +1 @@
+ï»¿
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.GoesToProject.verified.txt b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.GoesToProject.verified.txt
new file mode 100644
index 00000000000..5f282702bb0
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.GoesToProject.verified.txt
@@ -0,0 +1 @@
+ï»¿
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.NamespaceIsTruncatedNext.verified.txt b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.NamespaceIsTruncatedNext.verified.txt
new file mode 100644
index 00000000000..5f282702bb0
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.NamespaceIsTruncatedNext.verified.txt
@@ -0,0 +1 @@
+ï»¿
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.TargetIsTruncatedFirst.verified.txt b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.TargetIsTruncatedFirst.verified.txt
new file mode 100644
index 00000000000..5f282702bb0
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/ColorizedNodeStatus_Tests.TargetIsTruncatedFirst.verified.txt
@@ -0,0 +1 @@
+ï»¿
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.EverythingFits.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.EverythingFits.verified.txt
new file mode 100644
index 00000000000..a889f734e14
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.EverythingFits.verified.txt
@@ -0,0 +1 @@
+ï»¿  Namespace.Project [36;1mTargetFramework[m [120G[13DTarget (0.0s)
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.GoesToProject.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.GoesToProject.verified.txt
new file mode 100644
index 00000000000..74eb4993b40
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.GoesToProject.verified.txt
@@ -0,0 +1 @@
+ï»¿Project
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.NamespaceIsTruncatedNext.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.NamespaceIsTruncatedNext.verified.txt
new file mode 100644
index 00000000000..a06cd82177c
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.NamespaceIsTruncatedNext.verified.txt
@@ -0,0 +1 @@
+ï»¿  Project [36;1mTargetFramework[m [120G[7D (0.0s)
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.TargetIsTruncatedFirst.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.TargetIsTruncatedFirst.verified.txt
new file mode 100644
index 00000000000..014bb0cb3be
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.TargetIsTruncatedFirst.verified.txt
@@ -0,0 +1 @@
+ï»¿  Namespace.Project [36;1mTargetFramework[m [120G[7D (0.0s)
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChanges.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChanges.verified.txt
new file mode 100644
index 00000000000..c76bd410799
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChanges.verified.txt
@@ -0,0 +1,4 @@
+ï»¿[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[12DBuild (0.0s)
+[2F
+[K  Namespace.Project [36;1mTargetFramework[m [120G[14DTesting (0.0s)
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChangesToColoredTarget.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChangesToColoredTarget.verified.txt
new file mode 100644
index 00000000000..3be7cd9e970
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChangesToColoredTarget.verified.txt
@@ -0,0 +1,4 @@
+ï»¿[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[14DTesting (0.0s)
+[2F
+[K  Namespace.Project [36;1mTargetFramework[m [120G[25D[31;1mfailed[m MyTestName1 (0.0s)
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetUpdatesTime.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetUpdatesTime.verified.txt
new file mode 100644
index 00000000000..5f7a118d89e
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetUpdatesTime.verified.txt
@@ -0,0 +1,4 @@
+ï»¿[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[12DBuild (0.0s)
+[2F
+[120G[6D(0.2s)
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt
new file mode 100644
index 00000000000..70de0fffa5d
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt
@@ -0,0 +1,4 @@
+ï»¿[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[25D[32;1mpassed[m MyTestName1 (0.0s)
+[2F
+[120G[6D(0.2s)
diff --git a/src/MSBuild.UnitTests/StaticStopwatch.cs b/src/MSBuild.UnitTests/StaticStopwatch.cs
new file mode 100644
index 00000000000..c1afad3179c
--- /dev/null
+++ b/src/MSBuild.UnitTests/StaticStopwatch.cs
@@ -0,0 +1,23 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Net.Http.Headers;
+using Microsoft.Build.Logging.TerminalLogger;
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+/// <summary>
+/// Stopwatch that always show the time provided in constructor.
+/// </summary>
+internal sealed class StaticStopwatch : StopwatchAbstraction
+{
+    public StaticStopwatch(double elapsedSeconds)
+    {
+        ElapsedSeconds = elapsedSeconds;
+    }
+
+    public override double ElapsedSeconds { get; }
+
+    public override void Start() => throw new System.NotImplementedException();
+    public override void Stop() => throw new System.NotImplementedException();
+}
diff --git a/src/MSBuild.UnitTests/TickingStopwatch.cs b/src/MSBuild.UnitTests/TickingStopwatch.cs
new file mode 100644
index 00000000000..e0cd213ebeb
--- /dev/null
+++ b/src/MSBuild.UnitTests/TickingStopwatch.cs
@@ -0,0 +1,32 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Logging.TerminalLogger;
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+/// <summary>
+/// Stopwatch that will increase by 0.1, every time you ask them for time. Useful for animations, because they check that NodeStatus
+/// reference stays the same, and also for ensuring we are grabbing the time only once per frame.
+/// </summary>
+internal sealed class TickingStopwatch : StopwatchAbstraction
+{
+    private double _elapsedSeconds;
+
+    public TickingStopwatch(double elapsedSeconds = 0.0)
+    {
+        _elapsedSeconds = elapsedSeconds;
+    }
+
+    public override double ElapsedSeconds
+    {
+        get
+        {
+            var elapsed = _elapsedSeconds;
+            _elapsedSeconds += 0.1;
+            return elapsed;
+        }
+    }
+    public override void Start() => throw new System.NotImplementedException();
+    public override void Stop() => throw new System.NotImplementedException();
+}
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
index 33fbf2c8d42..acdf64a74cd 100644
--- a/src/MSBuild/TerminalLogger/NodesFrame.cs
+++ b/src/MSBuild/TerminalLogger/NodesFrame.cs
@@ -54,11 +54,19 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
         string? targetFramework = status.TargetFramework;
         string target = status.Target;
 
-        int renderedWidth = Length(durationString, project, targetFramework, target);
+        // The target may contain ANSI codes, we need to remove them to get the real
+        // size of the string as it will be printed on the screen, so when we move cursor
+        // backwards we move it by the amount of characters that will be seen by user, and not
+        // by the amount of characters + ANSI codes (that won't be seen).
+        // If we don't remove ANSI codes, the cursor will move too much too the left, and time
+        // time will render before the end of line, instead of at the end of line.
+        var renderedTarget = AnsiCodes.RemoveAnsiCodes(target);
+
+        int renderedWidth = Length(durationString, project, targetFramework, renderedTarget);
 
         if (renderedWidth > Width)
         {
-            renderedWidth -= target.Length;
+            renderedWidth -= renderedTarget.Length;
             target = string.Empty;
 
             if (renderedWidth > Width)
@@ -74,7 +82,7 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
             }
         }
 
-        return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(target.Length + durationString.Length + 1)}{target} {durationString}".AsSpan();
+        return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(renderedTarget.Length + durationString.Length + 1)}{target} {durationString}".AsSpan();
 
         static int Length(string durationString, string project, string? targetFramework, string target) =>
                 TerminalLogger.Indentation.Length +
@@ -92,6 +100,9 @@ public string Render(NodesFrame previousFrame)
         StringBuilder sb = _renderBuilder;
         sb.Clear();
 
+        // Move cursor back to 1st line of nodes.
+        sb.AppendLine($"{AnsiCodes.CSI}{previousFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
+
         int i = 0;
         for (; i < NodesCount; i++)
         {
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 9df37bf6f3d..6b93fa3f6e1 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -856,8 +856,6 @@ internal void DisplayNodes()
         Terminal.Write(AnsiCodes.HideCursor);
         try
         {
-            // Move cursor back to 1st line of nodes.
-            Terminal.WriteLine($"{AnsiCodes.CSI}{_currentFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
             Terminal.Write(rendered);
         }
         finally
