diff --git a/src/Build/Collections/ItemDictionary.cs b/src/Build/Collections/ItemDictionary.cs
index 128ef852825..39834b4dafa 100644
--- a/src/Build/Collections/ItemDictionary.cs
+++ b/src/Build/Collections/ItemDictionary.cs
@@ -172,11 +172,7 @@ IEnumerator IEnumerable.GetEnumerator()
         /// <summary>
         /// Enumerates item lists per each item type under the lock.
         /// </summary>
-        /// <param name="itemTypeCallback">
-        /// A delegate that accepts the item type string and a list of items of that type.
-        /// Will be called for each item type in the list.
-        /// </param>
-        public void EnumerateItemsPerType(Action<string, IEnumerable<T>> itemTypeCallback)
+        public IEnumerable<(string itemType, IEnumerable<T> itemValue)> EnumerateItemsPerType()
         {
             lock (_itemLists)
             {
@@ -188,11 +184,26 @@ public void EnumerateItemsPerType(Action<string, IEnumerable<T>> itemTypeCallbac
                         continue;
                     }
 
-                    itemTypeCallback(itemTypeBucket.Key, itemTypeBucket.Value);
+                    yield return (itemTypeBucket.Key, itemTypeBucket.Value);
                 }
             }
         }
 
+        /// <summary>
+        /// Enumerates item lists per each item type under the lock.
+        /// </summary>
+        /// <param name="itemTypeCallback">
+        /// A delegate that accepts the item type string and a list of items of that type.
+        /// Will be called for each item type in the list.
+        /// </param>
+        public void EnumerateItemsPerType(Action<string, IEnumerable<T>> itemTypeCallback)
+        {
+            foreach (var tuple in EnumerateItemsPerType())
+            {
+                itemTypeCallback(tuple.itemType, tuple.itemValue);
+            }
+        }
+
         #region ItemDictionary<T> Members
 
         /// <summary>
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index c105e12083b..466db6c9bd4 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -529,17 +529,25 @@ internal Dictionary<string, string> ToDictionary()
             }
         }
 
-        internal void Enumerate(Action<string, string> keyValueCallback)
+        internal IEnumerable<(string propertyName, string propertyValue)> Enumerate()
         {
             lock (_properties)
             {
                 foreach (var kvp in (ICollection<T>)_properties)
                 {
-                    keyValueCallback(kvp.Key, EscapingUtilities.UnescapeAll(kvp.EscapedValue));
+                    yield return (kvp.Key, EscapingUtilities.UnescapeAll(kvp.EscapedValue));
                 }
             }
         }
 
+        internal void Enumerate(Action<string, string> keyValueCallback)
+        {
+            foreach (var tuple in Enumerate())
+            {
+                keyValueCallback(tuple.propertyName, tuple.propertyValue);
+            }
+        }
+
         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)
         {
             List<TResult> result = new();
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
new file mode 100644
index 00000000000..96abf529b9f
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -0,0 +1,54 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging;
+
+/// <summary>
+/// Helper extension methods for working with data passed via
+/// <see cref="ProjectEvaluationFinishedEventArgs"/> and <see cref="ProjectStartedEventArgs"/>
+/// </summary>
+public static class BuildEventArgsExtensions
+{
+    /// <summary>
+    /// Lazy enumerates and strong types properties from Properties property.
+    /// </summary>
+    public static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(
+        this ProjectEvaluationFinishedEventArgs eventArgs)
+        => EnumerateProperties(eventArgs.Properties);
+
+    /// <summary>
+    /// Lazy enumerates and strong types properties from Properties property.
+    /// </summary>
+    public static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(
+        this ProjectStartedEventArgs eventArgs)
+        => EnumerateProperties(eventArgs.Properties);
+
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property.
+    /// The actual item value is of nongeneric <see cref="object"/> type.
+    /// The actual type need to be inferred during runtime based on the itemType.
+    /// </summary>
+    public static IEnumerable<(string itemType, object itemValue)> EnumerateItems(
+        this ProjectEvaluationFinishedEventArgs eventArgs)
+        => EnumerateItems(eventArgs.Items);
+
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property.
+    /// The actual item value is of nongeneric <see cref="object"/> type.
+    /// The actual type need to be inferred during runtime based on the itemType.
+    /// </summary>
+    public static IEnumerable<(string itemType, object itemValue)> EnumerateItems(
+        this ProjectStartedEventArgs eventArgs)
+        => EnumerateItems(eventArgs.Items);
+
+    private static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable? properties)
+        => Internal.Utilities.EnumerateProperties(properties);
+
+    private static IEnumerable<(string itemType, object itemValue)> EnumerateItems(IEnumerable? items)
+        => Internal.Utilities.EnumerateItems(items);
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 24471d364ba..5697c631b25 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -170,6 +170,7 @@
     <Compile Include="FileAccess\ReportedFileOperation.cs" />
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
+    <Compile Include="Logging\BinaryLogger\BuildEventArgsExtensions.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index a4859ae234a..a22c13596ab 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -9,6 +9,7 @@
 using System.Linq;
 using System.Text.RegularExpressions;
 using System.Xml;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
@@ -623,46 +624,45 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)
             return enumerator.ToEnumerable().ToArray();
         }
 
-        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)
+        public static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable properties)
         {
             if (properties == null)
             {
-                return;
+                return [];
             }
 
             if (properties is PropertyDictionary<ProjectPropertyInstance> propertyInstanceDictionary)
             {
-                propertyInstanceDictionary.Enumerate((key, value) =>
-                {
-                    callback(arg, new KeyValuePair<string, string>(key, value));
-                });
+                return propertyInstanceDictionary.Enumerate();
             }
             else if (properties is PropertyDictionary<ProjectProperty> propertyDictionary)
             {
-                propertyDictionary.Enumerate((key, value) =>
-                {
-                    callback(arg, new KeyValuePair<string, string>(key, value));
-                });
+                return propertyDictionary.Enumerate();
             }
             else
             {
-                foreach (var item in properties)
+                return CastOneByOne(properties);
+            }
+
+            IEnumerable<(string propertyName, string propertyValue)> CastOneByOne(IEnumerable props)
+            {
+                foreach (var item in props)
                 {
                     if (item is IProperty property && !string.IsNullOrEmpty(property.Name))
                     {
-                        callback(arg, new KeyValuePair<string, string>(property.Name, property.EvaluatedValue ?? string.Empty));
+                        yield return (property.Name, property.EvaluatedValue ?? string.Empty);
                     }
                     else if (item is DictionaryEntry dictionaryEntry && dictionaryEntry.Key is string key && !string.IsNullOrEmpty(key))
                     {
-                        callback(arg, new KeyValuePair<string, string>(key, dictionaryEntry.Value as string ?? string.Empty));
+                        yield return (key, dictionaryEntry.Value as string ?? string.Empty);
                     }
                     else if (item is KeyValuePair<string, string> kvp)
                     {
-                        callback(arg, kvp);
+                        yield return (kvp.Key, kvp.Value);
                     }
                     else if (item is KeyValuePair<string, TimeSpan> keyTimeSpanValue)
                     {
-                        callback(arg, new KeyValuePair<string, string>(keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString()));
+                        yield return (keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString());
                     }
                     else
                     {
@@ -679,31 +679,37 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             }
         }
 
-        public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> callback)
+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)
         {
+            foreach (var tuple in EnumerateProperties(properties))
+            {
+                callback(arg, new KeyValuePair<string, string>(tuple.propertyName, tuple.propertyValue));
+            }
+        }
+
+        public static IEnumerable<(string itemType, object itemValue)> EnumerateItems(IEnumerable items)
+        {
+            if (items == null)
+            {
+                return [];
+            }
+
             if (items is ItemDictionary<ProjectItemInstance> projectItemInstanceDictionary)
             {
-                projectItemInstanceDictionary.EnumerateItemsPerType((itemType, itemList) =>
-                {
-                    foreach (var item in itemList)
-                    {
-                        callback(new DictionaryEntry(itemType, item));
-                    }
-                });
+                return projectItemInstanceDictionary.EnumerateItemsPerType().Select(t => (t.itemType, (object) t.itemValue));
             }
             else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
             {
-                projectItemDictionary.EnumerateItemsPerType((itemType, itemList) =>
-                {
-                    foreach (var item in itemList)
-                    {
-                        callback(new DictionaryEntry(itemType, item));
-                    }
-                });
+                return projectItemDictionary.EnumerateItemsPerType().Select(t => (t.itemType, (object)t.itemValue));
             }
             else
             {
-                foreach (var item in items)
+                return CastOneByOne(items);
+            }
+
+            IEnumerable<(string itemType, object itemValue)> CastOneByOne(IEnumerable itms)
+            {
+                foreach (var item in itms)
                 {
                     string itemType = default;
                     object itemValue = null;
@@ -732,10 +738,18 @@ public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> cal
 
                     if (!String.IsNullOrEmpty(itemType))
                     {
-                        callback(new DictionaryEntry(itemType, itemValue));
+                        yield return (itemType, itemValue);
                     }
                 }
             }
         }
+
+        public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> callback)
+        {
+            foreach (var tuple in EnumerateItems(items))
+            {
+                callback(new DictionaryEntry(tuple.itemType, tuple.itemValue));
+            }
+        }
     }
 }
