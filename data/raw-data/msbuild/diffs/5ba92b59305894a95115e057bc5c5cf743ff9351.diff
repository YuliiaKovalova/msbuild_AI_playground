diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index 4517bb7c85a..3531f223967 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -416,20 +416,20 @@ internal class EventHandlerHelper
             internal EventHandlerHelper(IEventSource source, Exception exceptionToThrow)
             {
                 _exceptionInHandlers = exceptionToThrow;
-                source.AnyEventRaised += new AnyEventHandler(Source_AnyEventRaised);
-                source.BuildFinished += new BuildFinishedEventHandler(Source_BuildFinished);
-                source.BuildStarted += new BuildStartedEventHandler(Source_BuildStarted);
-                source.CustomEventRaised += new CustomBuildEventHandler(Source_CustomEventRaised);
-                source.ErrorRaised += new BuildErrorEventHandler(Source_ErrorRaised);
-                source.MessageRaised += new BuildMessageEventHandler(Source_MessageRaised);
-                source.ProjectFinished += new ProjectFinishedEventHandler(Source_ProjectFinished);
-                source.ProjectStarted += new ProjectStartedEventHandler(Source_ProjectStarted);
-                source.StatusEventRaised += new BuildStatusEventHandler(Source_StatusEventRaised);
-                source.TargetFinished += new TargetFinishedEventHandler(Source_TargetFinished);
-                source.TargetStarted += new TargetStartedEventHandler(Source_TargetStarted);
-                source.TaskFinished += new TaskFinishedEventHandler(Source_TaskFinished);
-                source.TaskStarted += new TaskStartedEventHandler(Source_TaskStarted);
-                source.WarningRaised += new BuildWarningEventHandler(Source_WarningRaised);
+                source.AnyEventRaised += Source_AnyEventRaised;
+                source.BuildFinished += Source_BuildFinished;
+                source.BuildStarted += Source_BuildStarted;
+                source.CustomEventRaised += Source_CustomEventRaised;
+                source.ErrorRaised += Source_ErrorRaised;
+                source.MessageRaised += Source_MessageRaised;
+                source.ProjectFinished += Source_ProjectFinished;
+                source.ProjectStarted += Source_ProjectStarted;
+                source.StatusEventRaised += Source_StatusEventRaised;
+                source.TargetFinished += Source_TargetFinished;
+                source.TargetStarted += Source_TargetStarted;
+                source.TaskFinished += Source_TaskFinished;
+                source.TaskStarted += Source_TaskStarted;
+                source.WarningRaised += Source_WarningRaised;
             }
             #endregion
 
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index 2162e074edb..ac467d52435 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -1343,7 +1343,7 @@ internal int BuildFinishedCount
             public void Initialize(IEventSource eventSource)
             {
                 eventSource.AnyEventRaised +=
-                        new AnyEventHandler(LoggerEventHandler);
+                         LoggerEventHandler;
             }
 
             /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index ff501e2f2b8..22857075913 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -1134,11 +1134,11 @@ public string Parameters
             /// </summary>
             public void Initialize(IEventSource eventSource)
             {
-                eventSource.ErrorRaised += new BuildErrorEventHandler(MyCustomErrorHandler);
-                eventSource.WarningRaised += new BuildWarningEventHandler(MyCustomWarningHandler);
-                eventSource.MessageRaised += new BuildMessageEventHandler(MyCustomMessageHandler);
-                eventSource.CustomEventRaised += new CustomBuildEventHandler(MyCustomBuildHandler);
-                eventSource.AnyEventRaised += new AnyEventHandler(EventSource_AnyEventRaised);
+                eventSource.ErrorRaised += MyCustomErrorHandler;
+                eventSource.WarningRaised += MyCustomWarningHandler;
+                eventSource.MessageRaised += MyCustomMessageHandler;
+                eventSource.CustomEventRaised += MyCustomBuildHandler;
+                eventSource.AnyEventRaised += EventSource_AnyEventRaised;
             }
 
             /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs b/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
index 835fd726971..4d7f258974e 100644
--- a/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
+++ b/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
@@ -81,7 +81,7 @@ public void Initialize(IEventSource eventSource, int nodeCount)
         public void Initialize(IEventSource eventSource)
         {
             ErrorUtilities.VerifyThrow(eventSource != null, "eventSource is null");
-            eventSource.AnyEventRaised += new AnyEventHandler(EventSource_AnyEventRaised);
+            eventSource.AnyEventRaised += EventSource_AnyEventRaised;
 
             IEventSource2 eventSource2 = eventSource as IEventSource2;
             if (eventSource2 != null)
diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 6b04b3cf31f..56973a62818 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -171,19 +171,19 @@ public virtual void Initialize(IEventSource eventSource)
                 SetForwardingBasedOnVerbosity();
             }
 
-            eventSource.BuildStarted += new BuildStartedEventHandler(BuildStartedHandler);
-            eventSource.BuildFinished += new BuildFinishedEventHandler(BuildFinishedHandler);
-            eventSource.ProjectStarted += new ProjectStartedEventHandler(ProjectStartedHandler);
-            eventSource.ProjectFinished += new ProjectFinishedEventHandler(ProjectFinishedHandler);
-            eventSource.TargetStarted += new TargetStartedEventHandler(TargetStartedHandler);
-            eventSource.TargetFinished += new TargetFinishedEventHandler(TargetFinishedHandler);
-            eventSource.TaskStarted += new TaskStartedEventHandler(TaskStartedHandler);
-            eventSource.TaskFinished += new TaskFinishedEventHandler(TaskFinishedHandler);
-            eventSource.ErrorRaised += new BuildErrorEventHandler(ErrorHandler);
-            eventSource.WarningRaised += new BuildWarningEventHandler(WarningHandler);
-            eventSource.MessageRaised += new BuildMessageEventHandler(MessageHandler);
-            eventSource.CustomEventRaised += new CustomBuildEventHandler(CustomEventHandler);
-            eventSource.StatusEventRaised += new BuildStatusEventHandler(BuildStatusHandler);
+            eventSource.BuildStarted += BuildStartedHandler;
+            eventSource.BuildFinished += BuildFinishedHandler;
+            eventSource.ProjectStarted += ProjectStartedHandler;
+            eventSource.ProjectFinished += ProjectFinishedHandler;
+            eventSource.TargetStarted += TargetStartedHandler;
+            eventSource.TargetFinished += TargetFinishedHandler;
+            eventSource.TaskStarted += TaskStartedHandler;
+            eventSource.TaskFinished += TaskFinishedHandler;
+            eventSource.ErrorRaised += ErrorHandler;
+            eventSource.WarningRaised += WarningHandler;
+            eventSource.MessageRaised += MessageHandler;
+            eventSource.CustomEventRaised += CustomEventHandler;
+            eventSource.StatusEventRaised += BuildStatusHandler;
         }
 
         /// <summary>
diff --git a/src/Build/Logging/NullCentralLogger.cs b/src/Build/Logging/NullCentralLogger.cs
index 7f5eb1d4d58..9e65359edac 100644
--- a/src/Build/Logging/NullCentralLogger.cs
+++ b/src/Build/Logging/NullCentralLogger.cs
@@ -49,7 +49,7 @@ public string Parameters
         #region Methods
         public void Initialize(IEventSource eventSource, int nodeCount)
         {
-            eventSource.AnyEventRaised += new AnyEventHandler(AnyEventRaisedHandler);
+            eventSource.AnyEventRaised += AnyEventRaisedHandler;
         }
 
         public void AnyEventRaisedHandler(object sender, BuildEventArgs e)
diff --git a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
index 11401822424..03811168da2 100644
--- a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
+++ b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
@@ -113,7 +113,7 @@ string projectFile
             XmlReaderSettings validatorSettings = new XmlReaderSettings();
             validatorSettings.ValidationType = ValidationType.Schema;
             validatorSettings.XmlResolver = null;
-            validatorSettings.ValidationEventHandler += new ValidationEventHandler(this.OnSchemaValidationError);
+            validatorSettings.ValidationEventHandler += this.OnSchemaValidationError;
             
             if ((schemaFile == null) || (schemaFile.Length == 0))
             {
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNode.cs b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
index 4b071b8da18..73fdb915a95 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNode.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
@@ -28,7 +28,7 @@ public class LocalNode
         static LocalNode()
         {
             AppDomain currentDomain = AppDomain.CurrentDomain;
-            currentDomain.UnhandledException += new UnhandledExceptionEventHandler(UnhandledExceptionHandler);
+            currentDomain.UnhandledException += UnhandledExceptionHandler;
         }
         #endregion
 
diff --git a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
index eb841f4102b..ee027863c82 100644
--- a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
@@ -868,31 +868,31 @@ public virtual void Initialize(IEventSource eventSource)
             if (eventSource != null)
             {
                 eventSource.BuildStarted +=
-                        new BuildStartedEventHandler(BuildStartedHandler);
+                         BuildStartedHandler;
                 eventSource.BuildFinished +=
-                        new BuildFinishedEventHandler(BuildFinishedHandler);
+                         BuildFinishedHandler;
                 eventSource.ProjectStarted +=
-                        new ProjectStartedEventHandler(ProjectStartedHandler);
+                         ProjectStartedHandler;
                 eventSource.ProjectFinished +=
-                        new ProjectFinishedEventHandler(ProjectFinishedHandler);
+                         ProjectFinishedHandler;
                 eventSource.TargetStarted +=
-                        new TargetStartedEventHandler(TargetStartedHandler);
+                         TargetStartedHandler;
                 eventSource.TargetFinished +=
-                        new TargetFinishedEventHandler(TargetFinishedHandler);
+                         TargetFinishedHandler;
                 eventSource.TaskStarted +=
-                        new TaskStartedEventHandler(TaskStartedHandler);
+                         TaskStartedHandler;
                 eventSource.TaskFinished +=
-                        new TaskFinishedEventHandler(TaskFinishedHandler);
+                         TaskFinishedHandler;
 
                 eventSource.ErrorRaised +=
-                        new BuildErrorEventHandler(ErrorHandler);
+                         ErrorHandler;
                 eventSource.WarningRaised +=
-                        new BuildWarningEventHandler(WarningHandler);
+                         WarningHandler;
                 eventSource.MessageRaised +=
-                        new BuildMessageEventHandler(MessageHandler);
+                         MessageHandler;
 
                 eventSource.CustomEventRaised +=
-                        new CustomBuildEventHandler(CustomEventHandler);
+                         CustomEventHandler;
             }
         }
 
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index ce9d5ab068c..7ee72a75c8d 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -167,18 +167,18 @@ public virtual void Initialize(IEventSource eventSource)
                 SetForwardingBasedOnVerbosity();
             }
 
-            eventSource.BuildStarted += new BuildStartedEventHandler(BuildStartedHandler);
-            eventSource.BuildFinished += new BuildFinishedEventHandler(BuildFinishedHandler);
-            eventSource.ProjectStarted += new ProjectStartedEventHandler(ProjectStartedHandler);
-            eventSource.ProjectFinished += new ProjectFinishedEventHandler(ProjectFinishedHandler);
-            eventSource.TargetStarted += new TargetStartedEventHandler(TargetStartedHandler);
-            eventSource.TargetFinished += new TargetFinishedEventHandler(TargetFinishedHandler);
-            eventSource.TaskStarted += new TaskStartedEventHandler(TaskStartedHandler);
-            eventSource.TaskFinished += new TaskFinishedEventHandler(TaskFinishedHandler);
-            eventSource.ErrorRaised += new BuildErrorEventHandler(ErrorHandler);
-            eventSource.WarningRaised += new BuildWarningEventHandler(WarningHandler);
-            eventSource.MessageRaised += new BuildMessageEventHandler(MessageHandler);
-            eventSource.CustomEventRaised += new CustomBuildEventHandler(CustomEventHandler);
+            eventSource.BuildStarted += BuildStartedHandler;
+            eventSource.BuildFinished += BuildFinishedHandler;
+            eventSource.ProjectStarted += ProjectStartedHandler;
+            eventSource.ProjectFinished += ProjectFinishedHandler;
+            eventSource.TargetStarted += TargetStartedHandler;
+            eventSource.TargetFinished += TargetFinishedHandler;
+            eventSource.TaskStarted += TaskStartedHandler;
+            eventSource.TaskFinished += TaskFinishedHandler;
+            eventSource.ErrorRaised += ErrorHandler;
+            eventSource.WarningRaised += WarningHandler;
+            eventSource.MessageRaised += MessageHandler;
+            eventSource.CustomEventRaised += CustomEventHandler;
         }
 
         /// <summary>
diff --git a/src/Deprecated/Engine/Logging/FileLogger.cs b/src/Deprecated/Engine/Logging/FileLogger.cs
index 80c7e610897..baf2a2a9a89 100644
--- a/src/Deprecated/Engine/Logging/FileLogger.cs
+++ b/src/Deprecated/Engine/Logging/FileLogger.cs
@@ -46,7 +46,7 @@ public FileLogger() : base(LoggerVerbosity.Normal)
         public override void Initialize(IEventSource eventSource)
         {
             ErrorUtilities.VerifyThrowArgumentNull(eventSource, "eventSource");
-            eventSource.BuildFinished += new BuildFinishedEventHandler(FileLoggerBuildFinished);
+            eventSource.BuildFinished += FileLoggerBuildFinished;
             InitializeFileLogger(eventSource, 1);
         }
 
diff --git a/src/Deprecated/Engine/Logging/NullCentralLogger.cs b/src/Deprecated/Engine/Logging/NullCentralLogger.cs
index 62ea0223c28..7e187e96839 100644
--- a/src/Deprecated/Engine/Logging/NullCentralLogger.cs
+++ b/src/Deprecated/Engine/Logging/NullCentralLogger.cs
@@ -49,7 +49,7 @@ public string Parameters
         #region Methods
         public void Initialize(IEventSource eventSource, int nodeCount)
         {
-            eventSource.AnyEventRaised += new AnyEventHandler(AnyEventRaisedHandler);
+            eventSource.AnyEventRaised += AnyEventRaisedHandler;
         }
 
         public void AnyEventRaisedHandler(object sender, BuildEventArgs e)
diff --git a/src/MSBuild/ProjectSchemaValidationHandler.cs b/src/MSBuild/ProjectSchemaValidationHandler.cs
index 89a92070750..ab552477e57 100644
--- a/src/MSBuild/ProjectSchemaValidationHandler.cs
+++ b/src/MSBuild/ProjectSchemaValidationHandler.cs
@@ -86,7 +86,7 @@ string schemaFile
             XmlReaderSettings validatorSettings = new XmlReaderSettings();
             validatorSettings.ValidationType = ValidationType.Schema;
             validatorSettings.XmlResolver = null;
-            validatorSettings.ValidationEventHandler += new ValidationEventHandler(this.OnSchemaValidationError);
+            validatorSettings.ValidationEventHandler += this.OnSchemaValidationError;
 
             XmlTextReader schemaReader = new XmlTextReader(schemaFile);
             schemaReader.DtdProcessing = DtdProcessing.Ignore;
diff --git a/src/Samples/TaskUsageLogger/TaskUsageLogger.cs b/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
index bf28365a775..be374631b4d 100644
--- a/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
+++ b/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
@@ -64,10 +64,10 @@ public override void Initialize(IEventSource eventSource)
         {
             ProcessParameters();
 
-            eventSource.ProjectStarted += new ProjectStartedEventHandler(HandleProjectStarted);
-            eventSource.TargetStarted += new TargetStartedEventHandler(HandleTargetStarted);
-            eventSource.TaskStarted += new TaskStartedEventHandler(HandleTaskStarted);
-            eventSource.BuildFinished += new BuildFinishedEventHandler(HandleBuildFinished);
+            eventSource.ProjectStarted += HandleProjectStarted;
+            eventSource.TargetStarted += HandleTargetStarted;
+            eventSource.TaskStarted += HandleTaskStarted;
+            eventSource.BuildFinished += HandleBuildFinished;
 
             _targetIdsToNames = new Dictionary<int, string>();
             _tasks = new HashSet<TaskData>();
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index 620a0aba57a..3e85e65d579 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -115,7 +115,7 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
 
 #if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
                         // Hook up last minute dumping of any exceptions 
-                        taskAppDomain.UnhandledException += new UnhandledExceptionEventHandler(ExceptionHandling.UnhandledExceptionHandler);
+                        taskAppDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
 #endif
                     }
                 }
