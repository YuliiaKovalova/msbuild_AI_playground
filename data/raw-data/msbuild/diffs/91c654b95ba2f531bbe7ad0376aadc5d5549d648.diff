diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index b1cc84a6c33..b0f4511f937 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -45,14 +45,6 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
         private const string ComparerName = "Comparer"; // Do not rename (binary serialization)
         private const string VersionName = "Version"; // Do not rename (binary serialization)
 
-        /// <summary>
-        /// When constructing a hashset from an existing collection, it may contain duplicates,
-        /// so this is used as the max acceptable excess ratio of capacity to count. Note that
-        /// this is only used on the ctor and not to automatically shrink if the hashset has, e.g,
-        /// a lot of adds followed by removes. Users must explicitly shrink by calling TrimExcess.
-        /// This is set to 3 because capacity is acceptable as 2x rounded up to nearest prime.
-        /// </summary>
-        private const int ShrinkThreshold = 3;
         private const int StartOfFreeList = -3;
 
         private int[] _buckets;
@@ -109,6 +101,13 @@ public RetrievableEntryHashSet(IEnumerable<T> collection, IEqualityComparer<stri
                     AddOrReplace(item);
                 }
 
+                // When constructing a hashset from an existing collection, it may contain duplicates,
+                // so this is used as the max acceptable excess ratio of capacity to count. Note that
+                // this is only used on the ctor and not to automatically shrink if the hashset has, e.g,
+                // a lot of adds followed by removes. Users must explicitly shrink by calling TrimExcess.
+                // This is set to 3 because capacity is acceptable as 2x rounded up to nearest prime.
+                const int ShrinkThreshold = 3;
+
                 if (_count > 0 && _entries.Length / _count > ShrinkThreshold)
                 {
                     TrimExcess();
