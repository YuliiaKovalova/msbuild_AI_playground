diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 78d9daf990c..1a983e55571 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -201,30 +201,24 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
             // Let's send it outside the packet pump so that we easier and quicker deal with possible issues with connection to server.
             MSBuildEventSource.Log.MSBuildServerBuildStart(descriptiveCommandLine);
             IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
-            if (!TrySendBuildCommand())
+            if (TrySendBuildCommand())
             {
-                if (_originalConsoleMode is not null)
-                {
-                    NativeMethodsShared.SetConsoleMode(stdOut, _originalConsoleMode.Value);
-                }
-
-                return _exitResult;
-            }
+                _numConsoleWritePackets = 0;
+                _sizeOfConsoleWritePackets = 0;
 
-            _numConsoleWritePackets = 0;
-            _sizeOfConsoleWritePackets = 0;
+                ReadPacketsLoop(cancellationToken);
 
-            ReadPacketsLoop(cancellationToken);
-
-            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
-            CommunicationsUtilities.Trace("Build finished.");
+                MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
+                CommunicationsUtilities.Trace("Build finished.");
+            }
 
-            if (_originalConsoleMode is not null)
+            if (NativeMethodsShared.IsWindows && _originalConsoleMode is not null)
             {
                 NativeMethodsShared.SetConsoleMode(stdOut, _originalConsoleMode.Value);
             }
 
             return _exitResult;
+
         }
 
         /// <summary>
