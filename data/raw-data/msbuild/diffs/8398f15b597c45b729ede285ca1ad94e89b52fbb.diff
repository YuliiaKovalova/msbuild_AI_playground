diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index f9184127aa7..10f12ced880 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -32,9 +32,9 @@ public BuildCheckResult(CheckRule checkConfig, IMSBuildElementLocation location,
     internal BuildEventArgs ToEventArgs(CheckResultSeverity severity)
         => severity switch
         {
-            CheckResultSeverity.Suggestion => new BuildCheckResultMessage(this),
-            CheckResultSeverity.Warning => new BuildCheckResultWarning(this, CheckRule.Id),
-            CheckResultSeverity.Error => new BuildCheckResultError(this, CheckRule.Id),
+            CheckResultSeverity.Suggestion => new BuildCheckResultMessage(FormatMessage()),
+            CheckResultSeverity.Warning => new BuildCheckResultWarning(FormatMessage(), CheckRule.Id),
+            CheckResultSeverity.Error => new BuildCheckResultError(FormatMessage(), CheckRule.Id),
             _ => throw new ArgumentOutOfRangeException(nameof(severity), severity, null),
         };
 
@@ -48,6 +48,7 @@ internal BuildEventArgs ToEventArgs(CheckResultSeverity severity)
     public string LocationString => Location.LocationString;
 
     public string[] MessageArgs { get; }
+
     public string MessageFormat => CheckRule.MessageFormat;
 
     // Here we will provide different link for built-in rules and custom rules - once we have the base classes differentiated.
diff --git a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
index bcd4fa2434d..d2bc80bcd14 100644
--- a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
+++ b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Construction;
@@ -22,7 +23,7 @@ internal sealed class NoEnvironmentVariablePropertyCheck : Check, IDisposable
 
     private const string VerboseEnvVariableOutputKey = "allow_displaying_environment_variable_value";
 
-    private readonly List<BuildCheckResult> _buildCheckResults = new List<BuildCheckResult>();
+    private readonly Stack<BuildCheckResult> _buildCheckResults = new Stack<BuildCheckResult>();
 
     private BuildCheckDataContext<EnvironmentVariableCheckData>? _dataContext;
 
@@ -49,8 +50,9 @@ public override void Initialize(ConfigurationContext configurationContext)
 
         CheckScopeClassifier.NotifyOnScopingReadiness += (string? projectFilePath) =>
         {
-            foreach (BuildCheckResult result in _buildCheckResults)
+            while (_buildCheckResults.Count > 0)
             {
+                BuildCheckResult result = _buildCheckResults.Pop();
                 if (!CheckScopeClassifier.IsActionInObservedScope(_scope, result.Location.File, projectFilePath ?? string.Empty))
                 {
                     continue;
@@ -67,31 +69,34 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Environm
     {
         if (context.Data.EvaluatedEnvironmentVariables.Count != 0)
         {
-            foreach (var envVariableData in context.Data.EvaluatedEnvironmentVariables)
+            foreach (KeyValuePair<string, (string EnvVarValue, IMSBuildElementLocation Location)> envVariableData in context.Data.EvaluatedEnvironmentVariables)
             {
                 EnvironmentVariableIdentityKey identityKey = new(envVariableData.Key, envVariableData.Value.Location);
                 if (!_environmentVariablesReported.Contains(identityKey))
                 {
-                    if (_isVerboseEnvVarOutput)
+                    string buildCheckResultMessageArgs = _isVerboseEnvVarOutput ? $"'{envVariableData.Key}' with value: '{envVariableData.Value.EnvVarValue}'" : $"'{envVariableData.Key}'";
+
+                    // Scope information is available after evaluation of the project file. If it is not ready, we will report the check later.
+                    if (CheckScopeClassifier.IsScopingReady && CheckScopeClassifier.IsActionInObservedScope(_scope, envVariableData.Value.Location.File, context.Data.ProjectFilePath ?? string.Empty))
                     {
-                        _buildCheckResults.Add(BuildCheckResult.Create(
+                        context.ReportResult(BuildCheckResult.Create(
                             SupportedRule,
                             ElementLocation.Create(envVariableData.Value.Location.File, envVariableData.Value.Location.Line, envVariableData.Value.Location.Column),
-                            $"'{envVariableData.Key}' with value: '{envVariableData.Value.EnvVarValue}'"));
+                            buildCheckResultMessageArgs));
                     }
                     else
                     {
-                        _buildCheckResults.Add(BuildCheckResult.Create(
+                        _dataContext = context;
+
+                        _buildCheckResults.Push(BuildCheckResult.Create(
                             SupportedRule,
                             ElementLocation.Create(envVariableData.Value.Location.File, envVariableData.Value.Location.Line, envVariableData.Value.Location.Column),
-                            $"'{envVariableData.Key}'"));
+                            buildCheckResultMessageArgs));
                     }
 
                     _environmentVariablesReported.Add(identityKey);
                 }
             }
-
-            _dataContext = context;
         }
     }
 
diff --git a/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs b/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
index 20014e96890..6a862946e8b 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
@@ -12,6 +12,8 @@ internal class CheckScopeClassifier : IDisposable
 {
     internal static event Action<string?>? NotifyOnScopingReadiness;
 
+    internal static bool IsScopingReady;
+
     /// <summary>
     /// Indicates whether given location is in the observed scope, based on currently built project path.
     /// </summary>
@@ -55,7 +57,11 @@ internal static bool IsActionInObservedScope(
         }
     }
 
-    internal static void RaiseNotifyOnScopingReadiness(string? projectFilePath) => NotifyOnScopingReadiness?.Invoke(projectFilePath);
+    internal static void RaiseNotifyOnScopingReadiness(string? projectFilePath)
+    {
+        IsScopingReady = true;
+        NotifyOnScopingReadiness?.Invoke(projectFilePath);
+    }
 
     private static bool IsGeneratedNugetImport(string file) => file.EndsWith("nuget.g.props", StringComparison.OrdinalIgnoreCase) ||
         file.EndsWith("nuget.g.targets", StringComparison.OrdinalIgnoreCase);
diff --git a/src/Build/CompatibilitySuppressions.xml b/src/Build/CompatibilitySuppressions.xml
index 17d4b54af0f..cc1bffde2ab 100644
--- a/src/Build/CompatibilitySuppressions.xml
+++ b/src/Build/CompatibilitySuppressions.xml
@@ -484,6 +484,13 @@
     <Right>lib/net472/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0006</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEnvironmentVariableReadAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EnvironmentVariableCheckData}})</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0006</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesCheckData}})</Target>
@@ -512,6 +519,13 @@
     <Right>lib/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0006</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEnvironmentVariableReadAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EnvironmentVariableCheckData}})</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0006</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesCheckData}})</Target>
@@ -540,6 +554,13 @@
     <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0006</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEnvironmentVariableReadAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EnvironmentVariableCheckData}})</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0006</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesCheckData}})</Target>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 394d752372b..afda13dd6e5 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -40,6 +40,11 @@ public enum BinaryLogRecordKind
         TaskParameter,
         ResponseFileUsed,
         AssemblyLoad,
+        BuildCheckMessage,
+        BuildCheckWarning,
+        BuildCheckError,
+        BuildCheckTracing,
+        BuildCheckAcquisition,
         BuildSubmissionStarted,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 9bbf41c3050..69f7c0580d3 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -13,6 +13,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
@@ -319,6 +320,11 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
                 BinaryLogRecordKind.PropertyInitialValueSet => ReadPropertyInitialValueSetEventArgs(),
                 BinaryLogRecordKind.AssemblyLoad => ReadAssemblyLoadEventArgs(),
+                BinaryLogRecordKind.BuildCheckMessage => ReadBuildCheckMessageEventArgs(),
+                BinaryLogRecordKind.BuildCheckWarning => ReadBuildCheckWarningEventArgs(),
+                BinaryLogRecordKind.BuildCheckError => ReadBuildCheckErrorEventArgs(),
+                BinaryLogRecordKind.BuildCheckTracing => ReadBuildCheckTracingEventArgs(),
+                BinaryLogRecordKind.BuildCheckAcquisition => ReadBuildCheckAcquisitionEventArgs(),
                 _ => null
             };
 
@@ -500,6 +506,7 @@ private IDictionary<string, string> GetNameValueList(int id)
         }
 
         private readonly StringReadEventArgs stringReadEventArgs = new StringReadEventArgs(string.Empty);
+
         private void ReadStringRecord()
         {
             string text = ReadString();
@@ -1235,6 +1242,43 @@ private AssemblyLoadBuildEventArgs ReadAssemblyLoadEventArgs()
             return e;
         }
 
+        private BuildEventArgs ReadBuildCheckEventArgs<T>(Func<BuildEventArgsFields, string, T> createEvent) where T : BuildEventArgs
+        {
+            var fields = ReadBuildEventArgsFields(readImportance: true);
+            var rawMessage = ReadDeduplicatedString() ?? string.Empty;
+            var e = createEvent(fields, rawMessage);
+            SetCommonFields(e, fields);
+            return e;
+        }
+
+        private BuildEventArgs ReadBuildCheckMessageEventArgs() => ReadBuildCheckEventArgs((_, rawMessage) => new BuildCheckResultMessage(rawMessage));
+
+        private BuildEventArgs ReadBuildCheckWarningEventArgs() => ReadBuildCheckEventArgs((fields, rawMessage) => new BuildCheckResultWarning(rawMessage, fields.Code));
+
+        private BuildEventArgs ReadBuildCheckErrorEventArgs() => ReadBuildCheckEventArgs((fields, rawMessage) => new BuildCheckResultError(rawMessage, fields.Code));
+
+        private BuildEventArgs ReadBuildCheckTracingEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields(readImportance: true);
+            var rawTracingData = ReadStringDictionary() ?? new Dictionary<string, string>();
+
+            var e = new BuildCheckTracingEventArgs(rawTracingData.ToDictionary(
+                kvp => kvp.Key,
+                kvp => TimeSpan.FromTicks(long.Parse(kvp.Value))));
+            SetCommonFields(e, fields);
+            return e;
+        }
+
+        private BuildEventArgs ReadBuildCheckAcquisitionEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields(readImportance: true);
+            var acquisitionPath = ReadString();
+            var projectPath = ReadString();
+            var e = new BuildCheckAcquisitionEventArgs(acquisitionPath, projectPath);
+            SetCommonFields(e, fields);
+            return e;
+        }
+
         /// <summary>
         /// For errors and warnings these 8 fields are written out explicitly
         /// (their presence is not marked as a bit in the flags). So we have to
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index d2b6850df6b..9e57eaa31a8 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -11,9 +12,9 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
-using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.NET.StringTools;
 
@@ -217,6 +218,8 @@ private BinaryLogRecordKind WriteCore(BuildEventArgs e)
                 case BuildFinishedEventArgs buildFinished: return Write(buildFinished);
                 case ProjectEvaluationStartedEventArgs projectEvaluationStarted: return Write(projectEvaluationStarted);
                 case ProjectEvaluationFinishedEventArgs projectEvaluationFinished: return Write(projectEvaluationFinished);
+                case BuildCheckTracingEventArgs buildCheckTracing: return Write(buildCheckTracing);
+                case BuildCheckAcquisitionEventArgs buildCheckAcquisition: return Write(buildCheckAcquisition);
                 default:
                     // convert all unrecognized objects to message
                     // and just preserve the message
@@ -312,6 +315,48 @@ private BinaryLogRecordKind Write(ProjectEvaluationStartedEventArgs e)
             return BinaryLogRecordKind.ProjectEvaluationStarted;
         }
 
+        private BinaryLogRecordKind Write(BuildCheckResultMessage e)
+        {
+            WriteBuildEventArgsFields(e, writeMessage: true);
+            WriteDeduplicatedString(e.RawMessage);
+
+            return BinaryLogRecordKind.BuildCheckMessage;
+        }
+
+        private BinaryLogRecordKind Write(BuildCheckResultWarning e)
+        {
+            WriteBuildEventArgsFields(e, writeMessage: true);
+            WriteDeduplicatedString(e.RawMessage);
+
+            return BinaryLogRecordKind.BuildCheckWarning;
+        }
+
+        private BinaryLogRecordKind Write(BuildCheckResultError e)
+        {
+            Debugger.Launch();
+            WriteBuildEventArgsFields(e, writeMessage: false);
+            WriteDeduplicatedString(e.RawMessage);
+
+            return BinaryLogRecordKind.BuildCheckError;
+        }
+
+        private BinaryLogRecordKind Write(BuildCheckTracingEventArgs e)
+        {
+            WriteBuildEventArgsFields(e, writeMessage: false);
+            WriteProperties(e.TracingData);
+
+            return BinaryLogRecordKind.BuildCheckTracing;
+        }
+
+        private BinaryLogRecordKind Write(BuildCheckAcquisitionEventArgs e)
+        {
+            WriteBuildEventArgsFields(e, writeMessage: false);
+            WriteDeduplicatedString(e.AcquisitionPath);
+            WriteDeduplicatedString(e.ProjectPath);
+
+            return BinaryLogRecordKind.BuildCheckAcquisition;
+        }
+
         private BinaryLogRecordKind Write(ProjectEvaluationFinishedEventArgs e)
         {
             WriteBuildEventArgsFields(e, writeMessage: false);
@@ -450,6 +495,11 @@ private BinaryLogRecordKind Write(BuildErrorEventArgs e)
             Write(e.EndLineNumber);
             Write(e.EndColumnNumber);
 
+            if (e is BuildCheckResultError buildCheckError)
+            {
+                return Write(buildCheckError);
+            }
+
             return BinaryLogRecordKind.Error;
         }
 
@@ -466,6 +516,11 @@ private BinaryLogRecordKind Write(BuildWarningEventArgs e)
             Write(e.EndLineNumber);
             Write(e.EndColumnNumber);
 
+            if (e is BuildCheckResultWarning buildCheckWarning)
+            {
+                return Write(buildCheckWarning);
+            }
+
             return BinaryLogRecordKind.Warning;
         }
 
@@ -484,6 +539,8 @@ private BinaryLogRecordKind Write(BuildMessageEventArgs e)
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: return Write(propertyInitialValueSet);
                 case CriticalBuildMessageEventArgs criticalBuildMessage: return Write(criticalBuildMessage);
                 case AssemblyLoadBuildEventArgs assemblyLoad: return Write(assemblyLoad);
+                case BuildCheckResultMessage buildCheckMessage: return Write(buildCheckMessage);
+
                 default: // actual BuildMessageEventArgs
                     WriteMessageFields(e, writeImportance: true);
                     return BinaryLogRecordKind.Message;
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index e8bf893be60..a4859ae234a 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -660,6 +660,10 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                     {
                         callback(arg, kvp);
                     }
+                    else if (item is KeyValuePair<string, TimeSpan> keyTimeSpanValue)
+                    {
+                        callback(arg, new KeyValuePair<string, string>(keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString()));
+                    }
                     else
                     {
                         if (item == null)
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 389941c27f9..81f6ea2ed8d 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -233,10 +233,10 @@ public void SampleCheckIntegrationTest_CheckOnBinaryLogReplay(bool buildInOutOfP
     }
 
     [Theory]
-    [InlineData(null, "Property is derived from environment variable: 'TEST'. Properties should be passed explicitly using the /p option.")]
-    [InlineData(true, "Property is derived from environment variable: 'TEST' with value: 'FromEnvVariable'. Properties should be passed explicitly using the /p option.")]
-    [InlineData(false, "Property is derived from environment variable: 'TEST'. Properties should be passed explicitly using the /p option.")]
-    public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string expectedMessage)
+    [InlineData(null, new[] { "Property is derived from environment variable: 'TestFromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation'." } )]
+    [InlineData(true, new[] { "Property is derived from environment variable: 'TestFromTarget' with value 'FromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation' with value 'FromEvaluation'." })]
+    [InlineData(false, new[] { "Property is derived from environment variable: 'TestFromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation'." } )]
+    public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string[] expectedMessages)
     {
         List<(string RuleId, (string ConfigKey, string Value) CustomConfig)>? customConfigData = null;
 
@@ -257,7 +257,10 @@ public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
             $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -check", out bool success, false, _env.Output);
 
-        output.ShouldContain(expectedMessage);
+        foreach (string expectedMessage in expectedMessages)
+        {
+            output.ShouldContain(expectedMessage);
+        }
     }
 
     [Theory]
@@ -351,10 +354,10 @@ public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleI
                 checkCandidatePath));
 
             string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n", out bool _, timeoutMilliseconds: 1200_0000);
+                $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n", out bool _);
 
             projectCheckBuildLog.ShouldContain(expectedMessage);
-            
+
             // Cleanup
             File.Delete(editorConfigName);
         }
@@ -444,7 +447,9 @@ private void PrepareSampleProjectsAndConfig(
         _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", buildInOutOfProcessNode ? "1" : "0");
         _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "1");
 
-        _env.SetEnvironmentVariable("TEST", "FromEnvVariable");
+        // Needed for testing check BC0103
+        _env.SetEnvironmentVariable("TestFromTarget", "FromTarget");
+        _env.SetEnvironmentVariable("TestFromEvaluation", "FromEvaluation");
         _env.SetEnvironmentVariable("TestImported", "FromEnv");
 
         string ReadAndAdjustProjectContent(string fileName) =>
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1 b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1
index 4412879248c..11132015792 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1
@@ -13,13 +13,17 @@
        <TestProperty>Test</TestProperty>
    </PropertyGroup>
 
+    <PropertyGroup>
+        <ReadFromEnv>$(TestFromEvaluation)</ReadFromEnv>
+    </PropertyGroup>
+
    <Target Name="Hello">
        <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
        <Copy SourceFiles="TestFilePath" DestinationFolder="WorkFolderPath" />
        <MSBuild Projects=".\FooBar-Copy.csproj" Targets="Hello" />
 
        <PropertyGroup>
-         <ReadFromEnvVariable>$(TEST)</ReadFromEnvVariable>
+         <ReadFromEnvVariable>$(TestFromTarget)</ReadFromEnvVariable>
        </PropertyGroup>
 
        <Message Importance="High" Text="$(ReadFromEnvVariable)" />
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 4b4e95960c6..7368ce84a61 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -4,9 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -30,10 +27,7 @@ internal BuildCheckTracingEventArgs()
     {
     }
 
-    internal BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> data, bool isAggregatedGlobalReport) : this(data)
-    {
-        IsAggregatedGlobalReport = isAggregatedGlobalReport;
-    }
+    internal BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> data, bool isAggregatedGlobalReport) : this(data) => IsAggregatedGlobalReport = isAggregatedGlobalReport;
 
     /// <summary>
     /// When true, the tracing information is from the whole build for logging purposes
@@ -112,11 +106,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
 internal sealed class BuildCheckResultWarning : BuildWarningEventArgs
 {
-    public BuildCheckResultWarning(IBuildCheckResult result, string code)
-        : base(subcategory: null, code: code, file: null, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: result.FormatMessage(), helpKeyword: null, senderName: null)
-    {
-        RawMessage = result.FormatMessage();
-    }
+    public BuildCheckResultWarning(string formattedMessage, string code)
+        : base(subcategory: null, code: code, file: null, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: formattedMessage, helpKeyword: null, senderName: null) => RawMessage = formattedMessage;
 
     internal BuildCheckResultWarning() { }
 
@@ -137,11 +128,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
 internal sealed class BuildCheckResultError : BuildErrorEventArgs
 {
-    public BuildCheckResultError(IBuildCheckResult result, string code)
-        : base(subcategory: null, code: code, file: null, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: result.FormatMessage(), helpKeyword: null, senderName: null)
-    {
-        RawMessage = result.FormatMessage();
-    }
+    public BuildCheckResultError(string formattedMessage, string code)
+        : base(subcategory: null, code: code, file: null, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: formattedMessage, helpKeyword: null, senderName: null) => RawMessage = formattedMessage;
 
     internal BuildCheckResultError() { }
 
@@ -162,10 +150,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
 internal sealed class BuildCheckResultMessage : BuildMessageEventArgs
 {
-    public BuildCheckResultMessage(IBuildCheckResult result)
-    {
-        RawMessage = result.FormatMessage();
-    }
+    public BuildCheckResultMessage(string formattedMessage) => RawMessage = formattedMessage;
 
     internal BuildCheckResultMessage() { }
 
