diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index e5889735023..92eab998994 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -296,17 +296,14 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source, IEl
             var args = new PropertyInitialValueSetEventArgs(
                                     property.Name,
                                     property.EvaluatedValue,
-                                    source.ToString(),
+
+                                    // If the property is from XML, we don't need property source since a full location is available.
+                                    location == null ? EnumUtilities.GetEnumString(source) : string.Empty,
                                     location?.File,
                                     location?.Line ?? 0,
                                     location?.Column ?? 0,
-                                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
-                                        "PropertyAssignment",
-                                        property.Name,
-                                        property.EvaluatedValue,
-                                        location?.LocationString ?? source.ToString()));
-
-            args.BuildEventContext = _evaluationLoggingContext.BuildEventContext;
+                                    ResourceUtilities.GetResourceString("PropertyAssignment"))
+            { BuildEventContext = _evaluationLoggingContext.BuildEventContext, };
 
             _evaluationLoggingContext.LogBuildEvent(args);
         }
@@ -343,7 +340,7 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
                         oldValue,
                         newValue,
                         location?.LocationString,
-                        message: null)
+                        message: ResourceUtilities.GetResourceString("PropertyReassignment"))
                 { BuildEventContext = _evaluationLoggingContext.BuildEventContext, };
 
                 _evaluationLoggingContext.LogBuildEvent(args);
@@ -363,15 +360,20 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
         /// <summary>
         /// Determines the source of a property given the variables SetProperty arguments provided. This logic follows what's in <see cref="Evaluator{P,I,M,D}"/>.
         /// </summary>
-        private PropertySource DeterminePropertySource(bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable, bool isCommandLineProperty) =>
-            (isGlobalProperty, mayBeReserved, isEnvironmentVariable, isCommandLineProperty) switch
+        private PropertySource DeterminePropertySource(bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable, bool isCommandLineProperty)
+        {
+            if (isEnvironmentVariable)
+            {
+                return PropertySource.EnvironmentVariable;
+            }
+
+            if (isGlobalProperty)
             {
-                (true, _, _, false) => PropertySource.Global,
-                (_, true, _, _) => PropertySource.BuiltIn,
-                (_, _, true, _) => PropertySource.EnvironmentVariable,
-                (true, _, _, true) => PropertySource.CommandLine,
-                _ => PropertySource.Toolset,
-            };
+                return isCommandLineProperty ? PropertySource.CommandLine : PropertySource.Global;
+            }
+
+            return mayBeReserved ? PropertySource.BuiltIn : PropertySource.Toolset;
+        }
 
         #endregion
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 7b95b38a8af..51fd327d59e 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -58,6 +58,9 @@
   </ItemGroup>
 
   <ItemGroup>
+    <Compile Include="..\Shared\EnumUtilities.cs">
+      <Link>SharedUtilities\EnumUtilities.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\EnvironmentUtilities.cs">
       <Link>SharedUtilities\EnvironmentUtilities.cs</Link>
     </Compile>
diff --git a/src/Shared/EnumUtilities.cs b/src/Shared/EnumUtilities.cs
new file mode 100644
index 00000000000..256e87ef81a
--- /dev/null
+++ b/src/Shared/EnumUtilities.cs
@@ -0,0 +1,25 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Shared
+{
+    public static class EnumUtilities
+    {
+        private static readonly Dictionary<Enum, string> _enumStringCache = [];
+
+        public static string GetEnumString(Enum value)
+        {
+            if (_enumStringCache.TryGetValue(value, out string? stringValue))
+            {
+                return stringValue;
+            }
+
+            _enumStringCache[value] = value.ToString();
+
+            return _enumStringCache[value];
+        }
+    }
+}
