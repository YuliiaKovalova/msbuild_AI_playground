diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index c0871fc11ab..9d481a020ac 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1,12 +1,5 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-namespace Microsoft.Build.BackEnd
-{
-    public partial class CircularDependencyException : System.Exception
-    {
-        public CircularDependencyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-    }
-}
 namespace Microsoft.Build.Construction
 {
     public abstract partial class ElementLocation
@@ -896,6 +889,10 @@ public BuildAbortedException(string message, System.Exception innerException) {
         [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, SerializationFormatter=true)]
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
     }
+    public partial class CircularDependencyException : System.Exception
+    {
+        protected CircularDependencyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
+    }
     public sealed partial class InternalLoggerException : System.Exception
     {
         public InternalLoggerException() { }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index 5951d38e2bc..705dfafe932 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1,12 +1,5 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-namespace Microsoft.Build.BackEnd
-{
-    public partial class CircularDependencyException : System.Exception
-    {
-        public CircularDependencyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-    }
-}
 namespace Microsoft.Build.Construction
 {
     public abstract partial class ElementLocation
@@ -895,6 +888,10 @@ public BuildAbortedException(string message, System.Exception innerException) {
         public string ErrorCode { get { throw null; } }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
     }
+    public partial class CircularDependencyException : System.Exception
+    {
+        protected CircularDependencyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
+    }
     public sealed partial class InternalLoggerException : System.Exception
     {
         public InternalLoggerException() { }
diff --git a/src/Build/BackEnd/Shared/CircularDependencyException.cs b/src/Build/BackEnd/Shared/CircularDependencyException.cs
index a1281601b40..d8765b2e968 100644
--- a/src/Build/BackEnd/Shared/CircularDependencyException.cs
+++ b/src/Build/BackEnd/Shared/CircularDependencyException.cs
@@ -4,7 +4,7 @@
 using System;
 using System.Runtime.Serialization;
 
-namespace Microsoft.Build.BackEnd
+namespace Microsoft.Build.Exceptions
 {
     /// <summary>
     /// An exception representing the case where a BuildRequest has caused a circular project dependency.  This is used to
@@ -31,7 +31,7 @@ internal CircularDependencyException(string message)
         /// <summary>
         /// Constructor for deserialization.
         /// </summary>
-        public CircularDependencyException(SerializationInfo info, StreamingContext context)
+        protected CircularDependencyException(SerializationInfo info, StreamingContext context)
             : base(info, context)
         {
         }
