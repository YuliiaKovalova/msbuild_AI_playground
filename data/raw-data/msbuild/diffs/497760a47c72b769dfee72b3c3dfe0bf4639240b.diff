diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index fce4c51b159..bfa2eb58ec4 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -7,9 +7,11 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+using System.Text;
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
@@ -235,10 +237,14 @@ public enum ErrorKind
 
         public class ConfigurableMockCache : ProjectCachePluginBase
         {
+            public Func<CacheContext, PluginLoggerBase, CancellationToken, Task>? BeginBuildImplementation { get; set; }
             public Func<BuildRequestData, PluginLoggerBase, CancellationToken, Task<CacheResult>>? GetCacheResultImplementation { get; set; }
+
             public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logger, CancellationToken cancellationToken)
             {
-                return Task.CompletedTask;
+                return BeginBuildImplementation != null
+                    ? BeginBuildImplementation(context, logger, cancellationToken)
+                    : Task.CompletedTask;
             }
 
             public override Task<CacheResult> GetCacheResultAsync(
@@ -538,6 +544,10 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
                 BuildManager.ProjectCacheItems.ShouldBeEmpty();
 
                 var graph = testData.CreateGraph(_env);
+                var projectPaths = graph.ProjectNodes.Select(n => n.ProjectInstance.FullPath).ToArray();
+
+                // VS sets this global property on every project it builds.
+                var solutionConfigurationGlobalProperty = CreateSolutionConfigurationProperty(projectPaths);
 
                 BuildManager.ProjectCacheItems.ShouldHaveSingleItem();
 
@@ -549,7 +559,11 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
                     var buildResult = buildSession.BuildProjectFile(
                         node.ProjectInstance.FullPath,
                         globalProperties:
-                            new Dictionary<string, string> {{"SolutionPath", graph.GraphRoots.First().ProjectInstance.FullPath}});
+                            new Dictionary<string, string>
+                            {
+                                { SolutionProjectGenerator.SolutionPathPropertyName, graph.GraphRoots.First().ProjectInstance.FullPath },
+                                { SolutionProjectGenerator.CurrentSolutionConfigurationContents, solutionConfigurationGlobalProperty }
+                            });
 
                     buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
 
@@ -559,6 +573,16 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
                 buildSession.Logger.FullLog.ShouldContain("Visual Studio Workaround based");
                 buildSession.Logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
 
+                // Ensure MSBuild passes config / platform information set by VS.
+                foreach (var projectPath in projectPaths)
+                {
+                    var projectName = Path.GetFileNameWithoutExtension(projectPath);
+
+                    buildSession.Logger.FullLog.ShouldContain($"EntryPoint: {projectPath}");
+                    buildSession.Logger.FullLog.ShouldContain($"Configuration={projectName}Debug");
+                    buildSession.Logger.FullLog.ShouldContain($"Platform={projectName}x64");
+                }
+
                 AssertCacheBuild(graph, testData, null, buildSession.Logger, nodesToBuildResults);
             }
             finally
@@ -568,6 +592,23 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
             }
         }
 
+        private static string CreateSolutionConfigurationProperty(string[] projectPaths)
+        {
+            var sb = new StringBuilder();
+
+            sb.AppendLine("<SolutionConfiguration>");
+
+            foreach (var projectPath in projectPaths)
+            {
+                var projectName = Path.GetFileNameWithoutExtension(projectPath);
+                sb.AppendLine($"<ProjectConfiguration Project=\"{Guid.NewGuid()}\" AbsolutePath=\"{projectPath}\">{projectName}Debug|{projectName}x64</ProjectConfiguration>");
+            }
+
+            sb.AppendLine("</SolutionConfiguration>");
+
+            return sb.ToString();
+        }
+
         [Fact]
         public void DesignTimeBuildsDuringVsWorkaroundShouldDisableTheCache()
         {
@@ -963,7 +1004,7 @@ public void GraphBuildErrorsIfMultiplePluginsAreFound()
             using var buildSession = new Helpers.BuildManagerSession(_env);
 
             var graphResult = buildSession.BuildGraph(graph);
-
+            
             graphResult.OverallResult.ShouldBe(BuildResultCode.Failure);
             graphResult.Exception.Message.ShouldContain("A single project cache plugin must be specified but multiple where found:");
         }
@@ -992,7 +1033,7 @@ public void GraphBuildErrorsIfNotAllNodeDefineAPlugin()
             using var buildSession = new Helpers.BuildManagerSession(_env);
 
             var graphResult = buildSession.BuildGraph(graph);
-
+            
             graphResult.OverallResult.ShouldBe(BuildResultCode.Failure);
             graphResult.Exception.Message.ShouldContain("When any static graph node defines a project cache, all nodes must define the same project cache.");
         }
@@ -1383,6 +1424,9 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
                 // Even though the assembly cache is discovered, we'll be overriding it with a descriptor based cache.
                 BuildManager.ProjectCacheItems.ShouldHaveSingleItem();
 
+                var solutionConfigurationGlobalProperty =
+                    CreateSolutionConfigurationProperty(graph.ProjectNodes.Select(n => n.ProjectInstance.FullPath).ToArray());
+
                 using var buildSession = new Helpers.BuildManagerSession(_env, new BuildParameters
                 {
                     MaxNodeCount = NativeMethodsShared.GetLogicalCoreCount(),
@@ -1397,7 +1441,11 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
                     var buildResultTask = buildSession.BuildProjectFileAsync(
                         node.ProjectInstance.FullPath,
                         globalProperties:
-                        new Dictionary<string, string> { { "SolutionPath", graph.GraphRoots.First().ProjectInstance.FullPath } });
+                        new Dictionary<string, string>
+                        {
+                            { SolutionProjectGenerator.SolutionPathPropertyName, graph.GraphRoots.First().ProjectInstance.FullPath },
+                            { SolutionProjectGenerator.CurrentSolutionConfigurationContents, solutionConfigurationGlobalProperty }
+                        });
 
                     buildResultTasks.Add(buildResultTask);
                 }
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index bbd383cfe9b..4b47d291bfc 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -49,6 +49,11 @@ internal class SolutionProjectGenerator
         private const string WebProjectOverrideFolder = "_PublishedWebsites";
 #endif // FEATURE_ASPNET_COMPILER
 
+        /// <summary>
+        /// Property set by VS when building projects. It's an XML containing the project configurations for ALL projects in the solution for the currently selected solution configuration.
+        /// </summary>
+        internal const string CurrentSolutionConfigurationContents = nameof(CurrentSolutionConfigurationContents);
+
         /// <summary>
         /// The set of properties all projects in the solution should be built with
         /// </summary>
diff --git a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index 7f049a6c699..f306f9e8f8f 100644
--- a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -2,12 +2,13 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Diagnostics;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Graph;
 using Shouldly;
 
 namespace MockCacheFromAssembly
@@ -23,6 +24,15 @@ public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logg
         {
             logger.LogMessage($"{nameof(AssemblyMockCache)}: BeginBuildAsync", MessageImportance.High);
 
+            foreach (var ep in context.GraphEntryPoints ?? Enumerable.Empty<ProjectGraphEntryPoint>())
+            {
+                var globalPropertyString = ep.GlobalProperties is not null
+                    ? string.Join(", ", ep.GlobalProperties.Select(gp => $"{gp.Key}={gp.Value}"))
+                    : string.Empty;
+
+                logger.LogMessage($"EntryPoint: {ep.ProjectFile} ({globalPropertyString})");
+            }
+
             ErrorFrom(nameof(BeginBuildAsync), logger);
 
             return Task.CompletedTask;
