diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..bc271faec76 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -105,7 +105,7 @@
     <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
     <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
     <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
-    <Rule Id="CA1835" Action="Info" />             <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
+    <Rule Id="CA1835" Action="Warning" />          <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
     <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
     <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
     <Rule Id="CA1838" Action="Info" />             <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 487080a3dff..b5e7ae076f0 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -463,7 +463,7 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte
             int totalBytesRead = 0;
             while (totalBytesRead < bytesToRead)
             {
-                int bytesRead = await stream.ReadAsync(buffer, totalBytesRead, bytesToRead - totalBytesRead);
+                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), new CancellationToken());
                 if (bytesRead == 0)
                 {
                     return totalBytesRead;
