diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index a6def9edc4b..25f2505924b 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -918,7 +918,7 @@ public ResolveAssemblyReference() { }
         public bool Silent { get { throw null; } set { } }
         public string StateFile { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] SuggestedRedirects { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
+        public Microsoft.Build.Framework.ITaskItem[] SuggestedRedirects { get { throw null; } }
         public bool SupportsBindingRedirectGeneration { get { throw null; } set { } }
         public string TargetedRuntimeVersion { get { throw null; } set { } }
         public string[] TargetFrameworkDirectories { get { throw null; } set { } }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index a138bf415e0..134c900c763 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -576,7 +576,7 @@ public ResolveAssemblyReference() { }
         public bool Silent { get { throw null; } set { } }
         public string StateFile { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] SuggestedRedirects { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
+        public Microsoft.Build.Framework.ITaskItem[] SuggestedRedirects { get { throw null; } }
         public bool SupportsBindingRedirectGeneration { get { throw null; } set { } }
         public string TargetedRuntimeVersion { get { throw null; } set { } }
         public string[] TargetFrameworkDirectories { get { throw null; } set { } }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index f410f85e447..f038b9b844f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -706,6 +706,10 @@ out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
         /// <summary>
         /// Determines if the target needs to be built/rebuilt/skipped if it has discrete outputs.
         /// </summary>
+        /// <param name="itemVectorsInTargetInputs"></param>
+        /// <param name="itemVectorTransformsInTargetInputs"></param>
+        /// <param name="discreteItemsInTargetInputs"></param>
+        /// <param name="targetOutputItemSpecs"></param>
         /// <returns>Indication of how to build the target.</returns>
         private DependencyAnalysisResult PerformDependencyAnalysisIfDiscreteOutputs
         (
@@ -715,14 +719,14 @@ private DependencyAnalysisResult PerformDependencyAnalysisIfDiscreteOutputs
             List<string> targetOutputItemSpecs
         )
         {
-            DependencyAnalysisResult result;
+            DependencyAnalysisResult result = DependencyAnalysisResult.SkipUpToDate;
 
             List<string> targetInputItemSpecs = GetItemSpecsFromItemVectors(itemVectorsInTargetInputs);
             targetInputItemSpecs.AddRange(GetItemSpecsFromItemVectors(itemVectorTransformsInTargetInputs));
             targetInputItemSpecs.AddRange(discreteItemsInTargetInputs.Values);
 
-            List<string> inputs = CollectionHelpers.RemoveNulls(targetInputItemSpecs);
-            List<string> outputs = CollectionHelpers.RemoveNulls(targetOutputItemSpecs);
+            List<string> inputs = CollectionHelpers.RemoveNulls<string>(targetInputItemSpecs);
+            List<string> outputs = CollectionHelpers.RemoveNulls<string>(targetOutputItemSpecs);
 
             if (inputs.Count == 0)
             {
@@ -735,7 +739,8 @@ List<string> targetOutputItemSpecs
             }
 
             // if any input is newer than any output, do a full build
-            bool someOutOfDate = IsAnyOutOfDate(out DependencyAnalysisLogDetail dependencyAnalysisDetailEntry, _project.Directory, inputs, outputs);
+            DependencyAnalysisLogDetail dependencyAnalysisDetailEntry;
+            bool someOutOfDate = IsAnyOutOfDate(out dependencyAnalysisDetailEntry, _project.Directory, inputs, outputs);
 
             if (someOutOfDate)
             {
@@ -889,6 +894,11 @@ private static List<string> GetItemSpecsFromItemVectors(ItemVectorPartitionColle
         /// <summary>
         /// Finds the differences in the keys between the two given hashtables.
         /// </summary>
+        /// <param name="h1"></param>
+        /// <param name="h2"></param>
+        /// <param name="commonKeys"></param>
+        /// <param name="uniqueKeysInH1"></param>
+        /// <param name="uniqueKeysInH2"></param>
         private static void DiffHashtables<K, V>(IDictionary<K, V> h1, IDictionary<K, V> h2, out List<K> commonKeys, out List<K> uniqueKeysInH1, out List<K> uniqueKeysInH2) where K : class, IEquatable<K> where V : class
         {
             commonKeys = new List<K>();
@@ -1201,22 +1211,22 @@ private int CompareLastWriteTimes(string path1, string path2, out bool path1Does
         #endregion
 
         // the project whose target we are analyzing.
-        private readonly ProjectInstance _project;
+        private ProjectInstance _project;
         // the target to analyze
-        private readonly ProjectTargetInstance _targetToAnalyze;
+        private ProjectTargetInstance _targetToAnalyze;
 
         // the value of the target's "Inputs" attribute
-        private readonly string _targetInputSpecification;
+        private string _targetInputSpecification;
         // the value of the target's "Outputs" attribute
-        private readonly string _targetOutputSpecification;
+        private string _targetOutputSpecification;
 
         // Details of the dependency analysis for logging
         private readonly List<DependencyAnalysisLogDetail> _dependencyAnalysisDetail = new List<DependencyAnalysisLogDetail>();
 
         // Engine logging service which to log message to
-        private readonly ILoggingService _loggingService;
+        private ILoggingService _loggingService;
         // Event context information where event is raised from
-        private readonly BuildEventContext _buildEventContext;
+        private BuildEventContext _buildEventContext;
 
         /// <summary>
         /// By default we do not sort target inputs and outputs as it has significant perf impact.
@@ -1227,13 +1237,13 @@ private int CompareLastWriteTimes(string path1, string path2, out bool path1Does
         /// <summary>
         /// The unique target inputs.
         /// </summary>
-        private readonly IDictionary<string, object> _uniqueTargetInputs =
+        private IDictionary<string, object> _uniqueTargetInputs =
                    (s_sortInputsOutputs ? (IDictionary<string, object>)new SortedDictionary<string, object>(StringComparer.OrdinalIgnoreCase) : (IDictionary<string, object>)new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase));
 
         /// <summary>
         /// The unique target outputs.
         /// </summary>
-        private readonly IDictionary<string, object> _uniqueTargetOutputs =
+        private IDictionary<string, object> _uniqueTargetOutputs =
                    (s_sortInputsOutputs ? (IDictionary<string, object>)new SortedDictionary<string, object>(StringComparer.OrdinalIgnoreCase) : (IDictionary<string, object>)new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase));
     }
 
diff --git a/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs b/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
index 7c681f87742..8ab1d5a2d65 100644
--- a/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
@@ -110,10 +110,7 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
         /// <param name="state"></param>
         /// <param name="isFilePath">True if this is afile name and the path should be normalized</param>
         /// <returns>Scalar result</returns>
-        private static string ExpandArgumentForScalarParameter(
-            string function,
-            GenericExpressionNode argumentNode,
-            ConditionEvaluator.IConditionEvaluationState state,
+        private static string ExpandArgumentForScalarParameter(string function, GenericExpressionNode argumentNode, ConditionEvaluator.IConditionEvaluationState state,
             bool isFilePath = true)
         {
             string argument = argumentNode.GetUnexpandedValue(state);
@@ -148,7 +145,7 @@ private static string ExpandArgumentForScalarParameter(
             return expandedValue;
         }
 
-        private static List<string> ExpandArgumentAsFileList(GenericExpressionNode argumentNode, ConditionEvaluator.IConditionEvaluationState state, bool isFilePath = true)
+        private List<string> ExpandArgumentAsFileList(GenericExpressionNode argumentNode, ConditionEvaluator.IConditionEvaluationState state, bool isFilePath = true)
         {
             string argument = argumentNode.GetUnexpandedValue(state);
 
@@ -157,7 +154,8 @@ private static List<string> ExpandArgumentAsFileList(GenericExpressionNode argum
             {
                 argument = FileUtilities.FixFilePath(argument);
             }
-            
+
+
             IList<TaskItem> expanded = state.ExpandIntoTaskItems(argument);
             var expandedCount = expanded.Count;
 
diff --git a/src/Build/Evaluation/Conditionals/Parser.cs b/src/Build/Evaluation/Conditionals/Parser.cs
index a08bb69f08e..6e53b876075 100644
--- a/src/Build/Evaluation/Conditionals/Parser.cs
+++ b/src/Build/Evaluation/Conditionals/Parser.cs
@@ -43,11 +43,11 @@ internal sealed class Parser
         private Scanner _lexer;
         private ParserOptions _options;
         private ElementLocation _elementLocation;
-        internal int errorPosition; // useful for unit tests
+        internal int errorPosition = 0; // useful for unit tests
 
         #region REMOVE_COMPAT_WARNING
 
-        private bool _warnedForExpression;
+        private bool _warnedForExpression = false;
 
         private BuildEventContext _logBuildEventContext;
         /// <summary>
@@ -271,7 +271,7 @@ private OperatorExpressionNode RelationalOperation(string expression)
         private GenericExpressionNode Factor(string expression)
         {
             // Checks for TokenTypes String, Numeric, Property, ItemMetadata, and ItemList.
-            GenericExpressionNode arg = Arg(expression);
+            GenericExpressionNode arg = this.Arg(expression);
 
             // If it's one of those, return it.
             if (arg != null)
diff --git a/src/Tasks/AppConfig/RuntimeSection.cs b/src/Tasks/AppConfig/RuntimeSection.cs
index a78dcdfd35d..0d1e480300f 100644
--- a/src/Tasks/AppConfig/RuntimeSection.cs
+++ b/src/Tasks/AppConfig/RuntimeSection.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     internal sealed class RuntimeSection
     {
-       /// <summary>
+        /// <summary>
         /// The reader is positioned on a &lt;runtime&gt; element--read it.
         /// </summary>
         internal void Read(XmlReader reader)
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index a7d78cf5333..527b53a462e 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -623,12 +623,18 @@ internal ITaskItem PrimarySourceItem
         /// This item shouldn't be passed to compilers and so forth. 
         /// </summary>
         /// <value>'true' if this reference points to a bad image.</value>
-        internal bool IsBadImage { get; private set; }
+        internal bool IsBadImage { get; private set; } = false;
 
         /// <summary>
         ///  If true, then this item conflicted with another item and lost.
         /// </summary>
-        internal bool IsConflictVictim => ConflictVictorName != null;
+        internal bool IsConflictVictim
+        {
+            get
+            {
+                return ConflictVictorName != null;
+            }
+        }
 
         /// <summary>
         /// Add a conflict victim to this reference
@@ -647,12 +653,12 @@ internal List<AssemblyNameExtension> GetConflictVictims()
         }
 
         /// <summary>
-        /// The name of the assembly that won over this reference.
+        ///  The name of the assembly that won over this reference.
         /// </summary>
-        internal AssemblyNameExtension ConflictVictorName { get; set; }
+        internal AssemblyNameExtension ConflictVictorName { get; set; } = null;
 
         /// <summary>
-        /// The reason why this reference lost to another reference.
+        ///  The reason why this reference lost to another reference.
         /// </summary>
         internal ConflictLossReason ConflictLossExplanation { get; set; } = ConflictLossReason.DidntLose;
 
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 003638e03c5..e82e235d3a0 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -276,7 +276,7 @@ internal ReferenceTable
             _assemblyMetadataCache = assemblyMetadataCache;
 
             // Set condition for when to check assembly version against the target framework version 
-            _checkAssemblyVersionAgainstTargetFrameworkVersion = unresolveFrameworkAssembliesFromHigherFrameworks || ((_projectTargetFramework ?? s_targetFrameworkVersion_40) <= s_targetFrameworkVersion_40);
+            _checkAssemblyVersionAgainstTargetFrameworkVersion = unresolveFrameworkAssembliesFromHigherFrameworks || ((_projectTargetFramework ?? ReferenceTable.s_targetFrameworkVersion_40) <= ReferenceTable.s_targetFrameworkVersion_40);
 
             // Convert the list of installed SDK's to a dictionary for faster lookup
             _resolvedSDKReferences = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
@@ -532,7 +532,7 @@ ITaskItem referenceAssemblyName
             string itemSpec = referenceAssemblyName.ItemSpec;
             string fusionName = referenceAssemblyName.GetMetadata(ItemMetadataNames.fusionName);
             bool result = MetadataConversionUtilities.TryConvertItemMetadataToBool(referenceAssemblyName, ItemMetadataNames.IgnoreVersionForFrameworkReference, out bool metadataFound);
-            bool ignoreVersionForFrameworkReference;
+            bool ignoreVersionForFrameworkReference = false;
 
             if (metadataFound)
             {
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index d8dc9ea4492..d8f98b53a46 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -51,7 +51,14 @@ public class ResolveAssemblyReference : TaskExtension
         /// <summary>
         /// Cache of system state information, used to optimize performance.
         /// </summary>
-        private SystemState _cache;
+        private SystemState _cache = null;
+
+        /// <summary>
+        /// Construct
+        /// </summary>
+        public ResolveAssemblyReference()
+        {
+        }
 
         #region Properties
 
@@ -80,6 +87,7 @@ public class ResolveAssemblyReference : TaskExtension
         private ITaskItem[] _serializationAssemblyFiles = Array.Empty<TaskItem>();
         private ITaskItem[] _scatterFiles = Array.Empty<TaskItem>();
         private ITaskItem[] _copyLocalFiles = Array.Empty<TaskItem>();
+        private ITaskItem[] _suggestedRedirects = Array.Empty<TaskItem>();
         private string[] _targetFrameworkSubsets = Array.Empty<string>();
         private string[] _fullTargetFrameworkSubsetNames = Array.Empty<string>();
         private string _targetedFrameworkMoniker = String.Empty;
@@ -693,7 +701,11 @@ public string TargetFrameworkMoniker
         /// <summary>
         /// The display name of the target framework moniker, if any. This is only for logging.
         /// </summary>
-        public string TargetFrameworkMonikerDisplayName { get; set; }
+        public string TargetFrameworkMonikerDisplayName
+        {
+            get;
+            set;
+        }
 
         /// <summary>
         /// Provide a set of names which if seen in the TargetFrameworkSubset list will cause the ignoring 
@@ -856,12 +868,15 @@ public ITaskItem[] CopyLocalFiles
         ///  MaxVersion - the maximum version number.
         /// </summary>
         [Output]
-        public ITaskItem[] SuggestedRedirects { get; private set; } = Array.Empty<TaskItem>();
+        public ITaskItem[] SuggestedRedirects
+        {
+            get { return _suggestedRedirects; }
+        }
 
         /// <summary>
         /// Storage for names of all files writen to disk.
         /// </summary>
-        private readonly ArrayList _filesWritten = new ArrayList();
+        private ArrayList _filesWritten = new ArrayList();
 
         /// <summary>
         /// The names of all files written to disk.
@@ -1027,9 +1042,10 @@ quiet at the engine level.
                                         assemblyIdentityAttributes.Add(new XAttribute("name", idealRemappingPartialAssemblyName.Name));
 
                                         // We use "neutral" for "Invariant Language (Invariant Country)" in assembly names.
+                                        var cultureString = idealRemappingPartialAssemblyName.CultureName;
                                         assemblyIdentityAttributes.Add(new XAttribute("culture", String.IsNullOrEmpty(idealRemappingPartialAssemblyName.CultureName) ? "neutral" : idealRemappingPartialAssemblyName.CultureName));
 
-                                        byte[] publicKeyToken = idealRemappingPartialAssemblyName.GetPublicKeyToken();
+                                        var publicKeyToken = idealRemappingPartialAssemblyName.GetPublicKeyToken();
                                         assemblyIdentityAttributes.Add(new XAttribute("publicKeyToken", ResolveAssemblyReference.ByteArrayToString(publicKeyToken)));
 
                                         var node = new XElement(
@@ -1947,8 +1963,9 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                         }
                     }
 
+
                     // Validate the contents of the InstalledAssemblyTables parameter.
-                    AssemblyTableInfo[] installedAssemblyTableInfo = GetInstalledAssemblyTableInfo(_ignoreDefaultInstalledAssemblyTables, _installedAssemblyTables, RedistList.GetRedistListPathsFromDisk, TargetFrameworkDirectories);
+                    AssemblyTableInfo[] installedAssemblyTableInfo = GetInstalledAssemblyTableInfo(_ignoreDefaultInstalledAssemblyTables, _installedAssemblyTables, new GetListPath(RedistList.GetRedistListPathsFromDisk), TargetFrameworkDirectories);
                     AssemblyTableInfo[] whiteListSubsetTableInfo = null;
 
                     InstalledAssemblies installedAssemblies = null;
@@ -2094,7 +2111,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                             : null;
 
                     // Start the table of dependencies with all of the primary references.
-                    var dependencyTable = new ReferenceTable
+                    ReferenceTable dependencyTable = new ReferenceTable
                     (
                         BuildEngine,
                         _findDependencies,
@@ -2143,7 +2160,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                     ArrayList generalResolutionExceptions = new ArrayList();
 
                     subsetOrProfileName = targetingSubset && String.IsNullOrEmpty(_targetedFrameworkMoniker) ? subsetOrProfileName : _targetedFrameworkMoniker;
-                    bool excludedReferencesExist;
+                    bool excludedReferencesExist = false;
 
                     List<DependentAssembly> autoUnifiedRemappedAssemblies = null;
                     List<AssemblyNameReference> autoUnifiedRemappedAssemblyReferences = null;
@@ -2179,6 +2196,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                             dependencyTable.RemoveReferencesMarkedForExclusion(true /* Remove the reference and do not warn*/, subsetOrProfileName);
                         }
 
+
                         // Based on the closure, get a table of ideal remappings needed to 
                         // produce zero conflicts.
                         dependencyTable.ResolveConflicts
@@ -2297,8 +2315,8 @@ out _copyLocalFiles
                         }
                     }
 
-                    DependsOnSystemRuntime = useSystemRuntime.ToString();
-                    DependsOnNETStandard = useNetStandard.ToString();
+                    this.DependsOnSystemRuntime = useSystemRuntime.ToString();
+                    this.DependsOnNETStandard = useNetStandard.ToString();
 
                     WriteStateFile();
 
@@ -2325,7 +2343,7 @@ out _copyLocalFiles
                                 {
                                     assemblyName = getAssemblyName(item.ItemSpec);
                                 }
-                                catch (FileLoadException)
+                                catch (System.IO.FileLoadException)
                                 {
                                     // Its pretty hard to get here, you need an assembly that contains a valid reference
                                     // to a dependent assembly that, in turn, throws a FileLoadException during GetAssemblyName.
@@ -2396,7 +2414,7 @@ out _copyLocalFiles
         /// <param name="getAssemblyMetadata">the delegate to access assembly metadata</param>
         /// <param name="assemblyMetadataCache">Cache of pre-extracted assembly metadata.</param>
         /// <returns>list of dependencies</returns>
-        private static AssemblyNameExtension[] GetDependencies(Reference resolvedReference, FileExists fileExists, GetAssemblyMetadata getAssemblyMetadata, ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache)
+        private AssemblyNameExtension[] GetDependencies(Reference resolvedReference, FileExists fileExists, GetAssemblyMetadata getAssemblyMetadata, ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache)
         {
             AssemblyNameExtension[] result = null;
             if (resolvedReference != null && resolvedReference.IsPrimary && !resolvedReference.IsBadImage)
@@ -2726,7 +2744,7 @@ private void PopulateSuggestedRedirects(List<DependentAssembly> idealAssemblyRem
                     }
                 }
             }
-            SuggestedRedirects = holdSuggestedRedirects.ToArray();
+            _suggestedRedirects = holdSuggestedRedirects.ToArray();
         }
 
         /// <summary>
@@ -2738,7 +2756,7 @@ private void PopulateSuggestedRedirects(List<DependentAssembly> idealAssemblyRem
         /// <returns>Array of AssemblyTableInfo objects (Describe the path and framework directory of a redist or subset list xml file) </returns>
         private AssemblyTableInfo[] GetInstalledAssemblyTableInfo(bool ignoreInstalledAssemblyTables, ITaskItem[] assemblyTables, GetListPath GetAssemblyListPaths, string[] targetFrameworkDirectories)
         {
-            var tableMap = new Dictionary<string, AssemblyTableInfo>(StringComparer.OrdinalIgnoreCase);
+            Dictionary<string, AssemblyTableInfo> tableMap = new Dictionary<string, AssemblyTableInfo>(StringComparer.OrdinalIgnoreCase);
 
             if (!ignoreInstalledAssemblyTables)
             {
@@ -2782,7 +2800,7 @@ private AssemblyTableInfo[] GetInstalledAssemblyTableInfo(bool ignoreInstalledAs
                 tableMap[installedAssemblyTable.ItemSpec] = new AssemblyTableInfo(installedAssemblyTable.ItemSpec, frameworkDirectory);
             }
 
-            var extensions = new AssemblyTableInfo[tableMap.Count];
+            AssemblyTableInfo[] extensions = new AssemblyTableInfo[tableMap.Count];
             tableMap.Values.CopyTo(extensions, 0);
 
             return extensions;
diff --git a/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs b/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs
index 0bd16d486c3..0bb36f483e6 100644
--- a/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs
+++ b/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs
@@ -39,5 +39,10 @@ public IEnumerator GetEnumerator()
         {
             return _list.GetEnumerator();
         }
+
+        internal CompatibleFramework[] ToArray()
+        {
+            return _list.ToArray();
+        }
     }
 }
diff --git a/src/Tasks/RedistList.cs b/src/Tasks/RedistList.cs
index 2b4fba76c6a..23f68c2281c 100644
--- a/src/Tasks/RedistList.cs
+++ b/src/Tasks/RedistList.cs
@@ -939,7 +939,7 @@ internal class SubsetListFinder
         private static Dictionary<string, string[]> s_subsetListPathCache;
 
         // Lock for subsetListPathCache
-        private static readonly object s_subsetListPathCacheLock = new object();
+        private static readonly Object s_subsetListPathCacheLock = new Object();
 
         // Folder to look for the subset lists in under the target framework directories
         private const string subsetListFolder = "SubsetList";
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index d0b314407b2..c41bd0f144a 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -1340,9 +1340,9 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ
 
                         // For testing especially it's nice to have a set order of what the generated appxlocation string will be at the end
                         var architectureLocations = new SortedDictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
-                        var appxLocationComponents = new List<string>();
+                        List<string> appxLocationComponents = new List<string>();
 
-                        foreach (KeyValuePair<string, string> appxLocation in AppxLocationsFromManifest)
+                        foreach (var appxLocation in AppxLocationsFromManifest)
                         {
                             if (!String.IsNullOrEmpty(appxLocation.Key))
                             {
@@ -1400,7 +1400,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ
                             }
                         }
 
-                        foreach (KeyValuePair<string, string> location in architectureLocations)
+                        foreach (var location in architectureLocations)
                         {
                             appxLocationComponents.Add(location.Key);
                             appxLocationComponents.Add(location.Value);
@@ -1434,9 +1434,10 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ
                 ResolvedItem.SetMetadata("Version", Version);
 
                 // Check to see if the copy local metadata has been set in the project file.
-                bool hasExpandReferenceAssemblies = bool.TryParse(ReferenceItem.GetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies), out _);
-                bool hasCopyRedist = bool.TryParse(ReferenceItem.GetMetadata(SDKManifest.Attributes.CopyRedist), out _);
-                bool hasCopyLocalExpandedReferenceAssemblies = bool.TryParse(ReferenceItem.GetMetadata(SDKManifest.Attributes.CopyLocalExpandedReferenceAssemblies), out _);
+                bool result;
+                bool hasExpandReferenceAssemblies = bool.TryParse(ReferenceItem.GetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies), out result);
+                bool hasCopyRedist = bool.TryParse(ReferenceItem.GetMetadata(SDKManifest.Attributes.CopyRedist), out result);
+                bool hasCopyLocalExpandedReferenceAssemblies = bool.TryParse(ReferenceItem.GetMetadata(SDKManifest.Attributes.CopyLocalExpandedReferenceAssemblies), out result);
 
                 bool referenceItemHasSDKName = sdkNamesOnReferenceItems.Contains(SDKName);
 
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 62efbb81fd8..6fcfb7044e4 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -226,12 +226,12 @@ internal static string GetSourceCode(RoslynCodeTaskFactoryTaskInfo taskInfo, ICo
                 codeTypeDeclaration.Members.Add(new CodeSnippetTypeMember(taskInfo.SourceCode));
             }
 
-            var codeNamespace = new CodeNamespace("InlineCode");
+            CodeNamespace codeNamespace = new CodeNamespace("InlineCode");
             codeNamespace.Imports.AddRange(DefaultNamespaces.Union(taskInfo.Namespaces, StringComparer.OrdinalIgnoreCase).Select(i => new CodeNamespaceImport(i)).ToArray());
 
             codeNamespace.Types.Add(codeTypeDeclaration);
 
-            var codeCompileUnit = new CodeCompileUnit();
+            CodeCompileUnit codeCompileUnit = new CodeCompileUnit();
 
             codeCompileUnit.Namespaces.Add(codeNamespace);
 
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index aaa00a4bbe3..ca5df2277c0 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -153,7 +153,7 @@ internal FileState(DateTime lastModified)
             /// </summary>
             internal FileState(SerializationInfo info, StreamingContext context)
             {
-                ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
+                ErrorUtilities.VerifyThrowArgumentNull(info, "info");
 
                 lastModified = new DateTime(info.GetInt64("mod"), (DateTimeKind)info.GetInt32("modk"));
                 assemblyName = (AssemblyNameExtension)info.GetValue("an", typeof(AssemblyNameExtension));
@@ -175,7 +175,7 @@ internal FileState(SerializationInfo info, StreamingContext context)
             [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
             public void GetObjectData(SerializationInfo info, StreamingContext context)
             {
-                ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
+                ErrorUtilities.VerifyThrowArgumentNull(info, "info");
 
                 info.AddValue("mod", lastModified.Ticks);
                 info.AddValue("modk", (int)lastModified.Kind);
@@ -244,7 +244,7 @@ internal SystemState()
         /// </summary>
         internal SystemState(SerializationInfo info, StreamingContext context)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
+            ErrorUtilities.VerifyThrowArgumentNull(info, "info");
 
             instanceLocalFileStateCache = (Hashtable)info.GetValue("fileState", typeof(Hashtable));
             isDirty = false;
@@ -255,6 +255,8 @@ internal SystemState(SerializationInfo info, StreamingContext context)
         /// This is used to optimize IO in the case of files requested from one 
         /// of the FX folders.
         /// </summary>
+        /// <param name="providedFrameworkPaths"></param>
+        /// <param name="installedAssemblyTables"></param>
         internal void SetInstalledAssemblyInformation
         (
             AssemblyTableInfo[] installedAssemblyTableInfos
@@ -269,7 +271,7 @@ AssemblyTableInfo[] installedAssemblyTableInfos
         [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
         public void GetObjectData(SerializationInfo info, StreamingContext context)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
+            ErrorUtilities.VerifyThrowArgumentNull(info, "info");
 
             info.AddValue("fileState", instanceLocalFileStateCache);
         }
@@ -379,14 +381,15 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
         {
             // Is it in the process-wide cache?
             FileState cacheFileState = null;
-            s_processWideFileStateCache.TryGetValue(path, out FileState processFileState);
-            FileState instanceLocalFileState = (FileState)instanceLocalFileStateCache[path];
+            FileState processFileState = null;
+            s_processWideFileStateCache.TryGetValue(path, out processFileState);
+            FileState instanceLocalFileState = instanceLocalFileState = (FileState)instanceLocalFileStateCache[path];
 
             // Sync the caches.
             if (processFileState == null && instanceLocalFileState != null)
             {
                 cacheFileState = instanceLocalFileState;
-                s_processWideFileStateCache[path] = instanceLocalFileState;
+                SystemState.s_processWideFileStateCache[path] = instanceLocalFileState;
             }
             else if (processFileState != null && instanceLocalFileState == null)
             {
@@ -403,7 +406,7 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
                 else
                 {
                     cacheFileState = instanceLocalFileState;
-                    s_processWideFileStateCache[path] = instanceLocalFileState;
+                    SystemState.s_processWideFileStateCache[path] = instanceLocalFileState;
                 }
             }
 
@@ -412,7 +415,7 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
             {
                 cacheFileState = new FileState(getLastWriteTime(path));
                 instanceLocalFileStateCache[path] = cacheFileState;
-                s_processWideFileStateCache[path] = cacheFileState;
+                SystemState.s_processWideFileStateCache[path] = cacheFileState;
                 isDirty = true;
             }
             else
@@ -423,7 +426,7 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
                 {
                     cacheFileState = new FileState(getLastWriteTime(path));
                     instanceLocalFileStateCache[path] = cacheFileState;
-                    s_processWideFileStateCache[path] = cacheFileState;
+                    SystemState.s_processWideFileStateCache[path] = cacheFileState;
                     isDirty = true;
                 }
             }
@@ -431,6 +434,32 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
             return cacheFileState;
         }
 
+        private FileState GetFileStateFromProcessWideCache(string path, FileState template)
+        {
+            // When reading from the process-wide cache, we always check to see if our data
+            // is up-to-date to avoid getting stale data from a previous build.
+            DateTime lastModified = getLastWriteTime(path);
+
+            // Has another build seen this file before?
+            FileState state;
+            if (!s_processWideFileStateCache.TryGetValue(path, out state) || state.LastModified != lastModified)
+            {   // We've never seen it before, or we're out of date
+
+                state = CreateFileState(lastModified, template);
+                s_processWideFileStateCache[path] = state;
+            }
+
+            return state;
+        }
+
+        private FileState CreateFileState(DateTime lastModified, FileState template)
+        {
+            if (template != null && template.LastModified == lastModified)
+                return template;    // Our serialized data is up-to-date
+
+            return new FileState(lastModified);
+        }
+
         /// <summary>
         /// Cached implementation of GetAssemblyName.
         /// </summary>
