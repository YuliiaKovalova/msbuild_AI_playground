diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index e32cb633fbc..54507da16dc 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -490,6 +490,19 @@ public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string soluti
             WriteEvent(67, sdkName, solutionPath, projectPath, success);
         }
 
+        [Event(68, Keywords = Keywords.All)]
+        public void ReusableStringBuilderFactoryStart(int hash, int newCapacity, int oldCapacity, string type)
+        {
+            WriteEvent(68, hash, newCapacity, oldCapacity, type);
+        }
+
+        [Event(69, Keywords = Keywords.All)]
+        public void ReusableStringBuilderFactoryStop(int hash, int returningCapacity, string type)
+        {
+            WriteEvent(69, hash, returningCapacity, type);
+        }
+
+
         #endregion
     }
 }
diff --git a/src/Shared/ReuseableStringBuilder.cs b/src/Shared/ReuseableStringBuilder.cs
index 8abf89a0093..77181e97ea5 100644
--- a/src/Shared/ReuseableStringBuilder.cs
+++ b/src/Shared/ReuseableStringBuilder.cs
@@ -8,6 +8,7 @@
 using System.Globalization;
 using System.Text;
 using System.Threading;
+using Microsoft.Build.Eventing;
 
 namespace Microsoft.Build.Shared
 {
@@ -236,6 +237,7 @@ internal static StringBuilder Get(int capacity)
 #endif
                     // Currently loaned out so return a new one
                     returned = new StringBuilder(capacity);
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: returned.GetHashCode(), newCapacity:capacity, oldCapacity:0, type:"missed");
                 }
                 else if (returned.Capacity < capacity)
                 {
@@ -244,8 +246,13 @@ internal static StringBuilder Get(int capacity)
 #endif
                     // It's essential we guarantee the capacity because this
                     // may be used as a buffer to a PInvoke call.
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: returned.GetHashCode(), newCapacity: capacity, oldCapacity: returned.Capacity, type: "reused-inflated");
                     returned.Capacity = capacity;
                 }
+                else
+                {
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: returned.GetHashCode(), newCapacity: capacity, oldCapacity: returned.Capacity, type: "reused");
+                }
 
 #if DEBUG
                 Interlocked.Increment(ref s_hits);
@@ -280,14 +287,20 @@ internal static void Release(StringBuilder returningBuilder)
                     // ErrorUtilities.VerifyThrow(handouts.TryRemove(returningBuilder, out dummy), "returned but not loaned");
                     returningBuilder.Clear(); // Clear before pooling
 
-                    Interlocked.Exchange(ref s_sharedBuilder, returningBuilder);
+                    var oldSharedBuilder = Interlocked.Exchange(ref s_sharedBuilder, returningBuilder);
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, type: oldSharedBuilder == null ? "returned-set" : "returned-replace");
+
 #if DEBUG
                     Interlocked.Increment(ref s_accepts);
+#endif
                 }
                 else
                 {
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, type: "discarded");
+#if DEBUG
                     Interlocked.Increment(ref s_discards);
 #endif
+
                 }
             }
 
diff --git a/src/Shared/StringBuilderCache.cs b/src/Shared/StringBuilderCache.cs
index 9bc6ffeb15d..d81cc81bcdf 100644
--- a/src/Shared/StringBuilderCache.cs
+++ b/src/Shared/StringBuilderCache.cs
@@ -33,6 +33,9 @@
 
 using System;
 using System.Text;
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+using Microsoft.Build.Eventing;
+#endif
 
 namespace Microsoft.Build.Shared
 {
@@ -59,11 +62,19 @@ public static StringBuilder Acquire(int capacity = 16 /*StringBuilder.DefaultCap
                     {
                         StringBuilderCache.t_cachedInstance = null;
                         sb.Length = 0; // Equivalent of sb.Clear() that works on .Net 3.5
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+                        MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: sb.GetHashCode(), newCapacity: capacity, oldCapacity: sb.Capacity, type: "sbc-reused");
+#endif
                         return sb;
                     }
                 }
             }
-            return new StringBuilder(capacity);
+
+            StringBuilder stringBuilder = new StringBuilder(capacity);
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+            MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: stringBuilder.GetHashCode(), newCapacity: capacity, oldCapacity: stringBuilder.Capacity, type: "sbc-new");
+#endif
+            return stringBuilder;
         }
 
         public static void Release(StringBuilder sb)
@@ -72,6 +83,9 @@ public static void Release(StringBuilder sb)
             {
                 StringBuilderCache.t_cachedInstance = sb;
             }
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+            MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: sb.GetHashCode(), returningCapacity: sb.Capacity, type: sb.Capacity <= MAX_BUILDER_SIZE ? "sbc-returned" :  "sbc-discarded");
+#endif
         }
 
         public static string GetStringAndRelease(StringBuilder sb)
