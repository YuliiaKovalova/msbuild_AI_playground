diff --git a/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
new file mode 100644
index 00000000000..2fa7d10e6df
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
@@ -0,0 +1,64 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Diagnostics.Tracing;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Engine.UnitTests.BackEnd
+{
+    internal class EventSourceTestHelper : EventListener
+    {
+        private readonly string eventSourceName = "Microsoft-Build";
+        private readonly List<EventWrittenEventArgs> emittedEvents;
+        private object _eventListLock = new object();
+        private EventSource? _eventSources = null;
+
+        public EventSourceTestHelper()
+        {
+            emittedEvents = new List<EventWrittenEventArgs>();
+        }
+
+        protected override void OnEventSourceCreated(EventSource eventSource)
+        {
+            if (eventSource.Name == eventSourceName)
+            {
+                EnableEvents(eventSource, EventLevel.LogAlways);
+                _eventSources = eventSource;
+            }
+        }
+
+        protected override void OnEventWritten(EventWrittenEventArgs eventData)
+        {
+            lock (_eventListLock)
+            {
+                emittedEvents.Add(eventData);
+            }
+        }
+
+        public override void Dispose() {
+            DisableEvents(_eventSources);
+            base.Dispose();
+        }
+
+        /// <summary>
+        /// Returns the events that were emitted till invocation of this method.
+        /// The events are cleared from the in-memory store and are populated again. 
+        /// </summary>
+        /// <returns>List of the events that were emitted for eventSource</returns>
+        internal List<EventWrittenEventArgs> GetEvents()
+        {
+            var resultList = new List<EventWrittenEventArgs>();
+            lock (_eventListLock)
+            {
+                resultList = new List<EventWrittenEventArgs>(emittedEvents);
+                emittedEvents.Clear();
+            }
+            
+            return resultList;
+        }
+    }
+}
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index d15bd7d203d..416a296c012 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics.Tracing;
 using System.Linq;
 using System.Text.RegularExpressions;
 using System.Threading.Tasks;
@@ -28,6 +29,7 @@ public class SdkResolverService_Tests : IDisposable
     {
         private readonly MockLogger _logger;
         private readonly LoggingContext _loggingContext;
+        private readonly EventSourceTestHelper _eventSourceTestListener;
 
         public SdkResolverService_Tests()
         {
@@ -35,6 +37,8 @@ public SdkResolverService_Tests()
             ILoggingService loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             loggingService.RegisterLogger(_logger);
 
+            _eventSourceTestListener = new EventSourceTestHelper();
+
             _loggingContext = new MockLoggingContext(
                 loggingService,
                 new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0, 0));
@@ -42,6 +46,7 @@ public SdkResolverService_Tests()
 
         public void Dispose()
         {
+            _eventSourceTestListener.Dispose();
             SdkResolverService.Instance.InitializeForTests();
         }
 
@@ -76,6 +81,7 @@ public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
                 "notfound"
             })));
             _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING4", "WARNING2" });
+            
         }
 
         [Fact]
@@ -101,6 +107,9 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
 
             _logger.WarningCount.ShouldBe(1);
             _logger.Warnings.First().Code.ShouldStartWith("MSB4241");
+
+            var resultsOfEventSource = _eventSourceTestListener.GetEvents();
+            resultsOfEventSource.Count.ShouldBe(2);
         }
 
         [Fact]
@@ -114,6 +123,9 @@ public void AssertResolverThrows()
             SdkResolverException e = Should.Throw<SdkResolverException>(() => SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true));
             e.Resolver.Name.ShouldBe("MockSdkResolverThrows");
             e.Sdk.Name.ShouldBe("1sdkName");
+
+            var resultsOfEventSource = _eventSourceTestListener.GetEvents();
+            resultsOfEventSource.Count.ShouldBe(16);
         }
 
         [Fact]
