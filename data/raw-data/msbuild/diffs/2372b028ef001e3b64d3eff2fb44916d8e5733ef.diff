diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 5c3b3406d21..c5d3281f937 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -293,7 +293,11 @@ string taskProjectFile
             {
                 ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
                 _taskName = taskName;
-                _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested);
+
+                // If the user requested a task host but provided us with an assembly name rather than an assembly file, pretend they didn't.
+                // Finding the path to the assembly file the runtime would load without actually loading the assembly would likely be a bug farm.
+                // Also, this should be a very unusual case.
+                _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested && loadInfo.AssemblyFile is not null);
 
                 // If the user specifically requests a code task factory, and the type wasn't already loaded, we need a way to verify that it really found a matching type. Properties is an array, so it should never be null,
                 // though it could be an empty array.
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index ea658de4b6d..a34923090fb 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -382,23 +382,8 @@ private TypeInformation FindTypeInformationUsingLoadedType(string typeName)
             /// <returns>A <c ref="TypeInformation"/> indicating relevant information about typeName.</returns>
             private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string typeName)
             {
-                string path = _assemblyLoadInfo.AssemblyFile;
-                if (path is null)
-                {
-#if NETFRAMEWORK
-                    AppDomainSetup setup = AppDomain.CurrentDomain.SetupInformation;
-                    setup.LoaderOptimization = LoaderOptimization.SingleDomain;
-                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, setup);
-                    path = appDomain.Load(new AssemblyName(_assemblyLoadInfo.AssemblyName)).Location;
-                    AppDomain.Unload(appDomain);
-#else
-                    AssemblyLoadContext alc = new("loadContextToFindPath", true);
-                    path = alc.LoadFromAssemblyName(new AssemblyName(_assemblyLoadInfo.AssemblyName)).Location;
-                    alc.Unload();
-#endif
-                }
-
-                using (FileStream stream = File.OpenRead(path))
+                ErrorUtilities.VerifyThrowArgumentNull(_assemblyLoadInfo.AssemblyFile, "AssemblyFile");
+                using (FileStream stream = File.OpenRead(_assemblyLoadInfo.AssemblyFile))
                 using (PEReader peFile = new(stream))
                 {
                     MetadataReader metadataReader = peFile.GetMetadataReader();
@@ -408,7 +393,7 @@ private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string
                         TypeDefinition typeDef = metadataReader.GetTypeDefinition(typeDefHandle);
                         if (TryGetTypeInformationFromDefinition(metadataReader, typeDef, typeName, out TypeInformation typeInformation))
                         {
-                            typeInformation.Path = path;
+                            typeInformation.Path = _assemblyLoadInfo.AssemblyFile;
                             return typeInformation;
                         }
                     }
