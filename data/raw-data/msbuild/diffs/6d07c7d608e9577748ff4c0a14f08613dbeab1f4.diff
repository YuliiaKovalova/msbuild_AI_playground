diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 55abe5b8b8f..82497b9932a 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -313,7 +313,6 @@ public ErrorFromResources() { }
     public partial class Exec : Microsoft.Build.Tasks.ToolTaskExtension
     {
         public Exec() { }
-        public string CharactersToEscape { set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public string Command { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
@@ -321,6 +320,7 @@ public string CharactersToEscape { set { } }
         public bool ConsoleToMSBuild { get { throw null; } set { } }
         public string CustomErrorRegularExpression { get { throw null; } set { } }
         public string CustomWarningRegularExpression { get { throw null; } set { } }
+        public bool EscapeSpecialCharacters { get { throw null; } set { } }
         public bool IgnoreExitCode { get { throw null; } set { } }
         public bool IgnoreStandardErrorWarningFormat { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index ef427ed5041..be1e1f567cc 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -243,7 +243,6 @@ public ErrorFromResources() { }
     public partial class Exec : Microsoft.Build.Tasks.ToolTaskExtension
     {
         public Exec() { }
-        public string CharactersToEscape { set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public string Command { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
@@ -251,6 +250,7 @@ public string CharactersToEscape { set { } }
         public bool ConsoleToMSBuild { get { throw null; } set { } }
         public string CustomErrorRegularExpression { get { throw null; } set { } }
         public string CustomWarningRegularExpression { get { throw null; } set { } }
+        public bool EscapeSpecialCharacters { get { throw null; } set { } }
         public bool IgnoreExitCode { get { throw null; } set { } }
         public bool IgnoreStandardErrorWarningFormat { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 4ac1b8dfbc2..d7aec598ab6 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -63,7 +63,7 @@ public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile()
 
                 // Now run the Exec task on a simple command.
                 Exec exec = PrepareExec("echo Hello World!");
-                exec.CharactersToEscape = "()]";
+                exec.EscapeSpecialCharacters = true;
                 exec.Execute().ShouldBeTrue();
             }
         }
@@ -83,7 +83,7 @@ public void EscapeParenthesesInPathToGeneratedBatchFile_DuplicateCharactersToEsc
 
                 // Now run the Exec task on a simple command.
                 Exec exec = PrepareExec("echo Hello World!");
-                exec.CharactersToEscape = "()()";
+                exec.EscapeSpecialCharacters = true;
                 exec.Execute().ShouldBeTrue();
             }
         }
@@ -969,7 +969,7 @@ public void EndToEndMultilineExec_WithCharactersToEscapeMetadata()
             {
                 var testProject = env.CreateTestProjectWithFiles(@"<Project>
 <Target Name=""ExecCommand"">
-  <Exec CharactersToEscape=""()"" Command=""echo Hello, World!"" />
+  <Exec EscapeSpecialCharacters=""true"" Command=""echo Hello, World!"" />
    </Target>
 </Project>");
 
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 9df0fd277d4..b0696e0069c 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -54,6 +54,9 @@ public Exec()
         private Encoding _standardOutputEncoding;
         private string _command;
 
+        // '^' before _any_ character escapes that character. Don't escape '^'.
+        private char[] _charactersToEscape = { '(', ')', ' ', '&', '=', ';', '!', ','};
+
         #endregion
 
         #region Properties
@@ -188,18 +191,7 @@ public ITaskItem[] Outputs
         [Output]
         public ITaskItem[] ConsoleOutput => !ConsoleToMSBuild ? Array.Empty<ITaskItem>(): _nonEmptyOutput.ToArray();
 
-        private HashSet<char> _charactersToEscape;
-
-        public string CharactersToEscape
-        {
-            set
-            {
-                if (!string.IsNullOrEmpty(value))
-                {
-                    _charactersToEscape = new HashSet<char>(value);
-                }
-            }
-        }
+        public bool EscapeSpecialCharacters { get; set; } = false;
 
         #endregion
 
@@ -631,12 +623,12 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
 
                     StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
 
-                    // Escape any characters specified by the CharactersToEscape metadata, or '&'
+                    // Escape any '&' or special characters when the user specifies EscapeSpecialCharacters.
                     for (int i = 0; i < batchFileForCommandLine.Length; i++)
                     {
                         char c = batchFileForCommandLine[i];
 
-                        if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
+                        if (c == '&' || (ShouldEscapeCharacter(c)) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
                         {
                             fileName.Append('^');
                         }
@@ -652,8 +644,20 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
 
         private bool ShouldEscapeCharacter(char c)
         {
-            // Escape '&' to preserve previous functionality
-            return c == '&' || (_charactersToEscape != null && _charactersToEscape.Contains(c));
+            if (!EscapeSpecialCharacters)
+            {
+                return false;
+            }
+
+            for (int i = 0; i < _charactersToEscape.Length; i++)
+            {
+                if ((c | _charactersToEscape[i]) == c)
+                {
+                    return true;
+                }
+            }
+
+            return false;
         }
 
         #endregion
