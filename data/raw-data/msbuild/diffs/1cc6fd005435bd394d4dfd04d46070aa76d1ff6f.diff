diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index c305a27ed6c..ce72830991f 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -16,7 +16,6 @@
 using Shouldly;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
-using System.Runtime.InteropServices;
 
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index ba38ae601d5..2756ccb9c37 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -414,7 +414,7 @@ internal abstract class ItemSpecFragment
         /// <summary>
         ///     Path of the project the itemspec is coming from
         /// </summary>
-        protected string ProjectDirectory { get; }
+        internal string ProjectDirectory { get; }
 
         // not a Lazy to reduce memory
         private ref FileSpecMatcherTester FileMatcher
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index 146e15c4df2..24709b9ab30 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -30,7 +30,7 @@ private abstract class LazyItemOperation : IItemOperation
             //  This is used only when evaluating an expression, which instantiates
             //  the items and then removes them
             protected readonly IItemFactory<I, I> _itemFactory;
-
+            internal ItemSpec<P, I> ISpec => _itemSpec;
             protected LazyItemOperation(OperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
             {
                 _itemElement = builder.ItemElement;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index b1e13d2ed83..fb60b70e1e1 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -15,6 +15,9 @@ internal partial class LazyItemEvaluator<P, I, M, D>
         class UpdateOperation : LazyItemOperation
         {
             private readonly ImmutableList<ProjectMetadataElement> _metadata;
+            private ImmutableList<ItemBatchingContext>.Builder _itemsToUpdate = null;
+            private ItemSpecMatchesItem _matchItemSpec = null;
+            private bool? _needToExpandMetadataForEachItem = null;
 
             public UpdateOperation(OperationBuilderWithMetadata builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
                 : base(builder, lazyEvaluator)
@@ -43,23 +46,69 @@ protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, I
                     return;
                 }
 
-                ItemSpecMatchesItem matchItemspec;
-                bool? needToExpandMetadataForEachItem = null;
+                SetMatchItemSpec();
+                _itemsToUpdate ??= ImmutableList.CreateBuilder<ItemBatchingContext>();
+                _itemsToUpdate.Clear();
 
+                for (int i = 0; i < listBuilder.Count; i++)
+                {
+                    var itemData = listBuilder[i];
+
+                    var matchResult = _matchItemSpec(_itemSpec, itemData.Item);
+
+                    if (matchResult.IsMatch)
+                    {
+                        listBuilder[i] = UpdateItem(listBuilder[i], matchResult.CapturedItemsFromReferencedItemTypes);
+                    }
+                }
+
+                DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableList(), _metadata, _needToExpandMetadataForEachItem);
+            }
+
+            internal ItemData UpdateItem(ItemData item)
+            {
+                if (_conditionResult)
+                {
+                    SetMatchItemSpec();
+                    _itemsToUpdate ??= ImmutableList.CreateBuilder<ItemBatchingContext>();
+                    _itemsToUpdate.Clear();
+                    MatchResult matchResult = _matchItemSpec(_itemSpec, item.Item);
+                    if (matchResult.IsMatch)
+                    {
+                        ItemData clonedData = UpdateItem(item, matchResult.CapturedItemsFromReferencedItemTypes);
+                        DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableList(), _metadata, _needToExpandMetadataForEachItem);
+                        return clonedData;
+                    }
+                }
+                return item;
+            }
+
+            private ItemData UpdateItem(ItemData item, Dictionary<string, I> capturedItemsFromReferencedItemTypes)
+            {
+                // items should be deep immutable, so clone and replace items before mutating them
+                // otherwise, with GetItems caching enabled, the mutations would leak into the cache causing
+                // future operations to mutate the state of past operations
+                ItemData clonedData = item.Clone(_itemFactory, _itemElement);
+                _itemsToUpdate.Add(new ItemBatchingContext(clonedData.Item, capturedItemsFromReferencedItemTypes));
+                return clonedData;
+            }
+
+            private void SetMatchItemSpec()
+            {
                 if (ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType))
                 {
                     // Perf optimization: If the Update operation references itself (e.g. <I Update="@(I)"/>)
                     // then all items are updated and matching is not necessary
-                    matchItemspec = (itemSpec, item) => new MatchResult(true, null);
+                    _matchItemSpec = (itemSpec, item) => new MatchResult(true, null);
                 }
                 else if (ItemSpecContainsItemReferences(_itemSpec)
-                         && QualifiedMetadataReferencesExist(_metadata, out needToExpandMetadataForEachItem)
+                         && QualifiedMetadataReferencesExist(_metadata, out _needToExpandMetadataForEachItem)
                          && !Traits.Instance.EscapeHatches.DoNotExpandQualifiedMetadataInUpdateOperation)
                 {
-                    var itemReferenceFragments = _itemSpec.Fragments.OfType<ItemSpec<P,I>.ItemExpressionFragment>().ToArray();
-                    var nonItemReferenceFragments = _itemSpec.Fragments.Where(f => !(f is ItemSpec<P,I>.ItemExpressionFragment)).ToArray();
+                    var itemReferenceFragments = _itemSpec.Fragments.OfType<ItemSpec<P, I>.ItemExpressionFragment>().ToArray();
+                    var nonItemReferenceFragments = _itemSpec.Fragments.Where(f => !(f is ItemSpec<P, I>.ItemExpressionFragment)).ToArray();
 
-                    matchItemspec = (itemSpec, item) =>
+                    _matchItemSpec = (itemSpec, item) =>
                     {
                         var isMatch = nonItemReferenceFragments.Any(f => f.IsMatch(item.EvaluatedInclude));
                         Dictionary<string, I> capturedItemsFromReferencedItemTypes = null;
@@ -84,30 +133,8 @@ protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, I
                 }
                 else
                 {
-                    matchItemspec = (itemSpec, item) => new MatchResult(itemSpec.MatchesItem(item), null);
-                }
-
-                var itemsToUpdate = ImmutableList.CreateBuilder<ItemBatchingContext>();
-
-                for (int i = 0; i < listBuilder.Count; i++)
-                {
-                    var itemData = listBuilder[i];
-
-                    var matchResult = matchItemspec(_itemSpec, itemData.Item);
-
-                    if (matchResult.IsMatch)
-                    {
-                        // items should be deep immutable, so clone and replace items before mutating them
-                        // otherwise, with GetItems caching enabled, the mutations would leak into the cache causing
-                        // future operations to mutate the state of past operations
-                        var clonedItemData = listBuilder[i].Clone(_itemFactory, _itemElement);
-                        listBuilder[i] = clonedItemData;
-
-                        itemsToUpdate.Add(new ItemBatchingContext(clonedItemData.Item, matchResult.CapturedItemsFromReferencedItemTypes));
-                    }
+                    _matchItemSpec = (itemSpec, item) => new MatchResult(itemSpec.MatchesItem(item), null);
                 }
-
-                DecorateItemsWithMetadata(itemsToUpdate.ToImmutableList(), _metadata, needToExpandMetadataForEachItem);
             }
 
             private bool QualifiedMetadataReferencesExist(ImmutableList<ProjectMetadataElement> metadata, out bool? needToExpandMetadataForEachItem)
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 64df2a7402f..cdeb57f14fa 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -151,7 +151,7 @@ public ItemData Clone(IItemFactory<I, I> itemFactory, ProjectItemElement initial
 
         private class MemoizedOperation : IItemOperation
         {
-            public IItemOperation Operation { get; }
+            public LazyItemOperation Operation { get; }
             private Dictionary<ISet<string>, ImmutableList<ItemData>> _cache;
 
             private bool _isReferenced;
@@ -159,7 +159,7 @@ private class MemoizedOperation : IItemOperation
             private int _applyCalls;
 #endif
 
-            public MemoizedOperation(IItemOperation operation)
+            public MemoizedOperation(LazyItemOperation operation)
             {
                 Operation = operation;
             }
@@ -315,13 +315,9 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
 
                     //  If this is a remove operation, then add any globs that will be removed
                     //  to a list of globs to ignore in previous operations
-                    var removeOperation = currentList._memoizedOperation.Operation as RemoveOperation;
-                    if (removeOperation != null)
+                    if (currentList._memoizedOperation.Operation is RemoveOperation removeOperation)
                     {
-                        if (globsToIgnoreStack == null)
-                        {
-                            globsToIgnoreStack = new Stack<ImmutableHashSet<string>>();
-                        }
+                        globsToIgnoreStack ??= new Stack<ImmutableHashSet<string>>();
 
                         var globsToIgnoreForPreviousOperations = removeOperation.GetRemovedGlobs();
                         foreach (var globToRemove in globsToIgnoreFromFutureOperations)
@@ -342,15 +338,64 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
 
                 ImmutableHashSet<string> currentGlobsToIgnore = globsToIgnoreStack == null ? globsToIgnore : globsToIgnoreStack.Peek();
 
+                Dictionary<string, UpdateOperation> itemsWithNoWildcards = new Dictionary<string, UpdateOperation>(FileUtilities.GetIsFileSystemCaseSensitive() ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase);
+                bool addedToBatch = false;
+
                 //  Walk back down the stack of item lists applying operations
                 while (itemListStack.Count > 0)
                 {
                     var currentList = itemListStack.Pop();
 
+                    if (currentList._memoizedOperation.Operation is UpdateOperation op)
+                    {
+                        bool addToBatch = true;
+                        int i;
+                        for (i = 0; i < op.ISpec.Fragments.Count; i++)
+                        {
+                            ItemSpecFragment frag = op.ISpec.Fragments[i];
+                            if (MSBuildConstants.CharactersForExpansion.Any(frag.TextFragment.Contains))
+                            {
+                                // Fragment contains wild cards, items, or properties. Cannot batch over it using a dictionary.
+                                addToBatch = false;
+                                break;
+                            }
+
+                            string fullPath = FileUtilities.GetFullPath(frag.TextFragment, frag.ProjectDirectory);
+                            if (itemsWithNoWildcards.ContainsKey(fullPath))
+                            {
+                                // Another update will already happen on this path. Make that happen before evaluating this one.
+                                addToBatch = false;
+                                break;
+                            }
+                            else
+                            {
+                                itemsWithNoWildcards.Add(fullPath, op);
+                            }
+                        }
+                        if (!addToBatch)
+                        {
+                            // Remove items added before realizing we couldn't skip the item list
+                            for (int j = 0; j < i; j++)
+                            {
+                                itemsWithNoWildcards.Remove(currentList._memoizedOperation.Operation.ISpec.Fragments[j].TextFragment);
+                            }
+                        }
+                        else
+                        {
+                            addedToBatch = true;
+                            continue;
+                        }
+                    }
+
+                    if (addedToBatch)
+                    {
+                        addedToBatch = false;
+                        ProcessNonWildCardItemUpdates(itemsWithNoWildcards, items);
+                    }
+
                     //  If this is a remove operation, then it could modify the globs to ignore, so pop the potentially
                     //  modified entry off the stack of globs to ignore
-                    var removeOperation = currentList._memoizedOperation.Operation as RemoveOperation;
-                    if (removeOperation != null)
+                    if (currentList._memoizedOperation.Operation is RemoveOperation)
                     {
                         globsToIgnoreStack.Pop();
                         currentGlobsToIgnore = globsToIgnoreStack.Count == 0 ? globsToIgnore : globsToIgnoreStack.Peek();
@@ -359,9 +404,26 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                     currentList._memoizedOperation.Apply(items, currentGlobsToIgnore);
                 }
 
+                ProcessNonWildCardItemUpdates(itemsWithNoWildcards, items);
+
                 return items;
             }
 
+            private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOperation> itemsWithNoWildcards, ImmutableList<ItemData>.Builder items)
+            {
+                if (itemsWithNoWildcards.Count > 0)
+                {
+                    for (int i = 0; i < items.Count; i++)
+                    {
+                        if (itemsWithNoWildcards.TryGetValue(FileUtilities.GetFullPath(items[i].Item.EvaluatedInclude, items[i].Item.ProjectDirectory), out UpdateOperation op))
+                        {
+                            items[i] = op.UpdateItem(items[i]);
+                        }
+                    }
+                    itemsWithNoWildcards.Clear();
+                }
+            }
+
             public void MarkAsReferenced()
             {
                 _memoizedOperation.MarkAsReferenced();
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 5be780dc59a..f33cb40fa6d 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -97,6 +97,7 @@ internal static class MSBuildConstants
         internal static readonly char[] ForwardSlash = { '/' };
         internal static readonly char[] ForwardSlashBackslash = { '/', '\\' };
         internal static readonly char[] WildcardChars = { '*', '?' };
+        internal static readonly string[] CharactersForExpansion = { "*", "?", "$(", "@(", "%" };
         internal static readonly char[] CommaChar = { ',' };
         internal static readonly char[] HyphenChar = { '-' };
         internal static readonly char[] DirectorySeparatorChar = { Path.DirectorySeparatorChar };
