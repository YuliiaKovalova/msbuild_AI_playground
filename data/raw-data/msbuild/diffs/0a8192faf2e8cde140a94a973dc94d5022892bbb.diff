diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index d135f23fd20..273cfd69f84 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -11,6 +11,7 @@
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Client;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -79,26 +80,9 @@ public sealed class MSBuildClient
         private long _sizeOfConsoleWritePackets;
 
         /// <summary>
-        /// Width of the Console output device or -1 if unknown.
+        /// Capture configuration of Client Console.
         /// </summary>
-        private int _consoleBufferWidth;
-
-        /// <summary>
-        /// True if console output accept ANSI colors codes.
-        /// False if console does not support ANSI codes or output is redirected to non screen type such as file or nul.
-        /// </summary>
-        private bool _acceptAnsiColorCodes;
-
-        /// <summary>
-        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        private bool _consoleIsScreen;
-
-        /// <summary>
-        /// Background color of client console, -1 if not detectable.
-        /// </summary>
-        private ConsoleColor _consoleBackgroundColor;
+        private TargetConsoleConfiguration? _consoleConfiguration;
 
         /// <summary>
         /// Public constructor with parameters.
@@ -244,17 +228,20 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
 
         private void ConfigureAndQueryConsoleProperties()
         {
-            QueryIsScreenAndTryEnableAnsiColorCodes();
-            QueryConsoleBufferWidth();
-            QueryConsoleBackgroundColor();
+            var (acceptAnsiColorCodes, outputIsScreen) = QueryIsScreenAndTryEnableAnsiColorCodes();
+            int bufferWidth = QueryConsoleBufferWidth();
+            ConsoleColor backgroundColor = QueryConsoleBackgroundColor();
+
+            _consoleConfiguration = new TargetConsoleConfiguration(bufferWidth, acceptAnsiColorCodes, outputIsScreen, backgroundColor);
         }
 
-        private void QueryIsScreenAndTryEnableAnsiColorCodes()
+        private (bool acceptAnsiColorCodes, bool outputIsScreen) QueryIsScreenAndTryEnableAnsiColorCodes()
         {
+            bool acceptAnsiColorCodes = false;
+            bool outputIsScreen = false;
+
             if (NativeMethodsShared.IsWindows)
             {
-                _acceptAnsiColorCodes = false;
-                _consoleIsScreen = false;
                 try
                 {
                     IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
@@ -275,13 +262,13 @@ private void QueryIsScreenAndTryEnableAnsiColorCodes()
 
                         if (success)
                         {
-                            _acceptAnsiColorCodes = true;
+                            acceptAnsiColorCodes = true;
                         }
 
                         uint fileType = NativeMethodsShared.GetFileType(stdOut);
                         // The std out is a char type(LPT or Console)
-                        _consoleIsScreen = fileType == NativeMethodsShared.FILE_TYPE_CHAR;
-                        _acceptAnsiColorCodes &= _consoleIsScreen;
+                        outputIsScreen = fileType == NativeMethodsShared.FILE_TYPE_CHAR;
+                        acceptAnsiColorCodes &= outputIsScreen;
                     }
                 }
                 catch (Exception ex)
@@ -292,16 +279,18 @@ private void QueryIsScreenAndTryEnableAnsiColorCodes()
             else
             {
                 // On posix OSes we expect console always supports VT100 coloring unless it is redirected
-                _acceptAnsiColorCodes = _consoleIsScreen = !Console.IsOutputRedirected;
+                acceptAnsiColorCodes = outputIsScreen = !Console.IsOutputRedirected;
             }
+
+            return (acceptAnsiColorCodes: acceptAnsiColorCodes, outputIsScreen: outputIsScreen);
         }
 
-        private void QueryConsoleBufferWidth()
+        private int QueryConsoleBufferWidth()
         {
-            _consoleBufferWidth = -1;
+            int consoleBufferWidth = -1;
             try
             {
-                _consoleBufferWidth = Console.BufferWidth;
+                consoleBufferWidth = Console.BufferWidth;
             }
             catch (Exception ex)
             {
@@ -309,6 +298,8 @@ private void QueryConsoleBufferWidth()
                 // this is probably temporary workaround till we understand what is the reason for that exception
                 CommunicationsUtilities.Trace("MSBuild client warning: problem during querying console buffer width.", ex);
             }
+
+            return consoleBufferWidth;
         }
 
         /// <summary>
@@ -316,16 +307,19 @@ private void QueryConsoleBufferWidth()
         /// is not way to check, but not-supported exception is thrown. Assume
         /// black, but don't crash.
         /// </summary>
-        private void QueryConsoleBackgroundColor()
+        private ConsoleColor QueryConsoleBackgroundColor()
         {
+            ConsoleColor consoleBackgroundColor;
             try
             {
-                _consoleBackgroundColor = Console.BackgroundColor;
+                consoleBackgroundColor = Console.BackgroundColor;
             }
             catch (PlatformNotSupportedException)
             {
-                _consoleBackgroundColor = ConsoleColor.Black;
+                consoleBackgroundColor = ConsoleColor.Black;
             }
+
+            return consoleBackgroundColor;
         }
 
         private bool TrySendPacket(Func<INodePacket> packetResolver)
@@ -420,10 +414,7 @@ private ServerNodeBuildCommand GetServerNodeBuildCommand(string commandLine)
                         buildProcessEnvironment: envVars,
                         CultureInfo.CurrentCulture,
                         CultureInfo.CurrentUICulture,
-                        _consoleBufferWidth,
-                        _acceptAnsiColorCodes,
-                        _consoleIsScreen,
-                        _consoleBackgroundColor);
+                        _consoleConfiguration!);
         }
 
         private ServerNodeHandshake GetHandshake()
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 19acaec8d01..0053b91705b 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -320,19 +320,19 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
             Thread.CurrentThread.CurrentUICulture = command.UICulture;
 
             // Configure console configuration so Loggers can change their behavior based on Target (client) Console properties.
-            ConsoleConfiguration.Provider = new TargetConsoleConfiguration(command.ConsoleBufferWidth, command.AcceptAnsiColorCodes, command.ConsoleIsScreen, command.ConsoleBackgroundColor);
+            ConsoleConfiguration.Provider = command.ConsoleConfiguration;
 
             // Also try our best to increase chance custom Loggers which use Console static members will work as expected.
             try
             {
-                if (NativeMethodsShared.IsWindows && command.ConsoleBufferWidth > 0)
+                if (NativeMethodsShared.IsWindows && command.ConsoleConfiguration.BufferWidth > 0)
                 {
-                    Console.BufferWidth = command.ConsoleBufferWidth;
+                    Console.BufferWidth = command.ConsoleConfiguration.BufferWidth;
                 }
 
-                if ((int)command.ConsoleBackgroundColor != -1)
+                if ((int)command.ConsoleConfiguration.BackgroundColor != -1)
                 {
-                    Console.BackgroundColor = command.ConsoleBackgroundColor;
+                    Console.BackgroundColor = command.ConsoleConfiguration.BackgroundColor;
                 }
             }
             catch (Exception)
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index 21945a1344d..a83adf83e8c 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 using System.Globalization;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -17,10 +19,7 @@ internal sealed class ServerNodeBuildCommand : INodePacket
         private Dictionary<string, string> _buildProcessEnvironment = default!;
         private CultureInfo _culture = default!;
         private CultureInfo _uiCulture = default!;
-        private int _consoleBufferWidth = default;
-        private bool _acceptAnsiColorCodes = default;
-        private ConsoleColor _consoleBackgroundColor = default;
-        private bool _consoleIsScreen = default;
+        private TargetConsoleConfiguration _consoleConfiguration = default!;
 
         /// <summary>
         /// Retrieves the packet type.
@@ -53,28 +52,9 @@ internal sealed class ServerNodeBuildCommand : INodePacket
         public CultureInfo UICulture => _uiCulture;
 
         /// <summary>
-        /// Buffer width of destination Console.
-        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
-        /// -1 console buffer width can't be obtained.
+        /// Console configuration of Client.
         /// </summary>
-        public int ConsoleBufferWidth => _consoleBufferWidth;
-
-        /// <summary>
-        /// True if console output accept ANSI colors codes.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;
-
-        /// <summary>
-        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        public bool ConsoleIsScreen => _consoleIsScreen;
-
-        /// <summary>
-        /// Background color of client console, -1 if not detectable
-        /// </summary>
-        public ConsoleColor ConsoleBackgroundColor => _consoleBackgroundColor;
+        public TargetConsoleConfiguration ConsoleConfiguration => _consoleConfiguration;
 
         /// <summary>
         /// Private constructor for deserialization
@@ -84,18 +64,16 @@ private ServerNodeBuildCommand()
         }
 
         public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture,
-            int consoleBufferWidth, bool acceptAnsiColorCodes, bool consoleIsScreen, ConsoleColor consoleBackgroundColor)
+            TargetConsoleConfiguration consoleConfiguration)
         {
+            ErrorUtilities.VerifyThrowInternalNull(consoleConfiguration, nameof(consoleConfiguration));
+
             _commandLine = commandLine;
             _startupDirectory = startupDirectory;
             _buildProcessEnvironment = buildProcessEnvironment;
             _culture = culture;
             _uiCulture = uiCulture;
-
-            _consoleBufferWidth = consoleBufferWidth;
-            _acceptAnsiColorCodes = acceptAnsiColorCodes;
-            _consoleIsScreen = consoleIsScreen;
-            _consoleBackgroundColor = consoleBackgroundColor;
+            _consoleConfiguration = consoleConfiguration;
         }
 
         /// <summary>
@@ -109,10 +87,7 @@ public void Translate(ITranslator translator)
             translator.TranslateDictionary(ref _buildProcessEnvironment, StringComparer.OrdinalIgnoreCase);
             translator.TranslateCulture(ref _culture);
             translator.TranslateCulture(ref _uiCulture);
-            translator.Translate(ref _consoleBufferWidth);
-            translator.Translate(ref _acceptAnsiColorCodes);
-            translator.Translate(ref _consoleIsScreen);
-            translator.TranslateEnum(ref _consoleBackgroundColor, (int)_consoleBackgroundColor);
+            translator.Translate(ref _consoleConfiguration, TargetConsoleConfiguration.FactoryForDeserialization);
         }
 
         /// <summary>
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index f449ff0d886..20bd109a974 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -1278,20 +1278,50 @@ internal interface IConsoleConfiguration
     /// Console configuration of target Console at which we will render output.
     /// It is supposed to be Console from other process to which output from this process will be redirected.
     /// </summary>
-    internal class TargetConsoleConfiguration : IConsoleConfiguration
+    internal class TargetConsoleConfiguration : IConsoleConfiguration, ITranslatable
     {
+        private int _bufferWidth;
+        private bool _acceptAnsiColorCodes;
+        private bool _outputIsScreen;
+        private ConsoleColor _backgroundColor;
+
         public TargetConsoleConfiguration(int bufferWidth, bool acceptAnsiColorCodes, bool outputIsScreen, ConsoleColor backgroundColor)
         {
-            BufferWidth = bufferWidth;
-            AcceptAnsiColorCodes = acceptAnsiColorCodes;
-            OutputIsScreen = outputIsScreen;
-            BackgroundColor = backgroundColor;
+            _bufferWidth = bufferWidth;
+            _acceptAnsiColorCodes = acceptAnsiColorCodes;
+            _outputIsScreen = outputIsScreen;
+            _backgroundColor = backgroundColor;
+        }
+
+        /// <summary>
+        /// Constructor for deserialization
+        /// </summary>
+        private TargetConsoleConfiguration()
+        {
         }
 
-        public int BufferWidth { get; }
-        public bool AcceptAnsiColorCodes { get; }
-        public bool OutputIsScreen { get; }
-        public ConsoleColor BackgroundColor { get; }
+        public int BufferWidth => _bufferWidth;
+
+        public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;
+
+        public bool OutputIsScreen => _outputIsScreen;
+
+        public ConsoleColor BackgroundColor => _backgroundColor;
+
+        public void Translate(ITranslator translator)
+        {
+            translator.Translate(ref _bufferWidth);
+            translator.Translate(ref _acceptAnsiColorCodes);
+            translator.Translate(ref _outputIsScreen);
+            translator.TranslateEnum(ref _backgroundColor, (int)_backgroundColor);
+        }
+
+        internal static TargetConsoleConfiguration FactoryForDeserialization(ITranslator translator)
+        {
+            TargetConsoleConfiguration configuration = new();
+            configuration.Translate(translator);
+            return configuration;
+        }
     }
 
     /// <summary>
