diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index f8e49b56a7f..fc69e41d38d 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -1,14 +1,9 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Diagnostics;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -42,7 +37,7 @@ public LoggerVerbosity Verbosity
         /// and warnings summary at the end of a build.
         /// </summary>
         /// <value>null</value>
-        public string Parameters
+        public string? Parameters
         {
             get { return _loggerParameters; }
             set { _loggerParameters = value; }
@@ -52,7 +47,7 @@ public string Parameters
         /// This property is set by the build engine to allow a node loggers to forward messages to the
         /// central logger
         /// </summary>
-        public IEventRedirector BuildEventRedirector
+        public IEventRedirector? BuildEventRedirector
         {
             get { return _buildEventRedirector; }
             set { _buildEventRedirector = value; }
@@ -98,10 +93,8 @@ private void ParseParameters(IEventSource eventSource)
                     // We can't know whether the project items needed to find ForwardProjectContextDescription
                     // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know
                     // all of the other loggers that will be attached. So turn both on.
-                    eventSource.StatusEventRaised -= BuildStatusHandler;
-                    eventSource.StatusEventRaised += BuildStatusHandler;
-                    eventSource.ProjectStarted -= ForwardEvent;
-                    eventSource.ProjectStarted += ForwardEvent;
+                    eventSource.HandleStatusEventRaised(BuildStatusHandler);
+                    eventSource.HandleProjectStarted(ForwardEvent);
                 }
             }
         }
@@ -120,74 +113,58 @@ private void ApplyParameter(IEventSource eventSource, string parameterName)
             switch (parameterName.ToUpperInvariant())
             {
                 case BuildStartedEventDescription:
-                    eventSource.BuildStarted -= ForwardEvent;
-                    eventSource.BuildStarted += ForwardEvent;
+                    eventSource.HandleBuildStarted(ForwardEvent);
                     break;
                 case BuildFinishedEventDescription:
-                    eventSource.BuildFinished -= ForwardEvent;
-                    eventSource.BuildFinished += ForwardEvent;
+                    eventSource.HandleBuildFinished(ForwardEvent);
                     break;
                 case ProjectStartedEventDescription:
-                    eventSource.ProjectStarted -= ForwardEvent;
-                    eventSource.ProjectStarted += ForwardEvent;
+                    eventSource.HandleProjectStarted(ForwardEvent);
                     break;
                 case ProjectFinishedEventDescription:
-                    eventSource.ProjectFinished -= ForwardEvent;
-                    eventSource.ProjectFinished += ForwardEvent;
+                    eventSource.HandleProjectFinished(ForwardEvent);
                     break;
                 case TargetStartedEventDescription:
-                    eventSource.TargetStarted -= ForwardEvent;
-                    eventSource.TargetStarted += ForwardEvent;
+                    eventSource.HandleTargetStarted(ForwardEvent);
                     break;
                 case TargetFinishedEventDescription:
-                    eventSource.TargetFinished -= ForwardEvent;
-                    eventSource.TargetFinished += ForwardEvent;
+                    eventSource.HandleTargetFinished(ForwardEvent);
                     break;
                 case TaskStartedEventDescription:
-                    eventSource.TaskStarted -= ForwardEvent;
-                    eventSource.TaskStarted += ForwardEvent;
+                    eventSource.HandleTaskStarted(ForwardEvent);
                     break;
                 case TaskFinishedEventDescription:
-                    eventSource.TaskFinished -= ForwardEvent;
-                    eventSource.TaskFinished += ForwardEvent;
+                    eventSource.HandleTaskFinished(ForwardEvent);
                     break;
                 case ErrorEventDescription:
-                    eventSource.ErrorRaised -= ForwardEvent;
-                    eventSource.ErrorRaised += ForwardEvent;
+                    eventSource.HandleErrorRaised(ForwardEvent);
                     break;
                 case WarningEventDescription:
-                    eventSource.WarningRaised -= ForwardEvent;
-                    eventSource.WarningRaised += ForwardEvent;
+                    eventSource.HandleWarningRaised(ForwardEvent);
                     break;
                 case CustomEventDescription:
-                    eventSource.CustomEventRaised -= ForwardEvent;
-                    eventSource.CustomEventRaised += ForwardEvent;
+                    eventSource.HandleCustomEventRaised(ForwardEvent);
                     break;
                 case HighMessageEventDescription:
-                    eventSource.MessageRaised -= MessageHandler;
-                    eventSource.MessageRaised += MessageHandler;
+                    eventSource.HandleMessageRaised(MessageHandler);
                     _forwardHighImportanceMessages = true;
                     break;
                 case NormalMessageEventDescription:
-                    eventSource.MessageRaised -= MessageHandler;
-                    eventSource.MessageRaised += MessageHandler;
+                    eventSource.HandleMessageRaised(MessageHandler);
                     _forwardNormalImportanceMessages = true;
                     break;
                 case LowMessageEventDescription:
-                    eventSource.MessageRaised -= MessageHandler;
-                    eventSource.MessageRaised += MessageHandler;
+                    eventSource.HandleMessageRaised(MessageHandler);
                     _forwardLowImportanceMessages = true;
                     break;
                 case CommandLineDescription:
-                    eventSource.MessageRaised -= MessageHandler;
-                    eventSource.MessageRaised += MessageHandler;
+                    eventSource.HandleMessageRaised(MessageHandler);
                     _forwardTaskCommandLine = true;
                     break;
                 case ProjectEvaluationStartedEventDescription:
                 case ProjectEvaluationFinishedEventDescription:
                 case ProjectEvaluationEventDescription:
-                    eventSource.StatusEventRaised -= BuildStatusHandler;
-                    eventSource.StatusEventRaised += BuildStatusHandler;
+                    eventSource.HandleStatusEventRaised(BuildStatusHandler);
                     break;
                 case PerformanceSummaryDescription:
                     _showPerfSummary = true;
@@ -243,18 +220,18 @@ public void Initialize(IEventSource eventSource, int nodeCount)
 
         private void SetForwardingBasedOnVerbosity(IEventSource eventSource)
         {
-            eventSource.BuildStarted += ForwardEvent;
-            eventSource.BuildFinished += ForwardEvent;
+            eventSource.HandleBuildStarted(ForwardEvent);
+            eventSource.HandleBuildFinished(ForwardEvent);
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))
             {
-                eventSource.ErrorRaised += ForwardEvent;
-                eventSource.WarningRaised += ForwardEvent;
+                eventSource.HandleErrorRaised(ForwardEvent);
+                eventSource.HandleWarningRaised(ForwardEvent);
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))
             {
-                eventSource.MessageRaised += MessageHandler;
+                eventSource.HandleMessageRaised(MessageHandler);
                 _forwardHighImportanceMessages = true;
             }
 
@@ -264,56 +241,42 @@ private void SetForwardingBasedOnVerbosity(IEventSource eventSource)
                 _forwardNormalImportanceMessages = true;
                 _forwardTaskCommandLine = true;
 
-                eventSource.ProjectStarted += ForwardEvent;
-                eventSource.ProjectFinished += ForwardEvent;
-                eventSource.TargetStarted += ForwardEvent;
-                eventSource.TargetFinished += ForwardEvent;
+                eventSource.HandleProjectStarted(ForwardEvent);
+                eventSource.HandleProjectFinished(ForwardEvent);
+                eventSource.HandleTargetStarted(ForwardEvent);
+                eventSource.HandleTargetFinished(ForwardEvent);
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Detailed))
             {
-                eventSource.TaskStarted += ForwardEvent;
-                eventSource.TaskFinished += ForwardEvent;
+                eventSource.HandleTaskStarted(ForwardEvent);
+                eventSource.HandleTaskFinished(ForwardEvent);
 
                 // MessageHandler already subscribed
                 _forwardLowImportanceMessages = true;
-                _forwardTaskCommandLine = true;
-                _forwardTaskCommandLine = true;
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Diagnostic))
             {
-                eventSource.CustomEventRaised += ForwardEvent;
-                eventSource.StatusEventRaised += BuildStatusHandler;
+                eventSource.HandleCustomEventRaised(ForwardEvent);
+                eventSource.HandleStatusEventRaised(BuildStatusHandler);
             }
 
             if (_showSummary)
             {
-                // Prevent double subscribe
-                eventSource.ErrorRaised -= ForwardEvent;
-                eventSource.WarningRaised -= ForwardEvent;
-                eventSource.ErrorRaised += ForwardEvent;
-                eventSource.WarningRaised += ForwardEvent;
+                eventSource.HandleErrorRaised(ForwardEvent);
+                eventSource.HandleWarningRaised(ForwardEvent);
             }
 
             if (_showPerfSummary)
             {
-                // Prevent double subscribe
-                eventSource.TaskStarted -= ForwardEvent;
-                eventSource.TaskFinished -= ForwardEvent;
-                eventSource.TargetStarted -= ForwardEvent;
-                eventSource.TargetFinished -= ForwardEvent;
-                eventSource.ProjectStarted -= ForwardEvent;
-                eventSource.ProjectFinished -= ForwardEvent;
-                eventSource.StatusEventRaised -= BuildStatusHandler;
-
-                eventSource.TaskStarted += ForwardEvent;
-                eventSource.TaskFinished += ForwardEvent;
-                eventSource.TargetStarted += ForwardEvent;
-                eventSource.TargetFinished += ForwardEvent;
-                eventSource.ProjectStarted += ForwardEvent;
-                eventSource.ProjectFinished += ForwardEvent;
-                eventSource.StatusEventRaised += BuildStatusHandler;
+                eventSource.HandleTaskStarted(ForwardEvent);
+                eventSource.HandleTaskFinished(ForwardEvent);
+                eventSource.HandleTargetStarted(ForwardEvent);
+                eventSource.HandleTargetFinished(ForwardEvent);
+                eventSource.HandleProjectStarted(ForwardEvent);
+                eventSource.HandleProjectFinished(ForwardEvent);
+                eventSource.HandleStatusEventRaised(BuildStatusHandler);
             }
 
             if (_showCommandLine)
@@ -408,7 +371,7 @@ private void MessageHandler(object sender, BuildMessageEventArgs e)
         /// <param name="e">The <see cref="BuildEventArgs"/> to forward.</param>
         protected virtual void ForwardToCentralLogger(BuildEventArgs e)
         {
-            _buildEventRedirector.ForwardEvent(e);
+            _buildEventRedirector?.ForwardEvent(e);
         }
 
         /// <summary>
@@ -431,7 +394,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// <summary>
         /// Console logger parameters.
         /// </summary>
-        private string _loggerParameters = null;
+        private string? _loggerParameters = null;
 
         /// <summary>
         /// Console logger parameters delimiters.
@@ -470,7 +433,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// <summary>
         /// A pointer to the central logger
         /// </summary>
-        private IEventRedirector _buildEventRedirector;
+        private IEventRedirector? _buildEventRedirector;
 
         /// <summary>
         /// Indicates if the events to forward are being set by the parameters sent to the logger
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 4ba9c258238..187c105d386 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -152,4 +152,165 @@ public interface IEventSource
         /// </summary>
         event AnyEventHandler AnyEventRaised;
     }
+
+    /// <summary>
+    /// Helper methods for <see cref="IEventSource"/> interface.
+    /// </summary>
+    public static class EventSourceExtensions
+    {
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.MessageRaised"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleMessageRaised(this IEventSource eventSource, BuildMessageEventHandler handler)
+        {
+            eventSource.MessageRaised -= handler;
+            eventSource.MessageRaised += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.ErrorRaised"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleErrorRaised(this IEventSource eventSource, BuildErrorEventHandler handler)
+        {
+            eventSource.ErrorRaised -= handler;
+            eventSource.ErrorRaised += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.WarningRaised"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleWarningRaised(this IEventSource eventSource, BuildWarningEventHandler handler)
+        {
+            eventSource.WarningRaised -= handler;
+            eventSource.WarningRaised += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.BuildStarted"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleBuildStarted(this IEventSource eventSource, BuildStartedEventHandler handler)
+        {
+            eventSource.BuildStarted -= handler;
+            eventSource.BuildStarted += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.BuildFinished"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleBuildFinished(this IEventSource eventSource, BuildFinishedEventHandler handler)
+        {
+            eventSource.BuildFinished -= handler;
+            eventSource.BuildFinished += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.ProjectStarted"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleProjectStarted(this IEventSource eventSource, ProjectStartedEventHandler handler)
+        {
+            eventSource.ProjectStarted -= handler;
+            eventSource.ProjectStarted += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.ProjectFinished"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleProjectFinished(this IEventSource eventSource, ProjectFinishedEventHandler handler)
+        {
+            eventSource.ProjectFinished -= handler;
+            eventSource.ProjectFinished += handler;
+        }
+
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TargetStarted"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleTargetStarted(this IEventSource eventSource, TargetStartedEventHandler handler)
+        {
+            eventSource.TargetStarted -= handler;
+            eventSource.TargetStarted += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TargetFinished"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleTargetFinished(this IEventSource eventSource, TargetFinishedEventHandler handler)
+        {
+            eventSource.TargetFinished -= handler;
+            eventSource.TargetFinished += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TaskStarted"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleTaskStarted(this IEventSource eventSource, TaskStartedEventHandler handler)
+        {
+            eventSource.TaskStarted -= handler;
+            eventSource.TaskStarted += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TaskFinished"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleTaskFinished(this IEventSource eventSource, TaskFinishedEventHandler handler)
+        {
+            eventSource.TaskFinished -= handler;
+            eventSource.TaskFinished += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.CustomEventRaised"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleCustomEventRaised(this IEventSource eventSource, CustomBuildEventHandler handler)
+        {
+            eventSource.CustomEventRaised -= handler;
+            eventSource.CustomEventRaised += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.StatusEventRaised"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleStatusEventRaised(this IEventSource eventSource, BuildStatusEventHandler handler)
+        {
+            eventSource.StatusEventRaised -= handler;
+            eventSource.StatusEventRaised += handler;
+        }
+
+        /// <summary>
+        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.AnyEventRaised"/> event.
+        /// </summary>
+        /// <param name="eventSource"></param>
+        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
+        public static void HandleAnyEventRaised(this IEventSource eventSource, AnyEventHandler handler)
+        {
+            eventSource.AnyEventRaised -= handler;
+            eventSource.AnyEventRaised += handler;
+        }
+    }
 }
