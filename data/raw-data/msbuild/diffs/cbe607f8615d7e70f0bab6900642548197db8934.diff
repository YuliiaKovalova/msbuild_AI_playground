diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index 025bc9a3f00..bedfbaed31e 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -434,11 +434,6 @@ internal EventHandlerHelper(IEventSource source, Exception exceptionToThrow)
                 source.TaskFinished += Source_TaskFinished;
                 source.TaskStarted += Source_TaskStarted;
                 source.WarningRaised += Source_WarningRaised;
-
-                if (source is IEventSource5 eventSource5)
-                {
-                    eventSource5.BuildCanceled += Source_BuildCanceled;
-                }
             }
             #endregion
 
@@ -679,16 +674,6 @@ private void Source_BuildFinished(object sender, BuildFinishedEventArgs e)
                 HandleEvent(e);
             }
 
-            /// <summary>
-            /// Handle a build canceled event
-            /// </summary>
-            /// <param name="sender">Who sent the event</param>
-            /// <param name="e">Event raised on the event source</param>
-            private void Source_BuildCanceled(object sender, BuildCanceledEventArgs e)
-            {
-                HandleEvent(e);
-            }
-
             /// <summary>
             /// Handle a events raised from the any event source. This source will
             /// raise all events no matter the type.
diff --git a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
index c2f62879a4e..0047482f21b 100644
--- a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
+++ b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
@@ -70,7 +70,7 @@ public void InvalidCacheFilesShouldLogError(byte[] cacheContents)
             result.OverallResult.ShouldBe(BuildResultCode.Failure);
 
             _logger.FullLog.ShouldContain("MSB4256:");
-            _logger.AllBuildEvents.Count.ShouldBe(4);
+            _logger.AllBuildEvents.Count.ShouldBe(5);
             _logger.ErrorCount.ShouldBe(1);
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 45fef5a74c2..029a907e6ba 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -20,7 +20,7 @@ internal sealed class EventSourceSink :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IEventSource5, IBuildEventSink
+        IEventSource4, IBuildEventSink
     {
         #region Events
 
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 9ce2d9766d9..6923b425d37 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1831,7 +1831,7 @@ public ProjectAddedToProjectCollectionEventArgs(ProjectRootElement element)
         /// The ReusableLogger wraps a logger and allows it to be used for both design-time and build-time.  It internally swaps
         /// between the design-time and build-time event sources in response to Initialize and Shutdown events.
         /// </summary>
-        internal class ReusableLogger : INodeLogger, IEventSource5
+        internal class ReusableLogger : INodeLogger, IEventSource4
         {
             /// <summary>
             /// The logger we are wrapping.
@@ -1863,11 +1863,6 @@ internal class ReusableLogger : INodeLogger, IEventSource5
             /// </summary>
             private BuildFinishedEventHandler _buildFinishedEventHandler;
 
-            /// <summary>
-            /// The BuildCanceled event handler
-            /// </summary>
-            private BuildCanceledEventHandler _buildCanceledEventHandler;
-
             /// <summary>
             /// The BuildStarted event handler
             /// </summary>
@@ -2193,7 +2188,6 @@ private void RegisterForEvents(IEventSource eventSource)
                 _anyEventHandler = AnyEventRaisedHandler;
                 _buildFinishedEventHandler = BuildFinishedHandler;
                 _buildStartedEventHandler = BuildStartedHandler;
-                _buildCanceledEventHandler = BuildCanceledHandler;
                 _customBuildEventHandler = CustomEventRaisedHandler;
                 _buildErrorEventHandler = ErrorRaisedHandler;
                 _buildMessageEventHandler = MessageRaisedHandler;
@@ -2253,11 +2247,6 @@ private void RegisterForEvents(IEventSource eventSource)
                         eventSource4.IncludeEvaluationPropertiesAndItems();
                     }
                 }
-
-                if (eventSource is IEventSource5 eventSource5)
-                {
-                    eventSource5.BuildCanceled += _buildCanceledEventHandler;
-                }
             }
 
             /// <summary>
@@ -2286,16 +2275,10 @@ private void UnregisterForEvents(IEventSource eventSource)
                     eventSource2.TelemetryLogged -= _telemetryEventHandler;
                 }
 
-                if (eventSource is IEventSource5 eventSource5)
-                {
-                    eventSource5.BuildCanceled -= _buildCanceledEventHandler;
-                }
-
                 // Null out the handlers.
                 _anyEventHandler = null;
                 _buildFinishedEventHandler = null;
                 _buildStartedEventHandler = null;
-                _buildCanceledEventHandler = null;
                 _customBuildEventHandler = null;
                 _buildErrorEventHandler = null;
                 _buildMessageEventHandler = null;
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index a05df1dc57e..7dc448e6fb5 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -955,11 +955,6 @@ public virtual void Initialize(IEventSource eventSource)
                 {
                     eventSource4.IncludeEvaluationPropertiesAndItems();
                 }
-
-                if (eventSource is IEventSource5 eventSource5)
-                {
-                    eventSource5.BuildCanceled += BuildCanceledHanlder;
-                }
             }
         }
 
@@ -1051,8 +1046,6 @@ private bool ApplyVerbosityParameter(string parameterValue)
 
         public abstract void BuildFinishedHandler(object sender, BuildFinishedEventArgs e);
 
-        public abstract void BuildCanceledHanlder(object sender, BuildCanceledEventArgs e);
-
         public abstract void ProjectStartedHandler(object sender, ProjectStartedEventArgs e);
 
         public abstract void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e);
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 3cbb2add764..278a0257849 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -338,16 +338,6 @@ public override void BuildFinishedHandler(object sender, BuildFinishedEventArgs
             CheckIfOutputSupportsAlignment();
         }
 
-        /// <summary>
-        /// Handler for build canceled event
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        public override void BuildCanceledHanlder(object sender, BuildCanceledEventArgs e)
-        {
-            Console.WriteLine(e.Message ?? string.Empty);
-        }
-
         /// <summary>
         /// At the end of the build, repeats the errors and warnings that occurred
         /// during the build, and displays the error count and warning count.
@@ -1222,6 +1212,10 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)
                     propertyOutputMap[evaluationKey] = value;
                 }
             }
+            else if (e is BuildCanceledEventArgs buildCanceled)
+            {
+                Console.WriteLine(e.Message ?? string.Empty);
+            }
         }
 
         private void DisplayDeferredStartedEvents(BuildEventContext e)
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index f7f62d8ef7e..ffefa6f7caa 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -181,16 +181,6 @@ public override void BuildFinishedHandler(object sender, BuildFinishedEventArgs
             ResetConsoleLoggerState();
         }
 
-        /// <summary>
-        /// Handler for build canceled event
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        public override void BuildCanceledHanlder(object sender, BuildCanceledEventArgs e)
-        {
-            Console.WriteLine(e.Message ?? string.Empty);
-        }
-
         /// <summary>
         /// At the end of the build, repeats the errors and warnings that occurred
         /// during the build, and displays the error count and warning count.
@@ -597,6 +587,10 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)
                     }
                 }
             }
+            else if (e is BuildCanceledEventArgs buildCanceled)
+            {
+                Console.WriteLine(e.Message ?? string.Empty);
+            }
         }
 
         /// <summary>
diff --git a/src/Framework/IEventSource5.cs b/src/Framework/IEventSource5.cs
deleted file mode 100644
index 30c65301391..00000000000
--- a/src/Framework/IEventSource5.cs
+++ /dev/null
@@ -1,15 +0,0 @@
-ï»¿namespace Microsoft.Build.Framework
-{
-    /// <summary>
-    /// This interface defines the events raised by the build engine.
-    /// Loggers use this interface to subscribe to the events they
-    /// are interested in receiving.
-    /// </summary>
-    public interface IEventSource5 : IEventSource4
-    {
-        /// <summary>
-        /// this event is raised to log the cancellation of a build
-        /// </summary>
-        event BuildCanceledEventHandler BuildCanceled;
-    }
-}
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index e73727afdd5..2da8cc65882 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -262,6 +262,7 @@ public void Initialize(IEventSource eventSource)
         eventSource.TargetStarted += TargetStarted;
         eventSource.TargetFinished += TargetFinished;
         eventSource.TaskStarted += TaskStarted;
+        eventSource.StatusEventRaised += StatusEventRaised;
 
         eventSource.MessageRaised += MessageRaised;
         eventSource.WarningRaised += WarningRaised;
@@ -271,13 +272,9 @@ public void Initialize(IEventSource eventSource)
         {
             eventSource4.IncludeEvaluationPropertiesAndItems();
         }
-
-        if (eventSource is IEventSource5 eventSource5)
-        {
-            eventSource5.BuildCanceled += BuildCanceled;
-        }
     }
 
+
     /// <summary>
     /// Parses out the logger parameters from the Parameters string.
     /// </summary>
@@ -456,9 +453,12 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
         _testEndTime = null;
     }
 
-    private void BuildCanceled(object sender, BuildCanceledEventArgs e)
+    private void StatusEventRaised(object sender, BuildStatusEventArgs e)
     {
-        _buildCanceledEventAgrs = e;
+        if (e is BuildCanceledEventArgs buildCanceledEventArgs)
+        {
+            _buildCanceledEventAgrs = buildCanceledEventArgs;
+        }
     }
 
     /// <summary>
