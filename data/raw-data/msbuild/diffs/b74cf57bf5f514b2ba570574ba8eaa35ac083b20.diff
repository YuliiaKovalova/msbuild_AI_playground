diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index c30daf0e763..fb85f1e1982 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -3585,18 +3585,49 @@ public void PropertyFunctionStringPadLeft2()
             TestPropertyFunction("$(prop.PadLeft(2, '0'))", "prop", "x", "0x");
         }
 
+        [Fact]
+        public void PropertyFunctionStringPadRight1()
+        {
+            TestPropertyFunction("$(prop.PadRight(2))", "prop", "x", "x ");
+        }
+
+        [Fact]
+        public void PropertyFunctionStringPadRight2()
+        {
+            TestPropertyFunction("$(prop.PadRight(2, '0'))", "prop", "x", "x0");
+        }
+
         [Fact]
         public void PropertyFunctionStringTrimEndCharArray()
         {
             TestPropertyFunction("$(prop.TrimEnd('.0123456789'))", "prop", "net461", "net");
         }
 
+        [Fact]
+        public void PropertyFunctionStringTrimStart()
+        {
+            TestPropertyFunction("$(X.TrimStart('vV'))", "X", "v40", "40");
+        }
+
+        [Fact]
+        public void PropertyFunctionStringTrimStartNoQuotes()
+        {
+            TestPropertyFunction("$(X.TrimStart(vV))", "X", "v40", "40");
+        }
+
         [Fact]
         public void PropertyFunctionStringTrimEnd1()
         {
             TestPropertyFunction("$(prop.TrimEnd('a'))", "prop", "netaa", "net");
         }
 
+        // https://github.com/Microsoft/msbuild/issues/2882
+        [Fact]
+        public void PropertyFunctionMathMaxOverflow()
+        {
+            TestPropertyFunction("$([System.Math]::Max($(X), 0))", "X", "-2010", "0");
+        }
+
         [Fact]
         public void PropertyFunctionStringTrimEnd2()
         {
@@ -3606,6 +3637,60 @@ public void PropertyFunctionStringTrimEnd2()
             });
         }
 
+        [Fact]
+        public void PropertyFunctionMathMin()
+        {
+            TestPropertyFunction("$([System.Math]::Min($(X), 20))", "X", "30", "20");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildAdd()
+        {
+            TestPropertyFunction("$([MSBuild]::Add($(X), 5))", "X", "7", "12");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildSubtract()
+        {
+            TestPropertyFunction("$([MSBuild]::Subtract($(X), 20100000))", "X", "20100042", "42");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildMultiply()
+        {
+            TestPropertyFunction("$([MSBuild]::Multiply($(X), 8800))", "X", "2", "17600");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildDivide()
+        {
+            TestPropertyFunction("$([MSBuild]::Divide($(X), 10000))", "X", "65536", "6.5536");
+        }
+
+        [Fact]
+        public void PropertyFunctionConvertToString()
+        {
+            TestPropertyFunction("$([System.Convert]::ToString(`.`))", "_", "_", ".");
+        }
+
+        [Fact]
+        public void PropertyFunctionConvertToInt32()
+        {
+            TestPropertyFunction("$([System.Convert]::ToInt32(42))", "_", "_", "42");
+        }
+
+        [Fact]
+        public void PropertyFunctionToCharArray()
+        {
+            TestPropertyFunction("$([System.Convert]::ToString(`.`).ToCharArray())", "_", "_", ".");
+        }
+
+        [Fact]
+        public void PropertyFunctionStringArrayGetValue()
+        {
+            TestPropertyFunction("$(X.Split($([System.Convert]::ToString(`.`).ToCharArray())).GetValue($([System.Convert]::ToInt32(0))))", "X", "ab.cd", "ab");
+        }
+
         private void TestPropertyFunction(string expression, string propertyName, string propertyValue, string expected)
         {
             var properties = new PropertyDictionary<ProjectPropertyInstance>();
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 8f93eeb63ab..1b1a16af42c 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3347,6 +3347,30 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                             return true;
                         }
                     }
+                    else if (string.Equals(_methodMethodName, "PadRight", StringComparison.OrdinalIgnoreCase))
+                    {
+                        int totalWidth;
+                        string paddingChar;
+                        if (TryGetArg(args, out totalWidth))
+                        {
+                            returnVal = text.PadRight(totalWidth);
+                            return true;
+                        }
+                        else if (TryGetArgs(args, out totalWidth, out paddingChar) && paddingChar.Length == 1)
+                        {
+                            returnVal = text.PadRight(totalWidth, paddingChar[0]);
+                            return true;
+                        }
+                    }
+                    else if (string.Equals(_methodMethodName, "TrimStart", StringComparison.OrdinalIgnoreCase))
+                    {
+                        string trimChars;
+                        if (TryGetArg(args, out trimChars) && trimChars.Length > 0)
+                        {
+                            returnVal = text.TrimStart(trimChars.ToCharArray());
+                            return true;
+                        }
+                    }
                     else if (string.Equals(_methodMethodName, "TrimEnd", StringComparison.OrdinalIgnoreCase))
                     {
                         string trimChars;
@@ -3379,6 +3403,69 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                     }
                 }
+                else if (objectInstance == null)
+                {
+                    if (_receiverType == typeof(Math))
+                    {
+                        if (string.Equals(_methodMethodName, "Max", StringComparison.OrdinalIgnoreCase))
+                        {
+                            double arg0, arg1;
+                            if (TryGetArgs(args, out arg0, out arg1))
+                            {
+                                returnVal = Math.Max(arg0, arg1);
+                                return true;
+                            }
+                        }
+                        else if (string.Equals(_methodMethodName, "Min", StringComparison.OrdinalIgnoreCase))
+                        {
+                            double arg0, arg1;
+                            if (TryGetArgs(args, out arg0, out arg1))
+                            {
+                                returnVal = Math.Min(arg0, arg1);
+                                return true;
+                            }
+                        }
+                    }
+                    else if (_receiverType == typeof(IntrinsicFunctions))
+                    {
+                        if (string.Equals(_methodMethodName, "Add", StringComparison.OrdinalIgnoreCase))
+                        {
+                            double arg0, arg1;
+                            if (TryGetArgs(args, out arg0, out arg1))
+                            {
+                                returnVal = arg0 + arg1;
+                                return true;
+                            }
+                        }
+                        else if (string.Equals(_methodMethodName, "Subtract", StringComparison.OrdinalIgnoreCase))
+                        {
+                            double arg0, arg1;
+                            if (TryGetArgs(args, out arg0, out arg1))
+                            {
+                                returnVal = arg0 - arg1;
+                                return true;
+                            }
+                        }
+                        else if (string.Equals(_methodMethodName, "Multiply", StringComparison.OrdinalIgnoreCase))
+                        {
+                            double arg0, arg1;
+                            if (TryGetArgs(args, out arg0, out arg1))
+                            {
+                                returnVal = arg0 * arg1;
+                                return true;
+                            }
+                        }
+                        else if (string.Equals(_methodMethodName, "Divide", StringComparison.OrdinalIgnoreCase))
+                        {
+                            double arg0, arg1;
+                            if (TryGetArgs(args, out arg0, out arg1))
+                            {
+                                returnVal = arg0 / arg1;
+                                return true;
+                            }
+                        }
+                    }
+                }
 
                 returnVal = null;
                 return false;
@@ -3437,6 +3524,29 @@ private static bool TryGetArgs(object[] args, out int arg0, out int arg1)
                 return false;
             }
 
+            private static bool TryGetArgs(object[] args, out double arg0, out double arg1)
+            {
+                arg0 = 0;
+                arg1 = 0;
+
+                if (args.Length != 2)
+                {
+                    return false;
+                }
+
+                var value0 = args[0] as string;
+                var value1 = args[1] as string;
+                if (value0 != null &&
+                    value1 != null &&
+                    double.TryParse(value0, out arg0) &&
+                    double.TryParse(value1, out arg1))
+                {
+                    return true;
+                }
+
+                return false;
+            }
+
             private static bool TryGetArgs(object[] args, out int arg0, out string arg1)
             {
                 arg0 = 0;
@@ -3858,6 +3968,12 @@ private static object[] CoerceArguments(object[] args, ParameterInfo[] parameter
                 {
                     return null;
                 }
+                catch (OverflowException)
+                {
+                    // https://github.com/Microsoft/msbuild/issues/2882
+                    // test: PropertyFunctionMathMaxOverflow
+                    return null;
+                }
 
                 return coercedArguments;
             }
