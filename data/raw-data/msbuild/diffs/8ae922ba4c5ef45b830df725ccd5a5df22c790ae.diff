diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 22ee7ccf750..3689423fa05 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -993,12 +993,12 @@ public void ForwardCompatibleRead_HandleUnknownEvent()
             // Now move back to the beginning of the stream and start reading.
             memoryStream.Position = 0;
 
+            List<BinaryLogReaderErrorEventArgs> readerErrors = new();
             using var buildEventArgsReader = new BuildEventArgsReader(binaryReader, BinaryLogger.FileFormatVersion)
             {
                 SkipUnknownEvents = true
             };
 
-            List<BinaryLogReaderErrorEventArgs> readerErrors = new();
             buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index d15c2a63c95..cee55c5231d 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -63,7 +63,7 @@ static BinaryLogReplayEventSource()
         /// </summary>
         public bool AllowForwardCompatibility { private get; init; }
 
-        /// <inheritdoc cref="IBinaryLogReaderErrors.OnRecoverableReadError"/>
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.OnRecoverableReadError"/>
         public event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
 
         /// <summary>
@@ -297,31 +297,31 @@ event Action<EmbeddedContentEventArgs>? IEmbeddedContentSource.EmbeddedContentRe
         }
 
         private Action<StringReadEventArgs>? _stringReadDone;
-        /// <inheritdoc cref="IBuildEventStringsReader.StringReadDone"/>
-        event Action<StringReadEventArgs>? IBuildEventStringsReader.StringReadDone
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringReadDone"/>
+        event Action<StringReadEventArgs>? IBuildEventArgsReaderNotifications.StringReadDone
         {
             add => _stringReadDone += value;
             remove => _stringReadDone -= value;
         }
 
         private Action<ArchiveFileEventArgs>? _archiveFileEncountered;
-        /// <inheritdoc cref="IBuildFileReader.ArchiveFileEncountered"/>
-        event Action<ArchiveFileEventArgs>? IBuildFileReader.ArchiveFileEncountered
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/>
+        event Action<ArchiveFileEventArgs>? IBuildEventArgsReaderNotifications.ArchiveFileEncountered
         {
             add => _archiveFileEncountered += value;
             remove => _archiveFileEncountered -= value;
         }
 
         private Action? _stringEncountered;
-        /// <inheritdoc cref="IBuildEventStringsReader.StringEncountered"/>
-        event Action? IBuildEventStringsReader.StringEncountered
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringEncountered"/>
+        event Action? IBuildEventArgsReaderNotifications.StringEncountered
         {
             add => _stringEncountered += value;
             remove => _stringEncountered -= value;
         }
 
         private Action<BinaryLogRecordKind, Stream>? _rawLogRecordReceived;
-        /// <inheritdoc cref="IBuildEventStringsReader.StringReadDone"/>
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringReadDone"/>
         event Action<BinaryLogRecordKind, Stream>? IRawLogEventsSource.RawLogRecordReceived
         {
             add => _rawLogRecordReceived += value;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index d421cf154b8..4bc4f016730 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -9,6 +9,7 @@
 using System.IO.Compression;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.CompilerServices;
 using System.Text;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
@@ -124,7 +125,7 @@ private void EnsureForwardCompatibleReadingSupported()
         }
 
         /// <summary>
-        /// Receives recoverable errors during reading. See <see cref="IBinaryLogReaderErrors.OnRecoverableReadError"/> for documentation on arguments.
+        /// Receives recoverable errors during reading. See <see cref="IBuildEventArgsReaderNotifications.OnRecoverableReadError"/> for documentation on arguments.
         /// Applicable mainly when <see cref="SkipUnknownEvents"/> or <see cref="SkipUnknownEventParts"/> is set to true."/>
         /// </summary>
         public event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
@@ -138,10 +139,10 @@ public void Dispose()
             }
         }
 
-        /// <inheritdoc cref="IBuildEventStringsReader.StringReadDone"/>
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringReadDone"/>
         public event Action<StringReadEventArgs>? StringReadDone;
 
-        /// <inheritdoc cref="IBuildEventStringsReader.StringEncountered"/>
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringEncountered"/>
         public event Action? StringEncountered;
 
         internal int FileFormatVersion => _fileFormatVersion;
@@ -149,7 +150,7 @@ public void Dispose()
         /// <inheritdoc cref="IEmbeddedContentSource.EmbeddedContentRead"/>
         internal event Action<EmbeddedContentEventArgs>? EmbeddedContentRead;
 
-        /// <inheritdoc cref="IBuildFileReader.ArchiveFileEncountered"/>
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/>
         public event Action<ArchiveFileEventArgs>? ArchiveFileEncountered;
 
         private SubStream? _lastSubStream;
@@ -193,6 +194,16 @@ internal RawRecord ReadRaw()
             return new(recordKind, stream);
         }
 
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+        private void CheckErrorsSubscribed()
+        {
+            if ((_skipUnknownEvents || _skipUnknownEventParts) && OnRecoverableReadError == null)
+            {
+                throw new InvalidOperationException(
+                    ResourceUtilities.GetResourceString("Binlog_MissingRecoverableErrorSubscribeError"));
+            }
+        }
+
         /// <summary>
         /// Reads the next log record from the <see cref="BinaryReader"/>.
         /// </summary>
@@ -202,6 +213,7 @@ internal RawRecord ReadRaw()
         /// </returns>
         public BuildEventArgs? Read()
         {
+            CheckErrorsSubscribed();
             BuildEventArgs? result = null;
             while (result == null)
             {
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
index 762bf9a0616..ec8ba12c8b1 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Logging
 {
     /// <summary>
     /// An object model for binlog embedded files.
-    /// Used in <see cref="IBuildFileReader.ArchiveFileEncountered"/> event.
+    /// Used in <see cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/> event.
     /// </summary>
     public abstract class ArchiveData : IDisposable
     {
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgs.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgs.cs
index e01b5aee76f..9dc2b2e42a1 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgs.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgs.cs
@@ -6,7 +6,7 @@
 namespace Microsoft.Build.Logging;
 
 /// <summary>
-/// Event arguments for <see cref="IBuildFileReader.ArchiveFileEncountered"/> event.
+/// Event arguments for <see cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/> event.
 /// </summary>
 public sealed class ArchiveFileEventArgs : EventArgs
 {
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
index 697cad442f8..985e761411a 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.Logging;
 public static class ArchiveFileEventArgsExtensions
 {
     /// <summary>
-    /// Helper method that allows to subscribe to <see cref="IBuildFileReader.ArchiveFileEncountered"/> event via <see cref="IBuildEventStringsReader.StringReadDone"/> event handler.
+    /// Helper method that allows to subscribe to <see cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/> event via <see cref="IBuildEventArgsReaderNotifications.StringReadDone"/> event handler.
     ///
     /// This applies only when subscriber is OK with greedy reading entire content of the file and is interested only in the individual strings (e.g. for sensitive data redaction purposes),
     ///  without distinction what each individual string means (e.g. they do not care about distinction between path and content or between individual files - they just need all textual data).
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs b/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
index 2f3c5194246..f90f7f28636 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Logging
     internal delegate string FormatErrorMessage();
 
     /// <summary>
-    /// An event args for <see cref="IBinaryLogReaderErrors.OnRecoverableReadError"/> event.
+    /// An event args for <see cref="IBuildEventArgsReaderNotifications.OnRecoverableReadError"/> event.
     /// </summary>
     public sealed class BinaryLogReaderErrorEventArgs : EventArgs
     {
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
deleted file mode 100644
index 3f7cfc090fe..00000000000
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
+++ /dev/null
@@ -1,18 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Logging
-{
-    public interface IBinaryLogReaderErrors
-    {
-        /// <summary>
-        /// Receives recoverable errors during reading.
-        /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
-        /// In case of <see cref="ReaderErrorType.UnknownEventData"/> this is raised before returning the structured representation of a build event
-        /// that has some extra unknown data in the binlog. In case of other error types this event is raised and the offending build event is skipped and not returned.
-        /// </summary>
-        event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
-    }
-}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
index 401c10a7ec0..54adc7af29a 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
@@ -1,14 +1,63 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
     /// An interface for notifications from BuildEventArgsReader
     /// </summary>
-    public interface IBuildEventArgsReaderNotifications :
-        IBuildEventStringsReader,
-        IBuildFileReader,
-        IBinaryLogReaderErrors
-    { }
+    public interface IBuildEventArgsReaderNotifications
+    {
+        /// <summary>
+        /// An event that allows the subscriber to be notified when a string is read from the binary log.
+        /// Subscriber may adjust the string by setting <see cref="StringReadEventArgs.StringToBeUsed"/> property.
+        /// The passed event arg can be reused and should not be stored.
+        /// </summary>
+        public event Action<StringReadEventArgs>? StringReadDone;
+
+        /// <summary>
+        /// An event that allows the caller to be notified when a string is encountered in the binary log.
+        /// BinaryReader passed in ctor is at the beginning of the string at this point.
+        /// </summary>
+        /// <remarks>
+        ///    <format type="text/markdown"><![CDATA[
+        /// ## Remarks
+        /// > [!CAUTION]
+        /// > Use <see cref="StringReadDone"/> instead of this method.
+        /// ]]></format>
+        /// </remarks>
+        public event Action? StringEncountered;
+
+        /// <summary>
+        /// An event that allows the caller to be notified when an embedded file is encountered in the binary log.
+        /// When subscriber is OK with greedy reading entire content of the file and is interested only in the individual strings (e.g. for sensitive data redaction purposes),
+        ///  it can simplify subscribing to this event, by using handler with same signature as handler for <see cref="IBuildEventArgsReaderNotifications.StringReadDone"/> and wrapping it via
+        /// <see cref="ArchiveFileEventArgsExtensions.ToArchiveFileHandler"/> extension.
+        /// </summary>
+        /// <example>
+        /// <code>
+        /// private void OnStringReadDone(StringReadEventArgs e)
+        /// {
+        ///     e.StringToBeUsed = e.StringToBeUsed.Replace("foo", "bar");
+        /// }
+        ///
+        /// private void SubscribeToEvents()
+        /// {
+        ///     reader.StringReadDone += OnStringReadDone;
+        ///     reader.ArchiveFileEncountered += ((Action&lt;StringReadEventArgs&gt;)OnStringReadDone).ToArchiveFileHandler();
+        /// }
+        /// </code>
+        /// </example>
+        public event Action<ArchiveFileEventArgs>? ArchiveFileEncountered;
+
+        /// <summary>
+        /// Receives recoverable errors during reading.
+        /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
+        /// In case of <see cref="ReaderErrorType.UnknownEventData"/> this is raised before returning the structured representation of a build event
+        /// that has some extra unknown data in the binlog. In case of other error types this event is raised and the offending build event is skipped and not returned.
+        /// </summary>
+        event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
+    }
 }
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventStringsReader.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventStringsReader.cs
deleted file mode 100644
index b3345563c59..00000000000
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventStringsReader.cs
+++ /dev/null
@@ -1,33 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Logging
-{
-    /// <summary>
-    /// An interface for notifications about reading strings from the binary log.
-    /// </summary>
-    public interface IBuildEventStringsReader
-    {
-        /// <summary>
-        /// An event that allows the subscriber to be notified when a string is read from the binary log.
-        /// Subscriber may adjust the string by setting <see cref="StringReadEventArgs.StringToBeUsed"/> property.
-        /// The passed event arg can be reused and should not be stored.
-        /// </summary>
-        public event Action<StringReadEventArgs>? StringReadDone;
-
-        /// <summary>
-        /// An event that allows the caller to be notified when a string is encountered in the binary log.
-        /// BinaryReader passed in ctor is at the beginning of the string at this point.
-        /// </summary>
-        /// <remarks>
-        ///    <format type="text/markdown"><![CDATA[
-        /// ## Remarks
-        /// > [!CAUTION]
-        /// > Use <see cref="StringReadDone"/> instead of this method.
-        /// ]]></format>
-        /// </remarks>
-        public event Action? StringEncountered;
-    }
-}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs
deleted file mode 100644
index f25d62ea3e5..00000000000
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildFileReader.cs
+++ /dev/null
@@ -1,31 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Logging;
-
-public interface IBuildFileReader
-{
-    /// <summary>
-    /// An event that allows the caller to be notified when an embedded file is encountered in the binary log.
-    /// When subscriber is OK with greedy reading entire content of the file and is interested only in the individual strings (e.g. for sensitive data redaction purposes),
-    ///  it can simplify subscribing to this event, by using handler with same signature as handler for <see cref="IBuildEventStringsReader.StringReadDone"/> and wrapping it via
-    /// <see cref="ArchiveFileEventArgsExtensions.ToArchiveFileHandler"/> extension.
-    /// </summary>
-    /// <example>
-    /// <code>
-    /// private void OnStringReadDone(StringReadEventArgs e)
-    /// {
-    ///     e.StringToBeUsed = e.StringToBeUsed.Replace("foo", "bar");
-    /// }
-    ///
-    /// private void SubscribeToEvents()
-    /// {
-    ///     reader.StringReadDone += OnStringReadDone;
-    ///     reader.ArchiveFileEncountered += ((Action&lt;StringReadEventArgs&gt;)OnStringReadDone).ToArchiveFileHandler();
-    /// }
-    /// </code>
-    /// </example>
-    public event Action<ArchiveFileEventArgs>? ArchiveFileEncountered;
-}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/StringReadEventArgs.cs b/src/Build/Logging/BinaryLogger/Postprocessing/StringReadEventArgs.cs
index e2a4c83d3cb..909cec443eb 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/StringReadEventArgs.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/StringReadEventArgs.cs
@@ -6,7 +6,7 @@
 namespace Microsoft.Build.Logging
 {
     /// <summary>
-    /// An event args for <see cref="IBuildEventStringsReader.StringReadDone"/> callback.
+    /// An event args for <see cref="IBuildEventArgsReaderNotifications.StringReadDone"/> callback.
     /// </summary>
     public sealed class StringReadEventArgs : EventArgs
     {
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 8342fdb88bf..8f0517a651c 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -2010,6 +2010,9 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <data name="Binlog_Source_MissingSubscribeError" xml:space="preserve">
     <value>No subscribers for any events.</value>
   </data>
+  <data name="Binlog_MissingRecoverableErrorSubscribeError" xml:space="preserve">
+    <value>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</value>
+  </data>
   <data name="Binlog_ImportFileSizeError" xml:space="preserve">
     <value>Imported files archive exceeded 2GB limit and it's not embedded.</value>
   </data>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 97e24669d53..856a8dde064 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index b61ba300108..abfff4c3ddc 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index bfc2dfb55bc..8f0d3582dad 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 188acdce600..7c8a8f278bc 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index a417d087394..acd44b3f547 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index ee38f2ecaf4..6441bb60728 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 715afd9f3f7..b360f4676a2 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 23d93c9179c..531ca34fb9a 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 3d33f58bbd7..7f65c6fc8b6 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index c5ee4f262d9..a450d7a71c8 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 5d63f43066d..6e01bb79978 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 07b9790b9a4..59df706024c 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index bffcda5673b..a13c00ca779 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -53,6 +53,11 @@
         <target state="new">Imported files archive exceeded 2GB limit and it's not embedded.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
+        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
         <source>BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</source>
         <target state="new">BuildEvent record number {0} (serialized size: {1}) attempted to perform disallowed reads (details: {2}: {3}).</target>
