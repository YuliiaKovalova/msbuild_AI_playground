diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 7528431810a..9dc051c711e 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -1,4 +1,4 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -944,7 +944,7 @@ public async Task WaitForExitAsync(ILoggingService loggingService)
                     _process.Id);
                 CommunicationsUtilities.Trace("Killing node with pid = {0}", _process.Id);
 
-                _process.KillTree(timeout: 5000);
+                _process.KillTree(timeoutMilliseconds: 5000);
             }
 
 #if FEATURE_APM
diff --git a/src/Shared/ProcessExtensions.cs b/src/Shared/ProcessExtensions.cs
index 9504440d124..e09db350365 100644
--- a/src/Shared/ProcessExtensions.cs
+++ b/src/Shared/ProcessExtensions.cs
@@ -5,13 +5,12 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Shared
 {
     internal static class ProcessExtensions
     {
-        public static void KillTree(this Process process, int timeout)
+        public static void KillTree(this Process process, int timeoutMilliseconds)
         {
             if (NativeMethodsShared.IsWindows)
             {
@@ -41,7 +40,7 @@ public static void KillTree(this Process process, int timeout)
             // wait until the process finishes exiting/getting killed. 
             // We don't want to wait forever here because the task is already supposed to be dieing, we just want to give it long enough
             // to try and flush what it can and stop. If it cannot do that in a reasonable time frame then we will just ignore it.
-            process.WaitForExit(timeout);
+            process.WaitForExit(timeoutMilliseconds);
         }
 
         private static void GetAllChildIdsUnix(int parentId, ISet<int> children)
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index e24dca74ec4..edc892a75a9 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -15,14 +15,19 @@ public class ProcessExtensions_Tests
         [Fact]
         public async Task KillTree()
         {
-            Process p = Process.Start("sleep", "600"); // sleep 10m.
+            var psi =
+                NativeMethodsShared.IsWindows ?
+                    new ProcessStartInfo("powershell", "-NoLogo -NoProfile -command \"Start-Sleep -Seconds 600\"") :
+                    new ProcessStartInfo("sleep", "600");
+
+            Process p = Process.Start(psi); // sleep 10m.
 
             // Verify the process is running.
             await Task.Delay(500);
             p.HasExited.ShouldBe(false);
 
             // Kill the process.
-            p.KillTree(timeout: 5000);
+            p.KillTree(timeoutMilliseconds: 5000);
             p.HasExited.ShouldBe(true);
             p.ExitCode.ShouldNotBe(0);
         }
