diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 7204146c1cd..95eefda8a53 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -96,12 +96,12 @@ internal class RequestBuilder : IRequestBuilder, IRequestBuilderCallback, IBuild
         /// <summary>
         /// Flag indicating we are in an MSBuild callback
         /// </summary>
-        private bool _inMSBuildCallback = false;
+        private bool _inMSBuildCallback;
 
         /// <summary>
         /// Flag indicating whether this request builder has been zombied by a cancellation request.
         /// </summary>
-        private bool _isZombie = false;
+        private bool _isZombie;
 
         /// <summary>
         /// Creates a new request builder.
@@ -1382,7 +1382,7 @@ private ISet<string> ParseWarningCodes(string warnings)
         private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
         {
             private readonly BlockingCollection<Task> _tasks = new BlockingCollection<Task>();
-            private int _availableThreads = 0;
+            private int _availableThreads;
 
             protected override void QueueTask(Task task)
             {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 0c07dae6d6f..46b3297ee7a 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -686,7 +686,7 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         /// <summary>
         /// Enables or disables emitting a default error when a task fails without logging errors
         /// </summary>
-        public bool AllowFailureWithoutError { get; set; } = false;
+        public bool AllowFailureWithoutError { get; set; }
 
         #endregion
 
@@ -756,12 +756,12 @@ public bool ShouldTreatWarningAsError(string warningCode)
         /// <summary>
         /// Additional cores granted to the task by the scheduler. Does not include the one implicit core automatically granted to all tasks.
         /// </summary>
-        private int _additionalAcquiredCores = 0;
+        private int _additionalAcquiredCores;
 
         /// <summary>
         /// True if the one implicit core has been allocated by <see cref="RequestCores"/>, false otherwise.
         /// </summary>
-        private bool _isImplicitCoreUsed = false;
+        private bool _isImplicitCoreUsed;
 
         /// <summary>
         /// Total number of cores granted to the task, including the one implicit core.
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index baa4c5b1a44..8793cfbc1ba 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -94,13 +94,13 @@ internal class Scheduler : IScheduler
         /// The number of inproc nodes that can be created without hitting the
         /// node limit.
         /// </summary>
-        private int _currentInProcNodeCount = 0;
+        private int _currentInProcNodeCount;
 
         /// <summary>
         /// The number of out-of-proc nodes that can be created without hitting the
         /// node limit.
         /// </summary>
-        private int _currentOutOfProcNodeCount = 0;
+        private int _currentOutOfProcNodeCount;
 
         /// <summary>
         /// The collection of all requests currently known to the system.
@@ -170,7 +170,7 @@ internal class Scheduler : IScheduler
 
         private NodeLoggingContext _inprocNodeContext;
 
-        private int _loggedWarningsForProxyBuildsOnOutOfProcNodes = 0;
+        private int _loggedWarningsForProxyBuildsOnOutOfProcNodes;
 
         /// <summary>
         /// Constructor.
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index cb08aee7b3e..7d69f53fdcd 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -620,7 +620,7 @@ public int Version
         /// </summary>
         public DateTime LastWriteTimeWhenRead => Link != null ? RootLink.LastWriteTimeWhenRead : _lastWriteTimeWhenReadUtc.ToLocalTime();
 
-        internal DateTime? StreamTimeUtc = null;
+        internal DateTime? StreamTimeUtc;
 
         /// <summary>
         /// This does not allow conditions, so it should not be called.
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index b623fed7040..cbb229e6633 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -174,7 +174,7 @@ public class Toolset : ITranslatable
         /// <summary>
         /// Delegate to check to see if a directory exists
         /// </summary>
-        private DirectoryExists _directoryExists = null;
+        private DirectoryExists _directoryExists;
 
         /// <summary>
         /// Delegate for loading Xml.  For unit testing only.
diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index e2df26e70dd..938d44c09af 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -25,7 +25,7 @@ internal class ToolsetConfigurationReader : ToolsetReader
         /// <summary>
         /// A section of a toolset configuration
         /// </summary>
-        private ToolsetConfigurationSection _configurationSection = null;
+        private ToolsetConfigurationSection _configurationSection;
 
         /// <summary>
         /// Delegate used to read application configurations
@@ -35,7 +35,7 @@ internal class ToolsetConfigurationReader : ToolsetReader
         /// <summary>
         /// Flag indicating that an attempt has been made to read the configuration
         /// </summary>
-        private bool _configurationReadAttempted = false;
+        private bool _configurationReadAttempted;
 
         /// <summary>
         /// Character used to separate search paths specified for MSBuildExtensionsPath* in
diff --git a/src/Build/Errors/InvalidProjectFileException.cs b/src/Build/Errors/InvalidProjectFileException.cs
index 6588acce0b8..c60f757eee9 100644
--- a/src/Build/Errors/InvalidProjectFileException.cs
+++ b/src/Build/Errors/InvalidProjectFileException.cs
@@ -370,6 +370,6 @@ internal set
         // the F1-help keyword for the host IDE
         private string helpKeyword;
         // Has this errors been sent to the loggers?
-        private bool hasBeenLogged = false;
+        private bool hasBeenLogged;
     }
 }
diff --git a/src/Build/Errors/InvalidToolsetDefinitionException.cs b/src/Build/Errors/InvalidToolsetDefinitionException.cs
index 79354ecd57d..eba95ecb488 100644
--- a/src/Build/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Build/Errors/InvalidToolsetDefinitionException.cs
@@ -20,7 +20,7 @@ public class InvalidToolsetDefinitionException : Exception
         /// <summary>
         /// The MSBuild error code corresponding with this exception.
         /// </summary>
-        private string errorCode = null;
+        private string errorCode;
 
         /// <summary>
         /// Basic constructor.
diff --git a/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs b/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
index 18e1caad924..76b45b4be63 100644
--- a/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal abstract class MultipleComparisonNode : OperatorExpressionNode
     {
-        private bool _conditionedPropertiesUpdated = false;
+        private bool _conditionedPropertiesUpdated;
 
         /// <summary>
         /// Compare numbers
diff --git a/src/Build/Evaluation/Conditionals/Parser.cs b/src/Build/Evaluation/Conditionals/Parser.cs
index 292226a5ed8..41b447cc64e 100644
--- a/src/Build/Evaluation/Conditionals/Parser.cs
+++ b/src/Build/Evaluation/Conditionals/Parser.cs
@@ -43,11 +43,11 @@ internal sealed class Parser
         private Scanner _lexer;
         private ParserOptions _options;
         private ElementLocation _elementLocation;
-        internal int errorPosition = 0; // useful for unit tests
+        internal int errorPosition; // useful for unit tests
 
         #region REMOVE_COMPAT_WARNING
 
-        private bool _warnedForExpression = false;
+        private bool _warnedForExpression;
 
         private BuildEventContext _logBuildEventContext;
         /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/Scanner.cs b/src/Build/Evaluation/Conditionals/Scanner.cs
index 04af6a1a016..0f27a965823 100644
--- a/src/Build/Evaluation/Conditionals/Scanner.cs
+++ b/src/Build/Evaluation/Conditionals/Scanner.cs
@@ -31,10 +31,10 @@ internal sealed class Scanner
         internal bool _errorState;
         private int _errorPosition;
         // What we found instead of what we were looking for
-        private string _unexpectedlyFound = null;
+        private string _unexpectedlyFound;
         private ParserOptions _options;
-        private string _errorResource = null;
-        private static string s_endOfInput = null;
+        private string _errorResource;
+        private static string s_endOfInput;
 
         /// <summary>
         /// Lazily format resource string to help avoid (in some perf critical cases) even loading
diff --git a/src/Build/Evaluation/Conditionals/StringExpressionNode.cs b/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
index f87cd766ca5..96f724f1f7d 100644
--- a/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
@@ -154,7 +154,7 @@ internal override void ResetState()
             _shouldBeTreatedAsVisualStudioVersion = null;
         }
 
-        private bool? _shouldBeTreatedAsVisualStudioVersion = null;
+        private bool? _shouldBeTreatedAsVisualStudioVersion;
 
         /// <summary>
         /// Should this node be treated as an expansion of VisualStudioVersion, rather than
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index 349a561c231..28191ba6056 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -16,9 +16,9 @@ internal partial class LazyItemEvaluator<P, I, M, D>
         class UpdateOperation : LazyItemOperation
         {
             private readonly ImmutableList<ProjectMetadataElement> _metadata;
-            private ImmutableList<ItemBatchingContext>.Builder _itemsToUpdate = null;
-            private ItemSpecMatchesItem _matchItemSpec = null;
-            private bool? _needToExpandMetadataForEachItem = null;
+            private ImmutableList<ItemBatchingContext>.Builder _itemsToUpdate;
+            private ItemSpecMatchesItem _matchItemSpec;
+            private bool? _needToExpandMetadataForEachItem;
 
             public UpdateOperation(OperationBuilderWithMetadata builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
                 : base(builder, lazyEvaluator)
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 99dc789d996..791c42e9592 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -34,7 +34,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
         private readonly LoggingContext _loggingContext;
         private readonly EvaluationProfiler _evaluationProfiler;
 
-        private int _nextElementOrder = 0;
+        private int _nextElementOrder;
 
         private Dictionary<string, LazyItemList> _itemLists = Traits.Instance.EscapeHatches.UseCaseSensitiveItemNames ?
             new Dictionary<string, LazyItemList>() :
diff --git a/src/Build/Instance/HostServices.cs b/src/Build/Instance/HostServices.cs
index a27e5787cfb..064ae4a50d7 100644
--- a/src/Build/Instance/HostServices.cs
+++ b/src/Build/Instance/HostServices.cs
@@ -384,8 +384,8 @@ internal class MonikerNameOrITaskHost
         {
             public ITaskHost TaskHost { get; }
             public string MonikerName { get; }
-            public bool IsTaskHost { get; } = false;
-            public bool IsMoniker { get; } = false;
+            public bool IsTaskHost { get; }
+            public bool IsMoniker { get; }
             public MonikerNameOrITaskHost(ITaskHost taskHost)
             {
                 TaskHost = taskHost;
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 4596be57f52..88265e4e242 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -31,7 +31,7 @@ internal class AssemblyTaskFactory : ITaskFactory2
         /// <summary>
         /// Name of the task wrapped by the task factory
         /// </summary>
-        private string _taskName = null;
+        private string _taskName;
 
         /// <summary>
         /// The loaded type (type, assembly name / file) of the task wrapped by the factory
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 99bc7663895..d489b8feaa4 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -91,7 +91,7 @@ internal class TaskHostTask : IGeneratedTask, ICancelableTask, INodePacketFactor
         /// <summary>
         /// True if currently connected to the task host; false otherwise. 
         /// </summary>
-        private bool _connectedToTaskHost = false;
+        private bool _connectedToTaskHost;
 
         /// <summary>
         /// The provider for task host nodes. 
@@ -117,7 +117,7 @@ internal class TaskHostTask : IGeneratedTask, ICancelableTask, INodePacketFactor
         /// <summary>
         /// Did the task succeed? 
         /// </summary>
-        private bool _taskExecutionSucceeded = false;
+        private bool _taskExecutionSucceeded;
 
         /// <summary>
         /// Constructor
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 1f7480ffc0c..8ff3d28b728 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -75,14 +75,14 @@ internal static ConsoleColor BackgroundColor
         /// and warnings summary at the end of a build.
         /// </summary>
         /// <value>null</value>
-        public string Parameters { get; set; } = null;
+        public string Parameters { get; set; }
 
         /// <summary>
         /// Suppresses the display of project headers. Project headers are
         /// displayed by default unless this property is set.
         /// </summary>
         /// <remarks>This is only needed by the IDE logger.</remarks>
-        internal bool SkipProjectStartedText { get; set; } = false;
+        internal bool SkipProjectStartedText { get; set; }
 
         /// <summary>
         /// Suppresses the display of error and warnings summary.
@@ -1148,12 +1148,12 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <summary>
         /// Delegate used to change text color.
         /// </summary>
-        internal ColorSetter setColor = null;
+        internal ColorSetter setColor;
 
         /// <summary>
         /// Delegate used to reset text color
         /// </summary>
-        internal ColorResetter resetColor = null;
+        internal ColorResetter resetColor;
 
         /// <summary>
         /// Number of spaces that each level of indentation is worth
@@ -1163,7 +1163,7 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <summary>
         /// Keeps track of the current indentation level.
         /// </summary>
-        internal int currentIndentLevel = 0;
+        internal int currentIndentLevel;
 
         /// <summary>
         /// The kinds of newline breaks we expect.
@@ -1190,7 +1190,7 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <summary>
         /// When true, accumulate performance numbers.
         /// </summary>
-        internal bool showPerfSummary = false;
+        internal bool showPerfSummary;
 
         /// <summary>
         /// When true, show the list of item and property values at the start of each project
@@ -1200,7 +1200,7 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <summary>
         /// Should the target output items be displayed
         /// </summary>
-        internal bool showTargetOutputs = false;
+        internal bool showTargetOutputs;
 
         /// <summary>
         /// When true, suppresses all messages except for warnings. (And possibly errors, if showOnlyErrors is true.)
@@ -1220,23 +1220,23 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <summary>
         /// When true, indicates that the logger should tack the project file onto the end of errors and warnings.
         /// </summary>
-        protected bool showProjectFile = false;
+        protected bool showProjectFile;
 
         internal bool ignoreLoggerErrors = true;
 
-        internal bool runningWithCharacterFileType = false;
+        internal bool runningWithCharacterFileType;
 
         #region Per-build Members
 
         /// <summary>
         /// Number of errors encountered in this build
         /// </summary>
-        internal int errorCount = 0;
+        internal int errorCount;
 
         /// <summary>
         /// Number of warnings encountered in this build
         /// </summary>
-        internal int warningCount = 0;
+        internal int warningCount;
 
         /// <summary>
         /// A list of the errors that have occurred during this build.
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index c6be1d59db3..371df743324 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -22,7 +22,7 @@ public class BuildEventArgsReader : IDisposable
     {
         private readonly BinaryReader binaryReader;
         private readonly int fileFormatVersion;
-        private long recordNumber = 0;
+        private long recordNumber;
 
         /// <summary>
         /// A list of string records we've encountered so far. If it's a small string, it will be the string directly.
@@ -1291,7 +1291,7 @@ public StringStorage()
                 }
             }
 
-            private long totalAllocatedShortStrings = 0;
+            private long totalAllocatedShortStrings;
 
             public object Add(string text)
             {
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index c6358a9badb..d1f3409fe4b 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -50,7 +50,7 @@ public class ConsoleLogger : INodeLogger
         private ColorSetter _colorSet;
         private ColorResetter _colorReset;
         private string _parameters;
-        private bool _skipProjectStartedText = false;
+        private bool _skipProjectStartedText;
         private bool? _showSummary;
 
         #region Constructors
diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 83c2499aefa..9bddd0f5028 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -512,7 +512,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// <summary>
         /// Console logger parameters.
         /// </summary>
-        private string _loggerParameters = null;
+        private string _loggerParameters;
 
         /// <summary>
         /// Console logger parameters delimiters.
@@ -572,12 +572,12 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// <summary>
         /// When true, accumulate performance numbers.
         /// </summary>
-        private bool _showPerfSummary = false;
+        private bool _showPerfSummary;
 
         /// <summary>
         /// When true the commandline message is sent
         /// </summary>
-        private bool _showCommandLine = false;
+        private bool _showCommandLine;
 
         /// <summary>
         /// Id of the node the logger is attached to
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index a68b477bfdc..598f8e5315e 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1769,7 +1769,7 @@ internal override void PrintCounterMessage(WriteLinePrettyFromResourceDelegate W
         private BuildEventContext _lastDisplayedBuildEventContext;
         private int _bufferWidth = -1;
         private readonly object _lockObject = new Object();
-        private int _prefixWidth = 0;
+        private int _prefixWidth;
         private ProjectFullKey _lastProjectFullKey = new ProjectFullKey(-1, -1);
         private bool _alignMessages;
         private bool _forceNoAlign;
diff --git a/src/Build/Logging/ProfilerLogger.cs b/src/Build/Logging/ProfilerLogger.cs
index 5d0ed444b07..9c0542b3def 100644
--- a/src/Build/Logging/ProfilerLogger.cs
+++ b/src/Build/Logging/ProfilerLogger.cs
@@ -29,7 +29,7 @@ public sealed class ProfilerLogger : ILogger
         /// <summary>
         /// Aggregation of all profiled locations. Computed the first time <see cref="GetAggregatedResult"/> is called.
         /// </summary>
-        private Dictionary<EvaluationLocation, ProfiledLocation> _aggregatedLocations = null;
+        private Dictionary<EvaluationLocation, ProfiledLocation> _aggregatedLocations;
 
         /// <summary>
         /// If null, no file is saved to disk
