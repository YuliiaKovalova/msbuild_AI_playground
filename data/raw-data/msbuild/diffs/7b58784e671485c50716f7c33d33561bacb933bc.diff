diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index ad59f4d890f..55abe5b8b8f 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -313,6 +313,7 @@ public ErrorFromResources() { }
     public partial class Exec : Microsoft.Build.Tasks.ToolTaskExtension
     {
         public Exec() { }
+        public string CharactersToEscape { set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public string Command { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 14e40af12dd..ef427ed5041 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -243,6 +243,7 @@ public ErrorFromResources() { }
     public partial class Exec : Microsoft.Build.Tasks.ToolTaskExtension
     {
         public Exec() { }
+        public string CharactersToEscape { set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public string Command { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 2885865bf20..a9366849b2d 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -56,8 +56,6 @@ public void EscapeParenthesesInPathToGeneratedBatchFile()
         {
             using (var testEnvironment = TestEnvironment.Create())
             {
-                // This test counts files in TEMP. If it uses the system TEMP, some
-                // other process may interfere. Use a private TEMP instead.
                 var newTempPath = testEnvironment.CreateNewTempPathWithSubfolder("hello()wo(rld)").TempPath;
 
                 string tempPath = Path.GetTempPath();
@@ -65,6 +63,7 @@ public void EscapeParenthesesInPathToGeneratedBatchFile()
 
                 // Now run the Exec task on a simple command.
                 Exec exec = PrepareExec("echo Hello World!");
+                exec.CharactersToEscape = "()";
                 exec.Execute().ShouldBeTrue();
             }
         }
@@ -939,6 +938,56 @@ echo line 3"" />
                 }
             }
         }
+
+        [Fact]
+        public void EndToEndMultilineExec_WithCharactersToEscapeMetadata()
+        {
+            using (var env = TestEnvironment.Create(_output))
+            {
+                var testProject = env.CreateTestProjectWithFiles(@"<Project>
+<Target Name=""ExecCommand"">
+  <Exec CharactersToEscape=""()"" Command=""echo Hello, World!"" />
+   </Target>
+</Project>");
+
+                // Ensure path has subfolders
+                var newTempPath = env.CreateNewTempPathWithSubfolder("hello()wo(rld)").TempPath;
+                string tempPath = Path.GetTempPath();
+                Assert.StartsWith(newTempPath, tempPath);
+
+                using (var buildManager = new BuildManager())
+                {
+                    MockLogger logger = new MockLogger(_output, profileEvaluation: false, printEventsToStdout: false);
+
+                    var parameters = new BuildParameters()
+                    {
+                        Loggers = new[] { logger },
+                    };
+
+                    var collection = new ProjectCollection(
+                        new Dictionary<string, string>(),
+                        new[] { logger },
+                        remoteLoggers: null,
+                        ToolsetDefinitionLocations.Default,
+                        maxNodeCount: 1,
+                        onlyLogCriticalEvents: false,
+                        loadProjectsReadOnly: true);
+
+                    var project = collection.LoadProject(testProject.ProjectFile).CreateProjectInstance();
+
+                    var request = new BuildRequestData(
+                        project,
+                        targetsToBuild: new[] { "ExecCommand" },
+                        hostServices: null);
+
+                    var result = buildManager.Build(parameters, request);
+
+                    logger.AssertLogContains("Hello, World!");
+
+                    result.OverallResult.ShouldBe(BuildResultCode.Success);
+                }
+            }
+        }
     }
 
     internal class ExecWrapper : Exec
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index e84e5468b1b..9df0fd277d4 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -188,6 +188,19 @@ public ITaskItem[] Outputs
         [Output]
         public ITaskItem[] ConsoleOutput => !ConsoleToMSBuild ? Array.Empty<ITaskItem>(): _nonEmptyOutput.ToArray();
 
+        private HashSet<char> _charactersToEscape;
+
+        public string CharactersToEscape
+        {
+            set
+            {
+                if (!string.IsNullOrEmpty(value))
+                {
+                    _charactersToEscape = new HashSet<char>(value);
+                }
+            }
+        }
+
         #endregion
 
         #region Methods
@@ -618,12 +631,12 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
 
                     StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
 
-                    // Escape any '(', ')', or '&'
+                    // Escape any characters specified by the CharactersToEscape metadata, or '&'
                     for (int i = 0; i < batchFileForCommandLine.Length; i++)
                     {
                         char c = batchFileForCommandLine[i];
 
-                        if ((c == '(' || c == ')' || c == '&') && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
+                        if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
                         {
                             fileName.Append('^');
                         }
@@ -637,6 +650,12 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
             }
         }
 
+        private bool ShouldEscapeCharacter(char c)
+        {
+            // Escape '&' to preserve previous functionality
+            return c == '&' || (_charactersToEscape != null && _charactersToEscape.Contains(c));
+        }
+
         #endregion
 
         #region Overridden properties
