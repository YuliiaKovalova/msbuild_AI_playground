diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
index 5de7e1ed874..7c1f5fad53e 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
@@ -9,6 +9,7 @@
 using System.Diagnostics;
 
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
+using System.Linq;
 
 #nullable disable
 
@@ -290,15 +291,7 @@ public List<BuildRequestConfiguration> GetUnresolvedConfigurationsToIssue()
         /// </summary>
         public string[] GetActiveTargets()
         {
-            var activeTargets = new string[RequestConfiguration.ActivelyBuildingTargets.Count];
-
-            int index = 0;
-            foreach (string target in RequestConfiguration.ActivelyBuildingTargets.Keys)
-            {
-                activeTargets[index++] = target;
-            }
-
-            return activeTargets;
+            return RequestConfiguration.ActivelyBuildingTargets.Keys.ToArray();
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
index 3aefd150c03..8f3c13e8646 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
@@ -1072,11 +1072,7 @@ public void ApplyModifications(MetadataModifications other)
                 if (other._keepOnlySpecified)
                 {
                     // Any metadata not specified in other must be removed from this one.
-                    var metadataToRemove = new List<string>(_modifications.Keys.Where(m => other[m].Remove));
-                    foreach (var metadata in metadataToRemove)
-                    {
-                        _modifications.Remove(metadata);
-                    }
+                    _modifications = _modifications.Where(m => !other[m.Key].Remove).ToDictionary(x => x.Key, x => x.Value);
                 }
 
                 _keepOnlySpecified |= other._keepOnlySpecified;
diff --git a/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs b/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs
index 353136c50e8..950880bb8f2 100644
--- a/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs
+++ b/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
+using System.Linq;
 using System.Windows.Markup;
 
 #nullable disable
@@ -41,16 +42,7 @@ public List<IProjectSchemaNode> Nodes
         [SuppressMessage("Microsoft.Usage", "CA2301:EmbeddableTypesInContainersRule", MessageId = "allTypes", Justification = "All object types come from within this assembly, so there will not be any type equivalence problems")]
         public IEnumerable<Type> GetSchemaObjectTypes()
         {
-            Dictionary<Type, bool> allTypes = new Dictionary<Type, bool>();
-            foreach (IProjectSchemaNode node in Nodes)
-            {
-                foreach (Type t in node.GetSchemaObjectTypes())
-                {
-                    allTypes[t] = true;
-                }
-            }
-
-            return allTypes.Keys;
+            return Nodes.SelectMany(node => node.GetSchemaObjectTypes()).Distinct();
         }
 
         /// <summary>
