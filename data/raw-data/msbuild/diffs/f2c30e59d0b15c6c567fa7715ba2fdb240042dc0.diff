diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 7e450ebf59e..1c3842942f3 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -336,7 +336,7 @@
     </Task>
   </UsingTask>
 
-  <Target Name="ValidateMSBuildPackageDependencyVersions" BeforeTargets="AfterBuild">
+  <Target Name="ValidateMSBuildPackageDependencyVersions" BeforeTargets="AfterBuild" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" >
     <ValidateMSBuildPackageDependencyVersions AppConfig="@(AppConfigWithTargetPath)" AssemblyPath="$(OutputPath)%(_TargetFrameworks.Identity)" />
   </Target>
 
diff --git a/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs b/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
index e5b5fae6837..255bd2fa53a 100644
--- a/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
+++ b/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
@@ -2,6 +2,7 @@
 using Microsoft.Build.Utilities;
 using System;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using System.Xml;
 namespace MSBuild
@@ -13,68 +14,50 @@ public class ValidateMSBuildPackageDependencyVersions : Task
         [Required]
         public string AssemblyPath { get; set; }
 
+        private string[] assembliesToIgnore = { "Microsoft.Build.Conversion.Core", "Microsoft.NET.StringTools.net35", "Microsoft.Build.Engine", "Microsoft.Activities.Build", "XamlBuildTask" };
+
         public override bool Execute()
         {
             XmlDocument doc = new XmlDocument();
             doc.Load(AppConfig);
-            foreach (var topLevelElement in doc.ChildNodes)
+            var runtime = doc.SelectSingleNode("configuration").SelectSingleNode("runtime");
+            foreach (var node in runtime.ChildNodes)
             {
-                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals("configuration", StringComparison.OrdinalIgnoreCase))
+                if (node is XmlElement assemblyBinding && assemblyBinding.Name.Equals("assemblyBinding"))
                 {
-                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)
+                    foreach (var assemblyBindingElement in assemblyBinding.ChildNodes)
                     {
-                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals("runtime", StringComparison.OrdinalIgnoreCase))
+                        string name = string.Empty;
+                        string version = string.Empty;
+                        if (assemblyBindingElement is not XmlElement dependentAssemblyElement)
+                        {
+                            continue;
+                        }
+                        foreach (var dependentAssembly in dependentAssemblyElement.ChildNodes)
+                        {
+                            if (dependentAssembly is XmlElement dependentAssemblyXmlElement)
+                            {
+                                if (dependentAssemblyXmlElement.Name.Equals("assemblyIdentity", StringComparison.OrdinalIgnoreCase))
+                                {
+                                    name = dependentAssemblyXmlElement.GetAttribute("name");
+                                }
+                                else if (dependentAssemblyXmlElement.Name.Equals("bindingRedirect", StringComparison.OrdinalIgnoreCase))
+                                {
+                                    version = dependentAssemblyXmlElement.GetAttribute("newVersion");
+                                }
+                            }
+                        }
+                        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version) && !assembliesToIgnore.Contains(name, StringComparer.OrdinalIgnoreCase))
                         {
-                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)
+                            string path = Path.Combine(AssemblyPath, name + ".dll");
+                            string assemblyVersion = AssemblyName.GetAssemblyName(path).Version.ToString();
+                            if (!version.Equals(assemblyVersion))
                             {
-                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals("assemblyBinding", StringComparison.OrdinalIgnoreCase))
+                                // It is unusual to want to redirect down, but in this case it's ok: 4.0.3.0 forwards to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file
+                                // and makes that resolution faster. Still verify that the versions are exactly as in this comment, as that may change.
+                                if (!(String.Equals(name, "System.ValueTuple", StringComparison.OrdinalIgnoreCase) && String.Equals(version, "4.0.0.0") && String.Equals(assemblyVersion, "4.0.3.0")))
                                 {
-                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)
-                                    {
-                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals("dependentAssembly", StringComparison.OrdinalIgnoreCase))
-                                        {
-                                            string name = string.Empty;
-                                            string version = string.Empty;
-                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)
-                                            {
-                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)
-                                                {
-                                                    if (dependentAssemblyXmlElement.Name.Equals("assemblyIdentity", StringComparison.OrdinalIgnoreCase))
-                                                    {
-                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)
-                                                        {
-                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals("name", StringComparison.OrdinalIgnoreCase))
-                                                            {
-                                                                name = assemblyIdentityAttributeXmlElement.Value;
-                                                            }
-                                                        }
-                                                    }
-                                                    else if (dependentAssemblyXmlElement.Name.Equals("bindingRedirect", StringComparison.OrdinalIgnoreCase))
-                                                    {
-                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)
-                                                        {
-                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals("newVersion", StringComparison.OrdinalIgnoreCase))
-                                                            {
-                                                                version = bindingRedirectAttributeXmlElement.Value;
-                                                            }
-                                                        }
-                                                    }
-                                                }
-                                            }
-                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))
-                                            {
-                                                string path = Path.Combine(AssemblyPath, name + ".dll");
-                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;
-                                                if (!version.Equals(assemblyVersion))
-                                                {
-                                                    if (!(String.Equals(name, "System.ValueTuple", StringComparison.OrdinalIgnoreCase) && String.Equals(version, "4.0.0.0") && String.Equals(assemblyVersion, "4.0.3.0")))
-                                                    {
-                                                        Log.LogError($"Binding redirect for '{name}' redirects to a different version ({version}) than MSBuild ships ({assemblyVersion}).");
-                                                    }
-                                                }
-                                            }
-                                        }
-                                    }
+                                    Log.LogError($"Binding redirect for '{name}' redirects to a different version ({version}) than MSBuild ships ({assemblyVersion}).");
                                 }
                             }
                         }
