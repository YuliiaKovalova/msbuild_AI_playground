diff --git a/src/Tasks/ManifestUtil/ManifestReader.cs b/src/Tasks/ManifestUtil/ManifestReader.cs
index a593a21610a..29d859df0a9 100644
--- a/src/Tasks/ManifestUtil/ManifestReader.cs
+++ b/src/Tasks/ManifestUtil/ManifestReader.cs
@@ -54,7 +54,7 @@ private static XmlDocument GetXmlDocument(string path)
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
                 byte[] buffer = new byte[2];
-                ReadExactly(s, buffer, 0, 2);
+                s.ReadExactly(buffer, 0, 2);
                 s.Position = 0;
                 var document = new XmlDocument();
                 var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
@@ -138,7 +138,7 @@ public static Manifest ReadManifest(string manifestType, string path, bool prese
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
                 byte[] buffer = new byte[2];
-                ReadExactly(s, buffer, 0, 2);
+                s.ReadExactly(buffer, 0, 2);
                 s.Position = 0;
                 // if first two bytes are "MZ" then we're looking at an .exe or a .dll not a .manifest
                 if ((buffer[0] == 0x4D) && (buffer[1] == 0x5A))
@@ -247,28 +247,6 @@ private static Manifest Deserialize(Stream s)
             }
         }
 
-#if NET
-        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)
-        {
-            stream.ReadExactly(buffer, offset, count);
-        }
-#else
-        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)
-        {
-            while (count > 0)
-            {
-                int read = stream.Read(buffer, offset, count);
-                if (read <= 0)
-                {
-                    throw new EndOfStreamException();
-                }
-                offset += read;
-                count -= read;
-            }
-        }
-#endif
-    }
-
     internal class ComInfo
     {
         public ComInfo(string manifestFileName, string componentFileName, string clsid, string tlbid)
@@ -286,3 +264,32 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,
         public string TlbId { get; }
     }
 }
+
+#if !NET
+namespace System.IO
+{
+    public static class StreamExtensions
+    {
+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)
+        {
+            if (buffer == null)
+                throw new ArgumentNullException(nameof(buffer));
+            if (offset < 0 || offset >= buffer.Length)
+                throw new ArgumentOutOfRangeException(nameof(offset));
+            if (count < 0 || offset + count > buffer.Length)
+                throw new ArgumentOutOfRangeException(nameof(count));
+
+            while (count > 0)
+            {
+                int read = stream.Read(buffer, offset, count);
+                if (read <= 0)
+                {
+                    throw new EndOfStreamException();
+                }
+                offset +=read;
+                count -= read;
+            }
+        }
+    }
+}
+#endif
\ No newline at end of file
diff --git a/src/Tasks/ManifestUtil/PathUtil.cs b/src/Tasks/ManifestUtil/PathUtil.cs
index 017ed281e5e..a784fd6be36 100644
--- a/src/Tasks/ManifestUtil/PathUtil.cs
+++ b/src/Tasks/ManifestUtil/PathUtil.cs
@@ -163,22 +163,7 @@ public static bool IsPEFile(string path)
             byte[] buffer = new byte[2];
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
-#if NET
                 s.ReadExactly(buffer, 0, 2);
-#else
-                int count = 2;
-                int offset = 0;
-                while (count > 0)
-                {
-                    int read = s.Read(buffer, offset, count);
-                    if (read <= 0)
-                    {
-                        throw new EndOfStreamException();
-                    }
-                    offset += read;
-                    count -= read;
-                }
-#endif
             }
 
             // if first two bytes are "MZ" then we're looking at an .exe or a .dll not a .manifest
diff --git a/src/Tasks/StrongNameUtils.cs b/src/Tasks/StrongNameUtils.cs
index 4c2ef5f2b3c..f1aef67e8c0 100644
--- a/src/Tasks/StrongNameUtils.cs
+++ b/src/Tasks/StrongNameUtils.cs
@@ -50,22 +50,7 @@ internal static void ReadKeyFile(TaskLoggingHelper log, string keyFile, out Stro
                     keyFileContents = new byte[fileLength];
 
                     // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
-#if NET
                     fs.ReadExactly(keyFileContents, 0, fileLength);
-#else
-                    int count = fileLength;
-                    int offset = 0;
-                    while (count > 0)
-                    {
-                        int read = fs.Read(keyFileContents, offset, count);
-                        if (read <= 0)
-                        {
-                            throw new EndOfStreamException();
-                        }
-                        offset += read;
-                        count -= read;
-                    }
-#endif
                 }
             }
             catch (ArgumentException e)
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index 119dc10cfac..f99b7af9a60 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -1735,22 +1735,7 @@ public void CreateFileDoesntRecordWriteIfNotWrittenTo()
                 var buffer = new byte[10];
                 using (FileStream fs = File.Open(readFile, FileMode.Open, FileAccess.ReadWrite, FileShare.None))
                 {
-#if NET
                     fs.ReadExactly(buffer, 0, 10);
-#else
-                    int count = 10;
-                    int offset = 0;
-                    while (count > 0)
-                    {
-                        int read = fs.Read(buffer, offset, count);
-                        if (read <= 0)
-                        {
-                            throw new EndOfStreamException();
-                        }
-                        offset += read;
-                        count -= read;
-                    }
-#endif
                 }
 
                 FileTracker.WriteContextTLogs(testDir, tlogRootName);
