diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 9e5f061ece4..c86ac786792 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -529,56 +529,38 @@ public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
         {
             int key = GetWarningsAsErrorOrMessageKey(context);
 
-            // If there is definitely nothing to convert into an error, return early.
-            if (WarningsAsErrors == null && (_warningsAsErrorsByProject == null || !_warningsAsErrorsByProject.ContainsKey(key)))
+            if (_warningsAsErrorsByProject != null && _warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))
             {
-                return null;
-            }
-
-            HashSet<string> allWarningsAsErrors = new HashSet<string>();
+                if (WarningsAsErrors != null)
+                {
+                    warningsAsErrors.UnionWith(WarningsAsErrors);
+                }
 
-            if (WarningsAsErrors != null)
-            {
-                allWarningsAsErrors.UnionWith(WarningsAsErrors);
+                return warningsAsErrors;
             }
-
-            if (_warningsAsErrorsByProject != null)
+            else
             {
-                if (_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))
-                {
-                    allWarningsAsErrors.UnionWith(warningsAsErrors);
-                }
+                return WarningsAsErrors;
             }
-
-            return allWarningsAsErrors;
         }
 
         public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
         {
             int key = GetWarningsAsErrorOrMessageKey(context);
 
-            // If there is definitely nothing to convert into an message, return early.
-            if (WarningsAsMessages == null && (_warningsAsMessagesByProject == null || !_warningsAsMessagesByProject.ContainsKey(key)))
+            if (_warningsAsMessagesByProject != null && _warningsAsMessagesByProject.TryGetValue(key, out ISet<string> warningsAsMessages))
             {
-                return null;
-            }
-
-            HashSet<string> allWarningsAsMessages = new HashSet<string>();
+                if (WarningsAsMessages != null)
+                {
+                    warningsAsMessages.UnionWith(WarningsAsMessages);
+                }
 
-            if (WarningsAsMessages != null)
-            {
-                allWarningsAsMessages.UnionWith(WarningsAsMessages);
+                return warningsAsMessages;
             }
-
-            if (_warningsAsMessagesByProject != null)
+            else
             {
-                if (_warningsAsMessagesByProject.TryGetValue(key, out ISet<string> warningsAsMessages))
-                {
-                    allWarningsAsMessages.UnionWith(warningsAsMessages);
-                }
+                return WarningsAsMessages;
             }
-
-            return allWarningsAsMessages;
         }
 
         public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
