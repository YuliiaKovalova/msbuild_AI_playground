diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 74b92cf6040..54651d0abb7 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -14,6 +14,9 @@ public class FancyLogger : ILogger
         public Dictionary<int, FancyLoggerBufferLine> targetConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
         public Dictionary<int, FancyLoggerBufferLine> taskConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
 
+        private float existingTasks = 1;
+        private float completedTasks = 0;
+
         public string Parameters {  get; set; }
 
         public LoggerVerbosity Verbosity { get; set; }
@@ -80,7 +83,7 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             targetConsoleLines[e.BuildEventContext.TargetId] = FancyLoggerBuffer.WriteNewLine("\t  "
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + e.TargetName);
-            Thread.Sleep(200);
+            Thread.Sleep(10);
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
@@ -96,16 +99,20 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         // Task
         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
+            existingTasks++;
             if (e.BuildEventContext?.TaskId == null) return;
             taskConsoleLines[e.BuildEventContext.TaskId] = FancyLoggerBuffer.WriteNewLine("\t\t  "
                 + ANSIBuilder.Formatting.Dim("Task: ")
                 + e.TaskName
             );
-            Thread.Sleep(200);
+            Thread.Sleep(100);
+
+            FancyLoggerBuffer.WriteFooter($"Build: {(completedTasks / existingTasks) * 100}");
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
+            completedTasks++;
             if (e.BuildEventContext?.TaskId == null) return;
             int lineId = taskConsoleLines[e.BuildEventContext.TaskId].Id;
             FancyLoggerBuffer.UpdateLine(lineId, "\t\t"
@@ -113,6 +120,7 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
                 + ANSIBuilder.Formatting.Dim("Task: ")
                 + ANSIBuilder.Formatting.Color(e.TaskName, ANSIBuilder.Formatting.ForegroundColor.Green)
             );
+            FancyLoggerBuffer.WriteFooter($"Build: {(completedTasks / existingTasks) * 100}");
         }
 
         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
@@ -136,7 +144,7 @@ public void Shutdown() {
             {
                 if (FancyLoggerBuffer.AutoScrollEnabled) break;
             }
-            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            FancyLoggerBuffer.Terminate();
             Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
         }
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index cfbcd2eae1d..9113453d53c 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -28,19 +28,24 @@ public FancyLoggerBufferLine(string text)
     }
     internal static class FancyLoggerBuffer
     {
+        public static bool AutoScrollEnabled = true;
+        private static bool IsTerminated = false;
+
+
+        private static Task? keysPressTask;
         private static List<FancyLoggerBufferLine> lines = new();
         private static int Height {
             get { return Console.BufferHeight; }
         }
         private static int CurrentTopLineIndex = 0;
-        public static bool AutoScrollEnabled = true;
         public static void Initialize()
         {
             // Setup event listeners
-            var arrowsPressTask = Task.Run(() =>
+            keysPressTask = Task.Run(() =>
             {
                 while (true)
                 {
+                    if (IsTerminated) return;
                     switch (Console.ReadKey().Key)
                     {
                         case ConsoleKey.UpArrow:
@@ -58,28 +63,22 @@ public static void Initialize()
             // Switch to alternate buffer
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
             // Render contents
-            RenderTitleBar();
-            RenderFooter();
+            WriteTitleBar();
+            WriteFooter("This is an empty footer haha");
             ScrollToEnd();
         }
-
-        #region Rendering and scrolling
-        private static void RenderTitleBar()
-        {
-            Console.Write(""
-                + ANSIBuilder.Cursor.Home()
-                + ANSIBuilder.Formatting.Inverse("                         MSBuild                         ")
-            );
-        }
-        private static void RenderFooter()
+        public static void Terminate()
         {
-            Console.Write(""
-                + ANSIBuilder.Cursor.Position(Height - 2, 0) // Position at bottom
-                + "---------------------------------------------------------\n"
-                + "Build: 13%"
-            );
+            // Switch to main buffer
+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            // Dispose event listeners
+            IsTerminated = true;
+            // Delete lines
+            lines = new();
         }
 
+        
+
         private static void ScrollToLine(int firstLineIndex)
         {
             if (firstLineIndex < 0) return;
@@ -119,7 +118,6 @@ private static void ScrollToEnd()
             // Go to end
             Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
         }
-        #endregion
 
         private static void ScrollUp()
         {
@@ -152,6 +150,22 @@ public static int GetLineIndexById(int lineId)
             return lines[i];
         }
 
+        public static void WriteTitleBar()
+        {
+            Console.Write(""
+                + ANSIBuilder.Cursor.Home()
+                + ANSIBuilder.Formatting.Inverse("                         MSBuild                         ")
+            );
+        }
+        public static void WriteFooter(string text)
+        {
+            Console.Write(""
+                + ANSIBuilder.Cursor.Position(Height - 2, 0) // Position at bottom
+                + "---------------------------------------------------------\n"
+                + ANSIBuilder.Eraser.LineCursorToEnd()
+                + text
+            );
+        }
         public static FancyLoggerBufferLine WriteNewLine(string text)
         {
             // Create line
