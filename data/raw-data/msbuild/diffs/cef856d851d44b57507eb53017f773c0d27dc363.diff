diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index e4ce0c64991..780b68ac658 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -137,6 +137,31 @@ public void FileWithPathAndDirectoryDoesNotExist()
             Assert.True(File.Exists(task.OutputFile.ItemSpec));
         }
 
+        /// <summary>
+        /// File name is set but no OutputDirectory
+        /// </summary>
+        [Fact]
+        public void FileNameNoDirectory()
+        {
+            WriteCodeFragment task = new WriteCodeFragment();
+            MockEngine engine = new MockEngine(true);
+            task.BuildEngine = engine;
+            task.Language = "c#";
+            task.AssemblyAttributes = new TaskItem[] { new TaskItem("aa") };
+
+            string fileName = "file.tmp";
+            string file = Path.GetFullPath(fileName);
+            task.OutputFile = new TaskItem(fileName);
+            bool result = task.Execute();
+
+            Assert.True(result);
+
+            Assert.Equal(file, task.OutputFile.ItemSpec);
+            Assert.True(File.Exists(file));
+
+            FileUtilities.DeleteNoThrow(file);
+        }
+
         /// <summary>
         /// Ignore directory if file is rooted
         /// </summary>
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index 77128537b7a..eaa58637ae8 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -110,6 +110,12 @@ public override bool Execute()
                 {
                     OutputFile = new TaskItem(Path.Combine(OutputDirectory.ItemSpec, OutputFile.ItemSpec));
                 }
+                else if (OutputFile != null && OutputDirectory == null && !Path.IsPathRooted(OutputFile.ItemSpec))
+                {
+                    // In case specified OutputFile path is a file name but OutputDirectory is not set, expand it to a fully qualified path based on current directory.
+                    // So that it has the directory given to ensuring directory exists.
+                    OutputFile.ItemSpec = Path.GetFullPath(OutputFile.ItemSpec);
+                }
 
                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));
 
