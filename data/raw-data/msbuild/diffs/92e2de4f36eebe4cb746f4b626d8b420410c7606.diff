diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 78438286918..df59e2628e1 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -423,8 +423,8 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                 {
                     // We need to find the task before logging the task started event so that the using task statement comes before the task started event
                     IDictionary<string, string> taskIdentityParameters = GatherTaskIdentityParameters(bucket.Expander);
-                    TaskRequirements? requirements = _taskExecutionHost.FindTask(taskIdentityParameters);
-                    string taskAssemblyName = _taskExecutionHost.FindTaskAssemblyName(taskIdentityParameters)?.FullName;
+                    (TaskRequirements? requirements, TaskFactoryWrapper taskFactoryWrapper) = _taskExecutionHost.FindTask(taskIdentityParameters);
+                    string taskAssemblyName = taskFactoryWrapper?.TaskFactoryLoadedType?.LoadedAssemblyName?.Name;
 
                     if (requirements != null)
                     {
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 3d041d8bc71..e07cccc7a8d 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -266,13 +266,13 @@ public void InitializeForTask(IBuildEngine2 buildEngine, TargetLoggingContext lo
         /// Ask the task host to find its task in the registry and get it ready for initializing the batch
         /// </summary>
         /// <returns>The task requirements if the task is found, null otherwise.</returns>
-        public TaskRequirements? FindTask(IDictionary<string, string> taskIdentityParameters)
+        public (TaskRequirements? requirements, TaskFactoryWrapper taskFactoryWrapper) FindTask(IDictionary<string, string> taskIdentityParameters)
         {
             _taskFactoryWrapper ??= FindTaskInRegistry(taskIdentityParameters);
 
             if (_taskFactoryWrapper is null)
             {
-                return null;
+                return (null, null);
             }
 
             TaskRequirements requirements = TaskRequirements.None;
@@ -291,18 +291,7 @@ public void InitializeForTask(IBuildEngine2 buildEngine, TargetLoggingContext lo
                 _remotedTaskItems = new List<TaskItem>();
             }
 
-            return requirements;
-        }
-
-        /// <summary>
-        /// Ask the task host to find task assembly name
-        /// </summary>
-        /// <returns>The task assembly name if the task is found, null otherwise.</returns>
-        public AssemblyName FindTaskAssemblyName(IDictionary<string, string> taskIdentityParameters)
-        {
-            _taskFactoryWrapper ??= FindTaskInRegistry(taskIdentityParameters);
-
-            return _taskFactoryWrapper?.TaskFactoryLoadedType.LoadedAssemblyName;
+            return (requirements, _taskFactoryWrapper);
         }
 
         /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 54de65d1d05..72bace38264 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -69,6 +69,8 @@ public sealed class BinaryLogger : ILogger
         //   - Adding serialized events lengths - to support forward compatible reading
         // version 19:
         //   - GeneratedFileUsedEventArgs exposed for brief period of time (so let's continue with 20)
+        // version 20:
+        //   - TaskStartedEventArgs: Added TaskAssemblyName property
 
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
@@ -76,7 +78,7 @@ public sealed class BinaryLogger : ILogger
 
         // The current version of the binary log representation.
         // Changes with each update of the binary log format.
-        internal const int FileFormatVersion = 18;
+        internal const int FileFormatVersion = 20;
 
         // The minimum version of the binary log reader that can read log of above version.
         // This should be changed only when the binary log format is changed in a way that would prevent it from being
