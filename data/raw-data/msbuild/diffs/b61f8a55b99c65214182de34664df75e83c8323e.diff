diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..1821bec9b08 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -54,7 +54,7 @@
     <Rule Id="CA1068" Action="None" />             <!-- CancellationToken parameters must come last --> 
     <Rule Id="CA1069" Action="None" />             <!-- Enums values should not be duplicated --> 
     <Rule Id="CA1070" Action="Info" />             <!-- Do not declare event fields as virtual --> 
-    <Rule Id="CA1200" Action="Info" />             <!-- Avoid using cref tags with a prefix --> 
+    <Rule Id="CA1200" Action="Warning" />             <!-- Avoid using cref tags with a prefix --> 
     <Rule Id="CA1303" Action="None" />             <!-- Do not pass literals as localized parameters --> 
     <Rule Id="CA1304" Action="None" />             <!-- Specify CultureInfo --> 
     <Rule Id="CA1305" Action="None" />             <!-- Specify IFormatProvider --> 
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index 001c7b87f69..e030dcce31a 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -43,7 +43,7 @@ namespace Microsoft.Build.Collections
 {
     /// <summary>
     /// Implementation notes:
-    /// This uses an array-based implementation similar to <see cref="T:Dictionary{T}" />, using a buckets array
+    /// This uses an array-based implementation similar to <see cref="Dictionary{TKey, TValue}" />, using a buckets array
     /// to map hash values to the Slots array. Items in the Slots array that hash to the same value
     /// are chained together through the "next" indices. 
     /// 
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index 3c4c0d6f269..b7395112955 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -316,7 +316,7 @@ public void RemoveChild(ProjectElement child)
         /// </summary>
         /// <remarks>
         /// It is safe to modify the children in this way
-        /// during enumeration. See <see cref="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)" />.
+        /// during enumeration. See <see cref="Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)" />.
         /// </remarks>
         public void RemoveAllChildren()
         {
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 40cf6aee0ed..72ee0c07f0e 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -351,7 +351,7 @@ public ProjectGraph(
         ///     on <see cref="ProjectInstanceFactoryFunc" /> for other scenarios.
         /// </param>
         /// <param name="cancellationToken">
-        ///     The <see cref="T:System.Threading.CancellationToken" /> token to observe.
+        ///     The <see cref="System.Threading.CancellationToken" /> token to observe.
         /// </param>
         /// <exception cref="InvalidProjectFileException">
         ///     If the evaluation of any project in the graph fails
@@ -395,7 +395,7 @@ public ProjectGraph(
         ///     Number of threads to participate in building the project graph.
         /// </param>
         /// <param name="cancellationToken">
-        ///     The <see cref="T:System.Threading.CancellationToken" /> token to observe.
+        ///     The <see cref="System.Threading.CancellationToken" /> token to observe.
         /// </param>
         /// <exception cref="InvalidProjectFileException">
         ///     If the evaluation of any project in the graph fails
