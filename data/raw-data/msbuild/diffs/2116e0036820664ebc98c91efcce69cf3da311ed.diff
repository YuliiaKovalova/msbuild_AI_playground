diff --git a/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs b/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs
index 8ae8d6de7b1..4c4901cbfac 100644
--- a/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs
+++ b/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs
@@ -10,11 +10,10 @@
 using System.Threading.Tasks;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.BuildCheck.Checks;
+namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 internal class PreferProjectReferenceCheck : Check
 {
     private const string RuleId = "BC0104";
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 5eacf13637c..232c5f3ab84 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -8,7 +8,6 @@
 using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.BuildCheck.Checks;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck.Acquisition;
@@ -130,20 +129,31 @@ public void ProcessCheckAcquisition(
 
         private static T Construct<T>() where T : new() => new();
 
-        private static readonly (string[] ruleIds, bool defaultEnablement, CheckFactory factory)[][] s_builtInFactoriesPerDataSource =
+        /// <summary>
+        /// The builtin check factory definition
+        /// </summary>
+        /// <param name="RuleIds">The rule ids that the check is able to emit.</param>
+        /// <param name="DefaultEnablement">Is it enabled by default?</param>
+        /// <param name="Factory">Factory method to create the check.</param>
+        internal readonly record struct BuiltInCheckFactory(
+            string[] RuleIds,
+            bool DefaultEnablement,
+            CheckFactory Factory);
+
+        private static readonly BuiltInCheckFactory[][] s_builtInFactoriesPerDataSource =
         [
 
             // BuildCheckDataSource.EventArgs
             [
-                ([SharedOutputPathCheck.SupportedRule.Id], SharedOutputPathCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<SharedOutputPathCheck>),
-                ([PreferProjectReferenceCheck.SupportedRule.Id], PreferProjectReferenceCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<PreferProjectReferenceCheck>),
-                ([DoubleWritesCheck.SupportedRule.Id], DoubleWritesCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<DoubleWritesCheck>),
-                ([NoEnvironmentVariablePropertyCheck.SupportedRule.Id], NoEnvironmentVariablePropertyCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<NoEnvironmentVariablePropertyCheck>)
+                new BuiltInCheckFactory([SharedOutputPathCheck.SupportedRule.Id], SharedOutputPathCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<SharedOutputPathCheck>),
+                new BuiltInCheckFactory([PreferProjectReferenceCheck.SupportedRule.Id], PreferProjectReferenceCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<PreferProjectReferenceCheck>),
+                new BuiltInCheckFactory([DoubleWritesCheck.SupportedRule.Id], DoubleWritesCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<DoubleWritesCheck>),
+                new BuiltInCheckFactory([NoEnvironmentVariablePropertyCheck.SupportedRule.Id], NoEnvironmentVariablePropertyCheck.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<NoEnvironmentVariablePropertyCheck>)
             ],
 
             // BuildCheckDataSource.Execution
             [
-                (PropertiesUsageCheck.SupportedRulesList.Select(r => r.Id).ToArray(),
+                new BuiltInCheckFactory(PropertiesUsageCheck.SupportedRulesList.Select(r => r.Id).ToArray(),
                     PropertiesUsageCheck.SupportedRulesList.Any(r => r.DefaultConfiguration.IsEnabled ?? false),
                     Construct<PropertiesUsageCheck>)
             ]
@@ -152,19 +162,19 @@ private static readonly (string[] ruleIds, bool defaultEnablement, CheckFactory
         /// <summary>
         /// For tests only. TODO: Remove when check acquisition is done.
         /// </summary>
-        internal static (string[] ruleIds, bool defaultEnablement, CheckFactory factory)[][]? s_testFactoriesPerDataSource;
+        internal static BuiltInCheckFactory[][]? s_testFactoriesPerDataSource;
 
         private void RegisterBuiltInChecks(BuildCheckDataSource buildCheckDataSource)
         {
             _checkRegistry.AddRange(
                 s_builtInFactoriesPerDataSource[(int)buildCheckDataSource]
-                    .Select(v => new CheckFactoryContext(v.factory, v.ruleIds, v.defaultEnablement)));
+                    .Select(v => new CheckFactoryContext(v.Factory, v.RuleIds, v.DefaultEnablement)));
 
             if (s_testFactoriesPerDataSource is not null)
             {
                 _checkRegistry.AddRange(
                     s_testFactoriesPerDataSource[(int)buildCheckDataSource]
-                        .Select(v => new CheckFactoryContext(v.factory, v.ruleIds, v.defaultEnablement)));
+                        .Select(v => new CheckFactoryContext(v.Factory, v.RuleIds, v.DefaultEnablement)));
             }
         }
 
diff --git a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
index e764f20cae5..10e6a9fcf9c 100644
--- a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
@@ -64,7 +64,7 @@ public TaskInvocationCheckDataTests(ITestOutputHelper output)
             [
                 // BuildCheckDataSource.EventArgs
                 [
-                    ([TestCheck.SupportedRule.Id], true, () => s_testCheck = new TestCheck()),
+                    new ([TestCheck.SupportedRule.Id], true, () => s_testCheck = new TestCheck()),
                 ],
                 // BuildCheckDataSource.Execution
                 [],
