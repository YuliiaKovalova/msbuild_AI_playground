diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index cbe5cfbf727..2b53a52e836 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -297,7 +297,7 @@ string taskProjectFile
                 // If the user requested a task host but provided us with an assembly name rather than an assembly file, pretend they didn't.
                 // Finding the path to the assembly file the runtime would load without actually loading the assembly would likely be a bug farm.
                 // Also, this should be a very unusual case.
-                _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested && (loadInfo.AssemblyFile is not null || loadInfo.AssemblyName.StartsWith("Microsoft.Build")));
+                _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested && (loadInfo.AssemblyFile is not null || loadInfo.AssemblyName.StartsWith("Microsoft.Build")), out _taskHostFactoryExplicitlyRequested);
 
                 // If the user specifically requests a code task factory, and the type wasn't already loaded, we need a way to verify that it really found a matching type. Properties is an array, so it should never be null,
                 // though it could be an empty array.
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index d12c45e98e6..45837ed3d9e 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1327,7 +1327,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                 }
 
                                 // Make sure we only look for task factory classes when loading based on the name
-                                typeInformation = s_taskFactoryTypeLoader.Load(TaskFactoryAttributeName, taskFactoryLoadInfo, false);
+                                typeInformation = s_taskFactoryTypeLoader.Load(TaskFactoryAttributeName, taskFactoryLoadInfo, false, out _);
 
                                 if (typeInformation == null)
                                 {
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index bf1d727c41d..d31a93b66b7 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -202,7 +202,7 @@ private ILogger CreateLogger(bool forwardingLogger)
                 if (forwardingLogger)
                 {
                     // load the logger from its assembly
-                    LoadedType loggerClass = (new TypeLoader(s_forwardingLoggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false).LoadedType;
+                    LoadedType loggerClass = (new TypeLoader(s_forwardingLoggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false, out _).LoadedType;
 
                     if (loggerClass != null)
                     {
@@ -213,7 +213,7 @@ private ILogger CreateLogger(bool forwardingLogger)
                 else
                 {
                     // load the logger from its assembly
-                    LoadedType loggerClass = (new TypeLoader(s_loggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false).LoadedType;
+                    LoadedType loggerClass = (new TypeLoader(s_loggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false, out _).LoadedType;
 
                     if (loggerClass != null)
                     {
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index c9ebdbb44fb..bbc70028128 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -118,7 +118,7 @@ IDictionary<string, TaskParameter> taskParams
             try
             {
                 TypeLoader typeLoader = new TypeLoader(TaskLoader.IsTaskClass);
-                taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation), false);
+                taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation), false, out _);
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
diff --git a/src/MSBuildTaskHost/TypeLoader.cs b/src/MSBuildTaskHost/TypeLoader.cs
index 00153e95b0a..b03e1d6c0cf 100644
--- a/src/MSBuildTaskHost/TypeLoader.cs
+++ b/src/MSBuildTaskHost/TypeLoader.cs
@@ -131,9 +131,11 @@ internal TypeInformation Load
         (
             string typeName,
             AssemblyLoadInfo assembly,
-            bool taskHostFactoryExplicitlyRequested
+            bool taskHostFactoryExplicitlyRequested,
+            out bool taskHostFactoryNeeded
         )
         {
+            taskHostFactoryNeeded = false;
             return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly);
         }
 
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 2769c2e9f24..0ba0a534a42 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -13,6 +13,7 @@
 using System.Reflection.Metadata;
 using System.Reflection.Metadata.Ecma335;
 using System.Reflection.PortableExecutable;
+using System.Runtime.InteropServices;
 #if !NETFRAMEWORK
 using System.Runtime.Loader;
 #endif
@@ -198,10 +199,11 @@ internal TypeInformation Load
         (
             string typeName,
             AssemblyLoadInfo assembly,
-            bool taskHostFactoryExplicitlyRequested
+            bool taskHostFactoryExplicitlyRequested,
+            out bool taskHostFactoryNeeded
         )
         {
-            return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, taskHostFactoryExplicitlyRequested);
+            return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, taskHostFactoryExplicitlyRequested, out taskHostFactoryNeeded);
         }
 
         /// <summary>
@@ -216,7 +218,7 @@ internal LoadedType ReflectionOnlyLoad
             AssemblyLoadInfo assembly
         )
         {
-            return GetLoadedType(s_cacheOfReflectionOnlyLoadedTypesByFilter, typeName, assembly, false)?.LoadedType;
+            return GetLoadedType(s_cacheOfReflectionOnlyLoadedTypesByFilter, typeName, assembly, false, out _)?.LoadedType;
         }
 
         /// <summary>
@@ -228,7 +230,8 @@ private TypeInformation GetLoadedType(
             ConcurrentDictionary<Func<Type, object, bool>, ConcurrentDictionary<AssemblyLoadInfo, AssemblyInfoToLoadedTypes>> cache,
             string typeName,
             AssemblyLoadInfo assembly,
-            bool taskHostFactoryExplicitlyRequested)
+            bool taskHostFactoryExplicitlyRequested,
+            out bool taskHostFactoryNeeded)
         {
             // A given type filter have been used on a number of assemblies, Based on the type filter we will get another dictionary which 
             // will map a specific AssemblyLoadInfo to a AssemblyInfoToLoadedTypes class which knows how to find a typeName in a given assembly.
@@ -239,7 +242,7 @@ private TypeInformation GetLoadedType(
             AssemblyInfoToLoadedTypes typeNameToType =
                 loadInfoToType.GetOrAdd(assembly, (_) => new AssemblyInfoToLoadedTypes(_isDesiredType, _));
 
-            return typeNameToType.GetLoadedTypeByTypeName(typeName, taskHostFactoryExplicitlyRequested);
+            return typeNameToType.GetLoadedTypeByTypeName(typeName, taskHostFactoryExplicitlyRequested, out taskHostFactoryNeeded);
         }
 
         /// <summary>
@@ -312,12 +315,20 @@ internal AssemblyInfoToLoadedTypes(Func<Type, object, bool> typeFilter, Assembly
             /// <summary>
             /// Determine if a given type name is in the assembly or not. Return null if the type is not in the assembly
             /// </summary>
-            internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostFactoryExplicitlyRequested)
+            internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostFactoryExplicitlyRequested, out bool taskHostFactoryNeeded)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));
 
+                taskHostFactoryNeeded = taskHostFactoryExplicitlyRequested;
+                if (!taskHostFactoryNeeded && _assemblyLoadInfo.AssemblyFile is not null)
+                {
+                    ProcessorArchitecture taskArch = AssemblyName.GetAssemblyName(_assemblyLoadInfo.AssemblyFile).ProcessorArchitecture;
+                    bool msbuildIs64Bit = RuntimeInformation.ProcessArchitecture == Architecture.X64;
+                    taskHostFactoryNeeded = msbuildIs64Bit ? Required32Bit(taskArch) : Required64Bit(taskArch);
+                }
+
                 // Only one thread should be doing operations on this instance of the object at a time.
-                TypeInformation typeInfo = taskHostFactoryExplicitlyRequested ?
+                TypeInformation typeInfo = taskHostFactoryNeeded ?
                     _typeNameToTypeInformationTaskHost.GetOrAdd(typeName, key => FindTypeInformationUsingSystemReflectionMetadata(typeName)) :
                     _typeNameToTypeInformation.GetOrAdd(typeName, key => FindTypeInformationUsingLoadedType(typeName)
                     );
@@ -325,6 +336,16 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                 return typeInfo;
             }
 
+            private bool Required32Bit(ProcessorArchitecture arch)
+            {
+                return arch == ProcessorArchitecture.X86 || arch == ProcessorArchitecture.Arm;
+            }
+
+            private bool Required64Bit(ProcessorArchitecture arch)
+            {
+                return arch == ProcessorArchitecture.IA64 || arch == ProcessorArchitecture.Amd64;
+            }
+
             /// <summary>
             /// The user has not explicitly requested a TaskHost; load the type and use it to find relevant information.
             /// </summary>
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index bbb55d19105..aee9beca76c 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -200,13 +200,13 @@ public void Regress640476PartialName()
         {
             string forwardingLoggerLocation = typeof(Microsoft.Build.Logging.ConfigurableForwardingLogger).Assembly.Location;
             TypeLoader loader = new TypeLoader(IsForwardingLoggerClass);
-            LoadedType loadedType = loader.Load("ConfigurableForwardingLogger", AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false).LoadedType;
+            LoadedType loadedType = loader.Load("ConfigurableForwardingLogger", AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false, out _).LoadedType;
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerLocation, loadedType.Assembly.AssemblyLocation);
 
             string fileLoggerLocation = typeof(Microsoft.Build.Logging.FileLogger).Assembly.Location;
             loader = new TypeLoader(IsLoggerClass);
-            loadedType = loader.Load("FileLogger", AssemblyLoadInfo.Create(null, fileLoggerLocation), false).LoadedType;
+            loadedType = loader.Load("FileLogger", AssemblyLoadInfo.Create(null, fileLoggerLocation), false, out _).LoadedType;
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerLocation, loadedType.Assembly.AssemblyLocation);
         }
@@ -221,14 +221,14 @@ public void Regress640476FullyQualifiedName()
             Type forwardingLoggerType = typeof(Microsoft.Build.Logging.ConfigurableForwardingLogger);
             string forwardingLoggerLocation = forwardingLoggerType.Assembly.Location;
             TypeLoader loader = new TypeLoader(IsForwardingLoggerClass);
-            LoadedType loadedType = loader.Load(forwardingLoggerType.FullName, AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false).LoadedType;
+            LoadedType loadedType = loader.Load(forwardingLoggerType.FullName, AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false, out _).LoadedType;
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerLocation, loadedType.Assembly.AssemblyLocation);
 
             Type fileLoggerType = typeof(Microsoft.Build.Logging.FileLogger);
             string fileLoggerLocation = fileLoggerType.Assembly.Location;
             loader = new TypeLoader(IsLoggerClass);
-            loadedType = loader.Load(fileLoggerType.FullName, AssemblyLoadInfo.Create(null, fileLoggerLocation), false).LoadedType;
+            loadedType = loader.Load(fileLoggerType.FullName, AssemblyLoadInfo.Create(null, fileLoggerLocation), false, out _).LoadedType;
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerLocation, loadedType.Assembly.AssemblyLocation);
         }
@@ -248,7 +248,7 @@ public void NoTypeNamePicksFirstType()
             Type firstPublicType = FirstPublicDesiredType(forwardingLoggerfilter, forwardingLoggerAssemblyLocation);
 
             TypeLoader loader = new TypeLoader(forwardingLoggerfilter);
-            LoadedType loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, forwardingLoggerAssemblyLocation), false).LoadedType;
+            LoadedType loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, forwardingLoggerAssemblyLocation), false, out _).LoadedType;
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerAssemblyLocation, loadedType.Assembly.AssemblyLocation);
             Assert.Equal(firstPublicType, loadedType.Type);
@@ -260,7 +260,7 @@ public void NoTypeNamePicksFirstType()
             firstPublicType = FirstPublicDesiredType(fileLoggerfilter, fileLoggerAssemblyLocation);
 
             loader = new TypeLoader(fileLoggerfilter);
-            loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, fileLoggerAssemblyLocation), false).LoadedType;
+            loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, fileLoggerAssemblyLocation), false, out _).LoadedType;
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerAssemblyLocation, loadedType.Assembly.AssemblyLocation);
             Assert.Equal(firstPublicType, loadedType.Type);
