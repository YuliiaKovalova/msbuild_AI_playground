diff --git a/src/Shared/FileDelegates.cs b/src/Shared/FileDelegates.cs
index 5631a190a83..80c1d1b5f0d 100644
--- a/src/Shared/FileDelegates.cs
+++ b/src/Shared/FileDelegates.cs
@@ -56,4 +56,11 @@ namespace Microsoft.Build.Shared
     /// </summary>
     /// <param name="path">The path to create.</param>
     internal delegate FileStream FileCreate(string path);
-}
\ No newline at end of file
+
+    /// <summary>
+    /// Rooted path delegate. If necessary, converts relative path to absolute one.
+    /// </summary>
+    /// <param name="path">The path to convert.</param>
+    /// <returns>Absolute path.</returns>
+    internal delegate string GetRootedPath(string path);
+}
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
index ab6b685ba91..0afd48ea6e7 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
@@ -99,8 +99,8 @@ internal class AssemblyFoldersExResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public AssemblyFoldersExResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetRegistrySubKeyNames getRegistrySubKeyNames, GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, GetAssemblyRuntimeVersion getRuntimeVersion, OpenBaseKey openBaseKey, Version targetedRuntimeVesion, ProcessorArchitecture targetProcessorArchitecture, bool compareProcessorArchitecture, IBuildEngine buildEngine)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, targetProcessorArchitecture, compareProcessorArchitecture)
+        public AssemblyFoldersExResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetRegistrySubKeyNames getRegistrySubKeyNames, GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, GetAssemblyRuntimeVersion getRuntimeVersion, OpenBaseKey openBaseKey, GetRootedPath getRootedPath, Version targetedRuntimeVesion, ProcessorArchitecture targetProcessorArchitecture, bool compareProcessorArchitecture, IBuildEngine buildEngine)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, targetProcessorArchitecture, compareProcessorArchitecture)
         {
             _buildEngine = buildEngine as IBuildEngine4;
             _getRegistrySubKeyNames = getRegistrySubKeyNames;
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
index e6e2a2bcb80..aa05102e5f4 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
@@ -73,12 +73,13 @@ internal class AssemblyFoldersFromConfigResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public AssemblyFoldersFromConfigResolver(string searchPathElement, GetAssemblyName getAssemblyName,
-            FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion,
+        public AssemblyFoldersFromConfigResolver(
+            string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists,
+            GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion,
             ProcessorArchitecture targetProcessorArchitecture, bool compareProcessorArchitecture,
             IBuildEngine buildEngine, TaskLoggingHelper log)
             : base(
-                searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion,
+                searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion,
                 targetProcessorArchitecture, compareProcessorArchitecture)
         {
             _buildEngine = buildEngine as IBuildEngine4;
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
index dced5e5453e..bb241a43c02 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
@@ -19,9 +19,10 @@ internal class AssemblyFoldersResolver : Resolver
         /// <param name="getAssemblyName"></param>
         /// <param name="fileExists"></param>
         /// <param name="getRuntimeVersion"></param>
+        /// <param name="getRootedPath"></param>
         /// <param name="targetedRuntimeVesion"></param>
-        public AssemblyFoldersResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
+        public AssemblyFoldersResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
         {
         }
 
diff --git a/src/Tasks/AssemblyDependency/AssemblyResolution.cs b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
index f2fe396824f..9b7b65841cf 100644
--- a/src/Tasks/AssemblyDependency/AssemblyResolution.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
@@ -117,6 +117,7 @@ out userRequestedSpecificFile
         /// <param name="getRuntimeVersion"></param>
         /// <param name="targetedRuntimeVersion"></param>
         /// <param name="getAssemblyPathInGac"></param>
+        /// <param name="getRootedPath"></param>
         /// <param name="log"></param>
         /// <returns></returns>
 #else
@@ -134,6 +135,7 @@ out userRequestedSpecificFile
         /// <param name="getRuntimeVersion"></param>
         /// <param name="targetedRuntimeVersion"></param>
         /// <param name="getAssemblyPathInGac"></param>
+        /// <param name="getRootedPath"></param>
         /// <param name="log"></param>
         /// <returns></returns>
 #endif
@@ -155,6 +157,7 @@ public static Resolver[] CompileSearchPaths
             GetAssemblyRuntimeVersion getRuntimeVersion,
             Version targetedRuntimeVersion,
             GetAssemblyPathInGac getAssemblyPathInGac,
+            GetRootedPath getRootedPath,
             TaskLoggingHelper log
         )
         {
@@ -168,44 +171,44 @@ TaskLoggingHelper log
                 // HintPath property.
                 if (String.Equals(basePath, AssemblyResolutionConstants.hintPathSentinel, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new HintPathResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                    resolvers[p] = new HintPathResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
                 }
                 else if (String.Equals(basePath, AssemblyResolutionConstants.frameworkPathSentinel, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new FrameworkPathResolver(frameworkPaths, installedAssemblies, searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                    resolvers[p] = new FrameworkPathResolver(frameworkPaths, installedAssemblies, searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
                 }
                 else if (String.Equals(basePath, AssemblyResolutionConstants.rawFileNameSentinel, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new RawFilenameResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                    resolvers[p] = new RawFilenameResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
                 }
                 else if (String.Equals(basePath, AssemblyResolutionConstants.candidateAssemblyFilesSentinel, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new CandidateAssemblyFilesResolver(candidateAssemblyFiles, searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                    resolvers[p] = new CandidateAssemblyFilesResolver(candidateAssemblyFiles, searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
                 }
 #if FEATURE_GAC
                 else if (String.Equals(basePath, AssemblyResolutionConstants.gacSentinel, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new GacResolver(targetProcessorArchitecture, searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion, getAssemblyPathInGac);
+                    resolvers[p] = new GacResolver(targetProcessorArchitecture, searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion, getAssemblyPathInGac);
                 }
 #endif
                 else if (String.Equals(basePath, AssemblyResolutionConstants.assemblyFoldersSentinel, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new AssemblyFoldersResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                    resolvers[p] = new AssemblyFoldersResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
                 }
 #if FEATURE_WIN32_REGISTRY
                 // Check for AssemblyFoldersEx sentinel.
                 else if (0 == String.Compare(basePath, 0, AssemblyResolutionConstants.assemblyFoldersExSentinel, 0, AssemblyResolutionConstants.assemblyFoldersExSentinel.Length, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new AssemblyFoldersExResolver(searchPaths[p], getAssemblyName, fileExists, getRegistrySubKeyNames, getRegistrySubKeyDefaultValue, getRuntimeVersion, openBaseKey, targetedRuntimeVersion, targetProcessorArchitecture, true, buildEngine);
+                    resolvers[p] = new AssemblyFoldersExResolver(searchPaths[p], getAssemblyName, fileExists, getRegistrySubKeyNames, getRegistrySubKeyDefaultValue, getRuntimeVersion, openBaseKey, getRootedPath, targetedRuntimeVersion, targetProcessorArchitecture, true, buildEngine);
                 }
 #endif
                 else if (0 == String.Compare(basePath, 0, AssemblyResolutionConstants.assemblyFoldersFromConfigSentinel, 0, AssemblyResolutionConstants.assemblyFoldersFromConfigSentinel.Length, StringComparison.OrdinalIgnoreCase))
                 {
-                    resolvers[p] = new AssemblyFoldersFromConfigResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion, targetProcessorArchitecture, true, buildEngine, log);
+                    resolvers[p] = new AssemblyFoldersFromConfigResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion, targetProcessorArchitecture, true, buildEngine, log);
                 }
                 else
                 {
-                    resolvers[p] = new DirectoryResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                    resolvers[p] = new DirectoryResolver(searchPaths[p], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
                 }
             }
             return resolvers;
@@ -220,13 +223,14 @@ internal static Resolver[] CompileDirectories
             FileExists fileExists,
             GetAssemblyName getAssemblyName,
             GetAssemblyRuntimeVersion getRuntimeVersion,
+            GetRootedPath getRootedPath,
             Version targetedRuntimeVersion
         )
         {
             var resolvers = new Resolver[directories.Count];
             for (int i = 0; i < directories.Count; i++)
             {
-                resolvers[i] = new DirectoryResolver(directories[i], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);
+                resolvers[i] = new DirectoryResolver(directories[i], getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVersion);
             }
 
             return resolvers;
diff --git a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
index eb126f0656a..785d4bd06a9 100644
--- a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
+++ b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
@@ -27,9 +27,10 @@ internal class CandidateAssemblyFilesResolver : Resolver
         /// <param name="getAssemblyName"></param>
         /// <param name="fileExists"></param>
         /// <param name="getRuntimeVersion"></param>
+        /// <param name="getRootedPath"></param>
         /// <param name="targetedRuntimeVesion"></param>
-        public CandidateAssemblyFilesResolver(string[] candidateAssemblyFiles, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, ProcessorArchitecture.None, false)
+        public CandidateAssemblyFilesResolver(string[] candidateAssemblyFiles, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, ProcessorArchitecture.None, false)
         {
             _candidateAssemblyFiles = candidateAssemblyFiles;
         }
diff --git a/src/Tasks/AssemblyDependency/DirectoryResolver.cs b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
index 8f7be0e76ac..7bc42f0dbd2 100644
--- a/src/Tasks/AssemblyDependency/DirectoryResolver.cs
+++ b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
@@ -15,8 +15,8 @@ internal class DirectoryResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public DirectoryResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
+        public DirectoryResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
         {
         }
 
diff --git a/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs b/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
index bfee4b6dc71..514c4d95bcd 100644
--- a/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
+++ b/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
@@ -21,8 +21,8 @@ internal class FrameworkPathResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public FrameworkPathResolver(string[] frameworkPaths, InstalledAssemblies installedAssemblies, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
+        public FrameworkPathResolver(string[] frameworkPaths, InstalledAssemblies installedAssemblies, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
         {
             _frameworkPaths = frameworkPaths;
             _installedAssemblies = installedAssemblies;
diff --git a/src/Tasks/AssemblyDependency/GacResolver.cs b/src/Tasks/AssemblyDependency/GacResolver.cs
index 16342d58a31..3c356dbe0ef 100644
--- a/src/Tasks/AssemblyDependency/GacResolver.cs
+++ b/src/Tasks/AssemblyDependency/GacResolver.cs
@@ -25,10 +25,11 @@ internal class GacResolver : Resolver
         /// <param name="getAssemblyName">Delegate to get the assembly name object.</param>
         /// <param name="fileExists">Delegate to check if the file exists.</param>
         /// <param name="getRuntimeVersion">Delegate to get the runtime version.</param>
+        /// <param name="getRootedPath">Delegate to convert relative path to absolute</param>
         /// <param name="targetedRuntimeVesion">The targeted runtime version.</param>
         /// <param name="getAssemblyPathInGac">Delegate to get assembly path in the GAC.</param>
-        public GacResolver(System.Reflection.ProcessorArchitecture targetProcessorArchitecture, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion, GetAssemblyPathInGac getAssemblyPathInGac)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, targetProcessorArchitecture, true)
+        public GacResolver(System.Reflection.ProcessorArchitecture targetProcessorArchitecture, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion, GetAssemblyPathInGac getAssemblyPathInGac)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, targetProcessorArchitecture, true)
         {
             _getAssemblyPathInGac = getAssemblyPathInGac;
         }
diff --git a/src/Tasks/AssemblyDependency/HintPathResolver.cs b/src/Tasks/AssemblyDependency/HintPathResolver.cs
index d4a90c0e2b4..e0f0c549c71 100644
--- a/src/Tasks/AssemblyDependency/HintPathResolver.cs
+++ b/src/Tasks/AssemblyDependency/HintPathResolver.cs
@@ -16,8 +16,8 @@ internal class HintPathResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public HintPathResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, ProcessorArchitecture.None, false)
+        public HintPathResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, ProcessorArchitecture.None, false)
         {
         }
 
@@ -57,7 +57,7 @@ out bool userRequestedSpecificFile
             // However, we should consider Trim() the hintpath https://github.com/microsoft/msbuild/issues/4603
             if (!string.IsNullOrEmpty(hintPath) && !FileUtilities.PathIsInvalid(hintPath))
             {
-                if (ResolveAsFile(FileUtilities.NormalizePath(hintPath), assemblyName, isPrimaryProjectReference, wantSpecificVersion, true, assembliesConsideredAndRejected))
+                if (ResolveAsFile(getRootedPath(hintPath), assemblyName, isPrimaryProjectReference, wantSpecificVersion, true, assembliesConsideredAndRejected))
                 {
                     userRequestedSpecificFile = true;
                     foundPath = hintPath;
diff --git a/src/Tasks/AssemblyDependency/RawFilenameResolver.cs b/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
index b75ef96a73b..4860a13e187 100644
--- a/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
+++ b/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
@@ -16,8 +16,8 @@ internal class RawFilenameResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public RawFilenameResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, ProcessorArchitecture.None, false)
+        public RawFilenameResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, ProcessorArchitecture.None, false)
         {
         }
 
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 3c03605de6c..e2fc1791d9b 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -85,6 +85,8 @@ internal sealed class ReferenceTable
         private readonly GetAssemblyMetadata _getAssemblyMetadata;
         /// <summary>Delegate used to get the image runtime version of a file</summary>
         private readonly GetAssemblyRuntimeVersion _getRuntimeVersion;
+        /// <summary>Delegate used to get absolute path form relative one</summary>
+        private readonly GetRootedPath _getRootedPath;
 #if FEATURE_WIN32_REGISTRY
         /// <summary> Delegate to get the base registry key for AssemblyFoldersEx</summary>
         private OpenBaseKey _openBaseKey;
@@ -186,6 +188,7 @@ internal sealed class ReferenceTable
         /// <param name="assemblyMetadataCache">Cache of metadata already read from paths.</param>
         /// <param name="allowedAssemblyExtensions"></param>
         /// <param name="getRuntimeVersion"></param>
+        /// <param name="getRootedPath"></param>
         /// <param name="targetedRuntimeVersion"></param>
         /// <param name="projectTargetFramework"></param>
         /// <param name="targetFrameworkMoniker"></param>
@@ -224,6 +227,7 @@ internal sealed class ReferenceTable
         /// <param name="assemblyMetadataCache">Cache of metadata already read from paths.</param>
         /// <param name="allowedAssemblyExtensions"></param>
         /// <param name="getRuntimeVersion"></param>
+        /// <param name="getRootedPath"></param>
         /// <param name="targetedRuntimeVersion"></param>
         /// <param name="projectTargetFramework"></param>
         /// <param name="targetFrameworkMoniker"></param>
@@ -264,6 +268,7 @@ internal ReferenceTable
             OpenBaseKey openBaseKey,
 #endif
             GetAssemblyRuntimeVersion getRuntimeVersion,
+            GetRootedPath getRootedPath,
             Version targetedRuntimeVersion,
             Version projectTargetFramework,
             FrameworkNameVersioning targetFrameworkMoniker,
@@ -296,6 +301,7 @@ internal ReferenceTable
             _getAssemblyName = getAssemblyName;
             _getAssemblyMetadata = getAssemblyMetadata;
             _getRuntimeVersion = getRuntimeVersion;
+            _getRootedPath = getRootedPath;
             _projectTargetFramework = projectTargetFramework;
             _targetedRuntimeVersion = targetedRuntimeVersion;
 #if FEATURE_WIN32_REGISTRY
@@ -358,6 +364,7 @@ internal ReferenceTable
                     getRuntimeVersion,
                     targetedRuntimeVersion,
                     getAssemblyPathInGac,
+                    getRootedPath,
                     log
                 );
         }
@@ -446,7 +453,7 @@ string assemblyFileName
 
             if (!Path.IsPathRooted(assemblyFileName))
             {
-                reference.FullPath = Path.GetFullPath(assemblyFileName);
+                reference.FullPath = _getRootedPath(assemblyFileName);
             }
             else
             {
@@ -1302,14 +1309,14 @@ Reference reference
             // If a reference has the SDKName metadata on it then we will only search using a single resolver, that is the InstalledSDKResolver.
             if (reference.SDKName.Length > 0)
             {
-                jaggedResolvers.Add(new Resolver[] { new InstalledSDKResolver(_resolvedSDKReferences, "SDKResolver", _getAssemblyName, _fileExists, _getRuntimeVersion, _targetedRuntimeVersion) });
+                jaggedResolvers.Add(new Resolver[] { new InstalledSDKResolver(_resolvedSDKReferences, "SDKResolver", _getAssemblyName, _fileExists, _getRuntimeVersion, _getRootedPath, _targetedRuntimeVersion) });
             }
             else
             {
                 // Do not probe near dependees if the reference is primary and resolved externally. If resolved externally, the search paths should have been specified in such a way to point to the assembly file.
                 if (assemblyName == null || !_externallyResolvedPrimaryReferences.Contains(assemblyName.Name))
                 {
-                    jaggedResolvers.Add(AssemblyResolution.CompileDirectories(parentReferenceFolders, _fileExists, _getAssemblyName, _getRuntimeVersion, _targetedRuntimeVersion));
+                    jaggedResolvers.Add(AssemblyResolution.CompileDirectories(parentReferenceFolders, _fileExists, _getAssemblyName, _getRuntimeVersion, _getRootedPath, _targetedRuntimeVersion));
                 }
 
                 jaggedResolvers.Add(Resolvers);
@@ -1347,7 +1354,7 @@ out userRequestedSpecificFile
             {
                 if (!Path.IsPathRooted(resolvedPath))
                 {
-                    resolvedPath = Path.GetFullPath(resolvedPath);
+                    resolvedPath = _getRootedPath(resolvedPath);
                 }
 
                 reference.FullPath = resolvedPath;
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 4222c50a381..6a5aa1cf1da 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -952,7 +952,8 @@ internal ResolveAssemblyReferenceTaskInput ResolveAssemblyReferenceInput
                 TargetProcessorArchitecture = TargetProcessorArchitecture,
                 UnresolveFrameworkAssembliesFromHigherFrameworks = UnresolveFrameworkAssembliesFromHigherFrameworks,
                 UseResolveAssemblyReferenceService = UseResolveAssemblyReferenceService,
-                WarnOrErrorOnTargetArchitectureMismatch = WarnOrErrorOnTargetArchitectureMismatch
+                WarnOrErrorOnTargetArchitectureMismatch = WarnOrErrorOnTargetArchitectureMismatch,
+                CurrentPath = Directory.GetCurrentDirectory()
             };
             set
             {
@@ -1020,7 +1021,7 @@ internal ResolveAssemblyReferenceTaskOutput ResolveAssemblyReferenceOutput
                 _copyLocalFiles = value.CopyLocalFiles;
                 DependsOnNETStandard = value.DependsOnNETStandard;
                 DependsOnSystemRuntime = value.DependsOnSystemRuntime;
-                FilesWritten = value.FilesWritten;
+                _filesWritten = new List<ITaskItem>(value.FilesWritten);
                 _relatedFiles = value.RelatedFiles;
                 _resolvedDependencyFiles = value.ResolvedDependencyFiles;
                 _resolvedFiles = value.ResolvedFiles;
@@ -2028,6 +2029,7 @@ private List<DependentAssembly> GetAssemblyRemappingsFromAppConfig()
         /// <param name="getAssemblyPathInGac">Delegate to get assembly path in the GAC.</param>
         /// <param name="isWinMDFile">Delegate used for checking whether it is a WinMD file.</param>
         /// <param name="readMachineTypeFromPEHeader">Delegate use to read machine type from PE Header</param>
+        /// <param name="getRootedPath">Delegate which converts relative path to absolute one</param>
         /// <returns>True if there was success.</returns>
 #else
         /// <summary>
@@ -2043,6 +2045,7 @@ private List<DependentAssembly> GetAssemblyRemappingsFromAppConfig()
         /// <param name="getAssemblyPathInGac">Delegate to get assembly path in the GAC.</param>
         /// <param name="isWinMDFile">Delegate used for checking whether it is a WinMD file.</param>
         /// <param name="readMachineTypeFromPEHeader">Delegate use to read machine type from PE Header</param>
+        /// <param name="getRootedPath"></param>
         /// <returns>True if there was success.</returns>
 #endif
         internal bool Execute
@@ -2063,9 +2066,13 @@ internal bool Execute
 #endif
             GetAssemblyPathInGac getAssemblyPathInGac,
             IsWinMDFile isWinMDFile,
-            ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
+            ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader,
+            GetRootedPath getRootedPath = null
         )
         {
+            // Make this default option
+            getRootedPath ??= FileUtilities.NormalizePath;
+
             bool success = true;
             MSBuildEventSource.Log.RarOverallStart();
             {
@@ -2282,6 +2289,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                         openBaseKey,
 #endif
                         getRuntimeVersion,
+                        getRootedPath,
                         targetedRuntimeVersion,
                         _projectTargetFramework,
                         frameworkMoniker,
@@ -3129,7 +3137,9 @@ public override bool Execute()
                 if (connected)
                 {
                     // Client is connected to the RAR node, we can execute RAR task remotely
+                    MSBuildEventSource.Log.RARaaSStart();
                     ResolveAssemblyReferenceResult result = client.Execute(ResolveAssemblyReferenceInput);
+                    MSBuildEventSource.Log.RARaaSStop();
                     ResolveAssemblyReferenceOutput = result.Output;
                     LogEvents(result.BuildWarningEvents);
                     LogEvents(result.BuildMessageEvents);
@@ -3205,9 +3215,37 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceTaskInpu
             // Since this method should be run from RAR node, we prevent it from creating loop.
             UseResolveAssemblyReferenceService = false;
 
-            bool result = Execute();
+            bool result = Execute
+            (
+                new FileExists(p => FileUtilities.FileExistsNoThrow(p)),
+                new DirectoryExists(p => FileUtilities.DirectoryExistsNoThrow(p)),
+                new GetDirectories(Directory.GetDirectories),
+                new GetAssemblyName(AssemblyNameExtension.GetAssemblyNameEx),
+                new GetAssemblyMetadata(AssemblyInformation.GetAssemblyMetadata),
+#if FEATURE_WIN32_REGISTRY
+                new GetRegistrySubKeyNames(RegistryHelper.GetSubKeyNames),
+                new GetRegistrySubKeyDefaultValue(RegistryHelper.GetDefaultValue),
+#endif
+                new GetLastWriteTime(NativeMethodsShared.GetLastWriteFileUtcTime),
+                new GetAssemblyRuntimeVersion(AssemblyInformation.GetRuntimeVersion),
+#if FEATURE_WIN32_REGISTRY
+                new OpenBaseKey(RegistryHelper.OpenBaseKey),
+#endif
+                new GetAssemblyPathInGac(GetAssemblyPathInGac),
+                new IsWinMDFile(AssemblyInformation.IsWinMDFile),
+                new ReadMachineTypeFromPEHeader(ReferenceTable.ReadMachineTypeFromPEHeader),
+                (path) =>
+                {
+                    if(Path.IsPathRooted(path))
+                    {
+                        return FileUtilities.NormalizePath(path);
+                    }
+
+                    return FileUtilities.NormalizePath(input.CurrentPath, path);
+                }
+            );
 
-            return new ResolveAssemblyReferenceResult(result, ResolveAssemblyReferenceOutput);
+            return new ResolveAssemblyReferenceResult(result, ResolveAssemblyReferenceOutput, ResolveAssemblyReferenceInput);
         }
         #endregion
     }
diff --git a/src/Tasks/AssemblyDependency/Resolver.cs b/src/Tasks/AssemblyDependency/Resolver.cs
index be72b128729..5f63daada39 100644
--- a/src/Tasks/AssemblyDependency/Resolver.cs
+++ b/src/Tasks/AssemblyDependency/Resolver.cs
@@ -34,6 +34,11 @@ internal abstract class Resolver
         /// </summary>
         protected GetAssemblyRuntimeVersion getRuntimeVersion;
 
+        /// <summary>
+        /// Delegate
+        /// </summary>
+        protected GetRootedPath getRootedPath;
+
         /// <summary>
         /// Runtime we are targeting
         /// </summary>
@@ -52,12 +57,13 @@ internal abstract class Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion, ProcessorArchitecture targetedProcessorArchitecture, bool compareProcessorArchitecture)
+        protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion, ProcessorArchitecture targetedProcessorArchitecture, bool compareProcessorArchitecture)
         {
             this.searchPathElement = searchPathElement;
             this.getAssemblyName = getAssemblyName;
             this.fileExists = fileExists;
             this.getRuntimeVersion = getRuntimeVersion;
+            this.getRootedPath = getRootedPath;
             this.targetedRuntimeVersion = targetedRuntimeVesion;
             this.targetProcessorArchitecture = targetedProcessorArchitecture;
             this.compareProcessorArchitecture = compareProcessorArchitecture;
diff --git a/src/Tasks/InstalledSDKResolver.cs b/src/Tasks/InstalledSDKResolver.cs
index 427cc8c86eb..22657bda752 100644
--- a/src/Tasks/InstalledSDKResolver.cs
+++ b/src/Tasks/InstalledSDKResolver.cs
@@ -22,8 +22,8 @@ internal class InstalledSDKResolver : Resolver
         /// <summary>
         /// Construct.
         /// </summary>
-        public InstalledSDKResolver(Dictionary<string, ITaskItem> resolvedSDKs, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
+        public InstalledSDKResolver(Dictionary<string, ITaskItem> resolvedSDKs, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, GetRootedPath getRootedPath, Version targetedRuntimeVesion)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, getRootedPath, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
         {
             _resolvedSDKs = resolvedSDKs;
         }
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 2aace9d5633..7b61135dc16 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -221,6 +221,9 @@
     <Compile Include="..\Shared\XMakeAttributes.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="..\Shared\RegisteredTaskObjectCacheBase.cs">
+      <Link>RegisteredTaskObjectCacheBase.cs</Link>
+    </Compile>
     <Compile Include="AppConfig\*.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -356,14 +359,20 @@
     <Compile Include="ResolveAssemblyReferences\Contract\ResolveAssemblyReferenceResponse.cs" />
     <Compile Include="ResolveAssemblyReferences\Contract\ResolveAssemblyReferenceTaskInput.cs" />
     <Compile Include="ResolveAssemblyReferences\Contract\ResolveAssemblyReferenceTaskOutput.cs" />
-    <Compile Include="ResolveAssemblyReferences\BuildEventArgsFormatter.cs" />
+    <Compile Include="ResolveAssemblyReferences\Formatters\BuildEventArgsFormatter.cs" />
+    <Compile Include="ResolveAssemblyReferences\Formatters\ReadOnlyTaskItemFormatter.cs" />
+    <Compile Include="ResolveAssemblyReferences\Formatters\ResolveAssemblyReferenceRequestFormatter.cs" />
+    <Compile Include="ResolveAssemblyReferences\Formatters\ResolveAssemblyReferenceResponseFormatter.cs" />
+    <Compile Include="ResolveAssemblyReferences\Formatters\ResolveAssemblyReferenceResultFormatter.cs" />
+    <Compile Include="ResolveAssemblyReferences\ResolveAssemlyReferneceResolver.cs" />
     <Compile Include="ResolveAssemblyReferences\RpcUtils.cs" />
     <Compile Include="ResolveAssemblyReferences\Server\RarController.cs" />
     <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceBuildEngine.cs" />
     <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceComparer.cs" />
-    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceSerializedTaskHandler.cs" />
+    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceSerializedHandler.cs" />
     <Compile Include="ResolveAssemblyReferences\Server\ServerMutex.cs" />
-    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceTaskHandler.cs" />
+    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceHandler.cs" />
+    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemlyReferenceCacheHandler.cs" />
     <Compile Include="ResolveComReference.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
@@ -1005,6 +1014,7 @@
     <PackageReference Include="System.Collections.Immutable" />
     <PackageReference Include="System.Resources.Extensions" />
     <PackageReference Include="StreamJsonRpc" />
+    <PackageReference Include="MessagePack" />
     <PackageReference Include="Newtonsoft.Json" />
   </ItemGroup>
 
diff --git a/src/Tasks/ResolveAssemblyReferences/Client/RarClient.cs b/src/Tasks/ResolveAssemblyReferences/Client/RarClient.cs
index 30ecfd7f26a..4b30bea6940 100644
--- a/src/Tasks/ResolveAssemblyReferences/Client/RarClient.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Client/RarClient.cs
@@ -55,18 +55,26 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceTaskInpu
         {
             ResolveAssemblyReferenceRequest request = new ResolveAssemblyReferenceRequest(input);
 
-            IResolveAssemblyReferenceTaskHandler client = GetRpcClient();
-
+            var client = GetRpcClient();
+            client.StartListening();
             // TODO: Find out if there is any possibility of awaiting it.
-            return client.ExecuteAsync(request).GetAwaiter().GetResult();
+            try
+            {
+                return client.InvokeAsync<ResolveAssemblyReferenceResult>(nameof(IResolveAssemblyReferenceTaskHandler.ExecuteAsync), request).GetAwaiter().GetResult();
+            }
+            catch (ConnectionLostException e)
+            {
+                throw new InternalErrorException("Request failed", e);
+            }
+            //return client.ExecuteAsync(request).GetAwaiter().GetResult();
         }
 
-        private IResolveAssemblyReferenceTaskHandler GetRpcClient()
+        private JsonRpc GetRpcClient()
         {
             ErrorUtilities.VerifyThrowInternalErrorUnreachable(_clientStream != null);
 
             IJsonRpcMessageHandler handler = RpcUtils.GetRarMessageHandler(_clientStream);
-            return JsonRpc.Attach<IResolveAssemblyReferenceTaskHandler>(handler);
+            return new JsonRpc(handler);
         }
 
         public void Dispose()
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
index 275234d4d3b..72f2ccbfe65 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
@@ -27,7 +27,7 @@ public sealed class ReadOnlyTaskItem : ITaskItem2
         [Key(1)]
         public Dictionary<string, string> MetadataNameToValue { get; set; }
 
-      
+
         [IgnoreMember]
         public string EvaluatedIncludeEscaped
         {
@@ -36,7 +36,7 @@ public string EvaluatedIncludeEscaped
             set => throw new NotImplementedException();
         }
 
-       
+
 
         public ReadOnlyTaskItem(string itemSpec)
         {
@@ -44,15 +44,20 @@ public ReadOnlyTaskItem(string itemSpec)
             MetadataNameToValue = new Dictionary<string, string>();
         }
 
+        public ReadOnlyTaskItem(string itemSpec, IDictionary metadata)
+        {
+            ItemSpec = itemSpec;
+            MetadataNameToValue = new Dictionary<string, string>((IDictionary<string, string>)metadata);
+        }
+
         public string GetMetadata(string metadataName)
         {
-            string metadataValue = GetMetadataValueEscaped(metadataName);
-            return EscapingUtilities.UnescapeAll(metadataValue);
+            throw new NotImplementedException();
         }
 
         public void SetMetadata(string metadataName, string metadataValue)
         {
-            MetadataNameToValue[metadataName] = metadataValue;
+            throw new NotImplementedException();
         }
 
         public void RemoveMetadata(string metadataName)
@@ -62,10 +67,7 @@ public void RemoveMetadata(string metadataName)
 
         public void CopyMetadataTo(ITaskItem destinationItem)
         {
-            foreach (KeyValuePair<string, string> metadataNameWithValue in MetadataNameToValue)
-            {
-                destinationItem.SetMetadata(metadataNameWithValue.Key, metadataNameWithValue.Value);
-            }
+            throw new NotImplementedException();
         }
 
         public IDictionary CloneCustomMetadata()
@@ -75,8 +77,8 @@ public IDictionary CloneCustomMetadata()
 
         public string GetMetadataValueEscaped(string metadataName)
         {
-            bool isFound = MetadataNameToValue.TryGetValue(metadataName, out string metadataValue);
-            return isFound ? metadataValue : string.Empty;
+            throw new NotImplementedException();
+
         }
 
         public void SetMetadataValueLiteral(string metadataName, string metadataValue)
@@ -100,8 +102,7 @@ internal static ReadOnlyTaskItem[] CreateArray(ITaskItem[] items)
                 if (items[i] == null)
                     continue;
 
-                ReadOnlyTaskItem readOnlyTaskItem = new ReadOnlyTaskItem(items[i].ItemSpec);
-                items[i].CopyMetadataTo(readOnlyTaskItem);
+                ReadOnlyTaskItem readOnlyTaskItem = new ReadOnlyTaskItem(items[i].ItemSpec, items[i].CloneCustomMetadata());
                 readOnlyTaskItems[i] = readOnlyTaskItem;
             }
 
@@ -119,12 +120,29 @@ internal static ITaskItem[] ToTaskItem(ReadOnlyTaskItem[] readOnlyTaskItems)
                 if (readOnlyTaskItems[i] == null)
                     continue;
 
-                TaskItem item = new TaskItem(readOnlyTaskItems[i].ItemSpec);
-                readOnlyTaskItems[i].CopyMetadataTo(item);
+                TaskItem item = new TaskItem(readOnlyTaskItems[i].ItemSpec, readOnlyTaskItems[i].MetadataNameToValue);
                 items[i] = item;
             }
 
             return items;
         }
+
+        /// <summary>
+        /// This allows an explicit typecast from a "TaskItem" to a "string", returning the escaped ItemSpec for this item.
+        /// </summary>
+        /// <param name="taskItemToCast">The item to operate on.</param>
+        /// <returns>The item-spec of the item.</returns>
+        public static explicit operator string(ReadOnlyTaskItem taskItemToCast)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(taskItemToCast, nameof(taskItemToCast));
+            return taskItemToCast.ItemSpec;
+        }
+
+
+        /// <summary>
+        /// Gets the item-spec.
+        /// </summary>
+        /// <returns>The item-spec string.</returns>
+        public override string ToString() => ItemSpec;
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs
index 0d344417d4e..74f2447d710 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs
@@ -53,6 +53,7 @@ internal ResolveAssemblyReferenceRequest(ResolveAssemblyReferenceTaskInput input
             UnresolveFrameworkAssembliesFromHigherFrameworks = input.UnresolveFrameworkAssembliesFromHigherFrameworks;
             UseResolveAssemblyReferenceService = input.UseResolveAssemblyReferenceService;
             WarnOrErrorOnTargetArchitectureMismatch = input.WarnOrErrorOnTargetArchitectureMismatch;
+            CurrentPath = input.CurrentPath;
         }
 
         [Key(0)]
@@ -174,5 +175,8 @@ internal ResolveAssemblyReferenceRequest(ResolveAssemblyReferenceTaskInput input
 
         [Key(39)]
         public string WarnOrErrorOnTargetArchitectureMismatch { get; set; }
+
+        [Key(40)]
+        public string CurrentPath { get; set; }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs
index aa78c3fc168..2a61280d28e 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs
@@ -25,6 +25,8 @@ internal ResolveAssemblyReferenceResponse(ResolveAssemblyReferenceTaskOutput out
             ScatterFiles = ReadOnlyTaskItem.CreateArray(output.ScatterFiles);
             SerializationAssemblyFiles = ReadOnlyTaskItem.CreateArray(output.SerializationAssemblyFiles);
             SuggestedRedirects = ReadOnlyTaskItem.CreateArray(output.SuggestedRedirects);
+            //Assemblies = ReadOnlyTaskItem.CreateArray(output.Assemblies);
+            //AssemblyFiles = ReadOnlyTaskItem.CreateArray(output.AssemblyFiles);
         }
 
         [Key(0)]
@@ -59,5 +61,11 @@ internal ResolveAssemblyReferenceResponse(ResolveAssemblyReferenceTaskOutput out
 
         [Key(10)]
         public ReadOnlyTaskItem[] SuggestedRedirects { get; set; }
+
+        //[Key(11)]
+        //public ReadOnlyTaskItem[] Assemblies { get; set; }
+
+        //[Key(12)]
+        //public ReadOnlyTaskItem[] AssemblyFiles { get; set; }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
index ae528551be7..28323b670f8 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
@@ -15,10 +15,11 @@ public ResolveAssemblyReferenceResult()
         {
         }
 
-        internal ResolveAssemblyReferenceResult(bool taskResult, ResolveAssemblyReferenceTaskOutput output)
+        internal ResolveAssemblyReferenceResult(bool taskResult, ResolveAssemblyReferenceTaskOutput output, ResolveAssemblyReferenceTaskInput input)
         {
             TaskResult = taskResult;
             Response = new ResolveAssemblyReferenceResponse(output);
+            Request = new ResolveAssemblyReferenceRequest(input);
         }
 
         [Key(0)]
@@ -33,15 +34,22 @@ internal ResolveAssemblyReferenceResult(bool taskResult, ResolveAssemblyReferenc
         public List<CustomBuildEventArgs> CustomBuildEvents { get; set; }
 
         [Key(4)]
-        public List<BuildErrorEventArgs> BuildErrorEvents {get;set;}
+        public List<BuildErrorEventArgs> BuildErrorEvents { get; set; }
 
         [Key(5)]
-        public List<BuildMessageEventArgs> BuildMessageEvents {get;set;}
+        public List<BuildMessageEventArgs> BuildMessageEvents { get; set; }
 
         [Key(6)]
-        public List<BuildWarningEventArgs> BuildWarningEvents {get;set;}
+        public List<BuildWarningEventArgs> BuildWarningEvents { get; set; }
+
+
+        [Key(7)]
+        public ResolveAssemblyReferenceRequest Request { get; set; }
 
         [IgnoreMember]
         internal ResolveAssemblyReferenceTaskOutput Output => new ResolveAssemblyReferenceTaskOutput(Response);
+
+        [IgnoreMember]
+        internal ResolveAssemblyReferenceTaskInput InputOutput => new ResolveAssemblyReferenceTaskInput(Request);
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskInput.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskInput.cs
index cbc462a4103..4c89b42a5b3 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskInput.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskInput.cs
@@ -16,8 +16,8 @@ public ResolveAssemblyReferenceTaskInput(ResolveAssemblyReferenceRequest request
             AllowedAssemblyExtensions = request.AllowedAssemblyExtensions;
             AllowedRelatedFileExtensions = request.AllowedRelatedFileExtensions;
             AppConfigFile = request.AppConfigFile;
-            Assemblies = request.Assemblies;
-            AssemblyFiles = request.AssemblyFiles;
+            Assemblies = ReadOnlyTaskItem.ToTaskItem(request.Assemblies);
+            AssemblyFiles = ReadOnlyTaskItem.ToTaskItem(request.AssemblyFiles);
             AutoUnify = request.AutoUnify;
             CandidateAssemblyFiles = request.CandidateAssemblyFiles;
             CopyLocalDependenciesWhenParentReferenceInGac = request.CopyLocalDependenciesWhenParentReferenceInGac;
@@ -27,18 +27,18 @@ public ResolveAssemblyReferenceTaskInput(ResolveAssemblyReferenceRequest request
             FindRelatedFiles = request.FindRelatedFiles;
             FindSatellites = request.FindSatellites;
             FindSerializationAssemblies = request.FindSerializationAssemblies;
-            FullFrameworkAssemblyTables = request.FullFrameworkAssemblyTables;
+            FullFrameworkAssemblyTables = ReadOnlyTaskItem.ToTaskItem(request.FullFrameworkAssemblyTables);
             FullFrameworkFolders = request.FullFrameworkFolders;
             FullTargetFrameworkSubsetNames = request.FullTargetFrameworkSubsetNames;
             IgnoreDefaultInstalledAssemblySubsetTables = request.IgnoreDefaultInstalledAssemblySubsetTables;
             IgnoreDefaultInstalledAssemblyTables = request.IgnoreDefaultInstalledAssemblyTables;
             IgnoreTargetFrameworkAttributeVersionMismatch = request.IgnoreTargetFrameworkAttributeVersionMismatch;
             IgnoreVersionForFrameworkReferences = request.IgnoreVersionForFrameworkReferences;
-            InstalledAssemblySubsetTables = request.InstalledAssemblySubsetTables;
-            InstalledAssemblyTables = request.InstalledAssemblyTables;
+            InstalledAssemblySubsetTables = ReadOnlyTaskItem.ToTaskItem(request.InstalledAssemblySubsetTables);
+            InstalledAssemblyTables = ReadOnlyTaskItem.ToTaskItem(request.InstalledAssemblyTables);
             LatestTargetFrameworkDirectories = request.LatestTargetFrameworkDirectories;
             ProfileName = request.ProfileName;
-            ResolvedSDKReferences = request.ResolvedSDKReferences;
+            ResolvedSDKReferences = ReadOnlyTaskItem.ToTaskItem(request.ResolvedSDKReferences);
             SearchPaths = request.SearchPaths;
             Silent = request.Silent;
             StateFile = request.StateFile;
@@ -53,6 +53,7 @@ public ResolveAssemblyReferenceTaskInput(ResolveAssemblyReferenceRequest request
             UnresolveFrameworkAssembliesFromHigherFrameworks = request.UnresolveFrameworkAssembliesFromHigherFrameworks;
             UseResolveAssemblyReferenceService = request.UseResolveAssemblyReferenceService;
             WarnOrErrorOnTargetArchitectureMismatch = request.WarnOrErrorOnTargetArchitectureMismatch;
+            CurrentPath = request.CurrentPath;
         }
 
         public string[] AllowedAssemblyExtensions { get; set; }
@@ -134,5 +135,6 @@ public ResolveAssemblyReferenceTaskInput(ResolveAssemblyReferenceRequest request
         public bool UseResolveAssemblyReferenceService { get; set; }
 
         public string WarnOrErrorOnTargetArchitectureMismatch { get; set; }
+        public string CurrentPath { get; set; }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskOutput.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskOutput.cs
index 8b6aaec33ae..873270475d0 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskOutput.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceTaskOutput.cs
@@ -25,6 +25,8 @@ public ResolveAssemblyReferenceTaskOutput(ResolveAssemblyReferenceResponse respo
             ScatterFiles = ReadOnlyTaskItem.ToTaskItem(response.ScatterFiles);
             SerializationAssemblyFiles = ReadOnlyTaskItem.ToTaskItem(response.SerializationAssemblyFiles);
             SuggestedRedirects = ReadOnlyTaskItem.ToTaskItem(response.SuggestedRedirects);
+            //Assemblies = ReadOnlyTaskItem.ToTaskItem(response.Assemblies);
+            //AssemblyFiles = ReadOnlyTaskItem.ToTaskItem(response.AssemblyFiles);
         }
 
         public ITaskItem[] CopyLocalFiles { get; set; }
@@ -48,5 +50,9 @@ public ResolveAssemblyReferenceTaskOutput(ResolveAssemblyReferenceResponse respo
         public ITaskItem[] SerializationAssemblyFiles { get; set; }
 
         public ITaskItem[] SuggestedRedirects { get; set; }
+
+        //public ITaskItem[] Assemblies { get; set; }
+
+        //public ITaskItem[] AssemblyFiles { get; set; }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
index 9b3d2a6d006..49983dd639a 100644
--- a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
@@ -76,7 +76,9 @@ public RarController(
                   streamFactory,
                   validateHandshakeCallback,
                   timeout: timeout,
-                  resolveAssemblyReferenceTaskHandler: new ResolveAssemlyReferenceCacheHandler(new ResolveAssemblyReferenceTaskHandler()))
+                  resolveAssemblyReferenceTaskHandler: //new ResolveAssemblyReferenceSerializedHandler(
+                      new ResolveAssemlyReferenceCacheHandler(
+                      new ResolveAssemblyReferenceHandler()))//)
         {
         }
 
@@ -182,8 +184,8 @@ private JsonRpc GetRpcServer(Stream stream, IResolveAssemblyReferenceTaskHandler
         {
             IJsonRpcMessageHandler serverHandler = RpcUtils.GetRarMessageHandler(stream);
             JsonRpc rpc = new JsonRpc(serverHandler, handler);
-            //rpc.TraceSource = new TraceSource("Server", SourceLevels.Verbose);
-            //rpc.TraceSource.Listeners.Add(new ConsoleLogger());
+            rpc.TraceSource = new TraceSource("Server", SourceLevels.Warning);
+            rpc.TraceSource.Listeners.Add(new ConsoleLogger()); 
             return rpc;
         }
 
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
index f8976b18261..d0749177fa0 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
@@ -1,6 +1,8 @@
 ﻿using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using System;
 using System.Collections;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
@@ -8,7 +10,7 @@
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
-    internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine7
+    internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine
     {
         internal int EventCount => CustomBuildEvent.Count + MessageBuildEvent.Count + WarningBuildEvent.Count + ErrorBuildEvent.Count;
         internal List<CustomBuildEventArgs> CustomBuildEvent { get; } = new List<CustomBuildEventArgs>();
@@ -16,6 +18,8 @@ internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine7
         internal List<BuildWarningEventArgs> WarningBuildEvent { get; } = new List<BuildWarningEventArgs>();
         internal List<BuildErrorEventArgs> ErrorBuildEvent { get; } = new List<BuildErrorEventArgs>();
 
+        private readonly RegisteredTaskObjectCache _objectCache = new RegisteredTaskObjectCache(); 
+
         public bool AllowFailureWithoutError { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
 
         public bool IsRunningMultipleNodes => throw new NotImplementedException();
@@ -28,36 +32,7 @@ internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine7
 
         public string ProjectFileOfTaskNode => string.Empty;
 
-        public bool BuildProjectFile(string projectFileName, string[] targetNames, IDictionary globalProperties, IDictionary targetOutputs, string toolsVersion)
-        {
-            throw new NotImplementedException();
-        }
-
-        public bool BuildProjectFile(string projectFileName, string[] targetNames, IDictionary globalProperties, IDictionary targetOutputs)
-        {
-            throw new NotImplementedException();
-        }
-
-        public BuildEngineResult BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, IDictionary[] globalProperties, IList<string>[] removeGlobalProperties, string[] toolsVersion, bool returnTargetOutputs)
-        {
-            throw new NotImplementedException();
-        }
-
-        public bool BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, IDictionary[] globalProperties, IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion)
-        {
-            throw new NotImplementedException();
-        }
-
-        public IReadOnlyDictionary<string, string> GetGlobalProperties()
-        {
-            throw new NotImplementedException();
-        }
-
-        public object GetRegisteredTaskObject(object key, RegisteredTaskObjectLifetime lifetime)
-        {
-            throw new NotImplementedException();
-        }
-
+       
         public void LogCustomEvent(CustomBuildEventArgs e)
         {
             CustomBuildEvent.Add(e);
@@ -83,24 +58,13 @@ public void LogWarningEvent(BuildWarningEventArgs e)
             WarningBuildEvent.Add(e);
         }
 
-        public void Reacquire()
-        {
-            throw new NotImplementedException();
-        }
-
-        public void RegisterTaskObject(object key, object obj, RegisteredTaskObjectLifetime lifetime, bool allowEarlyCollection)
-        {
-            throw new NotImplementedException();
-        }
-
-        public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime lifetime)
+        public bool BuildProjectFile(string projectFileName, string[] targetNames, IDictionary globalProperties, IDictionary targetOutputs)
         {
             throw new NotImplementedException();
         }
 
-        public void Yield()
+        private class RegisteredTaskObjectCache : RegisteredTaskObjectCacheBase
         {
-            throw new NotImplementedException();
         }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceComparer.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceComparer.cs
index 6c2cec9121b..81b53333fc7 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceComparer.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceComparer.cs
@@ -46,7 +46,8 @@ internal static bool CompareInput(ResolveAssemblyReferenceRequest x, ResolveAsse
                    x.TargetProcessorArchitecture == y.TargetProcessorArchitecture &&
                    x.UnresolveFrameworkAssembliesFromHigherFrameworks == y.UnresolveFrameworkAssembliesFromHigherFrameworks &&
                    x.UseResolveAssemblyReferenceService == y.UseResolveAssemblyReferenceService &&
-                   x.WarnOrErrorOnTargetArchitectureMismatch == y.WarnOrErrorOnTargetArchitectureMismatch;
+                   x.WarnOrErrorOnTargetArchitectureMismatch == y.WarnOrErrorOnTargetArchitectureMismatch &&
+                   x.CurrentPath == y.CurrentPath;
 
             return fieldsEqual &&
                    AreStringListsEqual(x.AllowedAssemblyExtensions, y.AllowedAssemblyExtensions) &&
@@ -88,7 +89,10 @@ internal static bool CompareOutput(ResolveAssemblyReferenceResponse x, ResolveAs
                    AreTaskItemListsEqual(x.SatelliteFiles, y.SatelliteFiles) &&
                    AreTaskItemListsEqual(x.ScatterFiles, y.ScatterFiles) &&
                    AreTaskItemListsEqual(x.SerializationAssemblyFiles, y.SerializationAssemblyFiles) &&
-                   AreTaskItemListsEqual(x.SuggestedRedirects, y.SuggestedRedirects);
+                   AreTaskItemListsEqual(x.SuggestedRedirects, y.SuggestedRedirects); 
+            //&&
+            //       AreTaskItemListsEqual(x.Assemblies, y.Assemblies) &&
+            //       AreTaskItemListsEqual(x.AssemblyFiles, y.AssemblyFiles);
         }
 
         private static bool AreStringListsEqual(string[] x, string[] y)
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs
new file mode 100644
index 00000000000..8dc55933793
--- /dev/null
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs
@@ -0,0 +1,59 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Server;
+
+namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
+{
+    internal sealed class ResolveAssemblyReferenceHandler : IResolveAssemblyReferenceTaskHandler
+    {
+        private ResolveAssemblyReferenceTaskOutput EmptyOutput => new ResolveAssemblyReference().ResolveAssemblyReferenceOutput;
+
+        private readonly ResolveAssemblyReference _task = new ResolveAssemblyReference();
+
+        private ResolveAssemblyReference GetResolveAssemblyReferenceTask(IBuildEngine buildEngine)
+        {
+            _task.BuildEngine = buildEngine;
+            _task.ResolveAssemblyReferenceOutput = EmptyOutput;
+
+            return _task;
+        }
+
+        public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
+        {
+            return Task.FromResult(Execute(input));
+
+        }
+
+        internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest input)
+        {
+            ResolveAssemblyReferenceTaskInput taskInput = new ResolveAssemblyReferenceTaskInput(input);
+            ResolveAssemblyReferenceBuildEngine buildEngine = new ResolveAssemblyReferenceBuildEngine();
+            ResolveAssemblyReference task = GetResolveAssemblyReferenceTask(buildEngine);
+            //ResolveAssemblyReference task = new ResolveAssemblyReference
+            //{
+            //    BuildEngine = buildEngine
+            //};
+
+            ResolveAssemblyReferenceResult result = task.Execute(taskInput);
+            result.CustomBuildEvents = buildEngine.CustomBuildEvent;
+            result.BuildMessageEvents = buildEngine.MessageBuildEvent;
+            result.BuildWarningEvents = buildEngine.WarningBuildEvent;
+            result.BuildErrorEvents = buildEngine.ErrorBuildEvent;
+
+            result.EventCount = buildEngine.EventCount;
+
+            //System.Console.WriteLine("RAR task: {0}. Logged {1} events", result.TaskResult ? "Succeded" : "Failed", result.EventCount);
+
+            return result;
+        }
+
+        public void Dispose()
+        {
+        }
+    }
+}
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceSerializedTaskHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceSerializedHandler.cs
similarity index 65%
rename from src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceSerializedTaskHandler.cs
rename to src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceSerializedHandler.cs
index eb066d21ead..29c4a7c8617 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceSerializedTaskHandler.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceSerializedHandler.cs
@@ -3,25 +3,26 @@
 
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
 using Microsoft.VisualStudio.Threading;
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
-    internal sealed class ResolveAssemblyReferenceSerializedTaskHandler : IResolveAssemblyReferenceTaskHandler
+    internal sealed class ResolveAssemblyReferenceSerializedHandler : IResolveAssemblyReferenceTaskHandler
     {
         private const int MaxNumberOfConcurentClients = 1;
 
         private readonly IResolveAssemblyReferenceTaskHandler _taskHandler;
         private readonly AsyncSemaphore _semaphore;
 
-        public ResolveAssemblyReferenceSerializedTaskHandler(IResolveAssemblyReferenceTaskHandler taskHandler)
+        public ResolveAssemblyReferenceSerializedHandler(IResolveAssemblyReferenceTaskHandler taskHandler)
         {
             _taskHandler = taskHandler;
             _semaphore = new AsyncSemaphore(MaxNumberOfConcurentClients);
         }
 
-        public ResolveAssemblyReferenceSerializedTaskHandler() : this(new ResolveAssemblyReferenceTaskHandler())
+        public ResolveAssemblyReferenceSerializedHandler() : this(new ResolveAssemblyReferenceHandler())
         {
         }
 
@@ -29,7 +30,9 @@ public async Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyRe
         {
             using (await _semaphore.EnterAsync(cancellationToken))
             {
-                return await _taskHandler.ExecuteAsync(input, cancellationToken);
+                NativeMethodsShared.SetCurrentDirectory(input.CurrentPath);
+                ResolveAssemblyReferenceResult result = await _taskHandler.ExecuteAsync(input, cancellationToken);
+                return result;
             }
         }
 
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemlyReferenceCacheHandler.cs
similarity index 50%
rename from src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
rename to src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemlyReferenceCacheHandler.cs
index 61e90c59173..feb5b60bfec 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemlyReferenceCacheHandler.cs
@@ -3,60 +3,10 @@
 using System.Diagnostics;
 using System.Threading;
 using System.Threading.Tasks;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
-using Microsoft.Build.Tasks.ResolveAssemblyReferences.Server;
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
-    internal sealed class ResolveAssemblyReferenceTaskHandler : IResolveAssemblyReferenceTaskHandler
-    {
-        private ResolveAssemblyReferenceTaskOutput EmptyOutput => new ResolveAssemblyReference().ResolveAssemblyReferenceOutput;
-
-        private readonly ResolveAssemblyReference _task = new ResolveAssemblyReference();
-
-        private ResolveAssemblyReference GetResolveAssemblyReferenceTask(IBuildEngine buildEngine)
-        {
-            _task.BuildEngine = buildEngine;
-            _task.ResolveAssemblyReferenceOutput = EmptyOutput;
-
-            return _task;
-        }
-
-        public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
-        {
-            return Task.FromResult(Execute(input));
-
-        }
-
-        internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest input)
-        {
-            ResolveAssemblyReferenceTaskInput taskInput = new ResolveAssemblyReferenceTaskInput(input);
-            ResolveAssemblyReferenceBuildEngine buildEngine = new ResolveAssemblyReferenceBuildEngine();
-            //ResolveAssemblyReference task = GetResolveAssemblyReferenceTask(buildEngine);
-            ResolveAssemblyReference task = new ResolveAssemblyReference
-            {
-                BuildEngine = buildEngine
-            };
-
-            ResolveAssemblyReferenceResult result = task.Execute(taskInput);
-            //result.CustomBuildEvents = buildEngine.CustomBuildEvent;
-            //result.BuildMessageEvents = buildEngine.MessageBuildEvent;
-            //result.BuildWarningEvents = buildEngine.WarningBuildEvent;
-            //result.BuildErrorEvents = buildEngine.ErrorBuildEvent;
-
-            //result.EventCount = buildEngine.EventCount;
-
-            //System.Console.WriteLine("RAR task: {0}. Logged {1} events", result.TaskResult ? "Succeded" : "Failed", result.EventCount);
-
-            return result;
-        }
-
-        public void Dispose()
-        {
-        }
-    }
-
     internal sealed class ResolveAssemlyReferenceCacheHandler : IResolveAssemblyReferenceTaskHandler
     {
         private readonly struct CacheEntry
@@ -77,8 +27,6 @@ public CacheEntry(ResolveAssemblyReferenceRequest request, ResolveAssemblyRefere
 
         private readonly IResolveAssemblyReferenceTaskHandler _handler;
 
-        private static int RequestNum = 0;
-
         public ResolveAssemlyReferenceCacheHandler(IResolveAssemblyReferenceTaskHandler handler)
         {
             _handler = handler;
@@ -87,22 +35,17 @@ public ResolveAssemlyReferenceCacheHandler(IResolveAssemblyReferenceTaskHandler
 
         public async Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
         {
-            Stopwatch stopwatch = new Stopwatch();
-            stopwatch.Start();
             string projectId = input.StateFile;
 
-            int requestId = Interlocked.Increment(ref RequestNum);
-
             lock (_lock)
             {
-                if (_cache.ContainsKey(projectId))
+                if (projectId != null && _cache.ContainsKey(projectId))
                 {
                     Console.WriteLine($"Found entry for project: '{projectId}'");
                     CacheEntry entry = _cache[projectId];
 
                     if (ResolveAssemblyReferenceComparer.CompareInput(input, entry.Request))
                     {
-                        PrintDiagnostic(requestId, stopwatch, true);
                         return entry.Result;
                     }
 
@@ -116,10 +59,10 @@ public async Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyRe
             lock (_lock)
             {
                 Console.WriteLine("Adding new entry to cache");
-                _cache[projectId] = new CacheEntry(input, result);
+                if (projectId != null)
+                    _cache[projectId] = new CacheEntry(input, result);
             }
 
-            PrintDiagnostic(requestId, stopwatch, false);
             return result;
         }
 
