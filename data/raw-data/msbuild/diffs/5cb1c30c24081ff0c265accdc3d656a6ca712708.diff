diff --git a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
index 1709fa7d5d7..6863e02cbf7 100644
--- a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -19,7 +19,7 @@ public class BuildAnalyzerConfiguration_Test
         [Fact]
         public void CreateWithNull_ReturnsObjectWithNullValues()
         {
-            var buildConfig = BuildAnalyzerConfiguration.Create(null!);
+            var buildConfig = BuildAnalyzerConfiguration.Create(null);
             buildConfig.ShouldNotBeNull();
             buildConfig.Severity.ShouldBeNull();
             buildConfig.IsEnabled.ShouldBeNull();
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index bfe82e52166..279019ee7fd 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -53,7 +53,7 @@ public class BuildAnalyzerConfiguration
     /// </summary>
     /// <param name="configDictionary">The configuration dictionary containing the settings for the build analyzer.</param>
     /// <returns>A new instance of <see cref="BuildAnalyzerConfiguration"/> with the specified settings.</returns>
-    public static BuildAnalyzerConfiguration Create(Dictionary<string, string> configDictionary)
+    public static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)
     {
         return new()
         {
@@ -63,11 +63,11 @@ public static BuildAnalyzerConfiguration Create(Dictionary<string, string> confi
         };
     }
 
-    private static bool TryExtractValue<T>(string key, Dictionary<string, string> config, out T value) where T : struct, Enum
+    private static bool TryExtractValue<T>(string key, Dictionary<string, string>? config, out T value) where T : struct, Enum
     {
         value = default;
 
-        if (config == null || !config.TryGetValue(key, out string stringValue))
+        if (config == null || !config.TryGetValue(key, out var stringValue) || stringValue is null)
         {
             return false;
         }
@@ -82,11 +82,11 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
         return isParsed;
     }
 
-    private static bool TryExtractValue(string key, Dictionary<string, string> config, out bool value)
+    private static bool TryExtractValue(string key, Dictionary<string, string>? config, out bool value)
     {
         value = default;
 
-        if (config == null || !config.TryGetValue(key, out string stringValue))
+        if (config == null || !config.TryGetValue(key, out var stringValue) || stringValue is null)
         {
             return false;
         }
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index ba23accbf17..af925f47b6c 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -77,7 +77,7 @@ public override bool Equals(object? obj)
         {
             foreach (var keyVal in customConfigObj.ConfigurationData)
             {
-                if(!ConfigurationData.TryGetValue(keyVal.Key, out string value) || value != keyVal.Value)
+                if(!ConfigurationData.TryGetValue(keyVal.Key, out var value) || value != keyVal.Value)
                 {
                     return false;
                 }
