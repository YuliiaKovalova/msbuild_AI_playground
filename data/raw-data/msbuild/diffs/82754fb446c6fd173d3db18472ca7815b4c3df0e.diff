diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationEffectiveTests.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationEffectiveTests.cs
index f604c043b62..67f2f3a81c3 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationEffectiveTests.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationEffectiveTests.cs
@@ -12,38 +12,38 @@ namespace Microsoft.Build.BuildCheck.UnitTests;
 public class BuildAnalyzerConfigurationEffectiveTests
 {
     [Theory]
-    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning,  true)]
-    [InlineData("ruleId2", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning,  true)]
-    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Error, false)]
+    [InlineData("ruleId", EvaluationCheckScope.ProjectOnly, BuildExecutionCheckResultSeverity.Warning,  true)]
+    [InlineData("ruleId2", EvaluationCheckScope.ProjectOnly, BuildExecutionCheckResultSeverity.Warning,  true)]
+    [InlineData("ruleId", EvaluationCheckScope.ProjectOnly, BuildExecutionCheckResultSeverity.Error, false)]
     public void IsSameConfigurationAsTest(
         string secondRuleId,
-        EvaluationAnalysisScope secondScope,
-        BuildAnalyzerResultSeverity secondSeverity,
+        EvaluationCheckScope secondScope,
+        BuildExecutionCheckResultSeverity secondSeverity,
         bool isExpectedToBeSame)
     {
-        BuildAnalyzerConfigurationEffective configuration1 = new BuildAnalyzerConfigurationEffective(
+        BuildExecutionCheckConfigurationEffective configuration1 = new BuildExecutionCheckConfigurationEffective(
                        ruleId: "ruleId",
-                       evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
-                       severity: BuildAnalyzerResultSeverity.Warning);
+                       evaluationCheckScope: EvaluationCheckScope.ProjectOnly,
+                       severity: BuildExecutionCheckResultSeverity.Warning);
 
-        BuildAnalyzerConfigurationEffective configuration2 = new BuildAnalyzerConfigurationEffective(
+        BuildExecutionCheckConfigurationEffective configuration2 = new BuildExecutionCheckConfigurationEffective(
             ruleId: secondRuleId,
-            evaluationAnalysisScope: secondScope,
+            evaluationCheckScope: secondScope,
             severity: secondSeverity);
 
         configuration1.IsSameConfigurationAs(configuration2).ShouldBe(isExpectedToBeSame);
     }
 
     [Theory]
-    [InlineData( BuildAnalyzerResultSeverity.Warning, true)]
-    [InlineData(BuildAnalyzerResultSeverity.Suggestion, true)]
-    [InlineData(BuildAnalyzerResultSeverity.Error, true)]
-    [InlineData(BuildAnalyzerResultSeverity.None, false)]
-    public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig(BuildAnalyzerResultSeverity severity, bool isEnabledExpected)
+    [InlineData( BuildExecutionCheckResultSeverity.Warning, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.Suggestion, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.Error, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.None, false)]
+    public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig(BuildExecutionCheckResultSeverity severity, bool isEnabledExpected)
     {
-        BuildAnalyzerConfigurationEffective configuration = new BuildAnalyzerConfigurationEffective(
+        BuildExecutionCheckConfigurationEffective configuration = new BuildExecutionCheckConfigurationEffective(
                        ruleId: "ruleId",
-                       evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
+                       evaluationCheckScope: EvaluationCheckScope.ProjectOnly,
                        severity: severity);
 
         configuration.IsEnabled.ShouldBe(isEnabledExpected);
@@ -54,10 +54,10 @@ public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig_Fails(
     {
         Should.Throw<ArgumentOutOfRangeException>(() =>
         {
-            new BuildAnalyzerConfigurationEffective(
+            new BuildExecutionCheckConfigurationEffective(
                         ruleId: "ruleId",
-                        evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
-                        severity: BuildAnalyzerResultSeverity.Default);
+                        evaluationCheckScope: EvaluationCheckScope.ProjectOnly,
+                        severity: BuildExecutionCheckResultSeverity.Default);
         });
     }
 }
diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
index a017df0f9c3..7ffd844aa95 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -9,51 +9,51 @@
 
 namespace Microsoft.Build.BuildCheck.UnitTests;
 
-public class BuildAnalyzerConfiguration_Test
+public class BuildExecutionCheckConfiguration_Test
 {
     [Fact]
     public void CreateWithNull_ReturnsObjectWithNullValues()
     {
-        var buildConfig = BuildAnalyzerConfiguration.Create(null);
+        var buildConfig = BuildExecutionCheckConfiguration.Create(null);
         buildConfig.ShouldNotBeNull();
         buildConfig.Severity.ShouldBeNull();
         buildConfig.IsEnabled.ShouldBeNull();
-        buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        buildConfig.EvaluationCheckScope.ShouldBeNull();
     }
 
     [Fact]
     public void CreateWithEmpty_ReturnsObjectWithNullValues()
     {
-        var buildConfig = BuildAnalyzerConfiguration.Create(new Dictionary<string, string>());
+        var buildConfig = BuildExecutionCheckConfiguration.Create(new Dictionary<string, string>());
         buildConfig.ShouldNotBeNull();
         buildConfig.Severity.ShouldBeNull();
         buildConfig.IsEnabled.ShouldBeNull();
-        buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        buildConfig.EvaluationCheckScope.ShouldBeNull();
     }
 
     [Theory]
-    [InlineData("error", BuildAnalyzerResultSeverity.Error)]
-    [InlineData("ERROR", BuildAnalyzerResultSeverity.Error)]
-    [InlineData("suggestion", BuildAnalyzerResultSeverity.Suggestion)]
-    [InlineData("SUGGESTION", BuildAnalyzerResultSeverity.Suggestion)]
-    [InlineData("warning", BuildAnalyzerResultSeverity.Warning)]
-    [InlineData("WARNING", BuildAnalyzerResultSeverity.Warning)]
-    [InlineData("NONE", BuildAnalyzerResultSeverity.None)]
-    [InlineData("none", BuildAnalyzerResultSeverity.None)]
-    [InlineData("default", BuildAnalyzerResultSeverity.Default)]
-    [InlineData("DEFAULT", BuildAnalyzerResultSeverity.Default)]
-    public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAnalyzerResultSeverity? expected)
+    [InlineData("error", BuildExecutionCheckResultSeverity.Error)]
+    [InlineData("ERROR", BuildExecutionCheckResultSeverity.Error)]
+    [InlineData("suggestion", BuildExecutionCheckResultSeverity.Suggestion)]
+    [InlineData("SUGGESTION", BuildExecutionCheckResultSeverity.Suggestion)]
+    [InlineData("warning", BuildExecutionCheckResultSeverity.Warning)]
+    [InlineData("WARNING", BuildExecutionCheckResultSeverity.Warning)]
+    [InlineData("NONE", BuildExecutionCheckResultSeverity.None)]
+    [InlineData("none", BuildExecutionCheckResultSeverity.None)]
+    [InlineData("default", BuildExecutionCheckResultSeverity.Default)]
+    [InlineData("DEFAULT", BuildExecutionCheckResultSeverity.Default)]
+    public void CreateBuildExecutionCheckConfiguration_Severity(string parameter, BuildExecutionCheckResultSeverity? expected)
     {
         var config = new Dictionary<string, string>()
         {
             { "severity" , parameter },
         };
 
-        var buildConfig = BuildAnalyzerConfiguration.Create(config);
+        var buildConfig = BuildExecutionCheckConfiguration.Create(config);
 
         buildConfig.ShouldNotBeNull();
         buildConfig.Severity.ShouldBe(expected);
-        buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        buildConfig.EvaluationCheckScope.ShouldBeNull();
     }
 
     [Theory]
@@ -62,38 +62,38 @@ public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAna
     [InlineData("suggestion", true)]
     [InlineData("none", false)]
     [InlineData("default", null)]
-    public void CreateBuildAnalyzerConfiguration_SeverityAndEnabledOrder(string parameter, bool? expected)
+    public void CreateBuildExecutionCheckConfiguration_SeverityAndEnabledOrder(string parameter, bool? expected)
     {
         var config = new Dictionary<string, string>()
         {
             { "severity", parameter },
         };
         
-        var buildConfig = BuildAnalyzerConfiguration.Create(config);
+        var buildConfig = BuildExecutionCheckConfiguration.Create(config);
 
         buildConfig.IsEnabled.ShouldBe(expected);
     }
 
     [Theory]
-    [InlineData("project", EvaluationAnalysisScope.ProjectOnly)]
-    [InlineData("PROJECT", EvaluationAnalysisScope.ProjectOnly)]
-    [InlineData("current_imports", EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree)]
-    [InlineData("CURRENT_IMPORTS", EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree)]
-    [InlineData("without_sdks", EvaluationAnalysisScope.ProjectWithImportsWithoutSdks)]
-    [InlineData("WITHOUT_SDKS", EvaluationAnalysisScope.ProjectWithImportsWithoutSdks)]
-    [InlineData("all", EvaluationAnalysisScope.ProjectWithAllImports)]
-    [InlineData("ALL", EvaluationAnalysisScope.ProjectWithAllImports)]
-    public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string parameter, EvaluationAnalysisScope? expected)
+    [InlineData("project", EvaluationCheckScope.ProjectOnly)]
+    [InlineData("PROJECT", EvaluationCheckScope.ProjectOnly)]
+    [InlineData("current_imports", EvaluationCheckScope.ProjectWithImportsFromCurrentWorkTree)]
+    [InlineData("CURRENT_IMPORTS", EvaluationCheckScope.ProjectWithImportsFromCurrentWorkTree)]
+    [InlineData("without_sdks", EvaluationCheckScope.ProjectWithImportsWithoutSdks)]
+    [InlineData("WITHOUT_SDKS", EvaluationCheckScope.ProjectWithImportsWithoutSdks)]
+    [InlineData("all", EvaluationCheckScope.ProjectWithAllImports)]
+    [InlineData("ALL", EvaluationCheckScope.ProjectWithAllImports)]
+    public void CreateBuildExecutionCheckConfiguration_EvaluationCheckScope(string parameter, EvaluationCheckScope? expected)
     {
         var config = new Dictionary<string, string>()
         {
             { "scope" , parameter },
         };
 
-        var buildConfig = BuildAnalyzerConfiguration.Create(config);
+        var buildConfig = BuildExecutionCheckConfiguration.Create(config);
 
         buildConfig.ShouldNotBeNull();
-        buildConfig.EvaluationAnalysisScope.ShouldBe(expected);
+        buildConfig.EvaluationCheckScope.ShouldBe(expected);
 
         buildConfig.IsEnabled.ShouldBeNull();
         buildConfig.Severity.ShouldBeNull();
@@ -102,7 +102,7 @@ public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string para
     [Theory]
     [InlineData("scope", "incorrec-value")]
     [InlineData("severity", "incorrec-value")]
-    public void CreateBuildAnalyzerConfiguration_ExceptionOnInvalidInputValue(string key, string value)
+    public void CreateBuildExecutionCheckConfiguration_ExceptionOnInvalidInputValue(string key, string value)
     {
         var config = new Dictionary<string, string>()
         {
@@ -111,7 +111,7 @@ public void CreateBuildAnalyzerConfiguration_ExceptionOnInvalidInputValue(string
 
         var exception = Should.Throw<BuildCheckConfigurationException>(() =>
         {
-            BuildAnalyzerConfiguration.Create(config);
+            BuildExecutionCheckConfiguration.Create(config);
         });
         exception.Message.ShouldContain($"Incorrect value provided in config for key {key}");
     }
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index 03644b9104b..d5dd8341b6a 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -35,18 +35,18 @@ public BuildCheckManagerTests(ITestOutputHelper output)
     [Theory]
     [InlineData(true, new[] { "Custom analyzer rule: 'Rule1' has been registered successfully.", "Custom analyzer rule: 'Rule2' has been registered successfully." })]
     [InlineData(false, new[] { "Failed to register the custom analyzer: 'DummyPath'." })]
-    public void ProcessAnalyzerAcquisitionTest(bool isAnalyzerRuleExist, string[] expectedMessages)
+    public void ProcessCheckAcquisitionTest(bool isCheckRuleExist, string[] expectedMessages)
     {
-        MockBuildCheckAcquisition(isAnalyzerRuleExist);
+        MockBuildCheckAcquisition(isCheckRuleExist);
         MockEnabledDataSourcesDefinition();
 
-        _testedInstance.ProcessAnalyzerAcquisition(new AnalyzerAcquisitionData("DummyPath"), new AnalysisLoggingContext(_loggingService, new BuildEventContext(1, 2, 3, 4, 5, 6, 7)));
+        _testedInstance.ProcessCheckAcquisition(new CheckAcquisitionData("DummyPath"), new CheckLoggingContext(_loggingService, new BuildEventContext(1, 2, 3, 4, 5, 6, 7)));
 
         _logger.AllBuildEvents.Where(be => be.GetType() == typeof(BuildMessageEventArgs)).Select(be => be.Message).ToArray()
             .ShouldBeEquivalentTo(expectedMessages);
     }
 
-    private void MockBuildCheckAcquisition(bool isAnalyzerRuleExist) => MockField("_acquisitionModule", new BuildCheckAcquisitionModuleMock(isAnalyzerRuleExist));
+    private void MockBuildCheckAcquisition(bool isCheckRuleExist) => MockField("_acquisitionModule", new BuildCheckAcquisitionModuleMock(isCheckRuleExist));
 
     private void MockEnabledDataSourcesDefinition() => MockField("_enabledDataSources", new[] { true, true });
 
@@ -62,33 +62,33 @@ private void MockField(string fieldName, object mockedValue)
 
 internal sealed class BuildCheckAcquisitionModuleMock : IBuildCheckAcquisitionModule
 {
-    private readonly bool _isAnalyzerRuleExistForTest = true;
+    private readonly bool _isCheckRuleExistForTest = true;
 
-    internal BuildCheckAcquisitionModuleMock(bool isAnalyzerRuleExistForTest) => _isAnalyzerRuleExistForTest = isAnalyzerRuleExistForTest;
+    internal BuildCheckAcquisitionModuleMock(bool isCheckRuleExistForTest) => _isCheckRuleExistForTest = isCheckRuleExistForTest;
 
-    public List<BuildExecutionCheckFactory> CreateBuildAnalyzerFactories(CheckAcquisitionData analyzerAcquisitionData, ICheckContext analysisContext)
-        => _isAnalyzerRuleExistForTest
-        ? new List<BuildExecutionCheckFactory>() { () => new BuildAnalyzerRuleMock("Rule1"), () => new BuildAnalyzerRuleMock("Rule2") }
+    public List<BuildExecutionCheckFactory> CreateBuildExecutionCheckFactories(CheckAcquisitionData checkAcquisitionData, ICheckContext checkContext)
+        => _isCheckRuleExistForTest
+        ? new List<BuildExecutionCheckFactory>() { () => new BuildExecutionCheckRuleMock("Rule1"), () => new BuildExecutionCheckRuleMock("Rule2") }
         : new List<BuildExecutionCheckFactory>();
 }
 
-internal sealed class BuildAnalyzerRuleMock : BuildAnalyzer
+internal sealed class BuildExecutionCheckRuleMock : BuildExecutionCheck
 {
-    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
+    public static BuildExecutionCheckRule SupportedRule = new BuildExecutionCheckRule(
         "X01234",
         "Title",
         "Description",
         "Message format: {0}",
-        new BuildAnalyzerConfiguration());
+        new BuildExecutionCheckConfiguration());
 
-    internal BuildAnalyzerRuleMock(string friendlyName)
+    internal BuildExecutionCheckRuleMock(string friendlyName)
     {
         FriendlyName = friendlyName;
     }
 
     public override string FriendlyName { get; }
 
-    public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = new List<BuildAnalyzerRule>() { SupportedRule };
+    public override IReadOnlyList<BuildExecutionCheckRule> SupportedRules { get; } = new List<BuildExecutionCheckRule>() { SupportedRule };
 
     public override void Initialize(ConfigurationContext configurationContext)
     {
diff --git a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
index 32f8554bc75..7708dfe3ca1 100644
--- a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
@@ -117,8 +117,8 @@ public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
         buildConfig.ShouldNotBeNull();
 
         buildConfig.IsEnabled.ShouldBe(true);
-        buildConfig.Severity.ShouldBe(BuildAnalyzerResultSeverity.Error);
-        buildConfig.EvaluationAnalysisScope.ShouldBe(EvaluationAnalysisScope.ProjectOnly);
+        buildConfig.Severity.ShouldBe(BuildExecutionCheckResultSeverity.Error);
+        buildConfig.EvaluationCheckScope.ShouldBe(EvaluationCheckScope.ProjectOnly);
     }
 
     [Fact]
@@ -216,27 +216,27 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
     }
 
     [Theory]
-    [InlineData(BuildAnalyzerResultSeverity.Warning, BuildAnalyzerResultSeverity.Warning, true)]
-    [InlineData(BuildAnalyzerResultSeverity.Error, BuildAnalyzerResultSeverity.Error, true)]
-    [InlineData(BuildAnalyzerResultSeverity.Default, BuildAnalyzerResultSeverity.Warning, true)]
-    [InlineData(BuildAnalyzerResultSeverity.Suggestion, BuildAnalyzerResultSeverity.Suggestion, true)]
-    [InlineData(BuildAnalyzerResultSeverity.None, BuildAnalyzerResultSeverity.None, false)]
-    [InlineData(null, BuildAnalyzerResultSeverity.Warning, true)]
-    public void GetConfigurationProvider_MergesSeverity_Correctly(BuildAnalyzerResultSeverity? buildAnalyzerResultSeverity, BuildAnalyzerResultSeverity expectedSeverity, bool expectedEnablment)
+    [InlineData(BuildExecutionCheckResultSeverity.Warning, BuildExecutionCheckResultSeverity.Warning, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.Error, BuildExecutionCheckResultSeverity.Error, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.Default, BuildExecutionCheckResultSeverity.Warning, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.Suggestion, BuildExecutionCheckResultSeverity.Suggestion, true)]
+    [InlineData(BuildExecutionCheckResultSeverity.None, BuildExecutionCheckResultSeverity.None, false)]
+    [InlineData(null, BuildExecutionCheckResultSeverity.Warning, true)]
+    public void GetConfigurationProvider_MergesSeverity_Correctly(BuildExecutionCheckResultSeverity? buildExecutionCheckResultSeverity, BuildExecutionCheckResultSeverity expectedSeverity, bool expectedEnablment)
     {
         var configurationProvider = new ConfigurationProvider();
-        BuildAnalyzerConfiguration buildAnalyzerConfiguration = new BuildAnalyzerConfiguration()
+        BuildExecutionCheckConfiguration buildExecutionCheckConfiguration = new BuildExecutionCheckConfiguration()
         {
-            Severity = buildAnalyzerResultSeverity
+            Severity = buildExecutionCheckResultSeverity
         };
 
-        BuildAnalyzerConfiguration defaultValue = new BuildAnalyzerConfiguration()
+        BuildExecutionCheckConfiguration defaultValue = new BuildExecutionCheckConfiguration()
         {
-            Severity = BuildAnalyzerResultSeverity.Warning
+            Severity = BuildExecutionCheckResultSeverity.Warning
         };
 
-        var internalBuildAnalyzer = configurationProvider.MergeConfiguration("ruleId", defaultValue, buildAnalyzerConfiguration);
-        internalBuildAnalyzer.Severity.ShouldBe(expectedSeverity);
-        internalBuildAnalyzer.IsEnabled.ShouldBe(expectedEnablment);
+        var internalBuildExecutionCheck = configurationProvider.MergeConfiguration("ruleId", defaultValue, buildExecutionCheckConfiguration);
+        internalBuildExecutionCheck.Severity.ShouldBe(expectedSeverity);
+        internalBuildExecutionCheck.IsEnabled.ShouldBe(expectedEnablment);
     }
 }
diff --git a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
index 5642ee5bd36..43fffc8e289 100644
--- a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
+++ b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
@@ -13,25 +13,25 @@
 
 namespace Microsoft.Build.BuildCheck.UnitTests
 {
-    public sealed class DoubleWritesAnalyzer_Tests
+    public sealed class DoubleWritesCheck_Tests
     {
         private sealed class MockBuildCheckRegistrationContext : IBuildCheckRegistrationContext
         {
-            private event Action<BuildCheckDataContext<TaskInvocationAnalysisData>>? _taskInvocationAction;
+            private event Action<BuildCheckDataContext<TaskInvocationCheckData>>? _taskInvocationAction;
 
             public List<BuildCheckResult> Results { get; } = new();
 
             public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction) => throw new NotImplementedException();
-            public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction) => throw new NotImplementedException();
+            public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsCheckData>> parsedItemsAction) => throw new NotImplementedException();
 
-            public void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationAnalysisData>> taskInvocationAction)
+            public void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationCheckData>> taskInvocationAction)
                 => _taskInvocationAction += taskInvocationAction;
 
-            public void TriggerTaskInvocationAction(TaskInvocationAnalysisData data)
+            public void TriggerTaskInvocationAction(TaskInvocationCheckData data)
             {
                 if (_taskInvocationAction is not null)
                 {
-                    BuildCheckDataContext<TaskInvocationAnalysisData> context = new BuildCheckDataContext<TaskInvocationAnalysisData>(
+                    BuildCheckDataContext<TaskInvocationCheckData> context = new BuildCheckDataContext<TaskInvocationCheckData>(
                         null!,
                         null!,
                         null!,
@@ -41,25 +41,25 @@ public void TriggerTaskInvocationAction(TaskInvocationAnalysisData data)
                 }
             }
 
-            private void ResultHandler(BuildAnalyzerWrapper wrapper, ICheckContext context, BuildAnalyzerConfigurationEffective[] configs, BuildCheckResult result)
+            private void ResultHandler(BuildExecutionCheckWrapper wrapper, ICheckContext context, BuildExecutionCheckConfigurationEffective[] configs, BuildCheckResult result)
                 => Results.Add(result);
         }
 
-        private readonly DoubleWritesAnalyzer _analyzer;
+        private readonly DoubleWritesCheck _check;
 
         private readonly MockBuildCheckRegistrationContext _registrationContext;
 
-        public DoubleWritesAnalyzer_Tests()
+        public DoubleWritesCheck_Tests()
         {
-            _analyzer = new DoubleWritesAnalyzer();
+            _check = new DoubleWritesCheck();
             _registrationContext = new MockBuildCheckRegistrationContext();
-            _analyzer.RegisterActions(_registrationContext);
+            _check.RegisterActions(_registrationContext);
         }
 
-        private TaskInvocationAnalysisData MakeTaskInvocationData(string taskName, Dictionary<string, TaskInvocationAnalysisData.TaskParameter> parameters)
+        private TaskInvocationCheckData MakeTaskInvocationData(string taskName, Dictionary<string, TaskInvocationCheckData.TaskParameter> parameters)
         {
             string projectFile = NativeMethodsShared.IsWindows ? @"C:\fake\project.proj" : "/fake/project.proj";
-            return new TaskInvocationAnalysisData(
+            return new TaskInvocationCheckData(
                 projectFile,
                 null,
                 Construction.ElementLocation.EmptyLocation,
@@ -71,19 +71,19 @@ private TaskInvocationAnalysisData MakeTaskInvocationData(string taskName, Dicti
         [Fact]
         public void TestCopyTask()
         {
-            _registrationContext.TriggerTaskInvocationAction(MakeTaskInvocationData("Copy", new Dictionary<string, TaskInvocationAnalysisData.TaskParameter>
+            _registrationContext.TriggerTaskInvocationAction(MakeTaskInvocationData("Copy", new Dictionary<string, TaskInvocationCheckData.TaskParameter>
                 {
-                    { "SourceFiles", new TaskInvocationAnalysisData.TaskParameter("source1", IsOutput: false) },
-                    { "DestinationFolder", new TaskInvocationAnalysisData.TaskParameter("outdir", IsOutput: false) },
+                    { "SourceFiles", new TaskInvocationCheckData.TaskParameter("source1", IsOutput: false) },
+                    { "DestinationFolder", new TaskInvocationCheckData.TaskParameter("outdir", IsOutput: false) },
                 }));
-            _registrationContext.TriggerTaskInvocationAction(MakeTaskInvocationData("Copy", new Dictionary<string, TaskInvocationAnalysisData.TaskParameter>
+            _registrationContext.TriggerTaskInvocationAction(MakeTaskInvocationData("Copy", new Dictionary<string, TaskInvocationCheckData.TaskParameter>
                 {
-                    { "SourceFiles", new TaskInvocationAnalysisData.TaskParameter("source1", IsOutput: false) },
-                    { "DestinationFiles", new TaskInvocationAnalysisData.TaskParameter(Path.Combine("outdir", "source1"), IsOutput: false) },
+                    { "SourceFiles", new TaskInvocationCheckData.TaskParameter("source1", IsOutput: false) },
+                    { "DestinationFiles", new TaskInvocationCheckData.TaskParameter(Path.Combine("outdir", "source1"), IsOutput: false) },
                 }));
 
             _registrationContext.Results.Count.ShouldBe(1);
-            _registrationContext.Results[0].BuildAnalyzerRule.Id.ShouldBe("BC0102");
+            _registrationContext.Results[0].BuildExecutionCheckRule.Id.ShouldBe("BC0102");
         }
 
         [Theory]
@@ -94,17 +94,17 @@ public void TestCompilerTask(string taskName)
         {
             for (int i = 0; i < 2; i++)
             {
-                _registrationContext.TriggerTaskInvocationAction(MakeTaskInvocationData(taskName, new Dictionary<string, TaskInvocationAnalysisData.TaskParameter>
+                _registrationContext.TriggerTaskInvocationAction(MakeTaskInvocationData(taskName, new Dictionary<string, TaskInvocationCheckData.TaskParameter>
                     {
-                        { "OutputAssembly", new TaskInvocationAnalysisData.TaskParameter("out.dll", IsOutput: false) },
-                        { "OutputRefAssembly", new TaskInvocationAnalysisData.TaskParameter("out_ref.dll", IsOutput: false) },
-                        { "DocumentationFile", new TaskInvocationAnalysisData.TaskParameter("out.xml", IsOutput: false) },
-                        { "PdbFile", new TaskInvocationAnalysisData.TaskParameter("out.pdb", IsOutput: false) },
+                        { "OutputAssembly", new TaskInvocationCheckData.TaskParameter("out.dll", IsOutput: false) },
+                        { "OutputRefAssembly", new TaskInvocationCheckData.TaskParameter("out_ref.dll", IsOutput: false) },
+                        { "DocumentationFile", new TaskInvocationCheckData.TaskParameter("out.xml", IsOutput: false) },
+                        { "PdbFile", new TaskInvocationCheckData.TaskParameter("out.pdb", IsOutput: false) },
                     }));
             }
 
             _registrationContext.Results.Count.ShouldBe(4);
-            _registrationContext.Results.ForEach(result => result.BuildAnalyzerRule.Id.ShouldBe("BC0102"));
+            _registrationContext.Results.ForEach(result => result.BuildExecutionCheckRule.Id.ShouldBe("BC0102"));
         }
     }
 }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index c8c14113148..5691d0f2ae8 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -35,19 +35,19 @@ public EndToEndTests(ITestOutputHelper output)
     [InlineData(true, true)]
     [InlineData(false, true)]
     [InlineData(false, false)]
-    public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProcessNode, bool analysisRequested)
+    public void SampleCheckIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProcessNode, bool checkRequested)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile);
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
             $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore" +
-            (analysisRequested ? " -analyze" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
+            (checkRequested ? " -analyze" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
         _env.Output.WriteLine(output);
 
         success.ShouldBeTrue();
 
         // The analyzer warnings should appear - but only if analysis was requested.
-        if (analysisRequested)
+        if (checkRequested)
         {
             output.ShouldContain("BC0101");
             output.ShouldContain("BC0102");
@@ -69,7 +69,7 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces
     [InlineData(false, true, "error")]
     [InlineData(false, true, "suggestion")]
     [InlineData(false, false, "warning")]
-    public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool buildInOutOfProcessNode, bool analysisRequested, string BC0101Severity)
+    public void SampleCheckIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool buildInOutOfProcessNode, bool checkRequested, string BC0101Severity)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile, BC0101Severity);
 
@@ -77,7 +77,7 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu
         string logFile = _env.ExpectFile(".binlog").Path;
 
         _ = RunnerUtilities.ExecBootstrapedMSBuild(
-            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore {(analysisRequested ? "-analyze" : string.Empty)} -bl:{logFile}",
+            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore {(checkRequested ? "-analyze" : string.Empty)} -bl:{logFile}",
             out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
 
         success.ShouldBeTrue();
@@ -91,7 +91,7 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu
         success.ShouldBeTrue();
 
         // The conflicting outputs warning appears - but only if analysis was requested
-        if (analysisRequested)
+        if (checkRequested)
         {
             output.ShouldContain("BC0101");
             output.ShouldContain("BC0102");
@@ -136,7 +136,7 @@ public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string
     [InlineData(true, true)]
     [InlineData(false, true)]
     [InlineData(false, false)]
-    public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInOutOfProcessNode, bool analysisRequested)
+    public void SampleCheckIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInOutOfProcessNode, bool checkRequested)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile);
 
@@ -150,7 +150,7 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO
         success.ShouldBeTrue();
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
-         $"{logFile} -flp:logfile={Path.Combine(projectDirectory!, "logFile.log")};verbosity=diagnostic {(analysisRequested ? "-analyze" : string.Empty)}",
+         $"{logFile} -flp:logfile={Path.Combine(projectDirectory!, "logFile.log")};verbosity=diagnostic {(checkRequested ? "-analyze" : string.Empty)}",
          out success, false, _env.Output, timeoutMilliseconds: 120_000);
 
         _env.Output.WriteLine(output);
@@ -158,7 +158,7 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO
         success.ShouldBeTrue();
 
         // The conflicting outputs warning appears - but only if analysis was requested
-        if (analysisRequested)
+        if (checkRequested)
         {
             output.ShouldContain("BC0101");
             output.ShouldContain("BC0102");
@@ -175,33 +175,33 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO
     [Theory]
     [InlineData("AnalysisCandidate", new[] { "CustomRule1", "CustomRule2" })]
     [InlineData("AnalysisCandidateWithMultipleAnalyzersInjected", new[] { "CustomRule1", "CustomRule2", "CustomRule3" }, true)]
-    public void CustomAnalyzerTest(string analysisCandidate, string[] expectedRegisteredRules, bool expectedRejectedAnalyzers = false)
+    public void CustomCheckTest(string checkCandidate, string[] expectedRegisteredRules, bool expectedRejectedChecks = false)
     {
         using (var env = TestEnvironment.Create())
         {
-            var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);
-            AddCustomDataSourceToNugetConfig(analysisCandidatePath);
+            var checkCandidatePath = Path.Combine(TestAssetsRootPath, checkCandidate);
+            AddCustomDataSourceToNugetConfig(checkCandidatePath);
 
-            string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:n",
+            string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:n",
                 out bool successBuild);
-            successBuild.ShouldBeTrue(projectAnalysisBuildLog);
+            successBuild.ShouldBeTrue(projectCheckBuildLog);
 
             foreach (string registeredRule in expectedRegisteredRules)
             {
-                projectAnalysisBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CustomAnalyzerSuccessfulAcquisition", registeredRule));
+                projectCheckBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CustomAnalyzerSuccessfulAcquisition", registeredRule));
             }
 
-            if (expectedRejectedAnalyzers)
+            if (expectedRejectedChecks)
             {
-                projectAnalysisBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CustomAnalyzerBaseTypeNotAssignable", "InvalidAnalyzer", "InvalidCustomAnalyzer, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
+                projectCheckBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CustomAnalyzerBaseTypeNotAssignable", "InvalidAnalyzer", "InvalidCustomAnalyzer, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
             }
         }
     }
 
-    private void AddCustomDataSourceToNugetConfig(string analysisCandidatePath)
+    private void AddCustomDataSourceToNugetConfig(string checkCandidatePath)
     {
-        var nugetTemplatePath = Path.Combine(analysisCandidatePath, "nugetTemplate.config");
+        var nugetTemplatePath = Path.Combine(checkCandidatePath, "nugetTemplate.config");
 
         var doc = new XmlDocument();
         doc.LoadXml(File.ReadAllText(nugetTemplatePath));
@@ -210,10 +210,10 @@ private void AddCustomDataSourceToNugetConfig(string analysisCandidatePath)
             XmlNode? packageSourcesNode = doc.SelectSingleNode("//packageSources");
 
             // The test packages are generated during the test project build and saved in CustomAnalyzers folder.
-            string analyzersPackagesPath = Path.Combine(Directory.GetParent(AssemblyLocation)?.Parent?.FullName ?? string.Empty, "CustomAnalyzers");
-            AddPackageSource(doc, packageSourcesNode, "Key", analyzersPackagesPath);
+            string checksPackagesPath = Path.Combine(Directory.GetParent(AssemblyLocation)?.Parent?.FullName ?? string.Empty, "CustomAnalyzers");
+            AddPackageSource(doc, packageSourcesNode, "Key", checksPackagesPath);
 
-            doc.Save(Path.Combine(analysisCandidatePath, "nuget.config"));
+            doc.Save(Path.Combine(checkCandidatePath, "nuget.config"));
         }
     }
 
diff --git a/src/BuildCheck.UnitTests/ParsedItemsAnalysisDataTests.cs b/src/BuildCheck.UnitTests/ParsedItemsAnalysisDataTests.cs
index 7734c19f311..f9f5612c0bb 100644
--- a/src/BuildCheck.UnitTests/ParsedItemsAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/ParsedItemsAnalysisDataTests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.BuildCheck.UnitTests;
 
-public class ParsedItemsAnalysisDataTests
+public class ParsedItemsCheckDataTests
 {
     [Fact]
     public void ItemsHolder_GetItemsOfType_ShouldFilterProperly()
diff --git a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
index 99d52c7f9f1..5926cdd6d83 100644
--- a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
@@ -17,18 +17,18 @@
 
 namespace Microsoft.Build.BuildCheck.UnitTests
 {
-    public class TaskInvocationAnalysisDataTests : IDisposable
+    public class TaskInvocationCheckDataTests : IDisposable
     {
-        internal sealed class TestAnalyzer : BuildAnalyzer
+        internal sealed class TestCheck : BuildExecutionCheck
         {
-            #region BuildAnalyzer initialization
+            #region BuildExecutionCheck initialization
 
-            public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0000", "TestRule", "TestDescription", "TestMessage",
-                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
+            public static BuildExecutionCheckRule SupportedRule = new BuildExecutionCheckRule("BC0000", "TestRule", "TestDescription", "TestMessage",
+                new BuildExecutionCheckConfiguration() { Severity = BuildExecutionCheckResultSeverity.Warning });
 
             public override string FriendlyName => "MSBuild.TestAnalyzer";
 
-            public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];
+            public override IReadOnlyList<BuildExecutionCheckRule> SupportedRules { get; } = [SupportedRule];
 
             public override void Initialize(ConfigurationContext configurationContext)
             { }
@@ -43,29 +43,29 @@ public override void RegisterActions(IBuildCheckRegistrationContext registration
             /// <summary>
             /// Stores all TaskInvocationAnalysisData reported during the build.
             /// </summary>
-            public List<TaskInvocationAnalysisData> AnalysisData = new();
+            public List<TaskInvocationCheckData> CheckData = new();
 
-            private void TaskInvocationAction(BuildCheckDataContext<TaskInvocationAnalysisData> context)
+            private void TaskInvocationAction(BuildCheckDataContext<TaskInvocationCheckData> context)
             {
-                AnalysisData.Add(context.Data);
+                CheckData.Add(context.Data);
             }
         }
 
-        private static TestAnalyzer? s_testAnalyzer;
+        private static TestCheck? s_testCheck;
 
-        public TaskInvocationAnalysisDataTests()
+        public TaskInvocationCheckDataTests()
         {
             BuildCheckManager.s_testFactoriesPerDataSource =
             [
                 // BuildCheckDataSource.EventArgs
                 [
-                    ([TestAnalyzer.SupportedRule.Id], true, () => (s_testAnalyzer = new TestAnalyzer())),
+                    ([TestCheck.SupportedRule.Id], true, () => (s_testCheck = new TestCheck())),
                 ],
                 // BuildCheckDataSource.Execution
                 [],
             ];
 
-            s_testAnalyzer?.AnalysisData.Clear();
+            s_testCheck?.CheckData.Clear();
         }
 
         public void Dispose()
@@ -94,7 +94,7 @@ private void BuildProject(string taskInvocation)
                     result.OverallResult.ShouldBe(BuildResultCode.Success);
                 }
 
-                foreach (var data in s_testAnalyzer!.AnalysisData)
+                foreach (var data in s_testCheck!.CheckData)
                 {
                     data.ProjectFilePath.ShouldBe(testProject.ProjectFile);
                     data.TaskInvocationLocation.Line.ShouldBeGreaterThan(0);
@@ -108,8 +108,8 @@ public void ReportsSimpleTaskParameters()
         {
             BuildProject("<Message Text='Hello'/>");
 
-            s_testAnalyzer!.AnalysisData.Count.ShouldBe(1);
-            var data = s_testAnalyzer.AnalysisData[0];
+            s_testCheck!.CheckData.Count.ShouldBe(1);
+            var data = s_testCheck.CheckData[0];
             data.TaskName.ShouldBe("Message");
             data.Parameters.Count.ShouldBe(1);
             data.Parameters["Text"].IsOutput.ShouldBe(false);
@@ -130,8 +130,8 @@ public void ReportsComplexTaskParameters(string outputElement)
                 </CombinePath>
             """);
 
-            s_testAnalyzer!.AnalysisData.Count.ShouldBe(1);
-            var data = s_testAnalyzer.AnalysisData[0];
+            s_testCheck!.CheckData.Count.ShouldBe(1);
+            var data = s_testCheck.CheckData[0];
             data.TaskName.ShouldBe("CombinePath");
             data.Parameters.Count.ShouldBe(3);
 
@@ -174,8 +174,8 @@ public void TaskParameterEnumeratesValues()
             parameter5.EnumerateValues().SequenceEqual(array2).ShouldBeTrue();
             parameter5.EnumerateStringValues().SequenceEqual(["item1", "item2"]).ShouldBeTrue();
 
-            static TaskInvocationAnalysisData.TaskParameter MakeParameter(object value)
-                => new TaskInvocationAnalysisData.TaskParameter(value, IsOutput: false);
+            static TaskInvocationCheckData.TaskParameter MakeParameter(object value)
+                => new TaskInvocationCheckData.TaskParameter(value, IsOutput: false);
         }
     }
 }
