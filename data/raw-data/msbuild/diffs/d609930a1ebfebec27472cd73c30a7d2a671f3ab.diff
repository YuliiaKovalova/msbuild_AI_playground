diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 52c383a42ef..1eb0fdbf8fa 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1719,7 +1719,7 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                         HandleNewRequest(Scheduler.VirtualNode, blocker);
                     }
                 }
-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex) && !ExceptionHandling.NotExpectedException(ex) && ex is not BuildAbortedException)
+                catch (Exception ex) when (IsInvalidProjectOrIORelatedException(ex))
                 {
                     if (ex is InvalidProjectFileException projectException)
                     {
@@ -1759,6 +1759,11 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
             }
         }
 
+        private bool IsInvalidProjectOrIORelatedException(Exception e)
+        {
+            return !ExceptionHandling.IsCriticalException(e) && !ExceptionHandling.NotExpectedException(e) && e is not BuildAbortedException;
+        }
+
         private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
         {
             try
@@ -1842,7 +1847,7 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                         submission.SubmissionId,
                         new ReadOnlyDictionary<ProjectGraphNode, BuildResult>(resultsPerNode ?? new Dictionary<ProjectGraphNode, BuildResult>())));
             }
-            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex) && !ExceptionHandling.NotExpectedException(ex) && ex is not BuildAbortedException)
+            catch (Exception ex) when (IsInvalidProjectOrIORelatedException(ex))
             {
                 GraphBuildResult result = null;
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index cd4c6484499..f76ca291bc3 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -288,7 +288,7 @@ public void WaitForCancelCompletion()
                 {
                     taskCleanedUp = _requestTask.Wait(BuildParameters.RequestBuilderShutdownTimeout);
                 }
-                catch (AggregateException e) when (e.Flatten().InnerExceptions.All(ex => ex is TaskCanceledException || ex is OperationCanceledException))
+                catch (AggregateException e) when (InnerExceptionsAreAllCancelledExceptions(e))
                 {
                     // ignore -- just indicates that the task finished cancelling before we got a chance to wait on it.  
                     taskCleanedUp = true;
@@ -305,6 +305,11 @@ public void WaitForCancelCompletion()
             _isZombie = true;
         }
 
+        private bool InnerExceptionsAreAllCancelledExceptions(AggregateException e)
+        {
+            return e.Flatten().InnerExceptions.All(ex => ex is TaskCanceledException || ex is OperationCanceledException);
+        }
+
         #region IRequestBuilderCallback Members
 
         /// <summary>
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 898af205847..3c46ce9f165 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -2527,7 +2527,7 @@ private string[] GetFilesImplementation(
                     taskOptions);
             }
             // Catch exceptions that are thrown inside the Parallel.ForEach
-            catch (AggregateException ex) when (ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException))
+            catch (AggregateException ex) when (InnerExceptionsAreAllIoRelated(ex))
             {
                 return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
             }
@@ -2547,6 +2547,11 @@ private string[] GetFilesImplementation(
             return files;
         }
 
+        private bool InnerExceptionsAreAllIoRelated(AggregateException ex)
+        {
+            return ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException);
+        }
+
         private static bool IsSubdirectoryOf(string possibleChild, string possibleParent)
         {
             if (possibleParent == string.Empty)
