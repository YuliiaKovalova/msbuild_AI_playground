diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 6097aa313b8..09a213fcf38 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -911,23 +911,39 @@ private void AssignUnscheduledRequestsWithPlanByMostImmediateReferences(List<Sch
         {
             foreach (int idleNodeId in idleNodes)
             {
-                Dictionary<int, SchedulableRequest> configsWhichCanBeScheduledToThisNode = new Dictionary<int, SchedulableRequest>();
+                SchedulingPlan.PlanConfigData bestConfig = null;
+                SchedulableRequest bestRequest = null;
 
                 // Find the most expensive request in the plan to schedule from among the ones available.
                 foreach (SchedulableRequest request in _schedulingData.UnscheduledRequestsWhichCanBeScheduled)
                 {
                     if (CanScheduleRequestToNode(request, idleNodeId))
                     {
-                        configsWhichCanBeScheduledToThisNode[request.BuildRequest.ConfigurationId] = request;
+
+                        SchedulingPlan.PlanConfigData configToConsider = _schedulingPlan.GetConfiguration(request.BuildRequest.ConfigurationId);
+                        if (configToConsider is null)
+                        {
+                            // By default we assume configs we don't know about aren't as important, and will only schedule them
+                            // if nothing else is suitable
+                            if (bestRequest is null)
+                            {
+                                bestRequest = request;
+                            }
+                        }
+                        else
+                        {
+                            if (bestConfig == null || bestConfig.ReferencesCount < configToConsider.ReferencesCount)
+                            {
+                                bestConfig = configToConsider;
+                                bestRequest = request;
+                            }
+                        }
                     }
                 }
 
-                if (configsWhichCanBeScheduledToThisNode.Count > 0)
+                if (bestRequest is not null)
                 {
-                    int configToSchedule = _schedulingPlan.GetConfigWithGreatestNumberOfReferences(configsWhichCanBeScheduledToThisNode.Keys);
-
-                    ErrorUtilities.VerifyThrow(configToSchedule != BuildRequestConfiguration.InvalidConfigurationId, "No configuration returned even though there are some available.");
-                    AssignUnscheduledRequestToNode(configsWhichCanBeScheduledToThisNode[configToSchedule], idleNodeId, responses);
+                    AssignUnscheduledRequestToNode(bestRequest, idleNodeId, responses);
                 }
             }
         }
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
index 5e8f989a81d..ee879f20ca7 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
@@ -199,16 +199,6 @@ public int GetConfigIdForPath(string configPath)
             return config.ConfigId;
         }
 
-        /// <summary>
-        /// Given a list of configuration IDs, returns the id of the config with the greatest number of immediate references.
-        /// </summary>
-        /// <param name="configsToSchedule">The set of configurations to consider.</param>
-        /// <returns>The id of the configuration with the most immediate references.</returns>
-        public int GetConfigWithGreatestNumberOfReferences(IEnumerable<int> configsToSchedule)
-        {
-            return GetConfigWithComparison(configsToSchedule, delegate (PlanConfigData left, PlanConfigData right) { return Comparer<int>.Default.Compare(left.ReferencesCount, right.ReferencesCount); });
-        }
-
         /// <summary>
         /// Gets the name of the plan file for a specified submission.
         /// </summary>
@@ -222,39 +212,6 @@ private string GetPlanName(SchedulableRequest rootRequest)
             return _configCache[rootRequest.BuildRequest.ConfigurationId].ProjectFullPath + ".buildplan";
         }
 
-        /// <summary>
-        /// Returns the config id with the greatest value according to the comparer.
-        /// </summary>
-        private int GetConfigWithComparison(IEnumerable<int> realConfigsToSchedule, Comparison<PlanConfigData> comparer)
-        {
-            PlanConfigData bestConfig = null;
-            int bestRealConfigId = BuildRequestConfiguration.InvalidConfigurationId;
-
-            foreach (int realConfigId in realConfigsToSchedule)
-            {
-                PlanConfigData configToConsider;
-                if (!_configPathToData.TryGetValue(_configCache[realConfigId].ProjectFullPath, out configToConsider))
-                {
-                    // By default we assume configs we don't know about aren't as important, and will only schedule them
-                    // if nothing else is suitable
-                    if (bestRealConfigId == BuildRequestConfiguration.InvalidConfigurationId)
-                    {
-                        bestRealConfigId = realConfigId;
-                    }
-
-                    continue;
-                }
-
-                if (bestConfig == null || (comparer(bestConfig, configToConsider) < 0))
-                {
-                    bestConfig = configToConsider;
-                    bestRealConfigId = realConfigId;
-                }
-            }
-
-            return bestRealConfigId;
-        }
-
         /// <summary>
         /// Analyzes the plan data which has been read.
         /// </summary>
