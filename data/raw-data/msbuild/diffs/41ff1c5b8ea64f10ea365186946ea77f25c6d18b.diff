diff --git a/documentation/specs/proposed/BuildCheck-feature-threat-model.md b/documentation/specs/proposed/BuildCheck-feature-threat-model.md
index 2a0f91d11f6..feeb937433a 100644
--- a/documentation/specs/proposed/BuildCheck-feature-threat-model.md
+++ b/documentation/specs/proposed/BuildCheck-feature-threat-model.md
@@ -30,9 +30,10 @@ Custom BuildCheck analyzers are executed during build. If bad external actors in
 
 #### Mitigation
 
-Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.
+Detecting unsecure packages is not MSBuild responsibility and is currently out of scope of this feature.
 
-It is identical to Roslyn analyzers or any other nuget package, for that matter.
+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element.
+Users is expected to implement process to detect and warn about known malicious custom analyzers.
 
 ## Execution
 
@@ -42,14 +43,14 @@ Custom BuildCheck analyzers are executed during build. If bad external actors in
 
 #### Mitigation
 
-Identical to mitigation of threat [Supply chain attack on custom analyzer](#threat-supply-chain-attack-on-custom-analyzer).
+Detecting unsecure packages is not MSBuild responsibility and is currently out of scope of this feature.
 
 ### Threat: Third-Party Vulnerabilities
 Vulnerabilities in custom analyzer or its dependencies.
 
 #### Mitigation
 
-Custom analyzers are delivered as regular NuGet packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.
+Detecting unsecure packages is not MSBuild responsibility and is currently out of scope of this feature.
 
 ## Configuration
 
@@ -70,9 +71,7 @@ Malicious actors can define analyzer ID to be identical or like existing well kn
 
 #### Mitigation
 
-Main mitigation relays on nuget packages component governance.
-
-BuildCheck also disallow duplicated analyzer IDs and do not allow well known prefixes, for example `microsoft-\*`, in custom analyzers.
+Detecting unsecure packages is not MSBuild responsibility and is currently out of scope of this feature.
 
 ## Declaration
 
@@ -83,5 +82,3 @@ Threat actor can write malicious analyzer registration property function in proj
 #### Mitigation
 
 This threat is out of scope of this document, as this requires malicious modification of source code (repository) making these sources untrusted.
-
-It is mentioned here, as a note that we have thought about it.
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 88c1f58e83b..a54a3a0e0f8 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -113,7 +113,7 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana
         _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "1");
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
             $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore" +
-            (analysisRequested ? " -analyze" : string.Empty), out bool success, false, _env.Output);
+            (analysisRequested ? " -analyze" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
         _env.Output.WriteLine(output);
         success.ShouldBeTrue();
         // The conflicting outputs warning appears - but only if analysis was requested
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 6b8354dc0da..28568f89518 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -57,7 +57,8 @@ public static string ExecBootstrapedMSBuild(
             out bool successfulExit,
             bool shellExecute = false,
             ITestOutputHelper outputHelper = null,
-            bool attachProcessId = true)
+            bool attachProcessId = true,
+            int timeoutMilliseconds = 30_000)
         {
             BootstrapLocationAttribute attribute = Assembly.GetExecutingAssembly().GetCustomAttribute<BootstrapLocationAttribute>()
                                                    ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
@@ -69,7 +70,7 @@ public static string ExecBootstrapedMSBuild(
 #else
             string pathToExecutable = Path.Combine(binaryFolder, "MSBuild.exe");
 #endif
-            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper, attachProcessId);
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper, attachProcessId, timeoutMilliseconds);
         }
 
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
@@ -97,7 +98,8 @@ public static string RunProcessAndGetOutput(
             out bool successfulExit,
             bool shellExecute = false,
             ITestOutputHelper outputHelper = null,
-            bool attachProcessId = true)
+            bool attachProcessId = true,
+            int timeoutMilliseconds = 30_000)
         {
             if (shellExecute)
             {
@@ -142,7 +144,7 @@ public static string RunProcessAndGetOutput(
                 {
                     p.WaitForExit();
                 }
-                else if (!p.WaitForExit(30_000))
+                else if (!p.WaitForExit(timeoutMilliseconds))
                 {
                     // Let's not create a unit test for which we need more than 30 sec to execute.
                     // Please consider carefully if you would like to increase the timeout.
