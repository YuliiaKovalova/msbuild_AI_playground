diff --git a/src/Tasks.UnitTests/MSBuildInternalMessage_Tests.cs b/src/Tasks.UnitTests/MSBuildInternalMessage_Tests.cs
index 5754f9cf9ae..924c44fd32b 100644
--- a/src/Tasks.UnitTests/MSBuildInternalMessage_Tests.cs
+++ b/src/Tasks.UnitTests/MSBuildInternalMessage_Tests.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.IO;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
@@ -59,5 +60,233 @@ public void E2EScenarioTests(bool prefer32, bool isPlatformAnyCpu, string expect
                 }
             }
         }
+
+        [Theory]
+        [InlineData(true, "CommonSdk.BaseIntermediateOutputPathMismatchWarning")]
+        [InlineData(false, "CommonSdk.MSBuildProjectExtensionsPathModifiedAfterUse")]
+
+        public void BaseIntermediateOutputPathMisMatchWarning(bool IsInitialMSBuildProjectExtensionsPathEmpty, string expectedResourceName)
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                var outputPath = env.CreateFolder().Path;
+                string projectContent = $"""
+                <Project>
+                    <Import Project="$(MSBuildBinPath)\Microsoft.Common.props" />
+
+                    <PropertyGroup>
+                        <EnableBaseIntermediateOutputPathMismatchWarning>true</EnableBaseIntermediateOutputPathMismatchWarning>
+                        <_InitialMSBuildProjectExtensionsPath>{(IsInitialMSBuildProjectExtensionsPathEmpty ? "" : "obj")}</_InitialMSBuildProjectExtensionsPath>
+                        <MSBuildProjectExtensionsPath></MSBuildProjectExtensionsPath>
+                        <BaseIntermediateOutputPath>obj\Debug\</BaseIntermediateOutputPath>
+                    </PropertyGroup>
+
+                    <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
+                </Project>
+                """;
+
+                var projectFile = env.CreateFile(env.CreateFolder(), "test.csproj", projectContent).Path;
+                Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(projectFile, touchProject: false);
+
+                string expectedBuildMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(expectedResourceName);
+                MockLogger logger = new MockLogger(_testOutput);
+
+                project.Build(logger);
+                if (!IsInitialMSBuildProjectExtensionsPathEmpty)
+                {
+                    logger.Errors[0].RawMessage.ShouldBe(expectedBuildMessage);
+                }
+                else
+                {
+                    logger.Warnings[0].RawMessage.ShouldBe(expectedBuildMessage);
+                }
+            }
+        }
+
+        [Theory]
+        [InlineData("SetGenerateManifests", "CommonSdk.GenerateManifestsOnlyForExe", false)]
+        [InlineData("SetGenerateManifests", "CommonSdk.SigningKeyRequired", true)]
+        [InlineData("_DeploymentUnpublishable", "CommonSdk.DeploymentUnpublishable")]
+        [InlineData("Run", "CommonSdk.RunTargetDependsOnMessage")]
+        [InlineData("GetTargetFrameworks", "CommonSdk.CrossTargetingGetTargetFrameworks")]
+        [InlineData("ResolveProjectReferences", "CommonSdk.NonExistentProjectReference")]
+        [InlineData("ResolveProjectReferences", "CommonSdk.NonExistentProjectReference", true, false)]
+        public void RunTargetExtError(string targetName, string expectedResourceName, bool outputTypeIsExe = true, bool errorOnMissingProjectReference = true)
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                var outputPath = env.CreateFolder().Path;
+                string projectContent = $"""
+                <Project DefaultTargets="{targetName}">
+                    <Import Project="$(MSBuildBinPath)\Microsoft.Common.props" />
+
+                    <PropertyGroup>
+                        <TargetExt>.txt</TargetExt>
+                        <OutputPath>bin</OutputPath>
+                        <OutputType>{(outputTypeIsExe ? "" : "txt")}</OutputType>
+                        <_DeploymentSignClickOnceManifests>true</_DeploymentSignClickOnceManifests>
+                        <ManifestCertificateThumbprint></ManifestCertificateThumbprint>
+                        <ManifestKeyFile></ManifestKeyFile>
+                        <TargetFrameworks>netcoreapp3.1;net6.0;net7.0</TargetFrameworks>
+                        <ErrorOnMissingProjectReference>{errorOnMissingProjectReference}</ErrorOnMissingProjectReference>
+                    </PropertyGroup>
+
+                    <ItemGroup>
+                        <ProjectReference Include="NonExistent.csproj" />
+                    </ItemGroup>
+
+                    <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets"/>
+
+                </Project>
+                """;
+
+                var projectFile = env.CreateFile(env.CreateFolder(), "test.csproj", projectContent).Path;
+                Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(projectFile, touchProject: false);
+
+                MockLogger logger = new MockLogger(_testOutput);
+
+                string expectedBuildMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(expectedResourceName);
+
+                project.Build(logger);
+                if (expectedResourceName == "CommonSdk.DeploymentUnpublishable")
+                {
+                    logger.FullLog.Contains(expectedBuildMessage);
+                }
+                else if (expectedResourceName == "CommonSdk.RunTargetDependsOnMessage")
+                {
+                    var targetPathParameter = expectedResourceName == "CommonSdk.DeploymentUnpublishable" ? "" : Path.Combine(project.DirectoryPath, "bin", "test.txt");
+                    expectedBuildMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(expectedResourceName, targetPathParameter);
+                    logger.Errors[0].RawMessage.ShouldBe(expectedBuildMessage);
+                }
+                else if (expectedResourceName == "CommonSdk.NonExistentProjectReference")
+                {
+                    expectedBuildMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(expectedResourceName, "NonExistent.csproj");
+                    if (errorOnMissingProjectReference)
+                    {
+                        logger.Errors[0].RawMessage.ShouldBe(expectedBuildMessage);
+                    }
+                    else
+                    {
+                        logger.Warnings[0].RawMessage.ShouldBe(expectedBuildMessage);
+                    }
+                }
+                else
+                {
+                    logger.Errors[0].RawMessage.ShouldBe(expectedBuildMessage);
+                }
+            }
+        }
+
+        /// <summary>
+        /// SkipInvalidConfigurations is true, the output is warning, otherwise is error.
+        /// BuildingInsideVisualStudio is true, the resourceName is CommonSdk.InvalidConfigurationTextWhenBuildingInsideVisualStudio, otherwise is CommonSdk.InvalidConfigurationTextWhenBuildingOutsideVisualStudio
+        /// </summary>
+        /// <param name="expectedResourceName"></param>
+        /// <param name="SkipInvalidConfigurations"></param>
+        /// <param name="BuildingInsideVisualStudio"></param>
+        [Theory]
+        [InlineData("CommonSdk.InvalidConfigurationTextWhenBuildingInsideVisualStudio", false, true)]
+        [InlineData("CommonSdk.InvalidConfigurationTextWhenBuildingOutsideVisualStudio", true, false)]
+        [InlineData("CommonSdk.InvalidConfigurationTextWhenBuildingOutsideVisualStudio", false, false)]
+        [InlineData("CommonSdk.InvalidConfigurationTextWhenBuildingInsideVisualStudio", true, true)]
+        public void CheckForInvalidConfigurationAndPlatformTargetMessage(string expectedResourceName, bool SkipInvalidConfigurations, bool BuildingInsideVisualStudio)
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                var outputPath = env.CreateFolder().Path;
+                var fileName = "test.csproj";
+                var configuration = "Release";
+                var platform = "Release";
+                string projectContent = $"""
+                <Project DefaultTargets="Build">
+                    <Import Project="$(MSBuildBinPath)\Microsoft.Common.props" />
+
+                    <PropertyGroup>
+                         <SkipInvalidConfigurations>{SkipInvalidConfigurations}</SkipInvalidConfigurations>
+                         <BuildingInsideVisualStudio>{BuildingInsideVisualStudio}</BuildingInsideVisualStudio>
+                         <BaseOutputPathWasSpecified>false</BaseOutputPathWasSpecified>
+                         <_OutputPathWasMissing>true</_OutputPathWasMissing>
+                         <Configuration>{configuration}</Configuration>
+                         <Platform>{platform}</Platform>
+                    </PropertyGroup>
+
+                    <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets"/>
+
+                </Project>
+                """;
+
+                var projectFile = env.CreateFile(env.CreateFolder(), fileName, projectContent).Path;
+                Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(projectFile, touchProject: false);
+
+                MockLogger logger = new MockLogger(_testOutput);
+
+                string expectedBuildMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(expectedResourceName, fileName, configuration, platform);
+
+                project.Build(logger);
+                if (SkipInvalidConfigurations)
+                {
+                    logger.Warnings[0].RawMessage.ShouldBe(expectedBuildMessage);
+                }
+                else
+                {
+                    logger.Errors[0].RawMessage.ShouldBe(expectedBuildMessage);
+                }
+            }
+        }
+
+        [Theory]
+        [InlineData("MSB9000", "ResxWithNoCulture", "SplitResourcesByCulture", "CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage"),]
+        [InlineData("MSB9001", "ResxWithCulture", "SplitResourcesByCulture", "CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage")]
+        [InlineData("MSB9002", "NonResxWithCulture", "SplitResourcesByCulture", "CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage")]
+        [InlineData("MSB9003", "NonResxWithNoCulture", "SplitResourcesByCulture", "CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage")]
+        [InlineData("MSB9004", "ManifestResourceWithNoCulture", "_GenerateCompileInputs", "CommonSdk.ManifestResourceWithNoCultureWarning")]
+        [InlineData("MSB9005", "ManifestNonResxWithNoCultureOnDisk", "_GenerateCompileInputs", "CommonSdk.ManifestResourceWithNoCultureWarning")]
+        [InlineData("MSB9006", "ManifestResourceWithCulture", "_GenerateSatelliteAssemblyInputs", "CommonSdk.ManifestResourceWithNoCultureWarning")]
+        [InlineData("MSB9007", "ManifestNonResxWithCultureOnDisk", "_GenerateSatelliteAssemblyInputs", "CommonSdk.ManifestResourceWithNoCultureWarning")]
+        public void ResourcesByCultureWarningMessage(string warningNumber, string itemName, string targetName, string resourceName)
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                var outputPath = env.CreateFolder().Path;
+                string projectContent = $"""
+                <Project DefaultTargets="{targetName}">
+                    <Import Project="$(MSBuildBinPath)\Microsoft.Common.props" />
+
+                    <ItemGroup>
+                        <{itemName} Include="Value1" />
+                    </ItemGroup>
+
+                    <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets"/>
+                </Project>
+                """;
+
+                var projectFile = env.CreateFile(env.CreateFolder(), "test.csproj", projectContent).Path;
+                Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(projectFile, touchProject: false);
+
+                MockLogger logger = new MockLogger(_testOutput);
+                object[] args = [warningNumber, itemName];
+                if (warningNumber == "MSB9004")
+                {
+                    args = [warningNumber, itemName, "false", "Resx"];
+                }
+                else if (warningNumber == "MSB9005")
+                {
+                    args = [warningNumber, itemName, "false", "Non-Resx"];
+                }
+                else if (warningNumber == "MSB9006")
+                {
+                    args = [warningNumber, itemName, "true", "Resx"];
+                }
+                else if (warningNumber == "MSB9007")
+                {
+                    args = [warningNumber, itemName, "true", "Non-Resx"];
+                }
+
+                string expectedBuildMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, args);
+
+                project.Build(logger);
+                logger.Warnings[0].RawMessage.ShouldBe(expectedBuildMessage);
+            }
+        }
     }
 }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 2cedbea370b..98064659da2 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1137,7 +1137,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       Name="Run"
       DependsOnTargets="$(RunDependsOn)">
 
-    <MSBuildInternalMessage Condition="'$(TargetExt)'!='.exe'" ResouceName="CommonSdk.RunTargetDependsOnMessage" Severity="Error" FormatArguments="$(TargetPath)"/>
+    <MSBuildInternalMessage Condition="'$(TargetExt)'!='.exe'" ResourceName="CommonSdk.RunTargetDependsOnMessage" Severity="Error" FormatArguments="$(TargetPath)"/>
     <Exec Command="$(TargetPath) $(StartArguments)" WorkingDirectory="$(OutDir)" Condition=" '$(StartWorkingDirectory)' == '' "/>
     <Exec Command="$(TargetPath) $(StartArguments)" WorkingDirectory="$(StartWorkingDirectory)" Condition=" '$(StartWorkingDirectory)' != '' "/>
 
@@ -1965,7 +1965,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
           Returns="@(_ThisProjectBuildMetadata)">
 
     <MSBuildInternalMessage Condition="'$(IsCrossTargetingBuild)' == 'true'"
-      ResouceName="CommonSdk.CrossTargetingGetTargetFrameworks"
+      ResourceName="CommonSdk.CrossTargetingGetTargetFrameworks"
       Severity="Error"
     />
 
@@ -3271,10 +3271,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <RespectAlreadyAssignedItemCulture Condition="'$(RespectAlreadyAssignedItemCulture)' == ''">false</RespectAlreadyAssignedItemCulture>
     </PropertyGroup>
 
-    <MSBuildInternalMessage Condition="'@(ResxWithNoCulture)'!=''" ResouceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9000;ResxWithNoCulture" />
-    <MSBuildInternalMessage Condition="'@(ResxWithCulture)'!=''" ResouceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9001;ResxWithCulture" />
-    <MSBuildInternalMessage Condition="'@(NonResxWithCulture)'!=''" ResouceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9002;NonResxWithCulture" />
-    <MSBuildInternalMessage Condition="'@(NonResxWithNoCulture)'!=''" ResouceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9003;NonResxWithNoCulture" />
+    <MSBuildInternalMessage Condition="'@(ResxWithNoCulture)'!=''" ResourceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9000;ResxWithNoCulture" />
+    <MSBuildInternalMessage Condition="'@(ResxWithCulture)'!=''" ResourceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9001;ResxWithCulture" />
+    <MSBuildInternalMessage Condition="'@(NonResxWithCulture)'!=''" ResourceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9002;NonResxWithCulture" />
+    <MSBuildInternalMessage Condition="'@(NonResxWithNoCulture)'!=''" ResourceName="CommonSdk.SplitResourcesByCultureEmbeddedResourceMessage" Severity="Warning" FormatArguments="MSB9003;NonResxWithNoCulture" />
 
     <ItemGroup>
       <_LicxFile Include="@(EmbeddedResource)" Condition="'%(Extension)'=='.licx'"/>
@@ -3650,12 +3650,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <MSBuildInternalMessage
       Condition="'@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'==''"
-      ResouceName="CommonSdk.ManifestResourceWithNoCultureWarning"
+      ResourceName="CommonSdk.ManifestResourceWithNoCultureWarning"
       Severity="Warning"
       FormatArguments="MSB9004;ManifestResourceWithNoCulture;false;Resx" />
     <MSBuildInternalMessage
       Condition="'@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'==''"
-      ResouceName="CommonSdk.ManifestResourceWithNoCultureWarning"
+      ResourceName="CommonSdk.ManifestResourceWithNoCultureWarning"
       Severity="Warning"
       FormatArguments="MSB9005;ManifestNonResxWithNoCultureOnDisk;false;Non-Resx" />
 
@@ -4009,12 +4009,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <MSBuildInternalMessage
       Condition="'@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'==''"
-      ResouceName="CommonSdk.ManifestResourceWithNoCultureWarning"
+      ResourceName="CommonSdk.ManifestResourceWithNoCultureWarning"
       Severity="Warning"
-      FormatArguments="MSB9006;ManifestResourceWithNoCulture;true;Resx" />
+      FormatArguments="MSB9006;ManifestResourceWithCulture;true;Resx" />
     <MSBuildInternalMessage
       Condition="'@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'==''"
-      ResouceName="CommonSdk.ManifestResourceWithNoCultureWarning"
+      ResourceName="CommonSdk.ManifestResourceWithNoCultureWarning"
       Severity="Warning"
       FormatArguments="MSB9007;ManifestNonResxWithCultureOnDisk;true;Non-Resx" />
 
@@ -6010,7 +6010,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Target
       Name="_DeploymentUnpublishable">
 
-    <MSBuildInternalMessage ResouceName="CommonSdk.DeploymentUnpublishable" Severity="Message"/>
+    <MSBuildInternalMessage ResourceName="CommonSdk.DeploymentUnpublishable" Severity="Message"/>
 
   </Target>
 
@@ -6024,8 +6024,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Target
       Name="SetGenerateManifests">
 
-    <MSBuildInternalMessage Condition="'$(OutputType)'!='winexe' and '$(OutputType)'!='exe' and '$(OutputType)'!='appcontainerexe'" ResouceName="CommonSdk.GenerateManifestsOnlyForExe" Severity="Error"/>
-    <MSBuildInternalMessage Condition="'$(_DeploymentSignClickOnceManifests)'=='true' and '$(ManifestCertificateThumbprint)'=='' and '$(ManifestKeyFile)'==''" ResouceName="CommonSdk.SigningKeyRequired" Severity="Error"/>
+    <MSBuildInternalMessage Condition="'$(OutputType)'!='winexe' and '$(OutputType)'!='exe' and '$(OutputType)'!='appcontainerexe'" ResourceName="CommonSdk.GenerateManifestsOnlyForExe" Severity="Error"/>
+    <MSBuildInternalMessage Condition="'$(_DeploymentSignClickOnceManifests)'=='true' and '$(ManifestCertificateThumbprint)'=='' and '$(ManifestKeyFile)'==''" ResourceName="CommonSdk.SigningKeyRequired" Severity="Error"/>
 
     <PropertyGroup>
       <GenerateClickOnceManifests>true</GenerateClickOnceManifests>
