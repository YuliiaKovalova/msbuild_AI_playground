diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 403e0baddca..9aba801df72 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -221,8 +221,10 @@ public void AssemblyLoadsDuringTaskRunLogged()
                 TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
                 BinaryLogger logger = new();
                 logger.Parameters = _logFile;
-                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -bl:{logger.Parameters}", out bool success);
+                Environment.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
+                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -nr:False -bl:{logger.Parameters}", out bool success);
                 success.ShouldBeTrue();
+                Environment.SetEnvironmentVariable("MSBUILDNOINPROCNODE", null);
                 RunnerUtilities.ExecMSBuild($"{logger.Parameters} -flp:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic", out success);
                 success.ShouldBeTrue();
                 string text = File.ReadAllText(Path.Combine(logFolder.Path, "logFile.log"));
diff --git a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
index 9585cded785..49877b2ce24 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
@@ -45,7 +45,7 @@ private void CurrentDomainOnAssemblyLoad(object? sender, AssemblyLoadEventArgs a
             string? assemblyPath = args.LoadedAssembly.Location;
             Guid mvid = args.LoadedAssembly.ManifestModule.ModuleVersionId;
 
-            AssemblyLoadBuildEventArgs buildArgs = new(assemblyName, assemblyPath, mvid, null);
+            AssemblyLoadBuildEventArgs buildArgs = new(assemblyName, assemblyPath, mvid);
             buildArgs.BuildEventContext = _loggingContext.BuildEventContext;
             _loggingContext.LogBuildEvent(buildArgs);
         }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 627cb5a87a4..4804e8bd762 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -805,7 +805,8 @@ private BuildEventArgs ReadPropertyInitialValueSetEventArgs()
 
         private AssemblyLoadBuildEventArgs ReadAssemblyLoadEventArgs()
         {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
+            // needed?? (not set in args ser/desr methods nor ctor)
+            var fields = ReadBuildEventArgsFields(readImportance: false);
 
             string assemblyName = ReadDeduplicatedString();
             string assemblyPath = ReadDeduplicatedString();
@@ -814,11 +815,7 @@ private AssemblyLoadBuildEventArgs ReadAssemblyLoadEventArgs()
             var e = new AssemblyLoadBuildEventArgs(
                 assemblyName,
                 assemblyPath,
-                mvid,
-                fields.Message,
-                fields.HelpKeyword,
-                fields.SenderName,
-                fields.Importance);
+                mvid);
             SetCommonFields(e, fields);
 
             return e;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 05c19781b2f..c6d69fc80fe 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -473,7 +473,8 @@ private void Write(TargetSkippedEventArgs e)
         private void Write(AssemblyLoadBuildEventArgs e)
         {
             Write(BinaryLogRecordKind.AssemblyLoad);
-            WriteMessageFields(e, writeImportance: true);
+            // Do we need this?? (not set in the arg ser/deser methods)
+            WriteMessageFields(e, writeMessage: false, writeImportance: false);
             WriteDeduplicatedString(e.AssemblyName);
             WriteDeduplicatedString(e.AssemblyPath);
             Write(e.MVID);
diff --git a/src/Framework.UnitTests/AssemblyLoadBuildEventArgs_Tests.cs b/src/Framework.UnitTests/AssemblyLoadBuildEventArgs_Tests.cs
new file mode 100644
index 00000000000..5d99fd8a7f4
--- /dev/null
+++ b/src/Framework.UnitTests/AssemblyLoadBuildEventArgs_Tests.cs
@@ -0,0 +1,36 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.IO;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.Framework.UnitTests
+{
+    public class AssemblyLoadBuildEventArgs_Tests
+    {
+        [Fact]
+        public void SerializationDeserializationTest()
+        {
+            string assemblyName = Guid.NewGuid().ToString();
+            string assemblyPath = Guid.NewGuid().ToString();
+            Guid mvid = Guid.NewGuid();
+            AssemblyLoadBuildEventArgs arg = new(assemblyName, assemblyPath, mvid);
+
+            using MemoryStream stream = new MemoryStream();
+            using BinaryWriter bw = new BinaryWriter(stream);
+            arg.WriteToStream(bw);
+
+            stream.Position = 0;
+            using BinaryReader br = new BinaryReader(stream);
+            AssemblyLoadBuildEventArgs argDeserialized = new();
+            argDeserialized.CreateFromStream(br, 0);
+
+            argDeserialized.AssemblyName.ShouldBe(assemblyName);
+            argDeserialized.AssemblyPath.ShouldBe(assemblyPath);
+            argDeserialized.MVID.ShouldBe(mvid);
+        }
+    }
+}
diff --git a/src/Framework/AssemblyLoadBuildEventArgs.cs b/src/Framework/AssemblyLoadBuildEventArgs.cs
index 2dbeff88ba5..872668d23bb 100644
--- a/src/Framework/AssemblyLoadBuildEventArgs.cs
+++ b/src/Framework/AssemblyLoadBuildEventArgs.cs
@@ -20,11 +20,8 @@ public AssemblyLoadBuildEventArgs(
             string assemblyName,
             string assemblyPath,
             Guid mvid,
-            string message,
-            string helpKeyword = null,
-            string senderName = null,
             MessageImportance importance = MessageImportance.Low)
-            : base(message, helpKeyword, senderName, importance, DateTime.UtcNow, assemblyName, assemblyPath, mvid)
+            : base(null, null, null, importance, DateTime.UtcNow, assemblyName, assemblyPath, mvid)
         {
             AssemblyName = assemblyName;
             AssemblyPath = assemblyPath;
