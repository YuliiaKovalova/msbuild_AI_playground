diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index c1fdc67f6a5..a20915a3e43 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -134,6 +134,31 @@ public ConsoleLoggerTest(ITestOutputHelper output)
             _output = output;
         }
 
+        [Theory]
+        [InlineData(null, false, false, "", nameof(ConsoleLogger))]
+        [InlineData(null, true, false, "", nameof(ConsoleLogger))]
+        [InlineData(null, false, true, "", nameof(ConsoleLogger))]
+        [InlineData(null, true, true, "off", nameof(ConsoleLogger))]
+        [InlineData("--tl:off", true, true, "", nameof(ConsoleLogger))]
+        [InlineData(null, true, true, "", "TerminalLogger")]
+        public void CreateTerminalOrConsoleLogger_CreatesCorrectLoggerInstance(string argsString, bool supportsAnsi, bool outputIsScreen, string evnVariableValue, string expectedLoggerName)
+        {
+            string originalValue = Environment.GetEnvironmentVariable("MSBUILDTERMINALLOGGER");
+            Environment.SetEnvironmentVariable("MSBUILDTERMINALLOGGER", evnVariableValue);
+
+            try
+            {
+                string[] args = argsString?.Split(' ');
+                ILogger logger = ConsoleLogger.CreateTerminalOrConsoleLogger(default, args, supportsAnsi, outputIsScreen, default);
+
+                logger.ShouldNotBeNull();
+                logger.GetType().Name.ShouldBe(expectedLoggerName);
+            }
+            finally
+            {
+                Environment.SetEnvironmentVariable("MSBUILDTERMINALLOGGER", originalValue);
+            }
+        }
 
         /// <summary>
         /// Verify when the project has not been named that we correctly get the same placeholder
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index c44a4cb3ecd..c4d4bf9cfb3 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics.CodeAnalysis;
 using System.Linq;
+using System.Reflection;
+using System.Runtime.CompilerServices;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Logging;
@@ -336,37 +338,32 @@ protected WriteHandler WriteHandler
         /// <param name="verbosity">Level of detail to show in the log.</param>
         /// <param name="args">Command line arguments for the logger configuration. Currently, only '--tl:on' and '--tl:off' are supported.</param>
         public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)
+        {
+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
+
+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);
+        }
+
+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)
         {
             string tlArg = args?.LastOrDefault(a => a.StartsWith("--tl:", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;
 
             bool isDisabled =
-                tlArg.Equals("--tl:on", StringComparison.InvariantCultureIgnoreCase) ? false :
-                tlArg.Equals("--tl:off", StringComparison.InvariantCultureIgnoreCase) ? true :
+                tlArg.Equals("--tl:off", StringComparison.InvariantCultureIgnoreCase) ||
                 (Environment.GetEnvironmentVariable("MSBUILDTERMINALLOGGER") ?? string.Empty).Equals("off", StringComparison.InvariantCultureIgnoreCase);
 
-            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
-
             if (isDisabled || !supportsAnsi || !outputIsScreen)
             {
                 NativeMethodsShared.RestoreConsoleMode(originalConsoleMode);
                 return new ConsoleLogger(verbosity);
             }
 
-            return new TerminalLogger.TerminalLogger(verbosity, originalConsoleMode);
-        }
-
-        /// <summary>
-        /// DO NOT USE THIS METHOD. This implementation should be internal, but it's temporarily public for technical reasons. 
-        /// </summary>
-        [Obsolete("Use CreateTerminalOrConsoleLogger instead.")]
-        public static ILogger CreateTerminalLogger(LoggerVerbosity verbosity, string aggregatedLoggerParameters, out string[] configurableForwardingLoggerParameters)
-        {
-            configurableForwardingLoggerParameters = TerminalLogger.TerminalLogger.ConfigurableForwardingLoggerParameters;
+            // TODO: Move TerminalLogger to this project, use InternalsVisibleTo attribute and resolve type conflicts errors caused by shared files.
+            // This logic is tested to ensure that the TerminalLogger is available in the MSBuild assembly and we can create an instance of it.
+            Type tlType = Assembly.Load("MSBuild").GetType("Microsoft.Build.Logging.TerminalLogger.TerminalLogger");
+            ILogger terminalLogger = Activator.CreateInstance(tlType, BindingFlags.Instance | BindingFlags.NonPublic, null, [verbosity, originalConsoleMode], null) as ILogger;
 
-            return new TerminalLogger.TerminalLogger(verbosity)
-            {
-                Parameters = aggregatedLoggerParameters
-            };
+            return terminalLogger;
         }
 
         /// <summary>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index cde4841334f..66d6c38d007 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -176,17 +176,6 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Logging\BuildEventArgsExtensions.cs" />
-    <Compile Include="Logging\TerminalLogger\BuildMessage.cs" />
-    <Compile Include="Logging\TerminalLogger\ITerminal.cs" />
-    <Compile Include="Logging\TerminalLogger\MessageSeverity.cs" />
-    <Compile Include="Logging\TerminalLogger\NodesFrame.cs" />
-    <Compile Include="Logging\TerminalLogger\NodeStatus.cs" />
-    <Compile Include="Logging\TerminalLogger\Project.cs" />
-    <Compile Include="Logging\TerminalLogger\StopwatchAbstraction.cs" />
-    <Compile Include="Logging\TerminalLogger\SystemStopwatch.cs" />
-    <Compile Include="Logging\TerminalLogger\Terminal.cs" />
-    <Compile Include="Logging\TerminalLogger\TerminalLogger.cs" />
-    <Compile Include="Logging\TerminalLogger\TestSummary.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 076fba4d9a1..ad411d4dbbb 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -146,6 +146,17 @@
     <Compile Include="OutOfProcTaskAppDomainWrapper.cs" />
     <Compile Include="PerformanceLogEventListener.cs" />
     <Compile Include="JsonOutputFormatter.cs" />
+    <Compile Include="TerminalLogger\BuildMessage.cs" />
+    <Compile Include="TerminalLogger\ITerminal.cs" />
+    <Compile Include="TerminalLogger\MessageSeverity.cs" />
+    <Compile Include="TerminalLogger\NodesFrame.cs" />
+    <Compile Include="TerminalLogger\NodeStatus.cs" />
+    <Compile Include="TerminalLogger\Project.cs" />
+    <Compile Include="TerminalLogger\StopwatchAbstraction.cs" />
+    <Compile Include="TerminalLogger\SystemStopwatch.cs" />
+    <Compile Include="TerminalLogger\Terminal.cs" />
+    <Compile Include="TerminalLogger\TerminalLogger.cs" />
+    <Compile Include="TerminalLogger\TestSummary.cs" />
     <Compile Include="XMake.cs" />
     <!-- This is to enable CodeMarkers in MSBuild.exe -->
     <!-- Win32 RC Files -->
diff --git a/src/Build/Logging/TerminalLogger/BuildMessage.cs b/src/MSBuild/TerminalLogger/BuildMessage.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/BuildMessage.cs
rename to src/MSBuild/TerminalLogger/BuildMessage.cs
diff --git a/src/Build/Logging/TerminalLogger/ITerminal.cs b/src/MSBuild/TerminalLogger/ITerminal.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/ITerminal.cs
rename to src/MSBuild/TerminalLogger/ITerminal.cs
diff --git a/src/Build/Logging/TerminalLogger/MessageSeverity.cs b/src/MSBuild/TerminalLogger/MessageSeverity.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/MessageSeverity.cs
rename to src/MSBuild/TerminalLogger/MessageSeverity.cs
diff --git a/src/Build/Logging/TerminalLogger/NodeStatus.cs b/src/MSBuild/TerminalLogger/NodeStatus.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/NodeStatus.cs
rename to src/MSBuild/TerminalLogger/NodeStatus.cs
diff --git a/src/Build/Logging/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/NodesFrame.cs
rename to src/MSBuild/TerminalLogger/NodesFrame.cs
diff --git a/src/Build/Logging/TerminalLogger/Project.cs b/src/MSBuild/TerminalLogger/Project.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/Project.cs
rename to src/MSBuild/TerminalLogger/Project.cs
diff --git a/src/Build/Logging/TerminalLogger/StopwatchAbstraction.cs b/src/MSBuild/TerminalLogger/StopwatchAbstraction.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/StopwatchAbstraction.cs
rename to src/MSBuild/TerminalLogger/StopwatchAbstraction.cs
diff --git a/src/Build/Logging/TerminalLogger/SystemStopwatch.cs b/src/MSBuild/TerminalLogger/SystemStopwatch.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/SystemStopwatch.cs
rename to src/MSBuild/TerminalLogger/SystemStopwatch.cs
diff --git a/src/Build/Logging/TerminalLogger/Terminal.cs b/src/MSBuild/TerminalLogger/Terminal.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/Terminal.cs
rename to src/MSBuild/TerminalLogger/Terminal.cs
diff --git a/src/Build/Logging/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/TerminalLogger.cs
rename to src/MSBuild/TerminalLogger/TerminalLogger.cs
diff --git a/src/Build/Logging/TerminalLogger/TestSummary.cs b/src/MSBuild/TerminalLogger/TestSummary.cs
similarity index 100%
rename from src/Build/Logging/TerminalLogger/TestSummary.cs
rename to src/MSBuild/TerminalLogger/TestSummary.cs
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index bcbba83416f..a1c4dceb440 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -41,6 +41,7 @@
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using SimpleErrorLogger = Microsoft.Build.Logging.SimpleErrorLogger.SimpleErrorLogger;
+using TerminalLogger = Microsoft.Build.Logging.TerminalLogger.TerminalLogger;
 
 #if NETFRAMEWORK
 // Use I/O operations from Microsoft.IO.Redist which is generally higher perf
@@ -4018,10 +4019,10 @@ private static void ProcessTerminalLogger(bool noConsoleLogger,
         {
             if (!noConsoleLogger)
             {
-#pragma warning disable CS0618 // Intentional use due to technical debt
-                // A central logger will be created for both single proc and multiproc.
-                ILogger logger = ConsoleLogger.CreateTerminalLogger(verbosity, aggregatedLoggerParameters, out string[] configurableForwardingLoggerParameters);
-#pragma warning restore CS0618 
+                TerminalLogger logger = new TerminalLogger(verbosity)
+                {
+                    Parameters = aggregatedLoggerParameters
+                };
 
                 // Check to see if there is a possibility we will be logging from an out-of-proc node.
                 // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
@@ -4032,7 +4033,7 @@ private static void ProcessTerminalLogger(bool noConsoleLogger,
                 else
                 {
                     // For performance, register this logger using the forwarding logger mechanism.
-                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", configurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
+                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", TerminalLogger.ConfigurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
                     distributedLoggerRecords.Add(forwardingLoggerRecord);
                 }
             }
