diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index b78001c5f3d..b51527858c8 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -6,11 +6,7 @@
 using System.Collections.Concurrent;
 using System.IO;
 using System.Threading;
-
-#if NET
 using System.Threading.Tasks;
-#endif
-
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
@@ -204,11 +200,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
             try
             {
                 byte[] headerByte = new byte[5];
-#if FEATURE_APM
-                IAsyncResult result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);
-#else
                 Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();
-#endif
 
                 bool continueReading = true;
                 do
@@ -220,11 +212,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                     WaitHandle[] handles =
                     [
                         localPacketPumpShutdownEvent,
-#if FEATURE_APM
-                        result.AsyncWaitHandle
-#else
                         ((IAsyncResult)readTask).AsyncWaitHandle
-#endif
                     ];
                     int waitId = WaitHandle.WaitAny(handles);
                     switch (waitId)
@@ -239,11 +227,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                             {
                                 // Client recieved a packet header. Read the rest of it.
                                 int headerBytesRead = 0;
-#if FEATURE_APM
-                                headerBytesRead = localStream.EndRead(result);
-#else
                                 headerBytesRead = readTask.Result;
-#endif
 
                                 if ((headerBytesRead != headerByte.Length) && !localPacketPumpShutdownEvent.WaitOne(0))
                                 {
@@ -303,11 +287,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                                 else
                                 {
                                     // Start reading the next package header.
-#if FEATURE_APM
-                                    result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);
-#else
                                     readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();
-#endif
                                 }
                             }
                             break;
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 1064b2c709a..e7598b1299d 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -634,17 +634,12 @@ public NodeContext(int nodeId, Process process,
             /// </summary>
             public void BeginAsyncPacketRead()
             {
-#if FEATURE_APM
-                _clientToServerStream.BeginRead(_headerByte, 0, _headerByte.Length, HeaderReadComplete, this);
-#else
                 ThreadPool.QueueUserWorkItem(delegate
                 {
                     var ignored = RunPacketReadLoopAsync();
                 });
-#endif
             }
 
-#if !FEATURE_APM
             public async Task RunPacketReadLoopAsync()
             {
                 while (true)
@@ -667,6 +662,9 @@ public async Task RunPacketReadLoopAsync()
 
                     NodePacketType packetType = (NodePacketType)_headerByte[0];
                     int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(_headerByte, 1, 4));
+#if NETFRAMEWORK
+                    MSBuildEventSource.Log.PacketReadSize(packetLength);
+#endif
 
                     _readBufferMemoryStream.SetLength(packetLength);
                     byte[] packetData = _readBufferMemoryStream.GetBuffer();
@@ -700,7 +698,6 @@ public async Task RunPacketReadLoopAsync()
                     }
                 }
             }
-#endif
 
             /// <summary>
             /// Sends the specified packet to this node asynchronously.
@@ -910,53 +907,6 @@ private bool ProcessHeaderBytesRead(int bytesRead)
                 return true;
             }
 
-#if FEATURE_APM
-            /// <summary>
-            /// Callback invoked by the completion of a read of a header byte on one of the named pipes.
-            /// </summary>
-            private void HeaderReadComplete(IAsyncResult result)
-            {
-                int bytesRead;
-                try
-                {
-                    try
-                    {
-                        bytesRead = _clientToServerStream.EndRead(result);
-                    }
-
-                    // Workaround for CLR stress bug; it sporadically calls us twice on the same async
-                    // result, and EndRead will throw on the second one. Pretend the second one never happened.
-                    catch (ArgumentException)
-                    {
-                        CommunicationsUtilities.Trace(_nodeId, "Hit CLR bug #825607: called back twice on same async result; ignoring");
-                        return;
-                    }
-
-                    if (!ProcessHeaderBytesRead(bytesRead))
-                    {
-                        return;
-                    }
-                }
-                catch (IOException e)
-                {
-                    CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in HeaderReadComplete: {0}", e);
-                    _packetFactory.RoutePacket(_nodeId, new NodeShutdown(NodeShutdownReason.ConnectionFailed));
-                    Close();
-                    return;
-                }
-
-                int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(_headerByte, 1, 4));
-                MSBuildEventSource.Log.PacketReadSize(packetLength);
-
-                // Ensures the buffer is at least this length.
-                // It avoids reallocations if the buffer is already large enough.
-                _readBufferMemoryStream.SetLength(packetLength);
-                byte[] packetData = _readBufferMemoryStream.GetBuffer();
-
-                _clientToServerStream.BeginRead(packetData, 0, packetLength, BodyReadComplete, new Tuple<byte[], int>(packetData, packetLength));
-            }
-#endif
-
             private bool ProcessBodyBytesRead(int bytesRead, int packetLength, NodePacketType packetType)
             {
                 if (bytesRead != packetLength)
@@ -990,64 +940,6 @@ private bool ReadAndRoutePacket(NodePacketType packetType, byte[] packetData, in
                 }
                 return true;
             }
-
-#if FEATURE_APM
-            /// <summary>
-            /// Method called when the body of a packet has been read.
-            /// </summary>
-            private void BodyReadComplete(IAsyncResult result)
-            {
-                NodePacketType packetType = (NodePacketType)_headerByte[0];
-                var state = (Tuple<byte[], int>)result.AsyncState;
-                byte[] packetData = state.Item1;
-                int packetLength = state.Item2;
-                int bytesRead;
-
-                try
-                {
-                    try
-                    {
-                        bytesRead = _clientToServerStream.EndRead(result);
-                    }
-
-                    // Workaround for CLR stress bug; it sporadically calls us twice on the same async
-                    // result, and EndRead will throw on the second one. Pretend the second one never happened.
-                    catch (ArgumentException)
-                    {
-                        CommunicationsUtilities.Trace(_nodeId, "Hit CLR bug #825607: called back twice on same async result; ignoring");
-                        return;
-                    }
-
-                    if (!ProcessBodyBytesRead(bytesRead, packetLength, packetType))
-                    {
-                        return;
-                    }
-                }
-                catch (IOException e)
-                {
-                    CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in BodyReadComplete (Reading): {0}", e);
-                    _packetFactory.RoutePacket(_nodeId, new NodeShutdown(NodeShutdownReason.ConnectionFailed));
-                    Close();
-                    return;
-                }
-
-                // Read and route the packet.
-                if (!ReadAndRoutePacket(packetType, packetData, packetLength))
-                {
-                    return;
-                }
-
-                if (packetType != NodePacketType.NodeShutdown)
-                {
-                    // Read the next packet.
-                    BeginAsyncPacketRead();
-                }
-                else
-                {
-                    Close();
-                }
-            }
-#endif
         }
     }
 }
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index fe93672dee4..0f5cfdfcc23 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -23,8 +23,6 @@
 
 #if !CLR2COMPATIBILITY
 using Microsoft.Build.Shared.Debugging;
-#endif
-#if !FEATURE_APM
 using System.Threading.Tasks;
 #endif
 
@@ -588,13 +586,17 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce
         }
 #nullable disable
 
-#if !FEATURE_APM
+#if !TASKHOST
         internal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int bytesToRead)
         {
             int totalBytesRead = 0;
             while (totalBytesRead < bytesToRead)
             {
-                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None);
+#if NET
+                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead)).ConfigureAwait(false);
+#else
+                int bytesRead = await stream.ReadAsync(buffer, totalBytesRead, bytesToRead - totalBytesRead).ConfigureAwait(false);
+#endif
                 if (bytesRead == 0)
                 {
                     return totalBytesRead;
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index fbaeb4dbde2..e161ddfa88c 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -21,7 +21,7 @@
 using System.Security.Principal;
 
 #endif
-#if NET451_OR_GREATER || NETCOREAPP
+#if !TASKHOST
 using System.Threading.Tasks;
 #endif
 
@@ -368,7 +368,7 @@ private void PacketPumpProc()
                 try
                 {
                     // Wait for a connection
-#if FEATURE_APM
+#if TASKHOST
                     IAsyncResult resultForConnection = localPipeServer.BeginWaitForConnection(null, null);
                     CommunicationsUtilities.Trace("Waiting for connection {0} ms...", waitTimeRemaining);
                     bool connected = resultForConnection.AsyncWaitHandle.WaitOne(waitTimeRemaining, false);
@@ -385,7 +385,7 @@ private void PacketPumpProc()
                     }
 
                     CommunicationsUtilities.Trace("Parent started connecting. Reading handshake from parent");
-#if FEATURE_APM
+#if TASKHOST
                     localPipeServer.EndWaitForConnection(resultForConnection);
 #endif
 
@@ -521,9 +521,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
             // spammed to the endpoint and it never gets an opportunity to shutdown.
             CommunicationsUtilities.Trace("Entering read loop.");
             byte[] headerByte = new byte[5];
-#if NET451_OR_GREATER
-            Task<int> readTask = localReadPipe.ReadAsync(headerByte, 0, headerByte.Length, CancellationToken.None);
-#elif NETCOREAPP
+#if !TASKHOST
             Task<int> readTask = CommunicationsUtilities.ReadAsync(localReadPipe, headerByte, headerByte.Length).AsTask();
 #else
             IAsyncResult result = localReadPipe.BeginRead(headerByte, 0, headerByte.Length, null, null);
@@ -533,7 +531,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
             // packets to be sent by other threads which are shutting down, such as the logging thread.
             WaitHandle[] handles = new WaitHandle[]
             {
-#if NET451_OR_GREATER || NETCOREAPP
+#if !TASKHOST
                 ((IAsyncResult)readTask).AsyncWaitHandle,
 #else
                 result.AsyncWaitHandle,
@@ -553,7 +551,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                             int bytesRead = 0;
                             try
                             {
-#if NET451_OR_GREATER || NETCOREAPP
+#if !TASKHOST
                                 bytesRead = readTask.Result;
 #else
                                 bytesRead = localReadPipe.EndRead(result);
@@ -613,17 +611,11 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                                 break;
                             }
 
-#if NET451_OR_GREATER
-                            readTask = localReadPipe.ReadAsync(headerByte, 0, headerByte.Length, CancellationToken.None);
-#elif NETCOREAPP
+#if !TASKHOST
                             readTask = CommunicationsUtilities.ReadAsync(localReadPipe, headerByte, headerByte.Length).AsTask();
-#else
-                            result = localReadPipe.BeginRead(headerByte, 0, headerByte.Length, null, null);
-#endif
-
-#if NET451_OR_GREATER || NETCOREAPP
                             handles[0] = ((IAsyncResult)readTask).AsyncWaitHandle;
 #else
+                            result = localReadPipe.BeginRead(headerByte, 0, headerByte.Length, null, null);
                             handles[0] = result.AsyncWaitHandle;
 #endif
                         }
