diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
index e2e917771ca..e5751dbd25a 100644
--- a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -13,17 +13,6 @@ namespace Microsoft.Build.Tasks.UnitTests
 {
     public class RARPrecomputedCache_Tests
     {
-        private Dictionary<string, Guid> guidStore = new Dictionary<string, Guid>();
-
-        private Guid calculateMvid(string path)
-        {
-            if (!guidStore.ContainsKey(path))
-            {
-                guidStore.Add(path, Guid.NewGuid());
-            }
-            return guidStore[path];
-        }
-
         [Fact]
         public void TestPrecomputedCacheOutput()
         {
@@ -39,7 +28,7 @@ public void TestPrecomputedCacheOutput()
                     { Path.Combine(standardCache.Path, "assembly2"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
                 t._cache.IsDirty = true;
                 t.StateFile = standardCache.Path;
-                t.WriteStateFile(calculateMvid);
+                t.WriteStateFile();
                 int standardLen = File.ReadAllText(standardCache.Path).Length;
                 File.Delete(standardCache.Path);
                 standardLen.ShouldBeGreaterThan(0);
@@ -47,7 +36,7 @@ public void TestPrecomputedCacheOutput()
                 string precomputedPath = standardCache.Path + ".cache";
                 t._cache.IsDirty = true;
                 t.AssemblyInformationCacheOutputPath = precomputedPath;
-                t.WriteStateFile(calculateMvid);
+                t.WriteStateFile();
                 File.Exists(standardCache.Path).ShouldBeFalse();
                 int preLen = File.ReadAllText(precomputedPath).Length;
                 preLen.ShouldBeGreaterThan(0);
@@ -69,7 +58,7 @@ public void TestPreComputedCacheInputAndOutput()
                     { Path.Combine(standardCache.Path, "assembly2"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
                 rarWriterTask.StateFile = standardCache.Path;
                 rarWriterTask._cache.IsDirty = true;
-                rarWriterTask.WriteStateFile(calculateMvid);
+                rarWriterTask.WriteStateFile();
 
                 string dllName = Path.Combine(Path.GetDirectoryName(standardCache.Path), "randomFolder", "dll.dll");
                 rarWriterTask._cache.instanceLocalFileStateCache.Add(dllName,
@@ -81,7 +70,7 @@ public void TestPreComputedCacheInputAndOutput()
                 string precomputedCachePath = standardCache.Path + ".cache";
                 rarWriterTask.AssemblyInformationCacheOutputPath = precomputedCachePath;
                 rarWriterTask._cache.IsDirty = true;
-                rarWriterTask.WriteStateFile(calculateMvid);
+                rarWriterTask.WriteStateFile();
 
                 ResolveAssemblyReference rarReaderTask = new ResolveAssemblyReference();
                 rarReaderTask.StateFile = standardCache.Path;
@@ -97,11 +86,11 @@ public void TestPreComputedCacheInputAndOutput()
                 // the normal cache does not have dll.dll, whereas the precomputed cache does, so it should not be
                 // present when we read the first time but should be present the second time. Then we verify that the
                 // information contained in that cache matches what we'd expect.
-                rarReaderTask.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), calculateMvid, p => true);
+                rarReaderTask.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), p => true);
                 rarReaderTask._cache.instanceLocalFileStateCache.ShouldNotContainKey(dllName);
                 File.Delete(standardCache.Path);
                 rarReaderTask._cache = null;
-                rarReaderTask.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), calculateMvid, p => true);
+                rarReaderTask.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), p => true);
                 rarReaderTask._cache.instanceLocalFileStateCache.ShouldContainKey(dllName);
                 SystemState.FileState assembly3 = rarReaderTask._cache.instanceLocalFileStateCache[dllName];
                 assembly3.Assembly.ShouldBeNull();
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index e0ecd21e34b..011ce96870e 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1851,13 +1851,13 @@ private void LogConflict(Reference reference, string fusionName)
         /// <summary>
         /// Reads the state file (if present) into the cache. If not present, attempts to read from CacheInputPaths, then creates a new cache if necessary.
         /// </summary>
-        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, Guid> calculateMvid = null, Func<string, bool> fileExists = null)
+        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, bool> fileExists = null)
         {
             _cache = StateFileBase.DeserializeCache<SystemState>(_stateFile, Log);
 
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo, calculateMvid, fileExists);
+                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo, fileExists);
             }
             else
             {
@@ -1869,11 +1869,11 @@ internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo
         /// <summary>
         /// If CacheOutputPath is non-null, writes out a cache to that location. Otherwise, writes out the state file if a state name was supplied and the cache is dirty.
         /// </summary>
-        internal void WriteStateFile(Func<string, Guid> calculateMvid = null)
+        internal void WriteStateFile()
         {
             if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
             {
-                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log, calculateMvid);
+                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);
             }
             else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index aa8087eecfc..db490dedbdc 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -171,7 +171,6 @@ internal FileState(SerializationInfo info, StreamingContext context)
                     var frameworkProfile = info.GetString("fmProf");
                     frameworkName = new FrameworkName(frameworkIdentifier, frameworkNameVersion, frameworkProfile);
                 }
-                ModuleVersionID = (Guid)info.GetValue("mvid", typeof(Guid));
             }
 
             /// <summary>
@@ -195,7 +194,6 @@ public void GetObjectData(SerializationInfo info, StreamingContext context)
                     info.AddValue("fnId", frameworkName.Identifier);
                     info.AddValue("fmProf", frameworkName.Profile);
                 }
-                info.AddValue("mvid", ModuleVersionID);
             }
 
             /// <summary>
@@ -237,11 +235,6 @@ internal FrameworkName FrameworkNameAttribute
                 get { return frameworkName; }
                 set { frameworkName = value; }
             }
-
-            /// <summary>
-            /// Get or set the ID of this assembly. Used to verify it is the same version.
-            /// </summary>
-            internal Guid ModuleVersionID { get; set; }
         }
 
         /// <summary>
@@ -558,14 +551,13 @@ out fileState.frameworkName
         /// <summary>
         /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.
         /// </summary>
-        internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, Guid> calculateMvid, Func<string, bool> fileExists)
+        internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, bool> fileExists)
         {
             SystemState retVal = new SystemState();
             retVal.SetGetLastWriteTime(getLastWriteTime);
             retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
             retVal.isDirty = stateFiles.Length > 0;
             HashSet<string> assembliesFound = new HashSet<string>();
-            calculateMvid ??= CalculateMvid;
             fileExists ??= FileSystems.Default.FileExists;
 
             foreach (ITaskItem stateFile in stateFiles)
@@ -582,9 +574,8 @@ internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles,
                     if (!assembliesFound.Contains(relativePath))
                     {
                         FileState fileState = kvp.Value;
-                        // Verify that the assembly is correct
                         string fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(stateFile.ToString()), relativePath));
-                        if (fileExists(fullPath) && calculateMvid(fullPath).Equals(fileState.ModuleVersionID))
+                        if (fileExists(fullPath))
                         {
                             // Correct file path and timestamp
                             fileState.LastModified = retVal.getLastWriteTime(fullPath);
@@ -601,19 +592,13 @@ internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles,
         /// <summary>
         /// Modifies this object to be more portable across machines, then writes it to stateFile.
         /// </summary>
-        internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log, Func<string, Guid> calculateMvid)
+        internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         {
             Dictionary<string, FileState> newInstanceLocalFileStateCache = new Dictionary<string, FileState>(instanceLocalFileStateCache.Count);
-            calculateMvid ??= CalculateMvid;
             foreach (KeyValuePair<string, FileState> kvp in instanceLocalFileStateCache)
             {
-                // Add MVID to allow us to verify that we are using the same assembly later
-                string absolutePath = kvp.Key;
-                FileState fileState = kvp.Value;
-                fileState.ModuleVersionID = calculateMvid(absolutePath);
-
-                string relativePath = FileUtilities.MakeRelative(Path.GetDirectoryName(stateFile), absolutePath);
-                newInstanceLocalFileStateCache[relativePath] = fileState;
+                string relativePath = FileUtilities.MakeRelative(Path.GetDirectoryName(stateFile), kvp.Key);
+                newInstanceLocalFileStateCache[relativePath] = kvp.Value;
             }
             instanceLocalFileStateCache = newInstanceLocalFileStateCache;
 
@@ -624,15 +609,6 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log,
             SerializeCache(stateFile, log);
         }
 
-        private static Guid CalculateMvid(string path)
-        {
-            using (var reader = new PEReader(File.OpenRead(path)))
-            {
-                var metadataReader = reader.GetMetadataReader();
-                return metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
-            }
-        }
-
             /// <summary>
             /// Cached implementation of GetDirectories.
             /// </summary>
