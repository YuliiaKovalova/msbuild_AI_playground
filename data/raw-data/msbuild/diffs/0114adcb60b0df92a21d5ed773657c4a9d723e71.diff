diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 0aaa25088a2..8f7a00f6e1a 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -354,8 +354,6 @@ public partial interface ITaskItem2 : Microsoft.Build.Framework.ITaskItem
     }
     public partial class LazyFormattedBuildEventArgs : Microsoft.Build.Framework.BuildEventArgs
     {
-        [System.NonSerializedAttribute]
-        protected object locker;
         protected LazyFormattedBuildEventArgs() { }
         public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName) { }
         public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index f4dc90e663c..1276cac1102 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -354,8 +354,6 @@ public partial interface ITaskItem2 : Microsoft.Build.Framework.ITaskItem
     }
     public partial class LazyFormattedBuildEventArgs : Microsoft.Build.Framework.BuildEventArgs
     {
-        [System.NonSerializedAttribute]
-        protected object locker;
         protected LazyFormattedBuildEventArgs() { }
         public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName) { }
         public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
diff --git a/src/Framework/BuildEventArgs.cs b/src/Framework/BuildEventArgs.cs
index 3f70c7d9e2f..4484326cc14 100644
--- a/src/Framework/BuildEventArgs.cs
+++ b/src/Framework/BuildEventArgs.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Globalization;
 using System.Runtime.Serialization;
 using System.IO;
 using System.Text;
@@ -24,9 +23,9 @@ namespace Microsoft.Build.Framework
     public abstract class BuildEventArgs : EventArgs
     {
         /// <summary>
-        /// Message
+        /// Message. Volatile because it may be updated lock-free after construction.
         /// </summary>
-        private string message;
+        private volatile string message;
 
         /// <summary>
         /// Help keyword
@@ -148,6 +147,15 @@ protected internal string RawMessage
             set => message = value;
         }
 
+        /// <summary>
+        /// Like <see cref="RawMessage"/> but returns a formatted message string if available.
+        /// Used for serialization.
+        /// </summary>
+        private protected virtual string RawFormattedMessage
+        {
+            get => message;
+        }
+
         /// <summary>
         /// Custom help keyword associated with event.
         /// </summary>
@@ -172,9 +180,10 @@ public BuildEventContext BuildEventContext
         /// Serializes to a stream through a binary writer
         /// </summary>
         /// <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
-        internal virtual void WriteToStream(BinaryWriter writer)
+        /// <param name="messageToWrite">The message to write to the stream.</param>
+        private protected void WriteToStream(BinaryWriter writer, string messageToWrite)
         {
-            writer.WriteOptionalString(message);
+            writer.WriteOptionalString(messageToWrite);
             writer.WriteOptionalString(helpKeyword);
             writer.WriteOptionalString(senderName);
             writer.WriteTimestamp(timestamp);
@@ -182,6 +191,15 @@ internal virtual void WriteToStream(BinaryWriter writer)
             writer.WriteOptionalBuildEventContext(buildEventContext);
         }
 
+        /// <summary>
+        /// Serializes to a stream through a binary writer
+        /// </summary>
+        /// <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
+        internal virtual void WriteToStream(BinaryWriter writer)
+        {
+            WriteToStream(writer, message);
+        }
+
         /// <summary>
         /// Deserializes from a stream through a binary reader
         /// </summary>
diff --git a/src/Framework/LazyFormattedBuildEventArgs.cs b/src/Framework/LazyFormattedBuildEventArgs.cs
index ae7be349bd4..7d3d2fd8cf0 100644
--- a/src/Framework/LazyFormattedBuildEventArgs.cs
+++ b/src/Framework/LazyFormattedBuildEventArgs.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Globalization;
 using System.IO;
-using System.Runtime.Serialization;
 
 namespace Microsoft.Build.Framework
 {
@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs
         /// <summary>
         /// Stores the message arguments.
         /// </summary>
-        private object[] arguments;
+        private volatile object argumentsOrFormattedMessage;
 
         /// <summary>
         /// Exposes the underlying arguments field to serializers.
         /// </summary>
         internal object[] RawArguments
         {
-            get => arguments;
-            set => arguments = value;
+            get => (argumentsOrFormattedMessage is object[] arguments) ? arguments : null;
         }
 
         /// <summary>
-        /// Stores the original culture for String.Format.
+        /// Exposes the formatted message string to serializers.
         /// </summary>
-        private string originalCultureName;
+        private protected override string RawFormattedMessage
+        {
+            get => (argumentsOrFormattedMessage is string formattedMessage) ? formattedMessage : base.RawFormattedMessage;
+        }
 
         /// <summary>
-        /// Non-serializable CultureInfo object
+        /// Stores the original culture for String.Format.
         /// </summary>
-        [NonSerialized]
-        private CultureInfo originalCultureInfo;
+        private string originalCultureName;
 
         /// <summary>
-        /// Lock object.
+        /// Non-serializable CultureInfo object
         /// </summary>
         [NonSerialized]
-        protected Object locker;
+        private volatile CultureInfo originalCultureInfo;
 
         /// <summary>
         /// This constructor allows all event data to be initialized.
@@ -79,10 +79,9 @@ params object[] messageArgs
         )
             : base(message, helpKeyword, senderName, eventTimestamp)
         {
-            arguments = messageArgs;
+            argumentsOrFormattedMessage = messageArgs;
             originalCultureName = CultureInfo.CurrentCulture.Name;
             originalCultureInfo = CultureInfo.CurrentCulture;
-            locker = new Object();
         }
 
         /// <summary>
@@ -91,7 +90,6 @@ params object[] messageArgs
         protected LazyFormattedBuildEventArgs()
             : base()
         {
-            locker = new Object();
         }
 
         /// <summary>
@@ -101,18 +99,22 @@ public override string Message
         {
             get
             {
-                lock (locker)
+                object argsOrMessage = argumentsOrFormattedMessage;
+                if (argsOrMessage is string formattedMessage)
                 {
-                    if (arguments?.Length > 0)
-                    {
-                        if (originalCultureInfo == null)
-                        {
-                            originalCultureInfo = new CultureInfo(originalCultureName);
-                        }
+                    return formattedMessage;
+                }
 
-                        base.Message = FormatString(originalCultureInfo, base.Message, arguments);
-                        arguments = null;
+                if (argsOrMessage is object[] arguments && arguments.Length > 0)
+                {
+                    if (originalCultureInfo == null)
+                    {
+                        originalCultureInfo = new CultureInfo(originalCultureName);
                     }
+
+                    formattedMessage = FormatString(originalCultureInfo, base.Message, arguments);
+                    argumentsOrFormattedMessage = formattedMessage;
+                    return formattedMessage;
                 }
 
                 return base.Message;
@@ -125,37 +127,26 @@ public override string Message
         /// <param name="writer">Binary writer which is attached to the stream the event will be serialized into.</param>
         internal override void WriteToStream(BinaryWriter writer)
         {
-            // Locking is needed here as this is invoked on the serialization thread,
-            // whereas a local logger (a distributed logger) may concurrently invoke this.Message
-            // which will trigger formatting and thus the exception below
-            lock (locker)
+            object argsOrMessage = argumentsOrFormattedMessage;
+            if (argsOrMessage is object[] arguments && arguments.Length > 0)
             {
-                bool hasArguments = arguments != null;
-                base.WriteToStream(writer);
+                base.WriteToStream(writer, RawMessage);
+                writer.Write(arguments.Length);
 
-                if (hasArguments && arguments == null)
+                foreach (object argument in arguments)
                 {
-                    throw new InvalidOperationException("BuildEventArgs has formatted message while serializing!");
+                    // Arguments may be ints, etc, so explicitly convert
+                    // Convert.ToString returns String.Empty when it cannot convert, rather than throwing
+                    writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture));
                 }
-
-                if (arguments != null)
-                {
-                    writer.Write(arguments.Length);
-
-                    foreach (object argument in arguments)
-                    {
-                        // Arguments may be ints, etc, so explicitly convert
-                        // Convert.ToString returns String.Empty when it cannot convert, rather than throwing
-                        writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture));
-                    }
-                }
-                else
-                {
-                    writer.Write(-1);
-                }
-
-                writer.Write(originalCultureName);
             }
+            else
+            {
+                base.WriteToStream(writer, (argsOrMessage is string formattedMessage) ? formattedMessage : RawMessage);
+                writer.Write(-1);
+            }
+
+            writer.Write(originalCultureName);
         }
 
         /// <summary>
@@ -182,7 +173,7 @@ internal override void CreateFromStream(BinaryReader reader, Int32 version)
                     }
                 }
 
-                arguments = messageArgs;
+                argumentsOrFormattedMessage = messageArgs;
 
                 originalCultureName = reader.ReadString();
             }
@@ -248,16 +239,5 @@ private static string FormatString(CultureInfo culture, string unformatted, para
 
             return formatted;
         }
-
-        /// <summary>
-        /// Deserialization does not call any constructors, not even
-        /// the parameterless constructor. Therefore since we do not serialize
-        /// this field, we must populate it here.
-        /// </summary>
-        [OnDeserialized]
-        private void OnDeserialized(StreamingContext context)
-        {
-            locker = new Object();
-        }
     }
 }
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index 1aa08dbd263..77cedfe049d 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -116,13 +116,7 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
-                    {
-                        if (RawMessage == null)
-                        {
-                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword(Succeeded ? "ProjectFinishedSuccess" : "ProjectFinishedFailure", Path.GetFileName(ProjectFile));
-                        }
-                    }
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(Succeeded ? "ProjectFinishedSuccess" : "ProjectFinishedFailure", Path.GetFileName(ProjectFile));
                 }
 
                 return RawMessage;
diff --git a/src/Framework/ProjectStartedEventArgs.cs b/src/Framework/ProjectStartedEventArgs.cs
index 0de7b555f68..230d0629058 100644
--- a/src/Framework/ProjectStartedEventArgs.cs
+++ b/src/Framework/ProjectStartedEventArgs.cs
@@ -489,24 +489,18 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
+                    string projectFilePath = Path.GetFileName(ProjectFile);
+
+                    // Check to see if the there are any specific target names to be built.
+                    // If targetNames is null or empty then we will be building with the
+                    // default targets.
+                    if (!string.IsNullOrEmpty(TargetNames))
+                    {
+                        RawMessage = FormatResourceStringIgnoreCodeAndKeyword("ProjectStartedPrefixForTopLevelProjectWithTargetNames", projectFilePath, TargetNames);
+                    }
+                    else
                     {
-                        if (RawMessage == null)
-                        {
-                            string projectFilePath = Path.GetFileName(ProjectFile);
-
-                            // Check to see if the there are any specific target names to be built.
-                            // If targetNames is null or empty then we will be building with the 
-                            // default targets.
-                            if (!string.IsNullOrEmpty(TargetNames))
-                            {
-                                RawMessage = FormatResourceStringIgnoreCodeAndKeyword("ProjectStartedPrefixForTopLevelProjectWithTargetNames", projectFilePath, TargetNames);
-                            }
-                            else
-                            {
-                                RawMessage = FormatResourceStringIgnoreCodeAndKeyword("ProjectStartedPrefixForTopLevelProjectWithDefaultTargets", projectFilePath);
-                            }
-                        }
+                        RawMessage = FormatResourceStringIgnoreCodeAndKeyword("ProjectStartedPrefixForTopLevelProjectWithDefaultTargets", projectFilePath);
                     }
                 }
 
diff --git a/src/Framework/PropertyReassignmentEventArgs.cs b/src/Framework/PropertyReassignmentEventArgs.cs
index 42642a593bd..8820254215f 100644
--- a/src/Framework/PropertyReassignmentEventArgs.cs
+++ b/src/Framework/PropertyReassignmentEventArgs.cs
@@ -71,13 +71,7 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
-                    {
-                        if (RawMessage == null)
-                        {
-                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword("PropertyReassignment", PropertyName, NewValue, PreviousValue, Location);
-                        }
-                    }
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("PropertyReassignment", PropertyName, NewValue, PreviousValue, Location);
                 }
 
                 return RawMessage;
diff --git a/src/Framework/TargetFinishedEventArgs.cs b/src/Framework/TargetFinishedEventArgs.cs
index 435475eb4c7..fceebc108da 100644
--- a/src/Framework/TargetFinishedEventArgs.cs
+++ b/src/Framework/TargetFinishedEventArgs.cs
@@ -183,13 +183,7 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
-                    {
-                        if (RawMessage == null)
-                        {
-                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword(Succeeded ? "TargetFinishedSuccess" : "TargetFinishedFailure", targetName, Path.GetFileName(projectFile));
-                        }
-                    }
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(Succeeded ? "TargetFinishedSuccess" : "TargetFinishedFailure", targetName, Path.GetFileName(projectFile));
                 }
 
                 return RawMessage;
diff --git a/src/Framework/TargetSkippedEventArgs.cs b/src/Framework/TargetSkippedEventArgs.cs
index d34e468ff32..61580ae92b5 100644
--- a/src/Framework/TargetSkippedEventArgs.cs
+++ b/src/Framework/TargetSkippedEventArgs.cs
@@ -157,35 +157,29 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
+                    RawMessage = SkipReason switch
                     {
-                        if (RawMessage == null)
-                        {
-                            RawMessage = SkipReason switch
-                            {
-                                TargetSkipReason.PreviouslyBuiltSuccessfully or TargetSkipReason.PreviouslyBuiltUnsuccessfully =>
-                                    FormatResourceStringIgnoreCodeAndKeyword(
-                                        OriginallySucceeded
-                                        ? "TargetAlreadyCompleteSuccess"
-                                        : "TargetAlreadyCompleteFailure",
-                                        TargetName),
-
-                                TargetSkipReason.ConditionWasFalse =>
-                                    FormatResourceStringIgnoreCodeAndKeyword(
-                                        "TargetSkippedFalseCondition",
-                                        TargetName,
-                                        Condition,
-                                        EvaluatedCondition),
-
-                                TargetSkipReason.OutputsUpToDate =>
-                                    FormatResourceStringIgnoreCodeAndKeyword(
-                                        "SkipTargetBecauseOutputsUpToDate",
-                                        TargetName),
-
-                                _ => SkipReason.ToString()
-                            };
-                        }
-                    }
+                        TargetSkipReason.PreviouslyBuiltSuccessfully or TargetSkipReason.PreviouslyBuiltUnsuccessfully =>
+                            FormatResourceStringIgnoreCodeAndKeyword(
+                                OriginallySucceeded
+                                ? "TargetAlreadyCompleteSuccess"
+                                : "TargetAlreadyCompleteFailure",
+                                TargetName),
+
+                        TargetSkipReason.ConditionWasFalse =>
+                            FormatResourceStringIgnoreCodeAndKeyword(
+                                "TargetSkippedFalseCondition",
+                                TargetName,
+                                Condition,
+                                EvaluatedCondition),
+
+                        TargetSkipReason.OutputsUpToDate =>
+                            FormatResourceStringIgnoreCodeAndKeyword(
+                                "SkipTargetBecauseOutputsUpToDate",
+                                TargetName),
+
+                        _ => SkipReason.ToString()
+                    };
                 }
 
                 return RawMessage;
diff --git a/src/Framework/TargetStartedEventArgs.cs b/src/Framework/TargetStartedEventArgs.cs
index e615e4f1461..c4a44a744b0 100644
--- a/src/Framework/TargetStartedEventArgs.cs
+++ b/src/Framework/TargetStartedEventArgs.cs
@@ -182,32 +182,26 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
+                    if (string.Equals(projectFile, targetFile, StringComparison.OrdinalIgnoreCase))
                     {
-                        if (RawMessage == null)
+                        if (!string.IsNullOrEmpty(parentTarget))
                         {
-                            if (string.Equals(projectFile, targetFile, StringComparison.OrdinalIgnoreCase))
-                            {
-                                if (!string.IsNullOrEmpty(parentTarget))
-                                {
-                                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedProjectDepends", targetName, projectFile, parentTarget);
-                                }
-                                else
-                                {
-                                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedProjectEntry", targetName, projectFile);
-                                }
-                            }
-                            else
-                            {
-                                if (!string.IsNullOrEmpty(parentTarget))
-                                {
-                                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedFileProjectDepends", targetName, targetFile, projectFile, parentTarget);
-                                }
-                                else
-                                {
-                                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedFileProjectEntry", targetName, targetFile, projectFile);
-                                }
-                            }
+                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedProjectDepends", targetName, projectFile, parentTarget);
+                        }
+                        else
+                        {
+                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedProjectEntry", targetName, projectFile);
+                        }
+                    }
+                    else
+                    {
+                        if (!string.IsNullOrEmpty(parentTarget))
+                        {
+                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedFileProjectDepends", targetName, targetFile, projectFile, parentTarget);
+                        }
+                        else
+                        {
+                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TargetStartedFileProjectEntry", targetName, targetFile, projectFile);
                         }
                     }
                 }
diff --git a/src/Framework/TaskFinishedEventArgs.cs b/src/Framework/TaskFinishedEventArgs.cs
index f0c3b8d7dcf..def68d090d9 100644
--- a/src/Framework/TaskFinishedEventArgs.cs
+++ b/src/Framework/TaskFinishedEventArgs.cs
@@ -144,13 +144,7 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
-                    {
-                        if (RawMessage == null)
-                        {
-                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword(Succeeded ? "TaskFinishedSuccess" : "TaskFinishedFailure", TaskName);
-                        }
-                    }
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(Succeeded ? "TaskFinishedSuccess" : "TaskFinishedFailure", TaskName);
                 }
 
                 return RawMessage;
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index 207d20472d2..55e6ca69998 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -143,13 +143,7 @@ public override string Message
             {
                 if (RawMessage == null)
                 {
-                    lock (locker)
-                    {
-                        if (RawMessage == null)
-                        {
-                            RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TaskStarted", TaskName);
-                        }
-                    }
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TaskStarted", TaskName);
                 }
 
                 return RawMessage;
