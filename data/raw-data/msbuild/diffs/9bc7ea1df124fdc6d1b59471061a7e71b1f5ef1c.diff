diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index ad75ae5c02a..0d7266d19ae 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1476,6 +1476,7 @@ public sealed partial class ProjectCacheException : System.Exception
     {
         internal ProjectCacheException() { }
         public string ErrorCode { get { throw null; } }
+        public bool HasBeenLogged { get { throw null; } }
     }
     public abstract partial class ProjectCachePluginBase
     {
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index ba950df1c14..756b18bd2c9 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1470,6 +1470,7 @@ public sealed partial class ProjectCacheException : System.Exception
     {
         internal ProjectCacheException() { }
         public string ErrorCode { get { throw null; } }
+        public bool HasBeenLogged { get { throw null; } }
     }
     public abstract partial class ProjectCachePluginBase
     {
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 36b02b223bc..7ece4ee980b 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -898,7 +898,6 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
                 StringShouldContainSubstring(logger.FullLog, $"{AssemblyMockCache}: EndBuildAsync", expectedOccurrences: 1);
             }
 
-            // TODO: this ain't right now is it?
             logger.FullLog.ShouldNotContain("Cache plugin exception");
         }
 
@@ -952,7 +951,6 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ExceptionLo
                 buildResult.Exception.InnerException!.ShouldNotBeNull();
                 buildResult.Exception.InnerException!.Message.ShouldContain("Cache plugin exception from");
 
-                // TODO: this ain't right now is it?
                 logger.FullLog.ShouldNotContain("Cache plugin exception");
             }
             finally
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
index 6c7e5bc602b..196f206e3b7 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
@@ -20,6 +20,7 @@ private ProjectCacheException()
         private ProjectCacheException(
             string message,
             Exception innerException,
+            bool hasBeenLogged,
             string errorCode
         )
             : base(message, innerException)
@@ -27,22 +28,23 @@ string errorCode
             ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(message), "Need error message.");
             ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(errorCode), "Must specify the error message code.");
 
+            HasBeenLogged = hasBeenLogged;
             ErrorCode = errorCode;
         }
 
+        /// <summary>
+        /// The project cache has already logged this as an error.
+        /// Should not get logged again.
+        /// </summary>
+        public bool HasBeenLogged { get; }
+
         /// <summary>
         /// Gets the error code associated with this exception's message (not the inner exception).
         /// </summary>
         /// <value>The error code string.</value>
         public string ErrorCode { get; }
 
-        /// <summary>
-        /// Throws an instance of this exception using rich error information.
-        /// </summary>
-        /// <param name="innerException"></param>
-        /// <param name="messageResourceName"></param>
-        /// <param name="messageArgs"></param>
-        internal static void Throw
+        internal static void ThrowAsUnhandledException
         (
             Exception innerException,
             string messageResourceName,
@@ -53,7 +55,20 @@ params string[] messageArgs
 
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
 
-            throw new ProjectCacheException(message, innerException, errorCode);
+            throw new ProjectCacheException(message, innerException, hasBeenLogged: false, errorCode);
+        }
+
+        internal static void ThrowForLoggedError
+        (
+            string messageResourceName,
+            params string[] messageArgs
+        )
+        {
+            ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
+
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
+
+            throw new ProjectCacheException(message: message, innerException: null, hasBeenLogged: true, errorCode: errorCode);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 5a36c4bf997..fc9648531cc 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -70,7 +70,7 @@ await plugin.BeginBuildAsync(
 
             if (logger.HasLoggedErrors)
             {
-                ProjectCacheException.Throw(null, "ProjectCacheInitializationFailed");
+                ProjectCacheException.ThrowForLoggedError("ProjectCacheInitializationFailed");
             }
 
             return new ProjectCacheService(plugin, buildManager, logger, pluginDescriptor, cancellationToken);
@@ -114,7 +114,7 @@ private static Type GetTypeFromAssemblyPath(string pluginAssemblyPath)
 
             if (type == null)
             {
-                ProjectCacheException.Throw(null, "NoProjectCachePluginFoundInAssembly", pluginAssemblyPath);
+                ProjectCacheException.ThrowAsUnhandledException(null, "NoProjectCachePluginFoundInAssembly", pluginAssemblyPath);
             }
 
             return type!;
@@ -168,7 +168,7 @@ public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest
 
             if (_logger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)
             {
-                ProjectCacheException.Throw(null, "ProjectCacheQueryFailed", queryDescription);
+                ProjectCacheException.ThrowForLoggedError("ProjectCacheQueryFailed", queryDescription);
             }
 
             var message = $"Plugin result: {cacheResult.ResultType}.";
@@ -208,7 +208,7 @@ public async Task ShutDown()
 
             if (_logger.HasLoggedErrors)
             {
-                ProjectCacheException.Throw(null, "ProjectCacheShutdownFailed");
+                ProjectCacheException.ThrowForLoggedError("ProjectCacheShutdownFailed");
             }
         }
 
@@ -219,7 +219,7 @@ private static void HandlePluginException(Exception e, string apiExceptionWasThr
                 throw e;
             }
 
-            ProjectCacheException.Throw(
+            ProjectCacheException.ThrowAsUnhandledException(
                 e,
                 "ProjectCacheException",
                 apiExceptionWasThrownFrom);
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b593f807907..3324195be55 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -20,6 +20,7 @@
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
 using Microsoft.Build.Logging;
@@ -81,7 +82,11 @@ public enum ExitType
             /// The build stopped unexpectedly, for example,
             /// because a child died or hung.
             /// </summary>
-            Unexpected
+            Unexpected,
+            /// <summary>
+            /// A project cache failed unexpectedly.
+            /// </summary>
+            ProjectCacheFailure
         }
 
         /// <summary>
@@ -786,6 +791,21 @@ string [] commandLine
                     exitType = ExitType.InitializationError;
                 }
             }
+            catch (ProjectCacheException e) when (!e.HasBeenLogged)
+            {
+                Console.WriteLine($"MSBUILD : error {e.ErrorCode}: {e.Message}");
+
+#if DEBUG
+                Console.WriteLine("This is an unhandled exception from a project cache -- PLEASE OPEN A BUG AGAINST THE PROJECT CACHE OWNER.");
+#endif
+
+                if (e.InnerException is not null)
+                {
+                    Console.WriteLine(e.InnerException.ToString());
+                }
+
+                exitType = ExitType.ProjectCacheFailure;
+            }
             catch (BuildAbortedException e)
             {
                 Console.WriteLine(
@@ -1265,9 +1285,9 @@ string outputResultsCache
                         if (exception is not InvalidProjectFileException
                             && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException)))
                         {
-                            if (exception is LoggerException or InternalLoggerException)
+                            if (exception is LoggerException or InternalLoggerException or ProjectCacheException)
                             {
-                                // We will rethrow this so the outer exception handler can catch it, but we don't
+                                // We will rethrow these so the outer exception handler can catch them, but we don't
                                 // want to log the outer exception stack here.
                                 throw exception;
                             }
