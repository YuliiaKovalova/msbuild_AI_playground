diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 7c119ce2929..2cc7615cb14 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
+using System.Threading.Tasks;
 
 namespace Microsoft.Build.Execution
 {
@@ -59,6 +60,8 @@ public sealed class OutOfProcServerNode : INode, INodePacketFactory, INodePacket
         /// </summary>
         private readonly bool _debugCommunications;
 
+        private Task? _buildTask;
+
         private string _serverBusyMutexName = default!;
 
         public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFunction)
@@ -74,6 +77,7 @@ public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFu
 
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuildCommand, ServerNodeBuildCommand.FactoryForDeserialization, this);
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.NodeBuildComplete, NodeBuildComplete.FactoryForDeserialization, this);
+            (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuildCancel, ServerNodeBuildCancel.FactoryForDeserialization, this);
         }
 
         #region INode Members
@@ -105,7 +109,7 @@ public NodeEngineShutdownReason Run(out Exception? shutdownException)
             _nodeEndpoint.Listen(this);
 
             var waitHandles = new WaitHandle[] { _shutdownEvent, _packetReceivedEvent };
-
+            
             // Get the current directory before doing any work. We need this so we can restore the directory when the node shutsdown.
             while (true)
             {
@@ -269,11 +273,40 @@ private void HandlePacket(INodePacket packet)
             switch (packet.Type)
             {
                 case NodePacketType.ServerNodeBuildCommand:
-                    HandleServerNodeBuildCommand((ServerNodeBuildCommand)packet);
+                    HandleServerNodeBuildCommandAsync((ServerNodeBuildCommand)packet);
+                    break;
+                case NodePacketType.ServerNodeBuildCancel:
+                    HandleServerNodeBuildCancel((ServerNodeBuildCancel)packet);
                     break;
             }
         }
 
+        private void HandleServerNodeBuildCancel(ServerNodeBuildCancel command)
+        {
+            BuildManager.DefaultBuildManager.CancelAllSubmissions();
+        }
+
+        private void HandleServerNodeBuildCommandAsync(ServerNodeBuildCommand command)
+        {
+            _buildTask = Task.Run(() =>
+            {
+                try
+                {
+                    HandleServerNodeBuildCommand(command);
+                }
+                catch(Exception e)
+                {
+                    _shutdownException = e;
+                    _shutdownReason = NodeEngineShutdownReason.Error;
+                    _shutdownEvent.Set();
+                }
+                finally
+                {
+                    _buildTask = null;
+                }
+            });
+        }
+
         private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
         {
             CommunicationsUtilities.Trace("Building with MSBuild server with command line {0}", command.CommandLine);
@@ -285,6 +318,8 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
                 _shutdownException = new InvalidOperationException("Client requested build while server is busy processing previous client build request.");
                 _shutdownReason = NodeEngineShutdownReason.Error;
                 _shutdownEvent.Set();
+
+                return;
             }
 
             // set build process context
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs b/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
new file mode 100644
index 00000000000..349c1b8170d
--- /dev/null
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
@@ -0,0 +1,20 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+namespace Microsoft.Build.BackEnd
+{
+    internal sealed class ServerNodeBuildCancel : INodePacket
+    {
+        public NodePacketType Type => NodePacketType.ServerNodeBuildCancel;
+
+        public void Translate(ITranslator translator)
+        {
+        }
+
+        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        {
+            return new ServerNodeBuildCancel();
+        }
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index d14821f787f..9c4bbac8ee4 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -155,6 +155,7 @@
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\ServerNamedMutex.cs" />
+    <Compile Include="BackEnd\Node\ServerNodeBuildCancel.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildCommand.cs" />
     <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildResult.cs" />
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index b0ec1f1f6c5..0ddbf49a0d7 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -207,6 +207,12 @@ internal enum NodePacketType : byte
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
         ServerNodeConsoleWrite = 0xF2,
+
+        /// <summary>
+        /// Command to cancel ongoing build. 
+        /// Keep this enum value constant intact as this is part of contract with dotnet CLI
+        /// </summary>
+        ServerNodeBuildCancel = 0xF3,
     }
     #endregion
 
