diff --git a/src/Build/BackEnd/Components/Communications/CloningExtensions.cs b/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
index 516c0f127fe..2e1d37a51fd 100644
--- a/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
+++ b/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
@@ -15,6 +15,11 @@ internal static class CloningExtensions
         this PropertyDictionary<ProjectPropertyInstance>? properties)
         => properties == null ? null : new(properties.Select<ProjectPropertyInstance, ProjectPropertyInstance>(p => p.DeepClone()));
 
+    public static Dictionary<TKey, TValue>? DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue>? dictionary,
+        IEqualityComparer<TKey> comparer) where TKey : notnull
+        => dictionary.DeepClone(null, null, comparer);
+
     public static Dictionary<TKey, TValue>? DeepClone<TKey, TValue>(
         this IDictionary<TKey, TValue>? dictionary,
         Func<TValue, TValue> valueClone,
diff --git a/src/Build/Definition/ProjectImportPathMatch.cs b/src/Build/Definition/ProjectImportPathMatch.cs
index 581b944a7bf..009baafce07 100644
--- a/src/Build/Definition/ProjectImportPathMatch.cs
+++ b/src/Build/Definition/ProjectImportPathMatch.cs
@@ -42,9 +42,6 @@ public ProjectImportPathMatch(ITranslator translator)
             ((ITranslatable)this).Translate(translator);
         }
 
-        internal ProjectImportPathMatch DeepClone()
-            => new ProjectImportPathMatch(_propertyName, new List<string>(_searchPaths));
-
         /// <summary>
         /// String representation of the property reference - eg. "MSBuildExtensionsPath32"
         /// </summary>
@@ -58,7 +55,7 @@ internal ProjectImportPathMatch DeepClone()
         /// <summary>
         /// Enumeration of the search paths for the property.
         /// </summary>
-        public List<string> SearchPaths => _searchPaths;
+        public IReadOnlyList<string> SearchPaths => _searchPaths;
 
         public void Translate(ITranslator translator)
         {
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index bb8eb35a1f0..c0b0952f8f2 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -620,8 +620,9 @@ public Toolset DeepClone()
                 _subToolsets = _subToolsets.DeepClone(v => v.DeepClone(), StringComparer.OrdinalIgnoreCase),
                 _overrideTasksPath = _overrideTasksPath,
                 _defaultOverrideToolsVersion = _defaultOverrideToolsVersion,
+                // ProjectImportPathMatch is immutable
                 _propertySearchPathsTable =
-                    _propertySearchPathsTable.DeepClone(v => v.DeepClone(), StringComparer.OrdinalIgnoreCase),
+                    _propertySearchPathsTable.DeepClone(StringComparer.OrdinalIgnoreCase),
                 _defaultTasksRegistrationAttempted = _defaultTasksRegistrationAttempted,
                 _overrideTasksRegistrationAttempted = _overrideTasksRegistrationAttempted,
                 _defaultTaskRegistry = _defaultTaskRegistry?.DeepClone(),
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 7a98a8c530f..ceb7e73d755 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,6 +160,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
+    <Compile Include="Utilities\EnumerableExtensions.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Utilities/EnumerableExtensions.cs b/src/Build/Utilities/EnumerableExtensions.cs
new file mode 100644
index 00000000000..149a2cb905b
--- /dev/null
+++ b/src/Build/Utilities/EnumerableExtensions.cs
@@ -0,0 +1,17 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Internal;
+
+internal static class EnumerableExtensions
+{
+    public static void CopyTo<T>(this IReadOnlyList<T> list, T[] array, int startIndex)
+    {
+        for (int i = 0, count = list.Count; i < count; i++)
+        {
+            array[startIndex + i] = list[i];
+        }
+    }
+}
