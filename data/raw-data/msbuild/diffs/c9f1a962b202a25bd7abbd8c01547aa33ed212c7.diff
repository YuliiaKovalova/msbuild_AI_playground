diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index e21e214cb78..abd288ece2e 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -608,7 +608,7 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string archi
             switch (clrVersion)
             {
                 case 0:
-                    // Not a taskhost, runtime must match
+                // Not a taskhost, runtime must match
                 case 4:
                     // Default for MSBuild running on .NET Framework 4,
                     // not represented in handshake
@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int
             return defaultValue;
         }
 
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T>(string format, T arg0)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T>(int nodeId, string format, T arg0)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, string.Format(format, arg0.ToString()));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1>(string format, T0 arg0, T1 arg1)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString(), arg1.ToString()));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1>(int nodeId, string format, T0 arg0, T1 arg1)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, string.Format(format, arg0.ToString(), arg1.ToString()));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString(), arg1.ToString(), arg2.ToString()));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1, T2>(int nodeId, string format, T0 arg0, T1 arg1, T2 arg2)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, string.Format(format, arg0.ToString(), arg1.ToString(), arg2.ToString()));
+            }
+        }
+
         /// <summary>
         /// Writes trace information to a log file
         /// </summary>
         internal static void Trace(string format, params object[] args)
         {
-            Trace(/* nodeId */ -1, format, args);
+            Trace(nodeId: -1, format, args);
         }
 
         /// <summary>
@@ -680,49 +746,65 @@ internal static void Trace(int nodeId, string format, params object[] args)
         {
             if (s_trace)
             {
-                lock (s_traceLock)
-                {
-                    s_debugDumpPath ??=
+                string message = string.Format(CultureInfo.CurrentCulture, format, args);
+                TraceCore(nodeId, message);
+            }
+        }
+
+        internal static void Trace(int nodeId, string message)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, message);
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        private static void TraceCore(int nodeId, string message)
+        {
+            lock (s_traceLock)
+            {
+                s_debugDumpPath ??=
 #if CLR2COMPATIBILITY
-                        Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+                    Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
 #else
                         DebugUtils.DebugPath;
 #endif
 
-                    if (String.IsNullOrEmpty(s_debugDumpPath))
-                    {
-                        s_debugDumpPath = FileUtilities.TempFileDirectory;
-                    }
-                    else
-                    {
-                        Directory.CreateDirectory(s_debugDumpPath);
-                    }
+                if (String.IsNullOrEmpty(s_debugDumpPath))
+                {
+                    s_debugDumpPath = FileUtilities.TempFileDirectory;
+                }
+                else
+                {
+                    Directory.CreateDirectory(s_debugDumpPath);
+                }
 
-                    try
+                try
+                {
+                    string fileName = @"MSBuild_CommTrace_PID_{0}";
+                    if (nodeId != -1)
                     {
-                        string fileName = @"MSBuild_CommTrace_PID_{0}";
-                        if (nodeId != -1)
-                        {
-                            fileName += "_node_" + nodeId;
-                        }
+                        fileName += "_node_" + nodeId;
+                    }
 
-                        fileName += ".txt";
+                    fileName += ".txt";
 
-                        using (StreamWriter file = FileUtilities.OpenWrite(
-                            String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId), append: true))
-                        {
-                            string message = String.Format(CultureInfo.CurrentCulture, format, args);
-                            long now = DateTime.UtcNow.Ticks;
-                            float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
-                            s_lastLoggedTicks = now;
-                            file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog, message);
-                        }
-                    }
-                    catch (IOException)
+                    using (StreamWriter file = FileUtilities.OpenWrite(
+                        String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId), append: true))
                     {
-                        // Ignore
+                        long now = DateTime.UtcNow.Ticks;
+                        float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
+                        s_lastLoggedTicks = now;
+                        file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog, message);
                     }
                 }
+                catch (IOException)
+                {
+                    // Ignore
+                }
             }
         }
 
