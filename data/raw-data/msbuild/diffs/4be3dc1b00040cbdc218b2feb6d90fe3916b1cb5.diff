diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
index a80f885b862..5df77259f6e 100644
--- a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
@@ -19,32 +19,24 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// Making this a record struct to avoid allocations (unless called through interface - which leads to boxing).
 /// This is wanted since this can be used in a hot path (of property reads and writes)
 /// </remarks>
-internal readonly record struct AnalysisLoggingContext : IAnalysisContext
+internal readonly struct AnalysisLoggingContext(ILoggingService loggingService, BuildEventContext eventContext)
+    : IAnalysisContext
 {
-    private readonly ILoggingService _loggingService;
-    private readonly BuildEventContext _eventContext;
-
-    public AnalysisLoggingContext(ILoggingService loggingService, BuildEventContext eventContext)
-    {
-        _loggingService = loggingService;
-        _eventContext = eventContext;
-    }
-
-    public BuildEventContext BuildEventContext => _eventContext;
+    public BuildEventContext BuildEventContext => eventContext;
 
     public void DispatchBuildEvent(BuildEventArgs buildEvent)
-        => _loggingService
+        => loggingService
             .LogBuildEvent(buildEvent);
 
     public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)
-        => _loggingService
-            .LogComment(_eventContext, importance, messageResourceName, messageArgs);
+        => loggingService
+            .LogComment(eventContext, importance, messageResourceName, messageArgs);
 
     public void DispatchAsCommentFromText(MessageImportance importance, string message)
-        => _loggingService
-            .LogCommentFromText(_eventContext, importance, message);
+        => loggingService
+            .LogCommentFromText(eventContext, importance, message);
 
     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)
-        => _loggingService
-            .LogErrorFromText(_eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
+        => loggingService
+            .LogErrorFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 8499a3dfa63..c81c251b794 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -401,6 +401,13 @@ public void FinalizeProcessing(LoggingContext loggingContext)
         }
 
         private readonly ConcurrentDictionary<int, string> _projectsByContextId = new();
+        /// <summary>
+        /// This method fetches the project full path from the context id.
+        /// This is needed because the full path is needed for configuration and later for fetching configured checks
+        ///  (future version might optimize by using the ProjectContextId directly for fetching the checks).
+        /// </summary>
+        /// <param name="buildEventContext"></param>
+        /// <returns></returns>
         private string GetProjectFullPath(BuildEventContext buildEventContext)
         {
             const string defaultProjectFullPath = "Unknown_Project";
@@ -412,7 +419,7 @@ private string GetProjectFullPath(BuildEventContext buildEventContext)
             else if (buildEventContext.ProjectContextId == BuildEventContext.InvalidProjectContextId &&
                      _projectsByContextId.Count == 1)
             {
-                // The coalescing is for a rare possibility of a race where other thread removed the item.
+                // The coalescing is for a rare possibility of a race where other thread removed the item (between the if check and fetch here).
                 // We currently do not support multiple projects in parallel in a single node anyway.
                 return _projectsByContextId.FirstOrDefault().Value ?? defaultProjectFullPath;
             }
@@ -468,7 +475,10 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, AnalysisLoggi
                 return;
             }
 
-            PropertyReadData propertyReadData = new(GetProjectFullPath(analysisContext.BuildEventContext), propertyReadInfo);
+            PropertyReadData propertyReadData = new(
+                GetProjectFullPath(analysisContext.BuildEventContext),
+                analysisContext.BuildEventContext.ProjectInstanceId,
+                propertyReadInfo);
             _buildEventsProcessor.ProcessPropertyRead(propertyReadData, analysisContext);
         }
 
@@ -479,7 +489,10 @@ public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, AnalysisLo
                 return;
             }
 
-            PropertyWriteData propertyWriteData = new(GetProjectFullPath(analysisContext.BuildEventContext), propertyWriteInfo);
+            PropertyWriteData propertyWriteData = new(
+                GetProjectFullPath(analysisContext.BuildEventContext),
+                analysisContext.BuildEventContext.ProjectInstanceId,
+                propertyWriteInfo);
             _buildEventsProcessor.ProcessPropertyWrite(propertyWriteData, analysisContext);
         }
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index d4535bf161e..9b769125ffd 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -55,7 +55,10 @@ internal void ProcessEvaluationFinishedEventArgs(
             static (dict, kvp) => dict.Add(kvp.Key, kvp.Value));
 
         EvaluatedPropertiesAnalysisData analysisData =
-            new(evaluationFinishedEventArgs.ProjectFile!, propertiesLookup, _evaluatedEnvironmentVariables);
+            new(evaluationFinishedEventArgs.ProjectFile!,
+                evaluationFinishedEventArgs.BuildEventContext?.ProjectInstanceId,
+                propertiesLookup,
+                _evaluatedEnvironmentVariables);
 
         _buildCheckCentralContext.RunEvaluatedPropertiesActions(analysisData, analysisContext, ReportResult);
 
@@ -65,7 +68,9 @@ internal void ProcessEvaluationFinishedEventArgs(
                 evaluationFinishedEventArgs.ProjectFile!, /*unused*/
                 null, /*unused*/null, _cache, false /*Not explicitly loaded - unused*/);
 
-            ParsedItemsAnalysisData itemsAnalysisData = new(evaluationFinishedEventArgs.ProjectFile!,
+            ParsedItemsAnalysisData itemsAnalysisData = new(
+                evaluationFinishedEventArgs.ProjectFile!,
+                evaluationFinishedEventArgs.BuildEventContext?.ProjectInstanceId,
                 new ItemsHolder(xml.Items, xml.ItemGroups));
 
             _buildCheckCentralContext.RunParsedItemsActions(itemsAnalysisData, analysisContext, ReportResult);
@@ -109,6 +114,7 @@ internal void ProcessTaskStartedEventArgs(
                 TaskParameters = taskParameters,
                 AnalysisData = new(
                     projectFilePath: taskStartedEventArgs.ProjectFile!,
+                    projectInstanceId: taskStartedEventArgs.BuildEventContext.ProjectInstanceId,
                     taskInvocationLocation: invocationLocation,
                     taskName: taskStartedEventArgs.TaskName,
                     taskAssemblyLocation: taskStartedEventArgs.TaskAssemblyLocation,
@@ -189,7 +195,7 @@ public void ProcessPropertyWrite(PropertyWriteData propertyWriteData, AnalysisLo
 
     public void ProcessProjectDone(IAnalysisContext analysisContext, string projectFullPath)
         => _buildCheckCentralContext.RunProjectProcessingDoneActions(
-                new ProjectProcessingDoneData(projectFullPath),
+                new ProjectProcessingDoneData(projectFullPath, analysisContext.BuildEventContext.ProjectInstanceId),
                 analysisContext,
                 ReportResult);
 
diff --git a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
index 01db72e1db3..cad281012a1 100644
--- a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
+++ b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
@@ -18,7 +18,8 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// Base for a data passed from infrastructure to build analyzers.
 /// </summary>
 /// <param name="projectFilePath">Currently built project.</param>
-public abstract class AnalysisData(string projectFilePath)
+/// <param name="projectInstanceId">The unique id of a project with unique global properties set.</param>
+public abstract class AnalysisData(string projectFilePath, int? projectInstanceId)
 {
     private string? _projectFileDirectory;
 
@@ -27,6 +28,14 @@ public abstract class AnalysisData(string projectFilePath)
     /// </summary>
     public string ProjectFilePath { get; } = projectFilePath;
 
+    /// <summary>
+    /// The unique id of a project with unique global properties set.
+    /// This is helpful to distinguish between different configurations of a single project in case of multitargeting.
+    ///
+    /// In cases where the project instance cannot be determined, it will be set to <see cref="BuildEventContext.InvalidProjectInstanceId"/>.
+    /// </summary>
+    public int ProjectInstanceId { get; } = projectInstanceId ?? BuildEventContext.InvalidProjectInstanceId;
+
     /// <summary>
     /// Directory path of the file being built (the containing directory of <see cref="ProjectFilePath"/>).
     /// </summary>
diff --git a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
index af2b5fef481..1c34552cd21 100644
--- a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
@@ -13,9 +13,10 @@ public class EvaluatedPropertiesAnalysisData : AnalysisData
 {
     internal EvaluatedPropertiesAnalysisData(
         string projectFilePath,
+        int? projectInstanceId,
         IReadOnlyDictionary<string, string> evaluatedProperties,
         IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)
-        : base(projectFilePath)
+        : base(projectFilePath, projectInstanceId)
     {
         EvaluatedProperties = evaluatedProperties;
         EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
diff --git a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
index fdaf92aa510..04ac41ca1d7 100644
--- a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
@@ -46,8 +46,9 @@ public class ParsedItemsAnalysisData : AnalysisData
 {
     internal ParsedItemsAnalysisData(
         string projectFilePath,
+        int? projectInstanceId,
         ItemsHolder itemsHolder) :
-        base(projectFilePath) => ItemsHolder = itemsHolder;
+        base(projectFilePath, projectInstanceId) => ItemsHolder = itemsHolder;
 
     public ItemsHolder ItemsHolder { get; }
 }
@@ -108,11 +109,12 @@ public IEnumerable<string> EnumerateStringValues()
 
     internal TaskInvocationAnalysisData(
         string projectFilePath,
+        int? projectInstanceId,
         ElementLocation taskInvocationLocation,
         string taskName,
         string taskAssemblyLocation,
         IReadOnlyDictionary<string, TaskParameter> parameters)
-        : base(projectFilePath)
+        : base(projectFilePath, projectInstanceId)
     {
         TaskInvocationLocation = taskInvocationLocation;
         TaskName = taskName;
diff --git a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
index 3d1d21d39c6..14fb0cbbeb4 100644
--- a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
+++ b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
@@ -5,4 +5,4 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
-internal class ProjectProcessingDoneData(string projectFilePath) : AnalysisData(projectFilePath);
+internal class ProjectProcessingDoneData(string projectFilePath, int? projectInstanceId) : AnalysisData(projectFilePath, projectInstanceId);
diff --git a/src/Build/BuildCheck/OM/PropertyReadData.cs b/src/Build/BuildCheck/OM/PropertyReadData.cs
index 073e9430635..d2083bedebc 100644
--- a/src/Build/BuildCheck/OM/PropertyReadData.cs
+++ b/src/Build/BuildCheck/OM/PropertyReadData.cs
@@ -13,16 +13,19 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 internal class PropertyReadData(
     string projectFilePath,
+    int? projectInstanceId,
     string propertyName,
     IMsBuildElementLocation elementLocation,
     bool isUninitialized,
     PropertyReadContext propertyReadContext)
-    : AnalysisData(projectFilePath)
+    : AnalysisData(projectFilePath, projectInstanceId)
 {
     public PropertyReadData(
         string projectFilePath,
+        int? projectInstanceId,
         PropertyReadInfo propertyReadInfo)
         : this(projectFilePath,
+            projectInstanceId,
             propertyReadInfo.PropertyName.Substring(propertyReadInfo.StartIndex, propertyReadInfo.EndIndex - propertyReadInfo.StartIndex + 1),
             propertyReadInfo.ElementLocation,
             propertyReadInfo.IsUninitialized,
diff --git a/src/Build/BuildCheck/OM/PropertyWriteData.cs b/src/Build/BuildCheck/OM/PropertyWriteData.cs
index e04bf451eb6..483fcf2f594 100644
--- a/src/Build/BuildCheck/OM/PropertyWriteData.cs
+++ b/src/Build/BuildCheck/OM/PropertyWriteData.cs
@@ -13,13 +13,15 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 internal class PropertyWriteData(
     string projectFilePath,
+    int? projectInstanceId,
     string propertyName,
     IMsBuildElementLocation? elementLocation,
     bool isEmpty)
-    : AnalysisData(projectFilePath)
+    : AnalysisData(projectFilePath, projectInstanceId)
 {
-    public PropertyWriteData(string projectFilePath, PropertyWriteInfo propertyWriteInfo)
+    public PropertyWriteData(string projectFilePath, int? projectInstanceId, PropertyWriteInfo propertyWriteInfo)
         : this(projectFilePath,
+            projectInstanceId,
             propertyWriteInfo.PropertyName,
             propertyWriteInfo.ElementLocation,
             propertyWriteInfo.IsEmpty)
diff --git a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
index b2d3b7bc543..78a7bd92901 100644
--- a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
+++ b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
@@ -61,6 +61,7 @@ private TaskInvocationAnalysisData MakeTaskInvocationData(string taskName, Dicti
             string projectFile = NativeMethodsShared.IsWindows ? @"C:\fake\project.proj" : "/fake/project.proj";
             return new TaskInvocationAnalysisData(
                 projectFile,
+                null,
                 Construction.ElementLocation.EmptyLocation,
                 taskName,
                 projectFile,
