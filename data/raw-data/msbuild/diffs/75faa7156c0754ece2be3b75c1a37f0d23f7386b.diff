diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 3fdbf100f25..8f43febd65d 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -166,7 +166,7 @@ private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
         {
             try
             {
-                return (ProjectCachePluginBase) Activator.CreateInstance(pluginType)!;
+                return (ProjectCachePluginBase)Activator.CreateInstance(pluginType)!;
             }
             catch (TargetInvocationException e) when (e.InnerException != null)
             {
@@ -200,7 +200,7 @@ Assembly LoadAssembly(string resolverPath)
             IEnumerable<Type> GetTypes<T>(Assembly assembly)
             {
                 return assembly.ExportedTypes
-                    .Select(type => new {type, info = type.GetTypeInfo()})
+                    .Select(type => new { type, info = type.GetTypeInfo() })
                     .Where(
                         t => t.info.IsClass &&
                              t.info.IsPublic &&
@@ -252,7 +252,8 @@ public void PostCacheRequest(CacheRequest cacheRequest)
 
                     ErrorUtilities.VerifyThrowInternalError(
                         previousValue is null || previousValue == false || isDesignTimeBuild,
-                        "Either all builds in a build session or design time builds, or none");
+                        "Either all builds in a build session or design time builds, or none",
+                        (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
 
                     // No point progressing with expensive plugin initialization or cache query if design time build detected.
                     if (DesignTimeBuildsDetected)
@@ -285,7 +286,8 @@ public void PostCacheRequest(CacheRequest cacheRequest)
                 ErrorUtilities.VerifyThrowInternalError(
                     LateInitializationForVSWorkaroundCompleted is null ||
                     (_projectCacheDescriptor.VsWorkaround && LateInitializationForVSWorkaroundCompleted.Task.IsCompleted),
-                    "Completion source should be null when this is not the VS workaround");
+                    "Completion source should be null when this is not the VS workaround",
+                    (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
 
                 BuildRequestData buildRequest = new BuildRequestData(
                     cacheRequest.Configuration.Project,
@@ -450,7 +452,7 @@ void RemoveProjectSpecificGlobalProperties(Dictionary<string, string> globalProp
                     // InnerBuildPropertyName is TargetFramework for the managed sdk.
                     var innerBuildPropertyName = ProjectInterpretation.GetInnerBuildPropertyName(project);
 
-                    IEnumerable<string> projectSpecificPropertyNames = new []{innerBuildPropertyName, "Configuration", "Platform", "TargetPlatform", "OutputType"};
+                    IEnumerable<string> projectSpecificPropertyNames = new[] { innerBuildPropertyName, "Configuration", "Platform", "TargetPlatform", "OutputType" };
 
                     foreach (var propertyName in projectSpecificPropertyNames)
                     {
@@ -590,8 +592,11 @@ public async Task ShutDown()
                 MSBuildEventSource.Log.ProjectCacheEndBuildStart(_projectCachePluginTypeName);
 
                 await _projectCachePlugin.EndBuildAsync(pluginLogger, _cancellationToken);
-
-                if (pluginLogger.HasLoggedErrors)
+                bool isCanceled = (_cancellationToken.CanBeCanceled && !_cancellationToken.IsCancellationRequested);
+                /* mismatches between the current plugin state and expected state can occur when force quitting via ctrl+c, and these mismatches are logged as errors
+                 so we will only throw if the application has not been canceled.
+                */
+                if (pluginLogger.HasLoggedErrors && !isCanceled)
                 {
                     ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheShutdownFailed");
                 }
@@ -654,7 +659,7 @@ private void CheckInState(ProjectCacheServiceState expectedState)
         {
             lock (this)
             {
-                ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $"Expected state {expectedState}, actual state {_serviceState}");
+                ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $"Expected state {expectedState}, actual state {_serviceState}", (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
             }
         }
 
@@ -662,7 +667,7 @@ private void CheckNotInState(ProjectCacheServiceState unexpectedState)
         {
             lock (this)
             {
-                ErrorUtilities.VerifyThrowInternalError(_serviceState != unexpectedState, $"Unexpected state {_serviceState}");
+                ErrorUtilities.VerifyThrowInternalError(_serviceState != unexpectedState, $"Unexpected state {_serviceState}", (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
             }
         }
 
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index e3804e0bb28..a8370c6b208 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1768,7 +1768,8 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
                         {
                             ErrorUtilities.VerifyThrowInternalError(
                                 _configCache.HasConfiguration(request.ConfigurationId),
-                                "A request should have a configuration if it makes it this far in the build process.");
+                                "A request should have a configuration if it makes it this far in the build process.",
+                                false);
 
                             var config = _configCache[request.ConfigurationId];
                             var globalProperties = string.Join(
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 7b9017f4701..03afebd21ff 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -53,7 +53,8 @@ public static void DebugTraceMessage(string category, string formatstring, param
 
         internal static void VerifyThrowInternalError(bool condition, string message, params object[] args)
         {
-            if (s_throwExceptions && !condition)
+            // do nothing if there is a cancellation requested and there is state mismatch.
+            if (s_throwExceptions && !condition && (bool)args[0] == false)
             {
                 throw new InternalErrorException(ResourceUtilities.FormatString(message, args));
             }
