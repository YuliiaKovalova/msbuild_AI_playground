diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index a9eabeea1b3..f26cec62bd3 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1859,7 +1859,7 @@ private void LogConflict(Reference reference, string fusionName)
         /// </summary>
         private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
         {
-            _cache = (SystemState)StateFileBase.DeserializeCache(_stateFile, Log, typeof(SystemState));
+            _cache = StateFileBase.DeserializeCache<SystemState>(_stateFile, Log);
 
             if (_cache == null)
             {
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index e174d3e8f0d..dc1351a855a 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -167,7 +167,7 @@ internal override void SerializeCache(string stateFile, TaskLoggingHelper log)
         /// </summary>
         internal static ResGenDependencies DeserializeCache(string stateFile, bool useSourcePath, TaskLoggingHelper log)
         {
-            var retVal = (ResGenDependencies)DeserializeCache(stateFile, log, typeof(ResGenDependencies)) ?? new ResGenDependencies();
+            var retVal = DeserializeCache<ResGenDependencies>(stateFile, log);
 
             // Ensure that the cache is properly initialized with respect to how resgen will 
             // resolve linked files within .resx files.  ResGen has two different
diff --git a/src/Tasks/ResolveComReference.cs b/src/Tasks/ResolveComReference.cs
index 63fef7d822d..eb711365760 100644
--- a/src/Tasks/ResolveComReference.cs
+++ b/src/Tasks/ResolveComReference.cs
@@ -325,7 +325,7 @@ public override bool Execute()
             allProjectRefs = new List<ComReferenceInfo>();
             allDependencyRefs = new List<ComReferenceInfo>();
 
-            _timestampCache = (ResolveComReferenceCache)StateFileBase.DeserializeCache(StateFile, Log, typeof(ResolveComReferenceCache));
+            _timestampCache = StateFileBase.DeserializeCache<ResolveComReferenceCache>(StateFile, Log);
 
             if (_timestampCache == null || (_timestampCache != null && !_timestampCache.ToolPathsMatchCachePaths(_tlbimpPath, _aximpPath)))
             {
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index ec09003778a..af919800b7d 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -65,9 +65,9 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
         /// <summary>
         /// Reads the specified file from disk into a StateFileBase derived object.
         /// </summary>
-        internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelper log, Type requiredReturnType, bool logWarnings = true)
+        internal static T DeserializeCache<T>(string stateFile, TaskLoggingHelper log, bool logWarnings = true) where T : StateFileBase
         {
-            StateFileBase retVal = null;
+            T retVal = null;
             object deserializedObject = null;
 
             // First, we read the cache from disk if one exists, or if one does not exist
@@ -80,7 +80,7 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
                     {
                         var formatter = new BinaryFormatter();
                         deserializedObject = formatter.Deserialize(s);
-                        retVal = deserializedObject as StateFileBase;
+                        retVal = deserializedObject as T;
                     }
                     // If the deserialized object is null then there would be no cast error but retVal would still be null
                     // only log the message if there would have been a cast error
@@ -91,7 +91,7 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
                         // If there is an invalid cast, a message rather than a warning should be emitted.
                         log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
                     }
-                    else if (retVal != null && (!requiredReturnType.IsInstanceOfType(retVal)))
+                    else if (retVal != null && !(retVal is T))
                     {
                         if (logWarnings)
                         {
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 408442c2412..a2f7b6251b0 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -572,7 +572,7 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
             foreach (string stateFile in stateFiles)
             {
                 // Verify that it's a real stateFile; log message but do not error if not
-                SystemState sysState = (SystemState)DeserializeCache(stateFile, log, requiredReturnType, false);
+                SystemState sysState = DeserializeCache<SystemState>(stateFile, log, false);
                 if (sysState == null)
                 {
                     continue;
diff --git a/src/Tasks/UnregisterAssembly.cs b/src/Tasks/UnregisterAssembly.cs
index 928fb7aecce..dc67f9a9063 100644
--- a/src/Tasks/UnregisterAssembly.cs
+++ b/src/Tasks/UnregisterAssembly.cs
@@ -49,7 +49,7 @@ public override bool Execute()
 
             if (AssemblyListFile != null)
             {
-                cacheFile = (AssemblyRegistrationCache)StateFileBase.DeserializeCache(AssemblyListFile.ItemSpec, Log, typeof(AssemblyRegistrationCache));
+                cacheFile = StateFileBase.DeserializeCache<AssemblyRegistrationCache>(AssemblyListFile.ItemSpec, Log);
 
                 // no cache file, nothing to do. In case there was a problem reading the cache file, we can't do anything anyway.
                 if (cacheFile == null)
