diff --git a/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs b/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
index 4e164d177c3..872b437f49c 100644
--- a/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using Microsoft.Build.BuildCheck.OM;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
@@ -16,4 +17,6 @@ public interface IBuildCheckRegistrationContext
     void RegisterEnvironmentVariableReadAction(Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction);
 
     void RegisterBuildFinishedAction(Action<BuildCheckDataContext<BuildFinishedCheckData>> buildFinishedAction);
+
+    void RegisterProjectImportedAction(Action<BuildCheckDataContext<ProjectImportedCheckData>> projectImportedAction);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index 6e011090046..fe2f9797805 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -4,11 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.BuildCheck.Acquisition;
-using Microsoft.Build.Experimental.BuildCheck.Utilities;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -44,6 +40,7 @@ internal BuildCheckBuildEventHandler(
             { typeof(TaskFinishedEventArgs), (BuildEventArgs e) => HandleTaskFinishedEvent((TaskFinishedEventArgs)e) },
             { typeof(TaskParameterEventArgs), (BuildEventArgs e) => HandleTaskParameterEvent((TaskParameterEventArgs)e) },
             { typeof(BuildFinishedEventArgs), (BuildEventArgs e) => HandleBuildFinishedEvent((BuildFinishedEventArgs)e) },
+            { typeof(ProjectImportedEventArgs), (BuildEventArgs e) => HandleProjectImportedEvent((ProjectImportedEventArgs)e) },
         };
 
         // During restore we'll wait only for restore to be done.
@@ -141,6 +138,11 @@ private void HandleEnvironmentVariableReadEvent(EnvironmentVariableReadEventArgs
                 _checkContextFactory.CreateCheckContext(GetBuildEventContext(eventArgs)),
                 eventArgs);
 
+    private void HandleProjectImportedEvent(ProjectImportedEventArgs eventArgs)
+        => _buildCheckManager.ProcessProjectImportedEventArgs(
+                _checkContextFactory.CreateCheckContext(GetBuildEventContext(eventArgs)),
+                eventArgs);
+
     private bool IsMetaProjFile(string? projectFile) => projectFile?.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase) == true;
 
     private readonly BuildCheckTracingData _tracingData = new BuildCheckTracingData();
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index 4d1ddbfc907..1228e86fbc3 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.BuildCheck.OM;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
@@ -29,10 +30,11 @@ private record CallbackRegistry(
         List<(CheckWrapper, Action<BuildCheckDataContext<PropertyWriteData>>)> PropertyWriteActions,
         List<(CheckWrapper, Action<BuildCheckDataContext<ProjectRequestProcessingDoneData>>)> ProjectRequestProcessingDoneActions,
         List<(CheckWrapper, Action<BuildCheckDataContext<BuildFinishedCheckData>>)> BuildFinishedActions,
-        List<(CheckWrapper, Action<BuildCheckDataContext<EnvironmentVariableCheckData>>)> EnvironmentVariableCheckDataActions)
+        List<(CheckWrapper, Action<BuildCheckDataContext<EnvironmentVariableCheckData>>)> EnvironmentVariableCheckDataActions,
+        List<(CheckWrapper, Action<BuildCheckDataContext<ProjectImportedCheckData>>)> ProjectImportedCheckDataActions)
     {
         public CallbackRegistry()
-            : this([], [], [], [], [], [], [], [])
+            : this([], [], [], [], [], [], [], [], [])
         {
         }
 
@@ -62,6 +64,7 @@ internal void DeregisterCheck(CheckWrapper check)
     internal bool HasPropertyReadActions => _globalCallbacks.PropertyReadActions.Count > 0;
 
     internal bool HasPropertyWriteActions => _globalCallbacks.PropertyWriteActions.Count > 0;
+
     internal bool HasBuildFinishedActions => _globalCallbacks.BuildFinishedActions.Count > 0;
 
     internal void RegisterEnvironmentVariableReadAction(CheckWrapper check, Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction)
@@ -90,6 +93,9 @@ internal void RegisterProjectRequestProcessingDoneAction(CheckWrapper check, Act
     internal void RegisterBuildFinishedAction(CheckWrapper check, Action<BuildCheckDataContext<BuildFinishedCheckData>> buildFinishedAction)
         => RegisterAction(check, buildFinishedAction, _globalCallbacks.BuildFinishedActions);
 
+    internal void RegisterProjectImportedAction(CheckWrapper check, Action<BuildCheckDataContext<ProjectImportedCheckData>> projectImportedAction)
+        => RegisterAction(check, projectImportedAction, _globalCallbacks.ProjectImportedCheckDataActions);
+
     private void RegisterAction<T>(
         CheckWrapper wrappedCheck,
         Action<BuildCheckDataContext<T>> handler,
@@ -167,10 +173,14 @@ internal void RunProjectProcessingDoneActions(
     internal void RunBuildFinishedActions(
         BuildFinishedCheckData buildFinishedCheckData,
         ICheckContext checkContext,
-        Action<CheckWrapper, ICheckContext, CheckConfigurationEffective[], BuildCheckResult>
-            resultHandler)
-        => RunRegisteredActions(_globalCallbacks.BuildFinishedActions, buildFinishedCheckData,
-            checkContext, resultHandler);
+        Action<CheckWrapper, ICheckContext, CheckConfigurationEffective[], BuildCheckResult> resultHandler)
+        => RunRegisteredActions(_globalCallbacks.BuildFinishedActions, buildFinishedCheckData, checkContext, resultHandler);
+
+    internal void RunProjectImportedActions(
+        ProjectImportedCheckData projectImportedCheckData,
+        ICheckContext checkContext,
+        Action<CheckWrapper, ICheckContext, CheckConfigurationEffective[], BuildCheckResult> resultHandler)
+        => RunRegisteredActions(_globalCallbacks.ProjectImportedCheckDataActions, projectImportedCheckData, checkContext, resultHandler);
 
     private void RunRegisteredActions<T>(
         List<(CheckWrapper, Action<BuildCheckDataContext<T>>)> registeredCallbacks,
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs
index 491fe92d700..c9b8d0219e9 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs
@@ -3,13 +3,7 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Experimental.BuildCheck.Acquisition;
 using Microsoft.Build.Framework;
-using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
@@ -20,7 +14,7 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 /// In the future we may need more specific behavior.
 /// </summary>
 /// <remarks>
-/// Ensure that events filtering is in sync with <see cref="BuildCheckConnectorLogger"/>
+/// Ensure that events filtering is in sync with <see cref="BuildCheckConnectorLogger"/>.
 /// </remarks>
 internal class BuildCheckForwardingLogger : IForwardingLogger
 {
@@ -33,10 +27,10 @@ internal class BuildCheckForwardingLogger : IForwardingLogger
     public string? Parameters { get; set; }
 
     /// <summary>
-    /// Set of events to be forwarded to  <see cref="BuildCheckConnectorLogger"/>
+    /// Set of events to be forwarded to  <see cref="BuildCheckConnectorLogger"/>.
     /// </summary>
-    private HashSet<Type> _eventsToForward = new HashSet<Type>
-    {
+    private HashSet<Type> _eventsToForward =
+    [
         typeof(EnvironmentVariableReadEventArgs),
         typeof(BuildSubmissionStartedEventArgs),
         typeof(ProjectEvaluationFinishedEventArgs),
@@ -47,15 +41,13 @@ internal class BuildCheckForwardingLogger : IForwardingLogger
         typeof(BuildCheckAcquisitionEventArgs),
         typeof(TaskStartedEventArgs),
         typeof(TaskFinishedEventArgs),
-        typeof(TaskParameterEventArgs)
-    };
+        typeof(TaskParameterEventArgs),
+        typeof(ProjectImportedEventArgs),
+    ];
 
     public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);
 
-    public void Initialize(IEventSource eventSource)
-    {
-        eventSource.AnyEventRaised += EventSource_AnyEventRaised;
-    }
+    public void Initialize(IEventSource eventSource) => eventSource.AnyEventRaised += EventSource_AnyEventRaised;
 
     public void EventSource_AnyEventRaised(object sender, BuildEventArgs buildEvent)
     {
@@ -65,5 +57,7 @@ public void EventSource_AnyEventRaised(object sender, BuildEventArgs buildEvent)
         }
     }
 
-    public void Shutdown() { }
+    public void Shutdown()
+    {
+    }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 13925ad6d5f..3d2bbd7364c 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -392,6 +392,14 @@ public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext,
             }
         }
 
+        public void ProcessProjectImportedEventArgs(ICheckContext checkContext, ProjectImportedEventArgs projectImportedEventArgs)
+        {
+            if (TryGetProjectFullPath(checkContext.BuildEventContext, out string projectPath))
+            {
+                _buildEventsProcessor.ProcessProjectImportedEventArgs(checkContext, projectPath);
+            }
+        }
+
         public void ProcessTaskStartedEventArgs(
             ICheckContext checkContext,
             TaskStartedEventArgs taskStartedEventArgs)
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 7a932c671f9..58822477cfa 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using Microsoft.Build.BuildCheck.OM;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
@@ -96,6 +97,16 @@ internal void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext
         _buildCheckCentralContext.RunEnvironmentVariableActions(checkData, checkContext, ReportResult);
     }
 
+    /// <summary>
+    /// The method handles events associated with the ProjectImportedEventArgs.
+    /// </summary>
+    internal void ProcessProjectImportedEventArgs(ICheckContext checkContext, string projectPath)
+    {
+        ProjectImportedCheckData checkData = new(projectPath, checkContext.BuildEventContext?.ProjectInstanceId);
+
+        _buildCheckCentralContext.RunProjectImportedActions(checkData, checkContext, ReportResult);
+    }
+
     internal void ProcessBuildDone(ICheckContext checkContext)
     {
         if (!_buildCheckCentralContext.HasBuildFinishedActions)
diff --git a/src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs b/src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs
index 1a0565a50fb..a8918220faf 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs
@@ -2,13 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Threading;
-using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.BuildCheck.OM;
 using Microsoft.Build.Experimental.BuildCheck.Checks;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
-internal sealed class CheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext) : IInternalCheckRegistrationContext
+internal sealed class CheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext)
+    : IInternalCheckRegistrationContext
 {
     public void RegisterEnvironmentVariableReadAction(Action<BuildCheckDataContext<EnvironmentVariableCheckData>> environmentVariableAction) =>
         buildCheckCentralContext.RegisterEnvironmentVariableReadAction(checkWrapper, environmentVariableAction);
@@ -33,4 +33,7 @@ public void RegisterProjectRequestProcessingDoneAction(Action<BuildCheckDataCont
 
     public void RegisterBuildFinishedAction(Action<BuildCheckDataContext<BuildFinishedCheckData>> buildFinishedAction)
         => buildCheckCentralContext.RegisterBuildFinishedAction(checkWrapper, buildFinishedAction);
+
+    public void RegisterProjectImportedAction(Action<BuildCheckDataContext<ProjectImportedCheckData>> projectImportedAction) =>
+        buildCheckCentralContext.RegisterProjectImportedAction(checkWrapper, projectImportedAction);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 552c49dac83..f106507db54 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -61,6 +61,8 @@ void ProcessTaskParameterEventArgs(
 
     void ProcessCheckAcquisition(CheckAcquisitionData acquisitionData, ICheckContext checksContext);
 
+    void ProcessProjectImportedEventArgs(ICheckContext checkContext, ProjectImportedEventArgs projectImportedEventArgs);
+
     BuildCheckTracingData CreateCheckTracingStats();
 
     void FinalizeProcessing(LoggingContext loggingContext);
@@ -69,8 +71,7 @@ void ProcessTaskParameterEventArgs(
     //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
     //  to manager about what checks need to be materialized and configuration fetched.
     // No unloading of checks is yet considered - once loaded it stays for whole build.
-    
-	
+
     // Project might be encountered first time in some node, but be already evaluated in another - so StartProjectEvaluation won't happen
     //  - but we still need to know about it, hence the dedicated event.
     void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, ICheckContext analysisContext, string projectFullPath);
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 294700ef5fc..bcbe2075e84 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -1,11 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Experimental.BuildCheck.Acquisition;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
@@ -82,11 +79,18 @@ public void EndProjectRequest(ICheckContext checkContext, string projectFullPath
     public BuildCheckTracingData CreateCheckTracingStats() => new BuildCheckTracingData();
 
     public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, CheckLoggingContext buildEventContext)
-    { }
+    {
+    }
 
     public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, CheckLoggingContext buildEventContext)
-    { }
+    {
+    }
 
     public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
-    { }
+    {
+    }
+
+    public void ProcessProjectImportedEventArgs(ICheckContext checkContext, ProjectImportedEventArgs projectImportedEventArgs)
+    {
+    }
 }
diff --git a/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs b/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs
new file mode 100644
index 00000000000..9f35a548a98
--- /dev/null
+++ b/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs
@@ -0,0 +1,14 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Experimental.BuildCheck;
+
+namespace Microsoft.Build.BuildCheck.OM;
+
+public class ProjectImportedCheckData : CheckData
+{
+    public ProjectImportedCheckData(string projectFilePath, int? projectConfigurationId)
+        : base(projectFilePath, projectConfigurationId)
+    {
+    }
+}
