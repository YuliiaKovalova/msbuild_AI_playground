diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 025cd370a2c..dc7303f4d25 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -880,7 +880,7 @@ public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)
         /// perform asynchronous execution or access the submission ID prior to executing the request.
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
-        private BuildSubmission<TRequestData, TResultData> PendBuildRequest<TRequestData, TResultData>(
+        private BuildSubmissionBase<TRequestData, TResultData> PendBuildRequest<TRequestData, TResultData>(
             TRequestData requestData)
             where TRequestData : BuildRequestData<TRequestData, TResultData>
             where TResultData : BuildResultBase
@@ -1365,7 +1365,7 @@ private void IssueCacheRequestForBuildSubmission(CacheRequest cacheRequest)
         }
 
         internal void ExecuteSubmission<TRequestData, TResultData>(
-            BuildSubmission<TRequestData, TResultData> submission, bool allowMainThreadBuild)
+            BuildSubmissionBase<TRequestData, TResultData> submission, bool allowMainThreadBuild)
             where TRequestData : BuildRequestDataBase
             where TResultData : BuildResultBase
         {
@@ -2661,7 +2661,7 @@ internal void ReportResultsToSubmission<TRequestData, TResultData>(TResultData r
             {
                 // The build submission has not already been completed.
                 if (_buildSubmissions.TryGetValue(result.SubmissionId, out BuildSubmissionBase? submissionBase) &&
-                    submissionBase is BuildSubmission<TRequestData, TResultData> submission)
+                    submissionBase is BuildSubmissionBase<TRequestData, TResultData> submission)
                 {
                     /* If the request failed because we caught an exception from the loggers, we can assume we will receive no more logging messages for
                      * this submission, therefore set the logging as complete. InternalLoggerExceptions are unhandled exceptions from the logger. If the logger author does
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestData.cs b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
index c462a94489d..510498ed694 100644
--- a/src/Build/BackEnd/BuildManager/BuildRequestData.cs
+++ b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
@@ -252,7 +252,7 @@ public ProjectInstance? ProjectInstance
         /// <value>The project file to be built.</value>
         public string ProjectFullPath { get; internal set; }
 
-        internal override BuildSubmission<BuildRequestData, BuildResult> CreateSubmission(BuildManager buildManager,
+        internal override BuildSubmissionBase<BuildRequestData, BuildResult> CreateSubmission(BuildManager buildManager,
             int submissionId, BuildRequestData requestData,
             bool legacyThreadingSemantics) =>
             new BuildSubmission(buildManager, submissionId, requestData, legacyThreadingSemantics);
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs b/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs
index 51d35b8addf..c31381c083d 100644
--- a/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs
+++ b/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs
@@ -61,7 +61,7 @@ protected BuildRequestData(
             : base(targetNames, flags, hostServices)
         { }
 
-        internal abstract BuildSubmission<TRequestData, TResultData> CreateSubmission(
+        internal abstract BuildSubmissionBase<TRequestData, TResultData> CreateSubmission(
             BuildManager buildManager, int submissionId, TRequestData requestData, bool legacyThreadingSemantics);
     }
 }
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 45bcf87b722..77def07e7bb 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -15,24 +15,24 @@ namespace Microsoft.Build.Execution
     /// <remarks>
     /// When this delegate is invoked, the WaitHandle on the BuildSubmission will have been be signalled and the OverallBuildResult will be valid.
     /// </remarks>
-    public delegate void BuildSubmissionCompleteCallback<TRequestData, TResultData>(
-        BuildSubmission<TRequestData, TResultData> submission)
+    internal delegate void BuildSubmissionCompleteCallbackInternal<TRequestData, TResultData>(
+        BuildSubmissionBase<TRequestData, TResultData> submission)
         where TRequestData : BuildRequestDataBase
         where TResultData : BuildResultBase;
 
-    public abstract class BuildSubmission<TRequestData, TResultData> : BuildSubmissionBase
+    public abstract class BuildSubmissionBase<TRequestData, TResultData> : BuildSubmissionBase
         where TRequestData : BuildRequestDataBase
         where TResultData : BuildResultBase
     {
         /// <summary>
         /// The callback to invoke when the submission is complete.
         /// </summary>
-        private BuildSubmissionCompleteCallback<TRequestData, TResultData>? _completionCallback;
+        private BuildSubmissionCompleteCallbackInternal<TRequestData, TResultData>? _completionCallback;
 
         /// <summary>
         /// Constructor
         /// </summary>
-        protected internal BuildSubmission(BuildManager buildManager, int submissionId, TRequestData requestData)
+        protected internal BuildSubmissionBase(BuildManager buildManager, int submissionId, TRequestData requestData)
             : base(buildManager, submissionId)
         {
             ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
@@ -61,17 +61,8 @@ protected internal BuildSubmission(BuildManager buildManager, int submissionId,
         /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
         public abstract TResultData Execute();
 
-        /// <summary>
-        /// Starts the request asynchronously and immediately returns control to the caller.
-        /// </summary>
-        /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
-        public void ExecuteAsync(BuildSubmissionCompleteCallback<TRequestData, TResultData>? callback, object? context)
-        {
-            ExecuteAsync(callback, context, allowMainThreadBuild: false);
-        }
-
-        protected void ExecuteAsync(
-            BuildSubmissionCompleteCallback<TRequestData, TResultData>? callback,
+        private protected void ExecuteAsync(
+            BuildSubmissionCompleteCallbackInternal<TRequestData, TResultData>? callback,
             object? context,
             bool allowMainThreadBuild)
         {
@@ -151,7 +142,7 @@ void Callback(object? state)
     /// <remarks>
     /// This class is thread-safe.
     /// </remarks>
-    public class BuildSubmission : BuildSubmission<BuildRequestData, BuildResult>
+    public class BuildSubmission : BuildSubmissionBase<BuildRequestData, BuildResult>
     {
         /// <summary>
         /// Flag indicating whether synchronous wait should support legacy threading semantics.
@@ -169,6 +160,20 @@ internal BuildSubmission(BuildManager buildManager, int submissionId, BuildReque
             _legacyThreadingSemantics = legacyThreadingSemantics;
         }
 
+        /// <summary>
+        /// Starts the request asynchronously and immediately returns control to the caller.
+        /// </summary>
+        /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
+        public void ExecuteAsync(BuildSubmissionCompleteCallback? callback, object? context)
+        {
+            void Clb(BuildSubmissionBase<BuildRequestData, BuildResult> submission)
+            {
+                callback?.Invoke((BuildSubmission)submission);
+            }
+
+            ExecuteAsync(Clb, context, allowMainThreadBuild: false);
+        }
+
         /// <summary>
         /// Starts the request and blocks until results are available.
         /// </summary>
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs b/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs
index 9e7fd5f8c69..ba6f45afc09 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs
@@ -60,12 +60,12 @@ protected internal BuildSubmissionBase(BuildManager buildManager, int submission
         public int SubmissionId { get; }
 
         /// <summary>
-        /// The asynchronous context provided to <see cref="BuildSubmission{TRequestData,TResultData}.ExecuteAsync(BuildSubmissionCompleteCallback&lt;TRequestData, TResultData&gt;, object)"/>, if any.
+        /// The asynchronous context provided to <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/>, if any.
         /// </summary>
         public object? AsyncContext { get; protected set; }
 
         /// <summary>
-        /// A <see cref="System.Threading.WaitHandle"/> which will be signalled when the build is complete.  Valid after <see cref="BuildSubmission{TRequestData,TResultData}.Execute()"/> or <see cref="BuildSubmission{TRequestData,TResultData}.ExecuteAsync(BuildSubmissionCompleteCallback&lt;TRequestData, TResultData&gt;, object)"/> returns, otherwise null.
+        /// A <see cref="System.Threading.WaitHandle"/> which will be signalled when the build is complete.  Valid after <see cref="BuildSubmissionBase{TRequestData,TResultData}.Execute()"/> or <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/> returns, otherwise null.
         /// </summary>
         public WaitHandle WaitHandle => CompletionEvent;
 
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index fbf509b93ed..56458bc630c 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -73,7 +73,7 @@ public class BuildResult : BuildResultBase, INodePacket, IBuildResults
         /// <summary>
         /// The set of results for each target.
         /// </summary>
-        private ConcurrentDictionary<string, TargetResult>? _resultsByTarget;
+        private ConcurrentDictionary<string, TargetResult> _resultsByTarget;
 
         /// <summary>
         /// The request caused a circular dependency in scheduling.
@@ -128,6 +128,7 @@ public class BuildResult : BuildResultBase, INodePacket, IBuildResults
         /// </summary>
         public BuildResult()
         {
+            _resultsByTarget = CreateTargetResultDictionary(1);
         }
 
         /// <summary>
@@ -267,6 +268,7 @@ internal BuildResult(BuildResult result, int submissionId, int configurationId,
         private BuildResult(ITranslator translator)
         {
             ((ITranslatable)this).Translate(translator);
+            _resultsByTarget ??= CreateTargetResultDictionary(1);
         }
 
         /// <summary>
@@ -371,7 +373,7 @@ public override BuildResultCode OverallResult
         /// <summary>
         /// Returns an enumerator for all target results in this build result
         /// </summary>
-        public IDictionary<string, TargetResult>? ResultsByTarget
+        public IDictionary<string, TargetResult> ResultsByTarget
         {
             [DebuggerStepThrough]
             get
@@ -645,9 +647,7 @@ internal BuildResult Clone()
                 _parentGlobalRequestId = _parentGlobalRequestId,
                 _nodeRequestId = _nodeRequestId,
                 _requestException = _requestException,
-                _resultsByTarget = _resultsByTarget == null ? null : new ConcurrentDictionary<string, TargetResult>(
-                    _resultsByTarget,
-                    StringComparer.OrdinalIgnoreCase),
+                _resultsByTarget = new ConcurrentDictionary<string, TargetResult>(_resultsByTarget, StringComparer.OrdinalIgnoreCase),
                 _baseOverallResult = OverallResult == BuildResultCode.Success,
                 _circularDependency = _circularDependency
             };
diff --git a/src/Build/Graph/GraphBuildRequestData.cs b/src/Build/Graph/GraphBuildRequestData.cs
index 3ad3660c2a9..7a173627c99 100644
--- a/src/Build/Graph/GraphBuildRequestData.cs
+++ b/src/Build/Graph/GraphBuildRequestData.cs
@@ -185,7 +185,7 @@ private GraphBuildRequestData(ICollection<string> targetsToBuild, HostServices?
         /// <value>The project graph entry points.</value>
         public IEnumerable<ProjectGraphEntryPoint>? ProjectGraphEntryPoints { get; }
 
-        internal override BuildSubmission<GraphBuildRequestData, GraphBuildResult> CreateSubmission(BuildManager buildManager, int submissionId, GraphBuildRequestData requestData,
+        internal override BuildSubmissionBase<GraphBuildRequestData, GraphBuildResult> CreateSubmission(BuildManager buildManager, int submissionId, GraphBuildRequestData requestData,
             bool legacyThreadingSemantics) =>
             new GraphBuildSubmission(buildManager, submissionId, requestData);
 
diff --git a/src/Build/Graph/GraphBuildSubmission.cs b/src/Build/Graph/GraphBuildSubmission.cs
index bd726f1bd6b..6e45cc0231d 100644
--- a/src/Build/Graph/GraphBuildSubmission.cs
+++ b/src/Build/Graph/GraphBuildSubmission.cs
@@ -25,7 +25,7 @@ namespace Microsoft.Build.Graph
     /// <remarks>
     /// This class is thread-safe.
     /// </remarks>
-    public class GraphBuildSubmission : BuildSubmission<GraphBuildRequestData, GraphBuildResult>
+    public class GraphBuildSubmission : BuildSubmissionBase<GraphBuildRequestData, GraphBuildResult>
     {
         internal GraphBuildSubmission(BuildManager buildManager, int submissionId, GraphBuildRequestData requestData) :
             base(buildManager, submissionId, requestData)
@@ -33,6 +33,20 @@ internal GraphBuildSubmission(BuildManager buildManager, int submissionId, Graph
             CompleteLogging();
         }
 
+        /// <summary>
+        /// Starts the request asynchronously and immediately returns control to the caller.
+        /// </summary>
+        /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
+        public void ExecuteAsync(GraphBuildSubmissionCompleteCallback? callback, object? context)
+        {
+            void Clb(BuildSubmissionBase<GraphBuildRequestData, GraphBuildResult> submission)
+            {
+                callback?.Invoke((GraphBuildSubmission)submission);
+            }
+
+            ExecuteAsync(Clb, context, allowMainThreadBuild: false);
+        }
+
         /// <summary>
         /// Starts the request and blocks until results are available.
         /// </summary>
