diff --git a/src/Framework/EncodingUtilities.cs b/src/Framework/EncodingUtilities.cs
index 20475ca62b7..607b5f6a430 100644
--- a/src/Framework/EncodingUtilities.cs
+++ b/src/Framework/EncodingUtilities.cs
@@ -254,7 +254,7 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
 
         /// <summary>
         /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.
-        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.
+        /// To use the corresponding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.
         /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.
         /// If the environment variables are undefined, this function should be a no-op.
         /// </summary>
@@ -264,7 +264,7 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
         /// </returns>
         public static CultureInfo GetExternalOverriddenUILanguageIfSupportableWithEncoding()
         {
-            if (string.Equals(Environment.GetEnvironmentVariable("MSBUILDDISABLEDYNAMICUTFENCODING"), "true", StringComparison.OrdinalIgnoreCase))
+            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8))
             {
                 return null;
             }
@@ -277,9 +277,9 @@ public static CultureInfo GetExternalOverriddenUILanguageIfSupportableWithEncodi
                     CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
                     )
                 {
-                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke chcp ourselves.
+                    // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.
                     Console.OutputEncoding = Encoding.UTF8;
-                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.
+                    // If the InputEncoding is not set, the encoding will work in CMD but not in PowerShell, as the raw CHCP page won't be changed.
                     Console.InputEncoding = Encoding.UTF8;
                     return externalLanguageSetting;
                 }
@@ -288,6 +288,7 @@ public static CultureInfo GetExternalOverriddenUILanguageIfSupportableWithEncodi
                     return externalLanguageSetting;
                 }
             }
+
             return null;
         }
 
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 6c4784bed37..63544655de0 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -644,8 +644,10 @@ public void SetConsoleUICulture()
         }
 
 
-        [Fact]
-        public void ConsoleUIRespectsSDKLanguage()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void ConsoleUIRespectsSDKLanguage(bool enableFeature)
         {
             if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
             {
@@ -665,12 +667,19 @@ public void ConsoleUIRespectsSDKLanguage()
             try
             {
                 // Set the UI language based on the SDK environment var.
-                testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, "ja"); // japanese chose arbitrarily.
-
+                testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, "ja"); // Japanese chose arbitrarily.
+                ChangeWaves.ResetStateForTests();
+                if (!enableFeature)
+                {
+                    testEnvironment.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_8.ToString());
+                }
                 MSBuildApp.SetConsoleUI();
 
-                Assert.Equal(new CultureInfo("ja"), thisThread.CurrentUICulture);
-                Assert.Equal(65001, Console.OutputEncoding.CodePage); // utf 8 enabled for correct rendering.
+                Assert.Equal(enableFeature ? new CultureInfo("ja") : originalUICulture, thisThread.CurrentUICulture);
+                if (enableFeature)
+                {
+                    Assert.Equal(65001, Console.OutputEncoding.CodePage); // UTF-8 enabled for correct rendering.
+                }
             }
             finally
             {
@@ -680,9 +689,11 @@ public void ConsoleUIRespectsSDKLanguage()
                 CultureInfo.CurrentCulture = originalUICulture;
                 CultureInfo.DefaultThreadCurrentUICulture = originalUICulture;
 
-                // MSbuild should also restore the encoding upon exit, but we don't create that context here.
+                // MSBuild should also restore the encoding upon exit, but we don't create that context here.
                 Console.OutputEncoding = originalOutputEncoding;
                 Console.InputEncoding = originalInputEncoding;
+
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
         }
 
