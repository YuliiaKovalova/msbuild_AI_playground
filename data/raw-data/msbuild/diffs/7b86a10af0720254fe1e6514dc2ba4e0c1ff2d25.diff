diff --git a/src/Deprecated/Engine/Engine/BuildTask.cs b/src/Deprecated/Engine/Engine/BuildTask.cs
index 35a9bf9fcf2..ba8cf4f6994 100644
--- a/src/Deprecated/Engine/Engine/BuildTask.cs
+++ b/src/Deprecated/Engine/Engine/BuildTask.cs
@@ -314,7 +314,7 @@ public string[] GetParameterNames()
         {
             if (this.taskElement == null)
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
 
             ArrayList list = new ArrayList();
diff --git a/src/Deprecated/Engine/Engine/Expander.cs b/src/Deprecated/Engine/Engine/Expander.cs
index 3255c4ce3a0..5a5c3e19426 100644
--- a/src/Deprecated/Engine/Engine/Expander.cs
+++ b/src/Deprecated/Engine/Engine/Expander.cs
@@ -1521,7 +1521,7 @@ private static Function ConstructFunction(string expressionFunction, string expr
                     // It may be that there are '()' but no actual arguments content
                     if (argumentStartIndex == expressionFunction.Length - 1)
                     {
-                        functionArguments = new string[0];
+                        functionArguments = Array.Empty<string>();
                     }
                     else
                     {
@@ -1531,7 +1531,7 @@ private static Function ConstructFunction(string expressionFunction, string expr
                         // If there are no arguments, then just create an empty array
                         if (String.IsNullOrEmpty(argumentsContent))
                         {
-                            functionArguments = new string[0];
+                            functionArguments = Array.Empty<string>();
                         }
                         else
                         {
@@ -1547,7 +1547,7 @@ private static Function ConstructFunction(string expressionFunction, string expr
                     int nextMethodIndex = expressionFunction.IndexOf('.', methodStartIndex);
                     int methodLength = expressionFunction.Length - methodStartIndex;
 
-                    functionArguments = new string[0];
+                    functionArguments = Array.Empty<string>();
 
                     if (nextMethodIndex > 0)
                     {
diff --git a/src/Deprecated/Engine/Engine/Node.cs b/src/Deprecated/Engine/Engine/Node.cs
index 25b5959951a..00d5a5b036e 100644
--- a/src/Deprecated/Engine/Engine/Node.cs
+++ b/src/Deprecated/Engine/Engine/Node.cs
@@ -184,7 +184,7 @@ internal CacheEntry[] GetCachedEntriesFromHost(string[] names, string scopeName,
             catch (Exception e)
             {
                 ReportUnhandledError(e);
-                return new CacheEntry[0];
+                return Array.Empty<CacheEntry>();
             }
         }
 
diff --git a/src/Deprecated/Engine/Engine/Project.cs b/src/Deprecated/Engine/Engine/Project.cs
index e99d8f5961b..5e706aa559a 100644
--- a/src/Deprecated/Engine/Engine/Project.cs
+++ b/src/Deprecated/Engine/Engine/Project.cs
@@ -398,7 +398,7 @@ string toolsVersion
                 this.targets = new TargetCollection(this);
 
                 // Initialize the default targets, initial targets, and project file name.
-                this.defaultTargetNames = new string[0];
+                this.defaultTargetNames = Array.Empty<string>();
                 this.initialTargetNamesInMainProject = new ArrayList();
                 this.initialTargetNamesInImportedProjects = new ArrayList();
                 this.FullFileName = String.Empty;
@@ -1532,7 +1532,7 @@ string propertyName
 
             if (propertyValues == null)
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
             else
             {
@@ -3698,7 +3698,7 @@ private void ProcessMainProjectElement
             this.evaluatedItemsIgnoringCondition.Clear();
             this.targets.Clear();
             this.nameOfFirstTarget = null;
-            this.defaultTargetNames = new string[0];
+            this.defaultTargetNames = Array.Empty<string>();
             this.initialTargetNamesInImportedProjects.Clear();
             this.initialTargetNamesInMainProject.Clear();
 
diff --git a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
index f7b892ae87e..9822f112898 100644
--- a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
+++ b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
@@ -118,7 +118,7 @@ public virtual string[] GetValueNames()
         {
             try
             {
-                return Exists() ? WrappedKey.GetValueNames() : new string[] { };
+                return Exists() ? WrappedKey.GetValueNames() : Array.Empty<string>();
             }
             catch (Exception ex)
             {
@@ -139,7 +139,7 @@ public virtual string[] GetSubKeyNames()
         {
             try
             {
-                return Exists() ? WrappedKey.GetSubKeyNames() : new string[] { };
+                return Exists() ? WrappedKey.GetSubKeyNames() : Array.Empty<string>();
             }
             catch (Exception ex)
             {
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
index 892ae43873b..6d9a99bb629 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
@@ -509,7 +509,7 @@ internal int[] GetWaitingTaskData(List<BuildRequest[]> outstandingRequests)
             {
                 return workerThread.GetWaitingTasksData(outstandingRequests);
             }
-            return new int[0];
+            return Array.Empty<int>();
         }
 
         internal void Shutdown()
diff --git a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
index 46a2434dab9..d91e7866749 100644
--- a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
@@ -61,7 +61,7 @@ protected override IEnumerable<PropertyDefinition> ToolsVersions
         {
             get
             {
-                string[] toolsVersionNames = new string[] { };
+                string[] toolsVersionNames = System.Array.Empty<string>();
                 try
                 {
                     toolsVersionNames = msbuildRegistryWrapper.OpenSubKey("ToolsVersions").GetSubKeyNames();
diff --git a/src/Deprecated/Engine/Engine/ToolsetState.cs b/src/Deprecated/Engine/Engine/ToolsetState.cs
index b8e186065bb..231083b4f90 100644
--- a/src/Deprecated/Engine/Engine/ToolsetState.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetState.cs
@@ -184,7 +184,7 @@ private void RegisterDefaultTasks(BuildEventContext buildEventContext)
                 {
                     this.defaultTaskRegistry = new TaskRegistry();
 
-                    string[] defaultTasksFiles = { };
+                    string[] defaultTasksFiles = Array.Empty<string>();
 
                     try
                     {
diff --git a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
index 919014c2898..e0e342034ed 100644
--- a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
+++ b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
@@ -153,7 +153,7 @@ internal string[] ProjectCallStackFromProject(BuildEventContext e)
             // or the event is raised before the project started event
             if (startedEvent == null)
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
 
             List<ProjectStartedEventMinimumFields> projectStackTrace = GetProjectCallStack(e);
diff --git a/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs b/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
index 394b68bbee2..caff6ebf1c2 100644
--- a/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
+++ b/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
@@ -434,11 +434,11 @@ internal bool Equals(AssemblyNameExtension that)
             // Some assemblies (real case was interop assembly) may have null PKTs.
             if (aPKT == null)
             {
-                aPKT = new byte[0];
+                aPKT = Array.Empty<byte>();
             }
             if (bPKT == null)
             {
-                bPKT = new byte[0];
+                bPKT = Array.Empty<byte>();
             }
 
             if (aPKT.Length != bPKT.Length)
diff --git a/src/Deprecated/Engine/Shared/FileMatcher.cs b/src/Deprecated/Engine/Shared/FileMatcher.cs
index 13f25e1be16..af039a4d2ce 100644
--- a/src/Deprecated/Engine/Shared/FileMatcher.cs
+++ b/src/Deprecated/Engine/Shared/FileMatcher.cs
@@ -125,7 +125,7 @@ private static string[] GetAccessibleFilesAndDirectories(string path, string pat
 
             if (entries == null)
             {
-                entries = new string[0];
+                entries = Array.Empty<string>();
             }
 
             return entries;
@@ -181,12 +181,12 @@ bool stripProjectDirectory
             catch (System.Security.SecurityException)
             {
                 // For code access security.
-                return new string[0];
+                return Array.Empty<string>();
             }
             catch (System.UnauthorizedAccessException)
             {
                 // For OS security.
-                return new string[0];
+                return Array.Empty<string>();
             }
         }
 
@@ -233,12 +233,12 @@ string pattern
             catch (System.Security.SecurityException)
             {
                 // For code access security.
-                return new string[0];
+                return Array.Empty<string>();
             }
             catch (System.UnauthorizedAccessException)
             {
                 // For OS security.
-                return new string[0];
+                return Array.Empty<string>();
             }
         }
 
@@ -1202,7 +1202,7 @@ DirectoryExists directoryExists
                     }
                     catch (ArgumentException)
                     {
-                        return new string[0];
+                        return Array.Empty<string>();
                     }
 
                     stripProjectDirectory = !String.Equals(fixedDirectoryPart, oldFixedDirectoryPart, StringComparison.OrdinalIgnoreCase);
@@ -1220,7 +1220,7 @@ DirectoryExists directoryExists
              */
             if (fixedDirectoryPart.Length > 0 && !directoryExists(fixedDirectoryPart))
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
 
             // determine if we need to use the regular expression to match the files
