diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index cf294aa801e..1c42a35048c 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -1,6 +1,6 @@
 <Project>
 
-  <Import Project="..\..\eng\BootStrapMSBuild.props" />
+  <Import Project="BootStrapMSBuild.props" />
   
   <!--
   Copies the binaries of MSBuild to a bootstrap folder so we can rebuild msbuild with itself.
diff --git a/src/Analyzers.UnitTests/BootstrapRunner.cs b/src/Analyzers.UnitTests/BootstrapRunner.cs
index 540abc8ac63..5ac2402511b 100644
--- a/src/Analyzers.UnitTests/BootstrapRunner.cs
+++ b/src/Analyzers.UnitTests/BootstrapRunner.cs
@@ -18,7 +18,7 @@ internal static class BootstrapRunner
         // This should ideally be part of RunnerUtilities - however then we'd need to enforce
         //  all test projects to import the BootStrapMSBuild.props file and declare the BootstrapLocationAttribute.
         // Better solution would be to have a single test utility project - instead of linked code files.
-        public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
+        public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper? outputHelper = null)
         {
             var binaryFolder = Assembly.GetExecutingAssembly()
                 .GetCustomAttribute<BootstrapLocationAttribute>()!
diff --git a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
index dab550407fd..3582a02f151 100644
--- a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
+++ b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
@@ -15,6 +15,10 @@
   <ItemGroup>
     <ProjectReference Include="..\Analyzers\Microsoft.Build.Analyzers.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj" >
+      <Private>false</Private>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs b/src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs
index eb3170f1d52..2ed68e9c706 100644
--- a/src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs
+++ b/src/Analyzers/Infrastructure/AnalyzersConnectorLogger.cs
@@ -7,8 +7,10 @@
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Logging.Analyzers;
 
 namespace Microsoft.Build.Analyzers.Infrastructure;
 internal sealed class AnalyzersConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildAnalysisManager buildAnalysisManager)
@@ -20,6 +22,7 @@ internal sealed class AnalyzersConnectorLogger(IBuildAnalysisLoggingContextFacto
     public void Initialize(IEventSource eventSource)
     {
         eventSource.AnyEventRaised += EventSource_AnyEventRaised;
+        eventSource.BuildFinished += EventSource_BuildFinished;
     }
 
     private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
@@ -27,8 +30,6 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs &&
             !(projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false))
         {
-            // Debugger.Launch();
-
             try
             {
                 buildAnalysisManager.ProcessEvaluationFinishedEventArgs(
@@ -45,8 +46,18 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         // here handling of other event types
     }
 
-    public void Shutdown()
+    private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
     {
+        BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(
+            BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,
+            BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
+
+        LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();
+
         // TODO: here flush the tracing stats: https://github.com/dotnet/msbuild/issues/9629
+        loggingContext.LogCommentFromText(MessageImportance.High, buildAnalysisManager.CreateTracingStats());
     }
+
+    public void Shutdown()
+    { }
 }
diff --git a/src/Analyzers/Infrastructure/BuildAnalysisManager.cs b/src/Analyzers/Infrastructure/BuildAnalysisManager.cs
index 3693dec4f44..113186bac9d 100644
--- a/src/Analyzers/Infrastructure/BuildAnalysisManager.cs
+++ b/src/Analyzers/Infrastructure/BuildAnalysisManager.cs
@@ -60,13 +60,7 @@ public void RegisterAnalyzer(BuildAnalyzer analyzer)
     public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
     {
-        LoggingContext? loggingContext = (buildAnalysisContext as AnalyzerLoggingContext)!;
-
-        if (loggingContext == null)
-        {
-            // error out
-            return;
-        }
+        LoggingContext loggingContext = buildAnalysisContext.ToLoggingContext();
 
         Dictionary<string, string> propertiesLookup = new Dictionary<string, string>();
         Internal.Utilities.EnumerateProperties(evaluationFinishedEventArgs.Properties, propertiesLookup,
@@ -92,7 +86,7 @@ public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buil
 
     // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
     // should have infra as well, should log to AnalyzersConnectorLogger upon shutdown (if requested)
-    internal string CreateTracingStats()
+    public string CreateTracingStats()
     {
         return string.Join(Environment.NewLine,
             _analyzers.Select(a => GetAnalyzerDescriptor(a.BuildAnalyzer) + ": " + a.Elapsed));
diff --git a/src/Build/Logging/Analyzers/AnalyzerLoggingContextFactory.cs b/src/Build/Logging/Analyzers/AnalyzerLoggingContextFactory.cs
index ae60ac0d061..dc09ae76f30 100644
--- a/src/Build/Logging/Analyzers/AnalyzerLoggingContextFactory.cs
+++ b/src/Build/Logging/Analyzers/AnalyzerLoggingContextFactory.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
diff --git a/src/Build/Logging/Analyzers/BuildAnalysisLoggingContextExtensions.cs b/src/Build/Logging/Analyzers/BuildAnalysisLoggingContextExtensions.cs
new file mode 100644
index 00000000000..04a7733f74b
--- /dev/null
+++ b/src/Build/Logging/Analyzers/BuildAnalysisLoggingContextExtensions.cs
@@ -0,0 +1,15 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Experimental;
+
+namespace Microsoft.Build.Logging.Analyzers;
+
+internal static class BuildAnalysisLoggingContextExtensions
+{
+    public static LoggingContext ToLoggingContext(this IBuildAnalysisLoggingContext loggingContext) =>
+        loggingContext as AnalyzerLoggingContext ??
+        throw new InvalidOperationException("The logging context is not an AnalyzerLoggingContext");
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 68c4aa736e3..cdb72622441 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -162,6 +162,7 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Logging\Analyzers\AnalyzerLoggingContext.cs" />
     <Compile Include="Logging\Analyzers\AnalyzerLoggingContextFactory.cs" />
+    <Compile Include="Logging\Analyzers\BuildAnalysisLoggingContextExtensions.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Framework/Analyzers/IBuildAnalysisManager.cs b/src/Framework/Analyzers/IBuildAnalysisManager.cs
index c49fa515708..8a1a7c0d215 100644
--- a/src/Framework/Analyzers/IBuildAnalysisManager.cs
+++ b/src/Framework/Analyzers/IBuildAnalysisManager.cs
@@ -12,7 +12,9 @@ namespace Microsoft.Build.Experimental;
 
 public interface IBuildAnalysisManager
 {
-    internal void ProcessEvaluationFinishedEventArgs(
+    void ProcessEvaluationFinishedEventArgs(
         IBuildAnalysisLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
+
+    string CreateTracingStats();
 }
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index d2b2b866183..c513a46876e 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -16,6 +16,7 @@
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
+    <ProjectReference Include="..\Analyzers\Microsoft.Build.Analyzers.csproj" />
   </ItemGroup>
   <ItemGroup>
     <!-- This file is needed so the dotnet CLI knows how to map preview SDK versions to tfms (because tfms do not have preview information on them) -->
@@ -43,8 +44,8 @@
     <Copy SourceFiles="$(PublishDir)$(AssemblyName).deps.json" DestinationFiles="$(PublishDir)MSBuild.deps.json" SkipUnchangedFiles="true" />
   </Target>
 
-  <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))"/>
-  <Import Project="..\Package\GetBinPaths.Arm64.targets" Condition="$(TargetFramework.StartsWith('net4'))"/>
+  <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))" />
+  <Import Project="..\Package\GetBinPaths.Arm64.targets" Condition="$(TargetFramework.StartsWith('net4'))" />
 
   <Import Project="$(RepoRoot)eng\BootStrapMSBuild.targets" />
 
