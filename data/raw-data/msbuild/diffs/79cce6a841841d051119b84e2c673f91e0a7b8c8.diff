diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index cfeafb90caa..32ffc97de6a 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -406,12 +406,13 @@ private void CollectImports(BuildEventArgs e)
         /// </exception>
         private void ProcessParameters(out bool omitInitialInfo)
         {
+            omitInitialInfo = false;
             if (BinaryLoggerParameters is null)
             {
                 throw new LoggerException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("InvalidBinaryLoggerParameters", ""));
             }
 
-            AttachBLArguments();
+            AttachBLArguments(ref omitInitialInfo);
             AttachBLParameters();
         }
 
@@ -459,7 +460,7 @@ private void UpdateFilePathBaseodOnParameters()
         /// Available arguments: ProjectImports=None, ProjectImports=Embed, ProjectImports=ZipFile,[LogFile=]filename.binlog
         /// </summary>
         /// <exception cref="LoggerException"></exception>
-        private void AttachBLArguments()
+        private void AttachBLArguments(ref bool omitInitialInfo)
         {
             if (string.IsNullOrEmpty(BinaryLoggerParameters.binaryLoggerArguments))
             {
@@ -468,8 +469,7 @@ private void AttachBLArguments()
 
             var parameters = BinaryLoggerParameters.binaryLoggerArguments.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
 
-            omitInitialInfo = false;
-            var parameters = Parameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
+           // var parameters = Parameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
             foreach (var parameter in parameters)
             {
                 if (string.Equals(parameter, "ProjectImports=None", StringComparison.OrdinalIgnoreCase))
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 9e5253f16a7..850eee4163d 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,11 +160,6 @@
     <Compile Include="FileAccess\ProcessData.cs" />
     <Compile Include="FileAccess\ReportedFileOperation.cs" />
     <Compile Include="FileAccess\RequestedAccess.cs" />
-    <Compile Include="Logging\BinaryLogger\BinaryLoggerParameters.cs" />
-    <Compile Include="Logging\BinaryLogger\ExtendedDataFields.cs" />
-    <Compile Include="Logging\BinaryLogger\IBuildEventArgsReaderNotifications.cs" />
-    <Compile Include="Logging\BinaryLogger\IBuildEventStringsReader.cs" />
-    <Compile Include="Logging\BinaryLogger\StringReadEventArgs.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
@@ -526,6 +521,7 @@
     <Compile Include="Evaluation\LazyItemEvaluator.LazyItemOperation.cs" />
     <Compile Include="Logging\BaseConsoleLogger.cs" />
     <Compile Include="Logging\BinaryLogger\BinaryLogger.cs" />
+    <Compile Include="Logging\BinaryLogger\BinaryLoggerParameters.cs" />
     <Compile Include="Logging\BinaryLogger\BinaryLogRecordKind.cs" />
     <Compile Include="Logging\BinaryLogger\BinaryLogReplayEventSource.cs" />
     <Compile Include="Logging\BinaryLogger\BuildEventArgsDispatcher.cs" />
@@ -705,7 +701,8 @@
     </XmlPeek>
 
     <PropertyGroup>
-      <NuGetFrameworkWrapperRedirects_Content><![CDATA[
+      <NuGetFrameworkWrapperRedirects_Content>
+        <![CDATA[
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
@@ -731,4 +728,4 @@ internal sealed partial class NuGetFrameworkWrapper
       <FileWrites Include="$(NuGetFrameworkWrapperRedirects_FilePath)" />
     </ItemGroup>
   </Target>
-</Project>
+</Project>
\ No newline at end of file
