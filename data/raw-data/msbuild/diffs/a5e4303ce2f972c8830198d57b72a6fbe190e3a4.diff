diff --git a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
index 392b3093d12..4363b9fd4d1 100644
--- a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
+++ b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
@@ -36,11 +36,11 @@ public void SamplePropertiesEnumeration()
                 Items = null
             };
 
-            List<(string propertyName, string propertyValue)> results = args.EnumerateProperties().ToList();
+            List<PropertyData> results = args.EnumerateProperties().ToList();
             results.Count.ShouldBe(3);
-            results[0].ShouldBe(("Key", "Value"));
-            results[1].ShouldBe(("prop", "val"));
-            results[2].ShouldBe(("foo", "bar"));
+            results[0].ShouldBe(new("Key", "Value"));
+            results[1].ShouldBe(new("prop", "val"));
+            results[2].ShouldBe(new("foo", "bar"));
         }
 
         [Fact]
@@ -64,18 +64,18 @@ public void SampleItemsEnumeration()
                 }
             };
 
-            List<(string itemType, IItemData itemValue)> results = args.EnumerateItems().ToList();
+            List<ItemData> results = args.EnumerateItems().ToList();
 
             results.Count.ShouldBe(2);
-            results[0].itemType.ShouldBe("Key");
-            results[0].itemValue.ItemSpec.ShouldBe("TestItemSpec");
-            results[0].itemValue.GetEvaluatedInclude().ShouldBe("TestItemSpec");
-            results[0].itemValue.EnumerateMetadata().ShouldBeEmpty();
+            results[0].Type.ShouldBe("Key");
+            results[0].Value.ItemSpec.ShouldBe("TestItemSpec");
+            results[0].Value.GetEvaluatedInclude().ShouldBe("TestItemSpec");
+            results[0].Value.EnumerateMetadata().ShouldBeEmpty();
 
-            results[1].itemType.ShouldBe("Key2");
-            results[1].itemValue.ItemSpec.ShouldBe("spec");
-            results[1].itemValue.GetEvaluatedInclude().ShouldBe("spec");
-            List<KeyValuePair<string, string>> metadata = results[1].itemValue.EnumerateMetadata().ToList();
+            results[1].Type.ShouldBe("Key2");
+            results[1].Value.ItemSpec.ShouldBe("spec");
+            results[1].Value.GetEvaluatedInclude().ShouldBe("spec");
+            List<KeyValuePair<string, string>> metadata = results[1].Value.EnumerateMetadata().ToList();
             metadata.Count.ShouldBe(2);
             metadata[0].Key.ShouldBe("metadat1");
             metadata[0].Value.ShouldBe("val1");
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index 466db6c9bd4..be89342c791 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
@@ -529,22 +530,22 @@ internal Dictionary<string, string> ToDictionary()
             }
         }
 
-        internal IEnumerable<(string propertyName, string propertyValue)> Enumerate()
+        internal IEnumerable<PropertyData> Enumerate()
         {
             lock (_properties)
             {
                 foreach (var kvp in (ICollection<T>)_properties)
                 {
-                    yield return (kvp.Key, EscapingUtilities.UnescapeAll(kvp.EscapedValue));
+                    yield return new(kvp.Key, EscapingUtilities.UnescapeAll(kvp.EscapedValue));
                 }
             }
         }
 
         internal void Enumerate(Action<string, string> keyValueCallback)
         {
-            foreach (var tuple in Enumerate())
+            foreach (var property in Enumerate())
             {
-                keyValueCallback(tuple.propertyName, tuple.propertyValue);
+                keyValueCallback(property.Name, property.Value);
             }
         }
 
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 856a0acc48e..f42747d0d1d 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -148,7 +148,7 @@ internal ProjectItem(
         string IItemData.ItemSpec => this.EvaluatedInclude;
 
         /// <inheritdoc cref="IItemDataWithMetadata.EnumerateMetadata"/>
-        IEnumerable<KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => this.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
+        IEnumerable<KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
 
         /// <summary>
         /// Backing XML item.
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
index 66f0bb3ae28..4d215c8b169 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -21,14 +21,14 @@ public static class BuildEventArgsExtensions
     /// <summary>
     /// Lazy enumerates and strong types properties from Properties property.
     /// </summary>
-    public static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(
+    public static IEnumerable<PropertyData> EnumerateProperties(
         this ProjectEvaluationFinishedEventArgs eventArgs)
         => EnumerateProperties(eventArgs.Properties);
 
     /// <summary>
     /// Lazy enumerates and strong types properties from Properties property.
     /// </summary>
-    public static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(
+    public static IEnumerable<PropertyData> EnumerateProperties(
         this ProjectStartedEventArgs eventArgs)
         => EnumerateProperties(eventArgs.Properties);
 
@@ -37,7 +37,7 @@ public static class BuildEventArgsExtensions
     /// The actual item value might be wrapped to be able to provide defined interface
     /// </summary>
     /// <returns></returns>
-    public static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(
+    public static IEnumerable<ItemData> EnumerateItems(
         this ProjectEvaluationFinishedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
@@ -45,7 +45,7 @@ public static class BuildEventArgsExtensions
     /// Lazy enumerates and strong types items from Items property.
     /// The actual item value might be wrapped to be able to provide defined interface
     /// </summary>
-    public static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(
+    public static IEnumerable<ItemData> EnumerateItems(
         this ProjectStartedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
@@ -73,9 +73,9 @@ public static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(this I
     public static string GetEvaluatedInclude(this IItemData itemData)
         => itemData.ItemSpec;
 
-    private static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable? properties)
+    private static IEnumerable<PropertyData> EnumerateProperties(IEnumerable? properties)
         => Internal.Utilities.EnumerateProperties(properties);
 
-    private static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(IEnumerable? items)
+    private static IEnumerable<ItemData> EnumerateItems(IEnumerable? items)
         => Internal.Utilities.EnumerateItems(items);
 }
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index bd47681f843..49c32ea60e2 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -626,7 +626,7 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)
             return enumerator.ToEnumerable().ToArray();
         }
 
-        public static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable properties)
+        public static IEnumerable<PropertyData> EnumerateProperties(IEnumerable properties)
         {
             if (properties == null)
             {
@@ -646,25 +646,25 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)
                 return CastOneByOne(properties);
             }
 
-            IEnumerable<(string propertyName, string propertyValue)> CastOneByOne(IEnumerable props)
+            IEnumerable<PropertyData> CastOneByOne(IEnumerable props)
             {
                 foreach (var item in props)
                 {
                     if (item is IProperty property && !string.IsNullOrEmpty(property.Name))
                     {
-                        yield return (property.Name, property.EvaluatedValue ?? string.Empty);
+                        yield return new(property.Name, property.EvaluatedValue ?? string.Empty);
                     }
                     else if (item is DictionaryEntry dictionaryEntry && dictionaryEntry.Key is string key && !string.IsNullOrEmpty(key))
                     {
-                        yield return (key, dictionaryEntry.Value as string ?? string.Empty);
+                        yield return new(key, dictionaryEntry.Value as string ?? string.Empty);
                     }
                     else if (item is KeyValuePair<string, string> kvp)
                     {
-                        yield return (kvp.Key, kvp.Value);
+                        yield return new(kvp.Key, kvp.Value);
                     }
                     else if (item is KeyValuePair<string, TimeSpan> keyTimeSpanValue)
                     {
-                        yield return (keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString());
+                        yield return new(keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString());
                     }
                     else
                     {
@@ -685,14 +685,14 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
         {
             foreach (var tuple in EnumerateProperties(properties))
             {
-                callback(arg, new KeyValuePair<string, string>(tuple.propertyName, tuple.propertyValue));
+                callback(arg, new KeyValuePair<string, string>(tuple.Name, tuple.Value));
             }
         }
 
         /// <summary>
         /// Enumerates the given nongeneric enumeration and tries to match or wrap appropriate item types
         /// </summary>
-        public static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(IEnumerable items)
+        public static IEnumerable<ItemData> EnumerateItems(IEnumerable items)
         {
             // The actual type of the item data can be of types:
             //  * <see cref="ProjectItemInstance"/>
@@ -711,14 +711,14 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             {
                 return projectItemInstanceDictionary
                     .EnumerateItemsPerType()
-                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItemData)itemValue)))
+                    .Select(t => t.itemValue.Select(itemValue => new ItemData(t.itemType, (IItemData)itemValue)))
                     .SelectMany(tpl => tpl);
             }
             else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
             {
                 return projectItemDictionary
                     .EnumerateItemsPerType()
-                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItemData)itemValue)))
+                    .Select(t => t.itemValue.Select(itemValue => new ItemData(t.itemType, (IItemData)itemValue)))
                     .SelectMany(tpl => tpl);
             }
             else
@@ -726,7 +726,7 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                 return CastOneByOne(items);
             }
 
-            IEnumerable<(string itemType, IItemData itemValue)> CastOneByOne(IEnumerable itms)
+            IEnumerable<ItemData> CastOneByOne(IEnumerable itms)
             {
                 foreach (var item in itms)
                 {
@@ -769,9 +769,9 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                         }
                     }
 
-                    if (!string.IsNullOrEmpty(itemType))
+                    if (data != null)
                     {
-                        yield return (itemType, data);
+                        yield return new(itemType!, data);
                     }
                 }
             }
@@ -781,7 +781,7 @@ public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> cal
         {
             foreach (var tuple in EnumerateItems(items))
             {
-                callback(new DictionaryEntry(tuple.itemType, tuple.itemValue));
+                callback(new DictionaryEntry(tuple.Type, tuple.Value));
             }
         }
     }
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
index 4c2ab53196f..05b516078db 100644
--- a/src/Framework/IItemData.cs
+++ b/src/Framework/IItemData.cs
@@ -32,3 +32,18 @@ public interface IItemDataWithMetadata : IItemData
     /// </summary>
     IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();
 }
+
+
+/// <summary>
+/// Structure defining single MSBuild property instance.
+/// </summary>
+/// <param name="Name">The name of property - e.g. 'TargetFramework'.</param>
+/// <param name="Value">The actual value of property - e.g. 'net9'.</param>
+public readonly record struct PropertyData(string Name, string Value);
+
+/// <summary>
+/// Structure defining single MSBuild item instance.
+/// </summary>
+/// <param name="Type">The type of property - e.g. 'PackageReference'.</param>
+/// <param name="Value">The actual value of item - e.g. 'System.Text.Json'.</param>
+public readonly record struct ItemData(string Type, IItemData Value);
