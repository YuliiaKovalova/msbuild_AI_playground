diff --git a/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs b/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
new file mode 100644
index 00000000000..c4f56d16b04
--- /dev/null
+++ b/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
@@ -0,0 +1,242 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using System.Collections.Immutable;
+using System.Diagnostics;
+using System.IO;
+using System.Linq;
+using System.Text.RegularExpressions;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+using static Microsoft.Build.Graph.UnitTests.GraphTestingUtilities;
+using static Microsoft.Build.Graph.UnitTests.ProjectGraphTests;
+
+#nullable disable
+
+namespace Microsoft.Build.Graph.UnitTests
+{
+    /// <summary>
+    /// Performs SetPlatform negotiation for all project references when opted
+    /// in via the EnableDynamicPlatformResolution property.
+    /// 
+    /// The static graph mirrors the negotiation during build to determine plartform for each node.
+    /// These tests mirror GetCompatiblePlatform_Tests.cs in order to make sure they both are in sync.
+    /// </summary>
+    public class ProjectGraphSetPlatformTests
+    {
+
+        [Fact]
+        public void ValidateSetPlatformOverride()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x64</Platform>
+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                    <SetPlatform>platform=x86</SetPlatform>
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                        <PropertyGroup>
+                                                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                            <Platforms>x64;AnyCPU</Platforms>
+                                                        </PropertyGroup>
+                                                        <ItemGroup>
+                                                            <ProjectReference Include=""$(MSBuildThisFileDirectory)3.proj"" >
+                                                            </ProjectReference>
+                                                        </ItemGroup>
+                                                    </Project>");
+                var proj3 = env.CreateFile("3.proj", @"
+                                                    <Project>
+                                                        <PropertyGroup>
+                                                            <Platforms>AnyCPU;x86</Platforms>
+                                                        </PropertyGroup>
+                                                    </Project>");
+
+
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+                GetFirstNodeWithProjectNumber(graph, 3).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaPlatformLookupTable()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>win32</Platform>
+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64;x86;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+                
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x64");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaProjectReferencesPlatformLookupTable()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>win32</Platform>
+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64;x86;AnyCPU</Platforms>
+                                                        <PlatformLookupTable>win32=x86</PlatformLookupTable>
+                                                    </PropertyGroup>
+                                                    </Project>");
+               
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaAnyCPUDefault()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x86</Platform>
+                                                                                                <PlatformLookupTable>AnyCPU=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("AnyCPU");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaSamePlatform()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x86</Platform>
+                                                                                                <PlatformLookupTable>x86=AnyCPU</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <PlatformLookupTable></PlatformLookupTable>
+                                                        <Platforms>x86;x64;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+             
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+            }
+        }
+
+        [Fact]
+        public void FailsToResolve()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x86</Platform>
+                                                                                                <PlatformLookupTable>AnyCPU=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+              
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties.ContainsKey("Platform").ShouldBeFalse();
+            }
+        }
+
+        [Fact]
+        public void PlatformIsChosenAsDefault()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // PlatformLookupTable always takes priority. It is typically user-defined.
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x64</Platform>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <platform>x64</platform>
+                                                        <Platforms>x86;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+              
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue("Platform").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue("Platform"));
+            }
+        }
+    }
+}
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 2ba412be28c..9e443496105 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.Collections.Immutable;
-using System.Diagnostics;
 using System.IO;
 using System.Linq;
 using System.Text.RegularExpressions;
@@ -67,58 +66,6 @@ public void ConstructWithSingleNode()
             }
         }
 
-        [Fact]
-        public void  AnyCPUSetPlatformMetaDataWasNotSet()
-        {
-            using (var env = TestEnvironment.Create())
-            {
-                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
-                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
-                                                                                                <Platform>x86</Platform>
-                                                                                                <Platforms>x86</Platforms>
-                                                                                                <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>
-                                                                                            </PropertyGroup>
-                                                                                            <ItemGroup>
-                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
-                                                                                                </ProjectReference>
-                                                                                            </ItemGroup>");
-                var file = env.CreateFile("2.proj", @"
-                                <Project>
-                                <PropertyGroup>
-                                    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>
-                                    <Platforms>AnyCPU</Platforms>
-                                </PropertyGroup>
-                                </Project>");
-                ProjectGraph graph = new ProjectGraph(entryProject.Path);
-                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("AnyCPU");
-            }
-        }
-
-        [Fact]
-        public void SetPlatformMetaDataWasNotSet()
-        {
-            using (var env = TestEnvironment.Create())
-            {
-                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
-                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
-                                                                                                <Platform>x86</Platform>
-                                                                                                <Platforms>x86</Platforms>
-                                                                                            </PropertyGroup>
-                                                                                            <ItemGroup>
-                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
-                                                                                                </ProjectReference>
-                                                                                            </ItemGroup>");
-                var file = env.CreateFile("2.proj", @"
-                                <Project>
-                                <PropertyGroup>
-                                    <Platforms>x86;x64</Platforms>
-                                </PropertyGroup>
-                                </Project>");
-                ProjectGraph graph = new ProjectGraph(entryProject.Path);
-                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
-            }
-        }
-
         [Fact]
         public void ConstructionMetricsAreAvailable()
         {
diff --git a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
index 64da2af0c03..35b43205973 100644
--- a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
+++ b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
@@ -58,6 +58,17 @@ public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectP
             _toolsVersion = MSBuildConstants.CurrentToolsVersion;
             _globalProperties = globalProperties;
         }
+        public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectPropertyInstance> globalProperties, string previousPlatform, string previousPlatformLookupTable)
+        {
+            ErrorUtilities.VerifyThrowArgumentLength(projectFullPath, nameof(projectFullPath));
+            ErrorUtilities.VerifyThrowArgumentNull(globalProperties, nameof(globalProperties));
+
+            _projectFullPath = projectFullPath;
+            _toolsVersion = MSBuildConstants.CurrentToolsVersion;
+            _globalProperties = globalProperties;
+            PreviousPlatform = previousPlatform;
+            PreviousPlatformLookupTable = previousPlatformLookupTable;
+        }
 
         public ConfigurationMetadata(ITranslator translator)
         {
@@ -81,6 +92,10 @@ public ConfigurationMetadata(ITranslator translator)
         /// </summary>
         public string ToolsVersion => _toolsVersion;
 
+        public string PreviousPlatform { get; private set; } = "";
+
+        public string PreviousPlatformLookupTable { get; private set; } = "";
+
         private PropertyDictionary<ProjectPropertyInstance> _globalProperties;
 
         /// <summary>
@@ -167,7 +182,9 @@ private bool InternalEquals(ConfigurationMetadata other)
 
             return ProjectFullPath.Equals(other.ProjectFullPath, StringComparison.OrdinalIgnoreCase) &&
                    ToolsVersion.Equals(other.ToolsVersion, StringComparison.OrdinalIgnoreCase) &&
-                   GlobalProperties.Equals(other.GlobalProperties);
+                   GlobalProperties.Equals(other.GlobalProperties) &&
+                   PreviousPlatform.Equals(other.PreviousPlatform, StringComparison.OrdinalIgnoreCase) &&
+                   PreviousPlatformLookupTable.Equals(other.PreviousPlatformLookupTable, StringComparison.OrdinalIgnoreCase);
         }
 
         private string DebugString()
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 6867d5b76eb..94bddf47f96 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -1,6 +1,3 @@
-// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
@@ -505,51 +502,40 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata,
             var globalProperties = configurationMetadata.GlobalProperties.ToDictionary();
             ProjectGraphNode graphNode;
             ProjectInstance projectInstance;
-
-            if (enableDynamicPlatformResolution){
-
+           
                 projectInstance = _projectInstanceFactory(
-                    configurationMetadata.ProjectFullPath,
-                    null,
-                    _projectCollection);
+                                    configurationMetadata.ProjectFullPath,
+                                    enableDynamicPlatformResolution ? null : globalProperties, // Platform negotiation requires an evaluation with no global properties first
+                                    _projectCollection);
 
-                if (projectInstance == null)
-                {
-                    throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
-                }
+            if (projectInstance == null)
+            {
+                throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
+            }
 
-                var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), globalProperties[PlatformMetadataName], "", projectInstance.FullPath);
+            if (enableDynamicPlatformResolution)
+            {
+                var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformMetadataName), projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), configurationMetadata.PreviousPlatformLookupTable, projectInstance.FullPath, configurationMetadata.PreviousPlatform);
 
-                if (!string.IsNullOrEmpty(SelectedPlatform))
+                if (SelectedPlatform != null)
                 {
-                    globalProperties["platform"] = SelectedPlatform;
+                    globalProperties[PlatformMetadataName] = SelectedPlatform;
+                    if (SelectedPlatform.Equals(String.Empty))
+                    {
+                        globalProperties.Remove(PlatformMetadataName);
+                    }
                 }
 
                 projectInstance = _projectInstanceFactory(
-                    configurationMetadata.ProjectFullPath,
-                    globalProperties,
-                    _projectCollection);
-
-                graphNode = new ProjectGraphNode(projectInstance);
+                                    configurationMetadata.ProjectFullPath,
+                                    globalProperties,
+                                    _projectCollection);
             }
-            else
-            {
-                projectInstance = _projectInstanceFactory(
-                    configurationMetadata.ProjectFullPath,
-                    globalProperties,
-                    _projectCollection);
 
-                if (projectInstance == null)
-                {
-                    throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
-                }
+            graphNode = new ProjectGraphNode(projectInstance);
 
-               graphNode = new ProjectGraphNode(projectInstance);
-            }
-            
             var referenceInfos = ParseReferences(graphNode, ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)));
 
-
             return new ParsedProject(configurationMetadata, graphNode, referenceInfos);
         }
 
@@ -593,8 +579,15 @@ private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate, bo
                         referenceInfo.ReferenceConfiguration.ProjectFullPath
                         ));
                 }
-                
-                SubmitProjectForParsing(referenceInfo.ReferenceConfiguration, enableDynamicPlatformResolution);
+
+                if (!referenceInfo.ProjectReferenceItem.HasMetadata("SetPlatform"))
+                {
+                    SubmitProjectForParsing(referenceInfo.ReferenceConfiguration, enableDynamicPlatformResolution);
+                }
+                else
+                {
+                    SubmitProjectForParsing(referenceInfo.ReferenceConfiguration, false);
+                }
 
                 referenceInfos.Add(referenceInfo);
             }
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 28360e60a9a..223a5d68455 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -98,7 +98,16 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
 
                 var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, globalPropertiesModifiers);
 
-                var referenceConfig = new ConfigurationMetadata(projectReferenceFullPath, referenceGlobalProperties);
+                var RequesterPlatform = "";
+                var RequesterPlatformLookupTable = "";
+
+                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue("EnableDynamicPlatformResolution")))
+                {
+                    RequesterPlatform = requesterInstance.GetPropertyValue("Platform");
+                    RequesterPlatformLookupTable = requesterInstance.GetPropertyValue("PlatformLookupTable");
+                }
+
+                var referenceConfig = new ConfigurationMetadata(projectReferenceFullPath, referenceGlobalProperties, RequesterPlatform, RequesterPlatformLookupTable);
 
                 yield return new ReferenceInfo(referenceConfig, projectReferenceItem);
             }
diff --git a/src/Shared/PlatformNegotiation.cs b/src/Shared/PlatformNegotiation.cs
index ad7a7d372ff..3c52b196e27 100644
--- a/src/Shared/PlatformNegotiation.cs
+++ b/src/Shared/PlatformNegotiation.cs
@@ -14,14 +14,14 @@ namespace Microsoft.Build.Shared
     /// </summary>
     static internal class PlatformNegotiation
     {
-        internal static string? GetNearestPlatform(string referencedProjectPlatform, string projectReferencePlatformsMetadata, string projectReferenceLookupTableMetadata, String platformLookupTable, String projectPath, String CurrentProjectPlatform, TaskLoggingHelper? log = null)
+        internal static string? GetNearestPlatform(string referencedProjectPlatform, string projectReferencePlatformsMetadata, string projectReferenceLookupTableMetadata, String platformLookupTable, String projectPath, String currentProjectPlatform, TaskLoggingHelper? log = null)
         {
             Dictionary<string, string>? currentProjectLookupTable = ExtractLookupTable(platformLookupTable, log);
 
             if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))
                 {
                     log?.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoPlatformsListed", projectPath);
-                    return null;
+                    return "";
                 }
 
                 // Pull platformLookupTable metadata from the referenced project. This allows custom
@@ -38,32 +38,32 @@ static internal class PlatformNegotiation
 
                 // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.
                 // Don't set `buildProjectReferenceAs` and the `_GetProjectReferencePlatformProperties` target will handle the rest.
-                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(CurrentProjectPlatform, StringComparison.OrdinalIgnoreCase))
+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(currentProjectPlatform, StringComparison.OrdinalIgnoreCase))
                 {
                     log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform", projectPath, referencedProjectPlatform);
                 }
                 // Prefer matching platforms
-                else if (projectReferencePlatforms.Contains(CurrentProjectPlatform))
+                else if (projectReferencePlatforms.Contains(currentProjectPlatform))
                 {
-                    buildProjectReferenceAs = CurrentProjectPlatform;
+                    buildProjectReferenceAs = currentProjectPlatform;
                     log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.SamePlatform");
                 }
                 // Prioritize platformLookupTable **metadata** attached to the ProjectReference item
                 // before the current project's table. We do this to allow per-ProjectReference fine tuning.
                 else if (projectReferenceLookupTable != null &&
-                        projectReferenceLookupTable.ContainsKey(CurrentProjectPlatform) &&
-                        projectReferencePlatforms.Contains(projectReferenceLookupTable[CurrentProjectPlatform]))
+                        projectReferenceLookupTable.ContainsKey(currentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(projectReferenceLookupTable[currentProjectPlatform]))
                 {
-                    buildProjectReferenceAs = projectReferenceLookupTable[CurrentProjectPlatform];
-                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", CurrentProjectPlatform, buildProjectReferenceAs, projectReferenceLookupTableMetadata);
+                    buildProjectReferenceAs = projectReferenceLookupTable[currentProjectPlatform];
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", currentProjectPlatform, buildProjectReferenceAs, projectReferenceLookupTableMetadata);
                 }
                 // Current project's translation table follows
                 else if (currentProjectLookupTable != null &&
-                        currentProjectLookupTable.ContainsKey(CurrentProjectPlatform) &&
-                        projectReferencePlatforms.Contains(currentProjectLookupTable[CurrentProjectPlatform]))
+                        currentProjectLookupTable.ContainsKey(currentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(currentProjectLookupTable[currentProjectPlatform]))
                 {
-                    buildProjectReferenceAs = currentProjectLookupTable[CurrentProjectPlatform];
-                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", CurrentProjectPlatform, buildProjectReferenceAs, platformLookupTable);
+                    buildProjectReferenceAs = currentProjectLookupTable[currentProjectPlatform];
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", currentProjectPlatform, buildProjectReferenceAs, platformLookupTable);
                 }
                 // AnyCPU if possible
                 else if (projectReferencePlatforms.Contains("AnyCPU"))
@@ -107,4 +107,4 @@ static internal class PlatformNegotiation
             return table;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index aff6369fcab..9787b51e366 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -70,4 +70,4 @@ public override bool Execute()
             return !Log.HasLoggedErrors;
         }
     }
-}
\ No newline at end of file
+}
