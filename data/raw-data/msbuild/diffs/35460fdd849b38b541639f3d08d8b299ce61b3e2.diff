diff --git a/src/MSBuild.UnitTests/MockStopwatch.cs b/src/MSBuild.UnitTests/MockStopwatch.cs
new file mode 100644
index 00000000000..8c65821140f
--- /dev/null
+++ b/src/MSBuild.UnitTests/MockStopwatch.cs
@@ -0,0 +1,34 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Logging.TerminalLogger;
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+internal sealed class MockStopwatch : StopwatchAbstraction
+{
+    public override double ElapsedSeconds
+    {
+        get
+        {
+            return _elapsed;
+        }
+    }
+
+    public override void Start()
+    {
+        IsStarted = true;
+        Tick();
+    }
+
+    public override void Stop() => IsStarted = false;
+
+    public bool IsStarted { get; private set; }
+
+    private double _elapsed = 0d;
+
+    public void Tick(double seconds = 0.1)
+    {
+        _elapsed += seconds;
+    }
+}
diff --git a/src/MSBuild.UnitTests/NodeStatus_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Tests.cs
index c979d5c5b1a..42e821c4ae6 100644
--- a/src/MSBuild.UnitTests/NodeStatus_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_Tests.cs
@@ -21,7 +21,7 @@ namespace Microsoft.Build.CommandLine.UnitTests;
 [UsesVerify]
 public class NodeStatus_Tests
 {
-    private readonly NodeStatus _status = new("Namespace.Project", "TargetFramework", "Target", new());
+    private readonly NodeStatus _status = new("Namespace.Project", "TargetFramework", "Target", new MockStopwatch());
 
     public NodeStatus_Tests()
     {
diff --git a/src/MSBuild/TerminalLogger/NodeStatus.cs b/src/MSBuild/TerminalLogger/NodeStatus.cs
index c82a3d106d7..d199edc461c 100644
--- a/src/MSBuild/TerminalLogger/NodeStatus.cs
+++ b/src/MSBuild/TerminalLogger/NodeStatus.cs
@@ -14,9 +14,9 @@ internal class NodeStatus
     public string Project { get; }
     public string? TargetFramework { get; }
     public string Target { get; }
-    public Stopwatch Stopwatch { get; }
+    public StopwatchAbstraction Stopwatch { get; }
 
-    public NodeStatus(string project, string? targetFramework, string target, Stopwatch stopwatch)
+    public NodeStatus(string project, string? targetFramework, string target, StopwatchAbstraction stopwatch)
     {
         Project = project;
         TargetFramework = targetFramework;
@@ -35,7 +35,7 @@ obj is NodeStatus status &&
 
     public override string ToString()
     {
-        string duration = Stopwatch.Elapsed.TotalSeconds.ToString("F1");
+        string duration = Stopwatch.ElapsedSeconds.ToString("F1");
 
         return string.IsNullOrEmpty(TargetFramework)
             ? string.Format("{0}{1} {2} ({3}s)",
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
index 6e5f90d581e..bba5a1374c6 100644
--- a/src/MSBuild/TerminalLogger/NodesFrame.cs
+++ b/src/MSBuild/TerminalLogger/NodesFrame.cs
@@ -48,7 +48,7 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
 
         string durationString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
             "DurationDisplay",
-            status.Stopwatch.Elapsed.TotalSeconds);
+            status.Stopwatch.ElapsedSeconds);
 
         _durationLength[i] = durationString.Length;
 
@@ -105,7 +105,7 @@ public string Render(NodesFrame previousFrame)
                 if (previousFrame._nodes[i] == _nodes[i] &&                 // Same everything except time, AND
                     previousFrame._durationLength[i] == _durationLength[i]) // same number of digits in time
                 {
-                    string durationString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("DurationDisplay", _nodes[i].Stopwatch.Elapsed.TotalSeconds);
+                    string durationString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("DurationDisplay", _nodes[i].Stopwatch.ElapsedSeconds);
                     sb.Append($"{AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(durationString.Length)}{durationString}");
                 }
                 else
diff --git a/src/MSBuild/TerminalLogger/Project.cs b/src/MSBuild/TerminalLogger/Project.cs
index 5ed03039bcc..f7f57c57b8b 100644
--- a/src/MSBuild/TerminalLogger/Project.cs
+++ b/src/MSBuild/TerminalLogger/Project.cs
@@ -24,7 +24,7 @@ public Project(string? targetFramework)
     /// <summary>
     /// A stopwatch to time the build of the project.
     /// </summary>
-    public Stopwatch Stopwatch { get; } = Stopwatch.StartNew();
+    public StopwatchAbstraction Stopwatch { get; } = SystemStopwatch.StartNew();
 
     /// <summary>
     /// Full path to the primary output of the project, if known.
diff --git a/src/MSBuild/TerminalLogger/StopwatchAbstraction.cs b/src/MSBuild/TerminalLogger/StopwatchAbstraction.cs
new file mode 100644
index 00000000000..8b365517a6a
--- /dev/null
+++ b/src/MSBuild/TerminalLogger/StopwatchAbstraction.cs
@@ -0,0 +1,12 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Logging.TerminalLogger;
+
+internal abstract class StopwatchAbstraction
+{
+    public abstract void Start();
+    public abstract void Stop();
+
+    public abstract double ElapsedSeconds { get; }
+}
diff --git a/src/MSBuild/TerminalLogger/SystemStopwatch.cs b/src/MSBuild/TerminalLogger/SystemStopwatch.cs
new file mode 100644
index 00000000000..2f03092971c
--- /dev/null
+++ b/src/MSBuild/TerminalLogger/SystemStopwatch.cs
@@ -0,0 +1,24 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Diagnostics;
+
+namespace Microsoft.Build.Logging.TerminalLogger;
+
+internal sealed class SystemStopwatch : StopwatchAbstraction
+{
+    private Stopwatch _stopwatch = new ();
+
+    public override double ElapsedSeconds => _stopwatch.Elapsed.TotalSeconds;
+
+    public override void Start() => _stopwatch.Start();
+    public override void Stop() => _stopwatch.Stop();
+
+    public static StopwatchAbstraction StartNew()
+    {
+        SystemStopwatch wallClockStopwatch = new();
+        wallClockStopwatch.Start();
+
+        return wallClockStopwatch;
+    }
+}
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 221d6e4e4fa..0aada4c5ebf 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -358,7 +358,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 {
                     EraseNodes();
 
-                    string duration = project.Stopwatch.Elapsed.TotalSeconds.ToString("F1");
+                    string duration = project.Stopwatch.ElapsedSeconds.ToString("F1");
                     ReadOnlyMemory<char>? outputPath = project.OutputPath;
 
                     string projectFile = e.ProjectFile is not null ?
