diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 064f91987c0..2be407f892f 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -272,11 +272,16 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn
             </Project>";
         }
 
-        /// <summary>
-        /// We have a unique task host per bucket. Show that in these scenarios the build will stop if one sees an error.
-        /// </summary>
-        [Fact]
-        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopAndFail_BatchedBuild()
+        [Theory]
+        
+        [InlineData("MSB1235", "MSB1234", "MSB1234", "MSB1234", false)] // Log MSB1234, treat as error via MSBuildWarningsAsErrors
+        [InlineData("MSB1235", "", "MSB1234", "MSB1234", true)] // Log MSB1234, expect MSB1234 as error via MSBuildTreatWarningsAsErrors
+        [InlineData("MSB1234", "MSB1234", "MSB1234", "MSB4181", true)]// Log MSB1234, MSBuildWarningsAsMessages takes priority
+        public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,
+                                                      string WarningsAsErrors,
+                                                      string WarningToLog,
+                                                      string LogShouldContain,
+                                                      bool allWarningsAreErrors = false)
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
@@ -285,22 +290,12 @@ public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopAndFai
                     <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <PropertyGroup>
-                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>
+                        <MSBuildTreatWarningsAsErrors>{allWarningsAreErrors}</MSBuildTreatWarningsAsErrors>
+                        <MSBuildWarningsAsMessages>{WarningsAsMessages}</MSBuildWarningsAsMessages>
+                        <MSBuildWarningsAsErrors>{WarningsAsErrors}</MSBuildWarningsAsErrors>
                     </PropertyGroup>
-                    <ItemGroup>
-                        <SomeItem Include=""Item1"">
-                            <Return>true</Return>
-                            <ReturnHasLoggedErrors>true</ReturnHasLoggedErrors>
-                            <WarningCode>MSB1234</WarningCode>
-                        </SomeItem>
-                        <SomeItem Include=""Item2"">
-                            <Return>true</Return>
-                            <ReturnHasLoggedErrors>true</ReturnHasLoggedErrors>
-                            <WarningCode>MSB1235</WarningCode>
-                        </SomeItem>
-                    </ItemGroup>
                     <Target Name='Build'>
-                        <CustomLogAndReturnTask Sources=""@(SomeItem)"" Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""%(WarningCode)""/>
+                        <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""{WarningToLog}""/>
                         <ReturnFailureWithoutLoggingErrorTask/>
                     </Target>
                 </Project>");
@@ -310,118 +305,7 @@ public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopAndFai
                 logger.WarningCount.ShouldBe(0);
                 logger.ErrorCount.ShouldBe(1);
 
-                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. 
-                logger.AssertLogDoesntContain("MSB4181");
-            }
-        }
-
-        [Fact]
-        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_WarningIsAlsoMessage_BuildShouldContinue()
-        {
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <PropertyGroup>
-                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>
-                        <MSBuildWarningsAsMessages>MSB1234</MSBuildWarningsAsMessages>
-                    </PropertyGroup>
-                    <ItemGroup>
-                        <SomeItem Include=""Item1"">
-                            <Return>true</Return>
-                            <ReturnHasLoggedErrors>true</ReturnHasLoggedErrors>
-                            <WarningCode>MSB1234</WarningCode>
-                        </SomeItem>
-                    </ItemGroup>
-                    <Target Name='Build'>
-                        <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""MSB1234""/>
-                        <ReturnFailureWithoutLoggingErrorTask/>
-                    </Target>
-                </Project>");
-
-                MockLogger logger = proj.BuildProjectExpectFailure();
-
-                logger.WarningCount.ShouldBe(0);
-                logger.ErrorCount.ShouldBe(1);
-
-                // The build should CONTINUE when it logs a message that should be treated as an error and also a message.
-                // Message takes precedence.
-                logger.AssertLogContains("MSB4181");
-            }
-        }
-
-        [Fact]
-        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_MessageOverridesTreatAllWarningsAsErrors_BuildShouldContinue()
-        {
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <PropertyGroup>
-                        <MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>
-                        <MSBuildWarningsAsMessages>MSB1234</MSBuildWarningsAsMessages>
-                    </PropertyGroup>
-                    <ItemGroup>
-                        <SomeItem Include=""Item1"">
-                            <Return>true</Return>
-                            <ReturnHasLoggedErrors>true</ReturnHasLoggedErrors>
-                            <WarningCode>MSB1234</WarningCode>
-                        </SomeItem>
-                    </ItemGroup>
-                    <Target Name='Build'>
-                        <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""MSB1234""/>
-                        <ReturnFailureWithoutLoggingErrorTask/>
-                    </Target>
-                </Project>");
-
-                MockLogger logger = proj.BuildProjectExpectFailure();
-
-                logger.WarningCount.ShouldBe(0);
-                logger.ErrorCount.ShouldBe(1);
-
-                // The build should CONTINUE when it logs a message that should be treated as an error and also a message.
-                // Message takes precedence.
-                logger.AssertLogContains("MSB4181");
-            }
-        }
-
-        [Fact]
-        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_LoggedWarningIsNotTreatedAsMessage_TreatAllWarningsAsErrors_BuildShouldStop()
-        {
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <PropertyGroup>
-                        <MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>
-                        <MSBuildWarningsAsMessages>MSB1235</MSBuildWarningsAsMessages>
-                    </PropertyGroup>
-                    <ItemGroup>
-                        <SomeItem Include=""Item1"">
-                            <Return>true</Return>
-                            <ReturnHasLoggedErrors>true</ReturnHasLoggedErrors>
-                            <WarningCode>MSB1234</WarningCode>
-                        </SomeItem>
-                    </ItemGroup>
-                    <Target Name='Build'>
-                        <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""MSB1234""/>
-                        <ReturnFailureWithoutLoggingErrorTask/>
-                    </Target>
-                </Project>");
-
-                MockLogger logger = proj.BuildProjectExpectFailure();
-
-                logger.WarningCount.ShouldBe(0);
-                logger.ErrorCount.ShouldBe(1);
-
-                // The build should STOP when it logs an error due to MSBuildTreatWarningsAsErrors
-                logger.AssertLogContains("MSB1234");
+                logger.AssertLogContains(LogShouldContain);
             }
         }
 
@@ -429,7 +313,7 @@ public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_LoggedWarningIsNotTre
         /// Item1 and Item2 log warnings and continue, item 3 logs a warn-> error and prevents item 4 from running in the batched build.
         /// </summary>
         [Fact]
-        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopOnceItLogsWarningAsErrorAndFail_BatchedBuild()
+        public void TaskLogsWarningAsError_BatchedBuild()
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
@@ -478,40 +362,15 @@ public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopOnceIt
             }
         }
 
-        [Fact]
-        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldFinishAndFail()
-        {
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <PropertyGroup>
-                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>
-                    </PropertyGroup>
-                    <Target Name='Build'>
-                        <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""MSB1234""/>
-                        <ReturnFailureWithoutLoggingErrorTask/>
-                    </Target>
-                </Project>");
-
-                MockLogger logger = proj.BuildProjectExpectFailure();
-
-                logger.WarningCount.ShouldBe(0);
-                logger.ErrorCount.ShouldBe(1);
-
-                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. 
-                logger.AssertLogDoesntContain("MSB4181");
-            }
-        }
-
         /// <summary>
-        /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging a warning as error.
-        /// This tests MSBuildWarningsAsErrors
+        /// Task logs MSB1234 as a warning and returns true.
+        /// Test behavior with MSBuildWarningsAsErrors & MSBuildTreatWarningsAsErrors
+        /// Both builds should continue despite logging errors.
         /// </summary>
-        [Fact]
-        public void TaskReturnsTrueButLogsWarningAsError_BuildShouldFinishAndFail()
+        [Theory]
+        [InlineData("MSB1234", false)]
+        [InlineData("MSB0000", true)]
+        public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarningsAsErrors)
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
@@ -519,9 +378,9 @@ public void TaskReturnsTrueButLogsWarningAsError_BuildShouldFinishAndFail()
                 <Project>
                     <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""LogWarningReturnHasLoggedError"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <PropertyGroup>
-                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>
+                        <MSBuildTreatWarningsAsErrors>{treatAllWarningsAsErrors}</MSBuildTreatWarningsAsErrors>
+                        <MSBuildWarningsAsErrors>{warningsAsErrors}</MSBuildWarningsAsErrors>
                     </PropertyGroup>
                     <Target Name='Build'>
                         <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
@@ -539,40 +398,6 @@ public void TaskReturnsTrueButLogsWarningAsError_BuildShouldFinishAndFail()
             }
         }
 
-
-        /// <summary>
-        /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging warning as error.
-        /// This test specifically tests the MSBuildTreatWarningsAsErrors flag as opposed to MSBuildWarningsAsErrors
-        /// </summary>
-        [Fact]
-        public void TaskReturnsTrueButLogsWarning_TreatWarningsAsErrors_BuildShouldFinishAndFail()
-        {
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""LogWarningReturnHasLoggedError"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <PropertyGroup>
-                        <MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>
-                    </PropertyGroup>
-                    <Target Name='Build'>
-                        <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
-                        <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1235""/>
-                    </Target>
-                </Project>");
-
-                MockLogger logger = proj.BuildProjectExpectFailure();
-
-                logger.WarningCount.ShouldBe(0);
-                logger.ErrorCount.ShouldBe(2);
-
-                // The build will continue so we should see the error MSB1235
-                logger.AssertLogContains("MSB1235");
-            }
-        }
-
         [Fact]
         public void TaskReturnsFailureButDoesNotLogError_ShouldCauseBuildFailure()
         {
