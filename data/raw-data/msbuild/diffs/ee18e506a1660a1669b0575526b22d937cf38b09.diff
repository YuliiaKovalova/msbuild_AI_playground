diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 167a67e396e..6d90b335b8c 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -1171,6 +1171,8 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <remarks>Currently we're not supporting "\r".</remarks>
         internal static readonly string[] newLines = { "\r\n", "\n" };
 
+        internal static readonly char[] newLineChars = { '\r', '\n' };
+
         /// <summary>
         /// Visual separator for projects. Line length was picked arbitrarily.
         /// </summary>
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 26ed295bc8b..a3edc2fbc83 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -10,7 +10,7 @@
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
+using Microsoft.Build.Utilities;
 using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
@@ -1344,40 +1344,148 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int
             {
                 int adjustedPrefixWidth = _prefixWidth + prefixAdjustment;
 
-                // The string may contain new lines, treat each new line as a different string to format and send to the console
-                string[] nonNullMessages = SplitStringOnNewLines(message);
-                for (int i = 0; i < nonNullMessages.Length; i++)
+                if (Traits.Instance.EscapeHatches.DoNotOptimizeConsoleLogger)
                 {
-                    string nonNullMessage = nonNullMessages[i];
-                    // Take into account the new line char which will be added to the end or each reformatted string
-                    int bufferWidthMinusNewLine = _bufferWidth - 1;
-
-                    // If the buffer is larger then the prefix information (timestamp and key) then reformat the messages. 
-                    // If there is not enough room just print the message out and let the console do the formatting
-                    bool bufferIsLargerThanPrefix = bufferWidthMinusNewLine > adjustedPrefixWidth;
-                    bool messageAndPrefixTooLargeForBuffer = (nonNullMessage.Length + adjustedPrefixWidth) > bufferWidthMinusNewLine;
-                    if (bufferIsLargerThanPrefix && messageAndPrefixTooLargeForBuffer && _alignMessages)
+                    // The string may contain new lines, treat each new line as a different string to format and send to the console
+                    string[] nonNullMessages = SplitStringOnNewLines(message);
+                    for (int i = 0; i < nonNullMessages.Length; i++)
                     {
-                        // Our message may have embedded tab characters, so expand those to their space
-                        // equivalent so that wrapping works as expected.
-                        nonNullMessage = nonNullMessage.Replace("\t", consoleTab);
-
-                        // If the message and the prefix are too large for one line in the console, split the string to fit
-                        int index = 0;
-                        int messageLength = nonNullMessage.Length;
-                        // Loop until all the string has been sent to the console
-                        while (index < messageLength)
+                        string nonNullMessage = nonNullMessages[i];
+                        // Take into account the new line char which will be added to the end or each reformatted string
+                        int bufferWidthMinusNewLine = _bufferWidth - 1;
+
+                        // If the buffer is larger then the prefix information (timestamp and key) then reformat the messages. 
+                        // If there is not enough room just print the message out and let the console do the formatting
+                        bool bufferIsLargerThanPrefix = bufferWidthMinusNewLine > adjustedPrefixWidth;
+                        bool messageAndPrefixTooLargeForBuffer = (nonNullMessage.Length + adjustedPrefixWidth) > bufferWidthMinusNewLine;
+                        if (bufferIsLargerThanPrefix && messageAndPrefixTooLargeForBuffer && _alignMessages)
+                        {
+                            // Our message may have embedded tab characters, so expand those to their space
+                            // equivalent so that wrapping works as expected.
+                            nonNullMessage = nonNullMessage.Replace("\t", consoleTab);
+
+                            // If the message and the prefix are too large for one line in the console, split the string to fit
+                            int index = 0;
+                            int messageLength = nonNullMessage.Length;
+                            // Loop until all the string has been sent to the console
+                            while (index < messageLength)
+                            {
+                                // Calculate how many chars will fit on the console buffer
+                                int amountToCopy = (messageLength - index) < (bufferWidthMinusNewLine - adjustedPrefixWidth) ? (messageLength - index) : (bufferWidthMinusNewLine - adjustedPrefixWidth);
+                                WriteBasedOnPrefix(nonNullMessage.Substring(index, amountToCopy), prefixAlreadyWritten && index == 0 && i == 0, adjustedPrefixWidth);
+                                index += amountToCopy;
+                            }
+                        }
+                        else
                         {
-                            // Calculate how many chars will fit on the console buffer
-                            int amountToCopy = (messageLength - index) < (bufferWidthMinusNewLine - adjustedPrefixWidth) ? (messageLength - index) : (bufferWidthMinusNewLine - adjustedPrefixWidth);
-                            WriteBasedOnPrefix(nonNullMessage.Substring(index, amountToCopy), prefixAlreadyWritten && index == 0 && i == 0, adjustedPrefixWidth);
-                            index += amountToCopy;
+                            //there is not enough room just print the message out and let the console do the formatting
+                            WriteBasedOnPrefix(nonNullMessage, prefixAlreadyWritten, adjustedPrefixWidth);
                         }
                     }
+                }
+                else
+                {
+                    // If we do not indent and/or wrap we can simply write it as is.
+                    // This will always be true for FileLoggers
+                    if (!_alignMessages && adjustedPrefixWidth == 0)
+                    {
+                        WriteHandler(message);
+                        WriteHandler(Environment.NewLine);
+                    }
                     else
                     {
-                        //there is not enough room just print the message out and let the console do the formatting
-                        WriteBasedOnPrefix(nonNullMessage, prefixAlreadyWritten, adjustedPrefixWidth);
+                        int j = message.IndexOfAny(newLineChars);
+                        int i = 0;
+                        try
+                        {
+                            var sb = _stringBuilderForWriteMessage;
+                            sb.Length = 0;
+                            // The string contains new lines, treat each new line as a different string to format and send to the console
+                            while (j >= 0)
+                            {
+                                WriteLineOfMessage(sb, adjustedPrefixWidth, message, i, j - i);
+                                i = j + (message[j] == '\r' ? 2 : 1);
+                                j = i < message.Length ? message.IndexOfAny(newLineChars, i) : -1;
+                            }
+
+                            WriteLineOfMessage(sb, adjustedPrefixWidth, message, i, message.Length - i);
+                            WriteHandler(sb.ToString());
+                        }
+                        finally
+                        {
+                            // prepare for reuse
+                            _stringBuilderForWriteMessage.Length = 0;
+                        }
+                    }
+
+                    void WriteLineOfMessage(StringBuilder sb, int adjustedPrefixWidth, string nonNullMessage, int start, int count)
+                    {
+                        int bufferWidthMinusNewLine = _bufferWidth - 1;
+
+                        // If the buffer is larger then the prefix information (timestamp and key) then reformat the messages. 
+                        // If there is not enough room just print the message out and let the console do the formatting
+                        bool bufferIsLargerThanPrefix = bufferWidthMinusNewLine > adjustedPrefixWidth;
+                        bool messageAndPrefixTooLargeForBuffer = (nonNullMessage.Length + adjustedPrefixWidth) > bufferWidthMinusNewLine;
+                        if (bufferIsLargerThanPrefix && messageAndPrefixTooLargeForBuffer && _alignMessages)
+                        {
+                            // If the message and the prefix are too large for one line in the console, split the string to fit
+
+                            // Beginning index of string to be written
+                            int index = 0;
+                            int tabWidth = consoleTab.Length;
+                            // Loop until all the string has been sent to the console
+                            while (index < count)
+                            {
+                                // Position of virtual console cursor
+                                // By simulating cursor position adjustment for tab characters '\t' we can compute
+                                // exact numbers of characters from source string to fit into Console.BufferWidth
+                                int cursor = 0;
+
+                                // Write prefix if needed
+                                if ((!prefixAlreadyWritten || index > 0) && adjustedPrefixWidth > 0)
+                                {
+                                    sb.Append(' ', adjustedPrefixWidth);
+                                    cursor += adjustedPrefixWidth;
+                                }
+
+                                // end index of string to be written (behind last character)
+                                int endIndex = index;
+                                while (cursor < bufferWidthMinusNewLine)
+                                {
+                                    int remainingCharsToEndOfBuffer = Math.Min(bufferWidthMinusNewLine - cursor, count - endIndex);
+                                    int nextTab = message.IndexOf('\t', start + endIndex, remainingCharsToEndOfBuffer);
+                                    if (nextTab >= 0)
+                                    {
+                                        // position before tab
+                                        cursor += nextTab - (start + endIndex);
+                                        // move to next tab position
+                                        cursor += tabWidth - (nextTab % tabWidth);
+
+                                        // move end index after the '\t' in preparation for following IndexOf '\t'
+                                        endIndex += nextTab - (start + endIndex) + 1;
+                                    }
+                                    else
+                                    {
+                                        endIndex += remainingCharsToEndOfBuffer;
+                                        break;
+                                    }
+                                }
+
+                                sb.Append(nonNullMessage, start + index, endIndex - index);
+                                sb.AppendLine();
+
+                                index = endIndex;
+                            }
+                        }
+                        else
+                        {
+                            // Let the console do the formatting
+                            if (!prefixAlreadyWritten)
+                                sb.Append(' ', adjustedPrefixWidth);
+
+                            sb.Append(nonNullMessage, start, count);
+                            sb.AppendLine();
+                        }
                     }
                 }
             }
@@ -1762,6 +1870,10 @@ internal override void PrintCounterMessage(WriteLinePrettyFromResourceDelegate W
         private BuildEventContext _lastDisplayedBuildEventContext;
         private int _bufferWidth = -1;
         private readonly object _lockObject = new Object();
+        /// <summary>
+        /// Used exclusively by <see cref="WriteMessageAligned(string,bool,int)"/>
+        /// </summary>
+        private readonly StringBuilder _stringBuilderForWriteMessage = new StringBuilder(1024);
         private int _prefixWidth = 0;
         private ProjectFullKey _lastProjectFullKey = new ProjectFullKey(-1, -1);
         private bool _alignMessages;
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index d1fc45ffe12..98152f5741d 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -145,6 +145,8 @@ internal class EscapeHatches
         /// </summary>
         public readonly bool AlwaysEvaluateDangerousGlobs = Environment.GetEnvironmentVariable("MSBuildAlwaysEvaluateDangerousGlobs") == "1";
 
+        public readonly bool DoNotOptimizeConsoleLogger = Environment.GetEnvironmentVariable("MSBUILDDONOOPTIMISECONSOLELOGGER") == "1";
+
         /// <summary>
         /// Emit events for project imports.
         /// </summary>
