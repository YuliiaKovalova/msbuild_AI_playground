diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 8f43febd65d..21a0118a364 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -250,10 +250,12 @@ public void PostCacheRequest(CacheRequest cacheRequest)
                         new NullableBool(isDesignTimeBuild),
                         null);
 
-                    ErrorUtilities.VerifyThrowInternalError(
+                    if (!_cancellationToken.IsCancellationRequested)
+                    {
+                        ErrorUtilities.VerifyThrowInternalError(
                         previousValue is null || previousValue == false || isDesignTimeBuild,
-                        "Either all builds in a build session or design time builds, or none",
-                        (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
+                        "Either all builds in a build session or design time builds, or none");
+                    }
 
                     // No point progressing with expensive plugin initialization or cache query if design time build detected.
                     if (DesignTimeBuildsDetected)
@@ -283,12 +285,14 @@ public void PostCacheRequest(CacheRequest cacheRequest)
                     }
                 }
 
-                ErrorUtilities.VerifyThrowInternalError(
-                    LateInitializationForVSWorkaroundCompleted is null ||
-                    (_projectCacheDescriptor.VsWorkaround && LateInitializationForVSWorkaroundCompleted.Task.IsCompleted),
-                    "Completion source should be null when this is not the VS workaround",
-                    (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
-
+                if (!_cancellationToken.IsCancellationRequested)
+                {
+                    ErrorUtilities.VerifyThrowInternalError(
+                                        LateInitializationForVSWorkaroundCompleted is null ||
+                                        (_projectCacheDescriptor.VsWorkaround && LateInitializationForVSWorkaroundCompleted.Task.IsCompleted),
+                                        "Completion source should be null when this is not the VS workaround");
+                }
+                
                 BuildRequestData buildRequest = new BuildRequestData(
                     cacheRequest.Configuration.Project,
                     cacheRequest.Submission.BuildRequestData.TargetNames.ToArray());
@@ -592,11 +596,11 @@ public async Task ShutDown()
                 MSBuildEventSource.Log.ProjectCacheEndBuildStart(_projectCachePluginTypeName);
 
                 await _projectCachePlugin.EndBuildAsync(pluginLogger, _cancellationToken);
-                bool isCanceled = (_cancellationToken.CanBeCanceled && !_cancellationToken.IsCancellationRequested);
-                /* mismatches between the current plugin state and expected state can occur when force quitting via ctrl+c, and these mismatches are logged as errors
-                 so we will only throw if the application has not been canceled.
+
+                /* Mismatches between the current plugin state and expected state can occur when cancelled. Under normal circumstances we would want those mismatches to be
+                 * logged as an error. However, in this case the mismatch is caused by the cancellation and should be ignored.
                 */
-                if (pluginLogger.HasLoggedErrors && !isCanceled)
+                if (pluginLogger.HasLoggedErrors && !_cancellationToken.IsCancellationRequested)
                 {
                     ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheShutdownFailed");
                 }
@@ -659,7 +663,10 @@ private void CheckInState(ProjectCacheServiceState expectedState)
         {
             lock (this)
             {
-                ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $"Expected state {expectedState}, actual state {_serviceState}", (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
+                if (!_cancellationToken.IsCancellationRequested)
+                {
+                    ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $"Expected state {expectedState}, actual state {_serviceState}");
+                }
             }
         }
 
@@ -667,7 +674,10 @@ private void CheckNotInState(ProjectCacheServiceState unexpectedState)
         {
             lock (this)
             {
-                ErrorUtilities.VerifyThrowInternalError(_serviceState != unexpectedState, $"Unexpected state {_serviceState}", (_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested));
+                if (!_cancellationToken.IsCancellationRequested)
+                {
+                    ErrorUtilities.VerifyThrowInternalError(_serviceState != unexpectedState, $"Unexpected state {_serviceState}");
+                }
             }
         }
 
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index a8370c6b208..e3804e0bb28 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1768,8 +1768,7 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
                         {
                             ErrorUtilities.VerifyThrowInternalError(
                                 _configCache.HasConfiguration(request.ConfigurationId),
-                                "A request should have a configuration if it makes it this far in the build process.",
-                                false);
+                                "A request should have a configuration if it makes it this far in the build process.");
 
                             var config = _configCache[request.ConfigurationId];
                             var globalProperties = string.Join(
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 03afebd21ff..7b9017f4701 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -53,8 +53,7 @@ public static void DebugTraceMessage(string category, string formatstring, param
 
         internal static void VerifyThrowInternalError(bool condition, string message, params object[] args)
         {
-            // do nothing if there is a cancellation requested and there is state mismatch.
-            if (s_throwExceptions && !condition && (bool)args[0] == false)
+            if (s_throwExceptions && !condition)
             {
                 throw new InternalErrorException(ResourceUtilities.FormatString(message, args));
             }
