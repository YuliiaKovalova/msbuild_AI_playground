diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index bed66bdaaf2..890a5d6caf2 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -632,6 +632,9 @@ public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
         {
             throw new NotImplementedException();
         }
+        public void LogResponseFile(BuildEventContext buildEventContext, string filePath)
+        {
+        }
 
         #endregion
     }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 5771471c8f9..4c6042ac27b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -13,6 +13,7 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.CompilerServices;
 using System.Runtime.ExceptionServices;
 using System.Threading;
 using System.Threading.Tasks;
@@ -251,7 +252,14 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private DateTime _instantiationTimeUtc;
 
+        /// <summary>
+        /// Messages to be logged
+        /// </summary>
         private IEnumerable<DeferredBuildMessage> _deferredBuildMessages;
+        /// <summary>
+        /// Response files to be included
+        /// </summary>
+        private IEnumerable<DeferredResponseFile> _deferredResponseFiles;
 
         private ProjectCacheService _projectCacheService;
 
@@ -401,6 +409,18 @@ public DeferredBuildMessage(string text, MessageImportance importance)
             }
         }
 
+        // TOOD: Add commment
+        public readonly struct DeferredResponseFile
+        {
+            public string FilePath { get; }
+
+            public DeferredResponseFile(string filePath)
+            {
+                FilePath = filePath;
+            }
+        }
+
+
         /// <summary>
         /// Prepares the BuildManager to receive build requests.
         /// </summary>
@@ -423,6 +443,17 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess
             _deferredBuildMessages = null;
         }
 
+        // TODO: Review
+        // TODO: Add comments
+        public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMessage> deferredBuildMessages, IEnumerable<DeferredResponseFile> deferredResponseFiles)
+        {
+            _deferredBuildMessages = deferredBuildMessages;
+            _deferredResponseFiles = deferredResponseFiles;
+            BeginBuild(parameters);
+            _deferredBuildMessages = null;
+            _deferredResponseFiles = null;
+        }
+
         private void UpdatePriority(Process p, ProcessPriorityClass priority)
         {
             try
@@ -527,7 +558,9 @@ public void BeginBuild(BuildParameters parameters)
 
                 var loggingService = InitializeLoggingService();
 
+                // Log deferred messages and response files
                 LogDeferredMessages(loggingService, _deferredBuildMessages);
+                LogDeferredResponseFiles(loggingService, _deferredResponseFiles);
 
                 InitializeCaches();
 
@@ -2869,6 +2902,19 @@ private static void LogDeferredMessages(ILoggingService loggingService, IEnumera
             }
         }
 
+        private static void LogDeferredResponseFiles(ILoggingService loggingService, IEnumerable<DeferredResponseFile> deferredResponseFiles)
+        {
+            if (deferredResponseFiles == null)
+            {
+                return;
+            }
+
+            foreach (var responseFile in deferredResponseFiles)
+            {
+                loggingService.LogResponseFile(BuildEventContext.Invalid, responseFile.FilePath);
+            }
+        }
+
         /// <summary>
         /// Ensures that the packet type matches the expected type
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index c261563d0e7..4b05c5775f8 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -605,6 +605,15 @@ BuildEventContext LogProjectStarted(
         /// <param name="properties">The list of properties associated with the event.</param>
         void LogTelemetry(BuildEventContext buildEventContext, string eventName, IDictionary<string, string> properties);
         #endregion
+
+        #region Log response files
+        /// <summary>
+        /// Helper method to create an event for including response files
+        /// </summary>
+        /// <param name="buildEventContext">Event context information which describes where is the event getting logged</param>
+        /// <param name="filePath">Full path to the response file</param>
+        void LogResponseFile(BuildEventContext buildEventContext, string filePath);
+        #endregion
     }
 
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingContext.cs b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
index a81fd673b27..bc5eeffddc1 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
@@ -269,5 +269,14 @@ internal void LogFatalBuildError(Exception exception, BuildEventFileInfo file)
             LoggingService.LogFatalBuildError(BuildEventContext, exception, file);
             _hasLoggedErrors = true;
         }
+        /// <summary>
+        /// Logs a response file to be included in the binary logger
+        /// </summary>
+        /// <param name="filePath">Path to response file</param>
+        internal void LogResponseFile(string filePath)
+        { 
+            ErrorUtilities.VerifyThrow(IsValid, "must be valid");
+            _loggingService.LogResponseFile(BuildEventContext, filePath);
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 5a4d694f427..b908d7829d3 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -815,5 +815,22 @@ public void LogTelemetry(BuildEventContext buildEventContext, string eventName,
         }
 
         #endregion
+
+        #region log response files
+        /// <summary>
+        /// Logs a response file to include in the binlogs
+        /// </summary>
+        /// <param name="buildEventContext">Event context information which describes who is logging the event</param>
+        /// <param name="filePath">Full path to response file</param>
+        public void LogResponseFile(BuildEventContext buildEventContext, string filePath)
+        {
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
+            ErrorUtilities.VerifyThrow(filePath != null, "response file path was null");
+            ResponseFileUsedEventArgs responseFileUsedEvent = new ResponseFileUsedEventArgs(filePath);
+            responseFileUsedEvent.BuildEventContext = buildEventContext;
+            ProcessLoggingEvent(responseFileUsedEvent);
+        }
+
+        #endregion
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 7fbddddf7ee..75fcdbfbbbc 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -270,6 +270,10 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFileFromMemory(metaprojectArgs.ProjectFile, metaprojectArgs.metaprojectXml);
             }
+            else if (e is ResponseFileUsedEventArgs responseFileArgs && responseFileArgs.ResponseFilePath != null)
+            {
+                projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
+            }
         }
 
         /// <summary>
diff --git a/src/Framework/ResponseFileUsedEventArgs.cs b/src/Framework/ResponseFileUsedEventArgs.cs
index d184cacb8f4..38214447e64 100644
--- a/src/Framework/ResponseFileUsedEventArgs.cs
+++ b/src/Framework/ResponseFileUsedEventArgs.cs
@@ -1,6 +1,6 @@
 using System;
-using System.IO;
-using Microsoft.Build.Shared;
+
+#nullable disable
 
 namespace Microsoft.Build.Framework
 {
@@ -8,18 +8,18 @@ namespace Microsoft.Build.Framework
     /// Arguments for the response file used event
     /// </summary>
     [Serializable]
-    public class ResponseFileUsedEventArgs : BuildMessageEventArgs
+    public class ResponseFileUsedEventArgs : CustomBuildEventArgs
     {
         /// <summary>
         /// Initialize a new instance of the ResponseFileUsedEventArgs class.
         /// </summary>
-        public ResponseFileUsedEventArgs()
-        {
-        }
+        public ResponseFileUsedEventArgs() : base() { }
 
-        public ResponseFileUsedEventArgs(string message)
-            : base(message: message)
+        public ResponseFileUsedEventArgs(string responseFilePath) : base()
         {
+            ResponseFilePath = responseFilePath;
         }
+
+        public string ResponseFilePath { get; set; }
     }
 }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b9a526b21c0..b022968938d 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1087,6 +1087,11 @@ private static void ResetGatheringSwitchesState()
         /// </summary>
         private static IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = Enumerable.Empty<BuildManager.DeferredBuildMessage>();
 
+        /// <summary>
+        /// Response files to be included in loggers
+        /// </summary>
+        private static IEnumerable<BuildManager.DeferredResponseFile> responseFileToLogInBuildLoggers = Enumerable.Empty<BuildManager.DeferredResponseFile>();
+
         /// <summary>
         /// Initializes the build engine, and starts the project building.
         /// </summary>
@@ -1338,7 +1343,21 @@ string[] commandLine
 #endif
                         messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);
                     }
-                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);
+
+                    // Log a message for every response file and include it in log
+                    foreach (var responseFilePath in s_includedResponseFiles)
+                    {
+                        messagesToLogInBuildLoggers = messagesToLogInBuildLoggers.Append(
+                            new BuildManager.DeferredBuildMessage(
+                                String.Format("Included response file: {0}", responseFilePath),
+                                MessageImportance.Normal
+                            ));
+                        responseFileToLogInBuildLoggers = responseFileToLogInBuildLoggers.Append(
+                            new BuildManager.DeferredResponseFile(responseFilePath));
+                    }
+
+
+                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers, responseFileToLogInBuildLoggers);
 
                     Exception exception = null;
                     try
@@ -1531,17 +1550,6 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
                         MessageImportance.High));
             }
 
-            // Log a message for every response file
-            foreach (var responseFilePath in s_includedResponseFiles)
-            {
-                messages.Add(
-                    new BuildManager.DeferredBuildMessage(
-                        String.Format("Included response file: {0}", responseFilePath),
-                        MessageImportance.Normal
-                    )
-                );
-            }
-
             return messages;
         }
 
