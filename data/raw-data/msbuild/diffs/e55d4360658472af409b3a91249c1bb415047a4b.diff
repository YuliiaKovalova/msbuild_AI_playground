diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index fb2f2bd0733..7e5fbe3db1b 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -155,7 +155,9 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
     public abstract partial class EngineServices
     {
         public const int Version1 = 1;
+        public const int Version2 = 2;
         protected EngineServices() { }
+        public virtual bool IsTaskInputLoggingEnabled { get { throw null; } }
         public virtual int Version { get { throw null; } }
         public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
     }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 98e39ce8b4c..06d25ff198a 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -155,7 +155,9 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
     public abstract partial class EngineServices
     {
         public const int Version1 = 1;
+        public const int Version2 = 2;
         protected EngineServices() { }
+        public virtual bool IsTaskInputLoggingEnabled { get { throw null; } }
         public virtual int Version { get { throw null; } }
         public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
     }
diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index a9f91065f53..7c0a1e077c3 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -392,6 +392,7 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         protected Microsoft.Build.Framework.IBuildEngine BuildEngine { get { throw null; } }
         public bool HasLoggedErrors { get { throw null; } }
         public string HelpKeywordPrefix { get { throw null; } set { } }
+        public bool IsTaskInputLoggingEnabled { get { throw null; } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { throw null; }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index 26fb8b5075c..6cc7b96d758 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -235,6 +235,7 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         protected Microsoft.Build.Framework.IBuildEngine BuildEngine { get { throw null; } }
         public bool HasLoggedErrors { get { throw null; } }
         public string HelpKeywordPrefix { get { throw null; } set { } }
+        public bool IsTaskInputLoggingEnabled { get { throw null; } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { throw null; }
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index b87c06c077a..8833b64dfe6 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -8,6 +8,7 @@
 using System.Globalization;
 using System.IO;
 using System.Linq;
+using System.Reflection;
 using System.Threading;
 using System.Xml;
 
@@ -21,6 +22,7 @@
 using Microsoft.Build.Graph;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests.Shared;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
@@ -4342,5 +4344,50 @@ public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
             logger.FullLog.ShouldContain("Static graph loaded in");
             logger.FullLog.ShouldContain("3 nodes, 2 edges");
         }
+
+        /// <summary>
+        /// Helper task used by <see cref="TaskInputLoggingIsExposedToTasks"/> to verify <see cref="TaskLoggingHelper.IsTaskInputLoggingEnabled"/>.
+        /// </summary>
+        public class LogTaskInputsCheckingTask : Task
+        {
+            public bool ExpectedTaskInputLoggingEnabled { get; set; }
+
+            public override bool Execute()
+            {
+                return Log.IsTaskInputLoggingEnabled == ExpectedTaskInputLoggingEnabled;
+            }
+        }
+
+        [Theory]
+        [InlineData("", false)] // regular task host, input logging disabled
+        [InlineData("", true)] // regular task host, input logging enabled
+        [InlineData("TaskHostFactory", false)] // OOP task host, input logging disabled
+        [InlineData("TaskHostFactory", true)] // OOP task host, input logging enabled
+        public void TaskInputLoggingIsExposedToTasks(string taskFactory, bool taskInputLoggingEnabled)
+        {
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
+
+  <UsingTask
+    TaskName=""" + typeof(LogTaskInputsCheckingTask).FullName + @"""
+    AssemblyFile=""" + Assembly.GetExecutingAssembly().Location + @"""
+    TaskFactory=""" + taskFactory + @"""
+  />
+
+  <Target Name=""target1"">
+    <LogTaskInputsCheckingTask ExpectedTaskInputLoggingEnabled=""" + taskInputLoggingEnabled + @""" />
+  </Target>
+
+</Project>");
+
+            _parameters.LogTaskInputs = taskInputLoggingEnabled;
+
+            Project project = CreateProject(projectContents, MSBuildDefaultToolsVersion, _projectCollection, true);
+            ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
+            _buildManager.BeginBuild(_parameters);
+            BuildResult result = _buildManager.BuildRequest(new BuildRequestData(instance, new[] { "target1" }));
+            _buildManager.EndBuild();
+
+            Assert.Equal(BuildResultCode.Success, result.OverallResult);
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 144f30bea1a..94c7c23f23d 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -55,6 +55,7 @@ public void ConstructorWithNullName()
                     continueOnError: _continueOnErrorDefault,
                     taskName: null,
                     taskLocation: @"c:\my tasks\mytask.dll",
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -89,6 +90,7 @@ public void ConstructorWithEmptyName()
                     continueOnError: _continueOnErrorDefault,
                     taskName: String.Empty,
                     taskLocation: @"c:\my tasks\mytask.dll",
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -123,6 +125,7 @@ public void ConstructorWithNullLocation()
                     continueOnError: _continueOnErrorDefault,
                     taskName: "TaskName",
                     taskLocation: null,
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -159,6 +162,7 @@ public void ConstructorWithEmptyLocation()
                     continueOnError: _continueOnErrorDefault,
                     taskName: "TaskName",
                     taskLocation: String.Empty,
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -193,6 +197,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -217,6 +222,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -242,6 +248,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -272,6 +279,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -302,6 +310,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
@@ -339,6 +348,7 @@ public void TestTranslationWithNullDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: expectedGlobalProperties,
                 warningsAsErrors: null,
@@ -383,6 +393,7 @@ public void TestTranslationWithEmptyDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: new Dictionary<string, object>(),
                 globalParameters: new Dictionary<string, string>(),
                 warningsAsErrors: null,
@@ -432,6 +443,7 @@ public void TestTranslationWithValueTypesInDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -479,6 +491,7 @@ public void TestTranslationWithITaskItemInDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -525,6 +538,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -578,6 +592,7 @@ public void TestTranslationWithWarningsAsErrors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
@@ -627,6 +642,7 @@ public void TestTranslationWithWarningsAsMessages()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 1601b3e29c6..154ace42f96 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -880,7 +880,7 @@ internal void ReleaseAllCores()
         [Serializable]
         private sealed class EngineServicesImpl : EngineServices
         {
-            private TaskHost _taskHost;
+            private readonly TaskHost _taskHost;
 
             internal EngineServicesImpl(TaskHost taskHost)
             {
@@ -902,9 +902,12 @@ public override bool LogsMessagesOfImportance(MessageImportance importance)
                 return importance <= minimumImportance;
 
             }
+
+            /// <inheritdoc/>
+            public override bool IsTaskInputLoggingEnabled => _taskHost._host.BuildParameters.LogTaskInputs;
         }
 
-        public EngineServices EngineServices{ get; }
+        public EngineServices EngineServices { get; }
 
         #endregion
 
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index c080e9338e3..99bc7663895 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -268,6 +268,7 @@ public bool Execute()
                         BuildEngine.ContinueOnError,
                         _taskType.Type.FullName,
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
+                        _buildComponentHost.BuildParameters.LogTaskInputs,
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
                         _taskLoggingContext.GetWarningsAsErrors(),
diff --git a/src/Framework/EngineServices.cs b/src/Framework/EngineServices.cs
index b2b5fa9b281..24fd7deea9c 100644
--- a/src/Framework/EngineServices.cs
+++ b/src/Framework/EngineServices.cs
@@ -20,6 +20,11 @@ public abstract class EngineServices
         /// </summary>
         public const int Version1 = 1;
 
+        /// <summary>
+        /// This version added the IsTaskInputLoggingEnabled property.
+        /// </summary>
+        public const int Version2 = 2;
+
         /// <summary>
         /// An explicit version of this class. Must be incremented whenever new members are added. Derived classes should override
         /// the property to return the version actually being implemented.
@@ -37,5 +42,13 @@ public abstract class EngineServices
         /// for <see cref="MessageImportance.Low"/>.
         /// </remarks>
         public virtual bool LogsMessagesOfImportance(MessageImportance importance) => throw new NotImplementedException();
+
+        /// <summary>
+        /// Returns <see langword="true"/> if the build is configured to log all task inputs.
+        /// </summary>
+        /// <remarks>
+        /// This is a performance optimization allowing tasks to skip expensive double-logging.
+        /// </remarks>
+        public virtual bool IsTaskInputLoggingEnabled => throw new NotImplementedException();
     }
 }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 9ee7405d822..6dc795d6762 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -189,6 +189,10 @@ public OutOfProcTaskHostNode()
             thisINodePacketFactory.RegisterPacketHandler(NodePacketType.TaskHostConfiguration, TaskHostConfiguration.FactoryForDeserialization, this);
             thisINodePacketFactory.RegisterPacketHandler(NodePacketType.TaskHostTaskCancelled, TaskHostTaskCancelled.FactoryForDeserialization, this);
             thisINodePacketFactory.RegisterPacketHandler(NodePacketType.NodeBuildComplete, NodeBuildComplete.FactoryForDeserialization, this);
+
+#if !CLR2COMPATIBILITY
+            EngineServices = new EngineServicesImpl(this);
+#endif
         }
 
         #region IBuildEngine Implementation (Properties)
@@ -498,13 +502,30 @@ public void ReleaseCores(int coresToRelease)
         [Serializable]
         private sealed class EngineServicesImpl : EngineServices
         {
+            private readonly OutOfProcTaskHostNode _taskHost;
+
+            internal EngineServicesImpl(OutOfProcTaskHostNode taskHost)
+            {
+                _taskHost = taskHost;
+            }
+
             /// <summary>
             /// No logging verbosity optimization in OOP nodes.
             /// </summary>
             public override bool LogsMessagesOfImportance(MessageImportance importance) => true;
+
+            /// <inheritdoc />
+            public override bool IsTaskInputLoggingEnabled
+            {
+                get
+                {
+                    ErrorUtilities.VerifyThrow(_taskHost._currentConfiguration != null, "We should never have a null configuration during a BuildEngine callback!");
+                    return _taskHost._currentConfiguration.IsTaskInputLoggingEnabled;
+                }
+            }
         }
 
-        public EngineServices EngineServices { get; } = new EngineServicesImpl();
+        public EngineServices EngineServices { get; }
 
         #endregion
 
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 1bcae1d7574..815eda222b3 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -78,6 +78,11 @@ internal class TaskHostConfiguration : INodePacket
         /// </summary>
         private string _taskLocation;
 
+        /// <summary>
+        /// Whether task inputs are logged.
+        /// </summary>
+        private bool _isTaskInputLoggingEnabled;
+
         /// <summary>
         /// The set of parameters to apply to the task prior to execution.  
         /// </summary>
@@ -105,6 +110,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
         /// <param name="taskName">Name of the task.</param>
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
+        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
@@ -124,6 +130,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
         /// <param name="taskName">Name of the task.</param>
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
+        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
@@ -145,6 +152,7 @@ public TaskHostConfiguration
                 bool continueOnError,
                 string taskName,
                 string taskLocation,
+                bool isTaskInputLoggingEnabled,
                 IDictionary<string, object> taskParameters,
                 Dictionary<string, string> globalParameters,
                 ICollection<string> warningsAsErrors,
@@ -178,6 +186,7 @@ ICollection<string> warningsAsMessages
             _continueOnError = continueOnError;
             _taskName = taskName;
             _taskLocation = taskLocation;
+            _isTaskInputLoggingEnabled = isTaskInputLoggingEnabled;
             _warningsAsErrors = warningsAsErrors;
             _warningsAsMessages = warningsAsMessages;
 
@@ -324,6 +333,16 @@ public string TaskLocation
             { return _taskLocation; }
         }
 
+        /// <summary>
+        /// Returns <see langword="true"/> if the build is configured to log all task inputs.
+        /// </summary>
+        public bool IsTaskInputLoggingEnabled
+        {
+            [DebuggerStepThrough]
+            get
+            { return _isTaskInputLoggingEnabled; }
+        }
+
         /// <summary>
         /// Parameters to set on the instantiated task prior to execution. 
         /// </summary>
@@ -391,6 +410,7 @@ public void Translate(ITranslator translator)
             translator.Translate(ref _projectFileOfTask);
             translator.Translate(ref _taskName);
             translator.Translate(ref _taskLocation);
+            translator.Translate(ref _isTaskInputLoggingEnabled);
             translator.TranslateDictionary(ref _taskParameters, StringComparer.OrdinalIgnoreCase, TaskParameter.FactoryForDeserialization);
             translator.Translate(ref _continueOnError);
             translator.TranslateDictionary(ref _globalParameters, StringComparer.OrdinalIgnoreCase);
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 66a202fd6b8..2921e9ce140 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -239,6 +239,12 @@ public virtual string GetResourceMessage(string resourceName)
 
         #region Message logging methods
 
+        /// <summary>
+        /// Returns <see langword="true"/> if the build is configured to log all task inputs.
+        /// </summary>
+        public bool IsTaskInputLoggingEnabled =>
+            BuildEngine is not IBuildEngine10 buildEngine10 || buildEngine10.EngineServices.IsTaskInputLoggingEnabled;
+
         /// <summary>
         /// Returns true if a message of given importance should be logged because it is possible that a logger consuming it exists.
         /// </summary>
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 7ed21691a98..2cea34c71bb 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1418,7 +1418,7 @@ private MessageImportance ChooseReferenceLoggingImportance(Reference reference)
         private void LogInputs()
         {
             MessageImportance importance = MessageImportance.Low;
-            if (Traits.Instance.EscapeHatches.LogTaskInputs || Silent || !Log.LogsMessagesOfImportance(importance))
+            if (Silent || Log.IsTaskInputLoggingEnabled || !Log.LogsMessagesOfImportance(importance))
             {
                 // the inputs will be logged automatically anyway, avoid duplication in the logs
                 return;
