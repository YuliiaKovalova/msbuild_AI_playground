diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 3f4d2a1e54f..bf901e00015 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -860,7 +860,7 @@ public async Task WaitForExitAsync()
 
                 // Kill the child and do a blocking wait.
                 CommunicationsUtilities.Trace("Killing node with pid = {0}", _process.Id);
-                _process.KillTree(timeout: -1);
+                _process.KillTree();
             }
 
 #if FEATURE_APM
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 4818d7eda9c..42e8a3ead07 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -465,10 +465,8 @@ public SystemInformationData()
                                 string arch = null;
                                 if (proc != null)
                                 {
-                                    // Since uname -m simply returns kernel property, it should be quick.
-                                    // 1 second is the best guess for a safe timeout.
-                                    proc.WaitForExit(1000);
                                     arch = proc.StandardOutput.ReadLine();
+                                    proc.WaitForExit();
                                 }
 
                                 if (!string.IsNullOrEmpty(arch))
diff --git a/src/Shared/ProcessExtensions.cs b/src/Shared/ProcessExtensions.cs
index 7f5c5d019c7..86b84a9a88e 100644
--- a/src/Shared/ProcessExtensions.cs
+++ b/src/Shared/ProcessExtensions.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Shared
 {
     internal static class ProcessExtensions
     {
-        public static void KillTree(this Process process, int timeout)
+        public static void KillTree(this Process process)
         {
             if (NativeMethodsShared.IsWindows)
             {
@@ -41,17 +41,17 @@ public static void KillTree(this Process process, int timeout)
             // wait until the process finishes exiting/getting killed. 
             // We don't want to wait forever here because the task is already supposed to be dieing, we just want to give it long enough
             // to try and flush what it can and stop. If it cannot do that in a reasonable time frame then we will just ignore it.
-            process.WaitForExit(timeout);
+            process.WaitForExit();
         }
 
         private static void GetAllChildIdsUnix(int parentId, ISet<int> children)
         {
-            var exitCode = RunProcessAndWaitForExit(
+            RunProcessAndWaitForExit(
                 "pgrep",
                 $"-P {parentId}",
                 out string stdout);
 
-            if (exitCode == 0 && !string.IsNullOrEmpty(stdout))
+            if (!string.IsNullOrEmpty(stdout))
             {
                 using (var reader = new StringReader(stdout))
                 {
@@ -94,7 +94,7 @@ private static void KillProcessUnix(int processId)
             }
         }
 
-        private static int RunProcessAndWaitForExit(string fileName, string arguments, out string stdout)
+        private static void RunProcessAndWaitForExit(string fileName, string arguments, out string stdout)
         {
             var startInfo = new ProcessStartInfo
             {
@@ -105,27 +105,8 @@ private static int RunProcessAndWaitForExit(string fileName, string arguments, o
             };
 
             var process = Process.Start(startInfo);
-
-            stdout = null;
-            if (process.WaitForExit((int) TimeSpan.FromSeconds(30).TotalMilliseconds))
-            {
-                stdout = process.StandardOutput.ReadToEnd();
-            }
-            else
-            {
-                try
-                {
-                    process.Kill();
-                }
-                catch (InvalidOperationException)
-                { }
-
-                // Kill is asynchronous so we should still wait a little
-                //
-                process.WaitForExit((int) TimeSpan.FromSeconds(1).TotalMilliseconds);
-            }
-
-            return process.HasExited ? process.ExitCode : -1;
+            stdout = process.StandardOutput.ReadToEnd();
+            process.WaitForExit();
         }
     }
 }
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index 23f7abc7e67..604f1633c77 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -940,17 +940,7 @@ private void KillToolProcessOnTimeout(Process proc, bool isBeingCancelled)
                     LogShared.LogWarningWithCodeFromResources("Shared.KillingProcessByCancellation", processName);
                 }
 
-                int timeout = 5000;
-                string timeoutFromEnvironment = Environment.GetEnvironmentVariable("MSBUILDTOOLTASKCANCELPROCESSWAITTIMEOUT");
-                if (timeoutFromEnvironment != null)
-                {
-                    if (int.TryParse(timeoutFromEnvironment, out int result) && result >= 0)
-                    {
-                        timeout = result;
-                    }
-                }
-
-                proc.KillTree(timeout);
+                proc.KillTree();
             }
         }
 
