diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 2f2769bad97..d356da6b9d3 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -109,11 +109,11 @@ public void TestBinaryLoggerRoundtrip(string projectText, BinlogRoundtripTestRep
             var mockLogFromBuild = new MockLogger();
 
             var serialFromBuildText = new StringBuilder();
-            var serialFromBuild = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromBuildText.Append(t), colorSet: null, colorReset: null);
+            var serialFromBuild = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, t => serialFromBuildText.Append(t), colorSet: null, colorReset: null);
             serialFromBuild.Parameters = "NOPERFORMANCESUMMARY";
 
             var parallelFromBuildText = new StringBuilder();
-            var parallelFromBuild = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromBuildText.Append(t), colorSet: null, colorReset: null);
+            var parallelFromBuild = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, t => parallelFromBuildText.Append(t), colorSet: null, colorReset: null);
             parallelFromBuild.Parameters = "NOPERFORMANCESUMMARY";
 
             // build and log into binary logger, mock logger, serial and parallel console loggers
@@ -143,7 +143,7 @@ public void TestBinaryLoggerRoundtrip(string projectText, BinlogRoundtripTestRep
 
                         BinaryLogger outputBinlog = new BinaryLogger()
                         {
-                            Parameters = fileToReplay
+                            BinaryLoggerParameters = new BinaryLoggerParameters(fileToReplay)
                         };
                         outputBinlog.Initialize(logReader);
                         logReader.Replay(_logFile);
@@ -157,11 +157,11 @@ public void TestBinaryLoggerRoundtrip(string projectText, BinlogRoundtripTestRep
             var mockLogFromPlayback = new MockLogger();
 
             var serialFromPlaybackText = new StringBuilder();
-            var serialFromPlayback = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromPlaybackText.Append(t), colorSet: null, colorReset: null);
+            var serialFromPlayback = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, t => serialFromPlaybackText.Append(t), colorSet: null, colorReset: null);
             serialFromPlayback.Parameters = "NOPERFORMANCESUMMARY";
 
             var parallelFromPlaybackText = new StringBuilder();
-            var parallelFromPlayback = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromPlaybackText.Append(t), colorSet: null, colorReset: null);
+            var parallelFromPlayback = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, t => parallelFromPlaybackText.Append(t), colorSet: null, colorReset: null);
             parallelFromPlayback.Parameters = "NOPERFORMANCESUMMARY";
 
             var binaryLogReader = new BinaryLogReplayEventSource();
@@ -211,7 +211,7 @@ public void TestBinaryLoggerRoundtripEquality(string projectText, BinlogRoundtri
         {
             var binaryLogger = new BinaryLogger();
 
-            binaryLogger.Parameters = _logFile;
+            binaryLogger.BinaryLoggerParameters = new BinaryLoggerParameters(_logFile);
 
             // build and log into binary logger
             using (ProjectCollection collection = new())
@@ -233,7 +233,7 @@ public void TestBinaryLoggerRoundtripEquality(string projectText, BinlogRoundtri
 
             BinaryLogger outputBinlog = new BinaryLogger()
             {
-                Parameters = $"LogFile={replayedLogFile};OmitInitialInfo"
+                BinaryLoggerParameters = new BinaryLoggerParameters($"LogFile={replayedLogFile};OmitInitialInfo")
             };
             outputBinlog.Initialize(logReader);
             logReader.Replay(_logFile);
diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
index 842cfecfcb9..d38b1a9a12d 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -60,7 +60,7 @@ public string GetStringifiedParameters()
             {
                 return null;
             }
-            // TODO: parsing logic
+
             var data = parameters.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
             var initProjectFile = data[0].Replace("initProjectFile=","");
             var isBinaryLoggerSet = bool.Parse(data[1].Replace("isBinaryLoggerSet=", ""));
