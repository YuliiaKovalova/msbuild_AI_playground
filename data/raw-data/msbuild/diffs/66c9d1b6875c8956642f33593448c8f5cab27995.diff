diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index bf1f19f2624..a7d35fcf8c4 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1725,6 +1725,12 @@ internal static void GatherCommandLineSwitches(ArrayList commandLineArgs, Comman
                                 String.Equals(switchName, "maxcpucount", StringComparison.OrdinalIgnoreCase))
                             {
                                 int numberOfCpus = Environment.ProcessorCount;
+                                if(numberOfCpus == 32 && NativeMethodsShared.IsWindows) // 32-bit process, 32-bit Windows had a 32-core limit
+                                {
+                                    var result = NativeMethodsShared.GetPhysicalCoreCount();
+                                    if(result != -1)
+                                        numberOfCpus = result;
+                                }
                                 switchParameters = ":" + numberOfCpus;
                             }
                             else if (String.Equals(switchName, "bl", StringComparison.OrdinalIgnoreCase) ||
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 1eb2840cbe9..c2fe8934a3b 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -137,6 +137,16 @@ private enum eDesiredAccess : int
             PROCESS_ALL_ACCESS = SYNCHRONIZE | 0xFFF
         }
 
+        internal enum LOGICAL_PROCESSOR_RELATIONSHIP
+		{
+			RelationProcessorCore,
+			RelationNumaNode,
+			RelationCache,
+			RelationProcessorPackage,
+			RelationGroup,
+			RelationAll = 0xffff
+		}
+
         /// <summary>
         /// Flags for CoWaitForMultipleHandles
         /// </summary>
@@ -470,6 +480,42 @@ public SystemInformationData()
             }
         }
 
+        public static int GetPhysicalCoreCount()
+        {
+            const int ERROR_INSUFFICIENT_BUFFER = 122;
+
+			// Determine the required buffer size to store the processor information
+			uint ReturnLength = 0;
+			if(!GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore, IntPtr.Zero, ref ReturnLength) && Marshal.GetLastWin32Error() == ERROR_INSUFFICIENT_BUFFER)
+			{
+                IntPtr ptr = IntPtr.Zero;
+				try
+				{
+                    ptr = Marshal.AllocHGlobal((int)ReturnLength);
+					if (GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore, ptr, ref ReturnLength))
+					{
+						int count = 0;
+						for(int pos = 0; pos < ReturnLength; )
+						{
+							LOGICAL_PROCESSOR_RELATIONSHIP Type = (LOGICAL_PROCESSOR_RELATIONSHIP)Marshal.ReadInt16(ptr, pos);
+							if(Type == LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore)
+							{
+								count++;
+							}
+							pos += Marshal.ReadInt32(ptr, pos + 4);
+						}
+						return count;
+					}
+				}
+				finally
+				{
+					Marshal.FreeHGlobal(ptr);		
+				}
+			}
+
+			return -1;
+		}
+
         #endregion
 
         #region Member data
@@ -810,6 +856,10 @@ internal static int SetErrorMode(int newMode)
         [SuppressMessage("Microsoft.Design", "CA1060:MovePInvokesToNativeMethodsClass", Justification = "Class name is NativeMethodsShared for increased clarity")]
         [DllImport("kernel32.dll", SetLastError = true)]
         internal static extern void GetNativeSystemInfo(ref SYSTEM_INFO lpSystemInfo);
+        
+        [SuppressMessage("Microsoft.Design", "CA1060:MovePInvokesToNativeMethodsClass", Justification = "Class name is NativeMethodsShared for increased clarity")]
+        [DllImport("kernel32.dll", SetLastError = true)]
+        internal static extern bool GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, IntPtr Buffer, ref uint ReturnedLength);
 
         /// <summary>
         /// Get the last write time of the fullpath to a directory. If the pointed path is not a directory, or
