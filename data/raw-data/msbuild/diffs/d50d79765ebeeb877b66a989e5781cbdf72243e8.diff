diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 2eb3d10200e..9c3a6d9f7b4 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -21,10 +21,10 @@ public string GetUnambiguousPath(string path)
             return Path.GetFileName(path);
         }
 
-        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);
-
         public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
 
+        public Dictionary<int, FancyLoggerProjectNode> projects = new Dictionary<int, FancyLoggerProjectNode>();
+
         private float existingTasks = 1;
         private float completedTasks = 0;
 
@@ -43,7 +43,7 @@ public void Initialize(IEventSource eventSource)
             // Started
             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
-            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
+            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
             // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
             // Finished
             eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);
@@ -73,35 +73,28 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
             // If id already exists...
-            if (projectConsoleLines.ContainsKey(id)) return;
-            // Create line
-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(
-                ANSIBuilder.Alignment.SpaceBetween(
-                    $"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim("Project - ")} {GetUnambiguousPath(e.ProjectFile!)}",
-                    "(5 targets completed)",
-                    Console.WindowWidth
-                )
-            );
-
-            projectConsoleLines.Add(id, line);
+            if (projects.ContainsKey(id)) return;
+            // Add project
+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
+            node.WriteStart();
+            projects[id] = node;
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;
+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update line
-            FancyLoggerBuffer.UpdateLine(line.Id,
-                ANSIBuilder.Alignment.SpaceBetween(
-                    $"{ANSIBuilder.Formatting.Color("âœ“", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim("Project - ")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}",
-                    "(5 targets completed)",
-                    Console.WindowWidth
-                )
-            );
+            node.WriteEnd();
         }
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
+            // Get project id
+            int id = e.BuildEventContext!.ProjectInstanceId;
+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            // Update
+            node.WriteTarget(e);
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
@@ -110,6 +103,12 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         // Task
         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
+            // Get project id
+            int id = e.BuildEventContext!.ProjectInstanceId;
+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            // Update
+            node.UpdateLine();
+
             existingTasks++;
         }
 
@@ -134,9 +133,9 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
 
         public void Shutdown() {
             // Keep open if autoscroll disabled (the user is reading info)
-            while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)
+            /*while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)
             {
-            }
+            }*/
             FancyLoggerBuffer.Terminate();
             Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
         }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index cac4aafd7ef..08436200d56 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -222,9 +222,8 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)
             if (lineIndex == -1) return null;
             lines.Insert(lineIndex + 1, line);
             // Scroll to end if lineIndex >= lines
-            // if (lineIndex >= lines.Count -2 && AutoScrollEnabled) ScrollToEnd();
-            // else ScrollToLine(CurrentTopLineIndex);
-            ScrollToEnd();
+            if (lineIndex >= lines.Count -2 && AutoScrollEnabled) ScrollToEnd();
+            else ScrollToLine(CurrentTopLineIndex);
             return line;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index b3021f042eb..9011fcaeb69 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -4,6 +4,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
@@ -11,141 +12,73 @@
 
 namespace Microsoft.Build.Logging.FancyLogger
 { 
-    // TODO: Maybe remove
-    public enum FancyLoggerNodeType
+    public class FancyLoggerProjectNode
     {
-        None,
-        Build,
-        Project,
-        Target,
-        Task,
-        Message,
-        Warning,
-        Error
-    }
-
-    public class FancyLoggerNode
-    {
-        public string Id;
-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();
-        public FancyLoggerNode? Parent;
-        public FancyLoggerBufferLine? Line;
-        public int Depth = 0;
-        public FancyLoggerNode(string id)
-        {
-            Id = id;
-        }
-        public FancyLoggerNode(int id, FancyLoggerNodeType type)
+        private static string GetUnambiguousPath(string path)
         {
-            switch (type)
-            {
-                case FancyLoggerNodeType.Build:
-                    Id = $"build-{id}";
-                    break;
-                case FancyLoggerNodeType.Project:
-                    Id = $"project-{id}";
-                    break;
-                case FancyLoggerNodeType.Target:
-                    Id = $"target-{id}";
-                    break;
-                case FancyLoggerNodeType.Task:
-                    Id = $"task-{id}";
-                    break;
-                case FancyLoggerNodeType.Message:
-                    Id = $"message-{id}";
-                    break;
-                case FancyLoggerNodeType.Warning:
-                    Id = $"warning-{id}";
-                    break;
-                case FancyLoggerNodeType.Error:
-                    Id = $"error-{id}";
-                    break;
-                default:
-                    Id = id.ToString(); break;
-            }
+            return Path.GetFileName(path);
         }
-        public FancyLoggerNode? Find(string id)
+        public int Id;
+        public string ProjectPath;
+        public FancyLoggerBufferLine? Line;
+
+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)
         {
-            // If self
-            if(Id == id) return this;
-            // If no children
-            if(Children.Count == 0) return null;
-            // Iterate
-            foreach (var child in Children)
-            {
-                FancyLoggerNode? node = child.Value.Find(id);
-                if (node != null) return node;
-            }
-            return null;
+            Id = args.ProjectId;
+            ProjectPath = args.ProjectFile!;
         }
 
-        public void Add(FancyLoggerNode node)
+        public void UpdateLine()
         {
-            if (Children.ContainsKey(node.Id)) return;
-            Children.Add(node.Id, node);
-            node.Depth = Depth + 1;
-            node.Parent = this;
+            if (Line == null) return;
+            FancyLoggerBuffer.UpdateLine(Line.Id,
+                ANSIBuilder.Alignment.SpaceBetween(
+                    $"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim("Project - ")} {GetUnambiguousPath(ProjectPath)}",
+                    $"({ANSIBuilder.Formatting.Italic("n")} targets completed)",
+                    Console.WindowWidth
+                )
+            );
         }
 
-        public int GetLastLineIndex()
+        public void WriteStart()
         {
-            // If no line, return -1
-            if (Line == null) return -1;
-            // Get line index and id
-            int lastLineIndex = FancyLoggerBuffer.GetLineIndexById(Line.Id);
-            int lastLineId = Line.Id;
-            if (lastLineIndex == -1) return -1;
-            // Get max of children
-            foreach (var child in Children)
-            {
-                int childLastLineIndex = child.Value.GetLastLineIndex();
-                if (childLastLineIndex > lastLineIndex)
-                {
-                    lastLineIndex = childLastLineIndex;
-                    lastLineId = child.Value.Line!.Id;
-                }
-            }
-            return lastLineIndex;
+            Line = FancyLoggerBuffer.WriteNewLine("");
+            UpdateLine();
         }
-
-        public void Write()
+        public void WriteEnd()
         {
-            if (Line == null) { return; }
-            // Adjust identation
-            Line.IdentationLevel = Depth - 1;
-            // If line not in the buffer, add
-            if (FancyLoggerBuffer.GetLineIndexById(Line.Id) == -1)
-            {
-                // Get parent last line index
-                if (Parent != null)
-                {
-                    int parentLastLineId = Parent.GetLastLineIndex();
-                    // if (parentLastLineId == -1) throw new Exception("Oops something went wrong");
-                    if (parentLastLineId == -1) return;
-                    // FancyLoggerBuffer.WriteNewLineAfter(Line, parentLastLineId);
-                    FancyLoggerBuffer.WriteNewLineAfterIndex(Line, parentLastLineId);
-                }
-            }
+            if (Line == null) return;
+            FancyLoggerBuffer.UpdateLine(Line.Id,
+                ANSIBuilder.Alignment.SpaceBetween(
+                    $"{ANSIBuilder.Formatting.Color("âœ“", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim("Project - ")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(ProjectPath), ANSIBuilder.Formatting.ForegroundColor.Green)}",
+                    "(All targets complete)",
+                    Console.WindowWidth
+                )
+            );
         }
 
-        public void Collapse()
+        public void WriteTarget(TargetStartedEventArgs args)
         {
-            foreach (var child in Children)
-            {
-                if (child.Value.Line == null) continue;
-                FancyLoggerBuffer.HideLine(child.Value.Line.Id);
-                child.Value.Collapse();
-            }
+            if (Line == null) return;
+            // Update spinner
+            UpdateLine();
+            // Create target node
+            /* FancyLoggerTargetNode targetNode = new FancyLoggerTargetNode(args);
+            FancyLoggerBuffer.WriteNewLineAfter(
+                $"-- Target {targetNode.TargetName}",
+                Line.Id
+            ); */
         }
+    }
 
-        public void Expand()
+    public class FancyLoggerTargetNode
+    {
+        public int Id;
+        public string TargetName;
+        public FancyLoggerTargetNode(TargetStartedEventArgs args)
         {
-            foreach (var child in Children)
-            {
-                if (child.Value.Line == null) continue;
-                FancyLoggerBuffer.UnhideLine(child.Value.Line.Id);
-                child.Value.Expand();
-            }
+            Id = args.BuildEventContext!.TargetId;
+            TargetName = args.TargetName;
         }
     }
 }
