diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 1a301b642b6..aac1164d0b2 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1480,6 +1480,7 @@ internal static void VerifyThrowWin32Result(int result)
         }
     }
 
+#if !CLR2COMPATIBILITY
     internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes()
     {
         bool acceptAnsiColorCodes = false;
@@ -1541,7 +1542,7 @@ internal static void RestoreConsoleMode(uint? originalConsoleMode)
             _ = SetConsoleMode(stdOut, originalConsoleMode.Value);
         }
     }
-
+#endif // !CLR2COMPATIBILITY
 
     #endregion
 
diff --git a/src/MSBuild/LiveLogger/Logger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
similarity index 88%
rename from src/MSBuild/LiveLogger/Logger.cs
rename to src/MSBuild/LiveLogger/LiveLogger.cs
index acad7b3636e..05d00913bce 100644
--- a/src/MSBuild/LiveLogger/Logger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -9,8 +9,9 @@
 
 #nullable disable
 
-namespace tortillachip;
-public class Logger : INodeLogger
+namespace Microsoft.Build.Logging.LiveLogger;
+
+internal sealed class LiveLogger : INodeLogger
 {
     private readonly object _lock = new();
 
@@ -30,8 +31,28 @@ public class Logger : INodeLogger
 
     private ProjectContext _restoreContext;
 
-    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set => value = LoggerVerbosity.Minimal; }
-    public string Parameters { get => ""; set => value = ""; }
+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
+    public string Parameters { get => ""; set { } }
+
+    /// <summary>
+    /// List of events the logger needs as parameters to the <see cref="ConfigurableForwardingLogger"/>.
+    /// </summary>
+    /// <remarks>
+    /// If LiveLogger runs as a distributed logger, MSBuild out-of-proc nodes might filter the events that will go to the main node using an instance of <see cref="ConfigurableForwardingLogger"/> with the following parameters.
+    /// </remarks>
+    public static readonly string[] ConfigurableForwardingLoggerParameters =
+    {
+            "BUILDSTARTEDEVENT",
+            "BUILDFINISHEDEVENT",
+            "PROJECTSTARTEDEVENT",
+            "PROJECTFINISHEDEVENT",
+            "TARGETSTARTEDEVENT",
+            "TARGETFINISHEDEVENT",
+            "TASKSTARTEDEVENT",
+            "HIGHMESSAGEEVENT",
+            "WARNINGEVENT",
+            "ERROREVENT"
+    };
 
     public void Initialize(IEventSource eventSource, int nodeCount)
     {
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/LiveProject.cs
similarity index 84%
rename from src/MSBuild/LiveLogger/Project.cs
rename to src/MSBuild/LiveLogger/LiveProject.cs
index 3d65a5d8a6c..4c52ac8718f 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/LiveProject.cs
@@ -3,7 +3,7 @@
 
 using System.Diagnostics;
 
-namespace tortillachip;
+namespace Microsoft.Build.Logging.LiveLogger;
 
 internal class Project
 {
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index d74133115f2..3c61b777dac 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -34,14 +34,11 @@
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
+using LiveLogger = Microsoft.Build.Logging.LiveLogger.LiveLogger;
 using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Internal;
-#if LIVELOGGER
-using Microsoft.Build.Logging.LiveLogger;
-#endif
-using System.Runtime.InteropServices;
 
 #nullable disable
 
@@ -1328,7 +1325,7 @@ internal static bool BuildProject(
                         }
                     }
 
-                    List<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
+                    List<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = new();
 
                     BuildManager buildManager = BuildManager.DefaultBuildManager;
 
@@ -3469,7 +3466,6 @@ private static void ProcessLiveLogger(
             int cpuCount,
             List<ILogger> loggers)
         {
-#if LIVELOGGER
             if (!noConsoleLogger)
             {
                 // A central logger will be created for both single proc and multiproc.
@@ -3488,7 +3484,6 @@ private static void ProcessLiveLogger(
                     distributedLoggerRecords.Add(forwardingLoggerRecord);
                 }
             }
-#endif
         }
 
         /// <summary>
