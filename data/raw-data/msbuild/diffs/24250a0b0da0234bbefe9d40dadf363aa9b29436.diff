diff --git a/src/Shared/Debugging/PrintLineDebugger.cs b/src/Shared/Debugging/PrintLineDebugger.cs
index b6f1bf71261..62fc26b7507 100644
--- a/src/Shared/Debugging/PrintLineDebugger.cs
+++ b/src/Shared/Debugging/PrintLineDebugger.cs
@@ -97,6 +97,30 @@ public PrintLineDebugger(string id, CommonWriterType writer)
             }
         }
 
+        public static PrintLineDebugger CreateWithFallBackWriter(
+            CommonWriterType fallBackWriter,
+            string id = null,
+            bool prependProcessInfo = false)
+        {
+            fallBackWriter = GetStaticWriter() == null
+                ? fallBackWriter
+                : null;
+
+            return Create(fallBackWriter, id, prependProcessInfo);
+        }
+
+        public static PrintLineDebugger Create(
+            CommonWriterType writer = null,
+            string id = null,
+            bool prependProcessInfo = false)
+        {
+            return new PrintLineDebugger(
+                prependProcessInfo
+                    ? $"{ProcessInfo}_{id}"
+                    : id,
+                writer);
+        }
+
         public void Dispose()
         {
             ReleaseUnmanagedResources();
@@ -144,18 +168,6 @@ public static void UnsetWriter()
             CommonWriterProperty.Value.SetValue(null, null);
         }
 
-        public static PrintLineDebugger Create(
-            CommonWriterType writer = null,
-            string id = null,
-            bool prependProcessInfo = false)
-        {
-            return new PrintLineDebugger(
-                prependProcessInfo
-                    ? $"{ProcessInfo}_{id}"
-                    : id,
-                writer);
-        }
-
         public CommonWriterType GetWriter()
         {
             return _writerSetByThisInstance ?? GetStaticWriter();
diff --git a/src/Shared/Debugging/PrintLineDebuggerWriters.cs b/src/Shared/Debugging/PrintLineDebuggerWriters.cs
index a5c33dca011..087ed91cdc3 100644
--- a/src/Shared/Debugging/PrintLineDebuggerWriters.cs
+++ b/src/Shared/Debugging/PrintLineDebuggerWriters.cs
@@ -40,7 +40,7 @@ public IdBasedFilesWriter(string logFileRoot)
 
             public static IdBasedFilesWriter FromArtifactLogDirectory()
             {
-                return new IdBasedFilesWriter(ArtifactsLogDirectory);
+                return new IdBasedFilesWriter(RepositoryInfo.Instance.ArtifactsLogDirectory);
             }
         }
 
@@ -66,23 +66,6 @@ public CompositeWriter(IEnumerable<CommonWriterType> writers)
 
         public static CommonWriterType StdOutWriter = (id, callsite, args) => Console.WriteLine(SimpleFormat(id, callsite, args));
 
-        private static Lazy<string> _artifactsLogs = new Lazy<string>(
-            () =>
-            {
-                var executingAssembly = FileUtilities.ExecutingAssemblyPath;
-
-                var binPart = $"bin";
-
-                var logIndex = executingAssembly.IndexOf(binPart, StringComparison.Ordinal);
-
-                var artifactsPart = executingAssembly.Substring(0, logIndex);
-                return logIndex < 0
-                    ? null
-                    : Path.Combine(artifactsPart, "log", "Debug");
-            });
-
-        public static string ArtifactsLogDirectory => _artifactsLogs.Value;
-
         public static string SimpleFormat(string id, string callsite, IEnumerable<string> args)
         {
             return $"\n{(id == null ? string.Empty : id + ": ")}{callsite}:{string.Join(";", args)}";
diff --git a/src/Shared/Debugging/RepositoryInfo.cs b/src/Shared/Debugging/RepositoryInfo.cs
new file mode 100644
index 00000000000..62382c70f8a
--- /dev/null
+++ b/src/Shared/Debugging/RepositoryInfo.cs
@@ -0,0 +1,84 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.IO;
+using System.Linq;
+
+namespace Microsoft.Build.Shared.Debugging
+{
+    internal class RepositoryInfo
+    {
+        public static RepositoryInfo Instance = new RepositoryInfo();
+
+        public string ArtifactsLogDirectory => _artifactsLogs.Value;
+
+        public string Configuration { get; } =
+#if DEBUG
+            "Debug";
+#else
+            "Release";
+#endif
+
+        private RepositoryInfo()
+        {
+            _artifactsLogs = new Lazy<string>(ComputeArtifactsLogs);
+        }
+
+        private readonly Lazy<string> _artifactsLogs;
+
+        private string ComputeArtifactsLogs()
+        {
+            var searchPathStrategies = new Func<string>[]
+            {
+                TryFromCurrentAssembly,
+                TryFromAzureCI
+            };
+
+
+            return searchPathStrategies.Select(searchPathStrategy => searchPathStrategy.Invoke()).FirstOrDefault(path => path != null);
+        }
+
+        private string TryFromCurrentAssembly()
+        {
+            var executingAssembly = FileUtilities.ExecutingAssemblyPath;
+
+            var binPart = $"bin";
+
+            var logIndex = executingAssembly.IndexOf(binPart, StringComparison.Ordinal);
+
+            if (logIndex < 0)
+            {
+                return null;
+            }
+
+            var artifactsPart = executingAssembly.Substring(0, logIndex);
+
+            var path = Path.Combine(
+                artifactsPart,
+                "log",
+                Configuration
+                );
+
+            ErrorUtilities.VerifyThrowDirectoryExists(path);
+
+            return path;
+        }
+
+        private string TryFromAzureCI()
+        {
+            var repositoryPathInAzure = Environment.GetEnvironmentVariable("Build_Repository_LocalPath");
+
+            if (repositoryPathInAzure == null)
+            {
+                return null;
+            }
+
+            var path = Path.Combine(repositoryPathInAzure, "artifacts", "logs", ArtifactsLogDirectory);
+
+            ErrorUtilities.VerifyThrowDirectoryExists(path);
+
+            return path;
+        }
+    }
+}
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 9e170951cb3..398688865c8 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -7,6 +7,7 @@
 using System.Globalization;
 using System.Runtime.CompilerServices;
 using System.Threading;
+using Microsoft.Build.Shared.FileSystem;
 
 #if BUILDINGAPPXTASKS
 namespace Microsoft.Build.AppxPackage.Shared
@@ -100,6 +101,16 @@ internal static void ThrowIfTypeDoesNotImplementToString(object param)
 #endif
         }
 
+        public static void VerifyThrowDirectoryExists(string path, string message = null)
+        {
+            VerifyThrowArgumentNull(path, nameof(path));
+
+            if (!FileSystems.Default.DirectoryExists(path))
+            {
+                ThrowInternalError(message ?? $"Directory expected to exist: {path}");
+            }
+        }
+
         /// <summary>
         /// Helper to throw an InternalErrorException when the specified parameter is null.
         /// This should be used ONLY if this would indicate a bug in MSBuild rather than
diff --git a/src/Shared/UnitTests/PrintLineDebugger_Tests.cs b/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
index 2d0c1747e6c..ec34b684b37 100644
--- a/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
+++ b/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
@@ -13,15 +13,30 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    public sealed class PrintLineDebugger_Tests
+    public sealed class PrintLineDebugger_Tests : IDisposable
     {
+        private readonly TestEnvironment _env;
+
+        public PrintLineDebugger_Tests()
+        {
+            PrintLineDebugger.GetStaticWriter().ShouldBeNull();
+
+            _env = TestEnvironment.Create();
+        }
+
         private class MockWriter
         {
+            private readonly string _writerId;
             public readonly List<string> Logs = new List<string>();
 
+            public MockWriter(string writerId = "")
+            {
+                _writerId = writerId;
+            }
+
             public CommonWriterType Writer()
             {
-                return (id, callsite, args) => Logs.Add($"{id}{callsite}{string.Join(";", args)}");
+                return (id, callsite, args) => Logs.Add($"{_writerId}{id}{callsite}{string.Join(";", args)}");
             }
         }
 
@@ -182,7 +197,7 @@ public void DefaultDebuggerShouldUseOuterDebuggerWriter()
         [Fact]
         public void ArtifactsDirectoryLooksGood()
         {
-            var artifactsDirectory = PrintLineDebuggerWriters.ArtifactsLogDirectory;
+            var artifactsDirectory = RepositoryInfo.Instance.ArtifactsLogDirectory;
 
             artifactsDirectory.ShouldNotBeNull();
             artifactsDirectory.ShouldEndWith(Path.Combine("log", "Debug"), Case.Sensitive);
@@ -198,16 +213,13 @@ public void CannotSetTwoWritersViaStaticSetters()
 
             PrintLineDebugger.SetWriter(new MockWriter().Writer());
 
-            using (var env = TestEnvironment.Create())
-            {
-                env.SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
+            _env.SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
 
-                Should.Throw<Exception>(
-                    () =>
-                    {
-                        PrintLineDebugger.SetWriter(new MockWriter().Writer());
-                    });
-            }
+            Should.Throw<Exception>(
+                () =>
+                {
+                    PrintLineDebugger.SetWriter(new MockWriter().Writer());
+                });
 
             PrintLineDebugger.UnsetWriter();
             PrintLineDebugger.SetWriter(new MockWriter().Writer());
@@ -242,20 +254,74 @@ public void CannotUnsetWriterWhenNoWriterIsSet()
             PrintLineDebugger.SetWriter(new MockWriter().Writer());
             PrintLineDebugger.UnsetWriter();
 
-            using (var env = TestEnvironment.Create())
-            {
-                env.SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
+            _env.SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
 
-                Should.Throw<Exception>(
-                    () =>
-                    {
-                        PrintLineDebugger.UnsetWriter();
-                    });
-            }
+            Should.Throw<Exception>(
+                () =>
+                {
+                    PrintLineDebugger.UnsetWriter();
+                });
 
             PrintLineDebugger.SetWriter(new MockWriter().Writer());
             PrintLineDebugger.UnsetWriter();
         }
+
+        [Fact]
+        public void CreateWithFallBackWriterSetsWriterIfNoWriterIsSet()
+        {
+            var writer = new MockWriter("FallBackWriter");
+
+            using (var debugger = PrintLineDebugger.CreateWithFallBackWriter(writer.Writer()))
+            {
+                debugger.Log("foo");
+            }
+
+            writer.Logs.ShouldHaveSingleItem();
+            writer.Logs.First().ShouldEndWith("foo");
+            writer.Logs.First().ShouldStartWith("FallbackWriter");
+        }
+
+        [Fact]
+        public void CreateWithFallBackWriterDoesNotSetWriterIfAWriterIsAlreadySet()
+        {
+            try
+            {
+                var firstWriter = new MockWriter("FirstWriter");
+                var fallbackWriter = new MockWriter("FallBackWriter");
+
+                PrintLineDebugger.SetWriter(firstWriter.Writer());
+
+                PrintLineDebugger.Default.Value.Log("ForFirstWriter1");
+
+                using (var debugger = PrintLineDebugger.CreateWithFallBackWriter(fallbackWriter.Writer()))
+                {
+                    debugger.Log("foo");
+                    PrintLineDebugger.Default.Value.Log("ForFirstWriter2");
+                }
+
+                PrintLineDebugger.Default.Value.Log("ForFirstWriter3");
+
+                fallbackWriter.Logs.ShouldBeEmpty();
+
+                firstWriter.Logs.Count.ShouldBe(4);
+
+                firstWriter.Logs.ShouldAllBe(message => message.StartsWith("FirstWriter"));
+
+                firstWriter.Logs[0].ShouldEndWith("ForFirstWriter1");
+                firstWriter.Logs[1].ShouldEndWith("foo");
+                firstWriter.Logs[2].ShouldEndWith("ForFirstWriter2");
+                firstWriter.Logs[3].ShouldEndWith("ForFirstWriter3");
+            }
+            finally
+            {
+                PrintLineDebugger.UnsetWriter();
+            }
+        }
+
+        public void Dispose()
+        {
+            _env?.Dispose();
+        }
     }
 }
-#endif
\ No newline at end of file
+#endif
