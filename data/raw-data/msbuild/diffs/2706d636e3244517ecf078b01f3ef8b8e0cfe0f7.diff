diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 80a85ebd09c..0f264fe9849 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -7,6 +7,7 @@
 
 using System;
 using System.Collections;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
@@ -109,6 +110,16 @@ internal class RequestBuilder : IRequestBuilder, IRequestBuilderCallback, IBuild
         /// </summary>
         private bool _isZombie = false;
 
+        /// <summary>
+        /// The dedicated scheduler object.
+        /// </summary>
+        private static TaskScheduler _dedicatedScheduler;
+
+        /// <summary>
+        /// Gets the dedicated scheduler.
+        /// </summary>
+        private TaskScheduler DedicatedScheduler => _dedicatedScheduler ?? (_dedicatedScheduler = new DedicatedThreadsTaskScheduler());
+
         /// <summary>
         /// Creates a new request builder.
         /// </summary>
@@ -626,7 +637,7 @@ private void StartBuilderThread()
                         },
                         _cancellationTokenSource.Token,
                         TaskCreationOptions.None,
-                        AwaitExtensions.DedicatedThreadsTaskSchedulerInstance).Unwrap();
+                        DedicatedScheduler).Unwrap();
                 }
             }
         }
@@ -1309,5 +1320,57 @@ private ISet<string> ParseWarningCodes(string warnings)
             
             return new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);
         }
+
+        private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
+        {
+            private readonly BlockingCollection<Task> _tasks = new BlockingCollection<Task>();
+            private int _availableThreads = 0;
+
+            protected override void QueueTask(Task task)
+            {
+                RequestThread();
+                _tasks.Add(task);
+            }
+
+            protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) => false;
+
+            protected override IEnumerable<Task> GetScheduledTasks() => _tasks;
+
+            private void RequestThread()
+            {
+                // Decrement available thread count; don't drop below zero
+                // Prior value is stored in count
+                var count = Volatile.Read(ref _availableThreads);
+                while (count > 0)
+                {
+                    var prev = Interlocked.CompareExchange(ref _availableThreads, count - 1, count);
+                    if (prev == count)
+                    {
+                        break;
+                    }
+                    count = prev;
+                }
+
+                if (count == 0)
+                {
+                    // No threads were available for request
+                    InjectThread();
+                }
+            }
+
+            private void InjectThread()
+            {
+                var thread = new Thread(() =>
+                {
+                    foreach (Task t in _tasks.GetConsumingEnumerable())
+                    {
+                        TryExecuteTask(t);
+                        Interlocked.Increment(ref _availableThreads);
+                    }
+                });
+                thread.IsBackground = true;
+                thread.Start();
+            }
+        }
     }
 }
diff --git a/src/Shared/AwaitExtensions.cs b/src/Shared/AwaitExtensions.cs
index 0e4c472fb72..3ab9a01df86 100644
--- a/src/Shared/AwaitExtensions.cs
+++ b/src/Shared/AwaitExtensions.cs
@@ -7,7 +7,6 @@
 
 using System;
 using System.Collections.Concurrent;
-using System.Collections.Generic;
 using System.Globalization;
 using System.Runtime.CompilerServices;
 using System.Threading;
@@ -24,22 +23,12 @@ internal static class AwaitExtensions
         /// Synchronizes access to the staScheduler field.
         /// </summary>
         private static Object s_staSchedulerSync = new Object();
-        /// <summary>
-        /// Synchronizes access to the dedicatedSchedulerSync field.
-        /// </summary>
-        private static Object s_dedicatedSchedulerSync = new Object();
 
         /// <summary>
         /// The singleton STA scheduler object.
         /// </summary>
         private static TaskScheduler s_staScheduler;
 
-        /// <summary>
-        /// The singleton dedicated scheduler object.
-        /// </summary>
-        private static TaskScheduler s_dedicatedScheduler;
-
-
         /// <summary>
         /// Gets the STA scheduler.
         /// </summary>
@@ -62,28 +51,6 @@ internal static TaskScheduler OneSTAThreadPerTaskSchedulerInstance
             }
         }
 
-        /// <summary>
-        /// Gets the dedicated scheduler.
-        /// </summary>
-        internal static TaskScheduler DedicatedThreadsTaskSchedulerInstance
-        {
-            get
-            {
-                if (s_dedicatedScheduler == null)
-                {
-                    lock (s_dedicatedSchedulerSync)
-                    {
-                        if (s_dedicatedScheduler == null)
-                        {
-                            s_dedicatedScheduler = new DedicatedThreadsTaskScheduler();
-                        }
-                    }
-                }
-
-                return s_dedicatedScheduler;
-            }
-        }
-
         /// <summary>
         /// Provides await functionality for ordinary <see cref="WaitHandle"/>s.
         /// </summary>
@@ -235,57 +202,5 @@ protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQu
                 return false;
             }
         }
-
-        private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
-        {
-            private readonly BlockingCollection<Task> _tasks = new BlockingCollection<Task>();
-            private int _availableThreads = 0;
-
-            protected override void QueueTask(Task task)
-            {
-                RequestThread();
-                _tasks.Add(task);
-            }
-
-            protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) => false;
-
-            protected override IEnumerable<Task> GetScheduledTasks() => _tasks;
-
-            private void RequestThread()
-            {
-                // Decrement available thread count; don't drop below zero
-                // Prior value is stored in count
-                var count = Volatile.Read(ref _availableThreads);
-                while (count > 0)
-                {
-                    var prev = Interlocked.CompareExchange(ref _availableThreads, count - 1, count);
-                    if (prev == count)
-                    {
-                        break;
-                    }
-                    count = prev;
-                }
-
-                if (count == 0)
-                {
-                    // No threads were available for request
-                    InjectThread();
-                }
-            }
-
-            private void InjectThread()
-            {
-                var thread = new Thread(() =>
-                {
-                    foreach (Task t in _tasks.GetConsumingEnumerable())
-                    {
-                        TryExecuteTask(t);
-                        Interlocked.Increment(ref _availableThreads);
-                    }
-                });
-                thread.IsBackground = true;
-                thread.Start();
-            }
-        }
     }
 }
