diff --git a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
index 6297f1e33af..817b23eeee6 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
@@ -1,4 +1,10 @@
 using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
@@ -24,5 +30,91 @@ public void AutoUnifyUsesMinimumIO()
             t.Exists();
             t.StopIOMonitoringAndAssert_Minimal_IOUse();
         }
+
+        [Fact]
+        public void DependeeDirectoryIsProbedForDependency()
+        {
+            // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
+            // times out the object used for remoting console writes.  Adding a write in the middle of
+            // keeps remoting from timing out the object.
+            Console.WriteLine("Performing Perf.DependeeDirectoryIsProbedForDependency() test");
+
+            try
+            {
+                StartIOMonitoring();
+
+                MockEngine engine = new MockEngine();
+
+                ITaskItem[] assemblyNames =
+                {
+                    new TaskItem(@"C:\DependsOnNuget\A.dll"), // depends on N, version 1.0.0.0
+                    new TaskItem(@"C:\NugetCache\N\lib\N.dll") // version 2.0.0.0
+                };
+
+                ResolveAssemblyReference t = new ResolveAssemblyReference();
+
+                t.BuildEngine = engine;
+                t.Assemblies = assemblyNames;
+                t.SearchPaths = new[] { "{RawFileName}" };
+                t.AutoUnify = true;
+
+                bool succeeded = Execute(t);
+
+                Assert.True(succeeded);
+                ;
+                uniqueFileExists[@"C:\DependsOnNuget\N.winmd"].ShouldBe(1);
+                uniqueFileExists[@"C:\DependsOnNuget\N.dll"].ShouldBe(1);
+                uniqueFileExists[@"C:\DependsOnNuget\N.exe"].ShouldBe(1);
+            }
+            finally
+            {
+                StopIOMonitoring();
+            }
+        }
+
+        [Fact]
+        public void DependeeDirectoryShouldNotBeProbedForDependencyWhenDependencyResolvedExternally()
+        {
+            // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
+            // times out the object used for remoting console writes.  Adding a write in the middle of
+            // keeps remoting from timing out the object.
+            Console.WriteLine("Performing Perf.DependeeDirectoryIsProbedForDependency() test");
+
+            try
+            {
+                StartIOMonitoring();
+
+                MockEngine engine = new MockEngine();
+
+                ITaskItem[] assemblyNames =
+                {
+                    new TaskItem(@"C:\DependsOnNuget\A.dll"), // depends on N, version 1.0.0.0
+                    new TaskItem(@"C:\NugetCache\N\lib\N.dll", // version 2.0.0.0
+                        new Dictionary<string, string>
+                        {
+                            {"FindDependencies", "false"}
+                        }) 
+                };
+
+                ResolveAssemblyReference t = new ResolveAssemblyReference();
+
+                t.BuildEngine = engine;
+                t.Assemblies = assemblyNames;
+                t.SearchPaths = new[] { "{RawFileName}" };
+                t.AutoUnify = true;
+
+                bool succeeded = Execute(t);
+
+                Assert.True(succeeded);
+                ;
+                uniqueFileExists.ShouldNotContainKey(@"C:\DependsOnNuget\N.winmd");
+                uniqueFileExists.ShouldNotContainKey(@"C:\DependsOnNuget\N.dll");
+                uniqueFileExists.ShouldNotContainKey(@"C:\DependsOnNuget\N.exe");
+            }
+            finally
+            {
+                StopIOMonitoring();
+            }
+        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 05d29ef454b..d2ae4e4c6b3 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -578,6 +578,8 @@ internal void StopIOMonitoring()
             @"C:\NetStandard\netstandardlibrary.dll",
             @"C:\NetStandard\netstandard.dll",
             @"C:\SystemRuntime\Regular.dll",
+            @"C:\DependsOnNuget\A.dll",
+            @"C:\NugetCache\N\lib\N.dll"
         };
 
         /// <summary>
@@ -1731,6 +1733,16 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
                 return new AssemblyNameExtension("v5assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null, ProcessorArchitecture=X86");
             }
 
+            if (string.Compare(path, @"C:\DependsOnNuget\A.dll", StringComparison.OrdinalIgnoreCase) == 0)
+            {
+                return new AssemblyNameExtension("A, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
+            }
+
+            if (string.Compare(path, @"C:\NugetCache\N\lib\N.dll", StringComparison.OrdinalIgnoreCase) == 0)
+            {
+                return new AssemblyNameExtension("N, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
+            }
+
             string defaultName = String.Format("{0}, Version=0.0.0.0, PublicKeyToken=null, Culture=Neutral", Path.GetFileNameWithoutExtension(path));
             return new AssemblyNameExtension(defaultName);
         }
@@ -2444,6 +2456,14 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
                 };
             }
 
+            if (String.Compare(path, @"C:\DependsOnNuget\A.dll", StringComparison.OrdinalIgnoreCase) == 0)
+            {
+                return new AssemblyNameExtension[]
+                {
+                    new AssemblyNameExtension("N, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")
+                };
+            }
+
             // Use a default list.
             return new AssemblyNameExtension[]
             {
