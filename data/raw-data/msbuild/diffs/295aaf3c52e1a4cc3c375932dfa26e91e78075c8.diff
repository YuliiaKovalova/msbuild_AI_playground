diff --git a/src/Build/BuildCheck/API/BuildAnalyzerRule.cs b/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
index 8b43dad4999..9ce4e73ff2e 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
@@ -10,7 +10,11 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public class BuildAnalyzerRule
 {
-    public BuildAnalyzerRule(string id, string title, string description, string messageFormat,
+    public BuildAnalyzerRule(
+        string id,
+        string title,
+        string description,
+        string messageFormat,
         BuildAnalyzerConfiguration defaultConfiguration)
     {
         Id = id;
@@ -45,7 +49,7 @@ public BuildAnalyzerRule(string id, string title, string description, string mes
     /// <summary>
     /// Message format that will be used by the actual reports (<see cref="BuildCheckResult"/>) - those will just supply the actual arguments.
     /// </summary>
-    public string MessageFormat { get; }
+    public string MessageFormat { get; set; }
 
     /// <summary>
     /// The default configuration - overridable by the user via .editorconfig.
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index b6cb67e7d56..299d855123a 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -47,6 +47,7 @@ internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)
     public string LocationString => Location.LocationString;
 
     public string[] MessageArgs { get; }
+
     public string MessageFormat => BuildAnalyzerRule.MessageFormat;
 
     // Here we will provide different link for built-in rules and custom rules - once we have the base classes differentiated.
diff --git a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
index cdee6a4d8fa..96e961ddf80 100644
--- a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
@@ -9,17 +9,27 @@ namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;
 
 internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer
 {
+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
+                "BC0103",
+                "NoEnvironmentVariablePropertyAnalyzer",
+                "No implicit property derived from an environment variable should be used during the build",
+                StandardMessage,
+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion });
+
+    private const string RuleId = "BC0103";
+
+    private const string VerboseEnvVariableOutputKey = "allow_displaying_environment_variable_value";
+
     /// <summary>
     /// Contains the list of reported environment variables.
     /// </summary>
     private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();
 
-    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
-        "BC0103",
-        "NoEnvironmentVariablePropertyAnalyzer",
-        "No implicit property derived from an environment variable should be used during the build",
-        "Property is derived from environment variable: '{0}'. Properties should be passed explicitly using the /p option.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion });
+    private const string VerboseMessage = "Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.";
+
+    private const string StandardMessage = "Property is derived from environment variable: '{0}'. Properties should be passed explicitly using the /p option.";
+
+    private bool _isVerboseEnvVarOutput;
 
     public override string FriendlyName => "MSBuild.NoEnvironmentVariablePropertyAnalyzer";
 
@@ -27,7 +37,11 @@ internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer
 
     public override void Initialize(ConfigurationContext configurationContext)
     {
-        // No custom configuration
+        foreach (CustomConfigurationData customConfigurationData in configurationContext.CustomConfigurationData)
+        {
+            bool? isVerboseEnvVarOutput = GetVerboseEnvVarOutputConfig(customConfigurationData, RuleId);
+            _isVerboseEnvVarOutput = isVerboseEnvVarOutput.HasValue && isVerboseEnvVarOutput.Value;           
+        }
     }
 
     public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEvaluatedPropertiesAction(ProcessEnvironmentVariableReadAction);
@@ -41,10 +55,22 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Evaluate
                 EnvironmentVariableIdentityKey identityKey = new(envVariableData.Key, envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column);
                 if (!_environmentVariablesReported.Contains(identityKey))
                 {
-                    context.ReportResult(BuildCheckResult.Create(
-                        SupportedRule,
-                        ElementLocation.Create(envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column),
-                        envVariableData.Key));
+                    if (_isVerboseEnvVarOutput)
+                    {
+                        SupportedRule.MessageFormat = VerboseMessage;
+                        context.ReportResult(BuildCheckResult.Create(
+                            SupportedRule,
+                            ElementLocation.Create(envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column),
+                            envVariableData.Key,
+                            envVariableData.Value.EnvVarValue));
+                    }
+                    else
+                    {
+                        context.ReportResult(BuildCheckResult.Create(
+                            SupportedRule,
+                            ElementLocation.Create(envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column),
+                            envVariableData.Key));
+                    }
 
                     _environmentVariablesReported.Add(identityKey);
                 }
@@ -52,6 +78,11 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Evaluate
         }
     }
 
+    private static bool? GetVerboseEnvVarOutputConfig(CustomConfigurationData customConfigurationData, string ruleId) => customConfigurationData.RuleId.Equals(ruleId, StringComparison.InvariantCultureIgnoreCase)
+            && (customConfigurationData.ConfigurationData?.TryGetValue(VerboseEnvVariableOutputKey, out string? configVal) ?? false)
+            ? bool.Parse(configVal)
+            : null;
+
     internal class EnvironmentVariableIdentityKey(string environmentVariableName, string file, int line, int column) : IEquatable<EnvironmentVariableIdentityKey>
     {
         public string EnvironmentVariableName { get; } = environmentVariableName;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 3e8d53982c5..7f3ccefb3b4 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -136,12 +136,14 @@ public void ProcessAnalyzerAcquisition(
 
         private static readonly (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][] s_builtInFactoriesPerDataSource =
         [
+
             // BuildCheckDataSource.EventArgs
             [
                 ([SharedOutputPathAnalyzer.SupportedRule.Id], SharedOutputPathAnalyzer.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<SharedOutputPathAnalyzer>),
                 ([DoubleWritesAnalyzer.SupportedRule.Id], DoubleWritesAnalyzer.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<DoubleWritesAnalyzer>),
                 ([NoEnvironmentVariablePropertyAnalyzer.SupportedRule.Id], NoEnvironmentVariablePropertyAnalyzer.SupportedRule.DefaultConfiguration.IsEnabled ?? false, Construct<NoEnvironmentVariablePropertyAnalyzer>)
             ],
+
             // BuildCheckDataSource.Execution
             []
         ];
