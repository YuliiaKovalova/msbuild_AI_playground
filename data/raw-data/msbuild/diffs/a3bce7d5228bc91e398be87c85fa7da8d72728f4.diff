diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 00d94be66f9..908c143d530 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -764,6 +764,47 @@ public void GetTargetsListsShouldApplyDefaultTargetsOnlyToGraphRoots()
             }
         }
 
+        [Fact]
+        public void GetTargetsListReturnsEmptyTargetsForNodeIfNoTargetsPropagatedToIt()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                TransientTestFile entryProject = CreateProjectFile(env: env, projectNumber: 1, projectReferences: new[] { 2 }, projectReferenceTargets: new Dictionary<string, string[]> { { "A", new []{ "B" }} }, defaultTargets: "A");
+                CreateProjectFile(env: env, projectNumber: 2);
+
+                var projectGraph = new ProjectGraph(entryProject.Path);
+                projectGraph.ProjectNodes.Count.ShouldBe(2);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new []{ "Foo" });
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBe(new []{ "Foo" });
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBeEmpty();
+            }
+        }
+
+        [Fact]
+        public void GetTargetListsReturnsEmptyTargetsForAllNodesWhenDefaultTargetsAreRequestedAndThereAreNoDefaultTargets()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // Root project has no default targets.
+                TransientTestFile entryProject = CreateProjectFile(env: env, projectNumber: 1, projectReferences: new[] { 2 }, projectReferenceTargets: new Dictionary<string, string[]> { { "A", new[] { "B" } }}, defaultTargets: string.Empty);
+
+                // Dependency has default targets. Even though it gets called with empty targets, B will not get called,
+                // because target propagation only equates empty targets to default targets for the root nodes.
+                CreateProjectFile(env: env, projectNumber: 2, defaultTargets: "B");
+
+                var projectGraph = new ProjectGraph(entryProject.Path);
+                projectGraph.ProjectNodes.Count.ShouldBe(2);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(null);
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBeEmpty();
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBeEmpty();
+            }
+        }
+
+
         [Fact]
         public void GetTargetListsUsesAllTargetsForNonMultitargetingNodes()
         {
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index ede046b3ecd..5a7bd006df0 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -497,14 +497,16 @@ private static IReadOnlyCollection<ProjectGraphNode> TopologicalSort(
         /// </summary>
         /// <remarks>
         ///     This method uses the ProjectReferenceTargets items to determine the targets to run per node. The results can then
-        ///     be used
-        ///     to start building each project individually, assuming a given project is built after its references.
+        ///     be used to start building each project individually, assuming a given project is built after its references.
         /// </remarks>
         /// <param name="entryProjectTargets">
         ///     The target list for the <see cref="GraphRoots" />. May be null or empty, in which case the entry projects' default
         ///     targets will be used.
         /// </param>
-        /// <returns>A dictionary containing the target list for each node.</returns>
+        /// <returns>
+        ///     A dictionary containing the target list for each node. If a node's target list is empty, then no targets were
+        ///     inferred for that node and it should get skipped during a graph based build.
+        /// </returns>
         public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLists(ICollection<string> entryProjectTargets)
         {
             // Seed the dictionary with empty lists for every node. In this particular case though an empty list means "build nothing" rather than "default targets".
