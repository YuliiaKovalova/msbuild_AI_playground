diff --git a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
index aea8fff3734..6d9ca5bbce4 100644
--- a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
+++ b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
@@ -1,23 +1,33 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+
+
+#nullable disable
+
 using System;
 using System.IO;
 using System.Linq;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
 using Shouldly;
 using Xunit;
-
-#nullable disable
-
+using Xunit.Abstractions;
 namespace Microsoft.Build.UnitTests
 {
     public class DebugUtils_Tests
     {
+        private readonly ITestOutputHelper _testOutput;
+
+        public DebugUtils_Tests(ITestOutputHelper testOutput)
+        {
+            _testOutput = testOutput;
+        }
+
         [Fact]
         public void DumpExceptionToFileShouldWriteInTempPathByDefault()
         {
-            Directory.GetFiles(Path.GetTempPath(), "MSBuild_*failure.txt").ShouldBeEmpty();
+            var exceptionFilesBefore = Directory.GetFiles(FileUtilities.TempFileDirectory, "MSBuild_*failure.txt");
 
             string[] exceptionFiles = null;
 
@@ -28,10 +38,14 @@ public void DumpExceptionToFileShouldWriteInTempPathByDefault()
             }
             finally
             {
+                _testOutput.WriteLine($"DebugUtils.DebugPath: {DebugUtils.DebugPath}");
+                _testOutput.WriteLine($"Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\"): {Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH")}");
+
+                exceptionFilesBefore.ShouldNotBeNull();
                 exceptionFiles.ShouldNotBeNull();
-                exceptionFiles.ShouldHaveSingleItem();
+                (exceptionFiles.Length - exceptionFilesBefore.Length).ShouldBe(1);
 
-                var exceptionFile = exceptionFiles.First();
+                var exceptionFile = exceptionFiles.Except(exceptionFilesBefore).Single();
                 File.ReadAllText(exceptionFile).ShouldContain("hello world");
                 File.Delete(exceptionFile);
             }
