diff --git a/.editorconfig b/.editorconfig
index 6330961d5d0..fbe9046f08f 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -1,4 +1,4 @@
-﻿﻿﻿# editorconfig.org
+﻿﻿# editorconfig.org
 
 # top-most EditorConfig file
 root = true
@@ -435,7 +435,7 @@ dotnet_diagnostic.IDE0073.severity = error
 dotnet_diagnostic.IDE0330.severity = suggestion
 
 # Use implicitly typed lambda
-dotnet_diagnostic.IDE0350.severity = suggestion
+dotnet_diagnostic.IDE0350.severity = none
 
 # Value types are incompatible with null values. https://xunit.net/xunit.analyzers/rules/xUnit1012
 dotnet_diagnostic.xUnit1012.severity = warning
diff --git a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
index 744784dc13f..96f58d52587 100644
--- a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
@@ -43,7 +43,7 @@ public Process Start(string msbuildLocation, string commandLineArgs, int nodeId)
         }
 
         /// <summary>
-        /// Creates new MSBuild or dotnet process.
+        /// Creates a new MSBuild process
         /// </summary>
         private Process StartInternal(string msbuildLocation, string commandLineArgs)
         {
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 0d8d83d11c6..2c6bd48f298 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -509,11 +509,11 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
             }
 #endif
 
-            KeyValuePair<string, int>[] handshakeComponents = handshake.RetrieveHandshakeComponents();
-            for (int i = 0; i < handshakeComponents.Length; i++)
+            HandshakeComponents handshakeComponents = handshake.RetrieveHandshakeComponents();
+            foreach (var component in handshakeComponents.EnumerateComponents())
             {
-                CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", i, handshakeComponents[i], pipeName);
-                nodeStream.WriteIntForHandshake(handshakeComponents[i].Value);
+                CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", component.Key, component.Value, pipeName);
+                nodeStream.WriteIntForHandshake(component.Value);
             }
 
             // This indicates that we have finished all the parts of our handshake; hopefully the endpoint has as well.
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 1cb6b3dc791..8bd3d29937b 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -553,18 +553,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
                 return false;
             }
 
-            string commandLineArgs;
-            if (msbuildAssemblyLocation != null)
-            {
-                // For dotnet.exe, the dll path must come first, then -- to separate application arguments
-                commandLineArgs = $"\"{msbuildAssemblyLocation}\" -- /nodemode:2 ";
-            }
-            else
-            {
-                // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we
-                // want to start up an MSBuild task host node.
-                commandLineArgs = $"/nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority}";
-            }
+            string commandLineArgs = $"{msbuildAssemblyLocation ?? string.Empty} /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority} ";
 
             CommunicationsUtilities.Trace("For a host context of {0}, spawning executable from {1}.", hostContext.ToString(), msbuildExecutable ?? "MSBuild.exe");
 
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 0b315bfd1f8..3edde05004c 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -665,7 +665,7 @@ NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorA
         internal string MSBuildToolsDirectoryArm64 { get; }
 
         /// <summary>
-        /// Path to the NET tools directory.
+        /// Path to the NET tools directory. It's a temporary solution before path to dotnet is resolved from DOTNET_EXPERIMENTAL_HOST_PATH.
         /// </summary>
         internal string MSBuildToolsDirectoryNET { get; }
 
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 94469087ee6..e3c7581a8c2 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -85,13 +85,9 @@ internal class Handshake
     {
         public static int NetTaskHostHandshakeVersion = 99;
 
-        protected readonly int options;
-        protected readonly int salt;
-        protected readonly int fileVersionMajor;
-        protected readonly int fileVersionMinor;
-        protected readonly int fileVersionBuild;
-        protected readonly int fileVersionPrivate;
-        private readonly int sessionId;
+        private const HandshakeOptions NetTaskHostFlags = HandshakeOptions.NET | HandshakeOptions.TaskHost;
+
+        private readonly HandshakeComponents _handshakeComponents;
 
         internal Handshake(HandshakeOptions nodeType)
             : this(nodeType, includeSessionId: true)
@@ -104,57 +100,54 @@ protected Handshake(HandshakeOptions nodeType, bool includeSessionId)
 
             // We currently use 7 bits of this 32-bit integer. Very old builds will instantly reject any handshake that does not start with F5 or 06; slightly old builds always lead with 00.
             // This indicates in the first byte that we are a modern build.
-            options = (int)nodeType | (handshakeVersion << 24);
+            var options = (int)nodeType | (handshakeVersion << 24);
             CommunicationsUtilities.Trace("Building handshake for node type {0}, (version {1}): options {2}.", nodeType, handshakeVersion, options);
 
             string handshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
             CommunicationsUtilities.Trace("Handshake salt is " + handshakeSalt);
-            bool isNetTaskHost = (nodeType & HandshakeOptions.NET) == HandshakeOptions.NET;
+            bool isNetTaskHost = (nodeType & NetTaskHostFlags) == NetTaskHostFlags;
             string toolsDirectory = isNetTaskHost
                 ? BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory
                 : BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot;
             CommunicationsUtilities.Trace("Tools directory root is {0}", toolsDirectory);
-            salt = CommunicationsUtilities.GetHashCode($"{handshakeSalt}{toolsDirectory}");
-            if (isNetTaskHost)
-            {
-                // hardcode version to activate json protocol that allows to have more version flexibility
-                fileVersionMajor = NetTaskHostHandshakeVersion;
-                fileVersionMinor = NetTaskHostHandshakeVersion;
-                fileVersionBuild = NetTaskHostHandshakeVersion;
-                fileVersionPrivate = NetTaskHostHandshakeVersion;
-            }
-            else
-            {
-                Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
-                fileVersionMajor = fileVersion.Major;
-                fileVersionMinor = fileVersion.Minor;
-                fileVersionBuild = fileVersion.Build;
-                fileVersionPrivate = fileVersion.Revision;
-            }
+            var salt = CommunicationsUtilities.GetHashCode($"{handshakeSalt}{toolsDirectory}");
 
+            int sessionId = 0;
             // This reaches out to NtQuerySystemInformation. Due to latency, allow skipping for derived handshake if unused.
             if (includeSessionId)
             {
                 using Process currentProcess = Process.GetCurrentProcess();
                 sessionId = currentProcess.SessionId;
             }
-        }
 
-        // This is used as a key, so it does not need to be human readable.
-        public override string ToString() => String.Format("{0} {1} {2} {3} {4} {5} {6}", options, salt, fileVersionMajor, fileVersionMinor, fileVersionBuild, fileVersionPrivate, sessionId);
+            if (isNetTaskHost)
+            {
+                _handshakeComponents = new HandshakeComponents(
+                    options,
+                    salt,
+                    NetTaskHostHandshakeVersion,
+                    NetTaskHostHandshakeVersion,
+                    NetTaskHostHandshakeVersion,
+                    NetTaskHostHandshakeVersion,
+                    sessionId);
+            }
+            else
+            {
+                Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
+                _handshakeComponents = new HandshakeComponents(options, salt, fileVersion.Major, fileVersion.Minor, fileVersion.Build, fileVersion.Revision, sessionId);
+            }
+        }
 
-        public virtual KeyValuePair<string, int>[] RetrieveHandshakeComponents() =>
-        [
-            new KeyValuePair<string, int>(nameof(options), CommunicationsUtilities.AvoidEndOfHandshakeSignal(options)),
-            new KeyValuePair<string, int>(nameof(salt), CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt)),
-            new KeyValuePair<string, int>(nameof(fileVersionMajor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor)),
-            new KeyValuePair<string, int>(nameof(fileVersionMinor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor)),
-            new KeyValuePair<string, int>(nameof(fileVersionBuild), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild)),
-            new KeyValuePair<string, int>(nameof(fileVersionPrivate), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate)),
-            new KeyValuePair<string, int>(nameof(sessionId), CommunicationsUtilities.AvoidEndOfHandshakeSignal(sessionId))
-        ];
+        public virtual HandshakeComponents RetrieveHandshakeComponents() => new HandshakeComponents(
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.Options),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.Salt),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionMajor),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionMinor),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionBuild),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionPrivate),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.SessionId));
 
-        public virtual string GetKey() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate} {sessionId}".ToString(CultureInfo.InvariantCulture);
+        public virtual string GetKey() => $"{_handshakeComponents.Options} {_handshakeComponents.Salt} {_handshakeComponents.FileVersionMajor} {_handshakeComponents.FileVersionMinor} {_handshakeComponents.FileVersionBuild} {_handshakeComponents.FileVersionPrivate} {_handshakeComponents.SessionId}".ToString(CultureInfo.InvariantCulture);
 
         public virtual byte? ExpectedVersionInFirstByte => CommunicationsUtilities.handshakeVersion;
     }
@@ -173,18 +166,16 @@ internal ServerNodeHandshake(HandshakeOptions nodeType)
         {
         }
 
-        public override KeyValuePair<string, int>[] RetrieveHandshakeComponents() =>
-        [
-            new KeyValuePair<string, int>(nameof(options), CommunicationsUtilities.AvoidEndOfHandshakeSignal(options)),
-            new KeyValuePair<string, int>(nameof(salt), CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt)),
-            new KeyValuePair<string, int>(nameof(fileVersionMajor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor)),
-            new KeyValuePair<string, int>(nameof(fileVersionMinor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor)),
-            new KeyValuePair<string, int>(nameof(fileVersionBuild), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild)),
-            new KeyValuePair<string, int>(nameof(fileVersionPrivate), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate))
-        ];
+        public override HandshakeComponents RetrieveHandshakeComponents() => new HandshakeComponents(
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.Options),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.Salt),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionMajor),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionMinor),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionBuild),
+            CommunicationsUtilities.AvoidEndOfHandshakeSignal(_handshakeComponents.FileVersionPrivate));
 
-        public override string GetKey() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate}"
-                .ToString(CultureInfo.InvariantCulture);
+        public override string GetKey() => $"{_handshakeComponents.Options} {_handshakeComponents.Salt} {_handshakeComponents.FileVersionMajor} {_handshakeComponents.FileVersionMinor} {_handshakeComponents.FileVersionBuild} {_handshakeComponents.FileVersionPrivate}"
+            .ToString(CultureInfo.InvariantCulture);
 
         /// <summary>
         /// Computes Handshake stable hash string representing whole state of handshake.
@@ -913,4 +904,61 @@ internal static int GetHashCode(string fileVersion)
 
         internal static int AvoidEndOfHandshakeSignal(int x) => x == EndOfHandshakeSignal ? ~x : x;
     }
+
+    /// <summary>
+    /// Represents the components of a handshake in a structured format with named fields.
+    /// </summary>
+    internal readonly struct HandshakeComponents
+    {
+        private readonly int options;
+        private readonly int salt;
+        private readonly int fileVersionMajor;
+        private readonly int fileVersionMinor;
+        private readonly int fileVersionBuild;
+        private readonly int fileVersionPrivate;
+        private readonly int sessionId;
+
+        public HandshakeComponents(int options, int salt, int fileVersionMajor, int fileVersionMinor, int fileVersionBuild, int fileVersionPrivate, int sessionId)
+        {
+            this.options = options;
+            this.salt = salt;
+            this.fileVersionMajor = fileVersionMajor;
+            this.fileVersionMinor = fileVersionMinor;
+            this.fileVersionBuild = fileVersionBuild;
+            this.fileVersionPrivate = fileVersionPrivate;
+            this.sessionId = sessionId;
+        }
+
+        public HandshakeComponents(int options, int salt, int fileVersionMajor, int fileVersionMinor, int fileVersionBuild, int fileVersionPrivate)
+            : this(options, salt, fileVersionMajor, fileVersionMinor, fileVersionBuild, fileVersionPrivate, 0)
+        {
+        }
+
+        public int Options => options;
+
+        public int Salt => salt;
+
+        public int FileVersionMajor => fileVersionMajor;
+
+        public int FileVersionMinor => fileVersionMinor;
+
+        public int FileVersionBuild => fileVersionBuild;
+
+        public int FileVersionPrivate => fileVersionPrivate;
+
+        public int SessionId => sessionId;
+
+        public IEnumerable<KeyValuePair<string, int>> EnumerateComponents()
+        {
+            yield return new KeyValuePair<string, int>(nameof(Options), Options);
+            yield return new KeyValuePair<string, int>(nameof(Salt), Salt);
+            yield return new KeyValuePair<string, int>(nameof(FileVersionMajor), FileVersionMajor);
+            yield return new KeyValuePair<string, int>(nameof(FileVersionMinor), FileVersionMinor);
+            yield return new KeyValuePair<string, int>(nameof(FileVersionBuild), FileVersionBuild);
+            yield return new KeyValuePair<string, int>(nameof(FileVersionPrivate), FileVersionPrivate);
+            yield return new KeyValuePair<string, int>(nameof(SessionId), SessionId);
+        }
+
+        public override string ToString() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate} {sessionId}";
+    }
 }
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 6d216eb3f76..2e7e02813b4 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -121,7 +121,11 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
         /// <summary>
         /// The set of property names from handshake responsible for node version./>
         /// </summary>
-        private readonly IList<string> _versionHandshakeGroup = ["fileVersionMajor", "fileVersionMinor", "fileVersionBuild", "fileVersionPrivate"];
+        private readonly List<string> _versionHandshakeGroup = [
+            nameof(HandshakeComponents.FileVersionMajor),
+            nameof(HandshakeComponents.FileVersionMinor),
+            nameof(HandshakeComponents.FileVersionBuild),
+            nameof(HandshakeComponents.FileVersionPrivate)];
 
         #endregion
 
@@ -401,34 +405,38 @@ private void PacketPumpProc()
                     Handshake handshake = GetHandshake();
                     try
                     {
-                        KeyValuePair<string, int>[] handshakeComponents = handshake.RetrieveHandshakeComponents();
-                        for (int i = 0; i < handshakeComponents.Length; i++)
+                        HandshakeComponents handshakeComponents = handshake.RetrieveHandshakeComponents();
+
+                        int index = 0;
+                        foreach (KeyValuePair<string, int> component in handshakeComponents.EnumerateComponents())
                         {
 #pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                             int handshakePart = _pipeServer.ReadIntForHandshake(
-                                byteToAccept: i == 0 ? (byte?)CommunicationsUtilities.handshakeVersion : null /* this will disconnect a < 16.8 host; it expects leading 00 or F5 or 06. 0x00 is a wildcard */
+                                byteToAccept: index == 0 ? (byte?)CommunicationsUtilities.handshakeVersion : null /* this will disconnect a < 16.8 host; it expects leading 00 or F5 or 06. 0x00 is a wildcard */
 #if NETCOREAPP2_1_OR_GREATER
                             , ClientConnectTimeout /* wait a long time for the handshake from this side */
 #endif
                             );
 #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
-                            if (handshakePart != handshakeComponents[i].Value)
+                            if (handshakePart != component.Value)
                             {
                                 // NET Task host allows to connect to MSBuild.dll with the different handshake version.
                                 // We agreed to hardcode a value of 99 to bypass the protection for this scenario.
-                                if (_versionHandshakeGroup.Contains(handshakeComponents[i].Key) && handshakeComponents[i].Value == Handshake.NetTaskHostHandshakeVersion)
+                                if (_versionHandshakeGroup.Contains(component.Key) && component.Value == Handshake.NetTaskHostHandshakeVersion)
                                 {
-                                    CommunicationsUtilities.Trace("Handshake for NET Host. Child host {0} for {1}.", handshakePart, handshakeComponents[i].Key);
+                                    CommunicationsUtilities.Trace("Handshake for NET Host. Child host {0} for {1}.", handshakePart, component.Key);
                                 }
                                 else
                                 {
-                                    CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, handshakeComponents[i]);
-                                    _pipeServer.WriteIntForHandshake(i + 1);
+                                    CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, component.Value);
+                                    _pipeServer.WriteIntForHandshake(index + 1);
                                     gotValidConnection = false;
                                     break;
                                 }
                             }
+
+                            index++;
                         }
 
                         if (gotValidConnection)
diff --git a/src/Shared/NodePipeBase.cs b/src/Shared/NodePipeBase.cs
index 190908c0841..7642cee5ae6 100644
--- a/src/Shared/NodePipeBase.cs
+++ b/src/Shared/NodePipeBase.cs
@@ -7,7 +7,6 @@
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
-using System.Collections.Generic;
 
 
 #if !TASKHOST
@@ -83,7 +82,7 @@ protected NodePipeBase(string pipeName, Handshake handshake)
 
         protected string PipeName { get; }
 
-        protected KeyValuePair<string, int>[] HandshakeComponents { get; }
+        protected HandshakeComponents HandshakeComponents { get; }
 
         public void Dispose()
         {
diff --git a/src/Shared/NodePipeClient.cs b/src/Shared/NodePipeClient.cs
index 9474327236d..5e8588e7064 100644
--- a/src/Shared/NodePipeClient.cs
+++ b/src/Shared/NodePipeClient.cs
@@ -74,10 +74,10 @@ private void ValidateRemotePipeOwner()
         /// </summary>
         private void PerformHandshake(int timeout)
         {
-            for (int i = 0; i < HandshakeComponents.Length; i++)
+            foreach (var component in HandshakeComponents.EnumerateComponents())
             {
-                CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", i, HandshakeComponents[i], PipeName);
-                _pipeClient.WriteIntForHandshake(HandshakeComponents[i].Value);
+                CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", component.Key, component.Value, PipeName);
+                _pipeClient.WriteIntForHandshake(component.Value);
             }
 
             // This indicates that we have finished all the parts of our handshake; hopefully the endpoint has as well.
diff --git a/src/Shared/NodePipeServer.cs b/src/Shared/NodePipeServer.cs
index f5117575a07..9d0b3fcc4b7 100644
--- a/src/Shared/NodePipeServer.cs
+++ b/src/Shared/NodePipeServer.cs
@@ -185,21 +185,24 @@ internal void Disconnect()
 
         private bool ValidateHandshake()
         {
-            for (int i = 0; i < HandshakeComponents.Length; i++)
+            int index = 0;
+            foreach (var component in HandshakeComponents.EnumerateComponents())
             {
                 // This will disconnect a < 16.8 host; it expects leading 00 or F5 or 06. 0x00 is a wildcard.
 #if NET
-                int handshakePart = _pipeServer.ReadIntForHandshake(byteToAccept: i == 0 ? CommunicationsUtilities.handshakeVersion : null, s_handshakeTimeout);
+                int handshakePart = _pipeServer.ReadIntForHandshake(byteToAccept: index == 0 ? CommunicationsUtilities.handshakeVersion : null, s_handshakeTimeout);
 #else
-                int handshakePart = _pipeServer.ReadIntForHandshake(byteToAccept: i == 0 ? CommunicationsUtilities.handshakeVersion : null);
+                int handshakePart = _pipeServer.ReadIntForHandshake(byteToAccept: index == 0 ? CommunicationsUtilities.handshakeVersion : null);
 #endif
 
-                if (handshakePart != HandshakeComponents[i].Value)
+                if (handshakePart != component.Value)
                 {
-                    CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, HandshakeComponents[i]);
-                    _pipeServer.WriteIntForHandshake(i + 1);
+                    CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, component.Value);
+                    _pipeServer.WriteIntForHandshake(index + 1);
                     return false;
                 }
+
+                index++;
             }
 
             // To ensure that our handshake and theirs have the same number of bytes, receive and send a magic number indicating EOS.
