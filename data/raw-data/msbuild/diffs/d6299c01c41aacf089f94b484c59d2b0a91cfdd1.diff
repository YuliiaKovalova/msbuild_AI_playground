diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 0f47240c914..66960d35647 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -127,6 +127,26 @@ public class Project
         /// </summary>
         internal const NewProjectFileOptions DefaultNewProjectTemplateOptions = NewProjectFileOptions.IncludeAllOptions;
 
+        /// <summary>
+        /// Certain item operations split the item element in multiple elements if the include
+        /// contains globs, references to items or properties, or multiple item values.
+        ///
+        /// The items operations that may expand item elements are:
+        /// - <see cref="RemoveItem"/>
+        /// - <see cref="RemoveItems"/>
+        /// - <see cref="AddItem(string,string, IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;)"/>
+        /// - <see cref="AddItemFast(string,string, IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;)"/>
+        /// - <see cref="ProjectItem.ChangeItemType"/>
+        /// - <see cref="ProjectItem.Rename"/>
+        /// - <see cref="ProjectItem.RemoveMetadata"/>
+        /// - <see cref="ProjectItem.SetMetadataValue(string,string)"/>
+        /// - <see cref="ProjectItem.SetMetadataValue(string,string, bool)"/>
+        /// 
+        /// When this property is set to true, the previous item operations throw an <exception cref="InvalidOperationException"></exception>
+        /// instead of expanding the item element. 
+        /// </summary>
+        public bool ThrowInsteadOfSplittingItemElement { get; set; }
+
         /// <summary>
         /// Construct an empty project, evaluating with the global project collection's
         /// global properties and default tools version.
@@ -157,26 +177,6 @@ public Project(ProjectCollection projectCollection)
         {
         }
 
-        /// <summary>
-        /// Certain item operations split the item element in multiple elements if the include
-        /// contains globs, references to items or properties, or multiple item values.
-        ///
-        /// The items operations that may expand item elements are:
-        /// - <see cref="RemoveItem"/>
-        /// - <see cref="RemoveItems"/>
-        /// - <see cref="AddItem(string,string, IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;)"/>
-        /// - <see cref="AddItemFast(string,string, IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;)"/>
-        /// - <see cref="ProjectItem.ChangeItemType"/>
-        /// - <see cref="ProjectItem.Rename"/>
-        /// - <see cref="ProjectItem.RemoveMetadata"/>
-        /// - <see cref="ProjectItem.SetMetadataValue(string,string)"/>
-        /// - <see cref="ProjectItem.SetMetadataValue(string,string, bool)"/>
-        /// 
-        /// When this property is set to true, the previous item operations throw an <exception cref="InvalidOperationException"></exception>
-        /// instead of expanding the item element. 
-        /// </summary>
-        public bool ThrowInsteadOfSplittingItemElement { get; set; }
-
         /// <summary>
         /// Construct an empty project, evaluating with the specified project collection's
         /// global properties and default tools version.
@@ -514,6 +514,57 @@ public Project(string projectFile, IDictionary<string, string> globalProperties,
             }
         }
 
+        /// <summary>
+        /// Create a file based project.
+        /// </summary>
+        /// <param name="file">The file to evaluate the project from.</param>
+        /// <param name="info">The <see cref="ProjectConstructionInfo"/> to use.</param>
+        /// <returns></returns>
+        public static Project FromFile(string file, ProjectConstructionInfo info)
+        {
+            return new Project(
+                file,
+                info.GlobalProperties,
+                info.ToolsVersion,
+                info.SubToolsetVersion,
+                info.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
+                info.LoadSettings);
+        }
+
+        /// <summary>
+        /// Create a <see cref="ProjectRootElement"/> based project.
+        /// </summary>
+        /// <param name="rootElement">The <see cref="ProjectRootElement"/> to evaluate the project from.</param>
+        /// <param name="info">The <see cref="ProjectConstructionInfo"/> to use.</param>
+        /// <returns></returns>
+        public static Project FromProjectRootElement(ProjectRootElement rootElement, ProjectConstructionInfo info)
+        {
+            return new Project(
+                rootElement,
+                info.GlobalProperties,
+                info.ToolsVersion,
+                info.SubToolsetVersion,
+                info.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
+                info.LoadSettings);
+        }
+
+        /// <summary>
+        /// Create a <see cref="XmlReader"/> based project.
+        /// </summary>
+        /// <param name="rootElement">The <see cref="XmlReader"/> to evaluate the project from.</param>
+        /// <param name="info">The <see cref="ProjectConstructionInfo"/> to use.</param>
+        /// <returns></returns>
+        public static Project FromXmlReader(XmlReader reader, ProjectConstructionInfo info)
+        {
+            return new Project(
+                reader,
+                info.GlobalProperties,
+                info.ToolsVersion,
+                info.SubToolsetVersion,
+                info.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
+                info.LoadSettings);
+        }
+
         /// <summary>
         /// Whether build is enabled for this project.
         /// </summary>
diff --git a/src/Build/Definition/ProjectConstructionInfo.cs b/src/Build/Definition/ProjectConstructionInfo.cs
new file mode 100644
index 00000000000..b8326f2e845
--- /dev/null
+++ b/src/Build/Definition/ProjectConstructionInfo.cs
@@ -0,0 +1,35 @@
+ï»¿using System.Collections.Generic;
+
+namespace Microsoft.Build.Evaluation
+{
+    /// <summary>
+    ///     Common <see cref="Project" /> constructor arguments.
+    /// </summary>
+    public class ProjectConstructionInfo
+    {
+        /// <summary>
+        /// Global properties to evaluate with.
+        /// </summary>
+        public IDictionary<string, string> GlobalProperties { get; set; }
+
+        /// <summary>
+        /// Tools version to evaluate with
+        /// </summary>
+        public string ToolsVersion { get; set; }
+
+        /// <summary>
+        /// Sub-toolset version to explicitly evaluate the toolset with.
+        /// </summary>
+        public string SubToolsetVersion { get; set; }
+
+        /// <summary>
+        /// The <see cref="ProjectCollection"/> the project is added to. Default is <see cref="ProjectCollection.GlobalProjectCollection"/>/>
+        /// </summary>
+        public ProjectCollection ProjectCollection { get; set; }
+
+        /// <summary>
+        /// The <see cref="ProjectLoadSettings"/> to use for evaluation.
+        /// </summary>
+        public ProjectLoadSettings LoadSettings { get; set; } = ProjectLoadSettings.Default;
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index c45c6a60b73..76da47024f1 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -254,6 +254,7 @@
     </Compile>
     <Compile Include="Construction\ImplicitImportLocation.cs" />
     <Compile Include="Construction\ProjectSdkElement.cs" />
+    <Compile Include="Definition\ProjectConstructionInfo.cs" />
     <Compile Include="Definition\NewProjectFileOptions.cs" />
     <Compile Include="Definition\ProjectCollectionChangedEventArgs.cs" />
     <Compile Include="Definition\ProjectImportPathMatch.cs" />
