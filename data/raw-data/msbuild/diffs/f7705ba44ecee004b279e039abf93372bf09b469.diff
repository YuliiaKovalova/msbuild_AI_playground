diff --git a/src/Tasks/CreateCSharpManifestResourceName.cs b/src/Tasks/CreateCSharpManifestResourceName.cs
index 0ff6b2be16a..1555ec736ba 100644
--- a/src/Tasks/CreateCSharpManifestResourceName.cs
+++ b/src/Tasks/CreateCSharpManifestResourceName.cs
@@ -102,7 +102,7 @@ TaskLoggingHelper log
             Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName);
 
             // If the item has a culture override, respect that. 
-            if (!String.IsNullOrEmpty(culture))
+            if (!string.IsNullOrEmpty(culture))
             {
                 info.culture = culture;
             }
@@ -144,18 +144,21 @@ TaskLoggingHelper log
 
                 // only strip extension for .resx and .restext files
                 string sourceExtension = Path.GetExtension(info.cultureNeutralFilename);
+                string directoryName = Path.GetDirectoryName(info.cultureNeutralFilename);
+
+                // append the directory name
+                MakeValidEverettIdentifier(manifestName, directoryName);
                 if (
-                        (String.Equals(sourceExtension, ".resx", StringComparison.OrdinalIgnoreCase))
+                        string.Equals(sourceExtension, ".resx", StringComparison.OrdinalIgnoreCase)
                         ||
-                        (String.Equals(sourceExtension, ".restext", StringComparison.OrdinalIgnoreCase))
+                        string.Equals(sourceExtension, ".restext", StringComparison.OrdinalIgnoreCase)
                         ||
-                        (String.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase))
+                        string.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase)
                     )
                 {
-                    var directoryName = Path.GetDirectoryName(info.cultureNeutralFilename);
+
                     if (!string.IsNullOrEmpty(directoryName))
                     {
-                        MakeValidEverettIdentifier(manifestName, directoryName);
                         manifestName.Append('.').Append(Path.GetFileNameWithoutExtension(info.cultureNeutralFilename));
                     }
                     else
@@ -174,17 +177,15 @@ TaskLoggingHelper log
                     }
 
                     // If the original extension was .resources, add it back
-                    if (String.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase))
+                    if (string.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase))
                     {
                         manifestName.Append(sourceExtension);
                     }
                 }
                 else
                 {
-                    var directoryName = Path.GetDirectoryName(info.cultureNeutralFilename);
                     if (!string.IsNullOrEmpty(directoryName))
                     {
-                        MakeValidEverettIdentifier(manifestName, directoryName);
                         manifestName.Append('.').Append(Path.GetFileName(info.cultureNeutralFilename));
                     }
                     else
@@ -219,7 +220,7 @@ TaskLoggingHelper log
         protected override bool IsSourceFile(string fileName)
         {
             string extension = Path.GetExtension(fileName);
-            return (String.Compare(extension, SourceFileExtension, StringComparison.OrdinalIgnoreCase) == 0);
+            return string.Equals(extension, SourceFileExtension, StringComparison.OrdinalIgnoreCase);
         }
     }
 }
diff --git a/src/Tasks/CreateManifestResourceName.cs b/src/Tasks/CreateManifestResourceName.cs
index 0861ab59458..8f12c40f963 100644
--- a/src/Tasks/CreateManifestResourceName.cs
+++ b/src/Tasks/CreateManifestResourceName.cs
@@ -300,11 +300,7 @@ private static void MakeValidEverettSubFolderIdentifier(StringBuilder builder, s
         {
             ErrorUtilities.VerifyThrowArgumentNull(subName, nameof(subName));
 
-            if (subName.Length == 0)
-            {
-                builder.Append(subName);
-            }
-            else
+            if (!string.IsNullOrEmpty(subName))
             {
                 // the first character has stronger restrictions than the rest
                 if (!IsValidEverettIdFirstChar(subName[0]))
@@ -339,6 +335,10 @@ private static void MakeValidEverettSubFolderIdentifier(StringBuilder builder, s
                     }
                 }
             }
+            else
+            {
+                return;
+            }
         }
 
         /// <summary>
@@ -348,32 +348,39 @@ internal static void MakeValidEverettFolderIdentifier(StringBuilder builder, str
         {
             ErrorUtilities.VerifyThrowArgumentNull(name, nameof(name));
 
-            // give string length to avoid reallocations; +1 since the resulting string may be one char longer than the
-            // original - if the name is a single underscore we add another underscore to it
-            var everettId = new StringBuilder(name.Length + 1);
+            if (!string.IsNullOrEmpty(name))
+            {
+                // give string length to avoid reallocations; +1 since the resulting string may be one char longer than the
+                // original - if the name is a single underscore we add another underscore to it
+                var everettId = new StringBuilder(name.Length + 1);
 
-            // split folder name into subnames separated by '.', if any
-            string[] subNames = name.Split(MSBuildConstants.DotChar);
+                // split folder name into subnames separated by '.', if any
+                string[] subNames = name.Split(MSBuildConstants.DotChar);
 
-            // convert each subname separately
-            if (!string.IsNullOrEmpty(subNames[0]))
-            {
-                MakeValidEverettSubFolderIdentifier(everettId, subNames[0]);
-            }
+                // convert each subname separately
+                if (!string.IsNullOrEmpty(subNames[0]))
+                {
+                    MakeValidEverettSubFolderIdentifier(everettId, subNames[0]);
+                }
 
-            for (int i = 1; i < subNames.Length; i++)
-            {
-                everettId.Append('.');
-                MakeValidEverettSubFolderIdentifier(everettId, subNames[i]);
-            }
+                for (int i = 1; i < subNames.Length; i++)
+                {
+                    everettId.Append('.');
+                    MakeValidEverettSubFolderIdentifier(everettId, subNames[i]);
+                }
 
-            // folder name cannot be a single underscore - add another underscore to it
-            if (everettId.ToString() == "_")
+                // folder name cannot be a single underscore - add another underscore to it
+                if (everettId.ToString() == "_")
+                {
+                    everettId.Append('_');
+                }
+
+                builder.Append(everettId.ToString());
+            }
+            else
             {
-                everettId.Append('_');
+                return;
             }
-
-            builder.Append(everettId.ToString());
         }
 
         /// <summary>
@@ -383,20 +390,25 @@ internal static void MakeValidEverettFolderIdentifier(StringBuilder builder, str
         public static void MakeValidEverettIdentifier(StringBuilder builder, string name)
         {
             ErrorUtilities.VerifyThrowArgumentNull(name, nameof(name));
+            if (!string.IsNullOrEmpty(name))
+            {
+                // split the name into folder names
+                string[] subNames = name.Split(MSBuildConstants.ForwardSlashBackslash);
 
-            // split the name into folder names
-            string[] subNames = name.Split(MSBuildConstants.ForwardSlashBackslash);
+                // convert every folder name
+                if (!string.IsNullOrEmpty(subNames[0]))
+                {
+                    MakeValidEverettFolderIdentifier(builder, subNames[0]);
+                }
 
-            // convert every folder name
-            if (!string.IsNullOrEmpty(subNames[0]))
-            {
-                MakeValidEverettFolderIdentifier(builder, subNames[0]);
+                for (int i = 1; i < subNames.Length; i++)
+                {
+                    builder.Append('.');
+                    MakeValidEverettFolderIdentifier(builder, subNames[i]);
+                }
             }
-
-            for (int i = 1; i < subNames.Length; i++)
-            {
-                builder.Append('.');
-                MakeValidEverettFolderIdentifier(builder, subNames[i]);
+            else {
+                return;
             }
         }
 
diff --git a/src/Tasks/CreateVisualBasicManifestResourceName.cs b/src/Tasks/CreateVisualBasicManifestResourceName.cs
index 8fc68a5fae1..226f567f416 100644
--- a/src/Tasks/CreateVisualBasicManifestResourceName.cs
+++ b/src/Tasks/CreateVisualBasicManifestResourceName.cs
@@ -99,7 +99,7 @@ TaskLoggingHelper log
             Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName);
 
             // If the item has a culture override, respect that. 
-            if (!String.IsNullOrEmpty(culture))
+            if (!string.IsNullOrEmpty(culture))
             {
                 info.culture = culture;
             }
@@ -149,11 +149,11 @@ TaskLoggingHelper log
                 // only strip extension for .resx and .restext files
                 string sourceExtension = Path.GetExtension(info.cultureNeutralFilename);
                 if (
-                        (0 == String.Compare(sourceExtension, ".resx", StringComparison.OrdinalIgnoreCase))
+                        string.Equals(sourceExtension, ".resx", StringComparison.OrdinalIgnoreCase)
                         ||
-                        (0 == String.Compare(sourceExtension, ".restext", StringComparison.OrdinalIgnoreCase))
+                        string.Equals(sourceExtension, ".restext", StringComparison.OrdinalIgnoreCase)
                         ||
-                        (0 == String.Compare(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase))
+                        string.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase)
                     )
                 {
                     manifestName.Append(Path.GetFileNameWithoutExtension(info.cultureNeutralFilename));
@@ -165,7 +165,7 @@ TaskLoggingHelper log
                     }
 
                     // If the original extension was .resources, add it back
-                    if (String.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase))
+                    if (string.Equals(sourceExtension, ".resources", StringComparison.OrdinalIgnoreCase))
                     {
                         manifestName.Append(sourceExtension);
                     }
@@ -197,8 +197,7 @@ TaskLoggingHelper log
         protected override bool IsSourceFile(string fileName)
         {
             string extension = Path.GetExtension(fileName);
-
-            return (String.Compare(extension, SourceFileExtension, StringComparison.OrdinalIgnoreCase) == 0);
+            return string.Equals(extension, SourceFileExtension, StringComparison.OrdinalIgnoreCase);
         }
     }
 }
