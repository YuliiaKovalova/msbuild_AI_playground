diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 3a67481a23e..6184e8a1fc2 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -545,6 +545,23 @@ internal static string FixFilePath(string path)
             return string.IsNullOrEmpty(path) || Path.DirectorySeparatorChar == '\\' ? path : path.Replace('\\', '/'); // .Replace("//", "/");
         }
 
+        internal static string FixFilePath(string path, string targetOs)
+        {
+            char targetSeparator = targetOs switch
+            {
+                "windows" => '\\',
+                "unix" => '/',
+                "current" => Path.DirectorySeparatorChar,
+                _ => Path.DirectorySeparatorChar,
+            };
+
+            return path switch
+            {
+                { } when string.IsNullOrEmpty(path) => path,
+                _ => path.Replace('\\', targetSeparator).Replace('/', targetSeparator),
+            };
+        }
+
 #if !CLR2COMPATIBILITY
         /// <summary>
         /// If on Unix, convert backslashes to slashes for strings that resemble paths.
diff --git a/src/Tasks.UnitTests/CreateItem_Tests.cs b/src/Tasks.UnitTests/CreateItem_Tests.cs
index de09dcbc85e..38439d5b0c6 100644
--- a/src/Tasks.UnitTests/CreateItem_Tests.cs
+++ b/src/Tasks.UnitTests/CreateItem_Tests.cs
@@ -153,6 +153,128 @@ public void CaseDoesntMatter()
             Assert.Empty(t.Include);
         }
 
+        /// <summary>
+        /// CreateItem automatically fixes the directory separator in the Include items by default
+        /// (this is the current behaviour, and we cannot change that without a large impact)
+        /// </summary>
+        [Theory]
+        [MemberData(nameof(PathsWithVariousSlashes))]
+        public void FixesDirectorySeparatorCharByDefault(string original, string expected)
+        {
+            CreateItem t = new()
+            {
+                BuildEngine = new MockEngine(),
+
+                Include = [new TaskItem(original)],
+            };
+
+            bool success = t.Execute();
+            success.ShouldBeTrue();
+
+            t.Include[0].ItemSpec.ShouldBe(expected);
+        }
+
+        /// <summary>
+        /// CreateItem does not automatically fix the directory separator in the Include item if the
+        /// special metadata item FixFilePath is set to false
+        /// </summary>
+        [Theory]
+        [MemberData(nameof(PathsWithVariousSlashes))]
+        public void DoesNotFixDirectorySeparatorCharIfSpecialMetaDataIsSet(string original, string _)
+        {
+            var metadata = new Dictionary<string, string>
+            {
+                { "FixFilePath", "false" },
+            };
+
+            CreateItem t = new()
+            {
+                BuildEngine = new MockEngine(),
+                Include = [new TaskItem(original, metadata)],
+            };
+
+            bool success = t.Execute();
+            success.ShouldBeTrue();
+
+            t.Include[0].ItemSpec.ShouldBe(original);
+        }
+
+        /// <summary>
+        /// CreateItem uses the target platform when fixing the directory separator if the
+        /// special metadata item TargetPlatform is set
+        /// </summary>
+        [Theory]
+        [MemberData(nameof(PathsWithVariousSlashesAndTargetPlatforms))]
+        public void FixesDirectorySeparatorCharToSuppliedTargetPlatform(string platform, string original, string expected)
+        {
+            var metadata = new Dictionary<string, string>
+            {
+                { "TargetOs", platform },
+            };
+
+            CreateItem t = new()
+            {
+                BuildEngine = new MockEngine(),
+                Include = [new TaskItem(original, metadata)],
+            };
+
+            bool success = t.Execute();
+            success.ShouldBeTrue();
+
+            t.Include[0].ItemSpec.ShouldBe(expected);
+        }
+
+
+        public static TheoryData<string, string> PathsWithVariousSlashes
+        {
+            get
+            {
+                char s = Path.DirectorySeparatorChar;
+                return new TheoryData<string, string>
+                {
+                    { @"C:\windows\path\anyfile.txt", $"C:{s}windows{s}path{s}anyfile.txt" },
+                    { @"unrooted\windows\path\anyfile.txt", $"unrooted{s}windows{s}path{s}anyfile.txt" },
+                    { @"C:/windows/path/with/unix/slashes/anyfile.txt", $"C:{s}windows{s}path{s}with{s}unix{s}slashes{s}anyfile.txt" },
+                    { @"/unixpath/anyfile.txt", $"{s}unixpath{s}anyfile.txt" },
+                    { @"/mixed\paths/anyfile.txt", $"{s}mixed{s}paths{s}anyfile.txt" },
+                };
+            }
+        }
+
+        public static TheoryData<string, string, string> PathsWithVariousSlashesAndTargetPlatforms
+        {
+            get
+            {
+                char s = Path.DirectorySeparatorChar;
+                char w = '\\';
+                char u = '/';
+                return new TheoryData<string, string, string>
+                {
+                    { "windows", @"C:\windows\path\anyfile.txt", $"C:{w}windows{w}path{w}anyfile.txt" },
+                    { "windows", @"unrooted\windows\path\anyfile.txt", $"unrooted{w}windows{w}path{w}anyfile.txt" },
+                    { "windows", @"C:/windows/path/with/unix/slashes/anyfile.txt", $"C:{w}windows{w}path{w}with{w}unix{w}slashes{w}anyfile.txt" },
+                    { "windows", @"/unixpath/anyfile.txt", $"{w}unixpath{w}anyfile.txt" },
+                    { "windows", @"/mixed\paths/anyfile.txt", $"{w}mixed{w}paths{w}anyfile.txt" },
+                    { "unix", @"C:\windows\path\anyfile.txt", $"C:{u}windows{u}path{u}anyfile.txt" },
+                    { "unix", @"unrooted\windows\path\anyfile.txt", $"unrooted{u}windows{u}path{u}anyfile.txt" },
+                    { "unix", @"C:/windows/path/with/unix/slashes/anyfile.txt", $"C:{u}windows{u}path{u}with{u}unix{u}slashes{u}anyfile.txt" },
+                    { "unix", @"/unixpath/anyfile.txt", $"{u}unixpath{u}anyfile.txt" },
+                    { "unix", @"/mixed\paths/anyfile.txt", $"{u}mixed{u}paths{u}anyfile.txt" },
+                    { "current", @"C:\windows\path\anyfile.txt", $"C:{s}windows{s}path{s}anyfile.txt" },
+                    { "current", @"unrooted\windows\path\anyfile.txt", $"unrooted{s}windows{s}path{s}anyfile.txt" },
+                    { "current", @"C:/windows/path/with/current/slashes/anyfile.txt", $"C:{s}windows{s}path{s}with{s}current{s}slashes{s}anyfile.txt" },
+                    { "current", @"/currentpath/anyfile.txt", $"{s}currentpath{s}anyfile.txt" },
+                    { "current", @"/mixed\paths/anyfile.txt", $"{s}mixed{s}paths{s}anyfile.txt" },
+                    { null, @"C:\windows\path\anyfile.txt", $"C:{s}windows{s}path{s}anyfile.txt" },
+                    { "_anything", @"unrooted\windows\path\anyfile.txt", $"unrooted{s}windows{s}path{s}anyfile.txt" },
+                    { "_not_valid", @"C:/windows/path/with/current/slashes/anyfile.txt", $"C:{s}windows{s}path{s}with{s}current{s}slashes{s}anyfile.txt" },
+                    { "_invalid", @"/currentpath/anyfile.txt", $"{s}currentpath{s}anyfile.txt" },
+                    { "_run_with_default", @"/mixed\paths/anyfile.txt", $"{s}mixed{s}paths{s}anyfile.txt" },
+                };
+            }
+        }
+
+
         /// <summary>
         /// Using the CreateItem task to expand wildcards, and then try accessing the RecursiveDir
         /// metadata to force batching.
diff --git a/src/Utilities/TaskItem.cs b/src/Utilities/TaskItem.cs
index f4e818e278e..08d4aeec63a 100644
--- a/src/Utilities/TaskItem.cs
+++ b/src/Utilities/TaskItem.cs
@@ -80,6 +80,9 @@ public TaskItem(
             _itemSpec = FileUtilities.FixFilePath(itemSpec);
         }
 
+        private const string FixFilePath = nameof(FixFilePath);
+        private const string TargetOs = nameof(TargetOs);
+
         /// <summary>
         /// This constructor creates a new TaskItem, using the given item spec and metadata.
         /// </summary>
@@ -91,11 +94,13 @@ public TaskItem(
         /// <param name="itemMetadata">Custom metadata on the item.</param>
         public TaskItem(
             string itemSpec,
-            IDictionary itemMetadata) :
-            this(itemSpec)
+            IDictionary itemMetadata)
         {
             ErrorUtilities.VerifyThrowArgumentNull(itemMetadata, nameof(itemMetadata));
 
+            bool fixFilePath = true;
+            string targetOs = null;
+
             if (itemMetadata.Count > 0)
             {
                 _metadata = new CopyOnWriteDictionary<string>(MSBuildNameIgnoreCaseComparer.Default);
@@ -106,10 +111,25 @@ public TaskItem(
                     string key = (string)singleMetadata.Key;
                     if (!FileUtilities.ItemSpecModifiers.IsDerivableItemSpecModifier(key))
                     {
-                        _metadata[key] = (string)singleMetadata.Value ?? string.Empty;
+                        string value = (string)singleMetadata.Value;
+                        _metadata[key] = value ?? string.Empty;
+
+                        // Check if the special metadata FixFilePath is set to false - if so, don't fix the file path
+                        if (FixFilePath.Equals(key) && bool.TryParse(value, out bool fixFilePathValue))
+                        {
+                            fixFilePath = fixFilePathValue;
+                        }
+
+                        // Check if the special metadata TargetPlatform is set - if it is, use that when fixing the paths
+                        if (TargetOs.Equals(key))
+                        {
+                            targetOs = value;
+                        }
                     }
                 }
             }
+
+            _itemSpec = fixFilePath ? FileUtilities.FixFilePath(itemSpec, targetOs) : itemSpec;
         }
 
         /// <summary>
