diff --git a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
index 62e411ac638..dfd3636e63c 100644
--- a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
+++ b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
@@ -6,6 +6,7 @@
 using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Engine.UnitTests;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index 42cddef429a..b9f9e5fe54e 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -1,17 +1,13 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.IO;
 using System.Linq;
-using System.Text;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
-using Microsoft.Build.Utilities;
 using Shouldly;
 
 namespace Microsoft.Build.Experimental.Graph.UnitTests
@@ -210,191 +206,4 @@ internal static TransientTestFile CreateProjectFile(
                 extraContent);
         }
     }
-
-    internal class SolutionFileBuilder
-    {
-        public static readonly IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatformsDefaults = new[]
-        {
-            new SolutionConfigurationInSolution("Debug", "AnyCPU"),
-            new SolutionConfigurationInSolution("Release", "AnyCPU")
-        };
-
-        /// <summary>
-        /// projectName -> projectPath
-        /// </summary>
-        public IReadOnlyDictionary<string, string> Projects { get; set; }
-
-        public IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatforms { get; set; } = SolutionConfigurationPlatformsDefaults;
-
-        public Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>> ProjectConfigurations { get; set; }
-
-        public (string, string)[] SolutionDependencies { get; set; }
-        public (string, string[])[] SolutionDependenciesProjectNameToGuids { get; set; }
-
-        private readonly struct ProjectInfo
-        {
-            private readonly List<ProjectInfo> _dependencies;
-            private readonly List<string> _dependencyGuids;
-            public string Name { get; }
-            public string Path { get; }
-            public string ProjectTypeGuid { get; }
-            public string Guid { get; }
-
-            public IReadOnlyCollection<ProjectInfo> Dependencies => _dependencies;
-
-            public IReadOnlyCollection<string> DependencyGuids => _dependencyGuids;
-
-            public ProjectInfo(string name, string path, string projectTypeGuid, string guid)
-            {
-                Name = name;
-                Path = path;
-                ProjectTypeGuid = projectTypeGuid;
-                Guid = guid;
-                _dependencies = new List<ProjectInfo>();
-                _dependencyGuids = new List<string>();
-            }
-
-            public void AddDependency(ProjectInfo dependency)
-            {
-                _dependencies.Add(dependency);
-            }
-
-            internal void AddGuidDependencies(string[] dependencyGuids)
-            {
-                _dependencyGuids.AddRange(dependencyGuids);
-            }
-        }
-
-        public static SolutionFileBuilder FromGraphEdges(
-            TestEnvironment env,
-            Dictionary<int, int[]> edges,
-            (string, string[])[] solutionDependenciesProjectNameToGuids = null)
-        {
-            return FromGraph(Helpers.CreateProjectGraph(env, edges), solutionDependenciesProjectNameToGuids: solutionDependenciesProjectNameToGuids);
-        }
-
-        public static SolutionFileBuilder FromGraph(
-            ProjectGraph graph,
-            Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>> projectConfigurations = null,
-            (string, string)[] solutionDependencies = null,
-            (string, string[])[] solutionDependenciesProjectNameToGuids = null)
-        {
-            return new SolutionFileBuilder
-            {
-                Projects = graph.ProjectNodes.ToDictionary(
-                    n => GraphTestingUtilities.GetProjectNumber(n).ToString(),
-                    n => n.ProjectInstance.FullPath),
-                ProjectConfigurations = projectConfigurations,
-                SolutionDependencies = solutionDependencies,
-                SolutionDependenciesProjectNameToGuids = solutionDependenciesProjectNameToGuids
-            };
-        }
-
-        public string BuildSolution()
-        {
-            var projectInfos = Projects.ToDictionary(
-                kvp => kvp.Key,
-                kvp => new ProjectInfo(
-                    kvp.Key,
-                    kvp.Value,
-                    "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}",
-                    Guid.NewGuid()
-                        .ToString("B")));
-
-            if (SolutionDependencies != null && SolutionDependencies.Length > 0)
-            {
-                foreach (var (parent, dependency) in SolutionDependencies)
-                {
-                    projectInfos.ShouldContainKey(parent);
-                    projectInfos.ShouldContainKey(dependency);
-
-                    projectInfos[parent].AddDependency(projectInfos[dependency]); 
-                }
-            }
-
-            if (SolutionDependenciesProjectNameToGuids!= null && SolutionDependenciesProjectNameToGuids.Length > 0)
-            {
-                foreach (var (parent, dependencyGuids) in SolutionDependenciesProjectNameToGuids)
-                {
-                    projectInfos.ShouldContainKey(parent);
-                    projectInfos[parent].AddGuidDependencies(dependencyGuids);
-                }
-            }
-
-            ProjectConfigurations = ProjectConfigurations ?? projectInfos.ToDictionary(
-                p => p.Key,
-                p => SolutionConfigurationPlatforms.ToDictionary(
-                    sc => sc,
-                    sc => new ProjectConfigurationInSolution(
-                        sc.ConfigurationName,
-                        sc.PlatformName,
-                        true)
-                    )
-                );
-
-            var sb = new StringBuilder();
-
-            sb.AppendLine($@"
-Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio Version {VisualStudioVersion.VersionLatest}
-VisualStudioVersion = {VisualStudioVersion.VersionLatest}.0.0.0
-MinimumVisualStudioVersion = 10.0.40219.1");
-
-            foreach (var project in projectInfos.Values)
-            {
-                sb.AppendLine($@"
-Project(""{project.ProjectTypeGuid}"") = ""{project.Name}"", ""{project.Path}"", ""{project.Guid}""");
-
-                if (project.Dependencies.Count > 0 || project.DependencyGuids.Count > 0)
-                {
-                    sb.AppendLine($"\tProjectSection(ProjectDependencies) = postProject");
-
-                    foreach (var dependency in project.Dependencies)
-                    {
-                        sb.AppendLine($"\t\t{dependency.Guid} = {dependency.Guid}");
-                    }
-
-                    foreach (var dependencyGuid in project.DependencyGuids)
-                    {
-                        sb.AppendLine($"\t\t{dependencyGuid} = {dependencyGuid}");
-                    }
-
-                    sb.AppendLine($"\tEndProjectSection");
-                }
-
-                sb.AppendLine($@"
-EndProject");
-            }
-
-            sb.AppendLine("Global");
-
-            sb.AppendLine("\tGlobalSection(SolutionConfigurationPlatforms) = preSolution");
-
-            foreach (var solutionConfigurationPlatform in SolutionConfigurationPlatforms)
-            {
-                sb.AppendLine($"\t\t{solutionConfigurationPlatform.FullName} = {solutionConfigurationPlatform.FullName}");
-            }
-
-            sb.AppendLine("\tEndGlobalSection");
-
-            sb.AppendLine("\tGlobalSection(ProjectConfigurationPlatforms) = postSolution");
-
-            foreach (var project in projectInfos)
-            {
-                foreach (var configurationMapping in ProjectConfigurations[project.Key])
-                {
-                    var solutionConfiguration = configurationMapping.Key;
-                    var projectConfiguration = configurationMapping.Value;
-                    sb.AppendLine($"\t\t{project.Value.Guid}.{solutionConfiguration.FullName}.ActiveCfg = {projectConfiguration.FullName}");
-                    sb.AppendLine($"\t\t{project.Value.Guid}.{solutionConfiguration.FullName}.Build.0 = {projectConfiguration.FullName}");
-                }
-            }
-
-            sb.AppendLine("\tEndGlobalSection");
-
-            sb.AppendLine("EndGlobal");
-
-            return sb.ToString();
-        }
-    }
 }
diff --git a/src/Build.UnitTests/SolutionFileBuilder.cs b/src/Build.UnitTests/SolutionFileBuilder.cs
new file mode 100644
index 00000000000..750e59865d6
--- /dev/null
+++ b/src/Build.UnitTests/SolutionFileBuilder.cs
@@ -0,0 +1,212 @@
+﻿// --------------------------------------------------------------------
+// 
+// Copyright (c) Microsoft Corporation.  All rights reserved.
+// 
+// --------------------------------------------------------------------
+
+// --------------------------------------------------------------------
+// 
+// Copyright (c) Microsoft Corporation.  All rights reserved.
+// 
+// --------------------------------------------------------------------
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Experimental.Graph;
+using Microsoft.Build.Experimental.Graph.UnitTests;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+
+namespace Microsoft.Build.Engine.UnitTests
+{
+    internal class SolutionFileBuilder
+    {
+        public static readonly IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatformsDefaults = new[]
+        {
+            new SolutionConfigurationInSolution("Debug", "AnyCPU"),
+            new SolutionConfigurationInSolution("Release", "AnyCPU")
+        };
+
+        /// <summary>
+        /// projectName -> projectPath
+        /// </summary>
+        public IReadOnlyDictionary<string, string> Projects { get; set; }
+
+        public IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatforms { get; set; } = SolutionConfigurationPlatformsDefaults;
+
+        public Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>> ProjectConfigurations { get; set; }
+
+        public (string, string)[] SolutionDependencies { get; set; }
+        public (string, string[])[] SolutionDependenciesProjectNameToGuids { get; set; }
+
+        private readonly struct ProjectInfo
+        {
+            private readonly List<ProjectInfo> _dependencies;
+            private readonly List<string> _dependencyGuids;
+            public string Name { get; }
+            public string Path { get; }
+            public string ProjectTypeGuid { get; }
+            public string Guid { get; }
+
+            public IReadOnlyCollection<ProjectInfo> Dependencies => _dependencies;
+
+            public IReadOnlyCollection<string> DependencyGuids => _dependencyGuids;
+
+            public ProjectInfo(string name, string path, string projectTypeGuid, string guid)
+            {
+                Name = name;
+                Path = path;
+                ProjectTypeGuid = projectTypeGuid;
+                Guid = guid;
+                _dependencies = new List<ProjectInfo>();
+                _dependencyGuids = new List<string>();
+            }
+
+            public void AddDependency(ProjectInfo dependency)
+            {
+                _dependencies.Add(dependency);
+            }
+
+            internal void AddGuidDependencies(string[] dependencyGuids)
+            {
+                _dependencyGuids.AddRange(dependencyGuids);
+            }
+        }
+
+        public static SolutionFileBuilder FromGraphEdges(
+            TestEnvironment env,
+            Dictionary<int, int[]> edges,
+            (string, string[])[] solutionDependenciesProjectNameToGuids = null)
+        {
+            return FromGraph(Helpers.CreateProjectGraph(env, edges), solutionDependenciesProjectNameToGuids: solutionDependenciesProjectNameToGuids);
+        }
+
+        public static SolutionFileBuilder FromGraph(
+            ProjectGraph graph,
+            Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>> projectConfigurations = null,
+            (string, string)[] solutionDependencies = null,
+            (string, string[])[] solutionDependenciesProjectNameToGuids = null)
+        {
+            return new SolutionFileBuilder
+            {
+                Projects = graph.ProjectNodes.ToDictionary(
+                    n => GraphTestingUtilities.GetProjectNumber((ProjectGraphNode) n).ToString(),
+                    n => n.ProjectInstance.FullPath),
+                ProjectConfigurations = projectConfigurations,
+                SolutionDependencies = solutionDependencies,
+                SolutionDependenciesProjectNameToGuids = solutionDependenciesProjectNameToGuids
+            };
+        }
+
+        public string BuildSolution()
+        {
+            var projectInfos = Projects.ToDictionary(
+                kvp => kvp.Key,
+                kvp => new ProjectInfo(
+                    kvp.Key,
+                    kvp.Value,
+                    "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}",
+                    Guid.NewGuid()
+                        .ToString("B")));
+
+            if (SolutionDependencies != null && SolutionDependencies.Length > 0)
+            {
+                foreach (var (parent, dependency) in SolutionDependencies)
+                {
+                    projectInfos.ShouldContainKey(parent);
+                    projectInfos.ShouldContainKey(dependency);
+
+                    projectInfos[parent].AddDependency(projectInfos[dependency]); 
+                }
+            }
+
+            if (SolutionDependenciesProjectNameToGuids!= null && SolutionDependenciesProjectNameToGuids.Length > 0)
+            {
+                foreach (var (parent, dependencyGuids) in SolutionDependenciesProjectNameToGuids)
+                {
+                    projectInfos.ShouldContainKey(parent);
+                    projectInfos[parent].AddGuidDependencies(dependencyGuids);
+                }
+            }
+
+            ProjectConfigurations = ProjectConfigurations ?? projectInfos.ToDictionary(
+                p => p.Key,
+                p => SolutionConfigurationPlatforms.ToDictionary(
+                    sc => sc,
+                    sc => new ProjectConfigurationInSolution(
+                        sc.ConfigurationName,
+                        sc.PlatformName,
+                        true)
+                    )
+                );
+
+            var sb = new StringBuilder();
+
+            sb.AppendLine($@"
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version {VisualStudioVersion.VersionLatest}
+VisualStudioVersion = {VisualStudioVersion.VersionLatest}.0.0.0
+MinimumVisualStudioVersion = 10.0.40219.1");
+
+            foreach (var project in projectInfos.Values)
+            {
+                sb.AppendLine($@"
+Project(""{project.ProjectTypeGuid}"") = ""{project.Name}"", ""{project.Path}"", ""{project.Guid}""");
+
+                if (project.Dependencies.Count > 0 || project.DependencyGuids.Count > 0)
+                {
+                    sb.AppendLine($"\tProjectSection(ProjectDependencies) = postProject");
+
+                    foreach (var dependency in project.Dependencies)
+                    {
+                        sb.AppendLine($"\t\t{dependency.Guid} = {dependency.Guid}");
+                    }
+
+                    foreach (var dependencyGuid in project.DependencyGuids)
+                    {
+                        sb.AppendLine($"\t\t{dependencyGuid} = {dependencyGuid}");
+                    }
+
+                    sb.AppendLine($"\tEndProjectSection");
+                }
+
+                sb.AppendLine($@"
+EndProject");
+            }
+
+            sb.AppendLine("Global");
+
+            sb.AppendLine("\tGlobalSection(SolutionConfigurationPlatforms) = preSolution");
+
+            foreach (var solutionConfigurationPlatform in SolutionConfigurationPlatforms)
+            {
+                sb.AppendLine($"\t\t{solutionConfigurationPlatform.FullName} = {solutionConfigurationPlatform.FullName}");
+            }
+
+            sb.AppendLine("\tEndGlobalSection");
+
+            sb.AppendLine("\tGlobalSection(ProjectConfigurationPlatforms) = postSolution");
+
+            foreach (var project in projectInfos)
+            {
+                foreach (var configurationMapping in ProjectConfigurations[project.Key])
+                {
+                    var solutionConfiguration = configurationMapping.Key;
+                    var projectConfiguration = configurationMapping.Value;
+                    sb.AppendLine($"\t\t{project.Value.Guid}.{solutionConfiguration.FullName}.ActiveCfg = {projectConfiguration.FullName}");
+                    sb.AppendLine($"\t\t{project.Value.Guid}.{solutionConfiguration.FullName}.Build.0 = {projectConfiguration.FullName}");
+                }
+            }
+
+            sb.AppendLine("\tEndGlobalSection");
+
+            sb.AppendLine("EndGlobal");
+
+            return sb.ToString();
+        }
+    }
+}
