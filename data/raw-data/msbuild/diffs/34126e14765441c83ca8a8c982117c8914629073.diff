diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index cc3a1cf3ffb..2885865bf20 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -66,7 +66,6 @@ public void EscapeParenthesesInPathToGeneratedBatchFile()
                 // Now run the Exec task on a simple command.
                 Exec exec = PrepareExec("echo Hello World!");
                 exec.Execute().ShouldBeTrue();
-
             }
         }
 
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 591dbdd867c..2f8a6341929 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -616,16 +616,20 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
                         batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
                     }
 
-                    StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length).Append(batchFileForCommandLine);
+                    StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
 
                     // Escape any '(', ')', or '&'
-                    for(int i = 1; i < fileName.Length; i++)
+                    for (int i = 0; i < batchFileForCommandLine.Length; i++)
                     {
-                        if((fileName[i] == '(' || fileName[i] == ')' || fileName[i] == '&') && fileName[i-1] != '^')
+                        char c = batchFileForCommandLine[i];
+
+                        if ((c == '(' || c == ')' || c == '&') && (i > 0 && batchFileForCommandLine[i - 1] != '^'))
                         {
-                            fileName.Insert(i++, '^');
+                            fileName.Append('^');
                         }
+                        fileName.Append(c);
                     }
+
                     batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
                 }
 
