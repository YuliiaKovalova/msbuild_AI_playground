diff --git a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
index 1f46f0c71b1..fe87c3907f0 100644
--- a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
@@ -21,7 +21,6 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using System.Drawing;
 
 namespace Microsoft.Build.Engine.UnitTests.Construction
 {
@@ -330,7 +329,7 @@ public void SolutionFilterWithAtSymbolInThePath()
             """);
 
             SolutionFile sp = SolutionFile.Parse(slnf.Path);
-            
+
             // just assert that no error is thrown
             Assert.True(sp.ProjectShouldBuild("SolutionTest.csproj"));
         }
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index c3e84ca0907..be41a7f828f 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -658,7 +658,7 @@ internal static string ParseSolutionFromSolutionFilter(string solutionFilterFile
                 JsonDocumentOptions options = new JsonDocumentOptions() { AllowTrailingCommas = true, CommentHandling = JsonCommentHandling.Skip };
                 JsonDocument text = JsonDocument.Parse(File.ReadAllText(solutionFilterFile), options);
                 solution = text.RootElement.GetProperty("solution");
-                return Path.GetFullPath(solution.GetProperty("path").GetString(), Path.GetDirectoryName(solutionFilterFile));
+                return Path.GetFullPath(Path.Combine(Path.GetDirectoryName(solutionFilterFile), solution.GetProperty("path").GetString()));
             }
             catch (Exception e) when (e is JsonException || e is KeyNotFoundException || e is InvalidOperationException)
             {
