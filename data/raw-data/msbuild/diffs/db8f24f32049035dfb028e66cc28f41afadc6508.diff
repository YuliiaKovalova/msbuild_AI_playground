diff --git a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
index d748a9335f1..3fc8f298b8f 100644
--- a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
+++ b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
@@ -68,12 +68,12 @@ public void SampleItemsEnumeration()
 
             results.Count.ShouldBe(2);
             results[0].Type.ShouldBe("Key");
-            results[0].Value.EvaluatedInclude.ShouldBe("TestItemSpec");
-            results[0].Value.EnumerateMetadata().ShouldBeEmpty();
+            results[0].EvaluatedInclude.ShouldBe("TestItemSpec");
+            results[0].EnumerateMetadata().ShouldBeEmpty();
 
             results[1].Type.ShouldBe("Key2");
-            results[1].Value.EvaluatedInclude.ShouldBe("spec");
-            List<KeyValuePair<string, string>> metadata = results[1].Value.EnumerateMetadata().ToList();
+            results[1].EvaluatedInclude.ShouldBe("spec");
+            List<KeyValuePair<string, string>> metadata = results[1].EnumerateMetadata().ToList();
             metadata.Count.ShouldBe(2);
             metadata[0].Key.ShouldBe("metadat1");
             metadata[0].Value.ShouldBe("val1");
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index d46d761618e..f82691af730 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -761,25 +761,13 @@ IEnumerable<ItemData> CastOneByOne(IEnumerable itms)
                         }
                     }
 
-                    IItemData data = null;
-
                     if (itemValue != null)
                     {
                         // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
                         //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
-                        if (itemValue is IItemData dt)
-                        {
-                            data = dt;
-                        }
-                        else
-                        {
-                            Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected {nameof(itemValue)} {itemValue} of type {itemValue?.GetType().ToString()}");
-                        }
-                    }
-
-                    if (data != null)
-                    {
-                        yield return new(itemType!, data);
+                        // However! NodePacketTranslator and BuildEventArgsReader might deserialize those as TaskItemData
+                        //  (see xml comments of TaskItemData for details)
+                        yield return new ItemData(itemType!, itemValue);
                     }
                 }
             }
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
index 588c32be093..c5ede56bae9 100644
--- a/src/Framework/IItemData.cs
+++ b/src/Framework/IItemData.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 
 namespace Microsoft.Build.Framework;
@@ -35,6 +36,60 @@ string EvaluatedInclude
 /// <summary>
 /// Structure defining single MSBuild item instance.
 /// </summary>
-/// <param name="Type">The type of property - e.g. 'PackageReference'.</param>
-/// <param name="Value">The actual value of item - e.g. 'System.Text.Json'.</param>
-public readonly record struct ItemData(string Type, IItemData Value);
+/// <remarks>
+/// The underlying Value property can be of various distinct types - so it's suggested to use provided accessor methods
+/// </remarks>
+public readonly struct ItemData
+{
+    private readonly Func<IEnumerable<KeyValuePair<string, string>>> _enumerateMetadata;
+
+    public ItemData(string type, object value)
+    {
+        
+        Type = type;
+        Value = value;
+
+        // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
+        //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
+        // However! NodePacketTranslator and BuildEventArgsReader might deserialize those as TaskItemData
+        //  (see xml comments of TaskItemData for details)
+        if (value is IItemData dt)
+        {
+            EvaluatedInclude = dt.EvaluatedInclude;
+            _enumerateMetadata = dt.EnumerateMetadata;
+        }
+        else if (value is ITaskItem ti)
+        {
+            EvaluatedInclude = ti.ItemSpec;
+            _enumerateMetadata = ti.EnumerateMetadata;
+        }
+        else
+        {
+            EvaluatedInclude = value.ToString() ?? string.Empty;
+            _enumerateMetadata = () => [];
+        }
+    }
+
+    /// <summary>
+    /// The type of property - e.g. 'PackageReference'.
+    /// </summary>
+    public string Type { get; private init; }
+
+    /// <summary>
+    /// The actual value of item - e.g. 'System.Text.Json'.
+    /// This can be of a distinct types, hence the helper methods <see cref="EvaluatedInclude"/> and <see cref="EnumerateMetadata"/>
+    ///  are recommended for accessing the data
+    /// </summary>
+    public object? Value { get; private init; }
+
+    /// <summary>
+    /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
+    /// </summary>
+    public string EvaluatedInclude { get; private init; }
+
+    /// <summary>
+    /// The item metadata
+    /// </summary>
+    public IEnumerable<KeyValuePair<string, string>> EnumerateMetadata()
+        => _enumerateMetadata();
+}
