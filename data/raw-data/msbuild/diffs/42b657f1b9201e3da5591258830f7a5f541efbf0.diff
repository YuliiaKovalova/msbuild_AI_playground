diff --git a/documentation/specs/proposed/BuildCheck.md b/documentation/specs/proposed/BuildCheck.md
index 4fa78061b78..3ac32adcaec 100644
--- a/documentation/specs/proposed/BuildCheck.md
+++ b/documentation/specs/proposed/BuildCheck.md
@@ -75,14 +75,12 @@ Majority of following cases are included in appropriate context within the scena
 ```ini
 # I expect this to apply to all projects within my solution, but not to projects which are not part of the solution
 [ContosoFrontEnd.sln]
-build_check.BC0101.IsEnabled=true
 build_check.BC0101.Severity=warning
 ```
 * Attributing `.editorconfig` configurations to lower granularity than whole projects. E.g.:
 ```ini
 # I expect this to apply only to a scope of the imported file. Or possibly I expect this to apply to all projects importing this project.
 [ContosoCommonImport.proj]
-buildcheck.BC0101.IsEnabled=true
 buildcheck.BC0101.Severity=warning
 ```
 * Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hierarchy of particular project file).
@@ -184,7 +182,6 @@ Option `Severity` with following values will be available:
 
 * `Default`
 * `None`
-* `Suggestion`
 * `Warning`
 * `Error`
 
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index ab817077725..5f35c12379b 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -21,8 +21,7 @@ public class BuildAnalyzerConfiguration
     public static BuildAnalyzerConfiguration Default { get; } = new()
     {
         EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.ProjectOnly,
-        Severity = BuildAnalyzerResultSeverity.Info,
-        IsEnabled = false,
+        Severity = BuildAnalyzerResultSeverity.None
     };
 
     public static BuildAnalyzerConfiguration Null { get; } = new();
@@ -45,7 +44,17 @@ public class BuildAnalyzerConfiguration
     /// If all rules within the analyzer are not enabled, it will not be run.
     /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.
     /// </summary>
-    public bool? IsEnabled { get; internal init; }
+    public bool? IsEnabled {
+        get
+        {
+            if (Severity.HasValue && Severity.Value != BuildAnalyzerResultSeverity.Default)
+            {
+                return !Severity.Value.Equals(BuildAnalyzerResultSeverity.None);
+            }
+
+            return null;
+        }
+    }
 
     /// <summary>
     /// Creates a <see cref="BuildAnalyzerConfiguration"/> object based on the provided configuration dictionary.
@@ -59,8 +68,7 @@ internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? co
         return new()
         {
             EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,
-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null,
-            IsEnabled = TryExtractValue(nameof(IsEnabled), configDictionary, out bool isEnabled) ? isEnabled : null,
+            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null
         };
     }
 
@@ -83,31 +91,6 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string>? c
         return isParsed;
     }
 
-    private static bool TryExtractValue(string key, Dictionary<string, string>? config, out bool value)
-    {
-        value = default;
-
-        if (config == null || !config.TryGetValue(key.ToLower(), out var stringValue) || stringValue is null)
-        {
-            return false;
-        }
-
-        bool isParsed = false;
-        
-        if (bool.TryParse(stringValue, out bool boolValue))
-        {
-            value = boolValue;
-            isParsed = true;
-        }
-        
-        if (!isParsed)
-        {
-            ThrowIncorrectValueException(key, stringValue);
-        }
-
-        return isParsed;
-    }
-
     private static void ThrowIncorrectValueException(string key, string value)
     {
         // TODO: It will be nice to have the filename where the incorrect configuration was placed. 
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs b/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
index 412a014be06..994e8f57c8c 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public enum BuildAnalyzerResultSeverity
 {
+    /// <summary>
+    /// When set to None the rule will not run.
+    /// </summary>
+    None,
+
+    /// <summary>
+    /// Information level message.
+    /// </summary>
     Info,
+
+    /// <summary>
+    /// Results a warning in build if the BuildCheck rule applied.
+    /// </summary>
     Warning,
+
+    /// <summary>
+    /// Results an error in build if the BuildCheck rule applied.
+    /// </summary>
     Error,
+
+    /// <summary>
+    /// When set, the default value of the BuildCheck rule will be used.
+    /// </summary>
+    Default,
 }
diff --git a/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs b/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
index e5fc6b22cfd..6c1522c387d 100644
--- a/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
@@ -23,7 +23,7 @@ internal sealed class DoubleWritesAnalyzer : BuildAnalyzer
     public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0102", "DoubleWrites",
         "Two tasks should not write the same file",
         "Tasks {0} and {1} from projects {2} and {3} write the same file: {4}.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.DoubleWritesAnalyzer";
 
diff --git a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
index 74d0ba579a9..5da98f08463 100644
--- a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
@@ -18,7 +18,7 @@ internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer
     public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0101", "ConflictingOutputPath",
         "Two projects should not share their OutputPath nor IntermediateOutputPath locations",
         "Projects {0} and {1} have conflicting output paths: {2}.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.SharedOutputPathAnalyzer";
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
index 9d7738922e7..d00bc37abad 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
@@ -19,8 +19,11 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope
     }
 
     public string RuleId { get; }
+
     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }
+
     public BuildAnalyzerResultSeverity Severity { get; }
+
     public bool IsEnabled { get; }
 
     // Intentionally not checking the RuleId
@@ -29,6 +32,5 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope
     public bool IsSameConfigurationAs(BuildAnalyzerConfigurationInternal? other) =>
         other != null &&
         Severity == other.Severity &&
-        IsEnabled == other.IsEnabled &&
         EvaluationAnalysisScope == other.EvaluationAnalysisScope;
 }
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index ab2e298879b..3f019a93d6c 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -33,7 +33,6 @@ internal sealed class ConfigurationProvider
 
     private readonly string[] _infrastructureConfigurationKeys = new string[] {
         nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
-        nameof(BuildAnalyzerConfiguration.IsEnabled).ToLower(),
         nameof(BuildAnalyzerConfiguration.Severity).ToLower()
     };
 
@@ -264,7 +263,7 @@ internal BuildAnalyzerConfigurationInternal MergeConfiguration(
             ruleId: ruleId,
             evaluationAnalysisScope: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.EvaluationAnalysisScope),
             isEnabled: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.IsEnabled),
-            severity: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.Severity));
+            severity: GetSeverityValue(editorConfig, defaultConfig));
 
     private BuildAnalyzerConfigurationInternal GetMergedConfiguration(
         string projectFullPath,
@@ -280,6 +279,20 @@ private T GetConfigValue<T>(
            propertyGetter(defaultValue) ??
            EnsureNonNull(propertyGetter(BuildAnalyzerConfiguration.Default));
 
+    private BuildAnalyzerResultSeverity GetSeverityValue(BuildAnalyzerConfiguration editorConfigValue, BuildAnalyzerConfiguration defaultValue)
+    {
+        BuildAnalyzerResultSeverity? resultSeverity = null;
+
+        if (editorConfigValue.Severity != null && editorConfigValue.Severity != BuildAnalyzerResultSeverity.Default)
+        {
+            resultSeverity = editorConfigValue.Severity;
+        }
+
+        resultSeverity ??= defaultValue.Severity ?? EnsureNonNull(BuildAnalyzerConfiguration.Default.Severity);
+
+        return resultSeverity.Value;
+    }
+
     private static T EnsureNonNull<T>(T? value) where T : struct
     {
         if (value is null)
diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
index edfdfaf4589..2ea4738c8ff 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -33,43 +33,45 @@ public void CreateWithEmpty_ReturnsObjectWithNullValues()
 
     [Theory]
     [InlineData("error", BuildAnalyzerResultSeverity.Error)]
+    [InlineData("ERROR", BuildAnalyzerResultSeverity.Error)]
     [InlineData("info", BuildAnalyzerResultSeverity.Info)]
+    [InlineData("INFO", BuildAnalyzerResultSeverity.Info)]
     [InlineData("warning", BuildAnalyzerResultSeverity.Warning)]
     [InlineData("WARNING", BuildAnalyzerResultSeverity.Warning)]
+    [InlineData("NONE", BuildAnalyzerResultSeverity.None)]
+    [InlineData("none", BuildAnalyzerResultSeverity.None)]
+    [InlineData("default", BuildAnalyzerResultSeverity.Default)]
+    [InlineData("DEFAULT", BuildAnalyzerResultSeverity.Default)]
     public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAnalyzerResultSeverity? expected)
     {
         var config = new Dictionary<string, string>()
         {
             { "severity" , parameter },
         };
+
         var buildConfig = BuildAnalyzerConfiguration.Create(config);
 
         buildConfig.ShouldNotBeNull();
         buildConfig.Severity.ShouldBe(expected);
-
-        buildConfig.IsEnabled.ShouldBeNull();
         buildConfig.EvaluationAnalysisScope.ShouldBeNull();
     }
 
     [Theory]
-    [InlineData("true", true)]
-    [InlineData("TRUE", true)]
-    [InlineData("false", false)]
-    [InlineData("FALSE", false)]
-    public void CreateBuildAnalyzerConfiguration_IsEnabled(string parameter, bool? expected)
+    [InlineData("error", true)]
+    [InlineData("warning", true)]
+    [InlineData("info", true)]
+    [InlineData("none", false)]
+    [InlineData("default", null)]
+    public void CreateBuildAnalyzerConfiguration_SeverityAndEnabledOrder(string parameter, bool? expected)
     {
         var config = new Dictionary<string, string>()
         {
-            { "isenabled" , parameter },
+            { "severity", parameter },
         };
-
+        
         var buildConfig = BuildAnalyzerConfiguration.Create(config);
 
-        buildConfig.ShouldNotBeNull();
         buildConfig.IsEnabled.ShouldBe(expected);
-
-        buildConfig.Severity.ShouldBeNull();
-        buildConfig.EvaluationAnalysisScope.ShouldBeNull();
     }
 
     [Theory]
@@ -96,7 +98,6 @@ public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string para
 
     [Theory]
     [InlineData("evaluationanalysisscope", "incorrec-value")]
-    [InlineData("isenabled", "incorrec-value")]
     [InlineData("severity", "incorrec-value")]
     public void CreateBuildAnalyzerConfiguration_ExceptionOnInvalidInputValue(string key, string value)
     {
diff --git a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
index d559e1724b1..5ad05d84646 100644
--- a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
@@ -76,7 +76,6 @@ public void GetRuleIdConfiguration_CustomConfigurationData()
         [*.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
         any_other_key1=any_other_value1
         any_other_key2=any_other_value2
@@ -106,7 +105,6 @@ public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
         root=true
 
         [*.csproj]
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.Severity=Error
         build_check.rule_id.EvaluationAnalysisScope=ProjectOnly
         """);
@@ -134,13 +132,11 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_NotValid_Differen
         [*.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
 
         [test123.csproj]
         build_check.rule_id.property1=value2
         build_check.rule_id.property2=value3
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=tru1
         """);
 
@@ -199,13 +195,11 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
         [*.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
 
         [test123.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
         """);
 
@@ -218,4 +212,28 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
             configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, "test123.csproj"), "rule_id");
         });
     }
+
+    [Theory]
+    [InlineData(BuildAnalyzerResultSeverity.Warning, BuildAnalyzerResultSeverity.Warning, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Error, BuildAnalyzerResultSeverity.Error, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Default, BuildAnalyzerResultSeverity.Warning, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Info, BuildAnalyzerResultSeverity.Info, true)]
+    [InlineData(BuildAnalyzerResultSeverity.None, BuildAnalyzerResultSeverity.None, false)]
+    public void GetConfigurationProvider_MergesSeverity_Correctly(BuildAnalyzerResultSeverity buildAnalyzerResultSeverity, BuildAnalyzerResultSeverity expectedSeverity, bool expectedEnablment)
+    {
+        var configurationProvider = new ConfigurationProvider();
+        BuildAnalyzerConfiguration buildAnalyzerConfiguration = new BuildAnalyzerConfiguration()
+        {
+            Severity = buildAnalyzerResultSeverity
+        };
+
+        BuildAnalyzerConfiguration defaultValue = new BuildAnalyzerConfiguration()
+        {
+            Severity = BuildAnalyzerResultSeverity.Warning
+        };
+
+        var internalBuildAnalyzer = configurationProvider.MergeConfiguration("ruleId", defaultValue, buildAnalyzerConfiguration);
+        internalBuildAnalyzer.Severity.ShouldBe(expectedSeverity);
+        internalBuildAnalyzer.IsEnabled.ShouldBe(expectedEnablment);
+    }
 }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index d3b68e4a80d..4436fd2436c 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -202,18 +202,14 @@ private void PrepareSampleProjectsAndConfig(
             root=true
 
             [*.csproj]
-            build_check.BC0101.IsEnabled=true
             build_check.BC0101.Severity={BC0101Severity}
 
-            build_check.BC0102.IsEnabled=true
             build_check.BC0102.Severity=warning
 
-            build_check.COND0543.IsEnabled=false
             build_check.COND0543.Severity=Error
             build_check.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly
             build_check.COND0543.CustomSwitch=QWERTY
 
-            build_check.BLA.IsEnabled=false
             """);
 
         // OSX links /var into /private, which makes Path.GetTempPath() return "/var..." but Directory.GetCurrentDirectory return "/private/var...".
diff --git a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
index e0600fc657c..1dea240c976 100644
--- a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
@@ -24,7 +24,7 @@ internal sealed class TestAnalyzer : BuildAnalyzer
             #region BuildAnalyzer initialization
 
             public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0000", "TestRule", "TestDescription", "TestMessage",
-                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
             public override string FriendlyName => "MSBuild.TestAnalyzer";
 
