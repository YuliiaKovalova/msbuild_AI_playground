diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index c8caf38a35d..d1e8fb6f180 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -63,7 +63,13 @@ public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern2 running");
 
             // First error is a generic "we failed" message.
-            _logger.Errors.Skip(1).Select(i => i.Message).ShouldBe(new[] { "ERROR4", "ERROR1", "ERROR2" });
+            _logger.Errors.Skip(1).Select(i => i.Message).ShouldBe(new[] {
+                "ERROR4",
+                ResourceUtilities.FormatResourceStringStripCodeAndKeyword("SDKResolverReturnedNull", "MockResolverReturnsNull"),
+                "ERROR1",
+                "ERROR2",
+                "notfound"
+            });
             _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING4", "WARNING2" });
         }
 
@@ -780,7 +786,7 @@ public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverCont
             {
                 if (sdkReference.Name.Equals("notfound"))
                 {
-                    return null;
+                    return factory.IndicateFailure(new string[] { "notfound" });
                 }
                 if (resolverContext.State != null)
                 {
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index a357fdb195e..ac29a4170be 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -124,11 +124,17 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
                 // Warnings are already logged on success.
                 if (!result.Success)
                 {
-                    LogWarnings(loggingContext, sdkReferenceLocation, warnings);
+                    if (throwExceptions)
+                    {
+                        loggingContext.LogError(new BuildEventFileInfo(sdkReferenceLocation), "FailedToResolveSDK", sdk.Name);
+                    }
+
                     foreach (string error in errors)
                     {
                         loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, new BuildEventFileInfo(sdkReferenceLocation), message: error);
                     }
+
+                    LogWarnings(loggingContext, sdkReferenceLocation, warnings);
                 }
 
                 return result;
@@ -226,12 +232,13 @@ private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, Sd
                 loggingContext.LogError(new BuildEventFileInfo(sdkReferenceLocation), "FailedToResolveSDK", sdk.Name);
             }
 
-            LogWarnings(loggingContext, sdkReferenceLocation, warnings);
             foreach (string error in errors)
             {
                 loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);
             }
 
+            LogWarnings(loggingContext, sdkReferenceLocation, warnings);
+
             // No resolvers resolved the sdk.
             return new SdkResult(sdk, null, null);
         }
