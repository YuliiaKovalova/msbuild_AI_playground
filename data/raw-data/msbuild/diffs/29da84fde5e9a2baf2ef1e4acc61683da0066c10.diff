diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index d57364ef3ed..83d72755d9f 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -334,8 +334,6 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();
 
-            IList<string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();
-
             // look through all the attributes of the task element
             foreach (KeyValuePair<string, (string, ElementLocation)> parameter in parameters)
             {
@@ -344,7 +342,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
 
                 try
                 {
-                    success = SetTaskParameter(parameter.Key, parameter.Value.Item1, parameter.Value.Item2, requiredParameters.ContainsKey(parameter.Key), allowEmptyStringParameters.Contains(parameter.Key), out taskParameterSet);
+                    success = SetTaskParameter(parameter.Key, parameter.Value.Item1, parameter.Value.Item2, requiredParameters.ContainsKey(parameter.Key), out taskParameterSet);
                 }
                 catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
                 {
@@ -1009,7 +1007,6 @@ private bool SetTaskParameter
             string parameterValue,
             ElementLocation parameterLocation,
             bool isRequired,
-            bool allowEmptyString,
             out bool parameterSet
         )
         {
@@ -1067,7 +1064,6 @@ out bool parameterSet
                             parameterType,
                             parameterValue,
                             parameterLocation,
-                            allowEmptyString,
                             out parameterSet
                             );
                     }
@@ -1155,7 +1151,6 @@ private bool InitializeTaskScalarParameter
             Type parameterType,
             string parameterValue,
             ElementLocation parameterLocation,
-            bool allowEmptyString,
             out bool taskParameterSet
         )
         {
@@ -1167,16 +1162,18 @@ out bool taskParameterSet
             {
                 if (parameterType == typeof(ITaskItem))
                 {
-                    // We don't know how many items we're going to end up with, but we'll
+                    // We don't know how many items we're going to end up with, but we'll 
                     // keep adding them to this arraylist as we find them.
                     IList<TaskItem> finalTaskItems = _batchBucket.Expander.ExpandIntoTaskItemsLeaveEscaped(parameterValue, ExpanderOptions.ExpandAll, parameterLocation);
 
                     if (finalTaskItems.Count == 0)
                     {
                         success = true;
-                        if (allowEmptyString)
+                        var allowEmptyString = parameter.AllowEmptyString;
+                        string expanedParameterValue = _batchBucket.Expander.ExpandIntoStringLeaveEscaped(parameterValue, ExpanderOptions.ExpandAll, parameterLocation);
+                        if (allowEmptyString && string.IsNullOrEmpty(expanedParameterValue))
                         {
-                            success = SetTaskItemParameter(parameter, new TaskItem(parameterValue, parameterLocation.LocationString, allowEmptyString));
+                            success = SetTaskItemParameter(parameter, new TaskItem(expanedParameterValue, parameterLocation.File, allowEmptyString));
                             taskParameterSet = true;
                         }
                     }
@@ -1617,31 +1614,6 @@ private IDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute()
             return requiredParameters;
         }
 
-        /// <summary>
-        /// Finds all the task properties that are allowEmptyString.
-        /// Returns them in a list.
-        /// </summary>
-        /// <returns>Gets a list of properties which are allowEmptyString.</returns>
-        private IList<string> GetNamesOfPropertiesWithAllowEmptyStringAttribute()
-        {
-            ErrorUtilities.VerifyThrow(_taskFactoryWrapper != null, "Expected taskFactoryWrapper to not be null");
-            IList<string> allowEmptyStringParameters = null;
-
-            try
-            {
-                allowEmptyStringParameters = _taskFactoryWrapper.GetNamesOfPropertiesWithAllowEmptyStringAttribute;
-            }
-            catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
-            {
-                // Reflection related exception
-                _targetLoggingContext.LogError(new BuildEventFileInfo(_taskLocation), "AttributeTypeLoadError", _taskName, e.Message);
-
-                ProjectErrorUtilities.VerifyThrowInvalidProject(false, _taskLocation, "TaskDeclarationOrUsageError", _taskName);
-            }
-
-            return allowEmptyStringParameters;
-        }
-
         /// <summary>
         /// Show a message that cancel has not yet finished.
         /// </summary>
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 78607479320..cf1b18682c0 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+﻿﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -29,11 +29,6 @@ internal sealed class TaskFactoryWrapper
         /// </summary>
         private IDictionary<string, string> _namesOfPropertiesWithRequiredAttribute;
 
-        /// <summary>
-        /// Cache of names of allowEmptyString properties on this type
-        /// </summary>
-        private IList<string> _namesOfPropertiesWithAllowEmptyStringAttribute;
-
         /// <summary>
         /// Cache of names of output properties on this type
         /// </summary>
@@ -154,15 +149,6 @@ public IDictionary<string, string> FactoryIdentityParameters
             }
         }
 
-        public IList<string> GetNamesOfPropertiesWithAllowEmptyStringAttribute {
-            get
-            {
-                PopulatePropertyInfoCacheIfNecessary();
-
-                return _namesOfPropertiesWithAllowEmptyStringAttribute;
-            }
-        }
-
         #endregion
 
         #region Methods.
@@ -319,15 +305,6 @@ private void PopulatePropertyInfoCacheIfNecessary()
                         // we have a output attribute defined, keep a record of that
                         _namesOfPropertiesWithOutputAttribute[propertyInfo.Name] = String.Empty;
                     }
-
-                    if (propertyInfos[i].AllowEmptyString)
-                    {
-                        if (_namesOfPropertiesWithAllowEmptyStringAttribute == null)
-                        {
-                            _namesOfPropertiesWithAllowEmptyStringAttribute = new List<string>();
-                        }
-                        _namesOfPropertiesWithAllowEmptyStringAttribute.Add(propertyInfo.Name);
-                    }
                 }
 
                 _propertyInfoCache ??= ReadOnlyEmptyDictionary<string, TaskPropertyInfo>.Instance;
@@ -335,7 +312,6 @@ private void PopulatePropertyInfoCacheIfNecessary()
                 _namesOfPropertiesWithRequiredAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
                 _namesOfPropertiesWithOutputAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
                 _namesOfPropertiesWithAmbiguousMatches ??= ReadOnlyEmptyDictionary<string, string>.Instance;
-                _namesOfPropertiesWithAllowEmptyStringAttribute ??= new List<string>();
             }
         }
         #endregion
