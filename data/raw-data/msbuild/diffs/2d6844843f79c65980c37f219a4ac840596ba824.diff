diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 28091aa5371..5c956a4f58f 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -753,25 +753,19 @@ static async Task SendDataCoreAsync(Task _, object state)
                             // clear the buffer but keep the underlying capacity to avoid reallocations
                             writeStream.SetLength(0);
 
-                            ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
+                            NodePacketType packetType = packet.Type;
+                            ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream, PacketTypeExtensions.PacketVersion);
                             try
                             {
-                                NodePacketType packetType = packet.Type;
-                                bool supportsVersioning = PacketVersionManager.SupportsVersioning(packetType);
-
-                                // Write packet type with extended header flag if versioned
-                                byte rawPackageType = supportsVersioning ? PacketTypeExtensions.CreateExtendedHeaderType(packetType) : (byte)packetType;
+                                // Write packet type with extended header.
+                                byte rawPackageType = PacketTypeExtensions.CreateExtendedHeaderType(packetType);
                                 writeStream.WriteByte(rawPackageType);
 
                                 // Pad for the packet length
                                 WriteInt32(writeStream, 0);
 
-                                // If versioned, write extended header with version
-                                if (supportsVersioning)
-                                {
-                                    byte currentVersion = PacketVersionManager.GetCurrentVersion(packetType);
-                                    PacketTypeExtensions.WriteVersion(writeStream, currentVersion);
-                                }
+                                // Write extended header with version
+                                PacketTypeExtensions.WriteVersion(writeStream, PacketTypeExtensions.PacketVersion);
 
                                 packet.Translate(writeTranslator);
 
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index c302b537038..29e90521789 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -35,9 +35,9 @@ internal static class BinaryTranslator
         /// Returns a read-only serializer.
         /// </summary>
         /// <returns>The serializer.</returns>
-        internal static ITranslator GetReadTranslator(Stream stream, BinaryReaderFactory buffer)
+        internal static ITranslator GetReadTranslator(Stream stream, BinaryReaderFactory buffer, byte packetVersion = 0)
         {
-            return new BinaryReadTranslator(stream, buffer);
+            return new BinaryReadTranslator(stream, buffer, packetVersion);
         }
 #nullable disable
 
@@ -45,10 +45,11 @@ internal static ITranslator GetReadTranslator(Stream stream, BinaryReaderFactory
         /// Returns a write-only serializer.
         /// </summary>
         /// <param name="stream">The stream containing data to serialize.</param>
+        /// <param name="packetVersion">The packet version associated with the stream.</param>
         /// <returns>The serializer.</returns>
-        internal static ITranslator GetWriteTranslator(Stream stream)
+        internal static ITranslator GetWriteTranslator(Stream stream, byte packetVersion = 0)
         {
-            return new BinaryWriteTranslator(stream);
+            return new BinaryWriteTranslator(stream, packetVersion);
         }
 
         /// <summary>
@@ -56,11 +57,6 @@ internal static ITranslator GetWriteTranslator(Stream stream)
         /// </summary>
         private class BinaryReadTranslator : ITranslator
         {
-            /// <summary>
-            /// The stream used as a source or destination for data.
-            /// </summary>
-            private Stream _packetStream;
-
             /// <summary>
             /// The binary reader used in read mode.
             /// </summary>
@@ -70,10 +66,10 @@ private class BinaryReadTranslator : ITranslator
             /// <summary>
             /// Constructs a serializer from the specified stream, operating in the designated mode.
             /// </summary>
-            public BinaryReadTranslator(Stream packetStream, BinaryReaderFactory buffer)
+            public BinaryReadTranslator(Stream packetStream, BinaryReaderFactory buffer, byte packetVersion = 0)
             {
-                _packetStream = packetStream;
                 _reader = buffer.Create(packetStream);
+                PacketVersion = packetVersion;
             }
 #nullable disable
 
@@ -115,6 +111,8 @@ public TranslationDirection Mode
                 { return TranslationDirection.ReadFromStream; }
             }
 
+            public byte PacketVersion { get; }
+
             /// <summary>
             /// Translates a boolean.
             /// </summary>
@@ -796,11 +794,6 @@ public bool TranslateNullable<T>(T value)
         /// </summary>
         private class BinaryWriteTranslator : ITranslator
         {
-            /// <summary>
-            /// The stream used as a source or destination for data.
-            /// </summary>
-            private Stream _packetStream;
-
             /// <summary>
             /// The binary writer used in write mode.
             /// </summary>
@@ -810,10 +803,11 @@ private class BinaryWriteTranslator : ITranslator
             /// Constructs a serializer from the specified stream, operating in the designated mode.
             /// </summary>
             /// <param name="packetStream">The stream serving as the source or destination of data.</param>
-            public BinaryWriteTranslator(Stream packetStream)
+            /// <param name="packetVersion">The packet version associated with the stream.</param>
+            public BinaryWriteTranslator(Stream packetStream, byte packetVersion)
             {
-                _packetStream = packetStream;
                 _writer = new BinaryWriter(packetStream);
+                PacketVersion = packetVersion;
             }
 
             /// <summary>
@@ -854,6 +848,8 @@ public TranslationDirection Mode
                 { return TranslationDirection.WriteToStream; }
             }
 
+            public byte PacketVersion { get; }
+
             /// <summary>
             /// Translates a boolean.
             /// </summary>
diff --git a/src/Framework/ITranslator.cs b/src/Framework/ITranslator.cs
index 5f6655cef36..7aa3fb44e92 100644
--- a/src/Framework/ITranslator.cs
+++ b/src/Framework/ITranslator.cs
@@ -66,6 +66,11 @@ internal enum TranslationDirection
     /// </remarks>
     internal interface ITranslator : IDisposable
     {
+        /// <summary>
+        /// The packet version associated with the stream.
+        /// </summary>
+        byte PacketVersion { get; }
+
         /// <summary>
         /// Returns the current serialization mode.
         /// </summary>
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index ec7a3884199..a5eb06348bc 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -249,6 +249,8 @@ NodePacketType Type
 
     internal static class PacketTypeExtensions
     {
+        public const byte PacketVersion = 1;
+
         private const byte ExtendedHeaderFlag = 0x40; // Bit 6 indicates extended header with version
 
         /// <summary>
@@ -272,17 +274,4 @@ internal static class PacketTypeExtensions
         // Write extended header with version
         public static void WriteVersion(Stream stream, byte version) => stream.WriteByte(version);
     }
-
-    internal static class PacketVersionManager
-    {
-        private static readonly Dictionary<NodePacketType, byte> _currentPacketVersions = new Dictionary<NodePacketType, byte>
-        {
-            { NodePacketType.TaskHostConfiguration, 1 },
-        };
-
-        // Get current version for a packet type
-        public static byte GetCurrentVersion(NodePacketType type) => _currentPacketVersions.TryGetValue(type, out byte version) ? version : (byte)1;
-
-        public static bool SupportsVersioning(NodePacketType type) => _currentPacketVersions.ContainsKey(type);
-    }
 }
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index a242b820c45..d3687958185 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -601,7 +601,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                             bool hasExtendedHeader = PacketTypeExtensions.HasExtendedHeader(rawType);
                             NodePacketType packetType = PacketTypeExtensions.HasExtendedHeader(rawType) ? PacketTypeExtensions.GetNodePacketType(rawType) : (NodePacketType)rawType;
 
-                            byte version;
+                            byte version = 0;
                             if (hasExtendedHeader)
                             {
                                 version = PacketTypeExtensions.ReadVersion(localReadPipe);
@@ -609,7 +609,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
 
                             try
                             {
-                                _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer));
+                                _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer, version));
                             }
                             catch (Exception e)
                             {
