diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 3bb850e03c1..693912475d0 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -229,7 +229,7 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
                 CommunicationsUtilities.Trace("Build finished.");
             }
 
-            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode, Framework.NativeMethods.StreamHandleType.StdOut);
+            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode);
 
             return _exitResult;
         }
@@ -373,7 +373,7 @@ private void ReadPacketsLoop(CancellationToken cancellationToken)
 
         private void ConfigureAndQueryConsoleProperties()
         {
-            (var acceptAnsiColorCodes, var outputIsScreen, _originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethodsShared.StreamHandleType.StdOut);
+            (var acceptAnsiColorCodes, var outputIsScreen, _originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
             int bufferWidth = QueryConsoleBufferWidth();
             ConsoleColor backgroundColor = QueryConsoleBackgroundColor();
 
diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
index 821d0309eff..b895ab67f64 100644
--- a/src/Build/Logging/SimpleErrorLogger.cs
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -49,29 +49,25 @@ public void Initialize(IEventSource eventSource, int nodeCount)
         private void HandleErrorEvent(object sender, BuildErrorEventArgs e)
         {
             HasLoggedErrors = true;
-            if (acceptAnsiColorCodes)
-            {
-                Console.Error.Write("\x1b[31;1m");
-                Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));
-                Console.Error.WriteLine("\x1b[m");
-            }
-            else
-            {
-                Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));
-            }
+            LogErrorEvent(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true), "\x1b[31;1m");
         }
 
         private void HandleWarningEvent(object sender, BuildWarningEventArgs e)
+        {
+            LogErrorEvent(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true), "\x1b[33;1m");
+        }
+
+        private void LogErrorEvent(string s, string color)
         {
             if (acceptAnsiColorCodes)
             {
-                Console.Error.Write("\x1b[33;1m");
-                Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));
+                Console.Error.Write(color);
+                Console.Error.Write(s);
                 Console.Error.WriteLine("\x1b[m");
             }
             else
             {
-                Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));
+                Console.Error.Write(s);
             }
         }
 
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 1eb088d3d58..e31b42aa0e4 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1488,7 +1488,7 @@ internal static void VerifyThrowWin32Result(int result)
     }
 
 #if !CLR2COMPATIBILITY
-    internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes(StreamHandleType handleType)
+    internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes(StreamHandleType handleType = StreamHandleType.StdOut)
     {
         if (Console.IsOutputRedirected)
         {
@@ -1544,7 +1544,7 @@ internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalC
         return (acceptAnsiColorCodes, outputIsScreen, originalConsoleMode);
     }
 
-    internal static void RestoreConsoleMode(uint? originalConsoleMode, StreamHandleType handleType)
+    internal static void RestoreConsoleMode(uint? originalConsoleMode, StreamHandleType handleType = StreamHandleType.StdOut)
     {
         if (IsWindows && originalConsoleMode is not null)
         {
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 4a20820163a..189ab83faa3 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1002,7 +1002,7 @@ public static ExitType Execute(
                 // Wait for any pending cancel, so that we get any remaining messages
                 s_cancelComplete.WaitOne();
 
-                NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode, NativeMethodsShared.StreamHandleType.StdOut);
+                NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode);
 
 #if FEATURE_GET_COMMANDLINE
                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);
@@ -2698,7 +2698,7 @@ private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches comma
 
             static bool DoesEnvironmentSupportTerminalLogger()
             {
-                (var acceptAnsiColorCodes, var outputIsScreen, s_originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethodsShared.StreamHandleType.StdOut);
+                (var acceptAnsiColorCodes, var outputIsScreen, s_originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
 
                 if (!outputIsScreen)
                 {
