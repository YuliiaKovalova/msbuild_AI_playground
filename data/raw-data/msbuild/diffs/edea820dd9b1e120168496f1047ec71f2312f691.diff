diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index c3666ef4d10..f4c0dc9b02d 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -53,7 +53,6 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
         private int _count;
         private int _freeList;
         private int _freeCount;
-        private int _version;
         private IEqualityComparer<string> _comparer;
         private bool _readOnly;
 
@@ -416,7 +415,7 @@ public virtual void GetObjectData(SerializationInfo info, StreamingContext conte
                 throw new ArgumentNullException(nameof(info));
             }
 
-            info.AddValue(VersionName, _version); // need to serialize version to avoid problems with serializing while enumerating
+            info.AddValue(VersionName, 0); // serialize dummy version
             info.AddValue(ComparerName, _comparer, typeof(IEqualityComparer<string>));
             info.AddValue(CapacityName, _buckets == null ? 0 : _buckets.Length);
 
@@ -464,7 +463,7 @@ public virtual void OnDeserialization(object sender)
                 _buckets = null;
             }
 
-            _version = siInfo.GetInt32(VersionName);
+            _ = siInfo.GetInt32(VersionName);
             _ = HashHelpers.SerializationInfoTable.Remove(this);
         }
 
@@ -541,7 +540,6 @@ public void TrimExcess()
             }
 
             int oldCount = _count;
-            _version++;
             Initialize(newSize);
             Entry[] entries = _entries;
             int count = 0;
@@ -636,7 +634,6 @@ public void AddOrReplace(T value)
                 entry.Next = bucket - 1; // Value in _buckets is 1-based
                 entry.Value = value;
                 bucket = index + 1;
-                _version++;
             }
 
             return;
@@ -737,7 +734,7 @@ public struct Enumerator : IEnumerator<T>
             internal Enumerator(RetrievableEntryHashSet<T> hashSet)
             {
                 _hashSet = hashSet;
-                _version = hashSet._version;
+                _version = GetVersion();
                 _index = 0;
                 Current = default;
             }
@@ -759,7 +756,7 @@ object IEnumerator.Current
 
             public bool MoveNext()
             {
-                if (_version != _hashSet._version)
+                if (_version != GetVersion())
                 {
                     throw new InvalidOperationException();
                 }
@@ -785,7 +782,7 @@ public void Dispose() { }
 
             void IEnumerator.Reset()
             {
-                if (_version != _hashSet._version)
+                if (_version != GetVersion())
                 {
                     throw new InvalidOperationException();
                 }
@@ -793,6 +790,16 @@ void IEnumerator.Reset()
                 _index = 0;
                 Current = default;
             }
+
+            private int GetVersion()
+            {
+                // As a check on concurrent modifications, check that neither count
+                // nor freeCount change during enumeration. TrimExcess would change only
+                // the latter.
+                // This avoids storing a version field on every collection object, while
+                // catching almost as many cases.
+                return _hashSet._count + _hashSet._freeCount << 16;
+            }
         }
     }
 }
