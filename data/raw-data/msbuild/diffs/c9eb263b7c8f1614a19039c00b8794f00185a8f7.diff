diff --git a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
index 953ee077dce..e8a24f61ab3 100644
--- a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
+++ b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
@@ -58,7 +58,7 @@ public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectP
             _toolsVersion = MSBuildConstants.CurrentToolsVersion;
             _globalProperties = globalProperties;
         }
-        public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectPropertyInstance> globalProperties, string previousPlatform, string previousPlatformLookupTable)
+        public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectPropertyInstance> globalProperties, string previousPlatform, string previousPlatformLookupTable, bool isSetPlatformHardCoded)
         {
             ErrorUtilities.VerifyThrowArgumentLength(projectFullPath, nameof(projectFullPath));
             ErrorUtilities.VerifyThrowArgumentNull(globalProperties, nameof(globalProperties));
@@ -68,6 +68,7 @@ public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectP
             _globalProperties = globalProperties;
             PreviousPlatform = previousPlatform;
             PreviousPlatformLookupTable = previousPlatformLookupTable;
+            IsSetPlatformHardCoded = isSetPlatformHardCoded;
         }
 
         public ConfigurationMetadata(ITranslator translator)
@@ -95,6 +96,7 @@ public ConfigurationMetadata(ITranslator translator)
         public string PreviousPlatform { get; } = "";
 
         public string PreviousPlatformLookupTable { get; } = "";
+        public bool IsSetPlatformHardCoded { get; } = false;
 
         private PropertyDictionary<ProjectPropertyInstance> _globalProperties;
 
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index a7245481618..1eda6c45c61 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -49,6 +49,8 @@ internal class GraphBuilder
         private readonly ProjectGraph.ProjectInstanceFactoryFunc _projectInstanceFactory;
         private IReadOnlyDictionary<string, IReadOnlyCollection<string>> _solutionDependencies;
 
+        public bool IsDynamicPlatformNegotiationEnabaled = false;
+
         public GraphBuilder(
             IEnumerable<ProjectGraphEntryPoint> entryPoints,
             ProjectCollection projectCollection,
@@ -496,24 +498,30 @@ private void DetectCycles(
             }
         }
 
-        private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata, bool enableDynamicPlatformResolution)
+        private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
         {
             // TODO: ProjectInstance just converts the dictionary back to a PropertyDictionary, so find a way to directly provide it.
             var globalProperties = configurationMetadata.GlobalProperties.ToDictionary();
             ProjectGraphNode graphNode;
             ProjectInstance projectInstance;
-           
+            var DynamiclySetPlatform = IsDynamicPlatformNegotiationEnabaled && configurationMetadata.IsSetPlatformHardCoded;
+
             projectInstance = _projectInstanceFactory(
                                 configurationMetadata.ProjectFullPath,
-                                enableDynamicPlatformResolution ? null : globalProperties, // Platform negotiation requires an evaluation with no global properties first
+                                DynamiclySetPlatform ? null : globalProperties, // Platform negotiation requires an evaluation with no global properties first
                                 _projectCollection);
 
+            if (ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)))
+            {
+                IsDynamicPlatformNegotiationEnabaled = true;
+            }
+
             if (projectInstance == null)
             {
                 throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
             }
 
-            if (enableDynamicPlatformResolution)
+            if (DynamiclySetPlatform)
             {
                 var selectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformMetadataName), projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), configurationMetadata.PreviousPlatformLookupTable, projectInstance.FullPath, configurationMetadata.PreviousPlatform);
 
@@ -533,7 +541,7 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata,
 
             graphNode = new ProjectGraphNode(projectInstance);
 
-            var referenceInfos = ParseReferences(graphNode, ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)));
+            var referenceInfos = ParseReferences(graphNode);
 
             return new ParsedProject(configurationMetadata, graphNode, referenceInfos);
         }
@@ -547,7 +555,7 @@ private Dictionary<ConfigurationMetadata, ParsedProject> FindGraphNodes()
         {
             foreach (ConfigurationMetadata projectToEvaluate in _entryPointConfigurationMetadata)
             {
-                SubmitProjectForParsing(projectToEvaluate, false);
+                SubmitProjectForParsing(projectToEvaluate);
                                 /*todo: fix the following double check-then-act concurrency bug: one thread can pass the two checks, loose context,
                              meanwhile another thread passes the same checks with the same data and inserts its reference. The initial thread regains context
                              and duplicates the information, leading to wasted work
@@ -559,12 +567,12 @@ meanwhile another thread passes the same checks with the same data and inserts i
             return _graphWorkSet.CompletedWork;
         }
 
-        private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate, bool enableDynamicPlatformResolution)
+        private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate)
         {
-            _graphWorkSet.AddWork(projectToEvaluate, () => ParseProject(projectToEvaluate, enableDynamicPlatformResolution));
+            _graphWorkSet.AddWork(projectToEvaluate, () => ParseProject(projectToEvaluate));
         }
 
-        private List<ProjectInterpretation.ReferenceInfo> ParseReferences(ProjectGraphNode parsedProject, bool enableDynamicPlatformResolution)
+        private List<ProjectInterpretation.ReferenceInfo> ParseReferences(ProjectGraphNode parsedProject)
         {
             var referenceInfos = new List<ProjectInterpretation.ReferenceInfo>();
 
@@ -579,14 +587,7 @@ private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate, bo
                         ));
                 }
 
-                if (!referenceInfo.ProjectReferenceItem.HasMetadata("SetPlatform"))
-                {
-                    SubmitProjectForParsing(referenceInfo.ReferenceConfiguration, enableDynamicPlatformResolution);
-                }
-                else
-                {
-                    SubmitProjectForParsing(referenceInfo.ReferenceConfiguration, false);
-                }
+                SubmitProjectForParsing(referenceInfo.ReferenceConfiguration);
 
                 referenceInfos.Add(referenceInfo);
             }
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 86ee967518c..a838844f160 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -107,7 +107,7 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
                     requesterPlatformLookupTable = requesterInstance.GetPropertyValue("PlatformLookupTable");
                 }
 
-                var referenceConfig = new ConfigurationMetadata(projectReferenceFullPath, referenceGlobalProperties, requesterPlatform, requesterPlatformLookupTable);
+                var referenceConfig = new ConfigurationMetadata(projectReferenceFullPath, referenceGlobalProperties, requesterPlatform, requesterPlatformLookupTable, projectReferenceItem.HasMetadata("SetPlatform"));
 
                 yield return new ReferenceInfo(referenceConfig, projectReferenceItem);
             }
