diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index ec4dd997eb7..cd8ee90b582 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -2094,6 +2094,19 @@ public void Remove()
             Assert.Equal("a", items[0].EvaluatedInclude);
         }
 
+        [Fact]
+        public void RemoveAllMatchingItems()
+        {
+            IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(
+                "<i Include='a;b' />" +
+                "<i Include='a;b' />" +
+                "<i Remove='b;c' />"
+                );
+
+            Assert.Equal(2, items.Count);
+            Assert.Equal(@"a;a", string.Join(";", items.Select(i => i.EvaluatedInclude)));
+        }
+
         [Fact]
         public void RemoveGlob()
         {
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index e666b97f94e..8e32077045d 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -85,6 +85,11 @@ public override bool IsMatch(string itemToMatch)
                 return ReferencedItems.Any(v => v.ItemAsValueFragment.IsMatch(itemToMatch));
             }
 
+            public override IEnumerable<string> GetReferencedItems()
+            {
+                return ReferencedItems.Select(v => v.ItemAsValueFragment.TextFragment);
+            }
+
             public override IMSBuildGlob ToMSBuildGlob()
             {
                 return MsBuildGlob;
@@ -415,6 +420,16 @@ public virtual bool IsMatch(string itemToMatch)
             return FileMatcher.IsMatch(itemToMatch);
         }
 
+        public virtual bool IsMatchNormalized(string normalizedItemToMatch)
+        {
+            return FileMatcher.IsMatchNormalized(normalizedItemToMatch);
+        }
+
+        public virtual IEnumerable<string> GetReferencedItems()
+        {
+            yield return TextFragment;
+        }
+
         public virtual IMSBuildGlob ToMSBuildGlob()
         {
             return MsBuildGlob;
@@ -446,6 +461,12 @@ public GlobFragment(string textFragment, string projectDirectory)
         {
         }
 
+        public override IEnumerable<string> GetReferencedItems()
+        {
+            // This fragment cannot efficiently enumerate its referenced items.
+            return null;
+        }
+
         /// <summary>
         /// True if TextFragment starts with /**/ or a variation thereof with backslashes.
         /// </summary>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
index 66f927b4025..40ee16b1d88 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
@@ -9,7 +9,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
     {
         internal interface IItemOperation
         {
-            void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore);
+            void Apply(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index a351b02dbbe..71b699a9f36 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -37,7 +37,7 @@ public IncludeOperation(IncludeOperationBuilder builder, LazyItemEvaluator<P, I,
                 _metadata = builder.Metadata.ToImmutable();
             }
 
-            protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected override ImmutableList<I> SelectItems(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 var itemsToAdd = ImmutableList.CreateBuilder<I>();
 
@@ -155,7 +155,7 @@ protected override void MutateItems(ImmutableList<I> items)
                 DecorateItemsWithMetadata(items.Select(i => new ItemBatchingContext(i)), _metadata);
             }
 
-            protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
+            protected override void SaveItems(ImmutableList<I> items, OrderedItemDataCollection.Builder listBuilder)
             {
                 foreach (var item in items)
                 {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index fc77d17b488..288d11ce9b9 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -51,7 +51,7 @@ protected LazyItemOperation(OperationBuilder builder, LazyItemEvaluator<P, I, M,
 
             protected EngineFileUtilities EngineFileUtilities => _lazyEvaluator.EngineFileUtilities;
 
-            public void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            public void Apply(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 MSBuildEventSource.Log.ApplyLazyItemOperationsStart(_itemElement.ItemType);
                 using (_lazyEvaluator._evaluationProfiler.TrackElement(_itemElement))
@@ -61,7 +61,7 @@ public void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<
                 MSBuildEventSource.Log.ApplyLazyItemOperationsStop(_itemElement.ItemType);
             }
 
-            protected virtual void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected virtual void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 var items = SelectItems(listBuilder, globsToIgnore);
                 MutateItems(items);
@@ -71,7 +71,7 @@ protected virtual void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, Im
             /// <summary>
             /// Produce the items to operate on. For example, create new ones or select existing ones
             /// </summary>
-            protected virtual ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected virtual ImmutableList<I> SelectItems(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 return listBuilder.Select(itemData => itemData.Item)
                                   .ToImmutableList();
@@ -80,7 +80,7 @@ protected virtual ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder l
             // todo Refactoring: MutateItems should clone each item before mutation. See https://github.com/Microsoft/msbuild/issues/2328
             protected virtual void MutateItems(ImmutableList<I> items) { }
 
-            protected virtual void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder) { }
+            protected virtual void SaveItems(ImmutableList<I> items, OrderedItemDataCollection.Builder listBuilder) { }
 
             private IList<I> GetReferencedItems(string itemType, ImmutableHashSet<string> globsToIgnore)
             {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 5a2d19ad7b2..3ca5cd9560b 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -3,6 +3,7 @@
 
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
+using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
 
@@ -35,10 +36,9 @@ public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M
             /// Apply the Remove operation.
             /// </summary>
             /// <remarks>
-            /// This operation is mostly implemented in terms of the default <see cref="LazyItemOperation.ApplyImpl(ImmutableList{ItemData}.Builder, ImmutableHashSet{string})"/>.
-            /// This override exists to apply the removing-everything short-circuit.
+            /// This override exists to apply the removing-everything short-circuit and to avoid creating a redundant list of items to remove.
             /// </remarks>
-            protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 if (_matchOnMetadata.IsEmpty && ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType) && _conditionResult)
                 {
@@ -48,20 +48,27 @@ protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, I
                     return;
                 }
 
-                base.ApplyImpl(listBuilder, globsToIgnore);
-            }
-
-            // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
-            protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
-            {
-                var items = ImmutableHashSet.CreateBuilder<I>();
-                foreach (ItemData item in listBuilder)
+                // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
+                if (_matchOnMetadata.IsEmpty)
                 {
-                    if (_matchOnMetadata.IsEmpty ? _itemSpec.MatchesItem(item.Item) : MatchesItemOnMetadata(item.Item))
-                        items.Add(item.Item);
+                    listBuilder.RemoveMatchingItems(_itemSpec);
+                }
+                else
+                {
+                    HashSet<I> items = null;
+                    foreach (ItemData item in listBuilder)
+                    {
+                        if (MatchesItemOnMetadata(item.Item))
+                        {
+                            items ??= new HashSet<I>();
+                            items.Add(item.Item);
+                        }
+                    }
+                    if (items != null)
+                    {
+                        listBuilder.RemoveAll(items);
+                    }
                 }
-
-                return items.ToImmutableList();
             }
 
             private bool MatchesItemOnMetadata(I item)
@@ -69,16 +76,6 @@ private bool MatchesItemOnMetadata(I item)
                 return _metadataSet.Contains(_matchOnMetadata.Select(m => item.GetMetadataValue(m)));
             }
 
-            protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
-            {
-                if (!_conditionResult)
-                {
-                    return;
-                }
-
-                listBuilder.RemoveAll(itemData => items.Contains(itemData.Item));
-            }
-
             public ImmutableHashSet<string>.Builder GetRemovedGlobs()
             {
                 var builder = ImmutableHashSet.CreateBuilder<string>();
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index 5423bcf0286..35b2ffa899f 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -39,7 +39,7 @@ public MatchResult(bool isMatch, Dictionary<string, I> capturedItemsFromReferenc
 
             delegate MatchResult ItemSpecMatchesItem(ItemSpec<P, I> itemSpec, I itemToMatch);
 
-            protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 if (!_conditionResult)
                 {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index b6188e08c4e..0919a76d01e 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -152,7 +152,7 @@ public ItemData Clone(IItemFactory<I, I> itemFactory, ProjectItemElement initial
         private class MemoizedOperation : IItemOperation
         {
             public LazyItemOperation Operation { get; }
-            private Dictionary<ISet<string>, ImmutableList<ItemData>> _cache;
+            private Dictionary<ISet<string>, OrderedItemDataCollection> _cache;
 
             private bool _isReferenced;
 #if DEBUG
@@ -164,7 +164,7 @@ public MemoizedOperation(LazyItemOperation operation)
                 Operation = operation;
             }
 
-            public void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            public void Apply(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
 #if DEBUG
                 CheckInvariant();
@@ -200,7 +200,7 @@ private void CheckInvariant()
             }
 #endif
 
-            public bool TryGetFromCache(ISet<string> globsToIgnore, out ImmutableList<ItemData> items)
+            public bool TryGetFromCache(ISet<string> globsToIgnore, out OrderedItemDataCollection items)
             {
                 if (_cache != null)
                 {
@@ -219,17 +219,299 @@ public void MarkAsReferenced()
                 _isReferenced = true;
             }
 
-            private void AddItemsToCache(ImmutableHashSet<string> globsToIgnore, ImmutableList<ItemData> items)
+            private void AddItemsToCache(ImmutableHashSet<string> globsToIgnore, OrderedItemDataCollection items)
             {
                 if (_cache == null)
                 {
-                    _cache = new Dictionary<ISet<string>, ImmutableList<ItemData>>();
+                    _cache = new Dictionary<ISet<string>, OrderedItemDataCollection>();
                 }
 
                 _cache[globsToIgnore] = items;
             }
         }
 
+        /// <summary>
+        /// A collection of ItemData that maintains insertion order and internally optimizes some access patterns, e.g. bulk removal
+        /// based on normalized item values.
+        /// </summary>
+        internal sealed class OrderedItemDataCollection
+        {
+            #region Inner types
+
+            /// <summary>
+            /// An efficient multi-value wrapper holding one or more versioned items.
+            /// </summary>
+            internal struct DictionaryValue : IEnumerable<I>
+            {
+                /// <summary>
+                /// The version of the containing collection at the time this value was last changed.
+                /// </summary>
+                private int _version;
+
+                /// <summary>
+                /// Holds one value or a list of values.
+                /// </summary>
+                private object _value;
+
+                public DictionaryValue(int version, I item)
+                {
+                    _version = version;
+                    _value = item;
+                }
+
+                public void Add(int version, I item)
+                {
+                    if (_value is List<I> list)
+                    {
+                        if (version != _version)
+                        {
+                            list = new List<I>(list);
+                        }
+                        list.Add(item);
+                    }
+                    else
+                    {
+                        list = new List<I>
+                        {
+                            (I)_value,
+                            item
+                        };
+                    }
+                    _version = version;
+                    _value = list;
+                }
+
+                public IEnumerator<I> GetEnumerator()
+                {
+                    if (_value is I item)
+                    {
+                        yield return item;
+                    }
+                    else if (_value is IEnumerable<I> enumerable)
+                    {
+                        foreach (I enumerableItem in enumerable)
+                        {
+                            yield return enumerableItem;
+                        }
+                    }
+                }
+
+                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
+            }
+
+            /// <summary>
+            /// A mutable and enumerable version of <see cref="OrderedItemDataCollection"/>.
+            /// </summary>
+            internal sealed class Builder : IEnumerable<ItemData>
+            {
+                /// <summary>
+                /// The current version of the collection.
+                /// </summary>
+                private int _version;
+
+                /// <summary>
+                /// The list of items in the collection. Defines the enumeration order.
+                /// </summary>
+                private ImmutableList<ItemData>.Builder _listBuilder;
+
+                /// <summary>
+                /// A dictionary of items keyed by their normalized value.
+                /// </summary>
+                private ImmutableDictionary<string, DictionaryValue>.Builder _dictionaryBuilder;
+
+                internal Builder(int version, ImmutableList<ItemData>.Builder listBuilder, ImmutableDictionary<string, DictionaryValue>.Builder dictionaryBuilder)
+                {
+                    _version = version;
+                    _listBuilder = listBuilder;
+                    _dictionaryBuilder = dictionaryBuilder;
+                }
+
+                #region IEnumerable implementation
+
+                public IEnumerator<ItemData> GetEnumerator() => _listBuilder.GetEnumerator();
+
+                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => _listBuilder.GetEnumerator();
+
+                #endregion
+
+                public int Count => _listBuilder.Count;
+
+                public ItemData this[int index]
+                {
+                    get { return _listBuilder[index]; }
+                    set
+                    {
+                        _listBuilder[index] = value;
+                        // This is a rare operation, don't bother updating the dictionary for now. It will be recreated as needed.
+                        _dictionaryBuilder = null;
+                    }
+                }
+
+                public void Add(ItemData data)
+                {
+                    _listBuilder.Add(data);
+                    if (_dictionaryBuilder != null)
+                    {
+                        AddToDictionary(data.Item);
+                    }
+                }
+
+                public void Clear()
+                {
+                    _listBuilder.Clear();
+                    _dictionaryBuilder?.Clear();
+                }
+
+                public void RemoveAll(ICollection<I> itemsToRemove)
+                {
+                    _listBuilder.RemoveAll(item => itemsToRemove.Contains(item.Item));
+                    // This is a rare operation, don't bother updating the dictionary for now. It will be recreated as needed.
+                    _dictionaryBuilder = null;
+                }
+
+                /// <summary>
+                /// Removes items from the collection that match the given ItemSpec.
+                /// </summary>
+                /// <remarks>
+                /// If <see cref="_dictionaryBuilder"/> does not exist yet, it is created in this method to avoid the cost of comparing each item
+                /// being removed with each item already in the collection. The dictionary is kept in sync with the <see cref="_listBuilder"/>
+                /// as long as practical. If an operation would result in too much of such work, the dictionary is simply dropped and recreated
+                /// later if/when needed.
+                /// </remarks>
+                public void RemoveMatchingItems(ItemSpec<P, I> itemSpec)
+                {
+                    HashSet<I> items = null;
+                    var dictionaryBuilder = GetOrCreateDictionaryBuilder();
+                    foreach (var fragment in itemSpec.Fragments)
+                    {
+                        IEnumerable<string> referencedItems = fragment.GetReferencedItems();
+                        if (referencedItems != null)
+                        {
+                            // The fragment can enumerate its referenced items, we can do dictionary lookups.
+                            foreach (var spec in referencedItems)
+                            {
+                                string key = FileUtilities.NormalizePathForComparisonNoThrow(spec, fragment.ProjectDirectory);
+                                if (dictionaryBuilder.TryGetValue(key, out var multiValue))
+                                {
+                                    items ??= new HashSet<I>();
+                                    foreach (I item in multiValue)
+                                    {
+                                        items.Add(item);
+                                    }
+                                    dictionaryBuilder.Remove(key);
+                                }
+                            }
+                        }
+                        else
+                        {
+                            // The fragment cannot enumerate its referenced items. Iterate over the dictionary and test each item.
+                            List<string> keysToRemove = null;
+                            foreach (var kvp in dictionaryBuilder)
+                            {
+                                if (fragment.IsMatchNormalized(kvp.Key))
+                                {
+                                    items ??= new HashSet<I>();
+                                    foreach (I item in kvp.Value)
+                                    {
+                                        items.Add(item);
+                                    }
+                                    keysToRemove ??= new List<string>();
+                                    keysToRemove.Add(kvp.Key);
+                                }
+                            }
+
+                            if (keysToRemove != null)
+                            {
+                                foreach (string key in keysToRemove)
+                                {
+                                    dictionaryBuilder.Remove(key);
+                                }
+                            }
+                        }
+                    }
+
+                    // Finish by removing items from the list.
+                    if (items != null)
+                    {
+                        _listBuilder.RemoveAll(item => items.Contains(item.Item));
+                    }
+                }
+
+                /// <summary>
+                /// Creates an immutable view of this collection.
+                /// </summary>
+                public OrderedItemDataCollection ToImmutable()
+                {
+                    return new OrderedItemDataCollection(_version, _listBuilder.ToImmutable(), _dictionaryBuilder?.ToImmutable());
+                }
+
+                private IDictionary<string, DictionaryValue> GetOrCreateDictionaryBuilder()
+                {
+                    if (_dictionaryBuilder == null)
+                    {
+                        _dictionaryBuilder = ImmutableDictionary.CreateBuilder<string, DictionaryValue>(StringComparer.OrdinalIgnoreCase);
+                        foreach (ItemData item in _listBuilder)
+                        {
+                            AddToDictionary(item.Item);
+                        }
+                    }
+                    return _dictionaryBuilder;
+                }
+
+                private void AddToDictionary(I item)
+                {
+                    string key = FileUtilities.NormalizePathForComparisonNoThrow(item.EvaluatedInclude, item.ProjectDirectory);
+
+                    if (!_dictionaryBuilder.TryGetValue(key, out var dictionaryValue))
+                    {
+                        dictionaryValue = new DictionaryValue(_version, item);
+                    }
+                    dictionaryValue.Add(_version, item);
+                    _dictionaryBuilder[key] = dictionaryValue;
+                }
+            }
+
+            #endregion
+
+            /// <summary>
+            /// The current version of the collection.
+            /// </summary>
+            private int _version;
+
+            /// <summary>
+            /// The list of items in the collection. Defines the enumeration order.
+            /// </summary>
+            private ImmutableList<ItemData> _list;
+
+            /// <summary>
+            /// A dictionary of items keyed by their normalized value.
+            /// </summary>
+            private ImmutableDictionary<string, DictionaryValue> _dictionary;
+
+            private OrderedItemDataCollection(int version, ImmutableList<ItemData> list, ImmutableDictionary<string, DictionaryValue> dictionary)
+            {
+                _version = version;
+                _list = list;
+                _dictionary = dictionary;
+            }
+
+            /// <summary>
+            /// Creates a new mutable collection.
+            /// </summary>
+            public static Builder CreateBuilder()
+            {
+                return new Builder(0, ImmutableList.CreateBuilder<ItemData>(), null);
+            }
+
+            /// <summary>
+            /// Creates a mutable view of this collection. Changes made to the returned builder are not reflected in this collection.
+            /// </summary>
+            public Builder ToBuilder()
+            {
+                return new Builder(_version + 1, _list.ToBuilder(), _dictionary?.ToBuilder());
+            }
+        }
+
         private class LazyItemList
         {
             private readonly LazyItemList _previous;
@@ -253,7 +535,7 @@ public ImmutableList<I> GetMatchedItems(ImmutableHashSet<string> globsToIgnore)
                 return items.ToImmutable();
             }
 
-            public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> globsToIgnore)
+            public OrderedItemDataCollection.Builder GetItemData(ImmutableHashSet<string> globsToIgnore)
             {
                 // Cache results only on the LazyItemOperations whose results are required by an external caller (via GetItems). This means:
                 //   - Callers of GetItems who have announced ahead of time that they would reference an operation (via MarkAsReferenced())
@@ -275,7 +557,7 @@ public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> glob
                 // does not mutate: one can add operations on top, but the base never changes, and (ii) the globsToIgnore passed to the tail is the concatenation between
                 // the globsToIgnore received as an arg, and the globsToIgnore produced by the head (if the head is a Remove operation)
 
-                ImmutableList<ItemData> items;
+                OrderedItemDataCollection items;
                 if (_memoizedOperation.TryGetFromCache(globsToIgnore, out items))
                 {
                     return items.ToBuilder();
@@ -299,12 +581,12 @@ public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> glob
             /// is to optimize the case in which as series of UpdateOperations, each of which affects a single ItemSpec, are applied to all
             /// items in the list, leading to a quadratic-time operation.
             /// </summary>
-            private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyItemList, ImmutableHashSet<string> globsToIgnore)
+            private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyItemList, ImmutableHashSet<string> globsToIgnore)
             {
                 // Stack of operations up to the first one that's cached (exclusive)
                 Stack<LazyItemList> itemListStack = new Stack<LazyItemList>();
 
-                ImmutableList<ItemData>.Builder items = null;
+                OrderedItemDataCollection.Builder items = null;
 
                 // Keep a separate stack of lists of globs to ignore that only gets modified for Remove operations
                 Stack<ImmutableHashSet<string>> globsToIgnoreStack = null;
@@ -313,7 +595,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                 {
                     var globsToIgnoreFromFutureOperations = globsToIgnoreStack?.Peek() ?? globsToIgnore;
 
-                    ImmutableList<ItemData> itemsFromCache;
+                    OrderedItemDataCollection itemsFromCache;
                     if (currentList._memoizedOperation.TryGetFromCache(globsToIgnoreFromFutureOperations, out itemsFromCache))
                     {
                         // the base items on top of which to apply the uncached operations are the items of the first operation that is cached
@@ -341,7 +623,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
 
                 if (items == null)
                 {
-                    items = ImmutableList.CreateBuilder<ItemData>();
+                    items = OrderedItemDataCollection.CreateBuilder();
                 }
 
                 ImmutableHashSet<string> currentGlobsToIgnore = globsToIgnoreStack == null ? globsToIgnore : globsToIgnoreStack.Peek();
@@ -419,7 +701,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                 return items;
             }
 
-            private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOperation> itemsWithNoWildcards, ImmutableList<ItemData>.Builder items)
+            private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOperation> itemsWithNoWildcards, OrderedItemDataCollection.Builder items)
             {
 #if DEBUG
                 ErrorUtilities.VerifyThrow(itemsWithNoWildcards.All(fragment => !MSBuildConstants.CharactersForExpansion.Any(fragment.Key.Contains)), $"{nameof(itemsWithNoWildcards)} should not contain any text fragments with wildcards.");
diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index 41aaea15e97..cd65b6821cc 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -15,7 +15,7 @@ internal readonly struct FileSpecMatcherTester
         private readonly string _unescapedFileSpec;
         private readonly string _filenamePattern;
         private readonly Regex _regex;
-        
+
         private FileSpecMatcherTester(string currentDirectory, string unescapedFileSpec, string filenamePattern, Regex regex)
         {
             Debug.Assert(!string.IsNullOrEmpty(unescapedFileSpec));
@@ -25,6 +25,13 @@ private FileSpecMatcherTester(string currentDirectory, string unescapedFileSpec,
             _unescapedFileSpec = unescapedFileSpec;
             _filenamePattern = filenamePattern;
             _regex = regex;
+
+            if (_regex == null && _filenamePattern == null)
+            {
+                // We'll be testing files by comparing their normalized paths. Normalize our file spec right away
+                // to avoid doing this work on each IsMatch call.
+                _unescapedFileSpec = FileUtilities.NormalizePathForComparisonNoThrow(_unescapedFileSpec, _currentDirectory);
+            }
         }
 
         public static FileSpecMatcherTester Parse(string currentDirectory, string fileSpec)
@@ -41,31 +48,43 @@ public static FileSpecMatcherTester Parse(string currentDirectory, string fileSp
             return new FileSpecMatcherTester(currentDirectory, unescapedFileSpec, filenamePattern, regex);
         }
 
+        /// <summary>
+        /// Returns true if the given file matches this file spec.
+        /// </summary>
         public bool IsMatch(string fileToMatch)
         {
             Debug.Assert(!string.IsNullOrEmpty(fileToMatch));
 
+            string normalizedFileToMatch = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, fileToMatch));
+            return IsMatchNormalized(normalizedFileToMatch);
+        }
+
+        /// <summary>
+        /// Same as <see cref="IsMatch" /> but the argument is expected to be a normalized path.
+        /// </summary>
+        public bool IsMatchNormalized(string normalizedFileToMatch)
+        {
+            Debug.Assert(!string.IsNullOrEmpty(normalizedFileToMatch));
+
             // We do the matching using one of three code paths, depending on the value of _filenamePattern and _regex.
             if (_regex != null)
             {
-                string normalizedFileToMatch = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, fileToMatch));
                 return _regex.IsMatch(normalizedFileToMatch);
             }
 
             if (_filenamePattern != null)
             {
                 // Check file name first as it's more likely to not match.
-                string filename = Path.GetFileName(fileToMatch);
+                string filename = Path.GetFileName(normalizedFileToMatch);
                 if (!FileMatcher.IsMatch(filename, _filenamePattern))
                 {
                     return false;
                 }
 
-                var normalizedFileToMatch = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, fileToMatch));
                 return normalizedFileToMatch.StartsWith(_currentDirectory, StringComparison.OrdinalIgnoreCase);
             }
 
-            return FileUtilities.ComparePathsNoThrow(_unescapedFileSpec, fileToMatch, _currentDirectory, alwaysIgnoreCase: true);
+            return string.Equals(_unescapedFileSpec, normalizedFileToMatch, StringComparison.OrdinalIgnoreCase);
         }
 
         // this method parses the glob and extracts the fixed directory part in order to normalize it and make it absolute
