diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 7a67734775b..37efe9a358c 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -211,6 +211,10 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     {
         bool AllowFailureWithoutError { get; set; }
     }
+    public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
+    {
+        event Microsoft.Build.Framework.BuildWarningEventHandler WarningLoggedAsError;
+    }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
         void Cancel();
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 9e3004af4bb..2574fa474e0 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -211,6 +211,10 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     {
         bool AllowFailureWithoutError { get; set; }
     }
+    public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
+    {
+        event Microsoft.Build.Framework.BuildWarningEventHandler WarningLoggedAsError;
+    }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
         void Cancel();
diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index 40abd53b294..f8c432309d2 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -391,6 +391,7 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         public string HelpKeywordPrefix { get { throw null; } set { } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
+        public void BuildEngineLoggedWarningAsError(object sender, Microsoft.Build.Framework.BuildWarningEventArgs args) { }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { messageWithoutCodePrefix = default(string); throw null; }
         public virtual string FormatResourceString(string resourceName, params object[] args) { throw null; }
         public virtual string FormatString(string unformatted, params object[] args) { throw null; }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index e6cc6f3fa50..9404e96ce96 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -234,6 +234,7 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         public string HelpKeywordPrefix { get { throw null; } set { } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
+        public void BuildEngineLoggedWarningAsError(object sender, Microsoft.Build.Framework.BuildWarningEventArgs args) { }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { messageWithoutCodePrefix = default(string); throw null; }
         public virtual string FormatResourceString(string resourceName, params object[] args) { throw null; }
         public virtual string FormatString(string unformatted, params object[] args) { throw null; }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 350d1c612e9..42f730d80a9 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -33,7 +33,7 @@ internal class TaskHost :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IBuildEngine7
+        IBuildEngine8
     {
         /// <summary>
         /// True if the "secret" environment variable MSBUILDNOINPROCNODE is set.
@@ -489,6 +489,8 @@ public void LogWarningEvent(BuildWarningEventArgs e)
 
                 if (_taskLoggingContext.LoggingService.ShouldTreatWarningAsError(e.Code, e.BuildEventContext))
                 {
+                    WarningLoggedAsError(null, e);
+
                     BuildErrorEventArgs errorEvent = new BuildErrorEventArgs
                             (
                                 e.Subcategory,
@@ -699,6 +701,9 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         public bool AllowFailureWithoutError { get; set; } = false;
         #endregion
 
+
+        public event BuildWarningEventHandler WarningLoggedAsError;
+
         /// <summary>
         /// Called by the internal MSBuild task.
         /// Does not take the lock because it is called by another request builder thread.
diff --git a/src/Framework/IBuildEngine8.cs b/src/Framework/IBuildEngine8.cs
new file mode 100644
index 00000000000..a5face30306
--- /dev/null
+++ b/src/Framework/IBuildEngine8.cs
@@ -0,0 +1,14 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// This interface extends <see cref="IBuildEngine6" /> to allow tasks to know when the
+    /// warnings they log were actually converted to errors.
+    /// </summary>
+    public interface IBuildEngine8 : IBuildEngine7
+    {
+        public event BuildWarningEventHandler WarningLoggedAsError;
+    }
+}
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index e7604d0970b..1eb63cfd6da 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -33,7 +33,7 @@ internal class OutOfProcTaskHostNode :
 #if CLR2COMPATIBILITY
         IBuildEngine3
 #else
-        IBuildEngine7
+        IBuildEngine8
 #endif
     {
         /// <summary>
@@ -162,6 +162,8 @@ internal class OutOfProcTaskHostNode :
         /// The task object cache.
         /// </summary>
         private RegisteredTaskObjectCacheBase _registeredTaskObjectCache;
+
+        public event BuildWarningEventHandler WarningLoggedAsError;
 #endif
 
         /// <summary>
@@ -861,6 +863,10 @@ private void RunTask(object state)
                     if (taskResult == null)
                     {
                         taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.Failure);
+                        if(_isTaskExecuting)
+                        {
+                            WarningLoggedAsError(null, null);
+                        }
                     }
 
                     lock (_taskCompleteLock)
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 7592c784fc0..f1d2d758250 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -49,6 +49,11 @@ public TaskLoggingHelper(ITask taskInstance)
             ErrorUtilities.VerifyThrowArgumentNull(taskInstance, nameof(taskInstance));
             _taskInstance = taskInstance;
             TaskName = taskInstance.GetType().Name;
+
+            if(_taskInstance.BuildEngine is IBuildEngine8 engine)
+            {
+                engine.WarningLoggedAsError += BuildEngineLoggedWarningAsError;
+            }
         }
 
         /// <summary>
@@ -60,6 +65,12 @@ public TaskLoggingHelper(IBuildEngine buildEngine, string taskName)
             ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
             TaskName = taskName;
             _buildEngine = buildEngine;
+
+            // Tasks need to know if a warning they logged was actually logged as an error.
+            if(_buildEngine is IBuildEngine8 engine)
+            {
+                engine.WarningLoggedAsError += BuildEngineLoggedWarningAsError;
+            }
         }
 
         #endregion
@@ -118,6 +129,8 @@ private string TaskNameUpperCase
         /// </summary>
         private readonly IBuildEngine _buildEngine;
 
+        private HashSet<string> _warningCodesLogged = new HashSet<string>();
+
         /// <summary>
         /// Shortcut property for getting our build engine - we retrieve it from the task instance
         /// </summary>
@@ -923,6 +936,18 @@ public void LogErrorFromException(Exception exception, bool showStackTrace, bool
 
 #region Warning logging methods
 
+        public void BuildEngineLoggedWarningAsError(object sender, BuildWarningEventArgs args)
+        {
+            if(args.Code == null)
+            {
+
+            }
+            if(_warningCodesLogged.Contains(args.Code))
+            {
+                HasLoggedErrors = true;
+            }
+        }
+
         /// <summary>
         /// Logs a warning using the specified string.
         /// Thread safe.
@@ -1016,6 +1041,14 @@ params object[] messageArgs
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
+            if(warningCode == null)
+            {
+
+            }
+
+            // Keep track of warnings logged, and compare them against when a warning is logged as an error.
+            _warningCodesLogged.Add(warningCode);
+
             var e = new BuildWarningEventArgs
                 (
                     subcategory,
diff --git a/src/Utilities/Task.cs b/src/Utilities/Task.cs
index 39846721d3c..15d4b72270e 100644
--- a/src/Utilities/Task.cs
+++ b/src/Utilities/Task.cs
@@ -50,11 +50,22 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)
 
         #region Properties
 
+        private IBuildEngine _engine;
         /// <summary>
         /// The build engine automatically sets this property to allow tasks to call back into it.
         /// </summary>
         /// <value>The build engine interface available to tasks.</value>
-        public IBuildEngine BuildEngine { get; set; }
+        public IBuildEngine BuildEngine
+        {
+            get
+            {
+                return _engine;
+            }
+            set
+            {
+                _engine = value;
+            }
+        }
 
         // The casts below are always possible because this class is built against the 
         // Orcas Framework assembly or later, so the version of MSBuild that does not
