diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index d7f899ac795..3476a6146c6 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -2,7 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+#if !NETFRAMEWORK
 using System.Linq;
+#endif
 using System.Reflection;
 
 using Microsoft.Build.Framework;
@@ -139,7 +141,7 @@ internal static ITask CreateTask(TypeInformation typeInformation, string taskNam
                     // a task assembly using Load, and loaded a different one. I don't see any other choice than
                     // to fail here.
                     if (((typeInformation.LoadedType is not null) && taskType != typeInformation.LoadedType.Type) ||
-                            !taskType.Assembly.Location.Equals(typeInformation.LoadInfo.AssemblyLocation) || !taskType.Name.Equals(typeInformation.TypeName))
+                            ((typeInformation.LoadedType is null) && (!taskType.Assembly.Location.Equals(typeInformation.LoadInfo.AssemblyLocation) || !taskType.Name.Equals(typeInformation.TypeName))))
                     {
                         logError
                         (
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 0075846f45b..5a5ac0e5485 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -10,6 +10,7 @@
 using System.Linq;
 using System.Reflection;
 using System.Reflection.Metadata;
+using System.Reflection.Metadata.Ecma335;
 using System.Reflection.PortableExecutable;
 #if !NETFRAMEWORK
 using System.Runtime.Loader;
@@ -364,7 +365,7 @@ private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string
                 if (path is null)
                 {
 #if NETFRAMEWORK
-                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath");
+                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, AppDomain.CurrentDomain.SetupInformation);
                     path = appDomain.Load(new AssemblyName(_assemblyLoadInfo.AssemblyName)).Location;
                     AppDomain.Unload(appDomain);
 #else
@@ -419,7 +420,9 @@ private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string
                                 {
                                     TypeInformationPropertyInfo toAdd = new();
                                     toAdd.Name = metadataReader.GetString(propertyDefinition.Name);
-                                    byte[] bytes = metadataReader.GetBlobReader(propertyDefinition.Signature).ReadBytes(metadataReader.GetBlobReader(propertyDefinition.Signature).Length);
+                                    //MethodSignature<RuntimeTypeInfo> sign = propertyDefinition.DecodeSignature<RuntimeTypeInfo, TypeContext>(new SignatureDecoder<RuntimeTypeInfo, TypeContext>(), null);
+                                    //toAdd.PropertyType = sign.ReturnType ?? sign.ParameterTypes[0];
+                                    //byte[] bytes = metadataReader.GetBlobReader(propertyDefinition.Signature).ReadBytes(metadataReader.GetBlobReader(propertyDefinition.Signature).Length);
                                     foreach (CustomAttributeHandle attr in propertyDefinition.GetCustomAttributes())
                                     {
                                         EntityHandle referenceHandle = metadataReader.GetMemberReference((MemberReferenceHandle)metadataReader.GetCustomAttribute(attr).Constructor).Parent;
