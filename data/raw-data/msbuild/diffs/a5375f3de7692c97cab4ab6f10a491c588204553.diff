diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index db0df20ddff..69392976c03 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -4178,15 +4178,29 @@ public void PropertyFunctionMathMin()
         }
 
         [Fact]
-        public void PropertyFunctionMSBuildAdd()
+        public void PropertyFunctionMSBuildAddIntegerLiteral()
         {
             TestPropertyFunction("$([MSBuild]::Add($(X), 5))", "X", "7", "12");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildAddRealLiteral()
+        {
             TestPropertyFunction("$([MSBuild]::Add($(X), 0.5))", "X", "7", "7.5");
+        }
 
-            // Overflow wrapping
-            TestPropertyFunction("$([MSBuild]::Add($(X), 1))", "X", long.MaxValue.ToString(), "-9223372036854775808");
+        [Fact]
+        public void PropertyFunctionMSBuildAddIntegerOverflow()
+        {
+            // Overflow wrapping - result exceeds size of long
+            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "-9223372036854775808" : (long.MaxValue + 1.0).ToString();
+            TestPropertyFunction("$([MSBuild]::Add($(X), 1))", "X", long.MaxValue.ToString(), expected);
+        }
 
-            // Argument exceeds size of long
+        [Fact]
+        public void PropertyFunctionMSBuildAddRealArgument()
+        {
+            // string argument is an integer that exceeds the size of long.
             double value = long.MaxValue + 1.0;
             double expected = value + 1.0;
             TestPropertyFunction("$([MSBuild]::Add($(X), 1))", "X", value.ToString(), expected.ToString());
@@ -4199,18 +4213,43 @@ public void PropertyFunctionMSBuildAddComplex()
         }
 
         [Fact]
-        public void PropertyFunctionMSBuildSubtract()
+        public void PropertyFunctionMSBuildSubtractIntegerLiteral()
         {
             TestPropertyFunction("$([MSBuild]::Subtract($(X), 20100000))", "X", "20100042", "42");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildSubtractRealLiteral()
+        {
             TestPropertyFunction("$([MSBuild]::Subtract($(X), 20100000.0))", "X", "20100042", "42");
-            TestPropertyFunction("$([MSBuild]::Subtract($(X), 9223372036854775806))", "X", long.MaxValue.ToString(), "1");
         }
 
         [Fact]
-        public void PropertyFunctionMSBuildMultiply()
+        public void PropertyFunctionMSBuildSubtractIntegerMaxValue()
+        {
+            // If the double overload is used, there will be a rounding error.
+            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "1" : "0";
+            TestPropertyFunction("$([MSBuild]::Subtract($(X), 9223372036854775806))", "X", long.MaxValue.ToString(), expected);
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildMultiplyIntegerLiteral()
         {
             TestPropertyFunction("$([MSBuild]::Multiply($(X), 8800))", "X", "2", "17600");
-            TestPropertyFunction("$([MSBuild]::Multiply($(X), .5))", "X", "2", "1");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildMultiplyRealLiteral()
+        {
+            TestPropertyFunction("$([MSBuild]::Multiply($(X), 1.5))", "X", "2", "3");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildMultiplyIntegerOverflow()
+        {
+            // Overflow - result exceeds size of long
+            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "-2" : (long.MaxValue * 2.0).ToString();
+            TestPropertyFunction("$([MSBuild]::Multiply($(X), 2))", "X", long.MaxValue.ToString(), expected);
         }
 
         [Fact]
@@ -4220,16 +4259,27 @@ public void PropertyFunctionMSBuildMultiplyComplex()
         }
 
         [Fact]
-        public void PropertyFunctionMSBuildDivide()
+        public void PropertyFunctionMSBuildDivideIntegerLiteral()
+        {
+            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "6" : "6.5536";
+            TestPropertyFunction("$([MSBuild]::Divide($(X), 10000))", "X", "65536", expected);
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildDivideRealLiteral()
         {
-            TestPropertyFunction("$([MSBuild]::Divide($(X), 10000))", "X", "65536", "6");
             TestPropertyFunction("$([MSBuild]::Divide($(X), 10000.0))", "X", "65536", "6.5536");
         }
 
         [Fact]
-        public void PropertyFunctionMSBuildModulo()
+        public void PropertyFunctionMSBuildModuloIntegerLiteral()
         {
             TestPropertyFunction("$([MSBuild]::Modulo($(X), 3))", "X", "10", "1");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildModuloRealLiteral()
+        {
             TestPropertyFunction("$([MSBuild]::Modulo($(X), 3.0))", "X", "10", "1");
         }
 
diff --git a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
new file mode 100644
index 00000000000..33fc175f4d6
--- /dev/null
+++ b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
@@ -0,0 +1,268 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+using System.Xml;
+
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
+
+using Shouldly;
+
+using Xunit;
+
+namespace Microsoft.Build.Engine.UnitTests.Evaluation
+{
+    public class IntrinsicFunctionOverload_Tests
+    {
+        private Version ChangeWaveForOverloading = ChangeWaves.Wave17_8;
+
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void MSBuildAddInteger(bool enableIntrinsicFunctionOverloads)
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Add($([System.Int64]::MaxValue), 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = enableIntrinsicFunctionOverloads ? unchecked(long.MaxValue + 1).ToString() : (long.MaxValue + 1.0).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+            if (!enableIntrinsicFunctionOverloads)
+            {
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+            }
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildAddReal()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Add(1.0, 2.0))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = 3.0.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void MSBuildSubtractInteger(bool enableIntrinsicFunctionOverloads)
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Subtract($([System.Int64]::MaxValue), 9223372036854775806))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = enableIntrinsicFunctionOverloads ? 1.ToString() : 0.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+            if (!enableIntrinsicFunctionOverloads)
+            {
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+            }
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildSubtractReal()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Subtract(2.0, 1.0))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = 1.0.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void MSBuildMultiplyInteger(bool enableIntrinsicFunctionOverloads)
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Multiply($([System.Int64]::MaxValue), 2))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = enableIntrinsicFunctionOverloads ? unchecked(long.MaxValue * 2).ToString() : (long.MaxValue * 2.0).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+            if (!enableIntrinsicFunctionOverloads)
+            {
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+            }
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildMultiplyReal()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Multiply(2.0, 1.0))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = 2.0.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void MSBuildDivideInteger(bool enableIntrinsicFunctionOverloads)
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Divide(10, 3))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = enableIntrinsicFunctionOverloads ? (10 / 3).ToString() : (10.0 / 3.0).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+            if (!enableIntrinsicFunctionOverloads)
+            {
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+            }
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildDivideReal()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Divide(1, 0.5))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = 2.0.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void MSBuildModuloInteger(bool enableIntrinsicFunctionOverloads)
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Modulo(10, 3))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = 1.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+            if (!enableIntrinsicFunctionOverloads)
+            {
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+            }
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildModuloReal()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Modulo(11.0, 2.5))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = 1.ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+    }
+}
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index a4a13b4f6f8..3be0b4ac397 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -5337,13 +5337,20 @@ private static bool IsInstanceMethodAvailable(string methodName)
                 return methodName != "GetType";
             }
 
+            private static TypeCode SelectTypeOfFirstParameter(MethodBase method)
+            {
+                ParameterInfo[] parameters = method.GetParameters();
+                return parameters.Length > 0
+                    ? Type.GetTypeCode(parameters[0].ParameterType)
+                    : TypeCode.Empty;
+            }
+
             /// <summary>
             /// Construct and instance of objectType based on the constructor or method arguments provided.
             /// Arguments must never be null.
             /// </summary>
             private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object objectInstance /* null unless instance method */, object[] args, bool isConstructor)
             {
-
                 // First let's try for a method where all arguments are strings..
                 Type[] types = new Type[_arguments.Length];
                 for (int n = 0; n < _arguments.Length; n++)
@@ -5365,15 +5372,26 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o
                 // search for a method with the right number of arguments
                 if (memberInfo == null)
                 {
-                    MethodBase[] members;
                     // Gather all methods that may match
+                    IEnumerable<MethodBase> members;
                     if (isConstructor)
                     {
                         members = _receiverType.GetConstructors(bindingFlags);
                     }
                     else
                     {
-                        members = _receiverType.GetMethods(bindingFlags);
+                        members = _receiverType.GetMethods(bindingFlags).Where(m => string.Equals(m.Name, _methodMethodName, StringComparison.OrdinalIgnoreCase));
+
+                        if (_receiverType == typeof(IntrinsicFunctions))
+                        {
+                            // Order by the TypeCode of the first parameter.
+                            // When change wave is enabled, order long before double.
+                            // Otherwise preserve prior behavior of double before long.
+                            IComparer<TypeCode> comparer = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8)
+                                ? Comparer<TypeCode>.Create((key0, key1) => key0.CompareTo(key1))
+                                : Comparer<TypeCode>.Create((key0, key1) => key1.CompareTo(key0));
+                            members = members.OrderBy(SelectTypeOfFirstParameter, comparer);
+                        }
                     }
 
                     foreach (MethodBase member in members)
@@ -5383,22 +5401,19 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o
                         // Simple match on name and number of params, we will be case insensitive
                         if (parameters.Length == _arguments.Length)
                         {
-                            if (isConstructor || String.Equals(member.Name, _methodMethodName, StringComparison.OrdinalIgnoreCase))
+                            // Try to find a method with the right name, number of arguments and
+                            // compatible argument types
+                            // we have a match on the name and argument number
+                            // now let's try to coerce the arguments we have
+                            // into the arguments on the matching method
+                            object[] coercedArguments = CoerceArguments(args, parameters);
+
+                            if (coercedArguments != null)
                             {
-                                // Try to find a method with the right name, number of arguments and
-                                // compatible argument types
-                                // we have a match on the name and argument number
-                                // now let's try to coerce the arguments we have
-                                // into the arguments on the matching method
-                                object[] coercedArguments = CoerceArguments(args, parameters);
-
-                                if (coercedArguments != null)
-                                {
-                                    // We have a complete match
-                                    memberInfo = member;
-                                    args = coercedArguments;
-                                    break;
-                                }
+                                // We have a complete match
+                                memberInfo = member;
+                                args = coercedArguments;
+                                break;
                             }
                         }
                     }
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 2af7392c4d2..e3d6a13187c 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -27,7 +27,8 @@ internal class ChangeWaves
         internal static readonly Version Wave17_2 = new Version(17, 2);
         internal static readonly Version Wave17_4 = new Version(17, 4);
         internal static readonly Version Wave17_6 = new Version(17, 6);
-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };
+        internal static readonly Version Wave17_8 = new Version(17, 8);
+        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6, Wave17_8 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
