diff --git a/src/Tasks.UnitTests/Delete_Tests.cs b/src/Tasks.UnitTests/Delete_Tests.cs
index 6ebd104ee92..65d3272c9e9 100644
--- a/src/Tasks.UnitTests/Delete_Tests.cs
+++ b/src/Tasks.UnitTests/Delete_Tests.cs
@@ -70,10 +70,20 @@ public void DeleteWithRetries()
 
                 // Do retries
                 ((MockEngine)t.BuildEngine).AssertLogContains("MSB3062");
+
+                File.SetAttributes(source, FileAttributes.Normal);
+                t = new Delete
+                {
+                    RetryDelayMilliseconds = 1,  // speed up tests!
+                    BuildEngine = new MockEngine(),
+                    Files = sourceFiles,
+                    Retries = 1,
+                };
+                t.Execute().ShouldBe(true);
+                ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3062");
             }
             finally
             {
-                File.SetAttributes(source, FileAttributes.Normal);
                 File.Delete(source);
             }
         }
diff --git a/src/Tasks/Delete.cs b/src/Tasks/Delete.cs
index 098dceddabb..e07db4bf952 100644
--- a/src/Tasks/Delete.cs
+++ b/src/Tasks/Delete.cs
@@ -121,11 +121,7 @@ public override bool Execute()
                             {
                                 Log.LogMessageFromResources(MessageImportance.Low, "Delete.SkippingNonexistentFile", file.ItemSpec);
                             }
-
-                            // keep a running list of the files that were actually deleted
-                            // note that we include in this list files that did not exist
-                            ITaskItem deletedFile = new TaskItem(file);
-                            deletedFilesList.Add(deletedFile);
+                            break;
                         }
                     }
                     catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
@@ -144,9 +140,14 @@ public override bool Execute()
                             break;
                         }
                     }
-                    // Add even on failure to avoid reattempting
-                    deletedFilesSet.Add(file.ItemSpec);
                 }
+                // keep a running list of the files that were actually deleted
+                // note that we include in this list files that did not exist
+                ITaskItem deletedFile = new TaskItem(file);
+                deletedFilesList.Add(deletedFile);
+
+                // Add even on failure to avoid reattempting
+                deletedFilesSet.Add(file.ItemSpec);
             }
             // convert the list of deleted files into an array of ITaskItems
             DeletedFiles = deletedFilesList.ToArray();
