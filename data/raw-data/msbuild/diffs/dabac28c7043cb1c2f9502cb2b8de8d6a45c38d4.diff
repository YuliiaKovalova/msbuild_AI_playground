diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 08aebd65ce2..7986b73f28d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -15,13 +15,13 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 internal sealed class BuildCheckConnectorLogger(
     IBuildAnalysisLoggingContextFactory loggingContextFactory, 
     IBuildCheckManager buildCheckManager,
-    bool isStatsEnabled)
+    bool areStatsEnabled)
     : ILogger
 {
     public LoggerVerbosity Verbosity { get; set; }
     public string? Parameters { get; set; }
 
-    private bool _areStatsEnabled = isStatsEnabled;
+    private bool _areStatsEnabled = areStatsEnabled;
 
     public void Initialize(IEventSource eventSource)
     {
@@ -97,7 +97,7 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
 
         if (_areStatsEnabled)
         {
-            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);
             LogAnalyzerStats(loggingContext);
         }
     }
@@ -123,14 +123,14 @@ private void LogAnalyzerStats(LoggingContext loggingContext)
         }
 
         loggingContext.LogCommentFromText(MessageImportance.High, $"BuildCheck run times{Environment.NewLine}");
-        string infraData = buildStatsTable("Infrastructure run times", infraStats);
+        string infraData = BuildStatsTable("Infrastructure run times", infraStats);
         loggingContext.LogCommentFromText(MessageImportance.High, infraData);
 
-        string analyzerData = buildStatsTable("Analyzer run times", analyzerStats);
+        string analyzerData = BuildStatsTable("Analyzer run times", analyzerStats);
         loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);
     }
 
-    private string buildStatsTable(string title, Dictionary<string, TimeSpan> rowData)
+    private string BuildStatsTable(string title, Dictionary<string, TimeSpan> rowData)
     {
         string headerSeparator = $"=============";
         string rowSeparator = $"{Environment.NewLine}----------{Environment.NewLine}";
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 06c113938d8..5c23162679c 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -46,6 +46,5 @@ public void YieldProject(BuildCheckDataSource buildCheckDataSource, BuildEventCo
     public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
     { }
 
-    public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => throw new NotImplementedException();
-    public Dictionary<string, TimeSpan> CreateBuildCheckInfraTracingStats() => throw new NotImplementedException();
+    public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => new Dictionary<string, TimeSpan>();
 }
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index 80ec80e41ec..2c8bff2f4f8 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -47,6 +47,7 @@ internal enum ParameterlessSwitch
             FileLogger8,
             FileLogger9,
             DistributedFileLogger,
+            AnalyzeStats,
 #if DEBUG
             WaitForDebugger,
 #endif
@@ -100,7 +101,6 @@ internal enum ParameterizedSwitch
             WarningsAsMessages,
             BinaryLogger,
             Analyze,
-            AnalyzeStats,
             Restore,
             ProfileEvaluation,
             RestoreProperty,
@@ -223,6 +223,7 @@ internal ParameterizedSwitchInfo(
             new ParameterlessSwitchInfo(  new string[] { "filelogger8", "fl8" },                     ParameterlessSwitch.FileLogger8,           null),
             new ParameterlessSwitchInfo(  new string[] { "filelogger9", "fl9" },                     ParameterlessSwitch.FileLogger9,           null),
             new ParameterlessSwitchInfo(  new string[] { "distributedfilelogger", "dfl" },           ParameterlessSwitch.DistributedFileLogger, null),
+            new ParameterlessSwitchInfo(  new string[] { "analyzeStats", "as" },                     ParameterlessSwitch.AnalyzeStats,          null),
 #if DEBUG
             new ParameterlessSwitchInfo(  new string[] { "waitfordebugger", "wfd" },                 ParameterlessSwitch.WaitForDebugger,       null),
 #endif
@@ -270,7 +271,6 @@ internal ParameterizedSwitchInfo(
             new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "analyze", "al" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),
-            new ParameterizedSwitchInfo(  new string[] { "analyzeStats", "as" },                ParameterizedSwitch.AnalyzeStats,               null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false),
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b6ecf972423..05961b8cd20 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2742,7 +2742,7 @@ private static bool IsBuildCheckEnabled(CommandLineSwitches commandLineSwitches)
         private static bool AreBuildCheckStatsEnabled(CommandLineSwitches commandLineSwitches)
         {
             return commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Analyze) &&
-                commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.AnalyzeStats);
+                commandLineSwitches.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.AnalyzeStats);
         }
 
         private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches commandLineSwitches, out string aggregatedParameters)
