diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 23d3cf093e8..2259df6abdd 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -586,6 +586,10 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
         {
         }
 
+        public void LogProjectFinished(BuildEventContext projectBuildEventContext, ProjectBuildStats projectBuildStats, string projectFile, bool success)
+        {
+        }
+
         /// <summary>
         /// Logs a target started event
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index b57ab84ae82..ae8200de629 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -577,6 +577,8 @@ ProjectStartedEventArgs CreateProjectStarted(
         /// <param name="success">Did the build succeede or not</param>
         void LogProjectFinished(BuildEventContext projectBuildEventContext, string projectFile, bool success);
 
+        void LogProjectFinished(BuildEventContext projectBuildEventContext, ProjectBuildStats projectBuildStats, string projectFile, bool success);
+
         /// <summary>
         /// Log that a target has started
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index cfc289ad30e..b3bfc2db8e8 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1676,6 +1676,7 @@ private void RouteBuildEvent(object loggingEvent)
 
             if (buildEventArgs is ProjectFinishedEventArgs projectFinishedEvent && projectFinishedEvent.BuildEventContext != null)
             {
+                FlushProjStats(projectFinishedEvent);
                 WarningsConfigKey key = GetWarningsConfigKey(projectFinishedEvent);
                 _warningsAsErrorsByProject?.Remove(key);
                 _warningsNotAsErrorsByProject?.Remove(key);
@@ -1698,6 +1699,31 @@ private void RouteBuildEvent(object loggingEvent)
             }
         }
 
+        private void FlushProjStats(ProjectFinishedEventArgs finsEventArgs)
+        {
+            ProjectBuildStats stats = finsEventArgs.ProjectBuildStats;
+
+            if (stats == null)
+            {
+                return;
+            }
+
+            string suffix = finsEventArgs.BuildEventContext != null
+                ? $"InstId: {finsEventArgs.BuildEventContext.ProjectInstanceId}, CtxId: {finsEventArgs.BuildEventContext.ProjectContextId}"
+                : "No_Context";
+
+            Console.WriteLine("=================================================");
+            Console.WriteLine($"Stats for [{finsEventArgs.ProjectFile}, {suffix}");
+            Console.WriteLine($"Total Defined  Tasks: {stats.TotalTasksCount}");
+            Console.WriteLine($"Total Executed Tasks: {stats.TotalExecutedTasksCount}");
+            Console.WriteLine($"Total task exec time: {stats.TotalTasksExecution:mm\\:ss\\.fff}");
+            Console.WriteLine();
+            Console.WriteLine($"Defined  Custom Tasks: {stats.CustomTasksCount}");
+            Console.WriteLine($"Executed Custom Tasks: {stats.ExecutedCustomTasksCount}");
+            Console.WriteLine($"Custom task exec time: {stats.TotalCustomTasksExecution:mm\\:ss\\.fff}");
+            Console.WriteLine("=================================================");
+        }
+
         /// <summary>
         /// Route the build event to the correct filter or sink depending on what the sinId is in the build event.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index bbfd82c4fe3..b1c591490d4 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -604,6 +604,17 @@ public ProjectStartedEventArgs CreateProjectStarted(
         /// <param name="success">Did the project pass or fail</param>
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogProjectFinished(BuildEventContext projectBuildEventContext, string projectFile, bool success)
+            => LogProjectFinished(projectBuildEventContext, null, projectFile, success);
+
+        /// <summary>
+        /// Logs that a project has finished
+        /// </summary>
+        /// <param name="projectBuildEventContext">Event context for the project.</param>
+        /// <param name="projectBuildStats"></param>
+        /// <param name="projectFile">Project file being built</param>
+        /// <param name="success">Did the project pass or fail</param>
+        /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
+        public void LogProjectFinished(BuildEventContext projectBuildEventContext, ProjectBuildStats projectBuildStats, string projectFile, bool success)
         {
             ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
 
@@ -613,6 +624,7 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
                     projectFile,
                     success);
             buildEvent.BuildEventContext = projectBuildEventContext;
+            buildEvent.ProjectBuildStats = projectBuildStats;
             ProcessLoggingEvent(buildEvent);
 
             // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 22687557135..bfd185691ca 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -258,10 +258,11 @@ private static ProjectStartedEventArgs CreateProjectStarted(
         /// Log that the project has finished
         /// </summary>
         /// <param name="success">Did the build succeede or not</param>
-        internal void LogProjectFinished(bool success)
+        /// <param name="projectBuildStats"></param>
+        internal void LogProjectFinished(bool success, ProjectBuildStats projectBuildStats = null)
         {
             ErrorUtilities.VerifyThrow(this.IsValid, "invalid");
-            LoggingService.LogProjectFinished(BuildEventContext, _projectFullPath, success);
+            LoggingService.LogProjectFinished(BuildEventContext, projectBuildStats, _projectFullPath, success);
             this.IsValid = false;
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
index 5fd70efcc79..d47ad6bf7d4 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
@@ -86,7 +86,7 @@ public void Dispose()
             StopTracking();
         }
 
-        private static bool IsBuiltinType(string? typeName)
+        internal static bool IsBuiltinType(string? typeName)
         {
             if (string.IsNullOrEmpty(typeName))
             {
@@ -95,7 +95,8 @@ private static bool IsBuiltinType(string? typeName)
 
             return typeName!.StartsWith("Microsoft.Build", StringComparison.Ordinal) ||
                    typeName.StartsWith("Microsoft.NET.Build", StringComparison.Ordinal) ||
-                   typeName.StartsWith("Microsoft.NET.Sdk", StringComparison.Ordinal);
+                   typeName.StartsWith("Microsoft.NET.Sdk", StringComparison.Ordinal) ||
+                   typeName.StartsWith("Microsoft.Activities.Build", StringComparison.Ordinal);
         }
 
         private static IDisposable StartTracking(
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index b1c05600fae..7d8dd09bfe5 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -870,6 +870,18 @@ private async Task RequestThreadProc(bool setThreadParameters)
             }
         }
 
+        ////public class ProjectBuildStats
+        ////{
+        ////    public int TotalTasksCount { get; set; }
+        ////    public int CustomTasksCount { get; set; }
+        ////    public int TotalExecutedTasksCount { get; set; }
+        ////    public int ExecutedCustomTasksCount { get; set; }
+        ////    public TimeSpan TotalTasksExecution { get; set; }
+        ////    public TimeSpan TotalCustomTasksExecution { get; set; }
+
+        ////    // todo top N tasks - names (unhashed if not custom) and time
+        ////}
+
         /// <summary>
         /// Reports this result to the engine and cleans up.
         /// </summary>
@@ -879,7 +891,47 @@ private void ReportResultAndCleanUp(BuildResult result)
             {
                 try
                 {
-                    _projectLoggingContext.LogProjectFinished(result.OverallResult == BuildResultCode.Success);
+                    TaskRegistry taskReg = _requestEntry.RequestConfiguration.Project.TaskRegistry;
+                    ProjectBuildStats stats = new();
+                    CollectTasksStats(taskReg, stats);
+
+                    // Custom tasks count
+                    // Total tasks count
+                    // Executed tasks count (+ number of executions and total time of execution?)
+                    // Custom tasks executed count
+                    // Top tasks execution cumulative. Top tasks execution without aggregation
+                    // And similarly for Targets - custom vs builtin
+
+                    void CollectTasksStats(TaskRegistry taskRegistry, ProjectBuildStats projectBuildStats)
+                    {
+                        if (taskRegistry == null)
+                        {
+                            return;
+                        }
+
+                        foreach (TaskRegistry.RegisteredTaskRecord registeredTaskRecord in taskRegistry.TaskRegistrations.Values.SelectMany(record => record))
+                        {
+                            // registeredTaskRecord.TaskIdentity.Name
+
+                            projectBuildStats.TotalTasksCount++;
+                            projectBuildStats.TotalTasksExecution += registeredTaskRecord.Statistics.ExecutedTime;
+                            projectBuildStats.TotalExecutedTasksCount += registeredTaskRecord.Statistics.ExecutedCount;
+
+                            if (registeredTaskRecord.Statistics.IsCustom)
+                            {
+                                projectBuildStats.CustomTasksCount++;
+                                projectBuildStats.TotalCustomTasksExecution += registeredTaskRecord.Statistics.ExecutedTime;
+                                projectBuildStats.ExecutedCustomTasksCount +=
+                                    registeredTaskRecord.Statistics.ExecutedCount;
+                            }
+                        }
+
+                        CollectTasksStats(taskRegistry.Toolset?._defaultTaskRegistry, projectBuildStats);
+                        CollectTasksStats(taskRegistry.Toolset?._overrideTaskRegistry, projectBuildStats);
+                    }
+
+
+                    _projectLoggingContext.LogProjectFinished(result.OverallResult == BuildResultCode.Success, stats);
                 }
                 catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
                 {
@@ -1225,6 +1277,37 @@ private async Task<BuildResult> BuildProject()
                 buildCheckManager?.EndProjectRequest(
                     new CheckLoggingContext(_nodeLoggingContext.LoggingService, _projectLoggingContext.BuildEventContext),
                     _requestEntry.RequestConfiguration.ProjectFullPath);
+
+                TaskRegistry taskReg = _requestEntry.RequestConfiguration.Project.TaskRegistry;
+                int tasksCount = GetTasksRegistrationsCount(taskReg);
+
+                // Custom tasks count
+                // Total tasks count
+                // Executed tasks count (+ number of executions and total time of execution?)
+                // Custom tasks executed count
+                // Top tasks execution cumulative. Top tasks execution without aggregation
+                // And similarly for Targets - custom vs builtin
+
+
+                int GetTasksRegistrationsCount(TaskRegistry taskRegistry)
+                {
+                    if (taskRegistry == null)
+                    {
+                        return 0;
+                    }
+
+                    // This is proper - account for a situation where multiple tasks with same name, but from different assemblies are registered.
+                    // int registrationsCount = taskRegistry.TaskRegistrations.Values.Sum(v => v.Count);
+                    // But - let's make it fast and simple
+                    int registrationsCount = taskRegistry.TaskRegistrations.Count;
+
+                    // taskRegistry.TaskRegistrations.Values.First().First().Statistics
+
+                    return
+                        registrationsCount +
+                        GetTasksRegistrationsCount(taskRegistry.Toolset?._defaultTaskRegistry) +
+                        GetTasksRegistrationsCount(taskRegistry.Toolset?._overrideTaskRegistry);
+                }
             }
 
             BuildResult CopyTargetResultsFromProxyTargetsToRealTargets(BuildResult resultFromTargetBuilder)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index deafed17428..9206e489dc1 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -163,6 +163,11 @@ public async Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext
 
             // Now process the targets
             ITaskBuilder taskBuilder = _componentHost.GetComponent(BuildComponentType.TaskBuilder) as ITaskBuilder;
+
+            ////((TaskBuilder)taskBuilder).ShutdownComponent();
+            ////TaskExecutionHost te;
+            ////te.
+
             try
             {
                 await ProcessTargetStack(taskBuilder);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index c85b4f41f54..2b93cbf75d7 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -419,6 +419,8 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
         /// </summary>
         internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry requestEntry, ProjectLoggingContext projectLoggingContext, CancellationToken cancellationToken)
         {
+            // TODO: here for target stats
+
             try
             {
                 VerifyState(_state, TargetEntryState.Execution);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index c45130602a1..7039f521a2b 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -428,6 +428,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                     {
                         TaskLoggingContext taskLoggingContext = _targetLoggingContext.LogTaskBatchStarted(_projectFullPath, _targetChildInstance, taskAssemblyLocation);
                         MSBuildEventSource.Log.ExecuteTaskStart(_taskNode?.Name, taskLoggingContext.BuildEventContext.TaskId);
+                        taskFactoryWrapper?.Statistics?.ExecutionStarted();
                         _buildRequestEntry.Request.CurrentTaskContext = taskLoggingContext.BuildEventContext;
 
                         try
@@ -476,6 +477,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
 
                             // Flag the completion of the task.
                             taskLoggingContext.LogTaskBatchFinished(_projectFullPath, taskResult.ResultCode == WorkUnitResultCode.Success || taskResult.ResultCode == WorkUnitResultCode.Skipped);
+                            taskFactoryWrapper?.Statistics?.ExecutionStoped();
 
                             if (taskResult.ResultCode == WorkUnitResultCode.Failed && _continueOnError == ContinueOnError.WarnAndContinue)
                             {
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index 3d19d6766af..7eea1591f02 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -163,12 +163,12 @@ public class Toolset : ITranslatable
         /// <summary>
         /// holds all the default tasks we know about and the assemblies they exist in
         /// </summary>
-        private TaskRegistry _defaultTaskRegistry;
+        internal TaskRegistry _defaultTaskRegistry;
 
         /// <summary>
         /// holds all the override tasks we know about and the assemblies they exist in
         /// </summary>
-        private TaskRegistry _overrideTaskRegistry;
+        internal TaskRegistry _overrideTaskRegistry;
 
         /// <summary>
         /// Delegate to retrieving files.  For unit testing only.
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index d9bfe7d56b9..0b1a6f36c4b 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -73,6 +73,8 @@ public PropertyData(
         /// </summary>
         private IDictionary<string, string> _factoryIdentityParameters;
 
+        internal TaskRegistry.RegisteredTaskRecord.Stats? Statistics;
+
         #endregion
 
         #region Constructors
@@ -80,7 +82,12 @@ public PropertyData(
         /// <summary>
         /// Creates an instance of this class for the given type.
         /// </summary>
-        internal TaskFactoryWrapper(ITaskFactory taskFactory, LoadedType taskFactoryLoadInfo, string taskName, IDictionary<string, string> factoryIdentityParameters)
+        internal TaskFactoryWrapper(
+            ITaskFactory taskFactory,
+            LoadedType taskFactoryLoadInfo,
+            string taskName,
+            IDictionary<string, string> factoryIdentityParameters,
+            TaskRegistry.RegisteredTaskRecord.Stats? statistics = null)
         {
             ErrorUtilities.VerifyThrowArgumentNull(taskFactory);
             ErrorUtilities.VerifyThrowArgumentLength(taskName);
@@ -89,6 +96,7 @@ internal TaskFactoryWrapper(ITaskFactory taskFactory, LoadedType taskFactoryLoad
             TaskFactoryLoadedType = taskFactoryLoadInfo;
             _factoryIdentityParameters = factoryIdentityParameters;
             _propertyData = new Lazy<PropertyData>(PopulatePropertyInfo);
+            Statistics = statistics;
         }
 
         #endregion
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index c15332a79e8..8599d03fe13 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -9,8 +9,10 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Reflection.Metadata;
 using System.Threading;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Components.RequestBuilder;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
@@ -441,7 +443,30 @@ private static void RegisterTasksFromUsingTaskElement
                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);
             }
 
-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingContext, projectUsingTaskXml, ConversionUtilities.ValidBooleanTrue(overrideUsingTask));
+            bool isCustomTask =
+                ((!string.IsNullOrEmpty(taskFactory)) ||
+                (!string.IsNullOrEmpty(assemblyName) && !AssemblyLoadsTracker.IsBuiltinType(assemblyName)) ||
+                (!string.IsNullOrEmpty(assemblyFile) && !AssemblyLoadsTracker.IsBuiltinType(Path.GetFileName(assemblyFile)) && !FileClassifier.Shared.IsBuiltInLogic(assemblyFile)))
+                // and let's consider all tasks imported by common targets as non custom logic.
+                && !FileClassifier.Shared.IsBuiltInLogic(projectUsingTaskXml.ContainingProject.FullPath);
+
+            // TODO: We might want to decide this post-hoc (on project done), based on TaskRegistration.AssemblyLoadInfo
+            //  as only then we might better know the location of dotnet install root
+            if (isCustomTask)
+            {
+                Debugger.Launch();
+            }
+
+            taskRegistry.RegisterTask(
+                taskName,
+                AssemblyLoadInfo.Create(assemblyName, assemblyFile),
+                taskFactory,
+                taskFactoryParameters,
+                parameterGroupAndTaskElementRecord,
+                loggingContext,
+                projectUsingTaskXml,
+                ConversionUtilities.ValidBooleanTrue(overrideUsingTask),
+                isCustomTask);
         }
 
         private static Dictionary<string, string> CreateTaskFactoryParametersDictionary(int? initialCount = null)
@@ -686,7 +711,8 @@ private void RegisterTask(
             RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord,
             LoggingContext loggingContext,
             ProjectUsingTaskElement projectUsingTaskInXml,
-            bool overrideTask = false)
+            bool overrideTask,
+            bool isCustom)
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalNull(assemblyLoadInfo);
@@ -713,7 +739,8 @@ private void RegisterTask(
                 taskFactory,
                 taskFactoryParameters,
                 inlineTaskRecord,
-                Interlocked.Increment(ref _nextRegistrationOrderId));
+                Interlocked.Increment(ref _nextRegistrationOrderId),
+                isCustom);
 
             if (overrideTask)
             {
@@ -1158,10 +1185,39 @@ internal class RegisteredTaskRecord : ITranslatable
             /// </summary>
             private int _registrationOrderId;
 
+            internal Stats Statistics = new Stats();
+
+            internal class Stats
+            {
+                public bool IsCustom { get; set; }
+                public short ExecutedCount { get; private set; }
+                private readonly Stopwatch _executedSw  = new Stopwatch();
+
+                public TimeSpan ExecutedTime => _executedSw.Elapsed;
+
+                public void ExecutionStarted()
+                {
+                    _executedSw.Start();
+                    ExecutedCount++;
+                }
+
+                public void ExecutionStoped()
+                {
+                    _executedSw.Stop();
+                }
+            }
+
             /// <summary>
             /// Constructor
             /// </summary>
-            internal RegisteredTaskRecord(string registeredName, AssemblyLoadInfo assemblyLoadInfo, string taskFactory, Dictionary<string, string> taskFactoryParameters, ParameterGroupAndTaskElementRecord inlineTask, int registrationOrderId)
+            internal RegisteredTaskRecord(
+                string registeredName,
+                AssemblyLoadInfo assemblyLoadInfo,
+                string taskFactory,
+                Dictionary<string, string> taskFactoryParameters,
+                ParameterGroupAndTaskElementRecord inlineTask,
+                int registrationOrderId,
+                bool isCustom)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(assemblyLoadInfo, "AssemblyLoadInfo");
                 _registeredName = registeredName;
@@ -1189,6 +1245,8 @@ internal RegisteredTaskRecord(string registeredName, AssemblyLoadInfo assemblyLo
                 {
                     _parameterGroupAndTaskBody = new ParameterGroupAndTaskElementRecord();
                 }
+
+                Statistics.IsCustom = isCustom;
             }
 
             private RegisteredTaskRecord()
@@ -1546,7 +1604,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                         }
                     }
 
-                    _taskFactoryWrapperInstance = new TaskFactoryWrapper(factory, loadedType, RegisteredName, TaskFactoryParameters);
+                    _taskFactoryWrapperInstance = new TaskFactoryWrapper(factory, loadedType, RegisteredName, TaskFactoryParameters, Statistics);
                 }
 
                 return true;
diff --git a/src/Framework.UnitTests/FileClassifier_Tests.cs b/src/Framework.UnitTests/FileClassifier_Tests.cs
index 5bf6c04f4ce..b0441062a44 100644
--- a/src/Framework.UnitTests/FileClassifier_Tests.cs
+++ b/src/Framework.UnitTests/FileClassifier_Tests.cs
@@ -12,6 +12,12 @@ namespace Microsoft.Build.Framework.UnitTests
 {
     public class FileClassifierTests
     {
+        private sealed class FileClassifierUnderTest : FileClassifier
+        {
+            public void RegisterImmutableDirectory(string directory)
+                => base.RegisterImmutableDirectory(directory, false);
+        }
+
         [Fact]
         public void Shared_ReturnsInstance()
         {
@@ -21,7 +27,7 @@ public void Shared_ReturnsInstance()
         [Fact]
         public void IsNonModifiable_EvaluatesModifiability()
         {
-            FileClassifier classifier = new();
+            FileClassifierUnderTest classifier = new();
 
             var volume = NativeMethodsShared.IsWindows ? @"X:\" : "/home/usr";
             classifier.RegisterImmutableDirectory($"{Path.Combine(volume, "Test1")}");
@@ -35,7 +41,7 @@ public void IsNonModifiable_EvaluatesModifiability()
         [Fact]
         public void IsNonModifiable_DuplicateNugetRegistry_EvaluatesModifiability()
         {
-            FileClassifier classifier = new();
+            FileClassifierUnderTest classifier = new();
 
             var volume = NativeMethodsShared.IsWindows ? @"X:\" : "/home/usr";
 
@@ -53,7 +59,7 @@ public void IsNonModifiable_DuplicateNugetRegistry_EvaluatesModifiability()
         [Fact]
         public void IsNonModifiable_RespectsOSCaseSensitivity()
         {
-            FileClassifier classifier = new();
+            FileClassifierUnderTest classifier = new();
 
             var volume = NativeMethodsShared.IsWindows ? @"X:\" : "/home/usr";
             classifier.RegisterImmutableDirectory($"{Path.Combine(volume, "Test1")}");
@@ -73,7 +79,7 @@ public void IsNonModifiable_RespectsOSCaseSensitivity()
         [Fact]
         public void IsNonModifiable_DoesntThrowWhenPackageFoldersAreNotRegistered()
         {
-            FileClassifier classifier = new();
+            FileClassifierUnderTest classifier = new();
 
             classifier.IsNonModifiable("X:\\Test3\\File.ext").ShouldBeFalse();
         }
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index 2072633870b..3a8414808d9 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -87,6 +87,11 @@ private set
         /// </summary>
         private volatile IReadOnlyList<string> _knownImmutableDirectoriesSnapshot = [];
 
+        /// <summary>
+        ///     Copy on write snapshot of <see cref="_knownImmutableDirectories"/>, without custom logic locations (e.g. nuget cache).
+        /// </summary>
+        private volatile IReadOnlyList<string> _knownBuiltInLogicDirectoriesSnapshot = [];
+
         /// <summary>
         ///     Creates default FileClassifier which following immutable folders:
         ///     Classifications provided are:
@@ -109,12 +114,12 @@ public FileClassifier()
                 string? programFiles = Environment.GetEnvironmentVariable(programFilesEnv);
                 if (!string.IsNullOrEmpty(programFiles))
                 {
-                    RegisterImmutableDirectory(Path.Combine(programFiles, "Reference Assemblies", "Microsoft"));
+                    RegisterImmutableDirectory(Path.Combine(programFiles, "Reference Assemblies", "Microsoft"), false);
                 }
             }
 
 #if !RUNTIME_TYPE_NETCORE
-            RegisterImmutableDirectory(GetVSInstallationDirectory());
+            RegisterImmutableDirectory(GetVSInstallationDirectory(), false);
 
             static string? GetVSInstallationDirectory()
             {
@@ -204,7 +209,7 @@ static string GetFolderAbove(string path, int count = 1)
         ///     This value is used by <see cref="IsNonModifiable" />.
         ///     Files in the NuGet package cache are not expected to change over time, once they are created.
         /// </remarks>
-        public void RegisterImmutableDirectory(string? directory)
+        private protected void RegisterImmutableDirectory(string? directory, bool isCustomLogicLocation)
         {
             if (directory?.Length > 0)
             {
@@ -213,6 +218,16 @@ public void RegisterImmutableDirectory(string? directory)
                 if (_knownImmutableDirectories.TryAdd(d, d))
                 {
                     _knownImmutableDirectoriesSnapshot = new List<string>(_knownImmutableDirectories.Values);
+
+                    // Add the location to the build in logic locations
+                    // TODO: add more readable way
+                    if (!isCustomLogicLocation)
+                    {
+                        string[] tmp = new string[_knownBuiltInLogicDirectoriesSnapshot.Count + 1];
+                        Array.Copy((string[])_knownBuiltInLogicDirectoriesSnapshot, tmp, tmp.Length - 1);
+                        tmp[tmp.Length - 1] = directory;
+                        _knownBuiltInLogicDirectoriesSnapshot = tmp;
+                    }
                 }
             }
         }
@@ -222,23 +237,23 @@ public void RegisterFrameworkLocations(Func<string, string?> getPropertyValue)
             // Register toolset paths into list of immutable directories
             // example: C:\Windows\Microsoft.NET\Framework
             string? frameworksPathPrefix32 = GetExistingRootOrNull(getPropertyValue("MSBuildFrameworkToolsPath32")?.Trim());
-            RegisterImmutableDirectory(frameworksPathPrefix32);
+            RegisterImmutableDirectory(frameworksPathPrefix32, false);
             // example: C:\Windows\Microsoft.NET\Framework64
             string? frameworksPathPrefix64 = GetExistingRootOrNull(getPropertyValue("MSBuildFrameworkToolsPath64")?.Trim());
-            RegisterImmutableDirectory(frameworksPathPrefix64);
+            RegisterImmutableDirectory(frameworksPathPrefix64, false);
             // example: C:\Windows\Microsoft.NET\FrameworkArm64
             string? frameworksPathPrefixArm64 = GetExistingRootOrNull(getPropertyValue("MSBuildFrameworkToolsPathArm64")?.Trim());
-            RegisterImmutableDirectory(frameworksPathPrefixArm64);
+            RegisterImmutableDirectory(frameworksPathPrefixArm64, false);
         }
 
         public void RegisterKnownImmutableLocations(Func<string, string?> getPropertyValue)
         {
             // example: C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2
-            RegisterImmutableDirectory(getPropertyValue("FrameworkPathOverride")?.Trim());
+            RegisterImmutableDirectory(getPropertyValue("FrameworkPathOverride")?.Trim(), false);
             // example: C:\Program Files\dotnet\
-            RegisterImmutableDirectory(getPropertyValue("NetCoreRoot")?.Trim());
+            RegisterImmutableDirectory(getPropertyValue("NetCoreRoot")?.Trim(), false);
             // example: C:\Users\<username>\.nuget\packages\
-            RegisterImmutableDirectory(getPropertyValue("NuGetPackageFolders")?.Trim());
+            RegisterImmutableDirectory(getPropertyValue("NuGetPackageFolders")?.Trim(), true);
 
             IsImmutablePathsInitialized = true;
         }
@@ -314,19 +329,34 @@ private static string EnsureTrailingSlash(string fileSpec)
             return fileSpec;
         }
 
+        /// <summary>
+        ///     Gets whether a file is expected to be produced as a controlled msbuild logic library ( - produced by Microsoft).
+        /// </summary>
+        /// <param name="filePath">The path to the file to test.</param>
+        /// <returns><see langword="true" /> if the file is supposed to be part of the common targets libraries set.<see langword="false" />.</returns>
+        public bool IsBuiltInLogic(string filePath)
+            => IsInLocationList(filePath, _knownBuiltInLogicDirectoriesSnapshot);
+
         /// <summary>
         ///     Gets whether a file is expected to not be modified in place on disk once it has been created.
         /// </summary>
         /// <param name="filePath">The path to the file to test.</param>
         /// <returns><see langword="true" /> if the file is non-modifiable, otherwise <see langword="false" />.</returns>
         public bool IsNonModifiable(string filePath)
+            => IsInLocationList(filePath, _knownImmutableDirectoriesSnapshot);
+
+        private static bool IsInLocationList(string filePath, IReadOnlyList<string> locations)
         {
+            if (string.IsNullOrEmpty(filePath))
+            {
+                return false;
+            }
+
             // Avoid a foreach loop or linq.Any because they allocate.
             // Copy _knownImmutableDirectoriesSnapshot into a local variable so other threads can't modify it during enumeration.
-            IReadOnlyList<string> immutableDirectories = _knownImmutableDirectoriesSnapshot;
-            for (int i = 0; i < immutableDirectories.Count; i++)
+            for (int i = 0; i < locations.Count; i++)
             {
-                if (filePath.StartsWith(immutableDirectories[i], PathComparison))
+                if (filePath.StartsWith(locations[i], PathComparison))
                 {
                     return true;
                 }
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index 9308f830c2f..d9916ce0b0b 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -7,6 +7,18 @@
 
 namespace Microsoft.Build.Framework
 {
+    public class ProjectBuildStats
+    {
+        public short TotalTasksCount { get; set; }
+        public short CustomTasksCount { get; set; }
+        public short TotalExecutedTasksCount { get; set; }
+        public short ExecutedCustomTasksCount { get; set; }
+        public TimeSpan TotalTasksExecution { get; set; }
+        public TimeSpan TotalCustomTasksExecution { get; set; }
+
+        // todo top N tasks - names (unhashed if not custom) and time
+    }
+
     /// <summary>
     /// Arguments for project finished events
     /// </summary>
@@ -80,6 +92,22 @@ internal override void WriteToStream(BinaryWriter writer)
 
             writer.WriteOptionalString(projectFile);
             writer.Write(succeeded);
+
+            if (ProjectBuildStats != null)
+            {
+                writer.Write((byte)1);
+                writer.Write(ProjectBuildStats.TotalTasksCount);
+                writer.Write(ProjectBuildStats.CustomTasksCount);
+                writer.Write(ProjectBuildStats.TotalExecutedTasksCount);
+                writer.Write(ProjectBuildStats.ExecutedCustomTasksCount);
+
+                writer.Write(ProjectBuildStats.TotalTasksExecution.Ticks);
+                writer.Write(ProjectBuildStats.TotalCustomTasksExecution.Ticks);
+            }
+            else
+            {
+                writer.Write((byte)0);
+            }
         }
 
         /// <summary>
@@ -93,6 +121,19 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
             projectFile = reader.ReadByte() == 0 ? null : reader.ReadString();
             succeeded = reader.ReadBoolean();
+
+            if (reader.ReadByte() == 1)
+            {
+                ProjectBuildStats = new ProjectBuildStats()
+                {
+                    TotalTasksCount = reader.ReadInt16(),
+                    CustomTasksCount = reader.ReadInt16(),
+                    TotalExecutedTasksCount = reader.ReadInt16(),
+                    ExecutedCustomTasksCount = reader.ReadInt16(),
+                    TotalTasksExecution = TimeSpan.FromTicks(reader.ReadInt64()),
+                    TotalCustomTasksExecution = TimeSpan.FromTicks(reader.ReadInt64()),
+                };
+            }
         }
         #endregion
 
@@ -118,5 +159,9 @@ public override string Message
                 return RawMessage;
             }
         }
+
+        // public int Foo1 { get; set; }
+
+        public ProjectBuildStats? ProjectBuildStats { get; set; }
     }
 }
