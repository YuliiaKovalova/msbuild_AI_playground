diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 371b5c08136..11fbdacba6f 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -84,6 +84,21 @@ public void Dispose()
             Copy.RefreshInternalEnvironmentValues();
         }
 
+        [Fact]
+        public void NoInput()
+        {
+            var task = new Copy
+            {
+                BuildEngine = new MockEngine(true),
+            };
+            task.Execute().ShouldBeTrue();
+            task.CopiedFiles.ShouldNotBeNull();
+            task.CopiedFiles.Length.ShouldBe(0);
+            task.DestinationFiles.ShouldNotBeNull();
+            task.DestinationFiles.Length.ShouldBe(0);
+            task.WroteAtLeastOneFile.ShouldBeFalse();
+        }
+
         /// <summary>
         /// If OnlyCopyIfDifferent is set to "true" then we shouldn't copy over files that
         /// have the same date and time.
@@ -2194,7 +2209,7 @@ public CopyNotHardLink_Tests(ITestOutputHelper testOutputHelper)
     public class CopyHardAndSymbolicLink_Tests
     {
         /// <summary>
-        /// Verify build sucessfully when UseHardlinksIfPossible and UseSymboliclinksIfPossible are true 
+        /// Verify build successfully when UseHardlinksIfPossible and UseSymboliclinksIfPossible are true
         /// </summary>
         [Fact]
         public void CopyWithHardAndSymbolicLinks()
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index bd2e536cb74..9b4ad66b972 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -99,9 +99,10 @@ public Copy()
         /// </summary>
         private const int RetryDelayMillisecondsDefault = 1000;
 
-        [Required]
         public ITaskItem[] SourceFiles { get; set; }
 
+        public ITaskItem[] SourceFolders { get; set; }
+
         public ITaskItem DestinationFolder { get; set; }
 
         /// <summary>
@@ -649,7 +650,15 @@ private bool ValidateInputs()
                 return false;
             }
 
-            // There must be a destinationFolder (either files or directory).
+            // There must be a source (either files or Folders).
+            if (SourceFiles == null && SourceFolders == null)
+            {
+                // TODO: Create new error message.
+                Log.LogErrorWithCodeFromResources("Copy.NeedsDestination", "SourceFiles", "SourceFolders");
+                return false;
+            }
+
+            // There must be a destination (either files or directory).
             if (DestinationFiles == null && DestinationFolder == null)
             {
                 Log.LogErrorWithCodeFromResources("Copy.NeedsDestination", "DestinationFiles", "DestinationFolder");
@@ -663,6 +672,14 @@ private bool ValidateInputs()
                 return false;
             }
 
+            // SourceFolders and DestinationFiles can't be used together.
+            if (SourceFolders != null && DestinationFiles != null)
+            {
+                // TODO: Create new error message.
+                Log.LogErrorWithCodeFromResources("Copy.NeedsDestination", "SourceFolders", "DestinationFiles");
+                return false;
+            }
+
             // If the caller passed in DestinationFiles, then its length must match SourceFiles.
             if (DestinationFiles != null && DestinationFiles.Length != SourceFiles.Length)
             {
@@ -670,7 +687,6 @@ private bool ValidateInputs()
                 return false;
             }
 
-
             if (ErrorIfLinkFails && !UseHardlinksIfPossible && !UseSymboliclinksIfPossible)
             {
                 Log.LogErrorWithCodeFromResources("Copy.ErrorIfLinkFailsSetWithoutLinkOption");
