diff --git a/src/Build/Collections/CopyOnWritePropertyDictionary.cs b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
index 6dbb77fc6f8..f3a4a38ce9f 100644
--- a/src/Build/Collections/CopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
@@ -373,26 +373,12 @@ IEnumerator<KeyValuePair<string, T>> IEnumerable<KeyValuePair<string, T>>.GetEnu
         /// Returns true if the property was in the collection, otherwise false.
         /// </summary>
         internal bool Remove(string name)
-        {
-            return Remove(name, clearIfEmpty: false);
-        }
-
-        /// <summary>
-        /// Removes any property with the specified name.
-        /// Returns true if the property was in the collection, otherwise false.
-        /// </summary>
-        internal bool Remove(string name, bool clearIfEmpty)
         {
             ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
 
             lock (_properties)
             {
-                bool result = _properties.Remove(name);
-                if (clearIfEmpty && _properties.Count == 0)
-                {
-                    _properties.Clear();
-                }
-                return result;
+                return _properties.Remove(name);
             }
         }
 
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index bd43477f604..edf5ddd2d91 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1376,8 +1376,7 @@ public void RemoveMetadata(string metadataName)
             {
                 ProjectInstance.VerifyThrowNotImmutable(_isImmutable);
 
-                // If the metadata was all removed, toss the dictionary
-                _directMetadata?.Remove(metadataName, clearIfEmpty: true);
+                _directMetadata?.Remove(metadataName);
             }
 
             /// <summary>
