diff --git a/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs b/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
index f8089b7337c..43c261e5676 100644
--- a/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
@@ -1,7 +1,10 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Globalization;
 using System.Runtime.InteropServices;
+using System.Threading;
+
 using Microsoft.Build.Evaluation;
 
 using Shouldly;
@@ -246,5 +249,31 @@ public void TryConvertToDoubleGivenString()
             Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
             actual.ShouldBe(10.0);
         }
+
+        [Fact]
+        public void TryConvertToDoubleGivenStringAndLocale()
+        {
+            const string value = "1,2";
+
+            Thread currentThread = Thread.CurrentThread;
+            CultureInfo originalCulture = currentThread.CurrentCulture;
+
+            try
+            {
+                // English South Africa locale uses ',' as decimal separator.
+                // The invariant culture should be used and "1,2" should be 12.0 not 1.2.
+                var cultureEnglishSouthAfrica = CultureInfo.CreateSpecificCulture("en-ZA");
+                currentThread.CurrentCulture = cultureEnglishSouthAfrica;
+                Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
+                actual.ShouldBe(12.0);
+            }
+            finally
+            {
+                // Restore CultureInfo.
+                currentThread.CurrentCulture = originalCulture;
+                CultureInfo.CurrentCulture = originalCulture;
+                CultureInfo.DefaultThreadCurrentCulture = originalCulture;
+            }
+        }
     }
 }
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 3cce3b4184e..d43a58009f4 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -4591,7 +4591,7 @@ internal static bool TryConvertToDouble(object value, out double arg)
                     case int i:
                         arg = i;
                         return true;
-                    case string str when double.TryParse(str, NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out arg):
+                    case string str when double.TryParse(str, NumberStyles.Number | NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out arg):
                         return true;
                     default:
                         arg = 0;
@@ -4728,7 +4728,7 @@ private static bool TryGetArgs(object[] args, out string arg0, out int arg1)
 
             private static bool IsFloatingPointRepresentation(object value)
             {
-                return value is double || (value is string str && double.TryParse(str, NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out double _));
+                return value is double || (value is string str && double.TryParse(str, NumberStyles.Number | NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out double _));
             }
 
             private static bool TryExecuteArithmeticOverload(object[] args, Func<long, long, long> integerOperation, Func<double, double, double> realOperation, out object resultValue)
