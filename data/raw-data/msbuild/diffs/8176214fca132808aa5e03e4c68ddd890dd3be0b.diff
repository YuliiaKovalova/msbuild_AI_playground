diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index d98332159c9..3da36a531ab 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -80,6 +80,7 @@ public void VerifyEventType()
             BuildSubmissionStartedEventArgs buildSubmissionStarted = new(new Dictionary<string, string> { { "Value1", "Value2" } }, ["Path1"], ["TargetName"], BuildRequestDataFlags.ReplaceExistingProjectInstance, 123);
             BuildCheckTracingEventArgs buildCheckTracing = new();
             BuildCanceledEventArgs buildCanceled = new("message", DateTime.UtcNow);
+            WorkerNodeTelemetryEventArgs workerNodeTelemetry = new();
 
             VerifyLoggingPacket(buildFinished, LoggingEventType.BuildFinishedEvent);
             VerifyLoggingPacket(buildStarted, LoggingEventType.BuildStartedEvent);
@@ -116,6 +117,7 @@ public void VerifyEventType()
             VerifyLoggingPacket(buildSubmissionStarted, LoggingEventType.BuildSubmissionStartedEvent);
             VerifyLoggingPacket(buildCheckTracing, LoggingEventType.BuildCheckTracingEvent);
             VerifyLoggingPacket(buildCanceled, LoggingEventType.BuildCanceledEvent);
+            VerifyLoggingPacket(workerNodeTelemetry, LoggingEventType.WorkerNodeTelemetryEvent);
         }
 
         private static BuildEventContext CreateBuildEventContext()
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 8a48bcdb455..f7898f06700 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -565,26 +565,25 @@ public void RoundtripBuildCheckTracingEventArgs()
                     .Select(v => v.TotalSeconds.ToString(CultureInfo.InvariantCulture)).ToCsvString(false));
         }
 
-        [Fact]
-        public void RoundtripWorkerNodeTelemetryEventArgs()
-        {
-            string key1 = "AA";
-            TimeSpan span1 = TimeSpan.FromSeconds(5);
-            string key2 = "b";
-            TimeSpan span2 = TimeSpan.FromSeconds(15);
-            string key3 = "cCc";
-            TimeSpan span3 = TimeSpan.FromSeconds(50);
-
-            Dictionary<string, TimeSpan> stats = new() { { key1, span1 }, { key2, span2 }, { key3, span3 } };
-
-            WorkerNodeTelemetryEventArgs args = new WorkerNodeTelemetryEventArgs(stats);
-
-            Roundtrip(args,
-                e => e.TracingData.InfrastructureTracingData.Keys.Count.ToString(),
-                e => e.TracingData.InfrastructureTracingData.Keys.ToCsvString(false),
-                e => e.TracingData.InfrastructureTracingData.Values
-                    .Select(v => v.TotalSeconds.ToString(CultureInfo.InvariantCulture)).ToCsvString(false));
-        }
+        // Let's not have this event in the binlog at all
+        //[Fact]
+        //public void RoundtripWorkerNodeTelemetryEventArgs()
+        //{
+        //    WorkerNodeTelemetryData td = new WorkerNodeTelemetryData(
+        //        new Dictionary<string, TaskExecutionStats>()
+        //        {
+        //            { "task1", new TaskExecutionStats(TimeSpan.FromMinutes(1), 5) },
+        //            { "task2", new TaskExecutionStats(TimeSpan.Zero, 0) },
+        //            { "task3", new TaskExecutionStats(TimeSpan.FromTicks(1234), 12) }
+        //        },
+        //        new Dictionary<string, bool>() { { "target1", false }, { "target2", true }, });
+
+        //    WorkerNodeTelemetryEventArgs args = new WorkerNodeTelemetryEventArgs(td);
+
+        //    Roundtrip(args,
+        //        e => e.WorkerNodeTelemetryData.TasksExecutionData.Select(kp => $"{kp.Key}:{kp.Value.CumulativeExecutionTime.Ticks}:{kp.Value.ExecutionsCount}").OrderBy(k => k).ToCsvString(),
+        //        e => e.WorkerNodeTelemetryData.TargetsExecutionData.Select(kp => $"{kp.Key}:{kp.Value}").OrderBy(k => k).ToCsvString());
+        //}
 
         [Theory]
         [InlineData(true)]
diff --git a/src/Build.UnitTests/TelemetryTests.cs b/src/Build.UnitTests/TelemetryTests.cs
index 48fc601e5f3..09e20462c58 100644
--- a/src/Build.UnitTests/TelemetryTests.cs
+++ b/src/Build.UnitTests/TelemetryTests.cs
@@ -10,14 +10,18 @@
 using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
+using Xunit.Abstractions;
 
 namespace Microsoft.Build.Engine.UnitTests
 {
     public class TelemetryTests
     {
-        public TelemetryTests()
+        private readonly ITestOutputHelper _output;
+
+        public TelemetryTests(ITestOutputHelper output)
         {
             ProjectBuildStats.DurationThresholdForTopN = TimeSpan.Zero;
+            _output = output;
         }
 
         private sealed class ProjectFinishedCapturingLogger : ILogger
@@ -46,50 +50,47 @@ public void Shutdown()
         [Fact]
         public void WorkerNodeTelemetryCollection_BasicTarget()
         {
-            var tstLogger = new ProjectFinishedCapturingLogger();
+            WorkerNodeTelemetryData? workerNodeTelemetryData = null;
+            InternalTelemeteryConsumingLogger.TestOnly_InternalTelemetryAggregted += dt => workerNodeTelemetryData = dt;
+
             var testProject = """
-                        <Project>
-                            <Target Name="Build">
-                                <Message Text="Hello World"/>
-                                <CreateItem Include="foo.bar">
-                                    <Output TaskParameter="Include" ItemName="I" />
-                                </CreateItem>
-                                <Message Text="Bye World"/>
-                            </Target>
-                        </Project>
-                """;
-            Helpers.BuildProjectContentUsingBuildManager(testProject, tstLogger,
+                                      <Project>
+                                          <Target Name="Build">
+                                              <Message Text="Hello World"/>
+                                              <CreateItem Include="foo.bar">
+                                                  <Output TaskParameter="Include" ItemName="I" />
+                                              </CreateItem>
+                                              <Message Text="Bye World"/>
+                                          </Target>
+                                      </Project>
+                              """;
+
+            MockLogger logger = new MockLogger(_output);
+            Helpers.BuildProjectContentUsingBuildManager(testProject, logger,
                 new BuildParameters() { IsTelemetryEnabled = true }).OverallResult.ShouldBe(BuildResultCode.Success);
 
-            tstLogger.ProjectFinishedEventArgsReceived.Count.ShouldBe(1);
-            ProjectBuildStats? stats = tstLogger.ProjectFinishedEventArgsReceived[0].ProjectBuildStats;
-            stats.ShouldNotBeNull();
-            ((int)stats.CustomTargetsCount).ShouldBe(1);
-            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(1);
-            ((int)stats.TotalTargetsCount).ShouldBe(1);
-            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(1);
-
-            ((int)stats.TotalTasksCount).ShouldBeGreaterThan(2);
-            ((int)stats.TotalTasksExecutionsCount).ShouldBe(3);
-            ((int)stats.TotalExecutedTasksCount).ShouldBe(2);
-            ((int)stats.CustomTasksCount).ShouldBe(0);
-            ((int)stats.CustomTasksExecutionsCount).ShouldBe(0);
-            ((int)stats.ExecutedCustomTasksCount).ShouldBe(0);
-            stats.TotalTasksExecution.ShouldBeGreaterThan(TimeSpan.Zero);
-            stats.TotalCustomTasksExecution.ShouldBe(TimeSpan.Zero);
-
-            stats.TopTasksByCumulativeExecution.Count.ShouldNotBe(0);
-            foreach (var st in stats.TopTasksByCumulativeExecution)
-            {
-                st.Key.ShouldBeGreaterThan(TimeSpan.Zero);
-                (st.Value.EndsWith("Message") || st.Value.EndsWith("CreateItem")).ShouldBeTrue($"Only specified tasks expected. Encountered: {st.Value}");
-            }
+            workerNodeTelemetryData!.ShouldNotBeNull();
+            workerNodeTelemetryData.TargetsExecutionData.ShouldContainKey("C:Build");
+            workerNodeTelemetryData.TargetsExecutionData["C:Build"].ShouldBeTrue();
+            workerNodeTelemetryData.TargetsExecutionData.Keys.Count.ShouldBe(1);
+
+            workerNodeTelemetryData.TasksExecutionData.Keys.Count.ShouldBeGreaterThan(2);
+            ((int)workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.Message"].ExecutionsCount).ShouldBe(2);
+            workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.Message"].CumulativeExecutionTime.ShouldBeGreaterThan(TimeSpan.Zero);
+            ((int)workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.CreateItem"].ExecutionsCount).ShouldBe(1);
+            workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.CreateItem"].CumulativeExecutionTime.ShouldBeGreaterThan(TimeSpan.Zero);
+
+            workerNodeTelemetryData.TasksExecutionData.Keys.ShouldAllBe(k => !k.StartsWith("C:") && !k.StartsWith("N:"));
+            workerNodeTelemetryData.TasksExecutionData.Values
+                .Count(v => v.CumulativeExecutionTime > TimeSpan.Zero || v.ExecutionsCount > 0).ShouldBe(2);
         }
 
         [Fact]
         public void WorkerNodeTelemetryCollection_CustomTargetsAndTasks()
         {
-            var tstLogger = new ProjectFinishedCapturingLogger();
+            WorkerNodeTelemetryData? workerNodeTelemetryData = null;
+            InternalTelemeteryConsumingLogger.TestOnly_InternalTelemetryAggregted += dt => workerNodeTelemetryData = dt;
+
             var testProject = """
                                       <Project>
                                       <UsingTask
@@ -135,33 +136,35 @@ public void WorkerNodeTelemetryCollection_CustomTargetsAndTasks()
                                           </Target>
                                       </Project>
                               """;
-            Helpers.BuildProjectContentUsingBuildManager(testProject, tstLogger,
+            MockLogger logger = new MockLogger(_output);
+            Helpers.BuildProjectContentUsingBuildManager(testProject, logger,
                 new BuildParameters() { IsTelemetryEnabled = true }).OverallResult.ShouldBe(BuildResultCode.Success);
 
-            tstLogger.ProjectFinishedEventArgsReceived.Count.ShouldBe(1);
-            ProjectBuildStats? stats = tstLogger.ProjectFinishedEventArgsReceived[0].ProjectBuildStats;
-            stats.ShouldNotBeNull();
-            ((int)stats.CustomTargetsCount).ShouldBe(3);
-            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(2);
-            ((int)stats.TotalTargetsCount).ShouldBe(3);
-            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(2);
-
-            ((int)stats.TotalTasksCount).ShouldBeGreaterThan(2);
-            ((int)stats.TotalTasksExecutionsCount).ShouldBe(6);
-            ((int)stats.TotalExecutedTasksCount).ShouldBe(3);
-            ((int)stats.CustomTasksCount).ShouldBe(2);
-            ((int)stats.CustomTasksExecutionsCount).ShouldBe(2);
-            ((int)stats.ExecutedCustomTasksCount).ShouldBe(1);
-            stats.TotalTasksExecution.ShouldBeGreaterThan(TimeSpan.Zero);
-            stats.TotalCustomTasksExecution.ShouldBeGreaterThan(TimeSpan.Zero);
-
-            stats.TopTasksByCumulativeExecution.Count.ShouldNotBe(0);
-            foreach (var st in stats.TopTasksByCumulativeExecution)
-            {
-                st.Key.ShouldBeGreaterThan(TimeSpan.Zero);
-                (st.Value.EndsWith("Message") || st.Value.EndsWith("CreateItem") || st.Value.EndsWith("Task01")).ShouldBeTrue($"Only specified tasks expected. Encountered: {st.Value}");
-            }
-            stats.TopTasksByCumulativeExecution.Any(t => t.Value.Equals("Custom:Task01")).ShouldBeTrue($"Expected to encounter custom task. Tasks: {stats.TopTasksByCumulativeExecution.Select(t => t.Value).ToCsvString()}");
+            workerNodeTelemetryData!.ShouldNotBeNull();
+            workerNodeTelemetryData.TargetsExecutionData.ShouldContainKey("C:Build");
+            workerNodeTelemetryData.TargetsExecutionData["C:Build"].ShouldBeTrue();
+            workerNodeTelemetryData.TargetsExecutionData.ShouldContainKey("C:BeforeBuild");
+            workerNodeTelemetryData.TargetsExecutionData["C:BeforeBuild"].ShouldBeTrue();
+            workerNodeTelemetryData.TargetsExecutionData.ShouldContainKey("C:NotExecuted");
+            workerNodeTelemetryData.TargetsExecutionData["C:NotExecuted"].ShouldBeFalse();
+            workerNodeTelemetryData.TargetsExecutionData.Keys.Count.ShouldBe(3);
+
+            workerNodeTelemetryData.TasksExecutionData.Keys.Count.ShouldBeGreaterThan(2);
+            ((int)workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.Message"].ExecutionsCount).ShouldBe(3);
+            workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.Message"].CumulativeExecutionTime.ShouldBeGreaterThan(TimeSpan.Zero);
+            ((int)workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.CreateItem"].ExecutionsCount).ShouldBe(1);
+            workerNodeTelemetryData.TasksExecutionData["Microsoft.Build.Tasks.CreateItem"].CumulativeExecutionTime.ShouldBeGreaterThan(TimeSpan.Zero);
+
+            ((int)workerNodeTelemetryData.TasksExecutionData["C:Task01"].ExecutionsCount).ShouldBe(2);
+            workerNodeTelemetryData.TasksExecutionData["C:Task01"].CumulativeExecutionTime.ShouldBeGreaterThan(TimeSpan.Zero);
+
+            ((int)workerNodeTelemetryData.TasksExecutionData["C:Task02"].ExecutionsCount).ShouldBe(0);
+            workerNodeTelemetryData.TasksExecutionData["C:Task02"].CumulativeExecutionTime.ShouldBe(TimeSpan.Zero);
+
+            workerNodeTelemetryData.TasksExecutionData.Values
+                .Count(v => v.CumulativeExecutionTime > TimeSpan.Zero || v.ExecutionsCount > 0).ShouldBe(3);
+
+            workerNodeTelemetryData.TasksExecutionData.Keys.ShouldAllBe(k => !k.StartsWith("N:"));
         }
     }
 }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index c4a13d02dca..11c61497bf1 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2949,6 +2949,25 @@ private ILoggingService CreateLoggingService(
                 forwardingLoggers = forwardingLoggers?.Concat(forwardingLogger) ?? forwardingLogger;
             }
 
+            if (_buildParameters.IsTelemetryEnabled)
+            {
+                // We do want to dictate our own forwarding logger (otherwise CentralForwardingLogger with minimum transferred importance MessageImportnace.Low is used)
+                // In the future we might optimize for single, in-node build scenario - where forwarding logger is not needed (but it's just quick pass-through)
+                LoggerDescription forwardingLoggerDescription = new LoggerDescription(
+                    loggerClassName: typeof(InternalTelemeteryForwardingLogger).FullName,
+                    loggerAssemblyName: typeof(InternalTelemeteryForwardingLogger).GetTypeInfo().Assembly.GetName().FullName,
+                    loggerAssemblyFile: null,
+                    loggerSwitchParameters: null,
+                    verbosity: LoggerVerbosity.Quiet);
+
+                ILogger internalTelemetryLogger =
+                    new InternalTelemeteryConsumingLogger();
+
+                ForwardingLoggerRecord[] forwardingLogger = { new ForwardingLoggerRecord(internalTelemetryLogger, forwardingLoggerDescription) };
+
+                forwardingLoggers = forwardingLoggers?.Concat(forwardingLogger) ?? forwardingLogger;
+            }
+
             try
             {
                 if (loggers != null)
diff --git a/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs b/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
index 17d2e672250..a0658f28aa0 100644
--- a/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
+++ b/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
@@ -87,6 +87,12 @@ public void Initialize(IEventSource eventSource)
                 // Telemetry events aren't part of "all" so they need to be forwarded separately
                 eventSource2.TelemetryLogged += EventSource_AnyEventRaised;
             }
+
+            if (eventSource is IEventSource5 eventSource5)
+            {
+                // Internal telemetry events aren't part of "all" so they need to be forwarded separately
+                eventSource5.WorkerNodeTelemetryLogged += EventSource_AnyEventRaised;
+            }
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 0640c2082f0..e61db2b91b2 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -18,7 +18,7 @@ internal sealed class EventSourceSink :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IEventSource4, IBuildEventSink
+        IEventSource5, IBuildEventSink
     {
         #region Events
 
@@ -103,6 +103,11 @@ internal sealed class EventSourceSink :
         /// This event is raised to log BuildCheck events.
         /// </summary>
         internal event BuildCheckEventHandler? BuildCheckEventRaised;
+
+        /// <summary>
+        /// this event is raised to log internal telemetry data from worker nodes.
+        /// </summary>
+        public event WorkerNodeTelemetryEventHandler? WorkerNodeTelemetryLogged;
         #endregion
 
         #region Properties
@@ -263,7 +268,6 @@ public void Consume(BuildEventArgs buildEvent)
                     RaiseEvent(buildFinishedEvent, args => BuildFinished?.Invoke(null, args), BuildFinishedFollowUp);
                     break;
                 case BuildCanceledEventArgs buildCanceledEvent:
-
                     RaiseEvent(buildCanceledEvent, args => StatusEventRaised?.Invoke(null, args), RaiseAnyEvent);
                     break;
                 case CustomBuildEventArgs customBuildEvent:
@@ -284,6 +288,9 @@ public void Consume(BuildEventArgs buildEvent)
                 case BuildCheckEventArgs buildCheckEvent:
                     RaiseEvent(buildCheckEvent, args => BuildCheckEventRaised?.Invoke(null, args), RaiseAnyEvent);
                     break;
+                case WorkerNodeTelemetryEventArgs workerNodeTelemetryEvent:
+                    RaiseEvent(workerNodeTelemetryEvent, args => WorkerNodeTelemetryLogged?.Invoke(null, args), null);
+                    break;
 
                 default:
                     ErrorUtilities.ThrowInternalError("Unknown event args type.");
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 8be7bc50114..0cbe089052e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1159,6 +1159,7 @@ private async Task<BuildResult> BuildProject()
 
             try
             {
+
                 HandleProjectStarted(buildCheckManager);
 
                 // Make sure to extract known immutable folders from properties and register them for fast up-to-date check
diff --git a/src/Build/Telemetry/ITelemetryCollector.cs b/src/Build/Telemetry/ITelemetryCollector.cs
index 138055151fc..78f36e586fc 100644
--- a/src/Build/Telemetry/ITelemetryCollector.cs
+++ b/src/Build/Telemetry/ITelemetryCollector.cs
@@ -61,41 +61,23 @@ public void ShutdownComponent()
         _instance = null;
     }
 
-    public class TelemetryCollector : ITelemetryCollector, IWorkerNodeTelemetryData
+    public class TelemetryCollector : ITelemetryCollector
     {
-        private readonly Dictionary<string, TaskExecutionStats> _tasksExecutionData = new();
-        private readonly Dictionary<string, bool> _targetsExecutionData = new();
+        private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
 
         // in future, this might ber per event type
         public bool IsTelemetryCollected => true;
 
-        Dictionary<string, TaskExecutionStats> IWorkerNodeTelemetryData.TasksExecutionData => _tasksExecutionData;
-
-        Dictionary<string, bool> IWorkerNodeTelemetryData.TargetsExecutionData => _targetsExecutionData;
-
         public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom, bool isFromNugetCache)
         {
             name = GetName(name, isCustom, isFromNugetCache);
-
-            TaskExecutionStats taskExecutionStats;
-            if (!_tasksExecutionData.TryGetValue(name, out taskExecutionStats))
-            {
-                taskExecutionStats = new(cumulativeExectionTime, executionsCount);
-                _tasksExecutionData[name] = taskExecutionStats;
-            }
-            else
-            {
-                taskExecutionStats.CumulativeExecutionTime += cumulativeExectionTime;
-                taskExecutionStats.ExecutionsCount += executionsCount;
-            }
+            _workerNodeTelemetryData.AddTask(name, cumulativeExectionTime, executionsCount);
         }
 
         public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isFromNugetCache)
         {
             name = GetName(name, isCustom, isFromNugetCache);
-            _targetsExecutionData[name] =
-                // we just need to store if it was ever executed
-                wasExecuted || (_targetsExecutionData.TryGetValue(name, out bool wasAlreadyExecuted) && wasAlreadyExecuted);
+            _workerNodeTelemetryData.AddTarget(name, wasExecuted);
         }
 
         private static string GetName(string name, bool isCustom, bool isFromNugetCache)
@@ -115,7 +97,7 @@ private static string GetName(string name, bool isCustom, bool isFromNugetCache)
 
         public void FinalizeProcessing(LoggingContext loggingContext)
         {
-            WorkerNodeTelemetryEventArgs telemetryArgs = new(this)
+            WorkerNodeTelemetryEventArgs telemetryArgs = new(_workerNodeTelemetryData)
                 { BuildEventContext = loggingContext.BuildEventContext };
             loggingContext.LogBuildEvent(telemetryArgs);
         }
diff --git a/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs b/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs
new file mode 100644
index 00000000000..1e16466b567
--- /dev/null
+++ b/src/Framework.UnitTests/WorkerNodeTelemetryEventArgs_Tests.cs
@@ -0,0 +1,45 @@
+﻿﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.Framework.UnitTests
+{
+    public class WorkerNodeTelemetryEventArgs_Tests
+    {
+        [Fact]
+        public void SerializationDeserializationTest()
+        {
+            WorkerNodeTelemetryData td = new WorkerNodeTelemetryData(
+                new Dictionary<string, TaskExecutionStats>()
+                {
+                        { "task1", new TaskExecutionStats(TimeSpan.FromMinutes(1), 5) },
+                        { "task2", new TaskExecutionStats(TimeSpan.Zero, 0) },
+                        { "task3", new TaskExecutionStats(TimeSpan.FromTicks(1234), 12) }
+                },
+                new Dictionary<string, bool>() { { "target1", false }, { "target2", true }, });
+
+            WorkerNodeTelemetryEventArgs args = new WorkerNodeTelemetryEventArgs(td);
+
+            using MemoryStream stream = new MemoryStream();
+            using BinaryWriter bw = new BinaryWriter(stream);
+            args.WriteToStream(bw);
+
+            stream.Position = 0;
+            using BinaryReader br = new BinaryReader(stream);
+            WorkerNodeTelemetryEventArgs argDeserialized = new();
+            int packetVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
+
+            argDeserialized.CreateFromStream(br, packetVersion);
+            argDeserialized.WorkerNodeTelemetryData.TargetsExecutionData.ShouldBeEquivalentTo(td.TargetsExecutionData);
+            argDeserialized.WorkerNodeTelemetryData.TasksExecutionData.ShouldBeEquivalentTo(td.TasksExecutionData);
+        }
+    }
+}
diff --git a/src/Framework/IEventSource5.cs b/src/Framework/IEventSource5.cs
new file mode 100644
index 00000000000..6ce4f300c30
--- /dev/null
+++ b/src/Framework/IEventSource5.cs
@@ -0,0 +1,19 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Framework
+{
+
+    /// <summary>
+    /// Type of handler for internal telemetry from worker node
+    /// </summary>
+    internal delegate void WorkerNodeTelemetryEventHandler(object? sender, WorkerNodeTelemetryEventArgs e);
+
+    internal interface IEventSource5 : IEventSource4
+    {
+        /// <summary>
+        /// this event is raised to when internal telemetry from worker node is logged.
+        /// </summary>
+        event WorkerNodeTelemetryEventHandler WorkerNodeTelemetryLogged;
+    }
+}
diff --git a/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs b/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
index b6f79b6dce2..a3ccae6b16a 100644
--- a/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
+++ b/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
@@ -7,6 +7,7 @@
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using System.Xml.Linq;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 
@@ -33,12 +34,47 @@ public WorkerNodeTelemetryData(Dictionary<string, TaskExecutionStats> tasksExecu
         TargetsExecutionData = targetsExecutionData;
     }
 
+    public void Add(IWorkerNodeTelemetryData other)
+    {
+        foreach (var task in other.TasksExecutionData)
+        {
+            AddTask(task.Key, task.Value.CumulativeExecutionTime, task.Value.ExecutionsCount);
+        }
+
+        foreach (var target in other.TargetsExecutionData)
+        {
+            AddTarget(target.Key, target.Value);
+        }
+    }
+
+    public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount)
+    {
+        TaskExecutionStats taskExecutionStats;
+        if (!TasksExecutionData.TryGetValue(name, out taskExecutionStats))
+        {
+            taskExecutionStats = new(cumulativeExectionTime, executionsCount);
+            TasksExecutionData[name] = taskExecutionStats;
+        }
+        else
+        {
+            taskExecutionStats.CumulativeExecutionTime += cumulativeExectionTime;
+            taskExecutionStats.ExecutionsCount += executionsCount;
+        }
+    }
+
+    public void AddTarget(string name, bool wasExecuted)
+    {
+        TargetsExecutionData[name] =
+            // we just need to store if it was ever executed
+            wasExecuted || (TargetsExecutionData.TryGetValue(name, out bool wasAlreadyExecuted) && wasAlreadyExecuted);
+    }
+
     public WorkerNodeTelemetryData()
-        : this([], [])
+        : this(new Dictionary<string, TaskExecutionStats>(StringComparer.OrdinalIgnoreCase), new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase))
     { }
 
-    public Dictionary<string, TaskExecutionStats> TasksExecutionData { get; private init; }
-    public Dictionary<string, bool> TargetsExecutionData { get; private init; }
+    public Dictionary<string, TaskExecutionStats> TasksExecutionData { get; }
+    public Dictionary<string, bool> TargetsExecutionData { get; }
 }
 
 internal sealed class WorkerNodeTelemetryEventArgs(IWorkerNodeTelemetryData workerNodeTelemetryData) : BuildEventArgs
@@ -63,6 +99,7 @@ internal override void WriteToStream(BinaryWriter writer)
         foreach (KeyValuePair<string, bool> entry in WorkerNodeTelemetryData.TargetsExecutionData)
         {
             writer.Write(entry.Key);
+            writer.Write(entry.Value);
         }
     }
 
@@ -80,9 +117,68 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         Dictionary<string, bool> targetsExecutionData = new();
         for (int i = 0; i < count; i++)
         {
-            targetsExecutionData.Add(reader.ReadString(), true);
+            targetsExecutionData.Add(reader.ReadString(), reader.ReadBoolean());
         }
 
         WorkerNodeTelemetryData = new WorkerNodeTelemetryData(tasksExecutionData, targetsExecutionData);
     }
 }
+
+internal sealed class InternalTelemeteryConsumingLogger : ILogger
+{
+    public LoggerVerbosity Verbosity { get; set; }
+    public string? Parameters { get; set; }
+    internal static event Action<WorkerNodeTelemetryData>? TestOnly_InternalTelemetryAggregted; 
+
+    public void Initialize(IEventSource eventSource)
+    {
+        if (eventSource is IEventSource5 eventSource5)
+        {
+            eventSource5.WorkerNodeTelemetryLogged += EventSource5_WorkerNodeTelemetryLogged;
+            eventSource.BuildFinished += EventSourceOnBuildFinished;
+        }
+    }
+
+    private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
+
+    private void EventSource5_WorkerNodeTelemetryLogged(object? sender, WorkerNodeTelemetryEventArgs e)
+    {
+        _workerNodeTelemetryData.Add(e.WorkerNodeTelemetryData);
+    }
+
+    private void EventSourceOnBuildFinished(object sender, BuildFinishedEventArgs e)
+    {
+        TestOnly_InternalTelemetryAggregted?.Invoke(_workerNodeTelemetryData);
+    }
+
+    public void Shutdown()
+    { }
+}
+
+/// <remarks>
+/// Ensure that events filtering is in sync with <see cref="InternalTelemeteryConsumingLogger"/>.
+/// </remarks>
+internal class InternalTelemeteryForwardingLogger : IForwardingLogger
+{
+    public IEventRedirector? BuildEventRedirector { get; set; }
+
+    public int NodeId { get; set; }
+
+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }
+
+    public string? Parameters { get; set; }
+
+    public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);
+
+    public void Initialize(IEventSource eventSource)
+    {
+        if (BuildEventRedirector != null && eventSource is IEventSource5 eventSource5)
+        {
+            eventSource5.WorkerNodeTelemetryLogged += (o,e) => BuildEventRedirector.ForwardEvent(e);
+        }
+    }
+
+    public void Shutdown()
+    {
+    }
+}
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index e80c7e10900..19404285f65 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -667,6 +667,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
                 LoggingEventType.BuildSubmissionStartedEvent => new BuildSubmissionStartedEventArgs(),
                 LoggingEventType.BuildCanceledEvent => new BuildCanceledEventArgs("Build canceled."),
+                LoggingEventType.WorkerNodeTelemetryEvent => new WorkerNodeTelemetryEventArgs(),
 #endif
                 _ => throw new InternalErrorException("Should not get to the default of GetBuildEventArgFromId ID: " + _eventType)
             };
