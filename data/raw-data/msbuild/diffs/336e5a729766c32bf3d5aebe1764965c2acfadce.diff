diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 76f47cb11a4..57c19c4a361 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -75,6 +75,12 @@ public sealed class MSBuildClient
         /// </summary>
         private readonly BinaryWriter _binaryWriter;
 
+        /// <summary>
+        /// Used to estimate the size of the build with an ETW trace.
+        /// </summary>
+        private int _numConsoleWritePackets;
+        private long _sizeOfConsoleWritePackets;
+
         /// <summary>
         /// Public constructor with parameters.
         /// </summary>
@@ -158,8 +164,8 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                 return _exitResult;
             }
 
-            int numConsoleWritePackets = 0;
-            long sizeOfConsoleWritePackets = 0;
+            _numConsoleWritePackets = 0;
+            _sizeOfConsoleWritePackets = 0;
 
             try
             {
@@ -197,12 +203,7 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                             {
                                 if (packet != null)
                                 {
-                                    int size = HandlePacket(packet);
-                                    if (size > -1)
-                                    {
-                                        numConsoleWritePackets++;
-                                        sizeOfConsoleWritePackets += size;
-                                    }
+                                    HandlePacket(packet);
                                 }
                             }
 
@@ -216,7 +217,7 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.Unexpected;
             }
 
-            MSBuildEventSource.Log.MSBuildServerBuildStop(commandLine, numConsoleWritePackets, sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
+            MSBuildEventSource.Log.MSBuildServerBuildStop(commandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
             CommunicationsUtilities.Trace("Build finished.");
             return _exitResult;
         }
@@ -359,17 +360,19 @@ private void HandlePacketPumpError(MSBuildClientPacketPump packetPump)
         /// <summary>
         /// Dispatches the packet to the correct handler.
         /// </summary>
-        private int HandlePacket(INodePacket packet)
+        private void HandlePacket(INodePacket packet)
         {
             switch (packet.Type)
             {
                 case NodePacketType.ServerNodeConsoleWrite:
                     ServerNodeConsoleWrite writePacket = (packet as ServerNodeConsoleWrite)!;
                     HandleServerNodeConsoleWrite(writePacket);
-                    return writePacket.Text.Length;
+                    _numConsoleWritePackets++;
+                    _sizeOfConsoleWritePackets += writePacket.Text.Length;
+                    break;
                 case NodePacketType.ServerNodeBuildResult:
                     HandleServerNodeBuildResult((ServerNodeBuildResult)packet);
-                    return -1;
+                    break;
                 default: throw new InvalidOperationException($"Unexpected packet type {packet.GetType().Name}");
             }
         }
