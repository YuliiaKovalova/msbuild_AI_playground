diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index 6fe5e032d8d..49b5eef3b98 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -391,7 +391,7 @@ internal string GetUniqueProjectName()
             if (_uniqueProjectName == null)
             {
                 // EtpSubProject and Venus projects have names that are already unique.  No need to prepend the SLN folder.
-                if ((ProjectType == SolutionProjectType.WebProject) || (ProjectType == SolutionProjectType.EtpSubProject))
+                if (ProjectType is SolutionProjectType.WebProject or SolutionProjectType.EtpSubProject)
                 {
                     _uniqueProjectName = CleanseProjectName(ProjectName);
                 }
@@ -430,7 +430,7 @@ internal string GetOriginalProjectName()
             if (_originalProjectName == null)
             {
                 // EtpSubProject and Venus projects have names that are already unique.  No need to prepend the SLN folder.
-                if ((ProjectType == SolutionProjectType.WebProject) || (ProjectType == SolutionProjectType.EtpSubProject))
+                if (ProjectType is SolutionProjectType.WebProject or SolutionProjectType.EtpSubProject)
                 {
                     _originalProjectName = ProjectName;
                 }
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 8b47c205990..09f5183121b 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -359,10 +359,9 @@ internal static void GetSolutionFileAndVisualStudioMajorVersions(TextReader read
                 }
                 else if (lineSpan.StartsWith(slnFileVSVLinePrefix.AsSpan(), StringComparison.Ordinal))
                 {
-                    Version visualStudioVersion = ParseVisualStudioVersion(line.AsSpan());
-                    if (visualStudioVersion != null)
+                    if (ParseVisualStudioVersion(line.AsSpan()) is { Major: int major })
                     {
-                        visualStudioMajorVersion = visualStudioVersion.Major;
+                        visualStudioMajorVersion = major;
                     }
                 }
             }
@@ -403,7 +402,7 @@ private void ParseSolutionFilter(string solutionFilterFile)
                     _solutionFilter.Add(FileUtilities.FixFilePath(project.GetString()));
                 }
             }
-            catch (Exception e) when (e is JsonException || e is KeyNotFoundException || e is InvalidOperationException)
+            catch (Exception e) when (e is JsonException or KeyNotFoundException or InvalidOperationException)
             {
                 ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                     false, /* Just throw the exception */
@@ -425,7 +424,7 @@ internal static string ParseSolutionFromSolutionFilter(string solutionFilterFile
                 solution = text.RootElement.GetProperty("solution");
                 return FileUtilities.GetFullPath(solution.GetProperty("path").GetString(), Path.GetDirectoryName(solutionFilterFile));
             }
-            catch (Exception e) when (e is JsonException || e is KeyNotFoundException || e is InvalidOperationException)
+            catch (Exception e) when (e is JsonException or KeyNotFoundException or InvalidOperationException)
             {
                 ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                     false, /* Just throw the exception */
@@ -1378,15 +1377,11 @@ internal void ParseNestedProjects()
             do
             {
                 string str = ReadLine();
-                if ((str == null) || (str == "EndGlobalSection"))
-                {
-                    break;
-                }
 
-                // Ignore empty line or comment
-                if (String.IsNullOrWhiteSpace(str) || str[0] == CommentStartChar)
+                // Ignore EOF, empty line, end section and comment.
+                if (str is null or { Length: 0 } or "EndGlobalSection" || str[0] == CommentStartChar)
                 {
-                    continue;
+                    break;
                 }
 
                 Match match = s_crackPropertyLine.Value.Match(str);
