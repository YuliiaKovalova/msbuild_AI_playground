diff --git a/src/MSBuild.UnitTests/LiveLogger_Tests.cs b/src/MSBuild.UnitTests/LiveLogger_Tests.cs
index 22d3280622a..93c9b0a6596 100644
--- a/src/MSBuild.UnitTests/LiveLogger_Tests.cs
+++ b/src/MSBuild.UnitTests/LiveLogger_Tests.cs
@@ -15,6 +15,7 @@ public class LiveLogger_Tests : IEventSource, IDisposable
     {
         private const int _nodeCount = 8;
         private const int _terminalWidth = 80;
+        private const int _terminalHeight = 40;
         private const string _eventSender = "Test";
         private const string _projectFile = @"C:\src\project.proj";
 
@@ -26,7 +27,7 @@ public class LiveLogger_Tests : IEventSource, IDisposable
 
         public LiveLogger_Tests()
         {
-            _mockTerminal = new MockTerminal(_terminalWidth);
+            _mockTerminal = new MockTerminal(_terminalWidth, _terminalHeight);
             _liveLogger = new LiveLogger(_mockTerminal);
 
             _liveLogger.Initialize(this, _nodeCount);
diff --git a/src/MSBuild.UnitTests/MockTerminal.cs b/src/MSBuild.UnitTests/MockTerminal.cs
index c4f5ee7d5d2..61311703bfb 100644
--- a/src/MSBuild.UnitTests/MockTerminal.cs
+++ b/src/MSBuild.UnitTests/MockTerminal.cs
@@ -14,6 +14,7 @@ namespace Microsoft.Build.UnitTests
     internal sealed class MockTerminal : ITerminal
     {
         private readonly int _width;
+        private readonly int _height;
 
         /// <summary>
         /// Contains output lines written to the terminal.
@@ -23,9 +24,10 @@ internal sealed class MockTerminal : ITerminal
         private StringBuilder _bufferedOutput = new();
         private bool _isBuffering = false;
 
-        public MockTerminal(int width)
+        public MockTerminal(int width, int height)
         {
             _width = width;
+            _height = height;
             _outputLines.Add("");
         }
 
@@ -69,6 +71,9 @@ private void AddOutput(string text)
 
         #region ITerminal implementation
 
+        public int Width => _width;
+        public int Height => _height;
+
         public void BeginUpdate()
         {
             if (_isBuffering)
diff --git a/src/MSBuild/LiveLogger/ITerminal.cs b/src/MSBuild/LiveLogger/ITerminal.cs
index 63e310aff72..11ef5e05647 100644
--- a/src/MSBuild/LiveLogger/ITerminal.cs
+++ b/src/MSBuild/LiveLogger/ITerminal.cs
@@ -10,6 +10,16 @@ namespace Microsoft.Build.Logging.LiveLogger;
 /// </summary>
 internal interface ITerminal : IDisposable
 {
+    /// <summary>
+    /// Width of terminal buffer
+    /// </summary>
+    int Width { get; }
+
+    /// <summary>
+    /// Height of terminal buffer
+    /// </summary>
+    int Height { get; }
+
     /// <summary>
     /// Starts buffering the text passed via the <c>Write*</c> methods.
     /// </summary>
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index d6d9a1bae97..52549f001ad 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
+
 using System.Text;
 using System.Threading;
 using Microsoft.Build.Framework;
@@ -100,7 +101,7 @@ public override string ToString()
     /// <summary>
     /// What is currently displaying in Nodes section as strings representing per-node console output.
     /// </summary>
-    private NodesFrame _currentFrame = new(Array.Empty<NodeStatus>());
+    private NodesFrame _currentFrame = new(Array.Empty<NodeStatus>(), 0, 0);
 
     /// <summary>
     /// The <see cref="Terminal"/> to write console output to.
@@ -418,12 +419,19 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
     /// </summary>
     private void DisplayNodes()
     {
-        NodesFrame newFrame = new NodesFrame(_nodes);
+        NodesFrame newFrame = new NodesFrame(_nodes, width: Terminal.Width, height: Terminal.Height);
+
+        // Do not render delta but clear everything is Terminal width or height have changed
+        if (newFrame.Width != _currentFrame.Width || newFrame.Height != _currentFrame.Height)
+        {
+            EraseNodes();
+        }
+
         string rendered = newFrame.Render(_currentFrame);
 
         // Move cursor back to 1st line of nodes
-        Console.WriteLine($"\x1b[{_currentFrame.NodesCount + 1}F");
-        Console.Write(rendered);
+        Terminal.WriteLine($"\x1b[{_currentFrame.NodesCount + 1}F");
+        Terminal.Write(rendered);
 
         _currentFrame = newFrame;
     }
@@ -437,8 +445,8 @@ private void EraseNodes()
         {
             return;
         }
-        Console.WriteLine($"\x1b[{_currentFrame.NodesCount + 1}F");
-        Console.Write($"\x1b[0J");
+        Terminal.WriteLine($"\x1b[{_currentFrame.NodesCount + 1}F");
+        Terminal.Write($"\x1b[0J");
         _currentFrame.Clear();
     }
 
@@ -560,12 +568,16 @@ public void Shutdown()
     private class NodesFrame
     {
         private readonly List<string> _nodeStrings = new();
-        private StringBuilder _renderBuilder = new();
+        private readonly StringBuilder _renderBuilder = new();
 
+        public int Width { get; }
+        public int Height { get; }
         public int NodesCount { get; private set; }
 
-        public NodesFrame(NodeStatus?[] nodes)
+        public NodesFrame(NodeStatus?[] nodes, int width, int height)
         {
+            Width = width;
+            Height = height;
             Init(nodes);
         }
 
@@ -599,6 +611,13 @@ private void Init(NodeStatus?[] nodes)
                     _nodeStrings.Add(str);
                 }
                 i++;
+
+                // We cant output more than what fits on screen
+                // -2 because cursor command F cant reach, in Windows Terminal, very 1st line, and last line is empty caused by very last WriteLine
+                if (i >= Height - 2)
+                {
+                    break;
+                }
             }
 
             NodesCount = i;
@@ -606,15 +625,16 @@ private void Init(NodeStatus?[] nodes)
 
         private ReadOnlySpan<char> FitToWidth(ReadOnlySpan<char> input)
         {
-            return input.Slice(0, Math.Min(input.Length, Console.BufferWidth - 1));
+            return input.Slice(0, Math.Min(input.Length, Width - 1));
         }
 
         /// <summary>
-        /// Render VT100 string to update current to next frame.
+        /// Render VT100 string to update from current to next frame.
         /// </summary>
         public string Render(NodesFrame previousFrame)
         {
             StringBuilder sb = _renderBuilder;
+            bool forceFullRefresh = previousFrame.Width != Width || previousFrame.Height != Height;
             sb.Clear();
 
             int i = 0;
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
index 05909c5c94f..a0bc269d3bb 100644
--- a/src/MSBuild/LiveLogger/Terminal.cs
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -26,6 +26,12 @@ internal sealed class Terminal : ITerminal
     /// </summary>
     private bool _isBuffering = false;
 
+    /// <inheritdoc/>
+    public int Height => Console.BufferHeight;
+
+    /// <inheritdoc/>
+    public int Width => Console.BufferWidth;
+
     public Terminal()
     {
         _originalOutputEncoding = Console.OutputEncoding;
@@ -98,7 +104,7 @@ public void WriteLine(ReadOnlySpan<char> text)
     /// <inheritdoc/>
     public void WriteLineFitToWidth(ReadOnlySpan<char> input)
     {
-        WriteLine(input.Slice(0, Math.Min(input.Length, Console.BufferWidth - 1)));
+        WriteLine(input.Slice(0, Math.Min(input.Length, Width - 1)));
     }
 
     /// <inheritdoc/>
