diff --git a/src/Tasks.UnitTests/Hash_Tests.cs b/src/Tasks.UnitTests/Hash_Tests.cs
index 2ad2e4e84e1..9d0aed2e921 100644
--- a/src/Tasks.UnitTests/Hash_Tests.cs
+++ b/src/Tasks.UnitTests/Hash_Tests.cs
@@ -86,35 +86,32 @@ public void HashTaskDifferentInputSizesTest()
             string input = "";
             using (var sha1 = System.Security.Cryptography.SHA1.Create())
             {
-                using (var stringBuilder = new ReuseableStringBuilder(sha1.HashSize))
+                var stringBuilder = new System.Text.StringBuilder(sha1.HashSize);
+                MockEngine mockEngine = new();
+                for (int i = 0; i < maxInputSize; i++)
                 {
-                    MockEngine mockEngine = new();
-                    for (int i = 0; i < maxInputSize; i++)
+                    input += "a";
+
+                    Hash hashTask = new()
+                    {
+                        BuildEngine = mockEngine,
+                        ItemsToHash = new ITaskItem[] { new TaskItem(input) },
+                        IgnoreCase = false
+                    };
+                    Assert.True(hashTask.Execute());
+                    string actualHash = hashTask.HashResult;
+
+                    byte[] hash = sha1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input + '\u2028'));
+                    stringBuilder.Clear();
+                    foreach (var b in hash)
                     {
-                        input += "a";
-
-                        Hash hashTask = new()
-                        {
-                            BuildEngine = mockEngine,
-                            ItemsToHash = new ITaskItem[] { new TaskItem(input) },
-                            IgnoreCase = false
-                        };
-                        Assert.True(hashTask.Execute());
-                        string actualHash = hashTask.HashResult;
-
-                        byte[] hash = sha1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input + '\u2028'));
-                        stringBuilder.Clear();
-                        foreach (var b in hash)
-                        {
-                            stringBuilder.Append(b.ToString("x2"));
-                        }
-                        string expectedHash = stringBuilder.ToString();
-
-                        Assert.Equal(expectedHash, actualHash);
+                        stringBuilder.Append(b.ToString("x2"));
                     }
+                    string expectedHash = stringBuilder.ToString();
+
+                    Assert.Equal(expectedHash, actualHash);
                 }
             }
-
         }
 #pragma warning restore CA5350
 
@@ -163,6 +160,5 @@ private string ExecuteHashTask(ITaskItem[] items, bool ignoreCase = false)
 
             return hashTask.HashResult;
         }
-
     }
 }
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index 06176070dd1..b4beb876015 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -21,7 +21,7 @@ public class Hash : TaskExtension
         private static readonly Encoding s_encoding = Encoding.UTF8;
         private static readonly byte[] s_itemSeparatorCharacterBytes = s_encoding.GetBytes(new char[] { ItemSeparatorCharacter });
 
-        // Size of buffer where bytes of the strings are stored until sha1.TransformBlock is be run on them.
+        // Size of buffer where bytes of the strings are stored until sha1.TransformBlock is to be run on them.
         // It is needed to get a balance between amount of costly sha1.TransformBlock calls and amount of allocated memory.
         private const int Sha1BufferSize = 512;
 
@@ -56,7 +56,7 @@ public override bool Execute()
                 using (var sha1 = SHA1.Create())
                 {
                     // Buffer in which bytes of the strings are to be stored until their number reaches the limit size.
-                    // Once the limit is reached, the sha1.TransformBlock is be run on all the bytes of this buffer.
+                    // Once the limit is reached, the sha1.TransformBlock is to be run on all the bytes of this buffer.
                     byte[] sha1Buffer = null;
 
                     // Buffer in which bytes of items' ItemSpec are to be stored.
