diff --git a/src/Shared/TempFileUtilities.cs b/src/Shared/TempFileUtilities.cs
index ae76d151a37..6f560189522 100644
--- a/src/Shared/TempFileUtilities.cs
+++ b/src/Shared/TempFileUtilities.cs
@@ -19,9 +19,10 @@ internal static partial class FileUtilities
         /// Caller must delete when finished.
         /// </summary>
         /// <param name="createDirectory"></param>
-        internal static string GetTemporaryDirectory(bool createDirectory = true)
+        /// <param name="subfolder"></param>
+        internal static string GetTemporaryDirectory(bool createDirectory = true, string subfolder = null)
         {
-            string temporaryDirectory = Path.Combine(Path.GetTempPath(), "Temporary" + Guid.NewGuid().ToString("N"));
+            string temporaryDirectory = Path.Combine(Path.GetTempPath(), "Temporary" + Guid.NewGuid().ToString("N"), subfolder ?? string.Empty);
 
             if (createDirectory)
             {
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 569bd92a66e..9922585a325 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -172,6 +172,15 @@ public TransientTempPath CreateNewTempPath()
             return SetTempPath(folder.Path, true);
         }
 
+        /// <summary>
+        /// Creates a new temp path with a custom subfolder
+        /// </summary>
+        public TransientTempPath CreateNewTempPathWithSubfolder(string subfolder)
+        {
+            var folder = CreateFolder(null, true, subfolder);
+            return SetTempPath(folder.Path, true);
+        }
+
         /// <summary>
         /// Creates a new temp path
         /// Sets all OS temp environment variables to the new path
@@ -266,9 +275,9 @@ public TransientTestFile ExpectFile(TransientTestFolder transientTestFolder, str
         ///     Creates a test variant used to add a unique temporary folder during a test. Will be deleted when the test
         ///     completes.
         /// </summary>
-        public TransientTestFolder CreateFolder(string folderPath = null, bool createFolder = true)
+        public TransientTestFolder CreateFolder(string folderPath = null, bool createFolder = true, string subfolder = null)
         {
-            var folder = WithTransientTestState(new TransientTestFolder(folderPath, createFolder));
+            var folder = WithTransientTestState(new TransientTestFolder(folderPath, createFolder, subfolder));
 
             Assert.True(!(createFolder ^ FileSystems.Default.DirectoryExists(folder.Path)));
 
@@ -605,9 +614,9 @@ public void Delete()
 
     public class TransientTestFolder : TransientTestState
     {
-        public TransientTestFolder(string folderPath = null, bool createFolder = true)
+        public TransientTestFolder(string folderPath = null, bool createFolder = true, string subfolder = null)
         {
-            Path = folderPath ?? FileUtilities.GetTemporaryDirectory(createFolder);
+            Path = folderPath ?? FileUtilities.GetTemporaryDirectory(createFolder, subfolder);
 
             if (createFolder)
             {
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 3bc0657cab2..1df4c606a4e 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -48,6 +48,38 @@ private ExecWrapper PrepareExecWrapper(string command)
             return exec;
         }
 
+        [Fact]
+        public void EscapeParenthesesInPathToGeneratedBatchFile()
+        {
+            using (var testEnvironment = TestEnvironment.Create())
+            {
+                // This test counts files in TEMP. If it uses the system TEMP, some
+                // other process may interfere. Use a private TEMP instead.
+                var newTempPath = testEnvironment.CreateNewTempPathWithSubfolder("hello()wo(rld)").TempPath;
+
+                string tempPath = Path.GetTempPath();
+                Assert.StartsWith(newTempPath, tempPath);
+
+                // Get a count of how many temp files there are right now.
+                string[] tempFiles = Directory.GetFiles(tempPath);
+
+                Assert.Empty(tempFiles);
+
+                // Now run the Exec task on a simple command.
+                Exec exec = PrepareExec("echo Hello World!");
+                bool result = exec.Execute();
+
+                // Get the new count of temp files.
+                tempFiles = Directory.GetFiles(tempPath);
+
+                // Ensure that Exec succeeded.
+                Assert.True(result);
+
+                // Ensure that no files linger in TEMP.
+                Assert.Empty(tempFiles);
+            }
+        }
+
         /// <summary>
         /// Ensures that calling the Exec task does not leave any extra TEMP files
         /// lying around.
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 0e7e76bcf72..591dbdd867c 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -611,21 +611,22 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
 
                     // If for some crazy reason the path has a & character and a space in it
                     // then get the short path of the temp path, which should not have spaces in it
-                    // and then escape the &
                     if (batchFileForCommandLine.Contains("&") && !batchFileForCommandLine.Contains("^&"))
                     {
                         batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
-                        batchFileForCommandLine = batchFileForCommandLine.Replace("&", "^&");
                     }
 
-                    // cmd needs parens to be escaped when executing files with the /C flag.
-                    // consider the case where the user has a parenthesis in ther username (which is uncommon, but valid)
-                    if ((batchFileForCommandLine.Contains("(") && !batchFileForCommandLine.Contains("^(")) || (batchFileForCommandLine.Contains(")") && !batchFileForCommandLine.Contains("^)")))
+                    StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length).Append(batchFileForCommandLine);
+
+                    // Escape any '(', ')', or '&'
+                    for(int i = 1; i < fileName.Length; i++)
                     {
-                        batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
-                        batchFileForCommandLine = batchFileForCommandLine.Replace("(", "^(");
-                        batchFileForCommandLine = batchFileForCommandLine.Replace(")", "^)");
+                        if((fileName[i] == '(' || fileName[i] == ')' || fileName[i] == '&') && fileName[i-1] != '^')
+                        {
+                            fileName.Insert(i++, '^');
+                        }
                     }
+                    batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
                 }
 
                 commandLine.AppendFileNameIfNotNull(batchFileForCommandLine);
