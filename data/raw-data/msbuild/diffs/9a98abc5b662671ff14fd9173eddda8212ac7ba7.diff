diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index bcc1c92ab80..0f6e34c6449 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -1013,12 +1013,6 @@ internal void RaiseBuildEvent(BuildEventArgs buildEvent)
                     _sourceForEvents.HaveLoggedBuildFinishedEvent = false;
                     Assert.False(_sourceForEvents.HaveLoggedBuildFinishedEvent);
                 }
-                else if (buildEvent is BuildCanceledEventArgs)
-                {
-                    Assert.True(_sourceForEvents.HaveLoggedBuildCanceledEvent);
-                    _sourceForEvents.HaveLoggedBuildCanceledEvent = false;
-                    Assert.False(_sourceForEvents.HaveLoggedBuildCanceledEvent);
-                }
             }
         }
         #endregion
diff --git a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
index c6bbf33bb1f..edc8b5c5b84 100644
--- a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
+++ b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
@@ -74,13 +74,6 @@ public bool HaveLoggedBuildFinishedEvent
             set;
         }
 
-        /// <inheritdoc />
-        public bool HaveLoggedBuildCanceledEvent
-        {
-            get;
-            set;
-        }
-
         /// <summary>
         /// This property is ignored by this event sink and relies on the receiver to treat warnings as errors.
         /// </summary>
@@ -153,11 +146,6 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)
                 HaveLoggedBuildFinishedEvent = true;
                 return;
             }
-            else if (buildEvent is BuildCanceledEventArgs)
-            {
-                HaveLoggedBuildFinishedEvent = true;
-                return;
-            }
 
             LogMessagePacket logPacket = new LogMessagePacket(new KeyValuePair<int, BuildEventArgs>(sinkId, buildEvent));
             _sendDataDelegate(logPacket);
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 5b7f6d55e8b..c2760f2bfb2 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -136,13 +136,6 @@ public bool HaveLoggedBuildFinishedEvent
             set;
         }
 
-        /// <inheritdoc />
-        public bool HaveLoggedBuildCanceledEvent
-        {
-            get;
-            set;
-        }
-
         /// <summary>
         /// Should evaluation events include generated metaprojects?
         /// </summary>
@@ -263,8 +256,7 @@ public void Consume(BuildEventArgs buildEvent)
                     RaiseBuildFinishedEvent(null, buildFinishedEvent);
                     break;
                 case BuildCanceledEventArgs buildCanceledEvent:
-                    HaveLoggedBuildCanceledEvent = true;
-                    RaiseBuildCanceledEvent(null, buildCanceledEvent);
+                    RaiseStatusEvent(null, buildCanceledEvent);
                     break;
                 case CustomBuildEventArgs customBuildEvent:
                     RaiseCustomEvent(null, customBuildEvent);
@@ -538,48 +530,6 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build
             RaiseStatusEvent(sender, buildEvent);
         }
 
-        /// <summary>
-        /// Raises a "build canceled" event to all registered loggers.
-        /// </summary>
-        /// <param name="sender">sender of the event</param>
-        /// <param name="buildEvent">BuildCanceledEventArgs</param>
-        /// <exception cref="LoggerException">When EventHandler raises an logger exception the LoggerException is rethrown</exception>
-        /// <exception cref="InternalLoggerException">Any exceptions which are not LoggerExceptions are wrapped in an InternalLoggerException</exception>
-        /// <exception cref="Exception">ExceptionHandling.IsCriticalException exceptions will not be wrapped</exception>
-        private void RaiseBuildCanceledEvent(object sender, BuildCanceledEventArgs buildEvent)
-        {
-            if (StatusEventRaised != null)
-            {
-                try
-                {
-                    StatusEventRaised(sender, buildEvent);
-                }
-                catch (LoggerException)
-                {
-                    // if a logger has failed politely, abort immediately
-                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
-                    // if a fellow logger is throwing in an event handler.
-                    this.UnregisterAllEventHandlers();
-                    throw;
-                }
-                catch (Exception exception)
-                {
-                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
-                    // if a fellow logger is throwing in an event handler.
-                    this.UnregisterAllEventHandlers();
-
-                    if (ExceptionHandling.IsCriticalException(exception))
-                    {
-                        throw;
-                    }
-
-                    InternalLoggerException.Throw(exception, buildEvent, "FatalErrorWhileLogging", false);
-                }
-            }
-
-            RaiseStatusEvent(sender, buildEvent);
-        }
-
         /// <summary>
         /// Raises a "project build started" event to all registered loggers.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 72ca53aea54..583f2b7d99b 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -656,15 +656,6 @@ bool HaveLoggedBuildFinishedEvent
             set;
         }
 
-        /// <summary>
-        /// Has the sink logged the BuildCanceledEvent. This is important to know because we only want to log the build canceled event once
-        /// </summary>
-        bool HaveLoggedBuildCanceledEvent
-        {
-            get;
-            set;
-        }
-
         #endregion
         /// <summary>
         /// Entry point for a sink to consume an event.
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 7b9f566dd38..885647baba0 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1689,24 +1689,6 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
                         }
                     }
                 }
-                else if (eventArg is BuildCanceledEventArgs)
-                {
-                    foreach (KeyValuePair<int, IBuildEventSink> pair in _eventSinkDictionary)
-                    {
-                        IBuildEventSink sink = pair.Value;
-
-                        if (sink != null)
-                        {
-                            if (!sink.HaveLoggedBuildCanceledEvent)
-                            {
-                                sink.Consume(eventArg, (int)pair.Key);
-                            }
-
-                            // Reset the HaveLoggedBuildCanceled event because no one else will be sending a build canceled event to any loggers at this time.
-                            sink.HaveLoggedBuildCanceledEvent = false;
-                        }
-                    }
-                }
             }
 
             TryRaiseProjectFinishedEvent(eventArg);
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 278a0257849..3527d592af5 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -24,6 +24,8 @@ namespace Microsoft.Build.BackEnd.Logging
     /// <remarks>This class is not thread safe.</remarks>
     internal class ParallelConsoleLogger : BaseConsoleLogger
     {
+        private bool _cancellationMessageRendered;
+
         /// <summary>
         /// Associate a (nodeID and project_context_id) to a target framework.
         /// </summary>
@@ -1212,9 +1214,10 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)
                     propertyOutputMap[evaluationKey] = value;
                 }
             }
-            else if (e is BuildCanceledEventArgs buildCanceled)
+            else if (e is BuildCanceledEventArgs buildCanceled && !_cancellationMessageRendered)
             {
-                Console.WriteLine(e.Message ?? string.Empty);
+                _cancellationMessageRendered = true;
+                Console.WriteLine(e.Message);
             }
         }
 
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index ffefa6f7caa..a5126b2d931 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -17,6 +17,8 @@ namespace Microsoft.Build.BackEnd.Logging
 {
     internal class SerialConsoleLogger : BaseConsoleLogger
     {
+        private bool _cancellationMessageRendered;
+
         #region Constructors
 
         /// <summary>
@@ -587,9 +589,10 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)
                     }
                 }
             }
-            else if (e is BuildCanceledEventArgs buildCanceled)
+            else if (e is BuildCanceledEventArgs buildCanceled && !_cancellationMessageRendered)
             {
-                Console.WriteLine(e.Message ?? string.Empty);
+                _cancellationMessageRendered = true;
+                Console.WriteLine(e.Message);
             }
         }
 
diff --git a/src/Framework/BuildCanceledEventArgs.cs b/src/Framework/BuildCanceledEventArgs.cs
index a5152439e9c..9f9e4ac5cf9 100644
--- a/src/Framework/BuildCanceledEventArgs.cs
+++ b/src/Framework/BuildCanceledEventArgs.cs
@@ -13,38 +13,42 @@ public sealed class BuildCanceledEventArgs : BuildStatusEventArgs
     {
         /// <summary>
         /// Constructor to initialize all parameters.
-        /// Sender field cannot be set here and is assumed to be "MSBuild"
+        /// Sender field cannot be set here and is assumed to be "MSBuild".
         /// </summary>
         /// <param name="message">text message</param>
-        public BuildCanceledEventArgs(string? message)
+        public BuildCanceledEventArgs(string message)
             : this(message, DateTime.UtcNow)
-        {
+        { 
         }
 
         /// <summary>
-        /// Constructor which allows the timestamp to be set
+        /// Constructor which allows the timestamp to be set.
         /// </summary>
         /// <param name="message">text message</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
         public BuildCanceledEventArgs(
-            string? message,
+            string message,
             DateTime eventTimestamp)
             : this(message, eventTimestamp, null)
         {
         }
 
         /// <summary>
-        /// Constructor which allows the timestamp to be set
+        /// Constructor which allows the timestamp to be set.
         /// </summary>
         /// <param name="message">text message</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
         /// <param name="messageArgs">message arguments</param>
         public BuildCanceledEventArgs(
-            string? message,
+            string message,
             DateTime eventTimestamp,
             params object[]? messageArgs)
             : base(message, null, "MSBuild", eventTimestamp, messageArgs)
         {
+            if (string.IsNullOrWhiteSpace(message))
+            {
+                throw new InternalErrorException("Message cannot be null or consist only white-space characters.");
+            }
         }
     }
 }
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index b9966996748..c080b11ede3 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -207,8 +207,6 @@ public ProjectContext(BuildEventContext context)
     /// </summary>
     private bool _showCommandLine = false;
 
-    private BuildCanceledEventArgs? _buildCanceledEventAgrs;
-
     private bool _cancellationMessageRendered;
 
     /// <summary>
@@ -455,9 +453,10 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
 
     private void StatusEventRaised(object sender, BuildStatusEventArgs e)
     {
-        if (e is BuildCanceledEventArgs buildCanceledEventArgs)
+        if (e is BuildCanceledEventArgs buildCanceledEventArgs && !_cancellationMessageRendered)
         {
-            _buildCanceledEventAgrs = buildCanceledEventArgs;
+            _cancellationMessageRendered = true;
+            RenderImmediateMessage(e.Message!);
         }
     }
 
@@ -957,18 +956,6 @@ private void ThreadProc()
     /// </summary>
     internal void DisplayNodes()
     {
-        if (_buildCanceledEventAgrs != null)
-        {
-            if (!_cancellationMessageRendered)
-            {
-                string message = _buildCanceledEventAgrs.Message ?? string.Empty;
-                Terminal.WriteLine(message);
-                _cancellationMessageRendered = true;
-            }
-
-            return;
-        }
-
         NodesFrame newFrame = new NodesFrame(_nodes, width: Terminal.Width, height: Terminal.Height);
 
         // Do not render delta but clear everything if Terminal width or height have changed.
