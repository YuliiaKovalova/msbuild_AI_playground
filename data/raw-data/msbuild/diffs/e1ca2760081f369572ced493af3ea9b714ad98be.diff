diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 8a385864cd8..f9dc6429ec1 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -521,7 +521,7 @@ IDictionary ITaskItem2.CloneCustomMetadataEscaped()
             return ((ITaskItem2)_taskItem).CloneCustomMetadataEscaped();
         }
 
-        IEnumerable<KeyValuePair<string, string>> IMetadataContainer.Metadata => _taskItem.Metadata;
+        IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => _taskItem.EnumerateMetadata();
 
         #region IMetadataTable Members
 
@@ -1061,21 +1061,18 @@ internal int DirectMetadataCount
             /// Efficient way to retrieve metadata used by packet serialization
             /// and binary logger.
             /// </summary>
-            public IEnumerable<KeyValuePair<string, string>> Metadata
+            public IEnumerable<KeyValuePair<string, string>> EnumerateMetadata()
             {
-                get
+                // If we have item definitions, call the expensive property that does the right thing.
+                // Otherwise use _directMetadata to avoid allocations caused by DeepClone().
+                var list = _itemDefinitions != null ? MetadataCollection : _directMetadata;
+                if (list != null)
                 {
-                    // If we have item definitions, call the expensive property that does the right thing.
-                    // Otherwise use _directMetadata to avoid allocations caused by DeepClone().
-                    var list = _itemDefinitions != null ? MetadataCollection : _directMetadata;
-                    if (list != null)
-                    {
-                        return EnumerateMetadata(list);
-                    }
-                    else
-                    {
-                        return Array.Empty<KeyValuePair<string, string>>();
-                    }
+                    return EnumerateMetadata(list);
+                }
+                else
+                {
+                    return Array.Empty<KeyValuePair<string, string>>();
                 }
             }
 
diff --git a/src/Framework/IMetadataContainer.cs b/src/Framework/IMetadataContainer.cs
index 121c80a813e..169130cdef3 100644
--- a/src/Framework/IMetadataContainer.cs
+++ b/src/Framework/IMetadataContainer.cs
@@ -17,6 +17,6 @@ internal interface IMetadataContainer
         /// is used for serialization (in node packet translator) as well as
         /// in the binary logger.
         /// </summary>
-        IEnumerable<KeyValuePair<string, string>> Metadata { get; }
+        IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();
     }
 }
diff --git a/src/Framework/ITaskItemExtensions.cs b/src/Framework/ITaskItemExtensions.cs
index 7315d29ade3..53a5e0d5b42 100644
--- a/src/Framework/ITaskItemExtensions.cs
+++ b/src/Framework/ITaskItemExtensions.cs
@@ -22,7 +22,7 @@ public static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(this I
             if (taskItem is IMetadataContainer container)
             {
                 // This is the common case: most implementations should implement this for quick access
-                return container.Metadata;
+                return container.EnumerateMetadata();
             }
 
             // This runs if ITaskItem is Microsoft.Build.Utilities.TaskItem from Microsoft.Build.Utilities.v4.0.dll
diff --git a/src/Framework/TaskItemData.cs b/src/Framework/TaskItemData.cs
index c9d7e09fb33..81e6b547746 100644
--- a/src/Framework/TaskItemData.cs
+++ b/src/Framework/TaskItemData.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -25,7 +25,7 @@ public TaskItemData(string itemSpec, IDictionary<string, string> metadata)
             Metadata = metadata ?? _emptyMetadata;
         }
 
-        IEnumerable<KeyValuePair<string, string>> IMetadataContainer.Metadata => Metadata;
+        IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => Metadata;
 
         public int MetadataCount => Metadata.Count;
 
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index e26ce6f4ab5..17cc1269cca 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -757,20 +757,17 @@ IDictionary ITaskItem2.CloneCustomMetadataEscaped()
                 return clonedDictionary;
             }
 
-            public IEnumerable<KeyValuePair<string, string>> Metadata
+            public IEnumerable<KeyValuePair<string, string>> EnumerateMetadata()
             {
-                get
+                if (_customEscapedMetadata == null)
                 {
-                    if (_customEscapedMetadata == null)
-                    {
-                        yield break;
-                    }
+                    yield break;
+                }
 
-                    foreach (var kvp in _customEscapedMetadata)
-                    {
-                        var unescaped = new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.UnescapeAll(kvp.Value));
-                        yield return unescaped;
-                    }
+                foreach (var kvp in _customEscapedMetadata)
+                {
+                    var unescaped = new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.UnescapeAll(kvp.Value));
+                    yield return unescaped;
                 }
             }
         }
diff --git a/src/Utilities/TaskItem.cs b/src/Utilities/TaskItem.cs
index d7f38122a0c..1aadd08bfde 100644
--- a/src/Utilities/TaskItem.cs
+++ b/src/Utilities/TaskItem.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -463,20 +463,17 @@ IDictionary ITaskItem2.CloneCustomMetadataEscaped() => _metadata == null
 
         #endregion
 
-        IEnumerable<KeyValuePair<string, string>> IMetadataContainer.Metadata
+        IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata()
         {
-            get
+            if (_metadata == null)
             {
-                if (_metadata == null)
-                {
-                    yield break;
-                }
+                yield break;
+            }
 
-                foreach (var kvp in _metadata)
-                {
-                    var unescaped = new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.UnescapeAll(kvp.Value));
-                    yield return unescaped;
-                }
+            foreach (var kvp in _metadata)
+            {
+                var unescaped = new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.UnescapeAll(kvp.Value));
+                yield return unescaped;
             }
         }
     }
