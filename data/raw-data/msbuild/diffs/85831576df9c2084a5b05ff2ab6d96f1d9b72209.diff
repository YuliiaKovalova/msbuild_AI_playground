diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 54496028a88..8caf51b4130 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -16,6 +16,11 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     public sealed class Unzip : TaskExtension, ICancelableTask
     {
+        // We pick a value that is the largest multiple of 4096 that is still smaller than the large object heap threshold (85K).
+        // The CopyTo/CopyToAsync buffer is short-lived and is likely to be collected at Gen0, and it offers a significant
+        // improvement in Copy performance.
+        private const int _DefaultCopyBufferSize = 81920;
+
         /// <summary>
         /// Stores a <see cref="CancellationTokenSource"/> used for cancellation.
         /// </summary>
@@ -66,45 +71,50 @@ public override bool Execute()
 
             BuildEngine3.Yield();
 
-            foreach (ITaskItem sourceFile in SourceFiles.TakeWhile(i => !_cancellationToken.IsCancellationRequested))
+            try
             {
-                if (!File.Exists(sourceFile.ItemSpec))
+                foreach (ITaskItem sourceFile in SourceFiles.TakeWhile(i => !_cancellationToken.IsCancellationRequested))
                 {
-                    Log.LogErrorFromResources("Unzip.ErrorFileDoesNotExist", sourceFile.ItemSpec);
-                    continue;
-                }
+                    if (!File.Exists(sourceFile.ItemSpec))
+                    {
+                        Log.LogErrorFromResources("Unzip.ErrorFileDoesNotExist", sourceFile.ItemSpec);
+                        continue;
+                    }
 
-                try
-                {
-                    using (FileStream stream = new FileStream(sourceFile.ItemSpec, FileMode.Open, FileAccess.Read, FileShare.Read, bufferSize: 0x1000, useAsync: false))
+                    try
                     {
-                        using (ZipArchive zipArchive = new ZipArchive(stream, ZipArchiveMode.Read, leaveOpen: false))
+                        using (FileStream stream = new FileStream(sourceFile.ItemSpec, FileMode.Open, FileAccess.Read, FileShare.Read, bufferSize: 0x1000, useAsync: false))
                         {
-                            try
+                            using (ZipArchive zipArchive = new ZipArchive(stream, ZipArchiveMode.Read, leaveOpen: false))
                             {
-                                Extract(zipArchive, destinationDirectory);
-                            }
-                            catch (Exception e)
-                            {
-                                // Unhandled exception in Extract() is a bug!
-                                Log.LogErrorFromException(e, showStackTrace: true);
-                                return false;
+                                try
+                                {
+                                    Extract(zipArchive, destinationDirectory);
+                                }
+                                catch (Exception e)
+                                {
+                                    // Unhandled exception in Extract() is a bug!
+                                    Log.LogErrorFromException(e, showStackTrace: true);
+                                    return false;
+                                }
                             }
                         }
                     }
-                }
-                catch (OperationCanceledException)
-                {
-                    break;
-                }
-                catch (Exception e)
-                {
-                    // Should only be thrown if the archive could not be opened (Access denied, corrupt file, etc)
-                    Log.LogErrorFromResources("Unzip.ErrorCouldNotOpenFile", sourceFile.ItemSpec, e.Message);
+                    catch (OperationCanceledException)
+                    {
+                        break;
+                    }
+                    catch (Exception e)
+                    {
+                        // Should only be thrown if the archive could not be opened (Access denied, corrupt file, etc)
+                        Log.LogErrorFromResources("Unzip.ErrorCouldNotOpenFile", sourceFile.ItemSpec, e.Message);
+                    }
                 }
             }
-
-            BuildEngine3.Reacquire();
+            finally
+            {
+                BuildEngine3.Reacquire();
+            }
 
             return !_cancellationToken.IsCancellationRequested && !Log.HasLoggedErrors;
         }
@@ -164,7 +174,10 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector
                     using (Stream destination = File.Open(destinationPath.FullName, FileMode.Create, FileAccess.Write, FileShare.None))
                     using (Stream stream = zipArchiveEntry.Open())
                     {
-                        stream.CopyToAsync(destination, 81920, _cancellationToken.Token);
+                        stream.CopyToAsync(destination, _DefaultCopyBufferSize, _cancellationToken.Token)
+                            .ConfigureAwait(continueOnCapturedContext: false)
+                            .GetAwaiter()
+                            .GetResult();
                     }
 
                     destinationPath.LastWriteTimeUtc = zipArchiveEntry.LastWriteTime.UtcDateTime;
diff --git a/src/Tasks/ZipDirectory.cs b/src/Tasks/ZipDirectory.cs
index d7e6716457b..e99855a3b74 100644
--- a/src/Tasks/ZipDirectory.cs
+++ b/src/Tasks/ZipDirectory.cs
@@ -48,7 +48,16 @@ public override bool Execute()
                     return false;
                 }
 
-                File.Delete(destinationFile.FullName);
+                try
+                {
+                    File.Delete(destinationFile.FullName);
+                }
+                catch (Exception e)
+                {
+                    Log.LogErrorFromResources("ZipDirectory.ErrorFailed", sourceDirectory.FullName, destinationFile.FullName, e.Message);
+
+                    return false;
+                }
             }
 
             try
