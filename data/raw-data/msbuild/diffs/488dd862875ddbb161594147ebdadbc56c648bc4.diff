diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 0f1c85086be..709824fad7c 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1493,8 +1493,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                     }
 
                                     // Embed the source file
-                                    if (initialized && factory.TaskType != null &&
-                                        factory is IHasSourceFilePath factoryWithSourceFilePath &&
+                                    if (factory is IHasSourceFilePath factoryWithSourceFilePath &&
                                         factoryWithSourceFilePath.SourceFilePath != null)
                                     {
                                         taskFactoryLoggingHost.LoggingContext.LogIncludeFile(factoryWithSourceFilePath.SourceFilePath);
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index fb2e2ee9c75..dfe91dc9563 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -161,7 +161,7 @@ private static Assembly CurrentDomainOnAssemblyResolve(object sender, ResolveEve
         /// </summary>
         public Type TaskType { get; private set; }
 
-        public string SourceFilePath { get; private set; }
+        public string SourceFilePath { get => _sourcePath; }
 
         /// <summary>
         /// Get the type information for all task parameters.
@@ -304,10 +304,6 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> ta
                 {
                     _log.LogErrorWithCodeFromResources("CodeTaskFactory.CouldNotFindTaskInAssembly", _nameOfTask);
                 }
-                else
-                {
-                    SourceFilePath = _sourcePath;
-                }
             }
 
             return !_log.HasLoggedErrors;
@@ -1032,8 +1028,8 @@ int IComparable<FullTaskSpecification>.CompareTo(FullTaskSpecification other)
 
                 return result;
             }
-        }
     }
+        }
 #else
     /// <summary>
     /// A task factory which can take code dom supported languages and create a task out of it
@@ -1058,7 +1054,7 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> pa
             log.LogErrorWithCodeFromResources("TaskFactoryNotSupportedFailure", nameof(CodeTaskFactory));
 
             return false;
-        }
+    }
 
         public TaskPropertyInfo[] GetTaskParameters()
         {
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 6a6e2b57976..dbc04d1f228 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -166,8 +166,9 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> pa
             // Attempt to parse and extract everything from the <UsingTask />
             if (!TryLoadTaskBody(_log, _taskName, taskBody, _parameters, out RoslynCodeTaskFactoryTaskInfo taskInfo))
             {
+                SourceFilePath = taskInfo.Source;
                 return false;
-            }
+            }         
 
             // Attempt to compile an assembly (or get one from the cache)
             if (!TryCompileInMemoryAssembly(taskFactoryLoggingHost, taskInfo, out Assembly assembly))
@@ -203,11 +204,6 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> pa
                 }
             }
 
-            if (TaskType != null)
-            {
-                SourceFilePath = taskInfo.Source;
-            }
-
             // Initialization succeeded if we found a type matching the task name from the compiled assembly
             return TaskType != null;
         }
