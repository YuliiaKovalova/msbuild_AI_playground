diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index c96bce47db0..a9f91065f53 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -423,6 +423,7 @@ public void LogMessageFromResources(string messageResourceName, params object[]
         public bool LogMessagesFromFile(string fileName) { throw null; }
         public bool LogMessagesFromFile(string fileName, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
         public bool LogMessagesFromStream(System.IO.TextReader stream, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
+        public bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
         public void LogTelemetry(string eventName, System.Collections.Generic.IDictionary<string, string> properties) { }
         public void LogWarning(string message, params object[] messageArgs) { }
         public void LogWarning(string subcategory, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, params object[] messageArgs) { }
@@ -434,7 +435,6 @@ public void LogWarningFromResources(string subcategoryResourceName, string warni
         public void LogWarningWithCodeFromResources(string messageResourceName, params object[] messageArgs) { }
         public void LogWarningWithCodeFromResources(string subcategoryResourceName, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, params object[] messageArgs) { }
         public void MarkAsInactive() { }
-        public bool ShouldLogMessage(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
     }
     public static partial class ToolLocationHelper
     {
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index c8f3d79dba0..26fb8b5075c 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -265,6 +265,7 @@ public void LogMessageFromResources(string messageResourceName, params object[]
         public bool LogMessagesFromFile(string fileName) { throw null; }
         public bool LogMessagesFromFile(string fileName, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
         public bool LogMessagesFromStream(System.IO.TextReader stream, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
+        public bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
         public void LogTelemetry(string eventName, System.Collections.Generic.IDictionary<string, string> properties) { }
         public void LogWarning(string message, params object[] messageArgs) { }
         public void LogWarning(string subcategory, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, params object[] messageArgs) { }
@@ -275,7 +276,6 @@ public void LogWarningFromResources(string messageResourceName, params object[]
         public void LogWarningFromResources(string subcategoryResourceName, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, params object[] messageArgs) { }
         public void LogWarningWithCodeFromResources(string messageResourceName, params object[] messageArgs) { }
         public void LogWarningWithCodeFromResources(string subcategoryResourceName, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, params object[] messageArgs) { }
-        public bool ShouldLogMessage(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
     }
     public static partial class ToolLocationHelper
     {
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index ee1f18ca6be..c9dbd905e72 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2276,7 +2276,7 @@ public void BuildSlnOutOfProc()
         }
 
         /// <summary>
-        /// Helper task used by <see cref="EndToEndMinimumMessageImportance"/> to verify <see cref="TaskLoggingHelper.ShouldLogMessage"/>.
+        /// Helper task used by <see cref="EndToEndMinimumMessageImportance"/> to verify <see cref="TaskLoggingHelper.LogsMessagesOfImportance"/>.
         /// </summary>
         public class MessageImportanceCheckingTask : Task
         {
@@ -2284,9 +2284,9 @@ public class MessageImportanceCheckingTask : Task
 
             public override bool Execute()
             {
-                bool shouldLogHigh = Log.ShouldLogMessage(MessageImportance.High);
-                bool shouldLogNormal = Log.ShouldLogMessage(MessageImportance.Normal);
-                bool shouldLogLow = Log.ShouldLogMessage(MessageImportance.Low);
+                bool shouldLogHigh = Log.LogsMessagesOfImportance(MessageImportance.High);
+                bool shouldLogNormal = Log.LogsMessagesOfImportance(MessageImportance.Normal);
+                bool shouldLogLow = Log.LogsMessagesOfImportance(MessageImportance.Low);
                 return (MessageImportance)ExpectedMinimumMessageImportance switch
                 {
                     MessageImportance.High - 1 => !shouldLogHigh && !shouldLogNormal && !shouldLogLow,
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 840d770f03f..710bef023e0 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -244,7 +244,7 @@ public virtual string GetResourceMessage(string resourceName)
         /// </summary>
         /// <param name="importance">The importance to check.</param>
         /// <returns>True if messages of the given importance should be logged, false if it's guaranteed that such messages would be ignored.</returns>
-        public bool ShouldLogMessage(MessageImportance importance)
+        public bool LogsMessagesOfImportance(MessageImportance importance)
         {
             return BuildEngine is not IBuildEngine10 buildEngine10
                 || buildEngine10.EngineInterface.LogsMessagesOfImportance(importance);
@@ -290,7 +290,7 @@ public void LogMessage(MessageImportance importance, string message, params obje
                 ResourceUtilities.FormatString(message, messageArgs);
             }
 #endif
-            if (!ShouldLogMessage(importance))
+            if (!LogsMessagesOfImportance(importance))
             {
                 return;
             }
@@ -358,7 +358,7 @@ params object[] messageArgs
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
 
-            if (!ShouldLogMessage(importance))
+            if (!LogsMessagesOfImportance(importance))
             {
                 return;
             }
@@ -490,7 +490,7 @@ public void LogMessageFromResources(MessageImportance importance, string message
             // global state.
             ErrorUtilities.VerifyThrowArgumentNull(messageResourceName, nameof(messageResourceName));
 
-            if (!ShouldLogMessage(importance))
+            if (!LogsMessagesOfImportance(importance))
             {
                 return;
             }
@@ -577,7 +577,7 @@ public void LogCommandLine(MessageImportance importance, string commandLine)
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(commandLine, nameof(commandLine));
 
-            if (!ShouldLogMessage(importance))
+            if (!LogsMessagesOfImportance(importance))
             {
                 return;
             }
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 8de6826e473..7ed21691a98 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1248,7 +1248,7 @@ quiet at the engine level.
 
 #if FEATURE_WIN32_REGISTRY
             MessageImportance messageImportance = MessageImportance.Low;
-            if (dependencyTable.Resolvers != null && Log.ShouldLogMessage(messageImportance))
+            if (dependencyTable.Resolvers != null && Log.LogsMessagesOfImportance(messageImportance))
             {
                 foreach (Resolver r in dependencyTable.Resolvers)
                 {
@@ -1347,7 +1347,7 @@ private void LogReference(Reference reference, string fusionName)
         {
             // Set an importance level to be used for secondary messages.
             MessageImportance importance = ChooseReferenceLoggingImportance(reference);
-            if (!Log.ShouldLogMessage(importance))
+            if (!Log.LogsMessagesOfImportance(importance))
             {
                 return;
             }
@@ -1418,7 +1418,7 @@ private MessageImportance ChooseReferenceLoggingImportance(Reference reference)
         private void LogInputs()
         {
             MessageImportance importance = MessageImportance.Low;
-            if (Traits.Instance.EscapeHatches.LogTaskInputs || Silent || !Log.ShouldLogMessage(importance))
+            if (Traits.Instance.EscapeHatches.LogTaskInputs || Silent || !Log.LogsMessagesOfImportance(importance))
             {
                 // the inputs will be logged automatically anyway, avoid duplication in the logs
                 return;
