diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 705ca12979e..1f8f7b9ec6c 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -333,7 +333,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
             // Get the properties that exist on this task.  We need to gather all of the ones that are marked
             // "required" so that we can keep track of whether or not they all get set.
             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-            IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();
+            IReadOnlyDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();
 
             // look through all the attributes of the task element
             foreach (KeyValuePair<string, (string, ElementLocation)> parameter in parameters)
@@ -1534,10 +1534,10 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
         /// Returns them as keys in a dictionary.
         /// </summary>
         /// <returns>Gets a list of properties which are required.</returns>
-        private IDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute()
+        private IReadOnlyDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute()
         {
             ErrorUtilities.VerifyThrow(_taskFactoryWrapper != null, "Expected taskFactoryWrapper to not be null");
-            IDictionary<string, string> requiredParameters = null;
+            IReadOnlyDictionary<string, string> requiredParameters = null;
 
             try
             {
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 58dcc1b4e7b..4ba6cabdb32 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -27,22 +27,22 @@ internal sealed class TaskFactoryWrapper
         /// <summary>
         /// Cache of names of required properties on this type
         /// </summary>
-        private IDictionary<string, string> _namesOfPropertiesWithRequiredAttribute;
+        private IReadOnlyDictionary<string, string> _namesOfPropertiesWithRequiredAttribute;
 
         /// <summary>
         /// Cache of names of output properties on this type
         /// </summary>
-        private IDictionary<string, string> _namesOfPropertiesWithOutputAttribute;
+        private IReadOnlyDictionary<string, string> _namesOfPropertiesWithOutputAttribute;
 
         /// <summary>
         /// Cache of names of properties on this type whose names are ambiguous
         /// </summary>
-        private IDictionary<string, string> _namesOfPropertiesWithAmbiguousMatches;
+        private IReadOnlyDictionary<string, string> _namesOfPropertiesWithAmbiguousMatches;
 
         /// <summary>
         /// Cache of PropertyInfos for this type
         /// </summary>
-        private IDictionary<string, TaskPropertyInfo> _propertyInfoCache;
+        private IReadOnlyDictionary<string, TaskPropertyInfo> _propertyInfoCache;
 
         /// <summary>
         /// The name of the task this factory can create.
@@ -101,7 +101,7 @@ public ITaskFactory TaskFactory
         /// Caches the result - since it can't change during the build.
         /// </summary>
         /// <returns></returns>
-        public IDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute
+        public IReadOnlyDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute
         {
             get
             {
@@ -116,7 +116,7 @@ public IDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute
         /// Caches the result - since it can't change during the build.
         /// </summary>
         /// <returns></returns>
-        public IDictionary<string, string> GetNamesOfPropertiesWithOutputAttribute
+        public IReadOnlyDictionary<string, string> GetNamesOfPropertiesWithOutputAttribute
         {
             get
             {
@@ -244,8 +244,23 @@ internal bool IsCreatableByFactory(string taskName)
         /// </summary>
         private void PopulatePropertyInfoCacheIfNecessary()
         {
-            if (_propertyInfoCache == null)
+            if (_propertyInfoCache != null)
             {
+                return;
+            }
+
+            lock (this)
+            {
+                if (_propertyInfoCache != null)
+                {
+                    return;
+                }
+
+                Dictionary<string, TaskPropertyInfo> propertyInfoCache = null;
+                Dictionary<string, string> namesOfPropertiesWithRequiredAttribute = null;
+                Dictionary<string, string> namesOfPropertiesWithOutputAttribute = null;
+                Dictionary<string, string> namesOfPropertiesWithAmbiguousMatches = null;
+
                 bool taskTypeImplementsIGeneratedTask = typeof(IGeneratedTask).IsAssignableFrom(_taskFactory.TaskType);
                 TaskPropertyInfo[] propertyInfos = _taskFactory.GetTaskParameters();
 
@@ -262,12 +277,12 @@ private void PopulatePropertyInfoCacheIfNecessary()
 
                     try
                     {
-                        if (_propertyInfoCache == null)
+                        if (propertyInfoCache == null)
                         {
-                            _propertyInfoCache = new Dictionary<string, TaskPropertyInfo>(StringComparer.OrdinalIgnoreCase);
+                            propertyInfoCache = new Dictionary<string, TaskPropertyInfo>(StringComparer.OrdinalIgnoreCase);
                         }
 
-                        _propertyInfoCache.Add(propertyInfo.Name, propertyInfo);
+                        propertyInfoCache.Add(propertyInfo.Name, propertyInfo);
                     }
                     catch (ArgumentException)
                     {
@@ -276,42 +291,42 @@ private void PopulatePropertyInfoCacheIfNecessary()
                         // that wouldn't have been thrown unless and until the project actually tried to set this ambiguous parameter.
                         // So rather than fail here, we store a list of ambiguous names and throw later, when one of them
                         // is requested.
-                        if (_namesOfPropertiesWithAmbiguousMatches == null)
+                        if (namesOfPropertiesWithAmbiguousMatches == null)
                         {
-                            _namesOfPropertiesWithAmbiguousMatches = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                            namesOfPropertiesWithAmbiguousMatches = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                         }
 
-                        _namesOfPropertiesWithAmbiguousMatches[propertyInfo.Name] = String.Empty;
+                        namesOfPropertiesWithAmbiguousMatches[propertyInfo.Name] = String.Empty;
                     }
 
                     if (propertyInfos[i].Required)
                     {
-                        if (_namesOfPropertiesWithRequiredAttribute == null)
+                        if (namesOfPropertiesWithRequiredAttribute == null)
                         {
-                            _namesOfPropertiesWithRequiredAttribute = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                            namesOfPropertiesWithRequiredAttribute = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                         }
 
                         // we have a require attribute defined, keep a record of that
-                        _namesOfPropertiesWithRequiredAttribute[propertyInfo.Name] = String.Empty;
+                        namesOfPropertiesWithRequiredAttribute[propertyInfo.Name] = String.Empty;
                     }
 
                     if (propertyInfos[i].Output)
                     {
-                        if (_namesOfPropertiesWithOutputAttribute == null)
+                        if (namesOfPropertiesWithOutputAttribute == null)
                         {
-                            _namesOfPropertiesWithOutputAttribute = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                            namesOfPropertiesWithOutputAttribute = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                         }
 
                         // we have a output attribute defined, keep a record of that
-                        _namesOfPropertiesWithOutputAttribute[propertyInfo.Name] = String.Empty;
+                        namesOfPropertiesWithOutputAttribute[propertyInfo.Name] = String.Empty;
                     }
                 }
 
-                _propertyInfoCache ??= ReadOnlyEmptyDictionary<string, TaskPropertyInfo>.Instance;
+                _propertyInfoCache = (IReadOnlyDictionary<string, TaskPropertyInfo>)propertyInfoCache ?? ReadOnlyEmptyDictionary<string, TaskPropertyInfo>.Instance;
 
-                _namesOfPropertiesWithRequiredAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
-                _namesOfPropertiesWithOutputAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
-                _namesOfPropertiesWithAmbiguousMatches ??= ReadOnlyEmptyDictionary<string, string>.Instance;
+                _namesOfPropertiesWithRequiredAttribute = (IReadOnlyDictionary<string, string>)namesOfPropertiesWithRequiredAttribute ?? ReadOnlyEmptyDictionary<string, string>.Instance;
+                _namesOfPropertiesWithOutputAttribute   = (IReadOnlyDictionary<string, string>)namesOfPropertiesWithOutputAttribute   ?? ReadOnlyEmptyDictionary<string, string>.Instance;
+                _namesOfPropertiesWithAmbiguousMatches  = (IReadOnlyDictionary<string, string>)namesOfPropertiesWithAmbiguousMatches  ?? ReadOnlyEmptyDictionary<string, string>.Instance;
             }
         }
         #endregion
diff --git a/src/Shared/ReadOnlyEmptyDictionary.cs b/src/Shared/ReadOnlyEmptyDictionary.cs
index e4b1662bdeb..46b1b2738e9 100644
--- a/src/Shared/ReadOnlyEmptyDictionary.cs
+++ b/src/Shared/ReadOnlyEmptyDictionary.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Collections
     /// </summary>
     /// <typeparam name="K">Key</typeparam>
     /// <typeparam name="V">Value</typeparam>
-    internal class ReadOnlyEmptyDictionary<K, V> : IDictionary<K, V>, IDictionary
+    internal class ReadOnlyEmptyDictionary<K, V> : IDictionary<K, V>, IReadOnlyDictionary<K, V>, IDictionary
     {
         /// <summary>
         /// The single instance
@@ -127,6 +127,22 @@ ICollection IDictionary.Values
             get { return (ICollection)((IDictionary<K, V>)this).Values; }
         }
 
+        /// <summary>
+        /// Keys
+        /// </summary>
+        IEnumerable<K> IReadOnlyDictionary<K, V>.Keys
+        {
+            get { return Keys; }
+        }
+
+        /// <summary>
+        /// Values
+        /// </summary>
+        IEnumerable<V> IReadOnlyDictionary<K, V>.Values
+        {
+            get { return Values; }
+        }
+
         /// <summary>
         /// Indexer
         /// </summary>
@@ -292,3 +308,22 @@ public void CopyTo(System.Array array, int index)
         }
     }
 }
+
+#if NET35
+namespace System.Collections.Generic
+{
+    public interface IReadOnlyCollection<T> : IEnumerable<T>
+    {
+        int Count { get; }
+    }
+
+    public interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>>
+    {
+        TValue this[TKey key] { get; }
+        IEnumerable<TKey> Keys { get; }
+        IEnumerable<TValue> Values { get; }
+        bool ContainsKey(TKey key);
+        bool TryGetValue(TKey key, out TValue value);
+    }
+}
+#endif
