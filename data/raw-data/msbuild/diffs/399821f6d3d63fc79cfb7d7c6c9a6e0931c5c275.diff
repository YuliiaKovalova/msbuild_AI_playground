diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
index dbafe43db2a..f41cb2e941e 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
@@ -56,6 +56,8 @@ public int AvailableNodes
             }
         }
 
+        private Func<NodeInfo, NodeConfiguration> _configurationFactory;
+
         /// <summary>
         /// Magic number sent by the host to the client during the handshake.
         /// Derived from the binary timestamp to avoid mixing binary versions,
@@ -79,7 +81,7 @@ internal static Handshake GetHandshake(bool enableNodeReuse, bool enableLowPrior
         public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
         {
             ErrorUtilities.VerifyThrowArgumentNull(factory);
-
+            _configurationFactory = configurationFactory;
             // This can run concurrently. To be properly detect internal bug when we create more nodes than allowed
             //   we add into _nodeContexts premise of future node and verify that it will not cross limits.
             if (_nodeContexts.Count + numberOfNodesToCreate > ComponentHost.BuildParameters.MaxNodeCount)
@@ -99,7 +101,7 @@ public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, F
             CommunicationsUtilities.Trace("Starting to acquire {1} new or existing node(s) to establish nodes from ID {0} to {2}...", nextNodeId, numberOfNodesToCreate, nextNodeId + numberOfNodesToCreate - 1);
 
             Handshake hostHandshake = new(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: ComponentHost.BuildParameters.EnableNodeReuse, lowPriority: ComponentHost.BuildParameters.LowPriority));
-            IList<NodeContext> nodeContexts = GetNodes(null, commandLineArgs, nextNodeId, factory, hostHandshake, NodeContextCreated, NodeContextTerminated, numberOfNodesToCreate);
+            IList<NodeContext> nodeContexts = GetNodes(null, commandLineArgs, nextNodeId, factory, hostHandshake, NodeContextTerminated, numberOfNodesToCreate);
 
             if (nodeContexts.Count > 0)
             {
@@ -109,19 +111,19 @@ public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, F
             }
 
             throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CouldNotConnectToMSBuildExe", ComponentHost.BuildParameters.NodeExeLocation));
+        }
 
-            void NodeContextCreated(NodeContext context)
-            {
-                NodeInfo nodeInfo = new NodeInfo(context.NodeId, ProviderType);
+        protected override void CreateNode(NodeContext context)
+        {
+            NodeInfo nodeInfo = new NodeInfo(context.NodeId, ProviderType);
 
-                _nodeContexts[context.NodeId] = context;
+            _nodeContexts[context.NodeId] = context;
 
-                // Start the asynchronous read.
-                context.BeginAsyncPacketRead();
+            // Start the asynchronous read.
+            context.BeginAsyncPacketRead();
 
-                // Configure the node.
-                context.SendData(configurationFactory(nodeInfo));
-            }
+            // Configure the node.
+            context.SendData(_configurationFactory(nodeInfo));
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 87602148672..bc39e601877 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -67,12 +67,6 @@ internal abstract class NodeProviderOutOfProcBase
         /// </summary>
         private readonly ConcurrentDictionary<string, byte /*void*/> _processesToIgnore = new();
 
-        /// <summary>
-        /// Delegate used to tell the node provider that a context has been created.
-        /// </summary>
-        /// <param name="context">The created node context.</param>
-        internal delegate void NodeContextCreatedDelegate(NodeContext context);
-
         /// <summary>
         /// Delegate used to tell the node provider that a context has terminated.
         /// </summary>
@@ -180,6 +174,8 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
             }
         }
 
+        protected abstract void CreateNode(NodeContext context);
+
         /// <summary>
         /// Finds or creates a child processes which can act as a node.
         /// </summary>
@@ -188,7 +184,6 @@ protected IList<NodeContext> GetNodes(string msbuildLocation,
             int nextNodeId,
             INodePacketFactory factory,
             Handshake hostHandshake,
-            NodeContextCreatedDelegate createNode,
             NodeContextTerminateDelegate terminateNode,
             int numberOfNodesToCreate)
         {
@@ -380,7 +375,7 @@ void CreateNodeContext(int nodeId, Process nodeToReuse, Stream nodeStream)
             {
                 NodeContext nodeContext = new(nodeId, nodeToReuse, nodeStream, factory, terminateNode);
                 nodeContexts.Enqueue(nodeContext);
-                createNode(nodeContext);
+                CreateNode(nodeContext);
             }
         }
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 1d0f0f525d3..0dcdfcc73aa 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -558,7 +558,6 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
                 nodeId,
                 this,
                 new Handshake(hostContext),
-                NodeContextCreated,
                 NodeContextTerminated,
                 1);
 
@@ -568,7 +567,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
         /// <summary>
         /// Method called when a context created.
         /// </summary>
-        private void NodeContextCreated(NodeContext context)
+        protected override void CreateNode(NodeContext context)
         {
             _nodeContexts[(HandshakeOptions)context.NodeId] = context;
 
