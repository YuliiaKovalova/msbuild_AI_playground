diff --git a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
index 5e6123267b3..afd2fe258b7 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
@@ -129,26 +129,21 @@ public void ProjectWithWebsiteProperties(bool convertToSlnx)
         /// Helper method to create a SolutionFile object, and call it to parse the SLN file
         /// represented by the string contents passed in. Optionally can convert the SLN to SLNX and then parse the solution.
         /// </summary>
-        internal static SolutionFile ParseSolutionHelper(string solutionFileContents, bool convertToSlnx = false)
+        private static SolutionFile ParseSolutionHelper(string solutionFileContents, bool convertToSlnx = false)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
             using (TestEnvironment testEnvironment = TestEnvironment.Create())
             {
-                return ParseSolutionHelper(testEnvironment, solutionFileContents, convertToSlnx);
+                solutionFileContents = solutionFileContents.Replace('\'', '"');
+                testEnvironment.SetEnvironmentVariable("MSBUILD_PARSE_SLN_WITH_SOLUTIONPERSISTENCE", "1");
+                TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
+                string solutionPath = convertToSlnx ? ConvertToSlnx(sln.Path) : sln.Path;
+                SolutionFile solutionFile = new SolutionFile { FullPath = solutionPath };
+                solutionFile.ParseUsingNewParser();
+                return solutionFile;
             }
         }
 
-        internal static SolutionFile ParseSolutionHelper(TestEnvironment testEnvironment, string solutionFileContents, bool convertToSlnx = false)
-        {
-            solutionFileContents = solutionFileContents.Replace('\'', '"');
-            testEnvironment.SetEnvironmentVariable("MSBUILD_PARSE_SLN_WITH_SOLUTIONPERSISTENCE", "1");
-            TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
-            string solutionPath = convertToSlnx ? ConvertToSlnx(sln.Path) : sln.Path;
-            SolutionFile solutionFile = new SolutionFile { FullPath = solutionPath };
-            solutionFile.ParseUsingNewParser();
-            return solutionFile;
-        }
-
         private static string ConvertToSlnx(string slnPath)
         {
             string slnxPath = slnPath + "x";
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 8e654e34d0d..b952d0b703c 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -2937,13 +2937,23 @@ private void AssertProjectItemNameCount(ProjectInstance msbuildProject, string i
             Assert.Equal(count, itemGroup.Count());
         }
 
-        private SolutionFile ParseSolutionHelper(string solutionFileContents, bool useNewParser, TestEnvironment testEnvironment = null)
+        private static SolutionFile ParseSolutionHelper(string solutionFileContents, bool isOptInSlnParsingWithNewParser)
         {
-            return useNewParser ?
-                testEnvironment is null ?
-                    SolutionFile_NewParser_Tests.ParseSolutionHelper(solutionFileContents) :
-                    SolutionFile_NewParser_Tests.ParseSolutionHelper(testEnvironment, solutionFileContents) :
-                SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                return ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, testEnvironment);
+            }
+        }
+
+        private static SolutionFile ParseSolutionHelper(string solutionFileContents, bool isOptInSlnParsingWithNewParser, TestEnvironment testEnvironment)
+        {
+            solutionFileContents = solutionFileContents.Replace('\'', '"');
+            if (isOptInSlnParsingWithNewParser)
+            {
+                testEnvironment.SetEnvironmentVariable("MSBUILD_PARSE_SLN_WITH_SOLUTIONPERSISTENCE", "1");
+            }
+            TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
+            return SolutionFile.Parse(sln.Path);
         }
 
         #endregion // Helper Functions
