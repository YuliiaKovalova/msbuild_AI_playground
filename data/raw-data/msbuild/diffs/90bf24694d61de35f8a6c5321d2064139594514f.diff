diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 24a65be0e90..21f10f54028 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -8,6 +8,7 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.CompilerServices;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
@@ -23,6 +24,11 @@ namespace Microsoft.Build.UnitTests.BackEnd
     /// </summary>
     public class BinaryTranslator_Tests
     {
+        static BinaryTranslator_Tests()
+        {
+            Microsoft.Build.CommandLine.SerializationContractInitializer.RegisterExcpetions();
+        }
+
         /// <summary>
         /// Tests the SerializationMode property
         /// </summary>
@@ -186,7 +192,7 @@ public void TestSerializeDotNet()
             ArgumentNullException deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateDotNet(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, out string diffReason), diffReason);
         }
 
         /// <summary>
@@ -201,7 +207,7 @@ public void TestSerializeDotNetNull()
             ArgumentNullException deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateDotNet(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, out string diffReason), diffReason);
         }
 
         [Fact]
@@ -213,7 +219,7 @@ public void TestSerializeException()
             Exception deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, out string diffReason), diffReason);
         }
 
         [Fact]
@@ -235,7 +241,7 @@ public void TestSerializeException_NestedWithStack()
             Exception deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, out string diffReason), diffReason);
         }
 
         [Fact]
@@ -264,11 +270,16 @@ public void TestSerializeBuildException_NestedWithStack()
             Exception deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, out string diffReason), diffReason);
         }
 
         public static IEnumerable<object[]> GetBuildExceptionsAsTestData()
-            => BuildExceptionSerializationHelper.EnumerateBuildExceptionTypes().Select(t => new object[] { t });
+            => AppDomain
+                .CurrentDomain
+                .GetAssemblies()
+                .SelectMany(s => s.GetTypes())
+                .Where(BuildExceptionSerializationHelper.IsSupportedExceptionType)
+                .Select(t => new object[] { t });
 
         [Theory]
         [MemberData(nameof(GetBuildExceptionsAsTestData))]
@@ -291,7 +302,7 @@ public void TestSerializationOfBuildExceptions(Type exceptionType)
             Exception deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(remote, deserializedValue, true), $"Exception type {exceptionType.FullName} not properly de/serialized");
+            Assert.True(TranslationHelpers.CompareExceptions(remote, deserializedValue, out string diffReason, true), $"Exception type {exceptionType.FullName} not properly de/serialized: {diffReason}");
         }
 
         [Fact]
@@ -312,7 +323,7 @@ public void TestInvalidProjectFileException_NestedWithStack()
             Exception deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
 
-            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, true));
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue, out string diffReason, true), diffReason);
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
index 13269b5221a..02c1179e863 100644
--- a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
@@ -326,16 +326,16 @@ public void TestTranslation()
 
             Assert.Equal(result.ConfigurationId, deserializedResult.ConfigurationId);
             Assert.True(TranslationHelpers.CompareCollections(result.DefaultTargets, deserializedResult.DefaultTargets, StringComparer.Ordinal));
-            Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception));
+            Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception, out string diffReason), diffReason);
             Assert.Equal(result.Exception.Message, deserializedResult.Exception.Message);
             Assert.Equal(result.GlobalRequestId, deserializedResult.GlobalRequestId);
             Assert.True(TranslationHelpers.CompareCollections(result.InitialTargets, deserializedResult.InitialTargets, StringComparer.Ordinal));
             Assert.Equal(result.NodeRequestId, deserializedResult.NodeRequestId);
             Assert.Equal(result["alpha"].ResultCode, deserializedResult["alpha"].ResultCode);
-            Assert.True(TranslationHelpers.CompareExceptions(result["alpha"].Exception, deserializedResult["alpha"].Exception));
+            Assert.True(TranslationHelpers.CompareExceptions(result["alpha"].Exception, deserializedResult["alpha"].Exception, out diffReason), diffReason);
             Assert.True(TranslationHelpers.CompareCollections(result["alpha"].Items, deserializedResult["alpha"].Items, TaskItemComparer.Instance));
             Assert.Equal(result["omega"].ResultCode, deserializedResult["omega"].ResultCode);
-            Assert.True(TranslationHelpers.CompareExceptions(result["omega"].Exception, deserializedResult["omega"].Exception));
+            Assert.True(TranslationHelpers.CompareExceptions(result["omega"].Exception, deserializedResult["omega"].Exception, out diffReason), diffReason);
             Assert.True(TranslationHelpers.CompareCollections(result["omega"].Items, deserializedResult["omega"].Items, TaskItemComparer.Instance));
         }
 
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index 5c653497011..d9fb204fb78 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -102,7 +102,7 @@ public void TestTranslationNoException()
 
             Assert.Equal(result.ResultCode, deserializedResult.ResultCode);
             Assert.True(TranslationHelpers.CompareCollections(result.Items, deserializedResult.Items, TaskItemComparer.Instance));
-            Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception));
+            Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception, out string diffReason), diffReason);
             Assert.Equal(result.OriginalBuildEventContext, deserializedResult.OriginalBuildEventContext);
         }
 
@@ -122,7 +122,7 @@ public void TestTranslationWithException()
 
             Assert.Equal(result.ResultCode, deserializedResult.ResultCode);
             Assert.True(TranslationHelpers.CompareCollections(result.Items, deserializedResult.Items, TaskItemComparer.Instance));
-            Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception));
+            Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception, out string diffReason), diffReason);
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TranslationHelpers.cs b/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
index ce611929671..6761f250772 100644
--- a/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
+++ b/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
@@ -86,8 +86,9 @@ internal static bool CompareCollections<T>(ICollection<T> left, ICollection<T> r
         /// <summary>
         /// Compares two exceptions.
         /// </summary>
-        internal static bool CompareExceptions(Exception left, Exception right, bool detailed = false)
+        internal static bool CompareExceptions(Exception left, Exception right, out string diffReason, bool detailed = false)
         {
+            diffReason = null;
             if (ReferenceEquals(left, right))
             {
                 return true;
@@ -95,21 +96,25 @@ internal static bool CompareExceptions(Exception left, Exception right, bool det
 
             if ((left == null) ^ (right == null))
             {
+                diffReason = "One exception is null and the other is not.";
                 return false;
             }
 
             if (left.Message != right.Message)
             {
+                diffReason = $"Exception messages are different ({left.Message} vs {right.Message}).";
                 return false;
             }
 
             if (left.StackTrace != right.StackTrace)
             {
+                diffReason = $"Exception stack traces are different ({left.StackTrace} vs {right.StackTrace}).";
                 return false;
             }
 
-            if (!CompareExceptions(left.InnerException, right.InnerException, detailed))
+            if (!CompareExceptions(left.InnerException, right.InnerException, out diffReason, detailed))
             {
+                diffReason = "Inner exceptions are different: " + diffReason;
                 return false;
             }
 
@@ -117,6 +122,7 @@ internal static bool CompareExceptions(Exception left, Exception right, bool det
             {
                 if (left.GetType() != right.GetType())
                 {
+                    diffReason = $"Exception types are different ({left.GetType().FullName} vs {right.GetType().FullName}).";
                     return false;
                 }
 
@@ -132,11 +138,13 @@ internal static bool CompareExceptions(Exception left, Exception right, bool det
 
                     if (leftProp == null && rightProp != null)
                     {
+                        diffReason = $"Property {prop.Name} is null on left but not on right.";
                         return false;
                     }
 
                     if (leftProp != null && !prop.GetValue(left, null).Equals(prop.GetValue(right, null)))
                     {
+                        diffReason = $"Property {prop.Name} is different ({prop.GetValue(left, null)} vs {prop.GetValue(rightProp, null)}).";
                         return false;
                     }
                 }
diff --git a/src/Build.UnitTests/InternalEngineHelpers.cs b/src/Build.UnitTests/InternalEngineHelpers.cs
index 4751aef9ddd..8590a479da9 100644
--- a/src/Build.UnitTests/InternalEngineHelpers.cs
+++ b/src/Build.UnitTests/InternalEngineHelpers.cs
@@ -175,7 +175,7 @@ internal static void AssertBuildResultsEqual(BuildResult actualBuildResult, Buil
 
             internal static void AssertTargetResultsEqual(TargetResult a, TargetResult b)
             {
-                TranslationHelpers.CompareExceptions(a.Exception, b.Exception).ShouldBeTrue();
+                TranslationHelpers.CompareExceptions(a.Exception, b.Exception, out string diffReason).ShouldBeTrue(diffReason);
                 TranslationHelpers.CompareCollections(a.Items, b.Items, TaskItemComparer.Instance).ShouldBeTrue();
 
                 a.ResultCode.ShouldBe(b.ResultCode);
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index f7493839380..600c739989a 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -125,6 +125,9 @@
     <Compile Include="..\UnitTests.Shared\RequiresSymbolicLinksFactAttribute.cs">
       <Link>RequiresSymbolicLinksFactAttribute.cs</Link>
     </Compile>
+    <Compile Include="..\MSBuild\SerializationContractInitializer.cs">
+      <Link>BackEnd\SerializationContractInitializer.cs</Link>
+    </Compile>
 
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
diff --git a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
index d68aa851846..b64d7b45b08 100644
--- a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
+++ b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
@@ -5,8 +5,9 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
-using System.Linq;
 using System.Reflection;
+using System.Threading;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd
@@ -30,7 +31,7 @@ public BuildExceptionConstructionCallbacks(
             internal Func<Exception, IDictionary<string, string?>?> RemoteStateExtractor { get; }
         }
 
-        private static readonly Dictionary<string, BuildExceptionConstructionCallbacks> s_exceptionFactories = FetchExceptionsConstructors();
+        private static Dictionary<string, BuildExceptionConstructionCallbacks>? s_exceptionFactories;
 
         private static readonly BuildExceptionConstructionCallbacks s_defaultFactory =
             new BuildExceptionConstructionCallbacks(
@@ -98,19 +99,22 @@ internal static bool IsSupportedExceptionType(Type type)
                     type.BaseType!.Name.Equals(nameof(BuildExceptionBase)));
         }
 
-        internal static IEnumerable<Type> EnumerateBuildExceptionTypes()
-            => AppDomain
-                .CurrentDomain
-                .GetAssemblies()
-                .SelectMany(s => s.GetTypes())
-                .Where(IsSupportedExceptionType);
+        internal static void InitializeSerializationContract(params Type[] exceptionTypesWhitelist)
+        {
+            InitializeSerializationContract((IEnumerable<Type>)exceptionTypesWhitelist);
+        }
 
-        private static Dictionary<string, BuildExceptionConstructionCallbacks> FetchExceptionsConstructors()
+        internal static void InitializeSerializationContract(IEnumerable<Type> exceptionTypesWhitelist)
         {
             var exceptionFactories = new Dictionary<string, BuildExceptionConstructionCallbacks>();
 
-            foreach (Type exceptionType in EnumerateBuildExceptionTypes())
+            foreach (Type exceptionType in exceptionTypesWhitelist)
             {
+                if (!IsSupportedExceptionType(exceptionType))
+                {
+                    EscapeHatches.ThrowInternalError($"Type {exceptionType.FullName} is not recognized as a build exception type.");
+                }
+
                 Func<Exception, IDictionary<string, string?>?>? remoteStateExtractor =
                     GetRemoteStateExtractor(exceptionType);
 
@@ -166,7 +170,10 @@ private static Dictionary<string, BuildExceptionConstructionCallbacks> FetchExce
                 }
             }
 
-            return exceptionFactories;
+            if (Interlocked.Exchange(ref s_exceptionFactories, exceptionFactories) != null)
+            {
+                EscapeHatches.ThrowInternalError("Serialization contract was already initialized.");
+            }
         }
 
         internal static string GetExceptionSerializationKey(Type exceptionType)
@@ -176,13 +183,17 @@ internal static string GetExceptionSerializationKey(Type exceptionType)
 
         private static BuildExceptionConstructionCallbacks CreateExceptionFactory(string serializationType)
         {
-            BuildExceptionConstructionCallbacks? factory;
-            if (!s_exceptionFactories.TryGetValue(serializationType, out factory))
+            BuildExceptionConstructionCallbacks? factory = null;
+            if (s_exceptionFactories == null)
+            {
+                EscapeHatches.ThrowInternalError("Serialization contract was not initialized.");
+            }
+            else
             {
-                factory = s_defaultFactory;
+                s_exceptionFactories.TryGetValue(serializationType, out factory);
             }
 
-            return factory;
+            return factory ?? s_defaultFactory;
         }
 
         internal static void WriteExceptionToTranslator(ITranslator translator, Exception exception)
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 358b60c5b8a..1e9a19db615 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -185,6 +185,7 @@
     <Compile Include="OutOfProcTaskAppDomainWrapperBase.cs" />
     <Compile Include="OutOfProcTaskAppDomainWrapper.cs" />
     <Compile Include="PerformanceLogEventListener.cs" />
+    <Compile Include="SerializationContractInitializer.cs" />
     <Compile Include="XMake.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/MSBuild/SerializationContractInitializer.cs b/src/MSBuild/SerializationContractInitializer.cs
new file mode 100644
index 00000000000..d7438ead097
--- /dev/null
+++ b/src/MSBuild/SerializationContractInitializer.cs
@@ -0,0 +1,39 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Reflection;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.CommandLine
+{
+    internal static class SerializationContractInitializer
+    {
+        internal static void RegisterExcpetions()
+        {
+            Assembly microsoftDotBuildAssembly = typeof(BuildAbortedException).Assembly;
+
+            typeof(InternalLoggerException).Assembly.GetType("Microsoft.Build.BackEnd.SdkResolution.SdkResolverException", throwOnError: true);
+
+            Microsoft.Build.BackEnd.BuildExceptionSerializationHelper.InitializeSerializationContract(
+                typeof(GenericBuildTransferredException),
+                typeof(SdkResolverException),
+                typeof(BuildAbortedException),
+                typeof(CircularDependencyException),
+                typeof(InternalLoggerException),
+                typeof(InvalidProjectFileException),
+                typeof(InvalidToolsetDefinitionException),
+                typeof(ProjectCacheException),
+                typeof(InternalErrorException),
+                typeof(LoggerException),
+                microsoftDotBuildAssembly.GetType("Microsoft.Build.BackEnd.NodeFailedToLaunchException", throwOnError: true)!,
+                microsoftDotBuildAssembly.GetType("Microsoft.Build.BackEnd.SchedulerCircularDependencyException", throwOnError: true)!,
+                microsoftDotBuildAssembly.GetType("Microsoft.Build.Exceptions.RegistryException", throwOnError: true)!,
+                microsoftDotBuildAssembly.GetType("Microsoft.Build.Execution.HostObjectException", throwOnError: true)!,
+                microsoftDotBuildAssembly.GetType("Microsoft.Build.Internal.UnbuildableProjectTypeException", throwOnError: true)!);
+        }
+    }
+}
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 06c53027f78..df018cef861 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -223,7 +223,7 @@ string[] args
             // Setup the console UI.
             using AutomaticEncodingRestorer _ = new();
             SetConsoleUI();
-
+            SerializationContractInitializer.RegisterExcpetions();
             DebuggerLaunchCheck();
 
             // Initialize new build telemetry and record start of this build.
