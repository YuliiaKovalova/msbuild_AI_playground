diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index db8f88bfacb..e0a5e8581aa 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -486,7 +486,7 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs, Dicti
             if (Traits.Instance.EscapeHatches.EnsureStdOutForChildNodesIsPrimaryStdout)
             {
                 creationFlags = BackendNativeMethods.NORMALPRIORITYCLASS;
-            };
+            }
 
             if (String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDNODEWINDOW")))
             {
@@ -538,8 +538,10 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs, Dicti
                 processStartInfo.UseShellExecute = false;
 
 
-            processStartInfo.CreateNoWindow = true;
-            processStartInfo.UseShellExecute = false;
+                foreach (var entry in serverEnvironmentVariables)
+                {
+                    processStartInfo.Environment[entry.Key] = entry.Value;
+                }
 
                 // We remove env to enable MSBuild Server that might be equal to 1, so we do not get an infinite recursion here.
                 processStartInfo.Environment[Traits.UseMSBuildServerEnvVarName] = "0";
diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 66b4e232d5c..fbd9c60fd10 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -160,111 +160,88 @@ public void VerifyMixedLegacyBehavior()
         public void BuildsWhileBuildIsRunningOnServer()
         {
             _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+            _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Set MSBUILDUSESERVER to 1");
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
             TransientTestFile sleepProject = _env.CreateFile("napProject.proj", sleepingTaskContents);
+            _env.SetEnvironmentVariable("MSBUILDDEBUGCOMM", "1");
+            _env.SetEnvironmentVariable("MSBUILDDEBUGPATH", Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder"));
 
             int pidOfServerProcess = -1;
+            Task? t = null;
             try
             {
                 // Start a server node and find its PID.
-                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
+
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start first execution");
+                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End first execution");
                 pidOfServerProcess = ParseNumber(output, "Server ID is ");
 
-                var msbuildParameters = sleepProject.Path;
-#if FEATURE_RUN_EXE_IN_TESTS
-                var pathToExecutable = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
-#else
-            var pathToExecutable = ResolveRuntimeExecutableName()!;
-            msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToExecutable) + " " + msbuildParameters;
-#endif
-                var psi = new ProcessStartInfo(pathToExecutable)
+                foreach (Process p in Process.GetProcesses())
                 {
-                    CreateNoWindow = true,
-                    RedirectStandardInput = true,
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    Arguments = msbuildParameters
-                };
-
-                Process pr = new() { EnableRaisingEvents = true, StartInfo = psi };
-                pr.Start();
-                pr.BeginOutputReadLine();
-                pr.BeginErrorReadLine();
-                pr.StandardInput.Dispose();
-
-                psi = new(pathToExecutable)
-                {
-                    CreateNoWindow = true,
-                    RedirectStandardInput = true,
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    Arguments = project.Path
-                };
+                    _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
+                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
+                }
 
-                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
-                output = String.Empty;
-                Process q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                DataReceivedEventHandler receiveData = delegate (object sender, DataReceivedEventArgs args)
-                {
-                    if (args != null)
-                    {
-                        output += args.Data + "\r\n";
-                    }
-                };
-                q.OutputDataReceived += receiveData;
-                q.ErrorDataReceived += receiveData;
 
-                q.Start();
-                q.BeginOutputReadLine();
-                q.BeginErrorReadLine();
-                q.StandardInput.Dispose();
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start second execution");
+                t = Task.Run(() =>
+                {
+                    RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path + " -v:diag", out _, false, _output);
+                });
 
-                q.WaitForExit(30000);
-                q.ExitCode.ShouldBe(0);
-                ParseNumber(output, "Server ID is ").ShouldBe(q.Id, "There should not be a server node for this build.");
+                // The server will soon be in use; make sure we don't try to use it before that happens.
+                Thread.Sleep(1000);
 
-                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-                output = String.Empty;
-                q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                DataReceivedEventHandler receiveHandler = (object sender, DataReceivedEventArgs args) =>
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:next batch");
+                foreach (Process p in Process.GetProcesses())
                 {
-                    if (args != null)
-                    {
-                        output += args.Data + "\r\n";
-                    }
-                };
+                    _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
+                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
+                }
+
+                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Set MSBUILDUSESERVER to 0");
 
-                q.OutputDataReceived += receiveHandler;
-                q.ErrorDataReceived += receiveHandler;
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start 3rd execution");
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End 3rd execution");
+                success.ShouldBeTrue();
+                ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
 
-                q.Start();
-                q.BeginOutputReadLine();
-                q.BeginErrorReadLine();
-                q.StandardInput.Dispose();
+                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Set MSBUILDUSESERVER back to 1");
 
-                q.WaitForExit(30000);
-                q.ExitCode.ShouldBe(0);
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start 4th execution");
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End 4th execution");
+                success.ShouldBeTrue();
                 pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
-                pidOfServerProcess.ShouldNotBe(q.Id, "There should not be a server node for this build.");
+                pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
+                ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "Process ID and Server ID should coincide.");
 
-                if (pidOfServerProcess > -1)
-                {
-                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
-                }
-                pr.WaitForExit(30000);
+                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}: End of test.");
             }
             finally
             {
-                try
+                foreach (string? file in Directory.GetFiles(Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder")))
                 {
-                    if (pidOfServerProcess > -1)
+                    _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:New file: {file}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
+                    foreach (string line in File.ReadLines(file!))
                     {
-                        ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+                        _output.WriteLine(line + $"{DateTime.Now.ToString("hh:mm:ss tt")}: tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
                     }
                 }
-                catch (Exception) { }
+
+                if (pidOfServerProcess > -1)
+                {
+                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+                }
+
+                if (t is not null)
+                {
+                    t.Wait();
+                }
             }
         }
 
@@ -290,15 +267,6 @@ public void MultiProcBuildOnServer()
             workerPid.ShouldBe(ParseNumber(output, "Server ID is "));
         }
 
-        private static string? ResolveRuntimeExecutableName()
-        {
-            // Run the child process with the same host as the currently-running process.
-            using (Process currentProcess = Process.GetCurrentProcess())
-            {
-                return currentProcess?.MainModule?.FileName;
-            }
-        }
-
         private int ParseNumber(string searchString, string toFind)
         {
             Regex regex = new(@$"{toFind}(\d+)");
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 43627beeee3..e6cf4354890 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -71,12 +71,15 @@ private static string ResolveRuntimeExecutableName()
         /// </summary>
         public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
         {
+            outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:1");
+
             if (shellExecute)
             {
                 // we adjust the psi data manually because on net core using ProcessStartInfo.UseShellExecute throws NotImplementedException
                 AdjustForShellExecution(ref process, ref parameters);
             }
 
+            outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:2");
             var psi = new ProcessStartInfo(process)
             {
                 CreateNoWindow = true,
@@ -89,6 +92,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
             string output = string.Empty;
             int pid = -1;
 
+            outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:3");
             using (var p = new Process { EnableRaisingEvents = true, StartInfo = psi })
             {
                 DataReceivedEventHandler handler = delegate (object sender, DataReceivedEventArgs args)
@@ -115,11 +119,13 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 successfulExit = p.ExitCode == 0;
             }
 
+            outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:12");
             outputHelper?.WriteLine("==== OUTPUT ====");
             outputHelper?.WriteLine(output + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
             outputHelper?.WriteLine("Process ID is " + pid + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}" + "\r\n");
             outputHelper?.WriteLine("==============");
 
+            outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:13");
             Console.WriteLine("==== OUTPUT ====");
             Console.WriteLine(output);
             Console.WriteLine("Process ID is " + pid + "\r\n");
