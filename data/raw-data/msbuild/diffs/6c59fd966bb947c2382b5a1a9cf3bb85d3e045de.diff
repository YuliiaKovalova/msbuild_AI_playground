diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 0fe738141b2..143b7a25486 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -37,7 +37,7 @@
       <Rule Id="CA1044" Action="None" />             <!-- Properties should not be write only --> 
       <Rule Id="CA1046" Action="None" />             <!-- Do not overload equality operator on reference types --> 
       <Rule Id="CA1047" Action="Warning" />          <!-- Do not declare protected member in sealed type --> 
-      <Rule Id="CA1050" Action="Warning" />          <!-- Declare types in namespaces --> 
+      <Rule Id="CA1050" Action="Info" />             <!-- Declare types in namespaces --> 
       <Rule Id="CA1051" Action="None" />             <!-- Do not declare visible instance fields --> 
       <Rule Id="CA1052" Action="None" />             <!-- Static holder types should be Static or NotInheritable --> 
       <Rule Id="CA1054" Action="None" />             <!-- Uri parameters should not be strings --> 
@@ -85,7 +85,7 @@
       <Rule Id="CA1802" Action="Info" />             <!-- Use literals where appropriate --> 
       <Rule Id="CA1805" Action="Info" />             <!-- Do not initialize unnecessarily --> 
 	  <Rule Id="CA1806" Action="Info" />
-      <Rule Id="CA1810" Action="Warning" />          <!-- Initialize reference type static fields inline --> 
+      <Rule Id="CA1810" Action="Info" />             <!-- Initialize reference type static fields inline --> 
       <Rule Id="CA1812" Action="None" />             <!-- Avoid uninstantiated internal classes --> 
 	  <Rule Id="CA1814" Action="Info" />
 	  <Rule Id="CA1815" Action="Info" />
@@ -96,19 +96,19 @@
       <Rule Id="CA1822" Action="None" />             <!-- Mark members as static --> 
       <Rule Id="CA1823" Action="Info" />             <!-- Avoid unused private fields --> 
       <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
-      <Rule Id="CA1825" Action="Warning" />          <!-- Avoid zero-length array allocations. --> 
+      <Rule Id="CA1825" Action="Info" />             <!-- Avoid zero-length array allocations. --> 
       <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used --> 
       <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used --> 
-      <Rule Id="CA1829" Action="Warning" />          <!-- Use Length/Count property instead of Count() when available --> 
+      <Rule Id="CA1829" Action="Info" />             <!-- Use Length/Count property instead of Count() when available --> 
       <Rule Id="CA1830" Action="Warning" />          <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder. --> 
       <Rule Id="CA1831" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
       <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
       <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
-      <Rule Id="CA1834" Action="Warning" />          <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
+      <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
       <Rule Id="CA1835" Action="Warning" />          <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
-      <Rule Id="CA1836" Action="Warning" />          <!-- Prefer IsEmpty over Count --> 
-      <Rule Id="CA1837" Action="Warning" />          <!-- Use 'Environment.ProcessId' -->  
-      <Rule Id="CA1838" Action="Warning" />          <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
+      <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
+      <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
+      <Rule Id="CA1838" Action="Info" />             <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
       <Rule Id="CA2000" Action="None" />             <!-- Dispose objects before losing scope --> 
       <Rule Id="CA2002" Action="None" />             <!-- Do not lock on objects with weak identity --> 
       <Rule Id="CA2007" Action="Info" />             <!-- Consider calling ConfigureAwait on the awaited task --> 
@@ -126,7 +126,7 @@
       <Rule Id="CA2119" Action="None" />             <!-- Seal methods that satisfy private interfaces --> 
       <Rule Id="CA2153" Action="None" />             <!-- Do Not Catch Corrupted State Exceptions --> 
       <Rule Id="CA2201" Action="None" />             <!-- Do not raise reserved exception types --> 
-      <Rule Id="CA2208" Action="Warning" />          <!-- Instantiate argument exceptions correctly --> 
+      <Rule Id="CA2208" Action="Info" />             <!-- Instantiate argument exceptions correctly --> 
       <Rule Id="CA2211" Action="None" />             <!-- Non-constant fields should not be visible --> 
       <Rule Id="CA2213" Action="None" />             <!-- Disposable fields should be disposed --> 
       <Rule Id="CA2215" Action="None" />             <!-- Dispose methods should call base class dispose --> 
@@ -147,7 +147,7 @@
       <Rule Id="CA2246" Action="None" />             <!-- Assigning symbol and its member in the same statement. --> 
       <Rule Id="CA2247" Action="Warning" />          <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum. --> 
       <Rule Id="CA2248" Action="Warning" />          <!-- Provide correct 'enum' argument to 'Enum.HasFlag' --> 
-      <Rule Id="CA2249" Action="Warning" />          <!-- Consider using 'string.Contains' instead of 'string.IndexOf' --> 
+      <Rule Id="CA2249" Action="Info" />             <!-- Consider using 'string.Contains' instead of 'string.IndexOf' --> 
       <Rule Id="CA2300" Action="None" />             <!-- Do not use insecure deserializer BinaryFormatter --> 
       <Rule Id="CA2301" Action="None" />             <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder --> 
       <Rule Id="CA2302" Action="None" />             <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize --> 
