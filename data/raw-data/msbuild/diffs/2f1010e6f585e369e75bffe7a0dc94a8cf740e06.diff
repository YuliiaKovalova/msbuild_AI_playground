diff --git a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
index ce0726cc6ea..53d9a5269f8 100644
--- a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
@@ -3218,7 +3218,7 @@ public void AddProperty_WithSdk_KeepsSdkAndImplicitImports()
 
                 var testProject = env.CreateTestProjectWithFiles(@"
                     <Project Sdk='MSBuildUnitTestSdk'>
-                    </Project>", null);
+                    </Project>");
                 env.SetEnvironmentVariable("MSBuildSDKsPath", testSdkRoot);
 
                 string content = @"
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index fb5b9ae0a6e..d175a27ecb4 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -1983,6 +1983,11 @@ private XmlDocumentWithLocation LoadDocument(string fullPath, bool preserveForma
         {
             ErrorUtilities.VerifyThrowInternalRooted(fullPath);
 
+#if !CLR2COMPATIBILITY
+            // For case-insensitive file systems, we need to get an exact file name from a possibly-differently-cased path.
+            fullPath = FileUtilities.GetExactPath(fullPath);
+#endif
+
             var document = new XmlDocumentWithLocation(loadAsReadOnly ? true : (bool?) null)
             {
                 FullPath = fullPath,
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index 2ff77f258af..49958dcf342 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -266,7 +266,7 @@ internal ProjectRootElement Get(string projectFile, OpenProjectRootElement openP
                     projectRootElement = openProjectRootElement(projectFile, this);
 
                     ErrorUtilities.VerifyThrowInternalNull(projectRootElement, "projectRootElement");
-                    ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, "Got project back with incorrect path");
+                    ErrorUtilities.VerifyThrow(projectRootElement.FullPath.Equals(projectFile, StringComparison.OrdinalIgnoreCase), "Got project back with incorrect path");
                     ErrorUtilities.VerifyThrow(_weakCache.Contains(projectFile), "Open should have renamed into cache and boosted");
                 }
                 else if (projectRootElement != null)
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 0c60ff00f5b..74a35af8317 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2036,6 +2036,48 @@ public void InteractiveSetsBuiltInProperty(string arguments)
             logContents.ShouldContain("MSBuildInteractive = [true]");
         }
 
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows | TestPlatforms.OSX)]
+        public void ProjectFilesAreCaseCorrected()
+        {
+            string project1Contents = ObjectModelHelpers.CleanupFileContents(@"<Project>
+  <Target Name=`T`>
+   <Message Importance=`High` Text=`MSBuildProjectFullPath: $(MSBuildProjectFullPath)` />
+   <Message Importance=`High` Text=`MSBuildThisFileFullPath: $(MSBuildThisFileFullPath)` />
+   <Message Importance=`High` Text=`MSBuildProjectName: $(MSBuildProjectName)` />
+   <MSBuild Projects=`teST2.proj` Targets=`T` />
+  </Target>
+</Project>");
+            string project2Contents = ObjectModelHelpers.CleanupFileContents(@"<Project>
+  <Target Name=`T`>
+   <Message Importance=`High` Text=`MSBuildProjectFullPath: $(MSBuildProjectFullPath)` />
+   <Message Importance=`High` Text=`MSBuildThisFileFullPath: $(MSBuildThisFileFullPath)` />
+   <Message Importance=`High` Text=`MSBuildProjectName: $(MSBuildProjectName)` />
+  </Target>
+</Project>");
+
+            using (TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create())
+            {
+                TransientTestProjectWithFiles project1 = testEnvironment.CreateTestProjectWithFiles("TEst.proj", project1Contents, new string[0]);
+                string expectedProjectFile1 = project1.ProjectFile;
+
+                string expectedProjectFile2 = Path.Combine(project1.TestRoot, "TEst2.proj");
+                File.WriteAllText(expectedProjectFile2, project2Contents);
+
+                string output = RunnerUtilities.ExecMSBuild($"\"{Path.Combine(project1.TestRoot, "teST.proj")}\"", out bool success, _output);
+
+                success.ShouldBeTrue(() => output);
+
+                output.ShouldContain($"MSBuildProjectFullPath: {expectedProjectFile1}", () => output, Case.Sensitive);
+                output.ShouldContain($"MSBuildThisFileFullPath: {expectedProjectFile1}", () => output, Case.Sensitive);
+                output.ShouldContain("MSBuildProjectName: TEst", () => output, Case.Sensitive);
+
+                output.ShouldContain($"MSBuildProjectFullPath: {expectedProjectFile2}", () => output, Case.Sensitive);
+                output.ShouldContain($"MSBuildThisFileFullPath: {expectedProjectFile2}", () => output, Case.Sensitive);
+                output.ShouldContain("MSBuildProjectName: TEst2", () => output, Case.Sensitive);
+            }
+        }
+
         private string CopyMSBuild()
         {
             string dest = null;
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 8be71c8ad38..2bb418e999b 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -315,7 +315,6 @@ private static bool IsValidRelativePathBound(char? c)
         /// </summary>
         internal static string NormalizePath(string path)
         {
-
             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));
             string fullPath = GetFullPath(path);
             return FixFilePath(fullPath);
@@ -393,6 +392,70 @@ From Path.cs in the CLR
             return isUNC || path.IndexOf(@"\\?\globalroot", StringComparison.OrdinalIgnoreCase) != -1;
         }
 
+#if !CLR2COMPATIBILITY
+        /// <summary>
+        /// Gets the exact case used on the file system for an existing file or directory.
+        /// </summary>
+        /// <remarks>
+        /// This method may be called on case-sensitive file systems as well, in which case it will always return the provided path.
+        /// </remarks>
+        /// <param name="path">A relative or absolute path.</param>
+        /// <returns>The full path using the correct case if the path exists. Otherwise, the provided path.</returns>
+        internal static string GetExactPath(string path)
+        {
+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.
+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.
+            var directory = new DirectoryInfo(path);
+            if (!File.Exists(path) && !directory.Exists)
+            {
+                // If the path doesn't exist, just return the full path.
+                return path;
+            }
+
+            // We know exactly how long the string will be, so avoid unnecessary intermediate allocations.
+            var chars = new char[directory.FullName.Length];
+            var currentLocation = chars.Length;
+
+            DirectoryInfo parentDirectory = directory.Parent;
+            while (parentDirectory != null)
+            {
+                FileSystemInfo entry = parentDirectory.EnumerateFileSystemInfos(directory.Name).First();
+
+                // Copy the correctly-cased path part to our working character array.
+                string pathPart = entry.Name;
+                currentLocation -= pathPart.Length;
+                pathPart.CopyTo(0, chars, currentLocation, pathPart.Length);
+
+                // Account for the directory separators.
+                currentLocation--;
+                chars[currentLocation] = Path.DirectorySeparatorChar;
+
+                directory = parentDirectory;
+                parentDirectory = directory.Parent;
+            }
+
+            // Handle the drive letter on Windows, which we'll always normalize to upper case.
+            string root = directory.FullName;
+            if (NativeMethodsShared.IsWindows
+                && root.Length == 3 // Windows drive letters are single characters
+                && root[1] == Path.VolumeSeparatorChar
+                && root[2] == Path.DirectorySeparatorChar)
+            {
+                chars[0] = char.ToUpperInvariant(root[0]);
+                chars[1] = Path.VolumeSeparatorChar;
+                // Directory separator character already copied in the previous loop
+            }
+            else
+            {
+                // For Windows UNC paths, we'll just leave it as specified.
+                // For Unix-like, root will just be "/".
+                root.CopyTo(0, chars, 0, root.Length);
+            }
+
+            return new string(chars);
+        }
+#endif
+
         internal static string FixFilePath(string path)
         {
             return string.IsNullOrEmpty(path) || Path.DirectorySeparatorChar == '\\' ? path : path.Replace('\\', '/');//.Replace("//", "/");
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 7b7aad6f5e4..b881f546531 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -20,6 +20,18 @@ public TransientProjectCollection CreateProjectCollection()
             return WithTransientTestState(new TransientProjectCollection());
         }
 
+        /// <summary>
+        ///     Creates a test variant representing a test project with files relative to the project root. All files
+        ///     and the root will be cleaned up when the test completes.
+        /// </summary>
+        /// <param name="projectFileName">Name of the project file with extension to be created.</param>
+        /// <param name="projectContents">Contents of the project file to be created.</param>
+        /// <param name="files">Files to be created.</param>
+        /// <param name="relativePathFromRootToProject">Path for the specified files to be created in relative to 
+        /// the root of the project directory.</param>
+        public TransientTestProjectWithFiles CreateTestProjectWithFiles(string projectFileName, string projectContents, string[] files = null, string relativePathFromRootToProject = ".")
+            => WithTransientTestState(new TransientTestProjectWithFiles(projectFileName, projectContents, files, relativePathFromRootToProject));
+
         /// <summary>
         ///     Creates a test variant representing a test project with files relative to the project root. All files
         ///     and the root will be cleaned up when the test completes.
@@ -29,10 +41,7 @@ public TransientProjectCollection CreateProjectCollection()
         /// <param name="relativePathFromRootToProject">Path for the specified files to be created in relative to 
         /// the root of the project directory.</param>
         public TransientTestProjectWithFiles CreateTestProjectWithFiles(string projectContents, string[] files = null, string relativePathFromRootToProject = ".")
-        {
-            return WithTransientTestState(
-                new TransientTestProjectWithFiles(projectContents, files, relativePathFromRootToProject));
-        }
+            => CreateTestProjectWithFiles("build.proj", projectContents, files, relativePathFromRootToProject);
     }
     
     public class TransientTestProjectWithFiles : TransientTestState
@@ -45,7 +54,10 @@ public class TransientTestProjectWithFiles : TransientTestState
 
         public string ProjectFile { get; }
 
-        public TransientTestProjectWithFiles(string projectContents, string[] files,
+        public TransientTestProjectWithFiles(
+            string projectFileName,
+            string projectContents,
+            string[] files,
             string relativePathFromRootToProject = ".")
         {
             _folder = new TransientTestFolder();
@@ -53,7 +65,7 @@ public TransientTestProjectWithFiles(string projectContents, string[] files,
             var projectDir = Path.GetFullPath(Path.Combine(TestRoot, relativePathFromRootToProject));
             Directory.CreateDirectory(projectDir);
 
-            ProjectFile = Path.GetFullPath(Path.Combine(projectDir, "build.proj"));
+            ProjectFile = Path.GetFullPath(Path.Combine(projectDir, projectFileName));
             File.WriteAllText(ProjectFile, ObjectModelHelpers.CleanupFileContents(projectContents));
 
             CreatedFiles = Helpers.CreateFilesInDirectory(TestRoot, files);
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 1f4c90c4f0b..1b8346e603d 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -2,13 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
-using System.Reflection;
-using System.Text;
 using System.Threading;
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
@@ -536,6 +532,58 @@ public void NormalizePathInvalid()
             });
         }
 
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void GetExactPathFileExists()
+        {
+            string exactPath = FileUtilities.GetTemporaryFile();
+
+            // Since drive letters are normalized to upper case, use lower case. The rest of the path isn't all upper, so use upper case there.
+            string incorrectCasing = char.ToLower(exactPath[0]) + exactPath.Substring(1).ToUpper();
+
+            // Sanity checks
+            File.Exists(exactPath).ShouldBeTrue();
+            incorrectCasing.ShouldNotBe(exactPath);
+
+            // Path is case-corrected
+            FileUtilities.GetExactPath(incorrectCasing).ShouldBe(exactPath);
+        }
+
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void GetExactPathUncPath()
+        {
+            // Something like \\MACHINE\C$\foo\bar\baz
+            string exactPath = FileUtilities.GetTemporaryFile();
+            exactPath = @"\\" + Environment.MachineName + @"\" + exactPath[0] + @"$" + exactPath.Substring(2);
+
+            string incorrectCasing = exactPath.ToUpper();
+
+            // Sanity checks
+            File.Exists(exactPath).ShouldBeTrue();
+            incorrectCasing.ShouldNotBe(exactPath);
+
+            // Path is case-corrected
+            FileUtilities.GetExactPath(incorrectCasing).ShouldBe(exactPath);
+        }
+
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void GetExactPathFileDoesNotExist()
+        {
+            string exactPath = @"C:\abc\def";
+            string incorrectCasing = @"c:\AbC\dEf";
+
+            // Sanity checks
+            File.Exists(exactPath).ShouldBeFalse();
+            incorrectCasing.ShouldNotBe(exactPath);
+
+            // Path is not case-corrected
+            var normalizedPath = FileUtilities.GetExactPath(incorrectCasing);
+            normalizedPath.ShouldNotBe(exactPath);
+            normalizedPath.ShouldBe(incorrectCasing);
+        }
+
         [Fact]
         public void FileOrDirectoryExistsNoThrow()
         {
