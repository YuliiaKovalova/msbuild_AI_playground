diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index c953ec6f226..3f8208156dc 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -5,6 +5,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
+using System.Collections.Generic;
 
 namespace Microsoft.Build.BackEnd.Logging
 {
@@ -144,5 +145,10 @@ internal void LogTaskWarningFromException(Exception exception, BuildEventFileInf
             ErrorUtilities.VerifyThrow(IsValid, "must be valid");
             LoggingService.LogTaskWarningFromException(BuildEventContext, exception, file, taskName);
         }
+
+        internal HashSet<string> GetWarningsAsErrors()
+        {
+            return LoggingService.GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext);
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 8411e8959dc..6db952010aa 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -685,7 +685,7 @@ public HashSet<string> WarningsAsErrors
         {
             get
             {
-                return _warningsAsErrors ??= _taskLoggingContext.LoggingService.GetWarningsToBeLoggedAsErrorsByProject(_taskLoggingContext.BuildEventContext);
+                return _warningsAsErrors ??= _taskLoggingContext.GetWarningsAsErrors();
             }
         }
         #endregion
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index fb60c8fa7fa..578a9cce908 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -1019,9 +1019,9 @@ params object[] messageArgs
             // This warning will be converted to an error if:
             // 1. Its code exists within WarningsAsErrors
             // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)
-            if (BuildEngine is IBuildEngine8 be8 && (be8.WarningsAsErrors?.Contains(warningCode) == true || be8.WarningsAsErrors?.Count == 0))
+            if (BuildEngine is IBuildEngine8 be8 && be8.WarningsAsErrors != null && (be8.WarningsAsErrors.Contains(warningCode) || be8.WarningsAsErrors.Count == 0))
             {
-                var err = new BuildErrorEventArgs
+                LogError
                 (
                     subcategory,
                     warningCode,
@@ -1037,9 +1037,6 @@ params object[] messageArgs
                     DateTime.UtcNow,
                     messageArgs
                 );
-
-                BuildEngine.LogErrorEvent(err);
-                HasLoggedErrors = true;
                 return;
             }
 
