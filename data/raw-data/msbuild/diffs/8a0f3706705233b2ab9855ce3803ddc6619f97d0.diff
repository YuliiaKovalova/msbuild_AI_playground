diff --git a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
index 5670a61e3f1..ed9940d054d 100644
--- a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
+++ b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
@@ -82,6 +83,7 @@ internal int MainThreadSubmissionId
         /// Given a submission ID, assign it "start" and "finish" events to track its use of
         /// the legacy thread.
         /// </summary>
+        [SuppressMessage("Microsoft.Naming", "CA2000:Dispose objects before losing scope", Justification = "The events are disposed in UnregisterSubmissionForLegacyThread")]
         internal void RegisterSubmissionForLegacyThread(int submissionId)
         {
             lock (_legacyThreadingEventsLock)
@@ -104,6 +106,10 @@ internal void UnregisterSubmissionForLegacyThread(int submissionId)
             {
                 ErrorUtilities.VerifyThrow(_legacyThreadingEventsById.ContainsKey(submissionId), "Submission {0} should have been previously registered with LegacyThreadingData", submissionId);
 
+                // Dispose the events
+                _legacyThreadingEventsById[submissionId].Item1?.Dispose();
+                _legacyThreadingEventsById[submissionId].Item2?.Dispose();
+
                 _legacyThreadingEventsById.Remove(submissionId);
             }
         }
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 54a45f77816..42c8d8540cb 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -406,8 +406,10 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
             (int exitCode, string exitType) buildResult;
 
             // Dispose must be called before the server sends ServerNodeBuildResult packet
-            using (var outWriter = RedirectConsoleWriter.Create(text => SendPacket(new ServerNodeConsoleWrite(text, ConsoleOutput.Standard))))
-            using (var errWriter = RedirectConsoleWriter.Create(text => SendPacket(new ServerNodeConsoleWrite(text, ConsoleOutput.Error))))
+            using (var outRedirectWriter = new RedirectConsoleWriter(text => SendPacket(new ServerNodeConsoleWrite(text, ConsoleOutput.Standard))))
+            using (var errRedirectWriter = new RedirectConsoleWriter(text => SendPacket(new ServerNodeConsoleWrite(text, ConsoleOutput.Error))))
+            using (var outWriter = outRedirectWriter.SyncWriter)
+            using (var errWriter = errRedirectWriter.SyncWriter)
             {
                 Console.SetOut(outWriter);
                 Console.SetError(errWriter);
@@ -437,19 +439,14 @@ internal sealed class RedirectConsoleWriter : StringWriter
             private readonly Timer _timer;
             private readonly TextWriter _syncWriter;
 
-            private RedirectConsoleWriter(Action<string> writeCallback)
+            internal RedirectConsoleWriter(Action<string> writeCallback)
             {
                 _writeCallback = writeCallback;
                 _syncWriter = Synchronized(this);
                 _timer = new Timer(TimerCallback, null, 0, 40);
             }
 
-            public static TextWriter Create(Action<string> writeCallback)
-            {
-                RedirectConsoleWriter writer = new(writeCallback);
-
-                return writer._syncWriter;
-            }
+            internal TextWriter SyncWriter => _syncWriter;
 
             private void TimerCallback(object? state)
             {
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 6f8c5ed00f6..84aefed175a 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -291,26 +291,34 @@ internal static object GetRegistryValueFromView(string keyName, string valueName
                         return string.Empty;
                     }
 
-                    using (RegistryKey key = GetBaseKeyFromKeyName(keyName, view, out string subKeyName))
+                    RegistryKey key = null;
+                    try
                     {
-                        if (key != null)
+                        using (key = GetBaseKeyFromKeyName(keyName, view, out string subKeyName))
                         {
-                            using (RegistryKey subKey = key.OpenSubKey(subKeyName, false))
+                            if (key != null)
                             {
-                                // If we managed to retrieve the subkey, then move onto locating the value
-                                if (subKey != null)
+                                using (RegistryKey subKey = key.OpenSubKey(subKeyName, false))
                                 {
-                                    result = subKey.GetValue(valueName);
-                                }
-
-                                // We've found a value, so stop looking
-                                if (result != null)
-                                {
-                                    break;
+                                    // If we managed to retrieve the subkey, then move onto locating the value
+                                    if (subKey != null)
+                                    {
+                                        result = subKey.GetValue(valueName);
+                                    }
+
+                                    // We've found a value, so stop looking
+                                    if (result != null)
+                                    {
+                                        break;
+                                    }
                                 }
                             }
                         }
                     }
+                    finally
+                    {
+                        key?.Dispose();
+                    }
                 }
             }
 
@@ -446,12 +454,13 @@ internal static object StableStringHash(string toHash, StringHashingAlgorithm al
 
         private static string CalculateSha256(string toHash)
         {
-            var sha = System.Security.Cryptography.SHA256.Create();
+            using var sha = System.Security.Cryptography.SHA256.Create();
             var hashResult = new StringBuilder();
             foreach (byte theByte in sha.ComputeHash(Encoding.UTF8.GetBytes(toHash)))
             {
                 hashResult.Append(theByte.ToString("x2"));
             }
+
             return hashResult.ToString();
         }
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 9dfd281b165..fc58a03146a 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -107,16 +107,24 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                                 MSBuildEventSource.Log.ExpandGlobStart(_rootDirectory ?? string.Empty, glob, string.Join(", ", excludePatternsForGlobs));
                             }
 
-                            using (_lazyEvaluator._evaluationProfiler.TrackGlob(_rootDirectory, glob, excludePatternsForGlobs))
+                            IDisposable? disposableGlob = null;
+                            try
                             {
-                                includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
-                                    _rootDirectory,
-                                    glob,
-                                    excludePatternsForGlobs,
-                                    fileMatcher: FileMatcher,
-                                    loggingMechanism: _lazyEvaluator._loggingContext,
-                                    includeLocation: _itemElement.IncludeLocation,
-                                    excludeLocation: _itemElement.ExcludeLocation);
+                                using (disposableGlob = _lazyEvaluator._evaluationProfiler.TrackGlob(_rootDirectory, glob, excludePatternsForGlobs))
+                                {
+                                    includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
+                                        _rootDirectory,
+                                        glob,
+                                        excludePatternsForGlobs,
+                                        fileMatcher: FileMatcher,
+                                        loggingMechanism: _lazyEvaluator._loggingContext,
+                                        includeLocation: _itemElement.IncludeLocation,
+                                        excludeLocation: _itemElement.ExcludeLocation);
+                                }
+                            }
+                            finally
+                            {
+                                disposableGlob?.Dispose();
                             }
 
                             if (MSBuildEventSource.Log.IsEnabled())
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index fe63676c1d2..5f14cd1dd0d 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -2768,14 +2768,26 @@ private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM(
                 }
             }
 
-            XmlReaderSettings xrs = new XmlReaderSettings();
-            xrs.DtdProcessing = DtdProcessing.Ignore;
-
-            ProjectRootElement projectRootElement = new ProjectRootElement(XmlReader.Create(new StringReader(wrapperProjectXml), xrs), projectRootElementCache, isExplicitlyLoaded,
-                preserveFormatting: false);
-            projectRootElement.DirectoryPath = Path.GetDirectoryName(projectFile);
-            ProjectInstance instance = new ProjectInstance(projectRootElement, globalProperties, toolsVersion, buildParameters, loggingService, projectBuildEventContext, sdkResolverService, submissionId);
-            return new ProjectInstance[] { instance };
+            XmlReaderSettings xrs = new XmlReaderSettings
+            {
+                DtdProcessing = DtdProcessing.Ignore
+            };
+
+            StringReader sr = new StringReader(wrapperProjectXml);
+            using (XmlReader xmlReader = XmlReader.Create(sr, xrs))
+            {
+                ProjectRootElement projectRootElement = new(
+                    xmlReader,
+                    projectRootElementCache,
+                    isExplicitlyLoaded,
+                    preserveFormatting: false)
+                {
+                    DirectoryPath = Path.GetDirectoryName(projectFile)
+                };
+                ProjectInstance instance = new(projectRootElement, globalProperties, toolsVersion, buildParameters, loggingService, projectBuildEventContext, sdkResolverService, submissionId);
+
+                return [instance];
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 2c49c17c8a7..720ef5b0fd1 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -185,9 +185,10 @@ internal RawRecord ReadRaw()
             int serializedEventLength = ReadInt32();
             Stream stream = _binaryReader.BaseStream.Slice(serializedEventLength);
 
-            _lastSubStream = stream as SubStream;
-
-            _recordNumber += 1;
+            using (_lastSubStream = stream as SubStream)
+            {
+                _recordNumber += 1;
+            }
 
             return new(recordKind, stream);
         }
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
index 2993b3953c1..93bb8382958 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
@@ -60,7 +60,9 @@ public static byte[] ReadToEnd(this Stream stream)
         {
             if (stream.TryGetLength(out long length))
             {
-                BinaryReader reader = new(stream);
+                //check with Jan
+                using BinaryReader reader = new(stream);
+
                 return reader.ReadBytes((int)length);
             }
 
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 6c12448b1ad..e2badae5526 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -481,10 +481,15 @@ private void PacketPumpProc()
                 }
             }
 
-            RunReadLoop(
-                new BufferedReadStream(_pipeServer),
-                _pipeServer,
-                localPacketQueue, localPacketAvailable, localTerminatePacketPump);
+            using (var localReadPipe = new BufferedReadStream(_pipeServer))
+            {
+                RunReadLoop(
+                    localReadPipe,
+                    _pipeServer,
+                    localPacketQueue,
+                    localPacketAvailable,
+                    localTerminatePacketPump);
+            }
 
             CommunicationsUtilities.Trace("Ending read loop");
 
@@ -508,8 +513,12 @@ private void PacketPumpProc()
             }
         }
 
-        private void RunReadLoop(Stream localReadPipe, Stream localWritePipe,
-            ConcurrentQueue<INodePacket> localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)
+        private void RunReadLoop(
+            Stream localReadPipe,
+            Stream localWritePipe,
+            ConcurrentQueue<INodePacket> localPacketQueue,
+            AutoResetEvent localPacketAvailable,
+            AutoResetEvent localTerminatePacketPump)
         {
             // Ordering of the wait handles is important.  The first signalled wait handle in the array
             // will be returned by WaitAny if multiple wait handles are signalled.  We prefer to have the
