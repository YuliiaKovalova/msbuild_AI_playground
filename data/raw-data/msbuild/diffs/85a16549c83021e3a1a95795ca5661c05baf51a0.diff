diff --git a/src/MSBuild/LiveLogger/MessageNode.cs b/src/MSBuild/LiveLogger/MessageNode.cs
index 61136060cb0..6b1c55fa979 100644
--- a/src/MSBuild/LiveLogger/MessageNode.cs
+++ b/src/MSBuild/LiveLogger/MessageNode.cs
@@ -18,7 +18,7 @@ public enum MessageType
             Error
         }
         public string Message;
-        public FancyLoggerBufferLine? Line;
+        public TerminalBufferLine? Line;
         public MessageType Type;
         public string? Code;
         public string? FilePath;
diff --git a/src/MSBuild/LiveLogger/ProjectNode.cs b/src/MSBuild/LiveLogger/ProjectNode.cs
index b4313a14000..0b1ea4f1191 100644
--- a/src/MSBuild/LiveLogger/ProjectNode.cs
+++ b/src/MSBuild/LiveLogger/ProjectNode.cs
@@ -26,10 +26,10 @@ private static string GetUnambiguousPath(string path)
         public string TargetFramework;
         public bool Finished;
         // Line to display project info
-        public FancyLoggerBufferLine? Line;
+        public TerminalBufferLine? Line;
         // Targets
         public int FinishedTargets;
-        public FancyLoggerBufferLine? CurrentTargetLine;
+        public TerminalBufferLine? CurrentTargetLine;
         public TargetNode? CurrentTargetNode;
         // Messages, errors and warnings
         public List<MessageNode> AdditionalDetails = new();
diff --git a/src/MSBuild/LiveLogger/TerminalBuffer.cs b/src/MSBuild/LiveLogger/TerminalBuffer.cs
index 2825dc3c909..68164bc0342 100644
--- a/src/MSBuild/LiveLogger/TerminalBuffer.cs
+++ b/src/MSBuild/LiveLogger/TerminalBuffer.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
-    internal class FancyLoggerBufferLine
+    internal class TerminalBufferLine
     {
         private static int Counter = 0;
         private string _text = string.Empty;
@@ -35,18 +35,18 @@ public string Text
             }
         }
 
-        public FancyLoggerBufferLine()
+        public TerminalBufferLine()
         {
             Id = Counter++;
             Text = string.Empty;
             ShouldWrapLines = false;
         }
-        public FancyLoggerBufferLine(string text)
+        public TerminalBufferLine(string text)
             : this()
         {
             Text = text;
         }
-        public FancyLoggerBufferLine(string text, bool shouldWrapLines)
+        public TerminalBufferLine(string text, bool shouldWrapLines)
             : this()
         {
             ShouldWrapLines = shouldWrapLines;
@@ -56,7 +56,7 @@ public FancyLoggerBufferLine(string text, bool shouldWrapLines)
 
     internal class TerminalBuffer
     {
-        private static List<FancyLoggerBufferLine> Lines = new();
+        private static List<TerminalBufferLine> Lines = new();
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
         internal static bool IsTerminated = false;
@@ -115,7 +115,7 @@ public static void Render()
             string contents = string.Empty;
             int accumulatedLineCount = 0;
             int lineIndex = 0;
-            foreach (FancyLoggerBufferLine line in Lines)
+            foreach (TerminalBufferLine line in Lines)
             {
                 // Continue if accum line count + next lines < scrolling area
                 if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex)
@@ -157,7 +157,7 @@ public static int GetLineIndexById(int lineId)
             return Lines.FindIndex(x => x.Id == lineId);
         }
 
-        public static FancyLoggerBufferLine? GetLineById(int lineId)
+        public static TerminalBufferLine? GetLineById(int lineId)
         {
             int index = GetLineIndexById(lineId);
             if (index == -1)
@@ -171,16 +171,16 @@ public static int GetLineIndexById(int lineId)
 
         #region Line create, update and delete
         // Write new line
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text)
+        public static TerminalBufferLine? WriteNewLineAfter(int lineId, string text)
         {
             return WriteNewLineAfter(lineId, text, true);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines)
+        public static TerminalBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
+            TerminalBufferLine line = new TerminalBufferLine(text, shouldWrapLines);
             return WriteNewLineAfter(lineId, line);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)
+        public static TerminalBufferLine? WriteNewLineAfter(int lineId, TerminalBufferLine line)
         {
             if (lineId != -1)
             {
@@ -200,23 +200,23 @@ public static int GetLineIndexById(int lineId)
             return line;
         }
 
-        public static FancyLoggerBufferLine? WriteNewLine(string text)
+        public static TerminalBufferLine? WriteNewLine(string text)
         {
             return WriteNewLine(text, true);
         }
-        public static FancyLoggerBufferLine? WriteNewLine(string text, bool shouldWrapLines)
+        public static TerminalBufferLine? WriteNewLine(string text, bool shouldWrapLines)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
+            TerminalBufferLine line = new TerminalBufferLine(text, shouldWrapLines);
             return WriteNewLine(line);
         }
-        public static FancyLoggerBufferLine? WriteNewLine(FancyLoggerBufferLine line)
+        public static TerminalBufferLine? WriteNewLine(TerminalBufferLine line)
         {
             return WriteNewLineAfter(Lines.Count > 0 ? Lines.Last().Id : -1, line);
         }
 
         // Update line
         // TODO: Remove. Use line.Text instead
-        public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
+        public static TerminalBufferLine? UpdateLine(int lineId, string text)
         {
             return null;
         }
