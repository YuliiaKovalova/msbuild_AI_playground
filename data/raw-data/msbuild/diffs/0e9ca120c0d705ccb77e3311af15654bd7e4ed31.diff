diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 4f52ce964b1..53d96f3d8e8 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -2039,7 +2039,7 @@ public class CopyHardLink_Tests : Copy_Tests
         public CopyHardLink_Tests(ITestOutputHelper testOutputHelper)
             : base(testOutputHelper)
         {
-            this.UseHardLinks = true;
+            UseHardLinks = true;
         }
 
         /// <summary>
@@ -2054,10 +2054,7 @@ public void CopyToDestinationFolderWithHardLinkCheck()
             string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));
             try
             {
-                using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, true)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                {
-                    sw.Write("This is a source temp file.");
-                }
+                File.WriteAllText(sourceFile, "This is a source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
                 // Don't create the dest folder, let task do that
 
@@ -2082,12 +2079,7 @@ public void CopyToDestinationFolderWithHardLinkCheck()
 
                 me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.HardLinkComment", sourceFile, destFile);
 
-                string destinationFileContents;
-                using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                {
-                    destinationFileContents = sr.ReadToEnd();
-                }
-
+                string destinationFileContents = File.ReadAllText(destFile);
                 Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination hard linked file to contain the contents of source file."
 
                 Assert.Equal(1, t.DestinationFiles.Length);
@@ -2098,17 +2090,10 @@ public void CopyToDestinationFolderWithHardLinkCheck()
                 // Now we will write new content to the source file
                 // we'll then check that the destination file automatically
                 // has the same content (i.e. it's been hard linked)
-                using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, false)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                {
-                    sw.Write("This is another source temp file.");
-                }
+                File.WriteAllText(sourceFile, "This is another source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
                 // Read the destination file (it should have the same modified content as the source)
-                using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                {
-                    destinationFileContents = sr.ReadToEnd();
-                }
-
+                destinationFileContents = File.ReadAllText(destFile);
                 Assert.Equal("This is another source temp file.", destinationFileContents); //"Expected the destination hard linked file to contain the contents of source file. Even after modification of the source"
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
@@ -2154,10 +2139,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
 
             try
             {
-                using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, true)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                {
-                    sw.Write("This is a source temp file.");
-                }
+                File.WriteAllText(sourceFile, "This is a source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
                 ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };
 
@@ -2186,12 +2168,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
                 // me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.RetryingAsFileCopy", sourceFile, destFile, String.Empty);
                 me.AssertLogContains("0x80070011");
 
-                string destinationFileContents;
-                using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                {
-                    destinationFileContents = sr.ReadToEnd();
-                }
-
+                string destinationFileContents = File.ReadAllText(destFile);
                 Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
 
                 Assert.Equal(1, t.DestinationFiles.Length);
@@ -2202,17 +2179,10 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
                 // Now we will write new content to the source file
                 // we'll then check that the destination file automatically
                 // has the same content (i.e. it's been hard linked)
-                using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, false)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                {
-                    sw.Write("This is another source temp file.");
-                }
+                File.WriteAllText(sourceFile, "This is another source temp file.");  // HIGHCHAR: Test writes in UTF8 without preamble.
 
                 // Read the destination file (it should have the same modified content as the source)
-                using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                {
-                    destinationFileContents = sr.ReadToEnd();
-                }
-
+                destinationFileContents = File.ReadAllText(destFile);
                 Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination copied file to contain the contents of original source file only."
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
@@ -2246,13 +2216,9 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
 
             try
             {
-                using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, true))    // HIGHCHAR: Test writes in UTF8 without preamble.
-                    sw.Write("This is a source temp file.");
+                File.WriteAllText(sourceFile, "This is a source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
-                if (!Directory.Exists(destFolder))
-                {
-                    Directory.CreateDirectory(destFolder);
-                }
+                Directory.CreateDirectory(destFolder);
 
                 // Exhaust the number (1024) of directory entries that can be created for a file
                 // This is 1 + (1 x hard links)
@@ -2291,12 +2257,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
                 // me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.RetryingAsFileCopy", sourceFile, destFile, String.Empty);
                 me.AssertLogContains("0x80070476");
 
-                string destinationFileContents;
-                using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                {
-                    destinationFileContents = sr.ReadToEnd();
-                }
-
+                string destinationFileContents = File.ReadAllText(destFile);
                 Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
 
                 Assert.Equal(1, t.DestinationFiles.Length);
@@ -2307,17 +2268,10 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
                 // Now we will write new content to the source file
                 // we'll then check that the destination file automatically
                 // has the same content (i.e. it's been hard linked)
-                using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, false)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                {
-                    sw.Write("This is another source temp file.");
-                }
+                File.WriteAllText(sourceFile, "This is another source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
                 // Read the destination file (it should have the same modified content as the source)
-                using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                {
-                    destinationFileContents = sr.ReadToEnd();
-                }
-
+                destinationFileContents = File.ReadAllText(destFile);
                 Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination copied file to contain the contents of original source file only."
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
@@ -2364,10 +2318,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
                 string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));
                 try
                 {
-                    using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, true)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                    {
-                        sw.Write("This is a source temp file.");
-                    }
+                    File.WriteAllText(sourceFile, "This is a source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
                     // Don't create the dest folder, let task do that
 
@@ -2393,11 +2344,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
 
                     me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.SymbolicLinkComment", sourceFile, destFile);
 
-                    string destinationFileContents;
-
-                    using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                        destinationFileContents = sr.ReadToEnd();
-
+                    string destinationFileContents = File.ReadAllText(destFile);
                     Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination symbolic linked file to contain the contents of source file."
 
                     Assert.Equal(1, t.DestinationFiles.Length);
@@ -2409,21 +2356,13 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
                     // we'll then check that the destination file automatically
                     // has the same content (i.e. it's been hard linked)
 
-                    using (StreamWriter sw = FileUtilities.OpenWrite(sourceFile, false)) // HIGHCHAR: Test writes in UTF8 without preamble.
-                    {
-                        sw.Write("This is another source temp file.");
-                    }
+                    File.WriteAllText(sourceFile, "This is another source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
 
                     // Read the destination file (it should have the same modified content as the source)
-                    using (StreamReader sr = FileUtilities.OpenRead(destFile))
-                    {
-                        destinationFileContents = sr.ReadToEnd();
-                    }
-
+                    destinationFileContents = File.ReadAllText(destFile);
                     Assert.Equal("This is another source temp file.", destinationFileContents); //"Expected the destination hard linked file to contain the contents of source file. Even after modification of the source"
 
                     ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3891"); // Didn't do retries
-
                 }
                 finally
                 {
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 70b42f59500..a88af2625a6 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -33,7 +33,12 @@ public class Copy : TaskExtension, ICancelableTask
         // 2-core (4 hyperthreaded) M.2 SSD laptop | 22.3  17.5  13.4  12.6  13.1  9.52  11.3  10.9
         // 12-core (24 HT) SATA2 SSD 2012 desktop  | 15.1  10.2  9.57  7.29  7.64  7.41  7.67  7.79
         // 12-core (24 HT) 1TB spinny disk         | 22.7  15.03 11.1  9.23  11.7  11.1  9.27  11.1
-        private const int DefaultCopyParallelism = int.MaxValue;
+        //
+        // However note that since we are relying on synchronous File.Copy() - which will hold threadpool
+        // threads at the advantage of performing file copies more quickly in the kernel - we must avoid
+        // taking up the whole threadpool esp. when hosted in Visual Studio. IOW we use a specific number
+        // instead of int.MaxValue.
+        private static readonly int DefaultCopyParallelism = Environment.ProcessorCount > 4 ? 6 : 4;
 
         /// <summary>
         /// Constructor.
@@ -850,15 +855,7 @@ private static bool PathsAreIdentical(string source, string destination)
         {
             string fullSourcePath = Path.GetFullPath(source);
             string fullDestinationPath = Path.GetFullPath(destination);
-            StringComparison filenameComparison;
-            if (NativeMethodsShared.IsWindows)
-            {
-                filenameComparison = StringComparison.OrdinalIgnoreCase;
-            }
-            else
-            {
-                filenameComparison = StringComparison.Ordinal;
-            }
+            StringComparison filenameComparison = NativeMethodsShared.IsWindows ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal;
             return (0 == String.Compare(fullSourcePath, fullDestinationPath, filenameComparison));
         }
 
