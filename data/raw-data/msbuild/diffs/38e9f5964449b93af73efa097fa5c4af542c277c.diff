diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index c8af765c87c..322149fc94c 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Threading;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -46,7 +47,8 @@ public void Initialize(IEventSource eventSource)
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine("");
-            // FancyLoggerBuffer.WriteNewLine("Hello, this is some text... Lorem ipsum dolor sit amet. ABCDEFGHIJKLMNOPQRSTUVWXYZ-ABCDEFGHIJKLMNOPQRSTUVWXYZ-ABCDEFGHIJKLMNOPQRSTUVWXYZ");
+            // for (int i = 0; i < 120; i++) FancyLoggerBuffer.WriteNewLine( new string(Convert.ToString(i, 16)[0], 200) );
+            FancyLoggerBuffer.Render();
         }
 
         // Build
@@ -149,6 +151,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
 
         public void Shutdown()
         {
+            Thread.Sleep(15_000);
             FancyLoggerBuffer.Terminate();
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
             Console.Clear();
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 787e202e050..0e6a88270ae 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -21,7 +21,6 @@ public string Text
             set
             {
                 _text = value;
-                // TODO: Replace with console.bufferwidth
                 WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
             }
         }
@@ -100,26 +99,22 @@ public static void Render()
                 // Write footer
                 ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
                 // TODO: Remove and replace with actual footer
-                // new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + TopLineIndex
                 new string('-', Console.BufferWidth) +$"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}"
             );
             if (Lines.Count == 0) return;
             // Iterate over lines and display on terminal
-            // TODO: Try to improve performance when scrolling
+            // TODO: Delimit range to improve performance 
             int accumulatedLineCount = 0;
             foreach (FancyLoggerBufferLine line in Lines)
             {
-                // Skip for lines that are not visible in the scroll area
-                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) continue;
                 foreach (string s in line.WrappedText) {
                     // Get line index relative to scroll area
                     int lineIndex = accumulatedLineCount - TopLineIndex;
+                    // Print if line in scrolling area
                     if (lineIndex >= 0 && lineIndex < Console.BufferHeight - 3)
                     {
                         Console.Write(ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s);
                     }
-                    // Stop when exceeding buffer height
-                    if (lineIndex > Console.BufferHeight - 3) return;
                     accumulatedLineCount++;
                 }
             }
@@ -169,7 +164,6 @@ public static int GetLineIndexById(int lineId)
             // Get updated top line index
             // TopLineIndex = GetLineIndexById(topLineId);
             // Return
-            // ??
             return line;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index d586eb57cd0..d39f8945307 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 //
 
-using System;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -15,19 +14,7 @@ public class FancyLoggerMessageNode
 
         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
-            // TODO: Replace
-            if (args.Message == null)
-            {
-                Message = string.Empty;
-            }
-            else if (args.Message.Length > Console.WindowWidth - 1)
-            {
-                Message = args.Message.Substring(0, Console.WindowWidth - 1);
-            }
-            else
-            {
-                Message = args.Message;
-            }
+            Message = args.Message ?? string.Empty;
         }
 
         public void Log()
