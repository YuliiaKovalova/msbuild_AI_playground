diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index f4b399bba1c..5710084ae53 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -213,7 +213,7 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     }
     public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
     {
-        System.Collections.Generic.HashSet<string> WarningsAsErrors { get; }
+        bool ShouldTreatWarningAsError(string warningCode);
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index a73bb42d966..3ce966850da 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -213,7 +213,7 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     }
     public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
     {
-        System.Collections.Generic.HashSet<string> WarningsAsErrors { get; }
+        bool ShouldTreatWarningAsError(string warningCode);
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 27e27c29221..d96fac64850 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -516,14 +516,18 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
         }
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
+        /// Returns a hashset of warnings to be logged as errors for the specified build context.
         /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.
         ///
-        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise
-        /// all warnings will be treated as errors. <see cref="RequestBuilder.ConfigureWarningsAsErrorsAndMessages()"/>
+        /// If all warnings to be treated as errors should also be treated as messages, return null.
+        /// This is to avoid all warnings being treated as errors. <see cref="RequestBuilder.ConfigureWarningsAsErrorsAndMessages()"/>
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>
+        /// <returns>
+        /// An empty set if all warnings should be treated as errors.
+        /// A set containing warning codes to be logged as errors.
+        /// Null if no warnings should be treated as errors.
+        /// </returns>
         public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
         {
             if (_warningsAsErrorsByProject == null)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 46d4a39b296..21e340a7bf0 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -678,10 +678,12 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
 
         #region IBuildEngine8 Members
         private HashSet<string> _warningsAsErrors;
+
         /// <summary>
         /// Contains all warnings that should be logged as errors.
+        /// Non-null empty set when all warnings should be treated as errors.
         /// </summary>
-        public HashSet<string> WarningsAsErrors
+        private HashSet<string> WarningsAsErrors
         {
             get
             {
@@ -694,6 +696,16 @@ public HashSet<string> WarningsAsErrors
                 return _warningsAsErrors ??= _taskLoggingContext.GetWarningsAsErrors();
             }
         }
+
+        public bool ShouldTreatWarningAsError(string warningCode)
+        {
+            if (_taskLoggingContext == null || WarningsAsErrors == null)
+            {
+                return false;
+            }
+
+            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);
+        }
         #endregion
 
         /// <summary>
diff --git a/src/Framework/IBuildEngine8.cs b/src/Framework/IBuildEngine8.cs
index 422f96f509e..bce28a4cfcf 100644
--- a/src/Framework/IBuildEngine8.cs
+++ b/src/Framework/IBuildEngine8.cs
@@ -6,11 +6,17 @@
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    /// This interface extends <see cref="IBuildEngine7" /> to allow tasks know if a warning
-    /// they logged was turned into an error.
+    /// This interface extends <see cref="IBuildEngine7" /> to let tasks know if a warning
+    /// they are about to log will be converted into an error.
     /// </summary>
     public interface IBuildEngine8 : IBuildEngine7
     {
-        public HashSet<string> WarningsAsErrors { get; }
+        /// <summary>
+        /// Determines whether the logging service will convert the specified
+        /// warning code into an error.
+        /// </summary>
+        /// <param name="warningCode">The warning code to check.</param>
+        /// <returns>A boolean to determine whether the warning should be treated as an error.</returns>
+        public bool ShouldTreatWarningAsError(string warningCode);
     }
 }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 664a71022df..38ecbafccc9 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -268,10 +268,17 @@ public bool IsRunningMultipleNodes
         #endregion
 
         #region IBuildEngine8 Implementation
+
         /// <summary>
         /// Contains all warnings that should be logged as errors.
+        /// Non-null empty set when all warnings should be treated as errors.
         /// </summary>
-        public HashSet<string> WarningsAsErrors { get; private set; }
+        private HashSet<string> WarningsAsErrors { get; set; }
+
+        public bool ShouldTreatWarningAsError(string warningCode)
+        {
+            return WarningsAsErrors != null && (WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode));
+        }
         #endregion
 
         #region IBuildEngine Implementation (Methods)
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 8fd04f38d63..a4f4a164193 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -1019,7 +1019,7 @@ params object[] messageArgs
             // This warning will be converted to an error if:
             // 1. Its code exists within WarningsAsErrors
             // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)
-            if (BuildEngine is IBuildEngine8 be8 && be8.WarningsAsErrors != null && (be8.WarningsAsErrors.Contains(warningCode) || be8.WarningsAsErrors.Count == 0))
+            if (BuildEngine is IBuildEngine8 be8 && be8.ShouldTreatWarningAsError(warningCode))
             {
                 LogError
                 (
