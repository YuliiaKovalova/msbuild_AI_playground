diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 98239d12bcf..2c3a376c932 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -548,9 +548,9 @@ public void RoundtripResponseFileUsedEventArgs()
         }
 
         [Fact]
-        public void RoundtripResponseGeneratedFileUsedEventArgs()
+        public void RoundtripGeneratedFileUsedEventArgs()
         {
-            var args = new ResponseGeneratedFileUsedEventArgs("MSBuild.rsp", "");
+            var args = new GeneratedFileUsedEventArgs("MSBuild.rsp", "");
             Roundtrip(args,
                 e => e.ResponseFilePath,
                 e => e.ResponseFileContent);
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index f2cc8c05e6e..62780fe6781 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -39,7 +39,7 @@ public enum BinaryLogRecordKind
         String,
         TaskParameter,
         ResponseFileUsed,
-        ResponseGeneratedFileUsed,
+        GeneratedFileUsed,
         AssemblyLoad,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index ba46f727431..8bcc9ca0877 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -68,7 +68,7 @@ public sealed class BinaryLogger : ILogger
         //     between de/serialization roundtrips.
         //   - Adding serialized events lengths - to support forward compatible reading
         // version 19:
-        //   - new record kind: ResponseGeneratedFileUsedEventArgs
+        //   - new record kind: GeneratedFileUsedEventArgs
 
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
@@ -76,7 +76,7 @@ public sealed class BinaryLogger : ILogger
 
         // The current version of the binary log representation.
         // Changes with each update of the binary log format.
-        internal const int FileFormatVersion = 18;
+        internal const int FileFormatVersion = 19;
 
         // The minimum version of the binary log reader that can read log of above version.
         // This should be changed only when the binary log format is changed in a way that would prevent it from being
@@ -366,9 +366,9 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
             }
-            else if (e is ResponseGeneratedFileUsedEventArgs responseGeneratedFileUsedEventArgs)
+            else if (e is GeneratedFileUsedEventArgs generatedFileUsedEventArgs)
             {
-                projectImportsCollector.AddFileFromMemory(responseGeneratedFileUsedEventArgs.ResponseFilePath, responseGeneratedFileUsedEventArgs.ResponseFileContent);
+                projectImportsCollector.AddFileFromMemory(generatedFileUsedEventArgs.ResponseFilePath, generatedFileUsedEventArgs.ResponseFileContent);
             }
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 2125e80e114..7cff8c8289a 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -315,7 +315,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.TargetSkipped => ReadTargetSkippedEventArgs(),
                 BinaryLogRecordKind.EnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
                 BinaryLogRecordKind.ResponseFileUsed => ReadResponseFileUsedEventArgs(),
-                BinaryLogRecordKind.ResponseGeneratedFileUsed => ReadResponseGeneratedFileUsedEventArgs(),
+                BinaryLogRecordKind.GeneratedFileUsed => ReadGeneratedFileUsedEventArgs(),
                 BinaryLogRecordKind.PropertyReassignment => ReadPropertyReassignmentEventArgs(),
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
                 BinaryLogRecordKind.PropertyInitialValueSet => ReadPropertyInitialValueSetEventArgs(),
@@ -1113,7 +1113,7 @@ private BuildEventArgs ReadResponseFileUsedEventArgs()
             return e;
         }
 
-        private BuildEventArgs ReadResponseGeneratedFileUsedEventArgs()
+        private BuildEventArgs ReadGeneratedFileUsedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
 
@@ -1122,12 +1122,12 @@ private BuildEventArgs ReadResponseGeneratedFileUsedEventArgs()
 
             if (responseFilePath != null && responseFileContent != null)
             {
-                var e = new ResponseGeneratedFileUsedEventArgs(responseFilePath, responseFileContent);
+                var e = new GeneratedFileUsedEventArgs(responseFilePath, responseFileContent);
                 SetCommonFields(e, fields);
                 return e;
             }
 
-            return new ResponseGeneratedFileUsedEventArgs();
+            return new GeneratedFileUsedEventArgs();
         }
 
         private BuildEventArgs ReadPropertyReassignmentEventArgs()
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 34896e6039f..477fad01894 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -458,7 +458,7 @@ private BinaryLogRecordKind Write(BuildMessageEventArgs e)
             switch (e)
             {
                 case ResponseFileUsedEventArgs responseFileUsed: return Write(responseFileUsed);
-                case ResponseGeneratedFileUsedEventArgs responseGeneratedFileUsed: return Write(responseGeneratedFileUsed);
+                case GeneratedFileUsedEventArgs generatedFileUsed: return Write(generatedFileUsed);
                 case TaskParameterEventArgs taskParameter: return Write(taskParameter);
                 case ProjectImportedEventArgs projectImported: return Write(projectImported);
                 case TargetSkippedEventArgs targetSkipped: return Write(targetSkipped);
@@ -555,12 +555,12 @@ private BinaryLogRecordKind Write(ResponseFileUsedEventArgs e)
             WriteDeduplicatedString(e.ResponseFilePath);
             return BinaryLogRecordKind.ResponseFileUsed;
         }
-        private BinaryLogRecordKind Write(ResponseGeneratedFileUsedEventArgs e)
+        private BinaryLogRecordKind Write(GeneratedFileUsedEventArgs e)
         {
             WriteMessageFields(e);
             WriteDeduplicatedString(e.ResponseFilePath);
             WriteDeduplicatedString(e.ResponseFileContent);
-            return BinaryLogRecordKind.ResponseGeneratedFileUsed;
+            return BinaryLogRecordKind.GeneratedFileUsed;
         }
         private BinaryLogRecordKind Write(TaskCommandLineEventArgs e)
         {
diff --git a/src/Framework/ResponseGeneratedFileUsedEventArgs.cs b/src/Framework/GeneratedFileUsedEventArgs.cs
similarity index 62%
rename from src/Framework/ResponseGeneratedFileUsedEventArgs.cs
rename to src/Framework/GeneratedFileUsedEventArgs.cs
index c5758fb818f..13083951713 100644
--- a/src/Framework/ResponseGeneratedFileUsedEventArgs.cs
+++ b/src/Framework/GeneratedFileUsedEventArgs.cs
@@ -6,20 +6,20 @@
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    /// Arguments for the response file used event
+    /// Arguments for the generated file used event
     /// </summary>
     [Serializable]
-    public class ResponseGeneratedFileUsedEventArgs : BuildMessageEventArgs
+    public class GeneratedFileUsedEventArgs : BuildMessageEventArgs
     {
-        public ResponseGeneratedFileUsedEventArgs()
+        public GeneratedFileUsedEventArgs()
         {
         }
 
         /// <summary>
-        /// Initializes a new instance of the <see cref="ResponseGeneratedFileUsedEventArgs"/> class.
+        /// Initializes a new instance of the <see cref="GeneratedFileUsedEventArgs"/> class.
         /// </summary>
         /// 
-        public ResponseGeneratedFileUsedEventArgs(string filePath, string content)
+        public GeneratedFileUsedEventArgs(string filePath, string content)
             : base("", null, null, MessageImportance.Low)
         {
             ResponseFilePath = filePath;
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index fced677c736..ad13c5fbfcd 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -67,7 +67,7 @@
     </Compile>
     <Compile Include="..\Framework\AssemblyUtilities.cs" />
     <Compile Include="..\Framework\ResponseFileUsedEventArgs.cs" />
-    <Compile Include="..\Framework\ResponseGeneratedFileUsedEventArgs.cs" />
+    <Compile Include="..\Framework\GeneratedFileUsedEventArgs.cs" />
     <Compile Include="..\Shared\BufferedReadStream.cs" />
     <Compile Include="..\Shared\CollectionHelpers.cs" />
     <Compile Include="..\Shared\CopyOnWriteDictionary.cs">
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index f0888a8c935..7e27f806770 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -207,9 +207,9 @@ internal enum LoggingEventType : int
         ExtendedCriticalBuildMessageEvent = 33,
 
         /// <summary>
-        /// Event is a ResponseGeneratedFileUsedEventArgs
+        /// Event is a <see cref="GeneratedFileUsedEventArgs"/>
         /// </summary>
-        ResponseGeneratedFileUsedEvent = 34,
+        GeneratedFileUsedEvent = 34,
     }
     #endregion
 
@@ -595,7 +595,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
                 LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
-                LoggingEventType.ResponseGeneratedFileUsedEvent => new ResponseGeneratedFileUsedEventArgs(),
+                LoggingEventType.GeneratedFileUsedEvent => new GeneratedFileUsedEventArgs(),
 
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
@@ -769,9 +769,9 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.ResponseFileUsedEvent;
             }
-            else if (eventType == typeof(ResponseGeneratedFileUsedEventArgs))
+            else if (eventType == typeof(GeneratedFileUsedEventArgs))
             {
-                return LoggingEventType.ResponseGeneratedFileUsedEvent;
+                return LoggingEventType.GeneratedFileUsedEvent;
             }
             else
             {
@@ -815,8 +815,8 @@ private void WriteEventToStream(BuildEventArgs buildEvent, LoggingEventType even
                 case LoggingEventType.ResponseFileUsedEvent:
                     WriteResponseFileUsedEventToStream((ResponseFileUsedEventArgs)buildEvent, translator);
                     break;
-                case LoggingEventType.ResponseGeneratedFileUsedEvent:
-                    WriteResponseGeneratedFileUsedEventToStream((ResponseGeneratedFileUsedEventArgs)buildEvent, translator);
+                case LoggingEventType.GeneratedFileUsedEvent:
+                    WriteGeneratedFileUsedEventToStream((GeneratedFileUsedEventArgs)buildEvent, translator);
                     break;
                 case LoggingEventType.TaskCommandLineEvent:
                     WriteTaskCommandLineEventToStream((TaskCommandLineEventArgs)buildEvent, translator);
@@ -955,16 +955,16 @@ private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs respon
         /// <summary>
         /// Write a response generated file used log message into the translator
         /// </summary>
-        private void WriteResponseGeneratedFileUsedEventToStream(ResponseGeneratedFileUsedEventArgs responseGeneratedFileUsedEventArgs, ITranslator translator)
+        private void WriteGeneratedFileUsedEventToStream(GeneratedFileUsedEventArgs generatedFileUsedEventArgs, ITranslator translator)
         {
-            string filePath = responseGeneratedFileUsedEventArgs.ResponseFilePath;
-            string content = responseGeneratedFileUsedEventArgs.ResponseFileContent;
+            string filePath = generatedFileUsedEventArgs.ResponseFilePath;
+            string content = generatedFileUsedEventArgs.ResponseFileContent;
 
             translator.Translate(ref filePath);
             translator.Translate(ref content);
 
 #if !CLR2COMPATIBILITY
-            DateTime timestamp = responseGeneratedFileUsedEventArgs.RawTimestamp;
+            DateTime timestamp = generatedFileUsedEventArgs.RawTimestamp;
             translator.Translate(ref timestamp);
 #endif
         }
@@ -1205,7 +1205,7 @@ private BuildEventArgs ReadEventFromStream(LoggingEventType eventType, ITranslat
                 LoggingEventType.BuildErrorEvent => ReadTaskBuildErrorEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildMessageEvent => ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.ResponseFileUsedEvent => ReadResponseFileUsedEventFromStream(translator, message, helpKeyword, senderName),
-                LoggingEventType.ResponseGeneratedFileUsedEvent => ReadResponseGeneratedFileUsedEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.GeneratedFileUsedEvent => ReadGeneratedFileUsedEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildWarningEvent => ReadBuildWarningEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.EnvironmentVariableReadEvent => ReadEnvironmentVariableReadEventFromStream(translator, message, helpKeyword, senderName),
                 _ => null,
@@ -1367,13 +1367,13 @@ private ResponseFileUsedEventArgs ReadResponseFileUsedEventFromStream(ITranslato
             return buildEvent;
         }
 
-        private ResponseGeneratedFileUsedEventArgs ReadResponseGeneratedFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
+        private GeneratedFileUsedEventArgs ReadGeneratedFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
         {
             string responseFilePath = String.Empty;
             string responseFileContent = String.Empty;
             translator.Translate(ref responseFilePath);
             translator.Translate(ref responseFileContent);
-            ResponseGeneratedFileUsedEventArgs buildEvent = new ResponseGeneratedFileUsedEventArgs(responseFilePath, responseFileContent);
+            GeneratedFileUsedEventArgs buildEvent = new GeneratedFileUsedEventArgs(responseFilePath, responseFileContent);
 
 #if !CLR2COMPATIBILITY
             DateTime timestamp = default;
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index a7c949d129a..68909641038 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -513,7 +513,7 @@ public void LogIncludeGeneratedFile(string filePath, string content)
             ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));
             ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));
 
-            var e = new ResponseGeneratedFileUsedEventArgs(filePath, content);
+            var e = new GeneratedFileUsedEventArgs(filePath, content);
 
             BuildEngine.LogMessageEvent(e);
         }
