diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 6ee918506a4..2bb36432783 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -129,14 +129,14 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                 return itemsToAdd?.ToImmutable() ?? ImmutableArray<I>.Empty;
             }
 
-            private static ISet<string> BuildExcludePatternsForGlobs(ImmutableHashSet<string> globsToIgnore, ImmutableSegmentedList<string> excludePatterns)
+            private static ImmutableHashSet<string> BuildExcludePatternsForGlobs(ImmutableHashSet<string> globsToIgnore, ImmutableSegmentedList<string> excludePatterns)
             {
                 var anyExcludes = excludePatterns.Count > 0;
                 var anyGlobsToIgnore = globsToIgnore.Count > 0;
 
                 if (anyGlobsToIgnore && anyExcludes)
                 {
-                    return excludePatterns.Concat(globsToIgnore).ToImmutableHashSet();
+                    return globsToIgnore.Union(excludePatterns);
                 }
 
                 return anyExcludes ? excludePatterns.ToImmutableHashSet() : globsToIgnore;
@@ -144,7 +144,7 @@ private static ISet<string> BuildExcludePatternsForGlobs(ImmutableHashSet<string
 
             protected override void MutateItems(ImmutableArray<I> items)
             {
-                DecorateItemsWithMetadata(items.Select(i => new ItemBatchingContext(i)), _metadata);
+                DecorateItemsWithMetadata(items, _metadata);
             }
 
             protected override void SaveItems(ImmutableArray<I> items, OrderedItemDataCollection.Builder listBuilder)
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index 74cea39f19a..d7f4b0e26ee 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -160,7 +160,41 @@ private string RouteCall(string itemType, string name, Func<IMetadataTable, stri
                 }
             }
 
-            protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBatchingContexts, ImmutableArray<ProjectMetadataElement> metadata, bool? needToExpandMetadata = null)
+            private IEnumerable<(I, IMetadataTable)> GetItemsFromItemBatchingContexts(ImmutableArray<ItemBatchingContext> itemBatchingContexts)
+            {
+                foreach (ItemBatchingContext context in itemBatchingContexts)
+                {
+                    yield return (context.OperationItem, context.GetMetadataTable());
+                }
+            }
+
+            private IEnumerable<(I, IMetadataTable)> GetItemsFromItems(ImmutableArray<I> items)
+            {
+                foreach (I item in items)
+                {
+                    yield return (item, item);
+                }
+            }
+
+            private IEnumerable<I> GetItemsFromItemTuple(IEnumerable<(I item, IMetadataTable)> tuples)
+            {
+                foreach (var tuple in tuples)
+                {
+                    yield return tuple.item;
+                }
+            }
+
+            protected void DecorateItemsWithMetadata(ImmutableArray<ItemBatchingContext> itemBatchingContexts, ImmutableArray<ProjectMetadataElement> metadata, bool? needToExpandMetadata = null)
+            {
+                DecorateItemsWithMetadata(GetItemsFromItemBatchingContexts(itemBatchingContexts), metadata, needToExpandMetadata);
+            }
+
+            protected void DecorateItemsWithMetadata(ImmutableArray<I> items, ImmutableArray<ProjectMetadataElement> metadata, bool? needToExpandMetadata = null)
+            {
+                DecorateItemsWithMetadata(GetItemsFromItems(items), metadata, needToExpandMetadata);
+            }
+
+            private void DecorateItemsWithMetadata(IEnumerable<(I item, IMetadataTable metadataTable)> itemBatchingContexts, ImmutableArray<ProjectMetadataElement> metadata, bool? needToExpandMetadata = null)
             {
                 if (metadata.Length > 0)
                 {
@@ -199,7 +233,7 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
                     {
                         foreach (var itemContext in itemBatchingContexts)
                         {
-                            _expander.Metadata = itemContext.GetMetadataTable();
+                            _expander.Metadata = itemContext.metadataTable;
 
                             foreach (var metadataElement in metadata)
                             {
@@ -210,7 +244,7 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
 
                                 string evaluatedValue = _expander.ExpandIntoStringLeaveEscaped(metadataElement.Value, metadataExpansionOptions, metadataElement.Location);
 
-                                itemContext.OperationItem.SetMetadata(metadataElement, FileUtilities.MaybeAdjustFilePath(evaluatedValue, metadataElement.ContainingProject.DirectoryPath));
+                                itemContext.item.SetMetadata(metadataElement, FileUtilities.MaybeAdjustFilePath(evaluatedValue, metadataElement.ContainingProject.DirectoryPath));
                             }
                         }
 
@@ -260,7 +294,7 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
                         // This is valuable in the case where one item element evaluates to
                         // many items (either by semicolon or wildcards)
                         // and that item also has the same piece/s of metadata for each item.
-                        _itemFactory.SetMetadata(metadataList, itemBatchingContexts.Select(i => i.OperationItem));
+                        _itemFactory.SetMetadata(metadataList, GetItemsFromItemTuple(itemBatchingContexts));
 
                         // End of legal area for metadata expressions.
                         _expander.Metadata = null;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index 862e4e986a5..7267dbfc445 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -17,7 +17,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
         private class UpdateOperation : LazyItemOperation
         {
             private readonly ImmutableArray<ProjectMetadataElement> _metadata;
-            private ImmutableList<ItemBatchingContext>.Builder _itemsToUpdate = null;
+            private ImmutableArray<ItemBatchingContext>.Builder _itemsToUpdate = null;
             private ItemSpecMatchesItem _matchItemSpec = null;
             private bool? _needToExpandMetadataForEachItem = null;
 
@@ -49,7 +49,7 @@ protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder,
                 }
 
                 SetMatchItemSpec();
-                _itemsToUpdate ??= ImmutableList.CreateBuilder<ItemBatchingContext>();
+                _itemsToUpdate ??= ImmutableArray.CreateBuilder<ItemBatchingContext>();
                 _itemsToUpdate.Clear();
 
                 for (int i = 0; i < listBuilder.Count; i++)
@@ -64,7 +64,7 @@ protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder,
                     }
                 }
 
-                DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableList(), _metadata, _needToExpandMetadataForEachItem);
+                DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableArray(), _metadata, _needToExpandMetadataForEachItem);
             }
 
             /// <summary>
@@ -77,13 +77,13 @@ internal ItemData UpdateItem(ItemData item)
                 if (_conditionResult)
                 {
                     SetMatchItemSpec();
-                    _itemsToUpdate ??= ImmutableList.CreateBuilder<ItemBatchingContext>();
+                    _itemsToUpdate ??= ImmutableArray.CreateBuilder<ItemBatchingContext>();
                     _itemsToUpdate.Clear();
                     MatchResult matchResult = _matchItemSpec(_itemSpec, item.Item);
                     if (matchResult.IsMatch)
                     {
                         ItemData clonedData = UpdateItem(item, matchResult.CapturedItemsFromReferencedItemTypes);
-                        DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableList(), _metadata, _needToExpandMetadataForEachItem);
+                        DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableArray(), _metadata, _needToExpandMetadataForEachItem);
                         return clonedData;
                     }
                 }
