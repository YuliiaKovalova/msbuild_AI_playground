diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index 0b8916d5f2b..149e66308e2 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -344,11 +344,17 @@ public ProjectElement Clone()
             return Clone(ContainingProject);
         }
 
+        public virtual void CopyFrom(ProjectElement element)
+        {
+            CopyFrom(element, false);
+        }
+
         /// <summary>
         /// Applies properties from the specified type to this instance.
         /// </summary>
         /// <param name="element">The element to act as a template to copy from.</param>
-        public virtual void CopyFrom(ProjectElement element)
+        /// <param name="deepCopy"></param>
+        internal virtual void CopyFrom(ProjectElement element, bool deepCopy)
         {
             ErrorUtilities.VerifyThrowArgumentNull(element, nameof(element));
             ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), nameof(element));
@@ -394,26 +400,100 @@ public virtual void CopyFrom(ProjectElement element)
             }
             else
             {
-                // Copy over the attributes from the template element.
-                foreach (XmlAttribute attribute in element.XmlElement.Attributes)
+                AppendAttributesAndChildren(element, deepCopy);
+
+                _expressedAsAttribute = element._expressedAsAttribute;
+            }
+
+            MarkDirty("CopyFrom", null);
+            ClearAttributeCache();
+        }
+
+        private void AppendAttributesAndChildren(ProjectElement appendFrom, bool deepCopy)
+        {
+            XmlElement.RemoveAll();
+            if (appendFrom.XmlElement.Attributes is not null)
+            {
+                foreach (XmlAttribute attribute in appendFrom.XmlElement.Attributes)
                 {
                     if (ShouldCloneXmlAttribute(attribute))
                     {
-                        XmlElement.SetAttribute(attribute.LocalName, attribute.NamespaceURI, attribute.Value);
+                        SetOrRemoveAttribute(attribute.LocalName, attribute.Value);
                     }
                 }
+            }
 
-                // If this element has pure text content, copy that over.
-                if (element.XmlElement.ChildNodes.Count == 1 && element.XmlElement.FirstChild.NodeType == XmlNodeType.Text)
+            if (deepCopy && appendFrom is ProjectElementContainer containerFrom && this is ProjectElementContainer containerTo && this.Parent is not null)
+            {
+                foreach (ProjectElement child in containerFrom.Children)
+                {
+                    if (child is ProjectElementContainer childContainer)
+                    {
+                        childContainer.DeepClone(ContainingProject, containerTo);
+                    }
+                    else
+                    {
+                        containerTo.AppendChild(child.Clone(ContainingProject));
+                    }
+                }
+            }
+            else if (deepCopy)
+            {
+                foreach (XmlNode childNode in appendFrom.XmlElement.ChildNodes)
+                {
+                    if (childNode.NodeType == XmlNodeType.Text)
+                    {
+                        XmlElement.AppendChild(XmlElement.OwnerDocument.CreateTextNode(childNode.Value));
+                    }
+                    else if (childNode.NodeType == XmlNodeType.Element)
+                    {
+                        XmlNode childClone = XmlElement.OwnerDocument.CreateNode(childNode.NodeType, childNode.Prefix, childNode.Name, childNode.NamespaceURI);
+                        XmlElement.AppendChild(childClone);
+                        AppendAttributesAndChildren(childClone, childNode);
+                    }
+                }
+            }
+            else
+            {
+                if (appendFrom.XmlElement.ChildNodes.Count == 1 && appendFrom.XmlElement.FirstChild.NodeType == XmlNodeType.Text)
                 {
-                    XmlElement.AppendChild(XmlElement.OwnerDocument.CreateTextNode(element.XmlElement.FirstChild.Value));
+                    XmlElement.AppendChild(XmlElement.OwnerDocument.CreateTextNode(appendFrom.XmlElement.FirstChild.Value));
                 }
+            }
+        }
 
-                _expressedAsAttribute = element._expressedAsAttribute;
+        private void AppendAttributesAndChildren(XmlNode appendTo, XmlNode appendFrom)
+        {
+            // Remove all the current attributes and textual content.
+            appendTo.RemoveAll();
+
+            if (appendFrom.Attributes is not null)
+            {
+                foreach (XmlAttribute attribute in appendFrom.Attributes)
+                {
+                    if (ShouldCloneXmlAttribute(attribute))
+                    {
+                        XmlAttribute attr = appendTo.OwnerDocument.CreateAttribute(attribute.LocalName, attribute.NamespaceURI);
+                        attr.Value = attribute.Value;
+                        appendTo.Attributes.Append(attr);
+                    }
+                }
             }
 
-            MarkDirty("CopyFrom", null);
-            ClearAttributeCache();
+            foreach (XmlNode child in appendFrom.ChildNodes)
+            {
+                // If this element has pure text content, copy that over.
+                if (child.NodeType == XmlNodeType.Text)
+                {
+                    appendTo.AppendChild(appendTo.OwnerDocument.CreateTextNode(child.Value));
+                }
+                else if (child.NodeType == XmlNodeType.Element)
+                {
+                    XmlElement newChild = appendTo.OwnerDocument.CreateElement(child.Prefix, child.Name, child.NamespaceURI);
+                    appendTo.AppendChild(newChild);
+                    AppendAttributesAndChildren(newChild, child);
+                }
+            }
         }
 
         /// <summary>
@@ -500,16 +580,19 @@ internal virtual void OnAfterParentChanged(ProjectElementContainer newParent)
         /// Returns a shallow clone of this project element.
         /// </summary>
         /// <param name="factory">The factory to use for creating the new instance.</param>
+        /// <param name="parent"></param>
+        /// <param name="deepCopy"></param>
         /// <returns>The cloned element.</returns>
-        protected internal virtual ProjectElement Clone(ProjectRootElement factory)
+        protected internal virtual ProjectElement Clone(ProjectRootElement factory, ProjectElementContainer parent = null, bool deepCopy = false)
         {
             var clone = CreateNewInstance(factory);
+            parent?.AppendChild(clone);
             if (!clone.GetType().IsEquivalentTo(GetType()))
             {
                 ErrorUtilities.ThrowInternalError("{0}.Clone() returned an instance of type {1}.", GetType().Name, clone.GetType().Name);
             }
 
-            clone.CopyFrom(this);
+            clone.CopyFrom(this, deepCopy);
             return clone;
         }
 
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index 3de6bee0c32..544d7dc253b 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -343,17 +343,20 @@ public virtual void DeepCopyFrom(ProjectElementContainer element)
             }
 
             RemoveAllChildren();
-            CopyFrom(element);
+            CopyFrom(element, true);
 
-            foreach (ProjectElement child in element.Children)
+            if (Link is not null)
             {
-                if (child is ProjectElementContainer childContainer)
+                foreach (ProjectElement child in element.Children)
                 {
-                    childContainer.DeepClone(ContainingProject, this);
-                }
-                else
-                {
-                    AppendChild(child.Clone(ContainingProject));
+                    if (child is ProjectElementContainer childContainer)
+                    {
+                        childContainer.DeepClone(ContainingProject, this);
+                    }
+                    else
+                    {
+                        AppendChild(child.Clone(ContainingProject));
+                    }
                 }
             }
         }
@@ -396,9 +399,7 @@ internal void AppendParentedChildNoChecks(ProjectElement child)
         /// <returns>The cloned element.</returns>
         protected internal virtual ProjectElementContainer DeepClone(ProjectRootElement factory, ProjectElementContainer parent)
         {
-            var clone = (ProjectElementContainer)Clone(factory);
-            parent?.AppendChild(clone);
-
+            ProjectElementContainer clone = (ProjectElementContainer)Clone(factory, parent);
             foreach (ProjectElement child in Children)
             {
                 if (child is ProjectElementContainer childContainer)
@@ -407,7 +408,7 @@ protected internal virtual ProjectElementContainer DeepClone(ProjectRootElement
                 }
                 else
                 {
-                    clone.AppendChild(child.Clone(clone.ContainingProject));
+                    clone.AppendChild(child.Clone(clone.ContainingProject, deepCopy: true));
                 }
             }
 
diff --git a/src/Build/Construction/ProjectItemGroupElement.cs b/src/Build/Construction/ProjectItemGroupElement.cs
index 58418960335..aad01ef4b93 100644
--- a/src/Build/Construction/ProjectItemGroupElement.cs
+++ b/src/Build/Construction/ProjectItemGroupElement.cs
@@ -158,6 +158,15 @@ public override void CopyFrom(ProjectElement element)
             _definitelyAreNoChildrenWithWildcards = false;
         }
 
+        /// <inheritdoc />
+        internal override void CopyFrom(ProjectElement element, bool deepCopy)
+        {
+            base.CopyFrom(element, deepCopy);
+
+            // clear out caching fields.
+            _definitelyAreNoChildrenWithWildcards = false;
+        }
+
         /// <summary>
         /// Creates an unparented ProjectItemGroupElement, wrapping an unparented XmlElement.
         /// Caller should then ensure the element is added to the XmlDocument in the appropriate location.
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs
index 4a244d9e504..282009ffd78 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs
@@ -86,12 +86,12 @@ public abstract class ProjectElementLink : ILinkedXml
         public abstract ElementLocation Location { get; }
 
         /// <summary>
-        /// Supports <see cref="ProjectElement.CopyFrom"/>.
+        /// Supports <see cref="ProjectElement.CopyFrom(ProjectElement)"/>.
         /// </summary>
         public abstract IReadOnlyCollection<XmlAttributeLink> Attributes { get; }
 
         /// <summary>
-        /// Supports <see cref="ProjectElement.CopyFrom"/>.
+        /// Supports <see cref="ProjectElement.CopyFrom(ProjectElement)"/>.
         /// return raw xml content of the element if it has exactly 1 text child
         /// </summary>
         public abstract string PureText { get; }
@@ -112,7 +112,7 @@ public abstract class ProjectElementLink : ILinkedXml
         public abstract void SetOrRemoveAttribute(string name, string value, bool clearAttributeCache, string reason, string param);
 
         /// <summary>
-        /// Facilitate remoting to remote <see cref="ProjectElement.CopyFrom"/>.
+        /// Facilitate remoting to remote <see cref="ProjectElement.CopyFrom(ProjectElement)"/>.
         /// </summary>
         public abstract void CopyFrom(ProjectElement element);
 
