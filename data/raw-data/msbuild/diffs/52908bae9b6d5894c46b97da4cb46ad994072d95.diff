diff --git a/src/Tasks.UnitTests2/AssemblyIdentityTest.cs b/src/Tasks.UnitTests2/AssemblyIdentityTest.cs
deleted file mode 100644
index 5425479a9a6..00000000000
--- a/src/Tasks.UnitTests2/AssemblyIdentityTest.cs
+++ /dev/null
@@ -1,125 +0,0 @@
-﻿using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
-using Microsoft.VisualStudio.TestTools.UnitTesting;
-using System.Collections.Generic;
-namespace XMakeTasksUnitTests
-{
-    
-    
-    /// <summary>
-    ///This is a test class for AssemblyIdentityTest and is intended
-    ///to contain all AssemblyIdentityTest Unit Tests
-    ///</summary>
-    [TestClass()]
-    public class AssemblyIdentityTest
-    {
-
-
-        private TestContext testContextInstance;
-
-        /// <summary>
-        ///Gets or sets the test context which provides
-        ///information about and functionality for the current test run.
-        ///</summary>
-        public TestContext TestContext
-        {
-            get
-            {
-                return testContextInstance;
-            }
-            set
-            {
-                testContextInstance = value;
-            }
-        }
-
-        #region Additional test attributes
-        // 
-        //You can use the following additional attributes as you write your tests:
-        //
-        //Use ClassInitialize to run code before running the first test in the class
-        //[ClassInitialize()]
-        //public static void MyClassInitialize(TestContext testContext)
-        //{
-        //}
-        //
-        //Use ClassCleanup to run code after all tests in a class have run
-        //[ClassCleanup()]
-        //public static void MyClassCleanup()
-        //{
-        //}
-        //
-        //Use TestInitialize to run code before running each test
-        //[TestInitialize()]
-        //public void MyTestInitialize()
-        //{
-        //}
-        //
-        //Use TestCleanup to run code after each test has run
-        //[TestCleanup()]
-        //public void MyTestCleanup()
-        //{
-        //}
-        //
-        #endregion
-
-
-        /// <summary>
-        ///A test for IsFrameworkAssembly
-        ///</summary>
-        [TestMethod()]
-        public void IsFrameworkAssemblyTest()
-        {
-            bool actual;
-            IList<string> listOfInstalledFrameworks = FrameworkMultiTargeting.GetSupportedTargetFrameworks();
-
-            // if 2.0 is installed on this computer, we will test IsFrameworkAssembly for 2.0 assemblies.
-            if (hasVersion(listOfInstalledFrameworks, "Version=v2.0"))
-            {
-                //if (hasVersion(listOfInstalledFrameworks
-                // Test 2.0 CLR binary
-                // "Microsoft.Build.Engine" Version="2.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" FileVersion="2.0.50727.3026" InGAC="true" />
-                AssemblyIdentity clr2Binary = new AssemblyIdentity("Microsoft.Build.Engine", "2.0.0.0", "b03f5f7f11d50a3a", "neutral", "MSIL");
-                actual = clr2Binary.IsFrameworkAssembly;
-                Assert.IsTrue(actual);
-            }
-
-            if (hasVersion(listOfInstalledFrameworks, "Version=v3.0"))
-            {
-                // Test 3.0 CLR binary
-                // AssemblyName="System.ServiceModel" Version="3.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="false" IsRedistRoot="true" />
-                AssemblyIdentity clr3Binary = new AssemblyIdentity("System.ServiceModel", "3.0.0.0", "b77a5c561934e089", "neutral", "MSIL");
-                actual = clr3Binary.IsFrameworkAssembly;
-                Assert.IsTrue(actual);
-            }
-
-            if (hasVersion(listOfInstalledFrameworks, "Version=v3.5"))
-            {
-                // Test 3.5 CLR binary
-                // AssemblyName="Microsoft.Build.Tasks.v3.5" Version="3.5.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="false" />
-                AssemblyIdentity clr35Binary = new AssemblyIdentity("Microsoft.Build.Tasks.v3.5", "3.5.0.0", "b03f5f7f11d50a3a", "neutral", "MSIL");
-                actual = clr35Binary.IsFrameworkAssembly;
-                Assert.IsTrue(actual);
-            }
-
-            if (hasVersion(listOfInstalledFrameworks, "Version=v4.0"))
-            {
-                // Test 4.0 CLR binary
-                // AssemblyName="Microsoft.VisualBasic" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" FileVersion="4.0.41117.0" InGAC="true" />
-                AssemblyIdentity clr4Binary = new AssemblyIdentity("Microsoft.VisualBasic", "10.0.0.0", "b03f5f7f11d50a3a", "neutral", "MSIL");
-                actual = clr4Binary.IsFrameworkAssembly;
-                Assert.IsTrue(actual);
-            }
-        }
-
-        private bool hasVersion(IList<string> listOfInstalledFrameworks, string p)
-        {
-            foreach (string fx in listOfInstalledFrameworks)
-            {
-                if (fx.Contains(p))
-                    return true;
-            }
-
-            return false;
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests2/AuthoringTests.txt b/src/Tasks.UnitTests2/AuthoringTests.txt
deleted file mode 100644
index 3eb1fca8202..00000000000
--- a/src/Tasks.UnitTests2/AuthoringTests.txt
+++ /dev/null
@@ -1,136 +0,0 @@
-﻿==========================================================================
-    Visual Studio Team System: Overview of Authoring and Running Tests    
-==========================================================================
-
-This overview describes the features for authoring and running tests in 
-Visual Studio Team System and Visual Studio Team Edition for Software Testers.
-
-Opening Tests
--------------
-To open a test, open a test project or a test metadata file (a file with
-extension .vsmdi) that contains the definition of the test. You can find
-test projects and metadata files in Solution Explorer.
-
-Viewing Tests
--------------
-To see which tests are available to you, open the Test View window. Or,
-if you have installed Team Edition for Software Testers, you can also open
-the Test List Editor window to view tests.
-
-To open the Test View window, click the Test menu, point to Windows, and
-then click Test View. To open the Test List Editor window (if you have
-installed Team Edition for Software Testers), click Test, point to Windows,
-and then click Test List Editor.
-
-Running Tests
--------------
-You can run tests from the Test View window and the Test List Editor window.
-See Viewing Tests to learn how to open these windows. To run one or more
-tests displayed in the Test View window, first select the tests in that
-window; to select multiple tests, hold either the Shift or CTRL key while
-clicking tests. Then click the Run Tests button in the Test View window
-toolbar.
-
-If you have installed Visual Studio Team Edition for Software Testers, you can
-also use the Test List Editor window to run tests. To run tests in Test List Editor,
-select the check box next to each test that you want to run. Then click the
-Run Tests button in the Test List Editor window toolbar.
-
-Viewing Test Results
---------------------
-When you run a test or a series of tests, the results of the test run will be
-shown in the Test Results window. Each individual test in the run is shown on
-a separate line so that you can see its status. The window contains an
-embedded status bar in the top half of the window that provides you with
-summary details of the complete test run.
-
-To see more detailed results for a particular test result, double-click it in
-the Test Results window. This opens a window that provides more information
-about the particular test result, such as any specific error messages returned
-by the test.
-
-Changing the way that tests are run
------------------------------------
-Each time you run one or more tests, a collection of settings is used to
-determine how those tests are run. These settings are contained in a “test
-settings” file.
-
-Here is a partial list of the changes you can make with a test settings file:
-
- - Change the naming scheme for each test run.
- - Change the test controller that the tests are run on so that you can run
-   tests remotely.
- - Gather code coverage data for the code being tested so that you can see
-   which lines of code are covered by your tests.
- - Enable and disable test deployment. 
- - Specify additional files to deploy before tests are run.
- - Select a different host, ASP.NET, for running ASP.NET unit tests.
- - Select a different host, the smart device test host, for running smart device unit tests.
- - Set various properties for the test agents that run your tests.
- - Specify to use data collectors that can collect various information as
-   the tests are running.
- - Run custom scripts at the start and end of each test run so that you can
-   set up the test environment exactly as required each time tests are run.
- - Set time limits for tests and test runs.
- - Set the browser mix and the number of times to repeat Web tests in the
-   test run.
-
-By default, a test settings file is created whenever you create a new test
-project. You make changes to this file by double-clicking it in Solution
-Explorer and then changing the test settings. (Test settings files have the
-extension .testsettings.)
-
-A solution can contain multiple test settings files. Only one of those
-files, known as the “Active” test settings file, is used to determine the
-settings that are currently used for test runs. You select the active test
-settings by clicking Select Active Test Settings on the Test menu.
-
--------------------------------------------------------------------------------
-
-Test Types
-----------
-Using Visual Studio Team Edition for Software Testers, you can create a number
-of different test types:
-
-Unit test: Use a unit test to create a programmatic test in C++, Visual C# or
-Visual Basic that exercises source code. A unit test calls the methods of a
-class, passing suitable parameters, and verifies that the returned value is
-what you expect.
-There are three specialized variants of unit tests:
- - Data-driven unit tests are created when you configure a unit test to be
-   called repeatedly for each row of a data source. The data from each row
-   is used by the unit test as input data.
- - ASP.NET unit tests are unit tests that exercise code in an ASP.NET Web
-   application.
- - Smart device unit tests are unit tests that are deployed to a smart device
-   or emulator and then executed by the smart device test host.  
-
-Web Test: Web tests consist of an ordered series of HTTP requests that you
-record in a browser session using Microsoft Internet Explorer. You can have
-the test report specific details about the pages or sites it requests, such
-as whether a particular page contains a specified string.
-
-Load Test: You use a load test to encapsulate non-manual tests, such as
-unit, Web, and generic tests, and then run them simultaneously by using
-virtual users. Running these tests under load generates test results,
-including performance and other counters, in tables and in graphs.
-
-Generic test: A generic test is an existing program wrapped to function as a
-test in Visual Studio. The following are examples of tests or programs that
-you can turn into generic tests:
- - An existing test that uses process exit codes to communicate whether the
-   test passed or failed. 0 indicates passing and any other value indicates
-   a failure.
- - A general program to obtain specific functionality during a test scenario.
- - A test or program that uses a special XML file (called a “summary results
-   file”), to communicate detailed results.
-
-Manual test: The manual test type is used when the test tasks are to be
-completed by a test engineer as opposed to an automated script.
-
-Ordered test: Use an ordered test to execute a set of tests in an order you
-specify.
-
--------------------------------------------------------------------------------
-
-
diff --git a/src/Tasks.UnitTests2/Properties/AssemblyInfo.cs b/src/Tasks.UnitTests2/Properties/AssemblyInfo.cs
deleted file mode 100644
index ca470e18458..00000000000
--- a/src/Tasks.UnitTests2/Properties/AssemblyInfo.cs
+++ /dev/null
@@ -1,33 +0,0 @@
-﻿using System.Reflection;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-
-// General Information about an assembly is controlled through the following 
-// set of attributes. Change these attribute values to modify the information
-// associated with an assembly.
-[assembly: AssemblyTitle("XMakeTasksUnitTests")]
-[assembly: AssemblyDescription("")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyProduct("XMakeTasksUnitTests")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
-
-// Setting ComVisible to false makes the types in this assembly not visible 
-// to COM componenets.  If you need to access a type in this assembly from 
-// COM, set the ComVisible attribute to true on that type.
-[assembly: ComVisible(false)]
-
-// The following GUID is for the ID of the typelib if this project is exposed to COM
-[assembly: Guid("de6f3aea-4f78-444d-9f24-6955d929c1f9")]
-
-// Version information for an assembly consists of the following four values:
-//
-//      Major Version
-//      Minor Version 
-//      Build Number
-//      Revision
-//
-// You can specify all the values or you can default the Revision and Build Numbers 
-// by using the '*' as shown below:
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/src/Tasks.UnitTests2/UtilTest.cs b/src/Tasks.UnitTests2/UtilTest.cs
deleted file mode 100644
index ff01de06a76..00000000000
--- a/src/Tasks.UnitTests2/UtilTest.cs
+++ /dev/null
@@ -1,96 +0,0 @@
-﻿using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
-using Microsoft.VisualStudio.TestTools.UnitTesting;
-namespace XMakeTasksUnitTests
-{
-    
-    
-    /// <summary>
-    ///This is a test class for UtilTest and is intended
-    ///to contain all UtilTest Unit Tests
-    ///</summary>
-    [TestClass()]
-    public class UtilTest
-    {
-
-
-        private TestContext testContextInstance;
-
-        /// <summary>
-        ///Gets or sets the test context which provides
-        ///information about and functionality for the current test run.
-        ///</summary>
-        public TestContext TestContext
-        {
-            get
-            {
-                return testContextInstance;
-            }
-            set
-            {
-                testContextInstance = value;
-            }
-        }
-
-        #region Additional test attributes
-        // 
-        //You can use the following additional attributes as you write your tests:
-        //
-        //Use ClassInitialize to run code before running the first test in the class
-        //[ClassInitialize()]
-        //public static void MyClassInitialize(TestContext testContext)
-        //{
-        //}
-        //
-        //Use ClassCleanup to run code after all tests in a class have run
-        //[ClassCleanup()]
-        //public static void MyClassCleanup()
-        //{
-        //}
-        //
-        //Use TestInitialize to run code before running each test
-        //[TestInitialize()]
-        //public void MyTestInitialize()
-        //{
-        //}
-        //
-        //Use TestCleanup to run code after each test has run
-        //[TestCleanup()]
-        //public void MyTestCleanup()
-        //{
-        //}
-        //
-        #endregion
-
-
-        /// <summary>
-        ///A test for GetClrVersion
-        ///</summary>
-        [TestMethod()]
-        [DeploymentItem("Microsoft.Build.Tasks.v4.0.dll")]
-        public void GetClrVersionTest()
-        {
-            string targetFrameworkVersion = "v3.5";
-            string expected = "2.0.50727.0"; 
-            string actual;
-            actual = Util_Accessor.GetClrVersion(targetFrameworkVersion);
-            Assert.AreEqual(expected, actual);
-
-            targetFrameworkVersion = "3.5";
-            actual = Util_Accessor.GetClrVersion(targetFrameworkVersion);
-            Assert.AreEqual(expected, actual);
-
-            System.Version currentVersion = System.Environment.Version;
-            System.Version clr4Version = new System.Version(currentVersion.Major, currentVersion.Minor, currentVersion.Build, 0);
-            
-            targetFrameworkVersion = "v4.0";
-            actual = Util_Accessor.GetClrVersion(targetFrameworkVersion);
-            expected = clr4Version.ToString();
-            Assert.AreEqual(expected, actual);
-
-            targetFrameworkVersion = "v4.2";
-            actual = Util_Accessor.GetClrVersion(targetFrameworkVersion);
-            expected = clr4Version.ToString();
-            Assert.AreEqual(expected, actual);
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests2/XMakeTasksUnitTests.csproj b/src/Tasks.UnitTests2/XMakeTasksUnitTests.csproj
deleted file mode 100644
index 78562a2f182..00000000000
--- a/src/Tasks.UnitTests2/XMakeTasksUnitTests.csproj
+++ /dev/null
@@ -1,100 +0,0 @@
-﻿<Project ToolsVersion="dogfood" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <Import Project="$(_NTDRIVE)$(_NTROOT)\tools\Microsoft.DevDiv.Settings.targets" />  <PropertyGroup>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>10.0.10911</ProductVersion>
-    <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{9EA71CF9-9A62-4ED8-AFE8-DD5753EE377B}</ProjectGuid>
-    <OutputType>Library</OutputType>
-    <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>XMakeTasksUnitTests</RootNamespace>
-    <AssemblyName>XMakeTasksUnitTests</AssemblyName>
-    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
-    <FileAlignment>512</FileAlignment>
-    <ProjectTypeGuids>{3AC096D0-A1C2-E12C-1390-A8335801FDAB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <DebugSymbols>true</DebugSymbols>
-    <DebugType>full</DebugType>
-    <Optimize>false</Optimize>
-    <OutputPath>bin\Debug\</OutputPath>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <DebugType>pdbonly</DebugType>
-    <Optimize>true</Optimize>
-    <OutputPath>bin\Release\</OutputPath>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include="Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\Framework\objr\i386\Microsoft.Build.Framework.dll</HintPath>
-    </Reference>
-    <Reference Include="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\objr\i386\Microsoft.Build.Tasks.v4.0.dll</HintPath>
-    </Reference>
-    <Reference Include="Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\Utilities\objr\i386\Microsoft.Build.Utilities.v4.0.dll</HintPath>
-    </Reference>
-    <Reference Include="Microsoft.VisualStudio.QualityTools.UnitTestFramework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" />
-    <Reference Include="System">
-      <HintPath>$(SdkRefPath)\System.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Configuration.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Core">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Core.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Data.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Design.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Drawing.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Security.dll</HintPath>
-    </Reference>
-    <Reference Include="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.Windows.Forms.dll</HintPath>
-    </Reference>
-    <Reference Include="System.XML, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
-      <SpecificVersion>False</SpecificVersion>
-      <HintPath>..\..\..\..\public\sdk\ref\v4.0\System.XML.dll</HintPath>
-    </Reference>
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="AssemblyIdentityTest.cs" />
-    <Compile Include="Properties\AssemblyInfo.cs" />
-    <Compile Include="UtilTest.cs" />
-  </ItemGroup>
-  <ItemGroup>
-    <Content Include="AuthoringTests.txt" />
-  </ItemGroup>
-  <ItemGroup>
-    <Shadow Include="Test References\Microsoft.Build.Tasks.v3.5.accessor" />
-  </ItemGroup>
-  <Import Project="$(_NTDRIVE)$(_NTROOT)\tools\x86\managed\v4.0\Microsoft.CSharp.targets" />
-  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
-       Other similar extension points exist, see Microsoft.Common.targets.
-  <Target Name="BeforeBuild">
-  </Target>
-  <Target Name="AfterBuild">
-  </Target>
-  -->
-</Project>
\ No newline at end of file
