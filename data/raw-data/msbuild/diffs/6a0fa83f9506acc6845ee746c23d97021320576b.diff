diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index 81b11a5b4ed..e238270ae6a 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -82,7 +82,7 @@
 
   <PropertyGroup Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' or $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard')">
     <NetCoreBuild>true</NetCoreBuild>
-    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE</DefineConstants>
+    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE;FEATURE_FASTSPAN</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(NetCoreBuild)'=='true'">
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 88f24171f30..162a6e7e7bb 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -716,7 +716,7 @@ internal static bool IsMono
     /// <summary>
     /// Gets a flag indicating if we are running under some version of Windows
     /// </summary>
-#if NET5_0_OR_GREATER
+#if RUNTIME_TYPE_NETCORE
     [SupportedOSPlatformGuard("windows")]
 #endif
     internal static bool IsWindows
diff --git a/src/StringTools/InternableString.cs b/src/StringTools/InternableString.cs
index 7779d16e82d..f04d2a9e931 100644
--- a/src/StringTools/InternableString.cs
+++ b/src/StringTools/InternableString.cs
@@ -96,7 +96,7 @@ public bool MoveNext()
         /// </summary>
         private readonly ReadOnlySpan<char> _inlineSpan;
 
-#if RUNTIME_TYPE_NETCORE
+#if FEATURE_FASTSPAN
         /// <summary>
         /// .NET Core does not keep a reference to the containing object in <see cref="ReadOnlySpan{T}"/>. In particular,
         /// it cannot recover the string if the span represents one. We have to hold the reference separately to be able to
@@ -122,7 +122,7 @@ internal InternableString(ReadOnlySpan<char> span)
             _inlineSpan = span;
             _spans = null;
             Length = span.Length;
-#if RUNTIME_TYPE_NETCORE
+#if FEATURE_FASTSPAN
             _inlineSpanString = null;
 #endif
         }
@@ -141,7 +141,7 @@ internal InternableString(string str)
             _inlineSpan = str.AsSpan();
             _spans = null;
             Length = str.Length;
-#if RUNTIME_TYPE_NETCORE
+#if FEATURE_FASTSPAN
             _inlineSpanString = str;
 #endif
         }
@@ -154,7 +154,7 @@ internal InternableString(SpanBasedStringBuilder stringBuilder)
             _inlineSpan = default(ReadOnlySpan<char>);
             _spans = stringBuilder.Spans;
             Length = stringBuilder.Length;
-#if RUNTIME_TYPE_NETCORE
+#if FEATURE_FASTSPAN
             _inlineSpanString = null;
 #endif
         }
@@ -220,7 +220,7 @@ public unsafe string ExpensiveConvertToString()
             // Special case: if we hold just one string, we can directly return it.
             if (_inlineSpan.Length == Length)
             {
-#if RUNTIME_TYPE_NETCORE
+#if FEATURE_FASTSPAN
                 if (_inlineSpanString != null)
                 {
                     return _inlineSpanString;
