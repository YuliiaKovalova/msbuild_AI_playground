diff --git a/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs b/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
index d41ca0fcf11..43c261e5676 100644
--- a/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
@@ -25,7 +25,7 @@ public class ExpanderFunction_Tests
         [Fact]
         public void TryConvertToIntGivenNull()
         {
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(null, out int actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(null, out int actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -33,7 +33,7 @@ public void TryConvertToIntGivenNull()
         public void TryConvertToIntGivenDouble()
         {
             const double value = 10.0;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -41,7 +41,7 @@ public void TryConvertToIntGivenDouble()
         public void TryConvertToIntGivenLong()
         {
             const long value = 10;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -49,7 +49,7 @@ public void TryConvertToIntGivenLong()
         public void TryConvertToIntGivenInt()
         {
             const int value = 10;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -57,7 +57,7 @@ public void TryConvertToIntGivenInt()
         public void TryConvertToIntGivenString()
         {
             const string value = "10";
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -66,7 +66,7 @@ public void TryConvertToIntGivenDoubleWithIntMinValue()
         {
             const int expected = int.MinValue;
             const double value = expected;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeTrue();
             actual.ShouldBe(expected);
         }
 
@@ -75,7 +75,7 @@ public void TryConvertToIntGivenDoubleWithIntMaxValue()
         {
             const int expected = int.MaxValue;
             const double value = expected;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeTrue();
             actual.ShouldBe(expected);
         }
 
@@ -83,7 +83,7 @@ public void TryConvertToIntGivenDoubleWithIntMaxValue()
         public void TryConvertToIntGivenDoubleWithLessThanIntMinValue()
         {
             const double value = int.MinValue - 1.0;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -91,7 +91,7 @@ public void TryConvertToIntGivenDoubleWithLessThanIntMinValue()
         public void TryConvertToIntGivenDoubleWithGreaterThanIntMaxValue()
         {
             const double value = int.MaxValue + 1.0;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -99,7 +99,7 @@ public void TryConvertToIntGivenDoubleWithGreaterThanIntMaxValue()
         public void TryConvertToIntGivenLongWithGreaterThanIntMaxValue()
         {
             const long value = int.MaxValue + 1L;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToInt(value, out int actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToInt(value, out int actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -108,7 +108,7 @@ public void TryConvertToIntGivenLongWithGreaterThanIntMaxValue()
         [Fact]
         public void TryConvertToLongGivenNull()
         {
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(null, out long actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(null, out long actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -116,7 +116,7 @@ public void TryConvertToLongGivenNull()
         public void TryConvertToLongGivenDouble()
         {
             const double value = 10.0;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -124,7 +124,7 @@ public void TryConvertToLongGivenDouble()
         public void TryConvertToLongGivenLong()
         {
             const long value = 10;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -132,7 +132,7 @@ public void TryConvertToLongGivenLong()
         public void TryConvertToLongGivenInt()
         {
             const int value = 10;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -140,7 +140,7 @@ public void TryConvertToLongGivenInt()
         public void TryConvertToLongGivenString()
         {
             const string value = "10";
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeTrue();
             actual.ShouldBe(10);
         }
 
@@ -149,7 +149,7 @@ public void TryConvertToLongGivenDoubleWithLongMinValue()
         {
             const long expected = long.MinValue;
             const double value = expected;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeTrue();
             actual.ShouldBe(expected);
         }
 
@@ -159,14 +159,14 @@ public void TryConvertToLongGivenDoubleWithLongMaxValueShouldNotThrow()
             // An OverflowException should not be thrown from TryConvertToLong().
             // Convert.ToInt64(double) has a defect and will throw an OverflowException
             // for values >= (long.MaxValue - 511) and <= long.MaxValue.
-            _ = Should.NotThrow(() => Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong((double)long.MaxValue, out _));
+            _ = Should.NotThrow(() => Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong((double)long.MaxValue, out _));
         }
 
         [Fact]
         public void TryConvertToLongGivenDoubleWithLongMaxValue()
         {
             const long longMaxValue = long.MaxValue;
-            bool result = Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong((double)longMaxValue, out long actual);
+            bool result = Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong((double)longMaxValue, out long actual);
             if (RuntimeInformation.OSArchitecture != Architecture.Arm64)
             {
                 // Because of loss of precision, long.MaxValue will not 'round trip' from long to double to long.
@@ -189,7 +189,7 @@ public void TryConvertToLongGivenDoubleWithVeryLargeLongValue()
             const long veryLargeLong = long.MaxValue - 512;
             const double value = veryLargeLong;
             const long expected = 9223372036854774784L;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeTrue();
             actual.ShouldBe(expected);
         }
 
@@ -197,7 +197,7 @@ public void TryConvertToLongGivenDoubleWithVeryLargeLongValue()
         public void TryConvertToLongGivenDoubleWithLessThanLongMinValue()
         {
             const double value = -92233720368547758081D;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -205,7 +205,7 @@ public void TryConvertToLongGivenDoubleWithLessThanLongMinValue()
         public void TryConvertToLongGivenDoubleWithGreaterThanLongMaxValue()
         {
             const double value = (double)long.MaxValue + long.MaxValue;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToLong(value, out long actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong(value, out long actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -214,7 +214,7 @@ public void TryConvertToLongGivenDoubleWithGreaterThanLongMaxValue()
         [Fact]
         public void TryConvertToDoubleGivenNull()
         {
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToDouble(null, out double actual).ShouldBeFalse();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(null, out double actual).ShouldBeFalse();
             actual.ShouldBe(0);
         }
 
@@ -222,7 +222,7 @@ public void TryConvertToDoubleGivenNull()
         public void TryConvertToDoubleGivenDouble()
         {
             const double value = 10.0;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
             actual.ShouldBe(10.0);
         }
 
@@ -230,7 +230,7 @@ public void TryConvertToDoubleGivenDouble()
         public void TryConvertToDoubleGivenLong()
         {
             const long value = 10;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
             actual.ShouldBe(10.0);
         }
 
@@ -238,7 +238,7 @@ public void TryConvertToDoubleGivenLong()
         public void TryConvertToDoubleGivenInt()
         {
             const int value = 10;
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
             actual.ShouldBe(10.0);
         }
 
@@ -246,7 +246,7 @@ public void TryConvertToDoubleGivenInt()
         public void TryConvertToDoubleGivenString()
         {
             const string value = "10";
-            Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
+            Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
             actual.ShouldBe(10.0);
         }
 
@@ -264,7 +264,7 @@ public void TryConvertToDoubleGivenStringAndLocale()
                 // The invariant culture should be used and "1,2" should be 12.0 not 1.2.
                 var cultureEnglishSouthAfrica = CultureInfo.CreateSpecificCulture("en-ZA");
                 currentThread.CurrentCulture = cultureEnglishSouthAfrica;
-                Expander<IProperty2, IItem>.Function<IProperty2>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
+                Expander<IProperty, IItem>.Function<IProperty>.TryConvertToDouble(value, out double actual).ShouldBeTrue();
                 actual.ShouldBe(12.0);
             }
             finally
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index a0af931ad2d..349824cfe4e 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -3,20 +3,9 @@
 
 using System;
 using System.Collections.Generic;
-using System.Collections.ObjectModel;
-using System.Diagnostics;
-using System.Diagnostics.Tracing;
-using System.IO;
 using System.Linq;
-using System.Runtime.ConstrainedExecution;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.BackEnd.Components.Caching;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.BuildCheck.Analyzers;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 4cecdcfc36c..61a8202f784 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -19,7 +19,7 @@ namespace Microsoft.Build.Evaluation
     /// An evaluated design-time property
     /// </summary>
     [DebuggerDisplay("{Name}={EvaluatedValue} [{UnevaluatedValue}]")]
-    public abstract class ProjectProperty : IKeyed, IValued, IProperty2, IEquatable<ProjectProperty>
+    public abstract class ProjectProperty : IKeyed, IValued, IProperty, IEquatable<ProjectProperty>
     {
         /// <summary>
         /// Project that this property lives in.
@@ -115,7 +115,7 @@ string IProperty.EvaluatedValueEscaped
         /// </summary>
         public (string File, int Line, int Column) Location { get; set; }
 
-        string IProperty2.GetEvaluatedValueEscaped(IElementLocation location)
+        string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
         {
             if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
             {
diff --git a/src/Build/Evaluation/ConditionEvaluator.cs b/src/Build/Evaluation/ConditionEvaluator.cs
index 2e4681b953c..f7918c19052 100644
--- a/src/Build/Evaluation/ConditionEvaluator.cs
+++ b/src/Build/Evaluation/ConditionEvaluator.cs
@@ -189,7 +189,7 @@ internal static bool EvaluateCondition<P, I>(
             IFileSystem fileSystem,
             LoggingContext? loggingContext,
             ProjectRootElementCacheBase? projectRootElementCache = null)
-            where P : class, IProperty2
+            where P : class, IProperty
             where I : class, IItem
         {
             return EvaluateConditionCollectingConditionedProperties(
@@ -223,7 +223,7 @@ internal static bool EvaluateConditionCollectingConditionedProperties<P, I>(
             IFileSystem fileSystem,
             LoggingContext? loggingContext,
             ProjectRootElementCacheBase? projectRootElementCache = null)
-            where P : class, IProperty2
+            where P : class, IProperty
             where I : class, IItem
         {
             ErrorUtilities.VerifyThrowArgumentNull(condition, nameof(condition));
@@ -384,7 +384,7 @@ internal interface IConditionEvaluationState
         /// is stateless and reusable
         /// </summary>
         internal class ConditionEvaluationState<P, I> : IConditionEvaluationState
-            where P : class, IProperty2
+            where P : class, IProperty
             where I : class, IItem
         {
             private readonly Expander<P, I> _expander;
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 45441510d73..b82733a9d8e 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Build.Evaluation
     /// This class could be improved to do partial (minimal) reevaluation: at present we wipe all state and start over.
     /// </remarks>
     internal class Evaluator<P, I, M, D>
-        where P : class, IProperty2, IEquatable<P>, IValued
+        where P : class, IProperty, IEquatable<P>, IValued
         where I : class, IItem<M>, IMetadataTable
         where M : class, IMetadatum
         where D : class, IItemDefinition<M>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index b3248dfcd14..cc4562be381 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -130,7 +130,7 @@ internal enum ExpanderOptions
     /// <typeparam name="P">Type of the properties used.</typeparam>
     /// <typeparam name="I">Type of the items used.</typeparam>
     internal class Expander<P, I>
-        where P : class, IProperty2
+        where P : class, IProperty
         where I : class, IItem
     {
         /// <summary>
@@ -1126,7 +1126,7 @@ _metadata is IItemTypeDefinition itemMetadata &&
         /// </remarks>
         /// <typeparam name="T">Type of the properties used to expand the expression.</typeparam>
         private static class PropertyExpander<T>
-            where T : class, IProperty2
+            where T : class, IProperty
         {
             /// <summary>
             /// This method takes a string which may contain any number of
@@ -3153,7 +3153,7 @@ private static class RegularExpressions
         }
 
         private struct FunctionBuilder<T>
-            where T : class, IProperty2
+            where T : class, IProperty
         {
             /// <summary>
             /// The type of this function's receiver.
@@ -3221,7 +3221,7 @@ internal readonly Function<T> Build()
         /// </summary>
         /// <typeparam name="T">Type of the properties used to expand the expression.</typeparam>
         internal class Function<T>
-            where T : class, IProperty2
+            where T : class, IProperty
         {
             /// <summary>
             /// The type of this function's receiver.
diff --git a/src/Build/Evaluation/IEvaluatorData.cs b/src/Build/Evaluation/IEvaluatorData.cs
index a568d1a9cd6..12d42a71ea9 100644
--- a/src/Build/Evaluation/IEvaluatorData.cs
+++ b/src/Build/Evaluation/IEvaluatorData.cs
@@ -23,7 +23,7 @@ namespace Microsoft.Build.Evaluation
     /// <typeparam name="M">The type of metadata on those items.</typeparam>
     /// <typeparam name="D">The type of item definitions to be produced.</typeparam>
     internal interface IEvaluatorData<P, I, M, D> : IPropertyProvider<P>, IItemProvider<I>
-        where P : class, IProperty2, IEquatable<P>, IValued
+        where P : class, IProperty, IEquatable<P>, IValued
         where I : class, IItem
         where M : class, IMetadatum
         where D : class, IItemDefinition<M>
diff --git a/src/Build/Evaluation/IProperty.cs b/src/Build/Evaluation/IProperty.cs
index da311eb95dc..4af5dbf25e1 100644
--- a/src/Build/Evaluation/IProperty.cs
+++ b/src/Build/Evaluation/IProperty.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.Collections;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -13,7 +14,7 @@ namespace Microsoft.Build.Evaluation
     internal interface IProperty : IKeyed
     {
         /// <summary>
-        /// Name of the property
+        /// Name of the property.
         /// </summary>
         string Name
         {
@@ -29,11 +30,21 @@ string EvaluatedValue
         }
 
         /// <summary>
-        /// Returns the evaluated, escaped value for the property
+        /// Returns the evaluated, escaped value for the property.
         /// </summary>
         string EvaluatedValueEscaped
         {
             get;
         }
+
+        /// <summary>
+        /// Returns the evaluated, escaped value for the property and sets up the property location if it is available.
+        /// </summary>
+        string GetEvaluatedValueEscaped(IElementLocation location);
+
+        /// <summary>
+        /// Property location in xml file. Can be empty.
+        /// </summary>
+        (string File, int Line, int Column) Location { get; set; }
     }
 }
diff --git a/src/Build/Evaluation/IProperty2.cs b/src/Build/Evaluation/IProperty2.cs
deleted file mode 100644
index c840450910c..00000000000
--- a/src/Build/Evaluation/IProperty2.cs
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using Microsoft.Build.Construction;
-using Microsoft.Build.Shared;
-
-namespace Microsoft.Build.Evaluation
-{
-    internal interface IProperty2 : IProperty
-    {
-        string GetEvaluatedValueEscaped(IElementLocation location);
-
-        (string File, int Line, int Column) Location { get; set; }
-    }
-}
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index ca2d1b530c9..ce2c28494ff 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Evaluation
     ///     provides some operations over them (like matching items against a given ItemSpec)
     /// </summary>
     internal class ItemSpec<P, I>
-        where P : class, IProperty2
+        where P : class, IProperty
         where I : class, IItem, IMetadataTable
     {
         internal readonly struct ReferencedItem
@@ -570,7 +570,7 @@ public override IEnumerable<string> GetReferencedItems()
     /// <typeparam name="P">Property type</typeparam>
     /// <typeparam name="I">Item type</typeparam>
     internal sealed class MetadataTrie<P, I>
-        where P : class, IProperty2
+        where P : class, IProperty
         where I : class, IItem, IMetadataTable
     {
         private readonly Dictionary<string, MetadataTrie<P, I>> _children;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 525e7c58ab3..4b658abbecf 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -24,7 +24,7 @@
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
-        where P : class, IProperty2, IEquatable<P>, IValued
+        where P : class, IProperty, IEquatable<P>, IValued
         where I : class, IItem<M>, IMetadataTable
         where M : class, IMetadatum
         where D : class, IItemDefinition<M>
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 03830cd4eda..4b2cd613881 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -24,7 +24,7 @@ namespace Microsoft.Build.Evaluation
     /// <typeparam name="M">The type of metadata on those items.</typeparam>
     /// <typeparam name="D">The type of item definitions to be produced.</typeparam>
     internal class PropertyTrackingEvaluatorDataWrapper<P, I, M, D> : IEvaluatorData<P, I, M, D>
-        where P : class, IProperty2, IEquatable<P>, IValued
+        where P : class, IProperty, IEquatable<P>, IValued
         where I : class, IItem
         where M : class, IMetadatum
         where D : class, IItemDefinition<M>
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 8d025518142..a84e2add49a 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -21,7 +21,7 @@ namespace Microsoft.Build.Execution
     /// Added and removed via methods on the ProjectInstance object.
     /// </summary>
     [DebuggerDisplay("{_name}={_escapedValue}")]
-    public class ProjectPropertyInstance : IKeyed, IValued, IProperty2, IEquatable<ProjectPropertyInstance>, ITranslatable
+    public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<ProjectPropertyInstance>, ITranslatable
     {
         /// <summary>
         /// Name of the property
@@ -106,7 +106,7 @@ string IProperty.EvaluatedValueEscaped
             }
         }
 
-        string IProperty2.GetEvaluatedValueEscaped(IElementLocation location)
+        string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
         {
             if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
             {
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 393e459c0c8..598819b3cd4 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -247,7 +247,7 @@ internal IDictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> TaskReg
         /// <summary>
         /// Evaluate the usingtask and add the result into the data passed in
         /// </summary>
-        /// <typeparam name="P">A type derived from IProperty2</typeparam>
+        /// <typeparam name="P">A type derived from IProperty</typeparam>
         /// <typeparam name="I">A type derived from IItem</typeparam>
         internal static void InitializeTaskRegistryFromUsingTaskElements<P, I>(
             LoggingContext loggingContext,
@@ -256,7 +256,7 @@ internal static void InitializeTaskRegistryFromUsingTaskElements<P, I>(
             Expander<P, I> expander,
             ExpanderOptions expanderOptions,
             IFileSystem fileSystem)
-            where P : class, IProperty2
+            where P : class, IProperty
             where I : class, IItem
         {
             foreach ((ProjectUsingTaskElement projectUsingTaskXml, string directoryOfImportingFile) registration in registrations)
@@ -279,7 +279,7 @@ internal static void InitializeTaskRegistryFromUsingTaskElements<P, I>(
         /// <summary>
         /// Evaluate the usingtask and add the result into the data passed in
         /// </summary>
-        /// <typeparam name="P">A type derived from IProperty2</typeparam>
+        /// <typeparam name="P">A type derived from IProperty</typeparam>
         /// <typeparam name="I">A type derived from IItem</typeparam>
         private static void RegisterTasksFromUsingTaskElement
             <P, I>(
@@ -290,7 +290,7 @@ private static void RegisterTasksFromUsingTaskElement
             Expander<P, I> expander,
             ExpanderOptions expanderOptions,
             IFileSystem fileSystem)
-            where P : class, IProperty2
+            where P : class, IProperty
             where I : class, IItem
         {
             ErrorUtilities.VerifyThrowInternalNull(directoryOfImportingFile, nameof(directoryOfImportingFile));
@@ -1610,7 +1610,7 @@ internal bool TaskBodyEvaluated
                 /// <typeparam name="P">Property type</typeparam>
                 /// <typeparam name="I">Item Type</typeparam>
                 internal void ExpandUsingTask<P, I>(ProjectUsingTaskElement projectUsingTaskXml, Expander<P, I> expander, ExpanderOptions expanderOptions)
-                    where P : class, IProperty2
+                    where P : class, IProperty
                     where I : class, IItem
                 {
                     ErrorUtilities.VerifyThrowArgumentNull(projectUsingTaskXml, nameof(projectUsingTaskXml));
@@ -1636,7 +1636,7 @@ internal void ExpandUsingTask<P, I>(ProjectUsingTaskElement projectUsingTaskXml,
                 /// <typeparam name="P">IProperttyTypes</typeparam>
                 /// <typeparam name="I">IItems</typeparam>
                 private void EvaluateTaskBody<P, I>(Expander<P, I> expander, ProjectUsingTaskBodyElement taskElement, ExpanderOptions expanderOptions)
-                    where P : class, IProperty2
+                    where P : class, IProperty
                     where I : class, IItem
                 {
                     bool evaluate;
@@ -1672,7 +1672,7 @@ private void EvaluateTaskBody<P, I>(Expander<P, I> expander, ProjectUsingTaskBod
                 /// <typeparam name="P">Property type</typeparam>
                 /// <typeparam name="I">Item types</typeparam>
                 private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupElement usingTaskParameterGroup, Expander<P, I> expander, ExpanderOptions expanderOptions)
-                    where P : class, IProperty2
+                    where P : class, IProperty
                     where I : class, IItem
                 {
                     _usingTaskParameters ??= new Dictionary<string, TaskPropertyInfo>(StringComparer.OrdinalIgnoreCase);
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index fdb17b4d312..88962e732ae 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -162,7 +162,6 @@
     <Compile Include="BackEnd\Shared\BuildResultBase.cs" />
     <Compile Include="BuildCheck\**\*.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
-    <Compile Include="Evaluation\IProperty2.cs" />
     <Compile Include="Evaluation\PropertiesUseTracker.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
     <Compile Include="FileAccess\FileAccessData.cs" />
