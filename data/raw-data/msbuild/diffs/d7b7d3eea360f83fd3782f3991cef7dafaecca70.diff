diff --git a/src/Build.UnitTests/Telemetry/TelemetryTests.cs b/src/Build.UnitTests/Telemetry/Telemetry_Tests.cs
similarity index 97%
rename from src/Build.UnitTests/Telemetry/TelemetryTests.cs
rename to src/Build.UnitTests/Telemetry/Telemetry_Tests.cs
index 4b9074b2bb5..d71d954b512 100644
--- a/src/Build.UnitTests/Telemetry/TelemetryTests.cs
+++ b/src/Build.UnitTests/Telemetry/Telemetry_Tests.cs
@@ -17,11 +17,11 @@
 
 namespace Microsoft.Build.Engine.UnitTests
 {
-    public class TelemetryTests
+    public class Telemetry_Tests
     {
         private readonly ITestOutputHelper _output;
 
-        public TelemetryTests(ITestOutputHelper output)
+        public Telemetry_Tests(ITestOutputHelper output)
         {
             _output = output;
         }
@@ -171,6 +171,7 @@ public void WorkerNodeTelemetryCollection_CustomTargetsAndTasks()
         }
 
 #if NET
+        // test in .net core with opentelemetry opted in to avoid sending it but enable listening to it
         [Fact]
         public void NodeTelemetryE2E()
         {
@@ -252,7 +253,7 @@ public void NodeTelemetryE2E()
 
                 buildManager.BuildRequest(buildRequestData2);
 
-                // Phase 3: End Build - This puts telemetry to an system.diagnostics activity 
+                // Phase 3: End Build - This puts telemetry to an system.diagnostics activity
                 buildManager.EndBuild();
 
                 // Verify build activity were captured by the listener and contain task and target info
@@ -267,6 +268,7 @@ public void NodeTelemetryE2E()
                 // Verify task data
                 tags.ShouldContainKey("VS.MSBuild.Tasks");
                 var tasksJson = tags["VS.MSBuild.Tasks"];
+                tasksJson.ShouldNotBeNullOrEmpty();
                 tasksJson.ShouldContain("Microsoft.Build.Tasks.Message");
                 tasksJson.ShouldContain("Microsoft.Build.Tasks.CreateItem");
 
@@ -291,6 +293,7 @@ public void NodeTelemetryE2E()
                 // Verify Targets summary information
                 tags.ShouldContainKey("VS.MSBuild.TargetsSummary");
                 var targetsSummaryJson = tags["VS.MSBuild.TargetsSummary"];
+                targetsSummaryJson.ShouldNotBeNullOrEmpty();
                 var targetsSummary = JsonSerializer.Deserialize<JsonElement>(targetsSummaryJson);
 
                 // Verify loaded and executed targets counts
@@ -302,6 +305,7 @@ public void NodeTelemetryE2E()
                 // Verify Tasks summary information
                 tags.ShouldContainKey("VS.MSBuild.TasksSummary");
                 var tasksSummaryJson = tags["VS.MSBuild.TasksSummary"];
+                tasksSummaryJson.ShouldNotBeNullOrEmpty();
                 var tasksSummary = JsonSerializer.Deserialize<JsonElement>(tasksSummaryJson);
 
                 // Verify task execution summary metrics
