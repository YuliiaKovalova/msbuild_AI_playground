diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index a5c0b8d7f10..b6e3c089135 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -113,9 +113,6 @@ try {
   # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900
   $env:DOTNET_PERFLOG_DIR=$PerfLogDir
 
-  # Expose stage 1 path so unit tests can find the bootstrapped MSBuild.
-  $env:MSBUILD_BOOTSTRAPPED_BINDIR=$Stage1BinDir
-
   # When using bootstrapped MSBuild:
   # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
   # - Create bootstrap environment as it's required when also running tests
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index 4165de68eba..8edd377ec73 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -71,9 +71,6 @@ mv $ArtifactsDir $Stage1Dir
 # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.
 export MSBUILDDONOTLAUNCHDEBUGGER=true
 
-# Expose stage 1 path so unit tests can find the bootstrapped MSBuild.
-export MSBUILD_BOOTSTRAPPED_BINDIR="$Stage1Dir/bin"
-
 # Opt into performance logging.
 export DOTNET_PERFLOG_DIR=$PerfLogDir
 
diff --git a/src/Analyzers.UnitTests/AssemblyInfo.cs b/src/Analyzers.UnitTests/AssemblyInfo.cs
deleted file mode 100644
index 3b5d7bbb185..00000000000
--- a/src/Analyzers.UnitTests/AssemblyInfo.cs
+++ /dev/null
@@ -1,4 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
deleted file mode 100644
index 33729fa1719..00000000000
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ /dev/null
@@ -1,213 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-using System.Reflection;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.UnitTests;
-using Microsoft.Build.UnitTests.Shared;
-using Shouldly;
-using Xunit;
-using Xunit.Abstractions;
-
-namespace Microsoft.Build.Analyzers.UnitTests
-{
-    public class EndToEndTests : IDisposable
-    {
-        private readonly TestEnvironment _env;
-        public EndToEndTests(ITestOutputHelper output)
-        {
-            _env = TestEnvironment.Create(output);
-
-            // this is needed to ensure the binary logger does not pollute the environment
-            _env.WithEnvironmentInvariant();
-        }
-
-        public void Dispose() => _env.Dispose();
-
-        [Theory]
-        [InlineData(true)]
-        [InlineData(false)]
-        public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
-        {
-            string contents = $"""
-                <Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Hello">
-                    
-                    <PropertyGroup>
-                    <OutputType>Exe</OutputType>
-                    <TargetFramework>net8.0</TargetFramework>
-                    <ImplicitUsings>enable</ImplicitUsings>
-                    <Nullable>enable</Nullable>
-                    </PropertyGroup>
-                      
-                    <PropertyGroup Condition="$(Test) == true">
-                    <TestProperty>Test</TestProperty>
-                    </PropertyGroup>
-                     
-                    <ItemGroup>
-                    <ProjectReference Include=".\FooBar-Copy.csproj" />
-                    </ItemGroup>
-                      
-                    <Target Name="Hello">
-                    <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
-                    </Target>
-                    
-                </Project>
-                """;
-
-            string contents2 = $"""
-                <Project Sdk="Microsoft.NET.Sdk">
-                                   
-                    <PropertyGroup>
-                    <OutputType>Exe</OutputType>
-                    <TargetFramework>net8.0</TargetFramework>
-                    <ImplicitUsings>enable</ImplicitUsings>
-                    <Nullable>enable</Nullable>
-                    </PropertyGroup>
-                                     
-                    <PropertyGroup Condition="$(Test) == true">
-                    <TestProperty>Test</TestProperty>
-                    </PropertyGroup>
-                                    
-                    <ItemGroup>
-                    <Reference Include="bin/foo.dll" />
-                    </ItemGroup>
-                                    
-                    <Target Name="Hello">
-                    <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
-                    </Target>
-                                   
-                </Project>
-                """;
-            TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
-            TransientTestFile projectFile = _env.CreateFile(workFolder, "FooBar.csproj", contents);
-            TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
-
-            // var cache = new SimpleProjectRootElementCache();
-            // ProjectRootElement xml = ProjectRootElement.OpenProjectOrSolution(projectFile.Path, /*unused*/null, /*unused*/null, cache, false /*Not explicitly loaded - unused*/);
-
-
-            TransientTestFile config = _env.CreateFile(workFolder, "editorconfig.json",
-                /*lang=json,strict*/
-                """
-                {
-                    "BC0101": {
-                        "IsEnabled": true,
-                        "Severity": "Error"
-                    },
-                    "COND0543": {
-                        "IsEnabled": false,
-                        "Severity": "Error",
-                        "EvaluationAnalysisScope": "AnalyzedProjectOnly",
-                        "CustomSwitch": "QWERTY"
-                    },
-                    "BLA": {
-                        "IsEnabled": false
-                    }
-                }
-                """);
-
-            // OSX links /var into /private, which makes Path.GetTempPath() return "/var..." but Directory.GetCurrentDirectory return "/private/var...".
-            // This discrepancy breaks path equality checks in analyzers if we pass to MSBuild full path to the initial project.
-            // TODO: See if there is a way of fixing it in the engine.
-            _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));
-
-            _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", buildInOutOfProcessNode ? "1" : "0");
-            _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "1");
-            string output = RunnerUtilities.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
-            _env.Output.WriteLine(output);
-            success.ShouldBeTrue();
-            // The conflicting outputs warning appears
-            output.ShouldContain("BC0101");
-        }
-
-        [Fact]
-        public void skipRestorePhase()
-        {
-            string contents = $"""
-                <Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Hello">
-                    
-                    <PropertyGroup>
-                    <OutputType>Exe</OutputType>
-                    <TargetFramework>net8.0</TargetFramework>
-                    <ImplicitUsings>enable</ImplicitUsings>
-                    <Nullable>enable</Nullable>
-                    </PropertyGroup>
-                      
-                    <PropertyGroup Condition="$(Test) == true">
-                    <TestProperty>Test</TestProperty>
-                    </PropertyGroup>
-                     
-                    <ItemGroup>
-                    <ProjectReference Include=".\FooBar-Copy.csproj" />
-                    </ItemGroup>
-                      
-                    <Target Name="Hello">
-                    <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
-                    </Target>
-                    
-                </Project>
-                """;
-
-            string contents2 = $"""
-                <Project Sdk="Microsoft.NET.Sdk">
-                                   
-                    <PropertyGroup>
-                    <OutputType>Exe</OutputType>
-                    <TargetFramework>net8.0</TargetFramework>
-                    <ImplicitUsings>enable</ImplicitUsings>
-                    <Nullable>enable</Nullable>
-                    </PropertyGroup>
-                                     
-                    <PropertyGroup Condition="$(Test) == true">
-                    <TestProperty>Test</TestProperty>
-                    </PropertyGroup>
-                                    
-                    <ItemGroup>
-                    <Reference Include="bin/foo.dll" />
-                    </ItemGroup>
-                                    
-                    <Target Name="Hello">
-                    <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
-                    </Target>
-                                   
-                </Project>
-                """;
-
-            TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
-            TransientTestFile projectFile = _env.CreateFile(workFolder, "FooBar.csproj", contents);
-            TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
-
-            TransientTestFile config = _env.CreateFile(workFolder, "editorconfig.json",
-               /*lang=json,strict*/
-               """
-                {
-                    "BC0101": {
-                        "IsEnabled": true,
-                        "Severity": "Error"
-                    },
-                    "COND0543": {
-                        "IsEnabled": false,
-                        "Severity": "Error",
-                        "EvaluationAnalysisScope": "AnalyzedProjectOnly",
-                        "CustomSwitch": "QWERTY"
-                    },
-                    "BLA": {
-                        "IsEnabled": false
-                    }
-                }
-                """);
-
-            _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));
-            _env.SetEnvironmentVariable("MSBUILDDEBUGONSTART", "1");
-
-            string output = RunnerUtilities.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
-            _env.Output.WriteLine(output);
-            success.ShouldBeTrue();
-        }
-    }
-}
diff --git a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
deleted file mode 100644
index 1768410a565..00000000000
--- a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
+++ /dev/null
@@ -1,74 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <Import Project="..\Shared\FileSystemSources.proj" />
-  <Import Project="..\Shared\DebuggingSources.proj" />
-
-  <PropertyGroup>
-    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->
-    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
-    <TargetFrameworks Condition="'$(MSBuildRuntimeType)' == 'Full'">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>
-
-    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
-    <IsPackable>false</IsPackable>
-    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
-    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
-    <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
-  </ItemGroup>
-
-  <ItemGroup>
-    <PackageReference Include="System.Collections.Immutable" />
-    <PackageReference Include="Shouldly" />
-    <PackageReference Include="System.Net.Http" />
-  </ItemGroup>
-
-  <ItemGroup>
-    <Service Include="{82a7f48d-3b50-4b1e-b82e-3ada8210c358}" />
-  </ItemGroup>
-
-  <ItemGroup>
-    <Compile Include="..\Shared\FileUtilities.cs">
-      <Link>Shared\FileUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\TempFileUtilities.cs">
-      <Link>Shared\TempFileUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ErrorUtilities.cs">
-      <Link>Shared\ErrorUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\EscapingUtilities.cs">
-      <Link>Shared\EscapingUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
-      <Link>Shared\BuildEnvironmentHelper.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ProcessExtensions.cs">
-      <Link>Shared\ProcessExtensions.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ResourceUtilities.cs">
-      <Link>Shared\ResourceUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ExceptionHandling.cs">
-      <Link>Shared\ExceptionHandling.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\FileUtilitiesRegex.cs">
-      <Link>Shared\FileUtilitiesRegex.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\UnitTests\AssemblyResources.cs">
-      <Link>Shared\AssemblyResources.cs</Link>
-    </Compile>
-  </ItemGroup>
-
-  <ItemGroup>
-    <None Include="..\Shared\UnitTests\App.config">
-      <Link>App.config</Link>
-      <SubType>Designer</SubType>
-    </None>
-    <None Include="..\Shared\UnitTests\xunit.runner.json">
-      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
-    </None>
-  </ItemGroup>
-</Project>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 4e7f1847c75..8c031d8d3af 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1104,16 +1104,11 @@ private async Task<BuildResult> BuildProject()
         {
             // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
             var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];
-            IBuildCheckManager buildCheckManager = propertyEntry is not null ? null : (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;
+            IBuildCheckManager buildCheckManager = propertyEntry is not null ? null : (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
             buildCheckManager?.SetDataSource(BuildCheckDataSource.BuildExecution);
 
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
 
-            // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
-
-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
-            buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);
-
             // Make sure it is null before loading the configuration into the request, because if there is a problem
             // we do not wand to have an invalid projectLoggingContext floating around. Also if this is null the error will be
             // logged with the node logging context
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerRule.cs b/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
index e906c2660aa..8b43dad4999 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
@@ -42,11 +42,6 @@ public BuildAnalyzerRule(string id, string title, string description, string mes
     /// </summary>
     public string Description { get; }
 
-    /// <summary>
-    /// TODO: We might turn this into enum, or just remove this.
-    /// </summary>
-    public string Category { get; }
-
     /// <summary>
     /// Message format that will be used by the actual reports (<see cref="BuildCheckResult"/>) - those will just supply the actual arguments.
     /// </summary>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index decfe5d6adb..48122f75f58 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -89,10 +89,6 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         {
             buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
         }
-        else if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
-        {
-            buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
-        }
         else if (e is BuildCheckEventArgs buildCheckBuildEventArgs)
         {
             if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
index 3546a6ab7b8..19a4e3d6967 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
@@ -9,28 +9,13 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 internal sealed class BuildCheckRegistrationContext(BuildAnalyzerWrapper analyzerWrapper, BuildCheckCentralContext buildCheckCentralContext) : IBuildCheckRegistrationContext
 {
-    private int _evaluatedPropertiesActionCount;
-    private int _parsedItemsActionCount;
-
     public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
     {
-        if (Interlocked.Increment(ref _evaluatedPropertiesActionCount) > 1)
-        {
-            throw new BuildCheckConfigurationException(
-                $"Analyzer '{analyzerWrapper.BuildAnalyzer.FriendlyName}' attempted to call '{nameof(RegisterEvaluatedPropertiesAction)}' multiple times.");
-        }
-
         buildCheckCentralContext.RegisterEvaluatedPropertiesAction(analyzerWrapper, evaluatedPropertiesAction);
     }
 
     public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction)
     {
-        if (Interlocked.Increment(ref _parsedItemsActionCount) > 1)
-        {
-            throw new BuildCheckConfigurationException(
-                $"Analyzer '{analyzerWrapper.BuildAnalyzer.FriendlyName}' attempted to call '{nameof(RegisterParsedItemsAction)}' multiple times.");
-        }
-
         buildCheckCentralContext.RegisterParsedItemsAction(analyzerWrapper, parsedItemsAction);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 7763293dd21..2cc02231114 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -82,8 +82,6 @@ private sealed class BuildCheckManager : IBuildCheckManager
         private bool IsInProcNode => _enabledDataSources[(int)BuildCheckDataSource.EventArgs] &&
                                      _enabledDataSources[(int)BuildCheckDataSource.BuildExecution];
 
-        bool IBuildCheckManager.isRestore { get; set; } = true;
-
         /// <summary>
         /// Notifies the manager that the data source will be used -
         ///   so it should register the built-in analyzers for the source if it hasn't been done yet.
@@ -275,7 +273,6 @@ private void SetupAnalyzersForNewProject(string projectFullPath, BuildEventConte
                     _loggingService.LogErrorFromText(buildEventContext, null, null, null,
                         new BuildEventFileInfo(projectFullPath),
                         e.Message);
-                    _loggingService.LogCommentFromText(buildEventContext, MessageImportance.High, $"Dismounting analyzer '{analyzerFactoryContext.FriendlyName}'");
                     analyzersToRemove.Add(analyzerFactoryContext);
                 }
             }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index c3a3d1c68e8..9514f0a7ca0 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -33,8 +33,6 @@ internal void ProcessEvaluationFinishedEventArgs(
         AnalyzerLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
     {
-        LoggingContext loggingContext = buildAnalysisContext.ToLoggingContext();
-
         Dictionary<string, string> propertiesLookup = new Dictionary<string, string>();
         Internal.Utilities.EnumerateProperties(evaluationFinishedEventArgs.Properties, propertiesLookup,
             static (dict, kvp) => dict.Add(kvp.Key, kvp.Value));
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 56f5c7bb8f8..00ed2266d09 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -16,8 +16,6 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 internal class NullBuildCheckManager : IBuildCheckManager
 {
-    public bool isRestore { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
-
     public void Shutdown() { }
 
     public void ProcessEvaluationFinishedEventArgs(AnalyzerLoggingContext buildAnalysisContext,
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 69fcdc0de5d..a7a4629381c 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -5,7 +5,6 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
-using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -627,7 +626,7 @@ private void Evaluate()
                     }
                 }
 
-                _evaluationLoggingContext.LogProjectEvaluationStarted(_data.GlobalPropertiesDictionary[MSBuildConstants.MSBuildIsRestoring] is not null);
+                _evaluationLoggingContext.LogProjectEvaluationStarted(_data.GlobalPropertiesDictionary[MSBuildConstants.MSBuildIsRestoring] is not null); ;
 
                 ErrorUtilities.VerifyThrow(_data.EvaluationId != BuildEventContext.InvalidEvaluationId, "Evaluation should produce an evaluation ID");
 
diff --git a/src/BuildCheck.UnitTests/AssemblyInfo.cs b/src/BuildCheck.UnitTests/AssemblyInfo.cs
index 5b383e24105..3b5d7bbb185 100644
--- a/src/BuildCheck.UnitTests/AssemblyInfo.cs
+++ b/src/BuildCheck.UnitTests/AssemblyInfo.cs
@@ -2,13 +2,3 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
-
-namespace Microsoft.Build.UnitTests.Shared;
-
-[System.AttributeUsage(System.AttributeTargets.Assembly)]
-internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)
-    : System.Attribute
-{
-    public string BootstrapRoot { get; } = bootstrapRoot;
-    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;
-}
diff --git a/src/Framework/ProjectEvaluationStartedEventArgs.cs b/src/Framework/ProjectEvaluationStartedEventArgs.cs
index f183083b93a..b6c2f098d59 100644
--- a/src/Framework/ProjectEvaluationStartedEventArgs.cs
+++ b/src/Framework/ProjectEvaluationStartedEventArgs.cs
@@ -2,8 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Net.NetworkInformation;
 
 namespace Microsoft.Build.Framework
 {
@@ -28,20 +26,12 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa
         {
         }
 
-        public ProjectEvaluationStartedEventArgs(bool isRestore, string? message, params object[]? messageArgs)
-            : base(message, helpKeyword: null, senderName: null, DateTime.UtcNow, messageArgs)
-        {
-            IsRestore = isRestore;
-        }
-
         /// <summary>
         /// Gets or sets the full path of the project that started evaluation.
         /// </summary>
         public string? ProjectFile { get; set; }
 
-        /// <summary>
-        /// Gets the set of global properties to be used to evaluate this project.
-        /// </summary>
+
         public bool IsRestore { get; internal set; }
     }
 }
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index d1a614d9805..8a2a558e452 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -2,8 +2,6 @@
 
   <Import Project="$(RepoRoot)eng\BootStrapMsBuild.props" />
 
-  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.props" />
-
   <PropertyGroup>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
 
