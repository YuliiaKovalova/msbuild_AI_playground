diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
index 0a4fb009c7d..2627ffaee7c 100644
--- a/src/Build/Logging/SimpleErrorLogger.cs
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -5,8 +5,16 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
+/// <summary>
+/// This logger ignores all message-level output, writing errors and warnings to
+/// standard error, colored red and yellow respectively.
+///
+/// It is currently used only when the user requests information about specific
+/// properties, items, or target results. In that case, we write the desired output
+/// to standard out, but we do not want it polluted with any other kinds of information.
+/// Users still might want diagnostic information if something goes wrong, so still
+/// output that as necessary.
+/// </summary>
 namespace Microsoft.Build.Logging.SimpleErrorLogger
 {
     public class SimpleErrorLogger : INodeLogger
diff --git a/src/MSBuild/JsonOutputFormatter.cs b/src/MSBuild/JsonOutputFormatter.cs
index c12eba7765b..1a9f075ca25 100644
--- a/src/MSBuild/JsonOutputFormatter.cs
+++ b/src/MSBuild/JsonOutputFormatter.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Text.Json;
 using System.Text.Json.Nodes;
 using Microsoft.Build.Evaluation;
@@ -52,13 +51,14 @@ internal void AddItemInstancesInJsonFormat(string[] itemNames, ProjectInstance p
                 foreach (ProjectItemInstance item in project.GetItems(itemName))
                 {
                     JsonObject jsonItem = new();
-                    foreach (ProjectMetadataInstance metadatum in item.Metadata)
+                    jsonItem["Identity"] = item.GetMetadataValue("Identity");
+                    foreach (string metadatumName in item.MetadataNames)
                     {
-                        jsonItem[metadatum.Name] = metadatum.EvaluatedValue;
-                    }
+                        if (metadatumName.Equals("Identity"))
+                        {
+                            continue;
+                        }
 
-                    foreach (string metadatumName in FileUtilities.ItemSpecModifiers.All)
-                    {
                         jsonItem[metadatumName] = item.GetMetadataValue(metadatumName);
                     }
 
@@ -85,6 +85,7 @@ internal void AddItemsInJsonFormat(string[] itemNames, Project project)
                 foreach (ProjectItem item in project.GetItems(itemName))
                 {
                     JsonObject jsonItem = new();
+                    jsonItem["Identity"] = item.GetMetadataValue("Identity");
                     foreach (ProjectMetadata metadatum in item.Metadata)
                     {
                         jsonItem[metadatum.Name] = metadatum.EvaluatedValue;
@@ -92,6 +93,11 @@ internal void AddItemsInJsonFormat(string[] itemNames, Project project)
 
                     foreach (string metadatumName in FileUtilities.ItemSpecModifiers.All)
                     {
+                        if (metadatumName.Equals("Identity"))
+                        {
+                            continue;
+                        }
+
                         jsonItem[metadatumName] = item.GetMetadataValue(metadatumName);
                     }
 
@@ -121,8 +127,14 @@ internal void AddTargetResultsInJsonFormat(string[] targetNames, BuildResult res
                 foreach (ITaskItem item in targetResult.Items)
                 {
                     JsonObject jsonItem = new();
+                    jsonItem["Identity"] = item.GetMetadata("Identity");
                     foreach (string metadatumName in item.MetadataNames)
                     {
+                        if (metadatumName.Equals("Identity"))
+                        {
+                            continue;
+                        }
+
                         jsonItem[metadatumName] = item.GetMetadata(metadatumName);
                     }
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 6024a51fef5..8d742648292 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2562,24 +2562,24 @@ private static bool ProcessCommandLineSwitches(
                     string[][] groupedFileLoggerParameters = commandLineSwitches.GetFileLoggerParameters();
 
                     loggers = ProcessLoggingSwitches(
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Logger],
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.DistributedLogger],
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Verbosity],
-                    commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger],
-                    commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.DistributedFileLogger],
-                    terminallogger,
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.FileLoggerParameters], // used by DistributedFileLogger
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters],
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
-                    commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation],
-                    groupedFileLoggerParameters,
-                    getProperty.Length + getItem.Length + getTargetResult.Length > 0,
-                    out distributedLoggerRecords,
-                    out verbosity,
-                    out originalVerbosity,
-                    cpuCount,
-                    out profilerLogger,
-                    out enableProfiler);
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Logger],
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.DistributedLogger],
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Verbosity],
+                        commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger],
+                        commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.DistributedFileLogger],
+                        terminallogger,
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.FileLoggerParameters], // used by DistributedFileLogger
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters],
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation],
+                        groupedFileLoggerParameters,
+                        getProperty.Length + getItem.Length + getTargetResult.Length > 0,
+                        out distributedLoggerRecords,
+                        out verbosity,
+                        out originalVerbosity,
+                        cpuCount,
+                        out profilerLogger,
+                        out enableProfiler);
 
                     // We're finished with defining individual loggers' verbosity at this point, so we don't need to worry about messing them up.
                     if (Traits.Instance.DebugEngine)
