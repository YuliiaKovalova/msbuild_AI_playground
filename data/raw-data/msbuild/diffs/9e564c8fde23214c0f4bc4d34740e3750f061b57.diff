diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index c29f35c53b3..5df8c06508f 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -24,7 +24,7 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 ## Current Rotation of Change Waves
 
 ### 17.14
-- [TreatWarningsAsErrors, WarningsAsMessages, WarningsAsErrors, WarningsNotAsErrors are now supported on the engine side of MSBuild](https://github.com/dotnet/msbuild/pull/10942)
+- [.SLNX support - use the new parser for .sln and .slnx](https://github.com/dotnet/msbuild/pull/10836)
 
 ### 17.12
 - [Log TaskParameterEvent for scalar parameters](https://github.com/dotnet/msbuild/pull/9908)
diff --git a/eng/Versions.props b/eng/Versions.props
index 6344b47b0fd..8b91f713b0b 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,7 +2,7 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>17.12.17</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>
+    <VersionPrefix>17.12.18</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>
     <PackageValidationBaselineVersion>17.11.4</PackageValidationBaselineVersion>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 6041fbc45ac..db2d9eab3ad 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -35,19 +35,6 @@ public void TreatAllWarningsAsErrors()
             ObjectModelHelpers.BuildProjectExpectSuccess(GetTestProject(treatAllWarningsAsErrors: false));
         }
 
-        [Fact]
-        public void TreatAllWarningsAsErrorsNoPrefix()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(GetTestProject(customProperties: new Dictionary<string, string>
-            {
-                {"TreatWarningsAsErrors", "true"},
-            }));
-
-            VerifyBuildErrorEvent(logger);
-
-            ObjectModelHelpers.BuildProjectExpectSuccess(GetTestProject(treatAllWarningsAsErrors: false));
-        }
-
         /// <summary>
         /// https://github.com/dotnet/msbuild/issues/2667
         /// </summary>
@@ -104,6 +91,22 @@ public void TreatWarningsAsErrorsWhenSpecifiedIndirectly()
             VerifyBuildErrorEvent(logger);
         }
 
+        [Fact]
+        public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditiveProperty()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(
+                GetTestProject(
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", "123"),
+                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", $@"$(MSBuildWarningsAsErrors);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", "$(MSBuildWarningsAsErrors);ABC")
+                    }));
+
+            VerifyBuildErrorEvent(logger);
+        }
+
         [Fact]
         public void NotTreatWarningsAsErrorsWhenCodeNotSpecified()
         {
@@ -174,99 +177,22 @@ public void TreatWarningsAsMessagesWhenSpecifiedIndirectly()
             VerifyBuildMessageEvent(logger);
         }
 
-        [Theory]
-        [InlineData(true)]
-        [InlineData(false)]
-        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty(bool usePrefix)
-        {
-            string prefix = usePrefix ? "MSBuild" : "";
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
-                GetTestProject(
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>($"{prefix}WarningsAsMessages", "123"),
-                        new KeyValuePair<string, string>($"{prefix}WarningsAsMessages", $@"$({prefix}WarningsAsMessages);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>($"{prefix}WarningsAsMessages", $"$({prefix}WarningsAsMessages);ABC")
-                    }));
-
-            VerifyBuildMessageEvent(logger);
-        }
-
         [Fact]
-        ///
-        /// This is for chaining the properties together via addition.
-        /// Furthermore it is intended to check if the prefix and no prefix variant interacts properly with each other.
-        ///
-        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyCombination()
+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()
         {
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
                 GetTestProject(
                     customProperties: new List<KeyValuePair<string, string>>
                     {
                         new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "123"),
-                        new KeyValuePair<string, string>("WarningsAsMessages", $@"$(MSBuildWarningsAsMessages);
+                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", $@"$(MSBuildWarningsAsMessages);
                                                                                        {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(WarningsAsMessages);ABC")
+                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(MSBuildWarningsAsMessages);ABC")
                     }));
 
             VerifyBuildMessageEvent(logger);
         }
 
-        [Fact]
-        public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyCombination()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
-                GetTestProject(
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "123"),
-                        new KeyValuePair<string, string>("WarningsNotAsErrors", $@"$(MSBuildWarningsNotAsErrors);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "$(WarningsNotAsErrors);ABC")
-                    }),
-                _output);
-
-            VerifyBuildWarningEvent(logger);
-        }
-
-        [Theory]
-        [InlineData(true)]
-        [InlineData(false)]
-        public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditiveProperty(bool MSBuildPrefix)
-        {
-            string prefix = MSBuildPrefix ? "MSBuild" : "";
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(
-                GetTestProject(
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>($@"{prefix}WarningsAsErrors", "123"),
-                        new KeyValuePair<string, string>($@"{prefix}WarningsAsErrors", $@"$({prefix}WarningsAsErrors);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>($@"{prefix}WarningsAsErrors", $@"$({prefix}WarningsAsErrors);ABC")
-                    }),
-                _output);
-
-            VerifyBuildErrorEvent(logger);
-        }
-
-        [Fact]
-        public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditivePropertyCombination()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(
-                GetTestProject(
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>("WarningsAsErrors", "123"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", $@"$(WarningsAsErrors);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("WarningsAsErrors", "$(MSBuildWarningsAsErrors);ABC")
-                    }),
-                _output);
-
-            VerifyBuildErrorEvent(logger);
-        }
-
         [Fact]
         public void NotTreatWarningsAsMessagesWhenCodeNotSpecified()
         {
@@ -276,8 +202,7 @@ public void NotTreatWarningsAsMessagesWhenCodeNotSpecified()
                     {
                         new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "123"),
                         new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(MSBuildWarningsAsMessages);ABC")
-                    }),
-                _output);
+                    }));
 
             VerifyBuildWarningEvent(logger);
         }
@@ -348,33 +273,27 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn
             </Project>";
         }
 
-
         [Theory]
 
         [InlineData("MSB1235", "MSB1234", "MSB1234", "MSB1234", false)] // Log MSB1234, treat as error via MSBuildWarningsAsErrors
         [InlineData("MSB1235", "", "MSB1234", "MSB1234", true)] // Log MSB1234, expect MSB1234 as error via MSBuildTreatWarningsAsErrors
         [InlineData("MSB1234", "MSB1234", "MSB1234", "MSB4181", true)]// Log MSB1234, MSBuildWarningsAsMessages takes priority
-        [InlineData("MSB1235", "MSB1234", "MSB1234", "MSB1234", false, false)] // Log MSB1234, treat as error via BuildWarningsAsErrors
-        [InlineData("MSB1235", "", "MSB1234", "MSB1234", true, false)] // Log MSB1234, expect MSB1234 as error via BuildTreatWarningsAsErrors
-        [InlineData("MSB1234", "MSB1234", "MSB1234", "MSB4181", true, false)]// Log MSB1234, BuildWarningsAsMessages takes priority
         public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,
                                                       string WarningsAsErrors,
                                                       string WarningToLog,
                                                       string LogShouldContain,
-                                                      bool allWarningsAreErrors = false,
-                                                      bool useMSPrefix = true)
+                                                      bool allWarningsAreErrors = false)
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
-                var prefix = useMSPrefix ? "MSBuild" : "";
                 TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
                 <Project>
                     <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <PropertyGroup>
-                        <{prefix}TreatWarningsAsErrors>{allWarningsAreErrors}</{prefix}TreatWarningsAsErrors>
-                        <{prefix}WarningsAsMessages>{WarningsAsMessages}</{prefix}WarningsAsMessages>
-                        <{prefix}WarningsAsErrors>{WarningsAsErrors}</{prefix}WarningsAsErrors>
+                        <MSBuildTreatWarningsAsErrors>{allWarningsAreErrors}</MSBuildTreatWarningsAsErrors>
+                        <MSBuildWarningsAsMessages>{WarningsAsMessages}</MSBuildWarningsAsMessages>
+                        <MSBuildWarningsAsErrors>{WarningsAsErrors}</MSBuildWarningsAsErrors>
                     </PropertyGroup>
                     <Target Name='Build'>
                         <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""{WarningToLog}""/>
@@ -391,83 +310,6 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,
             }
         }
 
-        [Theory]
-
-        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority
-        [InlineData(false)]
-        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)
-        {
-            string Warning = "MSB1235";
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                string prefix = useMSPrefix ? "MSBuild" : "";
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <PropertyGroup>
-                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>
-                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>
-                    </PropertyGroup>
-                    <Target Name='Build'>
-                        <Warning Text=""some random text"" Code='{Warning}' />
-                    </Target>
-                </Project>");
-
-                MockLogger logger = proj.BuildProjectExpectSuccess();
-
-                logger.WarningCount.ShouldBe(1);
-                logger.ErrorCount.ShouldBe(0);
-
-                logger.AssertLogContains(Warning);
-            }
-        }
-
-
-
-        [Theory]
-        [InlineData("TreatWarningsAsErrors", "true", false)] // All warnings are treated as errors
-        [InlineData("WarningsAsErrors", "MSB1007", false)]
-        [InlineData("WarningsAsMessages", "MSB1007", false)]
-        [InlineData("WarningsNotAsErrors", "MSB1007", true)]
-        [InlineData("WarningsNotAsErrors", "MSB1007", false)]
-        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)
-        {
-            using (TestEnvironment env = TestEnvironment.Create(_output))
-            {
-                string warningCode = "MSB1007";
-                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? "<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>" : "";
-                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_14.ToString());
-                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
-                <Project>
-                    <PropertyGroup>
-                        {treatWarningsAsErrorsCodeProperty}
-                        <{property}>{propertyData}</{property}>
-                    </PropertyGroup>
-                    <Target Name='Build'>
-                        <Warning Text=""some random text"" Code='{warningCode}' />
-                    </Target>
-                </Project>");
-                if (treatWarningsAsErrors)
-                {
-                    // Since the "no prefix" variations can't do anything with the change wave disabled, this should always fail.
-                    MockLogger logger = proj.BuildProjectExpectFailure();
-                    logger.ErrorCount.ShouldBe(1);
-                    logger.AssertLogContains($"error {warningCode}");
-
-                    logger.AssertLogContains(warningCode);
-                }
-                else
-                {
-                    MockLogger logger = proj.BuildProjectExpectSuccess();
-
-                    logger.WarningCount.ShouldBe(1);
-                    logger.AssertLogContains($"warning {warningCode}");
-                    logger.ErrorCount.ShouldBe(0);
-
-                    logger.AssertLogContains(warningCode);
-                }
-            }
-        }
-
         /// <summary>
         /// Item1 and Item2 log warnings and continue, item 3 logs a warn-> error and prevents item 4 from running in the batched build.
         /// </summary>
@@ -529,11 +371,8 @@ public void TaskLogsWarningAsError_BatchedBuild()
         [Theory]
         [InlineData("MSB1234", false, 1, 1)]
         [InlineData("MSB0000", true, 0, 2)]
-        [InlineData("MSB1234", false, 1, 1, false)]
-        [InlineData("MSB0000", true, 0, 2, false)]
-        public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarningsAsErrors, int warningCountShouldBe, int errorCountShouldBe, bool useMSPrefix = true)
+        public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarningsAsErrors, int warningCountShouldBe, int errorCountShouldBe)
         {
-            string prefix = useMSPrefix ? "MSBuild" : "";
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
                 TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
@@ -541,8 +380,8 @@ public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarnings
                     <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <PropertyGroup>
-                        <{prefix}TreatWarningsAsErrors>{treatAllWarningsAsErrors}</{prefix}TreatWarningsAsErrors>
-                        <{prefix}WarningsAsErrors>{warningsAsErrors}</{prefix}WarningsAsErrors>
+                        <MSBuildTreatWarningsAsErrors>{treatAllWarningsAsErrors}</MSBuildTreatWarningsAsErrors>
+                        <MSBuildWarningsAsErrors>{warningsAsErrors}</MSBuildWarningsAsErrors>
                     </PropertyGroup>
                     <Target Name='Build'>
                         <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 77f3399d11f..99abd0ef00f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1390,17 +1390,14 @@ private void ConfigureWarningsAsErrorsAndMessages()
             // Ensure everything that is required is available at this time
             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
-                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase) ||
-                    (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase) &&
-                     ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
+                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase))
                 {
                     // If <MSBuildTreatWarningsAsErrors was specified then an empty ISet<string> signals the IEventSourceSink to treat all warnings as errors
                     loggingService.AddWarningsAsErrors(buildEventContext, new HashSet<string>());
                 }
                 else
                 {
-                    ISet<string> warningsAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.WarningsAsErrors),
-                                                                      project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrors));
+                    ISet<string> warningsAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrors));
 
                     if (warningsAsErrors?.Count > 0)
                     {
@@ -1408,17 +1405,14 @@ private void ConfigureWarningsAsErrorsAndMessages()
                     }
                 }
 
-                ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.WarningsNotAsErrors),
-                                                                     project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrors));
-
+                ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrors));
 
                 if (warningsNotAsErrors?.Count > 0)
                 {
                     loggingService.AddWarningsNotAsErrors(buildEventContext, warningsNotAsErrors);
                 }
 
-                ISet<string> warningsAsMessages = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.WarningsAsMessages),
-                                                                    project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessages));
+                ISet<string> warningsAsMessages = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessages));
 
                 if (warningsAsMessages?.Count > 0)
                 {
@@ -1436,37 +1430,14 @@ private void ConfigureKnownImmutableFolders()
             }
         }
 
-        private static ISet<string> ParseWarningCodes(string warnings, string warningsNoPrefix)
+        private static ISet<string> ParseWarningCodes(string warnings)
         {
-            // When this changewave is rotated out and this gets deleted, please consider removing
-            // the <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)'==''">$(NoWarn)</MSBuildWarningsAsMessages>
-            // and the two following lines from the msbuild/src/Tasks/Microsoft.Common.CurrentVersion.targets
-            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))
-            {
-                warningsNoPrefix = null;
-            }
-
-            HashSet<string> result1 = null;
-            if (!String.IsNullOrWhiteSpace(warnings))
-            {
-                result1 = new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);
-            }
-            HashSet<string> result2 = null;
-            if (!String.IsNullOrWhiteSpace(warningsNoPrefix))
+            if (String.IsNullOrWhiteSpace(warnings))
             {
-                result2 = new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warningsNoPrefix), StringComparer.OrdinalIgnoreCase);
-            }
-
-            if (result1 != null)
-            {
-                if (result2 != null)
-                {
-                    result1.UnionWith(result2);
-                }
-                return result1;
+                return null;
             }
 
-            return result2;
+            return new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);
         }
 
         private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 81d03ed9a0c..e0ac6bae417 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -28,30 +28,25 @@ internal static class MSBuildConstants
         /// </summary>
         internal const string SdksPath = "MSBuildSDKsPath";
 
-        /// <summary>
-        ///  The prefix that was originally used. Now extracted out for the purpose of allowing even the non-prefixed variant.
-        /// </summary>
-        internal const string MSBuildPrefix = "MSBuild";
-
         /// <summary>
         /// Name of the property that indicates that all warnings should be treated as errors.
         /// </summary>
-        internal const string TreatWarningsAsErrors = "TreatWarningsAsErrors";
+        internal const string TreatWarningsAsErrors = "MSBuildTreatWarningsAsErrors";
 
         /// <summary>
         /// Name of the property that indicates a list of warnings to treat as errors.
         /// </summary>
-        internal const string WarningsAsErrors = "WarningsAsErrors";
+        internal const string WarningsAsErrors = "MSBuildWarningsAsErrors";
 
         /// <summary>
         /// Name of the property that indicates a list of warnings to not treat as errors.
         /// </summary>
-        internal const string WarningsNotAsErrors = "WarningsNotAsErrors";
+        internal const string WarningsNotAsErrors = "MSBuildWarningsNotAsErrors";
 
         /// <summary>
         /// Name of the property that indicates the list of warnings to treat as messages.
         /// </summary>
-        internal const string WarningsAsMessages = "WarningsAsMessages";
+        internal const string WarningsAsMessages = "MSBuildWarningsAsMessages";
 
         /// <summary>
         /// The name of the environment variable that users can specify to override where NuGet assemblies are loaded from in the NuGetSdkResolver.
diff --git a/src/UnitTests.Shared/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
index 73268e06989..1d560f54315 100644
--- a/src/UnitTests.Shared/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -780,9 +780,9 @@ public static void BuildProjectExpectSuccess(
         /// </summary>
         /// <param name="projectContents">The project file content in string format.</param>
         /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
-        public static MockLogger BuildProjectExpectFailure(string projectContents, ITestOutputHelper testOutputHelper = null)
+        public static MockLogger BuildProjectExpectFailure(string projectContents)
         {
-            MockLogger logger = new MockLogger(testOutputHelper);
+            MockLogger logger = new MockLogger();
             BuildProjectExpectFailure(projectContents, logger);
             return logger;
         }
