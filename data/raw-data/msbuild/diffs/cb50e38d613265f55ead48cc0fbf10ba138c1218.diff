diff --git a/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs b/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
index 03c8e352ee7..21f9d8694fb 100644
--- a/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
+++ b/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
 using Shouldly;
@@ -19,14 +18,14 @@ public void EnumeratesBackingCollection()
         {
             List<int> values = new List<int>(new int[] { 1, 2, 3 });
 
-            CopyOnReadEnumerable<int> enumerable = new CopyOnReadEnumerable<int>(values, values);
+            CopyOnReadEnumerable<int, string> enumerable = new CopyOnReadEnumerable<int, string>(values, values, i => i.ToString());
 
             using (IEnumerator<int> enumerator = values.GetEnumerator())
             {
-                foreach (int i in enumerable)
+                foreach (string s in enumerable)
                 {
                     enumerator.MoveNext();
-                    enumerator.Current.ShouldBe(i);
+                    enumerator.Current.ToString().ShouldBe(s);
                 }
                 enumerator.MoveNext().ShouldBeFalse();
             }
@@ -37,7 +36,7 @@ public void CopiesBackingCollection()
         {
             List<string> values = new List<string>(new string[] { "a", "b", "c" });
 
-            CopyOnReadEnumerable<string> enumerable = new CopyOnReadEnumerable<string>(values, values);
+            CopyOnReadEnumerable<string, string> enumerable = new CopyOnReadEnumerable<string, string>(values, values, s => s);
 
             int expectedCount = values.Count;
             var enumerator = enumerable.GetEnumerator();
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 6c007aacfbe..06301d62aa1 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -99,11 +99,8 @@ private ProjectLoggingContext(
                 !LoggingService.IncludeEvaluationPropertiesAndItems &&
                 (!LoggingService.RunningOnRemoteNode || LoggingService.SerializeAllProperties))
             {
-                var propertyEnumerable = projectProperties?.GetCopyOnReadEnumerable();
-                var itemsEnumerable = projectItems?.GetCopyOnReadEnumerable();
-
-                properties = propertyEnumerable?.Select(property => new DictionaryEntry(property.Name, property.EvaluatedValue)) ?? Array.Empty<DictionaryEntry>();
-                items = itemsEnumerable?.Select(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Array.Empty<DictionaryEntry>();
+                properties = projectProperties?.GetCopyOnReadEnumerable(property => new DictionaryEntry(property.Name, property.EvaluatedValue)) ?? Array.Empty<DictionaryEntry>();
+                items = projectItems?.GetCopyOnReadEnumerable(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Array.Empty<DictionaryEntry>();
             }
 
             if (projectProperties != null &&
diff --git a/src/Build/Collections/CopyOnReadEnumerable.cs b/src/Build/Collections/CopyOnReadEnumerable.cs
index 56de60720e4..f0b2bfbf51c 100644
--- a/src/Build/Collections/CopyOnReadEnumerable.cs
+++ b/src/Build/Collections/CopyOnReadEnumerable.cs
@@ -1,8 +1,10 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Collections
@@ -13,31 +15,39 @@ namespace Microsoft.Build.Collections
     /// <remarks>
     /// <see cref="GetEnumerator()"/> is thread safe for concurrent access.
     /// </remarks>
-    /// <typeparam name="T">The type contained in the backing collection.</typeparam>
-    internal class CopyOnReadEnumerable<T> : IEnumerable<T>
+    /// <typeparam name="TSource">The type contained in the backing collection.</typeparam>
+    /// <typeparam name="TResult">The type of items being enumerated.</typeparam>
+    internal class CopyOnReadEnumerable<TSource, TResult> : IEnumerable<TResult>
     {
         /// <summary>
         /// The backing collection.
         /// </summary>
-        private readonly IEnumerable<T> _backingEnumerable;
+        private readonly IEnumerable<TSource> _backingEnumerable;
 
         /// <summary>
         /// The object used to synchronize access for copying.
         /// </summary>
         private readonly object _syncRoot;
 
+        /// <summary>
+        /// The function to translate items in the backing collection to the resulting type.
+        /// </summary>
+        private readonly Func<TSource, TResult> _selector;
+
         /// <summary>
         /// Constructor.
         /// </summary>
         /// <param name="backingEnumerable">The collection which serves as a source for enumeration.</param>
         /// <param name="syncRoot">The object used to synchronize access for copying.</param>
-        public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)
+        /// <param name="selector">function to translate items in the backing collection to the resulting type.</param>
+        public CopyOnReadEnumerable(IEnumerable<TSource> backingEnumerable, object syncRoot, Func<TSource, TResult> selector)
         {
             ErrorUtilities.VerifyThrowArgumentNull(backingEnumerable, nameof(backingEnumerable));
             ErrorUtilities.VerifyThrowArgumentNull(syncRoot, nameof(syncRoot));
 
             _backingEnumerable = backingEnumerable;
             _syncRoot = syncRoot;
+            _selector = selector;
         }
 
         #region IEnumerable<T> Members
@@ -46,13 +56,23 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)
         /// Returns an enumerator over the collection.
         /// </summary>
         /// <returns>The enumerator.</returns>
-        public IEnumerator<T> GetEnumerator()
+        public IEnumerator<TResult> GetEnumerator()
         {
-            List<T> list;
+            List<TResult> list;
+            if (_backingEnumerable is ICollection backingCollection)
+            {
+                list = new List<TResult>(backingCollection.Count);
+            }
+            else
+            {
+                list = new List<TResult>();
+            }
+
             lock (_syncRoot)
             {
-                list = new List<T>(_backingEnumerable);
+                list.AddRange(_backingEnumerable.Select(_selector));
             }
+
             return list.GetEnumerator();
         }
 
@@ -66,7 +86,7 @@ public IEnumerator<T> GetEnumerator()
         /// <returns>The enumerator.</returns>
         IEnumerator IEnumerable.GetEnumerator()
         {
-            return ((IEnumerable<T>)this).GetEnumerator();
+            return ((IEnumerable<TResult>)this).GetEnumerator();
         }
 
         #endregion
diff --git a/src/Build/Collections/ItemDictionary.cs b/src/Build/Collections/ItemDictionary.cs
index b0e1ab517ef..248badcda49 100644
--- a/src/Build/Collections/ItemDictionary.cs
+++ b/src/Build/Collections/ItemDictionary.cs
@@ -146,9 +146,9 @@ public void Clear()
         /// <summary>
         /// Returns an enumerable which copies the underlying data on read.
         /// </summary>
-        public IEnumerable<T> GetCopyOnReadEnumerable()
+        public IEnumerable<TResult> GetCopyOnReadEnumerable<TResult>(Func<T, TResult> selector)
         {
-            return new CopyOnReadEnumerable<T>(this, _itemLists);
+            return new CopyOnReadEnumerable<T, TResult>(this, _itemLists, selector);
         }
 
         /// <summary>
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index bc8112aafec..e6b3cb16bae 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -205,9 +205,9 @@ internal T this[string name]
         /// <summary>
         /// Returns an enumerable which copies the underlying data on read.
         /// </summary>
-        public IEnumerable<T> GetCopyOnReadEnumerable()
+        public IEnumerable<TResult> GetCopyOnReadEnumerable<TResult>(Func<T, TResult> selector)
         {
-            return new CopyOnReadEnumerable<T>(this, _properties);
+            return new CopyOnReadEnumerable<T, TResult>(this, _properties, selector);
         }
 
         /// <summary>
