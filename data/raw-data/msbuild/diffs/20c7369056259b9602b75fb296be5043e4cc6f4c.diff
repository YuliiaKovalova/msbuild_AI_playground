diff --git a/src/Build.UnitTests/Utilities_Tests.cs b/src/Build.UnitTests/Utilities_Tests.cs
index 2e6702716fd..60ed5d2bd01 100644
--- a/src/Build.UnitTests/Utilities_Tests.cs
+++ b/src/Build.UnitTests/Utilities_Tests.cs
@@ -82,7 +82,6 @@ public void CommentsInPreprocessing()
             TransientTestFile outputFile = env.CreateFile("tempOutput.tmp");
 
             env.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", "1");
-            env.SetEnvironmentVariable("_MSBUILDTLENABLED", "0");
 
 #if FEATURE_GET_COMMANDLINE
             MSBuildApp.Execute(@"c:\bin\msbuild.exe """ + inputFile.Path +
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index 46a81b67958..037e6c4f01b 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1522,7 +1522,6 @@ public void ProcessInvalidTargetSwitch()
                 </Project>
                 """;
             using TestEnvironment testEnvironment = TestEnvironment.Create();
-            testEnvironment.SetEnvironmentVariable("_MSBUILDTLENABLED", "0");
 
             string project = testEnvironment.CreateTestProjectWithFiles("project.proj", projectContent).ProjectFile;
 
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index a2ccabd00a1..45298bd9768 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -613,7 +613,6 @@ public void VersionSwitchDisableChangeWave()
         public void ErrorCommandLine()
         {
             string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
-            string oldValueForMSBuildTLEnabled = Environment.GetEnvironmentVariable("_MSBUILDTLENABLED");
 
 #if FEATURE_GET_COMMANDLINE
             MSBuildApp.Execute(@"c:\bin\msbuild.exe -junk").ShouldBe(MSBuildApp.ExitType.SwitchError);
@@ -629,7 +628,6 @@ public void ErrorCommandLine()
             MSBuildApp.Execute(new[] { @"msbuild.exe", "@bogus.rsp" }).ShouldBe(MSBuildApp.ExitType.InitializationError);
 #endif
             Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
-            Environment.SetEnvironmentVariable("_MSBUILDTLENABLED", oldValueForMSBuildTLEnabled);
         }
 
         [Fact]
@@ -1137,7 +1135,7 @@ public void MSBuildEngineLogger()
         {
             using TestEnvironment testEnvironment = TestEnvironment.Create();
             testEnvironment.SetEnvironmentVariable("DOTNET_CLI_UI_LANGUAGE", "en"); // build machines may have other values.
-            testEnvironment.SetEnvironmentVariable("_MSBUILDTLENABLED", "0");
+
             CultureInfo.CurrentUICulture = new CultureInfo("en"); // Validate that the thread will produce an english log regardless of the machine OS language
 
             string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
diff --git a/src/UnitTests.Shared/TestEnvironment.cs b/src/UnitTests.Shared/TestEnvironment.cs
index d961178b298..0cc1527cfa3 100644
--- a/src/UnitTests.Shared/TestEnvironment.cs
+++ b/src/UnitTests.Shared/TestEnvironment.cs
@@ -429,6 +429,7 @@ public class EnvironmentInvariant : TestInvariant
         public EnvironmentInvariant()
         {
             _initialEnvironment = Environment.GetEnvironmentVariables();
+            _initialEnvironment.Add("_MSBUILDTLENABLED", "0");
         }
 
         public override void AssertInvariant(ITestOutputHelper output)
