diff --git a/documentation/specs/event-source.md b/documentation/specs/event-source.md
index 18936da2249..c3fe809be94 100644
--- a/documentation/specs/event-source.md
+++ b/documentation/specs/event-source.md
@@ -33,8 +33,10 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major
 | ReusableStringBuilderFactoryUnbalanced | Identifies improper usage from multiple threads or buggy code: multiple Gets were called without a Relase. |
 | Save | Saves a project to the file system if dirty, creating directories as necessary. |
 | SdkResolverResolveSdk | A single SDK resolver is called. |
-| SdkResolverServiceInitialize | Initializes SDK resolvers. |
-| SdkResolverEvent | An SDK resolver logs an event. |
+| SdkResolverServiceFindResolversManifests | Find all resolvers manifests. (Only appear under Changewave 17.4) |
+| SdkResolverServiceInitialize | Initializes SDK resolvers. (Only appear before Changewave 17.4) |
+| SdkResolverServiceLoadResolvers | Load resolvers given a resolver manifest. (Only appear under Changewave 17.4) |
+| SdkResolverEvent | An SDK resolver logs an event. (Only appear under Changewave 17.4) |
 | Target | Executes a target. |
 | TargetUpToDate | Checks whether a particular target needs to run or is up-to-date. |
 | WriteLinesToFile | Checks whether the WriteLinesToFile task needs to execute. |
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 1e1cc8b7186..25ff7bf10a8 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -681,7 +681,7 @@ protected internal override IList<SdkResolver> LoadResolversFromManifest(SdkReso
                 return resolvers.OrderBy(t => t.Priority).ToList();
             }
 
-            internal override IList<SdkResolver> LoadDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+            internal override IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
             {
                 return new List<SdkResolver>();
             }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 52e8b5e19f4..259b251371e 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -34,7 +34,7 @@ internal class SdkResolverLoader
 #endif
             ) ?? Environment.GetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER");
 
-        internal virtual IList<SdkResolver> LoadDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+        internal virtual IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
         {
             var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> {new DefaultSdkResolver()}
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index 6b877f2d93c..2135e31b5d8 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -13,13 +13,13 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// </summary>
     internal class SdkResolverManifest
     {
-        public SdkResolverManifest()
+        public SdkResolverManifest(string name)
         {
+            Name = name;
         }
 
-        public SdkResolverManifest(string name, string path, Regex resolvableSdkPattern)
+        public SdkResolverManifest(string name, string path, Regex resolvableSdkPattern) : this(name)
         {
-            Name = name;
             Path = path;
             ResolvableSdkRegex = resolvableSdkPattern;
         }
@@ -85,8 +85,7 @@ internal static SdkResolverManifest Load(string filePath)
         // This parsing code is very specific and not forward compatible, but since resolvers generally ship in the same release vehicle as MSBuild itself, only backward compatibility is required.
         private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader, string filePath)
         {
-            SdkResolverManifest manifest = new SdkResolverManifest();
-            manifest.Name = filePath;
+            SdkResolverManifest manifest = new SdkResolverManifest(filePath);
 
             reader.Read();
             while (!reader.EOF)
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 2a7f3684075..731b74c1e8f 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -216,14 +216,16 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
                             MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
                             newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);
                             _resolversDict[resolverManifest] = newResolvers;
-                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(newResolvers.Count);
+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.Name, newResolvers.Count);
                         }
                     }
                 }
 
                 resolvers.AddRange(newResolvers);
             }
-            return resolvers.OrderBy(t => t.Priority).ToList();
+
+            resolvers.Sort((l, r) => l.Priority.CompareTo(r.Priority));
+            return resolvers;
         }
 
         private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
@@ -430,13 +432,23 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
 
                 MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
                 var allResolversManifests = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
-                IList<SdkResolver> defaultResolvers = _sdkResolverLoader.LoadDefaultResolvers(loggingContext, location);
-                SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("DefaultResolversManifest", null, null);
-                allResolversManifests.Add(sdkResolverManifest);
 
                 _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
-                _resolversDict[sdkResolverManifest] = defaultResolvers;
 
+                // Load and add the manifest for the default resolvers, located directly in this dll.
+                IList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers(loggingContext, location);
+                if (defaultResolvers.Count > 0)
+                {
+                    MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
+                    SdkResolverManifest sdkDefaultResolversManifest = new SdkResolverManifest("DefaultResolversManifest", null, null);
+                    allResolversManifests.Add(sdkDefaultResolversManifest);
+                    _resolversDict[sdkDefaultResolversManifest] = defaultResolvers;
+                    MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(sdkDefaultResolversManifest.Name, defaultResolvers.Count);
+                }
+
+                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStop(allResolversManifests.Count);
+
+                // Break the list of all resolvers manifests into two parts: manifests with specific and general resolvers.
                 _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
                 _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
                 foreach (SdkResolverManifest manifest in allResolversManifests)
@@ -450,7 +462,6 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
                         _specificResolversManifestsRegistry.Add(manifest);
                     }
                 }
-                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStop(allResolversManifests.Count);
             }
         }
 
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 51d3b78e9cf..f2f4cc9070f 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -618,9 +618,9 @@ public void SdkResolverServiceLoadResolversStart()
         }
 
         [Event(84, Keywords = Keywords.All)]
-        public void SdkResolverServiceLoadResolversStop(int resolverCount)
+        public void SdkResolverServiceLoadResolversStop(string manifestName, int resolverCount)
         {
-            WriteEvent(84, resolverCount);
+            WriteEvent(84, manifestName, resolverCount);
         }
 
         #endregion
