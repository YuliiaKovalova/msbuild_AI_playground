diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
index d4bf7db5cde..f1d7703c116 100644
--- a/eng/Common.globalconfig
+++ b/eng/Common.globalconfig
@@ -782,10 +782,10 @@ dotnet_diagnostic.SA1107.severity = suggestion
 dotnet_diagnostic.SA1108.severity = none
 
 # Opening parenthesis or bracket should be on declaration line
-dotnet_diagnostic.SA1110.severity = suggestion
+dotnet_diagnostic.SA1110.severity = warning
 
 # Closing parenthesis should be on line of last parameter
-dotnet_diagnostic.SA1111.severity = suggestion
+dotnet_diagnostic.SA1111.severity = warning
 
 dotnet_diagnostic.SA1112.severity = none
 
diff --git a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
index 2faf2cc786a..51689bfb33a 100644
--- a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
@@ -110,8 +110,7 @@ public void InvalidAddFromDifferentProject_AppendChild()
                 ProjectRootElement project2 = ProjectRootElement.Create();
                 ProjectTargetElement target = project1.CreateTargetElement("t");
                 project2.AppendChild(target);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add node created from different project with PrependChild
@@ -125,8 +124,7 @@ public void InvalidAddFromDifferentProject_PrependChild()
                 ProjectRootElement project2 = ProjectRootElement.Create();
                 ProjectTargetElement target = project1.CreateTargetElement("t");
                 project2.PrependChild(target);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add node created from different project with InsertBeforeChild
@@ -141,8 +139,7 @@ public void InvalidAddFromDifferentProject_InsertBefore()
                 ProjectTargetElement target1 = project1.CreateTargetElement("t");
                 ProjectTargetElement target2 = project2.AddTarget("t2");
                 project2.InsertBeforeChild(target2, target1);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add node created from different project with InsertAfterChild
@@ -157,8 +154,7 @@ public void InvalidAddFromDifferentProject_InsertAfter()
                 ProjectTargetElement target1 = project1.CreateTargetElement("t");
                 ProjectTargetElement target2 = project2.AddTarget("t2");
                 project2.InsertAfterChild(target2, target1);
-            }
-           );
+            });
         }
         /// <summary>
         /// Become direct child of self with AppendChild
@@ -173,8 +169,7 @@ public void InvalidBecomeChildOfSelf_AppendChild()
                 ProjectChooseElement choose = project.CreateChooseElement();
 
                 choose.AppendChild(choose);
-            }
-           );
+            });
         }
         /// <summary>
         /// Become grandchild of self with AppendChild
@@ -190,8 +185,7 @@ public void InvalidBecomeGrandChildOfSelf_AppendChild()
                 project.AppendChild(choose);
                 choose.AppendChild(when);
                 when.AppendChild(choose);
-            }
-           );
+            });
         }
         /// <summary>
         /// Become grandchild of self with PrependChild
@@ -207,8 +201,7 @@ public void InvalidBecomeGrandChildOfSelf_PrependChild()
                 project.AppendChild(choose);
                 choose.AppendChild(when);
                 when.PrependChild(choose);
-            }
-           );
+            });
         }
         /// <summary>
         /// Become grandchild of self with InsertBeforeChild
@@ -226,8 +219,7 @@ public void InvalidBecomeGrandChildOfSelf_InsertBefore()
                 choose1.AppendChild(when);
                 when.PrependChild(choose2);
                 when.InsertBeforeChild(choose1, choose2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Become grandchild of self with InsertAfterChild
@@ -245,8 +237,7 @@ public void InvalidBecomeGrandChildOfSelf_InsertAfter()
                 choose1.AppendChild(when);
                 when.PrependChild(choose2);
                 when.InsertAfterChild(choose1, choose2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to reparent with AppendChild
@@ -260,8 +251,7 @@ public void InvalidAlreadyParented_AppendChild()
                 ProjectTargetElement target = project.AddTarget("t");
 
                 project.AppendChild(target);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to reparent with PrependChild
@@ -275,8 +265,7 @@ public void InvalidAlreadyParented_PrependChild()
                 ProjectTargetElement target = project.AddTarget("t");
 
                 project.PrependChild(target);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to reparent with InsertBeforeChild
@@ -291,8 +280,7 @@ public void InvalidAlreadyParented_InsertBefore()
                 ProjectTargetElement target2 = project.AddTarget("t2");
 
                 project.InsertBeforeChild(target1, target2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to reparent with InsertAfterChild
@@ -307,8 +295,7 @@ public void InvalidAlreadyParented_InsertAfter()
                 ProjectTargetElement target2 = project.AddTarget("t2");
 
                 project.InsertAfterChild(target1, target2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add to unparented parent with AppendChild
@@ -323,8 +310,7 @@ public void InvalidParentNotParented_AppendChild()
                 ProjectTaskElement task = project.CreateTaskElement("tt");
 
                 target.AppendChild(task);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add to unparented parent with PrependChild
@@ -339,8 +325,7 @@ public void InvalidParentNotParented_PrependChild()
                 ProjectTaskElement task = project.CreateTaskElement("tt");
 
                 target.PrependChild(task);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add to unparented parent with InsertBeforeChild
@@ -356,8 +341,7 @@ public void InvalidParentNotParented_InsertBefore()
                 ProjectTaskElement task2 = project.CreateTaskElement("tt");
 
                 target.InsertBeforeChild(task2, task1);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add to unparented parent with InsertAfterChild
@@ -373,8 +357,7 @@ public void InvalidParentNotParented_InsertAfter()
                 ProjectTaskElement task2 = project.CreateTaskElement("tt");
 
                 target.InsertAfterChild(task2, task1);
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting attributes on a target should be reflected in the XML
@@ -652,8 +635,7 @@ public void InvalidAttemptToAddProjectToTarget()
                 ProjectTargetElement target = project.CreateTargetElement("t");
 
                 target.AppendChild(project);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to insert item in target
@@ -669,8 +651,7 @@ public void InvalidAttemptToAddItemToTarget()
 
                 project.AppendChild(target);
                 target.AppendChild(item);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to insert item without include in itemgroup in project
@@ -686,8 +667,7 @@ public void InvalidAttemptToAddEmptyItem()
 
                 project.AppendChild(itemGroup);
                 itemGroup.AppendChild(item);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add item without include in itemgroup in target
@@ -1216,8 +1196,7 @@ public void InvalidRemoveUnparentedChild()
                 ProjectRootElement project = ProjectRootElement.Create();
                 ProjectTargetElement target = project.CreateTargetElement("t");
                 project.RemoveChild(target);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to remove a child that is parented by something in another project
@@ -1232,8 +1211,7 @@ public void InvalidRemoveChildFromOtherProject()
                 ProjectRootElement project2 = ProjectRootElement.Create();
 
                 project2.RemoveChild(target);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to remove a child that is parented by something else in the same project
@@ -1250,8 +1228,7 @@ public void InvalidRemoveChildFromOtherParent()
                 itemGroup1.AppendChild(item);
 
                 itemGroup2.RemoveChild(item);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add an Otherwise before a When
@@ -1269,8 +1246,7 @@ public void InvalidOtherwiseBeforeWhen()
                 project.AppendChild(choose);
                 choose.AppendChild(when);
                 choose.InsertBeforeChild(otherwise, when);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add an Otherwise after another
@@ -1286,8 +1262,7 @@ public void InvalidOtherwiseAfterOtherwise()
                 choose.AppendChild(project.CreateWhenElement("c"));
                 choose.AppendChild(project.CreateOtherwiseElement());
                 choose.AppendChild(project.CreateOtherwiseElement());
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add an Otherwise before another
@@ -1303,8 +1278,7 @@ public void InvalidOtherwiseBeforeOtherwise()
                 choose.AppendChild(project.CreateWhenElement("c"));
                 choose.AppendChild(project.CreateOtherwiseElement());
                 choose.InsertAfterChild(project.CreateOtherwiseElement(), choose.FirstChild);
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add a When after an Otherwise
@@ -1322,8 +1296,7 @@ public void InvalidWhenAfterOtherwise()
                 project.AppendChild(choose);
                 choose.AppendChild(otherwise);
                 choose.InsertAfterChild(when, otherwise);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add When before Otherwise
@@ -2287,8 +2260,7 @@ public void InvalidAddPropertyReservedName()
             {
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.AddProperty("MSBuildToolsPATH", "v");
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add a property with an illegal name
@@ -2300,8 +2272,7 @@ public void InvalidAddPropertyIllegalName()
             {
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.AddProperty("ItemGroup", "v");
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add a property with an invalid XML name
@@ -2313,8 +2284,7 @@ public void InvalidAddPropertyInvalidXmlName()
             {
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.AddProperty("@#$@#", "v");
-            }
-           );
+            });
         }
         /// <summary>
         /// Too much nesting should not cause stack overflow.
diff --git a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
index 741534ff364..598740f2bc6 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
@@ -37,8 +37,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with unexpected Condition attribute.
@@ -56,8 +55,7 @@ public void ReadInvalidConditionAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with unexpected child
@@ -76,8 +74,7 @@ public void ReadInvalidChild()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with a When containing no Condition attribute
@@ -101,8 +98,7 @@ public void ReadInvalidWhen()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with only an otherwise
@@ -121,8 +117,7 @@ public void ReadInvalidOnlyOtherwise()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with two otherwises
@@ -142,8 +137,7 @@ public void ReadInvalidTwoOtherwise()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with otherwise before when
@@ -163,8 +157,7 @@ public void ReadInvalidOtherwiseBeforeWhen()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read empty choose
@@ -187,8 +180,7 @@ public void ReadInvalidEmptyChoose()
                 ProjectChooseElement choose = (ProjectChooseElement)Helpers.GetFirst(project.Children);
 
                 Assert.Null(Helpers.GetFirst(choose.Children));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read choose with only a when
@@ -260,8 +252,7 @@ public void ExcessivelyNestedChoose()
                 content += @"</Project>";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting a When's condition should dirty the project
diff --git a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
index 31dd3783930..dfa9f10e3f2 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
@@ -53,8 +53,7 @@ public void ReadInvalidCondition()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read project with more than one ProjectExtensions
@@ -73,8 +72,7 @@ public void ReadInvalidDuplicate()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Set valid content
@@ -102,8 +100,7 @@ public void SetInvalidNull()
                 ProjectExtensionsElement extensions = GetEmptyProjectExtensions();
 
                 extensions.Content = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Delete by ID
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index c974eeb2915..1fa99a34dea 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -48,8 +48,7 @@ public void ReadInvalidMissingProject()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read import with empty project attribute
@@ -66,8 +65,7 @@ public void ReadInvalidEmptyProject()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read import with unexpected attribute
@@ -84,8 +82,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read basic valid imports
@@ -149,8 +146,7 @@ public void SetProjectInvalidEmpty()
                 ProjectImportElement import = (ProjectImportElement)Helpers.GetFirst(project.Children);
 
                 import.Project = String.Empty;
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting the project attribute should dirty the project
@@ -173,13 +169,11 @@ public void SettingProjectDirties()
                 importProject2.AddProperty("p", "v2");
                 importProject2.Save(file2);
 
-                string content = String.Format
-                    (
+                string content = String.Format(
     @"<Project>
     <Import Project='{0}'/>
 </Project>",
-                    file1
-                    );
+                    file1);
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
                 ProjectImportElement import = Helpers.GetFirst(project.Xml.Imports);
@@ -213,13 +207,11 @@ public void SettingConditionDirties()
                 importProject.AddProperty("p", "v1");
                 importProject.Save(file);
 
-                string content = String.Format
-                    (
+                string content = String.Format(
     @"<Project>
     <Import Project='{0}'/>
 </Project>",
-                    file
-                    );
+                    file);
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
                 ProjectImportElement import = Helpers.GetFirst(project.Xml.Imports);
@@ -247,15 +239,13 @@ public void ImportWithRelativePath()
             string testTempPath = Path.Combine(tempPath, "UnitTestsPublicOm");
             string projectfile = Path.Combine(testTempPath, "a.proj");
             string targetsFile = Path.Combine(tempPath, "x.targets");
-            string projectfileContent = String.Format
-                (
+            string projectfileContent = String.Format(
                 @"
                     <Project>
                         <Import Project='{0}'/>
                     </Project>
                 ",
-                 testTempPath + "\\..\\x.targets"
-                 );
+                 testTempPath + "\\..\\x.targets");
             string targetsfileContent = @"
                     <Project>
                     </Project>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
index 3b2b05d094a..2c3e50948d3 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
@@ -184,8 +184,7 @@ public void ReadInvalidChildMissingProject()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Checks that an InvalidProjectFileException is thrown when an invalid
@@ -205,8 +204,7 @@ public void ReadInvalidChildType()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Checks that an InvalidProjectFileException is thrown when an ImportGroup is placed
@@ -226,8 +224,7 @@ public void ReadInvalidParentType()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read import group with unexpected attribute
@@ -244,8 +241,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read basic valid import group
@@ -358,8 +354,7 @@ public void SetProjectInvalidEmpty()
                 ProjectImportElement import = (ProjectImportElement)Helpers.GetFirst(importGroup.Imports);
 
                 import.Project = String.Empty;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set the condition value
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
index 5b081f981f3..b341f6c67f6 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
@@ -44,8 +44,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read itemdefinitiongroup with no children
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
index 5228974a6e7..a731b0a96ea 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
@@ -110,8 +110,7 @@ public void ReadInvalidNoInclude(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -139,8 +138,7 @@ public void ReadInvalidContainsText(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -168,8 +166,7 @@ public void ReadInvalidEmptyInclude(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -197,8 +194,7 @@ public void ReadInvalidReservedElementName(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -217,8 +213,7 @@ public void ReadInvalidExcludeWithoutInclude()
 
             var exception =
                 Assert.Throws<InvalidProjectFileException>(
-                    () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); }
-                    );
+                    () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); });
 
             Assert.Contains("Items that are outside Target elements must have one of the following operations: Include, Update, or Remove.", exception.Message);
         }
@@ -241,8 +236,7 @@ public void ReadInvalidExcludeWithoutIncludeUnderTarget()
 
             var exception =
                 Assert.Throws<InvalidProjectFileException>(
-                    () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); }
-                    );
+                    () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); });
 
             Assert.Contains("The attribute \"Exclude\" in element <i> is unrecognized.", exception.Message);
         }
@@ -285,8 +279,7 @@ public void ReadInvalidItemAttributeCasing(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -428,8 +421,7 @@ public void ReadInvalidUpdateWithInclude(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         [Theory]
@@ -454,8 +446,7 @@ public void ReadInvalidUpdateWithIncludeAndExclude(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         [Theory]
@@ -480,8 +471,7 @@ public void ReadInvalidUpdateWithExclude(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -513,8 +503,7 @@ public void ReadInvalidRemoveWithMetadata(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -542,8 +531,7 @@ public void ReadInvalidExcludeAndRemove(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -571,8 +559,7 @@ public void ReadInvalidIncludeAndRemove(string project)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -732,8 +719,7 @@ public void SetInvalidRemoveWithInclude(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Remove = "i1";
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -749,8 +735,7 @@ public void SetInvalidUpdateWithInclude(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Update = "i1";
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -811,8 +796,7 @@ public void SetInvalidIncludeWithRemove(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Include = "i1";
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -828,8 +812,7 @@ public void SetInvalidExcludeWithRemove(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Exclude = "i1";
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -845,8 +828,7 @@ public void SetInvalidUpdateWithRemove(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Update = "i1";
-            }
-           );
+            });
         }
 
         ///
@@ -908,8 +890,7 @@ public void SetInvalidIncludeWithUpdate(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Include = "i1";
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -925,8 +906,7 @@ public void SetInvalidExcludeWithUpdate(string project)
                 ProjectItemElement item = GetItemFromContent(project);
 
                 item.Exclude = "i1";
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index bb533e4a521..138775166a1 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -60,8 +60,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read metadatum with invalid name characters (but legal xml)
@@ -82,8 +81,7 @@ public void ReadInvalidName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
 
         [Theory]
@@ -106,8 +104,7 @@ public void ReadInvalidNameAsAttribute(string content)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -129,8 +126,7 @@ public void ReadInvalidBuiltInName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
 
         [Theory]
@@ -153,8 +149,7 @@ public void ReadInvalidBuiltInNameAsAttribute(string content)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -176,8 +171,7 @@ public void ReadInvalidBuiltInElementName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -203,8 +197,7 @@ public void ReadInvalidBuiltInElementNameAsAttribute(string content)
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -257,8 +250,7 @@ public void SetNameIllegal()
                 ProjectMetadataElement metadatum = GetMetadataXml();
 
                 metadatum.Name = "ImportGroup";
-            }
-           );
+            });
         }
 
         [Fact]
@@ -270,8 +262,7 @@ public void SetNameIllegalAsAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 metadatum.Name = "Include";
-            }
-           );
+            });
         }
 
 
@@ -284,8 +275,7 @@ public void SetExpressedAsAttributeIllegalName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 metadatum.ExpressedAsAttribute = true;
-            }
-           );
+            });
         }
 
         [Theory]
@@ -371,8 +361,7 @@ public void SetInvalidNullValue()
                 ProjectMetadataElement metadatum = GetMetadataXml();
 
                 metadatum.Value = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Read a metadatum containing an expression like @(..) but whose parent is an ItemDefinitionGroup
@@ -393,8 +382,7 @@ public void ReadInvalidItemExpressionInMetadata()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read a metadatum containing an expression like @(..) but whose parent is NOT an ItemDefinitionGroup
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
index 1edfae8a76d..8650ef80c36 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
@@ -83,8 +83,7 @@ public void ReadMissingExecuteTargets()
                 ProjectOnErrorElement onError = (ProjectOnErrorElement)Helpers.GetFirst(target.Children);
 
                 Assert.Equal(String.Empty, onError.ExecuteTargetsAttribute);
-            }
-           );
+            });
         }
         /// <summary>
         /// Read onerror with empty executetargets attribute
@@ -110,8 +109,7 @@ public void ReadEmptyExecuteTargets()
                 ProjectOnErrorElement onError = (ProjectOnErrorElement)Helpers.GetFirst(target.Children);
 
                 Assert.Equal(String.Empty, onError.ExecuteTargetsAttribute);
-            }
-           );
+            });
         }
         /// <summary>
         /// Read onerror with invalid attribute
@@ -130,8 +128,7 @@ public void ReadInvalidUnexpectedAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read onerror with invalid child element
@@ -152,8 +149,7 @@ public void ReadInvalidUnexpectedChild()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read onerror before task
@@ -173,8 +169,7 @@ public void ReadInvalidBeforeTask()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read onerror before task
@@ -194,8 +189,7 @@ public void ReadInvalidBeforePropertyGroup()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read onerror before task
@@ -215,8 +209,7 @@ public void ReadInvalidBeforeItemGroup()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Set ExecuteTargets
@@ -242,8 +235,7 @@ public void SetInvalidExecuteTargetsNull()
                 ProjectOnErrorElement onError = GetOnError();
 
                 onError.ExecuteTargetsAttribute = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set ExecuteTargets to empty string
@@ -256,8 +248,7 @@ public void SetInvalidExecuteTargetsEmpty()
                 ProjectOnErrorElement onError = GetOnError();
 
                 onError.ExecuteTargetsAttribute = String.Empty;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set on error condition
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
index 2a3bfb4a6c8..7ca5a25869e 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
@@ -68,8 +68,7 @@ public void ReadInvalidOutputWithoutPropertyOrItem()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an output property with reserved property name
@@ -91,8 +90,7 @@ public void ReadInvalidReservedOutputPropertyName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an output property with missing taskparameter
@@ -114,8 +112,7 @@ public void ReadInvalidOutputWithoutTaskName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an output property with missing taskparameter
@@ -137,8 +134,7 @@ public void ReadInvalidOutputWithEmptyTaskName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an output property with child element
@@ -162,8 +158,7 @@ public void ReadInvalidOutputWithChildElement()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an output property with propertyname but an empty itemname attribute
@@ -185,8 +180,7 @@ public void ReadInvalidPropertyValueItemBlank()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an output property with an itemname but an empty propertyname attribute
@@ -208,8 +202,7 @@ public void ReadInvalidItemValuePropertyBlank()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Modify the condition
@@ -250,8 +243,7 @@ public void SetOutputPropertyItemType()
                 ProjectOutputElement output = GetOutputProperty();
 
                 output.ItemType = "i1b";
-            }
-           );
+            });
         }
         /// <summary>
         /// Set the item name value
@@ -278,8 +270,7 @@ public void SetOutputItemPropertyName()
                 ProjectOutputElement output = GetOutputItem();
 
                 output.PropertyName = "p1b";
-            }
-           );
+            });
         }
         /// <summary>
         /// Helper to get a ProjectOutputElement for an output item
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
index 8942470692d..42bbc3c1c85 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
@@ -70,8 +70,7 @@ public void ReadInvalidName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read property with invalid reserved name
@@ -90,8 +89,7 @@ public void ReadInvalidReservedName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read property with invalid built in name
@@ -110,8 +108,7 @@ public void ReadInvalidBuiltInName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read property with invalid attribute
@@ -130,8 +127,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read property with child element
@@ -152,8 +148,7 @@ public void ReadInvalidChildElement()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Set property value
@@ -223,8 +218,7 @@ public void SetNameIllegal()
                 ProjectPropertyElement property = GetPropertyXml();
 
                 property.Name = "ImportGroup";
-            }
-           );
+            });
         }
         /// <summary>
         /// Set property value to empty
@@ -251,8 +245,7 @@ public void SetInvalidNullValue()
                 ProjectPropertyElement property = GetPropertyXml();
 
                 property.Value = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set condition
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index da183efaaf8..1929b2e9637 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -267,8 +267,7 @@ public void InvalidXml()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ProjectRootElement.Create(XmlReader.Create(new StringReader("XXX")));
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -297,8 +296,7 @@ public void InvalidRootTag()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Valid Xml, invalid syntax below the root
@@ -315,8 +313,7 @@ public void InvalidChildBelowRoot()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Root indicates upgrade needed
@@ -331,8 +328,7 @@ public void NeedsUpgrade()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Valid Xml, invalid namespace below the root
@@ -349,8 +345,7 @@ public void InvalidNamespaceBelowRoot()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests that the namespace error reports are correct
@@ -403,8 +398,7 @@ public void ValidXmlInvalidSyntaxInChildElement()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Valid Xml, invalid syntax, should not get added to the Xml cache and
@@ -445,8 +439,7 @@ public void ValidXmlInvalidSyntaxOpenFromDiskTwice()
                 {
                     File.Delete(path);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that opening project using XmlTextReader does not add it to the Xml cache
@@ -561,8 +554,7 @@ public void InvalidSaveWithoutFullPath()
                 ProjectRootElement project = ProjectRootElement.Create(reader);
 
                 project.Save();
-            }
-           );
+            });
         }
         /// <summary>
         /// Save content with transforms.
@@ -697,8 +689,7 @@ public void SaveUnnamedProject()
             {
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.Save();
-            }
-           );
+            });
         }
         /// <summary>
         /// Verifies that the ProjectRootElement.Encoding property getter returns values
@@ -935,8 +926,7 @@ public void SolutionCanNotBeOpened()
                     File.Delete(tempFileSentinel);
                     Assert.False(File.Exists(solutionFile));
                 }
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -979,8 +969,7 @@ public void ProjectCanNotBeOpened()
                     File.Delete(projectFile);
                     Assert.False(File.Exists(projectFile));
                 }
-            }
-           );
+            });
         }
 #endif
 
@@ -1011,8 +1000,7 @@ public void SolutionCorrupt()
                 {
                     File.Delete(solutionFile);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Open lots of projects concurrently to try to trigger problems
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
index 585c10071f7..15b4a729a5b 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
@@ -32,8 +32,7 @@ public void AddTargetInvalidName()
             {
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.CreateTargetElement("@#$invalid@#$");
-            }
-           );
+            });
         }
         /// <summary>
         /// Read targets in an empty project
@@ -107,8 +106,7 @@ public void SetInvalidNullInputs()
             {
                 ProjectTargetElement target = GetTargetXml();
                 target.Inputs = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set null outputs on the target element
@@ -120,8 +118,7 @@ public void SetInvalidNullOutputs()
             {
                 ProjectTargetElement target = GetTargetXml();
                 target.Outputs = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set null dependsOnTargets on the target element
@@ -133,8 +130,7 @@ public void SetInvalidNullDependsOnTargets()
             {
                 ProjectTargetElement target = GetTargetXml();
                 target.DependsOnTargets = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set null dependsOnTargets on the target element
@@ -146,8 +142,7 @@ public void SetInvalidNullKeepDuplicateOutputs()
             {
                 ProjectTargetElement target = GetTargetXml();
                 target.KeepDuplicateOutputs = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set null condition on the target element
@@ -176,8 +171,7 @@ public void ReadInvalidMissingName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read a target with an invalid attribute
@@ -194,8 +188,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read an target with two task children
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
index d469a8da1f8..cd6336ad5db 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
@@ -97,8 +97,7 @@ public void ReadInvalidChild()
                 ";
 
                 GetTaskFromContent(content);
-            }
-           );
+            });
         }
         /// <summary>
         /// Read task with empty parameter.
@@ -176,8 +175,7 @@ public void SetInvalidNullParameterValue()
                 ProjectTaskElement task = GetBasicTask();
 
                 task.SetParameter("p1", null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Set a parameter with the reserved name 'continueonerror'
@@ -190,8 +188,7 @@ public void SetInvalidParameterNameContinueOnError()
                 ProjectTaskElement task = GetBasicTask();
 
                 task.SetParameter("ContinueOnError", "v");
-            }
-           );
+            });
         }
         /// <summary>
         /// Set a parameter with the reserved name 'condition'
@@ -204,8 +201,7 @@ public void SetInvalidParameterNameCondition()
                 ProjectTaskElement task = GetBasicTask();
 
                 task.SetParameter("Condition", "c");
-            }
-           );
+            });
         }
         /// <summary>
         /// Set a parameter using a null name
@@ -218,8 +214,7 @@ public void SetInvalidNullParameterName()
                 ProjectTaskElement task = GetBasicTask();
 
                 task.SetParameter(null, "v1");
-            }
-           );
+            });
         }
         /// <summary>
         /// Add a parameter to the task
diff --git a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
index e9305ec49ae..4e6642b096e 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
@@ -45,8 +45,7 @@ public void ReadInvalidMissingTaskName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with empty task name attribute
@@ -63,8 +62,7 @@ public void ReadInvalidEmptyTaskName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with unexpected attribute
@@ -81,8 +79,7 @@ public void ReadInvalidAttribute()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with neither AssemblyFile nor AssemblyName attributes
@@ -99,8 +96,7 @@ public void ReadInvalidMissingAssemblyFileAssemblyName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with only empty AssemblyFile attribute
@@ -117,8 +113,7 @@ public void ReadInvalidEmptyAssemblyFile()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with empty AssemblyFile attribute but AssemblyName present
@@ -135,8 +130,7 @@ public void ReadInvalidEmptyAssemblyFileAndAssemblyNameNotEmpty()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with only empty AssemblyName attribute but AssemblyFile present
@@ -153,8 +147,7 @@ public void ReadInvalidEmptyAssemblyNameAndAssemblyFileNotEmpty()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with both AssemblyName and AssemblyFile attributes
@@ -171,8 +164,7 @@ public void ReadInvalidBothAssemblyFileAssemblyName()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with both AssemblyName and AssemblyFile attributes but both are empty
@@ -189,8 +181,7 @@ public void ReadInvalidBothEmptyAssemblyFileEmptyAssemblyNameBoth()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Read usingtask with assembly file
@@ -290,8 +281,7 @@ public void SetUsingTaskAssemblyFileOnUsingTaskAssemblyName()
                 ProjectUsingTaskElement usingTask = GetUsingTaskAssemblyName();
 
                 usingTask.AssemblyFile = "afb";
-            }
-           );
+            });
         }
         /// <summary>
         /// Set assembly name on a usingtask that already has assembly file
@@ -304,8 +294,7 @@ public void SetUsingTaskAssemblyNameOnUsingTaskAssemblyFile()
                 ProjectUsingTaskElement usingTask = GetUsingTaskAssemblyFile();
 
                 usingTask.AssemblyName = "anb";
-            }
-           );
+            });
         }
         /// <summary>
         /// Set task name
@@ -370,8 +359,7 @@ public void DuplicateParameterGroup()
                 ";
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure there is an exception when there are multiple task groups in the using task tag.
@@ -391,8 +379,7 @@ public void DuplicateTaskGroup()
                 ";
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure there is an exception when there is an unknown child
@@ -411,8 +398,7 @@ public void UnknownChild()
                 ";
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure there is an no exception when there are children in the using task
@@ -460,8 +446,7 @@ public void ExceptionWhenNoTaskFactoryAndHavePG()
                 ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Helpers.GetFirst(project.Children);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure there is an exception when a parameter group is added but no task factory attribute is on the using task
@@ -482,8 +467,7 @@ public void ExceptionWhenNoTaskFactoryAndHaveTask()
                 ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Helpers.GetFirst(project.Children);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Helper to get a ProjectUsingTaskElement with a task factory, required runtime and required platform
diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index e739dcafc4f..d3cf1bfb795 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -53,8 +53,7 @@ public void ParseSolution_VC()
 
                 ParseSolutionHelper(solutionFileContents);
                 Assert.True(false, "Should not get here");
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that a project with the C++ project guid and an arbitrary extension is seen as valid -- 
@@ -219,8 +218,7 @@ public void BadVersionStamp()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expected version numbers less than 7 to cause an invalid project file exception.
@@ -237,8 +235,7 @@ public void VersionTooLow()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test to parse a very basic .sln file to validate that description property in a solution file 
@@ -788,8 +785,7 @@ public void ParseInvalidSolutionConfigurations1()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test some invalid cases for solution configuration parsing
@@ -815,8 +811,7 @@ public void ParseInvalidSolutionConfigurations2()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test some invalid cases for solution configuration parsing
@@ -842,8 +837,7 @@ public void ParseInvalidSolutionConfigurations3()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure the project configurations in solution configurations get parsed correctly 
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
index 3396ae04416..9e7ccde0709 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
@@ -48,8 +48,7 @@ public void ReadInvalidAttribute()
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Create a task body outside of a using task
@@ -68,8 +67,7 @@ public void CreateBodyOutsideUsingTask()
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Set body value
@@ -110,8 +108,7 @@ public void SetInvalidNullValue()
                 ProjectUsingTaskBodyElement body = GetBodyXml();
                 body.TaskBody = null;
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify setting the value of evaluate to null will wipe out the element and then the property will return true by default.
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
index 35b673f7e05..870dbfb567d 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
@@ -92,8 +92,7 @@ public void ReadInvalidAttribute()
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Set type value
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
index 16d94683c80..dc0c75eb867 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
@@ -109,8 +109,7 @@ public void ReadDuplicateChildParameters()
             {
                 GetParameterGroupXml(s_contentDuplicateParameters);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Read parameterGroup with a attribute
@@ -130,8 +129,7 @@ public void ReadInvalidAttribute()
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Helper to get a UsingTaskParameterGroupElement from xml
diff --git a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
index 08d95f1e707..91687bff390 100644
--- a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
@@ -232,8 +232,7 @@ public void AddItem_InvalidEmptyInclude()
                 Project project = new Project();
 
                 project.AddItem("i", String.Empty);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add an item with null metadata parameter.
@@ -528,8 +527,8 @@ public void AddItem_MatchesComplicatedWildcard()
             ProjectItemElement item2 =
                 project.AddItem(
                     "i",
-                    NativeMethodsShared.IsWindows ? @"c:\subdir1\a\b\subdir2\c\i1.xyx" : "/subdir1/a/b/subdir2/c/i1.xyx")
-                    [0].Xml;
+                    NativeMethodsShared.IsWindows ? @"c:\subdir1\a\b\subdir2\c\i1.xyx" : "/subdir1/a/b/subdir2/c/i1.xyx")[
+                    0].Xml;
 
             string expected = ObjectModelHelpers.CleanupFileContents(
                                   NativeMethodsShared.IsWindows ?
@@ -1589,8 +1588,7 @@ public void SetPropertyAfterRemoved()
                 var property = project.SetProperty("p", "v1");
                 property.Xml.Parent.RemoveAllChildren();
                 property.UnevaluatedValue = "v2";
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting an evaluated property after its XML's parent has been removed should
@@ -1605,8 +1603,7 @@ public void SetPropertyAfterRemoved2()
                 var property = project.SetProperty("p", "v1");
                 property.Xml.Parent.Parent.RemoveAllChildren();
                 property.UnevaluatedValue = "v2";
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting an evaluated metadatum after its XML has been removed should
@@ -1621,8 +1618,7 @@ public void SetMetadatumAfterRemoved()
                 var metadatum = project.AddItem("i", "i1")[0].SetMetadataValue("p", "v1");
                 metadatum.Xml.Parent.RemoveAllChildren();
                 metadatum.UnevaluatedValue = "v2";
-            }
-           );
+            });
         }
         /// <summary>
         /// Changing an item's type after its XML has been removed should
@@ -1637,8 +1633,7 @@ public void SetItemTypeAfterRemoved()
                 var item = project.AddItem("i", "i1")[0];
                 item.Xml.Parent.RemoveAllChildren();
                 item.ItemType = "j";
-            }
-           );
+            });
         }
         /// <summary>
         /// Changing an item's type after its XML has been removed should
@@ -1653,8 +1648,7 @@ public void RemoveMetadataAfterItemRemoved()
                 var item = project.AddItem("i", "i1")[0];
                 item.Xml.Parent.RemoveAllChildren();
                 item.RemoveMetadata("m");
-            }
-           );
+            });
         }
 
         [Theory]
@@ -1678,8 +1672,7 @@ public void RemoveMetadataThrowsWhenItemElementSplittingIsDisabled(string projec
             new[] // files that should be captured by the glob
             {
                 "a.foo"
-            }
-            )]
+            })]
         // explode on item coming from glob that expands to multiple items
         [InlineData(
             @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
@@ -1694,8 +1687,7 @@ public void RemoveMetadataThrowsWhenItemElementSplittingIsDisabled(string projec
             {
                 "a.foo",
                 "b.foo"
-            }
-            )]
+            })]
         public void RemoveMetadataThrowsWhenItemElementSplittingIsDisabledAndItemComesFromGlob(string projectContents, int itemIndex, string[] files)
         {
             using (var env = TestEnvironment.Create())
@@ -1730,8 +1722,7 @@ public void SetMetadatumAfterRemoved2()
                 var metadatum = project.AddItem("i", "i1")[0].SetMetadataValue("p", "v1");
                 metadatum.Xml.Parent.Parent.RemoveAllChildren();
                 metadatum.UnevaluatedValue = "v2";
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting an evaluated metadatum after its XML's parent's parent has been removed should
@@ -1746,8 +1737,7 @@ public void SetMetadatumAfterRemoved3()
                 var metadatum = project.AddItem("i", "i1")[0].SetMetadataValue("p", "v1");
                 metadatum.Xml.Parent.Parent.Parent.RemoveAllChildren();
                 metadatum.UnevaluatedValue = "v2";
-            }
-           );
+            });
         }
 
         [Theory]
@@ -2161,8 +2151,7 @@ public void AddItemFast_InvalidEmptyInclude()
                 Project project = new Project();
 
                 project.AddItemFast("i", String.Empty);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add an item with null metadata parameter.
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index c04a795158a..0cbc7f39e5e 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -772,8 +772,7 @@ public void UnloadProjectXmlWhileInImportUse()
                     Console.WriteLine(ex.Message);
                     throw;
                 }
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
index b6196db8d6a..736be8cb760 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
@@ -139,8 +139,7 @@ public void UpdateMetadataImported()
                 {
                     File.Delete(file);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to add new metadata on imported item definition should succeed,
@@ -166,8 +165,7 @@ public void SetMetadataImported()
                 ProjectItemDefinition definition = project.ItemDefinitions["i"];
                 definition.SetMetadataValue("n", "n0");
 
-                string expected = String.Format
-                    (
+                string expected = String.Format(
     ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemDefinitionGroup>
@@ -177,8 +175,7 @@ public void SetMetadataImported()
   </ItemDefinitionGroup>
   <Import Project=""{0}"" />
 </Project>"),
-                   file
-                   );
+                   file);
 
                 Helpers.VerifyAssertProjectContent(expected, project.Xml);
             }
@@ -477,8 +474,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_BuiltInProhibitedOnItemDefinitionM
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -500,8 +496,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_UnquotedBuiltInProhibitedOnItemDef
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -523,8 +518,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_BuiltInProhibitedOnItemDefinitionC
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -546,8 +540,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_BuiltInProhibitedOnItemDefinitionG
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -569,8 +562,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_QualifiedBuiltInProhibitedOnItemDe
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -592,8 +584,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_QualifiedBuiltInProhibitedOnItemDe
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -615,8 +606,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_QualifiedBuiltInProhibitedOnItemDe
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Built-in metadata is prohibited in item definition conditions.
@@ -638,8 +628,7 @@ public void ExpandBuiltInMetadataAtPointOfUse_UnquotedQualifiedBuiltInProhibited
 </Project>");
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Custom metadata is allowed in item definition conditions.
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 3f50821db20..a7fb9de0ba0 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -231,8 +231,7 @@ public void SetInvalidXmlNameMetadata()
                 ProjectItem item = GetOneItemFromFragment(@"<i Include='c:\foo\bar.baz'/>");
 
                 item.SetMetadataValue("##invalid##", "x");
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempting to set built-in metadata should fail
@@ -245,8 +244,7 @@ public void SetInvalidBuiltInMetadata()
                 ProjectItem item = GetOneItemFromFragment(@"<i Include='c:\foo\bar.baz'/>");
 
                 item.SetMetadataValue("FullPath", "x");
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempting to set reserved metadata should fail
@@ -259,8 +257,7 @@ public void SetInvalidReservedMetadata()
                 ProjectItem item = GetOneItemFromFragment(@"<i Include='c:\foo\bar.baz'/>");
 
                 item.SetMetadataValue("Choose", "x");
-            }
-           );
+            });
         }
         /// <summary>
         /// Metadata enumerator should only return custom metadata
@@ -1014,8 +1011,8 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
             {
                 @"project\a",
             },
-            false // whether the include survives the exclude (true) or not (false)
-            )]
+            false) // whether the include survives the exclude (true) or not (false)
+            ]
         // exclude matches include; file is below the project file
         [InlineData(ItemWithIncludeAndExclude,
             @"a",
@@ -1028,8 +1025,7 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
             {
                 @"project\dir\a",
             },
-            false
-            )]
+            false)]
         // exclude matches include; file is above the project file
         [InlineData(ItemWithIncludeAndExclude,
             @"a",
@@ -1042,8 +1038,7 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
             {
                 @"a",
             },
-            false
-            )]
+            false)]
         // exclude does not match include; file is next to project file; exclude points above the project file
         [InlineData(ItemWithIncludeAndExclude,
             "a",
@@ -1056,8 +1051,7 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
             {
                 "a",
             },
-            true
-            )]
+            true)]
         // exclude does not match include; file is below the project file; exclude points next to the project file
         [InlineData(ItemWithIncludeAndExclude,
             "a",
@@ -1070,8 +1064,7 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
             {
                 @"project\dir\a",
             },
-            true
-            )]
+            true)]
         // exclude does not match include; file is above the project file; exclude points next to the project file
         [InlineData(ItemWithIncludeAndExclude,
             "a",
@@ -1084,8 +1077,7 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
             {
                 "a",
             },
-            true
-            )]
+            true)]
         public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
             string projectContents,
             string includeItem,
@@ -1135,24 +1127,22 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
             "**/*.cs", // exclude string
             new[] { "a.cs", "ProjectDir/b.cs" }, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
-            new[] { "../a.cs" } // expected items
-            )]
+            new[] { "../a.cs" }) // expected items
+            ]
         // exclude globbing cone below project level;
         [InlineData(
             "a.cs;a/b.cs",
             "a/**/*.cs",
             new[] { "a.cs", "a/b.cs" },
             "",
-            new[] { "a.cs" }
-            )]
+            new[] { "a.cs" })]
         // exclude globbing above project level;
         [InlineData(
             "a.cs;../b.cs;../../c.cs",
             "../**/*.cs",
             new[] { "a/ProjectDir/a.cs", "a/b.cs", "c.cs" },
             "a/ProjectDir",
-            new[] { "../../c.cs" }
-            )]
+            new[] { "../../c.cs" })]
         public void ExcludeWithMissmatchingGlobCones(string includeString, string excludeString, string[] files, string relativePathFromRootToProject, string[] expectedInclude)
         {
             var projectContents = string.Format(ItemWithIncludeAndExclude, includeString, excludeString);
@@ -1171,8 +1161,8 @@ public void ExcludeWithMissmatchingGlobCones(string includeString, string exclud
             "a.cs", // exclude string
             new[] { "ProjectDir/a.cs", "b.cs" }, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
-            new[] { "../b.cs" } // expected items
-            )]
+            new[] { "../b.cs" }) // expected items
+            ]
         public void ExcludingRelativeItemToCurrentDirectoryShouldWorkWithAboveTheConeIncludes(string includeString, string excludeString, string[] files, string relativePathFromRootToProject, string[] expectedInclude)
         {
             var projectContents = string.Format(ItemWithIncludeAndExclude, includeString, excludeString);
@@ -1642,8 +1632,7 @@ public void BuiltInMetadataInItemCondition()
                 ";
 
                 GetOneItem(content);
-            }
-           );
+            });
         }
         /// <summary>
         /// Two items should each get their own values for built-in metadata
@@ -1924,8 +1913,7 @@ public void RemoveItemDefinitionMetadataNotMasked()
                 ProjectItem item = Helpers.GetFirst(project.GetItems("i"));
 
                 item.RemoveMetadata("m"); // Should throw
-            }
-           );
+            });
         }
         /// <summary>
         /// Remove a nonexistent metadatum
@@ -1958,8 +1946,7 @@ public void RemoveBuiltInMetadata()
 
                 // This should throw
                 item.RemoveMetadata("FullPath");
-            }
-           );
+            });
         }
         /// <summary>
         /// Simple rename
@@ -2048,8 +2035,7 @@ public void ChangeItemTypeInvalid()
                 project.ReevaluateIfNecessary();
 
                 item.ItemType = "|";
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to rename imported item should fail
@@ -2080,8 +2066,7 @@ public void RenameImported()
                 {
                     File.Delete(file);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to set metadata on imported item should fail
@@ -2112,8 +2097,7 @@ public void SetMetadataImported()
                 {
                     File.Delete(file);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempt to remove metadata on imported item should fail
@@ -2145,8 +2129,7 @@ public void RemoveMetadataImported()
                 {
                     File.Delete(file);
                 }
-            }
-           );
+            });
         }
 
         [Fact]
@@ -2325,8 +2308,7 @@ public void Remove()
         {
             IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(
                 "<i Include='a;b' />" +
-                "<i Remove='b;c' />"
-                );
+                "<i Remove='b;c' />");
 
             Assert.Single(items);
             Assert.Equal("a", items[0].EvaluatedInclude);
@@ -2338,8 +2320,7 @@ public void RemoveAllMatchingItems()
             IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(
                 "<i Include='a;b' />" +
                 "<i Include='a;b' />" +
-                "<i Remove='b;c' />"
-                );
+                "<i Remove='b;c' />");
 
             Assert.Equal(2, items.Count);
             Assert.Equal(@"a;a", string.Join(";", items.Select(i => i.EvaluatedInclude)));
@@ -2350,8 +2331,7 @@ public void RemoveGlob()
         {
             IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(
                 @"<i Include='a.txt;b.cs;bin\foo.cs' />" +
-                @"<i Remove='bin\**' />"
-                );
+                @"<i Remove='bin\**' />");
 
             Assert.Equal(2, items.Count);
             Assert.Equal(@"a.txt;b.cs", string.Join(";", items.Select(i => i.EvaluatedInclude)));
@@ -2363,8 +2343,7 @@ public void RemoveItemReference()
             IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(
                 @"<i Include='a;b;c;d' />" +
                 @"<j Include='b;d' />" +
-                @"<i Remove='@(j)' />"
-                );
+                @"<i Remove='@(j)' />");
 
             Assert.Equal(2, items.Count);
             Assert.Equal(@"a;c", string.Join(";", items.Select(i => i.EvaluatedInclude)));
@@ -2393,8 +2372,7 @@ public void RemoveShouldRespectCondition()
             var projectContents = ObjectModelHelpers.FormatProjectContentsWithItemGroupFragment(
                 @"<i Include='a;b;c' />" +
                 @"<i Condition='0 == 1' Remove='b' />" +
-                @"<i Condition='1 == 1' Remove='c' />"
-                );
+                @"<i Condition='1 == 1' Remove='c' />");
 
             var project = ObjectModelHelpers.CreateInMemoryProject(projectContents);
 
@@ -2411,8 +2389,7 @@ public void RemoveWithConditionShouldNotApplyOnItemsIgnoringCondition()
                 @"<i Include='a;b;c;d' />" +
                 @"<i Condition='0 == 1' Remove='b' />" +
                 @"<i Condition='1 == 1' Remove='c' />" +
-                @"<i Remove='d' />"
-                );
+                @"<i Remove='d' />");
 
             var project = ObjectModelHelpers.CreateInMemoryProject(projectContents);
 
@@ -3683,8 +3660,7 @@ public void UpdateAndRemoveShouldNotUseGlobMatchingOnEscapedGlobsFromReferencedI
                 project,
                 inputFiles: Array.Empty<string>(),
                 expectedInclude: new[] { "1.cs", "2.js" },
-                expectedMetadataPerItem: null
-                );
+                expectedMetadataPerItem: null);
         }
 
         [Theory]
diff --git a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
index 42e18a5c742..c53e940e525 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
@@ -461,8 +461,7 @@ public void SetMetadataImported()
                 Assert.True(metadata.IsImported);
 
                 metadata.UnevaluatedValue = "m1";
-            }
-           );
+            });
         }
         /// <summary>
         /// Escaping in metadata values
diff --git a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
index 7dc0fae6b3f..7de5350d5e7 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
@@ -139,8 +139,7 @@ public void InvalidSetValueBuiltInProperty()
                 ProjectProperty property = project.GetProperty("MSBuildProjectDirectory");
 
                 property.UnevaluatedValue = "v";
-            }
-           );
+            });
         }
         /// <summary>
         /// Set the value of a property originating in the environment.
@@ -279,8 +278,7 @@ public void SetPropertyImported()
                 {
                     File.Delete(file);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Get the property named "p" in the project provided
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index 9d39903ae11..13bdf370b22 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -244,8 +244,7 @@ public void ReadFromEmptyReader1()
             {
                 XmlReader reader = XmlReader.Create(new StringReader(String.Empty));
                 ProjectRootElement.Create(reader);
-            }
-           );
+            });
         }
         /// <summary>
         /// Reading from an XMLReader that has no content should throw the correct
@@ -258,8 +257,7 @@ public void ReadFromEmptyReader2()
             {
                 XmlReader reader = XmlReader.Create(new StringReader(String.Empty));
                 Project project = new Project(reader);
-            }
-           );
+            });
         }
         /// <summary>
         /// Reading from an XMLReader that has no content should throw the correct
@@ -278,8 +276,7 @@ public void ReadFromEmptyReader3()
                 }
 
                 Project project = (new ProjectCollection()).LoadProject(reader);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -294,8 +291,7 @@ public void ReadFromClosedReader()
                 XmlReader reader = XmlReader.Create(new StringReader(String.Empty));
                 reader.Dispose();
                 Project project = new Project(reader);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -328,8 +324,7 @@ public void ImportDoesNotExistDefaultSettings()
                 xml.AddImport("__nonexistent__");
 
                 Project project = new Project(xml);
-            }
-           );
+            });
         }
         /// <summary>
         /// Import gives invalid uri exception
@@ -343,8 +338,7 @@ public void ImportInvalidUriFormat()
                 xml.AddImport(@"//MSBuildExtensionsPath32)\4.0\Microsoft.VisualStudioVersion.v11.Common.props");
 
                 Project project = new Project(xml);
-            }
-           );
+            });
         }
         /// <summary>
         /// Necessary but not sufficient for MSBuild evaluation to be thread safe.
@@ -393,8 +387,7 @@ public void TryImportsIncludingDuplicatesExpectException()
                 Project project = new Project(xml, null, null, new ProjectCollection(), ProjectLoadSettings.IgnoreMissingImports);
                 IList<ResolvedImport> imports = project.ImportsIncludingDuplicates;
                 imports.ShouldBeEmpty();
-            }
-           );
+            });
         }
         /// <summary>
         /// Import self ignored
@@ -919,8 +912,7 @@ public void ChangeGlobalPropertyAfterReevaluation2()
                 project.SetGlobalProperty("p", "v1");
                 project.ReevaluateIfNecessary();
                 project.SetProperty("p", "v2");
-            }
-           );
+            });
         }
         /// <summary>
         /// Setting environment property should create a real property
@@ -949,8 +941,7 @@ public void SetReservedPropertyThroughProject()
             {
                 Project project = new Project();
                 project.SetProperty("msbuildprojectdirectory", "v1");
-            }
-           );
+            });
         }
         /// <summary>
         /// Changing global properties with some preexisting.
@@ -2131,8 +2122,7 @@ public void UsingTaskExpansion1()
                 ProjectRootElement xml = ProjectRootElement.Create();
                 xml.AddUsingTask("x", "@(x->'%(x)')", null);
                 Project project = new Project(xml);
-            }
-           );
+            });
         }
         /// <summary>
         /// UsingTask expansion should throw InvalidProjectFileException
@@ -2146,8 +2136,7 @@ public void UsingTaskExpansion2()
                 ProjectRootElement xml = ProjectRootElement.Create();
                 xml.AddUsingTask("@(x->'%(x)')", "y", null);
                 Project project = new Project(xml);
-            }
-           );
+            });
         }
         /// <summary>
         /// UsingTask expansion should throw InvalidProjectFileException
@@ -2161,8 +2150,7 @@ public void UsingTaskExpansion3()
                 ProjectRootElement xml = ProjectRootElement.Create();
                 xml.AddUsingTask("x", null, "@(x->'%(x)')");
                 Project project = new Project(xml);
-            }
-           );
+            });
         }
         /// <summary>
         /// Saving project should make it "clean" for saving
@@ -2348,8 +2336,7 @@ public void RemoveItemsOneNull()
             {
                 Project project = new Project();
                 project.RemoveItems(new List<ProjectItem>() { null });
-            }
-           );
+            });
         }
         /// <summary>
         /// Remove several items where removing the first one
@@ -2368,8 +2355,7 @@ public void RemoveItemWrongProject()
                 Project project2 = new Project(root2);
 
                 project1.RemoveItems(project2.Items);
-            }
-           );
+            });
         }
         /// <summary>
         /// Remove an item that is no longer attached. For convenience,
@@ -2406,8 +2392,7 @@ public void ReservedPropertyProjectConstructor()
                 globalProperties.Add("msbuildprojectdirectory", "x");
 
                 Project project = new Project(globalProperties, null, new ProjectCollection());
-            }
-           );
+            });
         }
         /// <summary>
         /// Reserved property in project collection global properties should log an error then rethrow
@@ -2431,8 +2416,7 @@ public void ReservedPropertyProjectCollectionConstructor()
                 {
                     logger.AssertLogContains("MSB4177");
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Invalid property (reserved name) in project collection global properties should log an error then rethrow
@@ -2456,8 +2440,7 @@ public void ReservedPropertyProjectCollectionConstructor2()
                 {
                     logger.AssertLogContains("MSB4177");
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Create tree like this
@@ -2527,8 +2510,7 @@ public void ReservedPropertyProjectCollectionConstructor3()
                 {
                     logger.AssertLogContains("MSB4177");
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Create a structure of various imports and verify that project.GetLogicalProject()
@@ -2642,8 +2624,7 @@ public void ImportPropertyEvaluatingToEmpty()
                 </Project>
                 ");
                 Project project = new Project(XmlReader.Create(new StringReader(projectOriginalContents)));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -2691,8 +2672,7 @@ public void ImportPropertyEvaluatingToInvalidPath()
                 </Project>
                 ");
                 Project project = new Project(XmlReader.Create(new StringReader(projectOriginalContents)));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -3708,13 +3688,11 @@ public void GetAllGlobsShouldFindAllExcludesAndRemoves()
 <A Remove=`@(R)`/>
 ",
         new[] { "aa", "bb", "cc" },
-        new[] { "b", "c" }
-        )]
+        new[] { "b", "c" })]
         [InlineData(
             @"<A Include=`ab*;b|c*;de*`/>",
             new[] { "ab", "de" },
-            new[] { "bc", "b|c", "b", "c" }
-            )]
+            new[] { "bc", "b|c", "b", "c" })]
         public void GetAllGlobsShouldProduceGlobThatMatches(string itemContents, string[] stringsThatShouldMatch, string[] stringsThatShouldNotMatch)
         {
             var projectTemplate =
diff --git a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
index 880504db761..f1ef8f48b5e 100644
--- a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
@@ -136,8 +136,7 @@ public void PropertySetViaProperty()
 
                 // This should throw
                 property.UnevaluatedValue = NewValue;
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests against edits into imported properties through the project.
@@ -168,8 +167,7 @@ public void PropertyRemove()
 
                 // This should throw
                 project.RemoveProperty(property);
-            }
-           );
+            });
         }
         #endregion
 
@@ -188,8 +186,7 @@ public void ItemImportedChangeType()
 
                 // This should throw
                 item.ItemType = "NewItemType";
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests imported item renaming.
@@ -204,8 +201,7 @@ public void ItemImportedRename()
 
                 // This should throw
                 item.Rename("NewItemName");
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests imported item SetUnevaluatedValue.
@@ -220,8 +216,7 @@ public void ItemImportedSetUnevaluatedValue()
 
                 // This should throw
                 item.UnevaluatedInclude = "NewItemName";
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests imported item removal.
@@ -236,8 +231,7 @@ public void ItemImportedRemove()
 
                 // This should throw
                 project.RemoveItem(item);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests project item type change.
@@ -312,8 +306,7 @@ public void MetadataImportSetViaProject()
 
                 // This should throw
                 item.SetMetadataValue(ImportedMetadataName, "NewImportedMetadataValue");
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests setting new metadata in import.
@@ -328,8 +321,7 @@ public void MetadataImportAdd()
 
                 // This should throw
                 item.SetMetadataValue("NewMetadata", "NewImportedMetadataValue");
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests setting new metadata in import.
@@ -344,8 +336,7 @@ public void MetadataImportSetViaMetadata()
 
                 // This should throw
                 metadata.UnevaluatedValue = NewValue;
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests removing metadata in import.
@@ -360,8 +351,7 @@ public void MetadataImportRemove()
 
                 // This should throw
                 item.RemoveMetadata(ImportedMetadataName);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests setting existing metadata in import.
@@ -439,8 +429,7 @@ public void DefinitionMetadataImportSetViaMetadata()
 
                 // This should throw
                 metadata.UnevaluatedValue = NewValue;
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests removing metadata in imported item definition.
@@ -455,8 +444,7 @@ public void DefinitionMetadataImportRemove()
 
                 // This should throw
                 item.RemoveMetadata(NonOverridableMetadataName);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests setting existing metadata in import.
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index 9b9ea6ff098..cae7293ab8b 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -157,8 +157,7 @@ public void AddItemInvalidNullItemType()
             {
                 ProjectInstance p = GetEmptyProjectInstance();
                 p.AddItem(null, "i1");
-            }
-           );
+            });
         }
         /// <summary>
         /// Add item empty item type
@@ -170,8 +169,7 @@ public void AddItemInvalidEmptyItemType()
             {
                 ProjectInstance p = GetEmptyProjectInstance();
                 p.AddItem(String.Empty, "i1");
-            }
-           );
+            });
         }
         /// <summary>
         /// Add item null include
@@ -183,8 +181,7 @@ public void AddItemInvalidNullInclude()
             {
                 ProjectInstance p = GetEmptyProjectInstance();
                 p.AddItem("i", null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Add item null metadata
@@ -349,8 +346,7 @@ public void BuildNullTargetInArray()
             {
                 ProjectInstance instance = new ProjectInstance(ProjectRootElement.Create());
                 instance.Build(new string[] { null }, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Null logger in array should give ArgumentNullException
@@ -362,8 +358,7 @@ public void BuildNullLoggerInArray()
             {
                 ProjectInstance instance = new ProjectInstance(ProjectRootElement.Create());
                 instance.Build("t", new ILogger[] { null });
-            }
-           );
+            });
         }
         /// <summary>
         /// Null remote logger in array should give ArgumentNullException
@@ -375,8 +370,7 @@ public void BuildNullRemoteLoggerInArray()
             {
                 ProjectInstance instance = new ProjectInstance(ProjectRootElement.Create());
                 instance.Build("t", null, new ForwardingLoggerRecord[] { null });
-            }
-           );
+            });
         }
         /// <summary>
         /// Null target name should imply the default target
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index c3316bb2267..24797e3e8d0 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -128,8 +128,7 @@ public void SetInvalidEmptyInclude()
             {
                 ProjectItemInstance item = GetItemInstance();
                 item.EvaluatedInclude = String.Empty;
-            }
-           );
+            });
         }
         /// <summary>
         /// Set include to invalid null value
@@ -141,8 +140,7 @@ public void SetInvalidNullInclude()
             {
                 ProjectItemInstance item = GetItemInstance();
                 item.EvaluatedInclude = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Create an item with a metadatum that has a null value
@@ -204,8 +202,7 @@ public void SetInvalidNullMetadataName()
             {
                 ProjectItemInstance item = GetItemInstance();
                 item.SetMetadata(null, "m1");
-            }
-           );
+            });
         }
         /// <summary>
         /// Set metadata with invalid empty name
@@ -217,8 +214,7 @@ public void SetInvalidEmptyMetadataName()
             {
                 ProjectItemInstance item = GetItemInstance();
                 item.SetMetadata(String.Empty, "m1");
-            }
-           );
+            });
         }
         /// <summary>
         /// Cast to ITaskItem
@@ -647,8 +643,7 @@ public void BuiltInMetadataInItemCondition()
                 ";
 
                 GetOneItem(content);
-            }
-           );
+            });
         }
         /// <summary>
         /// Two items should each get their own values for built-in metadata
diff --git a/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs
index 1f925217111..3f146576ca6 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs
@@ -70,8 +70,7 @@ public void SetInvalidNullValue()
             {
                 ProjectPropertyInstance property = GetPropertyInstance();
                 property.EvaluatedValue = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Immutable getter
diff --git a/src/Build.OM.UnitTests/TransientIO.cs b/src/Build.OM.UnitTests/TransientIO.cs
index 08af7fde6db..696716c5cf9 100644
--- a/src/Build.OM.UnitTests/TransientIO.cs
+++ b/src/Build.OM.UnitTests/TransientIO.cs
@@ -24,8 +24,7 @@ private DirectoryInfo EnsureTempRoot()
                 this.root = new DirectoryInfo(
                     this.Parent != null ?
                           this.Parent.GetAbsolutePath(this.SubFolder)
-                        : FileUtilities.GetTemporaryDirectory(true)
-                );
+                        : FileUtilities.GetTemporaryDirectory(true));
             }
 
             return this.root;
diff --git a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
index c9266d1c53f..8fcdd4936ee 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
@@ -57,8 +57,7 @@ public void NullLoadInfo()
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
                 taskFactory.InitializeFactory(null, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an invalid project file exception when a null task name is passed to the factory
@@ -70,8 +69,7 @@ public void NullTaskName()
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
                 taskFactory.InitializeFactory(_loadInfo, null, new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an invalid project file exception when an empty task name is passed to the factory
@@ -83,8 +81,7 @@ public void EmptyTaskName()
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
                 taskFactory.InitializeFactory(_loadInfo, String.Empty, new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an invalid project file exception when the task is not in the info
@@ -96,8 +93,7 @@ public void GoodTaskNameButNotInInfo()
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
                 taskFactory.InitializeFactory(_loadInfo, "RandomTask", new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an internal error when we call the initialize factory on the public method.
@@ -111,8 +107,7 @@ public void CallPublicInitializeFactory()
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
                 taskFactory.Initialize(String.Empty, new Dictionary<string, TaskPropertyInfo>(), String.Empty, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an internal error when we call the ITaskFactory2 version of initialize factory.
@@ -126,8 +121,7 @@ public void CallPublicInitializeFactory2()
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
                 taskFactory.Initialize(String.Empty, null, new Dictionary<string, TaskPropertyInfo>(), String.Empty, null);
-            }
-           );
+            });
         }
         #endregion
 
@@ -158,8 +152,7 @@ public void CreatableByTaskFactoryNotInAssemblyEmptyTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Assert.False(_taskFactory.TaskNameCreatableByFactory(String.Empty, null, String.Empty, null, ElementLocation.Create(".", 1, 1)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Expect a false answer when we ask for a task which is not in the factory.
@@ -170,8 +163,7 @@ public void CreatableByTaskFactoryNullTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Assert.False(_taskFactory.TaskNameCreatableByFactory(null, null, String.Empty, null, ElementLocation.Create(".", 1, 1)));
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure that when an explicitly matching identity is specified (e.g. the identity is non-empty), 
diff --git a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
index e2602d1f7bd..021d846214e 100644
--- a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
@@ -166,8 +166,7 @@ public void InvalidUnqualifiedMetadataReference()
                 // This is expected to throw because not all items contain a value for metadata "Culture".
                 // Only a.foo has a Culture metadata.  b.foo does not.
                 BatchingEngine.PrepareBatchingBuckets(parameters, CreateLookup(itemsByType, properties), MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case where an unqualified metadata reference is used illegally.
@@ -188,8 +187,7 @@ public void NoItemsConsumed()
 
                 // This is expected to throw because we have no idea what item list %(Culture) refers to.
                 BatchingEngine.PrepareBatchingBuckets(parameters, CreateLookup(itemsByType, properties), MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Missing unittest found by mutation testing.
diff --git a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
index d17003e254e..2b5121f2c81 100644
--- a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
@@ -52,8 +52,7 @@ public void TestConsumeNullBuildEvent()
             {
                 BuildEventArgTransportSink transportSink = new BuildEventArgTransportSink(PacketProcessor);
                 transportSink.Consume(null, 0);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify consume properly packages up the message event into a packet and send it to the 
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index a9ebe2ecba7..3db5c6d5c92 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -1143,8 +1143,7 @@ public void EndWithoutBegin()
             Assert.Throws<InvalidOperationException>(() =>
                 {
                     _buildManager.EndBuild();
-                }
-            );
+                });
         }
 
         [Fact]
@@ -3791,8 +3790,7 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
                     new[] { "MainTarget" },
-                    null
-                );
+                    null);
 
                 var submission = _buildManager.PendBuildRequest(buildRequestData);
 
@@ -3949,8 +3947,7 @@ public void OutOfProcEvaluationIdsUnique()
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
                     new[] { "MainTarget" },
-                    null
-                );
+                    null);
 
                 var submission = _buildManager.PendBuildRequest(buildRequestData);
 
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index bf46cce5006..974ae1de1a2 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -42,8 +42,7 @@ public void TestConstructorNullFile()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
-            }
-           );
+            });
         }
         [Fact]
         public void TestConstructorNullProps()
@@ -51,8 +50,7 @@ public void TestConstructorNullProps()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", Array.Empty<string>(), null);
-            }
-           );
+            });
         }
         [Fact]
         public void TestConstructor1()
@@ -68,8 +66,7 @@ public void TestConstructorInvalidConfigId()
                 BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
                 BuildRequestConfiguration config1 = new BuildRequestConfiguration(1, data, "2.0");
                 config1.ShallowCloneWithNewId(0);
-            }
-           );
+            });
         }
         [Fact]
         public void TestConstructor2PositiveConfigId()
@@ -91,8 +88,7 @@ public void TestConstructor2NullFile()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -101,8 +97,7 @@ public void TestConstructor2NullProps()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", Array.Empty<string>(), null);
-            }
-           );
+            });
         }
         [Fact]
         public void TestWasGeneratedByNode()
@@ -144,8 +139,7 @@ public void TestSetConfigurationIdBad()
                 BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
                 BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data, "2.0");
                 config1.ConfigurationId = -2;
-            }
-           );
+            });
         }
         [Fact]
         public void TestSetConfigurationIdGood()
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
index d81ca32ecba..130b09c8fee 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
@@ -37,8 +37,7 @@ public void TestConstructorBad()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 BuildRequestEntry entry = new BuildRequestEntry(null, null);
-            }
-           );
+            });
         }
         [Fact]
         public void TestSimpleStateProgression()
@@ -189,8 +188,7 @@ public void TestNoReadyToWaiting()
 
                 BuildRequest waitingRequest1 = CreateNewBuildRequest(2, new string[1] { "bar" });
                 entry.WaitForResult(waitingRequest1);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -207,8 +205,7 @@ public void TestNoReadyToComplete()
                 BuildResult requiredResult = new BuildResult(request);
                 requiredResult.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
                 entry.Complete(requiredResult);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -232,8 +229,7 @@ public void TestNoWaitingToComplete()
                 BuildResult requiredResult = new BuildResult(request);
                 requiredResult.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
                 entry.Complete(requiredResult);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -256,8 +252,7 @@ public void TestNoCompleteToWaiting()
 
                 BuildRequest waitingRequest1 = CreateNewBuildRequest(2, new string[1] { "bar" });
                 entry.WaitForResult(waitingRequest1);
-            }
-           );
+            });
         }
         [Fact]
         public void TestResultsWithNoMatch1()
diff --git a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
index a63a1142d25..91fe0ccfd7b 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
@@ -29,8 +29,7 @@ public void TestConstructorBad()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 CreateNewBuildRequest(0, null);
-            }
-           );
+            });
         }
         [Fact]
         public void TestConstructorGood()
@@ -100,8 +99,7 @@ public void TestResolveConfigurationBad()
             {
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 request.ResolveConfiguration(2);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -111,8 +109,7 @@ public void TestResolveConfigurationBad2()
             {
                 BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
                 request.ResolveConfiguration(-1);
-            }
-           );
+            });
         }
         [Fact]
         public void TestTranslation()
diff --git a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
index 9901c21cbca..1eea79212d9 100644
--- a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
@@ -64,8 +64,7 @@ public void TestConstructorBad()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildResult result = new BuildResult(null);
-            }
-           );
+            });
         }
         [Fact]
         public void TestConfigurationId()
@@ -142,8 +141,7 @@ public void TestIndexerBad1()
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 ITargetResult targetResult = result["foo"];
-            }
-           );
+            });
         }
 
         [Fact]
@@ -155,8 +153,7 @@ public void TestIndexerBad2()
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
                 ITargetResult targetResult = result["bar"];
-            }
-           );
+            });
         }
 
         [Fact]
@@ -167,8 +164,7 @@ public void TestAddResultsInvalid1()
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
-            }
-           );
+            });
         }
 
         [Fact]
@@ -179,8 +175,7 @@ public void TestAddResultsInvalid2()
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -191,8 +186,7 @@ public void TestAddResultsInvalid3()
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
-            }
-           );
+            });
         }
         [Fact]
         public void TestMergeResults()
@@ -229,8 +223,7 @@ public void TestMergeResultsBad1()
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
                 result.MergeResults(null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -247,8 +240,7 @@ public void TestMergeResultsBad3()
                 result2.AddResultsForTarget("bar", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
                 result.MergeResults(result2);
-            }
-           );
+            });
         }
         [Fact]
         public void TestHasResultsForTarget()
diff --git a/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs b/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
index 76f0641c76d..a47a1de2c2b 100644
--- a/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
@@ -56,8 +56,7 @@ public void InitializeWithNullEventSourceILogger()
             {
                 CentralForwardingLogger centralLogger = new CentralForwardingLogger();
                 centralLogger.Initialize(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the correct exception is thrown when the logger is initialized with a null 
@@ -70,8 +69,7 @@ public void InitializeWithNullEventSourceINodeLogger()
             {
                 CentralForwardingLogger centralLogger = new CentralForwardingLogger();
                 centralLogger.Initialize(null, 4);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the shutdown method will null out the event redirector
diff --git a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
index 5cbdd3a1394..fff33149ce8 100644
--- a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
@@ -39,8 +39,7 @@ public void TestConstructorNullConfiguration()
             {
                 BuildRequestConfiguration config = null;
                 ConfigurationMetadata metadata = new ConfigurationMetadata(config);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that a null project thrown an ArgumentNullException
@@ -52,8 +51,7 @@ public void TestConstructorNullProject()
             {
                 Project project = null;
                 ConfigurationMetadata metadata = new ConfigurationMetadata(project);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that we get the project path and tools version from the configuration
diff --git a/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
index ff207da4d88..f67dfabf6f6 100644
--- a/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
@@ -25,8 +25,7 @@ public void TestConstructorNegativeLoggerId()
             {
                 EventSourceSink testSink = new EventSourceSink();
                 EventRedirectorToSink eventRedirector = new EventRedirectorToSink(-10, testSink);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the correct exception is thrown when the logger is initialized with a null 
@@ -38,8 +37,7 @@ public void TestConstructorNullSink()
             Assert.Throws<InternalErrorException>(() =>
             {
                 EventRedirectorToSink eventRedirector = new EventRedirectorToSink(0, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify an valid inputs work and do not produce an exception
@@ -63,20 +61,13 @@ public void TestForwardingNotNullEvent()
             EventRedirectorToSink eventRedirector = new EventRedirectorToSink(5, testSink);
             BuildMessageEventArgs messageEvent = new BuildMessageEventArgs("My message", "Help me keyword", "Sender", MessageImportance.High);
             bool wentInHandler = false;
-            testSink.AnyEventRaised += new AnyEventHandler
-                (
-                  delegate
-                  (
-                    object sender,
-                    BuildEventArgs buildEvent
-                  )
+            testSink.AnyEventRaised += new AnyEventHandler(
+                  delegate (object sender, BuildEventArgs buildEvent)
                   {
                       wentInHandler = true;
                       BuildMessageEventArgs messageEventFromPacket = buildEvent as BuildMessageEventArgs;
                       Assert.Equal(messageEvent, messageEventFromPacket); // "Expected messageEvent to be forwarded to match actually forwarded event"
-                  }
-
-                );
+                  });
 
             ((IEventRedirector)eventRedirector).ForwardEvent(messageEvent);
             Assert.True(wentInHandler); // "Expected to go into event handler"
@@ -93,8 +84,7 @@ public void TestForwardingNullEvent()
                 EventSourceSink testSink = new EventSourceSink();
                 EventRedirectorToSink eventRedirector = new EventRedirectorToSink(5, testSink);
                 ((IEventRedirector)eventRedirector).ForwardEvent(null);
-            }
-           );
+            });
         }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index 62ead33ff5e..f8a02996baf 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -125,8 +125,7 @@ public void RaiseGenericBuildEventArgs()
                 EventSourceSink sink = new EventSourceSink();
                 RaiseEventHelper eventHelper = new RaiseEventHelper(sink);
                 eventHelper.RaiseBuildEvent(RaiseEventHelper.GenericBuildEvent);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that shutdown un registers all of the event handlers
diff --git a/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
index 576661b9af0..1f46795c330 100644
--- a/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
@@ -31,8 +31,7 @@ public void TestConstructorBad1()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(null, new string[1] { "foo" }, true);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -41,8 +40,7 @@ public void TestConstructorBad2()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null), "2.0"), null, true);
-            }
-           );
+            });
         }
         [Fact]
         public void TestProperties()
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index eb1d85c5e82..541dd134cbc 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -97,8 +97,7 @@ public void PropertyGroupWithReservedProperty()
             </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -114,12 +113,10 @@ public void PropertyGroupWithInvalidPropertyName()
                   <PropertyGroup/>
                 </PropertyGroup>
             </Target>
-            </Project>"
-                );
+            </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task);
-            }
-           );
+            });
         }
         [Fact]
         public void BlankProperty()
@@ -132,8 +129,7 @@ public void BlankProperty()
                   <p1></p1>
                 </PropertyGroup>
             </Target>
-            </Project>"
-            );
+            </Project>");
             IntrinsicTask task = CreateIntrinsicTask(content);
             PropertyDictionary<ProjectPropertyInstance> properties = new PropertyDictionary<ProjectPropertyInstance>();
             ExecuteTask(task, LookupHelpers.CreateLookup(properties));
@@ -153,12 +149,10 @@ public void PropertyGroupWithInvalidSyntax1()
             <Target Name='t'>
                 <PropertyGroup>x</PropertyGroup>
             </Target>
-            </Project>"
-                );
+            </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -174,12 +168,10 @@ public void PropertyGroupWithInvalidSyntax2()
                     <p Include='v0'/>
                 </PropertyGroup>
             </Target>
-            </Project>"
-                );
+            </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
         [Fact]
         public void PropertyGroupWithConditionOnGroup()
@@ -661,8 +653,7 @@ public void ItemKeepMetadataAndRemoveMetadataMutuallyExclusive()
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 Lookup lookup = LookupHelpers.CreateEmptyLookup();
                 ExecuteTask(task, lookup);
-            }
-           );
+            });
         }
         /// <summary>
         /// Should not make items with an empty include.
@@ -748,8 +739,7 @@ public void ItemGroupWithInvalidSyntax1()
             </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -767,8 +757,7 @@ public void ItemGroupWithInvalidSyntax2()
             </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -786,8 +775,7 @@ public void ItemGroupWithInvalidSyntax3()
             </Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
         [Fact]
         public void ItemGroupWithTransform()
@@ -1575,8 +1563,7 @@ public void IncludeNoOp()
             </Target></Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
         [Fact]
         public void RemoveNoOp()
@@ -2964,8 +2951,7 @@ public void ModifyItemWithUnqualifiedMetadataError()
             </Target></Project>");
                 IntrinsicTask task = CreateIntrinsicTask(content);
                 ExecuteTask(task, null);
-            }
-           );
+            });
         }
         [Fact]
         public void ModifyItemInTargetWithConditionWithoutItemTypeOnMetadataInCondition()
diff --git a/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs
index 8a372962d89..bfd36394f8c 100644
--- a/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs
@@ -60,8 +60,7 @@ public void InvalidNodeIdOnNodeLoggingContext()
             Assert.Throws<InternalErrorException>(() =>
             {
                 _ = new NodeLoggingContext(new MockLoggingService(), -2, true);
-            }
-           );
+            });
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index 07e0760970e..6b7979c966c 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -118,8 +118,7 @@ public void InitializeComponentNullHost()
             {
                 IBuildComponent logServiceComponent = (IBuildComponent)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
                 logServiceComponent.InitializeComponent(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify an exception is thrown if in initialized is called after the service has been shutdown
@@ -131,8 +130,7 @@ public void InitializeComponentAfterShutdown()
             {
                 _initializedService.ShutdownComponent();
                 _initializedService.InitializeComponent(new MockHost());
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the correct exceptions are thrown if the loggers crash
@@ -192,8 +190,7 @@ public void DoubleShutdown()
             {
                 _initializedService.ShutdownComponent();
                 _initializedService.ShutdownComponent();
-            }
-           );
+            });
         }
         #endregion
 
@@ -207,8 +204,7 @@ public void NullLogger()
             Assert.Throws<InternalErrorException>(() =>
             {
                 _initializedService.RegisterLogger(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we get an exception when we try and register a logger
@@ -222,8 +218,7 @@ public void RegisterLoggerServiceShutdown()
                 _initializedService.ShutdownComponent();
                 RegularILogger regularILogger = new RegularILogger();
                 _initializedService.RegisterLogger(regularILogger);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify a logger exception when initializing a logger is rethrown
@@ -236,8 +231,7 @@ public void LoggerExceptionInInitialize()
             {
                 LoggerThrowException exceptionLogger = new LoggerThrowException(false, true, new LoggerException());
                 _initializedService.RegisterLogger(exceptionLogger);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify a general exception when initializing a logger is wrapped
@@ -250,8 +244,7 @@ public void GeneralExceptionInInitialize()
             {
                 LoggerThrowException exceptionLogger = new LoggerThrowException(false, true, new Exception());
                 _initializedService.RegisterLogger(exceptionLogger);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -264,8 +257,7 @@ public void ILoggerExceptionInInitialize()
             {
                 LoggerThrowException exceptionLogger = new LoggerThrowException(false, true, new StackOverflowException());
                 _initializedService.RegisterLogger(exceptionLogger);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -327,8 +319,7 @@ public void NullForwardingLogger()
             Assert.Throws<InternalErrorException>(() =>
             {
                 _initializedService.RegisterDistributedLogger(null, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we get an exception when we try and register a distributed logger
@@ -347,8 +338,7 @@ public void RegisterDistributedLoggerServiceShutdown()
                 LoggerDescription description = CreateLoggerDescription(className, typeof(ProjectCollection).GetTypeInfo().Assembly.FullName, true);
 #endif
                 _initializedService.RegisterDistributedLogger(null, description);
-            }
-           );
+            });
         }
         /// <summary>
         /// Register both a good central logger and a good forwarding logger
@@ -512,8 +502,7 @@ public void NullDescriptionCollection()
             Assert.Throws<InternalErrorException>(() =>
             {
                 _initializedService.InitializeNodeLoggers(null, new EventSourceSink(), 3);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we get an exception when an empty description collection is passed in
@@ -524,8 +513,7 @@ public void EmptyDescriptionCollection()
             Assert.Throws<InternalErrorException>(() =>
             {
                 _initializedService.InitializeNodeLoggers(new List<LoggerDescription>(), new EventSourceSink(), 3);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we get an exception when we try and register a description and the component has already shutdown
@@ -545,8 +533,7 @@ public void NullForwardingLoggerSink()
                 List<LoggerDescription> tempList = new List<LoggerDescription>();
                 tempList.Add(description);
                 _initializedService.InitializeNodeLoggers(tempList, new EventSourceSink(), 2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Register both a good central logger and a good forwarding logger
@@ -687,8 +674,7 @@ public void NullPacketReceived()
             {
                 LoggingService loggingService = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
                 loggingService.PacketReceived(1, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify when a non logging packet is received.
@@ -702,8 +688,7 @@ public void NonLoggingPacketPacketReceived()
                 LoggingService loggingService = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
                 NonLoggingPacket packet = new NonLoggingPacket();
                 loggingService.PacketReceived(1, packet);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify when a logging packet is received the build event is
@@ -1165,14 +1150,12 @@ private LoggerDescription CreateLoggerDescription(string loggerClassName, string
                 eventsToForward = "BuildStartedEvent;BuildFinishedEvent;ProjectStartedEvent;ProjectFinishedEvent;TargetStartedEvent;TargetFinishedEvent;TaskStartedEvent;TaskFinishedEvent;ErrorEvent;WarningEvent;HighMessageEvent;NormalMessageEvent;LowMessageEvent;CustomEvent;CommandLine";
             }
 
-            LoggerDescription centralLoggerDescrption = new LoggerDescription
-                                                                             (
+            LoggerDescription centralLoggerDescrption = new LoggerDescription(
                                                                               loggerClassName,
                                                                               loggerAssemblyName,
                                                                               null /*Not needed as we are loading from current assembly*/,
                                                                               eventsToForward,
-                                                                              LoggerVerbosity.Diagnostic /*Not used, but the spirit of the logger is to forward everything so this is the most appropriate verbosity */
-                                                                             );
+                                                                              LoggerVerbosity.Diagnostic); /*Not used, but the spirit of the logger is to forward everything so this is the most appropriate verbosity */
             return centralLoggerDescrption;
         }
 
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 2d49c5fa110..7554db8c47c 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -54,8 +54,7 @@ public void LogBuildEventNullEvent()
             {
                 LoggingService loggingService = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
                 loggingService.LogBuildEvent(null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -105,8 +104,7 @@ public void LogErrorNullMessageResource()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogError(s_buildEventContext, "SubCategoryForSolutionParsingErrors", new BuildEventFileInfo("foo.cs"), null, "MyTask");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -119,8 +117,7 @@ public void LogErrorEmptyMessageResource()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogError(s_buildEventContext, "SubCategoryForSolutionParsingErrors", new BuildEventFileInfo("foo.cs"), string.Empty, "MyTask");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -157,8 +154,7 @@ public void LogInvalidProjectFileErrorNullEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogInvalidProjectFileError(null, new InvalidProjectFileException());
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -171,8 +167,7 @@ public void LogInvalidProjectFileErrorNullException()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogInvalidProjectFileError(s_buildEventContext, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -220,8 +215,7 @@ public void LogFatalErrorNullContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogFatalError(null, new Exception("SuperException"), new BuildEventFileInfo("foo.cs"), "FatalTaskError", "TaskName");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -234,8 +228,7 @@ public void LogFatalErrorNullFileInfo()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogFatalError(s_buildEventContext, new Exception("SuperException"), null, "FatalTaskError", "TaskName");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -267,8 +260,7 @@ public void LogFatalErrorNullMessageResourceName()
                 BuildEventFileInfo fileInfo = new BuildEventFileInfo("foo.cs", 1, 2, 3, 4);
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogFatalError(s_buildEventContext, new Exception("SuperException"), fileInfo, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -282,8 +274,7 @@ public void LogFatalErrorEmptyMessageResourceName()
                 BuildEventFileInfo fileInfo = new BuildEventFileInfo("foo.cs", 1, 2, 3, 4);
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogFatalError(s_buildEventContext, new Exception("SuperException"), fileInfo, string.Empty, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -343,8 +334,7 @@ public void LogFatalTaskErrorNullTaskNameName()
                 BuildEventFileInfo fileInfo = new BuildEventFileInfo("foo.cs", 1, 2, 3, 4);
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogFatalTaskError(s_buildEventContext, new Exception("SuperException"), fileInfo, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -384,8 +374,7 @@ public void LogErrorFromTextNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogErrorFromText(null, "SubCategoryForSolutionParsingErrors", "WarningCode", "HelpKeyword", new BuildEventFileInfo("foo.cs"), "Message");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -398,8 +387,7 @@ public void LogErrorFromTextNullFileInfo()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogErrorFromText(s_buildEventContext, "SubCategoryForSolutionParsingErrors", "WarningCode", "HelpKeyword", null, "Message");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -412,8 +400,7 @@ public void LogErrorFromTextNullMessage()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogErrorFromText(null, "SubCategoryForSolutionParsingErrors", "WarningCode", "HelpKeyword", new BuildEventFileInfo("foo.cs"), null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -522,8 +509,7 @@ public void LogTaskWarningFromExceptionNullTaskName()
                 BuildEventFileInfo fileInfo = new BuildEventFileInfo("foo.cs", 1, 2, 3, 4);
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogTaskWarningFromException(s_buildEventContext, null, fileInfo, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -537,8 +523,7 @@ public void LogTaskWarningFromExceptionEmptyTaskName()
                 BuildEventFileInfo fileInfo = new BuildEventFileInfo("foo.cs", 1, 2, 3, 4);
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogTaskWarningFromException(s_buildEventContext, null, fileInfo, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -581,8 +566,7 @@ public void LogWarningNullMessageResource()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogWarning(s_buildEventContext, "SubCategoryForSolutionParsingErrors", new BuildEventFileInfo("foo.cs"), null, "MyTask");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -595,8 +579,7 @@ public void LogWarningEmptyMessageResource()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogWarning(s_buildEventContext, "SubCategoryForSolutionParsingErrors", new BuildEventFileInfo("foo.cs"), string.Empty, "MyTask");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -623,8 +606,7 @@ public void LogWarningFromTextNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogWarningFromText(null, "SubCategoryForSolutionParsingErrors", "WarningCode", "HelpKeyword", new BuildEventFileInfo("foo.cs"), "Message");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -637,8 +619,7 @@ public void LogWarningFromTextNullFileInfo()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogWarningFromText(s_buildEventContext, "SubCategoryForSolutionParsingErrors", "WarningCode", "HelpKeyword", null, "Message");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -651,8 +632,7 @@ public void LogWarningFromTextNullMessage()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogWarningFromText(null, "SubCategoryForSolutionParsingErrors", "WarningCode", "HelpKeyword", new BuildEventFileInfo("foo.cs"), null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -696,8 +676,7 @@ public void LogCommentNullMessageResourceName()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogComment(s_buildEventContext, MessageImportance.Low, null, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -710,8 +689,7 @@ public void LogCommentEmptyMessageResourceName()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogComment(s_buildEventContext, MessageImportance.Low, String.Empty, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -751,8 +729,7 @@ public void LogCommentFromTextNullMessage()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogCommentFromText(s_buildEventContext, MessageImportance.Low, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -775,8 +752,7 @@ public void LogCommentFromTextNullBuildEventContextMessage()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogCommentFromText(null, MessageImportance.Low, "Hello");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -816,8 +792,7 @@ public void ProjectStartedNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogProjectStarted(null, 1, 2, s_buildEventContext, "ProjectFile", "TargetNames", null, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -831,8 +806,7 @@ public void ProjectStartedNullParentBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogProjectStarted(s_buildEventContext, 1, 2, null, "ProjectFile", "TargetNames", null, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1001,8 +975,7 @@ public void ProjectFinishedNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogProjectFinished(null, "ProjectFile", true);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1119,8 +1092,7 @@ public void TaskStartedNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogTaskStarted(null, "MyTask", "ProjectFile", "ProjectFileOfTask");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1155,8 +1127,7 @@ public void TaskFinishedNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogTaskFinished(null, "MyTask", "ProjectFile", "ProjectFileOfTask", true);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1196,8 +1167,7 @@ public void TargetStartedNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogTargetStarted(null, "MyTarget", "ProjectFile", "ProjectFileOfTarget", null, TargetBuiltReason.None);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1245,8 +1215,7 @@ public void TargetFinishedNullBuildEventContext()
             {
                 ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
                 service.LogTargetFinished(null, "MyTarget", "ProjectFile", "ProjectFileOfTarget", true, null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1450,8 +1419,7 @@ private void TestProjectFinishedEvent(string projectFile, bool success)
             cache.AddConfiguration(config);
 
             // Now do it the right way -- with a matching ProjectStarted.
-            BuildEventContext projectContext = service.LogProjectStarted
-                (
+            BuildEventContext projectContext = service.LogProjectStarted(
                     new BuildEventContext(1, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId),
                     1,
                     2,
@@ -1459,8 +1427,7 @@ private void TestProjectFinishedEvent(string projectFile, bool success)
                     projectFile,
                     null,
                     null,
-                    null
-                );
+                    null);
 
             service.LogProjectFinished(projectContext, projectFile, success);
 
@@ -1599,8 +1566,7 @@ private void TestTargetStartedWithParentTargetEvent(string targetName, string pr
         /// <param name="service">LoggingService mock object which overrides ProcessBuildEvent and can provide a ProcessedBuildEvent (the event which would have been sent to the loggers)</param>
         private void VerifyTargetFinishedEvent(string targetName, string projectFile, string projectFileOfTarget, bool succeeded, string message, ProcessBuildEventHelper service, IEnumerable targetOutputs)
         {
-            TargetFinishedEventArgs targetEvent = new TargetFinishedEventArgs
-                (
+            TargetFinishedEventArgs targetEvent = new TargetFinishedEventArgs(
                   message,
                   null,
                   targetName,
@@ -1608,8 +1574,7 @@ private void VerifyTargetFinishedEvent(string targetName, string projectFile, st
                   projectFileOfTarget,
                   succeeded,
                   service.ProcessedBuildEvent.Timestamp,
-                  targetOutputs
-                );
+                  targetOutputs);
             targetEvent.BuildEventContext = s_targetBuildEventContext;
             Assert.True(((TargetFinishedEventArgs)service.ProcessedBuildEvent).IsEquivalent(targetEvent));
         }
@@ -1624,8 +1589,7 @@ private void VerifyTargetFinishedEvent(string targetName, string projectFile, st
         /// <param name="service">LoggingService mock object which overrides ProcessBuildEvent and can provide a ProcessedBuildEvent (the event which would have been sent to the loggers)</param>
         private void VerifyTargetStartedEvent(string targetName, string projectFile, string projectFileOfTarget, string message, ProcessBuildEventHelper service)
         {
-            TargetStartedEventArgs buildEvent = new TargetStartedEventArgs
-                       (
+            TargetStartedEventArgs buildEvent = new TargetStartedEventArgs(
                            message,
                            null, // no help keyword
                            targetName,
@@ -1633,8 +1597,7 @@ private void VerifyTargetStartedEvent(string targetName, string projectFile, str
                            projectFileOfTarget,
                            String.Empty,
                            TargetBuiltReason.None,
-                           service.ProcessedBuildEvent.Timestamp
-                       );
+                           service.ProcessedBuildEvent.Timestamp);
             buildEvent.BuildEventContext = s_targetBuildEventContext;
             Assert.True(((TargetStartedEventArgs)service.ProcessedBuildEvent).IsEquivalent(buildEvent));
         }
@@ -1650,16 +1613,14 @@ private void VerifyTargetStartedEvent(string targetName, string projectFile, str
         /// <param name="service">LoggingService mock object which overrides ProcessBuildEvent and can provide a ProcessedBuildEvent (the event which would have been sent to the loggers)</param>
         private void VerifyTaskFinishedEvent(string taskName, string projectFile, string projectFileOfTask, bool succeeded, string message, ProcessBuildEventHelper service)
         {
-            TaskFinishedEventArgs taskEvent = new TaskFinishedEventArgs
-                (
+            TaskFinishedEventArgs taskEvent = new TaskFinishedEventArgs(
                   message,
                   null,
                   projectFile,
                   projectFileOfTask,
                   taskName,
                   succeeded,
-                  service.ProcessedBuildEvent.Timestamp
-                );
+                  service.ProcessedBuildEvent.Timestamp);
             taskEvent.BuildEventContext = s_buildEventContext;
             Assert.True(((TaskFinishedEventArgs)service.ProcessedBuildEvent).IsEquivalent(taskEvent));
         }
@@ -1674,15 +1635,13 @@ private void VerifyTaskFinishedEvent(string taskName, string projectFile, string
         /// <param name="service">LoggingService mock object which overrides ProcessBuildEvent and can provide a ProcessedBuildEvent (the event which would have been sent to the loggers)</param>
         private void VerifyTaskStartedEvent(string taskName, string projectFile, string projectFileOfTask, string message, ProcessBuildEventHelper service)
         {
-            TaskStartedEventArgs taskEvent = new TaskStartedEventArgs
-                (
+            TaskStartedEventArgs taskEvent = new TaskStartedEventArgs(
                  message,
                   null, // no help keyword
                   projectFile,
                   projectFileOfTask,
                   taskName,
-                  service.ProcessedBuildEvent.Timestamp
-                );
+                  service.ProcessedBuildEvent.Timestamp);
             taskEvent.BuildEventContext = s_buildEventContext;
             Assert.True(((TaskStartedEventArgs)service.ProcessedBuildEvent).IsEquivalent(taskEvent));
         }
@@ -1697,14 +1656,12 @@ private void VerifyTaskStartedEvent(string taskName, string projectFile, string
         /// <param name="success">Success value to create the comparison event with</param>
         private void VerifyProjectFinishedEvent(ProcessBuildEventHelper service, BuildEventContext projectContext, string message, string projectFile, bool success)
         {
-            ProjectFinishedEventArgs projectEvent = new ProjectFinishedEventArgs
-                (
+            ProjectFinishedEventArgs projectEvent = new ProjectFinishedEventArgs(
                   message,
                   null,
                   projectFile,
                   success,
-                  service.ProcessedBuildEvent.Timestamp
-                );
+                  service.ProcessedBuildEvent.Timestamp);
             projectEvent.BuildEventContext = projectContext;
             Assert.True(((ProjectFinishedEventArgs)service.ProcessedBuildEvent).IsEquivalent(projectEvent));
         }
@@ -1720,8 +1677,7 @@ private void VerifyProjectFinishedEvent(ProcessBuildEventHelper service, BuildEv
         /// <param name="parentBuildEventContext">ParentBuildEventContext to create the comparison event with.</param>
         private void VerifyProjectStartedEventArgs(ProcessBuildEventHelper service, int projectId, string message, string projectFile, string targetNames, BuildEventContext parentBuildEventContext, BuildEventContext generatedContext)
         {
-            ProjectStartedEventArgs buildEvent = new ProjectStartedEventArgs
-                    (
+            ProjectStartedEventArgs buildEvent = new ProjectStartedEventArgs(
                         projectId,
                         message,
                         null,       // no help keyword
@@ -1730,8 +1686,7 @@ private void VerifyProjectStartedEventArgs(ProcessBuildEventHelper service, int
                         null,
                         null,
                       parentBuildEventContext,
-                        service.ProcessedBuildEvent.Timestamp
-                    );
+                        service.ProcessedBuildEvent.Timestamp);
             buildEvent.BuildEventContext = generatedContext;
             Assert.True(((ProjectStartedEventArgs)service.ProcessedBuildEvent).IsEquivalent(buildEvent));
         }
@@ -1744,14 +1699,12 @@ private void VerifyProjectStartedEventArgs(ProcessBuildEventHelper service, int
         /// <param name="message">Message to create the comparison event with</param>
         private void VerityBuildMessageEventArgs(ProcessBuildEventHelper service, MessageImportance messageImportance, string message)
         {
-            BuildMessageEventArgs buildMessageEvent = new BuildMessageEventArgs
-                (
+            BuildMessageEventArgs buildMessageEvent = new BuildMessageEventArgs(
                   message,
                   null,
                   "MSBuild",
                   messageImportance,
-                  service.ProcessedBuildEvent.Timestamp
-                );
+                  service.ProcessedBuildEvent.Timestamp);
 
             buildMessageEvent.BuildEventContext = s_buildEventContext;
             Assert.True(((BuildMessageEventArgs)service.ProcessedBuildEvent).IsEquivalent(buildMessageEvent));
@@ -1768,8 +1721,7 @@ private void VerityBuildMessageEventArgs(ProcessBuildEventHelper service, Messag
         /// <param name="subcategory">Subcategory to create the comparison event with</param>
         private void VerifyBuildWarningEventArgs(BuildEventFileInfo fileInfo, string warningCode, string helpKeyword, string message, ProcessBuildEventHelper service, string subcategory)
         {
-            BuildWarningEventArgs buildEvent = new BuildWarningEventArgs
-                (
+            BuildWarningEventArgs buildEvent = new BuildWarningEventArgs(
                     subcategory,
                     warningCode,
                     fileInfo.File,
@@ -1780,8 +1732,7 @@ private void VerifyBuildWarningEventArgs(BuildEventFileInfo fileInfo, string war
                     message,
                     helpKeyword,
                     "MSBuild",
-                    service.ProcessedBuildEvent.Timestamp
-                );
+                    service.ProcessedBuildEvent.Timestamp);
             buildEvent.BuildEventContext = s_buildEventContext;
             Assert.True(buildEvent.IsEquivalent((BuildWarningEventArgs)service.ProcessedBuildEvent));
         }
@@ -1797,8 +1748,7 @@ private void VerifyBuildWarningEventArgs(BuildEventFileInfo fileInfo, string war
         /// <param name="subcategory">Subcategory to create the comparison event with</param>
         private void VerifyBuildErrorEventArgs(BuildEventFileInfo fileInfo, string errorCode, string helpKeyword, string message, ProcessBuildEventHelper service, string subcategory)
         {
-            BuildErrorEventArgs buildEvent = new BuildErrorEventArgs
-                (
+            BuildErrorEventArgs buildEvent = new BuildErrorEventArgs(
                     subcategory,
                     errorCode,
                     fileInfo.File,
@@ -1809,8 +1759,7 @@ private void VerifyBuildErrorEventArgs(BuildEventFileInfo fileInfo, string error
                     message,
                     helpKeyword,
                     "MSBuild",
-                    service.ProcessedBuildEvent.Timestamp
-                );
+                    service.ProcessedBuildEvent.Timestamp);
             buildEvent.BuildEventContext = s_buildEventContext;
             Assert.True(buildEvent.IsEquivalent((BuildErrorEventArgs)service.ProcessedBuildEvent));
         }
diff --git a/src/Build.UnitTests/BackEnd/Lookup_Tests.cs b/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
index ae99bbcc52f..77b40d5aeaf 100644
--- a/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
@@ -213,9 +213,9 @@ public void AddsWithDuplicateRemovalWithMetadata()
             ProjectItemInstance[] newItems = new ProjectItemInstance[]
             {
                 new ProjectItemInstance(project, "i1", "a1", project.FullPath), // Should get added
-                new ProjectItemInstance(project, "i1", "a2", new KeyValuePair<string, string>[] { new KeyValuePair<string, string>( "m1", "m1" ) }, project.FullPath), // Should get added               
-                new ProjectItemInstance(project, "i1", "a1", new KeyValuePair<string, string>[] { new KeyValuePair<string, string>( "m1", "m1" ) }, project.FullPath), // Should not get added               
-                new ProjectItemInstance(project, "i1", "a1", new KeyValuePair<string, string>[] { new KeyValuePair<string, string>( "m1", "m3" ) }, project.FullPath), // Should get added               
+                new ProjectItemInstance(project, "i1", "a2", new KeyValuePair<string, string>[] { new KeyValuePair<string, string>( "m1", "m1") }, project.FullPath), // Should get added               
+                new ProjectItemInstance(project, "i1", "a1", new KeyValuePair<string, string>[] { new KeyValuePair<string, string>( "m1", "m1") }, project.FullPath), // Should not get added               
+                new ProjectItemInstance(project, "i1", "a1", new KeyValuePair<string, string>[] { new KeyValuePair<string, string>( "m1", "m3") }, project.FullPath), // Should get added               
             };
 
             // Perform the addition
@@ -1014,8 +1014,7 @@ public void ModifyItemInOutsideScope()
                 ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
                 Lookup lookup = LookupHelpers.CreateLookup(new ItemDictionary<ProjectItemInstance>());
                 lookup.AddNewItem(new ProjectItemInstance(project, "x", "y", project.FullPath));
-            }
-           );
+            });
         }
         /// <summary>
         /// After modification, should be able to GetItem and then modify it again
diff --git a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
index 7b6a17d9d9d..ac234aa01a3 100644
--- a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
@@ -185,8 +185,7 @@ public void ConstructionSynchronousWithInvalidHost()
             {
                 NodeEndpointInProc.CreateInProcEndpoints(
                     NodeEndpointInProc.EndpointMode.Synchronous, null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -196,8 +195,7 @@ public void ConstructionAsynchronousWithInvalidHost()
             {
                 NodeEndpointInProc.CreateInProcEndpoints(
                     NodeEndpointInProc.EndpointMode.Asynchronous, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that the links:
diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index 575dd00ee0b..06f610ef495 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -32,8 +32,7 @@ public void LogMessageConstructorNullBuildEvent()
             Assert.Throws<InternalErrorException>(() =>
             {
                 LogMessagePacket packet = new LogMessagePacket(null);
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/OnError_Tests.cs b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
index f348fce8ca0..631ac3f4c3b 100644
--- a/src/Build.UnitTests/BackEnd/OnError_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
@@ -558,8 +558,7 @@ public void OutOfOrderOnError()
                 </Project>"))));
 
                 /* No build required */
-            }
-           );
+            });
         }
 
         [Theory]
@@ -598,10 +597,8 @@ public void ErrorWhenTaskFailsWithoutLoggingErrorEscapeHatch(string failureRespo
         public void PostBuildBasic()
         {
             MockLogger l = new MockLogger();
-            Project p = new Project
-            (
-                XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.Nowhere)))
-            );
+            Project p = new Project(
+                XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.Nowhere))));
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -622,10 +619,8 @@ public void PostBuildBasic()
         public void PostBuildOnSuccessWhereCompileFailed()
         {
             MockLogger l = new MockLogger();
-            Project p = new Project
-            (
-                XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.Compile)))
-            );
+            Project p = new Project(
+                XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.Compile))));
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -647,10 +642,8 @@ public void PostBuildOnSuccessWhereCompileFailed()
         public void PostBuildOnSuccessWhereGenerateSatellitesFailed()
         {
             MockLogger l = new MockLogger();
-            Project p = new Project
-            (
-                XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.GenerateSatellites)))
-            );
+            Project p = new Project(
+                XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.GenerateSatellites))));
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -672,10 +665,8 @@ public void PostBuildOnSuccessWhereGenerateSatellitesFailed()
         public void PostBuildAlwaysWhereCompileFailed()
         {
             MockLogger l = new MockLogger();
-            Project p = new Project
-            (
-                XmlReader.Create(new StringReader(PostBuildBuilder("Always", FailAt.Compile)))
-            );
+            Project p = new Project(
+                XmlReader.Create(new StringReader(PostBuildBuilder("Always", FailAt.Compile))));
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -697,10 +688,8 @@ public void PostBuildAlwaysWhereCompileFailed()
         public void PostBuildFinalOutputChangedWhereCompileFailed()
         {
             MockLogger l = new MockLogger();
-            Project p = new Project
-            (
-                XmlReader.Create(new StringReader(PostBuildBuilder("Final_Output_Changed", FailAt.Compile)))
-            );
+            Project p = new Project(
+                XmlReader.Create(new StringReader(PostBuildBuilder("Final_Output_Changed", FailAt.Compile))));
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -722,10 +711,8 @@ public void PostBuildFinalOutputChangedWhereCompileFailed()
         public void PostBuildFinalOutputChangedWhereGenerateSatellitesFailed()
         {
             MockLogger l = new MockLogger();
-            Project p = new Project
-            (
-                XmlReader.Create(new StringReader(PostBuildBuilder("Final_Output_Changed", FailAt.GenerateSatellites)))
-            );
+            Project p = new Project(
+                XmlReader.Create(new StringReader(PostBuildBuilder("Final_Output_Changed", FailAt.GenerateSatellites))));
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -756,11 +743,9 @@ private enum FailAt
          * conditions.
          *
          */
-        private static string PostBuildBuilder
-        (
+        private static string PostBuildBuilder(
             string controlFlag,  // On_Success, Always, Final_Output_Changed
-            FailAt failAt
-        )
+            FailAt failAt)
         {
             string compileStep = "";
             if (FailAt.Compile == failAt)
diff --git a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
index 277ab66fe0a..ac0f172aee1 100644
--- a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
@@ -145,8 +145,7 @@ public void TestRetrieveIncompleteResults()
                 cache.AddResult(result);
 
                 cache.GetResultForRequest(request);
-            }
-           );
+            });
         }
         [Fact]
         public void TestRetrieveSubsetResults()
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 0a7d6462259..4fe3822993c 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -87,8 +87,7 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
                             sdk,
                             "path",
                             "2.0.0",
-                            Enumerable.Empty<string>()
-                            ))
+                            Enumerable.Empty<string>()))
                 });
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);
@@ -266,8 +265,7 @@ public void CachingWrapperShouldWarnWhenMultipleVersionsAreReferenced()
                     sdk,
                     "path",
                     "1.0.0",
-                    Enumerable.Empty<string>()
-                    ));
+                    Enumerable.Empty<string>()));
 
             var service = new CachingSdkResolverService();
             service.InitializeForTests(
@@ -354,8 +352,7 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)
                     version: null,
                     propertiesToAdd,
                     itemsToAdd,
-                    warnings: null
-                    ));
+                    warnings: null));
 
             SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
 
@@ -391,8 +388,7 @@ public void SdkResultCanReturnPropertiesAndItems()
                     version: "1.0",
                     propertiesToAdd,
                     itemsToAdd,
-                    warnings: null
-                    ));
+                    warnings: null));
 
             SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
 
@@ -438,8 +434,7 @@ public void SdkResultCanReturnMultiplePaths(bool includePropertiesAndItems)
                     version: "1.0",
                     propertiesToAdd,
                     itemsToAdd,
-                    warnings: null
-                    ));
+                    warnings: null));
 
             SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
 
@@ -484,8 +479,7 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
                     version: "1.1",
                     propertiesToAdd,
                     itemsToAdd,
-                    warnings: null
-                    ));
+                    warnings: null));
 
             SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
 
@@ -522,8 +516,7 @@ public void CachingWrapperShouldOnlyResolveOnce()
                     sdk,
                     "path",
                     "1.0.0",
-                    Enumerable.Empty<string>()
-                ));
+                    Enumerable.Empty<string>()));
 
             var service = new CachingSdkResolverService();
             service.InitializeForTests(
@@ -664,8 +657,7 @@ internal override IList<SdkResolverManifest> GetResolversManifests(LoggingContex
                     SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(
                         pair.Resolver.Name,
                         null,
-                        new Regex(pair.ResolvableSdkPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant, TimeSpan.FromMilliseconds(500))
-                    );
+                        new Regex(pair.ResolvableSdkPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant, TimeSpan.FromMilliseconds(500)));
                     manifests.Add(sdkResolverManifest);
                 }
                 return manifests;
diff --git a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
index 55e51e5823b..9e669c7980d 100644
--- a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
@@ -255,8 +255,7 @@ private SdkResolver SetupSdkResolver(string projectFolder)
                             {
                                 { "ItemFromResolver", new SdkResultItem("ItemValueFromResolver", null) }
                             },
-                        warnings: null
-                    ));
+                        warnings: null));
 
             EvaluationContext.TestOnlyHookOnCreate = context =>
             {
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 64682d0e709..8f9f76a04e8 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -249,8 +249,7 @@ public void SkippedTargetsShouldOnlyInferOutputsOnce()
 
             Thread.Sleep(100);
 
-            string content = String.Format
-                (
+            string content = String.Format(
 @"
 <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
@@ -285,8 +284,7 @@ public void SkippedTargetsShouldOnlyInferOutputsOnce()
   </Target>
 </Project>
             ",
-             path
-             );
+             path);
 
             Project p = new Project(XmlReader.Create(new StringReader(content)));
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 7a1c46263d2..85513160be2 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -84,8 +84,7 @@ public void TestConstructorNullTarget()
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
                 Lookup lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(project.Items), new PropertyDictionary<ProjectPropertyInstance>(project.Properties));
                 TargetEntry entry = new TargetEntry(requestEntry, this, null, lookup, null, TargetBuiltReason.None, _host, false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests a constructor with a null lookup.
@@ -99,8 +98,7 @@ public void TestConstructorNullLookup()
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
                 TargetEntry entry = new TargetEntry(requestEntry, this, new TargetSpecification("Empty", null), null, null, TargetBuiltReason.None, _host, false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests a constructor with a null host.
@@ -116,8 +114,7 @@ public void TestConstructorNullHost()
 
                 Lookup lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(project.Items), new PropertyDictionary<ProjectPropertyInstance>(project.Properties));
                 TargetEntry entry = new TargetEntry(requestEntry, this, new TargetSpecification("Empty", null), lookup, null, TargetBuiltReason.None, null, false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests a valid constructor call.
@@ -142,8 +139,7 @@ public void TestInvalidState_Execution()
                 TargetEntry entry = CreateStandardTargetEntry(project, "Empty");
                 Assert.Equal(TargetEntryState.Dependencies, entry.State);
                 ExecuteEntry(project, entry);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests incorrect invocation of GatherResults.
@@ -157,8 +153,7 @@ public void TestInvalidState_Completed()
                 TargetEntry entry = CreateStandardTargetEntry(project, "Empty");
                 Assert.Equal(TargetEntryState.Dependencies, entry.State);
                 entry.GatherResults();
-            }
-           );
+            });
         }
         /// <summary>
         /// Verifies that the dependencies specified for a target are returned by the GetDependencies call.
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index a4bcc061187..1e564d3c1aa 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -53,8 +53,7 @@ public void TestConstructorNullItems()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 TargetResult result = new TargetResult(null, BuildResultUtilities.GetStopWithErrorResult());
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests a constructor with an exception passed.
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index cf1e91d1e27..8d8e4311979 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -512,28 +512,24 @@ public FileWriteInfo(string path, DateTime lastWriteTime)
         /// The setup required here suggests that the TargetDependencyAnalyzer
         /// class should be refactored.
         /// </summary>
-        private DependencyAnalysisResult PerformDependencyAnalysisTestHelper
-        (
+        private DependencyAnalysisResult PerformDependencyAnalysisTestHelper(
             FileWriteInfo[] filesToAnalyze,
             ItemDictionary<ProjectItemInstance> itemsByName,
             string inputs,
-            string outputs
-        )
+            string outputs)
         {
             ItemDictionary<ProjectItemInstance> h1 = new ItemDictionary<ProjectItemInstance>();
             ItemDictionary<ProjectItemInstance> h2 = new ItemDictionary<ProjectItemInstance>();
             return PerformDependencyAnalysisTestHelper(filesToAnalyze, itemsByName, inputs, outputs, out h1, out h2);
         }
 
-        private DependencyAnalysisResult PerformDependencyAnalysisTestHelper
-        (
+        private DependencyAnalysisResult PerformDependencyAnalysisTestHelper(
             FileWriteInfo[] filesToAnalyze,
             ItemDictionary<ProjectItemInstance> itemsByName,
             string inputs,
             string outputs,
             out ItemDictionary<ProjectItemInstance> changedTargetInputs,
-            out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
-        )
+            out ItemDictionary<ProjectItemInstance> upToDateTargetInputs)
         {
             List<string> filesToDelete = new List<string>();
 
@@ -599,14 +595,12 @@ out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
         [Fact]
         public void TestIsAnyOutOfDate1()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 new DateTime(2001, 1, 1), /* output1 */
                 new DateTime(2001, 1, 1), /* output2 */
-                false /* none out of date */
-                );
+                false); /* none out of date */
         }
 
         /// <summary>
@@ -615,14 +609,12 @@ public void TestIsAnyOutOfDate1()
         [Fact]
         public void TestIsAnyOutOfDate2()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2002, 1, 1), /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 new DateTime(2003, 1, 1), /* output1 */
                 new DateTime(2001, 1, 1), /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
         /// <summary>
@@ -631,14 +623,12 @@ public void TestIsAnyOutOfDate2()
         [Fact]
         public void TestIsAnyOutOfDate3()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2002, 1, 1), /* input2 */
                 new DateTime(2001, 1, 1), /* output1 */
                 new DateTime(2003, 1, 1), /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
         /// <summary>
@@ -647,14 +637,12 @@ public void TestIsAnyOutOfDate3()
         [Fact]
         public void TestIsAnyOutOfDate4()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 new DateTime(2000, 1, 1), /* output1 */
                 new DateTime(2000, 1, 1), /* output2 */
-                false /* none out of date */
-                );
+                false); /* none out of date */
         }
 
         /// <summary>
@@ -663,14 +651,12 @@ public void TestIsAnyOutOfDate4()
         [Fact]
         public void TestIsAnyOutOfDate5()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 null, /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 new DateTime(2002, 1, 1), /* output1 */
                 new DateTime(2002, 1, 1), /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
 
@@ -680,14 +666,12 @@ public void TestIsAnyOutOfDate5()
         [Fact]
         public void TestIsAnyOutOfDate6()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 null, /* input2 */
                 new DateTime(2002, 1, 1), /* output1 */
                 new DateTime(2002, 1, 1), /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
         /// <summary>
@@ -696,14 +680,12 @@ public void TestIsAnyOutOfDate6()
         [Fact]
         public void TestIsAnyOutOfDate7()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 new DateTime(2002, 1, 1), /* output1 */
                 null, /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
         /// <summary>
@@ -712,14 +694,12 @@ public void TestIsAnyOutOfDate7()
         [Fact]
         public void TestIsAnyOutOfDate8()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 null, /* output1 */
                 new DateTime(2002, 1, 1), /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
         /// <summary>
@@ -728,14 +708,12 @@ public void TestIsAnyOutOfDate8()
         [Fact]
         public void TestIsAnyOutOfDate9()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 null, /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 null, /* output1 */
                 new DateTime(2002, 1, 1), /* output2 */
-                true /* some out of date */
-                );
+                true); /* some out of date */
         }
 
         /// <summary>
@@ -744,8 +722,7 @@ public void TestIsAnyOutOfDate9()
         [Fact]
         public void TestIsAnyOutOfDate10()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2002, 1, 1), /* input1 */
                 null, /* input2 */
                 new DateTime(2000, 1, 1), /* output1 */
@@ -754,8 +731,7 @@ public void TestIsAnyOutOfDate10()
                 true, /* include input1 */
                 false, /* do not include input2 */
                 true, /* include output1 */
-                true /* include output2 */
-                );
+                true); /* include output2 */
         }
 
         /// <summary>
@@ -764,8 +740,7 @@ public void TestIsAnyOutOfDate10()
         [Fact]
         public void TestIsAnyOutOfDate11()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 null, /* input2 */
                 new DateTime(2002, 1, 1), /* output1 */
@@ -774,8 +749,7 @@ public void TestIsAnyOutOfDate11()
                 true, /* include input1 */
                 false, /* do not include input2 */
                 true, /* include output1 */
-                true /* include output2 */
-                );
+                true); /* include output2 */
         }
 
         /// <summary>
@@ -784,8 +758,7 @@ public void TestIsAnyOutOfDate11()
         [Fact]
         public void TestIsAnyOutOfDate12()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2000, 1, 1), /* input2 */
                 new DateTime(2002, 1, 1), /* output1 */
@@ -794,8 +767,7 @@ public void TestIsAnyOutOfDate12()
                 true, /* include input1 */
                 true, /* include input2 */
                 true, /* include output1 */
-                false /* do not include output2 */
-                );
+                false); /* do not include output2 */
         }
 
         /// <summary>
@@ -804,8 +776,7 @@ public void TestIsAnyOutOfDate12()
         [Fact]
         public void TestIsAnyOutOfDate13()
         {
-            IsAnyOutOfDateTestHelper
-                (
+            IsAnyOutOfDateTestHelper(
                 new DateTime(2000, 1, 1), /* input1 */
                 new DateTime(2003, 1, 1), /* input2 */
                 new DateTime(2002, 1, 1), /* output1 */
@@ -814,8 +785,7 @@ public void TestIsAnyOutOfDate13()
                 true, /* include input1 */
                 true, /* include input2 */
                 true, /* include output1 */
-                false /* do not include output2 */
-                );
+                false); /* do not include output2 */
         }
 
         /// <summary>
@@ -828,14 +798,12 @@ public void TestIsAnyOutOfDate13()
         /// <param name="output1Time"></param>
         /// <param name="output2Time"></param>
         /// <param name="isUpToDate"></param>
-        private void IsAnyOutOfDateTestHelper
-            (
+        private void IsAnyOutOfDateTestHelper(
             DateTime? input1Time,
             DateTime? input2Time,
             DateTime? output1Time,
             DateTime? output2Time,
-            bool isUpToDate
-            )
+            bool isUpToDate)
         {
             IsAnyOutOfDateTestHelper(input1Time, input2Time, output1Time, output2Time, isUpToDate, true, true, true, true);
         }
@@ -850,8 +818,7 @@ bool isUpToDate
         /// <param name="output1Time"></param>
         /// <param name="output2Time"></param>
         /// <param name="isUpToDate"></param>
-        private void IsAnyOutOfDateTestHelper
-            (
+        private void IsAnyOutOfDateTestHelper(
             DateTime? input1Time,
             DateTime? input2Time,
             DateTime? output1Time,
@@ -860,8 +827,7 @@ private void IsAnyOutOfDateTestHelper
             bool includeInput1,
             bool includeInput2,
             bool includeOutput1,
-            bool includeOutput2
-            )
+            bool includeOutput2)
         {
             List<string> inputs = new List<string>();
             List<string> outputs = new List<string>();
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index a61bc9aa2b7..d9d7b85a6a1 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -156,8 +156,7 @@ public void ValidateNoParameters_MissingRequired()
             {
                 var parameters = new Dictionary<string, (string, ElementLocation)>(StringComparer.OrdinalIgnoreCase);
                 _host.SetTaskParameters(parameters);
-            }
-           );
+            });
         }
         /// <summary>
         /// Validate that setting a non-existent parameter fails, but does not throw an exception.
@@ -489,8 +488,7 @@ public void TestSetItemParamDouble()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ValidateTaskParameterItems("ItemParam", "@(ItemListContainingTwoItems)", _twoItems);
-            }
-           );
+            });
         }
         /// <summary>
         /// Validate that setting an item with a string results in an item with the evaluated include set to the string.
@@ -648,8 +646,7 @@ public void TestExecuteThrow()
                 Assert.True(_host.SetTaskParameters(parameters));
 
                 _host.Execute();
-            }
-           );
+            });
         }
         #endregion
 
@@ -931,8 +928,7 @@ public void TestArrayListParameter()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ValidateOutputItems("ArrayListOutput", Array.Empty<ITaskItem>());
-            }
-           );
+            });
         }
         /// <summary>
         /// Attempts to gather outputs from a non-existent output.  This should fail.
@@ -943,8 +939,7 @@ public void TestNonexistantOutput()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Assert.False(_host.GatherTaskOutputs("NonExistentOutput", ElementLocation.Create(".", 1, 1), true, "output"));
-            }
-           );
+            });
         }
         /// <summary>
         /// object[] should not be a supported output type.
@@ -955,8 +950,7 @@ public void TestOutputObjectArrayToProperty()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 ValidateOutputProperty("ObjectArrayOutput", "");
-            }
-           );
+            });
         }
         #endregion
 
@@ -988,8 +982,7 @@ public void TestTaskResolutionFailureWithUsingTask()
                 TargetLoggingContext tlc = new TargetLoggingContext(_loggingService, new BuildEventContext(1, 1, BuildEventContext.InvalidProjectContextId, 1));
 
                 ProjectInstance project = CreateTestProject();
-                _host.InitializeForTask
-                    (
+                _host.InitializeForTask(
                     this,
                     tlc,
                     project,
@@ -1001,12 +994,10 @@ public void TestTaskResolutionFailureWithUsingTask()
                     null,
 #endif
                     false,
-                    CancellationToken.None
-                    );
+                    CancellationToken.None);
                 _host.FindTask(null);
                 _host.InitializeForBatch(new TaskLoggingContext(_loggingService, tlc.BuildEventContext), _bucket, null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that specifying a task with no using task logs an error, but does not throw.
@@ -1019,8 +1010,7 @@ public void TestTaskResolutionFailureWithNoUsingTask()
             TargetLoggingContext tlc = new TargetLoggingContext(_loggingService, new BuildEventContext(1, 1, BuildEventContext.InvalidProjectContextId, 1));
 
             ProjectInstance project = CreateTestProject();
-            _host.InitializeForTask
-                (
+            _host.InitializeForTask(
                 this,
                 tlc,
                 project,
@@ -1032,8 +1022,7 @@ public void TestTaskResolutionFailureWithNoUsingTask()
                 null,
 #endif
                 false,
-                CancellationToken.None
-                );
+                CancellationToken.None);
 
             _host.FindTask(null);
             _host.InitializeForBatch(new TaskLoggingContext(_loggingService, tlc.BuildEventContext), _bucket, null);
@@ -1167,8 +1156,7 @@ private void InitializeHost(bool throwOnExecute)
             taskFactory.ThrowOnExecute = throwOnExecute;
             string taskName = "TaskBuilderTestTask";
             (_host as TaskExecutionHost)._UNITTESTONLY_TaskFactoryWrapper = new TaskFactoryWrapper(taskFactory, loadedType, taskName, null);
-            _host.InitializeForTask
-                (
+            _host.InitializeForTask(
                 this,
                 tlc,
                 project,
@@ -1180,8 +1168,7 @@ private void InitializeHost(bool throwOnExecute)
                 null,
 #endif
                 false,
-                CancellationToken.None
-                );
+                CancellationToken.None);
 
             ProjectTaskInstance taskInstance = project.Targets["foo"].Tasks.First();
             TaskLoggingContext talc = tlc.LogTaskBatchStarted(".", taskInstance);
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index c885fbea105..feaf7f13c7d 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -63,8 +63,7 @@ public void ConstructorWithNullName()
                     warningsAsErrors: null,
                     warningsNotAsErrors: null,
                     warningsAsMessages: null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that an exception is thrown when the task name is empty. 
@@ -99,8 +98,7 @@ public void ConstructorWithEmptyName()
                     warningsAsErrors: null,
                     warningsNotAsErrors: null,
                     warningsAsMessages: null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that an exception is thrown when the path to the task assembly is null
@@ -135,8 +133,7 @@ public void ConstructorWithNullLocation()
                     warningsAsErrors: null,
                     warningsNotAsErrors: null,
                     warningsAsMessages: null);
-            }
-           );
+            });
         }
 
 #if !FEATURE_ASSEMBLYLOADCONTEXT
@@ -173,8 +170,7 @@ public void ConstructorWithEmptyLocation()
                     warningsAsErrors: null,
                     warningsNotAsErrors: null,
                     warningsAsMessages: null);
-            }
-           );
+            });
         }
 #endif
 
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index 7733f0aac37..a57bc02b955 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -236,8 +236,7 @@ public void TestLogErrorEventNull()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 _taskHost.LogErrorEvent(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that a null warning event will cause an exception
@@ -248,8 +247,7 @@ public void TestLogWarningEventNull()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 _taskHost.LogWarningEvent(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that a null message event will cause an exception
@@ -260,8 +258,7 @@ public void TestLogMessageEventNull()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 _taskHost.LogMessageEvent(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that a null custom event will cause an exception
@@ -272,8 +269,7 @@ public void TestLogCustomEventNull()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 _taskHost.LogCustomEvent(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test that errors are logged properly
@@ -808,10 +804,8 @@ internal class MyCustomMessageEvent : BuildMessageEventArgs
             /// <summary>
             /// Constructor
             /// </summary>
-            internal MyCustomMessageEvent
-                (
-                string message
-                )
+            internal MyCustomMessageEvent(
+                string message)
                 : base(message, null, null, MessageImportance.High)
             {
             }
@@ -868,10 +862,8 @@ internal class MyCustomBuildErrorEventArgs : BuildErrorEventArgs
             /// <summary>
             /// Constructor
             /// </summary>
-            internal MyCustomBuildErrorEventArgs
-                (
-                string message
-                )
+            internal MyCustomBuildErrorEventArgs(
+                string message)
                 : base(null, null, null, 0, 0, 0, 0, message, null, null)
             {
             }
@@ -907,10 +899,8 @@ internal class MyCustomBuildWarningEventArgs : BuildWarningEventArgs
             /// <summary>
             /// Constructor
             /// </summary>
-            internal MyCustomBuildWarningEventArgs
-                (
-                string message
-                )
+            internal MyCustomBuildWarningEventArgs(
+                string message)
                 : base(null, null, null, 0, 0, 0, 0, message, null, null)
             {
             }
@@ -945,10 +935,8 @@ internal class MyCustomMessageEventNotSerializable : BuildMessageEventArgs
             /// <summary>
             /// Constructor
             /// </summary>
-            internal MyCustomMessageEventNotSerializable
-                (
-                string message
-                )
+            internal MyCustomMessageEventNotSerializable(
+                string message)
                 : base(message, null, null, MessageImportance.High)
             {
             }
@@ -1005,10 +993,8 @@ internal class MyCustomBuildErrorEventArgsNotSerializable : BuildErrorEventArgs
             /// <summary>
             /// Constructor
             /// </summary>
-            internal MyCustomBuildErrorEventArgsNotSerializable
-                (
-                string message
-                )
+            internal MyCustomBuildErrorEventArgsNotSerializable(
+                string message)
                 : base(null, null, null, 0, 0, 0, 0, message, null, null)
             {
             }
@@ -1043,10 +1029,8 @@ internal class MyCustomBuildWarningEventArgsNotSerializable : BuildWarningEventA
             /// <summary>
             /// Constructor
             /// </summary>
-            internal MyCustomBuildWarningEventArgsNotSerializable
-                (
-                string message
-                )
+            internal MyCustomBuildWarningEventArgsNotSerializable(
+                string message)
                 : base(null, null, null, 0, 0, 0, 0, message, null, null)
             {
             }
diff --git a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
index 75062aaf26b..bb330fb46c4 100644
--- a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
@@ -358,26 +358,22 @@ public void RetrieveFromCacheTaskDoesNotExist_ExactMatch()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // Not in registry, so shouldn't match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: null,
                     architecture: null,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // Still not in registry, so shouldn't match this time either -- and we should pull from the cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: null,
                     architecture: null,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: true
-                );
+                    shouldBeRetrievedFromCache: true);
         }
 
         /// <summary>
@@ -398,26 +394,22 @@ public void RetrieveFromCacheTaskDoesNotExist_FuzzyMatch()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // Not in registry, so shouldn't match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
                     architecture: null,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // Still not in registry, so shouldn't match this time either -- and we should pull from the cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
                     architecture: null,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: true
-                );
+                    shouldBeRetrievedFromCache: true);
         }
 
         /// <summary>
@@ -440,26 +432,22 @@ public void RetrieveFromCacheMatchingTaskDoesNotExist_FuzzyMatch()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // Not in registry, so shouldn't match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: "CLR2",
                     architecture: "*",
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // Still not in registry, so shouldn't match this time either -- and we should pull from the cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: "CLR2",
                     architecture: "*",
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: true
-                );
+                    shouldBeRetrievedFromCache: true);
         }
 
         /// <summary>
@@ -482,26 +470,22 @@ public void RetrieveFromCacheMatchingTaskDoesNotExistOnFirstCallButDoesOnSecond(
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // Not in registry, so shouldn't match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: "CLR2",
                     architecture: "*",
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // Still not in registry, so shouldn't match this time either -- and we should pull from the cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
                     architecture: null,
                     shouldBeRetrieved: true,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
         }
 
         /// <summary>
@@ -524,59 +508,49 @@ public void RetrieveFromCacheMatchingExactParameters()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // no parameters - no match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: null,
                     architecture: null,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // parameters that would be a successful fuzzy match - no match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.any,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // parameters that are a successful exact match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x86,
                     shouldBeRetrieved: true,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // parameters that do not match - should not retrieve
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr2,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x64,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // exact match #2 -- should get it from the cache this time
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: true,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x86,
                     shouldBeRetrieved: true,
-                    shouldBeRetrievedFromCache: true
-                );
+                    shouldBeRetrievedFromCache: true);
         }
 
         /// <summary>
@@ -607,25 +581,21 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()
             taskParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.x86);
             taskParameters.Add("Foo", "Bar");
 
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     true /* exact match */,
                     taskParameters,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // However, it should still match itself -- so if we try again, we should get the "no match"
             // back from the cache this time.
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     true /* exact match */,
                     taskParameters,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: true
-                );
+                    shouldBeRetrievedFromCache: true);
         }
 
         [Theory]
@@ -651,8 +621,7 @@ public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, st
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // no parameters
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
@@ -660,12 +629,10 @@ public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, st
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: expectedArch
-                );
+                    expectedArchitecture: expectedArch);
 
             // no parameters, fuzzy match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
@@ -673,8 +640,7 @@ public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, st
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: expectedArch
-                );
+                    expectedArchitecture: expectedArch);
         }
 
         [Fact]
@@ -738,8 +704,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // no parameters
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
@@ -747,12 +712,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that are a successful exact match - should retrieve from cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -760,12 +723,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that would be a successful fuzzy match - should still be retrieved from the cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -773,23 +734,19 @@ public void RetrieveFromCacheFuzzyMatchingParameters()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that do not match -- but would match the previous fuzzy match request. Should NOT retrieve anything
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x64,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // and another fuzzy match -- should still be pulling from the cache.
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.any,
@@ -797,8 +754,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
         }
 
         /// <summary>
@@ -821,8 +777,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_RecoverFromFailure()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // no parameters - should retrieve the record
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
@@ -830,23 +785,19 @@ public void RetrieveFromCacheFuzzyMatchingParameters_RecoverFromFailure()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that do not match at all - shouldn't retrieve anything
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr2,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x86,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // parameters that are a successful match - should retrieve from the cache this time
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -854,8 +805,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_RecoverFromFailure()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
         }
 
         /// <summary>
@@ -884,8 +834,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // no parameters -- gets the first one (CLR4|x86)
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: null,
@@ -893,12 +842,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that are a successful exact match for CLR4|x86 -- should come from cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -906,12 +853,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that would be a successful fuzzy match for either, so should get the one in the cache (CLR4|x86)
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -919,12 +864,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // parameters that match *|x64 - should retrieve that
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -932,12 +875,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64);
 
             // match CLR4|x86 again - comes from the cache
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.any,
@@ -945,12 +886,10 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // match *|x64 again
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr2,
@@ -958,23 +897,19 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64);
 
             // CLR2|x86 should not match either task record
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr2,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x86,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // match *|x64 again -- should still be a cache hit
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr2,
@@ -982,8 +917,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64);
         }
 
         /// <summary>
@@ -1014,8 +948,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks_PreferCa
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // CLR4|x64 -- should be fulfilled by *|x64
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -1023,13 +956,11 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks_PreferCa
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64);
 
             // CLR4|* -- could be filled by either, would normally be filled by CLR4|x86 (since it was registered first),
             // but since *|x64 is in the cache already, we return that one.
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -1037,8 +968,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_MultipleUsingTasks_PreferCa
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64);
         }
 
         /// <summary>
@@ -1061,8 +991,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters_ExactMatches()
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
 
             // CLR4|* should match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -1070,23 +999,19 @@ public void RetrieveFromCacheFuzzyMatchingParameters_ExactMatches()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // CLR4|x64 should not match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x64,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: false
-                );
+                    shouldBeRetrievedFromCache: false);
 
             // try CLR4|* again -- should resolve correctly from the cache.
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
@@ -1094,19 +1019,16 @@ public void RetrieveFromCacheFuzzyMatchingParameters_ExactMatches()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // try CLR4|x64 again -- should also come from the catch (but needless to say, still not be a match)
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     exactMatchRequired: false,
                     runtime: XMakeAttributes.MSBuildRuntimeValues.clr4,
                     architecture: XMakeAttributes.MSBuildArchitectureValues.x64,
                     shouldBeRetrieved: false,
-                    shouldBeRetrievedFromCache: true
-                );
+                    shouldBeRetrievedFromCache: true);
         }
 
         /// <summary>
@@ -1136,28 +1058,24 @@ public void RetrieveFromCacheFuzzyMatchingParameters_AdditionalParameters()
             taskParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.x86);
             taskParameters.Add("Foo", "Bar");
 
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     false /* fuzzy match */,
                     taskParameters,
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             // And if we try again, we should get it from the cache this time.
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     false /* fuzzy match */,
                     taskParameters,
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
 
             taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             taskParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.clr4);
@@ -1167,16 +1085,14 @@ public void RetrieveFromCacheFuzzyMatchingParameters_AdditionalParameters()
             // Even with a different value to the additional parameter, because it's a fuzzy equals and because all
             // our equivalence check looks for is runtime and architecture, it still successfully retrieves the
             // existing record from the cache.
-            RetrieveAndValidateRegisteredTaskRecord
-                (
+            RetrieveAndValidateRegisteredTaskRecord(
                     registry,
                     false /* fuzzy match */,
                     taskParameters,
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: true,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86);
         }
 
         #endregion
@@ -1464,8 +1380,7 @@ public void RandomTypeOnParameter()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the following types work when registered as input parameters
@@ -1508,8 +1423,7 @@ public void BadArrayInputOnInputParameter()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that value types and (string and ITaskItem classes) can be registered as input parameters
@@ -1555,8 +1469,7 @@ public void BadScalarInputOnInputParameterDerivedFromITask()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify when a random scalar input class is attempted to be registered that we get an invalid project file exceptions.
@@ -1574,8 +1487,7 @@ public void BadScalarInputOnInputParameter()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the expected output parameters are supported
@@ -1646,8 +1558,7 @@ public void BadOutputParameter()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify when the output parameter is not set that it defaults to false
@@ -1694,8 +1605,7 @@ public void RandomOutput()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify an empty required value results in a default value of false
@@ -1742,8 +1652,7 @@ public void RandomRequired()
                 List<ProjectUsingTaskElement> elementList = CreateParameterElementWithAttributes(output, required, type);
                 CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that expansion of the attributes works.
@@ -1900,8 +1809,7 @@ public void RandomEvaluate()
                 List<ProjectUsingTaskElement> elementList = CreateTaskBodyElementWithAttributes(evaluate, "");
                 CreateTaskRegistryAndRegisterTasks(elementList);
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify when false is passed to evaluate value results in a false value being set
@@ -1984,17 +1892,16 @@ public static IEnumerable<object[]> TaskRegistryTranslationTestData
                     new PropertyDictionary<ProjectPropertyInstance>(toolsetGlobalProperties),
                     new Dictionary<string, SubToolset>
                     {
-                        {"1.0", new SubToolset("1.0", new PropertyDictionary<ProjectPropertyInstance>(subToolsetProperties))},
-                        {"2.0", new SubToolset("2.0", new PropertyDictionary<ProjectPropertyInstance>(subToolsetProperties))}
+                        {"1.0", new SubToolset("1.0", new PropertyDictionary<ProjectPropertyInstance>(subToolsetProperties)) },
+                        {"2.0", new SubToolset("2.0", new PropertyDictionary<ProjectPropertyInstance>(subToolsetProperties)) }
                     },
                     "motp",
                     "dotv",
                     new Dictionary<string, ProjectImportPathMatch>
                     {
-                        {"a", new ProjectImportPathMatch("a", new List<string> {"b", "c"})},
-                        {"d", new ProjectImportPathMatch("d", new List<string> {"e", "f"})}
-                    }
-                );
+                        {"a", new ProjectImportPathMatch("a", new List<string> {"b", "c"}) },
+                        {"d", new ProjectImportPathMatch("d", new List<string> {"e", "f"}) }
+                    });
 
                 ProjectRootElement project = ProjectRootElement.Create();
 
@@ -2090,16 +1997,14 @@ public void TaskRegistryCanSerializeViaTranslator(List<ProjectUsingTaskElement>
         /// - that the record that was retrieved had the expected runtime and architecture
         ///   values as its factory parameters.
         /// </summary>
-        private void RetrieveAndValidateRegisteredTaskRecord
-                                                        (
+        private void RetrieveAndValidateRegisteredTaskRecord(
                                                             TaskRegistry registry,
                                                             bool exactMatchRequired,
                                                             Dictionary<string, string> taskParameters,
                                                             bool shouldBeRetrieved,
                                                             bool shouldBeRetrievedFromCache,
                                                             string expectedRuntime,
-                                                            string expectedArchitecture
-                                                        )
+                                                            string expectedArchitecture)
         {
             bool retrievedFromCache;
             var record = registry.GetTaskRegistrationRecord(TestTaskName, null, taskParameters, exactMatchRequired, _targetLoggingContext, _elementLocation, out retrievedFromCache);
@@ -2134,8 +2039,7 @@ string expectedArchitecture
         /// - that the record that was retrieved had the expected runtime and architecture
         ///   values as its factory parameters.
         /// </summary>
-        private void RetrieveAndValidateRegisteredTaskRecord
-                                                        (
+        private void RetrieveAndValidateRegisteredTaskRecord(
                                                             TaskRegistry registry,
                                                             bool exactMatchRequired,
                                                             string runtime,
@@ -2143,8 +2047,7 @@ private void RetrieveAndValidateRegisteredTaskRecord
                                                             bool shouldBeRetrieved,
                                                             bool shouldBeRetrievedFromCache,
                                                             string expectedRuntime,
-                                                            string expectedArchitecture
-                                                        )
+                                                            string expectedArchitecture)
         {
             Dictionary<string, string> parameters = null;
             if (runtime != null || architecture != null)
@@ -2281,8 +2184,7 @@ internal TaskRegistry CreateTaskRegistryAndRegisterTasks(List<ProjectUsingTaskEl
 
             foreach (ProjectUsingTaskElement projectUsingTaskElement in usingTaskElements)
             {
-                TaskRegistry.RegisterTasksFromUsingTaskElement
-                    (
+                TaskRegistry.RegisterTasksFromUsingTaskElement(
                         _loggingService,
                         _loggerContext,
                         Directory.GetCurrentDirectory(),
@@ -2290,8 +2192,7 @@ internal TaskRegistry CreateTaskRegistryAndRegisterTasks(List<ProjectUsingTaskEl
                         registry,
                         RegistryExpander,
                         ExpanderOptions.ExpandPropertiesAndItems,
-                        FileSystems.Default
-                    );
+                        FileSystems.Default);
             }
 
             return registry;
diff --git a/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs b/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
index 98458c643a6..ad93f8b0b5a 100644
--- a/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
+++ b/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
@@ -83,8 +83,7 @@ public void InvalidValue2()
             Assert.Throws<InternalErrorException>(() =>
             {
                 MSBuildNameIgnoreCaseComparer.Default.Equals("x", "y", -1, 0);
-            }
-           );
+            });
         }
         /// <summary>
         /// Invalid small end 
@@ -95,8 +94,7 @@ public void InvalidValue4()
             Assert.Throws<InternalErrorException>(() =>
             {
                 MSBuildNameIgnoreCaseComparer.Default.Equals("x", "y", 0, -1);
-            }
-           );
+            });
         }
         /// <summary>
         /// Invalid large end 
@@ -107,8 +105,7 @@ public void InvalidValue5()
             Assert.Throws<InternalErrorException>(() =>
             {
                 MSBuildNameIgnoreCaseComparer.Default.Equals("x", "y", 0, 2);
-            }
-           );
+            });
         }
         /// <summary>
         /// End past the end of other string
diff --git a/src/Build.UnitTests/Collections/OMcollections_tests.cs b/src/Build.UnitTests/Collections/OMcollections_tests.cs
index 8188b0f70c7..aedaa4f85b9 100644
--- a/src/Build.UnitTests/Collections/OMcollections_tests.cs
+++ b/src/Build.UnitTests/Collections/OMcollections_tests.cs
@@ -241,8 +241,7 @@ public void ReadOnlyCollectionNullBacking()
             Assert.Throws<InternalErrorException>(() =>
             {
                 new ReadOnlyCollection<string>(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify non generic enumeration does not recurse
diff --git a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
index 005054134ad..bacd916612b 100644
--- a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
@@ -212,8 +212,7 @@ public void ConstructorWithNegativeIndicesTest1()
             Assert.Throws<InternalErrorException>(() =>
             {
                 ElementLocation.Create("file", -1, 2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests constructor specifying file, line, negative column
@@ -224,8 +223,7 @@ public void ConstructorWithNegativeIndicesTest2n()
             Assert.Throws<InternalErrorException>(() =>
             {
                 ElementLocation.Create("file", 1, -2);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests constructor with invalid null file.
@@ -355,8 +353,7 @@ public void SaveReadOnly1()
                 doc.Load(_pathToCommonTargets);
                 Assert.True(doc.IsReadOnly);
                 doc.Save(FileUtilities.GetTemporaryFile());
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index fa3cc3947a8..ca11a511764 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -35,11 +35,9 @@ public void BasicParseFirstProjectLine()
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
 
-            p.ParseFirstProjectLine
-            (
+            p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\") = \"Project name\", \"Relative path to project file\", \"Unique name-GUID\"",
-                 proj
-            );
+                 proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("Project name");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -62,11 +60,9 @@ public void ParseFirstProjectLine_VC()
                 p.FullPath = "c:\\foo.sln";
                 ProjectInSolution proj = new ProjectInSolution(p);
 
-                p.ParseFirstProjectLine
-                (
+                p.ParseFirstProjectLine(
                     "Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"Project name.vcproj\", \"Relative path\\to\\Project name.vcproj\", \"Unique name-GUID\"",
-                     proj
-                );
+                     proj);
             });
         }
         /// <summary>
@@ -81,11 +77,9 @@ public void ParseFirstProjectLine_VC2()
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
 
-            p.ParseFirstProjectLine
-            (
+            p.ParseFirstProjectLine(
                 "Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"Project name.myvctype\", \"Relative path\\to\\Project name.myvctype\", \"Unique name-GUID\"",
-                 proj
-            );
+                 proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.KnownToBeMSBuildFormat);
             proj.ProjectName.ShouldBe("Project name.myvctype");
             proj.RelativePath.ShouldBe("Relative path\\to\\Project name.myvctype");
@@ -102,11 +96,9 @@ public void ParseFirstProjectLineWithDifferentSpacing()
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
 
-            p.ParseFirstProjectLine
-            (
+            p.ParseFirstProjectLine(
                 "Project(\" {Project GUID} \")  = \" Project name \",  \" Relative path to project file \"    , \" Unique name-GUID \"",
-                 proj
-            );
+                 proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("Project name");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -124,11 +116,9 @@ public void ParseFirstProjectLine_InvalidProject()
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
 
-            p.ParseFirstProjectLine
-            (
+            p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\") = \"\", \"src\\.proj\", \"Unique name-GUID\"",
-                 proj
-            );
+                 proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldStartWith("EmptyProjectName");
             proj.RelativePath.ShouldBe("src\\.proj");
@@ -690,11 +680,9 @@ public void ParseFirstProjectLineWhereProjectNameHasSpecialCharacters()
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
 
-            p.ParseFirstProjectLine
-            (
+            p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\")  = \"MyProject,(=IsGreat)\",  \"Relative path to project file\"    , \"Unique name-GUID\"",
-                 proj
-            );
+                 proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("MyProject,(=IsGreat)");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -718,11 +706,9 @@ public void ParseFirstProjectLineWhereProjectPathHasBackslash()
                 p.SolutionFileDirectory = Path.GetFullPath(solutionFolder.Path);
                 ProjectInSolution proj = new ProjectInSolution(p);
 
-                p.ParseFirstProjectLine
-                (
+                p.ParseFirstProjectLine(
                     "Project(\"{Project GUID}\")  = \"ProjectInSubdirectory\",  \"RelativePath\\project file\"    , \"Unique name-GUID\"",
-                    proj
-                );
+                    proj);
                 proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
                 proj.ProjectName.ShouldBe("ProjectInSubdirectory");
                 proj.RelativePath.ShouldBe(Path.Combine("RelativePath", "project file"));
@@ -783,8 +769,7 @@ public void VersionTooLow()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Ensure that an unsupported version greater than the current maximum (10) in the .SLN file results in a
@@ -1736,8 +1721,7 @@ public void ParseInvalidSolutionConfigurations1()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test some invalid cases for solution configuration parsing
@@ -1763,8 +1747,7 @@ public void ParseInvalidSolutionConfigurations2()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test some invalid cases for solution configuration parsing
@@ -1790,8 +1773,7 @@ public void ParseInvalidSolutionConfigurations3()
                 ";
 
                 ParseSolutionHelper(solutionFileContents);
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 76cd7c95152..6a92569a532 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -765,8 +765,7 @@ public void SolutionWithMissingDependencies()
 
                 SolutionFile sp = SolutionFile_Tests.ParseSolutionHelper(solutionFileContents);
                 ProjectInstance[] instances = SolutionProjectGenerator.Generate(sp, null, null, _buildEventContext, CreateMockLoggingService());
-            }
-           );
+            });
         }
         /// <summary>
         /// Blob should contain dependency info
@@ -1504,46 +1503,38 @@ public void TestDisambiguateProjectTargetName()
             ProjectTargetInstance publishTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Publish", StringComparison.OrdinalIgnoreCase)).First().Value;
 
             // Check that the appropriate target is being passed to the child projects
-            Assert.Null(buildTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Targets"));
-
-            Assert.Equal("Clean", cleanTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Targets"));
-
-            Assert.Equal("Rebuild", rebuildTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Targets"));
-
-            Assert.Equal("Publish", publishTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Targets"));
+            Assert.Null(buildTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Targets"));
+
+            Assert.Equal("Clean", cleanTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Targets"));
+
+            Assert.Equal("Rebuild", rebuildTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Targets"));
+
+            Assert.Equal("Publish", publishTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Targets"));
 
             // Check that the child projects in question are the members of the "ProjectReference" item group
-            Assert.Equal("@(ProjectReference)", buildTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Projects"));
-
-            Assert.Equal("@(ProjectReference->Reverse())", cleanTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Projects"));
-
-            Assert.Equal("@(ProjectReference)", rebuildTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Projects"));
-
-            Assert.Equal("@(ProjectReference)", publishTarget.Tasks.Where
-                (
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase)
-                ).First().GetParameter("Projects"));
+            Assert.Equal("@(ProjectReference)", buildTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Projects"));
+
+            Assert.Equal("@(ProjectReference->Reverse())", cleanTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Projects"));
+
+            Assert.Equal("@(ProjectReference)", rebuildTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Projects"));
+
+            Assert.Equal("@(ProjectReference)", publishTarget.Tasks.Where(
+                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                .First().GetParameter("Projects"));
 
             // We should have only the four standard targets plus the two validation targets (ValidateSolutionConfiguration and ValidateToolsVersions).
         }
@@ -2280,8 +2271,8 @@ public void TestTargetFrameworkVersionGreaterThan4()
         [Fact]
         public void CustomTargetNamesAreInInMetaproj()
         {
-            SolutionFile solution = SolutionFile_Tests.ParseSolutionHelper
-            (@"
+            SolutionFile solution = SolutionFile_Tests.ParseSolutionHelper(
+            @"
                 Microsoft Visual Studio Solution File, Format Version 14.00
                 # Visual Studio 2015
                 Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""ClassLibrary1"", ""ClassLibrary1.csproj"", ""{6185CC21-BE89-448A-B3C0-D1C27112E595}""
@@ -2330,8 +2321,8 @@ public void CustomTargetNamesAreInInMetaproj()
         [InlineData(true)]
         public void IllegalUserTargetNamesDoNotThrow(bool forceCaseDifference)
         {
-            SolutionFile solution = SolutionFile_Tests.ParseSolutionHelper
-            (@"
+            SolutionFile solution = SolutionFile_Tests.ParseSolutionHelper(
+            @"
                 Microsoft Visual Studio Solution File, Format Version 14.00
                 # Visual Studio 2015
                 Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""ClassLibrary1"", ""ClassLibrary1.csproj"", ""{6185CC21-BE89-448A-B3C0-D1C27112E595}""
diff --git a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
index 703e0a5b7ee..c96551a8cdc 100644
--- a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
@@ -155,12 +155,10 @@ public override string Value
         [Fact]
         public void CreateProjectWithoutLineInfo()
         {
-            XmlReader reader = XmlReader.Create(new StringReader
-                (
+            XmlReader reader = XmlReader.Create(new StringReader(
                 @"<Project>
                       <Target Name='foo'/>
-                  </Project>"
-                ));
+                  </Project>"));
             XmlReader noLineInfoReader = new XmlReaderNoIXmlLineInfo(reader);
             Project project = new Project(noLineInfoReader);
             Assert.Single(project.Targets);
diff --git a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
index 3d766374a9e..3a412f0dcdd 100644
--- a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
+++ b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
@@ -178,8 +178,7 @@ public void ItemDefinitionDoesntAllowItemExpansion()
                     </ItemDefinitionGroup>
 	                <Target Name='Build' />
 	            </Project>")));
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests that item definition metadata doesn't allow item expansion for the conditional.
@@ -207,8 +206,7 @@ public void ItemDefinitionMetadataConditionDoesntAllowItemExpansion()
                     </ItemDefinitionGroup>
 	                <Target Name='Build' />
 	            </Project>")));
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests that item definition metadata doesn't allow item expansion for the value.
@@ -236,8 +234,7 @@ public void ItemDefinitionMetadataDoesntAllowItemExpansion()
                     </ItemDefinitionGroup>
 	                <Target Name='Build' />
 	            </Project>")));
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests that item metadata which contains a metadata expansion referring to an item type other
@@ -804,8 +801,7 @@ public void ItemExpressionInDefaultMetadataValueErrors()
                 </Project>
             ")));
                 p.Build("t", new ILogger[] { logger });
-            }
-           );
+            });
         }
         [Fact]
         public void UnqualifiedMetadataConditionOnItemDefinitionGroupErrors()
@@ -820,8 +816,7 @@ public void UnqualifiedMetadataConditionOnItemDefinitionGroupErrors()
                 </Project>
             ")));
                 p.Build("t", new ILogger[] { logger });
-            }
-           );
+            });
         }
 
         [Fact]
@@ -837,8 +832,7 @@ public void QualifiedMetadataConditionOnItemDefinitionGroupErrors()
                 </Project>
             ")));
                 p.Build("t", new ILogger[] { logger });
-            }
-           );
+            });
         }
         [Fact]
         public void MetadataConditionOnItemDefinition()
@@ -1045,8 +1039,7 @@ public void ItemDefinitionInTargetErrors()
                 </Project>
             ")));
                 bool result = p.Build("t", new ILogger[] { logger });
-            }
-           );
+            });
         }
 
 #if FEATURE_ASSEMBLY_LOCATION
diff --git a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
index 30b078d407a..2973b251269 100644
--- a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
@@ -34,8 +34,8 @@ public ProjectEvaluationContext_Tests()
             _resolver = new SdkUtilities.ConfigurableMockSdkResolver(
                 new Dictionary<string, SdkResult>
                 {
-                    {"foo", new SdkResult(new SdkReference("foo", "1.0.0", null), "path", "1.0.0", null)},
-                    {"bar", new SdkResult(new SdkReference("bar", "1.0.0", null), "path", "1.0.0", null)}
+                    {"foo", new SdkResult(new SdkReference("foo", "1.0.0", null), "path", "1.0.0", null) },
+                    {"bar", new SdkResult(new SdkReference("bar", "1.0.0", null), "path", "1.0.0", null) }
                 });
         }
 
@@ -109,8 +109,7 @@ public void PassedInFileSystemShouldBeReusedInSharedContext()
                     {
                         ProjectCollection = projectCollection,
                         EvaluationContext = evaluationContext
-                    }
-                );
+                    });
             }
 
             fileSystem.ExistenceChecks.OrderBy(kvp => kvp.Key)
@@ -145,8 +144,7 @@ public void EvaluationShouldUseDirectoryCache()
                 {
                     ProjectCollection = projectCollection,
                     DirectoryCacheFactory = directoryCacheFactory,
-                }
-            );
+                });
 
             directoryCacheFactory.DirectoryCaches.Count.ShouldBe(1);
             var directoryCache = directoryCacheFactory.DirectoryCaches[0];
@@ -359,8 +357,7 @@ public void ContextCachesItemElementGlobExpansions(EvaluationContext.SharingPoli
                     File.WriteAllText(Path.Combine(projectDirectory, $"{evaluationCount}.cs"), "");
 
                     ObjectModelHelpers.AssertItems(expectedGlobExpansion, project.GetItems("i"));
-                }
-                );
+                });
         }
 
         public static IEnumerable<object[]> ContextDisambiguatesRelativeGlobsData
@@ -440,8 +437,7 @@ public void ContextDisambiguatesSameRelativeGlobsPointingInsideDifferentProjectC
 
                     File.WriteAllText(Path.Combine(projectDirectory1, $"1.{evaluationCount}.cs"), "");
                     File.WriteAllText(Path.Combine(projectDirectory2, $"2.{evaluationCount}.cs"), "");
-                }
-                );
+                });
         }
 
         [Theory]
@@ -498,8 +494,7 @@ public void ContextDisambiguatesSameRelativeGlobsPointingOutsideDifferentProject
 
                     File.WriteAllText(Path.Combine(project1GlobDirectory, $"1.{evaluationCount}.cs"), "");
                     File.WriteAllText(Path.Combine(project2GlobDirectory, $"2.{evaluationCount}.cs"), "");
-                }
-                );
+                });
         }
 
         [Theory]
@@ -569,8 +564,7 @@ public void ContextDisambiguatesAFullyQualifiedGlobPointingInAnotherRelativeGlob
                     evaluationCount++;
 
                     File.WriteAllText(Path.Combine(project1GlobDirectory, $"{evaluationCount}.cs"), "");
-                }
-                );
+                });
         }
 
         [Theory]
@@ -630,8 +624,7 @@ public void ContextDisambiguatesDistinctRelativeGlobsPointingOutsideOfSameProjec
                     evaluationCount++;
 
                     File.WriteAllText(Path.Combine(globDirectory.Path, $"{evaluationCount}.cs"), "");
-                }
-                );
+                });
         }
 
         [Theory]
@@ -703,8 +696,7 @@ private void ContextCachesCommonOutOfProjectCone(bool itemSpecPathIsRelative, Ev
                     File.WriteAllText(Path.Combine(globDirectory.Path, $"{evaluationCount}.cs"), "");
 
                     ObjectModelHelpers.AssertItems(expectedGlobExpansion, project.GetItems("i"));
-                }
-                );
+                });
         }
 
         private static string[] _projectsWithGlobImports =
@@ -741,8 +733,7 @@ public void ContextCachesImportGlobExpansions(EvaluationContext.SharingPolicy po
                     File.WriteAllText(Path.Combine(projectDirectory, $"{evaluationCount}.props"), $"<Project><ItemGroup><i Include=`{evaluationCount}.cs`/></ItemGroup></Project>".Cleanup());
 
                     ObjectModelHelpers.AssertItems(expectedGlobExpansion, project.GetItems("i"));
-                }
-                );
+                });
         }
 
         private static string[] _projectsWithConditions =
@@ -804,8 +795,7 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
                                 throw new ArgumentOutOfRangeException(nameof(policy), policy, null);
                         }
                     }
-                }
-                );
+                });
         }
 
         [Theory]
diff --git a/src/Build.UnitTests/Definition/ProjectHelpers.cs b/src/Build.UnitTests/Definition/ProjectHelpers.cs
index de7960e5361..c8b12b91f7c 100644
--- a/src/Build.UnitTests/Definition/ProjectHelpers.cs
+++ b/src/Build.UnitTests/Definition/ProjectHelpers.cs
@@ -21,12 +21,10 @@ internal static class ProjectHelpers
         /// <returns>A project instance.</returns>
         internal static ProjectInstance CreateEmptyProjectInstance()
         {
-            XmlReader reader = XmlReader.Create(new StringReader
-                (
+            XmlReader reader = XmlReader.Create(new StringReader(
                 @"<Project>
                       <Target Name='foo'/>
-                  </Project>"
-                ));
+                  </Project>"));
 
             Project project = new Project(reader);
             ProjectInstance instance = project.CreateProjectInstance();
diff --git a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
index 6410e2474d2..92bf188e758 100644
--- a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
@@ -46,8 +46,7 @@ public void CopyFromClonesMetadata()
         /// </summary>
         private static IList<ProjectItem> GetItemsFromFragment(string fragment)
         {
-            string content = String.Format
-                (
+            string content = String.Format(
                 ObjectModelHelpers.CleanupFileContents(@"
                     <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                         <ItemGroup>
@@ -55,8 +54,7 @@ private static IList<ProjectItem> GetItemsFromFragment(string fragment)
                         </ItemGroup>
                     </Project>
                 "),
-                 fragment
-                 );
+                 fragment);
 
             IList<ProjectItem> items = GetItems(content);
             return items;
diff --git a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
index 9d292500a86..e11534b8dd6 100644
--- a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
@@ -393,8 +393,7 @@ public void InvalidToolsVersion()
                    </Project>")), null /* no global properties */, "goober", p);
                 success = project.Build(mockLogger);
                 // BANG!
-            }
-           );
+            });
         }
         /// <summary>
         /// Even a valid toolsversion should be forced to the current ToolsVersion if MSBUILDTREATALLTOOLSVERSIONSASCURRENT
diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
index a4c90de1768..f251ca8291c 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
@@ -221,8 +221,7 @@ public void ToolsVersionTest_NameNotSpecified()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         /// <summary>
         ///  More than 1 toolset element with the same name
@@ -250,8 +249,7 @@ public void ToolsVersionTest_MultipleElementsWithSameName()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         /// <summary>
         /// empty toolset element 
@@ -278,8 +276,7 @@ public void ToolsVersionTest_EmptyElement()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         #endregion
 
@@ -346,8 +343,7 @@ public void PropertyTest_NameNotSpecified()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         /// <summary>
         /// value attribute is missing
@@ -372,8 +368,7 @@ public void PropertyTest_ValueNotSpecified()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         /// <summary>
         /// more than 1 property element with the same name
@@ -399,8 +394,7 @@ public void PropertyTest_MultipleElementsWithSameName()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         /// <summary>
         ///  property element is an empty element
@@ -427,8 +421,7 @@ public void PropertyTest_EmptyElement()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
         #endregion
 
@@ -636,8 +629,7 @@ public void ExtensionsPathsTest_MultipleElementsWithSameOS()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -670,8 +662,7 @@ public void ExtensionsPathsTest_MultipleElementsWithSamePropertyNameForSameOS()
                 Configuration config = ToolsetConfigurationReaderTestHelper.ReadApplicationConfigurationTest();
 
                 config.GetSection(s_msbuildToolsets);
-            }
-           );
+            });
         }
 
         private ToolsetConfigurationReader GetStandardConfigurationReader()
diff --git a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
index 2e9660b6e3e..2363002c16f 100644
--- a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
@@ -267,8 +267,7 @@ public void GetToolsetDataFromConfiguration_InvalidXmlFile()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case where application configuration file is invalid
@@ -297,8 +296,7 @@ public void GetToolsetDataFromConfiguration_InvalidConfigFile()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case where application configuration file is empty
@@ -317,8 +315,7 @@ public void GetToolsetDataFromConfiguration_FileEmpty()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case when ReadConfiguration throws exception
@@ -339,8 +336,7 @@ public void GetToolsetDataFromConfiguration_ConfigurationExceptionThrown()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case when ReadConfiguration throws exception
@@ -361,8 +357,7 @@ public void GetToolsetDataFromConfiguration_ConfigurationErrorsExceptionThrown()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case where default attribute is not specified in the config file
@@ -570,8 +565,7 @@ public void GetToolsetDataFromConfiguration_ToolsVersionIsEmptyString()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// If both MSBuildToolsPath and MSBuildBinPath are present, they must match
@@ -601,8 +595,7 @@ public void GetToolsetDataFromConfiguration_ToolsPathAndBinPathDiffer()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests the case when a blank value of PropertyName is specified in the config file
@@ -633,8 +626,7 @@ public void BlankPropertyNameInConfigFile()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
 #endif
 
@@ -654,8 +646,7 @@ public void BlankPropertyNameInRegistry()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // Should throw ...
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -663,10 +654,8 @@ public void BlankPropertyNameInRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                          );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
         /// <summary>
         /// Tests the case when a blank property name is specified in the registry in a
@@ -689,8 +678,7 @@ public void BlankPropertyNameInRegistrySubToolset()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // Should throw ...
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -698,10 +686,8 @@ public void BlankPropertyNameInRegistrySubToolset()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                                globalProperties,
-                                                               ToolsetDefinitionLocations.Registry
-                                                          );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
 #endif
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -749,8 +735,7 @@ public void BlankPropertyValueInRegistry()
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
             // Should not throw ...
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -758,8 +743,7 @@ public void BlankPropertyValueInRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Registry
-                                                       );
+                                                           ToolsetDefinitionLocations.Registry);
         }
 
         /// <summary>
@@ -778,8 +762,7 @@ public void BlankPropertyValueInRegistrySubToolset()
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
             // Should not throw ...
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -787,8 +770,7 @@ public void BlankPropertyValueInRegistrySubToolset()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Registry
-                                                       );
+                                                           ToolsetDefinitionLocations.Registry);
 
             Assert.Equal("2.0", defaultToolsVersion);
             Assert.Empty(values["2.0"].Properties);
@@ -827,8 +809,7 @@ public void InvalidPropertyNameInConfigFile()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
 #endif
 
@@ -847,8 +828,7 @@ public void InvalidPropertyNameInRegistry()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // Should throw ...
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -856,10 +836,8 @@ public void InvalidPropertyNameInRegistry()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
         /// <summary>
         /// Tests the case when an invalid value of PropertyName is specified in the registry
@@ -878,8 +856,7 @@ public void InvalidPropertyNameInRegistrySubToolset()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // Should throw ...
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -887,10 +864,8 @@ public void InvalidPropertyNameInRegistrySubToolset()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
 
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1034,8 +1009,7 @@ public void GetToolsetData_NoConflict()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1043,8 +1017,7 @@ public void GetToolsetData_NoConflict()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             // Verifications
             Assert.Equal(4, values.Count);
@@ -1087,8 +1060,7 @@ public void ToolsetInitializationFlagsSetToNone()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1096,8 +1068,7 @@ public void ToolsetInitializationFlagsSetToNone()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.None
-                                                       );
+                                                           ToolsetDefinitionLocations.None);
 
             // Verifications
             Assert.Single(values);
@@ -1144,8 +1115,7 @@ public void ToolsetInitializationFlagsSetToRegistry()
 #endif
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1153,8 +1123,7 @@ public void ToolsetInitializationFlagsSetToRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Registry
-                                                       );
+                                                           ToolsetDefinitionLocations.Registry);
 
             // Verifications
             Assert.Equal(2, values.Count);
@@ -1177,8 +1146,7 @@ public void ThrowOnNonStringRegistryValueTypes()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // Should throw ...
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1186,10 +1154,8 @@ public void ThrowOnNonStringRegistryValueTypes()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
         [Fact]
         public void PropertiesInRegistryCannotReferToOtherPropertiesInRegistry()
@@ -1204,8 +1170,7 @@ public void PropertiesInRegistryCannotReferToOtherPropertiesInRegistry()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1213,8 +1178,7 @@ public void PropertiesInRegistryCannotReferToOtherPropertiesInRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Registry
-                                                       );
+                                                           ToolsetDefinitionLocations.Registry);
 
             Assert.Equal("", values["2.0"].Properties["p0"].EvaluatedValue);
             Assert.Equal("v", values["2.0"].Properties["p1"].EvaluatedValue);
@@ -1236,8 +1200,7 @@ public void SubToolsetPropertiesInRegistryCannotReferToOtherPropertiesInRegistry
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1245,8 +1208,7 @@ public void SubToolsetPropertiesInRegistryCannotReferToOtherPropertiesInRegistry
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Registry
-                                                       );
+                                                           ToolsetDefinitionLocations.Registry);
 
             Assert.Equal("", values["2.0"].Properties["p0"].EvaluatedValue);
             Assert.Equal("v", values["2.0"].Properties["p1"].EvaluatedValue);
@@ -1270,8 +1232,7 @@ public void SubToolsetsCannotDefineMSBuildToolsPath()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // throws
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1279,10 +1240,8 @@ public void SubToolsetsCannotDefineMSBuildToolsPath()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
         /// <summary>
         /// Tests that ToolsetInitialization are respected.
@@ -1319,8 +1278,7 @@ public void ToolsetInitializationFlagsSetToConfigurationFile()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1328,8 +1286,7 @@ public void ToolsetInitializationFlagsSetToConfigurationFile()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.ConfigurationFile
-                                                       );
+                                                           ToolsetDefinitionLocations.ConfigurationFile);
 
             // Verifications
             Assert.Equal(2, values.Count);
@@ -1377,8 +1334,7 @@ public void PropertyInConfigurationFileReferencesRegistryLocation()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1386,8 +1342,7 @@ public void PropertyInConfigurationFileReferencesRegistryLocation()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Single(values);
             Assert.Equal(@"D:\somePathToTasks", values["2.0"].ToolsPath);
@@ -1410,8 +1365,7 @@ public void ToolsPathInRegistryHasInvalidPathChars()
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
                 // should throw...
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1419,10 +1373,8 @@ public void ToolsPathInRegistryHasInvalidPathChars()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
 
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1448,17 +1400,14 @@ public void SamePropertyDefinedMultipleTimesForSingleToolsVersionInConfiguration
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                null,
                                                                GetStandardConfigurationReader(),
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.ConfigurationFile
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.ConfigurationFile);
+            });
         }
 
         [Fact]
@@ -1483,17 +1432,14 @@ public void SamePropertyDifferentCaseDefinedMultipleTimesForSingleToolsVersionIn
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                null,
                                                                GetStandardConfigurationReader(),
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.ConfigurationFile
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.ConfigurationFile);
+            });
         }
 
 
@@ -1525,17 +1471,14 @@ public void SameToolsVersionDefinedMultipleTimesInConfigurationFile()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                null,
                                                                GetStandardConfigurationReader(),
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.ConfigurationFile
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.ConfigurationFile);
+            });
         }
 
         [Fact]
@@ -1566,17 +1509,14 @@ public void SameToolsVersionDifferentCaseDefinedMultipleTimesInConfigurationFile
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                null,
                                                                GetStandardConfigurationReader(),
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.ConfigurationFile
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.ConfigurationFile);
+            });
         }
 
         [Fact]
@@ -1599,17 +1539,14 @@ public void CannotSetReservedPropertyInConfigFile()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                null,
                                                                GetStandardConfigurationReader(),
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.ConfigurationFile
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.ConfigurationFile);
+            });
         }
 #endif
 
@@ -1625,8 +1562,7 @@ public void CannotSetReservedPropertyInRegistry()
 
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1634,10 +1570,8 @@ public void CannotSetReservedPropertyInRegistry()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
 
         [Fact]
@@ -1653,8 +1587,7 @@ public void CannotSetReservedPropertyInRegistrySubToolset()
                 subKey1.SetValue("MSBuildProjectFile", @"SomeRegistryValue");
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1662,10 +1595,8 @@ public void CannotSetReservedPropertyInRegistrySubToolset()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Registry
-                                                           );
-            }
-           );
+                                                               ToolsetDefinitionLocations.Registry);
+            });
         }
 
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1699,16 +1630,14 @@ public void NoInterferenceBetweenToolsetDefinitions()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            null,
                                                            GetStandardConfigurationReader(),
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
 
-                                                           ToolsetDefinitionLocations.ConfigurationFile
-                                                       );
+                                                           ToolsetDefinitionLocations.ConfigurationFile);
 
             Assert.Equal(2, values.Count);
 
@@ -1885,8 +1814,7 @@ private void RegistryValidRegistryExpressionHelper(string propertyExpression, st
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                       (
+            ToolsetReader.ReadAllToolsets(
                                            values,
                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1894,8 +1822,7 @@ private void RegistryValidRegistryExpressionHelper(string propertyExpression, st
 #endif
                                            new ProjectCollection().EnvironmentProperties,
                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                           ToolsetDefinitionLocations.Registry
-                                       );
+                                           ToolsetDefinitionLocations.Registry);
 
             Assert.Single(values);
             Assert.Equal(expectedValue, values["2.0"].Properties["p"].EvaluatedValue);
@@ -1946,8 +1873,7 @@ private void ConfigFileValidRegistryExpressionHelper(string propertyExpression,
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                       (
+            ToolsetReader.ReadAllToolsets(
                                            values,
                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1955,8 +1881,7 @@ private void ConfigFileValidRegistryExpressionHelper(string propertyExpression,
 #endif
                                            new ProjectCollection().EnvironmentProperties,
                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                           ToolsetDefinitionLocations.ConfigurationFile
-                                       );
+                                           ToolsetDefinitionLocations.ConfigurationFile);
 
             Assert.Single(values);
             Assert.Equal(expectedValue, values["2.0"].Properties["p"].EvaluatedValue);
@@ -1990,8 +1915,7 @@ public void GetToolsetData_ConflictingPropertyValuesSameCase()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -1999,8 +1923,7 @@ public void GetToolsetData_ConflictingPropertyValuesSameCase()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Single(values);
             Assert.Empty(values["2.0"].Properties);
@@ -2036,8 +1959,7 @@ public void GetToolsetData_ConflictingPropertyValuesRegistryThrows()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2045,8 +1967,7 @@ public void GetToolsetData_ConflictingPropertyValuesRegistryThrows()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Single(values);
             Assert.Empty(values["2.0"].Properties);
@@ -2086,8 +2007,7 @@ public void GetToolsetData_NoMerging()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2095,8 +2015,7 @@ public void GetToolsetData_NoMerging()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Single(values);
             Assert.Single(values["2.0"].Properties);
@@ -2171,8 +2090,7 @@ public void GetToolsetData_RegistryNotPresent()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2180,8 +2098,7 @@ public void GetToolsetData_RegistryNotPresent()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Single(values);
             Assert.Empty(values["2.0"].Properties);
@@ -2203,8 +2120,7 @@ public void GetToolsetData_ConfigFileNotPresent()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2212,8 +2128,7 @@ public void GetToolsetData_ConfigFileNotPresent()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Single(values);
             Assert.Empty(values["2.0"].Properties);
@@ -2228,8 +2143,7 @@ public void GetToolsetData_RegistryAndConfigNotPresent()
         {
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2237,8 +2151,7 @@ public void GetToolsetData_RegistryAndConfigNotPresent()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             // Should either be the last-ditch 2.0 toolset, or if 2.0 is not installed, then the last-last-ditch of 4.0
             Assert.Single(values);
@@ -2271,8 +2184,7 @@ public void GetToolsetData_ReadConfigThrowsException()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                           (
+                ToolsetReader.ReadAllToolsets(
                                values,
                                GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2280,10 +2192,8 @@ public void GetToolsetData_ReadConfigThrowsException()
 #endif
                                new ProjectCollection().EnvironmentProperties,
                                new PropertyDictionary<ProjectPropertyInstance>(),
-                               ToolsetDefinitionLocations.Default
-                           );
-            }
-           );
+                               ToolsetDefinitionLocations.Default);
+            });
         }
         /// <summary>
         /// Tests the case where reading from registry throws exception
@@ -2312,8 +2222,7 @@ public void GetToolsetData_ReadRegistryOpenSubKeyThrowsException()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                ToolsetReader.ReadAllToolsets
-                                                           (
+                ToolsetReader.ReadAllToolsets(
                                                                values,
                                                                new ToolsetRegistryReader(new ProjectCollection().EnvironmentProperties, new PropertyDictionary<ProjectPropertyInstance>(), mockRegistryKey),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2321,8 +2230,7 @@ public void GetToolsetData_ReadRegistryOpenSubKeyThrowsException()
 #endif
                                                                new ProjectCollection().EnvironmentProperties,
                                                                new PropertyDictionary<ProjectPropertyInstance>(),
-                                                               ToolsetDefinitionLocations.Default
-                                                           );
+                                                               ToolsetDefinitionLocations.Default);
             });
         }
 
@@ -2363,8 +2271,7 @@ public void SetDefaultToolsetVersion_SpecifiedInRegistryAndConfigFile()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2372,8 +2279,7 @@ public void SetDefaultToolsetVersion_SpecifiedInRegistryAndConfigFile()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("5.0", defaultToolsVersion);
         }
@@ -2408,8 +2314,7 @@ public void SetDefaultToolsetVersion_SpecifiedOnlyInRegistry()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2417,8 +2322,7 @@ public void SetDefaultToolsetVersion_SpecifiedOnlyInRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("4.0", defaultToolsVersion);
         }
@@ -2458,8 +2362,7 @@ public void SetOverrideTasks_SpecifiedOnlyInRegistry()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2467,8 +2370,7 @@ public void SetOverrideTasks_SpecifiedOnlyInRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("4.0", defaultToolsVersion);
             Assert.Equal(overridePath, values["4.0"].OverrideTasksPath);
@@ -2507,8 +2409,7 @@ public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInRegistry()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2516,8 +2417,7 @@ public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInRegistry()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("13.0", values["4.0"].DefaultOverrideToolsVersion);
         }
@@ -2547,8 +2447,7 @@ public void SetDefaultToolsetVersion_SpecifiedOnlyInConfigFile()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2556,8 +2455,7 @@ public void SetDefaultToolsetVersion_SpecifiedOnlyInConfigFile()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
 
             Assert.Equal("5.0", defaultToolsVersion);
@@ -2589,8 +2487,7 @@ public void SetOverrideTaskPath_SpecifiedOnlyInConfigFile()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2598,8 +2495,7 @@ public void SetOverrideTaskPath_SpecifiedOnlyInConfigFile()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
 
             Assert.Equal("5.0", defaultToolsVersion);
@@ -2631,8 +2527,7 @@ public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInConfigFile()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2640,8 +2535,7 @@ public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInConfigFile()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("5.0", defaultToolsVersion);
             Assert.Equal("3.0", values["4.0"].DefaultOverrideToolsVersion);
@@ -2673,8 +2567,7 @@ public void SetDefaultToolsetVersion_SpecifiedNowhere()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            string defaultToolsVersion = ToolsetReader.ReadAllToolsets
-                                                       (
+            string defaultToolsVersion = ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2682,8 +2575,7 @@ public void SetDefaultToolsetVersion_SpecifiedNowhere()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new PropertyDictionary<ProjectPropertyInstance>(),
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             string expectedDefault = "2.0";
             if (FrameworkLocationHelper.PathToDotNetFrameworkV20 == null)
@@ -2721,8 +2613,7 @@ public void PropertiesInToolsetsFromConfigFileAreExpanded()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2730,8 +2621,7 @@ public void PropertiesInToolsetsFromConfigFileAreExpanded()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new ProjectCollection().GlobalPropertiesCollection,
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("v1", values["4.0"].Properties["p1"].EvaluatedValue);
             // Properties can refer to other properties also defined in the config file
@@ -2771,8 +2661,7 @@ public void PropertiesInToolsetsFromConfigFileAreExpandedInToolsPath()
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2780,8 +2669,7 @@ public void PropertiesInToolsetsFromConfigFileAreExpandedInToolsPath()
 #endif
                                                            new ProjectCollection().EnvironmentProperties,
                                                            new ProjectCollection().GlobalPropertiesCollection,
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("Microsoft.NET", values["4.0"].Properties["p1"].EvaluatedValue);
             Assert.Equal("windows", values["4.0"].Properties["p2"].EvaluatedValue);
@@ -2823,8 +2711,7 @@ public void GlobalPropertiesInToolsetsAreExpandedButAreNotOverwritten()
             ProjectCollection e = new ProjectCollection(globalProperties, null, ToolsetDefinitionLocations.None);
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-            ToolsetReader.ReadAllToolsets
-                                                       (
+            ToolsetReader.ReadAllToolsets(
                                                            values,
                                                            GetStandardRegistryReader(),
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2832,8 +2719,7 @@ public void GlobalPropertiesInToolsetsAreExpandedButAreNotOverwritten()
 #endif
                                                            e.EnvironmentProperties,
                                                            e.GlobalPropertiesCollection,
-                                                           ToolsetDefinitionLocations.Default
-                                                       );
+                                                           ToolsetDefinitionLocations.Default);
 
             Assert.Equal("gv1", values["4.0"].Properties["p1"].EvaluatedValue);
             Assert.Equal("gv1", values["4.0"].Properties["p2"].EvaluatedValue);
diff --git a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
index 5b15463db12..18481f30970 100644
--- a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
@@ -244,8 +244,7 @@ public void ReadRegistry_NonStringData()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), false, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Registry has the following structure
@@ -463,8 +462,7 @@ public void GetDefaultToolsVersionFromRegistry_NonStringData()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), false, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         private ToolsetRegistryReader GetStandardRegistryReader()
         {
@@ -523,8 +521,7 @@ public void GetOverrideTasksPathFromRegistry_NonStringData()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), false, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         /// <summary>
         /// Regular case of getting the default override toolsversion
@@ -573,8 +570,7 @@ public void GetDefaultOverrideToolsVersionFromRegistry_NonStringData()
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), false, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
-            }
-           );
+            });
         }
         [Fact]
         public void ReadToolsets_NoBinPathOrToolsPath()
diff --git a/src/Build.UnitTests/Definition/Toolset_Tests.cs b/src/Build.UnitTests/Definition/Toolset_Tests.cs
index 01920d076e7..34cd6c596a7 100644
--- a/src/Build.UnitTests/Definition/Toolset_Tests.cs
+++ b/src/Build.UnitTests/Definition/Toolset_Tests.cs
@@ -25,8 +25,7 @@ public void ToolsetCtorErrors1()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 Toolset t = new Toolset(null, "x", new ProjectCollection(), null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -35,8 +34,7 @@ public void ToolsetCtorErrors2()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 Toolset t = new Toolset("x", null, new ProjectCollection(), null);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -45,8 +43,7 @@ public void ToolsetCtorErrors3()
             Assert.Throws<ArgumentException>(() =>
             {
                 Toolset t = new Toolset(String.Empty, "x", new ProjectCollection(), null);
-            }
-           );
+            });
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 22fc6d68300..95ed718b529 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -1027,8 +1027,7 @@ public void RejectCircularImportsWithCircularImports()
                     File.Delete(importPath1);
                     File.Delete(importPath2);
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// MSBuildDefaultTargets was not getting cleared out between reevaluations.
@@ -3066,8 +3065,7 @@ public void VerifyInvalidTreatAsLocalProperty()
 
                 // Should not reach this point.
                 Assert.True(false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Basic verification -- whitespace in the TreatAsLocalProperty definition should be trimmed.
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 8501b7297f9..8d53e53dc9c 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1278,11 +1278,9 @@ public void StaticMethodErrorMessageHaveMethodName1()
         /// <param name="primaryItemsByName"></param>
         /// <param name="secondaryItemsByName"></param>
         /// <param name="itemMetadata"></param>
-        private void CreateComplexPropertiesItemsMetadata
-            (
+        private void CreateComplexPropertiesItemsMetadata(
             out Lookup readOnlyLookup,
-            out StringMetadataTable itemMetadata
-            )
+            out StringMetadataTable itemMetadata)
         {
             ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
             Dictionary<string, string> itemMetadataTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
@@ -1692,8 +1690,7 @@ public void RegistryPropertyInvalidPrefixError()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped(@"$(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\VSTSDB@XXXXDBDirectory)", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// In the general case, we should still error for properties that incorrectly miss the Registry: prefix, like
@@ -1710,8 +1707,7 @@ public void RegistryPropertyInvalidPrefixError2()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped(@"$(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\VSTSDB@VSTSDBDirectoryX)", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -2297,8 +2293,7 @@ public void PropertyFunctionInvalid1()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("[$(SomeStuff($(Value)))]", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -2316,8 +2311,7 @@ public void PropertyFunctionInvalid2()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("[$(SomeStuff.Lgg)]", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expand property function - invalid since properties don't have properties and don't support '.' in them
@@ -2334,8 +2328,7 @@ public void PropertyFunctionInvalid3()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("$(SomeStuff.ToUpperInvariant().Foo)", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expand property function - properties don't take arguments
@@ -2352,8 +2345,7 @@ public void PropertyFunctionInvalid4()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("[$(SomeStuff($(System.DateTime.Now)))]", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -2370,8 +2362,7 @@ public void PropertyFunctionInvalid5()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("$(SomeStuff.ToLowerInvariant()_goop)", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expand property function - functions with invalid arguments
@@ -2387,8 +2378,7 @@ public void PropertyFunctionInvalid6()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("[$(SomeStuff.Substring(HELLO!))]", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expand property function - functions with invalid arguments
@@ -2404,8 +2394,7 @@ public void PropertyFunctionInvalid7()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("[$(SomeStuff.Substring(-10))]", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expand property function that calls a static method with quoted arguments
@@ -2420,8 +2409,7 @@ public void PropertyFunctionInvalid8()
                 Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
                 expander.ExpandIntoStringLeaveEscaped("$(([System.DateTime]::Now).ToString(\"MM.dd.yyyy\"))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-            }
-           );
+            });
         }
         /// <summary>
         /// Expand property function - we don't handle metadata functions
@@ -2815,20 +2803,16 @@ public void PropertyFunctionGetFolderPath()
         [Theory]
         [InlineData(
             "$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Create($([System.Runtime.InteropServices.OSPlatform]::$$platform$$.ToString())))))",
-            "True"
-        )]
+            "True")]
         [InlineData(
             @"$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::$$platform$$)))",
-            "True"
-        )]
+            "True")]
         [InlineData(
             "$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)",
-            "$$architecture$$"
-        )]
+            "$$architecture$$")]
         [InlineData(
             "$([MSBuild]::IsOSPlatform($$platform$$))",
-            "True"
-        )]
+            "True")]
         public void PropertyFunctionRuntimeInformation(string propertyFunction, string expectedExpansion)
         {
             Func<string, string, string, string> formatString = (aString, platform, architecture) => aString
@@ -3309,8 +3293,7 @@ public void PropertyFunctionDoesTaskHostExist_Error()
 
                 // We should have failed before now
                 Assert.True(false);
-            }
-           );
+            });
         }
 
 #if FEATURE_APPDOMAIN
@@ -3646,8 +3629,8 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()
                 "cat1s"
             };
             int[] hashes = stringsToHash.Select(toHash =>
-                (int)expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::StableStringHash('{toHash}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance)
-                ).ToArray();
+                (int)expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::StableStringHash('{toHash}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance))
+                .ToArray();
             for (int a = 0; a < hashes.Length; a++)
             {
                 for (int b = a; b < hashes.Length; b++)
@@ -3772,7 +3755,7 @@ public void Medley()
                 new string[] {"$([MSBuild]::Escape(';'))", "%3b"},
                 new string[] {"$([MSBuild]::UnEscape('%3b'))", ";"},
                 new string[] {"$(e.Substring($(e.Length)))", ""},
-                new string[] {"$([System.Int32]::MaxValue)", System.Int32.MaxValue.ToString()},
+                new string[] {"$([System.Int32]::MaxValue)", System.Int32.MaxValue.ToString() },
                 new string[] {"x$()", "x"},
                 new string[] {"A$(Reg:A)A", "AA"},
                 new string[] {"A$(Reg:AA)", "A"},
@@ -3972,8 +3955,7 @@ public void Medley()
                 }
                 Assert.True(
                         !success || caughtException,
-                        "FAILURE: Expected '" + errorTests[i] + "' to not parse or not be evaluated but it evaluated to '" + result + "'"
-                    );
+                        "FAILURE: Expected '" + errorTests[i] + "' to not parse or not be evaluated but it evaluated to '" + result + "'");
             }
         }
 
diff --git a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
index 674cf217083..e5a53732b6f 100644
--- a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
@@ -1158,11 +1158,9 @@ private static Dictionary<string, MetadataReference> GetConsumedMetadataReferenc
         /// </summary>
         /// <param name="batchableObjectParameter"></param>
         /// <param name="consumedMetadataReferences"></param>
-        private static void FindEmbeddedMetadataReferences_OriginalImplementation
-        (
+        private static void FindEmbeddedMetadataReferences_OriginalImplementation(
             string batchableObjectParameter,
-            Dictionary<string, MetadataReference> consumedMetadataReferences
-        )
+            Dictionary<string, MetadataReference> consumedMetadataReferences)
         {
             MatchCollection embeddedMetadataReferences = FindEmbeddedMetadataReferenceMatches_OriginalImplementation(batchableObjectParameter);
 
diff --git a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
index fb3c051da08..8f12514c626 100644
--- a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
@@ -89,8 +89,7 @@ public void IncludeShouldPreserveIntermediaryReferences()
 
             <i Include='@(i2)'/>
 
-            <i2 Remove='a;b;c'/>"
-            )]
+            <i2 Remove='a;b;c'/>")]
         // remove the items via a glob
         [InlineData(
             @"
@@ -101,8 +100,7 @@ public void IncludeShouldPreserveIntermediaryReferences()
 
             <i Include='@(i2)'/>
 
-            <i2 Remove='*'/>"
-            )]
+            <i2 Remove='*'/>")]
         public void RemoveShouldPreserveIntermediaryReferences(string content)
         {
             IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(content, allItems: true);
diff --git a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
index d2942ac7a07..1a1714f3d81 100644
--- a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
@@ -958,8 +958,7 @@ public void SdkResolverItemsAndPropertiesAreInPreprocessedOutput()
                         version: null,
                         propertiesToAdd,
                         itemsToAdd,
-                        warnings: null
-                        )));
+                        warnings: null)));
 
                 string content = @"<Project>
 <Import Project='Import.props' Sdk='TestPropsAndItemsFromResolverSdk' />
diff --git a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
index 32b32efdea2..4511dfcfd90 100644
--- a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
@@ -50,8 +50,7 @@ public void AddNull()
             Assert.Throws<InternalErrorException>(() =>
             {
                 ProjectCollection.GlobalProjectCollection.ProjectRootElementCache.Get("c:\\foo", (p, c) => null, true, false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verifies that the delegate cannot return a project with a different path
@@ -62,8 +61,7 @@ public void AddUnsavedProject()
             Assert.Throws<InternalErrorException>(() =>
             {
                 ProjectCollection.GlobalProjectCollection.ProjectRootElementCache.Get("c:\\foo", (p, c) => ProjectRootElement.Create("c:\\bar"), true, false);
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests that an entry added to the cache can be retrieved.
diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index a58b676f560..fa5a03201b6 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -633,12 +633,10 @@ internal void SdkPropertiesAreExpanded(SdkPropertiesAreExpandedCase data)
                 data.TemplateName,
                 _projectInnerContents,
                 data.TemplateVersion,
-                null
-            );
+                null);
 
             var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(
-                new MockExpandedSdkResolver(_testSdkDirectory)
-            );
+                new MockExpandedSdkResolver(_testSdkDirectory));
 
             void AddProperty(string name, string value) =>
                 (projectOptions.GlobalProperties ??= new Dictionary<string, string>()).Add(name, value);
@@ -672,14 +670,12 @@ void AddProperty(string name, string value) =>
                 var expectedSdkReferenceRaw = new SdkReference(
                     data.TemplateName,
                     data.TemplateVersion,
-                    data.Template.ExpectedMinimumVersion
-                );
+                    data.Template.ExpectedMinimumVersion);
 
                 var expectedSdkReference = new SdkReference(
                     SdkName,
                     SdkExpectedVersion,
-                    data.Template.ExpectedMinimumVersion
-                );
+                    data.Template.ExpectedMinimumVersion);
 
                 project.Imports.Count.ShouldBe(2);
 
@@ -716,14 +712,11 @@ public static IEnumerable<object[]> SdkPropertiesAreExpandedData
                     var templates = new[]
                     {
                         new SdkPropertiesAreExpandedDataTemplate(
-                            ProjectTemplateSdkAsAttributeWithVersion, true
-                        ),
+                            ProjectTemplateSdkAsAttributeWithVersion, true),
                         new SdkPropertiesAreExpandedDataTemplate(
-                            ProjectTemplateSdkAsElementWithVersion, false
-                        ),
+                            ProjectTemplateSdkAsElementWithVersion, false),
                         new SdkPropertiesAreExpandedDataTemplate(
-                            ProjectTemplateSdkAsExplicitImportWithVersion, false
-                        )
+                            ProjectTemplateSdkAsExplicitImportWithVersion, false)
                     };
 
                     foreach (var template in templates)
@@ -749,8 +742,7 @@ public static IEnumerable<object[]> SdkPropertiesAreExpandedData
                         yield return new object[]
                         {
                             new SdkPropertiesAreExpandedCase(
-                                mode, template, setName, setVersion, shouldExpand && setName
-                            )
+                                mode, template, setName, setVersion, shouldExpand && setName)
                             {
                                 TemplateName = SdkNameProperty
                             }
@@ -759,8 +751,7 @@ public static IEnumerable<object[]> SdkPropertiesAreExpandedData
                         yield return new object[]
                         {
                             new SdkPropertiesAreExpandedCase(
-                                mode, template, setName, setVersion, shouldExpand && setVersion
-                            )
+                                mode, template, setName, setVersion, shouldExpand && setVersion)
                             {
                                 TemplateVersion = SdkVersionProperty
                             }
@@ -769,8 +760,7 @@ public static IEnumerable<object[]> SdkPropertiesAreExpandedData
                         yield return new object[]
                         {
                             new SdkPropertiesAreExpandedCase(
-                                mode, template, setName, setVersion, shouldExpand && setName && setVersion
-                            )
+                                mode, template, setName, setVersion, shouldExpand && setName && setVersion)
                             {
                                 TemplateName = SdkNameProperty,
                                 TemplateVersion = SdkVersionProperty
diff --git a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
index 61515cbcb89..f25fd7ad5a2 100644
--- a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
@@ -119,9 +119,7 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)
                         version: null,
                         propertiesToAdd,
                         itemsToAdd,
-                        warnings: null
-                    ))
-                );
+                        warnings: null)));
 
             string projectContent = @"
                     <Project>
@@ -258,9 +256,7 @@ public void SdkResolverCanReturnMultiplePaths(bool includePropertiesAndItems)
                         version: null,
                         propertiesToAdd,
                         itemsToAdd,
-                        warnings: null
-                    ))
-                );
+                        warnings: null)));
 
             string projectContent = @"
                     <Project>
@@ -359,9 +355,7 @@ public void SdkResolverCanReturnTheSamePropertiesAndItemsMultipleTimes()
                         version: null,
                         propertiesToAdd,
                         itemsToAdd,
-                        warnings: null
-                    ))
-                );
+                        warnings: null)));
 
             string projectContent = @"
                     <Project Sdk=""TestPropsAndItemsFromResolverSdk"">
@@ -443,9 +437,7 @@ public void SdkResolverCanReturnSpecialCharacters()
                         version: null,
                         propertiesToAdd,
                         itemsToAdd,
-                        warnings: null
-                    ))
-                );
+                        warnings: null)));
 
             string projectContent = @"
                     <Project>
diff --git a/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs b/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs
index 090057bc965..cbff414de3e 100644
--- a/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs
+++ b/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs
@@ -432,16 +432,14 @@ public void EvaluateAVarietyOfTrueExpressions(string expression)
             Parser p = new Parser();
             GenericExpressionNode tree = p.Parse(expression, ParserOptions.AllowAll, ElementLocation.EmptyLocation);
             ConditionEvaluator.IConditionEvaluationState state =
-                new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                    (
+                new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                     expression,
                     _expander,
                     ExpanderOptions.ExpandAll,
                     null,
                     Directory.GetCurrentDirectory(),
                     ElementLocation.EmptyLocation,
-                    FileSystems.Default
-                    );
+                    FileSystems.Default);
 
             Assert.True(tree.Evaluate(state), "expected true from '" + expression + "'");
         }
@@ -458,16 +456,14 @@ public void EvaluateAVarietyOfFalseExpressions(string expression)
             Parser p = new Parser();
             GenericExpressionNode tree = p.Parse(expression, ParserOptions.AllowAll, ElementLocation.EmptyLocation);
             ConditionEvaluator.IConditionEvaluationState state =
-                new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                    (
+                new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                     expression,
                     _expander,
                     ExpanderOptions.ExpandAll,
                     null,
                     Directory.GetCurrentDirectory(),
                     ElementLocation.EmptyLocation,
-                    FileSystems.Default
-                    );
+                    FileSystems.Default);
 
             Assert.False(tree.Evaluate(state), "expected false from '" + expression + "' and got true");
         }
@@ -492,16 +488,14 @@ public void EvaluateAVarietyOfErrorExpressions(string expression)
                 var tree = p.Parse(expression, ParserOptions.AllowAll, ElementLocation.EmptyLocation);
 
                 ConditionEvaluator.IConditionEvaluationState state =
-                    new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                        (
+                    new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                         expression,
                         _expander,
                         ExpanderOptions.ExpandAll,
                         null,
                         Directory.GetCurrentDirectory(),
                         ElementLocation.EmptyLocation,
-                        FileSystems.Default
-                        );
+                        FileSystems.Default);
 
                 tree.Evaluate(state);
             }
diff --git a/src/Build.UnitTests/ExpressionTree_Tests.cs b/src/Build.UnitTests/ExpressionTree_Tests.cs
index 4601c894936..f3800b512e5 100644
--- a/src/Build.UnitTests/ExpressionTree_Tests.cs
+++ b/src/Build.UnitTests/ExpressionTree_Tests.cs
@@ -109,16 +109,14 @@ public void FunctionTests()
             tree = p.Parse(command, ParserOptions.AllowAll, ElementLocation.EmptyLocation);
 
             ConditionEvaluator.IConditionEvaluationState state =
-                            new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                                (
+                            new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                                     command,
                                     expander,
                                     ExpanderOptions.ExpandAll,
                                     null,
                                     Directory.GetCurrentDirectory(),
                                     ElementLocation.EmptyLocation,
-                                    FileSystems.Default
-                                );
+                                    FileSystems.Default);
 
             value = tree.Evaluate(state);
             Assert.True(value);
@@ -334,16 +332,14 @@ public void ConditionedPropertyUpdateTests()
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(new PropertyDictionary<ProjectPropertyInstance>(), itemBag, FileSystems.Default);
             Dictionary<string, List<string>> conditionedProperties = new Dictionary<string, List<string>>();
             ConditionEvaluator.IConditionEvaluationState state =
-                               new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                                   (
+                               new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                                        String.Empty,
                                        expander,
                                        ExpanderOptions.ExpandAll,
                                        conditionedProperties,
                                        Directory.GetCurrentDirectory(),
                                        ElementLocation.EmptyLocation,
-                                       FileSystems.Default
-                                   );
+                                       FileSystems.Default);
             AssertParseEvaluate(p, "'0' == '1'", expander, false, state);
             Assert.Empty(conditionedProperties);
 
@@ -445,16 +441,14 @@ private void AssertParseEvaluate(Parser p, string expression, Expander<ProjectPr
             if (state == null)
             {
                 state =
-                new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                    (
+                new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                         String.Empty,
                         expander,
                         ExpanderOptions.ExpandAll,
                         null,
                         Directory.GetCurrentDirectory(),
                         ElementLocation.EmptyLocation,
-                        FileSystems.Default
-                    );
+                        FileSystems.Default);
             }
 
             bool result = tree.Evaluate(state);
@@ -483,16 +477,14 @@ private void AssertParseEvaluateThrow(Parser p, string expression, Expander<Proj
                 if (state == null)
                 {
                     state =
-                    new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>
-                        (
+                    new ConditionEvaluator.ConditionEvaluationState<ProjectPropertyInstance, ProjectItemInstance>(
                             String.Empty,
                             expander,
                             ExpanderOptions.ExpandAll,
                             null,
                             Directory.GetCurrentDirectory(),
                             ElementLocation.EmptyLocation,
-                            FileSystems.Default
-                        );
+                            FileSystems.Default);
                 }
                 tree.Evaluate(state);
             }
diff --git a/src/Build.UnitTests/FileLogger_Tests.cs b/src/Build.UnitTests/FileLogger_Tests.cs
index 4f9f1124ced..278ba8533e9 100644
--- a/src/Build.UnitTests/FileLogger_Tests.cs
+++ b/src/Build.UnitTests/FileLogger_Tests.cs
@@ -98,8 +98,7 @@ public void InvalidFile()
                         File.Delete(log);
                     }
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Specific verbosity overrides global verbosity
@@ -178,8 +177,7 @@ public void InvalidVerbosity()
                 fl.Parameters = "verbosity=CookiesAndCream";
                 EventSourceSink es = new EventSourceSink();
                 fl.Initialize(es);
-            }
-           );
+            });
         }
         /// <summary>
         /// Invalid encoding setting
@@ -206,8 +204,7 @@ public void InvalidEncoding()
                         File.Delete(log);
                     }
                 }
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -543,8 +540,7 @@ public void DistributedLoggerNullEmpty()
                 fileLogger.Parameters = "logfile=";
                 fileLogger.Initialize(new EventSourceSink());
                 Assert.True(false);
-            }
-           );
+            });
         }
         #endregion
 
diff --git a/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs b/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs
index c97598d2dcd..65ba69149a2 100644
--- a/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs
+++ b/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs
@@ -126,10 +126,7 @@ public void MSBuildGlobVisitorShouldFindAllLeaves()
                 new CompositeGlob(
                     new MSBuildGlobWithGaps(g3, MSBuildGlob.Parse("x*")),
                     new CompositeGlob(
-                        g4
-                    )
-                )
-            );
+                        g4)));
 
             var leafGlobs = composite.GetParsedGlobs().ToArray();
 
diff --git a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
index 5cae35dbd70..fad454a8c20 100644
--- a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
+++ b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
@@ -80,18 +80,15 @@ public void GlobFromRootWithInvalidPathThrows()
         [InlineData(
             "a/b/c",
             "**",
-            "a/b/c"
-            )]
+            "a/b/c")]
         [InlineData(
             "a/b/c",
             "../../**",
-            "a"
-            )]
+            "a")]
         [InlineData(
             "a/b/c",
             "../d/e/**",
-            "a/b/d/e"
-            )]
+            "a/b/d/e")]
         public void GlobWithRelativeFixedDirectoryPartShouldMismatchTheGlobRoot(string globRoot, string filespec, string expectedFixedDirectoryPart)
         {
             var glob = MSBuildGlob.Parse(globRoot, filespec);
diff --git a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
index ba7fd24ed0d..d19d1946aa9 100644
--- a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
+++ b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
@@ -265,7 +265,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {1, null},
                         {2, null}
                     },
-                    new[] {(1, 2)}, // solution only edges
+                    new[] {(1, 2) }, // solution only edges
                     false, // is there a cycle
                     false // solution edges overlap with graph edges
                 };
@@ -277,7 +277,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {1, null},
                         {2, null}
                     },
-                    new[] {(1, 2), (2, 1)},
+                    new[] {(1, 2), (2, 1) },
                     true,
                     false
                 };
@@ -292,7 +292,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, null},
                         {5, null}
                     },
-                    new[] {(1, 2), (1, 3), (2, 4), (3,4), (4, 5)},
+                    new[] {(1, 2), (1, 3), (2, 4), (3,4), (4, 5) },
                     false,
                     false
                 };
@@ -307,7 +307,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, null},
                         {5, null}
                     },
-                    new[] {(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (2, 3)},
+                    new[] {(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (2, 3) },
                     false,
                     false
                 };
@@ -322,7 +322,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, null},
                         {5, null}
                     },
-                    new[] {(1, 3), (2, 3), (3, 4), (3, 5), (5, 4), (2, 1)},
+                    new[] {(1, 3), (2, 3), (3, 4), (3, 5), (5, 4), (2, 1) },
                     false,
                     false
                 };
@@ -333,7 +333,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                     {
                         {1, new []{2}},
                     },
-                    new[] {(1, 2)},
+                    new[] {(1, 2) },
                     false,
                     true
                 };
@@ -344,7 +344,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                     {
                         {1, new []{2}},
                     },
-                    new[] {(1, 2), (1, 2)},
+                    new[] {(1, 2), (1, 2) },
                     false,
                     true
                 };
@@ -355,7 +355,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                     {
                         {1, new []{2}},
                     },
-                    new[] {(2, 1)},
+                    new[] {(2, 1) },
                     true,
                     false
                 };
@@ -370,7 +370,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, new []{5}},
                         {5, null}
                     },
-                    new[] {(3, 2)},
+                    new[] {(3, 2) },
                     false,
                     false
                 };
@@ -385,7 +385,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, new []{5}},
                         {5, null}
                     },
-                    new[] {(1, 2), (1, 3), (3, 2), (1, 5)},
+                    new[] {(1, 2), (1, 3), (3, 2), (1, 5) },
                     false,
                     true
                 };
@@ -400,7 +400,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, new []{5}},
                         {5, null}
                     },
-                    new[] {(3, 2), (5, 3)},
+                    new[] {(3, 2), (5, 3) },
                     true,
                     false
                 };
@@ -415,7 +415,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {4, new []{5}},
                         {5, null}
                     },
-                    new[] {(5, 3)},
+                    new[] {(5, 3) },
                     true,
                     false
                 };
@@ -428,7 +428,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {2, new[] {3}},
                         {3, new[] {4}},
                     },
-                    new[] {(1,3), (2, 4)},
+                    new[] {(1,3), (2, 4) },
                     false,
                     false
                 };
@@ -441,7 +441,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {2, new[] {3}},
                         {3, new[] {4}},
                     },
-                    new[] {(1,3), (2, 4), (1, 2), (2, 3), (3, 4)},
+                    new[] {(1,3), (2, 4), (1, 2), (2, 3), (3, 4) },
                     false,
                     true
                 };
@@ -454,7 +454,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {3, null},
                         {4, null}
                     },
-                    new[] {(3, 2), (2, 4)},
+                    new[] {(3, 2), (2, 4) },
                     false,
                     false
                 };
@@ -467,7 +467,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
                         {3, null},
                         {4, null}
                     },
-                    new[] {(3, 2), (2, 4), (4, 1)},
+                    new[] {(3, 2), (2, 4), (4, 1) },
                     true,
                     false
                 };
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index a5b6cffa035..faaad79887d 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -216,8 +216,7 @@ internal static TransientTestFile CreateProjectFile(
             int[] projectReferences = null,
             Dictionary<string, string[]> projectReferenceTargets = null,
             string defaultTargets = null,
-            string extraContent = null
-            )
+            string extraContent = null)
         {
             return Helpers.CreateProjectFile(
                 env,
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 234ac76c4cc..4cf09cd2a4e 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -989,8 +989,8 @@ public void GetTargetListsDoesNotUseTargetsMetadataOnInnerBuildsFromRootOuterBui
 <ItemGroup>
     <ProjectReference Include='2.proj' Targets='T2' />
 </ItemGroup>
-"
-                ).Path;
+")
+                .Path;
             CreateProjectFile(
                 env: _env,
                 projectNumber: 2,
@@ -1586,8 +1586,8 @@ public void InnerBuildsFromNonRootOuterBuildInheritEdgesToOuterBuild()
                 extraContent: @"
 <ItemGroup>
     <ProjectReference Include='2.proj' Foo='Bar' />
-</ItemGroup>"
-                ).Path;
+</ItemGroup>")
+                .Path;
             CreateProjectFile(
                 env: _env,
                 projectNumber: 2,
@@ -2014,8 +2014,7 @@ public void GraphShouldSupportTransitiveReferences(Dictionary<int, int[]> edges)
             var graph = Helpers.CreateProjectGraph(
                 env: _env,
                 dependencyEdges: edges,
-                extraContentForAllNodes: EnableTransitiveProjectReferencesPropertyGroup
-                );
+                extraContentForAllNodes: EnableTransitiveProjectReferencesPropertyGroup);
 
             foreach (var node in graph.ProjectNodes)
             {
@@ -2062,7 +2061,7 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
                         {1, new[] {2, 3, 4}},
                         {2, new[] {3}},
                         {3, new[] {4}},
-                        {4, Array.Empty<int>()}
+                        {4, Array.Empty<int>() }
                     }
                 };
 
@@ -2127,7 +2126,7 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
                         {3, new[] {4, 5, 6}},
                         {4, new[] {5}},
                         {5, new[] {6}},
-                        {6, Array.Empty<int>()},
+                        {6, Array.Empty<int>() },
                     }
                 };
             }
@@ -2138,14 +2137,12 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
         public void TransitiveReferencesAreDefinedPerProject(
             Dictionary<int, int[]> edges,
             Dictionary<int, string> extraContentPerProjectNumber,
-            Dictionary<int, int[]> expectedReferences
-            )
+            Dictionary<int, int[]> expectedReferences)
         {
             var graph = Helpers.CreateProjectGraph(
                 env: _env,
                 dependencyEdges: edges,
-                extraContentPerProjectNumber: extraContentPerProjectNumber
-            );
+                extraContentPerProjectNumber: extraContentPerProjectNumber);
 
             graph.AssertReferencesIgnoringOrder(expectedReferences);
         }
@@ -2188,8 +2185,7 @@ public void TransitiveReferencesShouldNotBeAddedToOuterBuilds()
                         6,
                         MultitargetingSpecificationPropertyGroup
                     }
-                }
-            );
+                });
 
             GetOuterBuild(graph, 1).AssertReferencesIgnoringOrder(new[] { 1, 1 });
 
diff --git a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
index fdf70c9d99d..2ff9f0c3cc3 100644
--- a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
+++ b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
@@ -509,8 +509,7 @@ internal static TransientTestFile CreateProjectFileWithBuildTargetAndItems(
             int projectNumber,
             int[] projectReferences = null,
             string defaultTargets = null,
-            string explicitTargets = null
-            )
+            string explicitTargets = null)
         {
             var sb = new StringBuilder();
 
@@ -538,8 +537,7 @@ internal static TransientTestFile CreateProjectFileWithBuildTargetAndItems(
                 projectReferences,
                 null,
                 defaultTargets,
-                sb.ToString()
-                );
+                sb.ToString());
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/Instance/HostServices_Tests.cs b/src/Build.UnitTests/Instance/HostServices_Tests.cs
index f13eb9b32ab..169208b0ad6 100644
--- a/src/Build.UnitTests/Instance/HostServices_Tests.cs
+++ b/src/Build.UnitTests/Instance/HostServices_Tests.cs
@@ -61,8 +61,7 @@ public void TestInvalidHostObjectRegistration_NullProject()
                 HostServices hostServices = new HostServices();
                 TestHostObject hostObject = new TestHostObject();
                 hostServices.RegisterHostObject(null, "target", "task", hostObject);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test ensuring a null target for host object registration throws.
@@ -75,8 +74,7 @@ public void TestInvalidHostObjectRegistration_NullTarget()
                 HostServices hostServices = new HostServices();
                 TestHostObject hostObject = new TestHostObject();
                 hostServices.RegisterHostObject("project", null, "task", hostObject);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test ensuring a null task for host object registration throws.
@@ -89,8 +87,7 @@ public void TestInvalidHostObjectRegistration_NullTask()
                 HostServices hostServices = new HostServices();
                 TestHostObject hostObject = new TestHostObject();
                 hostServices.RegisterHostObject("project", "target", null, hostObject);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test which verifies host object unregistration.
@@ -223,8 +220,7 @@ public void TestContradictoryAffinityCausesException_OutOfProc()
                 hostServices.RegisterHostObject("project", "target", "task", hostObject);
                 Assert.Equal(NodeAffinity.InProc, hostServices.GetNodeAffinity("project"));
                 hostServices.SetNodeAffinity("project", NodeAffinity.OutOfProc);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test which ensures that setting an Any affinity for a project with a host object throws.
@@ -239,8 +235,7 @@ public void TestContradictoryAffinityCausesException_Any()
                 hostServices.RegisterHostObject("project", "target", "task", hostObject);
                 Assert.Equal(NodeAffinity.InProc, hostServices.GetNodeAffinity("project"));
                 hostServices.SetNodeAffinity("project", NodeAffinity.Any);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -282,8 +277,7 @@ public void TestContraditcoryHostObjectCausesException_OutOfProc()
                 TestHostObject hostObject = new TestHostObject();
                 hostServices.SetNodeAffinity("project", NodeAffinity.OutOfProc);
                 hostServices.RegisterHostObject("project", "target", "task", hostObject);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test which ensures the host object can be set for a project which has the Any affinity specifically set.
diff --git a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
index 49c9d3a4db5..00c60557bcc 100644
--- a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
@@ -283,8 +283,7 @@ public void UsingExplicitToolsVersionShouldBeFalseWhenNoToolsetIsReferencedInPro
         {
             var projectInstance = new ProjectInstance(
                 new ProjectRootElement(
-                    XmlReader.Create(new StringReader("<Project></Project>")), ProjectCollection.GlobalProjectCollection.ProjectRootElementCache, false, false)
-                );
+                    XmlReader.Create(new StringReader("<Project></Project>")), ProjectCollection.GlobalProjectCollection.ProjectRootElementCache, false, false));
 
             projectInstance.UsingDifferentToolsVersionFromProjectFile.ShouldBeFalse();
         }
@@ -738,7 +737,7 @@ public static IEnumerable<object[]> ProjectInstanceHasEvaluationIdTestData()
                     pi.AddItem("foo", "bar");
                     pi.TranslateEntireState = true;
 
-                    ((ITranslatable) pi).Translate(TranslationHelpers.GetWriteTranslator());
+                    ((ITranslatable)pi).Translate(TranslationHelpers.GetWriteTranslator());
                     var copy = ProjectInstance.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
                     return copy;
diff --git a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
index 16cc6ccc764..aca66a05aaa 100644
--- a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
@@ -41,9 +41,8 @@ public static IEnumerable<object[]> TargetChildrenTestData
                             CreateTargetItemGroup(),
                             CreateTargetOnError(),
                             CreateTargetTask()
-                        }
-                    ),
-                    new ReadOnlyCollection<ProjectOnErrorInstance>(new[] {CreateTargetOnError()})
+                        }),
+                    new ReadOnlyCollection<ProjectOnErrorInstance>(new[] {CreateTargetOnError() })
                 };
 
                 yield return new object[]
@@ -59,8 +58,7 @@ public static IEnumerable<object[]> TargetChildrenTestData
                             CreateTargetTask(),
                             CreateTargetOnError(),
                             CreateTargetTask()
-                        }
-                    ),
+                        }),
                     new ReadOnlyCollection<ProjectOnErrorInstance>(new[]
                     {
                         CreateTargetOnError(),
diff --git a/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs
index 89bd094fd1a..08e4815ff03 100644
--- a/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs
@@ -37,7 +37,7 @@ public static IEnumerable<object[]> TestData
                 {
                     new Dictionary<string, (string, MockElementLocation)>
                     {
-                        {"p1", ("v1", new MockElementLocation("p1"))}
+                        {"p1", ("v1", new MockElementLocation("p1")) }
                     },
                     new List<ProjectTaskInstanceChild>
                     {
@@ -49,8 +49,8 @@ public static IEnumerable<object[]> TestData
                 {
                     new Dictionary<string, (string, MockElementLocation)>
                     {
-                        {"p1", ("v1", new MockElementLocation("p1"))},
-                        {"p2", ("v2", new MockElementLocation("p2"))}
+                        {"p1", ("v1", new MockElementLocation("p1")) },
+                        {"p2", ("v2", new MockElementLocation("p2")) }
                     },
                     new List<ProjectTaskInstanceChild>
                     {
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 32fb90014ae..7af77a64d14 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -138,8 +138,7 @@ public static CacheResult SuccessfulTargetResult(int projectNumber, string proje
                                         {CacheHitByTargetResult, "true"}
                                     })
                             },
-                            BuildResultCode.Success
-                            )
+                            BuildResultCode.Success)
                     });
             }
 
@@ -347,7 +346,7 @@ public static IEnumerable<GraphCacheResponse> SuccessfulGraphs
                     },
                     new Dictionary<int, CacheResult>
                     {
-                        {1, GraphCacheResponse.SuccessfulProxyTargetResult()}
+                        {1, GraphCacheResponse.SuccessfulProxyTargetResult() }
                     });
 
                 yield return new GraphCacheResponse(
@@ -357,7 +356,7 @@ public static IEnumerable<GraphCacheResponse> SuccessfulGraphs
                     },
                     new Dictionary<int, CacheResult>
                     {
-                        {1, GraphCacheResponse.SuccessfulTargetResult(1, "1.proj")}
+                        {1, GraphCacheResponse.SuccessfulTargetResult(1, "1.proj") }
                     });
 
                 yield return new GraphCacheResponse(
@@ -373,7 +372,7 @@ public static IEnumerable<GraphCacheResponse> SuccessfulGraphs
                     },
                     new Dictionary<int, CacheResult>
                     {
-                        {2, GraphCacheResponse.SuccessfulProxyTargetResult()}
+                        {2, GraphCacheResponse.SuccessfulProxyTargetResult() }
                     });
 
                 yield return new GraphCacheResponse(
@@ -383,7 +382,7 @@ public static IEnumerable<GraphCacheResponse> SuccessfulGraphs
                     },
                     new Dictionary<int, CacheResult>
                     {
-                        {2, GraphCacheResponse.SuccessfulTargetResult(2, "2.proj")}
+                        {2, GraphCacheResponse.SuccessfulTargetResult(2, "2.proj") }
                     });
 
                 yield return new GraphCacheResponse(
@@ -393,8 +392,8 @@ public static IEnumerable<GraphCacheResponse> SuccessfulGraphs
                     },
                     new Dictionary<int, CacheResult>
                     {
-                        {1, GraphCacheResponse.SuccessfulProxyTargetResult()},
-                        {2, GraphCacheResponse.SuccessfulTargetResult(2, "2.proj")}
+                        {1, GraphCacheResponse.SuccessfulProxyTargetResult() },
+                        {2, GraphCacheResponse.SuccessfulTargetResult(2, "2.proj") }
                     });
 
                 yield return new GraphCacheResponse(
@@ -543,8 +542,7 @@ public void ProjectCacheByVsScenarioIgnoresSlnDisabledProjects()
         private (MockLogger logger, ProjectGraph projectGraph, Dictionary<ProjectGraphNode, BuildResult> nodesToBuildResults) BuildGraphVsScenario(
             GraphCacheResponse testData,
             BuildParameters? buildParameters = null,
-            bool assertBuildResults = true
-        )
+            bool assertBuildResults = true)
         {
             var nodesToBuildResults = new Dictionary<ProjectGraphNode, BuildResult>();
             MockLogger logger;
@@ -733,8 +731,8 @@ public void RunningProxyBuildsOnOutOfProcNodesShouldIssueWarning(bool disableInp
                 },
                 new Dictionary<int, CacheResult>
                 {
-                    {1, GraphCacheResponse.SuccessfulProxyTargetResult()},
-                    {2, GraphCacheResponse.SuccessfulProxyTargetResult()}
+                    {1, GraphCacheResponse.SuccessfulProxyTargetResult() },
+                    {2, GraphCacheResponse.SuccessfulProxyTargetResult() }
                 });
 
             var graph = testData.CreateGraph(_env);
@@ -910,8 +908,7 @@ public void CacheViaBuildParametersCanDiscoverAndLoadPluginFromAssembly()
                 new Dictionary<int, int[]?>
                 {
                     {1, new[] {2, 3}}
-                }
-                );
+                });
 
             var graph = testData.CreateGraph(_env);
 
@@ -942,8 +939,7 @@ public void GraphBuildCanDiscoverAndLoadPluginFromAssembly()
                 new Dictionary<int, int[]?>
                 {
                     {1, new[] {2, 3}}
-                }
-                );
+                });
 
             var graph = testData.CreateGraph(_env);
 
@@ -985,12 +981,10 @@ public void BuildFailsWhenCacheBuildResultIsWrong()
                                                 {"File", "Invalid file"}
                                             })
                                     },
-                                    BuildResultCode.Success
-                                    )
+                                    BuildResultCode.Success)
                             })
                     }
-                }
-                );
+                });
 
             var graph = testData.CreateGraph(_env);
             var mockCache = new InstanceMockCache(testData);
@@ -1243,8 +1237,7 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ErrorLocati
 <Target Name=`Build`>
     <Message Text=`Hello World` Importance=`High` />
 </Target>
-"
-                );
+");
 
             var buildSession = new Helpers.BuildManagerSession(
                 _env,
@@ -1367,8 +1360,7 @@ public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousL
                 {
                     {1, referenceNumbers}
                 },
-                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult())
-            );
+                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult()));
 
             var graph = testData.CreateGraph(_env);
 
@@ -1460,8 +1452,7 @@ public void ParallelStressTestForVsScenario(bool useSynchronousLogging, bool dis
                     {
                         {1, referenceNumbers}
                     },
-                    referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult())
-                );
+                    referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult()));
 
                 var graph = testData.CreateGraph(_env);
 
@@ -1524,8 +1515,7 @@ public void ParallelStressTest(bool useSynchronousLogging, bool disableInprocNod
                 {
                     {1, referenceNumbers}
                 },
-                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult())
-            );
+                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult()));
 
             var graph = testData.CreateGraph(_env);
             var cache = new InstanceMockCache(testData, TimeSpan.FromMilliseconds(50));
diff --git a/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs b/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
index 7a3b0875d84..935db440f56 100644
--- a/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
+++ b/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
@@ -45,9 +45,9 @@ public static IEnumerable<object[]> GetProfilerResults()
 
             yield return new object[] { new ProfilerResult(new Dictionary<EvaluationLocation, ProfiledLocation>
             {
-                {new EvaluationLocation(0, null, EvaluationPass.TotalEvaluation, "1", "myFile", 42, "elementName", "description", EvaluationLocationKind.Condition), new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2)},
-                {new EvaluationLocation(1, 0, EvaluationPass.Targets, "1", null, null, null, null, EvaluationLocationKind.Glob), new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2)},
-                {new EvaluationLocation(2, 0, EvaluationPass.LazyItems, "2", null, null, null, null, EvaluationLocationKind.Element), new ProfiledLocation(TimeSpan.Zero, TimeSpan.Zero, 0)}
+                {new EvaluationLocation(0, null, EvaluationPass.TotalEvaluation, "1", "myFile", 42, "elementName", "description", EvaluationLocationKind.Condition), new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2) },
+                {new EvaluationLocation(1, 0, EvaluationPass.Targets, "1", null, null, null, null, EvaluationLocationKind.Glob), new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2) },
+                {new EvaluationLocation(2, 0, EvaluationPass.LazyItems, "2", null, null, null, null, EvaluationLocationKind.Element), new ProfiledLocation(TimeSpan.Zero, TimeSpan.Zero, 0) }
             }) };
 
             var element = new ProjectRootElement(
@@ -57,11 +57,11 @@ public static IEnumerable<object[]> GetProfilerResults()
 
             yield return new object[] { new ProfilerResult(new Dictionary<EvaluationLocation, ProfiledLocation>
             {
-                {EvaluationLocation.CreateLocationForCondition(null, EvaluationPass.UsingTasks, "1", "myFile", 42, "conditionCase"), new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2)},
+                {EvaluationLocation.CreateLocationForCondition(null, EvaluationPass.UsingTasks, "1", "myFile", 42, "conditionCase"), new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2) },
                 {EvaluationLocation.CreateLocationForProject(null, EvaluationPass.InitialProperties, "1", "myFile", 42, element),
-                    new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2)},
+                    new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2) },
                 {EvaluationLocation.CreateLocationForGlob(null, EvaluationPass.InitialProperties, "1", "myFile", 42, "glob description"),
-                new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2)}
+                new ProfiledLocation(TimeSpan.MaxValue, TimeSpan.MinValue, 2) }
             }) };
         }
     }
diff --git a/src/Build.UnitTests/SolutionFileBuilder.cs b/src/Build.UnitTests/SolutionFileBuilder.cs
index 4f47e92e38f..85784296d0f 100644
--- a/src/Build.UnitTests/SolutionFileBuilder.cs
+++ b/src/Build.UnitTests/SolutionFileBuilder.cs
@@ -141,9 +141,7 @@ public string BuildSolution()
                     sc => new ProjectConfigurationInSolution(
                         sc.ConfigurationName,
                         sc.PlatformName,
-                        true)
-                    )
-                );
+                        true)));
 
             var sb = new StringBuilder();
 
diff --git a/src/Build.UnitTests/TargetsFile_Test.cs b/src/Build.UnitTests/TargetsFile_Test.cs
index 4d1f5521ad7..1fd99c2265c 100644
--- a/src/Build.UnitTests/TargetsFile_Test.cs
+++ b/src/Build.UnitTests/TargetsFile_Test.cs
@@ -50,8 +50,7 @@ public void TargetARM()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -102,8 +101,7 @@ public void AnyCPULibraryProjectIsNot32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -153,8 +151,7 @@ public void ExplicitAnyCPULibraryProjectIsNot32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -209,8 +206,7 @@ we need to be .NET 4.5 or greater -->
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` Condition=`!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v1.0\Microsoft.Windows.UI.Xaml.CSharp.targets')` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -266,8 +262,7 @@ we need to be .NET 4.5 or greater -->
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` Condition=`!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v1.0\Microsoft.Windows.UI.Xaml.CSharp.targets')` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -316,8 +311,7 @@ public void AnyCPUExeProjectIs32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -367,8 +361,7 @@ public void ExplicitAnyCPUExeProjectIs32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -417,8 +410,7 @@ public void AnyCPU40ExeProjectIsNot32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -468,8 +460,7 @@ public void ExplicitAnyCPUExeProjectIsNot32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -524,8 +515,7 @@ public void AnyCPUAppContainerExeProjectIs32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` Condition=`!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v1.0\Microsoft.Windows.UI.Xaml.CSharp.targets')` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -581,8 +571,7 @@ we need to be .NET 4.5 or greater -->
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` Condition=`!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v1.0\Microsoft.Windows.UI.Xaml.CSharp.targets')` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -633,8 +622,7 @@ public void AnyCPULibraryProjectIs32BitPreferredIfPrefer32BitSet()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -683,8 +671,7 @@ public void AnyCPUProjectWithNoExplicitOutputTypeIs32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -735,8 +722,7 @@ public void AnyCPUJupiterProjectWithNoExplicitOutputTypeIs32BitPreferred()
                       <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` Condition=`!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v1.0\Microsoft.Windows.UI.Xaml.CSharp.targets')` />
                    </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -773,8 +759,7 @@ public void TestGetFrameworkPaths()
   </Target>
   <Import Project=`$(MSBuildToolsPath)\Microsoft.CSharp.targets` />
 </Project>",
-             logger
-             );
+             logger);
 
             project.Build();
 
@@ -808,12 +793,10 @@ public void TestTargetFrameworkPaths()
       DependsOnTargets='GetFrameworkPaths'>
     <Message Text='Target Framework Folder = @(_TargetedFrameworkDirectoryItem)' />
   </Target>
-</Project>"
-                   );
+</Project>");
                 Project project = ObjectModelHelpers.CreateInMemoryProject(
                  projString,
-                 logger
-                 );
+                 logger);
 
                 project.SetProperty("TargetFrameworkVersion", version);
                 project.Build();
@@ -893,8 +876,7 @@ public void NoLinkMetadataSynthesisWhenDefinedInProject()
                       </Target>
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -974,8 +956,7 @@ public void SynthesizeLinkMetadataForItemsOnWhitelist()
                       </Target>
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
@@ -1052,8 +1033,7 @@ public void DontSynthesizeLinkMetadataIfPropertyNotSet()
                       </Target>
                     </Project>
                 ",
-                 logger
-                 );
+                 logger);
 
                 project.Build();
 
diff --git a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
index 73492a83c4f..1fadce476f9 100644
--- a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
+++ b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
@@ -28,8 +28,7 @@ public bool Equals(TaskRegistry x, TaskRegistry y)
                     {
                         Assert.Equal(xp.Key, yp.Key, TaskRegistry.RegisteredTaskIdentity.RegisteredTaskIdentityComparer.Exact);
                         Assert.Equal(xp.Value, yp.Value, new RegisteredTaskRecordComparer());
-                    }
-                );
+                    });
 
                 return true;
             }
diff --git a/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs b/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs
index 9f7435a781b..ba9539b97f4 100644
--- a/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs
+++ b/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs
@@ -51,8 +51,7 @@ public static ProjectItemGroupTaskItemInstance CreateTargetItem(int? counter = n
                 removeMetadataLocation: new MockElementLocation($"rm{stringCounter}"),
                 keepDuplicatesLocation: new MockElementLocation($"kd{stringCounter}"),
                 conditionLocation: new MockElementLocation($"cl{stringCounter}"),
-                metadata: metadata
-            );
+                metadata: metadata);
         }
 
         public static ProjectItemGroupTaskMetadataInstance CreateTargetItemMetadata(int? counter = null)
@@ -64,8 +63,7 @@ public static ProjectItemGroupTaskMetadataInstance CreateTargetItemMetadata(int?
                 $"v{stringCounter}",
                 $"c{stringCounter}",
                 new MockElementLocation($"location{stringCounter}"),
-                new MockElementLocation($"condition{stringCounter}")
-            );
+                new MockElementLocation($"condition{stringCounter}"));
         }
 
         public static ProjectPropertyGroupTaskInstance CreateTargetPropertyGroup(
@@ -79,8 +77,7 @@ public static ProjectPropertyGroupTaskInstance CreateTargetPropertyGroup(
                 $"c{stringCounter}",
                 new MockElementLocation($"location{stringCounter}"),
                 new MockElementLocation($"conditionLocation{stringCounter}"),
-                properties
-            );
+                properties);
         }
 
         public static ProjectPropertyGroupTaskPropertyInstance CreateTargetProperty(int? counter = null)
@@ -92,8 +89,7 @@ public static ProjectPropertyGroupTaskPropertyInstance CreateTargetProperty(int?
                 $"v{stringCounter}",
                 $"c{stringCounter}",
                 new MockElementLocation($"location{stringCounter}"),
-                new MockElementLocation($"conditionLocation{stringCounter}")
-            );
+                new MockElementLocation($"conditionLocation{stringCounter}"));
         }
 
         public static ProjectOnErrorInstance CreateTargetOnError(int? counter = null)
@@ -133,8 +129,7 @@ public static ProjectTaskInstance CreateTargetTask(
                 new MockElementLocation($"conditionLocation{stringCounter}"),
                 new MockElementLocation($"coeLocation{stringCounter}"),
                 new MockElementLocation($"msbrLocation{stringCounter}"),
-                new MockElementLocation($"msbaLocation{stringCounter}")
-            );
+                new MockElementLocation($"msbaLocation{stringCounter}"));
         }
 
         public static ProjectTaskOutputPropertyInstance CreateTaskPropertyOutput(int? counter = null)
@@ -148,8 +143,7 @@ public static ProjectTaskOutputPropertyInstance CreateTaskPropertyOutput(int? co
                 new MockElementLocation($"location{stringCounter}"),
                 new MockElementLocation($"propertyLocation{stringCounter}"),
                 new MockElementLocation($"taskParamLocation{stringCounter}"),
-                new MockElementLocation($"conditionLocation{stringCounter}")
-            );
+                new MockElementLocation($"conditionLocation{stringCounter}"));
         }
 
         public static ProjectTaskOutputItemInstance CreateTaskItemyOutput(int? counter = null)
@@ -163,8 +157,7 @@ public static ProjectTaskOutputItemInstance CreateTaskItemyOutput(int? counter =
                 new MockElementLocation($"location{stringCounter}"),
                 new MockElementLocation($"itemLocation{stringCounter}"),
                 new MockElementLocation($"taskParamLocation{stringCounter}"),
-                new MockElementLocation($"conditionLocation{stringCounter}")
-            );
+                new MockElementLocation($"conditionLocation{stringCounter}"));
         }
 
         public static ProjectTargetInstance CreateTarget(
@@ -197,8 +190,7 @@ public static ProjectTargetInstance CreateTarget(
                 new MockElementLocation($"atLocation{stringCounter}"),
                 children,
                 errorChildren,
-                true
-            );
+                true);
         }
 
         private static string CounterToString(int? counter)
diff --git a/src/Build.UnitTests/Utilities_Tests.cs b/src/Build.UnitTests/Utilities_Tests.cs
index 6159f3af2c1..4db1a6bb215 100644
--- a/src/Build.UnitTests/Utilities_Tests.cs
+++ b/src/Build.UnitTests/Utilities_Tests.cs
@@ -165,8 +165,7 @@ public void IllegalConditionOnProjectExtensions()
                     <Import Project=`$(MSBuildBinPath)\\Microsoft.CSharp.Targets` />
                 </Project>
             ");
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify ProjectExtensions cannot exist twice
@@ -183,8 +182,7 @@ public void RepeatedProjectExtensions()
                     <ProjectExtensions/>
                 </Project>
             ");
-            }
-           );
+            });
         }
         /// <summary>
         /// Tests that we can correctly pass a CDATA tag containing less-than signs into a property value.
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index d32ac025aec..d309e780246 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -169,9 +169,7 @@ public void TreatWarningsAsMessagesWhenSpecifiedIndirectly()
                     {
                         {"Foo", ExpectedEventCode},
                     },
-                    warningsAsMessages: "$(Foo)"
-                )
-            );
+                    warningsAsMessages: "$(Foo)"));
 
             VerifyBuildMessageEvent(logger);
         }
@@ -212,8 +210,7 @@ public void TreatWarningAsMessageOverridesTreatingItAsError()
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
                 GetTestProject(
                     warningsAsMessages: ExpectedEventCode,
-                    warningsAsErrors: ExpectedEventCode
-                    ));
+                    warningsAsErrors: ExpectedEventCode));
 
             VerifyBuildMessageEvent(logger);
         }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 559353ea2a5..034aecc4caf 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1905,8 +1905,7 @@ static void DumpGraph(ProjectGraph graph, IReadOnlyDictionary<ProjectGraphNode,
         private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
             ProjectGraph projectGraph,
             IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode,
-            GraphBuildRequestData graphBuildRequestData
-        )
+            GraphBuildRequestData graphBuildRequestData)
         {
             var waitHandle = new AutoResetEvent(true);
             var graphBuildStateLock = new object();
@@ -2675,8 +2674,7 @@ private NodeConfiguration GetNodeConfiguration()
                 ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent(BuildComponentType.LoggingService) as ILoggingService;
                 var remoteLoggers = new List<LoggerDescription>(loggingService.LoggerDescriptions);
 
-                _nodeConfiguration = new NodeConfiguration
-                (
+                _nodeConfiguration = new NodeConfiguration(
                 -1, /* must be assigned by the NodeManager */
                 _buildParameters,
                 remoteLoggers.ToArray()
@@ -2687,8 +2685,7 @@ private NodeConfiguration GetNodeConfiguration()
                     loggingService.IncludeEvaluationMetaprojects,
                     loggingService.IncludeEvaluationProfile,
                     loggingService.IncludeEvaluationPropertiesAndItems,
-                    loggingService.IncludeTaskInputs)
-                );
+                    loggingService.IncludeTaskInputs));
             }
 
             return _nodeConfiguration;
diff --git a/src/Build/BackEnd/BuildManager/CacheAggregator.cs b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
index 104c59fa31b..7735378dc92 100644
--- a/src/Build/BackEnd/BuildManager/CacheAggregator.cs
+++ b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
@@ -94,8 +94,7 @@ private void InsertCaches(IConfigCache configCache, IResultsCache resultsCache)
                         configIdMapping[result.ConfigurationId],
                         BuildRequest.InvalidGlobalRequestId,
                         BuildRequest.InvalidGlobalRequestId,
-                        BuildRequest.InvalidNodeRequestId
-                        ));
+                        BuildRequest.InvalidNodeRequestId));
             }
         }
     }
diff --git a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
index cb18ea93bb4..0a6e4beb210 100644
--- a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
+++ b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
@@ -88,11 +88,9 @@ internal void RegisterSubmissionForLegacyThread(int submissionId)
             {
                 ErrorUtilities.VerifyThrow(!_legacyThreadingEventsById.ContainsKey(submissionId), "Submission {0} should not already be registered with LegacyThreadingData", submissionId);
 
-                _legacyThreadingEventsById[submissionId] = new Tuple<AutoResetEvent, ManualResetEvent>
-                            (
+                _legacyThreadingEventsById[submissionId] = new Tuple<AutoResetEvent, ManualResetEvent>(
                                 new AutoResetEvent(false),
-                                new ManualResetEvent(false)
-                            );
+                                new ManualResetEvent(false));
             }
         }
 
@@ -151,11 +149,9 @@ internal Task GetLegacyThreadInactiveTask(int submissionId)
         /// </summary>
         internal void SignalLegacyThreadStart(RequestBuilder instance)
         {
-            ErrorUtilities.VerifyThrow
-                (
+            ErrorUtilities.VerifyThrow(
                     instance?.RequestEntry?.Request != null,
-                    "Cannot signal legacy thread start for a RequestBuilder without a request"
-                );
+                    "Cannot signal legacy thread start for a RequestBuilder without a request");
 
             int submissionId = instance.RequestEntry.Request.SubmissionId;
             InstanceForMainThread = instance;
diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 0375a078d63..25cca9028c6 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -138,11 +138,17 @@ public MSBuildClient(
 
         private void CreateNodePipeStream()
         {
-            _nodeStream = new NamedPipeClientStream(".", _pipeName, PipeDirection.InOut, PipeOptions.Asynchronous
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+            _nodeStream = new NamedPipeClientStream(
+                serverName: ".",
+                _pipeName,
+                PipeDirection.InOut,
+                PipeOptions.Asynchronous
 #if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
                 | PipeOptions.CurrentUserOnly
 #endif
             );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
             _packetPump = new MSBuildClientPacketPump(_nodeStream);
         }
 
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
index 988670a5429..3c807604993 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
@@ -33,8 +33,7 @@ public FullyQualifiedBuildRequest(
             string[] targets,
             bool resultsNeeded,
             bool skipStaticGraphIsolationConstraints = false,
-            BuildRequestDataFlags flags = BuildRequestDataFlags.None
-            )
+            BuildRequestDataFlags flags = BuildRequestDataFlags.None)
         {
             ErrorUtilities.VerifyThrowArgumentNull(config, nameof(config));
             ErrorUtilities.VerifyThrowArgumentNull(targets, nameof(targets));
diff --git a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
index b39bcc78b9e..3bd5e72694f 100644
--- a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
@@ -112,13 +112,11 @@ private Process StartInternal(string msbuildLocation, string commandLineArgs)
                 }
                 catch (Exception ex)
                 {
-                    CommunicationsUtilities.Trace
-                       (
+                    CommunicationsUtilities.Trace(
                            "Failed to launch node from {0}. CommandLine: {1}" + Environment.NewLine + "{2}",
                            msbuildLocation,
                            commandLineArgs,
-                           ex.ToString()
-                       );
+                           ex.ToString());
 
                     throw new NodeFailedToLaunchException(ex);
                 }
@@ -139,8 +137,7 @@ private Process StartInternal(string msbuildLocation, string commandLineArgs)
                 processSecurityAttributes.nLength = Marshal.SizeOf<BackendNativeMethods.SECURITY_ATTRIBUTES>();
                 threadSecurityAttributes.nLength = Marshal.SizeOf<BackendNativeMethods.SECURITY_ATTRIBUTES>();
 
-                bool result = BackendNativeMethods.CreateProcess
-                    (
+                bool result = BackendNativeMethods.CreateProcess(
                         exeName,
                         commandLineArgs,
                         ref processSecurityAttributes,
@@ -150,22 +147,19 @@ private Process StartInternal(string msbuildLocation, string commandLineArgs)
                         BackendNativeMethods.NullPtr,
                         null,
                         ref startInfo,
-                        out processInfo
-                    );
+                        out processInfo);
 
                 if (!result)
                 {
                     // Creating an instance of this exception calls GetLastWin32Error and also converts it to a user-friendly string.
                     System.ComponentModel.Win32Exception e = new System.ComponentModel.Win32Exception();
 
-                    CommunicationsUtilities.Trace
-                        (
+                    CommunicationsUtilities.Trace(
                             "Failed to launch node from {0}. System32 Error code {1}. Description {2}. CommandLine: {2}",
                             msbuildLocation,
                             e.NativeErrorCode.ToString(CultureInfo.InvariantCulture),
                             e.Message,
-                            commandLineArgs
-                        );
+                            commandLineArgs);
 
                     throw new NodeFailedToLaunchException(e.NativeErrorCode.ToString(CultureInfo.InvariantCulture), e.Message);
                 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index d9c2fc64d35..09a171af9bc 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -316,12 +316,10 @@ bool StartNewNode(int nodeId)
                     {
                         if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
                         {
-                            CommunicationsUtilities.Trace
-                            (
+                            CommunicationsUtilities.Trace(
                                 "Failed to launch node from {0}. The required .NET Framework v3.5 is not installed or enabled. CommandLine: {1}",
                                 msbuildLocation,
-                                commandLineArgs
-                            );
+                                commandLineArgs);
 
                             string nodeFailedToLaunchError = ResourceUtilities.GetResourceString("TaskHostNodeFailedToLaunchErrorCodeNet35NotInstalled");
                             throw new NodeFailedToLaunchException(null, nodeFailedToLaunchError);
@@ -442,11 +440,17 @@ private Stream TryConnectToProcess(int nodeProcessId, int timeout, Handshake han
             // Try and connect to the process.
             string pipeName = NamedPipeUtil.GetPlatformSpecificPipeName(nodeProcessId);
 
-            NamedPipeClientStream nodeStream = new NamedPipeClientStream(".", pipeName, PipeDirection.InOut, PipeOptions.Asynchronous
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+            NamedPipeClientStream nodeStream = new NamedPipeClientStream(
+                serverName: ".",
+                pipeName,
+                PipeDirection.InOut,
+                PipeOptions.Asynchronous
 #if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
-                                                                         | PipeOptions.CurrentUserOnly
+                | PipeOptions.CurrentUserOnly
 #endif
-                                                                         );
+            );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
             CommunicationsUtilities.Trace("Attempting connect to PID {0} with pipe {1} with timeout {2} ms", nodeProcessId, pipeName, timeout);
 
             try
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index b10bd378e32..6f7b443ad82 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -932,14 +932,12 @@ public bool RegisterLogger(ILogger logger)
                     Assembly engineAssembly = typeof(LoggingService).GetTypeInfo().Assembly;
                     string loggerClassName = "Microsoft.Build.BackEnd.Logging.CentralForwardingLogger";
                     string loggerAssemblyName = engineAssembly.GetName().FullName;
-                    LoggerDescription centralForwardingLoggerDescription = new LoggerDescription
-                                                                                     (
+                    LoggerDescription centralForwardingLoggerDescription = new LoggerDescription(
                                                                                       loggerClassName,
                                                                                       loggerAssemblyName,
                                                                                       null /*Not needed as we are loading from current assembly*/,
                                                                                       string.Empty /*No parameters needed as we are forwarding all events*/,
-                                                                                      LoggerVerbosity.Diagnostic /*Not used, but the spirit of the logger is to forward everything so this is the most appropriate verbosity */
-                                                                                     );
+                                                                                      LoggerVerbosity.Diagnostic); /*Not used, but the spirit of the logger is to forward everything so this is the most appropriate verbosity */
 
                     // Registering a distributed logger will initialize the logger, and create and initialize the forwarding logger.
                     // In addition it will register the logging description so that it can be instantiated on a node.
@@ -1151,8 +1149,7 @@ public void LogBuildEvent(BuildEventArgs buildEvent)
                     (warningEvent != null)
                     || (errorEvent != null)
                     || (buildEvent is CustomBuildEventArgs)
-                    || (buildEvent is CriticalBuildMessageEventArgs)
-                   )
+                    || (buildEvent is CriticalBuildMessageEventArgs))
                 {
                     ProcessLoggingEvent(buildEvent);
                 }
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index e9c1cde6045..b6326487e4b 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -72,15 +72,13 @@ public void LogCommentFromText(BuildEventContext buildEventContext, MessageImpor
                 ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
                 ErrorUtilities.VerifyThrow(message != null, "message was null");
 
-                BuildMessageEventArgs buildEvent = new BuildMessageEventArgs
-                    (
+                BuildMessageEventArgs buildEvent = new BuildMessageEventArgs(
                         message,
                         helpKeyword: null,
                         senderName: "MSBuild",
                         importance,
                         DateTime.UtcNow,
-                        messageArgs
-                    );
+                        messageArgs);
                 buildEvent.BuildEventContext = buildEventContext;
                 ProcessLoggingEvent(buildEvent);
             }
@@ -150,8 +148,7 @@ public void LogErrorFromText(BuildEventContext buildEventContext, string subcate
             }
 
             BuildErrorEventArgs buildEvent =
-            new BuildErrorEventArgs
-            (
+            new BuildErrorEventArgs(
                 subcategory,
                 errorCode,
                 file.File,
@@ -161,8 +158,7 @@ public void LogErrorFromText(BuildEventContext buildEventContext, string subcate
                 file.EndColumn,
                 message,
                 helpKeyword,
-                "MSBuild"
-            );
+                "MSBuild");
 
             buildEvent.BuildEventContext = buildEventContext;
             if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
@@ -193,8 +189,7 @@ public void LogInvalidProjectFileError(BuildEventContext buildEventContext, Inva
             if (!invalidProjectFileException.HasBeenLogged)
             {
                 BuildErrorEventArgs buildEvent =
-                    new BuildErrorEventArgs
-                    (
+                    new BuildErrorEventArgs(
                         invalidProjectFileException.ErrorSubcategory,
                         invalidProjectFileException.ErrorCode,
                         invalidProjectFileException.ProjectFile,
@@ -204,8 +199,7 @@ public void LogInvalidProjectFileError(BuildEventContext buildEventContext, Inva
                         invalidProjectFileException.EndColumnNumber,
                         invalidProjectFileException.BaseMessage,
                         invalidProjectFileException.HelpKeyword,
-                        "MSBuild"
-                    );
+                        "MSBuild");
                 buildEvent.BuildEventContext = buildEventContext;
                 if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
                 {
@@ -346,8 +340,7 @@ public void LogWarningFromText(BuildEventContext buildEventContext, string subca
                 subcategory = AssemblyResources.GetString(subcategoryResourceName);
             }
 
-            BuildWarningEventArgs buildEvent = new BuildWarningEventArgs
-                (
+            BuildWarningEventArgs buildEvent = new BuildWarningEventArgs(
                     subcategory,
                     warningCode,
                     file.File,
@@ -357,8 +350,7 @@ public void LogWarningFromText(BuildEventContext buildEventContext, string subca
                     file.EndColumn,
                     message,
                     helpKeyword,
-                    "MSBuild"
-                );
+                    "MSBuild");
 
             buildEvent.BuildEventContext = buildEventContext;
             if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
@@ -568,8 +560,7 @@ public BuildEventContext LogProjectStarted(
             // See https://github.com/dotnet/msbuild/issues/6341 for details
             IDictionary<string, string> globalProperties = buildRequestConfiguration.GlobalProperties.ToDictionary();
 
-            var buildEvent = new ProjectStartedEventArgs
-                (
+            var buildEvent = new ProjectStartedEventArgs(
                     configurationId,
                     message: null,
                     helpKeyword: null,
@@ -579,8 +570,7 @@ public BuildEventContext LogProjectStarted(
                     items,
                     parentBuildEventContext,
                     globalProperties,
-                    buildRequestConfiguration.ToolsVersion
-                );
+                    buildRequestConfiguration.ToolsVersion);
             buildEvent.BuildEventContext = projectBuildEventContext;
 
             ProcessLoggingEvent(buildEvent);
@@ -599,13 +589,11 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
         {
             ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
 
-            ProjectFinishedEventArgs buildEvent = new ProjectFinishedEventArgs
-                (
+            ProjectFinishedEventArgs buildEvent = new ProjectFinishedEventArgs(
                     message: null,
                     helpKeyword: null,
                     projectFile,
-                    success
-                );
+                    success);
             buildEvent.BuildEventContext = projectBuildEventContext;
             ProcessLoggingEvent(buildEvent);
 
@@ -630,20 +618,17 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
         public BuildEventContext LogTargetStarted(BuildEventContext projectBuildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, string parentTargetName, TargetBuiltReason buildReason)
         {
             ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext is null");
-            BuildEventContext targetBuildEventContext = new BuildEventContext
-                (
+            BuildEventContext targetBuildEventContext = new BuildEventContext(
                     projectBuildEventContext.SubmissionId,
                     projectBuildEventContext.NodeId,
                     projectBuildEventContext.ProjectInstanceId,
                     projectBuildEventContext.ProjectContextId,
                     NextTargetId,
-                    BuildEventContext.InvalidTaskId
-                );
+                    BuildEventContext.InvalidTaskId);
 
             if (!OnlyLogCriticalEvents)
             {
-                TargetStartedEventArgs buildEvent = new TargetStartedEventArgs
-                    (
+                TargetStartedEventArgs buildEvent = new TargetStartedEventArgs(
                         message: null,
                         helpKeyword: null,
                         targetName,
@@ -651,8 +636,7 @@ public BuildEventContext LogTargetStarted(BuildEventContext projectBuildEventCon
                         projectFileOfTargetElement,
                         parentTargetName,
                         buildReason,
-                        DateTime.UtcNow
-                    );
+                        DateTime.UtcNow);
                 buildEvent.BuildEventContext = targetBuildEventContext;
                 ProcessLoggingEvent(buildEvent);
             }
@@ -676,16 +660,14 @@ public void LogTargetFinished(BuildEventContext targetBuildEventContext, string
             {
                 ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
 
-                TargetFinishedEventArgs buildEvent = new TargetFinishedEventArgs
-                    (
+                TargetFinishedEventArgs buildEvent = new TargetFinishedEventArgs(
                         message: null,
                         helpKeyword: null,
                         targetName,
                         projectFile,
                         projectFileOfTargetElement,
                         success,
-                        targetOutputs
-                    );
+                        targetOutputs);
 
                 buildEvent.BuildEventContext = targetBuildEventContext;
                 ProcessLoggingEvent(buildEvent);
@@ -705,14 +687,12 @@ public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskN
             ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "targetBuildEventContext is null");
             if (!OnlyLogCriticalEvents)
             {
-                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
-                    (
+                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs(
                         message: null,
                         helpKeyword: null,
                         projectFile,
                         projectFileOfTaskNode,
-                        taskName
-                    );
+                        taskName);
                 buildEvent.BuildEventContext = taskBuildEventContext;
                 ProcessLoggingEvent(buildEvent);
             }
@@ -732,26 +712,22 @@ public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskN
         public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column)
         {
             ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
-            BuildEventContext taskBuildEventContext = new BuildEventContext
-                (
+            BuildEventContext taskBuildEventContext = new BuildEventContext(
                     targetBuildEventContext.SubmissionId,
                     targetBuildEventContext.NodeId,
                     targetBuildEventContext.ProjectInstanceId,
                     targetBuildEventContext.ProjectContextId,
                     targetBuildEventContext.TargetId,
-                    NextTaskId
-                );
+                    NextTaskId);
 
             if (!OnlyLogCriticalEvents)
             {
-                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
-                    (
+                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs(
                         message: null,
                         helpKeyword: null,
                         projectFile,
                         projectFileOfTaskNode,
-                        taskName
-                    );
+                        taskName);
                 buildEvent.BuildEventContext = taskBuildEventContext;
                 buildEvent.LineNumber = line;
                 buildEvent.ColumnNumber = column;
@@ -776,15 +752,13 @@ public void LogTaskFinished(BuildEventContext taskBuildEventContext, string task
             {
                 ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "taskBuildEventContext is null");
 
-                TaskFinishedEventArgs buildEvent = new TaskFinishedEventArgs
-                    (
+                TaskFinishedEventArgs buildEvent = new TaskFinishedEventArgs(
                         message: null,
                         helpKeyword: null,
                         projectFile,
                         projectFileOfTaskNode,
                         taskName,
-                        success
-                    );
+                        success);
                 buildEvent.BuildEventContext = taskBuildEventContext;
                 ProcessLoggingEvent(buildEvent);
             }
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 2a9a83b0135..4c3d6927894 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -41,8 +41,7 @@ internal ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, BuildReque
             requestEntry.RequestConfiguration.Project.ItemsToBuildWith,
             requestEntry.Request.ParentBuildEventContext,
             requestEntry.RequestConfiguration.Project.EvaluationId,
-            requestEntry.Request.ProjectContextId
-            )
+            requestEntry.Request.ProjectContextId)
         {
         }
 
@@ -67,8 +66,7 @@ internal ProjectLoggingContext(
             projectItems: null,
             request.ParentBuildEventContext,
             evaluationId,
-            request.ProjectContextId
-            )
+            request.ProjectContextId)
         {
         }
 
@@ -137,8 +135,7 @@ private ProjectLoggingContext(
                 properties = projectPropertiesToSerialize.Select((ProjectPropertyInstance property) => new DictionaryEntry(property.Name, property.EvaluatedValue));
             }
 
-            this.BuildEventContext = LoggingService.LogProjectStarted
-                (
+            this.BuildEventContext = LoggingService.LogProjectStarted(
                 nodeLoggingContext.BuildEventContext,
                 submissionId,
                 configurationId,
@@ -148,8 +145,7 @@ private ProjectLoggingContext(
                 properties,
                 items,
                 evaluationId,
-                projectContextId
-                );
+                projectContextId);
 
             // No need to log a redundant message in the common case
             if (toolsVersion != "Current")
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index 5b8955d74b0..2152d7a121e 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -66,15 +66,13 @@ internal TaskLoggingContext(TargetLoggingContext targetLoggingContext, string pr
                 }
             }
 
-            this.BuildEventContext = LoggingService.LogTaskStarted2
-                (
+            this.BuildEventContext = LoggingService.LogTaskStarted2(
                 targetLoggingContext.BuildEventContext,
                 _taskName,
                 projectFullPath,
                 task.Location.File,
                 task.Location.Line,
-                task.Location.Column
-                );
+                task.Location.Column);
             this.IsValid = true;
         }
 
@@ -127,14 +125,12 @@ internal void LogTaskBatchFinished(string projectFullPath, bool success)
         {
             ErrorUtilities.VerifyThrow(this.IsValid, "invalid");
 
-            LoggingService.LogTaskFinished
-                (
+            LoggingService.LogTaskFinished(
                 BuildEventContext,
                 _taskName,
                 projectFullPath,
                 _task.Location.File,
-                success
-                );
+                success);
             this.IsValid = false;
         }
 
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
index 1ae508340be..324ade44743 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
@@ -23,8 +23,7 @@ private ProjectCacheException(
             string message,
             Exception innerException,
             bool hasBeenLoggedByProjectCache,
-            string errorCode
-        )
+            string errorCode)
             : base(message, innerException)
         {
             ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(message), "Need error message.");
@@ -46,12 +45,10 @@ string errorCode
         /// <value>The error code string.</value>
         public string ErrorCode { get; }
 
-        internal static void ThrowAsUnhandledException
-        (
+        internal static void ThrowAsUnhandledException(
             Exception innerException,
             string messageResourceName,
-            params string[] messageArgs
-        )
+            params string[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
 
@@ -60,11 +57,9 @@ params string[] messageArgs
             throw new ProjectCacheException(message, innerException, hasBeenLoggedByProjectCache: false, errorCode);
         }
 
-        internal static void ThrowForErrorLoggedInsideTheProjectCache
-        (
+        internal static void ThrowForErrorLoggedInsideTheProjectCache(
             string messageResourceName,
-            params string[] messageArgs
-        )
+            params string[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
 
@@ -73,11 +68,9 @@ params string[] messageArgs
             throw new ProjectCacheException(message: message, innerException: null, hasBeenLoggedByProjectCache: true, errorCode: errorCode);
         }
 
-        internal static void ThrowForMSBuildIssueWithTheProjectCache
-        (
+        internal static void ThrowForMSBuildIssueWithTheProjectCache(
             string messageResourceName,
-            params string[] messageArgs
-        )
+            params string[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
 
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 4be970bd9cb..caf893949dd 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -374,8 +374,7 @@ void EvaluateProjectIfNecessary(BuildSubmission submission, BuildRequestConfigur
                             _buildManager,
                             submission.BuildRequestData.Flags,
                             submission.SubmissionId,
-                            Scheduler.InProcNodeId
-                        );
+                            Scheduler.InProcNodeId);
 
                         // If we're taking the time to evaluate, avoid having other nodes to repeat the same evaluation.
                         // Based on the assumption that ProjectInstance serialization is faster than evaluating from scratch.
@@ -542,8 +541,7 @@ private IReadOnlyCollection<ProjectGraphEntryPoint> GetGraphEntryPoints(BuildReq
             static IReadOnlyCollection<ProjectGraphEntryPoint> GenerateGraphEntryPointsFromSolutionConfigurationXml(
                 string solutionConfigurationXml,
                 string definingProjectPath,
-                Dictionary<string, string> templateGlobalProperties
-            )
+                Dictionary<string, string> templateGlobalProperties)
             {
                 // TODO: fix code clone for parsing CurrentSolutionConfiguration xml: https://github.com/dotnet/msbuild/issues/6751
                 var doc = new XmlDocument();
diff --git a/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
index 363e9eaebc7..7dbf4c6200d 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
@@ -78,12 +78,10 @@ internal static class BatchingEngine
         /// buckets of items to pass to the object in each batch.
         /// </summary>
         /// <returns>List containing ItemBucket objects, each one representing an execution batch.</returns>
-        internal static List<ItemBucket> PrepareBatchingBuckets
-        (
+        internal static List<ItemBucket> PrepareBatchingBuckets(
             List<string> batchableObjectParameters,
             Lookup lookup,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             return PrepareBatchingBuckets(batchableObjectParameters, lookup, null, elementLocation);
         }
@@ -98,13 +96,11 @@ ElementLocation elementLocation
         /// <param name="implicitBatchableItemType">Any item type that can be considered an implicit input to this batchable object.
         /// This is useful for items inside targets, where the item name is plainly an item type that's an "input" to the object.</param>
         /// <returns>List containing ItemBucket objects, each one representing an execution batch.</returns>
-        internal static List<ItemBucket> PrepareBatchingBuckets
-        (
+        internal static List<ItemBucket> PrepareBatchingBuckets(
             List<string> batchableObjectParameters,
             Lookup lookup,
             string implicitBatchableItemType,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             if (batchableObjectParameters == null)
             {
@@ -199,14 +195,12 @@ ElementLocation elementLocation
         /// the entire list of items will be returned in the Value.  Otherwise, the Value will be empty, indicating only the
         /// qualified item set (in the Key) should be batched.
         /// </returns>
-        private static Dictionary<string, ICollection<ProjectItemInstance>> GetItemListsToBeBatched
-        (
+        private static Dictionary<string, ICollection<ProjectItemInstance>> GetItemListsToBeBatched(
             Dictionary<string, MetadataReference> consumedMetadataReferences,   // Key is [string] potentially qualified metadata name
                                                                                 // Value is [struct MetadataReference]
             HashSet<string> consumedItemReferenceNames,
             Lookup lookup,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             // The keys in this hashtable are the names of the items that we will batch on.
             // The values are always String.Empty (not used).
@@ -295,13 +289,11 @@ ElementLocation elementLocation
         /// to the comparison operations, which dominate the time spent in this method.
         /// </remarks>
         /// <returns>List containing ItemBucket objects (can be empty), each one representing an execution batch.</returns>
-        private static List<ItemBucket> BucketConsumedItems
-        (
+        private static List<ItemBucket> BucketConsumedItems(
             Lookup lookup,
             Dictionary<string, ICollection<ProjectItemInstance>> itemListsToBeBatched,
             Dictionary<string, MetadataReference> consumedMetadataReferences,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             ErrorUtilities.VerifyThrow(itemListsToBeBatched.Count > 0, "Need item types consumed by the batchable object.");
             ErrorUtilities.VerifyThrow(consumedMetadataReferences.Count > 0, "Need item metadata consumed by the batchable object.");
@@ -379,12 +371,10 @@ ElementLocation elementLocation
         /// %(x) is expanded using the key "x", and %(z.x) is expanded using the key "z.x".
         /// </summary>
         /// <returns>the metadata values</returns>
-        private static Dictionary<string, string> GetItemMetadataValues
-        (
+        private static Dictionary<string, string> GetItemMetadataValues(
             ProjectItemInstance item,
             Dictionary<string, MetadataReference> consumedMetadataReferences,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             var itemMetadataValues = new Dictionary<string, string>(consumedMetadataReferences.Count, MSBuildNameIgnoreCaseComparer.Default);
 
@@ -396,8 +386,7 @@ ElementLocation elementLocation
 
                 if (
                         (metadataItemName != null) &&
-                        (!String.Equals(item.ItemType, metadataItemName, StringComparison.OrdinalIgnoreCase))
-                    )
+                        (!String.Equals(item.ItemType, metadataItemName, StringComparison.OrdinalIgnoreCase)))
                 {
                     itemMetadataValues[metadataQualifiedName] = String.Empty;
                 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 446ef6e4c85..d1a47902bad 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -63,8 +63,7 @@ internal override void ExecuteTask(Lookup lookup)
                     // "Execute" each bucket
                     foreach (ItemBucket bucket in buckets)
                     {
-                        bool condition = ConditionEvaluator.EvaluateCondition
-                            (
+                        bool condition = ConditionEvaluator.EvaluateCondition(
                             child.Condition,
                             ParserOptions.AllowAll,
                             bucket.Expander,
@@ -171,8 +170,7 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
             // Third, expand the metadata.           
             foreach (ProjectItemGroupTaskMetadataInstance metadataInstance in child.Metadata)
             {
-                bool condition = ConditionEvaluator.EvaluateCondition
-                    (
+                bool condition = ConditionEvaluator.EvaluateCondition(
                     metadataInstance.Condition,
                     ParserOptions.AllowAll,
                     bucket.Expander,
@@ -201,8 +199,7 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
             bucket.Expander.Metadata = originalMetadataTable;
 
             // Determine if we should NOT add duplicate entries
-            bool keepDuplicates = ConditionEvaluator.EvaluateCondition
-                (
+            bool keepDuplicates = ConditionEvaluator.EvaluateCondition(
                 child.KeepDuplicates,
                 ParserOptions.AllowAll,
                 bucket.Expander,
@@ -311,8 +308,7 @@ private void ExecuteModify(ProjectItemGroupTaskItemInstance child, ItemBucket bu
 
             foreach (ProjectItemGroupTaskMetadataInstance metadataInstance in child.Metadata)
             {
-                bool condition = ConditionEvaluator.EvaluateCondition
-                    (
+                bool condition = ConditionEvaluator.EvaluateCondition(
                     metadataInstance.Condition,
                     ParserOptions.AllowAll,
                     bucket.Expander,
@@ -369,14 +365,12 @@ private void GetBatchableValuesFromBuildItemGroupChild(List<string> parameterVal
         /// been refactored.
         /// </remarks>
         /// <returns>A list of items.</returns>
-        private List<ProjectItemInstance> ExpandItemIntoItems
-        (
+        private List<ProjectItemInstance> ExpandItemIntoItems(
             ProjectItemGroupTaskItemInstance originalItem,
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander,
             ISet<string> keepMetadata,
             ISet<string> removeMetadata,
-            LoggingContext loggingContext = null
-        )
+            LoggingContext loggingContext = null)
         {
             // todo this is duplicated logic with the item computation logic from evaluation (in LazyIncludeOperation.SelectItems)
             ProjectErrorUtilities.VerifyThrowInvalidProject(!(keepMetadata != null && removeMetadata != null), originalItem.KeepMetadataLocation, "KeepAndRemoveMetadataMutuallyExclusive");
@@ -525,14 +519,12 @@ private List<ProjectItemInstance> ExpandItemIntoItems
         /// <param name="expander">The expander to use</param>
         /// <param name="loggingContext">Context for logging</param>
         /// <returns>A list of matching items</returns>
-        private List<ProjectItemInstance> FindItemsMatchingSpecification
-            (
+        private List<ProjectItemInstance> FindItemsMatchingSpecification(
             ICollection<ProjectItemInstance> items,
             string specification,
             ElementLocation specificationLocation,
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander,
-            LoggingContext loggingContext = null
-            )
+            LoggingContext loggingContext = null)
         {
             if (items.Count == 0 || specification.Length == 0)
             {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
index 7dd16c7d221..b79cf73fb8b 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
@@ -366,8 +366,7 @@ public async Task<bool> ExecuteInternal()
                                                 _targetOutputs,
                                                 UnloadProjectsOnCompletion,
                                                 ToolsVersion,
-                                                SkipNonexistentTargets
-                                                );
+                                                SkipNonexistentTargets);
 
                         if (!executeResult)
                         {
@@ -426,8 +425,7 @@ private async Task<bool> BuildProjectsInParallel(Dictionary<string, string> prop
                 return success;
             }
 
-            bool executeResult = await ExecuteTargets
-            (
+            bool executeResult = await ExecuteTargets(
                 projectToBuildInParallel,
                 propertiesTable,
                 undefinePropertiesArray,
@@ -439,8 +437,7 @@ private async Task<bool> BuildProjectsInParallel(Dictionary<string, string> prop
                 _targetOutputs,
                 UnloadProjectsOnCompletion,
                 ToolsVersion,
-                SkipNonexistentTargets
-            );
+                SkipNonexistentTargets);
 
             if (!executeResult)
             {
@@ -493,11 +490,9 @@ private void ExpandAllTargetsAndProperties()
             }
         }
 
-        internal static List<string[]> CreateTargetLists
-            (
+        internal static List<string[]> CreateTargetLists(
             string[] targets,
-            bool runEachTargetSeparately
-            )
+            bool runEachTargetSeparately)
         {
             // This is a list of string[].  That is, each element in the list is a string[].  Each
             // string[] represents a set of target names to build.  Depending on the value 
@@ -564,14 +559,12 @@ internal static async Task<bool> ExecuteTargets(
                     // parse the string containing the properties
                     if (!String.IsNullOrEmpty(projects[i].GetMetadata(ItemMetadataNames.PropertiesMetadataName)))
                     {
-                        if (!PropertyParser.GetTableWithEscaping
-                            (
+                        if (!PropertyParser.GetTableWithEscaping(
                                 log,
                                 ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.OverridingProperties", projectNames[i]),
                                 ItemMetadataNames.PropertiesMetadataName,
                                 projects[i].GetMetadata(ItemMetadataNames.PropertiesMetadataName).Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries),
-                                out Dictionary<string, string> preProjectPropertiesTable)
-                            )
+                                out Dictionary<string, string> preProjectPropertiesTable))
                         {
                             return false;
                         }
@@ -610,14 +603,12 @@ internal static async Task<bool> ExecuteTargets(
                     // parse the string containing the properties
                     if (!String.IsNullOrEmpty(projects[i].GetMetadata(ItemMetadataNames.AdditionalPropertiesMetadataName)))
                     {
-                        if (!PropertyParser.GetTableWithEscaping
-                            (
+                        if (!PropertyParser.GetTableWithEscaping(
                                 log,
                                 ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.AdditionalProperties", projectNames[i]),
                                 ItemMetadataNames.AdditionalPropertiesMetadataName,
                                 projects[i].GetMetadata(ItemMetadataNames.AdditionalPropertiesMetadataName).Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries),
-                                out Dictionary<string, string> additionalProjectPropertiesTable)
-                           )
+                                out Dictionary<string, string> additionalProjectPropertiesTable))
                         {
                             return false;
                         }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index cc58134235c..3662fd50478 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -57,8 +57,7 @@ internal override void ExecuteTask(Lookup lookup)
                     // "Execute" each bucket
                     foreach (ItemBucket bucket in buckets)
                     {
-                        bool condition = ConditionEvaluator.EvaluateCondition
-                            (
+                        bool condition = ConditionEvaluator.EvaluateCondition(
                             property.Condition,
                             ParserOptions.AllowAll,
                             bucket.Expander,
@@ -73,13 +72,11 @@ internal override void ExecuteTask(Lookup lookup)
                         {
                             // Check for a reserved name now, so it fails right here instead of later when the property eventually reaches
                             // the outer scope.
-                            ProjectErrorUtilities.VerifyThrowInvalidProject
-                                (
+                            ProjectErrorUtilities.VerifyThrowInvalidProject(
                                 !ReservedPropertyNames.IsReservedProperty(property.Name),
                                 property.Location,
                                 "CannotModifyReservedProperty",
-                                property.Name
-                                );
+                                property.Name);
 
                             string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(property.Value, ExpanderOptions.ExpandAll, property.Location);
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs b/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
index c15cee3f250..060db51e3bc 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
@@ -71,13 +71,11 @@ private ItemBucket()
         /// <param name="metadata">Hashtable of item metadata values: null indicates no batching is occurring</param>
         /// <param name="lookup">The <see cref="Lookup"/> to use for the items in the bucket.</param>
         /// <param name="bucketSequenceNumber">A sequence number indication what order the buckets were created in.</param>
-        internal ItemBucket
-        (
+        internal ItemBucket(
             ICollection<string> itemNames,
             Dictionary<string, string> metadata,
             Lookup lookup,
-            int bucketSequenceNumber
-        )
+            int bucketSequenceNumber)
         {
             ErrorUtilities.VerifyThrow(lookup != null, "Need lookup.");
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 7a1f6cc9c4f..8ca1499c16a 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1125,20 +1125,17 @@ private async Task<BuildResult> BuildProject()
                         _componentHost,
                         RequestEntry.Request.BuildRequestDataFlags,
                         RequestEntry.Request.SubmissionId,
-                        _nodeLoggingContext.BuildEventContext.NodeId
-                    );
+                        _nodeLoggingContext.BuildEventContext.NodeId);
                 }
             }
             catch
             {
                 // make sure that any errors thrown by a child project are logged in the context of their parent project: create a temporary projectLoggingContext
-                _projectLoggingContext = new ProjectLoggingContext
-                    (
+                _projectLoggingContext = new ProjectLoggingContext(
                     _nodeLoggingContext,
                     _requestEntry.Request,
                     _requestEntry.RequestConfiguration.ProjectFullPath,
-                    _requestEntry.RequestConfiguration.ToolsVersion
-                    );
+                    _requestEntry.RequestConfiguration.ToolsVersion);
 
                 throw;
             }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 87604dfba2e..76f763bfcc5 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -406,21 +406,18 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)
                 (
                 !_cancellationToken.IsCancellationRequested &&
                 !stopProcessingStack &&
-                _targetsToBuild.Any()
-                )
+                _targetsToBuild.Any())
             {
                 TargetEntry currentTargetEntry = _targetsToBuild.Peek();
                 switch (currentTargetEntry.State)
                 {
                     case TargetEntryState.Dependencies:
                         // Ensure we are dealing with a target which actually exists.
-                        ProjectErrorUtilities.VerifyThrowInvalidProject
-                        (
+                        ProjectErrorUtilities.VerifyThrowInvalidProject(
                         _requestEntry.RequestConfiguration.Project.Targets.ContainsKey(currentTargetEntry.Name),
                         currentTargetEntry.ReferenceLocation,
                         "TargetDoesNotExist",
-                        currentTargetEntry.Name
-                        );
+                        currentTargetEntry.Name);
 
                         // If we already have results for this target which were not skipped, we can ignore it.  In 
                         // addition, we can also ignore its before and after targets -- if this target has already run, 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index e1479768ff2..e50b119d5f6 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -343,8 +343,7 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
 
             // If condition is false (based on propertyBag), set this target's state to
             // "Skipped" since we won't actually build it.
-            bool condition = ConditionEvaluator.EvaluateCondition
-                (
+            bool condition = ConditionEvaluator.EvaluateCondition(
                 _target.Condition,
                 ParserOptions.AllowPropertiesAndItemLists,
                 _expander,
@@ -598,8 +597,7 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re
                     if (!String.IsNullOrEmpty(targetReturns))
                     {
                         // Determine if we should keep duplicates.
-                        bool keepDupes = ConditionEvaluator.EvaluateCondition
-                                 (
+                        bool keepDupes = ConditionEvaluator.EvaluateCondition(
                                  _target.KeepDuplicateOutputs,
                                  ParserOptions.AllowPropertiesAndItemLists,
                                  _expander,
@@ -678,8 +676,7 @@ internal List<TargetSpecification> GetErrorTargets(ProjectLoggingContext project
 
             foreach (ProjectOnErrorInstance errorTargetInstance in _target.OnErrorChildren)
             {
-                bool condition = ConditionEvaluator.EvaluateCondition
-                (
+                bool condition = ConditionEvaluator.EvaluateCondition(
                     errorTargetInstance.Condition,
                     ParserOptions.AllowPropertiesAndItemLists,
                     _expander,
@@ -911,13 +908,11 @@ private void GetTargetInstance()
         {
             _requestEntry.RequestConfiguration.Project.Targets.TryGetValue(_targetSpecification.TargetName, out _target);
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 _target != null,
                 _targetSpecification.ReferenceLocation ?? _requestEntry.RequestConfiguration.Project.ProjectFileLocation,
                 "TargetDoesNotExist",
-                _targetSpecification.TargetName
-                );
+                _targetSpecification.TargetName);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index e9b35b6b330..2dda1bb3418 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -128,12 +128,10 @@ private string TargetOutputSpecification
         /// DependencyAnalysisResult.IncrementalBuild, if only some target outputs are out-of-date;
         /// DependencyAnalysisResult.FullBuild, if target is out-of-date
         /// </returns>
-        internal DependencyAnalysisResult PerformDependencyAnalysis
-        (
+        internal DependencyAnalysisResult PerformDependencyAnalysis(
             ItemBucket bucket,
             out ItemDictionary<ProjectItemInstance> changedTargetInputs,
-            out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
-        )
+            out ItemDictionary<ProjectItemInstance> upToDateTargetInputs)
         {
             // Clear any old dependency analysis logging details
             _dependencyAnalysisDetail.Clear();
@@ -380,16 +378,14 @@ private void LogUniqueInputsAndOutputs()
         /// <param name="itemVectorsInTargetOutputs"></param>
         /// <param name="discreteItemsInTargetOutputs"></param>
         /// <param name="targetOutputItemSpecs"></param>
-        private void ParseTargetInputOutputSpecifications
-        (
+        private void ParseTargetInputOutputSpecifications(
             ItemBucket bucket,
             out ItemVectorPartitionCollection itemVectorsInTargetInputs,
             out ItemVectorPartitionCollection itemVectorTransformsInTargetInputs,
             out Dictionary<string, string> discreteItemsInTargetInputs,
             out ItemVectorPartitionCollection itemVectorsInTargetOutputs,
             out Dictionary<string, string> discreteItemsInTargetOutputs,
-            out List<string> targetOutputItemSpecs
-        )
+            out List<string> targetOutputItemSpecs)
         {
             // break down the input/output specifications along the standard separator, after expanding all embedded properties
             // and item metadata
@@ -496,14 +492,12 @@ private DependencyAnalysisResult PerformDependencyAnalysisIfNoOutputs()
         /// <param name="itemVectorsReferencedOnlyInTargetInputs"></param>
         /// <param name="targetOutputItemSpecs"></param>
         /// <returns>Indication of how to build the target.</returns>
-        private DependencyAnalysisResult PerformDependencyAnalysisIfDiscreteInputs
-        (
+        private DependencyAnalysisResult PerformDependencyAnalysisIfDiscreteInputs(
             ItemVectorPartitionCollection itemVectorsInTargetInputs,
             ItemVectorPartitionCollection itemVectorTransformsInTargetInputs,
             Dictionary<string, string> discreteItemsInTargetInputs,
             List<string> itemVectorsReferencedOnlyInTargetInputs,
-            List<string> targetOutputItemSpecs
-        )
+            List<string> targetOutputItemSpecs)
         {
             DependencyAnalysisResult result = DependencyAnalysisResult.SkipUpToDate;
 
@@ -571,14 +565,12 @@ List<string> targetOutputItemSpecs
         /// <param name="changedTargetInputs">The inputs which are "changed" and require a build</param>
         /// <param name="upToDateTargetInputs">The inpurt which are "up to date" and do not require a build</param>
         /// <returns>Indication of how to build the target.</returns>
-        private DependencyAnalysisResult PerformDependencyAnalysisIfCorrelatedInputsOutputs
-        (
+        private DependencyAnalysisResult PerformDependencyAnalysisIfCorrelatedInputsOutputs(
             ItemVectorPartitionCollection itemVectorsInTargetInputs,
             ItemVectorPartitionCollection itemVectorsInTargetOutputs,
             List<string> itemVectorsReferencedInBothTargetInputsAndOutputs,
             out ItemDictionary<ProjectItemInstance> changedTargetInputs,
-            out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
-        )
+            out ItemDictionary<ProjectItemInstance> upToDateTargetInputs)
         {
             DependencyAnalysisResult result = DependencyAnalysisResult.SkipUpToDate;
 
@@ -722,13 +714,11 @@ out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
         /// <param name="discreteItemsInTargetInputs"></param>
         /// <param name="targetOutputItemSpecs"></param>
         /// <returns>Indication of how to build the target.</returns>
-        private DependencyAnalysisResult PerformDependencyAnalysisIfDiscreteOutputs
-        (
+        private DependencyAnalysisResult PerformDependencyAnalysisIfDiscreteOutputs(
             ItemVectorPartitionCollection itemVectorsInTargetInputs,
             ItemVectorPartitionCollection itemVectorTransformsInTargetInputs,
             Dictionary<string, string> discreteItemsInTargetInputs,
-            List<string> targetOutputItemSpecs
-        )
+            List<string> targetOutputItemSpecs)
         {
             List<string> targetInputItemSpecs = GetItemSpecsFromItemVectors(itemVectorsInTargetInputs);
             targetInputItemSpecs.AddRange(GetItemSpecsFromItemVectors(itemVectorTransformsInTargetInputs));
@@ -780,15 +770,13 @@ List<string> targetOutputItemSpecs
         /// <param name="itemVectorTransforms">Collection for transforms if they should be collected separately, else null</param>
         /// <param name="discreteItems"></param>
         /// <param name="elementLocation"></param>
-        private void SeparateItemVectorsFromDiscreteItems
-        (
+        private void SeparateItemVectorsFromDiscreteItems(
             SemiColonTokenizer items,
             ItemBucket bucket,
             out ItemVectorPartitionCollection itemVectors,
             ItemVectorPartitionCollection itemVectorTransforms,
             out Dictionary<string, string> discreteItems,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             itemVectors = new ItemVectorPartitionCollection(MSBuildNameIgnoreCaseComparer.Default);
             discreteItems = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 8679287cd8a..62d75695da2 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -371,8 +371,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
             ParserOptions parserOptions = (_taskNode == null) ? ParserOptions.AllowPropertiesAndItemLists : ParserOptions.AllowAll;
             WorkUnitResult taskResult = new WorkUnitResult(WorkUnitResultCode.Failed, WorkUnitActionCode.Stop, null);
 
-            bool condition = ConditionEvaluator.EvaluateCondition
-                (
+            bool condition = ConditionEvaluator.EvaluateCondition(
                 _targetChildInstance.Condition,
                 parserOptions,
                 bucket.Expander,
@@ -494,11 +493,9 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                 {
                     ErrorUtilities.VerifyThrow(howToExecuteTask == TaskExecutionMode.InferOutputsOnly, "should be inferring");
 
-                    ErrorUtilities.VerifyThrow
-                        (
+                    ErrorUtilities.VerifyThrow(
                         GatherTaskOutputs(null, howToExecuteTask, bucket),
-                        "The method GatherTaskOutputs() should never fail when inferring task outputs."
-                        );
+                        "The method GatherTaskOutputs() should never fail when inferring task outputs.");
 
                     if (lookupHash != null)
                     {
@@ -629,14 +626,12 @@ private void LogSkippedTask(ItemBucket bucket, TaskExecutionMode howToExecuteTas
                         // Whilst we are within the processing of the task, we haven't actually started executing it, so
                         // our skip task message needs to be in the context of the target. However any errors should be reported
                         // at the point where the task appears in the project.
-                        _targetLoggingContext.LogComment
-                            (
+                        _targetLoggingContext.LogComment(
                             MessageImportance.Low,
                             "TaskSkippedFalseCondition",
                             _taskNode.Name,
                             _targetChildInstance.Condition,
-                            expanded
-                            );
+                            expanded);
                     }
                 }
             }
@@ -647,8 +642,7 @@ private void LogSkippedTask(ItemBucket bucket, TaskExecutionMode howToExecuteTas
         /// </summary>
         private void ExecuteIntrinsicTask(ItemBucket bucket)
         {
-            IntrinsicTask task = IntrinsicTask.InstantiateTask
-                (
+            IntrinsicTask task = IntrinsicTask.InstantiateTask(
                 _targetChildInstance,
                 _targetLoggingContext,
                 _buildRequestEntry.RequestConfiguration.Project,
@@ -929,8 +923,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                         // from failures in the task.
                         if (_continueOnError == ContinueOnError.WarnAndContinue)
                         {
-                            taskLoggingContext.LogTaskWarningFromException
-                            (
+                            taskLoggingContext.LogTaskWarningFromException(
                                 exceptionToLog,
                                 new BuildEventFileInfo(_targetChildInstance.Location),
                                 _taskNode.Name);
@@ -940,8 +933,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                         }
                         else
                         {
-                            taskLoggingContext.LogFatalTaskError
-                            (
+                            taskLoggingContext.LogFatalTaskError(
                                 exceptionToLog,
                                 new BuildEventFileInfo(_targetChildInstance.Location),
                                 _taskNode.Name);
@@ -1013,14 +1005,12 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                             settingString = bucket.Expander.ExpandIntoStringAndUnescape(_taskNode.ContinueOnError, ExpanderOptions.ExpandAll, _taskNode.ContinueOnErrorLocation); // expand embedded item vectors after expanding properties and item metadata
                         }
 
-                        taskLoggingContext.LogComment
-                        (
+                        taskLoggingContext.LogComment(
                             MessageImportance.Normal,
                             "TaskContinuedDueToContinueOnError",
                             "ContinueOnError",
                             _taskNode.Name,
-                            settingString
-                        );
+                            settingString);
 
                         actionCode = WorkUnitActionCode.Continue;
                     }
@@ -1089,8 +1079,7 @@ private bool GatherTaskOutputs(ITaskExecutionHost taskExecutionHost, TaskExecuti
             foreach (ProjectTaskInstanceChild taskOutputSpecification in _taskNode.Outputs)
             {
                 // if the task's outputs are supposed to be gathered
-                bool condition = ConditionEvaluator.EvaluateCondition
-                    (
+                bool condition = ConditionEvaluator.EvaluateCondition(
                     taskOutputSpecification.Condition,
                     ParserOptions.AllowAll,
                     bucket.Expander,
@@ -1117,16 +1106,14 @@ private bool GatherTaskOutputs(ITaskExecutionHost taskExecutionHost, TaskExecuti
                         outputTargetName = bucket.Expander.ExpandIntoStringAndUnescape(taskOutputItemInstance.ItemType, ExpanderOptions.ExpandAll, taskOutputItemInstance.ItemTypeLocation);
                         taskParameterName = taskOutputItemInstance.TaskParameter;
 
-                        ProjectErrorUtilities.VerifyThrowInvalidProject
-                        (
+                        ProjectErrorUtilities.VerifyThrowInvalidProject(
                             outputTargetName.Length > 0,
                             taskOutputItemInstance.ItemTypeLocation,
                             "InvalidEvaluatedAttributeValue",
                             outputTargetName,
                             taskOutputItemInstance.ItemType,
                             XMakeAttributes.itemName,
-                            XMakeElements.output
-                        );
+                            XMakeElements.output);
                     }
                     else
                     {
@@ -1137,31 +1124,27 @@ private bool GatherTaskOutputs(ITaskExecutionHost taskExecutionHost, TaskExecuti
                         outputTargetName = bucket.Expander.ExpandIntoStringAndUnescape(taskOutputPropertyInstance.PropertyName, ExpanderOptions.ExpandAll, taskOutputPropertyInstance.PropertyNameLocation);
                         taskParameterName = taskOutputPropertyInstance.TaskParameter;
 
-                        ProjectErrorUtilities.VerifyThrowInvalidProject
-                        (
+                        ProjectErrorUtilities.VerifyThrowInvalidProject(
                             outputTargetName.Length > 0,
                             taskOutputPropertyInstance.PropertyNameLocation,
                             "InvalidEvaluatedAttributeValue",
                             outputTargetName,
                             taskOutputPropertyInstance.PropertyName,
                             XMakeAttributes.propertyName,
-                            XMakeElements.output
-                        );
+                            XMakeElements.output);
                     }
 
                     string unexpandedTaskParameterName = taskParameterName;
                     taskParameterName = bucket.Expander.ExpandIntoStringAndUnescape(taskParameterName, ExpanderOptions.ExpandAll, taskOutputSpecification.TaskParameterLocation);
 
-                    ProjectErrorUtilities.VerifyThrowInvalidProject
-                    (
+                    ProjectErrorUtilities.VerifyThrowInvalidProject(
                         taskParameterName.Length > 0,
                         taskOutputSpecification.TaskParameterLocation,
                         "InvalidEvaluatedAttributeValue",
                         taskParameterName,
                         unexpandedTaskParameterName,
                         XMakeAttributes.taskParameter,
-                        XMakeElements.output
-                    );
+                        XMakeElements.output);
 
                     // if we're gathering outputs by .NET reflection
                     if (howToExecuteTask == TaskExecutionMode.ExecuteTaskAndGatherOutputs)
@@ -1196,15 +1179,13 @@ private bool GatherTaskOutputs(ITaskExecutionHost taskExecutionHost, TaskExecuti
         /// <param name="itemName">can be null</param>
         /// <param name="propertyName">can be null</param>
         /// <param name="bucket">The bucket for the batch.</param>
-        private void InferTaskOutputs
-        (
+        private void InferTaskOutputs(
             Lookup lookup,
             ProjectTaskInstanceChild taskOutputSpecification,
             string taskParameterName,
             string itemName,
             string propertyName,
-            ItemBucket bucket
-        )
+            ItemBucket bucket)
         {
             string taskParameterAttribute = _taskNode.GetParameter(taskParameterName);
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index d6ca0d77a27..2cb648a36f6 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -258,16 +258,14 @@ internal bool IsOutOfProc
         public bool BuildProjectFile(string projectFileName, string[] targetNames, System.Collections.IDictionary globalProperties, System.Collections.IDictionary targetOutputs, string toolsVersion)
         {
             VerifyActiveProxy();
-            return BuildProjectFilesInParallel
-            (
+            return BuildProjectFilesInParallel(
                 new string[] { projectFileName },
                 targetNames,
                 new IDictionary[] { globalProperties },
                 new IDictionary[] { targetOutputs },
                 new string[] { toolsVersion },
                 true,
-                false
-            );
+                false);
         }
 
         /// <summary>
@@ -425,8 +423,7 @@ public void LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs e)
                     // ContinueOnError is that a project author expects that the task might fail,
                     // but wants to ignore the failures.  This implies that we shouldn't be logging
                     // errors either, because you should never have a successful build with errors.
-                    BuildWarningEventArgs warningEvent = new BuildWarningEventArgs
-                            (
+                    BuildWarningEventArgs warningEvent = new BuildWarningEventArgs(
                                 e.Subcategory,
                                 e.Code,
                                 e.File,
@@ -436,8 +433,7 @@ public void LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs e)
                                 e.EndColumnNumber,
                                 e.Message,
                                 e.HelpKeyword,
-                                e.SenderName
-                            );
+                                e.SenderName);
 
                     warningEvent.BuildEventContext = _taskLoggingContext.BuildEventContext;
                     _taskLoggingContext.LoggingService.LogBuildEvent(warningEvent);
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 76465422559..fce5961ff10 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -668,8 +668,7 @@ private void ScheduleUnassignedRequests(List<ScheduleResponse> responses)
             // See if we are done.  We are done if there are no unassigned requests and no requests assigned to nodes.
             if (_schedulingData.UnscheduledRequestsCount == 0 &&
                 _schedulingData.ReadyRequestsCount == 0 &&
-                _schedulingData.BlockedRequestsCount == 0
-                )
+                _schedulingData.BlockedRequestsCount == 0)
             {
                 if (_schedulingData.ExecutingRequestsCount == 0 && _schedulingData.YieldingRequestsCount == 0)
                 {
@@ -1777,8 +1776,7 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
                                         requestAffinity,
                                         existingRequestAffinity,
                                         config.ProjectFullPath,
-                                        globalProperties
-                                        )));
+                                        globalProperties)));
                             response = GetResponseForResult(nodeForResults, request, result);
                             responses.Add(response);
                             continue;
@@ -2470,8 +2468,7 @@ private void WriteRecursiveSummary(ILoggingService loggingService, BuildEventCon
                 }
             }
 
-            loggingService.LogComment
-            (
+            loggingService.LogComment(
                 context,
                 MessageImportance.Normal,
                 "BuildHierarchyEntry",
@@ -2481,8 +2478,7 @@ private void WriteRecursiveSummary(ILoggingService loggingService, BuildEventCon
                 String.Format(CultureInfo.InvariantCulture, "{0:0.000}", request.GetTimeSpentInState(SchedulableRequestState.Executing).TotalSeconds),
                 String.Format(CultureInfo.InvariantCulture, "{0:0.000}", request.GetTimeSpentInState(SchedulableRequestState.Executing).TotalSeconds + request.GetTimeSpentInState(SchedulableRequestState.Blocked).TotalSeconds + request.GetTimeSpentInState(SchedulableRequestState.Ready).TotalSeconds),
                 _configCache[request.BuildRequest.ConfigurationId].ProjectFullPath,
-                String.Join(", ", request.BuildRequest.Targets)
-            );
+                String.Join(", ", request.BuildRequest.Targets));
 
             List<SchedulableRequest> childRequests = new List<SchedulableRequest>(_schedulingData.GetRequestsByHierarchy(request));
             childRequests.Sort(delegate (SchedulableRequest left, SchedulableRequest right)
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 7e46d3e31b6..6907710a59d 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -28,11 +28,11 @@ internal class SdkResolverLoader
         //  as an SDK resolver built for .NET Framework probably won't work on .NET Core, and vice versa.
         private readonly string AdditionalResolversFolder = Environment.GetEnvironmentVariable(
 #if NETFRAMEWORK
-            "MSBUILDADDITIONALSDKRESOLVERSFOLDER_NETFRAMEWORK"
+            "MSBUILDADDITIONALSDKRESOLVERSFOLDER_NETFRAMEWORK")
 #elif NET
-            "MSBUILDADDITIONALSDKRESOLVERSFOLDER_NET"
+            "MSBUILDADDITIONALSDKRESOLVERSFOLDER_NET")
 #endif
-            ) ?? Environment.GetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER");
+            ?? Environment.GetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER");
 
         internal virtual IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
         {
diff --git a/src/Build/BackEnd/Node/NativeMethods.cs b/src/Build/BackEnd/Node/NativeMethods.cs
index 66eb9b8f702..c99b50e4c7b 100644
--- a/src/Build/BackEnd/Node/NativeMethods.cs
+++ b/src/Build/BackEnd/Node/NativeMethods.cs
@@ -49,8 +49,7 @@ internal static class NativeMethods
         /// </summary>
         [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
         [return: MarshalAs(UnmanagedType.Bool)]
-        internal static extern bool CreateProcess
-        (
+        internal static extern bool CreateProcess(
             string lpApplicationName,
             string lpCommandLine,
             ref SECURITY_ATTRIBUTES lpProcessAttributes,
@@ -61,8 +60,7 @@ internal static extern bool CreateProcess
             IntPtr lpEnvironment,
             string lpCurrentDirectory,
             [In] ref STARTUP_INFO lpStartupInfo,
-            out PROCESS_INFORMATION lpProcessInformation
-        );
+            out PROCESS_INFORMATION lpProcessInformation);
 
         /// <summary>
         /// Structure that contains the startupinfo
diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index cec28e77c6e..0a7065b3337 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -53,16 +53,14 @@ internal class NodeConfiguration : INodePacket
         /// <param name="forwardingLoggers">The forwarding loggers.</param>
         /// <param name="appDomainSetup">The AppDomain setup information.</param>
         /// <param name="loggingNodeConfiguration">The logging configuration for the node.</param>
-        public NodeConfiguration
-            (
+        public NodeConfiguration(
             int nodeId,
             BuildParameters buildParameters,
             LoggerDescription[] forwardingLoggers,
 #if FEATURE_APPDOMAIN
             AppDomainSetup appDomainSetup,
 #endif
-            LoggingNodeConfiguration loggingNodeConfiguration
-            )
+            LoggingNodeConfiguration loggingNodeConfiguration)
         {
             _nodeId = nodeId;
             _buildParameters = buildParameters;
@@ -188,8 +186,7 @@ internal NodeConfiguration Clone()
 #if FEATURE_APPDOMAIN
                 , _appDomainSetup
 #endif
-                , _loggingNodeConfiguration
-                );
+                , _loggingNodeConfiguration);
         }
     }
 }
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index b0b4f1204e3..07a66c1e700 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -489,8 +489,7 @@ internal void LoadProjectIntoConfiguration(
         private void InitializeProject(BuildParameters buildParameters, Func<ProjectInstance> loadProjectFromFile)
         {
             if (_project == null || // building from file. Load project from file
-                _transferredProperties != null // need to overwrite particular properties, so load project from file and overwrite properties
-            )
+                _transferredProperties != null) // need to overwrite particular properties, so load project from file and overwrite properties
             {
                 Project = loadProjectFromFile.Invoke();
             }
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 211a9204a90..e8ea2570bd1 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -372,14 +372,12 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
                 // See if any required properties were not set
                 foreach (KeyValuePair<string, string> requiredParameter in requiredParameters)
                 {
-                    ProjectErrorUtilities.VerifyThrowInvalidProject
-                    (
+                    ProjectErrorUtilities.VerifyThrowInvalidProject(
                         setParameters.ContainsKey(requiredParameter.Key),
                         _taskLocation,
                         "RequiredPropertyNotSetError",
                         _taskName,
-                        requiredParameter.Key
-                    );
+                        requiredParameter.Key);
                 }
             }
 
@@ -409,24 +407,20 @@ bool ITaskExecutionHost.GatherTaskOutputs(string parameterName, ElementLocation
                 }
 
                 // flag an error if we find a parameter that has no .NET property equivalent
-                ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+                ProjectErrorUtilities.VerifyThrowInvalidProject(
                     parameter != null,
                     parameterLocation,
                     "UnexpectedTaskOutputAttribute",
                     parameterName,
-                    _taskName
-                );
+                    _taskName);
 
                 // output parameters must have their corresponding .NET properties marked with the Output attribute
-                ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+                ProjectErrorUtilities.VerifyThrowInvalidProject(
                     _taskFactoryWrapper.GetNamesOfPropertiesWithOutputAttribute.ContainsKey(parameterName),
                     parameterLocation,
                     "UnmarkedOutputTaskParameter",
                     parameter.Name,
-                    _taskName
-                );
+                    _taskName);
 
                 EnsureParameterInitialized(parameter, _batchBucket.Lookup);
 
@@ -442,27 +436,23 @@ bool ITaskExecutionHost.GatherTaskOutputs(string parameterName, ElementLocation
                 }
                 else
                 {
-                    ProjectErrorUtilities.ThrowInvalidProject
-                    (
+                    ProjectErrorUtilities.ThrowInvalidProject(
                         parameterLocation,
                         "UnsupportedTaskParameterTypeError",
                         parameter.PropertyType.FullName,
                         parameter.Name,
-                        _taskName
-                    );
+                        _taskName);
                 }
             }
             catch (InvalidOperationException e)
             {
                 // handle invalid TaskItems in task outputs
-                _targetLoggingContext.LogError
-                (
+                _targetLoggingContext.LogError(
                     new BuildEventFileInfo(parameterLocation),
                     "InvalidTaskItemsInTaskOutputs",
                     _taskName,
                     parameterName,
-                    e.Message
-                );
+                    e.Message);
 
                 gatheredGeneratedOutputsSuccessfully = false;
             }
@@ -473,33 +463,28 @@ bool ITaskExecutionHost.GatherTaskOutputs(string parameterName, ElementLocation
                 // Log the stack, so the task vendor can fix their code
                 // Log the task line number, whatever the value of ContinueOnError;
                 // because this will be a hard error anyway.
-                _targetLoggingContext.LogFatalTaskError
-                (
+                _targetLoggingContext.LogFatalTaskError(
                     e.InnerException,
                     new BuildEventFileInfo(parameterLocation),
                     _taskName);
 
                 // We do not recover from a task exception while getting outputs,
                 // so do not merely set gatheredGeneratedOutputsSuccessfully = false; here
-                ProjectErrorUtilities.ThrowInvalidProject
-                (
+                ProjectErrorUtilities.ThrowInvalidProject(
                     parameterLocation,
                     "FailedToRetrieveTaskOutputs",
                     _taskName,
                     parameterName,
-                    e.InnerException?.Message
-                );
+                    e.InnerException?.Message);
             }
             catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
             {
-                ProjectErrorUtilities.ThrowInvalidProject
-                (
+                ProjectErrorUtilities.ThrowInvalidProject(
                     parameterLocation,
                     "FailedToRetrieveTaskOutputs",
                     _taskName,
                     parameterName,
-                    e.Message
-                );
+                    e.Message);
             }
 
             return gatheredGeneratedOutputsSuccessfully;
@@ -753,15 +738,13 @@ ex is ArgumentException || // can't convert to bool
                     ex is FormatException || // bad string representation of a type
                     ex is OverflowException) // overflow when converting string representation of a numerical type
                 {
-                    ProjectErrorUtilities.ThrowInvalidProject
-                    (
+                    ProjectErrorUtilities.ThrowInvalidProject(
                         parameterLocation,
                         "InvalidTaskParameterValueError",
                         currentItem.ItemSpec,
                         parameter.Name,
                         parameterType.FullName,
-                        _taskName
-                    );
+                        _taskName);
                 }
 
                 throw;
@@ -859,13 +842,11 @@ private TaskFactoryWrapper FindTaskInRegistry(IDictionary<string, string> taskId
 
                             if (returnClass == null)
                             {
-                                _targetLoggingContext.LogError
-                                    (
+                                _targetLoggingContext.LogError(
                                         new BuildEventFileInfo(_taskLocation),
                                         "MissingTaskError",
                                         _taskName,
-                                        _projectInstance.TaskRegistry.Toolset.ToolsPath
-                                    );
+                                        _projectInstance.TaskRegistry.Toolset.ToolsPath);
 
                                 return null;
                             }
@@ -883,16 +864,14 @@ private TaskFactoryWrapper FindTaskInRegistry(IDictionary<string, string> taskId
                         taskIdentityParameters.TryGetValue(XMakeAttributes.runtime, out string taskRuntime);
                         taskIdentityParameters.TryGetValue(XMakeAttributes.architecture, out string taskArchitecture);
 
-                        _targetLoggingContext.LogError
-                            (
+                        _targetLoggingContext.LogError(
                                 new BuildEventFileInfo(_taskLocation),
                                 "TaskExistsButHasMismatchedIdentityError",
                                 _taskName,
                                 usingTaskRuntime ?? XMakeAttributes.MSBuildRuntimeValues.any,
                                 usingTaskArchitecture ?? XMakeAttributes.MSBuildArchitectureValues.any,
                                 taskRuntime ?? XMakeAttributes.MSBuildRuntimeValues.any,
-                                taskArchitecture ?? XMakeAttributes.MSBuildArchitectureValues.any
-                            );
+                                taskArchitecture ?? XMakeAttributes.MSBuildArchitectureValues.any);
 
                         // if we've logged this error, even though we've found something, we want to act like we didn't.  
                         return null;
@@ -959,39 +938,33 @@ private ITask InstantiateTask(IDictionary<string, string> taskIdentityParameters
             }
             catch (InvalidCastException e)
             {
-                _taskLoggingContext.LogError
-                (
+                _taskLoggingContext.LogError(
                     new BuildEventFileInfo(_taskLocation),
                     "TaskInstantiationFailureErrorInvalidCast",
                     _taskName,
                     _taskFactoryWrapper.TaskFactory.FactoryName,
-                    e.Message
-                );
+                    e.Message);
             }
             catch (TargetInvocationException e)
             {
                 // Exception thrown by the called code itself
                 // Log the stack, so the task vendor can fix their code
-                _taskLoggingContext.LogError
-                (
+                _taskLoggingContext.LogError(
                     new BuildEventFileInfo(_taskLocation),
                     "TaskInstantiationFailureError",
                     _taskName,
                     _taskFactoryWrapper.TaskFactory.FactoryName,
-                    Environment.NewLine + e.InnerException
-                );
+                    Environment.NewLine + e.InnerException);
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
                 // Reflection related exception
-                _taskLoggingContext.LogError
-                (
+                _taskLoggingContext.LogError(
                     new BuildEventFileInfo(_taskLocation),
                     "TaskInstantiationFailureError",
                     _taskName,
                     _taskFactoryWrapper.TaskFactory.FactoryName,
-                    e.Message
-                );
+                    e.Message);
             }
 
             return task;
@@ -1000,14 +973,12 @@ private ITask InstantiateTask(IDictionary<string, string> taskIdentityParameters
         /// <summary>
         /// Set the specified parameter based on its type.
         /// </summary>
-        private bool SetTaskParameter
-        (
+        private bool SetTaskParameter(
             string parameterName,
             string parameterValue,
             ElementLocation parameterLocation,
             bool isRequired,
-            out bool parameterSet
-        )
+            out bool parameterSet)
         {
             bool success = false;
             parameterSet = false;
@@ -1057,85 +1028,71 @@ out bool parameterSet
                     // try to set the parameter
                     if (TaskParameterTypeVerifier.IsValidScalarInputParameter(parameterType))
                     {
-                        success = InitializeTaskScalarParameter
-                            (
+                        success = InitializeTaskScalarParameter(
                             parameter,
                             parameterType,
                             parameterValue,
                             parameterLocation,
-                            out parameterSet
-                            );
+                            out parameterSet);
                     }
                     else if (TaskParameterTypeVerifier.IsValidVectorInputParameter(parameterType))
                     {
-                        success = InitializeTaskVectorParameter
-                            (
+                        success = InitializeTaskVectorParameter(
                             parameter,
                             parameterType,
                             parameterValue,
                             parameterLocation,
                             isRequired,
-                            out parameterSet
-                            );
+                            out parameterSet);
                     }
                     else
                     {
-                        _taskLoggingContext.LogError
-                            (
+                        _taskLoggingContext.LogError(
                             new BuildEventFileInfo(parameterLocation),
                             "UnsupportedTaskParameterTypeError",
                             parameterType.FullName,
                             parameter.Name,
-                            _taskName
-                            );
+                            _taskName);
                     }
 
                     if (!success)
                     {
                         // flag an error if the parameter could not be set
-                        _taskLoggingContext.LogError
-                            (
+                        _taskLoggingContext.LogError(
                             new BuildEventFileInfo(parameterLocation),
                             "InvalidTaskAttributeError",
                             parameterName,
                             parameterValue,
-                            _taskName
-                            );
+                            _taskName);
                     }
                 }
                 else
                 {
                     // flag an error if we find a parameter that has no .NET property equivalent
-                    _taskLoggingContext.LogError
-                        (
+                    _taskLoggingContext.LogError(
                         new BuildEventFileInfo(parameterLocation),
                         "UnexpectedTaskAttribute",
                         parameterName,
                         _taskName,
                         _taskFactoryWrapper.TaskFactoryLoadedType.LoadedAssemblyName.FullName,
-                        _taskFactoryWrapper.TaskFactoryLoadedType.Path
-                        );
+                        _taskFactoryWrapper.TaskFactoryLoadedType.Path);
                 }
             }
             catch (AmbiguousMatchException)
             {
-                _taskLoggingContext.LogError
-                    (
+                _taskLoggingContext.LogError(
                     new BuildEventFileInfo(parameterLocation),
                     "AmbiguousTaskParameterError",
                     _taskName,
-                    parameterName
-                    );
+                    parameterName);
             }
             catch (ArgumentException)
             {
-                ProjectErrorUtilities.ThrowInvalidProject
-                    (
+                ProjectErrorUtilities.ThrowInvalidProject(
                     parameterLocation,
                     "SetAccessorNotAvailableOnTaskParameter",
                     parameterName,
-                    _taskName
-                    );
+                    _taskName);
             }
 
             return success;
@@ -1144,14 +1101,12 @@ out parameterSet
         /// <summary>
         /// Given an instantiated task, this helper method sets the specified scalar parameter based on its type.
         /// </summary>
-        private bool InitializeTaskScalarParameter
-        (
+        private bool InitializeTaskScalarParameter(
             TaskPropertyInfo parameter,
             Type parameterType,
             string parameterValue,
             ElementLocation parameterLocation,
-            out bool taskParameterSet
-        )
+            out bool taskParameterSet)
         {
             taskParameterSet = false;
 
@@ -1176,15 +1131,13 @@ out bool taskParameterSet
                             // We only allow a single item to be passed into a parameter of ITaskItem.
 
                             // Some of the computation (expansion) here is expensive, so don't switch to VerifyThrowInvalidProject.
-                            ProjectErrorUtilities.ThrowInvalidProject
-                                (
+                            ProjectErrorUtilities.ThrowInvalidProject(
                                 parameterLocation,
                                 "CannotPassMultipleItemsIntoScalarParameter",
                                 _batchBucket.Expander.ExpandIntoStringAndUnescape(parameterValue, ExpanderOptions.ExpandAll, parameterLocation),
                                 parameter.Name,
                                 parameterType.FullName,
-                                _taskName
-                                );
+                                _taskName);
                         }
 
                         RecordItemForDisconnectIfNecessary(finalTaskItems[0]);
@@ -1217,15 +1170,13 @@ ex is ArgumentException || // can't convert to bool
                     ex is FormatException || // bad string representation of a type
                     ex is OverflowException) // overflow when converting string representation of a numerical type
                 {
-                    ProjectErrorUtilities.ThrowInvalidProject
-                    (
+                    ProjectErrorUtilities.ThrowInvalidProject(
                         parameterLocation,
                         "InvalidTaskParameterValueError",
                         _batchBucket.Expander.ExpandIntoStringAndUnescape(parameterValue, ExpanderOptions.ExpandAll, parameterLocation),
                         parameter.Name,
                         parameterType.FullName,
-                        _taskName
-                    );
+                        _taskName);
                 }
 
                 throw;
@@ -1274,15 +1225,13 @@ private void EnsureParameterInitialized(TaskPropertyInfo parameter, Lookup looku
         ///
         ///     "xxx@(CPPFiles)xxx"                         converts to     &lt;error&gt;
         /// </example>
-        private bool InitializeTaskVectorParameter
-        (
+        private bool InitializeTaskVectorParameter(
             TaskPropertyInfo parameter,
             Type parameterType,
             string parameterValue,
             ElementLocation parameterLocation,
             bool isRequired,
-            out bool taskParameterSet
-        )
+            out bool taskParameterSet)
         {
             ErrorUtilities.VerifyThrow(parameterValue != null, "Didn't expect null parameterValue in InitializeTaskVectorParameter");
 
@@ -1339,11 +1288,9 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete
         /// <summary>
         /// Given an instantiated task, this helper method sets the specified parameter
         /// </summary>
-        private bool InternalSetTaskParameter
-        (
+        private bool InternalSetTaskParameter(
             TaskPropertyInfo parameter,
-            object parameterValue
-        )
+            object parameterValue)
         {
             bool success = false;
 
@@ -1374,8 +1321,7 @@ object parameterValue
 
                 // Exception thrown by the called code itself
                 // Log the stack, so the task vendor can fix their code
-                _taskLoggingContext.LogFatalTaskError
-                (
+                _taskLoggingContext.LogFatalTaskError(
                     e.InnerException,
                     new BuildEventFileInfo(_taskLocation),
                     _taskName);
@@ -1384,8 +1330,7 @@ object parameterValue
             // InternalLoggerException is an arbitrary logger exception.
             catch (Exception e) when (e is not LoggerException && e is not InternalLoggerException && !ExceptionHandling.NotExpectedReflectionException(e))
             {
-                _taskLoggingContext.LogFatalTaskError
-                (
+                _taskLoggingContext.LogFatalTaskError(
                     e,
                     new BuildEventFileInfo(_taskLocation),
                     _taskName);
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index 3de6bee0c32..23034a6deb5 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -72,10 +72,8 @@ public ICollection<ProjectElement> Children
             [DebuggerStepThrough]
             get
             {
-                return new Collections.ReadOnlyCollection<ProjectElement>
-                    (
-                        new ProjectElementSiblingEnumerable(FirstChild)
-                    );
+                return new Collections.ReadOnlyCollection<ProjectElement>(
+                        new ProjectElementSiblingEnumerable(FirstChild));
             }
         }
 
@@ -87,10 +85,8 @@ public ICollection<ProjectElement> ChildrenReversed
             [DebuggerStepThrough]
             get
             {
-                return new Collections.ReadOnlyCollection<ProjectElement>
-                    (
-                        new ProjectElementSiblingEnumerable(LastChild, false /* reverse */)
-                    );
+                return new Collections.ReadOnlyCollection<ProjectElement>(
+                        new ProjectElementSiblingEnumerable(LastChild, false /* reverse */));
             }
         }
 
diff --git a/src/Build/Construction/ProjectOutputElement.cs b/src/Build/Construction/ProjectOutputElement.cs
index 92c23bd1274..744f3d5f82b 100644
--- a/src/Build/Construction/ProjectOutputElement.cs
+++ b/src/Build/Construction/ProjectOutputElement.cs
@@ -138,14 +138,12 @@ public string PropertyName
         /// </summary>
         internal static ProjectOutputElement CreateDisconnected(string taskParameter, string itemType, string propertyName, ProjectRootElement containingProject)
         {
-            ErrorUtilities.VerifyThrowArgument
-                (
+            ErrorUtilities.VerifyThrowArgument(
                 String.IsNullOrEmpty(itemType) ^ String.IsNullOrEmpty(propertyName),
                 "OM_EitherAttributeButNotBoth",
                 XMakeElements.output,
                 XMakeAttributes.propertyName,
-                XMakeAttributes.itemName
-                );
+                XMakeAttributes.itemName);
 
             XmlElementWithLocation element = containingProject.CreateElement(XMakeElements.output);
 
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index a8619927227..fe5e340773f 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -209,12 +209,10 @@ private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache,
         /// Assumes path is already normalized.
         /// May throw InvalidProjectFileException.
         /// </summary>
-        private ProjectRootElement
-            (
+        private ProjectRootElement(
                 string path,
                 ProjectRootElementCacheBase projectRootElementCache,
-                bool preserveFormatting
-            )
+                bool preserveFormatting)
         {
             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));
             ErrorUtilities.VerifyThrowInternalRooted(path);
@@ -2011,12 +2009,10 @@ private static ProjectRootElement OpenLoader(string path, ProjectRootElementCach
         /// If the file is in MSBuild format, may throw InvalidProjectFileException.
         /// If the file is a solution, will throw an IO-related exception if the file cannot be read.
         /// </summary>
-        private static ProjectRootElement CreateProjectFromPath
-            (
+        private static ProjectRootElement CreateProjectFromPath(
                 string projectFile,
                 ProjectRootElementCacheBase projectRootElementCache,
-                bool preserveFormatting
-            )
+                bool preserveFormatting)
         {
             ErrorUtilities.VerifyThrowInternalRooted(projectFile);
 
diff --git a/src/Build/Construction/ProjectTargetElement.cs b/src/Build/Construction/ProjectTargetElement.cs
index 95da474dceb..cf9a18df334 100644
--- a/src/Build/Construction/ProjectTargetElement.cs
+++ b/src/Build/Construction/ProjectTargetElement.cs
@@ -269,13 +269,11 @@ public string Returns
                     return;
                 }
 
-                XmlAttributeWithLocation returnsAttribute = ProjectXmlUtilities.SetOrRemoveAttribute
-                    (
+                XmlAttributeWithLocation returnsAttribute = ProjectXmlUtilities.SetOrRemoveAttribute(
                         XmlElement,
                         XMakeAttributes.returns,
                         value,
-                        true /* only remove the element if the value is null -- setting to empty string is OK */
-                    );
+                        true); /* only remove the element if the value is null -- setting to empty string is OK */
 
                 // if this target's Returns attribute is non-null, then there is at least one target in the 
                 // parent project that has the returns attribute.  
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index ce67004e11c..1e4cf2c5697 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -37,8 +37,7 @@ public sealed class SolutionFile
         // An example of a project line looks like this:
         //  Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ClassLibrary1", "ClassLibrary1\ClassLibrary1.csproj", "{05A5AD00-71B5-4612-AF2F-9EA9121C4111}"
         private static readonly Lazy<Regex> s_crackProjectLine = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 "^" // Beginning of line
                 + "Project\\(\"(?<PROJECTTYPEGUID>.*)\"\\)"
                 + "\\s*=\\s*" // Any amount of whitespace plus "=" plus any amount of whitespace
@@ -48,9 +47,7 @@ public sealed class SolutionFile
                 + "\\s*,\\s*" // Any amount of whitespace plus "," plus any amount of whitespace
                 + "\"(?<PROJECTGUID>.*)\""
                 + "$", // End-of-line
-                RegexOptions.Compiled
-                )
-            );
+                RegexOptions.Compiled));
 
         // An example of a property line looks like this:
         //      AspNetCompiler.VirtualPath = "/webprecompile"
@@ -58,16 +55,13 @@ public sealed class SolutionFile
         // one of their properties, <PROPERTYVALUE> may now have '=' in it. 
 
         private static readonly Lazy<Regex> s_crackPropertyLine = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 "^" // Beginning of line
                 + "(?<PROPERTYNAME>[^=]*)"
                 + "\\s*=\\s*" // Any amount of whitespace plus "=" plus any amount of whitespace
                 + "(?<PROPERTYVALUE>.*)"
                 + "$", // End-of-line
-                RegexOptions.Compiled
-                )
-            );
+                RegexOptions.Compiled));
 
         internal const int slnFileMinUpgradableVersion = 7; // Minimum version for MSBuild to give a nice message
         internal const int slnFileMinVersion = 9; // Minimum version for MSBuild to actually do anything useful
@@ -325,28 +319,24 @@ internal static void GetSolutionFileAndVisualStudioMajorVersions(string solution
 
                         if (!System.Version.TryParse(fileVersionFromHeader, out Version version))
                         {
-                            ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                                (
+                            ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                                     "SubCategoryForSolutionParsingErrors",
                                     new BuildEventFileInfo(solutionFile),
                                     "SolutionParseVersionMismatchError",
                                     slnFileMinUpgradableVersion,
-                                    slnFileMaxVersion
-                                );
+                                    slnFileMaxVersion);
                         }
 
                         solutionVersion = version.Major;
 
                         // Validate against our min & max
-                        ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile
-                            (
+                        ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                                 solutionVersion >= slnFileMinUpgradableVersion,
                                 "SubCategoryForSolutionParsingErrors",
                                 new BuildEventFileInfo(solutionFile),
                                 "SolutionParseVersionMismatchError",
                                 slnFileMinUpgradableVersion,
-                                slnFileMaxVersion
-                            );
+                                slnFileMaxVersion);
 
                         validVersionFound = true;
                     }
@@ -372,12 +362,10 @@ internal static void GetSolutionFileAndVisualStudioMajorVersions(string solution
             }
 
             // Didn't find the header in lines 1-4, so the solution file is invalid.
-            ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                (
+            ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                     "SubCategoryForSolutionParsingErrors",
                     new BuildEventFileInfo(solutionFile),
-                    "SolutionParseNoHeaderError"
-                 );
+                    "SolutionParseNoHeaderError");
         }
 
         private void ParseSolutionFilter(string solutionFilterFile)
@@ -388,14 +376,12 @@ private void ParseSolutionFilter(string solutionFilterFile)
                 _solutionFile = ParseSolutionFromSolutionFilter(solutionFilterFile, out JsonElement solution);
                 if (!FileSystems.Default.FileExists(_solutionFile))
                 {
-                    ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                    (
+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                         "SubCategoryForSolutionParsingErrors",
                         new BuildEventFileInfo(_solutionFile),
                         "SolutionFilterMissingSolutionError",
                         solutionFilterFile,
-                        _solutionFile
-                    );
+                        _solutionFile);
                 }
 
                 SolutionFileDirectory = Path.GetDirectoryName(_solutionFile);
@@ -408,15 +394,13 @@ private void ParseSolutionFilter(string solutionFilterFile)
             }
             catch (Exception e) when (e is JsonException || e is KeyNotFoundException || e is InvalidOperationException)
             {
-                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile
-                (
+                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                     false, /* Just throw the exception */
                     "SubCategoryForSolutionParsingErrors",
                     new BuildEventFileInfo(solutionFilterFile),
                     e,
                     "SolutionFilterJsonParsingError",
-                    solutionFilterFile
-                );
+                    solutionFilterFile);
             }
         }
 
@@ -432,15 +416,13 @@ internal static string ParseSolutionFromSolutionFilter(string solutionFilterFile
             }
             catch (Exception e) when (e is JsonException || e is KeyNotFoundException || e is InvalidOperationException)
             {
-                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile
-                (
+                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                     false, /* Just throw the exception */
                     "SubCategoryForSolutionParsingErrors",
                     new BuildEventFileInfo(solutionFilterFile),
                     e,
                     "SolutionFilterJsonParsingError",
-                    solutionFilterFile
-                );
+                    solutionFilterFile);
             }
             solution = new JsonElement();
             return string.Empty;
@@ -571,15 +553,13 @@ internal void ParseSolution()
                 {
                     if (!projectPaths.Contains(project))
                     {
-                        ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                        (
+                        ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                             "SubCategoryForSolutionParsingErrors",
                             new BuildEventFileInfo(FileUtilities.GetFullPath(project, Path.GetDirectoryName(_solutionFile))),
                             "SolutionFilterFilterContainsProjectNotInSolution",
                             _solutionFilterFile,
                             project,
-                            _solutionFile
-                        );
+                            _solutionFile);
                     }
                 }
             }
@@ -1062,12 +1042,10 @@ private void ValidateProjectRelativePath(ProjectInSolution proj)
         /// Takes a property name / value that comes from the SLN file for a Venus project, and
         /// stores it appropriately in our data structures.
         /// </summary>
-        private static void ParseAspNetCompilerProperty
-            (
+        private static void ParseAspNetCompilerProperty(
             ProjectInSolution proj,
             string propertyName,
-            string propertyValue
-            )
+            string propertyValue)
         {
             // What we expect to find in the SLN file is something that looks like this:
             //
@@ -1241,10 +1219,8 @@ string propertyValue
         /// <summary>
         /// Strips a single pair of leading/trailing double-quotes from a string.
         /// </summary>
-        private static string TrimQuotes
-            (
-            string property
-            )
+        private static string TrimQuotes(
+            string property)
         {
             // If the incoming string starts and ends with a double-quote, strip the double-quotes.
             if (!string.IsNullOrEmpty(property) && (property[0] == '"') && (property[property.Length - 1] == '"'))
@@ -1265,11 +1241,9 @@ string property
         /// </summary>
         /// <param name="firstLine"></param>
         /// <param name="proj"></param>
-        internal void ParseFirstProjectLine
-        (
+        internal void ParseFirstProjectLine(
             string firstLine,
-            ProjectInSolution proj
-        )
+            ProjectInSolution proj)
         {
             Match match = s_crackProjectLine.Value.Match(firstLine);
             ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(match.Success, "SubCategoryForSolutionParsingErrors",
@@ -1548,8 +1522,7 @@ internal void ProcessProjectConfigurationSection(Dictionary<string, string> rawP
                             var projectConfiguration = new ProjectConfigurationInSolution(
                                 configurationPlatformParts[0],
                                 (configurationPlatformParts.Length > 1) ? configurationPlatformParts[1] : string.Empty,
-                                rawProjectConfigurationsEntries.ContainsKey(entryNameBuild)
-                            );
+                                rawProjectConfigurationsEntries.ContainsKey(entryNameBuild));
 
                             project.SetProjectConfiguration(solutionConfiguration.FullName, projectConfiguration);
                         }
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 7bfceeffa27..b1db1c35e62 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -85,8 +85,7 @@ internal class SolutionProjectGenerator
             "ValidateSolutionConfiguration",
             "ValidateToolsVersions",
             "ValidateProjects",
-            "GetSolutionConfigurationContents"
-            );
+            "GetSolutionConfigurationContents");
 
 #if FEATURE_ASPNET_COMPILER
         /// <summary>
@@ -207,8 +206,7 @@ private SolutionProjectGenerator(
         /// <param name="sdkResolverService">An <see cref="ISdkResolverService"/> to use.</param>
         /// <param name="submissionId">The current build submission ID.</param>
         /// <returns>An array of ProjectInstances.  The first instance is the traversal project, the remaining are the metaprojects for each project referenced in the solution.</returns>
-        internal static ProjectInstance[] Generate
-            (
+        internal static ProjectInstance[] Generate(
             SolutionFile solution,
             IDictionary<string, string> globalProperties,
             string toolsVersionOverride,
@@ -218,8 +216,7 @@ internal static ProjectInstance[] Generate
             ISdkResolverService sdkResolverService = null,
             int submissionId = BuildEventContext.InvalidSubmissionId)
         {
-            SolutionProjectGenerator projectGenerator = new SolutionProjectGenerator
-                (
+            SolutionProjectGenerator projectGenerator = new SolutionProjectGenerator(
                 solution,
                 globalProperties,
                 toolsVersionOverride,
@@ -227,8 +224,7 @@ internal static ProjectInstance[] Generate
                 loggingService,
                 targetNames,
                 sdkResolverService,
-                submissionId
-                );
+                submissionId);
 
             return projectGenerator.Generate();
         }
@@ -314,14 +310,12 @@ internal static void AddPropertyGroupForSolutionConfiguration(ProjectRootElement
         /// <summary>
         /// Add a new error/warning/message tag into the given target
         /// </summary>
-        internal static ProjectTaskElement AddErrorWarningMessageElement
-            (
+        internal static ProjectTaskElement AddErrorWarningMessageElement(
             ProjectTargetElement target,
             string elementType,
             bool treatAsLiteral,
             string textResourceName,
-            params object[] args
-            )
+            params object[] args)
         {
             string text = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string code, out string helpKeyword, textResourceName, args);
 
@@ -409,13 +403,11 @@ private static string DetermineWrapperProjectToolsVersion(string toolsVersionOve
         /// the Copy task to copy all these files (or at least the ones that RAR determined should
         /// be copied local) into the web project's bin directory.
         /// </summary>
-        private static void AddTasksToCopyAllDependenciesIntoBinDir
-            (
+        private static void AddTasksToCopyAllDependenciesIntoBinDir(
             ProjectTargetInstance target,
             ProjectInSolution project,
             string referenceItemName,
-            string conditionDescribingValidConfigurations
-            )
+            string conditionDescribingValidConfigurations)
         {
             string copyLocalFilesItemName = referenceItemName + "_CopyLocalFiles";
             string targetFrameworkDirectoriesName = GenerateSafePropertyName(project, "_TargetFrameworkDirectories");
@@ -459,11 +451,9 @@ string conditionDescribingValidConfigurations
             // directory.
             ProjectTaskInstance copyTask = target.AddTask("Copy", conditionDescribingValidConfigurations, null);
             copyTask.SetParameter("SourceFiles", "@(" + copyLocalFilesItemName + ")");
-            copyTask.SetParameter
-                (
+            copyTask.SetParameter(
                 "DestinationFiles",
-                String.Format(CultureInfo.InvariantCulture, @"@({0}->'{1}%(DestinationSubDirectory)%(Filename)%(Extension)')", copyLocalFilesItemName, destinationFolder)
-                );
+                String.Format(CultureInfo.InvariantCulture, @"@({0}->'{1}%(DestinationSubDirectory)%(Filename)%(Extension)')", copyLocalFilesItemName, destinationFolder));
         }
 
         /// <summary>
@@ -473,12 +463,10 @@ string conditionDescribingValidConfigurations
         /// search all *.REFRESH files and extract fully-qualified absolute paths for
         /// each of the references.
         /// </summary>
-        private static void AddTasksToResolveAutoRefreshFileReferences
-            (
+        private static void AddTasksToResolveAutoRefreshFileReferences(
             ProjectTargetInstance target,
             ProjectInSolution project,
-            string referenceItemName
-            )
+            string referenceItemName)
         {
             string webRoot = "$(" + GenerateSafePropertyName(project, "AspNetPhysicalPath") + ")";
 
@@ -505,15 +493,13 @@ string referenceItemName
         /// <summary>
         /// Adds an MSBuild task to the specified target
         /// </summary>
-        private static ProjectTaskInstance AddMSBuildTaskInstance
-        (
+        private static ProjectTaskInstance AddMSBuildTaskInstance(
             ProjectTargetInstance target,
             string projectPath,
             string msbuildTargetName,
             string configurationName,
             string platformName,
-            bool specifyProjectToolsVersion
-        )
+            bool specifyProjectToolsVersion)
         {
             ProjectTaskInstance msbuildTask = target.AddTask("MSBuild", null, null);
             msbuildTask.SetParameter("Projects", EscapingUtilities.Escape(projectPath));
@@ -527,8 +513,7 @@ bool specifyProjectToolsVersion
                 CultureInfo.InvariantCulture,
                 "Configuration={0}; Platform={1}; BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)",
                 EscapingUtilities.Escape(configurationName),
-                EscapingUtilities.Escape(platformName)
-            );
+                EscapingUtilities.Escape(platformName));
 
             msbuildTask.SetParameter("Properties", additionalProperties);
             if (specifyProjectToolsVersion)
@@ -544,11 +529,9 @@ bool specifyProjectToolsVersion
         /// that can safely be used as an XML element name, and is also unique to that project (by
         /// embedding the project's GUID into the property name.
         /// </summary>
-        private static string GenerateSafePropertyName
-            (
+        private static string GenerateSafePropertyName(
             ProjectInSolution proj,
-            string propertyName
-            )
+            string propertyName)
         {
             // XML element names cannot contain curly braces, so get rid of them from the project guid.
             string projectGuid = proj.ProjectGuid.Substring(1, proj.ProjectGuid.Length - 2);
@@ -585,15 +568,13 @@ private static string MakeIntoSafeItemName(string name)
         /// <summary>
         /// Add a new error/warning/message tag into the given target
         /// </summary>
-        private static ProjectTaskInstance AddErrorWarningMessageInstance
-            (
+        private static ProjectTaskInstance AddErrorWarningMessageInstance(
             ProjectTargetInstance target,
             string condition,
             string elementType,
             bool treatAsLiteral,
             string textResourceName,
-            params object[] args
-            )
+            params object[] args)
         {
             string text = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string code, out string helpKeyword, textResourceName, args);
 
@@ -627,13 +608,11 @@ params object[] args
         /// </remarks>
         private static string GetConditionStringForConfiguration(SolutionConfigurationInSolution configuration)
         {
-            return string.Format
-                (
+            return string.Format(
                 CultureInfo.InvariantCulture,
                 " ('$(Configuration)' == '{0}') and ('$(Platform)' == '{1}') ",
                 EscapingUtilities.Escape(configuration.ConfigurationName),
-                EscapingUtilities.Escape(configuration.PlatformName)
-                );
+                EscapingUtilities.Escape(configuration.PlatformName));
         }
 
         /// <summary>
@@ -707,13 +686,11 @@ private static bool WouldProjectBuild(SolutionFile solutionFile, string selected
         private ProjectInstance[] Generate()
         {
             // Validate against our minimum for upgradable projects
-            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile
-                (
+            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                 _solutionFile.Version >= SolutionFile.slnFileMinVersion,
                 "SubCategoryForSolutionParsingErrors",
                 new BuildEventFileInfo(_solutionFile.FullPath),
-                "SolutionParseUpgradeNeeded"
-                );
+                "SolutionParseUpgradeNeeded");
 
             // This is needed in order to make decisions about tools versions such as whether to put a 
             // ToolsVersion parameter on <MSBuild> task tags and what MSBuildToolsPath to use when 
@@ -1008,8 +985,7 @@ private ProjectInstance CreateTraversalInstance(string wrapperProjectToolsVersio
             traversalProject.FullPath = path;
 
             // Create the instance.  From this point forward we can evaluate conditions against the traversal project directly.
-            var traversalInstance = new ProjectInstance
-                (
+            var traversalInstance = new ProjectInstance(
                 traversalProject,
                 _globalProperties,
                 explicitToolsVersionSpecified ? wrapperProjectToolsVersion : null,
@@ -1017,8 +993,7 @@ private ProjectInstance CreateTraversalInstance(string wrapperProjectToolsVersio
                 _solutionFile.VisualStudioVersion,
                 new ProjectCollection(),
                 _sdkResolverService,
-                _submissionId
-                );
+                _submissionId);
 
             // Traversal meta project entire state has to be serialized as it was generated and hence
             // does not have disk representation to load project from.
@@ -1168,14 +1143,12 @@ private bool CanBuildDirectly(ProjectInstance traversalProject, ProjectInSolutio
                 {
                     if (!_solutionFile.ProjectsByGuid.TryGetValue(dependencyProjectGuid, out ProjectInSolution dependencyProject))
                     {
-                        ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                            (
+                        ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                             "SubCategoryForSolutionParsingErrors",
                             new BuildEventFileInfo(traversalProject.FullPath),
                             "SolutionParseProjectDepNotFoundError",
                             projectToAdd.ProjectGuid,
-                            dependencyProjectGuid
-                            );
+                            dependencyProjectGuid);
                     }
 
                     if (WouldProjectBuild(_solutionFile, _selectedSolutionConfiguration, dependencyProject, projectConfiguration))
@@ -1240,13 +1213,11 @@ private ProjectInstance CreateMetaproject(ProjectInstance traversalProject, Proj
             if (project.ProjectType == SolutionProjectType.WebProject)
             {
 #if !FEATURE_ASPNET_COMPILER
-                ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                    (
+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                     "SubCategoryForSolutionParsingErrors",
                     new BuildEventFileInfo(_solutionFile.FullPath),
                     "AspNetCompiler.UnsupportedMSBuildVersion",
-                    project.ProjectName
-                    );
+                    project.ProjectName);
 #else
                 AddMetaprojectTargetForWebProject(traversalProject, metaprojectInstance, project, null);
                 AddMetaprojectTargetForWebProject(traversalProject, metaprojectInstance, project, "Clean");
@@ -1328,14 +1299,12 @@ private void AddMetaprojectReferenceItems(ProjectInstance traversalProject, Proj
             {
                 if (!_solutionFile.ProjectsByGuid.TryGetValue(dependencyProjectGuid, out ProjectInSolution dependencyProject))
                 {
-                    ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                        (
+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                         "SubCategoryForSolutionParsingErrors",
                         new BuildEventFileInfo(traversalProject.FullPath),
                         "SolutionParseProjectDepNotFoundError",
                         project.ProjectGuid,
-                        dependencyProjectGuid
-                        );
+                        dependencyProjectGuid);
                 }
                 else
                 {
@@ -1498,15 +1467,13 @@ private void AddMetaprojectTargetForWebProject(ProjectInstance traversalProject,
                     // of referenced projects.
                     foreach (SolutionConfigurationInSolution solutionConfiguration in _solutionFile.SolutionConfigurations)
                     {
-                        AddResolveProjectReferenceTasks
-                            (
+                        AddResolveProjectReferenceTasks(
                             traversalProject,
                             newTarget,
                             project,
                             solutionConfiguration,
                             referenceItemName.ToString(),
-                            out _
-                            );
+                            out _);
                     }
                 }
 
@@ -1523,26 +1490,22 @@ out _
                 // Add a call to the <Message> task, conditioned on having an *invalid* Configuration.  The
                 // message says that we're skipping the Venus project because it's either not enabled
                 // for precompilation, or doesn't support the given configuration.
-                AddErrorWarningMessageInstance
-                    (
+                AddErrorWarningMessageInstance(
                     newTarget,
                     "!(" + conditionDescribingValidConfigurations + ")",
                     XMakeElements.message,
                     false,
-                    "SolutionVenusProjectSkipped"
-                    );
+                    "SolutionVenusProjectSkipped");
             }
         }
 
         /// <summary>
         /// Helper method to add a call to the AspNetCompiler task into the given target.
         /// </summary>
-        private void AddTaskForAspNetCompiler
-            (
+        private void AddTaskForAspNetCompiler(
             ProjectTargetInstance target,
             ProjectInSolution project,
-            string conditionDescribingValidConfigurations
-            )
+            string conditionDescribingValidConfigurations)
         {
             // Add a call to the AspNetCompiler task, conditioned on having a valid Configuration.
             ProjectTaskInstance newTask = target.AddTask("AspNetCompiler", conditionDescribingValidConfigurations, null);
@@ -1566,15 +1529,13 @@ string conditionDescribingValidConfigurations
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
-                ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                    (
+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                     new BuildEventFileInfo(_solutionFile.FullPath),
                     e,
                     "AspNetCompiler.InvalidTargetFrameworkMonikerFromException",
                     project.ProjectName,
                     project.TargetFrameworkMoniker,
-                    e.Message
-                    );
+                    e.Message);
             }
         }
 
@@ -1585,25 +1546,21 @@ private void ValidateTargetFrameworkForWebProject(ProjectInSolution project)
 
             if (targetFramework.Version > _version40)
             {
-                _loggingService.LogComment
-                    (
+                _loggingService.LogComment(
                     _projectBuildEventContext,
                     MessageImportance.Low,
                     "AspNetCompiler.TargetingHigherFrameworksDefaultsTo40",
                     project.ProjectName,
-                    targetFramework.Version.ToString()
-                    );
+                    targetFramework.Version.ToString());
             }
             if (!isDotNetFramework)
             {
-                ProjectFileErrorUtilities.ThrowInvalidProjectFile
-                    (
+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                     "SubCategoryForSolutionParsingErrors",
                     new BuildEventFileInfo(_solutionFile.FullPath),
                     "AspNetCompiler.InvalidTargetFrameworkMonikerNotDotNET",
                     project.ProjectName,
-                    project.TargetFrameworkMoniker
-                    );
+                    project.TargetFrameworkMoniker);
             }
         }
 
@@ -1618,13 +1575,11 @@ private void SetToolPathForAspNetCompilerTask(ProjectInSolution project, Project
             Version aspnetCompilerVersion = shouldDefaultToVersion40 ? _version40 : _version20;
             string aspnetCompilerPath = FrameworkLocationHelper.GetPathToDotNetFramework(aspnetCompilerVersion);
 
-            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile
-                (
+            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                 aspnetCompilerPath != null,
                 "SubCategoryForSolutionParsingErrors",
                 new BuildEventFileInfo(_solutionFile.FullPath),
-                "AspNetCompiler.20NotInstalled"
-                );
+                "AspNetCompiler.20NotInstalled");
 
             task.SetParameter("ToolPath", aspnetCompilerPath);
         }
@@ -1632,15 +1587,13 @@ private void SetToolPathForAspNetCompilerTask(ProjectInSolution project, Project
         /// <summary>
         /// Adds MSBuild tasks to a project target to pre-resolve its project references
         /// </summary>
-        private void AddResolveProjectReferenceTasks
-        (
+        private void AddResolveProjectReferenceTasks(
             ProjectInstance traversalProject,
             ProjectTargetInstance target,
             ProjectInSolution project,
             SolutionConfigurationInSolution solutionConfiguration,
             string outputReferenceItemName,
-            out string addedReferenceGuids
-        )
+            out string addedReferenceGuids)
         {
             var referenceGuids = new StringBuilder();
 
@@ -1668,15 +1621,13 @@ out string addedReferenceGuids
                             bool specifyProjectToolsVersion =
                                 !String.Equals(traversalProject.ToolsVersion, "2.0", StringComparison.OrdinalIgnoreCase);
 
-                            ProjectTaskInstance msbuildTask = AddMSBuildTaskInstance
-                                (
+                            ProjectTaskInstance msbuildTask = AddMSBuildTaskInstance(
                                 target,
                                 referencedProject.RelativePath,
                                 "GetTargetPath",
                                 referencedProjectConfiguration.ConfigurationName,
                                 referencedProjectConfiguration.PlatformName,
-                                specifyProjectToolsVersion
-                                );
+                                specifyProjectToolsVersion);
                             msbuildTask.AddOutputItem("TargetOutputs", outputReferenceItemNameWithSuffix, null);
                         }
 
@@ -1705,15 +1656,13 @@ out string addedReferenceGuids
         /// Add a PropertyGroup to the project for a particular Asp.Net configuration.  This PropertyGroup
         /// will have the correct values for all the Asp.Net properties for this project and this configuration.
         /// </summary>
-        private static void AddPropertyGroupForAspNetConfiguration
-            (
+        private static void AddPropertyGroupForAspNetConfiguration(
             ProjectInstance traversalProject,
             ProjectInstance metaprojectInstance,
             ProjectInSolution project,
             string configurationName,
             AspNetCompilerParameters aspNetCompilerParameters,
-            string solutionFile
-            )
+            string solutionFile)
         {
             // If the configuration doesn't match, don't add the properties.
             if (!traversalProject.EvaluateCondition(String.Format(CultureInfo.InvariantCulture, " '$(AspNetConfiguration)' == '{0}' ", EscapingUtilities.Escape(configurationName))))
@@ -1741,8 +1690,7 @@ string solutionFile
                 // Trim the trailing slash if one exists.
                 if (
                         (aspNetPhysicalPath[aspNetPhysicalPath.Length - 1] == Path.AltDirectorySeparatorChar) ||
-                        (aspNetPhysicalPath[aspNetPhysicalPath.Length - 1] == Path.DirectorySeparatorChar)
-                    )
+                        (aspNetPhysicalPath[aspNetPhysicalPath.Length - 1] == Path.DirectorySeparatorChar))
                 {
                     aspNetPhysicalPath = aspNetPhysicalPath.Substring(0, aspNetPhysicalPath.Length - 1);
                 }
@@ -1756,16 +1704,14 @@ string solutionFile
                 }
                 catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
                 {
-                    ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile
-                        (
+                    ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
                         false,
                         "SubCategoryForSolutionParsingErrors",
                         new BuildEventFileInfo(solutionFile),
                         e,
                         "SolutionParseInvalidProjectFileName",
                         project.RelativePath,
-                        e.Message
-                        );
+                        e.Message);
                 }
 
                 if (!String.IsNullOrEmpty(lastFolderInPhysicalPath))
@@ -1786,11 +1732,9 @@ string solutionFile
                         // Make sure the path we are appending to has no leading slash to prevent double slashes.
                         string publishWebsitePath = EscapingUtilities.Escape(WebProjectOverrideFolder) + Path.DirectorySeparatorChar + EscapingUtilities.Escape(lastFolderInPhysicalPath) + Path.DirectorySeparatorChar;
 
-                        metaprojectInstance.SetProperty
-                            (
+                        metaprojectInstance.SetProperty(
                             GenerateSafePropertyName(project, "AspNetTargetPath"),
-                            outDirValue + publishWebsitePath
-                            );
+                            outDirValue + publishWebsitePath);
                     }
                 }
             }
@@ -1915,57 +1859,49 @@ private void AddMetaprojectTargetForUnknownProjectType(ProjectInstance traversal
                         {
                             // we haven't encountered any problems accessing the project file in the past, but do not support
                             // building this project type
-                            AddErrorWarningMessageInstance
-                            (
+                            AddErrorWarningMessageInstance(
                                 newTarget,
                                 null,
                                 XMakeElements.warning,
                                 true,
                                 "SolutionParseUnknownProjectType",
-                                project.RelativePath
-                            );
+                                project.RelativePath);
                         }
                         else
                         {
                             // this project file may be of supported type, but we have encountered problems accessing it
-                            AddErrorWarningMessageInstance
-                            (
+                            AddErrorWarningMessageInstance(
                                 newTarget,
                                 null,
                                 XMakeElements.warning,
                                 true,
                                 "SolutionParseErrorReadingProject",
                                 project.RelativePath,
-                                unknownProjectTypeErrorMessage
-                            );
+                                unknownProjectTypeErrorMessage);
                         }
                     }
                     else
                     {
-                        AddErrorWarningMessageInstance
-                        (
+                        AddErrorWarningMessageInstance(
                             newTarget,
                             null,
                             XMakeElements.message,
                             true,
                             "SolutionProjectSkippedForBuilding",
                             project.ProjectName,
-                            solutionConfiguration.FullName
-                        );
+                            solutionConfiguration.FullName);
                     }
                 }
                 else
                 {
-                    AddErrorWarningMessageInstance
-                    (
+                    AddErrorWarningMessageInstance(
                         newTarget,
                         null,
                         XMakeElements.warning,
                         true,
                         "SolutionProjectConfigurationMissing",
                         project.ProjectName,
-                        solutionConfiguration.FullName
-                    );
+                        solutionConfiguration.FullName);
                 }
             }
         }
@@ -1987,30 +1923,26 @@ private void AddValidateProjectsTarget(ProjectInstance traversalProject, List<Pr
                     {
                         if (!projectConfiguration.IncludeInBuild)
                         {
-                            AddErrorWarningMessageInstance
-                                (
+                            AddErrorWarningMessageInstance(
                                 newTarget,
                                 condition,
                                 XMakeElements.message,
                                 true,
                                 "SolutionProjectSkippedForBuilding",
                                 project.ProjectName,
-                                solutionConfiguration.FullName
-                                );
+                                solutionConfiguration.FullName);
                         }
                     }
                     else
                     {
-                        AddErrorWarningMessageInstance
-                            (
+                        AddErrorWarningMessageInstance(
                             newTarget,
                             condition,
                             XMakeElements.warning,
                             true,
                             "SolutionProjectConfigurationMissing",
                             project.ProjectName,
-                            solutionConfiguration.FullName
-                            );
+                            solutionConfiguration.FullName);
                     }
                 }
             }
@@ -2236,15 +2168,13 @@ private void ScanProjectDependencies(string childProjectToolsVersion, string ful
                     }
                     catch (Exception e) when (!ExceptionHandling.IsCriticalException(e)) // We don't want any problems scanning the project file to result in aborting the build.
                     {
-                        _loggingService.LogWarning
-                            (
+                        _loggingService.LogWarning(
                             _projectBuildEventContext,
                             "SubCategoryForSolutionParsingErrors",
                             new BuildEventFileInfo(project.RelativePath),
                             "SolutionScanProjectDependenciesFailed",
                             project.RelativePath,
-                            e.Message
-                            );
+                            e.Message);
                     }
                 }
             }
@@ -2266,15 +2196,13 @@ private void AddDependencyByGuid(ProjectInSolution project, string dependencyGui
                 }
                 else
                 {
-                    _loggingService.LogWarning
-                        (
+                    _loggingService.LogWarning(
                         _projectBuildEventContext,
                         "SubCategoryForSolutionParsingErrors",
                         new BuildEventFileInfo(_solutionFile.FullPath),
                         "SolutionParseProjectDepNotFoundError",
                         project.ProjectGuid,
-                        dependencyGuid
-                        );
+                        dependencyGuid);
                 }
             }
         }
@@ -2410,35 +2338,29 @@ private void AddValidateSolutionConfigurationTarget(ProjectInstance traversalPro
 
             if (_solutionFile.SolutionConfigurations.Count > 0)
             {
-                AddErrorWarningMessageInstance
-                    (
+                AddErrorWarningMessageInstance(
                     initialTarget,
                     "('$(CurrentSolutionConfigurationContents)' == '') and ('$(SkipInvalidConfigurations)' != 'true')",
                     XMakeElements.error,
                     false /* do not treat as literal */,
                     "SolutionInvalidSolutionConfiguration",
-                    "$(Configuration)|$(Platform)"
-                    );
+                    "$(Configuration)|$(Platform)");
 
-                AddErrorWarningMessageInstance
-                    (
+                AddErrorWarningMessageInstance(
                     initialTarget,
                     "('$(CurrentSolutionConfigurationContents)' == '') and ('$(SkipInvalidConfigurations)' == 'true')",
                     XMakeElements.warning,
                     false /* do not treat as literal */,
                     "SolutionInvalidSolutionConfiguration",
-                    "$(Configuration)|$(Platform)"
-                    );
+                    "$(Configuration)|$(Platform)");
 
-                AddErrorWarningMessageInstance
-                    (
+                AddErrorWarningMessageInstance(
                     initialTarget,
                     "'$(CurrentSolutionConfigurationContents)' != ''",
                     XMakeElements.message,
                     false /* do not treat as literal */,
                     "SolutionBuildingSolutionConfiguration",
-                    "$(Configuration)|$(Platform)"
-                    );
+                    "$(Configuration)|$(Platform)");
             }
         }
 
@@ -2448,15 +2370,13 @@ private void AddValidateSolutionConfigurationTarget(ProjectInstance traversalPro
         private static void AddValidateToolsVersionsTarget(ProjectInstance traversalProject)
         {
             ProjectTargetInstance validateToolsVersionsTarget = traversalProject.AddTarget("ValidateToolsVersions", null, null, null, null, null, null, null, null, false /* legacy target returns behaviour */);
-            ProjectTaskInstance toolsVersionErrorTask = AddErrorWarningMessageInstance
-                (
+            ProjectTaskInstance toolsVersionErrorTask = AddErrorWarningMessageInstance(
                 validateToolsVersionsTarget,
                 "'$(MSBuildToolsVersion)' == '2.0' and ('$(ProjectToolsVersion)' != '2.0' and '$(ProjectToolsVersion)' != '')",
                 XMakeElements.error,
                 false /* do not treat as literal */,
                 "SolutionToolsVersionDoesNotSupportProjectToolsVersion",
-                "$(MSBuildToolsVersion)"
-                );
+                "$(MSBuildToolsVersion)");
         }
 
         /// <summary> Adds the target to fetch solution configuration contents for given configuration|platform combo. </summary>
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index b6d40f0987c..af3cc7836a9 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -4296,14 +4296,12 @@ public void InitializeForEvaluation(IToolsetProvider toolsetProvider, Evaluation
                     toolsVersionLocation = Project.Xml.ToolsVersionLocation;
                 }
 
-                string toolsVersionToUse = Utilities.GenerateToolsVersionToUse
-                (
+                string toolsVersionToUse = Utilities.GenerateToolsVersionToUse(
                     ExplicitToolsVersion,
                     Project.Xml.ToolsVersion,
                     Project.ProjectCollection.GetToolset,
                     Project.ProjectCollection.DefaultToolsVersion,
-                    out var usingDifferentToolsVersionFromProjectFile
-                );
+                    out var usingDifferentToolsVersionFromProjectFile);
 
                 UsingDifferentToolsVersionFromProjectFile = usingDifferentToolsVersionFromProjectFile;
 
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 020f6439d7e..d9ddb46c7d0 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1780,8 +1780,7 @@ private void InitializeToolsetCollection(
 #if FEATURE_WIN32_REGISTRY
                 ToolsetRegistryReader registryReader = null,
 #endif
-                ToolsetConfigurationReader configReader = null
-                )
+                ToolsetConfigurationReader configReader = null)
         {
             _toolsets = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index ba6ad15f653..64d3160527b 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -124,8 +124,7 @@ internal ProjectItem(
                              string evaluatedIncludeEscaped,
                              string evaluatedIncludeBeforeWildcardExpansionEscaped,
                              PropertyDictionary<ProjectMetadata> directMetadataCloned,
-                             List<ProjectItemDefinition> inheritedItemDefinitionsCloned
-                            )
+                             List<ProjectItemDefinition> inheritedItemDefinitionsCloned)
         {
             ErrorUtilities.VerifyThrowInternalNull(project, nameof(project));
             ErrorUtilities.VerifyThrowArgumentNull(xml, nameof(xml));
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index aed480e2f4e..c5c26c2c542 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -562,8 +562,7 @@ internal static bool Dev10IsInstalled
                                     RegistryKeyWrapper.KeyExists(Dev10VBExpressInstallKeyRegistryPath, RegistryHive.LocalMachine, RegistryView.Registry32) ||
                                     RegistryKeyWrapper.KeyExists(Dev10VCExpressInstallKeyRegistryPath, RegistryHive.LocalMachine, RegistryView.Registry32) ||
                                     RegistryKeyWrapper.KeyExists(Dev10VWDExpressInstallKeyRegistryPath, RegistryHive.LocalMachine, RegistryView.Registry32) ||
-                                    RegistryKeyWrapper.KeyExists(Dev10LightSwitchInstallKeyRegistryPath, RegistryHive.LocalMachine, RegistryView.Registry32)
-                                )
+                                    RegistryKeyWrapper.KeyExists(Dev10LightSwitchInstallKeyRegistryPath, RegistryHive.LocalMachine, RegistryView.Registry32))
                         {
                             s_dev10IsInstalled = true;
                         }
@@ -710,30 +709,26 @@ internal static string[] GetTaskFiles(DirectoryGetFiles getFiles, ILoggingServic
 
                 if (defaultTasksFiles.Length == 0)
                 {
-                    loggingServices.LogWarning
-                        (
+                    loggingServices.LogWarning(
                         buildEventContext,
                         null,
                         new BuildEventFileInfo(/* this warning truly does not involve any file */ String.Empty),
                         taskFileWarning,
                         taskPattern,
                         searchPath,
-                        String.Empty
-                        );
+                        String.Empty);
                 }
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
-                loggingServices.LogWarning
-                    (
+                loggingServices.LogWarning(
                     buildEventContext,
                     null,
                     new BuildEventFileInfo(/* this warning truly does not involve any file */ String.Empty),
                     taskFileWarning,
                     taskPattern,
                     searchPath,
-                    e.Message
-                    );
+                    e.Message);
             }
 
             // Sort the file names to give a deterministic order
@@ -1073,16 +1068,13 @@ private void LoadAndRegisterFromTasksFile(string[] defaultTaskFiles, ILoggingSer
 
                         if (usingTask == null)
                         {
-                            ProjectErrorUtilities.ThrowInvalidProject
-                                (
+                            ProjectErrorUtilities.ThrowInvalidProject(
                                 elementXml.Location,
                                 "UnrecognizedElement",
-                                elementXml.XmlElement.Name
-                                );
+                                elementXml.XmlElement.Name);
                         }
 
-                        TaskRegistry.RegisterTasksFromUsingTaskElement<ProjectPropertyInstance, ProjectItemInstance>
-                            (
+                        TaskRegistry.RegisterTasksFromUsingTaskElement<ProjectPropertyInstance, ProjectItemInstance>(
                             loggingServices,
                             buildEventContext,
                             Path.GetDirectoryName(defaultTasksFile),
@@ -1090,8 +1082,7 @@ private void LoadAndRegisterFromTasksFile(string[] defaultTaskFiles, ILoggingSer
                             registry,
                             _expander,
                             ExpanderOptions.ExpandProperties,
-                            FileSystems.Default
-                            );
+                            FileSystems.Default);
                     }
                 }
                 catch (XmlException e)
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index 04e987866cf..1f77817510d 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -99,8 +99,7 @@ internal static string ReadAllToolsets(Dictionary<string, Toolset> toolsets, Pro
         /// Gathers toolset data from the registry and configuration file, if any.
         /// NOTE:  this method is internal for unit testing purposes only.
         /// </summary>
-        internal static string ReadAllToolsets
-            (
+        internal static string ReadAllToolsets(
             Dictionary<string, Toolset> toolsets,
 #if FEATURE_WIN32_REGISTRY
             ToolsetRegistryReader registryReader,
@@ -108,8 +107,7 @@ internal static string ReadAllToolsets
             ToolsetConfigurationReader configurationReader,
             PropertyDictionary<ProjectPropertyInstance> environmentProperties,
             PropertyDictionary<ProjectPropertyInstance> globalProperties,
-            ToolsetDefinitionLocations locations
-            )
+            ToolsetDefinitionLocations locations)
         {
             var initialProperties =
                 new PropertyDictionary<ProjectPropertyInstance>(environmentProperties);
@@ -356,15 +354,13 @@ void ReadConfigToolset()
         /// </summary>
         /// <remarks>Internal for unit testing only</remarks>
         /// <returns>the default tools version if available, or null otherwise</returns>
-        internal string ReadToolsets
-            (
+        internal string ReadToolsets(
             Dictionary<string, Toolset> toolsets,
             PropertyDictionary<ProjectPropertyInstance> globalProperties,
             PropertyDictionary<ProjectPropertyInstance> initialProperties,
             bool accumulateProperties,
             out string msBuildOverrideTasksPath,
-            out string defaultOverrideToolsVersion
-            )
+            out string defaultOverrideToolsVersion)
         {
             ErrorUtils.VerifyThrowArgumentNull(toolsets, "Toolsets");
 
@@ -416,13 +412,11 @@ out string defaultOverrideToolsVersion
         /// <summary>
         /// Reads all the toolsets and populates the given ToolsetCollection with them
         /// </summary>
-        private void ReadEachToolset
-            (
+        private void ReadEachToolset(
             Dictionary<string, Toolset> toolsets,
             PropertyDictionary<ProjectPropertyInstance> globalProperties,
             PropertyDictionary<ProjectPropertyInstance> initialProperties,
-            bool accumulateProperties
-            )
+            bool accumulateProperties)
         {
             foreach (ToolsetPropertyDefinition toolsVersion in ToolsVersions)
             {
@@ -482,13 +476,11 @@ string existingRootOrNull(string path)
         /// <summary>
         /// Reads the settings for a specified tools version
         /// </summary>
-        private Toolset ReadToolset
-            (
+        private Toolset ReadToolset(
             ToolsetPropertyDefinition toolsVersion,
             PropertyDictionary<ProjectPropertyInstance> globalProperties,
             PropertyDictionary<ProjectPropertyInstance> initialProperties,
-            bool accumulateProperties
-            )
+            bool accumulateProperties)
         {
             // Initial properties is the set of properties we're going to use to expand property expressions like $(foo)
             // in the values we read out of the registry or config file. We'll add to it as we pick up properties (including binpath)
@@ -673,12 +665,10 @@ private void EvaluateAndSetProperty(ToolsetPropertyDefinition property, Property
 
                 if (accumulateProperties)
                 {
-                    SetProperty
-                    (
+                    SetProperty(
                         new ToolsetPropertyDefinition(ReservedPropertyNames.toolsPath, toolsPath, property.Source),
                         initialProperties,
-                        globalProperties
-                    );
+                        globalProperties);
                 }
             }
             else if (String.Equals(property.Name, ReservedPropertyNames.binPath, StringComparison.OrdinalIgnoreCase))
@@ -688,12 +678,10 @@ private void EvaluateAndSetProperty(ToolsetPropertyDefinition property, Property
 
                 if (accumulateProperties)
                 {
-                    SetProperty
-                    (
+                    SetProperty(
                         new ToolsetPropertyDefinition(ReservedPropertyNames.binPath, binPath, property.Source),
                         initialProperties,
-                        globalProperties
-                    );
+                        globalProperties);
                 }
             }
             else if (ReservedPropertyNames.IsReservedProperty(property.Name))
diff --git a/src/Build/Errors/InternalLoggerException.cs b/src/Build/Errors/InternalLoggerException.cs
index e74ccd61994..dca15758fc1 100644
--- a/src/Build/Errors/InternalLoggerException.cs
+++ b/src/Build/Errors/InternalLoggerException.cs
@@ -80,15 +80,13 @@ public InternalLoggerException(string message, Exception innerException)
         /// <param name="errorCode"></param>
         /// <param name="helpKeyword"></param>
         /// <param name="initializationException"></param>
-        internal InternalLoggerException
-        (
+        internal InternalLoggerException(
             string message,
             Exception innerException,
             BuildEventArgs e,
             string errorCode,
             string helpKeyword,
-            bool initializationException
-         )
+            bool initializationException)
             : base(message, innerException)
         {
             ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(message), "Need error message.");
@@ -216,14 +214,12 @@ public bool InitializationException
         /// <param name="messageResourceName"></param>
         /// <param name="initializationException"></param>
         /// <param name="messageArgs"></param>
-        internal static void Throw
-        (
+        internal static void Throw(
             Exception innerException,
             BuildEventArgs e,
             string messageResourceName,
             bool initializationException,
-            params string[] messageArgs
-        )
+            params string[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
 
diff --git a/src/Build/Errors/InvalidProjectFileException.cs b/src/Build/Errors/InvalidProjectFileException.cs
index 3d984104bdf..265c6db4515 100644
--- a/src/Build/Errors/InvalidProjectFileException.cs
+++ b/src/Build/Errors/InvalidProjectFileException.cs
@@ -139,8 +139,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
         /// <param name="errorSubcategory">Error sub-category that describes the error (can be null).</param>
         /// <param name="errorCode">The error code (can be null).</param>
         /// <param name="helpKeyword">The F1-help keyword for the host IDE (can be null).</param>
-        public InvalidProjectFileException
-        (
+        public InvalidProjectFileException(
             string projectFile,
             int lineNumber,
             int columnNumber,
@@ -149,8 +148,7 @@ public InvalidProjectFileException
             string message,
             string errorSubcategory,
             string errorCode,
-            string helpKeyword
-        ) :
+            string helpKeyword) :
             this(projectFile, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, errorSubcategory, errorCode, helpKeyword, null)
         {
         }
@@ -169,8 +167,7 @@ string helpKeyword
         /// <param name="errorCode">The error code (can be null).</param>
         /// <param name="helpKeyword">The F1-help keyword for the host IDE (can be null).</param>
         /// <param name="innerException">Any inner exception. May be null.</param>
-        internal InvalidProjectFileException
-        (
+        internal InvalidProjectFileException(
             string projectFile,
             int lineNumber,
             int columnNumber,
@@ -180,8 +177,7 @@ internal InvalidProjectFileException
             string errorSubcategory,
             string errorCode,
             string helpKeyword,
-            Exception innerException
-        ) : base(message, innerException)
+            Exception innerException) : base(message, innerException)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectFile, nameof(projectFile));
             ErrorUtilities.VerifyThrowArgumentLength(message, nameof(message));
diff --git a/src/Build/Errors/InvalidToolsetDefinitionException.cs b/src/Build/Errors/InvalidToolsetDefinitionException.cs
index 3d516446388..85127919a62 100644
--- a/src/Build/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Build/Errors/InvalidToolsetDefinitionException.cs
@@ -126,11 +126,9 @@ public string ErrorCode
         /// </summary>
         /// <param name="resourceName"></param>
         /// <param name="args"></param>
-        internal static void Throw
-        (
+        internal static void Throw(
             string resourceName,
-            params string[] args
-        )
+            params string[] args)
         {
             Throw(null, resourceName, args);
         }
@@ -143,12 +141,10 @@ params string[] args
         /// is expensive, because memory is allocated for the array of arguments -- do
         /// not call this method repeatedly in performance-critical scenarios
         /// </summary>
-        internal static void Throw
-        (
+        internal static void Throw(
             Exception innerException,
             string resourceName,
-            params string[] args
-        )
+            params string[] args)
         {
 #if DEBUG
             ResourceUtilities.VerifyResourceStringExists(resourceName);
diff --git a/src/Build/Evaluation/ConditionEvaluator.cs b/src/Build/Evaluation/ConditionEvaluator.cs
index 183ce5117d6..b62d3e1216f 100644
--- a/src/Build/Evaluation/ConditionEvaluator.cs
+++ b/src/Build/Evaluation/ConditionEvaluator.cs
@@ -36,18 +36,13 @@ internal static class ConditionEvaluator
         /// concatenated together with a vertical bar, as in '
         ///     $(Configuration)|$(Platform)' == 'Debug|x86'
         /// </summary>
-        /// <param name="conditionedPropertiesTable"></param>
-        /// <param name="leftValue"></param>
-        /// <param name="rightValueExpanded"></param>
-        internal static void UpdateConditionedPropertiesTable
-        (
-            Dictionary<string, List<string>> conditionedPropertiesTable,   // List of possible values, keyed by property name
-
-            string leftValue,                       // The raw value on the left side of the operator
-
-            string rightValueExpanded               // The fully expanded value on the right side
-                                                    // of the operator.
-        )
+        /// <param name="conditionedPropertiesTable">List of possible values, keyed by property name.</param>
+        /// <param name="leftValue">The raw value on the left side of the operator.</param>
+        /// <param name="rightValueExpanded">The fully expanded value on the right side of the operator.</param>
+        internal static void UpdateConditionedPropertiesTable(
+            Dictionary<string, List<string>> conditionedPropertiesTable,
+            string leftValue,
+            string rightValueExpanded)
         {
             if ((conditionedPropertiesTable != null) && (rightValueExpanded.Length > 0))
             {
@@ -171,8 +166,7 @@ public ConcurrentStack<GenericExpressionNode> GetOrAdd(string condition, Func<st
         /// This method uses cached expression trees to avoid generating them from scratch every time it's called.
         /// This method is thread safe and is called from engine and task execution module threads
         /// </summary>
-        internal static bool EvaluateCondition<P, I>
-            (
+        internal static bool EvaluateCondition<P, I>(
             string condition,
             ParserOptions options,
             Expander<P, I> expander,
@@ -209,8 +203,7 @@ internal static bool EvaluateCondition<P, I>
         /// This method is thread safe and is called from engine and task execution module threads
         /// Logging service may be null.
         /// </summary>
-        internal static bool EvaluateConditionCollectingConditionedProperties<P, I>
-        (
+        internal static bool EvaluateConditionCollectingConditionedProperties<P, I>(
             string condition,
             ParserOptions options,
             Expander<P, I> expander,
@@ -222,8 +215,7 @@ internal static bool EvaluateConditionCollectingConditionedProperties<P, I>
             BuildEventContext buildEventContext,
             IFileSystem fileSystem,
             ProjectRootElementCacheBase projectRootElementCache = null,
-            LoggingContext loggingContext = null
-        )
+            LoggingContext loggingContext = null)
             where P : class, IProperty
             where I : class, IItem
         {
@@ -413,8 +405,7 @@ internal class ConditionEvaluationState<P, I> : IConditionEvaluationState
             /// </summary>
             public ProjectRootElementCacheBase LoadedProjectsCache { get; }
 
-            internal ConditionEvaluationState
-                (
+            internal ConditionEvaluationState(
                 string condition,
                 Expander<P, I> expander,
                 ExpanderOptions expanderOptions,
@@ -422,8 +413,7 @@ internal ConditionEvaluationState
                 string evaluationDirectory,
                 ElementLocation elementLocation,
                 IFileSystem fileSystem,
-                ProjectRootElementCacheBase projectRootElementCache = null
-                )
+                ProjectRootElementCacheBase projectRootElementCache = null)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(condition, nameof(condition));
                 ErrorUtilities.VerifyThrowArgumentNull(expander, nameof(expander));
diff --git a/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs b/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
index 4ec222243fd..6ab65cc8800 100644
--- a/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
@@ -187,8 +187,8 @@ private List<string> ExpandArgumentAsFileList(GenericExpressionNode argumentNode
         /// </summary>
         private void VerifyArgumentCount(int expected, ConditionEvaluator.IConditionEvaluationState state)
         {
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (_arguments.Count == expected,
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
+                _arguments.Count == expected,
                  state.ElementLocation,
                  "IncorrectNumberOfFunctionArguments",
                  state.Condition,
diff --git a/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs b/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
index 1ef13748bdc..1f8429cdb86 100644
--- a/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
@@ -39,8 +39,8 @@ internal abstract class MultipleComparisonNode : OperatorExpressionNode
         /// </summary>
         internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext)
         {
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (LeftChild != null && RightChild != null,
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
+                LeftChild != null && RightChild != null,
                  state.ElementLocation,
                  "IllFormedCondition",
                  state.Condition);
@@ -77,8 +77,8 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
             string leftExpandedValue = LeftChild.GetExpandedValue(state, loggingContext);
             string rightExpandedValue = RightChild.GetExpandedValue(state, loggingContext);
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (leftExpandedValue != null && rightExpandedValue != null,
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
+                leftExpandedValue != null && rightExpandedValue != null,
                     state.ElementLocation,
                     "IllFormedCondition",
                     state.Condition);
@@ -109,16 +109,16 @@ private void UpdateConditionedProperties(ConditionEvaluator.IConditionEvaluation
 
                 if (leftUnexpandedValue != null)
                 {
-                    ConditionEvaluator.UpdateConditionedPropertiesTable
-                        (state.ConditionedPropertiesInProject,
+                    ConditionEvaluator.UpdateConditionedPropertiesTable(
+                        state.ConditionedPropertiesInProject,
                          leftUnexpandedValue,
                          RightChild.GetExpandedValue(state));
                 }
 
                 if (rightUnexpandedValue != null)
                 {
-                    ConditionEvaluator.UpdateConditionedPropertiesTable
-                        (state.ConditionedPropertiesInProject,
+                    ConditionEvaluator.UpdateConditionedPropertiesTable(
+                        state.ConditionedPropertiesInProject,
                          rightUnexpandedValue,
                          LeftChild.GetExpandedValue(state));
                 }
diff --git a/src/Build/Evaluation/Conditionals/Token.cs b/src/Build/Evaluation/Conditionals/Token.cs
index e1bb60ec06a..53e1c0184c0 100644
--- a/src/Build/Evaluation/Conditionals/Token.cs
+++ b/src/Build/Evaluation/Conditionals/Token.cs
@@ -90,16 +90,14 @@ internal Token(TokenType type, string tokenString)
         /// </summary>
         internal Token(TokenType type, string tokenString, bool expandable)
         {
-            ErrorUtilities.VerifyThrow
-                (
+            ErrorUtilities.VerifyThrow(
                 type == TokenType.Property ||
                 type == TokenType.String ||
                 type == TokenType.Numeric ||
                 type == TokenType.ItemList ||
                 type == TokenType.ItemMetadata ||
                 type == TokenType.Function,
-                "Unexpected token type"
-                );
+                "Unexpected token type");
 
             ErrorUtilities.VerifyThrowInternalNull(tokenString, nameof(tokenString));
 
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 162e9dfd923..1f3d1e4a6e6 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -411,31 +411,27 @@ private static ProjectTaskInstance ReadTaskElement(ProjectTaskElement taskElemen
             {
                 if (output.IsOutputItem)
                 {
-                    ProjectTaskOutputItemInstance outputItem = new ProjectTaskOutputItemInstance
-                        (
+                    ProjectTaskOutputItemInstance outputItem = new ProjectTaskOutputItemInstance(
                         output.ItemType,
                         output.TaskParameter,
                         output.Condition,
                         output.Location,
                         output.ItemTypeLocation,
                         output.TaskParameterLocation,
-                        output.ConditionLocation
-                        );
+                        output.ConditionLocation);
 
                     taskOutputs.Add(outputItem);
                 }
                 else
                 {
-                    ProjectTaskOutputPropertyInstance outputProperty = new ProjectTaskOutputPropertyInstance
-                        (
+                    ProjectTaskOutputPropertyInstance outputProperty = new ProjectTaskOutputPropertyInstance(
                         output.PropertyName,
                         output.TaskParameter,
                         output.Condition,
                         output.Location,
                         output.PropertyNameLocation,
                         output.TaskParameterLocation,
-                        output.ConditionLocation
-                        );
+                        output.ConditionLocation);
 
                     taskOutputs.Add(outputProperty);
                 }
@@ -489,18 +485,15 @@ private static ProjectItemGroupTaskInstance ReadItemGroupUnderTargetElement(Proj
 
                 foreach (ProjectMetadataElement metadataElement in itemElement.Metadata)
                 {
-                    metadata.Add(new ProjectItemGroupTaskMetadataInstance
-                        (
+                    metadata.Add(new ProjectItemGroupTaskMetadataInstance(
                         metadataElement.Name,
                         metadataElement.Value,
                         metadataElement.Condition,
                         metadataElement.Location,
-                        metadataElement.ConditionLocation
-                        ));
+                        metadataElement.ConditionLocation));
                 }
 
-                items.Add(new ProjectItemGroupTaskItemInstance
-                    (
+                items.Add(new ProjectItemGroupTaskItemInstance(
                     itemElement.ItemType,
                     itemElement.Include,
                     itemElement.Exclude,
@@ -521,8 +514,7 @@ private static ProjectItemGroupTaskInstance ReadItemGroupUnderTargetElement(Proj
                     itemElement.RemoveMetadataLocation,
                     itemElement.KeepDuplicatesLocation,
                     itemElement.ConditionLocation,
-                    metadata
-                    ));
+                    metadata));
             }
 
             ProjectItemGroupTaskInstance itemGroup = new ProjectItemGroupTaskInstance(itemGroupElement.Condition, itemGroupElement.Location, itemGroupElement.ConditionLocation, items);
@@ -570,8 +562,7 @@ private static ProjectTargetInstance ReadNewTargetElement(ProjectTargetElement t
             ObjectModel.ReadOnlyCollection<ProjectTargetInstanceChild> readOnlyTargetChildren = new ObjectModel.ReadOnlyCollection<ProjectTargetInstanceChild>(targetChildren);
             ObjectModel.ReadOnlyCollection<ProjectOnErrorInstance> readOnlyTargetOnErrorChildren = new ObjectModel.ReadOnlyCollection<ProjectOnErrorInstance>(targetOnErrorChildren);
 
-            ProjectTargetInstance targetInstance = new ProjectTargetInstance
-                (
+            ProjectTargetInstance targetInstance = new ProjectTargetInstance(
                 targetElement.Name,
                 targetElement.Condition,
                 targetElement.Inputs,
@@ -592,8 +583,7 @@ private static ProjectTargetInstance ReadNewTargetElement(ProjectTargetElement t
                 targetElement.AfterTargetsLocation,
                 readOnlyTargetChildren,
                 readOnlyTargetOnErrorChildren,
-                parentProjectSupportsReturnsAttribute
-                );
+                parentProjectSupportsReturnsAttribute);
 
             targetElement.TargetInstance = targetInstance;
             return targetInstance;
@@ -1025,8 +1015,7 @@ private void EvaluateItemGroupElement(ProjectItemGroupElement itemGroupElement,
         /// </summary>
         private void EvaluateUsingTaskElement(string directoryOfImportingFile, ProjectUsingTaskElement projectUsingTaskElement)
         {
-            TaskRegistry.RegisterTasksFromUsingTaskElement<P, I>
-                (
+            TaskRegistry.RegisterTasksFromUsingTaskElement<P, I>(
                 _evaluationLoggingContext.LoggingService,
                 _evaluationLoggingContext.BuildEventContext,
                 directoryOfImportingFile,
@@ -1034,8 +1023,7 @@ private void EvaluateUsingTaskElement(string directoryOfImportingFile, ProjectUs
                 _data.TaskRegistry,
                 _expander,
                 ExpanderOptions.ExpandPropertiesAndItems,
-                _evaluationContext.FileSystem
-                );
+                _evaluationContext.FileSystem);
         }
 
         /// <summary>
@@ -1300,8 +1288,7 @@ private void EvaluatePropertyElement(ProjectPropertyElement propertyElement)
                 // of this project (or import).
                 if (
                         ((IDictionary<string, ProjectPropertyInstance>)_data.GlobalPropertiesDictionary).ContainsKey(propertyElement.Name) &&
-                        !_data.GlobalPropertiesToTreatAsLocal.Contains(propertyElement.Name)
-                    )
+                        !_data.GlobalPropertiesToTreatAsLocal.Contains(propertyElement.Name))
                 {
                     _evaluationLoggingContext.LogComment(MessageImportance.Low, "OM_GlobalProperty", propertyElement.Name);
                     return;
@@ -1849,8 +1836,7 @@ static string EvaluateProperty(string value, IElementLocation location,
                         sdkReference = new SdkReference(
                             EvaluateProperty(sdkReference.Name, sdkReferenceOrigin, _expander, mode),
                             EvaluateProperty(sdkReference.Version, sdkReferenceOrigin, _expander, mode),
-                            EvaluateProperty(sdkReference.MinimumVersion, sdkReferenceOrigin, _expander, mode)
-                        );
+                            EvaluateProperty(sdkReference.MinimumVersion, sdkReferenceOrigin, _expander, mode));
                     }
                 }
 
@@ -2454,8 +2440,7 @@ private bool EvaluateCondition(ProjectElement element, string condition, Expande
 
             using (_evaluationProfiler.TrackCondition(element.ConditionLocation, condition))
             {
-                bool result = ConditionEvaluator.EvaluateCondition
-                    (
+                bool result = ConditionEvaluator.EvaluateCondition(
                     condition,
                     parserOptions,
                     _expander,
@@ -2465,8 +2450,7 @@ private bool EvaluateCondition(ProjectElement element, string condition, Expande
                     _evaluationLoggingContext.LoggingService,
                     _evaluationLoggingContext.BuildEventContext,
                     _evaluationContext.FileSystem,
-                    loggingContext: _evaluationLoggingContext
-                    );
+                    loggingContext: _evaluationLoggingContext);
 
                 return result;
             }
@@ -2494,8 +2478,7 @@ private bool EvaluateConditionCollectingConditionedProperties(ProjectElement ele
 
             using (_evaluationProfiler.TrackCondition(element.ConditionLocation, condition))
             {
-                bool result = ConditionEvaluator.EvaluateConditionCollectingConditionedProperties
-                    (
+                bool result = ConditionEvaluator.EvaluateConditionCollectingConditionedProperties(
                     condition,
                     parserOptions,
                     _expander,
@@ -2506,8 +2489,7 @@ private bool EvaluateConditionCollectingConditionedProperties(ProjectElement ele
                     _evaluationLoggingContext.LoggingService,
                     _evaluationLoggingContext.BuildEventContext,
                     _evaluationContext.FileSystem,
-                    projectRootElementCache
-                    );
+                    projectRootElementCache);
 
                 return result;
             }
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index a60a58f91c4..47ec5269907 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -1028,8 +1028,7 @@ internal string ExpandSingleMetadata(Match itemMetadataMatch)
 
                     if (
                         (isBuiltInMetadata && ((_options & ExpanderOptions.ExpandBuiltInMetadata) != 0)) ||
-                       (!isBuiltInMetadata && ((_options & ExpanderOptions.ExpandCustomMetadata) != 0))
-                        )
+                       (!isBuiltInMetadata && ((_options & ExpanderOptions.ExpandCustomMetadata) != 0)))
                     {
                         metadataValue = _metadata.GetEscapedValue(itemType, metadataName);
                         if (IsTruncationEnabled(_options) && metadataValue.Length > CharacterLimitPerExpansion)
@@ -1934,8 +1933,7 @@ internal static bool ExpandExpressionCapture<S>(
                 ExpanderOptions options,
                 bool includeNullEntries,
                 out bool isTransformExpression,
-                out List<Pair<string, S>> itemsFromCapture
-                )
+                out List<Pair<string, S>> itemsFromCapture)
                 where S : class, IItem
             {
                 ErrorUtilities.VerifyThrow(evaluatedItems != null, "Cannot expand items without providing items");
@@ -2112,8 +2110,7 @@ private static bool ExpandExpressionCaptureIntoStringBuilder<S>(
                 IItemProvider<S> evaluatedItems,
                 IElementLocation elementLocation,
                 SpanBasedStringBuilder builder,
-                ExpanderOptions options
-                )
+                ExpanderOptions options)
                 where S : class, IItem
             {
                 List<Pair<string, S>> itemsFromCapture;
@@ -3038,15 +3035,13 @@ private static class RegularExpressions
             /// </summary>
             /// <remarks>PERF WARNING: this Regex is complex and tends to run slowly.</remarks>
             internal static readonly Lazy<Regex> NonTransformItemMetadataPattern = new Lazy<Regex>(
-                () => new Regex
-                    (
+                () => new Regex(
                     @"((?<=" + ItemVectorWithTransformLHS + @")" + ItemMetadataSpecification + @"(?!" +
                     ItemVectorWithTransformRHS + @")) | ((?<!" + ItemVectorWithTransformLHS + @")" +
                     ItemMetadataSpecification + @"(?=" + ItemVectorWithTransformRHS + @")) | ((?<!" +
                     ItemVectorWithTransformLHS + @")" + ItemMetadataSpecification + @"(?!" +
                     ItemVectorWithTransformRHS + @"))",
-                    RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled
-                    ));
+                    RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled));
 
             /// <summary>
             /// Complete description of an item metadata reference, including the optional qualifying item type.
@@ -3125,8 +3120,7 @@ internal Function<T> Build()
                     BindingFlags,
                     Remainder,
                     UsedUninitializedProperties,
-                    FileSystem
-                    );
+                    FileSystem);
             }
         }
 
@@ -4320,8 +4314,7 @@ private bool TryGetArgs(object[] args, out string arg0, out string arg1, out str
 
                 if (args[0] is string value0 &&
                     args[1] is string value1 &&
-                    args[2] is string value2
-                    )
+                    args[2] is string value2)
                 {
                     arg0 = value0;
                     arg1 = value1;
@@ -4348,8 +4341,7 @@ private bool TryGetArgs(object[] args, out string arg0, out string arg1, out str
                 if (args[0] is string value0 &&
                     args[1] is string value1 &&
                     args[2] is string value2 &&
-                    args[3] is string value3
-                    )
+                    args[3] is string value3)
                 {
                     arg0 = value0;
                     arg1 = value1;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index 7f90b4c250e..0b654f0aae9 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -255,8 +255,7 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
                                     metadataExpansionOptions,
                                     ParserOptions.AllowAll,
                                     _expander,
-                                    _lazyEvaluator
-                                    ))
+                                    _lazyEvaluator))
                             {
                                 continue;
                             }
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 7f8ad466334..62f49b714d9 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -79,8 +79,7 @@ private static bool EvaluateCondition(
             ExpanderOptions expanderOptions,
             ParserOptions parserOptions,
             Expander<P, I> expander,
-            LazyItemEvaluator<P, I, M, D> lazyEvaluator
-            )
+            LazyItemEvaluator<P, I, M, D> lazyEvaluator)
         {
             if (condition?.Length == 0)
             {
@@ -90,8 +89,7 @@ LazyItemEvaluator<P, I, M, D> lazyEvaluator
 
             using (lazyEvaluator._evaluationProfiler.TrackCondition(element.ConditionLocation, condition))
             {
-                bool result = ConditionEvaluator.EvaluateCondition
-                    (
+                bool result = ConditionEvaluator.EvaluateCondition(
                     condition,
                     parserOptions,
                     expander,
@@ -101,8 +99,7 @@ LazyItemEvaluator<P, I, M, D> lazyEvaluator
                     lazyEvaluator._loggingContext.LoggingService,
                     lazyEvaluator._loggingContext.BuildEventContext,
                     lazyEvaluator.FileSystem,
-                    loggingContext: lazyEvaluator._loggingContext
-                    );
+                    loggingContext: lazyEvaluator._loggingContext);
                 MSBuildEventSource.Log.EvaluateConditionStop(condition, result);
 
                 return result;
diff --git a/src/Build/Evaluation/MetadataReference.cs b/src/Build/Evaluation/MetadataReference.cs
index c0cf9b33319..fa03fd75e21 100644
--- a/src/Build/Evaluation/MetadataReference.cs
+++ b/src/Build/Evaluation/MetadataReference.cs
@@ -28,11 +28,9 @@ internal struct MetadataReference
         /// </summary>
         /// <param name="itemName">Name of the item</param>
         /// <param name="metadataName">Name of the metadata</param>
-        internal MetadataReference
-        (
+        internal MetadataReference(
             string itemName,
-            string metadataName
-        )
+            string metadataName)
         {
             this.ItemName = itemName;
             this.MetadataName = metadataName;
diff --git a/src/Build/Evaluation/Preprocessor.cs b/src/Build/Evaluation/Preprocessor.cs
index 9dabfd80dc1..f64d234cab3 100644
--- a/src/Build/Evaluation/Preprocessor.cs
+++ b/src/Build/Evaluation/Preprocessor.cs
@@ -235,8 +235,7 @@ private void CloneChildrenResolvingImports(XmlNode source, XmlNode destination)
                     child.NodeType == XmlNodeType.Element &&
                     sourceDocument.DocumentElement == child &&                                      // This is the root element, not some random element named 'Project'
                     destinationDocument.DocumentElement != null &&                                  // Skip <Project> tag from the outer project
-                    String.Equals(XMakeElements.project, child.Name, StringComparison.Ordinal)
-                   )
+                    String.Equals(XMakeElements.project, child.Name, StringComparison.Ordinal))
                 {
                     // But suffix any InitialTargets attribute
                     string outerInitialTargets = destinationDocument.DocumentElement.GetAttribute(XMakeAttributes.initialTargets).Trim();
diff --git a/src/Build/Evaluation/Profiler/EvaluationProfiler.cs b/src/Build/Evaluation/Profiler/EvaluationProfiler.cs
index 8ff51bac3ec..ab4cd97a7be 100644
--- a/src/Build/Evaluation/Profiler/EvaluationProfiler.cs
+++ b/src/Build/Evaluation/Profiler/EvaluationProfiler.cs
@@ -149,8 +149,7 @@ public void Dispose()
                 var updatedTimeSpent = new ProfiledLocation(
                         previousTimeSpent.InclusiveTime + _inclusiveTime.Elapsed,
                         previousTimeSpent.ExclusiveTime + _exclusiveTime.Elapsed,
-                        0
-                    );
+                        0);
 
                 _evaluationProfiler._timeSpent[Location] = updatedTimeSpent;
             }
diff --git a/src/Build/Evaluation/ProjectParser.cs b/src/Build/Evaluation/ProjectParser.cs
index dff5d41c12d..9adabda7c0a 100644
--- a/src/Build/Evaluation/ProjectParser.cs
+++ b/src/Build/Evaluation/ProjectParser.cs
@@ -427,14 +427,12 @@ private ProjectImportGroupElement ParseProjectImportGroupElement(XmlElementWithL
 
             foreach (XmlElementWithLocation childElement in ProjectXmlUtilities.GetVerifyThrowProjectChildElements(element))
             {
-                ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+                ProjectErrorUtilities.VerifyThrowInvalidProject(
                     childElement.Name == XMakeElements.import,
                     childElement.Location,
                     "UnrecognizedChildElement",
                     childElement.Name,
-                    element.Name
-                );
+                    element.Name);
 
                 ProjectImportElement item = ParseProjectImportElement(childElement, importGroup);
 
@@ -449,14 +447,12 @@ private ProjectImportGroupElement ParseProjectImportGroupElement(XmlElementWithL
         /// </summary>
         private ProjectImportElement ParseProjectImportElement(XmlElementWithLocation element, ProjectElementContainer parent)
         {
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-            (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 parent is ProjectRootElement || parent is ProjectImportGroupElement,
                 element.Location,
                 "UnrecognizedParentElement",
                 parent,
-                element
-            );
+                element);
 
             ProjectXmlUtilities.VerifyThrowProjectAttributes(element, ValidAttributesOnImport);
             ProjectXmlUtilities.VerifyThrowProjectRequiredAttribute(element, XMakeAttributes.project);
@@ -518,15 +514,13 @@ private ProjectUsingTaskElement ParseProjectUsingTaskElement(XmlElementWithLocat
             string assemblyName = element.GetAttribute(XMakeAttributes.assemblyName);
             string assemblyFile = element.GetAttribute(XMakeAttributes.assemblyFile);
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-            (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 (assemblyName.Length > 0) ^ (assemblyFile.Length > 0),
                 element.Location,
                 "UsingTaskAssemblySpecification",
                 XMakeElements.usingTask,
                 XMakeAttributes.assemblyName,
-                XMakeAttributes.assemblyFile
-            );
+                XMakeAttributes.assemblyFile);
 
             ProjectXmlUtilities.VerifyThrowProjectAttributeEitherMissingOrNotEmpty(element, XMakeAttributes.assemblyName);
             ProjectXmlUtilities.VerifyThrowProjectAttributeEitherMissingOrNotEmpty(element, XMakeAttributes.assemblyFile);
@@ -662,15 +656,13 @@ private ProjectTaskElement ParseProjectTaskElement(XmlElementWithLocation elemen
         {
             foreach (XmlAttributeWithLocation attribute in element.Attributes)
             {
-                ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+                ProjectErrorUtilities.VerifyThrowInvalidProject(
                     !XMakeAttributes.IsBadlyCasedSpecialTaskAttribute(attribute.Name),
                     attribute.Location,
                     "BadlyCasedSpecialTaskAttribute",
                     attribute.Name,
                     element.Name,
-                    element.Name
-                );
+                    element.Name);
             }
 
             ProjectTaskElement task = new ProjectTaskElement(element, parent, _project);
@@ -699,13 +691,11 @@ private ProjectOutputElement ParseProjectOutputElement(XmlElementWithLocation el
             XmlAttributeWithLocation itemNameAttribute = element.GetAttributeWithLocation(XMakeAttributes.itemName);
             XmlAttributeWithLocation propertyNameAttribute = element.GetAttributeWithLocation(XMakeAttributes.propertyName);
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-            (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 (String.IsNullOrWhiteSpace(itemNameAttribute?.Value) && !String.IsNullOrWhiteSpace(propertyNameAttribute?.Value)) || (!String.IsNullOrWhiteSpace(itemNameAttribute?.Value) && String.IsNullOrWhiteSpace(propertyNameAttribute?.Value)),
                 element.Location,
                 "InvalidTaskOutputSpecification",
-                parent.Name
-            );
+                parent.Name);
 
             ProjectXmlUtilities.VerifyThrowProjectAttributeEitherMissingOrNotEmpty(element, itemNameAttribute, XMakeAttributes.itemName);
             ProjectXmlUtilities.VerifyThrowProjectAttributeEitherMissingOrNotEmpty(element, propertyNameAttribute, XMakeAttributes.propertyName);
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index 1f055d88bd0..cdccf05a036 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -215,8 +215,7 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
             s_getEntriesNumber++;
             ErrorUtilities.VerifyThrow(
                 s_getEntriesNumber == 1,
-                "Reentrance to the ProjectRootElementCache.Get function detected."
-            );
+                "Reentrance to the ProjectRootElementCache.Get function detected.");
 
             try
             {
@@ -284,8 +283,7 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
                         projectRootElement.FullPath.Equals(projectFile, StringComparison.OrdinalIgnoreCase),
                         "Got project back with incorrect path. Expected path: {0}, received path: {1}.",
                         projectFile,
-                        projectRootElement.FullPath
-                    );
+                        projectRootElement.FullPath);
 
                     // An implicit load will never reset the explicit flag.
                     if (isExplicitlyLoaded)
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 1450ecf4e7a..3bb9b40a91f 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -258,8 +258,7 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source)
                     property.Name,
                     property.EvaluatedValue,
                     source.ToString(),
-                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("PropertyAssignment", property.Name, property.EvaluatedValue, source)
-                );
+                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("PropertyAssignment", property.Name, property.EvaluatedValue, source));
             args.BuildEventContext = _evaluationLoggingContext.BuildEventContext;
 
             _evaluationLoggingContext.LogBuildEvent(args);
diff --git a/src/Build/Evaluation/SimpleProjectRootElementCache.cs b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
index 2ce5a68450b..97353c34651 100644
--- a/src/Build/Evaluation/SimpleProjectRootElementCache.cs
+++ b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
@@ -67,8 +67,7 @@ private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRo
                     rootElement.FullPath.Equals(key, StringComparison.OrdinalIgnoreCase),
                     "Got project back with incorrect path. Expected path: {0}, received path: {1}.",
                     key,
-                    rootElement.FullPath
-                );
+                    rootElement.FullPath);
 
                 AddEntry(rootElement);
 
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 0a7ac4b6f90..ee1255489f2 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -154,8 +154,7 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,
                                     itemType: ProjectInterpretation.TransitiveReferenceItemName,
                                     includeEscaped: referenceInfo.ReferenceConfiguration.ProjectFullPath,
                                     directMetadata: null,
-                                    definingFileEscaped: currentNode.ProjectInstance.FullPath
-                                ),
+                                    definingFileEscaped: currentNode.ProjectInstance.FullPath),
                                 edges);
                         }
                     }
@@ -295,8 +294,7 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada
                             project.AbsolutePath,
                             solutionGlobalProperties
                                 .SetItem("Configuration", projectConfiguration.ConfigurationName)
-                                .SetItem("Platform", projectConfiguration.PlatformName)
-                            ));
+                                .SetItem("Platform", projectConfiguration.PlatformName)));
                 }
             }
 
@@ -555,8 +553,7 @@ private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate)
                     throw new InvalidOperationException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                         "StaticGraphDoesNotSupportSlnReferences",
                         referenceInfo.ReferenceConfiguration.ProjectFullPath,
-                        referenceInfo.ReferenceConfiguration.ProjectFullPath
-                        ));
+                        referenceInfo.ReferenceConfiguration.ProjectFullPath));
                 }
 
                 SubmitProjectForParsing(referenceInfo.ReferenceConfiguration);
@@ -670,8 +667,7 @@ public void RemoveEdge((ProjectGraphNode node, ProjectGraphNode reference) key)
             {
                 return ReferenceItems.ToImmutableDictionary(
                     kvp => (kvp.Key.Item1.ToConfigurationMetadata(), kvp.Key.Item2.ToConfigurationMetadata()),
-                    kvp => kvp.Value
-                    );
+                    kvp => kvp.Value);
             }
         }
 
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index b64b17cee58..ec39aadb827 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -484,8 +484,7 @@ internal string ToDot(IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string
 
         internal string ToDot(
             Func<ProjectGraphNode, string> nodeIdProvider,
-            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode = null
-        )
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode = null)
         {
             ErrorUtilities.VerifyThrowArgumentNull(nodeIdProvider, nameof(nodeIdProvider));
 
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 563c9d146b2..e05b12f1e15 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -233,8 +233,7 @@ private static IEnumerable<ProjectItemInstance> ConstructInnerBuildReferences(Pr
         /// </remarks>
         private static GlobalPropertyPartsForMSBuildTask ProjectReferenceGlobalPropertiesModifier(
             GlobalPropertyPartsForMSBuildTask defaultParts,
-            ProjectItemInstance projectReference
-        )
+            ProjectItemInstance projectReference)
         {
             // ProjectReference defines yet another metadata name containing properties to undefine. Merge it in if non empty.
             var globalPropertiesToRemove = SplitPropertyNames(projectReference.GetMetadataValue(GlobalPropertiesToRemoveMetadataName));
diff --git a/src/Build/Instance/HostObjectException.cs b/src/Build/Instance/HostObjectException.cs
index 14f8fecb9d6..1431fd17ed1 100644
--- a/src/Build/Instance/HostObjectException.cs
+++ b/src/Build/Instance/HostObjectException.cs
@@ -21,10 +21,8 @@ internal HostObjectException() : base()
         /// <summary>
         /// Creates an instance of this exception using the given message.
         /// </summary>
-        internal HostObjectException
-        (
-            string message
-        ) :
+        internal HostObjectException(
+            string message) :
             base(ErrorMessagePrefix + message)
         {
         }
@@ -34,13 +32,11 @@ string message
         /// Adds the inner exception's details to the exception message because most bug reporters don't bother
         /// to provide the inner exception details which is typically what we care about.
         /// </summary>
-        internal HostObjectException
-        (
+        internal HostObjectException(
             string projectFile,
             string targetName,
             string taskName,
-            Exception innerException
-        ) :
+            Exception innerException) :
             base(ErrorMessagePrefix
                 + string.Format(ErrorMessageProjectTargetTask, projectFile, targetName, taskName)
                 + (innerException == null ? string.Empty : ("\n=============\n" + innerException.ToString() + "\n\n")),
@@ -51,13 +47,11 @@ Exception innerException
         /// <summary>
         /// Creates an instance of this exception using projectFile, targetName, taskName and message.
         /// </summary>
-        internal HostObjectException
-        (
+        internal HostObjectException(
             string projectFile,
             string targetName,
             string taskName,
-            string message
-        ) :
+            string message) :
             base(ErrorMessagePrefix
                 + string.Format(ErrorMessageProjectTargetTask, projectFile, targetName, taskName) + message)
         {
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index f32a0fa608b..0ce99d42c40 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -2237,8 +2237,7 @@ internal static ProjectInstance[] LoadSolutionForBuild(
                 if (
                        String.Equals(toolsVersion, "2.0", StringComparison.OrdinalIgnoreCase) ||
                        String.Equals(toolsVersion, "3.0", StringComparison.OrdinalIgnoreCase) ||
-                       String.Equals(toolsVersion, "3.5", StringComparison.OrdinalIgnoreCase)
-                   )
+                       String.Equals(toolsVersion, "3.5", StringComparison.OrdinalIgnoreCase))
                 {
                     // Spawn the Orcas SolutionWrapperProject generator.  
                     loggingService.LogComment(projectBuildEventContext, MessageImportance.Low, "OldWrapperGeneratedExplicitToolsVersion", toolsVersion);
@@ -2454,8 +2453,7 @@ internal ProjectTargetInstance AddTarget(
             ErrorUtilities.VerifyThrowInternalLength(targetName, nameof(targetName));
             ErrorUtilities.VerifyThrow(!_actualTargets.ContainsKey(targetName), "Target {0} already exists.", targetName);
 
-            ProjectTargetInstance target = new ProjectTargetInstance
-                (
+            ProjectTargetInstance target = new ProjectTargetInstance(
                 targetName,
                 condition ?? String.Empty,
                 inputs ?? String.Empty,
@@ -2476,8 +2474,7 @@ internal ProjectTargetInstance AddTarget(
                 String.IsNullOrEmpty(afterTargets) ? null : ElementLocation.EmptyLocation,
                 new ObjectModel.ReadOnlyCollection<ProjectTargetInstanceChild>(new List<ProjectTargetInstanceChild>()),
                 new ObjectModel.ReadOnlyCollection<ProjectOnErrorInstance>(new List<ProjectOnErrorInstance>()),
-                parentProjectSupportsReturnsAttribute
-                );
+                parentProjectSupportsReturnsAttribute);
 
             _actualTargets[targetName] = target;
 
@@ -2515,9 +2512,8 @@ internal void VerifyThrowNotImmutable()
         /// <param name="sdkResolverService"></param>
         /// <param name="submissionId"></param>
         /// <returns>The ProjectRootElement for the root traversal and each of the metaprojects.</returns>
-        private static ProjectInstance[] GenerateSolutionWrapper
+        private static ProjectInstance[] GenerateSolutionWrapper(
 
-            (
                 string projectFile,
                 IDictionary<string, string> globalProperties,
                 string toolsVersion,
@@ -2525,8 +2521,7 @@ private static ProjectInstance[] GenerateSolutionWrapper
                 BuildEventContext projectBuildEventContext,
                 IReadOnlyCollection<string> targetNames,
                 ISdkResolverService sdkResolverService,
-                int submissionId
-            )
+                int submissionId)
         {
             SolutionFile sp = SolutionFile.Parse(projectFile);
 
@@ -2570,8 +2565,8 @@ int submissionId
         /// <param name="submissionId"></param>
         /// <returns>An appropriate ProjectRootElement</returns>
         [MethodImpl(MethodImplOptions.NoInlining)]
-        private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM
-        (string projectFile,
+        private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM(
+        string projectFile,
             IDictionary<string, string> globalProperties,
             string toolsVersion,
             ProjectRootElementCacheBase projectRootElementCache,
@@ -2603,8 +2598,7 @@ private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM
                     if (environmentVariableName != null &&
                         (!XmlUtilities.IsValidElementName(environmentVariableName)
                         || XMakeElements.ReservedItemNames.Contains(environmentVariableName)
-                        || ReservedPropertyNames.IsReservedProperty(environmentVariableName))
-                       )
+                        || ReservedPropertyNames.IsReservedProperty(environmentVariableName)))
                     {
                         if (clearedVariables == null)
                         {
@@ -2728,14 +2722,12 @@ private void Initialize(
                 toolsVersionLocation = xml.ToolsVersionLocation;
             }
 
-            var toolsVersionToUse = Utilities.GenerateToolsVersionToUse
-            (
+            var toolsVersionToUse = Utilities.GenerateToolsVersionToUse(
                 explicitToolsVersion,
                 xml.ToolsVersion,
                 buildParameters.GetToolset,
                 buildParameters.DefaultToolsVersion,
-                out var usingDifferentToolsVersionFromProjectFile
-            );
+                out var usingDifferentToolsVersionFromProjectFile);
 
             _usingDifferentToolsVersionFromProjectFile = usingDifferentToolsVersionFromProjectFile;
 
diff --git a/src/Build/Instance/ProjectItemGroupTaskInstance.cs b/src/Build/Instance/ProjectItemGroupTaskInstance.cs
index 8473f7559b5..2b24f5fe383 100644
--- a/src/Build/Instance/ProjectItemGroupTaskInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskInstance.cs
@@ -45,13 +45,11 @@ public class ProjectItemGroupTaskInstance : ProjectTargetInstanceChild, ITransla
         /// Constructor called by the Evaluator.
         /// Assumes ProjectItemGroupTaskItemInstance is an immutable type.
         /// </summary>
-        internal ProjectItemGroupTaskInstance
-            (
+        internal ProjectItemGroupTaskInstance(
             string condition,
             ElementLocation location,
             ElementLocation conditionLocation,
-            List<ProjectItemGroupTaskItemInstance> items
-            )
+            List<ProjectItemGroupTaskItemInstance> items)
         {
             ErrorUtilities.VerifyThrowInternalNull(condition, nameof(condition));
             ErrorUtilities.VerifyThrowInternalNull(location, nameof(location));
diff --git a/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs b/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
index 2a984755992..ca573bd9681 100644
--- a/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
@@ -137,8 +137,7 @@ public class ProjectItemGroupTaskItemInstance : ITranslatable
         /// Metadata collection is ordered.
         /// Assumes ProjectItemGroupTaskMetadataInstance is an immutable type.
         /// </summary>
-        internal ProjectItemGroupTaskItemInstance
-            (
+        internal ProjectItemGroupTaskItemInstance(
             string itemType,
             string include,
             string exclude,
@@ -159,8 +158,7 @@ internal ProjectItemGroupTaskItemInstance
             ElementLocation removeMetadataLocation,
             ElementLocation keepDuplicatesLocation,
             ElementLocation conditionLocation,
-            List<ProjectItemGroupTaskMetadataInstance> metadata
-            )
+            List<ProjectItemGroupTaskMetadataInstance> metadata)
         {
             ErrorUtilities.VerifyThrowInternalNull(itemType, nameof(itemType));
             ErrorUtilities.VerifyThrowInternalNull(include, nameof(include));
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 5c353cdd468..bcd9bc5e0cb 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -706,8 +706,7 @@ private void CommonConstructor(ProjectInstance projectToUse, string itemTypeToUs
                                         inheritedItemDefinitions,
                                         _project.Directory,
                                         _project.IsImmutable,
-                                        definingFileEscaped
-                                        );
+                                        definingFileEscaped);
         }
 
         /// <summary>
@@ -797,8 +796,7 @@ internal TaskItem(
                               List<ProjectItemDefinitionInstance> itemDefinitions,
                               string projectDirectory,
                               bool immutable,
-                              string definingFileEscaped // the actual project file (or import) that defines this item.
-                              )
+                              string definingFileEscaped) // the actual project file (or import) that defines this item.
             {
                 ErrorUtilities.VerifyThrowArgumentLength(includeEscaped, nameof(includeEscaped));
                 ErrorUtilities.VerifyThrowArgumentLength(includeBeforeWildcardExpansionEscaped, nameof(includeBeforeWildcardExpansionEscaped));
@@ -1578,13 +1576,10 @@ public bool Equals(TaskItem other)
 
                     // This is case-insensitive, so that for example "en-US" and "en-us" match and are bucketed together.
                     // In this respect, therefore, we have to consider item metadata value case as not significant.
-                    if (!String.Equals
-                            (
+                    if (!String.Equals(
                                 thisAsITaskItem2.GetMetadataValueEscaped(name),
                                 otherAsITaskItem2.GetMetadataValueEscaped(name),
-                                StringComparison.OrdinalIgnoreCase
-                            )
-                       )
+                                StringComparison.OrdinalIgnoreCase))
                     {
                         return false;
                     }
diff --git a/src/Build/Instance/ProjectOnErrorInstance.cs b/src/Build/Instance/ProjectOnErrorInstance.cs
index f480331c0da..651243d487f 100644
--- a/src/Build/Instance/ProjectOnErrorInstance.cs
+++ b/src/Build/Instance/ProjectOnErrorInstance.cs
@@ -49,14 +49,12 @@ public sealed class ProjectOnErrorInstance : ProjectTargetInstanceChild, ITransl
         /// Constructor called by Evaluator.
         /// All parameters are in the unevaluated state.
         /// </summary>
-        internal ProjectOnErrorInstance
-            (
+        internal ProjectOnErrorInstance(
             string executeTargets,
             string condition,
             ElementLocation location,
             ElementLocation executeTargetsLocation,
-            ElementLocation conditionLocation
-            )
+            ElementLocation conditionLocation)
         {
             ErrorUtilities.VerifyThrowInternalLength(executeTargets, nameof(executeTargets));
             ErrorUtilities.VerifyThrowInternalNull(condition, nameof(condition));
diff --git a/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs b/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
index 77a2b30e416..92a2acc7a56 100644
--- a/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
+++ b/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
@@ -45,13 +45,11 @@ public class ProjectPropertyGroupTaskInstance : ProjectTargetInstanceChild, ITra
         /// Constructor called by the Evaluator.
         /// Assumes ProjectPropertyGroupTaskPropertyInstance is an immutable type.
         /// </summary>
-        internal ProjectPropertyGroupTaskInstance
-            (
+        internal ProjectPropertyGroupTaskInstance(
             string condition,
             ElementLocation location,
             ElementLocation conditionLocation,
-            List<ProjectPropertyGroupTaskPropertyInstance> properties
-            )
+            List<ProjectPropertyGroupTaskPropertyInstance> properties)
         {
             ErrorUtilities.VerifyThrowInternalNull(condition, nameof(condition));
             ErrorUtilities.VerifyThrowInternalNull(location, nameof(location));
diff --git a/src/Build/Instance/ProjectTargetInstance.cs b/src/Build/Instance/ProjectTargetInstance.cs
index b634c02a1a4..e4f30a4e0cb 100644
--- a/src/Build/Instance/ProjectTargetInstance.cs
+++ b/src/Build/Instance/ProjectTargetInstance.cs
@@ -139,8 +139,7 @@ public sealed class ProjectTargetInstance : IImmutable, IKeyed, ITranslatable
         /// All parameters are in the unevaluated state.
         /// All location parameters may be null if not applicable, except for the main location parameter.
         /// </summary>
-        internal ProjectTargetInstance
-            (
+        internal ProjectTargetInstance(
             string name,
             string condition,
             string inputs,
@@ -161,8 +160,7 @@ internal ProjectTargetInstance
             ElementLocation afterTargetsLocation,
             ObjectModel.ReadOnlyCollection<ProjectTargetInstanceChild> children,
             ObjectModel.ReadOnlyCollection<ProjectOnErrorInstance> onErrorChildren,
-            bool parentProjectSupportsReturnsAttribute
-            )
+            bool parentProjectSupportsReturnsAttribute)
         {
             ErrorUtilities.VerifyThrowInternalLength(name, nameof(name));
             ErrorUtilities.VerifyThrowInternalNull(condition, nameof(condition));
diff --git a/src/Build/Instance/ProjectTaskInstance.cs b/src/Build/Instance/ProjectTaskInstance.cs
index 9b46993576a..a58e2b9a9ab 100644
--- a/src/Build/Instance/ProjectTaskInstance.cs
+++ b/src/Build/Instance/ProjectTaskInstance.cs
@@ -94,11 +94,9 @@ public sealed class ProjectTaskInstance : ProjectTargetInstanceChild, ITranslata
         /// All parameters are in the unevaluated state.
         /// Locations other than the main location may be null.
         /// </summary>
-        internal ProjectTaskInstance
-            (
+        internal ProjectTaskInstance(
             ProjectTaskElement element,
-            IList<ProjectTaskInstanceChild> outputs
-            )
+            IList<ProjectTaskInstanceChild> outputs)
         {
             ErrorUtilities.VerifyThrowInternalNull(element, nameof(element));
             ErrorUtilities.VerifyThrowInternalNull(outputs, nameof(outputs));
@@ -133,8 +131,7 @@ internal ProjectTaskInstance(
             string condition,
             string continueOnError,
             string msbuildRuntime,
-            string msbuildArchitecture
-        ) : this(
+            string msbuildArchitecture) : this(
             name,
             condition,
             continueOnError,
@@ -150,8 +147,7 @@ string msbuildArchitecture
         {
         }
 
-        internal ProjectTaskInstance
-            (
+        internal ProjectTaskInstance(
             string name,
             string condition,
             string continueOnError,
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 41135bc767b..93ceef4e50a 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -244,8 +244,7 @@ public void CleanupTask(ITask task)
         /// <summary>
         /// Initialize the factory from the task registry
         /// </summary>
-        internal LoadedType InitializeFactory
-            (
+        internal LoadedType InitializeFactory(
                 AssemblyLoadInfo loadInfo,
                 string taskName,
                 IDictionary<string, TaskPropertyInfo> taskParameters,
@@ -254,8 +253,7 @@ internal LoadedType InitializeFactory
                 bool taskHostFactoryExplicitlyRequested,
                 TargetLoggingContext targetLoggingContext,
                 ElementLocation elementLocation,
-                string taskProjectFile
-            )
+                string taskProjectFile)
         {
             ErrorUtilities.VerifyThrowArgumentNull(loadInfo, nameof(loadInfo));
             VerifyThrowIdentityParametersValid(taskFactoryIdentityParameters, elementLocation, taskName, "Runtime", "Architecture");
@@ -356,11 +354,18 @@ internal ITask CreateTaskInstance(ElementLocation taskLocation, TaskLoggingConte
                     mergedParameters[XMakeAttributes.architecture] = XMakeAttributes.GetCurrentMSBuildArchitecture();
                 }
 
-                TaskHostTask task = new TaskHostTask(taskLocation, taskLoggingContext, buildComponentHost, mergedParameters, _loadedType
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+                TaskHostTask task = new TaskHostTask(
+                    taskLocation,
+                    taskLoggingContext,
+                    buildComponentHost,
+                    mergedParameters,
+                    _loadedType
 #if FEATURE_APPDOMAIN
                     , appDomainSetup
 #endif
                     );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                 return task;
             }
             else
@@ -369,15 +374,23 @@ internal ITask CreateTaskInstance(ElementLocation taskLocation, TaskLoggingConte
                 AppDomain taskAppDomain = null;
 #endif
 
-                ITask taskInstance = TaskLoader.CreateTask(_loadedType, _taskName, taskLocation.File, taskLocation.Line, taskLocation.Column, new TaskLoader.LogError(ErrorLoggingDelegate)
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+                ITask taskInstance = TaskLoader.CreateTask(
+                    _loadedType,
+                    _taskName,
+                    taskLocation.File,
+                    taskLocation.Line,
+                    taskLocation.Column,
+                    new TaskLoader.LogError(ErrorLoggingDelegate),
 #if FEATURE_APPDOMAIN
-                    , appDomainSetup
+                    appDomainSetup,
 #endif
-                    , isOutOfProc
+                    isOutOfProc
 #if FEATURE_APPDOMAIN
                     , out taskAppDomain
 #endif
                     );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
 #if FEATURE_APPDOMAIN
                 if (taskAppDomain != null)
@@ -456,8 +469,7 @@ private static void VerifyThrowIdentityParametersValid(IDictionary<string, strin
                 {
                     if (!XMakeAttributes.IsValidMSBuildRuntimeValue(runtime))
                     {
-                        ProjectErrorUtilities.ThrowInvalidProject
-                                (
+                        ProjectErrorUtilities.ThrowInvalidProject(
                                     errorLocation,
                                     "TaskLoadFailureInvalidTaskHostFactoryParameter",
                                     taskName,
@@ -466,8 +478,7 @@ private static void VerifyThrowIdentityParametersValid(IDictionary<string, strin
                                     XMakeAttributes.MSBuildRuntimeValues.clr2,
                                     XMakeAttributes.MSBuildRuntimeValues.clr4,
                                     XMakeAttributes.MSBuildRuntimeValues.currentRuntime,
-                                    XMakeAttributes.MSBuildRuntimeValues.any
-                                );
+                                    XMakeAttributes.MSBuildRuntimeValues.any);
                     }
                 }
 
@@ -476,8 +487,7 @@ private static void VerifyThrowIdentityParametersValid(IDictionary<string, strin
                 {
                     if (!XMakeAttributes.IsValidMSBuildArchitectureValue(architecture))
                     {
-                        ProjectErrorUtilities.ThrowInvalidProject
-                                (
+                        ProjectErrorUtilities.ThrowInvalidProject(
                                     errorLocation,
                                     "TaskLoadFailureInvalidTaskHostFactoryParameter",
                                     taskName,
@@ -486,8 +496,7 @@ private static void VerifyThrowIdentityParametersValid(IDictionary<string, strin
                                     XMakeAttributes.MSBuildArchitectureValues.x86,
                                     XMakeAttributes.MSBuildArchitectureValues.x64,
                                     XMakeAttributes.MSBuildArchitectureValues.currentArchitecture,
-                                    XMakeAttributes.MSBuildArchitectureValues.any
-                                );
+                                    XMakeAttributes.MSBuildArchitectureValues.any);
                     }
                 }
             }
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 3d952b7eea6..632bd36662c 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -124,11 +124,19 @@ internal class TaskHostTask : IGeneratedTask, ICancelableTask, INodePacketFactor
         /// <summary>
         /// Constructor
         /// </summary>
-        public TaskHostTask(IElementLocation taskLocation, TaskLoggingContext taskLoggingContext, IBuildComponentHost buildComponentHost, IDictionary<string, string> taskHostParameters, LoadedType taskType
+        ///
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+        public TaskHostTask(
+            IElementLocation taskLocation,
+            TaskLoggingContext taskLoggingContext,
+            IBuildComponentHost buildComponentHost,
+            IDictionary<string, string> taskHostParameters,
+            LoadedType taskType
 #if FEATURE_APPDOMAIN
                 , AppDomainSetup appDomainSetup
 #endif
             )
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         {
             ErrorUtilities.VerifyThrowInternalNull(taskType, nameof(taskType));
 
@@ -254,8 +262,7 @@ public bool Execute()
             }
 
             TaskHostConfiguration hostConfiguration =
-                new TaskHostConfiguration
-                    (
+                new TaskHostConfiguration(
                         _buildComponentHost.BuildParameters.NodeId,
                         NativeMethodsShared.GetCurrentDirectory(),
                         CommunicationsUtilities.GetEnvironmentVariables(),
@@ -275,9 +282,7 @@ public bool Execute()
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
                         _taskLoggingContext.GetWarningsAsErrors(),
                         _taskLoggingContext.GetWarningsNotAsErrors(),
-                        _taskLoggingContext.GetWarningsAsMessages()
-
-                    );
+                        _taskLoggingContext.GetWarningsAsMessages());
 
             try
             {
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index c93115fb9fd..d59c8eae37c 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -218,8 +218,7 @@ internal IDictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> TaskReg
         /// </summary>
         /// <typeparam name="P">A type derived from IProperty</typeparam>
         /// <typeparam name="I">A type derived from IItem</typeparam>
-        internal static void RegisterTasksFromUsingTaskElement<P, I>
-            (
+        internal static void RegisterTasksFromUsingTaskElement<P, I>(
             ILoggingService loggingService,
             BuildEventContext buildEventContext,
             string directoryOfImportingFile,
@@ -227,15 +226,13 @@ internal static void RegisterTasksFromUsingTaskElement<P, I>
             TaskRegistry taskRegistry,
             Expander<P, I> expander,
             ExpanderOptions expanderOptions,
-            IFileSystem fileSystem
-            )
+            IFileSystem fileSystem)
             where P : class, IProperty
             where I : class, IItem
         {
             ErrorUtilities.VerifyThrowInternalNull(directoryOfImportingFile, nameof(directoryOfImportingFile));
 
-            if (!ConditionEvaluator.EvaluateCondition
-                (
+            if (!ConditionEvaluator.EvaluateCondition(
                 projectUsingTaskXml.Condition,
                 ParserOptions.AllowPropertiesAndItemLists,
                 expander,
@@ -244,8 +241,7 @@ IFileSystem fileSystem
                 projectUsingTaskXml.ConditionLocation,
                 loggingService,
                 buildEventContext,
-                fileSystem
-                ))
+                fileSystem))
             {
                 return;
             }
@@ -255,16 +251,14 @@ IFileSystem fileSystem
 
             string taskName = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.TaskName, expanderOptions, projectUsingTaskXml.TaskNameLocation);
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 taskName.Length > 0,
                 projectUsingTaskXml.TaskNameLocation,
                 "InvalidEvaluatedAttributeValue",
                 taskName,
                 projectUsingTaskXml.TaskName,
                 XMakeAttributes.name,
-                XMakeElements.usingTask
-                );
+                XMakeElements.usingTask);
 
             string taskFactory = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.TaskFactory, expanderOptions, projectUsingTaskXml.TaskFactoryLocation);
 
@@ -282,27 +276,23 @@ IFileSystem fileSystem
                 assemblyName = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.AssemblyName, expanderOptions, projectUsingTaskXml.AssemblyNameLocation);
             }
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 assemblyFile == null || assemblyFile.Length > 0,
                 projectUsingTaskXml.AssemblyFileLocation,
                 "InvalidEvaluatedAttributeValue",
                 assemblyFile,
                 projectUsingTaskXml.AssemblyFile,
                 XMakeAttributes.assemblyFile,
-                XMakeElements.usingTask
-                );
+                XMakeElements.usingTask);
 
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-                (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 assemblyName == null || assemblyName.Length > 0,
                 projectUsingTaskXml.AssemblyNameLocation,
                 "InvalidEvaluatedAttributeValue",
                 assemblyName,
                 projectUsingTaskXml.AssemblyName,
                 XMakeAttributes.assemblyName,
-                XMakeElements.usingTask
-                );
+                XMakeElements.usingTask);
 
             // Ensure the assembly file/path is relative to the project in which this <UsingTask> node was defined -- we
             // don't want paths from imported projects being interpreted relative to the main project file.
@@ -325,8 +315,7 @@ IFileSystem fileSystem
                     if (
                             assemblyFile != null &&
                             (assemblyFile.EndsWith(s_tasksV4Filename, StringComparison.OrdinalIgnoreCase) || assemblyFile.EndsWith(s_tasksV12Filename, StringComparison.OrdinalIgnoreCase)) &&
-                            !FileUtilities.FileExistsNoThrow(assemblyFile, fileSystem)
-                        )
+                            !FileUtilities.FileExistsNoThrow(assemblyFile, fileSystem))
                     {
                         string replacedAssemblyFile = Path.Combine(Path.GetDirectoryName(assemblyFile), s_tasksCoreFilename);
 
@@ -345,8 +334,7 @@ IFileSystem fileSystem
                             (
                                 assemblyName.Equals(s_tasksV4SimpleName, StringComparison.OrdinalIgnoreCase) &&
                                 !FileUtilities.FileExistsNoThrow(s_potentialTasksV4Location, fileSystem) &&
-                                FileUtilities.FileExistsNoThrow(s_potentialTasksCoreLocation, fileSystem)
-                            )
+                                FileUtilities.FileExistsNoThrow(s_potentialTasksCoreLocation, fileSystem))
                         {
                             assemblyName = s_tasksCoreSimpleName;
                         }
@@ -354,8 +342,7 @@ IFileSystem fileSystem
                             (
                                 assemblyName.Equals(s_tasksV12SimpleName, StringComparison.OrdinalIgnoreCase) &&
                                 !FileUtilities.FileExistsNoThrow(s_potentialTasksV12Location, fileSystem) &&
-                                FileUtilities.FileExistsNoThrow(s_potentialTasksCoreLocation, fileSystem)
-                            )
+                                FileUtilities.FileExistsNoThrow(s_potentialTasksCoreLocation, fileSystem))
                         {
                             assemblyName = s_tasksCoreSimpleName;
                         }
@@ -403,15 +390,13 @@ private static Dictionary<string, string> CreateTaskFactoryParametersDictionary(
         /// Given a task name, this method retrieves the task class. If the task has been requested before, it will be found in
         /// the class cache; otherwise, &lt;UsingTask&gt; declarations will be used to search the appropriate assemblies.
         /// </summary>
-        internal TaskFactoryWrapper GetRegisteredTask
-        (
+        internal TaskFactoryWrapper GetRegisteredTask(
             string taskName,
             string taskProjectFile,
             IDictionary<string, string> taskIdentityParameters,
             bool exactMatchRequired,
             TargetLoggingContext targetLoggingContext,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             TaskFactoryWrapper taskFactory = null;
 
@@ -458,16 +443,14 @@ ElementLocation elementLocation
         /// <param name="elementLocation">The location of the task element in the project file.</param>
         /// <param name="retrievedFromCache">True if the record was retrieved from the cache.</param>
         /// <returns>The task registration record, or null if none was found.</returns>
-        internal RegisteredTaskRecord GetTaskRegistrationRecord
-            (
+        internal RegisteredTaskRecord GetTaskRegistrationRecord(
             string taskName,
             string taskProjectFile,
             IDictionary<string, string> taskIdentityParameters,
             bool exactMatchRequired,
             TargetLoggingContext targetLoggingContext,
             ElementLocation elementLocation,
-            out bool retrievedFromCache
-            )
+            out bool retrievedFromCache)
         {
             RegisteredTaskRecord taskRecord = null;
             retrievedFromCache = false;
@@ -662,8 +645,7 @@ private Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> GetReleva
         /// Registers an evaluated using task tag for future
         /// consultation
         /// </summary>
-        private void RegisterTask
-        (
+        private void RegisterTask(
             string taskName,
             AssemblyLoadInfo assemblyLoadInfo,
             string taskFactory,
@@ -672,8 +654,7 @@ private void RegisterTask
             ILoggingService loggingService,
             BuildEventContext context,
             ProjectUsingTaskElement projectUsingTaskInXml,
-            bool overrideTask = false
-        )
+            bool overrideTask = false)
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalNull(assemblyLoadInfo, nameof(assemblyLoadInfo));
@@ -740,15 +721,13 @@ private static Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> Cr
         /// Given a task name and a list of records which may contain the task, this helper method will ask the records to see if the task name
         /// can be created by the factories which are wrapped by the records. (this is done by instantiating the task factory and asking it).
         /// </summary>
-        private RegisteredTaskRecord GetMatchingRegistration
-        (
+        private RegisteredTaskRecord GetMatchingRegistration(
             string taskName,
             List<RegisteredTaskRecord> taskRecords,
             string taskProjectFile,
             IDictionary<string, string> taskIdentityParameters,
             TargetLoggingContext targetLoggingContext,
-            ElementLocation elementLocation
-        )
+            ElementLocation elementLocation)
         {
             foreach (RegisteredTaskRecord record in taskRecords)
             {
@@ -1360,8 +1339,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                             (
                                 s_forceTaskHostLaunch &&
                                 !TypeLoader.IsPartialTypeNameMatch(RegisteredName, "MSBuild") &&
-                                !TypeLoader.IsPartialTypeNameMatch(RegisteredName, "CallTarget")
-                            );
+                                !TypeLoader.IsPartialTypeNameMatch(RegisteredName, "CallTarget"));
 
                         // Create an instance of the internal assembly task factory, it has the error handling built into its methods.
                         AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
@@ -1452,8 +1430,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                         // TaskFactoryParameters will always be null unless specifically created to have runtime and architecture parameters.
                                         if (TaskFactoryParameters != null)
                                         {
-                                            targetLoggingContext.LogWarning
-                                                (
+                                            targetLoggingContext.LogWarning(
                                                 null,
                                                     new BuildEventFileInfo(elementLocation),
                                                     "TaskFactoryWillIgnoreTaskFactoryParameters",
@@ -1492,14 +1469,12 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                 message += e.Message;
 
                                 // Could get an invalid cast when Creating Instance and UnWrap due to the framework assembly not being the same.
-                                targetLoggingContext.LogError
-                                (
+                                targetLoggingContext.LogError(
                                     new BuildEventFileInfo(elementLocation.File, elementLocation.Line, elementLocation.Column),
                                     "TaskFactoryInstantiationFailureErrorInvalidCast",
                                     TaskFactoryAttributeName,
                                     taskFactoryLoadInfo.AssemblyLocation,
-                                    message
-                                );
+                                    message);
 
                                 return false;
                             }
@@ -1622,15 +1597,13 @@ private void EvaluateTaskBody<P, I>(Expander<P, I> expander, ProjectUsingTaskBod
 
                     if (!Boolean.TryParse(expandedType, out evaluate))
                     {
-                        ProjectErrorUtilities.ThrowInvalidProject
-                        (
+                        ProjectErrorUtilities.ThrowInvalidProject(
                          taskElement.EvaluateLocation,
                          "InvalidEvaluatedAttributeValue",
                          expandedType,
                          taskElement.Evaluate,
                          XMakeAttributes.evaluate,
-                         XMakeElements.usingTaskBody
-                        );
+                         XMakeElements.usingTaskBody);
                     }
 
                     _taskBodyEvaluated = evaluate;
@@ -1664,16 +1637,14 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                         string expandedType = expander.ExpandIntoStringLeaveEscaped(parameter.ParameterType, expanderOptions, parameter.ParameterTypeLocation);
 
                         // Cannot have a null or empty name for the type after expansion.
-                        ProjectErrorUtilities.VerifyThrowInvalidProject
-                        (
+                        ProjectErrorUtilities.VerifyThrowInvalidProject(
                             !String.IsNullOrEmpty(expandedType),
                             parameter.ParameterTypeLocation,
                             "InvalidEvaluatedAttributeValue",
                             expandedType,
                             parameter.ParameterType,
                             XMakeAttributes.parameterType,
-                            XMakeElements.usingTaskParameter
-                        );
+                            XMakeElements.usingTaskParameter);
 
                         Type paramType;
                         if (expandedType.StartsWith("Microsoft.Build.Framework.", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(","))
@@ -1691,46 +1662,39 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                                         Type.GetType(expandedType + "," + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);
                         }
 
-                        ProjectErrorUtilities.VerifyThrowInvalidProject
-                        (
+                        ProjectErrorUtilities.VerifyThrowInvalidProject(
                             paramType != null,
                             parameter.ParameterTypeLocation,
                             "InvalidEvaluatedAttributeValue",
                             expandedType,
                             parameter.ParameterType,
                             XMakeAttributes.parameterType,
-                            XMakeElements.usingTaskParameter
-                        );
+                            XMakeElements.usingTaskParameter);
 
                         bool output;
                         string expandedOutput = expander.ExpandIntoStringLeaveEscaped(parameter.Output, expanderOptions, parameter.OutputLocation);
 
                         if (!Boolean.TryParse(expandedOutput, out output))
                         {
-                            ProjectErrorUtilities.ThrowInvalidProject
-                            (
+                            ProjectErrorUtilities.ThrowInvalidProject(
                                 parameter.OutputLocation,
                                 "InvalidEvaluatedAttributeValue",
                                 expandedOutput,
                                 parameter.Output,
                                 XMakeAttributes.output,
-                                XMakeElements.usingTaskParameter
-                            );
+                                XMakeElements.usingTaskParameter);
                         }
 
                         if (
                             (!output && (!TaskParameterTypeVerifier.IsValidInputParameter(paramType))) ||
-                            (output && !TaskParameterTypeVerifier.IsValidOutputParameter(paramType))
-                        )
+                            (output && !TaskParameterTypeVerifier.IsValidOutputParameter(paramType)))
                         {
-                            ProjectErrorUtilities.ThrowInvalidProject
-                            (
+                            ProjectErrorUtilities.ThrowInvalidProject(
                                 parameter.Location,
                                 "UnsupportedTaskParameterTypeError",
                                 paramType.FullName,
                                 parameter.ParameterType,
-                                parameter.Name
-                            );
+                                parameter.Name);
                         }
 
                         bool required;
@@ -1738,15 +1702,13 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
 
                         if (!Boolean.TryParse(expandedRequired, out required))
                         {
-                            ProjectErrorUtilities.ThrowInvalidProject
-                            (
+                            ProjectErrorUtilities.ThrowInvalidProject(
                                 parameter.RequiredLocation,
                                 "InvalidEvaluatedAttributeValue",
                                 expandedRequired,
                                 parameter.Required,
                                 XMakeAttributes.required,
-                                XMakeElements.usingTaskParameter
-                            );
+                                XMakeElements.usingTaskParameter);
                         }
 
                         UsingTaskParameters.Add(parameter.Name, new TaskPropertyInfo(parameter.Name, paramType, output, required));
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 17909615925..e961350021e 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -85,13 +85,11 @@ public ConsoleLogger(LoggerVerbosity verbosity) :
         /// <param name="write"></param>
         /// <param name="colorSet"></param>
         /// <param name="colorReset"></param>
-        public ConsoleLogger
-        (
+        public ConsoleLogger(
             LoggerVerbosity verbosity,
             WriteHandler write,
             ColorSetter colorSet,
-            ColorResetter colorReset
-        )
+            ColorResetter colorReset)
         {
             _verbosity = verbosity;
             _write = write;
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 86190000101..b161ef4c308 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -74,8 +74,8 @@ public void Log()
                 // Project file path with color
                 $"{ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default)} [{TargetFramework ?? "*"}]",
                 $"({MessageCount} Messages, {WarningCount} Warnings, {ErrorCount} Errors)",
-                Console.WindowWidth
-            );
+                Console.WindowWidth);
+
             // Create or update line
             if (Line is null)
             {
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index 290a79b4da5..962a50c5032 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -31,14 +31,12 @@ internal LoggerDescription()
         /// <summary>
         /// Creates a logger description from given data
         /// </summary>
-        public LoggerDescription
-        (
+        public LoggerDescription(
             string loggerClassName,
             string loggerAssemblyName,
             string loggerAssemblyFile,
             string loggerSwitchParameters,
-            LoggerVerbosity verbosity
-        ) : this(loggerClassName,
+            LoggerVerbosity verbosity) : this(loggerClassName,
             loggerAssemblyName,
             loggerAssemblyFile,
             loggerSwitchParameters,
@@ -50,15 +48,13 @@ LoggerVerbosity verbosity
         /// <summary>
         /// Creates a logger description from given data
         /// </summary>
-        public LoggerDescription
-        (
+        public LoggerDescription(
             string loggerClassName,
             string loggerAssemblyName,
             string loggerAssemblyFile,
             string loggerSwitchParameters,
             LoggerVerbosity verbosity,
-            bool isOptional
-        )
+            bool isOptional)
         {
             _loggerClassName = loggerClassName;
 
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 3d8a02ca664..a83a5a3af80 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -50,8 +50,7 @@ public ParallelConsoleLogger(LoggerVerbosity verbosity)
                 verbosity,
                 new WriteHandler(Console.Out.Write),
                 new ColorSetter(SetColor),
-                new ColorResetter(ResetColor)
-            )
+                new ColorResetter(ResetColor))
         {
             // do nothing
         }
@@ -59,13 +58,11 @@ public ParallelConsoleLogger(LoggerVerbosity verbosity)
         /// <summary>
         /// Initializes the logger, with alternate output handlers.
         /// </summary>
-        public ParallelConsoleLogger
-        (
+        public ParallelConsoleLogger(
             LoggerVerbosity verbosity,
             WriteHandler write,
             ColorSetter colorSet,
-            ColorResetter colorReset
-        )
+            ColorResetter colorReset)
         {
             InitializeConsoleMethods(verbosity, write, colorSet, colorReset);
             _deferredMessages = new Dictionary<BuildEventContext, List<BuildMessageEventArgs>>(s_compareContextNodeId);
@@ -1153,8 +1150,7 @@ public override void MessageHandler(object sender, BuildMessageEventArgs e)
                        _hasBuildStarted
                        && e.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId
                        && _buildEventManager.GetProjectStartedEvent(e.BuildEventContext) == null
-                       && IsVerbosityAtLeast(LoggerVerbosity.Normal)
-                    )
+                       && IsVerbosityAtLeast(LoggerVerbosity.Normal))
                 {
                     if (!_deferredMessages.TryGetValue(e.BuildEventContext, out List<BuildMessageEventArgs> messageList))
                     {
diff --git a/src/Build/Logging/ProfilerLogger.cs b/src/Build/Logging/ProfilerLogger.cs
index a2338b8f051..c85a1824c57 100644
--- a/src/Build/Logging/ProfilerLogger.cs
+++ b/src/Build/Logging/ProfilerLogger.cs
@@ -271,8 +271,7 @@ private static ProfiledLocation AggregateProfiledLocation(ProfiledLocation locat
             return new ProfiledLocation(
                 location.InclusiveTime + otherLocation.InclusiveTime,
                 location.ExclusiveTime + otherLocation.ExclusiveTime,
-                location.NumberOfHits + 1
-            );
+                location.NumberOfHits + 1);
         }
 
         /// <summary>
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index a05005b8f8a..7d2e2d0385a 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -42,8 +42,7 @@ public SerialConsoleLogger(LoggerVerbosity verbosity)
                 verbosity,
                 new WriteHandler(Console.Out.Write),
                 new ColorSetter(SetColor),
-                new ColorResetter(ResetColor)
-            )
+                new ColorResetter(ResetColor))
         {
             // do nothing
         }
@@ -55,13 +54,11 @@ public SerialConsoleLogger(LoggerVerbosity verbosity)
         /// <param name="write"></param>
         /// <param name="colorSet"></param>
         /// <param name="colorReset"></param>
-        public SerialConsoleLogger
-        (
+        public SerialConsoleLogger(
             LoggerVerbosity verbosity,
             WriteHandler write,
             ColorSetter colorSet,
-            ColorResetter colorReset
-        )
+            ColorResetter colorReset)
         {
             InitializeConsoleMethods(verbosity, write, colorSet, colorReset);
         }
@@ -796,12 +793,10 @@ private void SetErrorsOrWarningsOnCurrentFrame()
         /// <param name="condition"></param>
         /// <param name="unformattedMessage"></param>
         /// <param name="args"></param>
-        private void VerifyStack
-            (
+        private void VerifyStack(
             bool condition,
             string unformattedMessage,
-            params object[] args
-            )
+            params object[] args)
         {
             if (!condition && !ignoreLoggerErrors)
             {
@@ -839,16 +834,14 @@ internal struct Frame
             /// <param name="targets">targets to execute, in the case of a project frame</param>
             /// <param name="fileOfTarget">the file name where the target is defined</param>
             /// <param name="parent">parent project file</param>
-            internal Frame
-                (
+            internal Frame(
                 FrameType t,
                 bool d,
                 int indent,
                 string s,
                 string targets,
                 string fileOfTarget,
-                string parent
-                )
+                string parent)
             {
                 type = t;
                 displayed = d;
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index f455a80fddf..0fecc8f58e1 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -54,13 +54,11 @@ internal static void CaptureLazyWildcardRegexes()
         /// and EvaluationLoggingContext.</param>
         /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
         /// <returns>Array of file paths, unescaped.</returns>
-        internal static string[] GetFileListUnescaped
-            (
+        internal static string[] GetFileListUnescaped(
             string directoryEscaped,
             string filespecEscaped,
             object loggingMechanism = null,
-            IElementLocation excludeLocation = null
-            )
+            IElementLocation excludeLocation = null)
         {
             return GetFileList(
                 directoryEscaped,
@@ -99,8 +97,7 @@ internal static string[] GetFileListUnescaped
         /// <param name="disableExcludeDriveEnumerationWarning">Flag used to detect when to properly log a warning
         /// for the Exclude attribute after detecting a drive enumerating wildcard.</param>
         /// <returns>Array of file paths, escaped.</returns>
-        internal static string[] GetFileListEscaped
-            (
+        internal static string[] GetFileListEscaped(
             string directoryEscaped,
             string filespecEscaped,
             IEnumerable<string> excludeSpecsEscaped = null,
@@ -112,8 +109,7 @@ internal static string[] GetFileListEscaped
             IElementLocation importLocation = null,
             BuildEventContext buildEventContext = null,
             string buildEventFileInfoFullPath = null,
-            bool disableExcludeDriveEnumerationWarning = false
-            )
+            bool disableExcludeDriveEnumerationWarning = false)
         {
             return GetFileList(
                 directoryEscaped,
@@ -172,8 +168,7 @@ internal static bool FilespecHasWildcards(string filespecEscaped)
         /// <param name="disableExcludeDriveEnumerationWarning">Flag used to detect when to properly log a warning
         /// for the Exclude attribute after detecting a drive enumerating wildcard.</param>
         /// <returns>Array of file paths.</returns>
-        private static string[] GetFileList
-            (
+        private static string[] GetFileList(
             string directoryEscaped,
             string filespecEscaped,
             bool returnEscaped,
@@ -186,8 +181,7 @@ private static string[] GetFileList
             IElementLocation importLocation = null,
             BuildEventContext buildEventContext = null,
             string buildEventFileInfoFullPath = null,
-            bool disableExcludeDriveEnumerationWarning = false
-            )
+            bool disableExcludeDriveEnumerationWarning = false)
         {
             ErrorUtilities.VerifyThrowInternalLength(filespecEscaped, nameof(filespecEscaped));
 
diff --git a/src/Build/Xml/ProjectXmlUtilities.cs b/src/Build/Xml/ProjectXmlUtilities.cs
index 40c33d8c30b..61454fc4557 100644
--- a/src/Build/Xml/ProjectXmlUtilities.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.cs
@@ -128,15 +128,13 @@ internal static void VerifyThrowProjectAttributeEitherMissingOrNotEmpty(XmlEleme
         /// </summary>
         internal static void VerifyThrowProjectAttributeEitherMissingOrNotEmpty(XmlElementWithLocation xmlElement, XmlAttributeWithLocation attribute, string attributeName)
         {
-            ProjectErrorUtilities.VerifyThrowInvalidProject
-            (
+            ProjectErrorUtilities.VerifyThrowInvalidProject(
                 attribute == null || attribute.Value.Length > 0,
                 attribute?.Location,
                 "InvalidAttributeValue",
                 String.Empty,
                 attributeName,
-                xmlElement.Name
-            );
+                xmlElement.Name);
         }
 
         /// <summary>
diff --git a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
index d2af49af234..e7be6f4e6a7 100644
--- a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
+++ b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
@@ -19,12 +19,10 @@ public class CustomEventArgSerialization_Tests : IDisposable
         // Generic build class to test custom serialization of abstract class BuildEventArgs
         internal class GenericBuildEventArg : BuildEventArgs
         {
-            internal GenericBuildEventArg
-        (
+            internal GenericBuildEventArg(
             string message,
             string helpKeyword,
-            string senderName
-        )
+            string senderName)
                 : base(message, helpKeyword, senderName)
             {
                 // Do Nothing
diff --git a/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs b/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
index 309efaccb98..2342239621c 100644
--- a/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
@@ -59,8 +59,7 @@ public void ItemsAndPropertiesDifferentEquals()
         {
             ArrayList itemsList = new ArrayList();
             ArrayList propertiesList = new ArrayList();
-            ProjectStartedEventArgs differentItemsAndProperties = new ProjectStartedEventArgs
-                (
+            ProjectStartedEventArgs differentItemsAndProperties = new ProjectStartedEventArgs(
                   s_baseProjectStartedEvent.ProjectId,
                   s_baseProjectStartedEvent.Message,
                   s_baseProjectStartedEvent.HelpKeyword,
@@ -69,8 +68,7 @@ public void ItemsAndPropertiesDifferentEquals()
                   propertiesList,
                   itemsList,
                   s_baseProjectStartedEvent.ParentProjectBuildEventContext,
-                  s_baseProjectStartedEvent.Timestamp
-                );
+                  s_baseProjectStartedEvent.Timestamp);
 
             s_baseProjectStartedEvent.Properties.ShouldNotBe(propertiesList);
             s_baseProjectStartedEvent.Items.ShouldNotBe(itemsList);
diff --git a/src/Framework/BuildErrorEventArgs.cs b/src/Framework/BuildErrorEventArgs.cs
index c8b9e23f432..ac94637d4d1 100644
--- a/src/Framework/BuildErrorEventArgs.cs
+++ b/src/Framework/BuildErrorEventArgs.cs
@@ -79,8 +79,7 @@ public class BuildErrorEventArgs : LazyFormattedBuildEventArgs
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
-        public BuildErrorEventArgs
-            (
+        public BuildErrorEventArgs(
             string subcategory,
             string code,
             string file,
@@ -90,8 +89,7 @@ public BuildErrorEventArgs
             int endColumnNumber,
             string message,
             string helpKeyword,
-            string senderName
-            )
+            string senderName)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, DateTime.UtcNow)
         {
         }
@@ -110,8 +108,7 @@ string senderName
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        public BuildErrorEventArgs
-            (
+        public BuildErrorEventArgs(
             string subcategory,
             string code,
             string file,
@@ -122,8 +119,7 @@ public BuildErrorEventArgs
             string message,
             string helpKeyword,
             string senderName,
-            DateTime eventTimestamp
-            )
+            DateTime eventTimestamp)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, null, eventTimestamp, null)
         {
             // do nothing
@@ -145,8 +141,7 @@ DateTime eventTimestamp
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildErrorEventArgs
-            (
+        public BuildErrorEventArgs(
             string subcategory,
             string code,
             string file,
@@ -158,8 +153,7 @@ public BuildErrorEventArgs
             string helpKeyword,
             string senderName,
             DateTime eventTimestamp,
-            params object[] messageArgs
-            )
+            params object[] messageArgs)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, null, eventTimestamp, messageArgs)
         {
             // do nothing
@@ -181,8 +175,7 @@ params object[] messageArgs
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildErrorEventArgs
-            (
+        public BuildErrorEventArgs(
             string subcategory,
             string code,
             string file,
@@ -195,8 +188,7 @@ public BuildErrorEventArgs
             string senderName,
             string helpLink,
             DateTime eventTimestamp,
-            params object[] messageArgs
-            )
+            params object[] messageArgs)
             : base(message, helpKeyword, senderName, eventTimestamp, messageArgs)
         {
             this.subcategory = subcategory;
diff --git a/src/Framework/BuildEventContext.cs b/src/Framework/BuildEventContext.cs
index 92e7673f67a..44fda99587c 100644
--- a/src/Framework/BuildEventContext.cs
+++ b/src/Framework/BuildEventContext.cs
@@ -56,13 +56,11 @@ public class BuildEventContext
         /// <summary>
         /// This is the original constructor.  No one should ever use this except internally for backward compatibility.
         /// </summary>
-        public BuildEventContext
-        (
+        public BuildEventContext(
             int nodeId,
             int targetId,
             int projectContextId,
-            int taskId
-        )
+            int taskId)
             : this(InvalidSubmissionId, nodeId, InvalidEvaluationId, InvalidProjectInstanceId, projectContextId, targetId, taskId)
         {
             // UNDONE: This is obsolete.
@@ -71,14 +69,12 @@ int taskId
         /// <summary>
         /// Constructs a BuildEventContext with a specified project instance id.
         /// </summary>
-        public BuildEventContext
-        (
+        public BuildEventContext(
             int nodeId,
             int projectInstanceId,
             int projectContextId,
             int targetId,
-            int taskId
-        )
+            int taskId)
             : this(InvalidSubmissionId, nodeId, InvalidEvaluationId, projectInstanceId, projectContextId, targetId, taskId)
         {
         }
@@ -86,15 +82,13 @@ int taskId
         /// <summary>
         /// Constructs a BuildEventContext with a specific submission id
         /// </summary>
-        public BuildEventContext
-        (
+        public BuildEventContext(
             int submissionId,
             int nodeId,
             int projectInstanceId,
             int projectContextId,
             int targetId,
-            int taskId
-        )
+            int taskId)
             : this(submissionId, nodeId, InvalidEvaluationId, projectInstanceId, projectContextId, targetId, taskId)
         {
         }
@@ -102,16 +96,14 @@ int taskId
         /// <summary>
         /// Constructs a BuildEventContext
         /// </summary>
-        public BuildEventContext
-        (
+        public BuildEventContext(
             int submissionId,
             int nodeId,
             int evaluationId,
             int projectInstanceId,
             int projectContextId,
             int targetId,
-            int taskId
-        )
+            int taskId)
         {
             _submissionId = submissionId;
             _nodeId = nodeId;
diff --git a/src/Framework/BuildFinishedEventArgs.cs b/src/Framework/BuildFinishedEventArgs.cs
index a496eefb701..8073e8c7260 100644
--- a/src/Framework/BuildFinishedEventArgs.cs
+++ b/src/Framework/BuildFinishedEventArgs.cs
@@ -39,12 +39,10 @@ protected BuildFinishedEventArgs()
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="succeeded">True indicates a successful build</param>
-        public BuildFinishedEventArgs
-        (
+        public BuildFinishedEventArgs(
             string? message,
             string? helpKeyword,
-            bool succeeded
-        )
+            bool succeeded)
             : this(message, helpKeyword, succeeded, DateTime.UtcNow)
         {
         }
@@ -56,13 +54,11 @@ bool succeeded
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="succeeded">True indicates a successful build</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public BuildFinishedEventArgs
-        (
+        public BuildFinishedEventArgs(
             string? message,
             string? helpKeyword,
             bool succeeded,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(message, helpKeyword, succeeded, eventTimestamp, null)
         {
             // do nothing
@@ -76,14 +72,12 @@ DateTime eventTimestamp
         /// <param name="succeeded">True indicates a successful build</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildFinishedEventArgs
-        (
+        public BuildFinishedEventArgs(
             string? message,
             string? helpKeyword,
             bool succeeded,
             DateTime eventTimestamp,
-            params object[]? messageArgs
-        )
+            params object[]? messageArgs)
             : base(message, helpKeyword, "MSBuild", eventTimestamp, messageArgs)
         {
             this.succeeded = succeeded;
diff --git a/src/Framework/BuildMessageEventArgs.cs b/src/Framework/BuildMessageEventArgs.cs
index e65cf09bb59..79a679f305d 100644
--- a/src/Framework/BuildMessageEventArgs.cs
+++ b/src/Framework/BuildMessageEventArgs.cs
@@ -60,13 +60,11 @@ protected BuildMessageEventArgs()
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
         /// <param name="importance">importance of the message</param>
-        public BuildMessageEventArgs
-        (
+        public BuildMessageEventArgs(
             string message,
             string helpKeyword,
             string senderName,
-            MessageImportance importance
-        )
+            MessageImportance importance)
             : this(message, helpKeyword, senderName, importance, DateTime.UtcNow)
         {
         }
@@ -79,14 +77,12 @@ MessageImportance importance
         /// <param name="senderName">name of event sender</param>
         /// <param name="importance">importance of the message</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        public BuildMessageEventArgs
-        (
+        public BuildMessageEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             MessageImportance importance,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(message, helpKeyword, senderName, importance, eventTimestamp, null)
         {
             // do nothing
@@ -101,15 +97,13 @@ DateTime eventTimestamp
         /// <param name="importance">importance of the message</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildMessageEventArgs
-        (
+        public BuildMessageEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             MessageImportance importance,
             DateTime eventTimestamp,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             : this(null, null, null, 0, 0, 0, 0, message, helpKeyword, senderName, importance, eventTimestamp, messageArgs)
         {
             // do nothing
@@ -129,8 +123,7 @@ params object[] messageArgs
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
         /// <param name="importance">importance of the message</param>
-        public BuildMessageEventArgs
-        (
+        public BuildMessageEventArgs(
             string subcategory,
             string code,
             string file,
@@ -141,8 +134,7 @@ public BuildMessageEventArgs
             string message,
             string helpKeyword,
             string senderName,
-            MessageImportance importance
-        )
+            MessageImportance importance)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, importance, DateTime.UtcNow)
         {
             // do nothing
@@ -163,8 +155,7 @@ MessageImportance importance
         /// <param name="senderName">name of event sender</param>
         /// <param name="importance">importance of the message</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
-        public BuildMessageEventArgs
-        (
+        public BuildMessageEventArgs(
             string subcategory,
             string code,
             string file,
@@ -176,8 +167,7 @@ public BuildMessageEventArgs
             string helpKeyword,
             string senderName,
             MessageImportance importance,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, importance, eventTimestamp, messageArgs: null)
         {
             // do nothing
@@ -199,8 +189,7 @@ DateTime eventTimestamp
         /// <param name="importance">importance of the message</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildMessageEventArgs
-        (
+        public BuildMessageEventArgs(
             string subcategory,
             string code,
             string file,
@@ -213,8 +202,7 @@ public BuildMessageEventArgs
             string senderName,
             MessageImportance importance,
             DateTime eventTimestamp,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             : base(message, helpKeyword, senderName, eventTimestamp, messageArgs)
         {
             this.importance = importance;
diff --git a/src/Framework/BuildStartedEventArgs.cs b/src/Framework/BuildStartedEventArgs.cs
index ff0b6415c95..7905010e20e 100644
--- a/src/Framework/BuildStartedEventArgs.cs
+++ b/src/Framework/BuildStartedEventArgs.cs
@@ -35,11 +35,9 @@ protected BuildStartedEventArgs()
         /// </summary>
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
-        public BuildStartedEventArgs
-        (
+        public BuildStartedEventArgs(
             string message,
-            string helpKeyword
-        )
+            string helpKeyword)
             : this(message, helpKeyword, DateTime.UtcNow)
         {
             // do nothing
@@ -52,12 +50,10 @@ string helpKeyword
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="environmentOfBuild">A dictionary which lists the environment of the build when the build is started.</param>
-        public BuildStartedEventArgs
-        (
+        public BuildStartedEventArgs(
             string? message,
             string? helpKeyword,
-            IDictionary<string, string> environmentOfBuild
-        )
+            IDictionary<string, string> environmentOfBuild)
             : this(message, helpKeyword, DateTime.UtcNow)
         {
             environmentOnBuildStart = environmentOfBuild;
@@ -69,12 +65,10 @@ IDictionary<string, string> environmentOfBuild
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public BuildStartedEventArgs
-        (
+        public BuildStartedEventArgs(
             string? message,
             string? helpKeyword,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(message, helpKeyword, eventTimestamp, null)
         {
             // do nothing
@@ -87,13 +81,11 @@ DateTime eventTimestamp
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
         /// <param name="messageArgs">message args</param>
-        public BuildStartedEventArgs
-        (
+        public BuildStartedEventArgs(
             string? message,
             string? helpKeyword,
             DateTime eventTimestamp,
-            params object[]? messageArgs
-        )
+            params object[]? messageArgs)
             : base(message, helpKeyword, "MSBuild", eventTimestamp, messageArgs)
         {
             // do nothing
diff --git a/src/Framework/BuildStatusEventArgs.cs b/src/Framework/BuildStatusEventArgs.cs
index c7a9e9ad0d5..6f7548f4c0a 100644
--- a/src/Framework/BuildStatusEventArgs.cs
+++ b/src/Framework/BuildStatusEventArgs.cs
@@ -35,12 +35,10 @@ protected BuildStatusEventArgs()
         /// <param name="message">text message</param> 
         /// <param name="helpKeyword">help keyword </param> 
         /// <param name="senderName">name of event sender</param> 
-        protected BuildStatusEventArgs
-        (
+        protected BuildStatusEventArgs(
             string? message,
             string? helpKeyword,
-            string? senderName
-        )
+            string? senderName)
             : this(message, helpKeyword, senderName, DateTime.UtcNow)
         {
             // do nothing 
@@ -54,13 +52,11 @@ protected BuildStatusEventArgs
         /// <param name="helpKeyword">help keyword </param> 
         /// <param name="senderName">name of event sender</param> 
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        protected BuildStatusEventArgs
-        (
+        protected BuildStatusEventArgs(
             string? message,
             string? helpKeyword,
             string? senderName,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(message, helpKeyword, senderName, eventTimestamp, messageArgs: null)
         {
             // do nothing
@@ -74,14 +70,12 @@ DateTime eventTimestamp
         /// <param name="senderName">name of event sender</param> 
         /// <param name="eventTimestamp">Timestamp when event was created</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
-        protected BuildStatusEventArgs
-        (
+        protected BuildStatusEventArgs(
             string? message,
             string? helpKeyword,
             string? senderName,
             DateTime eventTimestamp,
-            params object[]? messageArgs
-        )
+            params object[]? messageArgs)
             : base(message, helpKeyword, senderName, eventTimestamp, messageArgs)
         {
             // do nothing 
diff --git a/src/Framework/BuildWarningEventArgs.cs b/src/Framework/BuildWarningEventArgs.cs
index ea8d963afc3..5f399801e63 100644
--- a/src/Framework/BuildWarningEventArgs.cs
+++ b/src/Framework/BuildWarningEventArgs.cs
@@ -43,8 +43,7 @@ protected BuildWarningEventArgs()
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
-        public BuildWarningEventArgs
-        (
+        public BuildWarningEventArgs(
             string subcategory,
             string code,
             string file,
@@ -54,8 +53,7 @@ public BuildWarningEventArgs
             int endColumnNumber,
             string message,
             string helpKeyword,
-            string senderName
-        )
+            string senderName)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, DateTime.UtcNow)
         {
         }
@@ -74,8 +72,7 @@ string senderName
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
-        public BuildWarningEventArgs
-        (
+        public BuildWarningEventArgs(
             string subcategory,
             string code,
             string file,
@@ -86,8 +83,7 @@ public BuildWarningEventArgs
             string message,
             string helpKeyword,
             string senderName,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, eventTimestamp, null)
         {
             // do nothing
@@ -108,8 +104,7 @@ DateTime eventTimestamp
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildWarningEventArgs
-        (
+        public BuildWarningEventArgs(
             string subcategory,
             string code,
             string file,
@@ -121,8 +116,7 @@ public BuildWarningEventArgs
             string helpKeyword,
             string senderName,
             DateTime eventTimestamp,
-            params object[] messageArgs
-        ) : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, null, eventTimestamp, messageArgs)
+            params object[] messageArgs) : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, null, eventTimestamp, messageArgs)
         {
             // do nothing
         }
@@ -143,8 +137,7 @@ params object[] messageArgs
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
         /// <param name="messageArgs">message arguments</param>
-        public BuildWarningEventArgs
-        (
+        public BuildWarningEventArgs(
             string subcategory,
             string code,
             string file,
@@ -157,8 +150,7 @@ public BuildWarningEventArgs
             string senderName,
             string helpLink,
             DateTime eventTimestamp,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             : base(message, helpKeyword, senderName, eventTimestamp, messageArgs)
         {
             this.subcategory = subcategory;
diff --git a/src/Framework/CriticalBuildMessageEventArgs.cs b/src/Framework/CriticalBuildMessageEventArgs.cs
index 9fe9544de38..b9f5a39f732 100644
--- a/src/Framework/CriticalBuildMessageEventArgs.cs
+++ b/src/Framework/CriticalBuildMessageEventArgs.cs
@@ -32,8 +32,7 @@ public class CriticalBuildMessageEventArgs : BuildMessageEventArgs
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
-        public CriticalBuildMessageEventArgs
-        (
+        public CriticalBuildMessageEventArgs(
             string subcategory,
             string code,
             string file,
@@ -43,8 +42,7 @@ public CriticalBuildMessageEventArgs
             int endColumnNumber,
             string message,
             string helpKeyword,
-            string senderName
-        )
+            string senderName)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, DateTime.UtcNow)
         {
             // do nothing
@@ -64,8 +62,7 @@ string senderName
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
-        public CriticalBuildMessageEventArgs
-        (
+        public CriticalBuildMessageEventArgs(
             string subcategory,
             string code,
             string file,
@@ -76,8 +73,7 @@ public CriticalBuildMessageEventArgs
             string message,
             string helpKeyword,
             string senderName,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, eventTimestamp, null)
         {
             // do nothing
@@ -98,8 +94,7 @@ DateTime eventTimestamp
         /// <param name="senderName">name of event sender</param>
         /// <param name="eventTimestamp">custom timestamp for the event</param>
         /// <param name="messageArgs">message arguments</param>
-        public CriticalBuildMessageEventArgs
-        (
+        public CriticalBuildMessageEventArgs(
             string subcategory,
             string code,
             string file,
@@ -111,8 +106,7 @@ public CriticalBuildMessageEventArgs
             string helpKeyword,
             string senderName,
             DateTime eventTimestamp,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             //// Force importance to High. 
             : base(subcategory, code, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, helpKeyword, senderName, MessageImportance.High, eventTimestamp, messageArgs)
         {
diff --git a/src/Framework/CustomBuildEventArgs.cs b/src/Framework/CustomBuildEventArgs.cs
index 69523a573b3..1117a44892a 100644
--- a/src/Framework/CustomBuildEventArgs.cs
+++ b/src/Framework/CustomBuildEventArgs.cs
@@ -34,12 +34,10 @@ protected CustomBuildEventArgs()
         /// <param name="message">text message</param>
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of sender</param>
-        protected CustomBuildEventArgs
-        (
+        protected CustomBuildEventArgs(
             string message,
             string helpKeyword,
-            string senderName
-        )
+            string senderName)
             : this(message, helpKeyword, senderName, DateTime.UtcNow)
         {
             // do nothing
@@ -52,13 +50,11 @@ string senderName
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="senderName">name of sender</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        protected CustomBuildEventArgs
-        (
+        protected CustomBuildEventArgs(
             string message,
             string helpKeyword,
             string senderName,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(message, helpKeyword, senderName, eventTimestamp, null)
         {
             // do nothing
@@ -72,14 +68,12 @@ DateTime eventTimestamp
         /// <param name="senderName">name of sender</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
         /// <param name="messageArgs">Message arguments</param>
-        protected CustomBuildEventArgs
-        (
+        protected CustomBuildEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             DateTime eventTimestamp,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             : base(message, helpKeyword, senderName, eventTimestamp, messageArgs)
         {
             // do nothing
diff --git a/src/Framework/ErrorUtilities.cs b/src/Framework/ErrorUtilities.cs
index f90c6cc9d82..ca0375ee54d 100644
--- a/src/Framework/ErrorUtilities.cs
+++ b/src/Framework/ErrorUtilities.cs
@@ -29,11 +29,9 @@ internal class FrameworkErrorUtilities
         /// </summary>
         /// <param name="condition"></param>
         /// <param name="unformattedMessage"></param>
-        internal static void VerifyThrow
-        (
+        internal static void VerifyThrow(
             bool condition,
-            string unformattedMessage
-        )
+            string unformattedMessage)
         {
             if (!condition)
             {
diff --git a/src/Framework/ExternalProjectFinishedEventArgs.cs b/src/Framework/ExternalProjectFinishedEventArgs.cs
index 94d5b7da698..ad947f049b2 100644
--- a/src/Framework/ExternalProjectFinishedEventArgs.cs
+++ b/src/Framework/ExternalProjectFinishedEventArgs.cs
@@ -36,14 +36,12 @@ protected ExternalProjectFinishedEventArgs()
         /// <param name="senderName">name of the object sending this event</param>
         /// <param name="projectFile">project name</param>
         /// <param name="succeeded">true indicates project built successfully</param>
-        public ExternalProjectFinishedEventArgs
-        (
+        public ExternalProjectFinishedEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             string projectFile,
-            bool succeeded
-        )
+            bool succeeded)
             : this(message, helpKeyword, senderName, projectFile, succeeded, DateTime.UtcNow)
         {
         }
@@ -57,15 +55,13 @@ bool succeeded
         /// <param name="projectFile">project name</param>
         /// <param name="succeeded">true indicates project built successfully</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        public ExternalProjectFinishedEventArgs
-        (
+        public ExternalProjectFinishedEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             string projectFile,
             bool succeeded,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, senderName, eventTimestamp)
         {
             this.projectFile = projectFile;
diff --git a/src/Framework/ExternalProjectStartedEventArgs.cs b/src/Framework/ExternalProjectStartedEventArgs.cs
index 6828ae736a9..11389f66d90 100644
--- a/src/Framework/ExternalProjectStartedEventArgs.cs
+++ b/src/Framework/ExternalProjectStartedEventArgs.cs
@@ -36,14 +36,12 @@ protected ExternalProjectStartedEventArgs()
         /// <param name="senderName">name of the object sending this event</param>
         /// <param name="projectFile">project name</param>
         /// <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
-        public ExternalProjectStartedEventArgs
-        (
+        public ExternalProjectStartedEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             string projectFile,
-            string targetNames
-        )
+            string targetNames)
             : this(message, helpKeyword, senderName, projectFile, targetNames, DateTime.UtcNow)
         {
         }
@@ -57,15 +55,13 @@ string targetNames
         /// <param name="projectFile">project name</param>
         /// <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public ExternalProjectStartedEventArgs
-        (
+        public ExternalProjectStartedEventArgs(
             string message,
             string helpKeyword,
             string senderName,
             string projectFile,
             string targetNames,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, senderName, eventTimestamp)
         {
             this.projectFile = projectFile;
diff --git a/src/Framework/IBuildEngine.cs b/src/Framework/IBuildEngine.cs
index 68aac5eea4f..7f674278c45 100644
--- a/src/Framework/IBuildEngine.cs
+++ b/src/Framework/IBuildEngine.cs
@@ -94,12 +94,10 @@ string ProjectFileOfTaskNode
         ///     to the child project (can be null).  The key and value should both be strings.</param>
         /// <param name="targetOutputs">The outputs of each specified target (can be null).</param>
         /// <returns>true, if build was successful</returns>
-        bool BuildProjectFile
-            (
+        bool BuildProjectFile(
             string projectFileName,
             string[] targetNames,
             IDictionary globalProperties,
-            IDictionary targetOutputs
-            );
+            IDictionary targetOutputs);
     }
 }
diff --git a/src/Framework/IBuildEngine2.cs b/src/Framework/IBuildEngine2.cs
index 169c1a8f7ba..45230d1eb09 100644
--- a/src/Framework/IBuildEngine2.cs
+++ b/src/Framework/IBuildEngine2.cs
@@ -40,14 +40,12 @@ bool IsRunningMultipleNodes
         /// <param name="targetOutputs">The outputs of each specified target (can be null).</param>
         /// <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
         /// <returns>true, if build was successful</returns>
-        bool BuildProjectFile
-            (
+        bool BuildProjectFile(
             string projectFileName,
             string[] targetNames,
             IDictionary globalProperties,
             IDictionary targetOutputs,
-            string toolsVersion
-            );
+            string toolsVersion);
 
         /// <summary>
         /// This method allows tasks to initiate a build on a
@@ -72,15 +70,13 @@ string toolsVersion
         /// <param name="unloadProjectsOnCompletion">If true the project will be unloaded once the 
         ///                                         operation is completed </param>
         /// <returns>true, if build was successful</returns>
-        bool BuildProjectFilesInParallel
-            (
+        bool BuildProjectFilesInParallel(
             string[] projectFileNames,
             string[] targetNames,
             IDictionary[] globalProperties,
             IDictionary[] targetOutputsPerProject,
             string[] toolsVersion,
             bool useResultsCache,
-            bool unloadProjectsOnCompletion
-            );
+            bool unloadProjectsOnCompletion);
     }
 }
diff --git a/src/Framework/IBuildEngine3.cs b/src/Framework/IBuildEngine3.cs
index 0ab02ddaafc..45f5d0acf2e 100644
--- a/src/Framework/IBuildEngine3.cs
+++ b/src/Framework/IBuildEngine3.cs
@@ -33,15 +33,13 @@ public interface IBuildEngine3 : IBuildEngine2
         /// <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
         /// <param name="returnTargetOutputs">Should the target outputs be returned in the BuildEngineResult</param>
         /// <returns>Returns a structure containing the success or failure of the build and the target outputs by project.</returns>
-        BuildEngineResult BuildProjectFilesInParallel
-            (
+        BuildEngineResult BuildProjectFilesInParallel(
             string[] projectFileNames,
             string[] targetNames,
             IDictionary[] globalProperties,
             IList<string>[] removeGlobalProperties,
             string[] toolsVersion,
-            bool returnTargetOutputs
-            );
+            bool returnTargetOutputs);
 
         /// <summary>
         /// Informs the system that this task has a long-running out-of-process component and other work can be done in the
diff --git a/src/Framework/InternalErrorException.cs b/src/Framework/InternalErrorException.cs
index b87f1a32a6d..ad07ab89fe2 100644
--- a/src/Framework/InternalErrorException.cs
+++ b/src/Framework/InternalErrorException.cs
@@ -30,10 +30,8 @@ internal InternalErrorException() : base()
         /// <summary>
         /// Creates an instance of this exception using the given message.
         /// </summary>
-        internal InternalErrorException
-        (
-            String message
-        ) :
+        internal InternalErrorException(
+            String message) :
             base("MSB0001: Internal MSBuild Error: " + message)
         {
             ConsiderDebuggerLaunch(message, null);
@@ -44,11 +42,9 @@ String message
         /// Adds the inner exception's details to the exception message because most bug reporters don't bother
         /// to provide the inner exception details which is typically what we care about.
         /// </summary>
-        internal InternalErrorException
-        (
+        internal InternalErrorException(
             String message,
-            Exception innerException
-        ) :
+            Exception innerException) :
             base("MSB0001: Internal MSBuild Error: " + message + (innerException == null ? String.Empty : ("\n=============\n" + innerException.ToString() + "\n\n")), innerException)
         {
             ConsiderDebuggerLaunch(message, innerException);
diff --git a/src/Framework/LazyFormattedBuildEventArgs.cs b/src/Framework/LazyFormattedBuildEventArgs.cs
index 2597304fee5..e2d8cb4ed72 100644
--- a/src/Framework/LazyFormattedBuildEventArgs.cs
+++ b/src/Framework/LazyFormattedBuildEventArgs.cs
@@ -40,12 +40,10 @@ private protected override string? FormattedMessage
         /// <param name="message">text message.</param>
         /// <param name="helpKeyword">help keyword.</param>
         /// <param name="senderName">name of event sender.</param>
-        public LazyFormattedBuildEventArgs
-        (
+        public LazyFormattedBuildEventArgs(
             string? message,
             string? helpKeyword,
-            string? senderName
-        )
+            string? senderName)
             : this(message, helpKeyword, senderName, DateTime.Now, null)
         {
         }
@@ -58,14 +56,12 @@ public LazyFormattedBuildEventArgs
         /// <param name="senderName">name of event sender.</param>
         /// <param name="eventTimestamp">Timestamp when event was created.</param>
         /// <param name="messageArgs">Message arguments.</param>
-        public LazyFormattedBuildEventArgs
-        (
+        public LazyFormattedBuildEventArgs(
             string? message,
             string? helpKeyword,
             string? senderName,
             DateTime eventTimestamp,
-            params object[]? messageArgs
-        )
+            params object[]? messageArgs)
             : base(message, helpKeyword, senderName, eventTimestamp)
         {
             argumentsOrFormattedMessage = messageArgs;
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 284204c2338..b5bdead5c07 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1657,8 +1657,7 @@ internal static extern SafeFileHandle CreateFile(
         IntPtr lpSecurityAttributes,
         uint dwCreationDisposition,
         uint dwFlagsAndAttributes,
-        IntPtr hTemplateFile
-        );
+        IntPtr hTemplateFile);
 
     [DllImport("kernel32.dll", SetLastError = true)]
     [SupportedOSPlatform("windows")]
@@ -1666,8 +1665,7 @@ internal static extern bool GetFileTime(
         SafeFileHandle hFile,
         out FILETIME lpCreationTime,
         out FILETIME lpLastAccessTime,
-        out FILETIME lpLastWriteTime
-        );
+        out FILETIME lpLastWriteTime);
 
     [DllImport("kernel32.dll", SetLastError = true)]
     [return: MarshalAs(UnmanagedType.Bool)]
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index 04017a0f2d1..0c438dde55d 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -36,13 +36,11 @@ protected ProjectFinishedEventArgs()
         /// <param name="helpKeyword">help keyword </param>
         /// <param name="projectFile">name of the project</param>
         /// <param name="succeeded">true indicates project built successfully</param>
-        public ProjectFinishedEventArgs
-        (
+        public ProjectFinishedEventArgs(
             string? message,
             string? helpKeyword,
             string? projectFile,
-            bool succeeded
-        )
+            bool succeeded)
             : this(message, helpKeyword, projectFile, succeeded, DateTime.UtcNow)
         {
         }
@@ -56,14 +54,12 @@ bool succeeded
         /// <param name="projectFile">name of the project</param>
         /// <param name="succeeded">true indicates project built successfully</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public ProjectFinishedEventArgs
-        (
+        public ProjectFinishedEventArgs(
             string? message,
             string? helpKeyword,
             string? projectFile,
             bool succeeded,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.projectFile = projectFile;
diff --git a/src/Framework/ProjectImportedEventArgs.cs b/src/Framework/ProjectImportedEventArgs.cs
index a77e1344052..0ef84e1754c 100644
--- a/src/Framework/ProjectImportedEventArgs.cs
+++ b/src/Framework/ProjectImportedEventArgs.cs
@@ -25,13 +25,11 @@ public ProjectImportedEventArgs()
         /// <summary>
         /// Initializes a new instance of the ProjectImportedEventArgs class.
         /// </summary>
-        public ProjectImportedEventArgs
-        (
+        public ProjectImportedEventArgs(
             int lineNumber,
             int columnNumber,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             : base(
                   subcategory: null,
                   code: null,
diff --git a/src/Framework/ProjectStartedEventArgs.cs b/src/Framework/ProjectStartedEventArgs.cs
index 2a005edc4c9..aade6a84d38 100644
--- a/src/Framework/ProjectStartedEventArgs.cs
+++ b/src/Framework/ProjectStartedEventArgs.cs
@@ -49,15 +49,13 @@ protected ProjectStartedEventArgs()
         /// <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
         /// <param name="properties">list of properties</param>
         /// <param name="items">list of items</param>
-        public ProjectStartedEventArgs
-        (
+        public ProjectStartedEventArgs(
             string message,
             string helpKeyword,
             string projectFile,
             string targetNames,
             IEnumerable properties,
-            IEnumerable items
-        )
+            IEnumerable items)
             : this(message, helpKeyword, projectFile, targetNames, properties, items, DateTime.UtcNow)
         {
         }
@@ -74,8 +72,7 @@ IEnumerable items
         /// <param name="properties">list of properties</param>
         /// <param name="items">list of items</param>
         /// <param name="parentBuildEventContext">event context info for the parent project</param>
-        public ProjectStartedEventArgs
-        (
+        public ProjectStartedEventArgs(
             int projectId,
             string message,
             string helpKeyword,
@@ -83,8 +80,7 @@ public ProjectStartedEventArgs
             string targetNames,
             IEnumerable properties,
             IEnumerable items,
-            BuildEventContext parentBuildEventContext
-        )
+            BuildEventContext parentBuildEventContext)
             : this(projectId, message, helpKeyword, projectFile, targetNames, properties, items, parentBuildEventContext, DateTime.UtcNow)
         {
         }
@@ -103,8 +99,7 @@ BuildEventContext parentBuildEventContext
         /// <param name="parentBuildEventContext">event context info for the parent project</param>
         /// <param name="globalProperties">An <see cref="IDictionary{String, String}"/> containing global properties.</param>
         /// <param name="toolsVersion">The tools version.</param>
-        public ProjectStartedEventArgs
-        (
+        public ProjectStartedEventArgs(
             int projectId,
             string message,
             string helpKeyword,
@@ -114,8 +109,7 @@ public ProjectStartedEventArgs
             IEnumerable items,
             BuildEventContext parentBuildEventContext,
             IDictionary<string, string> globalProperties,
-            string toolsVersion
-        )
+            string toolsVersion)
             : this(projectId, message, helpKeyword, projectFile, targetNames, properties, items, parentBuildEventContext)
         {
             this.GlobalProperties = globalProperties;
@@ -133,16 +127,14 @@ string toolsVersion
         /// <param name="properties">list of properties</param>
         /// <param name="items">list of items</param>
         /// <param name="eventTimestamp">The <see cref="DateTime"/> of the event.</param>
-        public ProjectStartedEventArgs
-        (
+        public ProjectStartedEventArgs(
             string message,
             string helpKeyword,
             string projectFile,
             string targetNames,
             IEnumerable properties,
             IEnumerable items,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.projectFile = projectFile;
@@ -164,8 +156,7 @@ DateTime eventTimestamp
         /// <param name="items">list of items</param>
         /// <param name="parentBuildEventContext">event context info for the parent project</param>
         /// <param name="eventTimestamp">The <see cref="DateTime"/> of the event.</param>
-        public ProjectStartedEventArgs
-        (
+        public ProjectStartedEventArgs(
             int projectId,
             string message,
             string helpKeyword,
@@ -174,8 +165,7 @@ public ProjectStartedEventArgs
             IEnumerable properties,
             IEnumerable items,
             BuildEventContext parentBuildEventContext,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : this(message, helpKeyword, projectFile, targetNames, properties, items, eventTimestamp)
         {
             parentProjectBuildEventContext = parentBuildEventContext;
diff --git a/src/Framework/TargetFinishedEventArgs.cs b/src/Framework/TargetFinishedEventArgs.cs
index 5398fd557a3..56e1380c40e 100644
--- a/src/Framework/TargetFinishedEventArgs.cs
+++ b/src/Framework/TargetFinishedEventArgs.cs
@@ -41,15 +41,13 @@ protected TargetFinishedEventArgs()
         /// <param name="projectFile">project file</param>
         /// <param name="targetFile">file in which the target is defined</param>
         /// <param name="succeeded">true if target built successfully</param>
-        public TargetFinishedEventArgs
-        (
+        public TargetFinishedEventArgs(
             string message,
             string helpKeyword,
             string targetName,
             string projectFile,
             string targetFile,
-            bool succeeded
-        )
+            bool succeeded)
             : this(message, helpKeyword, targetName, projectFile, targetFile, succeeded, DateTime.UtcNow, null)
         {
         }
@@ -65,16 +63,14 @@ bool succeeded
         /// <param name="targetFile">file in which the target is defined</param>
         /// <param name="succeeded">true if target built successfully</param>
         /// <param name="targetOutputs">Target output items for the target. If batching will be null for everything except for the last target in the batch</param>
-        public TargetFinishedEventArgs
-        (
+        public TargetFinishedEventArgs(
             string message,
             string helpKeyword,
             string targetName,
             string projectFile,
             string targetFile,
             bool succeeded,
-            IEnumerable targetOutputs
-        )
+            IEnumerable targetOutputs)
             : this(message, helpKeyword, targetName, projectFile, targetFile, succeeded, DateTime.UtcNow, targetOutputs)
         {
         }
@@ -91,8 +87,7 @@ IEnumerable targetOutputs
         /// <param name="succeeded">true if target built successfully</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
         /// <param name="targetOutputs">An <see cref="IEnumerable"/> containing the outputs of the target.</param>
-        public TargetFinishedEventArgs
-        (
+        public TargetFinishedEventArgs(
             string message,
             string helpKeyword,
             string targetName,
@@ -100,8 +95,7 @@ public TargetFinishedEventArgs
             string targetFile,
             bool succeeded,
             DateTime eventTimestamp,
-            IEnumerable targetOutputs
-        )
+            IEnumerable targetOutputs)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.targetName = targetName;
diff --git a/src/Framework/TargetSkippedEventArgs.cs b/src/Framework/TargetSkippedEventArgs.cs
index 05177c0c594..965ae464c9d 100644
--- a/src/Framework/TargetSkippedEventArgs.cs
+++ b/src/Framework/TargetSkippedEventArgs.cs
@@ -56,11 +56,9 @@ public TargetSkippedEventArgs()
         /// <summary>
         /// Initializes a new instance of the TargetSkippedEventArgs class.
         /// </summary>
-        public TargetSkippedEventArgs
-        (
+        public TargetSkippedEventArgs(
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
             : base(
                   subcategory: null,
                   code: null,
diff --git a/src/Framework/TargetStartedEventArgs.cs b/src/Framework/TargetStartedEventArgs.cs
index 6b636072926..be14e7c31a1 100644
--- a/src/Framework/TargetStartedEventArgs.cs
+++ b/src/Framework/TargetStartedEventArgs.cs
@@ -39,14 +39,12 @@ protected TargetStartedEventArgs()
         /// <param name="targetName">target name</param>
         /// <param name="projectFile">project file</param>
         /// <param name="targetFile">file in which the target is defined</param>
-        public TargetStartedEventArgs
-        (
+        public TargetStartedEventArgs(
             string message,
             string helpKeyword,
             string targetName,
             string projectFile,
-            string targetFile
-        )
+            string targetFile)
             : this(message, helpKeyword, targetName, projectFile, targetFile, String.Empty, TargetBuiltReason.None, DateTime.UtcNow)
         {
         }
@@ -61,16 +59,14 @@ string targetFile
         /// <param name="targetFile">file in which the target is defined</param>
         /// <param name="parentTarget">The part of the target.</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public TargetStartedEventArgs
-        (
+        public TargetStartedEventArgs(
             string message,
             string helpKeyword,
             string targetName,
             string projectFile,
             string targetFile,
             string parentTarget,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.targetName = targetName;
@@ -90,8 +86,7 @@ DateTime eventTimestamp
         /// <param name="parentTarget">The part of the target.</param>
         /// <param name="buildReason">The reason the parent built this target.</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public TargetStartedEventArgs
-        (
+        public TargetStartedEventArgs(
             string message,
             string helpKeyword,
             string targetName,
@@ -99,8 +94,7 @@ public TargetStartedEventArgs
             string targetFile,
             string parentTarget,
             TargetBuiltReason buildReason,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.targetName = targetName;
diff --git a/src/Framework/TaskCommandLineEventArgs.cs b/src/Framework/TaskCommandLineEventArgs.cs
index 2e80c7ddc0e..8e2fbf754ad 100644
--- a/src/Framework/TaskCommandLineEventArgs.cs
+++ b/src/Framework/TaskCommandLineEventArgs.cs
@@ -41,12 +41,10 @@ protected TaskCommandLineEventArgs()
         /// <param name="taskName">The name of the task raising this event.</param>
         /// <param name="importance">Importance of command line -- controls whether
         /// the command line will be displayed by less verbose loggers.</param>
-        public TaskCommandLineEventArgs
-        (
+        public TaskCommandLineEventArgs(
             string commandLine,
             string taskName,
-            MessageImportance importance
-        )
+            MessageImportance importance)
             : this(commandLine, taskName, importance, DateTime.UtcNow)
         {
             // do nothing
@@ -62,13 +60,11 @@ MessageImportance importance
         /// <param name="importance">Importance of command line -- controls whether
         /// the command line will be displayed by less verbose loggers.</param>
         /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        public TaskCommandLineEventArgs
-        (
+        public TaskCommandLineEventArgs(
             string commandLine,
             string taskName,
             MessageImportance importance,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(commandLine, helpKeyword: null, taskName, importance, eventTimestamp)
         {
             // do nothing
diff --git a/src/Framework/TaskFinishedEventArgs.cs b/src/Framework/TaskFinishedEventArgs.cs
index 3b282a9afac..dcbb5bec1e9 100644
--- a/src/Framework/TaskFinishedEventArgs.cs
+++ b/src/Framework/TaskFinishedEventArgs.cs
@@ -40,15 +40,13 @@ protected TaskFinishedEventArgs()
         /// <param name="taskFile">file in which the task is defined</param>
         /// <param name="taskName">task name</param> 
         /// <param name="succeeded">true indicates task succeed</param>
-        public TaskFinishedEventArgs
-        (
+        public TaskFinishedEventArgs(
             string message,
             string helpKeyword,
             string projectFile,
             string taskFile,
             string taskName,
-            bool succeeded
-        )
+            bool succeeded)
             : this(message, helpKeyword, projectFile, taskFile, taskName, succeeded, DateTime.UtcNow)
         {
         }
@@ -64,16 +62,14 @@ bool succeeded
         /// <param name="taskName">task name</param> 
         /// <param name="succeeded">true indicates task succeed</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        public TaskFinishedEventArgs
-        (
+        public TaskFinishedEventArgs(
             string message,
             string helpKeyword,
             string projectFile,
             string taskFile,
             string taskName,
             bool succeeded,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.taskName = taskName;
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index c4ae14f03ca..2700c69352f 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -32,14 +32,12 @@ public class TaskParameterEventArgs : BuildMessageEventArgs
         /// <summary>
         /// Creates an instance of this class for the given task parameter.
         /// </summary>
-        public TaskParameterEventArgs
-        (
+        public TaskParameterEventArgs(
             TaskParameterMessageKind kind,
             string itemType,
             IList items,
             bool logItemMetadata,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(null, null, null, MessageImportance.Low, eventTimestamp)
         {
             Kind = kind;
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index eafeb579b5d..16fbcbe194e 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -39,14 +39,12 @@ protected TaskStartedEventArgs()
         /// <param name="projectFile">project file</param>
         /// <param name="taskFile">file in which the task is defined</param>
         /// <param name="taskName">task name</param>
-        public TaskStartedEventArgs
-        (
+        public TaskStartedEventArgs(
             string message,
             string helpKeyword,
             string projectFile,
             string taskFile,
-            string taskName
-        )
+            string taskName)
             : this(message, helpKeyword, projectFile, taskFile, taskName, DateTime.UtcNow)
         {
         }
@@ -61,15 +59,13 @@ string taskName
         /// <param name="taskFile">file in which the task is defined</param>
         /// <param name="taskName">task name</param>
         /// <param name="eventTimestamp">Timestamp when event was created</param>
-        public TaskStartedEventArgs
-        (
+        public TaskStartedEventArgs(
             string message,
             string helpKeyword,
             string projectFile,
             string taskFile,
             string taskName,
-            DateTime eventTimestamp
-        )
+            DateTime eventTimestamp)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.taskName = taskName;
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index 36db0c9ee96..c877120cdaf 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1023,8 +1023,7 @@ public void InvalidToolsVersionErrors()
                                         lowPriority: false,
                                         inputResultsCaches: null,
                                         outputResultsCache: null,
-                                        commandLine: null
-                        );
+                                        commandLine: null);
                 }
                 finally
                 {
@@ -1033,8 +1032,7 @@ public void InvalidToolsVersionErrors()
                         File.Delete(filename);
                     }
                 }
-            }
-           );
+            });
         }
         [Fact]
         public void TestHaveAnySwitchesBeenSet()
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 0bf46163421..ce478041e0a 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -516,11 +516,11 @@ public void Help(string indicator)
         {
             MSBuildApp.Execute(
 #if FEATURE_GET_COMMANDLINE
-                @$"c:\bin\msbuild.exe {indicator} "
+                @$"c:\bin\msbuild.exe {indicator} ")
 #else
-                new[] { @"c:\bin\msbuild.exe", indicator }
+                new[] { @"c:\bin\msbuild.exe", indicator })
 #endif
-            ).ShouldBe(MSBuildApp.ExitType.Success);
+            .ShouldBe(MSBuildApp.ExitType.Success);
         }
 
         [Fact]
@@ -564,8 +564,7 @@ public void InvalidVerbosity()
             Should.Throw<CommandLineSwitchException>(() =>
             {
                 MSBuildApp.ProcessVerbositySwitch("loquacious");
-            }
-           );
+            });
         }
         [Fact]
         public void ValidMaxCPUCountSwitch()
@@ -587,8 +586,7 @@ public void InvalidMaxCPUCountSwitch1()
             Should.Throw<CommandLineSwitchException>(() =>
             {
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "-1" });
-            }
-           );
+            });
         }
 
         [Fact]
@@ -597,8 +595,7 @@ public void InvalidMaxCPUCountSwitch2()
             Should.Throw<CommandLineSwitchException>(() =>
             {
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "0" });
-            }
-           );
+            });
         }
 
         [Fact]
@@ -607,8 +604,7 @@ public void InvalidMaxCPUCountSwitch3()
             Should.Throw<CommandLineSwitchException>(() =>
             {
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "foo" });
-            }
-           );
+            });
         }
 
         [Fact]
@@ -618,8 +614,7 @@ public void InvalidMaxCPUCountSwitch4()
             {
                 // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "1025" });
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1394,8 +1389,7 @@ public void TestProcessProjectSwitchNullInList()
                 string[] extensionsToIgnore = { ".phantomextension", null };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -1410,8 +1404,7 @@ public void TestProcessProjectSwitchEmptyInList()
                 string[] extensionsToIgnore = { ".phantomextension", string.Empty };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
-            }
-           );
+            });
         }
         /// <summary>
         /// If only a dot is specified then the extension is invalid
@@ -1425,8 +1418,7 @@ public void TestProcessProjectSwitchExtensionWithoutDot()
                 string[] extensionsToIgnore = { "phantomextension" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
-            }
-           );
+            });
         }
         /// <summary>
         /// Put some junk into the extension, in this case there should be an exception
@@ -1440,8 +1432,7 @@ public void TestProcessProjectSwitchMalformed()
                 string[] extensionsToIgnore = { ".C:\\boocatmoo.a" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
-            }
-           );
+            });
         }
         /// <summary>
         /// Test what happens if there are no project or solution files in the directory
@@ -1455,8 +1446,7 @@ public void TestProcessProjectSwitchWildcards()
                 string[] extensionsToIgnore = { ".proj*", ".nativeproj?" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         [Fact]
         public void TestProcessProjectSwitch()
@@ -1536,8 +1526,7 @@ public void TestProcessProjectSwitchRemovedAllprojects()
                 var extensionsToIgnore = new[] { ".nativeproj", ".vcproj" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test the case where there is a solution and a project in the same directory but they have different names
@@ -1551,8 +1540,7 @@ public void TestProcessProjectSwitchSlnProjDifferentNames()
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test the case where we have two proj files in the same directory
@@ -1566,8 +1554,7 @@ public void TestProcessProjectSwitchTwoProj()
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test the case where we have two native project files in the same directory
@@ -1581,8 +1568,7 @@ public void TestProcessProjectSwitchTwoNative()
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test when there are two solutions in the same directory
@@ -1596,8 +1582,7 @@ public void TestProcessProjectSwitchTwoSolutions()
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Check the case where there are more than two projects in the directory and one is a proj file
@@ -1611,8 +1596,7 @@ public void TestProcessProjectSwitchMoreThenTwoProj()
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test what happens if there are no project or solution files in the directory
@@ -1626,8 +1610,7 @@ public void TestProcessProjectSwitchNoProjectOrSolution()
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
-            }
-           );
+            });
         }
         /// <summary>
         /// Helper class to simulate directory work for ignore project extensions
@@ -1741,14 +1724,12 @@ public void TestProcessFileLoggerSwitch1()
             List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             var loggers = new List<ILogger>();
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
         }
@@ -1764,14 +1745,12 @@ public void TestProcessFileLoggerSwitch2()
             List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             var loggers = new List<ILogger>();
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected one distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
         }
@@ -1787,14 +1766,12 @@ public void TestProcessFileLoggerSwitch3()
             List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             var loggers = new List<ILogger>();
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected a central loggers to be attached"
 
@@ -1803,14 +1780,12 @@ public void TestProcessFileLoggerSwitch3()
 
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "Parameter" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
 
@@ -1818,14 +1793,12 @@ public void TestProcessFileLoggerSwitch3()
 
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "Parameter1", "Parameter" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
         }
@@ -1841,14 +1814,12 @@ public void TestProcessFileLoggerSwitch4()
             List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             var loggers = new List<ILogger>();
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe($"logFile={Path.Combine(Directory.GetCurrentDirectory(), "MSBuild.log")}", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
@@ -1858,14 +1829,12 @@ public void TestProcessFileLoggerSwitch4()
 
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "verbosity=Normal;" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe($"{fileLoggerParameters[0]};logFile={Path.Combine(Directory.GetCurrentDirectory(), "MSBuild.log")}", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
@@ -1875,14 +1844,12 @@ public void TestProcessFileLoggerSwitch4()
 
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "verbosity=Normal", "" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe($"{fileLoggerParameters[0]};logFile={Path.Combine(Directory.GetCurrentDirectory(), "MSBuild.log")}", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
@@ -1892,14 +1859,12 @@ public void TestProcessFileLoggerSwitch4()
 
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "", "Parameter1" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe($";Parameter1;logFile={Path.Combine(Directory.GetCurrentDirectory(), "MSBuild.log")}", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
@@ -1909,14 +1874,12 @@ public void TestProcessFileLoggerSwitch4()
 
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "Parameter1", "verbosity=Normal;logfile=" + (NativeMethodsShared.IsWindows ? "c:\\temp\\cat.log" : "/tmp/cat.log") };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe(fileLoggerParameters[0] + ";" + fileLoggerParameters[1], StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
@@ -1924,14 +1887,12 @@ public void TestProcessFileLoggerSwitch4()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
             loggers = new List<ILogger>();
             fileLoggerParameters = new[] { "Parameter1", "verbosity=Normal;logfile=" + Path.Combine("..", "cat.log") + ";Parameter1" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
             distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe($"Parameter1;verbosity=Normal;logFile={Path.Combine(Directory.GetCurrentDirectory(), "..", "cat.log")};Parameter1", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
@@ -1939,14 +1900,12 @@ public void TestProcessFileLoggerSwitch4()
             loggers = new List<ILogger>();
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
             fileLoggerParameters = new[] { "Parameter1", ";Parameter;", "", ";", ";Parameter", "Parameter;" };
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           2
-                       );
+                           2);
             distributedLoggerRecords[0].ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe($"Parameter1;Parameter;;;Parameter;Parameter;logFile={Path.Combine(Directory.GetCurrentDirectory(), "msbuild.log")}", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
         }
 
@@ -1961,14 +1920,12 @@ public void TestProcessFileLoggerSwitch5()
             List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             var loggers = new List<ILogger>();
-            MSBuildApp.ProcessDistributedFileLogger
-                       (
+            MSBuildApp.ProcessDistributedFileLogger(
                            distributedFileLogger,
                            fileLoggerParameters,
                            distributedLoggerRecords,
                            loggers,
-                           1
-                       );
+                           1);
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
         }
@@ -1983,27 +1940,23 @@ public void ProcessConsoleLoggerSwitches()
             List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
             string[] consoleLoggerParameters = { "Parameter1", ";Parameter;", "", ";", ";Parameter", "Parameter;" };
 
-            MSBuildApp.ProcessConsoleLoggerSwitch
-                       (
+            MSBuildApp.ProcessConsoleLoggerSwitch(
                            true,
                            consoleLoggerParameters,
                            distributedLoggerRecords,
                            verbosity,
                            1,
-                           loggers
-                       );
+                           loggers);
             loggers.ShouldBeEmpty("Expected no central loggers to be attached");
             distributedLoggerRecords.ShouldBeEmpty("Expected no distributed loggers to be attached");
 
-            MSBuildApp.ProcessConsoleLoggerSwitch
-                       (
+            MSBuildApp.ProcessConsoleLoggerSwitch(
                            false,
                            consoleLoggerParameters,
                            distributedLoggerRecords,
                            verbosity,
                            1,
-                           loggers
-                       );
+                           loggers);
             loggers.ShouldHaveSingleItem("Expected a central logger to be attached");
             loggers[0].ShouldBeOfType<ConsoleLogger>();
             loggers[0].Parameters.ShouldBe(
@@ -2011,15 +1964,13 @@ public void ProcessConsoleLoggerSwitches()
                 "Expected parameter in logger to match parameters passed in",
                 StringCompareShould.IgnoreCase);
 
-            MSBuildApp.ProcessConsoleLoggerSwitch
-                       (
+            MSBuildApp.ProcessConsoleLoggerSwitch(
                           false,
                           consoleLoggerParameters,
                           distributedLoggerRecords,
                           verbosity,
                           2,
-                          loggers
-                      );
+                          loggers);
             loggers.ShouldHaveSingleItem("Expected a central logger to be attached");
             distributedLoggerRecords.ShouldHaveSingleItem("Expected a distributed logger to be attached");
             DistributedLoggerRecord distributedLogger = distributedLoggerRecords[0];
diff --git a/src/MSBuild/CommandLineSwitchException.cs b/src/MSBuild/CommandLineSwitchException.cs
index d5a4b8bb7a6..7535660e821 100644
--- a/src/MSBuild/CommandLineSwitchException.cs
+++ b/src/MSBuild/CommandLineSwitchException.cs
@@ -23,10 +23,8 @@ internal sealed class CommandLineSwitchException : Exception
         /// This constructor initializes the exception message.
         /// </summary>
         /// <param name="message"></param>
-        private CommandLineSwitchException
-        (
-            string message
-        ) :
+        private CommandLineSwitchException(
+            string message) :
             base(message)
         {
             // do nothing
@@ -37,11 +35,9 @@ string message
         /// </summary>
         /// <param name="message"></param>
         /// <param name="commandLineArg"></param>
-        private CommandLineSwitchException
-        (
+        private CommandLineSwitchException(
             string message,
-            string commandLineArg
-        ) :
+            string commandLineArg) :
             this(message)
         {
             this.commandLineArg = commandLineArg;
@@ -50,11 +46,9 @@ string commandLineArg
         /// <summary>
         /// Serialization constructor
         /// </summary>
-        private CommandLineSwitchException
-        (
+        private CommandLineSwitchException(
             SerializationInfo info,
-            StreamingContext context
-        ) :
+            StreamingContext context) :
             base(info, context)
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index 4e521f9d703..945628eaf95 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -122,12 +122,10 @@ private struct ParameterlessSwitchInfo
             /// <param name="switchNames"></param>
             /// <param name="parameterlessSwitch"></param>
             /// <param name="duplicateSwitchErrorMessage"></param>
-            internal ParameterlessSwitchInfo
-            (
+            internal ParameterlessSwitchInfo(
                 string[] switchNames,
                 ParameterlessSwitch parameterlessSwitch,
-                string duplicateSwitchErrorMessage
-            )
+                string duplicateSwitchErrorMessage)
             {
                 this.switchNames = switchNames;
                 this.duplicateSwitchErrorMessage = duplicateSwitchErrorMessage;
@@ -158,16 +156,14 @@ private struct ParameterizedSwitchInfo
             /// <param name="multipleParametersAllowed"></param>
             /// <param name="missingParametersErrorMessage"></param>
             /// <param name="unquoteParameters"></param>
-            internal ParameterizedSwitchInfo
-            (
+            internal ParameterizedSwitchInfo(
                 string[] switchNames,
                 ParameterizedSwitch parameterizedSwitch,
                 string duplicateSwitchErrorMessage,
                 bool multipleParametersAllowed,
                 string missingParametersErrorMessage,
                 bool unquoteParameters,
-                bool emptyParametersAllowed
-            )
+                bool emptyParametersAllowed)
             {
                 this.switchNames = switchNames;
                 this.duplicateSwitchErrorMessage = duplicateSwitchErrorMessage;
@@ -234,47 +230,47 @@ bool emptyParametersAllowed
             //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             //                                          Switch Names                            Switch Id                                       Duplicate Switch Error          Multi Params?   Missing Parameters Error           Unquote?    Empty?
             //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-            new ParameterizedSwitchInfo(  new string[] { null },                                ParameterizedSwitch.Project,                    "DuplicateProjectSwitchError",  false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "target", "t"},                        ParameterizedSwitch.Target,                     null,                           true,           "MissingTargetError",                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "property", "p" },                     ParameterizedSwitch.Property,                   null,                           true,           "MissingPropertyError",                true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "logger", "l" },                       ParameterizedSwitch.Logger,                     null,                           false,          "MissingLoggerError",                  false,  false  ),
-            new ParameterizedSwitchInfo(  new string[] { "distributedlogger", "dl" },           ParameterizedSwitch.DistributedLogger,          null,                           false,          "MissingLoggerError",                  false,  false  ),
-            new ParameterizedSwitchInfo(  new string[] { "verbosity", "v" },                    ParameterizedSwitch.Verbosity,                  null,                           false,          "MissingVerbosityError",               true,   false  ),
+            new ParameterizedSwitchInfo(  new string[] { null },                                ParameterizedSwitch.Project,                    "DuplicateProjectSwitchError",  false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "target", "t"},                        ParameterizedSwitch.Target,                     null,                           true,           "MissingTargetError",                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "property", "p" },                     ParameterizedSwitch.Property,                   null,                           true,           "MissingPropertyError",                true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "logger", "l" },                       ParameterizedSwitch.Logger,                     null,                           false,          "MissingLoggerError",                  false,  false),
+            new ParameterizedSwitchInfo(  new string[] { "distributedlogger", "dl" },           ParameterizedSwitch.DistributedLogger,          null,                           false,          "MissingLoggerError",                  false,  false),
+            new ParameterizedSwitchInfo(  new string[] { "verbosity", "v" },                    ParameterizedSwitch.Verbosity,                  null,                           false,          "MissingVerbosityError",               true,   false),
 #if FEATURE_XML_SCHEMA_VALIDATION
-            new ParameterizedSwitchInfo(  new string[] { "validate", "val" },                   ParameterizedSwitch.Validate,                   null,                           false,          null,                                  true,   false  ),
+            new ParameterizedSwitchInfo(  new string[] { "validate", "val" },                   ParameterizedSwitch.Validate,                   null,                           false,          null,                                  true,   false),
 #endif
-            new ParameterizedSwitchInfo(  new string[] { "consoleloggerparameters", "clp" },    ParameterizedSwitch.ConsoleLoggerParameters,    null,                           false,          "MissingConsoleLoggerParameterError",  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "nodemode", "nmode" },                 ParameterizedSwitch.NodeMode,                   null,                           false,          null,                                  false,  false  ),
-            new ParameterizedSwitchInfo(  new string[] { "maxcpucount", "m" },                  ParameterizedSwitch.MaxCPUCount,                null,                           false,          "MissingMaxCPUCountError",             true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "ignoreprojectextensions", "ignore" }, ParameterizedSwitch.IgnoreProjectExtensions,    null,                           true,           "MissingIgnoreProjectExtensionsError", true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "toolsversion","tv" },                 ParameterizedSwitch.ToolsVersion,               null,                           false,          "MissingToolsVersionError",            true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters", "flp" },       ParameterizedSwitch.FileLoggerParameters,       null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters1", "flp1" },     ParameterizedSwitch.FileLoggerParameters1,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters2", "flp2" },     ParameterizedSwitch.FileLoggerParameters2,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters3", "flp3" },     ParameterizedSwitch.FileLoggerParameters3,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters4", "flp4" },     ParameterizedSwitch.FileLoggerParameters4,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters5", "flp5" },     ParameterizedSwitch.FileLoggerParameters5,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters6", "flp6" },     ParameterizedSwitch.FileLoggerParameters6,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters7", "flp7" },     ParameterizedSwitch.FileLoggerParameters7,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters8", "flp8" },     ParameterizedSwitch.FileLoggerParameters8,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters9", "flp9" },     ParameterizedSwitch.FileLoggerParameters9,      null,                           false,          "MissingFileLoggerParameterError",     true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "nodereuse", "nr" },                   ParameterizedSwitch.NodeReuse,                  null,                           false,          "MissingNodeReuseParameterError",      true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "preprocess", "pp" },                  ParameterizedSwitch.Preprocess,                 null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "targets", "ts" },                     ParameterizedSwitch.Targets,                    null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "warnaserror", "err" },                ParameterizedSwitch.WarningsAsErrors,           null,                           true,           null,                                  true,   true   ),
-            new ParameterizedSwitchInfo(  new string[] { "warnnotaserror", "noerr" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           "MissingWarnNotAsErrorParameterError", true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "interactive" },                       ParameterizedSwitch.Interactive,                null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "isolateprojects", "isolate" },        ParameterizedSwitch.IsolateProjects,            null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "graphbuild", "graph" },               ParameterizedSwitch.GraphBuild,                 null,                           true,           null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "inputResultsCaches", "irc" },         ParameterizedSwitch.InputResultsCaches,         null,                           true,           null,                                  true,   true   ),
-            new ParameterizedSwitchInfo(  new string[] { "outputResultsCache", "orc" },         ParameterizedSwitch.OutputResultsCache,         "DuplicateOutputResultsCache",  false,          null,                                  true,   true   ),
-            new ParameterizedSwitchInfo(  new string[] { "lowpriority", "low" },                ParameterizedSwitch.LowPriority,                null,                           false,          null,                                  true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "detailedsummary", "ds" },             ParameterizedSwitch.DetailedSummary,            null,                           false,          null,                                  true,   false  ),
+            new ParameterizedSwitchInfo(  new string[] { "consoleloggerparameters", "clp" },    ParameterizedSwitch.ConsoleLoggerParameters,    null,                           false,          "MissingConsoleLoggerParameterError",  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "nodemode", "nmode" },                 ParameterizedSwitch.NodeMode,                   null,                           false,          null,                                  false,  false),
+            new ParameterizedSwitchInfo(  new string[] { "maxcpucount", "m" },                  ParameterizedSwitch.MaxCPUCount,                null,                           false,          "MissingMaxCPUCountError",             true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "ignoreprojectextensions", "ignore" }, ParameterizedSwitch.IgnoreProjectExtensions,    null,                           true,           "MissingIgnoreProjectExtensionsError", true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "toolsversion","tv" },                 ParameterizedSwitch.ToolsVersion,               null,                           false,          "MissingToolsVersionError",            true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters", "flp" },       ParameterizedSwitch.FileLoggerParameters,       null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters1", "flp1" },     ParameterizedSwitch.FileLoggerParameters1,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters2", "flp2" },     ParameterizedSwitch.FileLoggerParameters2,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters3", "flp3" },     ParameterizedSwitch.FileLoggerParameters3,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters4", "flp4" },     ParameterizedSwitch.FileLoggerParameters4,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters5", "flp5" },     ParameterizedSwitch.FileLoggerParameters5,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters6", "flp6" },     ParameterizedSwitch.FileLoggerParameters6,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters7", "flp7" },     ParameterizedSwitch.FileLoggerParameters7,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters8", "flp8" },     ParameterizedSwitch.FileLoggerParameters8,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "fileloggerparameters9", "flp9" },     ParameterizedSwitch.FileLoggerParameters9,      null,                           false,          "MissingFileLoggerParameterError",     true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "nodereuse", "nr" },                   ParameterizedSwitch.NodeReuse,                  null,                           false,          "MissingNodeReuseParameterError",      true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "preprocess", "pp" },                  ParameterizedSwitch.Preprocess,                 null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "targets", "ts" },                     ParameterizedSwitch.Targets,                    null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "warnaserror", "err" },                ParameterizedSwitch.WarningsAsErrors,           null,                           true,           null,                                  true,   true),
+            new ParameterizedSwitchInfo(  new string[] { "warnnotaserror", "noerr" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           "MissingWarnNotAsErrorParameterError", true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "interactive" },                       ParameterizedSwitch.Interactive,                null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "isolateprojects", "isolate" },        ParameterizedSwitch.IsolateProjects,            null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "graphbuild", "graph" },               ParameterizedSwitch.GraphBuild,                 null,                           true,           null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "inputResultsCaches", "irc" },         ParameterizedSwitch.InputResultsCaches,         null,                           true,           null,                                  true,   true),
+            new ParameterizedSwitchInfo(  new string[] { "outputResultsCache", "orc" },         ParameterizedSwitch.OutputResultsCache,         "DuplicateOutputResultsCache",  false,          null,                                  true,   true),
+            new ParameterizedSwitchInfo(  new string[] { "lowpriority", "low" },                ParameterizedSwitch.LowPriority,                null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "detailedsummary", "ds" },             ParameterizedSwitch.DetailedSummary,            null,                           false,          null,                                  true,   false),
         };
 
         /// <summary>
@@ -284,12 +280,10 @@ bool emptyParametersAllowed
         /// <param name="parameterlessSwitch">[out] switch identifier (from ParameterlessSwitch enumeration)</param>
         /// <param name="duplicateSwitchErrorMessage"></param>
         /// <returns>true, if switch is a recognized switch that doesn't take parameters</returns>
-        internal static bool IsParameterlessSwitch
-        (
+        internal static bool IsParameterlessSwitch(
             string switchName,
             out ParameterlessSwitch parameterlessSwitch,
-            out string duplicateSwitchErrorMessage
-        )
+            out string duplicateSwitchErrorMessage)
         {
             parameterlessSwitch = ParameterlessSwitch.Invalid;
             duplicateSwitchErrorMessage = null;
@@ -313,10 +307,8 @@ out string duplicateSwitchErrorMessage
         /// <summary>
         /// Identifies/detects a switch that takes no parameters.
         /// </summary>
-        internal static bool IsParameterlessSwitch
-        (
-            string switchName
-        )
+        internal static bool IsParameterlessSwitch(
+            string switchName)
         {
             ParameterlessSwitch parameterlessSwitch;
             string duplicateSwitchErrorMessage;
@@ -333,16 +325,14 @@ string switchName
         /// <param name="missingParametersErrorMessage"></param>
         /// <param name="unquoteParameters"></param>
         /// <returns>true, if switch is a recognized switch that takes parameters</returns>
-        internal static bool IsParameterizedSwitch
-        (
+        internal static bool IsParameterizedSwitch(
             string switchName,
             out ParameterizedSwitch parameterizedSwitch,
             out string duplicateSwitchErrorMessage,
             out bool multipleParametersAllowed,
             out string missingParametersErrorMessage,
             out bool unquoteParameters,
-            out bool emptyParametersAllowed
-        )
+            out bool emptyParametersAllowed)
         {
             parameterizedSwitch = ParameterizedSwitch.Invalid;
             duplicateSwitchErrorMessage = null;
@@ -450,15 +440,13 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st
         /// <param name="multipleParametersAllowed"></param>
         /// <param name="unquoteParameters"></param>
         /// <returns>true, if the given parameters were successfully stored</returns>
-        internal bool SetParameterizedSwitch
-        (
+        internal bool SetParameterizedSwitch(
             ParameterizedSwitch parameterizedSwitch,
             string commandLineArg,
             string switchParameters,
             bool multipleParametersAllowed,
             bool unquoteParameters,
-            bool emptyParametersAllowed
-        )
+            bool emptyParametersAllowed)
         {
             bool parametersStored = false;
 
@@ -477,8 +465,7 @@ bool emptyParametersAllowed
                 _parameterizedSwitches[(int)parameterizedSwitch].commandLineArg = string.Concat(
                         _parameterizedSwitches[(int)parameterizedSwitch].commandLineArg,
                         " ",
-                        commandLineArg
-                    );
+                        commandLineArg);
             }
 
             // check if the switch has multiple parameters
diff --git a/src/MSBuild/InitializationException.cs b/src/MSBuild/InitializationException.cs
index deb2a93f11c..1147b68e51c 100644
--- a/src/MSBuild/InitializationException.cs
+++ b/src/MSBuild/InitializationException.cs
@@ -28,10 +28,8 @@ internal sealed class InitializationException : Exception
         /// This constructor initializes the exception message.
         /// </summary>
         /// <param name="message"></param>
-        private InitializationException
-        (
-            string message
-        ) :
+        private InitializationException(
+            string message) :
             base(message)
         {
             // do nothing
@@ -42,11 +40,9 @@ string message
         /// </summary>
         /// <param name="message"></param>
         /// <param name="invalidSwitch">Can be null.</param>
-        private InitializationException
-        (
+        private InitializationException(
             string message,
-            string invalidSwitch
-        ) :
+            string invalidSwitch) :
             this(message)
         {
             this.invalidSwitch = invalidSwitch;
@@ -55,11 +51,9 @@ string invalidSwitch
         /// <summary>
         /// Serialization constructor
         /// </summary>
-        private InitializationException
-        (
+        private InitializationException(
             SerializationInfo info,
-            StreamingContext context
-        ) :
+            StreamingContext context) :
             base(info, context)
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
diff --git a/src/MSBuild/MSBuildClientApp.cs b/src/MSBuild/MSBuildClientApp.cs
index e3491e54f54..43f5d9c0a82 100644
--- a/src/MSBuild/MSBuildClientApp.cs
+++ b/src/MSBuild/MSBuildClientApp.cs
@@ -40,8 +40,7 @@ public static MSBuildApp.ExitType Execute(
 #else
             string[] commandLine,
 #endif
-            CancellationToken cancellationToken
-            )
+            CancellationToken cancellationToken)
         {
             string msbuildLocation = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
 
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index 04e2877608c..9e61ae1f210 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -89,8 +89,7 @@ internal bool CancelPending
         /// <param name="appDomainSetup">The AppDomainSetup that we want to use to launch our AppDomainIsolated tasks</param>
         /// <param name="taskParams">Parameters that will be passed to the task when created</param>
         /// <returns>Task completion result showing success, failure or if there was a crash</returns>
-        internal OutOfProcTaskHostTaskResult ExecuteTask
-            (
+        internal OutOfProcTaskHostTaskResult ExecuteTask(
                 IBuildEngine oopTaskHostNode,
                 string taskName,
                 string taskLocation,
@@ -100,8 +99,7 @@ internal OutOfProcTaskHostTaskResult ExecuteTask
 #if FEATURE_APPDOMAIN
                 AppDomainSetup appDomainSetup,
 #endif
-                IDictionary<string, TaskParameter> taskParams
-            )
+                IDictionary<string, TaskParameter> taskParams)
         {
             buildEngine = oopTaskHostNode;
             this.taskName = taskName;
@@ -123,13 +121,11 @@ IDictionary<string, TaskParameter> taskParams
                 // so just save that instead.
                 Exception exceptionToReturn = e is TargetInvocationException ? e.InnerException : e;
 
-                return new OutOfProcTaskHostTaskResult
-                            (
+                return new OutOfProcTaskHostTaskResult(
                                 TaskCompleteType.CrashedDuringInitialization,
                                 exceptionToReturn,
                                 "TaskInstantiationFailureError",
-                                new string[] { taskName, taskLocation, String.Empty }
-                            );
+                                new string[] { taskName, taskLocation, String.Empty });
             }
 
             OutOfProcTaskHostTaskResult taskResult;
@@ -142,13 +138,11 @@ IDictionary<string, TaskParameter> taskParams
 #endif
                     taskParams);
 #else
-                return new OutOfProcTaskHostTaskResult
-                                                (
+                return new OutOfProcTaskHostTaskResult(
                                                     TaskCompleteType.CrashedDuringInitialization,
                                                     null,
                                                     "TaskInstantiationFailureNotSupported",
-                                                    new string[] { taskName, taskLocation, typeof(RunInSTAAttribute).FullName }
-                                                );
+                                                    new string[] { taskName, taskLocation, typeof(RunInSTAAttribute).FullName });
 #endif
             }
             else
@@ -189,8 +183,7 @@ internal void CleanupTask()
         /// STA thread launching code lifted from XMakeBuildEngine\BackEnd\Components\RequestBuilder\TaskBuilder.cs, ExecuteTaskInSTAThread method.  
         /// Any bug fixes made to this code, please ensure that you also fix that code.  
         /// </comment>
-        private OutOfProcTaskHostTaskResult InstantiateAndExecuteTaskInSTAThread
-            (
+        private OutOfProcTaskHostTaskResult InstantiateAndExecuteTaskInSTAThread(
                 IBuildEngine oopTaskHostNode,
                 LoadedType taskType,
                 string taskName,
@@ -201,8 +194,7 @@ private OutOfProcTaskHostTaskResult InstantiateAndExecuteTaskInSTAThread
 #if FEATURE_APPDOMAIN
                 AppDomainSetup appDomainSetup,
 #endif
-                IDictionary<string, TaskParameter> taskParams
-            )
+                IDictionary<string, TaskParameter> taskParams)
         {
             ManualResetEvent taskRunnerFinished = new ManualResetEvent(false);
             OutOfProcTaskHostTaskResult taskResult = null;
@@ -214,8 +206,7 @@ IDictionary<string, TaskParameter> taskParams
                 {
                     try
                     {
-                        taskResult = InstantiateAndExecuteTask
-                                            (
+                        taskResult = InstantiateAndExecuteTask(
                                                 oopTaskHostNode,
                                                 taskType,
                                                 taskName,
@@ -226,8 +217,7 @@ IDictionary<string, TaskParameter> taskParams
 #if FEATURE_APPDOMAIN
                                                 appDomainSetup,
 #endif
-                                                taskParams
-                                            );
+                                                taskParams);
                     }
                     catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                     {
@@ -272,8 +262,7 @@ IDictionary<string, TaskParameter> taskParams
         /// <summary>
         /// Do the work of actually instantiating and running the task. 
         /// </summary>
-        private OutOfProcTaskHostTaskResult InstantiateAndExecuteTask
-            (
+        private OutOfProcTaskHostTaskResult InstantiateAndExecuteTask(
                 IBuildEngine oopTaskHostNode,
                 LoadedType taskType,
                 string taskName,
@@ -284,8 +273,7 @@ private OutOfProcTaskHostTaskResult InstantiateAndExecuteTask
 #if FEATURE_APPDOMAIN
                 AppDomainSetup appDomainSetup,
 #endif
-                IDictionary<string, TaskParameter> taskParams
-            )
+                IDictionary<string, TaskParameter> taskParams)
         {
 #if FEATURE_APPDOMAIN
             _taskAppDomain = null;
@@ -294,7 +282,14 @@ IDictionary<string, TaskParameter> taskParams
 
             try
             {
-                wrappedTask = TaskLoader.CreateTask(taskType, taskName, taskFile, taskLine, taskColumn, new TaskLoader.LogError(LogErrorDelegate),
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+                wrappedTask = TaskLoader.CreateTask(
+                    taskType,
+                    taskName,
+                    taskFile,
+                    taskLine,
+                    taskColumn,
+                    new TaskLoader.LogError(LogErrorDelegate),
 #if FEATURE_APPDOMAIN
                     appDomainSetup,
 #endif
@@ -303,6 +298,7 @@ IDictionary<string, TaskParameter> taskParams
                     , out _taskAppDomain
 #endif
                     );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
                 wrappedTask.BuildEngine = oopTaskHostNode;
             }
@@ -317,13 +313,11 @@ IDictionary<string, TaskParameter> taskParams
                     exceptionToReturn = e.InnerException;
                 }
 
-                return new OutOfProcTaskHostTaskResult
-                (
+                return new OutOfProcTaskHostTaskResult(
                     TaskCompleteType.CrashedDuringInitialization,
                     exceptionToReturn,
                     "TaskInstantiationFailureError",
-                    new string[] { taskName, taskLocation, String.Empty }
-                );
+                    new string[] { taskName, taskLocation, String.Empty });
             }
 
             foreach (KeyValuePair<string, TaskParameter> param in taskParams)
@@ -335,14 +329,12 @@ IDictionary<string, TaskParameter> taskParams
                 }
                 catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    return new OutOfProcTaskHostTaskResult
-                            (
+                    return new OutOfProcTaskHostTaskResult(
                                 TaskCompleteType.CrashedDuringInitialization,
                                 // If it's a TargetInvocationException, we only care about the contents of the inner exception, so save that instead.
                                 e is TargetInvocationException ? e.InnerException : e,
                                 "InvalidTaskAttributeError",
-                                new string[] { param.Key, param.Value.ToString(), taskName }
-                            );
+                                new string[] { param.Key, param.Value.ToString(), taskName });
                 }
             }
 
@@ -402,9 +394,7 @@ private void LogErrorDelegate(string taskLocation, int taskLine, int taskColumn,
                                                     0,
                                                     ResourceUtilities.FormatString(AssemblyResources.GetString(message), messageArgs),
                                                     null,
-                                                    taskName
-                                                )
-                                            );
+                                                    taskName));
         }
     }
 }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 629d9141a93..03b7c753618 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -901,8 +901,7 @@ private void RunTask(object state)
                 // As a fix, we will create the class directly without wrapping it in a domain
                 _taskWrapper = new OutOfProcTaskAppDomainWrapper();
 
-                taskResult = _taskWrapper.ExecuteTask
-                (
+                taskResult = _taskWrapper.ExecuteTask(
                     this as IBuildEngine,
                     taskName,
                     taskLocation,
@@ -912,8 +911,7 @@ private void RunTask(object state)
 #if FEATURE_APPDOMAIN
                     taskConfiguration.AppDomainSetup,
 #endif
-                    taskParams
-                );
+                    taskParams);
             }
             catch (ThreadAbortException)
             {
@@ -937,11 +935,9 @@ private void RunTask(object state)
 
                     lock (_taskCompleteLock)
                     {
-                        _taskCompletePacket = new TaskHostTaskComplete
-                                                    (
+                        _taskCompletePacket = new TaskHostTaskComplete(
                                                         taskResult,
-                                                        currentEnvironment
-                                                    );
+                                                        currentEnvironment);
                     }
 
 #if FEATURE_APPDOMAIN
@@ -1173,13 +1169,11 @@ private void LogMessageFromResource(MessageImportance importance, string message
             ErrorUtilities.VerifyThrow(_currentConfiguration != null, "We should never have a null configuration when we're trying to log messages!");
 
             // Using the CLR 2 build event because this class is shared between MSBuildTaskHost.exe (CLR2) and MSBuild.exe (CLR4+)
-            BuildMessageEventArgs message = new BuildMessageEventArgs
-                                                (
+            BuildMessageEventArgs message = new BuildMessageEventArgs(
                                                     ResourceUtilities.FormatString(AssemblyResources.GetString(messageResource), messageArgs),
                                                     null,
                                                     _currentConfiguration.TaskName,
-                                                    importance
-                                                );
+                                                    importance);
 
             LogMessageEvent(message);
         }
@@ -1192,8 +1186,7 @@ private void LogWarningFromResource(string messageResource, params object[] mess
             ErrorUtilities.VerifyThrow(_currentConfiguration != null, "We should never have a null configuration when we're trying to log warnings!");
 
             // Using the CLR 2 build event because this class is shared between MSBuildTaskHost.exe (CLR2) and MSBuild.exe (CLR4+)
-            BuildWarningEventArgs warning = new BuildWarningEventArgs
-                                                (
+            BuildWarningEventArgs warning = new BuildWarningEventArgs(
                                                     null,
                                                     null,
                                                     ProjectFileOfTaskNode,
@@ -1203,8 +1196,7 @@ private void LogWarningFromResource(string messageResource, params object[] mess
                                                     0,
                                                     ResourceUtilities.FormatString(AssemblyResources.GetString(messageResource), messageArgs),
                                                     null,
-                                                    _currentConfiguration.TaskName
-                                                );
+                                                    _currentConfiguration.TaskName);
 
             LogWarningEvent(warning);
         }
@@ -1217,8 +1209,7 @@ private void LogErrorFromResource(string messageResource)
             ErrorUtilities.VerifyThrow(_currentConfiguration != null, "We should never have a null configuration when we're trying to log errors!");
 
             // Using the CLR 2 build event because this class is shared between MSBuildTaskHost.exe (CLR2) and MSBuild.exe (CLR4+)
-            BuildErrorEventArgs error = new BuildErrorEventArgs
-                                                (
+            BuildErrorEventArgs error = new BuildErrorEventArgs(
                                                     null,
                                                     null,
                                                     ProjectFileOfTaskNode,
@@ -1228,8 +1219,7 @@ private void LogErrorFromResource(string messageResource)
                                                     0,
                                                     AssemblyResources.GetString(messageResource),
                                                     null,
-                                                    _currentConfiguration.TaskName
-                                                );
+                                                    _currentConfiguration.TaskName);
 
             LogErrorEvent(error);
         }
diff --git a/src/MSBuild/ProjectSchemaValidationHandler.cs b/src/MSBuild/ProjectSchemaValidationHandler.cs
index 3e61f1239e7..9359b5b6052 100644
--- a/src/MSBuild/ProjectSchemaValidationHandler.cs
+++ b/src/MSBuild/ProjectSchemaValidationHandler.cs
@@ -33,12 +33,10 @@ internal sealed class ProjectSchemaValidationHandler
         /// <param name="binPath">Path to the framework directory where the default schema for 
         /// this ToolsVersion can be found.</param>
         /// <returns>True if the project was successfully validated against the given schema, false otherwise</returns>
-        internal static void VerifyProjectSchema
-        (
+        internal static void VerifyProjectSchema(
             string projectFile,
             string schemaFile,
-            string binPath
-        )
+            string binPath)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectFile, nameof(projectFile));
             ErrorUtilities.VerifyThrowArgumentNull(binPath, nameof(binPath));
@@ -57,11 +55,9 @@ string binPath
             else
             {
                 // If we've gotten to this point, there is no schema to validate against -- just exit. 
-                InitializationException.Throw
-                    (
+                InitializationException.Throw(
                     ResourceUtilities.FormatResourceStringStripCodeAndKeyword("SchemaNotFoundErrorWithFile", schemaFile),
-                    null /* No associated command line switch */
-                    );
+                    null); /* No associated command line switch */
             }
 
             ProjectSchemaValidationHandler validationHandler = new ProjectSchemaValidationHandler();
@@ -72,11 +68,9 @@ string binPath
         /// <summary>
         /// Validates a project against the given schema.  A schema file must be provided.
         /// </summary>
-        private void VerifyProjectSchema
-        (
+        private void VerifyProjectSchema(
             string projectFile,
-            string schemaFile
-        )
+            string schemaFile)
         {
             ErrorUtilities.VerifyThrowArgumentNull(schemaFile, nameof(schemaFile));
             ErrorUtilities.VerifyThrowArgumentNull(projectFile, nameof(projectFile));
@@ -124,24 +118,21 @@ string schemaFile
                                 }
                             }
 
-                            VerifyThrowInitializationExceptionWithResource
-                                    (
+                            VerifyThrowInitializationExceptionWithResource(
                                      !_syntaxError,
                                      projectFile,
                                      0 /* line */,
                                      0 /* end line */,
                                      0 /* column */,
                                      0 /* end column */,
-                                     "ProjectSchemaErrorHalt"
-                                    );
+                                     "ProjectSchemaErrorHalt");
                         }
                     }
                 }
                 // handle errors in the schema itself
                 catch (XmlException e)
                 {
-                    ThrowInitializationExceptionWithResource
-                            (
+                    ThrowInitializationExceptionWithResource(
                              (e.SourceUri.Length == 0) ? String.Empty : new Uri(e.SourceUri).LocalPath,
                              e.LineNumber,
                              0 /* end line */,
@@ -149,14 +140,12 @@ string schemaFile
                              0 /* end column */,
                              "InvalidSchemaFile",
                              schemaFile,
-                             e.Message
-                            );
+                             e.Message);
                 }
                 // handle errors in the schema itself
                 catch (XmlSchemaException e)
                 {
-                    ThrowInitializationExceptionWithResource
-                            (
+                    ThrowInitializationExceptionWithResource(
                              (e.SourceUri.Length == 0) ? String.Empty : new Uri(e.SourceUri).LocalPath,
                              e.LineNumber,
                              0 /* end line */,
@@ -164,8 +153,7 @@ string schemaFile
                              0 /* end column */,
                              "InvalidSchemaFile",
                              schemaFile,
-                             e.Message
-                            );
+                             e.Message);
                 }
             }
         }
@@ -174,8 +162,7 @@ string schemaFile
         /// Given the parameters passed in, if the condition is false, builds an 
         /// error message and throws an InitializationException with that message. 
         /// </summary>
-        private static void VerifyThrowInitializationExceptionWithResource
-                (
+        private static void VerifyThrowInitializationExceptionWithResource(
                  bool condition,
                  string projectFile,
                  int fileLine,
@@ -183,21 +170,18 @@ private static void VerifyThrowInitializationExceptionWithResource
                  int fileColumn,
                  int fileEndColumn,
                  string resourceName,
-                 params object[] args
-                )
+                 params object[] args)
         {
             if (!condition)
             {
-                ThrowInitializationExceptionWithResource
-                        (
+                ThrowInitializationExceptionWithResource(
                          projectFile,
                          fileLine,
                          fileEndLine,
                          fileColumn,
                          fileEndColumn,
                          resourceName,
-                         args
-                        );
+                         args);
             }
         }
 
@@ -205,54 +189,45 @@ params object[] args
         /// Given the parameters passed in, builds an error message and throws an 
         /// InitializationException with that message. 
         /// </summary>
-        private static void ThrowInitializationExceptionWithResource
-                (
+        private static void ThrowInitializationExceptionWithResource(
                  string projectFile,
                  int fileLine,
                  int fileEndLine,
                  int fileColumn,
                  int fileEndColumn,
                  string resourceName,
-                 params object[] args
-                )
+                 params object[] args)
         {
-            InitializationException.Throw
-                    (
-                     BuildStringFromResource
-                        (
+            InitializationException.Throw(
+                     BuildStringFromResource(
                          projectFile,
                          fileLine,
                          fileEndLine,
                          fileColumn,
                          fileEndColumn,
                          resourceName,
-                         args
-                        ),
-                     null /* No associated command line switch */
-                    );
+                         args),
+                     null); /* No associated command line switch */
         }
 
         /// <summary>
         /// Given a resource string and information about a file, builds up a string
         /// containing the message.
         /// </summary>
-        private static string BuildStringFromResource
-                (
+        private static string BuildStringFromResource(
                  string projectFile,
                  int fileLine,
                  int fileEndLine,
                  int fileColumn,
                  int fileEndColumn,
                  string resourceName,
-                 params object[] args
-                )
+                 params object[] args)
         {
             string errorCode;
             string helpKeyword;
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, resourceName, args);
 
-            return EventArgsFormatting.FormatEventMessage
-                (
+            return EventArgsFormatting.FormatEventMessage(
                     "error",
                     AssemblyResources.GetString("SubCategoryForSchemaValidationErrors"),
                     message,
@@ -262,8 +237,7 @@ params object[] args
                     fileEndLine,
                     fileColumn,
                     fileEndColumn,
-                    0 /* thread id */
-                );
+                    0); /* thread id */
         }
 
         #endregion // Methods
@@ -287,19 +261,15 @@ private void OnSchemaValidationError(object sender, ValidationEventArgs args)
                 filePath = (new Uri(args.Exception.SourceUri)).LocalPath;
             }
 
-            Console.WriteLine
-                    (
-                     BuildStringFromResource
-                        (
+            Console.WriteLine(
+                     BuildStringFromResource(
                          filePath,
                          args.Exception.LineNumber,
                          0 /* end line */,
                          args.Exception.LinePosition,
                          0 /* end column */,
                          "SchemaValidationError",
-                         args.Exception.Message
-                        )
-                    );
+                         args.Exception.Message));
         }
 
         #endregion // Event Handlers
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index bcd34a2a05a..c0c9cbd4a41 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -213,11 +213,13 @@ private static void HandleConfigurationException(Exception ex)
         /// </remarks>
         /// <returns>0 on success, 1 on failure</returns>
         [MTAThread]
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         public static int Main(
 #if !FEATURE_GET_COMMANDLINE
             string[] args
 #endif
             )
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         {
             DebuggerLaunchCheck();
 
@@ -238,11 +240,10 @@ string[] args
                 !Traits.Instance.EscapeHatches.EnsureStdOutForChildNodesIsPrimaryStdout &&
                 CanRunServerBasedOnCommandLineSwitches(
 #if FEATURE_GET_COMMANDLINE
-                    Environment.CommandLine
+                    Environment.CommandLine))
 #else
-                    ConstructArrayArg(args)
+                    ConstructArrayArg(args)))
 #endif
-                ))
             {
                 Console.CancelKeyPress += Console_CancelKeyPress;
 
@@ -254,19 +255,18 @@ string[] args
 #else
                 ConstructArrayArg(args),
 #endif
-                s_buildCancellationSource.Token
-                ) == ExitType.Success) ? 0 : 1);
+                s_buildCancellationSource.Token) == ExitType.Success) ? 0 : 1);
             }
             else
             {
                 // return 0 on success, non-zero on failure
                 exitCode = ((s_initialized && Execute(
 #if FEATURE_GET_COMMANDLINE
-                Environment.CommandLine
+                Environment.CommandLine)
 #else
-                ConstructArrayArg(args)
+                ConstructArrayArg(args))
 #endif
-                ) == ExitType.Success) ? 0 : 1);
+                == ExitType.Success) ? 0 : 1);
             }
 
             if (Environment.GetEnvironmentVariable("MSBUILDDUMPPROCESSCOUNTERS") == "1")
@@ -286,11 +286,10 @@ string[] args
         /// </remarks>
         private static bool CanRunServerBasedOnCommandLineSwitches(
 #if FEATURE_GET_COMMANDLINE
-            string commandLine
+            string commandLine)
 #else
-            string[] commandLine
+            string[] commandLine)
 #endif
-            )
         {
             bool canRunServer = true;
             try
@@ -624,11 +623,10 @@ private static void DebuggerLaunchCheck()
         /// or the manner in which it failed.</returns>
         public static ExitType Execute(
 #if FEATURE_GET_COMMANDLINE
-            string commandLine
+            string commandLine)
 #else
-            string[] commandLine
+            string[] commandLine)
 #endif
-            )
         {
             DebuggerLaunchCheck();
 
@@ -745,11 +743,10 @@ string[] commandLine
                                             ref lowPriority,
                                             recursing: false,
 #if FEATURE_GET_COMMANDLINE
-                                            commandLine
+                                            commandLine);
 #else
-                                            string.Join(' ', commandLine)
+                                            string.Join(' ', commandLine));
 #endif
-                );
 
                 CommandLineSwitches.SwitchesFromResponseFiles = null;
 
@@ -1096,8 +1093,7 @@ private static void ResetGatheringSwitchesState()
         /// </summary>
         /// <returns>true, if build succeeds</returns>
         [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Not going to refactor it right now")]
-        internal static bool BuildProject
-        (
+        internal static bool BuildProject(
             string projectFile,
             string[] targets,
             string toolsVersion,
@@ -1128,11 +1124,10 @@ internal static bool BuildProject
             string[] inputResultsCaches,
             string outputResultsCache,
 #if FEATURE_GET_COMMANDLINE
-            string commandLine
+            string commandLine)
 #else
-            string[] commandLine
+            string[] commandLine)
 #endif
-        )
         {
             if (FileUtilities.IsVCProjFilename(projectFile) || FileUtilities.IsDspFilename(projectFile))
             {
@@ -1188,8 +1183,7 @@ string[] commandLine
                     {
                         if (logger.Parameters != null &&
                             (logger.Parameters.IndexOf("V=DIAG", StringComparison.OrdinalIgnoreCase) != -1 ||
-                             logger.Parameters.IndexOf("VERBOSITY=DIAG", StringComparison.OrdinalIgnoreCase) != -1)
-                           )
+                             logger.Parameters.IndexOf("VERBOSITY=DIAG", StringComparison.OrdinalIgnoreCase) != -1))
                         {
                             logTaskInputs = true;
                             break;
@@ -1203,8 +1197,7 @@ string[] commandLine
                     {
                         if (logger.CentralLogger?.Parameters != null &&
                             (logger.CentralLogger.Parameters.IndexOf("V=DIAG", StringComparison.OrdinalIgnoreCase) != -1 ||
-                             logger.CentralLogger.Parameters.IndexOf("VERBOSITY=DIAG", StringComparison.OrdinalIgnoreCase) != -1)
-                        )
+                             logger.CentralLogger.Parameters.IndexOf("VERBOSITY=DIAG", StringComparison.OrdinalIgnoreCase) != -1))
                         {
                             logTaskInputs = true;
                             break;
@@ -1217,8 +1210,7 @@ string[] commandLine
                 bool preprocessOnly = preprocessWriter != null && !FileUtilities.IsSolutionFilename(projectFile);
                 bool targetsOnly = targetsWriter != null && !FileUtilities.IsSolutionFilename(projectFile);
 
-                projectCollection = new ProjectCollection
-                (
+                projectCollection = new ProjectCollection(
                     globalProperties,
                     loggers,
                     null,
@@ -1227,8 +1219,7 @@ string[] commandLine
                     onlyLogCriticalEvents,
                     loadProjectsReadOnly: !preprocessOnly,
                     useAsynchronousLogging: true,
-                    reuseProjectRootElementCache: s_isServerNode
-                );
+                    reuseProjectRootElementCache: s_isServerNode);
 
                 if (toolsVersion != null && !projectCollection.ContainsToolset(toolsVersion))
                 {
@@ -1351,8 +1342,7 @@ string[] commandLine
                                 new BuildManager.DeferredBuildMessage(
                                     String.Format("Included response file: {0}", responseFilePath),
                                     MessageImportance.Normal,
-                                    responseFilePath
-                                ));
+                                    responseFilePath));
                         }
                     }
 
@@ -1666,8 +1656,7 @@ internal static void SetConsoleUI()
                     &&
                     codepage != thisThread.CurrentUICulture.TextInfo.OEMCodePage
                     &&
-                    codepage != thisThread.CurrentUICulture.TextInfo.ANSICodePage
-                )
+                    codepage != thisThread.CurrentUICulture.TextInfo.ANSICodePage)
             {
                 thisThread.CurrentUICulture = new CultureInfo("en-US");
                 return;
@@ -1854,15 +1843,13 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
         /// <param name="switchParameterIndicator"></param>
         /// <param name="switchIndicatorsLength"></param>
         /// <returns>The given switch's parameters (with interesting quoting preserved).</returns>
-        internal static string ExtractSwitchParameters
-        (
+        internal static string ExtractSwitchParameters(
             string commandLineArg,
             string unquotedCommandLineArg,
             int doubleQuotesRemovedFromArg,
             string switchName,
             int switchParameterIndicator,
-            int switchIndicatorsLength
-        )
+            int switchIndicatorsLength)
         {
 
             // find the parameter indicator again using the quoted arg
@@ -2019,15 +2006,13 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
         /// <param name="switchParameters"></param>
         /// <param name="duplicateSwitchErrorMessage"></param>
         /// <param name="unquotedCommandLineArg"></param>
-        private static void GatherParameterlessCommandLineSwitch
-        (
+        private static void GatherParameterlessCommandLineSwitch(
             CommandLineSwitches commandLineSwitches,
             CommandLineSwitches.ParameterlessSwitch parameterlessSwitch,
             string switchParameters,
             string duplicateSwitchErrorMessage,
             string unquotedCommandLineArg,
-            string commandLine
-        )
+            string commandLine)
         {
             // switch should not have any parameters
             if (switchParameters.Length == 0)
@@ -2061,8 +2046,7 @@ string commandLine
         /// <param name="missingParametersErrorMessage"></param>
         /// <param name="unquoteParameters"></param>
         /// <param name="unquotedCommandLineArg"></param>
-        private static void GatherParameterizedCommandLineSwitch
-        (
+        private static void GatherParameterizedCommandLineSwitch(
             CommandLineSwitches commandLineSwitches,
             CommandLineSwitches.ParameterizedSwitch parameterizedSwitch,
             string switchParameters,
@@ -2072,8 +2056,7 @@ private static void GatherParameterizedCommandLineSwitch
             bool unquoteParameters,
             string unquotedCommandLineArg,
             bool allowEmptyParameters,
-            string commandLine
-        )
+            string commandLine)
         {
             if (// switch must have parameters
                 (switchParameters.Length > 1) ||
@@ -2199,8 +2182,7 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon
         /// performs deeper error checking on the switches and their parameters.
         /// </summary>
         /// <returns>true, if build can be invoked</returns>
-        private static bool ProcessCommandLineSwitches
-        (
+        private static bool ProcessCommandLineSwitches(
             CommandLineSwitches switchesFromAutoResponseFile,
             CommandLineSwitches switchesNotFromAutoResponseFile,
             ref string projectFile,
@@ -2234,8 +2216,7 @@ private static bool ProcessCommandLineSwitches
             ref string outputResultsCache,
             ref bool lowPriority,
             bool recursing,
-            string commandLine
-        )
+            string commandLine)
         {
             bool invokeBuild = false;
 
@@ -2350,8 +2331,7 @@ string commandLine
                                                            ref outputResultsCache,
                                                            ref lowPriority,
                                                            recursing: true,
-                                                           commandLine
-                                                         );
+                                                           commandLine);
                     }
 
                     // figure out which targets we are building
@@ -2437,8 +2417,7 @@ string commandLine
                         out originalVerbosity,
                         cpuCount,
                         out profilerLogger,
-                        out enableProfiler
-                        );
+                        out enableProfiler);
 
                     // We're finished with defining individual loggers' verbosity at this point, so we don't need to worry about messing them up.
                     if (Traits.Instance.DebugEngine)
@@ -2934,12 +2913,10 @@ internal static int ProcessMaxCPUCountSwitch(string[] parameters)
         /// <param name="parameters"></param>
         /// <returns>The project filename/path.</returns>
         /// Internal for testing purposes
-        internal static string ProcessProjectSwitch
-                               (
+        internal static string ProcessProjectSwitch(
                                  string[] parameters,
                                  string[] projectsExtensionsToIgnore,
-                                 DirectoryGetFiles getFiles
-                               )
+                                 DirectoryGetFiles getFiles)
         {
             ErrorUtilities.VerifyThrow(parameters.Length <= 1, "It should not be possible to specify more than 1 project at a time.");
             string projectFile = null;
@@ -3204,8 +3181,7 @@ internal static Dictionary<string, string> ProcessPropertySwitch(string[] parame
         /// Instantiates the loggers that are going to listen to events from this build.
         /// </summary>
         /// <returns>List of loggers.</returns>
-        private static ILogger[] ProcessLoggingSwitches
-        (
+        private static ILogger[] ProcessLoggingSwitches(
             string[] loggerSwitchParameters,
             string[] distributedLoggerSwitchParameters,
             string[] verbositySwitchParameters,
@@ -3222,8 +3198,7 @@ private static ILogger[] ProcessLoggingSwitches
             out LoggerVerbosity originalVerbosity,
             int cpuCount,
             out ProfilerLogger profilerLogger,
-            out bool enableProfiler
-        )
+            out bool enableProfiler)
         {
             // if verbosity level is not specified, use the default
             originalVerbosity = LoggerVerbosity.Normal;
@@ -3375,15 +3350,13 @@ private static void ProcessBinaryLogger(string[] binaryLoggerParameters, List<IL
         /// <summary>
         /// Process the noconsole switch and attach or not attach the correct console loggers
         /// </summary>
-        internal static void ProcessConsoleLoggerSwitch
-        (
+        internal static void ProcessConsoleLoggerSwitch(
             bool noConsoleLogger,
             string[] consoleLoggerParameters,
             List<DistributedLoggerRecord> distributedLoggerRecords,
             LoggerVerbosity verbosity,
             int cpuCount,
-            List<ILogger> loggers
-        )
+            List<ILogger> loggers)
         {
             // the console logger is always active, unless specifically disabled
             if (!noConsoleLogger)
@@ -3431,19 +3404,16 @@ private static bool DoesEnvironmentSupportFancyLogger()
             if (Console.IsOutputRedirected)
             {
                 messagesToLogInBuildLoggers.Add(
-                    new BuildManager.DeferredBuildMessage("FancyLogger was not used because the output is being redirected to a file.", MessageImportance.Low)
-                );
+                    new BuildManager.DeferredBuildMessage("FancyLogger was not used because the output is being redirected to a file.", MessageImportance.Low));
                 return false;
             }
             // If terminal is dumb
             if (
                 (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable("WT_SESSION") == "")
-                || Environment.GetEnvironmentVariable("TERM") == "dumb"
-            )
+                || Environment.GetEnvironmentVariable("TERM") == "dumb")
             {
                 messagesToLogInBuildLoggers.Add(
-                    new BuildManager.DeferredBuildMessage("FancyLogger was not used because the output is not supported.", MessageImportance.Low)
-                );
+                    new BuildManager.DeferredBuildMessage("FancyLogger was not used because the output is not supported.", MessageImportance.Low));
                 return false;
             }
             return true;
@@ -3451,8 +3421,7 @@ private static bool DoesEnvironmentSupportFancyLogger()
 
         private static void ProcessFancyLogger(
             bool noConsoleLogger,
-            List<ILogger> loggers
-        )
+            List<ILogger> loggers)
         {
             // Check for flags and env variables
             if (!noConsoleLogger)
@@ -3497,14 +3466,12 @@ private static DistributedLoggerRecord CreateForwardingLoggerRecord(ILogger logg
         /// <summary>
         /// Process the file logger switches and attach the correct file loggers. Internal for testing
         /// </summary>
-        internal static void ProcessDistributedFileLogger
-        (
+        internal static void ProcessDistributedFileLogger(
             bool distributedFileLogger,
             string[] fileLoggerParameters,
             List<DistributedLoggerRecord> distributedLoggerRecords,
             List<ILogger> loggers,
-            int cpuCount
-        )
+            int cpuCount)
         {
             if (distributedFileLogger)
             {
@@ -3803,13 +3770,11 @@ private static LoggerDescription ParseLoggingParameter(string parameter, string
         /// Loads a logger from its assembly, instantiates it, and handles errors.
         /// </summary>
         /// <returns>Instantiated logger.</returns>
-        private static bool CreateAndConfigureLogger
-        (
+        private static bool CreateAndConfigureLogger(
             LoggerDescription loggerDescription,
             LoggerVerbosity verbosity,
             string unquotedParameter,
-            out ILogger logger
-        )
+            out ILogger logger)
         {
             logger = null;
 
@@ -3874,8 +3839,7 @@ out ILogger logger
             return true;
         }
 
-        private static void ReplayBinaryLog
-        (
+        private static void ReplayBinaryLog(
             string binaryLogFilePath,
             ILogger[] loggers,
             IEnumerable<DistributedLoggerRecord> distributedLoggerRecords,
@@ -3968,12 +3932,10 @@ private static void ThrowInvalidToolsVersionInitializationException(IEnumerable<
                 toolsVersionList = toolsVersionList.Substring(0, toolsVersionList.Length - 2);
             }
 
-            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword
-                (
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
                 "UnrecognizedToolsVersion",
                 toolsVersion,
-                toolsVersionList
-                );
+                toolsVersionList);
             message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword("InvalidToolsVersionError", message);
 
             InitializationException.Throw(message, toolsVersion);
diff --git a/src/MSBuildTaskHost/TypeLoader.cs b/src/MSBuildTaskHost/TypeLoader.cs
index 4c3df1e1d14..0715082d826 100644
--- a/src/MSBuildTaskHost/TypeLoader.cs
+++ b/src/MSBuildTaskHost/TypeLoader.cs
@@ -129,12 +129,10 @@ internal static bool IsPartialTypeNameMatch(string typeName1, string typeName2)
         /// found will be returned.
         /// The unusued bool is to match the signature of the Shared copy of TypeLoader.
         /// </summary>
-        internal LoadedType Load
-        (
+        internal LoadedType Load(
             string typeName,
             AssemblyLoadInfo assembly,
-            bool _
-        )
+            bool _)
         {
             return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly);
         }
@@ -145,11 +143,9 @@ bool _
         /// found will be returned.
         /// </summary>
         /// <returns>The loaded type, or null if the type was not found.</returns>
-        internal LoadedType ReflectionOnlyLoad
-        (
+        internal LoadedType ReflectionOnlyLoad(
             string typeName,
-            AssemblyLoadInfo assembly
-        )
+            AssemblyLoadInfo assembly)
         {
             return GetLoadedType(s_cacheOfReflectionOnlyLoadedTypesByFilter, typeName, assembly);
         }
diff --git a/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs b/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
index 6df2b6a307f..8d044262ecc 100644
--- a/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
+++ b/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
@@ -65,8 +65,7 @@ internal class AssemblyFoldersEx : IEnumerable<AssemblyFoldersExInfo>
         /// <param name="getRegistrySubKeyDefaultValue">Used to find registry key default values.</param>
         /// <param name="targetProcessorArchitecture">Architecture to seek.</param>
         /// <param name="openBaseKey">Key object to open.</param>
-        internal AssemblyFoldersEx
-        (
+        internal AssemblyFoldersEx(
             string registryKeyRoot,
             string targetRuntimeVersion,
             string registryKeySuffix,
@@ -75,8 +74,7 @@ internal AssemblyFoldersEx
             GetRegistrySubKeyNames getRegistrySubKeyNames,
             GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue,
             ProcessorArchitecture targetProcessorArchitecture,
-            OpenBaseKey openBaseKey
-        )
+            OpenBaseKey openBaseKey)
         {
             // No extensions are supported, except on Windows
             if (!NativeMethodsShared.IsWindows)
@@ -139,8 +137,7 @@ OpenBaseKey openBaseKey
         /// <param name="getRegistrySubKeyNames">Used to find registry subkey names.</param>
         /// <param name="getRegistrySubKeyDefaultValue">Used to find registry key default values.</param>
         /// <param name="openBaseKey">Key object to open.</param>
-        private void FindDirectories
-        (
+        private void FindDirectories(
             RegistryView view,
             RegistryHive hive,
             string registryKeyRoot,
@@ -150,8 +147,7 @@ private void FindDirectories
             string platform,
             GetRegistrySubKeyNames getRegistrySubKeyNames,
             GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue,
-            OpenBaseKey openBaseKey
-        )
+            OpenBaseKey openBaseKey)
         {
             // Open the hive for a given view
             using (RegistryKey baseKey = openBaseKey(hive, view))
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 335974a0774..a43e63aab49 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -387,16 +387,14 @@ public void Translate(ref TimeSpan value)
             /// <param name="value">The context to be translated.</param>
             public void Translate(ref BuildEventContext value)
             {
-                value = new BuildEventContext
-                    (
+                value = new BuildEventContext(
                     _reader.ReadInt32(),
                     _reader.ReadInt32(),
                     _reader.ReadInt32(),
                     _reader.ReadInt32(),
                     _reader.ReadInt32(),
                     _reader.ReadInt32(),
-                    _reader.ReadInt32()
-                    );
+                    _reader.ReadInt32());
             }
 
 #endif
diff --git a/src/Shared/CanonicalError.cs b/src/Shared/CanonicalError.cs
index 88d99271d7e..10aaa56332a 100644
--- a/src/Shared/CanonicalError.cs
+++ b/src/Shared/CanonicalError.cs
@@ -53,8 +53,7 @@ internal static class CanonicalError
     {
         // Defines the main pattern for matching messages.
         private static readonly Lazy<Regex> s_originCategoryCodeTextExpression = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 // Beginning of line and any amount of whitespace.
                 @"^\s*"
                 // Match a [optional project number prefix 'ddd>'], single letter + colon + remaining filename, or
@@ -71,20 +70,16 @@ internal static class CanonicalError
                 + @"( \s*(?<CODE>[^: ]*))?\s*:"
                 // Whatever's left on this line, including colons.
                 + "(?<TEXT>.*)$",
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         private static readonly Lazy<Regex> s_originCategoryCodeTextExpression2 = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 @"^\s*(?<ORIGIN>(?<FILENAME>.*):(?<LOCATION>(?<LINE>[0-9]*):(?<COLUMN>[0-9]*))):(?<CATEGORY> error| warning):(?<TEXT>.*)",
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-            ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         // Matches and extracts filename and location from an 'origin' element.
         private static readonly Lazy<Regex> s_filenameLocationFromOrigin = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 "^" // Beginning of line
                 + @"(\d+>)?" // Optional ddd> project number prefix
                 + "(?<FILENAME>.*)" // Match anything.
@@ -92,47 +87,39 @@ internal static class CanonicalError
                 + @"(?<LOCATION>[\,,0-9,-]*)" // Match any combination of numbers and ',' and '-'
                 + @"\)\s*" // Find the closing paren then any amount of spaces.
                 + "$", // End-of-line
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         // Matches location that is a simple number.
         private static readonly Lazy<Regex> s_lineFromLocation = new Lazy<Regex>(
-            () => new Regex // Example: line
-                (
+            () => new Regex( // Example: line
                 "^" // Beginning of line
                 + "(?<LINE>[0-9]*)" // Match any number.
                 + "$", // End-of-line
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         // Matches location that is a range of lines.
         private static readonly Lazy<Regex> s_lineLineFromLocation = new Lazy<Regex>(
-            () => new Regex // Example: line-line
-                (
+            () => new Regex( // Example: line-line
                 "^" // Beginning of line
                 + "(?<LINE>[0-9]*)" // Match any number.
                 + "-" // Dash
                 + "(?<ENDLINE>[0-9]*)" // Match any number.
                 + "$", // End-of-line
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         // Matches location that is a line and column
         private static readonly Lazy<Regex> s_lineColFromLocation = new Lazy<Regex>(
-            () => new Regex // Example: line,col
-                (
+            () => new Regex( // Example: line,col
                 "^" // Beginning of line
                 + "(?<LINE>[0-9]*)" // Match any number.
                 + "," // Comma
                 + "(?<COLUMN>[0-9]*)" // Match any number.
                 + "$", // End-of-line
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         // Matches location that is a line and column-range
         private static readonly Lazy<Regex> s_lineColColFromLocation = new Lazy<Regex>(
-            () => new Regex // Example: line,col-col
-                (
+            () => new Regex( // Example: line,col-col
                 "^" // Beginning of line
                 + "(?<LINE>[0-9]*)" // Match any number.
                 + "," // Comma
@@ -140,13 +127,11 @@ internal static class CanonicalError
                 + "-" // Dash
                 + "(?<ENDCOLUMN>[0-9]*)" // Match any number.
                 + "$", // End-of-line
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         // Matches location that is line,col,line,col
         private static readonly Lazy<Regex> s_lineColLineColFromLocation = new Lazy<Regex>(
-            () => new Regex // Example: line,col,line,col
-                (
+            () => new Regex( // Example: line,col,line,col
                 "^" // Beginning of line
                 + "(?<LINE>[0-9]*)" // Match any number.
                 + "," // Comma
@@ -156,8 +141,7 @@ internal static class CanonicalError
                 + "," // Dash
                 + "(?<ENDCOLUMN>[0-9]*)" // Match any number.
                 + "$", // End-of-line
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                ));
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         /// <summary>
         /// Represents the parts of a decomposed canonical message.
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 187dfa66066..61d8ea342e1 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -422,18 +422,25 @@ internal static void WriteIntForHandshake(this PipeStream stream, int value)
             stream.Write(bytes, 0, bytes.Length);
         }
 
-        internal static void ReadEndOfHandshakeSignal(this PipeStream stream, bool isProvider
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+        internal static void ReadEndOfHandshakeSignal(
+            this PipeStream stream,
+            bool isProvider
 #if NETCOREAPP2_1_OR_GREATER || MONO
             , int timeout
 #endif
             )
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         {
             // Accept only the first byte of the EndOfHandshakeSignal
-            int valueRead = stream.ReadIntForHandshake(null
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+            int valueRead = stream.ReadIntForHandshake(
+                byteToAccept: null
 #if NETCOREAPP2_1_OR_GREATER || MONO
             , timeout
 #endif
                 );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
             if (valueRead != EndOfHandshakeSignal)
             {
@@ -449,6 +456,7 @@ internal static void ReadEndOfHandshakeSignal(this PipeStream stream, bool isPro
             }
         }
 
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         /// <summary>
         /// Extension method to read a series of bytes from a stream.
         /// If specified, leading byte matches one in the supplied array if any, returns rejection byte and throws IOException.
@@ -458,6 +466,7 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce
             , int timeout
 #endif
             )
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         {
             byte[] bytes = new byte[4];
 
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 7b9017f4701..c59f6713cb2 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -206,11 +206,9 @@ internal static void VerifyThrowInternalRooted(string value)
         /// </summary>
         /// <param name="condition"></param>
         /// <param name="unformattedMessage"></param>
-        internal static void VerifyThrow
-        (
+        internal static void VerifyThrow(
             bool condition,
-            string unformattedMessage
-        )
+            string unformattedMessage)
         {
             if (!condition)
             {
@@ -226,12 +224,10 @@ string unformattedMessage
         /// <param name="condition"></param>
         /// <param name="unformattedMessage"></param>
         /// <param name="arg0"></param>
-        internal static void VerifyThrow
-        (
+        internal static void VerifyThrow(
             bool condition,
             string unformattedMessage,
-            object arg0
-        )
+            object arg0)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInternalError() method, because that method always
@@ -249,13 +245,11 @@ object arg0
         /// <param name="unformattedMessage"></param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void VerifyThrow
-        (
+        internal static void VerifyThrow(
             bool condition,
             string unformattedMessage,
             object arg0,
-            object arg1
-        )
+            object arg1)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInternalError() method, because that method always
@@ -274,14 +268,12 @@ object arg1
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
-        internal static void VerifyThrow
-        (
+        internal static void VerifyThrow(
             bool condition,
             string unformattedMessage,
             object arg0,
             object arg1,
-            object arg2
-        )
+            object arg2)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInternalError() method, because that method always
@@ -301,15 +293,13 @@ object arg2
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
         /// <param name="arg3"></param>
-        internal static void VerifyThrow
-        (
+        internal static void VerifyThrow(
             bool condition,
             string unformattedMessage,
             object arg0,
             object arg1,
             object arg2,
-            object arg3
-        )
+            object arg3)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInternalError() method, because that method always
@@ -345,11 +335,9 @@ internal static void ThrowInvalidOperation(string resourceName, params object[]
         /// </summary>
         /// <param name="condition"></param>
         /// <param name="resourceName"></param>
-        internal static void VerifyThrowInvalidOperation
-        (
+        internal static void VerifyThrowInvalidOperation(
             bool condition,
-            string resourceName
-        )
+            string resourceName)
         {
             if (!condition)
             {
@@ -365,12 +353,10 @@ string resourceName
         /// <param name="condition"></param>
         /// <param name="resourceName"></param>
         /// <param name="arg0"></param>
-        internal static void VerifyThrowInvalidOperation
-        (
+        internal static void VerifyThrowInvalidOperation(
             bool condition,
             string resourceName,
-            object arg0
-        )
+            object arg0)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidOperation() method, because that method always
@@ -388,13 +374,11 @@ object arg0
         /// <param name="resourceName"></param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void VerifyThrowInvalidOperation
-        (
+        internal static void VerifyThrowInvalidOperation(
             bool condition,
             string resourceName,
             object arg0,
-            object arg1
-        )
+            object arg1)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidOperation() method, because that method always
@@ -413,14 +397,12 @@ object arg1
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
-        internal static void VerifyThrowInvalidOperation
-        (
+        internal static void VerifyThrowInvalidOperation(
             bool condition,
             string resourceName,
             object arg0,
             object arg1,
-            object arg2
-        )
+            object arg2)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidOperation() method, because that method always
@@ -440,15 +422,13 @@ object arg2
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
         /// <param name="arg3"></param>
-        internal static void VerifyThrowInvalidOperation
-        (
+        internal static void VerifyThrowInvalidOperation(
             bool condition,
             string resourceName,
             object arg0,
             object arg1,
             object arg2,
-            object arg3
-        )
+            object arg3)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidOperation() method, because that method always
@@ -470,11 +450,9 @@ object arg3
         /// is expensive, because memory is allocated for the array of arguments -- do
         /// not call this method repeatedly in performance-critical scenarios
         /// </summary>
-        internal static void ThrowArgument
-        (
+        internal static void ThrowArgument(
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             ThrowArgument(null, resourceName, args);
         }
@@ -492,12 +470,10 @@ params object[] args
         /// <param name="innerException">Can be null.</param>
         /// <param name="resourceName"></param>
         /// <param name="args"></param>
-        internal static void ThrowArgument
-        (
+        internal static void ThrowArgument(
             Exception innerException,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
 #if DEBUG
             ResourceUtilities.VerifyResourceStringExists(resourceName);
@@ -514,11 +490,9 @@ params object[] args
         /// <remarks>This method is thread-safe.</remarks>
         /// <param name="condition"></param>
         /// <param name="resourceName"></param>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
-            string resourceName
-        )
+            string resourceName)
         {
             VerifyThrowArgument(condition, null, resourceName);
         }
@@ -530,12 +504,10 @@ string resourceName
         /// <param name="condition"></param>
         /// <param name="resourceName"></param>
         /// <param name="arg0"></param>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             string resourceName,
-            object arg0
-        )
+            object arg0)
         {
             VerifyThrowArgument(condition, null, resourceName, arg0);
         }
@@ -548,13 +520,11 @@ object arg0
         /// <param name="resourceName"></param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             string resourceName,
             object arg0,
-            object arg1
-        )
+            object arg1)
         {
             VerifyThrowArgument(condition, null, resourceName, arg0, arg1);
         }
@@ -563,14 +533,12 @@ object arg1
         /// Overload for three string format arguments.
         /// </summary>
         /// <remarks>This method is thread-safe.</remarks>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             string resourceName,
             object arg0,
             object arg1,
-            object arg2
-        )
+            object arg2)
         {
             VerifyThrowArgument(condition, null, resourceName, arg0, arg1, arg2);
         }
@@ -579,15 +547,13 @@ object arg2
         /// Overload for four string format arguments.
         /// </summary>
         /// <remarks>This method is thread-safe.</remarks>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             string resourceName,
             object arg0,
             object arg1,
             object arg2,
-            object arg3
-        )
+            object arg3)
         {
             VerifyThrowArgument(condition, null, resourceName, arg0, arg1, arg2, arg3);
         }
@@ -600,12 +566,10 @@ object arg3
         /// <param name="condition"></param>
         /// <param name="innerException">Can be null.</param>
         /// <param name="resourceName"></param>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             Exception innerException,
-            string resourceName
-        )
+            string resourceName)
         {
             if (!condition)
             {
@@ -623,13 +587,11 @@ string resourceName
         /// <param name="innerException"></param>
         /// <param name="resourceName"></param>
         /// <param name="arg0"></param>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             Exception innerException,
             string resourceName,
-            object arg0
-        )
+            object arg0)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowArgument() method, because that method always allocates
@@ -649,14 +611,12 @@ object arg0
         /// <param name="resourceName"></param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             Exception innerException,
             string resourceName,
             object arg0,
-            object arg1
-        )
+            object arg1)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowArgument() method, because that method always allocates
@@ -671,15 +631,13 @@ object arg1
         /// Overload for three string format arguments.
         /// </summary>
         /// <remarks>This method is thread-safe.</remarks>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             Exception innerException,
             string resourceName,
             object arg0,
             object arg1,
-            object arg2
-        )
+            object arg2)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowArgument() method, because that method always allocates
@@ -694,16 +652,14 @@ object arg2
         /// Overload for four string format arguments.
         /// </summary>
         /// <remarks>This method is thread-safe.</remarks>
-        internal static void VerifyThrowArgument
-        (
+        internal static void VerifyThrowArgument(
             bool condition,
             Exception innerException,
             string resourceName,
             object arg0,
             object arg1,
             object arg2,
-            object arg3
-        )
+            object arg3)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowArgument() method, because that method always allocates
diff --git a/src/Shared/EscapingUtilities.cs b/src/Shared/EscapingUtilities.cs
index d416c021d1f..909ba9d3966 100644
--- a/src/Shared/EscapingUtilities.cs
+++ b/src/Shared/EscapingUtilities.cs
@@ -102,8 +102,7 @@ internal static string UnescapeAll(string escapedString, bool trim = false)
                 if (
                         (indexOfPercent <= (escapedStringLength - 3)) &&
                         TryDecodeHexDigit(escapedString[indexOfPercent + 1], out int digit1) &&
-                        TryDecodeHexDigit(escapedString[indexOfPercent + 2], out int digit2)
-                    )
+                        TryDecodeHexDigit(escapedString[indexOfPercent + 2], out int digit2))
                 {
                     // First copy all the characters up to the current percent sign into
                     // the destination.
@@ -215,10 +214,8 @@ private static string EscapeWithOptionalCaching(string unescapedString, bool cac
         /// </summary>
         /// <param name="unescapedString"></param>
         /// <returns></returns>
-        private static bool ContainsReservedCharacters
-            (
-            string unescapedString
-            )
+        private static bool ContainsReservedCharacters(
+            string unescapedString)
         {
             return -1 != unescapedString.IndexOfAny(s_charsToEscape);
         }
diff --git a/src/Shared/EventArgsFormatting.cs b/src/Shared/EventArgsFormatting.cs
index ace6e1e8159..09f5c644d33 100644
--- a/src/Shared/EventArgsFormatting.cs
+++ b/src/Shared/EventArgsFormatting.cs
@@ -170,8 +170,7 @@ internal static string FormatEventMessage(BuildMessageEventArgs e, bool showProj
         /// <param name="endColumnNumber">end column number (0 if n/a)</param>
         /// <param name="threadId">thread id</param>
         /// <returns>The formatted message string.</returns>
-        internal static string FormatEventMessage
-        (
+        internal static string FormatEventMessage(
             string category,
             string subcategory,
             string message,
@@ -181,8 +180,7 @@ internal static string FormatEventMessage
             int endLineNumber,
             int columnNumber,
             int endColumnNumber,
-            int threadId
-        )
+            int threadId)
         {
             return FormatEventMessage(category, subcategory, message, code, file, null, lineNumber, endLineNumber, columnNumber, endColumnNumber, threadId, null);
         }
@@ -204,8 +202,7 @@ int threadId
         /// <param name="threadId">thread id</param>
         /// <param name="logOutputProperties">log output properties</param>
         /// <returns>The formatted message string.</returns>
-        internal static string FormatEventMessage
-        (
+        internal static string FormatEventMessage(
             string category,
             string subcategory,
             string message,
@@ -217,8 +214,7 @@ internal static string FormatEventMessage
             int columnNumber,
             int endColumnNumber,
             int threadId,
-            string logOutputProperties
-        )
+            string logOutputProperties)
         {
             // capacity is the longest possible path through the below
             // to avoid reallocating while constructing the string
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index 33aacd4b487..784f540a76d 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -216,8 +216,7 @@ internal static bool NotExpectedIoOrXmlException(Exception e)
             if
             (
                 IsXmlException(e)
-                || !NotExpectedException(e)
-            )
+                || !NotExpectedException(e))
             {
                 return false;
             }
@@ -251,9 +250,7 @@ internal static bool NotExpectedReflectionException(Exception e)
                 || e is TargetException                 // thrown when an attempt is made to invoke a non-static method on a null object.  This may occur because the caller does not
                                                         //     have access to the member, or because the target does not define the member, and so on.
                 || e is MissingFieldException           // thrown when code in a dependent assembly attempts to access a missing field in an assembly that was modified.
-                || !NotExpectedException(e)             // Reflection can throw IO exceptions if the assembly cannot be opened
-
-            )
+                || !NotExpectedException(e))             // Reflection can throw IO exceptions if the assembly cannot be opened
             {
                 return false;
             }
@@ -271,8 +268,7 @@ internal static bool NotExpectedSerializationException(Exception e)
             if
             (
                 e is SerializationException ||
-                !NotExpectedReflectionException(e)
-            )
+                !NotExpectedReflectionException(e))
             {
                 return false;
             }
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 63f42fba813..9d1bf800f4e 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -251,8 +251,8 @@ private static IReadOnlyList<string> GetAccessibleFilesAndDirectories(IFileSyste
                     return (ShouldEnforceMatching(pattern)
                         ? fileSystem.EnumerateFileSystemEntries(path, pattern)
                             .Where(o => IsFileNameMatch(o, pattern))
-                        : fileSystem.EnumerateFileSystemEntries(path, pattern)
-                        ).ToArray();
+                        : fileSystem.EnumerateFileSystemEntries(path, pattern))
+                        .ToArray();
                 }
                 // for OS security
                 catch (UnauthorizedAccessException)
@@ -291,8 +291,7 @@ private static bool ShouldEnforceMatching(string searchPattern)
             return searchPattern.IndexOf("?.", StringComparison.Ordinal) != -1 ||
                    (
                        Path.GetExtension(searchPattern).Length == (3 + 1 /* +1 for the period */) &&
-                       searchPattern.IndexOf('*') != -1
-                   ) ||
+                       searchPattern.IndexOf('*') != -1) ||
                    searchPattern.EndsWith("?", StringComparison.Ordinal);
         }
 
@@ -308,14 +307,12 @@ private static bool ShouldEnforceMatching(string searchPattern)
         /// <param name="stripProjectDirectory"></param>
         /// <param name="fileSystem">The file system abstraction to use that implements file system operations</param>
         /// <returns>Files that can be accessed.</returns>
-        private static IReadOnlyList<string> GetAccessibleFiles
-        (
+        private static IReadOnlyList<string> GetAccessibleFiles(
             IFileSystem fileSystem,
             string path,
             string filespec,     // can be null
             string projectDirectory,
-            bool stripProjectDirectory
-        )
+            bool stripProjectDirectory)
         {
             try
             {
@@ -376,12 +373,10 @@ bool stripProjectDirectory
         /// <param name="pattern">Pattern to match</param>
         /// <param name="fileSystem">The file system abstraction to use that implements file system operations</param>
         /// <returns>Accessible directories.</returns>
-        private static IReadOnlyList<string> GetAccessibleDirectories
-        (
+        private static IReadOnlyList<string> GetAccessibleDirectories(
             IFileSystem fileSystem,
             string path,
-            string pattern
-        )
+            string pattern)
         {
             try
             {
@@ -429,10 +424,8 @@ string pattern
         /// </summary>
         /// <param name="path">The short path.</param>
         /// <returns>The long path.</returns>
-        internal string GetLongPathName
-        (
-            string path
-        )
+        internal string GetLongPathName(
+            string path)
         {
             return GetLongPathName(path, _getFileSystemEntries);
         }
@@ -443,11 +436,9 @@ string path
         /// <param name="path">The short path.</param>
         /// <param name="getFileSystemEntries">Delegate.</param>
         /// <returns>The long path.</returns>
-        internal static string GetLongPathName
-        (
+        internal static string GetLongPathName(
             string path,
-            GetFileSystemEntries getFileSystemEntries
-        )
+            GetFileSystemEntries getFileSystemEntries)
         {
             if (path.IndexOf("~", StringComparison.Ordinal) == -1)
             {
@@ -555,13 +546,11 @@ internal void SplitFileSpec(
             out string wildcardDirectoryPart,
             out string filenamePart)
         {
-            PreprocessFileSpecForSplitting
-            (
+            PreprocessFileSpecForSplitting(
                 filespec,
                 out fixedDirectoryPart,
                 out wildcardDirectoryPart,
-                out filenamePart
-            );
+                out filenamePart);
 
             /*
              * Handle the special case in which filenamePart is '**'.
@@ -590,13 +579,11 @@ out filenamePart
         /// <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
         /// <param name="wildcardDirectoryPart">The wildcard directory part.</param>
         /// <param name="filenamePart">The filename part.</param>
-        private static void PreprocessFileSpecForSplitting
-        (
+        private static void PreprocessFileSpecForSplitting(
             string filespec,
             out string fixedDirectoryPart,
             out string wildcardDirectoryPart,
-            out string filenamePart
-        )
+            out string filenamePart)
         {
             filespec = FileUtilities.FixFilePath(filespec);
             int indexOfLastDirectorySeparator = filespec.LastIndexOfAny(directorySeparatorCharacters);
@@ -622,8 +609,7 @@ out string filenamePart
             if
             (
                 -1 == indexOfFirstWildcard
-                || indexOfFirstWildcard > indexOfLastDirectorySeparator
-            )
+                || indexOfFirstWildcard > indexOfLastDirectorySeparator)
             {
                 /*
                  * There is at least one dir separator, but either there is no wild card or the
@@ -682,10 +668,8 @@ out string filenamePart
         /// Removes the leading ".\" from all of the paths in the array.
         /// </summary>
         /// <param name="paths">Paths to remove .\ from.</param>
-        private static IEnumerable<string> RemoveInitialDotSlash
-        (
-            IEnumerable<string> paths
-        )
+        private static IEnumerable<string> RemoveInitialDotSlash(
+            IEnumerable<string> paths)
         {
             foreach (string path in paths)
             {
@@ -714,11 +698,9 @@ internal static bool IsDirectorySeparator(char c)
         /// </summary>
         /// <param name="paths">Paths to remove current directory from.</param>
         /// <param name="projectDirectory"></param>
-        internal static IEnumerable<string> RemoveProjectDirectory
-        (
+        internal static IEnumerable<string> RemoveProjectDirectory(
             IEnumerable<string> paths,
-            string projectDirectory
-        )
+            string projectDirectory)
         {
             bool directoryLastCharIsSeparator = IsDirectorySeparator(projectDirectory[projectDirectory.Length - 1]);
             foreach (string path in paths)
@@ -763,8 +745,7 @@ public FilesSearchData(
                 string filespec,                // can be null
                 string directoryPattern,        // can be null
                 Regex regexFileMatch,           // can be null
-                bool needsRecursion
-                )
+                bool needsRecursion)
             {
                 Filespec = filespec;
                 DirectoryPattern = directoryPattern;
@@ -1105,10 +1086,8 @@ private static bool MatchFileRecursionStep(RecursionState recursionState, string
             return recursionState.SearchData.RegexFileMatch.IsMatch(file);
         }
 
-        private static RecursiveStepResult GetFilesRecursiveStep
-        (
-            RecursionState recursionState
-        )
+        private static RecursiveStepResult GetFilesRecursiveStep(
+            RecursionState recursionState)
         {
             RecursiveStepResult ret = new RecursiveStepResult();
 
@@ -1198,12 +1177,10 @@ RecursionState recursionState
         /// <param name="wildcardDirectoryPart">The wildcard directory part.</param>
         /// <param name="filenamePart">The filename part.</param>
         /// <returns>The regular expression string.</returns>
-        internal static string RegularExpressionFromFileSpec
-        (
+        internal static string RegularExpressionFromFileSpec(
             string fixedDirectoryPart,
             string wildcardDirectoryPart,
-            string filenamePart
-        )
+            string filenamePart)
         {
 #if DEBUG
             ErrorUtilities.VerifyThrow(
@@ -1212,8 +1189,7 @@ string filenamePart
                 + FileSpecRegexParts.FilenameGroupStart.Length
                 + (FileSpecRegexParts.GroupEnd.Length * 2)
                 + FileSpecRegexParts.EndOfLine.Length,
-                "Checked-in length of known regex components differs from computed length. Update checked-in constant."
-            );
+                "Checked-in length of known regex components differs from computed length. Update checked-in constant.");
 #endif
             using (var matchFileExpression = new ReuseableStringBuilder(FileSpecRegexMinLength + NativeMethodsShared.MAX_PATH))
             {
@@ -1636,8 +1612,7 @@ internal static bool RawFileSpecIsValid(string filespec)
             if
             (
                 -1 != rightmostColon
-                && 1 != rightmostColon
-            )
+                && 1 != rightmostColon)
             {
                 return false;
             }
@@ -1858,24 +1833,20 @@ bool CompareIgnoreCase(ref ReadOnlySpan<char> input, int iIndex, int pIndex)
         /// <param name="filespec">The filespec.</param>
         /// <param name="fileToMatch">The candidate to match against.</param>
         /// <returns>The result class.</returns>
-        internal Result FileMatch
-        (
+        internal Result FileMatch(
             string filespec,
-            string fileToMatch
-        )
+            string fileToMatch)
         {
             Result matchResult = new Result();
 
             fileToMatch = GetLongPathName(fileToMatch, _getFileSystemEntries);
 
             Regex regexFileMatch;
-            GetFileSpecInfoWithRegexObject
-            (
+            GetFileSpecInfoWithRegexObject(
                 filespec,
                 out regexFileMatch,
                 out matchResult.isFileSpecRecursive,
-                out matchResult.isLegalFileSpec
-            );
+                out matchResult.isLegalFileSpec);
 
             if (matchResult.isLegalFileSpec)
             {
@@ -1940,12 +1911,10 @@ public TaskOptions(int maxTasks)
         /// <param name="filespecUnescaped">Get files that match the given file spec.</param>
         /// <param name="excludeSpecsUnescaped">Exclude files that match this file spec.</param>
         /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>
-        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles
-            (
+        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles(
             string projectDirectoryUnescaped,
             string filespecUnescaped,
-            List<string> excludeSpecsUnescaped = null
-            )
+            List<string> excludeSpecsUnescaped = null)
         {
             // For performance. Short-circuit iff there is no wildcard.
             if (!HasWildcards(filespecUnescaped))
@@ -2090,15 +2059,13 @@ private SearchAction GetFileSearchData(
             stripProjectDirectory = false;
             result = new RecursionState();
 
-            GetFileSpecInfo
-            (
+            GetFileSpecInfo(
                 filespecUnescaped,
                 out string fixedDirectoryPart,
                 out string wildcardDirectoryPart,
                 out string filenamePart,
                 out bool needsRecursion,
-                out bool isLegalFileSpec
-            );
+                out bool isLegalFileSpec);
 
             /*
              * If the filespec is invalid, then just return now.
diff --git a/src/Shared/FileSystem/ManagedFileSystem.cs b/src/Shared/FileSystem/ManagedFileSystem.cs
index c36cc5dee1b..1aab02ca2fe 100644
--- a/src/Shared/FileSystem/ManagedFileSystem.cs
+++ b/src/Shared/FileSystem/ManagedFileSystem.cs
@@ -59,8 +59,7 @@ private static IEnumerable<string> HandleFileLoadException(
             Func<string, string, Microsoft.IO.SearchOption, IEnumerable<string>> enumerateFunctionDelegate,
             string path,
             string searchPattern,
-            Microsoft.IO.SearchOption searchOption
-        )
+            Microsoft.IO.SearchOption searchOption)
         {
             try
             {
@@ -89,8 +88,7 @@ public virtual IEnumerable<string> EnumerateFiles(string path, string searchPatt
                     (path, searchPattern, searchOption) => Microsoft.IO.Directory.EnumerateFiles(path, searchPattern, searchOption),
                     path,
                     searchPattern,
-                    (Microsoft.IO.SearchOption)searchOption
-                )
+                    (Microsoft.IO.SearchOption)searchOption)
                 : Directory.EnumerateFiles(path, searchPattern, searchOption);
 #else
             return Directory.EnumerateFiles(path, searchPattern, searchOption);
@@ -105,8 +103,7 @@ public virtual IEnumerable<string> EnumerateDirectories(string path, string sear
                     (path, searchPattern, searchOption) => Microsoft.IO.Directory.EnumerateDirectories(path, searchPattern, searchOption),
                     path,
                     searchPattern,
-                    (Microsoft.IO.SearchOption)searchOption
-                )
+                    (Microsoft.IO.SearchOption)searchOption)
                 : Directory.EnumerateDirectories(path, searchPattern, searchOption);
 #else
             return Directory.EnumerateDirectories(path, searchPattern, searchOption);
@@ -120,8 +117,7 @@ public virtual IEnumerable<string> EnumerateFileSystemEntries(string path, strin
                 ? HandleFileLoadException(
                     (path, searchPattern, searchOption) => Microsoft.IO.Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption),
                     path,
-                    searchPattern, (Microsoft.IO.SearchOption)searchOption
-                )
+                    searchPattern, (Microsoft.IO.SearchOption)searchOption)
                 : Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption);
 #else
             return Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption);
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index 10421dd5831..641c230b05d 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -764,14 +764,12 @@ private static bool CheckForFrameworkInstallation(string registryEntryToCheckIns
         /// <param name="getDirectories">Delegate to method that can return filesystem entries.</param>
         /// <param name="architecture">.NET framework architecture</param>
         /// <returns>Will return 'null' if there is no target frameworks on this machine.</returns>
-        internal static string FindDotNetFrameworkPath
-        (
+        internal static string FindDotNetFrameworkPath(
             string currentRuntimePath,
             string prefix,
             DirectoryExists directoryExists,
             GetDirectories getDirectories,
-            DotNetFrameworkArchitecture architecture
-        )
+            DotNetFrameworkArchitecture architecture)
         {
             if (!NativeMethodsShared.IsWindows)
             {
@@ -1115,8 +1113,7 @@ private static string GenerateReferenceAssemblyDirectory(string versionPrefix)
         /// <summary>
         /// Look for the given registry value under the given key.
         /// </summary>
-        private static string FindRegistryValueUnderKey
-        (
+        private static string FindRegistryValueUnderKey(
             string registryBaseKeyName,
             string registryKeyName,
             RegistryView registryView = RegistryView.Default)
@@ -1387,8 +1384,7 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi
                 // variables to null when that's what they are already.
                 if (NativeMethodsShared.IsWindows && !CheckForFrameworkInstallation(
                     this._dotNetFrameworkRegistryKey,
-                    this._dotNetFrameworkSetupRegistryInstalledName
-                    ))
+                    this._dotNetFrameworkSetupRegistryInstalledName))
                 {
                     return null;
                 }
@@ -1409,8 +1405,7 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi
                 if (this._hasMsBuild &&
                     generatedPathToDotNetFramework != null &&
                     (!FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, NativeMethodsShared.IsWindows ? "MSBuild.exe" : "mcs.exe")) &&
-                     !FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, "Microsoft.Build.dll")))
-                    )
+                     !FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, "Microsoft.Build.dll"))))
                 {
                     return null;
                 }
diff --git a/src/Shared/LanguageParser/CSharptokenEnumerator.cs b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
index 1aaeab269f2..868f724d39b 100644
--- a/src/Shared/LanguageParser/CSharptokenEnumerator.cs
+++ b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
@@ -167,8 +167,7 @@ internal override bool FindNextToken()
             (
                 // From 2.4.2 Identifiers: A '@' can be used to prefix an identifier so that a keyword can be used as an identifier.
                 _reader.CurrentCharacter == '@' ||
-                _reader.MatchNextIdentifierStart()
-            )
+                _reader.MatchNextIdentifierStart())
             {
                 if (_reader.CurrentCharacter == '@')
                 {
diff --git a/src/Shared/LanguageParser/StreamMappedString.cs b/src/Shared/LanguageParser/StreamMappedString.cs
index 0a9ababf94e..7084319cc58 100644
--- a/src/Shared/LanguageParser/StreamMappedString.cs
+++ b/src/Shared/LanguageParser/StreamMappedString.cs
@@ -107,27 +107,23 @@ private void RestartReader()
 
             if (_forceANSI)
             {
-                _reader = new StreamReader // HIGHCHAR: Falling back to ANSI for VB source files.
-                    (
+                _reader = new StreamReader( // HIGHCHAR: Falling back to ANSI for VB source files.
                     _binaryStream,
 #if FEATURE_ENCODING_DEFAULT
                     Encoding.Default,    // Default means ANSI. 
 #else
                     Encoding.ASCII,
 #endif
-                    false                // If the reader had been able to guess the encoding it would have done so already.
-                    );
+                    false);                // If the reader had been able to guess the encoding it would have done so already.
             }
             else
             {
                 Encoding utf8Encoding = new UTF8Encoding(false, true /* throw on illegal bytes */);
 
-                _reader = new StreamReader // HIGHCHAR: VB and C# source files are assumed to be UTF if there are no byte-order marks.
-                    (
+                _reader = new StreamReader( // HIGHCHAR: VB and C# source files are assumed to be UTF if there are no byte-order marks.
                         _binaryStream,
                         utf8Encoding,
-                        true            // Ask the reader to try to guess the file's encoding.
-                    );
+                        true);            // Ask the reader to try to guess the file's encoding.
             }
         }
 
diff --git a/src/Shared/LanguageParser/VisualBasictokenCharReader.cs b/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
index c7e57257ca4..9b9265ec46d 100644
--- a/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
@@ -44,8 +44,7 @@ internal bool SinkSeparatorCharacter()
                 || CurrentCharacter == '.'
                 || CurrentCharacter == ':'
                 || CurrentCharacter == '{'
-                || CurrentCharacter == '}'
-            )
+                || CurrentCharacter == '}')
             {
                 Skip();
                 return true;
@@ -63,8 +62,7 @@ internal bool SinkLineContinuationCharacter()
         {
             if
             (
-                CurrentCharacter == '_'
-            )
+                CurrentCharacter == '_')
             {
                 Skip();
                 return true;
diff --git a/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs b/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
index e4bc3513f06..558aacdbed5 100644
--- a/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
@@ -103,8 +103,7 @@ internal override bool FindNextToken()
                 //      Date is a keyword but,
                 //      [Date] is an identifier.
                 _reader.CurrentCharacter == '[' ||
-                _reader.MatchNextIdentifierStart()
-            )
+                _reader.MatchNextIdentifierStart())
             {
                 bool escapedIdentifier = false;
                 if (_reader.CurrentCharacter == '[')
diff --git a/src/Shared/LanguageParser/tokenChar.cs b/src/Shared/LanguageParser/tokenChar.cs
index 0e5ecf327e4..f721c63591e 100644
--- a/src/Shared/LanguageParser/tokenChar.cs
+++ b/src/Shared/LanguageParser/tokenChar.cs
@@ -44,8 +44,7 @@ internal static bool IsLetter(char c)
                     || cat == UnicodeCategory.TitlecaseLetter
                     || cat == UnicodeCategory.ModifierLetter
                     || cat == UnicodeCategory.OtherLetter
-                    || cat == UnicodeCategory.LetterNumber
-                )
+                    || cat == UnicodeCategory.LetterNumber)
             {
                 return true;
             }
@@ -64,8 +63,7 @@ internal static bool IsDecimalDigit(char c)
             // From 2.4.2 of the C# Language Specification
             // decimal-digit-character:
             if (
-                    cat == UnicodeCategory.DecimalDigitNumber
-                )
+                    cat == UnicodeCategory.DecimalDigitNumber)
             {
                 return true;
             }
@@ -85,8 +83,7 @@ internal static bool IsConnecting(char c)
             // connecting-character:
             if
             (
-                cat == UnicodeCategory.ConnectorPunctuation
-            )
+                cat == UnicodeCategory.ConnectorPunctuation)
             {
                 return true;
             }
@@ -106,8 +103,7 @@ internal static bool IsCombining(char c)
             // combining-character:
             if (
                     cat == UnicodeCategory.NonSpacingMark // Mn
-                    || cat == UnicodeCategory.SpacingCombiningMark  // Mc 
-                )
+                    || cat == UnicodeCategory.SpacingCombiningMark)  // Mc 
             {
                 return true;
             }
@@ -126,8 +122,7 @@ internal static bool IsFormatting(char c)
             // From 2.4.2 of the C# Language Specification
             // formatting-character:
             if (
-                    cat == UnicodeCategory.Format  // Cf
-                )
+                    cat == UnicodeCategory.Format)  // Cf
             {
                 return true;
             }
@@ -147,8 +142,7 @@ internal static bool IsHexDigit(char c)
             (
                 (c >= '0' && c <= '9')
                 || (c >= 'A' && c <= 'F')
-                || (c >= 'a' && c <= 'f')
-            )
+                || (c >= 'a' && c <= 'f'))
             {
                 return true;
             }
@@ -164,8 +158,7 @@ internal static bool IsOctalDigit(char c)
         {
             if
             (
-                c >= '0' && c <= '7'
-            )
+                c >= '0' && c <= '7')
             {
                 return true;
             }
diff --git a/src/Shared/LanguageParser/tokenCharReader.cs b/src/Shared/LanguageParser/tokenCharReader.cs
index ddd8b1d91a4..f49519bfefe 100644
--- a/src/Shared/LanguageParser/tokenCharReader.cs
+++ b/src/Shared/LanguageParser/tokenCharReader.cs
@@ -158,13 +158,10 @@ private bool Sink(string match, bool ignoreCase)
 
             if
             (
-                String.Equals
-                (
+                String.Equals(
                     match,
                     compare,
-                    (ignoreCase /* ignore case */) ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal
-                )
-            )
+                    (ignoreCase /* ignore case */) ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal))
             {
                 Skip(match.Length);
                 return true;
@@ -243,8 +240,7 @@ internal bool SinkIdentifierPart()
                     || TokenChar.IsDecimalDigit(CurrentCharacter)
                     || TokenChar.IsConnecting(CurrentCharacter)
                     || TokenChar.IsCombining(CurrentCharacter)
-                    || TokenChar.IsFormatting(CurrentCharacter)
-                )
+                    || TokenChar.IsFormatting(CurrentCharacter))
             {
                 Skip();
                 return true;
diff --git a/src/Shared/MetadataConversionUtilities.cs b/src/Shared/MetadataConversionUtilities.cs
index 5a3a4e02017..a74d570dd90 100644
--- a/src/Shared/MetadataConversionUtilities.cs
+++ b/src/Shared/MetadataConversionUtilities.cs
@@ -24,12 +24,10 @@ internal static class MetadataConversionUtilities
         /// <param name="itemMetadataName">The name of the metadata.</param>
         /// <param name="metadataFound">Receives true if the metadata was found, false otherwise.</param>
         /// <returns>The resulting boolean value.</returns>
-        internal static bool TryConvertItemMetadataToBool
-            (
+        internal static bool TryConvertItemMetadataToBool(
                 ITaskItem item,
                 string itemMetadataName,
-                out bool metadataFound
-            )
+                out bool metadataFound)
         {
             string metadataValue = item.GetMetadata(itemMetadataName);
             if (string.IsNullOrEmpty(metadataValue))
@@ -58,11 +56,9 @@ out bool metadataFound
         /// <param name="item">The item that contains the metadata.</param>
         /// <param name="itemMetadataName">The name of the metadata.</param>
         /// <returns>The resulting boolean value.</returns>
-        internal static bool TryConvertItemMetadataToBool
-            (
+        internal static bool TryConvertItemMetadataToBool(
                 ITaskItem item,
-                string itemMetadataName
-            )
+                string itemMetadataName)
         {
             bool metadataFound;
             return TryConvertItemMetadataToBool(item, itemMetadataName, out metadataFound);
diff --git a/src/Shared/Modifiers.cs b/src/Shared/Modifiers.cs
index 1b55a6eb8e3..caf2ef3634f 100644
--- a/src/Shared/Modifiers.cs
+++ b/src/Shared/Modifiers.cs
@@ -563,11 +563,9 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS
                             if (string.Equals(modifier, FileUtilities.ItemSpecModifiers.DefiningProjectDirectory, StringComparison.OrdinalIgnoreCase))
                             {
                                 // ItemSpecModifiers.Directory does not contain the root directory
-                                modifiedItemSpec = Path.Combine
-                                    (
+                                modifiedItemSpec = Path.Combine(
                                         GetItemSpecModifier(currentDirectory, definingProjectEscaped, null, ItemSpecModifiers.RootDir),
-                                        GetItemSpecModifier(currentDirectory, definingProjectEscaped, null, ItemSpecModifiers.Directory)
-                                    );
+                                        GetItemSpecModifier(currentDirectory, definingProjectEscaped, null, ItemSpecModifiers.Directory));
                             }
                             else
                             {
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 80da618a3f3..72a0dbd7cf9 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -226,8 +226,7 @@ internal void InternalConstruct(string pipeName = null)
                 security.AddAccessRule(rule);
                 security.SetOwner(identifier);
 
-                _pipeServer = new NamedPipeServerStream
-                    (
+                _pipeServer = new NamedPipeServerStream(
                     pipeName,
                     PipeDirection.InOut,
                     1, // Only allow one connection at a time.
@@ -240,14 +239,12 @@ internal void InternalConstruct(string pipeName = null)
                     PipeBufferSize, // Default input buffer
                     PipeBufferSize,  // Default output buffer
                     security,
-                    HandleInheritability.None
-                );
+                    HandleInheritability.None);
             }
             else
 #endif
             {
-                _pipeServer = new NamedPipeServerStream
-                    (
+                _pipeServer = new NamedPipeServerStream(
                     pipeName,
                     PipeDirection.InOut,
                     1, // Only allow one connection at a time.
@@ -258,8 +255,7 @@ internal void InternalConstruct(string pipeName = null)
 #endif
                     ,
                     PipeBufferSize, // Default input buffer
-                    PipeBufferSize  // Default output buffer
-                );
+                    PipeBufferSize);  // Default output buffer
             }
         }
 
@@ -403,11 +399,14 @@ private void PacketPumpProc()
                         int[] handshakeComponents = handshake.RetrieveHandshakeComponents();
                         for (int i = 0; i < handshakeComponents.Length; i++)
                         {
-                            int handshakePart = _pipeServer.ReadIntForHandshake(i == 0 ? (byte?)CommunicationsUtilities.handshakeVersion : null /* this will disconnect a < 16.8 host; it expects leading 00 or F5 or 06. 0x00 is a wildcard */
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+                            int handshakePart = _pipeServer.ReadIntForHandshake(
+                                byteToAccept: i == 0 ? (byte?)CommunicationsUtilities.handshakeVersion : null /* this will disconnect a < 16.8 host; it expects leading 00 or F5 or 06. 0x00 is a wildcard */
 #if NETCOREAPP2_1_OR_GREATER || MONO
                             , ClientConnectTimeout /* wait a long time for the handshake from this side */
 #endif
                             );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
                             if (handshakePart != handshakeComponents[i])
                             {
diff --git a/src/Shared/OutOfProcTaskHostTaskResult.cs b/src/Shared/OutOfProcTaskHostTaskResult.cs
index c08d6bb0c34..fdd855e2d84 100644
--- a/src/Shared/OutOfProcTaskHostTaskResult.cs
+++ b/src/Shared/OutOfProcTaskHostTaskResult.cs
@@ -67,13 +67,11 @@ internal OutOfProcTaskHostTaskResult(TaskCompleteType result, IDictionary<string
 
             if (exceptionMessage != null)
             {
-                ErrorUtilities.VerifyThrow
-                    (
+                ErrorUtilities.VerifyThrow(
                         result == TaskCompleteType.CrashedDuringInitialization ||
                         result == TaskCompleteType.CrashedDuringExecution ||
                         result == TaskCompleteType.CrashedAfterExecution,
-                        "If we have an exception message, the result type should be 'crashed' of some variety."
-                    );
+                        "If we have an exception message, the result type should be 'crashed' of some variety.");
             }
 
             if (exceptionMessageArgs?.Length > 0)
diff --git a/src/Shared/ProjectErrorUtilities.cs b/src/Shared/ProjectErrorUtilities.cs
index e44989600e0..11092101f9f 100644
--- a/src/Shared/ProjectErrorUtilities.cs
+++ b/src/Shared/ProjectErrorUtilities.cs
@@ -36,12 +36,10 @@ internal static class ProjectErrorUtilities
         /// <param name="condition">The condition to check.</param>
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
-        internal static void VerifyThrowInvalidProject
-        (
+        internal static void VerifyThrowInvalidProject(
             bool condition,
             IElementLocation elementLocation,
-            string resourceName
-        )
+            string resourceName)
         {
             VerifyThrowInvalidProject(condition, null, elementLocation, resourceName);
         }
@@ -52,12 +50,10 @@ string resourceName
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="arg0"></param>
-        internal static void ThrowInvalidProject<T1>
-        (
+        internal static void ThrowInvalidProject<T1>(
             IElementLocation elementLocation,
             string resourceName,
-            T1 arg0
-        )
+            T1 arg0)
         {
             ThrowInvalidProject(null, elementLocation, resourceName, arg0);
         }
@@ -69,13 +65,11 @@ T1 arg0
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="arg0"></param>
-        internal static void VerifyThrowInvalidProject<T1>
-        (
+        internal static void VerifyThrowInvalidProject<T1>(
             bool condition,
             IElementLocation elementLocation,
             string resourceName,
-            T1 arg0
-        )
+            T1 arg0)
         {
             VerifyThrowInvalidProject(condition, null, elementLocation, resourceName, arg0);
         }
@@ -87,13 +81,11 @@ T1 arg0
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void ThrowInvalidProject<T1, T2>
-        (
+        internal static void ThrowInvalidProject<T1, T2>(
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
-            T2 arg1
-        )
+            T2 arg1)
         {
             ThrowInvalidProject(null, elementLocation, resourceName, arg0, arg1);
         }
@@ -106,14 +98,12 @@ T2 arg1
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
-        internal static void ThrowInvalidProject<T1, T2, T3>
-        (
+        internal static void ThrowInvalidProject<T1, T2, T3>(
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
             T2 arg1,
-            T3 arg2
-        )
+            T3 arg2)
         {
             ThrowInvalidProject(null, elementLocation, resourceName, arg0, arg1, arg2);
         }
@@ -127,15 +117,13 @@ T3 arg2
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
         /// <param name="arg3"></param>
-        internal static void ThrowInvalidProject<T1, T2, T3, T4>
-        (
+        internal static void ThrowInvalidProject<T1, T2, T3, T4>(
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
             T2 arg1,
             T3 arg2,
-            T4 arg3
-        )
+            T4 arg3)
         {
             ThrowInvalidProject(null, elementLocation, resourceName, arg0, arg1, arg2, arg3);
         }
@@ -146,12 +134,10 @@ T4 arg3
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args"></param>
-        internal static void ThrowInvalidProject
-        (
+        internal static void ThrowInvalidProject(
             IElementLocation elementLocation,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             ThrowInvalidProject(null, elementLocation, resourceName, args);
         }
@@ -164,14 +150,12 @@ params object[] args
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void VerifyThrowInvalidProject<T1, T2>
-        (
+        internal static void VerifyThrowInvalidProject<T1, T2>(
             bool condition,
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
-            T2 arg1
-        )
+            T2 arg1)
         {
             VerifyThrowInvalidProject(condition, null, elementLocation, resourceName, arg0, arg1);
         }
@@ -185,15 +169,13 @@ T2 arg1
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
-        internal static void VerifyThrowInvalidProject<T1, T2, T3>
-        (
+        internal static void VerifyThrowInvalidProject<T1, T2, T3>(
             bool condition,
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
             T2 arg1,
-            T3 arg2
-        )
+            T3 arg2)
         {
             VerifyThrowInvalidProject(condition, null, elementLocation, resourceName, arg0, arg1, arg2);
         }
@@ -208,16 +190,14 @@ T3 arg2
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
         /// <param name="arg3"></param>
-        internal static void VerifyThrowInvalidProject<T1, T2, T3, T4>
-        (
+        internal static void VerifyThrowInvalidProject<T1, T2, T3, T4>(
             bool condition,
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
             T2 arg1,
             T3 arg2,
-            T4 arg3
-        )
+            T4 arg3)
         {
             VerifyThrowInvalidProject(condition, null, elementLocation, resourceName, arg0, arg1, arg2, arg3);
         }
@@ -232,13 +212,11 @@ T4 arg3
         /// error sub-category (can be null).</param>
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
-        internal static void VerifyThrowInvalidProject
-        (
+        internal static void VerifyThrowInvalidProject(
             bool condition,
             string errorSubCategoryResourceName,
             IElementLocation elementLocation,
-            string resourceName
-        )
+            string resourceName)
         {
             if (!condition)
             {
@@ -257,14 +235,12 @@ string resourceName
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="arg0"></param>
-        internal static void VerifyThrowInvalidProject<T1>
-        (
+        internal static void VerifyThrowInvalidProject<T1>(
             bool condition,
             string errorSubCategoryResourceName,
             IElementLocation elementLocation,
             string resourceName,
-            T1 arg0
-        )
+            T1 arg0)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidProject() method, because that method always
@@ -285,15 +261,13 @@ T1 arg0
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
-        internal static void VerifyThrowInvalidProject<T1, T2>
-        (
+        internal static void VerifyThrowInvalidProject<T1, T2>(
             bool condition,
             string errorSubCategoryResourceName,
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
-            T2 arg1
-        )
+            T2 arg1)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidProject() method, because that method always
@@ -315,16 +289,14 @@ T2 arg1
         /// <param name="arg0"></param>
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
-        internal static void VerifyThrowInvalidProject<T1, T2, T3>
-        (
+        internal static void VerifyThrowInvalidProject<T1, T2, T3>(
             bool condition,
             string errorSubCategoryResourceName,
             IElementLocation elementLocation,
             string resourceName,
             T1 arg0,
             T2 arg1,
-            T3 arg2
-        )
+            T3 arg2)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidProject() method, because that method always
@@ -347,8 +319,7 @@ T3 arg2
         /// <param name="arg1"></param>
         /// <param name="arg2"></param>
         /// <param name="arg3"></param>
-        internal static void VerifyThrowInvalidProject<T1, T2, T3, T4>
-        (
+        internal static void VerifyThrowInvalidProject<T1, T2, T3, T4>(
             bool condition,
             string errorSubCategoryResourceName,
             IElementLocation elementLocation,
@@ -356,8 +327,7 @@ internal static void VerifyThrowInvalidProject<T1, T2, T3, T4>
             T1 arg0,
             T2 arg1,
             T3 arg2,
-            T4 arg3
-        )
+            T4 arg3)
         {
             // PERF NOTE: check the condition here instead of pushing it into
             // the ThrowInvalidProject() method, because that method always
@@ -381,13 +351,11 @@ T4 arg3
         /// <param name="elementLocation">The <see cref="IElementLocation"/> of the element.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        private static void ThrowInvalidProject
-        (
+        private static void ThrowInvalidProject(
             string errorSubCategoryResourceName,
             IElementLocation elementLocation,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             ErrorUtilities.VerifyThrowInternalNull(elementLocation, nameof(elementLocation));
 #if DEBUG
diff --git a/src/Shared/ProjectFileErrorUtilities.cs b/src/Shared/ProjectFileErrorUtilities.cs
index 98d0bb9e49c..ec8f43d82c8 100644
--- a/src/Shared/ProjectFileErrorUtilities.cs
+++ b/src/Shared/ProjectFileErrorUtilities.cs
@@ -24,12 +24,10 @@ internal static class ProjectFileErrorUtilities
         /// <param name="projectFile">The invalid project file.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        internal static void ThrowInvalidProjectFile
-        (
+        internal static void ThrowInvalidProjectFile(
             BuildEventFileInfo projectFile,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             ThrowInvalidProjectFile(null, projectFile, resourceName, args);
         }
@@ -45,13 +43,11 @@ params object[] args
         /// <param name="innerException">Any inner exception. May be null.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        internal static void ThrowInvalidProjectFile
-        (
+        internal static void ThrowInvalidProjectFile(
             BuildEventFileInfo projectFile,
             Exception innerException,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             VerifyThrowInvalidProjectFile(false, null, projectFile, innerException, resourceName, args);
         }
@@ -67,13 +63,11 @@ params object[] args
         /// <param name="projectFile">The invalid project file.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        internal static void VerifyThrowInvalidProjectFile
-        (
+        internal static void VerifyThrowInvalidProjectFile(
             bool condition,
             BuildEventFileInfo projectFile,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             VerifyThrowInvalidProjectFile(condition, null, projectFile, resourceName, args);
         }
@@ -89,13 +83,11 @@ params object[] args
         /// <param name="projectFile">The invalid project file.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        internal static void ThrowInvalidProjectFile
-        (
+        internal static void ThrowInvalidProjectFile(
             string errorSubCategoryResourceName,
             BuildEventFileInfo projectFile,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             VerifyThrowInvalidProjectFile(false, errorSubCategoryResourceName, projectFile, null, resourceName, args);
         }
@@ -112,14 +104,12 @@ params object[] args
         /// <param name="projectFile">The invalid project file.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        internal static void VerifyThrowInvalidProjectFile
-        (
+        internal static void VerifyThrowInvalidProjectFile(
             bool condition,
             string errorSubCategoryResourceName,
             BuildEventFileInfo projectFile,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             VerifyThrowInvalidProjectFile(condition, errorSubCategoryResourceName, projectFile, null, resourceName, args);
         }
@@ -137,15 +127,13 @@ params object[] args
         /// <param name="innerException">The inner <see cref="Exception"/>.</param>
         /// <param name="resourceName">The resource string for the error message.</param>
         /// <param name="args">Extra arguments for formatting the error message.</param>
-        internal static void VerifyThrowInvalidProjectFile
-        (
+        internal static void VerifyThrowInvalidProjectFile(
             bool condition,
             string errorSubCategoryResourceName,
             BuildEventFileInfo projectFile,
             Exception innerException,
             string resourceName,
-            params object[] args
-        )
+            params object[] args)
         {
             ErrorUtilities.VerifyThrow(projectFile != null, "Must specify the invalid project file. If project file is not available, use VerifyThrowInvalidProject() and pass in the XML node instead.");
 
diff --git a/src/Shared/QuotingUtilities.cs b/src/Shared/QuotingUtilities.cs
index 72eca743bf6..a23c4eb7462 100644
--- a/src/Shared/QuotingUtilities.cs
+++ b/src/Shared/QuotingUtilities.cs
@@ -61,15 +61,13 @@ internal static class QuotingUtilities
         /// <param name="emptySplits">[out] a count of all pieces that were empty, and thus discarded, per remark (1) above</param>
         /// <param name="separator"></param>
         /// <returns>ArrayList of all the pieces the string was split into.</returns>
-        internal static List<string> SplitUnquoted
-        (
+        internal static List<string> SplitUnquoted(
             string input,
             int maxSplits,
             bool keepEmptySplits,
             bool unquote,
             out int emptySplits,
-            params char[] separator
-        )
+            params char[] separator)
         {
             ErrorUtilities.VerifyThrow(maxSplits >= 2, "There is no point calling this method for less than two splits.");
 
diff --git a/src/Shared/ResourceUtilities.cs b/src/Shared/ResourceUtilities.cs
index bf7fe3035c8..2dd189825b2 100644
--- a/src/Shared/ResourceUtilities.cs
+++ b/src/Shared/ResourceUtilities.cs
@@ -62,8 +62,7 @@ internal static string ExtractMessageCode(bool msbuildCodeOnly, string message,
                     message[i + 4] < '0' || message[i + 4] > '9' ||
                     message[i + 5] < '0' || message[i + 5] > '9' ||
                     message[i + 6] < '0' || message[i + 6] > '9' ||
-                    message[i + 7] != ':'
-                    )
+                    message[i + 7] != ':')
                 {
                     return message;
                 }
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 7037787b2fe..15b228e259b 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -141,8 +141,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
-        public TaskHostConfiguration
-            (
+        public TaskHostConfiguration(
                 int nodeId,
                 string startupDirectory,
                 IDictionary<string, string> buildProcessEnvironment,
@@ -162,8 +161,7 @@ public TaskHostConfiguration
                 Dictionary<string, string> globalParameters,
                 ICollection<string> warningsAsErrors,
                 ICollection<string> warningsNotAsErrors,
-                ICollection<string> warningsAsMessages
-            )
+                ICollection<string> warningsAsMessages)
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalLength(taskLocation, nameof(taskLocation));
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index f66497dc018..d619973ef23 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -42,15 +42,23 @@ internal static bool IsTaskClass(Type type, object unused)
         /// <summary>
         /// Creates an ITask instance and returns it.  
         /// </summary>
-        internal static ITask CreateTask(LoadedType loadedType, string taskName, string taskLocation, int taskLine, int taskColumn, LogError logError
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
+        internal static ITask CreateTask(
+            LoadedType loadedType,
+            string taskName,
+            string taskLocation,
+            int taskLine,
+            int taskColumn,
+            LogError logError,
 #if FEATURE_APPDOMAIN
-            , AppDomainSetup appDomainSetup
+            AppDomainSetup appDomainSetup,
 #endif
-            , bool isOutOfProc
+            bool isOutOfProc
 #if FEATURE_APPDOMAIN
             , out AppDomain taskAppDomain
 #endif
             )
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         {
 #if FEATURE_APPDOMAIN
             bool separateAppDomain = loadedType.HasLoadInSeparateAppDomainAttribute;
@@ -66,14 +74,12 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
                 {
                     if (!loadedType.IsMarshalByRef)
                     {
-                        logError
-                        (
+                        logError(
                             taskLocation,
                             taskLine,
                             taskColumn,
                             "TaskNotMarshalByRef",
-                            taskName
-                         );
+                            taskName);
 
                         return null;
                     }
@@ -135,15 +141,13 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
                     // to fail here.
                     if (taskType != loadedType.Type)
                     {
-                        logError
-                        (
+                        logError(
                         taskLocation,
                         taskLine,
                         taskColumn,
                         "ConflictingTaskAssembly",
                         loadedType.Assembly.AssemblyFile,
-                        loadedType.Type.GetTypeInfo().Assembly.Location
-                        );
+                        loadedType.Type.GetTypeInfo().Assembly.Location);
 
                         taskInstanceInOtherAppDomain = null;
                     }
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 32a10b29e7e..0cbfcfb85e5 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -303,15 +303,13 @@ public void LogMessage(MessageImportance importance, string message, params obje
                 return;
             }
 
-            BuildMessageEventArgs e = new BuildMessageEventArgs
-                (
+            BuildMessageEventArgs e = new BuildMessageEventArgs(
                     message,
                     helpKeyword: null,
                     senderName: TaskName,
                     importance,
                     DateTime.UtcNow,
-                    messageArgs
-                );
+                    messageArgs);
 
             // If BuildEngine is null, task attempted to log before it was set on it,
             // presumably in its constructor. This is not allowed, and all
@@ -348,8 +346,7 @@ public void LogMessage(MessageImportance importance, string message, params obje
         /// <param name="message">The message string.</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
-        public void LogMessage
-        (
+        public void LogMessage(
             string subcategory,
             string code,
             string helpKeyword,
@@ -360,8 +357,7 @@ public void LogMessage
             int endColumnNumber,
             MessageImportance importance,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
@@ -380,8 +376,7 @@ params object[] messageArgs
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
-            var e = new BuildMessageEventArgs
-                (
+            var e = new BuildMessageEventArgs(
                     subcategory,
                     code,
                     fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
@@ -394,8 +389,7 @@ params object[] messageArgs
                     TaskName,
                     importance,
                     DateTime.UtcNow,
-                    messageArgs
-                );
+                    messageArgs);
 
             BuildEngine.LogMessageEvent(e);
         }
@@ -415,8 +409,7 @@ params object[] messageArgs
         /// <param name="message">The message string.</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
-        public void LogCriticalMessage
-        (
+        public void LogCriticalMessage(
             string subcategory,
             string code,
             string helpKeyword,
@@ -426,8 +419,7 @@ public void LogCriticalMessage
             int endLineNumber,
             int endColumnNumber,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
@@ -441,8 +433,7 @@ params object[] messageArgs
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
-            var e = new CriticalBuildMessageEventArgs
-                (
+            var e = new CriticalBuildMessageEventArgs(
                     subcategory,
                     code,
                     fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
@@ -454,8 +445,7 @@ params object[] messageArgs
                     helpKeyword,
                     TaskName,
                     DateTime.UtcNow,
-                    messageArgs
-                );
+                    messageArgs);
 
             BuildEngine.LogMessageEvent(e);
         }
@@ -525,13 +515,11 @@ public void LogMessageFromResources(MessageImportance importance, string message
         /// <param name="helpKeyword">help keyword</param>
         /// <param name="projectFile">project name</param>
         /// <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
-        public void LogExternalProjectStarted
-        (
+        public void LogExternalProjectStarted(
             string message,
             string helpKeyword,
             string projectFile,
-            string targetNames
-        )
+            string targetNames)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             var eps = new ExternalProjectStartedEventArgs(message, helpKeyword, TaskName, projectFile, targetNames);
@@ -546,13 +534,11 @@ string targetNames
         /// <param name="helpKeyword">help keyword</param>
         /// <param name="projectFile">project name</param>
         /// <param name="succeeded">true indicates project built successfully</param>
-        public void LogExternalProjectFinished
-        (
+        public void LogExternalProjectFinished(
             string message,
             string helpKeyword,
             string projectFile,
-            bool succeeded
-        )
+            bool succeeded)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             var epf = new ExternalProjectFinishedEventArgs(message, helpKeyword, TaskName, projectFile, succeeded);
@@ -634,8 +620,7 @@ public void LogError(string message, params object[] messageArgs)
         /// <param name="message">The message string.</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
-        public void LogError
-        (
+        public void LogError(
             string subcategory,
             string errorCode,
             string helpKeyword,
@@ -645,8 +630,7 @@ public void LogError
             int endLineNumber,
             int endColumnNumber,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             LogError(subcategory, errorCode, helpKeyword, null, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, messageArgs);
         }
@@ -667,8 +651,7 @@ params object[] messageArgs
         /// <param name="helpLink">A link pointing to more information about the error.</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
-        public void LogError
-        (
+        public void LogError(
             string subcategory,
             string errorCode,
             string helpKeyword,
@@ -679,8 +662,7 @@ public void LogError
             int endLineNumber,
             int endColumnNumber,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
@@ -700,8 +682,7 @@ params object[] messageArgs
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
-            var e = new BuildErrorEventArgs
-                (
+            var e = new BuildErrorEventArgs(
                     subcategory,
                     errorCode,
                     fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
@@ -714,8 +695,7 @@ params object[] messageArgs
                     TaskName,
                     helpLink,
                     DateTime.UtcNow,
-                    messageArgs
-                );
+                    messageArgs);
             BuildEngine.LogErrorEvent(e);
 
             HasLoggedErrors = true;
@@ -748,8 +728,7 @@ public void LogErrorFromResources(string messageResourceName, params object[] me
         /// <param name="messageResourceName">The name of the string resource containing the error message.</param>
         /// <param name="messageArgs">Optional arguments for formatting the loaded string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>messageResourceName</c> is null.</exception>
-        public void LogErrorFromResources
-        (
+        public void LogErrorFromResources(
             string subcategoryResourceName,
             string errorCode,
             string helpKeyword,
@@ -759,8 +738,7 @@ public void LogErrorFromResources
             int endLineNumber,
             int endColumnNumber,
             string messageResourceName,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as the logging methods are thread safe and the rest does not modify
             // global state.
@@ -784,8 +762,7 @@ params object[] messageArgs
             ErrorUtilities.VerifyThrow(string.IsNullOrEmpty(messageCode), "Called LogErrorFromResources instead of LogErrorWithCodeFromResources, but message '" + throwAwayMessageBody + "' does have an error code '" + messageCode + "'");
 #endif
 
-            LogError
-            (
+            LogError(
                 subcategory,
                 errorCode,
                 helpKeyword,
@@ -794,8 +771,7 @@ params object[] messageArgs
                 columnNumber,
                 endLineNumber,
                 endColumnNumber,
-                FormatResourceString(messageResourceName, messageArgs)
-            );
+                FormatResourceString(messageResourceName, messageArgs));
         }
 
         /// <summary>
@@ -837,8 +813,7 @@ public void LogErrorWithCodeFromResources(string messageResourceName, params obj
         /// <param name="messageResourceName">The name of the string resource containing the error message.</param>
         /// <param name="messageArgs">Optional arguments for formatting the loaded string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>messageResourceName</c> is null.</exception>
-        public void LogErrorWithCodeFromResources
-        (
+        public void LogErrorWithCodeFromResources(
             string subcategoryResourceName,
             string file,
             int lineNumber,
@@ -846,8 +821,7 @@ public void LogErrorWithCodeFromResources
             int endLineNumber,
             int endColumnNumber,
             string messageResourceName,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as the logging methods are thread safe and the rest does not modify
             // global state.
@@ -869,8 +843,7 @@ params object[] messageArgs
                 helpKeyword = HelpKeywordPrefix + messageResourceName;
             }
 
-            LogError
-            (
+            LogError(
                 subcategory,
                 errorCode,
                 helpKeyword,
@@ -879,8 +852,7 @@ params object[] messageArgs
                 columnNumber,
                 endLineNumber,
                 endColumnNumber,
-                message
-            );
+                message);
         }
 
         /// <summary>
@@ -999,8 +971,7 @@ public void LogWarning(string message, params object[] messageArgs)
         /// <param name="message">The message string.</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
-        public void LogWarning
-        (
+        public void LogWarning(
             string subcategory,
             string warningCode,
             string helpKeyword,
@@ -1010,8 +981,7 @@ public void LogWarning
             int endLineNumber,
             int endColumnNumber,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             LogWarning(subcategory, warningCode, helpKeyword, null, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, messageArgs);
         }
@@ -1032,8 +1002,7 @@ params object[] messageArgs
         /// <param name="message">The message string.</param>
         /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
-        public void LogWarning
-        (
+        public void LogWarning(
             string subcategory,
             string warningCode,
             string helpKeyword,
@@ -1044,8 +1013,7 @@ public void LogWarning
             int endLineNumber,
             int endColumnNumber,
             string message,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
@@ -1070,8 +1038,7 @@ params object[] messageArgs
             // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)
             if (BuildEngine is IBuildEngine8 be8 && be8.ShouldTreatWarningAsError(warningCode))
             {
-                LogError
-                (
+                LogError(
                     subcategory: subcategory,
                     errorCode: warningCode,
                     helpKeyword: helpKeyword,
@@ -1082,13 +1049,11 @@ params object[] messageArgs
                     endLineNumber: endLineNumber,
                     endColumnNumber: endColumnNumber,
                     message: message,
-                    messageArgs: messageArgs
-                );
+                    messageArgs: messageArgs);
                 return;
             }
 
-            var e = new BuildWarningEventArgs
-                (
+            var e = new BuildWarningEventArgs(
                     subcategory,
                     warningCode,
                     fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
@@ -1101,8 +1066,7 @@ params object[] messageArgs
                     TaskName,
                     helpLink,
                     DateTime.UtcNow,
-                    messageArgs
-                );
+                    messageArgs);
 
             BuildEngine.LogWarningEvent(e);
         }
@@ -1134,8 +1098,7 @@ public void LogWarningFromResources(string messageResourceName, params object[]
         /// <param name="messageResourceName">The name of the string resource containing the warning message.</param>
         /// <param name="messageArgs">Optional arguments for formatting the loaded string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>messageResourceName</c> is null.</exception>
-        public void LogWarningFromResources
-        (
+        public void LogWarningFromResources(
             string subcategoryResourceName,
             string warningCode,
             string helpKeyword,
@@ -1145,8 +1108,7 @@ public void LogWarningFromResources
             int endLineNumber,
             int endColumnNumber,
             string messageResourceName,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as log methods are thread safe and the rest does not modify
             // global state.
@@ -1168,8 +1130,7 @@ params object[] messageArgs
             ErrorUtilities.VerifyThrow(string.IsNullOrEmpty(messageCode), "Called LogWarningFromResources instead of LogWarningWithCodeFromResources, but message '" + throwAwayMessageBody + "' does have an error code '" + messageCode + "'");
 #endif
 
-            LogWarning
-            (
+            LogWarning(
                 subcategory,
                 warningCode,
                 helpKeyword,
@@ -1178,8 +1139,7 @@ params object[] messageArgs
                 columnNumber,
                 endLineNumber,
                 endColumnNumber,
-                FormatResourceString(messageResourceName, messageArgs)
-            );
+                FormatResourceString(messageResourceName, messageArgs));
         }
 
         /// <summary>
@@ -1221,8 +1181,7 @@ public void LogWarningWithCodeFromResources(string messageResourceName, params o
         /// <param name="messageResourceName">The name of the string resource containing the warning message.</param>
         /// <param name="messageArgs">Optional arguments for formatting the loaded string.</param>
         /// <exception cref="ArgumentNullException">Thrown when <c>messageResourceName</c> is null.</exception>
-        public void LogWarningWithCodeFromResources
-        (
+        public void LogWarningWithCodeFromResources(
             string subcategoryResourceName,
             string file,
             int lineNumber,
@@ -1230,8 +1189,7 @@ public void LogWarningWithCodeFromResources
             int endLineNumber,
             int endColumnNumber,
             string messageResourceName,
-            params object[] messageArgs
-        )
+            params object[] messageArgs)
         {
             // No lock needed, as log methods are thread safe and the rest does not modify
             // global state.
@@ -1253,8 +1211,7 @@ params object[] messageArgs
                 helpKeyword = HelpKeywordPrefix + messageResourceName;
             }
 
-            LogWarning
-            (
+            LogWarning(
                 subcategory,
                 warningCode,
                 helpKeyword,
@@ -1263,8 +1220,7 @@ params object[] messageArgs
                 columnNumber,
                 endLineNumber,
                 endColumnNumber,
-                message
-            );
+                message);
         }
 
         /// <summary>
@@ -1412,8 +1368,7 @@ public bool LogMessageFromText(string lineOfText, MessageImportance messageImpor
                 {
                     case CanonicalError.Parts.Category.Error:
                         {
-                            LogError
-                            (
+                            LogError(
                                 messageParts.subcategory,
                                 messageParts.code,
                                 null,
@@ -1422,8 +1377,7 @@ public bool LogMessageFromText(string lineOfText, MessageImportance messageImpor
                                 messageParts.column,
                                 messageParts.endLine,
                                 messageParts.endColumn,
-                                messageParts.text
-                            );
+                                messageParts.text);
 
                             isError = true;
                             break;
@@ -1431,8 +1385,7 @@ public bool LogMessageFromText(string lineOfText, MessageImportance messageImpor
 
                     case CanonicalError.Parts.Category.Warning:
                         {
-                            LogWarning
-                            (
+                            LogWarning(
                                 messageParts.subcategory,
                                 messageParts.code,
                                 null,
@@ -1441,8 +1394,7 @@ public bool LogMessageFromText(string lineOfText, MessageImportance messageImpor
                                 messageParts.column,
                                 messageParts.endLine,
                                 messageParts.endColumn,
-                                messageParts.text
-                            );
+                                messageParts.text);
 
                             break;
                         }
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 5a1177fe081..1e226945859 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -117,12 +117,10 @@ public TaskParameter(object wrappedParameter)
             }
 
             // It's not null or invalid, so it should be a valid parameter type.
-            ErrorUtilities.VerifyThrow
-                (
+            ErrorUtilities.VerifyThrow(
                     TaskParameterTypeVerifier.IsValidInputParameter(wrappedParameterType) || TaskParameterTypeVerifier.IsValidOutputParameter(wrappedParameterType),
                     "How did we manage to get a task parameter of type {0} that isn't a valid parameter type?",
-                    wrappedParameterType
-                );
+                    wrappedParameterType);
 
             if (wrappedParameterType.IsArray)
             {
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 434e7923809..fe12eab9148 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -212,12 +212,10 @@ private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo as
         /// any) is unambiguous; otherwise, if there are multiple types with the same name in different namespaces, the first type
         /// found will be returned.
         /// </summary>
-        internal LoadedType Load
-        (
+        internal LoadedType Load(
             string typeName,
             AssemblyLoadInfo assembly,
-            bool useTaskHost = false
-        )
+            bool useTaskHost = false)
         {
             return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, useTaskHost);
         }
@@ -228,11 +226,9 @@ internal LoadedType Load
         /// found will be returned.
         /// </summary>
         /// <returns>The loaded type, or null if the type was not found.</returns>
-        internal LoadedType ReflectionOnlyLoad
-        (
+        internal LoadedType ReflectionOnlyLoad(
             string typeName,
-            AssemblyLoadInfo assembly
-        )
+            AssemblyLoadInfo assembly)
         {
             return GetLoadedType(s_cacheOfReflectionOnlyLoadedTypesByFilter, typeName, assembly, useTaskHost: false);
         }
diff --git a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
index f41ba598dd9..3f6bc6dd225 100644
--- a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
+++ b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
@@ -175,8 +175,7 @@ public void CompareTo()
                             if
                                 (
                                     a1.CompareBaseNameTo(a2) == 0   // Only check version if basenames match
-                                    && a1.Version != a2.Version
-                                )
+                                    && a1.Version != a2.Version)
                             {
                                 if (a1.Version == null)
                                 {
@@ -331,8 +330,7 @@ public void CreateAssemblyNameExtensionWithNoSimpleName()
                 Assert.Throws<FileLoadException>(() =>
                 {
                     AssemblyNameExtension extension = new AssemblyNameExtension("Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a", true);
-                }
-               );
+                });
             }
         }
 
@@ -350,8 +348,7 @@ public void CreateAssemblyNameExtensionWithNoSimpleName2()
                     AssemblyNameExtension extension = new AssemblyNameExtension("Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
                     AssemblyNameExtension extension2 = new AssemblyNameExtension("A, Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
                     extension2.PartialNameCompare(extension);
-                }
-                                                 );
+                });
             }
         }
 
diff --git a/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs b/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
index f609286317e..467d2c32185 100644
--- a/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
+++ b/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
@@ -47,8 +47,7 @@ public void Indexer_NotFound()
             {
                 var dictionary = new CopyOnWriteDictionary<object>();
                 object value = dictionary[string.Empty];
-            }
-           );
+            });
         }
         /// <summary>
         /// Find with the same key inserted using TryGetValue
diff --git a/src/Shared/UnitTests/ErrorUtilities_Tests.cs b/src/Shared/UnitTests/ErrorUtilities_Tests.cs
index d8d83d96d9e..9dacb6e34dd 100644
--- a/src/Shared/UnitTests/ErrorUtilities_Tests.cs
+++ b/src/Shared/UnitTests/ErrorUtilities_Tests.cs
@@ -77,8 +77,7 @@ public void VerifyThrowArgumentArraysSameLength1()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ErrorUtilities.VerifyThrowArgumentArraysSameLength(null, new string[1], string.Empty, string.Empty);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -87,8 +86,7 @@ public void VerifyThrowArgumentArraysSameLength2()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ErrorUtilities.VerifyThrowArgumentArraysSameLength(new string[1], null, string.Empty, string.Empty);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -97,8 +95,7 @@ public void VerifyThrowArgumentArraysSameLength3()
             Assert.Throws<ArgumentException>(() =>
             {
                 ErrorUtilities.VerifyThrowArgumentArraysSameLength(new string[1], new string[2], string.Empty, string.Empty);
-            }
-           );
+            });
         }
 
         [Fact]
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index 93c4eff6d19..586350dd789 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -612,39 +612,34 @@ private static IReadOnlyList<string> GetFileSystemEntries(FileMatcher.FileSystem
             if
             (
                 pattern == @"LONGDI~1"
-                && (@"D:\" == path || @"\\server\share\" == path || path.Length == 0)
-            )
+                && (@"D:\" == path || @"\\server\share\" == path || path.Length == 0))
             {
                 return new string[] { Path.Combine(path, "LongDirectoryName") };
             }
             else if
             (
                 pattern == @"LONGSU~1"
-                && (@"D:\LongDirectoryName" == path || @"\\server\share\LongDirectoryName" == path || @"LongDirectoryName" == path)
-            )
+                && (@"D:\LongDirectoryName" == path || @"\\server\share\LongDirectoryName" == path || @"LongDirectoryName" == path))
             {
                 return new string[] { Path.Combine(path, "LongSubDirectory") };
             }
             else if
             (
                 pattern == @"LONGFI~1.TXT"
-                && (@"D:\LongDirectoryName\LongSubDirectory" == path || @"\\server\share\LongDirectoryName\LongSubDirectory" == path || @"LongDirectoryName\LongSubDirectory" == path)
-            )
+                && (@"D:\LongDirectoryName\LongSubDirectory" == path || @"\\server\share\LongDirectoryName\LongSubDirectory" == path || @"LongDirectoryName\LongSubDirectory" == path))
             {
                 return new string[] { Path.Combine(path, "LongFileName.txt") };
             }
             else if
             (
                 pattern == @"pomegr~1"
-                && @"c:\apple\banana\tomato" == path
-            )
+                && @"c:\apple\banana\tomato" == path)
             {
                 return new string[] { Path.Combine(path, "pomegranate") };
             }
             else if
             (
-                @"c:\apple\banana\tomato\pomegranate\orange" == path
-            )
+                @"c:\apple\banana\tomato\pomegranate\orange" == path)
             {
                 // No files exist here. This is an empty directory.
                 return Array.Empty<string>();
@@ -787,8 +782,7 @@ public void NormalizeTest(string inputString, string expectedString)
         [Fact]
         public void BasicMatchDriver()
         {
-            MatchDriver
-            (
+            MatchDriver(
                 "Source" + Path.DirectorySeparatorChar + "**",
                 new string[]  // Files that exist and should match.
                 {
@@ -800,8 +794,7 @@ public void BasicMatchDriver()
                     "Destination" + Path.DirectorySeparatorChar + "Bart.txt",
                     "Destination" + Path.DirectorySeparatorChar + "Sub" + Path.DirectorySeparatorChar + "Homer.txt",
                 },
-                null
-            );
+                null);
         }
 
         /// <summary>
@@ -813,16 +806,14 @@ public void BasicMatchDriver()
         [Fact]
         public void Regress162390()
         {
-            MatchDriver
-            (
+            MatchDriver(
                 @"c:\?emp\foo.txt",
                 new string[] { @"c:\temp\foo.txt" },    // Should match
                 new string[] { @"c:\timp\foo.txt" },    // Shouldn't match
                 new string[]                            // Should not even consider.
                 {
                     @"c:\temp\sub\foo.txt"
-                }
-            );
+                });
         }
 
         /*
@@ -839,11 +830,9 @@ public void GetLongFileNameForShortLocalPath()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"D:\LONGDI~1\LONGSU~1\LONGFI~1.TXT",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"D:\LongDirectoryName\LongSubDirectory\LongFileName.txt", longPath);
         }
@@ -857,11 +846,9 @@ public void GetLongFileNameForShortLocalPath()
         [Fact]
         public void GetLongFileNameForLongLocalPath()
         {
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"D:\LongDirectoryName\LongSubDirectory\LongFileName.txt",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"D:\LongDirectoryName\LongSubDirectory\LongFileName.txt", longPath);
         }
@@ -880,11 +867,9 @@ public void GetLongFileNameForShortUncPath()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"\\server\share\LONGDI~1\LONGSU~1\LONGFI~1.TXT",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"\\server\share\LongDirectoryName\LongSubDirectory\LongFileName.txt", longPath);
         }
@@ -898,11 +883,9 @@ public void GetLongFileNameForShortUncPath()
         [Fact]
         public void GetLongFileNameForLongUncPath()
         {
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"\\server\share\LongDirectoryName\LongSubDirectory\LongFileName.txt",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"\\server\share\LongDirectoryName\LongSubDirectory\LongFileName.txt", longPath);
         }
@@ -921,11 +904,9 @@ public void GetLongFileNameForRelativePath()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"LONGDI~1\LONGSU~1\LONGFI~1.TXT",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"LongDirectoryName\LongSubDirectory\LongFileName.txt", longPath);
         }
@@ -944,11 +925,9 @@ public void GetLongFileNameForRelativePathPreservesTrailingSlash()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"LONGDI~1\LONGSU~1\",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"LongDirectoryName\LongSubDirectory\", longPath);
         }
@@ -967,11 +946,9 @@ public void GetLongFileNameForRelativePathPreservesExtraSlashes()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"LONGDI~1\\LONGSU~1\\",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"LongDirectoryName\\LongSubDirectory\\", longPath);
         }
@@ -990,11 +967,9 @@ public void GetLongFileNameForMixedLongAndShort()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"c:\apple\banana\tomato\pomegr~1\orange\",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"c:\apple\banana\tomato\pomegranate\orange\", longPath);
         }
@@ -1014,11 +989,9 @@ public void GetLongFileNameWherePartOfThePathDoesntExist()
                 return; // "Short names are for Windows only"
             }
 
-            string longPath = FileMatcher.GetLongPathName
-            (
+            string longPath = FileMatcher.GetLongPathName(
                 @"c:\apple\banana\tomato\pomegr~1\orange\chocol~1\vanila~1",
-                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries)
-            );
+                new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
 
             Assert.Equal(@"c:\apple\banana\tomato\pomegranate\orange\chocol~1\vanila~1", longPath);
         }
@@ -1152,50 +1125,38 @@ public void ParentWithoutSlash()
             // because we don't know whether foo is a file or folder.
 
             // Same for UNC
-            ValidateNoFileMatch
-                (
+            ValidateNoFileMatch(
                 "\\\\server\\c$\\Documents and Settings\\User\\**",
                 "\\\\server\\c$\\Documents and Settings\\User",
-                true
-                );
+                true);
         }
 
         [Fact]
         public void Unc()
         {
             // Check UNC functionality
-            ValidateFileMatch
-                (
+            ValidateFileMatch(
                 "\\\\server\\c$\\**\\*.cs",
                 "\\\\server\\c$\\Documents and Settings\\User\\Source.cs",
-                true
-                );
+                true);
 
-            ValidateNoFileMatch
-                (
+            ValidateNoFileMatch(
                 "\\\\server\\c$\\**\\*.cs",
                 "\\\\server\\c$\\Documents and Settings\\User\\Source.txt",
-                true
-                );
-            ValidateFileMatch
-                (
+                true);
+            ValidateFileMatch(
                 "\\\\**",
                 "\\\\server\\c$\\Documents and Settings\\User\\Source.cs",
-                true
-                );
-            ValidateFileMatch
-                (
+                true);
+            ValidateFileMatch(
                 "\\\\**\\*.*",
                 "\\\\server\\c$\\Documents and Settings\\User\\Source.cs",
-                true
-                );
+                true);
 
-            ValidateFileMatch
-                (
+            ValidateFileMatch(
                 "**",
                 "\\\\server\\c$\\Documents and Settings\\User\\Source.cs",
-                true
-                );
+                true);
         }
 
         [Fact]
@@ -1571,24 +1532,21 @@ public void RemoveProjectDirectory()
             {
                 @"src/a.cs",
                 @"src/a\b\b.cs",
-            }
-            )]
+            })]
         [InlineData(
             @"src/test/**/*.cs", // Include Pattern
             new string[] //  Matching files
             {
                 @"src/test/a.cs",
                 @"src/test/a\b\c.cs",
-            }
-            )]
+            })]
         [InlineData(
             @"src/test/**/a/b/**/*.cs", // Include Pattern
             new string[] //  Matching files
             {
                 @"src/test/dir\a\b\a.cs",
                 @"src/test/dir\a\b\c\a.cs",
-            }
-            )]
+            })]
         public void IncludePatternShouldNotPreserveUserSlashesInFixedDirPart(string include, string[] matching)
         {
             MatchDriver(include, null, matching, null, null, normalizeAllPaths: false, normalizeExpectedMatchingFiles: true);
@@ -1612,8 +1570,7 @@ public void IncludePatternShouldNotPreserveUserSlashesInFixedDirPart(string incl
                 @"bin\foo.cs",
                 @"bin\bar\foo.cs",
                 @"bin\bar\"
-            }
-            )]
+            })]
         [InlineData(
             @"**\*.cs", // Include Pattern
             new[] //  Exclude patterns
@@ -1634,8 +1591,7 @@ public void IncludePatternShouldNotPreserveUserSlashesInFixedDirPart(string incl
                 @"bin\foo.cs",
                 @"bin\bar\foo.cs",
                 @"bin\bar\"
-            }
-            )]
+            })]
         public void ExcludePattern(string include, string[] exclude, string[] matching, string[] nonMatching, string[] untouchable)
         {
             MatchDriver(include, exclude, matching, nonMatching, untouchable);
@@ -1662,8 +1618,7 @@ public void ExcludeSpecificFiles()
                     @"Program_old.cs",
                     @"Properties\AssemblyInfo_old.cs"
                 },
-                Array.Empty<string>()    // Non matching files that shouldn't be touched
-            );
+                Array.Empty<string>());    // Non matching files that shouldn't be touched
         }
 
         [Fact]
@@ -1695,8 +1650,7 @@ public void ExcludePatternAndSpecificFiles()
                     @"bin\foo.cs",
                     @"bin\bar\foo.cs",
                     @"bin\bar\"
-                }
-            );
+                });
         }
 
         [Theory]
@@ -1728,8 +1682,7 @@ public void ExcludePatternAndSpecificFiles()
             {
                 @"src\Common\Properties\",
                 @"src\Common\Properties\AssemblyInfo.cs",
-            }
-            )]
+            })]
         [InlineData(
             @"**\*.cs", // Include Pattern
             new[] // Exclude patterns
@@ -1758,8 +1711,7 @@ public void ExcludePatternAndSpecificFiles()
             new[] // Non matching files that shouldn't be touched
             {
                 @"src\Common\Properties\"
-            }
-        )]
+            })]
         [InlineData(
             @"src\**\proj\**\*.cs", // Include Pattern
             new[] // Exclude patterns
@@ -1789,8 +1741,7 @@ public void ExcludePatternAndSpecificFiles()
             },
             new string[] // Non matching files that shouldn't be touched
             {
-            }
-            )]
+            })]
         // patterns with excludes that ideally would prune entire recursive subtrees (files in pruned tree aren't touched at all) but the exclude pattern is too complex for that to work with the current logic
         public void ExcludeComplexPattern(string include, string[] exclude, string[] matching, string[] nonMatching, string[] untouchable)
         {
@@ -1806,8 +1757,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             "^(?<WILDCARDDIR>)(?<FILENAME>)$",
             false,
-            true
-        )]
+            true)]
         // ... anywhere is invalid
         [InlineData(
             @"...\foo",
@@ -1816,8 +1766,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             "",
             false,
-            false
-        )]
+            false)]
         // : not placed at second index is invalid
         [InlineData(
             "http://www.website.com",
@@ -1826,8 +1775,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             "",
             false,
-            false
-        )]
+            false)]
         // ** not alone in filename part is invalid
         [InlineData(
             "**foo",
@@ -1836,8 +1784,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "**foo",
             "",
             false,
-            false
-        )]
+            false)]
         // ** not alone in filename part is invalid
         [InlineData(
             "foo**",
@@ -1846,8 +1793,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "foo**",
             "",
             false,
-            false
-        )]
+            false)]
         // ** not alone between slashes in wildcard part is invalid
         [InlineData(
             @"**foo\bar",
@@ -1856,8 +1802,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "bar",
             "",
             false,
-            false
-        )]
+            false)]
         // .. placed after any ** is invalid
         [InlineData(
             @"**\..\bar",
@@ -1866,8 +1811,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "bar",
             "",
             false,
-            false
-        )]
+            false)]
         // Common wildcard characters in wildcard and filename part
         [InlineData(
             @"*fo?ba?\*fo?ba?",
@@ -1876,8 +1820,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "*fo?ba?",
             @"^(?<WILDCARDDIR>[^/\\]*fo.ba.[/\\]+)(?<FILENAME>[^/\\]*fo.ba.)$",
             true,
-            true
-        )]
+            true)]
         // Special case for ? and * when trailing . in filename part
         [InlineData(
             "?oo*.",
@@ -1886,8 +1829,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "?oo*.",
             @"^(?<WILDCARDDIR>)(?<FILENAME>[^\.].oo[^\.]*)$",
             false,
-            true
-        )]
+            true)]
         // Skip the .* portion of any *.* sequence in filename part
         [InlineData(
             "*.*foo*.*",
@@ -1896,8 +1838,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "*.*foo*.*",
             @"^(?<WILDCARDDIR>)(?<FILENAME>[^/\\]*foo[^/\\]*)$",
             false,
-            true
-        )]
+            true)]
         // Collapse successive directory separators
         [InlineData(
             @"\foo///bar\\\?foo///bar\\\foo",
@@ -1906,8 +1847,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "foo",
             @"^[/\\]+foo[/\\]+bar[/\\]+(?<WILDCARDDIR>.foo[/\\]+bar[/\\]+)(?<FILENAME>foo)$",
             true,
-            true
-        )]
+            true)]
         // Collapse successive relative separators
         [InlineData(
             @"\./.\foo/.\./bar\./.\?foo/.\./bar\./.\foo",
@@ -1916,8 +1856,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "foo",
             @"^[/\\]+foo[/\\]+bar[/\\]+(?<WILDCARDDIR>.foo[/\\]+bar[/\\]+)(?<FILENAME>foo)$",
             true,
-            true
-        )]
+            true)]
         // Collapse successive recursive operators
         [InlineData(
             @"foo\**/**\bar/**\**/foo\**/**\bar",
@@ -1926,8 +1865,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "bar",
             @"^foo[/\\]+(?<WILDCARDDIR>((.*/)|(.*\\)|())bar((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/))foo((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/)))(?<FILENAME>bar)$",
             true,
-            true
-        )]
+            true)]
         // Collapse all three cases combined
         [InlineData(
             @"foo\\\.///**\\\.///**\\\.///bar\\\.///**\\\.///**\\\.///foo\\\.///**\\\.///**\\\.///bar",
@@ -1936,8 +1874,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "bar",
             @"^foo[/\\]+(?<WILDCARDDIR>((.*/)|(.*\\)|())bar((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/))foo((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/)))(?<FILENAME>bar)$",
             true,
-            true
-        )]
+            true)]
         public void GetFileSpecInfoCommon(
             string filespec,
             string expectedFixedDirectoryPart,
@@ -1945,8 +1882,7 @@ public void GetFileSpecInfoCommon(
             string expectedFilenamePart,
             string expectedMatchFileExpression,
             bool expectedNeedsRecursion,
-            bool expectedIsLegalFileSpec
-        )
+            bool expectedIsLegalFileSpec)
         {
             if (NativeMethodsShared.IsUnixLike)
             {
@@ -1960,8 +1896,7 @@ bool expectedIsLegalFileSpec
                 expectedFilenamePart,
                 expectedMatchFileExpression,
                 expectedNeedsRecursion,
-                expectedIsLegalFileSpec
-            );
+                expectedIsLegalFileSpec);
         }
 
         [PlatformSpecific(TestPlatforms.Windows)]
@@ -1974,8 +1909,7 @@ bool expectedIsLegalFileSpec
             "$()+.[^{",
             @"^\$\(\)\+\.\[\^\{[/\\]+(?<WILDCARDDIR>.\$\(\)\+\.\[\^\{[/\\]+)(?<FILENAME>\$\(\)\+\.\[\^\{)$",
             true,
-            true
-        )]
+            true)]
         // Preserve UNC paths in fixed directory part
         [InlineData(
             @"\\\.\foo/bar",
@@ -1984,8 +1918,7 @@ bool expectedIsLegalFileSpec
             "bar",
             @"^\\\\foo[/\\]+(?<WILDCARDDIR>)(?<FILENAME>bar)$",
             false,
-            true
-        )]
+            true)]
         public void GetFileSpecInfoWindows(
             string filespec,
             string expectedFixedDirectoryPart,
@@ -1993,8 +1926,7 @@ public void GetFileSpecInfoWindows(
             string expectedFilenamePart,
             string expectedMatchFileExpression,
             bool expectedNeedsRecursion,
-            bool expectedIsLegalFileSpec
-        )
+            bool expectedIsLegalFileSpec)
         {
             TestGetFileSpecInfo(
                 filespec,
@@ -2003,8 +1935,7 @@ bool expectedIsLegalFileSpec
                 expectedFilenamePart,
                 expectedMatchFileExpression,
                 expectedNeedsRecursion,
-                expectedIsLegalFileSpec
-            );
+                expectedIsLegalFileSpec);
         }
 
         [PlatformSpecific(TestPlatforms.AnyUnix)]
@@ -2017,8 +1948,7 @@ bool expectedIsLegalFileSpec
             "$()+.[^{|",
             @"^\$\(\)\+\.\[\^\{\|[/\\]+(?<WILDCARDDIR>.\$\(\)\+\.\[\^\{\|[/\\]+)(?<FILENAME>\$\(\)\+\.\[\^\{\|)$",
             true,
-            true
-        )]
+            true)]
         // Collapse leading successive directory separators in fixed directory part
         [InlineData(
             @"\\\.\foo/bar",
@@ -2027,8 +1957,7 @@ bool expectedIsLegalFileSpec
             "bar",
             @"^[/\\]+foo[/\\]+(?<WILDCARDDIR>)(?<FILENAME>bar)$",
             false,
-            true
-        )]
+            true)]
         public void GetFileSpecInfoUnix(
             string filespec,
             string expectedFixedDirectoryPart,
@@ -2036,8 +1965,7 @@ public void GetFileSpecInfoUnix(
             string expectedFilenamePart,
             string expectedMatchFileExpression,
             bool expectedNeedsRecursion,
-            bool expectedIsLegalFileSpec
-        )
+            bool expectedIsLegalFileSpec)
         {
             TestGetFileSpecInfo(
                 filespec,
@@ -2046,8 +1974,7 @@ bool expectedIsLegalFileSpec
                 expectedFilenamePart,
                 expectedMatchFileExpression,
                 expectedNeedsRecursion,
-                expectedIsLegalFileSpec
-            );
+                expectedIsLegalFileSpec);
         }
 
         private void TestGetFileSpecInfo(
@@ -2057,8 +1984,7 @@ private void TestGetFileSpecInfo(
             string expectedFilenamePart,
             string expectedMatchFileExpression,
             bool expectedNeedsRecursion,
-            bool expectedIsLegalFileSpec
-        )
+            bool expectedIsLegalFileSpec)
         {
             FileMatcher.Default.GetFileSpecInfo(
                 filespec,
@@ -2066,8 +1992,7 @@ bool expectedIsLegalFileSpec
                 out string wildcardDirectoryPart,
                 out string filenamePart,
                 out bool needsRecursion,
-                out bool isLegalFileSpec
-            );
+                out bool isLegalFileSpec);
             string matchFileExpression = isLegalFileSpec
                 ? FileMatcher.RegularExpressionFromFileSpec(fixedDirectoryPart, wildcardDirectoryPart, filenamePart)
                 : string.Empty;
@@ -2125,12 +2050,10 @@ internal class MockFileSystem
             /// <param name="fileSet1">First set of files.</param>
             /// <param name="fileSet2">Second set of files.</param>
             /// <param name="fileSet3">Third set of files.</param>
-            internal MockFileSystem
-            (
+            internal MockFileSystem(
                 string[] fileSet1,
                 string[] fileSet2,
-                string[] fileSet3
-            )
+                string[] fileSet3)
             {
                 _fileSet1 = fileSet1;
                 _fileSet2 = fileSet2;
@@ -2193,8 +2116,7 @@ private int GetMatchingFiles(string[] candidates, string path, string pattern, I
                             if
                             (
                                 pattern == null ||
-                                String.Equals(pattern, "*.*", StringComparison.OrdinalIgnoreCase)
-                            )
+                                String.Equals(pattern, "*.*", StringComparison.OrdinalIgnoreCase))
                             {
                                 ++hits;
                                 files.Add(FileMatcher.Normalize(candidate));
@@ -2273,16 +2195,14 @@ private void GetMatchingDirectories(string[] candidates, string path, string pat
                                 if
                                 (
                                     String.Equals(pattern, "*.*", StringComparison.OrdinalIgnoreCase)
-                                    || pattern == null
-                                )
+                                    || pattern == null)
                                 {
                                     directories.Add(FileMatcher.Normalize(match));
                                 }
                                 else if    // Match patterns like ?emp
                                 (
                                     pattern.Substring(0, 1) == "?"
-                                    && pattern.Length == baseMatch.Length
-                                )
+                                    && pattern.Length == baseMatch.Length)
                                 {
                                     string tail = pattern.Substring(1);
                                     string baseMatchTail = baseMatch.Substring(1);
@@ -2473,13 +2393,11 @@ internal bool DirectoryExists(string path)
         /// <param name="matchingFiles">Files that exist and should be matched.</param>
         /// <param name="nonmatchingFiles">Files that exists and should not be matched.</param>
         /// <param name="untouchableFiles">Files that exist but should not be requested.</param>
-        private static void MatchDriver
-        (
+        private static void MatchDriver(
             string filespec,
             string[] matchingFiles,
             string[] nonmatchingFiles,
-            string[] untouchableFiles
-        )
+            string[] untouchableFiles)
         {
             MatchDriver(filespec, null, matchingFiles, nonmatchingFiles, untouchableFiles);
         }
@@ -2490,14 +2408,12 @@ string[] untouchableFiles
         ///
         /// To preserve current MSBuild behaviour, it only does so if the path is not rooted. Rooted paths do not support forward slashes (as observed on MSBuild 14.0.25420.1)
         /// </summary>
-        private static void MatchDriverWithDifferentSlashes
-            (
+        private static void MatchDriverWithDifferentSlashes(
             string filespec,
             string[] excludeFilespecs,
             string[] matchingFiles,
             string[] nonmatchingFiles,
-            string[] untouchableFiles
-            )
+            string[] untouchableFiles)
         {
             // tests should call this method with backward slashes
             Assert.DoesNotContain(filespec, "/");
@@ -2521,12 +2437,11 @@ private static void MatchDriver(string filespec, string[] excludeFilespecs, stri
 
             var fileMatcher = new FileMatcher(new FileSystemAdapter(mockFileSystem), mockFileSystem.GetAccessibleFileSystemEntries);
 
-            string[] files = fileMatcher.GetFiles
-            (
+            string[] files = fileMatcher.GetFiles(
                 String.Empty, /* we don't need project directory as we use mock filesystem */
                 filespec,
-                excludeFilespecs?.ToList()
-            ).FileList;
+                excludeFilespecs?.ToList())
+            .FileList;
 
             Func<string[], string[]> normalizeAllFunc = (paths => normalizeAllPaths ? paths.Select(MockFileSystem.Normalize).ToArray() : paths);
             Func<string[], string[]> normalizeMatching = (paths => normalizeExpectedMatchingFiles ? paths.Select(MockFileSystem.Normalize).ToArray() : paths);
@@ -2592,25 +2507,21 @@ private static IReadOnlyList<string> GetFileSystemEntriesLoopBack(FileMatcher.Fi
 
         private static FileMatcher loopBackFileMatcher = new FileMatcher(FileSystems.Default, GetFileSystemEntriesLoopBack);
 
-        private static void ValidateSplitFileSpec
-            (
+        private static void ValidateSplitFileSpec(
             string filespec,
             string expectedFixedDirectoryPart,
             string expectedWildcardDirectoryPart,
-            string expectedFilenamePart
-            )
+            string expectedFilenamePart)
         {
             string fixedDirectoryPart;
             string wildcardDirectoryPart;
             string filenamePart;
 
-            loopBackFileMatcher.SplitFileSpec
-            (
+            loopBackFileMatcher.SplitFileSpec(
                 filespec,
                 out fixedDirectoryPart,
                 out wildcardDirectoryPart,
-                out filenamePart
-            );
+                out filenamePart);
 
             expectedFixedDirectoryPart = FileUtilities.FixFilePath(expectedFixedDirectoryPart);
             expectedWildcardDirectoryPart = FileUtilities.FixFilePath(expectedWildcardDirectoryPart);
@@ -2620,8 +2531,7 @@ out filenamePart
                 (
                 expectedWildcardDirectoryPart != wildcardDirectoryPart
                 || expectedFixedDirectoryPart != fixedDirectoryPart
-                || expectedFilenamePart != filenamePart
-                )
+                || expectedFilenamePart != filenamePart)
             {
                 Console.WriteLine("Expect Fixed '{0}' got '{1}'", expectedFixedDirectoryPart, fixedDirectoryPart);
                 Console.WriteLine("Expect Wildcard '{0}' got '{1}'", expectedWildcardDirectoryPart, wildcardDirectoryPart);
@@ -2634,12 +2544,10 @@ out filenamePart
         * Given a pattern (filespec) and a candidate filename (fileToMatch). Verify that they
         * do indeed match.
         *************************************************************************************/
-        private static void ValidateFileMatch
-            (
+        private static void ValidateFileMatch(
             string filespec,
             string fileToMatch,
-            bool shouldBeRecursive
-            )
+            bool shouldBeRecursive)
         {
             ValidateFileMatch(filespec, fileToMatch, shouldBeRecursive, /* Simulate filesystem? */ true);
         }
@@ -2648,13 +2556,11 @@ bool shouldBeRecursive
         * Given a pattern (filespec) and a candidate filename (fileToMatch). Verify that they
         * do indeed match.
         *************************************************************************************/
-        private static void ValidateFileMatch
-            (
+        private static void ValidateFileMatch(
             string filespec,
             string fileToMatch,
             bool shouldBeRecursive,
-            bool fileSystemSimulation
-            )
+            bool fileSystemSimulation)
         {
             if (!IsFileMatchAssertIfIllegal(filespec, fileToMatch, shouldBeRecursive))
             {
@@ -2664,13 +2570,11 @@ bool fileSystemSimulation
             // Now, simulate a filesystem with only fileToMatch. Make sure the file exists that way.
             if (fileSystemSimulation)
             {
-                MatchDriver
-                (
+                MatchDriver(
                     filespec,
                     new string[] { fileToMatch },
                     null,
-                    null
-                );
+                    null);
             }
         }
 
@@ -2678,12 +2582,10 @@ bool fileSystemSimulation
         * Given a pattern (filespec) and a candidate filename (fileToMatch). Verify that they
         * DON'T match.
         *************************************************************************************/
-        private static void ValidateNoFileMatch
-            (
+        private static void ValidateNoFileMatch(
             string filespec,
             string fileToMatch,
-            bool shouldBeRecursive
-            )
+            bool shouldBeRecursive)
         {
             if (IsFileMatchAssertIfIllegal(filespec, fileToMatch, shouldBeRecursive))
             {
@@ -2691,33 +2593,27 @@ bool shouldBeRecursive
             }
 
             // Now, simulate a filesystem with only fileToMatch. Make sure the file doesn't exist that way.
-            MatchDriver
-            (
+            MatchDriver(
                 filespec,
                 null,
                 new string[] { fileToMatch },
-                null
-            );
+                null);
         }
 
         /*************************************************************************************
         * Verify that the given filespec is illegal.
         *************************************************************************************/
-        private static void ValidateIllegal
-            (
-            string filespec
-            )
+        private static void ValidateIllegal(
+            string filespec)
         {
             Regex regexFileMatch;
             bool needsRecursion;
             bool isLegalFileSpec;
-            loopBackFileMatcher.GetFileSpecInfoWithRegexObject
-            (
+            loopBackFileMatcher.GetFileSpecInfoWithRegexObject(
                 filespec,
                 out regexFileMatch,
                 out needsRecursion,
-                out isLegalFileSpec
-            );
+                out isLegalFileSpec);
 
             if (isLegalFileSpec)
             {
@@ -2726,24 +2622,20 @@ out isLegalFileSpec
 
             // Now, FileMatcher is supposed to take any legal file name and just return it immediately.
             // Let's see if it does.
-            MatchDriver
-            (
+            MatchDriver(
                 filespec,                        // Not legal.
                 new string[] { filespec },        // Should match
                 null,
-                null
-            );
+                null);
         }
         /*************************************************************************************
         * Given a pattern (filespec) and a candidate filename (fileToMatch) return true if
         * FileMatcher would say that they match.
         *************************************************************************************/
-        private static bool IsFileMatchAssertIfIllegal
-        (
+        private static bool IsFileMatchAssertIfIllegal(
             string filespec,
             string fileToMatch,
-            bool shouldBeRecursive
-        )
+            bool shouldBeRecursive)
         {
             FileMatcher.Result match = FileMatcher.Default.FileMatch(filespec, fileToMatch);
 
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index a33abfb1c22..1d8fb68fcdd 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -158,8 +158,7 @@ public void GetItemSpecModifierOnBadPath()
             Assert.Throws<InvalidOperationException>(() =>
             {
                 TestGetItemSpecModifierOnBadPath(Directory.GetCurrentDirectory());
-            }
-           );
+            });
         }
         /// <summary>
         /// Exercises FileUtilities.ItemSpecModifiers.GetItemSpecModifier on a bad path.
@@ -172,8 +171,7 @@ public void GetItemSpecModifierOnBadPath2()
             Assert.Throws<InvalidOperationException>(() =>
             {
                 TestGetItemSpecModifierOnBadPath(null);
-            }
-           );
+            });
         }
 
         private static void TestGetItemSpecModifierOnBadPath(string currentDirectory)
@@ -444,8 +442,7 @@ public void NormalizePathThatDoesntFitIntoMaxPath()
                 string fullPath = @"c:\aardvark\aardvark\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\a.cs";
 
                 Assert.Equal(fullPath, FileUtilities.NormalizePath(Path.Combine(currentDirectory, filePath)));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -465,8 +462,7 @@ public void NormalizePathNull()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 Assert.Null(FileUtilities.NormalizePath(null, null));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -475,8 +471,7 @@ public void NormalizePathEmpty()
             Assert.Throws<ArgumentException>(() =>
             {
                 Assert.Null(FileUtilities.NormalizePath(String.Empty));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -487,8 +482,7 @@ public void NormalizePathBadUNC1()
             Assert.Throws<ArgumentException>(() =>
             {
                 Assert.Null(FileUtilities.NormalizePath(@"\\"));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -499,8 +493,7 @@ public void NormalizePathBadUNC2()
             Assert.Throws<ArgumentException>(() =>
             {
                 Assert.Null(FileUtilities.NormalizePath(@"\\XXX\"));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -511,8 +504,7 @@ public void NormalizePathBadUNC3()
             Assert.Throws<ArgumentException>(() =>
             {
                 Assert.Equal(@"\\localhost", FileUtilities.NormalizePath(@"\\localhost"));
-            }
-           );
+            });
         }
 
         [Fact]
@@ -546,8 +538,7 @@ From Path.cs
                    // with this for security reasons.
                  * */
                 Assert.Null(FileUtilities.NormalizePath(@"\\?\globalroot\XXX"));
-            }
-           );
+            });
         }
 #endif
 
@@ -901,8 +892,7 @@ public void GenerateTempBatchFileWithBadExtension()
             Assert.Throws<IOException>(() =>
             {
                 FileUtilities.GetTemporaryFile("|");
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -917,8 +907,7 @@ public void GenerateTempBatchFileWithBadDirectory()
             Assert.Throws<IOException>(() =>
             {
                 FileUtilities.GetTemporaryFile("|", null, ".tmp");
-            }
-           );
+            });
         }
 
         [Fact]
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 7d54b8e7217..b4e6d3bdb2e 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -217,25 +217,21 @@ internal string Log
 
         public bool IsRunningMultipleNodes { get; set; }
 
-        public bool BuildProjectFile
-            (
+        public bool BuildProjectFile(
             string projectFileName,
             string[] targetNames,
             IDictionary globalPropertiesPassedIntoTask,
-            IDictionary targetOutputs
-            )
+            IDictionary targetOutputs)
         {
             return BuildProjectFile(projectFileName, targetNames, globalPropertiesPassedIntoTask, targetOutputs, null);
         }
 
-        public bool BuildProjectFile
-            (
+        public bool BuildProjectFile(
             string projectFileName,
             string[] targetNames,
             IDictionary globalPropertiesPassedIntoTask,
             IDictionary targetOutputs,
-            string toolsVersion
-            )
+            string toolsVersion)
         {
             var finalGlobalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
@@ -255,16 +251,14 @@ string toolsVersion
             return project.Build(targetNames, loggers);
         }
 
-        public bool BuildProjectFilesInParallel
-        (
+        public bool BuildProjectFilesInParallel(
             string[] projectFileNames,
             string[] targetNames,
             IDictionary[] globalProperties,
             IDictionary[] targetOutputsPerProject,
             string[] toolsVersion,
             bool useResultsCache,
-            bool unloadProjectsOnCompletion
-        )
+            bool unloadProjectsOnCompletion)
         {
             bool includeTargetOutputs = targetOutputsPerProject != null;
 
@@ -287,15 +281,13 @@ bool unloadProjectsOnCompletion
             return result.Result;
         }
 
-        public BuildEngineResult BuildProjectFilesInParallel
-        (
+        public BuildEngineResult BuildProjectFilesInParallel(
             string[] projectFileNames,
             string[] targetNames,
             IDictionary[] globalProperties,
             IList<string>[] undefineProperties,
             string[] toolsVersion,
-            bool returnTargetOutputs
-        )
+            bool returnTargetOutputs)
         {
             List<IDictionary<string, ITaskItem[]>> targetOutputsPerProject = null;
 
@@ -347,42 +339,32 @@ public void Reacquire()
         {
         }
 
-        public bool BuildProjectFile
-            (
-            string projectFileName
-            )
+        public bool BuildProjectFile(
+            string projectFileName)
         {
             return (_projectCollection.LoadProject(projectFileName)).Build();
         }
 
-        public bool BuildProjectFile
-            (
+        public bool BuildProjectFile(
             string projectFileName,
-            string[] targetNames
-            )
+            string[] targetNames)
         {
             return (_projectCollection.LoadProject(projectFileName)).Build(targetNames);
         }
 
-        public bool BuildProjectFile
-            (
+        public bool BuildProjectFile(
             string projectFileName,
-            string targetName
-            )
+            string targetName)
         {
             return (_projectCollection.LoadProject(projectFileName)).Build(targetName);
         }
 
-        public void UnregisterAllLoggers
-            (
-            )
+        public void UnregisterAllLoggers()
         {
             _projectCollection.UnregisterAllLoggers();
         }
 
-        public void UnloadAllProjects
-            (
-            )
+        public void UnloadAllProjects()
         {
             _projectCollection.UnloadAllProjects();
         }
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 960be527e74..aae82b20e2b 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -418,26 +418,22 @@ internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] ac
 
                         Assert.True(
                                 actualMetadataValue.Length > 0 || expectedMetadataValue.Length == 0,
-                                string.Format("Item '{0}' does not have expected metadata '{1}'.", actualItem.ItemSpec, metadataName)
-                            );
+                                string.Format("Item '{0}' does not have expected metadata '{1}'.", actualItem.ItemSpec, metadataName));
 
                         Assert.True(
                                 actualMetadataValue.Length == 0 || expectedMetadataValue.Length > 0,
-                                string.Format("Item '{0}' has unexpected metadata {1}={2}.", actualItem.ItemSpec, metadataName, actualMetadataValue)
-                            );
-
-                        Assert.Equal(
-                                expectedMetadataValue,
-                                actualMetadataValue
-                            // string.Format
-                            //    (
-                            //        "Item '{0}' has metadata {1}={2} instead of expected {1}={3}.",
-                            //        actualItem.ItemSpec,
-                            //        metadataName,
-                            //        actualMetadataValue,
-                            //        expectedMetadataValue
-                            //    )
-                            );
+                                string.Format("Item '{0}' has unexpected metadata {1}={2}.", actualItem.ItemSpec, metadataName, actualMetadataValue));
+
+                        Assert.Equal(expectedMetadataValue, actualMetadataValue);
+
+                        // string.Format
+                        //    (
+                        //        "Item '{0}' has metadata {1}={2} instead of expected {1}={3}.",
+                        //        actualItem.ItemSpec,
+                        //        metadataName,
+                        //        actualMetadataValue,
+                        //        expectedMetadataValue
+                        //    )
                     }
                 }
                 expectedItems.RemoveAt(expectedItemIndex);
@@ -710,23 +706,19 @@ internal static Project CreateInMemoryProject(ProjectCollection e, string xml, I
         /// </summary>
         /// <param name="logger">May be null</param>
         /// <param name="toolsVersion">May be null</param>
-        internal static Project CreateInMemoryProject
-            (
+        internal static Project CreateInMemoryProject(
             ProjectCollection projectCollection,
             string xml,
             ILogger logger /* May be null */,
-            string toolsVersion /* may be null */
-            )
+            string toolsVersion) /* may be null */
         {
             XmlReaderSettings readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
 
-            Project project = new Project
-                (
+            Project project = new Project(
                 XmlReader.Create(new StringReader(CleanupFileContents(xml)), readerSettings),
                 null,
                 toolsVersion,
-                projectCollection
-                );
+                projectCollection);
 
             Guid guid = Guid.NewGuid();
             project.FullPath = Path.Combine(TempProjectDir, "Temporary" + guid.ToString("N") + ".csproj");
@@ -746,22 +738,18 @@ string toolsVersion /* may be null */
         /// </summary>
         /// <param name="projectContents"></param>
         /// <returns></returns>
-        internal static MockLogger BuildProjectExpectSuccess
-            (
+        internal static MockLogger BuildProjectExpectSuccess(
             string projectContents,
-            ITestOutputHelper testOutputHelper = null
-            )
+            ITestOutputHelper testOutputHelper = null)
         {
             MockLogger logger = new MockLogger(testOutputHelper);
             BuildProjectExpectSuccess(projectContents, logger);
             return logger;
         }
 
-        internal static void BuildProjectExpectSuccess
-            (
+        internal static void BuildProjectExpectSuccess(
             string projectContents,
-            params ILogger[] loggers
-            )
+            params ILogger[] loggers)
         {
             Project project = CreateInMemoryProject(projectContents, logger: null); // logger is null so we take care of loggers ourselves
             project.Build(loggers).ShouldBeTrue();
@@ -773,10 +761,8 @@ params ILogger[] loggers
         /// </summary>
         /// <param name="projectContents"></param>
         /// <returns></returns>
-        internal static MockLogger BuildProjectExpectFailure
-            (
-            string projectContents
-            )
+        internal static MockLogger BuildProjectExpectFailure(
+            string projectContents)
         {
             MockLogger logger = new MockLogger();
             BuildProjectExpectFailure(projectContents, logger);
@@ -784,11 +770,9 @@ string projectContents
             return logger;
         }
 
-        internal static void BuildProjectExpectFailure
-            (
+        internal static void BuildProjectExpectFailure(
             string projectContents,
-            ILogger logger
-           )
+            ILogger logger)
         {
             Project project = CreateInMemoryProject(projectContents, logger);
 
@@ -802,11 +786,9 @@ ILogger logger
         /// </summary>
         /// <param name="project"></param>
         /// <param name="newExpectedProjectContents"></param>
-        internal static void CompareProjectContents
-            (
+        internal static void CompareProjectContents(
             Project project,
-            string newExpectedProjectContents
-            )
+            string newExpectedProjectContents)
         {
             // Get the new XML for the project, normalizing the whitespace.
             string newActualProjectContents = project.Xml.RawXml;
@@ -996,13 +978,11 @@ internal static Project LoadProjectFileInTempProjectDirectory(string projectFile
         /// <param name="additionalProperties">Can be null.</param>
         /// <param name="logger"></param>
         /// <returns></returns>
-        internal static bool BuildTempProjectFileWithTargets
-        (
+        internal static bool BuildTempProjectFileWithTargets(
             string projectFileRelativePath,
             string[] targets,
             IDictionary<string, string> globalProperties,
-            ILogger logger
-        )
+            ILogger logger)
         {
             // Build the default targets.
             List<ILogger> loggers = new List<ILogger>(1);
@@ -1663,8 +1643,7 @@ internal static TransientTestFile CreateProjectFile(
             int[] projectReferences = null,
             Dictionary<string, string[]> projectReferenceTargets = null,
             string defaultTargets = null,
-            string extraContent = null
-            )
+            string extraContent = null)
         {
             var sb = new StringBuilder(64);
 
@@ -1770,8 +1749,7 @@ internal static ProjectGraph CreateProjectGraph(
                 entryProjectFiles,
                 globalProperties ?? new Dictionary<string, string>(),
                 projectCollection ?? env.CreateProjectCollection()
-                    .Collection
-                );
+                    .Collection);
 
             string GetExtraContent(int projectNum)
             {
@@ -2211,8 +2189,7 @@ public override byte[] ReadFileAllBytes(string path)
             public override IEnumerable<string> EnumerateFiles(
                 string path,
                 string searchPattern = "*",
-                SearchOption searchOption = SearchOption.TopDirectoryOnly
-            )
+                SearchOption searchOption = SearchOption.TopDirectoryOnly)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
@@ -2222,8 +2199,7 @@ public override IEnumerable<string> EnumerateFiles(
             public override IEnumerable<string> EnumerateDirectories(
                 string path,
                 string searchPattern = "*",
-                SearchOption searchOption = SearchOption.TopDirectoryOnly
-            )
+                SearchOption searchOption = SearchOption.TopDirectoryOnly)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
@@ -2233,8 +2209,7 @@ public override IEnumerable<string> EnumerateDirectories(
             public override IEnumerable<string> EnumerateFileSystemEntries(
                 string path,
                 string searchPattern = "*",
-                SearchOption searchOption = SearchOption.TopDirectoryOnly
-            )
+                SearchOption searchOption = SearchOption.TopDirectoryOnly)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
diff --git a/src/Shared/XMakeAttributes.cs b/src/Shared/XMakeAttributes.cs
index 94cd21f7169..b01da7b8dc9 100644
--- a/src/Shared/XMakeAttributes.cs
+++ b/src/Shared/XMakeAttributes.cs
@@ -248,14 +248,11 @@ internal static bool TryMergeRuntimeValues(string runtimeA, string runtimeB, out
                 (
                  runtimeA.Equals(actualCurrentRuntime, StringComparison.OrdinalIgnoreCase) ||
                  runtimeA.Equals(MSBuildRuntimeValues.currentRuntime, StringComparison.OrdinalIgnoreCase) ||
-                 runtimeA.Equals(MSBuildRuntimeValues.any, StringComparison.OrdinalIgnoreCase)
-                ) &&
+                 runtimeA.Equals(MSBuildRuntimeValues.any, StringComparison.OrdinalIgnoreCase)) &&
                 (
                  runtimeB.Equals(actualCurrentRuntime, StringComparison.OrdinalIgnoreCase) ||
                  runtimeB.Equals(MSBuildRuntimeValues.currentRuntime, StringComparison.OrdinalIgnoreCase) ||
-                 runtimeB.Equals(MSBuildRuntimeValues.any, StringComparison.OrdinalIgnoreCase)
-                )
-               )
+                 runtimeB.Equals(MSBuildRuntimeValues.any, StringComparison.OrdinalIgnoreCase)))
             {
                 mergedRuntime = actualCurrentRuntime;
                 return true;
@@ -390,14 +387,11 @@ internal static bool TryMergeArchitectureValues(string architectureA, string arc
                 (
                  architectureA.Equals(currentArchitecture, StringComparison.OrdinalIgnoreCase) ||
                  architectureA.Equals(MSBuildArchitectureValues.currentArchitecture, StringComparison.OrdinalIgnoreCase) ||
-                 architectureA.Equals(MSBuildArchitectureValues.any, StringComparison.OrdinalIgnoreCase)
-                ) &&
+                 architectureA.Equals(MSBuildArchitectureValues.any, StringComparison.OrdinalIgnoreCase)) &&
                 (
                  architectureB.Equals(currentArchitecture, StringComparison.OrdinalIgnoreCase) ||
                  architectureB.Equals(MSBuildArchitectureValues.currentArchitecture, StringComparison.OrdinalIgnoreCase) ||
-                 architectureB.Equals(MSBuildArchitectureValues.any, StringComparison.OrdinalIgnoreCase)
-                )
-               )
+                 architectureB.Equals(MSBuildArchitectureValues.any, StringComparison.OrdinalIgnoreCase)))
             {
                 mergedArchitecture = currentArchitecture;
                 return true;
diff --git a/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
index 2f60c7dcd48..e0b11749f8f 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
@@ -50,13 +50,11 @@ public void Exists()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -93,8 +91,7 @@ public void BadAppconfigOldVersion()
 
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "    <runtime>\n" +
                     "<assemblyBinding xmlns='urn:schemas-microsoft-com:asm.v1'>\n" +
                     "<dependentAssembly>\n" +
@@ -102,8 +99,7 @@ public void BadAppconfigOldVersion()
                     "<bindingRedirect oldVersion='1.*' newVersion='2.0.0.0'/>\n" +
                     "</dependentAssembly>\n" +
                     "</assemblyBinding>\n" +
-                    "</runtime>\n"
-                );
+                    "</runtime>\n");
 
             try
             {
@@ -146,8 +142,7 @@ public void BadAppconfigNewVersion()
 
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "    <runtime>\n" +
                     "<assemblyBinding xmlns='urn:schemas-microsoft-com:asm.v1'>\n" +
                     "<dependentAssembly>\n" +
@@ -155,8 +150,7 @@ public void BadAppconfigNewVersion()
                     "<bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.*.0'/>\n" +
                     "</dependentAssembly>\n" +
                     "</assemblyBinding>\n" +
-                    "</runtime>\n"
-                );
+                    "</runtime>\n");
 
             try
             {
@@ -228,13 +222,11 @@ public void ExistsPromotedDependencyInTheBlackList()
                 };
 
                 // Construct the app.config.
-                appConfigFile = WriteAppConfig
-                    (
+                appConfigFile = WriteAppConfig(
                         "        <dependentAssembly>\n" +
                         "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                         "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                        "        </dependentAssembly>\n"
-                    );
+                        "        </dependentAssembly>\n");
 
                 // Now, pass feed resolved primary references into ResolveAssemblyReference.
                 ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -250,10 +242,8 @@ public void ExistsPromotedDependencyInTheBlackList()
 
                 Assert.True(succeeded);
                 Assert.Empty(t.ResolvedDependencyFiles);
-                engine.AssertLogDoesntContain
-                    (
-                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                    );
+                engine.AssertLogDoesntContain(
+                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
             }
             finally
             {
@@ -290,13 +280,11 @@ public void ExistsDifferentName()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='DontUnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -343,13 +331,11 @@ public void ExistsOldVersionRange()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-1.5.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -396,13 +382,11 @@ public void HighVersionDoesntExist()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='4.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -447,13 +431,11 @@ public void LowVersionDoesntExist()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-2.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
diff --git a/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs b/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
index df51e79f8f4..596aadc245b 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
@@ -185,8 +185,7 @@ public void VerifyEmptyPublicKeyspecificVersion()
             {
                 AssemblyNameExtension fusionName = new AssemblyNameExtension("System, PublicKeyToken=");
                 string path = GlobalAssemblyCache.GetLocation(fusionName, SystemProcessorArchitecture.None, getRuntimeVersion, new Version("2.0.50727"), false, new FileExists(MockFileExists), _getPathFromFusionName, _gacEnumerator, true);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -285,8 +284,7 @@ public void SystemRuntimeDepends_No_Build()
             // build mode
             t.FindDependencies = true;
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -303,9 +301,7 @@ public void SystemRuntimeDepends_No_Build()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
             Assert.Equal("false", t.DependsOnSystemRuntime, true); // "Expected no System.Runtime dependency found during build."
             Assert.Equal("false", t.DependsOnNETStandard, true); //                   "Expected no netstandard dependency found during build."
@@ -313,8 +309,7 @@ public void SystemRuntimeDepends_No_Build()
             // intelli build mode
             t.FindDependencies = false;
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -331,9 +326,7 @@ public void SystemRuntimeDepends_No_Build()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
             Assert.Equal("false", t.DependsOnSystemRuntime, true); // "Expected no System.Runtime dependency found during intellibuild."
             Assert.Equal("false", t.DependsOnNETStandard, true); //                   "Expected no netstandard dependency found during intellibuild."
@@ -361,8 +354,7 @@ public void SystemRuntimeDepends_Yes()
             t.FindDependencies = true;
 
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -379,17 +371,14 @@ public void SystemRuntimeDepends_Yes()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
             Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -406,9 +395,7 @@ public void SystemRuntimeDepends_Yes()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
             Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
         }
@@ -435,8 +422,7 @@ public void SystemRuntimeDepends_Yes_Indirect()
             t.FindDependencies = true;
 
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -453,17 +439,14 @@ public void SystemRuntimeDepends_Yes_Indirect()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
             Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -480,9 +463,7 @@ public void SystemRuntimeDepends_Yes_Indirect()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
             Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
         }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 63cf4070fa4..2f1df5c7f1e 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -2473,16 +2473,12 @@ public void Regress242970()
             // For {CandidateAssemblyFiles} we don't even want to see a comment logged for files with non-standard extensions.
             // This is because {CandidateAssemblyFiles} is very likely to contain non-assemblies and its best not to clutter
             // up the log.
-            engine.AssertLogDoesntContain
-            (
-                String.Format(".hiddenfile")
-            );
+            engine.AssertLogDoesntContain(
+                String.Format(".hiddenfile"));
 
             // ...but we do want to see a log entry for standard extensions, even if the base file name is empty.
-            engine.AssertLogContains
-            (
-                String.Format(@"NonUI\testDirectoryRoot\.dll")
-            );
+            engine.AssertLogContains(
+                String.Format(@"NonUI\testDirectoryRoot\.dll"));
         }
 
         /// <summary>
@@ -3198,10 +3194,8 @@ public void Regress444793()
             Assert.True(succeeded);
             engine.AssertLogDoesntContain("MSB4018");
 
-            engine.AssertLogContains
-            (
-                String.Format(AssemblyResources.GetString("General.MalformedAssemblyName"), "c:\\DoesntExist\\System.Xml.dll")
-            );
+            engine.AssertLogContains(
+                String.Format(AssemblyResources.GetString("General.MalformedAssemblyName"), "c:\\DoesntExist\\System.Xml.dll"));
         }
 
         /// <summary>
@@ -3222,10 +3216,8 @@ public void RawFileNameDoesntExist()
 
             bool succeeded = Execute(t);
             Assert.True(succeeded);
-            engine.AssertLogContains
-            (
-                String.Format(AssemblyResources.GetString("General.MalformedAssemblyName"), "c:\\DoesntExist\\System.Xml.dll")
-            );
+            engine.AssertLogContains(
+                String.Format(AssemblyResources.GetString("General.MalformedAssemblyName"), "c:\\DoesntExist\\System.Xml.dll"));
         }
 
         /// <summary>
@@ -4932,11 +4924,9 @@ public void Regress276548_AssemblyNameDifferentThanFusionName()
             {
                 new TaskItem("A")
             };
-            t.Assemblies[0].SetMetadata
-            (
+            t.Assemblies[0].SetMetadata(
                 "HintPath",
-                @"c:\MyNameMismatch\Foo.dll"
-            );
+                @"c:\MyNameMismatch\Foo.dll");
 
             t.SearchPaths = new string[]
             {
@@ -4968,11 +4958,9 @@ public void Regress314573_VeryLongPaths()
             {
                 new TaskItem("A")                    // Resolved by HintPath
             };
-            t.Assemblies[0].SetMetadata
-            (
+            t.Assemblies[0].SetMetadata(
                 "HintPath",
-                veryLongFile
-            );
+                veryLongFile);
 
             t.SearchPaths = new string[]
             {
@@ -5140,11 +5128,9 @@ public void Regress271273_BogusAppConfig()
                     };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-            (
+            string appConfigFile = WriteAppConfig(
                 "        <dependentAssembly\n" +        // Intentionally didn't close this XML tag.
-                "        </dependentAssembly>\n"
-            );
+                "        </dependentAssembly>\n");
 
             try
             {
@@ -5227,13 +5213,11 @@ public void Regress339786_CrossVersionsWithAppConfig()
             t.Assemblies[1].SetMetadata("HintPath", @"C:\Regress339786\FolderA\A.dll");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-            (
+            string appConfigFile = WriteAppConfig(
             "        <dependentAssembly>\n" +
             "            <assemblyIdentity name='C' PublicKeyToken='null' culture='neutral' />\n" +
             "            <bindingRedirect oldVersion='0.0.0.0-2.0.0.0' newVersion='2.0.0.0' />\n" +
-            "        </dependentAssembly>\n"
-            );
+            "        </dependentAssembly>\n");
             t.AppConfigFile = appConfigFile;
 
             try
@@ -5306,13 +5290,11 @@ public void Regress407623_RedistListDoesNotImplyPresenceInFrameworks()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='CrystalReports-Redist' >" +
                         "<File AssemblyName='CrystalReportsAssembly' Version='2.0.3600.0' PublicKeyToken='b03f5f7f11d50a3a' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='2.0.40824.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 t.InstalledAssemblyTables = new TaskItem[] { new TaskItem(redistFile) };
 
@@ -5392,13 +5374,11 @@ public void Regress435487_FxFileResolvedByHintPathShouldByCopyLocal()
 
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='MyFancy-Redist' >" +
                         "<File AssemblyName='Microsoft.Build.Engine' Version='0.0.0.0' PublicKeyToken='null' Culture='Neutral' FileVersion='2.0.40824.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 t.InstalledAssemblyTables = new TaskItem[] { new TaskItem(redistFile) };
 
@@ -5423,16 +5403,14 @@ public void PartialNameMatchingFromRedist()
 
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='MyFancy-Redist' >" +
                         // Simple name match where everything is the same except for version
                         "<File AssemblyName='A' Version='1.0.0.0' PublicKeyToken='a5d015c7d5a0b012' Culture='de-DE' FileVersion='2.0.40824.0' InGAC='true' />" +
                         "<File AssemblyName='A' Version='2.0.0.0' PublicKeyToken='a5d015c7d5a0b012' Culture='neutral' FileVersion='2.0.40824.0' InGAC='true' />" +
                         "<File AssemblyName='A' Version='3.0.0.0' PublicKeyToken='null' Culture='de-DE' FileVersion='2.0.40824.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyName v1 = new AssemblyName("A, Culture=de-DE, PublicKeyToken=a5d015c7d5a0b012, Version=1.0.0.0");
                 AssemblyName v2 = new AssemblyName("A, Culture=Neutral, PublicKeyToken=a5d015c7d5a0b012, Version=2.0.0.0");
@@ -5716,8 +5694,7 @@ public void RedistListGenerateBlackListNotFoundSubsetFiles()
                                                                                            new AssemblyTableInfo("c:\\AnotherRandomDirectory.xml", "TargetFrameworkDirectory")
                                                                                           },
                                                                                           whiteListErrors,
-                                                                                          whiteListErrorFileNames
-                                                                   );
+                                                                                          whiteListErrorFileNames);
 
                 // Since there were no white list expect the black list to return null
                 Assert.Empty(blackList); // "Expected to have no assemblies in the black list"
@@ -5741,11 +5718,9 @@ public void RedistListGenerateBlackListGarbageSubsetListFiles()
             string garbageSubsetFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     garbageSubsetFile,
-                    "RandomGarbage, i am a bad file with random goo rather than anything important"
-                 );
+                    "RandomGarbage, i am a bad file with random goo rather than anything important");
 
                 AssemblyTableInfo redistListInfo = new AssemblyTableInfo(redistFile, "TargetFrameworkDirectory");
                 AssemblyTableInfo subsetListInfo = new AssemblyTableInfo(garbageSubsetFile, "TargetFrameworkDirectory");
@@ -5979,11 +5954,9 @@ public void RedistListNoAssembliesinRedistList()
             File.WriteAllText(subsetListPath, _xmlOnlySubset);
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistListPath,
-                   "RANDOMBOOOOOGOOGOOG"
-                );
+                   "RANDOMBOOOOOGOOGOOG");
 
                 t.InstalledAssemblyTables = new ITaskItem[] { new TaskItem(redistListPath) };
                 t.IgnoreDefaultInstalledAssemblyTables = true;
@@ -6122,15 +6095,13 @@ public void RedistListGenerateBlackListGoodListsSubsetIsSuperSet()
             string goodSubsetFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     goodSubsetFile,
                   "<FileList Redist='Microsoft-Windows-CLRCoreComp' >" +
                        "<File AssemblyName='Microsoft.Build.Engine' Version='2.0.0.0' PublicKeyToken='b03f5f7f11d50a3a' Culture='Neutral' FileVersion='2.0.50727.208' InGAC='false' />" +
                        "<File AssemblyName='System.Xml' Version='2.0.0.0' PublicKeyToken='b03f5f7f11d50a3a' Culture='Neutral' FileVersion='2.0.50727.208' InGAC='true' />" +
                        "<File AssemblyName='System.Data' Version='2.0.0.0' PublicKeyToken='b03f5f7f11d50a3a' Culture='Neutral' FileVersion='2.0.50727.208' InGAC='true' />" +
-                  "</FileList >"
-                 );
+                  "</FileList >");
 
                 AssemblyTableInfo redistListInfo = new AssemblyTableInfo(redistFile, "TargetFrameworkDirectory");
                 AssemblyTableInfo subsetListInfo = new AssemblyTableInfo(goodSubsetFile, "TargetFrameworkDirectory");
@@ -6234,8 +6205,7 @@ public void SubsetListFinderNullFrameworkDirectory()
             {
                 SubsetListFinder finder = new SubsetListFinder(Array.Empty<string>());
                 finder.GetSubsetListPathsFromDisk(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test the case where the subsetsToSearchFor are passed in as null
@@ -6246,8 +6216,7 @@ public void SubsetListFinderNullSubsetToSearchFor()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 SubsetListFinder finder = new SubsetListFinder(null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Test the case where the subsetsToSearchFor are an empty array
@@ -7060,8 +7029,7 @@ public void TestProfileNameNull()
             {
                 ResolveAssemblyReference rar = new ResolveAssemblyReference();
                 rar.ProfileName = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an argument null exception when the ProfileFullFrameworkFolders is set to null
@@ -7073,8 +7041,7 @@ public void TestProfileFullFrameworkFoldersFoldersNull()
             {
                 ResolveAssemblyReference rar = new ResolveAssemblyReference();
                 rar.FullFrameworkFolders = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an argument null exception when the ProfileFullFrameworkAssemblyTables is set to null
@@ -7086,8 +7053,7 @@ public void TestProfileFullFrameworkAssemblyTablesNull()
             {
                 ResolveAssemblyReference rar = new ResolveAssemblyReference();
                 rar.FullFrameworkAssemblyTables = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify that setting a subset and a profile at the same time will cause an error to be logged and rar to return false
@@ -7381,8 +7347,7 @@ public void NullInstalledSubsetTables()
             {
                 ResolveAssemblyReference reference = new ResolveAssemblyReference();
                 reference.InstalledAssemblySubsetTables = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the case where the targetFrameworkSubsets are null
@@ -7394,8 +7359,7 @@ public void NullTargetFrameworkSubsets()
             {
                 ResolveAssemblyReference reference = new ResolveAssemblyReference();
                 reference.TargetFrameworkSubsets = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the case where the FulltargetFrameworkSubsetNames are null
@@ -7407,8 +7371,7 @@ public void NullFullTargetFrameworkSubsetNames()
             {
                 ResolveAssemblyReference reference = new ResolveAssemblyReference();
                 reference.FullTargetFrameworkSubsetNames = null;
-            }
-           );
+            });
         }
         /// <summary>
         /// Test the case where a non existent subset list path is used and no additional subsets are passed in.
@@ -7937,10 +7900,8 @@ public void Regress315619_TwoWeaklyNamedPrimariesIsInsoluble()
 
             Execute(t);
 
-            e.AssertLogContains
-            (
-                String.Format(AssemblyResources.GetString("ResolveAssemblyReference.ConflictUnsolvable"), @"MyAssembly, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null", "MyAssembly, Version=1.0.0.0, Culture=Neutral, PublicKeyToken=null")
-            );
+            e.AssertLogContains(
+                String.Format(AssemblyResources.GetString("ResolveAssemblyReference.ConflictUnsolvable"), @"MyAssembly, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null", "MyAssembly, Version=1.0.0.0, Culture=Neutral, PublicKeyToken=null"));
         }
 
         /// <summary>
@@ -7981,15 +7942,13 @@ public void ForwardRedistRoot()
 
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp' >" +
                         "<File IsRedistRoot='true' AssemblyName='MyRedistRootAssembly' Version='0.0.0.0' PublicKeyToken='null' Culture='Neutral' FileVersion='2.0.40824.0' InGAC='true'/>" +
                         "<File IsRedistRoot='false' AssemblyName='MyOtherAssembly' Version='0.0.0.0' PublicKeyToken='null' Culture='Neutral' FileVersion='2.0.40824.0' InGAC='true'/>" +
                         "<File AssemblyName='MyThirdAssembly' Version='0.0.0.0' PublicKeyToken='null' Culture='Neutral' FileVersion='2.0.40824.0' InGAC='true'/>" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 t.InstalledAssemblyTables = new TaskItem[] { new TaskItem(redistFile) };
 
@@ -8111,8 +8070,7 @@ public void VerifyGetSimpleNamesIsSorted()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
@@ -8121,8 +8079,7 @@ public void VerifyGetSimpleNamesIsSorted()
                         "<File AssemblyName='System' Version='100.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
                         "<File AssemblyName='System' Version='1.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
                         "<File AssemblyName='System' Version='2.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8158,13 +8115,11 @@ public void VerifyAssemblyInRedistListNonWindowsRedistName()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8188,13 +8143,11 @@ public void VerifyAssemblyInRedistListWindowsRedistName()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp-Something' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8218,13 +8171,11 @@ public void VerifyAssemblyInRedistListPartialMatches()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp-Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8260,13 +8211,11 @@ public void VerifyAssemblyInRedistListDiffVersion()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp-Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8291,13 +8240,11 @@ public void VerifyAssemblyInRedistListDiffPublicKey()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp-Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8322,13 +8269,11 @@ public void VerifyAssemblyInRedistListDiffCulture()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp-Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='FR-fr' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
@@ -8353,13 +8298,11 @@ public void VerifyAssemblyInRedistListDiffSimpleName()
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
                     "<FileList Redist='Microsoft-Windows-CLRCoreComp-Random' >" +
                         "<File AssemblyName='System' Version='10.0.0.0' PublicKeyToken='b77a5c561934e089' Culture='neutral' ProcessorArchitecture='MSIL' FileVersion='4.0.0.0' InGAC='true' />" +
-                    "</FileList >"
-                );
+                    "</FileList >");
 
                 AssemblyTableInfo tableInfo = new AssemblyTableInfo(redistFile, "DoesNotExist");
                 RedistList redist = RedistList.GetRedistList(new AssemblyTableInfo[] { tableInfo });
diff --git a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
index bd6f430d3e0..113b91848a1 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
@@ -55,13 +55,11 @@ public void Exists()
 
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -109,13 +107,11 @@ public void ExistsDifferentName()
             assemblyNames[0].SetMetadata("SpecificVersion", "false");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='DontUnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -164,13 +160,11 @@ public void ExistsOldVersionRange()
             assemblyNames[0].SetMetadata("SpecificVersion", "false");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-1.5.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -218,13 +212,11 @@ public void HighVersionDoesntExist()
             assemblyNames[0].SetMetadata("SpecificVersion", "false");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='4.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -272,13 +264,11 @@ public void LowVersionDoesntExist()
             assemblyNames[0].SetMetadata("SpecificVersion", "false");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-2.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index f8f34faa202..17223bb23f4 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -1051,8 +1051,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
 
             if
             (
-                String.Equals(path, @"c:\OldClrBug\MyFileLoadExceptionAssembly.dll", StringComparison.OrdinalIgnoreCase)
-            )
+                String.Equals(path, @"c:\OldClrBug\MyFileLoadExceptionAssembly.dll", StringComparison.OrdinalIgnoreCase))
             {
                 // An older LKG of the CLR could throw a FileLoadException if it doesn't recognize
                 // the assembly. We need to support this for dogfooding purposes.
@@ -1061,8 +1060,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
 
             if
             (
-                String.Equals(path, @"c:\Regress313086\mscorlib.dll", StringComparison.OrdinalIgnoreCase)
-            )
+                String.Equals(path, @"c:\Regress313086\mscorlib.dll", StringComparison.OrdinalIgnoreCase))
             {
                 // This is an mscorlib that returns null for its assembly name.
                 return null;
@@ -1070,8 +1068,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
 
             if
             (
-                String.Equals(path, Path.Combine(s_myVersion20Path, "BadImage.dll"), StringComparison.OrdinalIgnoreCase)
-            )
+                String.Equals(path, Path.Combine(s_myVersion20Path, "BadImage.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 throw new System.BadImageFormatException(@"The format of the file '" + Path.Combine(s_myVersion20Path, "BadImage.dll") + "' is invalid");
             }
@@ -1080,8 +1077,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
             (
                 String.Equals(path, Path.Combine(s_myProjectPath, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
                 || String.Equals(path, Path.Combine(s_myVersion20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
-                || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
-            )
+                || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 // This is an mscorlib.dll with no metadata.
                 return null;
@@ -1090,8 +1086,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
             if
             (
                 String.Equals(path, Path.Combine(s_myVersion20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
-                || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
-            )
+                || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 // This is an mscorlib.dll with no metadata.
                 return null;
@@ -1256,8 +1251,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
 
             if
             (
-                String.Equals(path, Path.Combine(s_myVersion20Path, "System.Data.dll"), StringComparison.OrdinalIgnoreCase)
-            )
+                String.Equals(path, Path.Combine(s_myVersion20Path, "System.Data.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 // Simulate a strongly named assembly.
                 return new AssemblyNameExtension(AssemblyRef.SystemData);
@@ -1792,14 +1786,12 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
         /// <param name="dependencies">Receives the list of dependencies.</param>
         /// <param name="scatterFiles">Receives the list of associated scatter files.</param>
         /// <param name="frameworkName">Receives the assembly framework name.</param>
-        internal static void GetAssemblyMetadata
-        (
+        internal static void GetAssemblyMetadata(
             string path,
             ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache,
             out AssemblyNameExtension[] dependencies,
             out string[] scatterFiles,
-            out FrameworkNameVersioning frameworkName
-        )
+            out FrameworkNameVersioning frameworkName)
         {
             dependencies = GetDependencies(path);
             scatterFiles = null;
@@ -1818,10 +1810,8 @@ out FrameworkNameVersioning frameworkName
         /// <summary>
         /// Cached implementation. Given an assembly name, crack it open and retrieve the TargetFrameworkAttribute
         /// </summary>
-        internal static FrameworkNameVersioning GetTargetFrameworkAttribute
-        (
-            string path
-        )
+        internal static FrameworkNameVersioning GetTargetFrameworkAttribute(
+            string path)
         {
             FrameworkNameVersioning frameworkName = null;
 
@@ -2095,8 +2085,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
             if
             (
                 String.Equals(path, Path.Combine(s_myVersion20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
-                || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
-            )
+                || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return Array.Empty<AssemblyNameExtension>();
             }
@@ -2611,16 +2600,14 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
                     || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v1.0\AssemblyFoldersEx\Infragistics.MyControlWithPastTargetNDPVersion.1.0", StringComparison.OrdinalIgnoreCase)
                     || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.x86chk\AssemblyFoldersEx\RawDropControls", StringComparison.OrdinalIgnoreCase)
                     || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\ZControlA", StringComparison.OrdinalIgnoreCase)
-                    || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\ZControlB", StringComparison.OrdinalIgnoreCase)
-                )
+                    || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\ZControlB", StringComparison.OrdinalIgnoreCase))
                 {
                     return Array.Empty<string>();
                 }
 
                 if
                 (
-                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0", StringComparison.OrdinalIgnoreCase)
-                )
+                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0", StringComparison.OrdinalIgnoreCase))
                 {
                     // This control has a service pack
                     return new string[] { "sp1", "sp2" };
@@ -2813,32 +2800,28 @@ private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string
                 (
                     String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithFutureTargetNDPVersion.1.0", StringComparison.OrdinalIgnoreCase)
                     || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithPastTargetNDPVersion.1.0", StringComparison.OrdinalIgnoreCase)
-                    || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0", StringComparison.OrdinalIgnoreCase)
-                )
+                    || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0", StringComparison.OrdinalIgnoreCase))
                 {
                     return s_myComponentsV20Path;
                 }
 
                 if
                 (
-                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0", StringComparison.OrdinalIgnoreCase)
-                )
+                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0", StringComparison.OrdinalIgnoreCase))
                 {
                     return @"C:\MyComponentBase";
                 }
 
                 if
                 (
-                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0\sp1", StringComparison.OrdinalIgnoreCase)
-                )
+                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0\sp1", StringComparison.OrdinalIgnoreCase))
                 {
                     return @"C:\MyComponentServicePack1";
                 }
 
                 if
                 (
-                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0\sp2", StringComparison.OrdinalIgnoreCase)
-                )
+                    String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyControlWithServicePack.1.0\sp2", StringComparison.OrdinalIgnoreCase))
                 {
                     return @"C:\MyComponentServicePack2";
                 }
@@ -2846,8 +2829,7 @@ private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string
                 if
                 (
                     String.Equals(subKey, @"Software\Microsoft\.NetFramework\v1.0\AssemblyFoldersEx\Infragistics.MyNDP1Control.1.0", StringComparison.OrdinalIgnoreCase)
-                    || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v1.0\AssemblyFoldersEx\Infragistics.MyControlWithPastTargetNDPVersion.1.0", StringComparison.OrdinalIgnoreCase)
-                )
+                    || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v1.0\AssemblyFoldersEx\Infragistics.MyControlWithPastTargetNDPVersion.1.0", StringComparison.OrdinalIgnoreCase))
                 {
                     return s_myComponentsV10Path;
                 }
@@ -3010,8 +2992,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                     t.FindSerializationAssemblies = false;
                     t.FindRelatedFiles = false;
                     t.StateFile = null;
-                    t.Execute
-                    (
+                    t.Execute(
                         fileExists,
                         directoryExists,
                         getDirectories,
@@ -3028,8 +3009,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
 #endif
                         checkIfAssemblyIsInGac,
                         isWinMDFile,
-                        readMachineTypeFromPEHeader
-                    );
+                        readMachineTypeFromPEHeader);
 
                     // A few checks. These should always be true or it may be a perf issue for project load.
                     ITaskItem[] loadModeResolvedFiles = Array.Empty<TaskItem>();
@@ -3072,8 +3052,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                     t.StateFile = cache;
                     File.Delete(t.StateFile);
                     succeeded =
-                        t.Execute
-                        (
+                        t.Execute(
                             fileExists,
                             directoryExists,
                             getDirectories,
@@ -3090,8 +3069,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
 #endif
                             checkIfAssemblyIsInGac,
                             isWinMDFile,
-                            readMachineTypeFromPEHeader
-                        );
+                            readMachineTypeFromPEHeader);
                     if (FileUtilities.FileExistsNoThrow(t.StateFile))
                     {
                         Assert.Single(t.FilesWritten);
@@ -3153,11 +3131,9 @@ internal void ExecuteRAROnItemsAndRedist(ResolveAssemblyReference t, MockEngine
             string redistFile = FileUtilities.GetTemporaryFileName();
             try
             {
-                File.WriteAllText
-                (
+                File.WriteAllText(
                     redistFile,
-                    redistString
-                );
+                    redistString);
 
                 t.InstalledAssemblyTables = new TaskItem[] { new TaskItem(redistFile) };
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
index 5a9399898b1..4313daea870 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
@@ -51,13 +51,11 @@ public void Exists()
             assemblyNames[0].SetMetadata("SpecificVersion", "true");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -118,13 +116,11 @@ public void ExistsDifferentName()
             assemblyNames[0].SetMetadata("SpecificVersion", "true");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='DontUnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -173,13 +169,11 @@ public void ExistsOldVersionRange()
             assemblyNames[0].SetMetadata("SpecificVersion", "true");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-1.5.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -228,13 +222,11 @@ public void HighVersionDoesntExist()
             assemblyNames[0].SetMetadata("SpecificVersion", "true");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='4.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -282,13 +274,11 @@ public void LowVersionDoesntExist()
             assemblyNames[0].SetMetadata("SpecificVersion", "true");
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-2.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
index 048a93ecf12..5f9eacb825c 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
@@ -73,15 +73,11 @@ public void Exists()
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName")
                 .ShouldBe("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=" + AssemblyRef.EcmaPublicKey, StringCompareShould.IgnoreCase);
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByFrameworkRetarget"), "1.0.5000.0", Path.Combine(s_myApp_V10Path, "DependsOnEverettSystem.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByFrameworkRetarget"), "1.0.5000.0", Path.Combine(s_myApp_V10Path, "DependsOnEverettSystem.dll")));
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.NotCopyLocalBecausePrerequisite"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.NotCopyLocalBecausePrerequisite")));
 
             t.ResolvedDependencyFiles[0].GetMetadata("CopyLocal").ShouldBe("false", StringCompareShould.IgnoreCase);
         }
@@ -122,10 +118,8 @@ public void HighVersionDoesntExist()
 
             Assert.True(succeeded);
             Assert.Empty(t.ResolvedDependencyFiles);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByFrameworkRetarget"), "1.0.5000.0", Path.Combine(s_myApp_V10Path, "DependsOnEverettSystem.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByFrameworkRetarget"), "1.0.5000.0", Path.Combine(s_myApp_V10Path, "DependsOnEverettSystem.dll")));
         }
 
         [Fact]
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
index 06b3b54465f..44736b45ad5 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
@@ -52,13 +52,11 @@ public void Exists()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -73,10 +71,8 @@ public void Exists()
             Assert.True(succeeded);
             Assert.Single(t.ResolvedDependencyFiles);
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
 
             // Cleanup.
             File.Delete(appConfigFile);
@@ -127,13 +123,11 @@ public void ExistsPromotedDependencyInTheBlackList()
                 };
 
                 // Construct the app.config.
-                appConfigFile = WriteAppConfig
-                    (
+                appConfigFile = WriteAppConfig(
                         "        <dependentAssembly>\n" +
                         "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                         "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                        "        </dependentAssembly>\n"
-                    );
+                        "        </dependentAssembly>\n");
 
                 // Now, pass feed resolved primary references into ResolveAssemblyReference.
                 ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -149,10 +143,8 @@ public void ExistsPromotedDependencyInTheBlackList()
 
                 Assert.True(succeeded);
                 Assert.Empty(t.ResolvedDependencyFiles);
-                engine.AssertLogDoesntContain
-                    (
-                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                    );
+                engine.AssertLogDoesntContain(
+                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
             }
             finally
             {
@@ -190,13 +182,11 @@ public void ExistsDifferentName()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='DontUnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -242,13 +232,11 @@ public void ExistsOldVersionRange()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-1.5.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -263,10 +251,8 @@ public void ExistsOldVersionRange()
             Assert.True(succeeded);
             Assert.Single(t.ResolvedDependencyFiles);
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
 
             // Cleanup.
             File.Delete(appConfigFile);
@@ -298,13 +284,11 @@ public void HighVersionDoesntExist()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='1.0.0.0' newVersion='4.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -320,28 +304,20 @@ public void HighVersionDoesntExist()
             Assert.Empty(t.ResolvedDependencyFiles);
             string shouldContain;
 
-            string code = t.Log.ExtractMessageCode
-                (
+            string code = t.Log.ExtractMessageCode(
                     String.Format(AssemblyResources.GetString("ResolveAssemblyReference.FailedToResolveReference"),
                         String.Format(AssemblyResources.GetString("General.CouldNotLocateAssembly"), "UNIFyMe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")),
-                    out shouldContain
-                );
+                    out shouldContain);
 
 
-            engine.AssertLogContains
-                (
-                    shouldContain
-                );
+            engine.AssertLogContains(
+                    shouldContain);
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UNIFyMe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UNIFyMe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
 
 
 
@@ -374,13 +350,11 @@ public void LowVersionDoesntExist()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-2.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -395,10 +369,8 @@ public void LowVersionDoesntExist()
             Assert.True(succeeded);
             Assert.Single(t.ResolvedDependencyFiles);
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "0.5.0.0", appConfigFile, Path.Combine(s_myApp_V05Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "0.5.0.0", appConfigFile, Path.Combine(s_myApp_V05Path, "DependsOnUnified.dll")));
 
             // Cleanup.
             File.Delete(appConfigFile);
@@ -424,13 +396,11 @@ public void GarbageVersionInAppConfigFile()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='GarbledOldVersion' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='Garbled' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -468,13 +438,11 @@ public void GarbageAppConfigMissingOldVersion()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='MissingOldVersion' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -487,10 +455,8 @@ public void GarbageAppConfigMissingOldVersion()
             bool succeeded = Execute(t);
             Assert.False(succeeded);
             Assert.Equal(1, engine.Errors);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("AppConfig.BindingRedirectMissingOldVersion"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("AppConfig.BindingRedirectMissingOldVersion")));
 
             // Cleanup.
             File.Delete(appConfigFile);
@@ -516,13 +482,11 @@ public void GarbageAppConfigMissingNewVersion()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='MissingNewVersion' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -535,10 +499,8 @@ public void GarbageAppConfigMissingNewVersion()
             bool succeeded = Execute(t);
             Assert.False(succeeded);
             Assert.Equal(1, engine.Errors);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("AppConfig.BindingRedirectMissingNewVersion"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("AppConfig.BindingRedirectMissingNewVersion")));
 
             // Cleanup.
             File.Delete(appConfigFile);
@@ -565,13 +527,11 @@ public void GarbageAppConfigAssemblyNameMissingPKTAndCulture()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='GarbledOldVersion' />\n" +
                     "            <bindingRedirect oldVersion='Garbled' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -611,13 +571,11 @@ public void AppConfigSpecifiedWhenAutoUnifyEqualsTrue()
             };
 
             // Construct the app.config.
-            string appConfigFile = WriteAppConfig
-                (
+            string appConfigFile = WriteAppConfig(
                     "        <dependentAssembly>\n" +
                     "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                     "            <bindingRedirect oldVersion='0.0.0.0-2.0.0.0' newVersion='2.0.0.0' />\n" +
-                    "        </dependentAssembly>\n"
-                );
+                    "        </dependentAssembly>\n");
 
             // Now, pass feed resolved primary references into ResolveAssemblyReference.
             ResolveAssemblyReference t = new ResolveAssemblyReference();
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
index 1ea5e767dd3..2a69d5852a5 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
@@ -81,15 +81,11 @@ internal void ExistsImpl(RARSimulationMode rarSimulationMode = RARSimulationMode
                 t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
                 t.ResolvedDependencyFiles[0].ItemSpec.ShouldBe(s_unifyMeDll_V20Path, StringCompareShould.IgnoreCase);
 
-                engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
-                );
-
-                engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                );
+                engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
+
+                engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
             }
         }
 
@@ -157,15 +153,11 @@ public void ExistsWithPrimaryReferenceOnBlackList()
                 t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
                 t.ResolvedDependencyFiles[0].ItemSpec.ShouldBe(s_unifyMeDll_V10Path, StringCompareShould.IgnoreCase);
 
-                engine.AssertLogDoesntContain
-                    (
-                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UnifyMe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, ProcessorArchitecture=MSIL")
-                    );
+                engine.AssertLogDoesntContain(
+                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UnifyMe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, ProcessorArchitecture=MSIL"));
 
-                engine.AssertLogDoesntContain
-                    (
-                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll"))
-                    );
+                engine.AssertLogDoesntContain(
+                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll")));
             }
             finally
             {
@@ -222,13 +214,11 @@ public void ExistsPromotedDependencyInTheBlackList()
                 };
 
                 // Construct the app.config.
-                appConfigFile = WriteAppConfig
-                    (
+                appConfigFile = WriteAppConfig(
                         "        <dependentAssembly>\n" +
                         "            <assemblyIdentity name='UnifyMe' PublicKeyToken='b77a5c561934e089' culture='neutral' />\n" +
                         "            <bindingRedirect oldVersion='1.0.0.0' newVersion='2.0.0.0' />\n" +
-                        "        </dependentAssembly>\n"
-                    );
+                        "        </dependentAssembly>\n");
 
                 // Now, pass feed resolved primary references into ResolveAssemblyReference.
                 ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -244,10 +234,8 @@ public void ExistsPromotedDependencyInTheBlackList()
 
                 Assert.True(succeeded);
                 Assert.Empty(t.ResolvedDependencyFiles);
-                engine.AssertLogDoesntContain
-                    (
-                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                    );
+                engine.AssertLogDoesntContain(
+                        String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAppConfig"), "1.0.0.0", appConfigFile, Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
             }
             finally
             {
@@ -397,20 +385,14 @@ public void MultipleUnifiedFromNamesMiddlePrimaryOnBlackList()
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
             t.ResolvedDependencyFiles[0].ItemSpec.ShouldBe(s_unifyMeDll_V20Path, StringCompareShould.IgnoreCase);
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
 
-            engine.AssertLogDoesntContain
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "2.0.0.0", Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogDoesntContain(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "2.0.0.0", Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll")));
         }
 
         /// <summary>
@@ -457,20 +439,14 @@ public void MultipleUnifiedFromNames()
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
             t.ResolvedDependencyFiles[0].ItemSpec.ShouldBe(s_unifyMeDll_V30Path, StringCompareShould.IgnoreCase);
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll")));
 
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "2.0.0.0", Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "2.0.0.0", Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll")));
         }
 
         /// <summary>
@@ -513,10 +489,8 @@ public void LowVersionDoesntExist()
             Assert.True(succeeded);
             Assert.Single(t.ResolvedDependencyFiles);
             t.ResolvedDependencyFiles[0].GetMetadata("FusionName").ShouldBe("UnifyMe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", StringCompareShould.IgnoreCase);
-            engine.AssertLogContains
-                (
-                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "0.5.0.0", Path.Combine(s_myApp_V05Path, "DependsOnUnified.dll"))
-                );
+            engine.AssertLogContains(
+                    String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "0.5.0.0", Path.Combine(s_myApp_V05Path, "DependsOnUnified.dll")));
         }
     }
 }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs b/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
index 932411bcf01..a9c07be92bf 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
@@ -107,20 +107,15 @@ public void ConflictBetweenCopyLocalDependencies()
             Assert.True(ContainsItem(t.SuggestedRedirects, @"D, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa")); // "Expected to find suggested redirect, but didn't"
             Assert.Equal(1, engine.Warnings); // "Should only be one warning for suggested redirects."
             Assert.Contains(
-                String.Format
-                    (
-                        AssemblyResources.GetString
-                        (
-                            "ResolveAssemblyReference.ConflictRedirectSuggestion"
-                        ),
+                String.Format(
+                        AssemblyResources.GetString(
+                            "ResolveAssemblyReference.ConflictRedirectSuggestion"),
                         "D, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa",
                         "1.0.0.0",
                         s_myLibraries_V1_DDllPath,
                         "2.0.0.0",
-                        s_myLibraries_V2_DDllPath
-                    ),
-                engine.Log
-            );
+                        s_myLibraries_V2_DDllPath),
+                engine.Log);
         }
 
 
@@ -361,8 +356,8 @@ public void RedirectsAreSuggestedInExternallyResolvedGraph()
 
             t.Assemblies = new ITaskItem[]
             {
-                new TaskItem("A", new Dictionary<string, string> { ["ExternallyResolved"] = "true" } ),
-                new TaskItem("B", new Dictionary<string, string> { ["ExternallyResolved"] = "true" } ),
+                new TaskItem("A", new Dictionary<string, string> { ["ExternallyResolved"] = "true" }),
+                new TaskItem("B", new Dictionary<string, string> { ["ExternallyResolved"] = "true" }),
             };
 
             t.SearchPaths = new string[]
diff --git a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
index deea5b3f0fe..d22875b6186 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
@@ -369,8 +369,7 @@ public void HigherVersionDirectDependenciesFalse()
             t.TargetFrameworkMonikerDisplayName = "Foo";
             t.SearchPaths = new string[] { @"c:\Frameworks\" };
             Assert.True(
-                t.Execute
-                (
+                t.Execute(
                     fileExists,
                     directoryExists,
                     getDirectories,
@@ -387,9 +386,7 @@ public void HigherVersionDirectDependenciesFalse()
 #endif
                     checkIfAssemblyIsInGac,
                     isWinMDFile,
-                    readMachineTypeFromPEHeader
-                )
-            );
+                    readMachineTypeFromPEHeader));
 
 
             Assert.Equal(0, e.Warnings); // "No warning expected in this scenario."
diff --git a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
index 92ebff70c20..22d823f06c2 100644
--- a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
@@ -372,8 +372,7 @@ public void Preprocessor(string fileContents)
         [Fact(Skip = "Preprocessor is not yet implemented.")]
         public void PreprocessorNamespaceInFalsePreprocessorBlock()
         {
-            AssertParse
-            (
+            AssertParse(
                 @"
 #if (false)             
 namespace i 
@@ -413,10 +412,8 @@ public void Regress_Mutation_SingleLineCommentsShouldBeIgnored(string fileConten
         */
         private static void AssertParse(string source, string expectedClassName)
         {
-            ExtractedClassName className = CSharpParserUtilities.GetFirstClassNameFullyQualified
-            (
-                StreamHelpers.StringToStream(source)
-            );
+            ExtractedClassName className = CSharpParserUtilities.GetFirstClassNameFullyQualified(
+                StreamHelpers.StringToStream(source));
 
             Assert.Equal(expectedClassName, className.Name);
         }
diff --git a/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs b/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
index 4f9b502d4d2..c98046650c7 100644
--- a/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
@@ -105,8 +105,8 @@ Form feed character (U+000C)
         [Fact]
         public void NamespacePlusClass()
         {
-            AssertTokenize
-            ("namespace MyNamespace { class MyClass {} }\x0d",
+            AssertTokenize(
+            "namespace MyNamespace { class MyClass {} }\x0d",
              ".Keyword.Whitespace.Identifier.Whitespace.OpenScope.Whitespace.Keyword.Whitespace.Identifier.Whitespace.OpenScope.CloseScope.Whitespace.CloseScope.Whitespace");
         }
 
@@ -114,12 +114,10 @@ public void NamespacePlusClass()
         [Fact]
         public void EscapedKeywordMakesIdentifier()
         {
-            AssertTokenize
-            (
+            AssertTokenize(
                 "namespace @namespace { class @class {} }\x0d",
                 "namespace namespace { class class {} }\x0d",       // Resulting tokens have '@' stripped.
-                ".Keyword.Whitespace.Identifier.Whitespace.OpenScope.Whitespace.Keyword.Whitespace.Identifier.Whitespace.OpenScope.CloseScope.Whitespace.CloseScope.Whitespace"
-            );
+                ".Keyword.Whitespace.Identifier.Whitespace.OpenScope.Whitespace.Keyword.Whitespace.Identifier.Whitespace.OpenScope.CloseScope.Whitespace.CloseScope.Whitespace");
         }
 
         // Check boolean literals
@@ -274,12 +272,10 @@ private static void AssertTokenizeUnicode(string source, string expectedTokenKey
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        private static void AssertTokenize
-        (
+        private static void AssertTokenize(
            string source,
            string expectedTokenKey,
-           int expectedLastLineNumber
-        )
+           int expectedLastLineNumber)
         {
             // Most of the time, we expect the rebuilt source to be the same as the input source.
             AssertTokenize(source, source, expectedTokenKey, expectedLastLineNumber);
@@ -292,12 +288,10 @@ int expectedLastLineNumber
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        private static void AssertTokenizeUnicode
-        (
+        private static void AssertTokenizeUnicode(
            string source,
            string expectedTokenKey,
-           int expectedLastLineNumber
-        )
+           int expectedLastLineNumber)
         {
             // Most of the time, we expect the rebuilt source to be the same as the input source.
             AssertTokenizeUnicode(source, source, expectedTokenKey, expectedLastLineNumber);
@@ -310,12 +304,10 @@ int expectedLastLineNumber
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        private static void AssertTokenize
-        (
+        private static void AssertTokenize(
            string source,
            string expectedSource,
-           string expectedTokenKey
-        )
+           string expectedTokenKey)
         {
             // Two lines is the most common test case.
             AssertTokenize(source, expectedSource, expectedTokenKey, 1);
@@ -328,12 +320,10 @@ string expectedTokenKey
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        private static void AssertTokenizeUnicode
-        (
+        private static void AssertTokenizeUnicode(
            string source,
            string expectedSource,
-           string expectedTokenKey
-        )
+           string expectedTokenKey)
         {
             // Two lines is the most common test case.
             AssertTokenizeUnicode(source, expectedSource, expectedTokenKey, 1);
@@ -346,21 +336,17 @@ string expectedTokenKey
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        private static void AssertTokenizeUnicode
-        (
+        private static void AssertTokenizeUnicode(
            string source,
            string expectedSource,
            string expectedTokenKey,
-           int expectedLastLineNumber
-        )
+           int expectedLastLineNumber)
         {
-            AssertTokenizeStream
-            (
+            AssertTokenizeStream(
                 StreamHelpers.StringToStream(source, System.Text.Encoding.Unicode),
                 expectedSource,
                 expectedTokenKey,
-                expectedLastLineNumber
-            );
+                expectedLastLineNumber);
         }
 
         /*
@@ -370,13 +356,11 @@ int expectedLastLineNumber
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        private static void AssertTokenize
-        (
+        private static void AssertTokenize(
            string source,
            string expectedSource,
            string expectedTokenKey,
-           int expectedLastLineNumber
-        )
+           int expectedLastLineNumber)
         {
             // This version of AssertTokenize tests several different encodings.
             // The reason is that we want to be sure each of these works in the 
@@ -396,19 +380,15 @@ int expectedLastLineNumber
          * Also compare the source that is regenerated by concatenating all of the tokens
          * to 'expectedSource'.
          */
-        private static void AssertTokenizeStream
-        (
+        private static void AssertTokenizeStream(
            Stream source,
            string expectedSource,
            string expectedTokenKey,
-           int expectedLastLineNumber
-        )
+           int expectedLastLineNumber)
         {
-            CSharpTokenizer tokens = new CSharpTokenizer
-            (
+            CSharpTokenizer tokens = new CSharpTokenizer(
                 source,
-                false
-            );
+                false);
             string results = "";
             string tokenKey = "";
             int lastLine = 0;
diff --git a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
index 01cc00f914d..0b85ca65678 100644
--- a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
@@ -38,13 +38,11 @@ public void AppendItemWithInvalidBooleanAttribute()
                 // Validate that a legitimate bool works first.
                 try
                 {
-                    c.AppendSwitchIfNotNull
-                    (
+                    c.AppendSwitchIfNotNull(
                         "/myswitch:",
                         new ITaskItem[] { i },
                         new string[] { "Name", "Private" },
-                        new bool[] { false, true }
-                    );
+                        new bool[] { false, true });
                     Assert.Equal(@"/myswitch:MyResource.bmp,Kenny,Private", c.ToString());
                 }
                 catch (ArgumentException e)
@@ -54,15 +52,12 @@ public void AppendItemWithInvalidBooleanAttribute()
 
                 // Now try a bogus boolean.
                 i.SetMetadata("Private", "Maybe");       // This is our flag.
-                c.AppendSwitchIfNotNull
-                (
+                c.AppendSwitchIfNotNull(
                     "/myswitch:",
                     new ITaskItem[] { i },
                     new string[] { "Name", "Private" },
-                    new bool[] { false, true }
-                );  // <-- Expect an ArgumentException here.
-            }
-           );
+                    new bool[] { false, true });  // <-- Expect an ArgumentException here.
+            });
         }
         /// <summary>
         /// When appending an ITaskItem[] where some of the optional attributes are
@@ -87,13 +82,11 @@ public void AppendItemWithMissingAttribute()
 
             CommandLineBuilderExtension c = new CommandLineBuilderExtension();
 
-            c.AppendSwitchIfNotNull
-            (
+            c.AppendSwitchIfNotNull(
                 "/myswitch:",
                 new ITaskItem[] { i, j },
                 new string[] { "Name", "HintPath", "Access" },
-                null
-            );
+                null);
 
             Assert.Equal(
                @"/myswitch:MySoundEffect.wav,Kenny "
diff --git a/src/Tasks.UnitTests/CommandLine_Support.cs b/src/Tasks.UnitTests/CommandLine_Support.cs
index 654ff49b5a2..32c74ff9a62 100644
--- a/src/Tasks.UnitTests/CommandLine_Support.cs
+++ b/src/Tasks.UnitTests/CommandLine_Support.cs
@@ -148,8 +148,7 @@ internal static void ValidateNoParameterStartsWith(
             ToolTaskExtension t,
             string startsWith,
             string except,
-            bool useResponseFile
-        )
+            bool useResponseFile)
         {
             CommandLineBuilderExtension b = new CommandLineBuilderExtension();
 
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index a20b863dfc2..87bba4c66d3 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -577,8 +577,7 @@ public void DoCopyOverCopiedFile(bool skipUnchangedFiles)
                             sourceFile,
                             destinationFile,
                             "SkipUnchangedFiles",
-                            "true"
-                            );
+                            "true");
                     }
                     else
                     {
@@ -587,8 +586,7 @@ public void DoCopyOverCopiedFile(bool skipUnchangedFiles)
                             sourceFile,
                             destinationFile,
                             "SkipUnchangedFiles",
-                            "true"
-                            );
+                            "true");
                     }
 
                     // "Expected the destination file to contain the contents of source file."
diff --git a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
index c9dd002c555..ec7ef4616fa 100644
--- a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
@@ -31,8 +31,7 @@ public CreateCSharpManifestResourceName_Tests(ITestOutputHelper output)
         public void Basic()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -40,8 +39,7 @@ public void Basic()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream("namespace MyStuff.Namespace { class Class {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("MyStuff.Namespace.Class", result);
         }
@@ -71,8 +69,7 @@ public void Regress172107()
             sourcesStream.Seek(0, SeekOrigin.Begin);
 
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"irrelevant",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -80,8 +77,7 @@ public void Regress172107()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: sourcesStream,
-                    log: null
-                );
+                    log: null);
 
             MemoryStream m = new MemoryStream();
             m.Write(new byte[] { 0x64, 0xc3, 0x61, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73 }, 0, 9); // dÃa.Class in ANSI
@@ -119,8 +115,7 @@ public void Regress249540()
             sourcesStream.Seek(0, SeekOrigin.Begin);
 
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"irrelevant",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -128,8 +123,7 @@ public void Regress249540()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: sourcesStream,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("d\u00C4a.Class", result);
         }
@@ -141,8 +135,7 @@ public void Regress249540()
         public void RelativeDependentUpon()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -150,8 +143,7 @@ public void RelativeDependentUpon()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream("namespace Namespace { class Class {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("Namespace.Class", result);
         }
@@ -163,8 +155,7 @@ public void RelativeDependentUpon()
         public void AbsoluteDependentUpon()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -172,8 +163,7 @@ public void AbsoluteDependentUpon()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream("namespace MyStuff.Namespace { class Class {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("MyStuff.Namespace.Class", result);
         }
@@ -185,8 +175,7 @@ public void AbsoluteDependentUpon()
         public void DependentWithCulture()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.en-GB.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -194,8 +183,7 @@ public void DependentWithCulture()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream("namespace MyStuff.Namespace { class Class {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("MyStuff.Namespace.Class.en-GB", result);
         }
@@ -208,8 +196,7 @@ public void DependentWithCulture()
         public void DependentWithCultureMetadata()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -217,8 +204,7 @@ public void DependentWithCultureMetadata()
                     dependentUponFileName: null,
                     culture: "en-GB",
                     binaryStream: StreamHelpers.StringToStream("namespace MyStuff.Namespace { class Class {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("MyStuff.Namespace.Class.en-GB", result);
         }
@@ -230,8 +216,7 @@ public void DependentWithCultureMetadata()
         public void DependentWithEmbeddedCulture()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.fr-fr.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -239,8 +224,7 @@ public void DependentWithEmbeddedCulture()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream("namespace MyStuff.Namespace { class Class {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("MyStuff.Namespace.Class.fr-fr", result);
         }
@@ -253,8 +237,7 @@ public void DependentWithEmbeddedCulture()
         public void RootnamespaceWithCulture()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"SubFolder\MyForm.en-GB.ResX",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -262,8 +245,7 @@ public void RootnamespaceWithCulture()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.SubFolder.MyForm.en-GB", result);
         }
@@ -275,8 +257,7 @@ public void RootnamespaceWithCulture()
         public void RootnamespaceWithCulture_RetainCultureInFileName()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"Subfolder\File.cs.cshtml",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -285,8 +266,7 @@ public void RootnamespaceWithCulture_RetainCultureInFileName()
                     culture: null,
                     binaryStream: null,
                     log: null,
-                    treatAsCultureNeutral: true // retain culture in name
-                );
+                    treatAsCultureNeutral: true); // retain culture in name
 
             result.ShouldBe("RootNamespace.Subfolder.File.cs.cshtml");
         }
@@ -298,8 +278,7 @@ public void RootnamespaceWithCulture_RetainCultureInFileName()
         public void Regress222308()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"..\..\XmlEditor\Setup\XmlEditor.rgs",
                     linkFileName: @"XmlEditor.rgs",
                     prependCultureAsDirectory: true,
@@ -307,8 +286,7 @@ public void Regress222308()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.XmlEditor.rgs", result);
         }
@@ -320,8 +298,7 @@ public void Regress222308()
         public void BitmapWithRootNamespace()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"SubFolder\SplashScreen.bmp",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -329,8 +306,7 @@ public void BitmapWithRootNamespace()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.SubFolder.SplashScreen.bmp", result);
         }
@@ -342,8 +318,7 @@ public void BitmapWithRootNamespace()
         public void CulturedBitmapWithRootNamespace()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"SubFolder\SplashScreen.fr.bmp",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -351,8 +326,7 @@ public void CulturedBitmapWithRootNamespace()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(FileUtilities.FixFilePath(@"fr\RootNamespace.SubFolder.SplashScreen.bmp"), result);
         }
@@ -364,8 +338,7 @@ public void CulturedBitmapWithRootNamespace()
         public void CulturedBitmapWithRootNamespaceNoDirectoryPrefix()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"SubFolder\SplashScreen.fr.bmp",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: false,
@@ -373,8 +346,7 @@ public void CulturedBitmapWithRootNamespaceNoDirectoryPrefix()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(@"RootNamespace.SubFolder.SplashScreen.bmp", result);
         }
@@ -394,10 +366,8 @@ public void Regress188319()
             i.SetMetadata("DependentUpon", "SR1.strings");        // Normally, this would be a C# file.
             t.ResourceFiles = new ITaskItem[] { i };
             t.RootNamespace = "CustomToolTest";
-            bool success = t.Execute
-            (
-                new Microsoft.Build.Tasks.CreateFileStream(CreateFileStream)
-            );
+            bool success = t.Execute(
+                new Microsoft.Build.Tasks.CreateFileStream(CreateFileStream));
 
             Assert.True(success); // "Expected the task to succeed."
 
@@ -718,8 +688,7 @@ public void Regress311473()
         public void Regress419591()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: "MyForm.en-GB.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -727,8 +696,7 @@ public void Regress419591()
                     dependentUponFileName: "MyForm.en-GB.cs",
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream("namespace ClassLibrary1 { class MyForm {} }"),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("ClassLibrary1.MyForm", result);
         }
@@ -747,8 +715,7 @@ public void Regress419591()
         public void Regress419591_EmptySource()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: "MyForm.en-GB.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -756,8 +723,7 @@ public void Regress419591_EmptySource()
                     dependentUponFileName: "MyForm.en-GB.cs",
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(""),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.MyForm.en-GB", result);
         }
@@ -774,8 +740,7 @@ public void Regress459265()
             CreateCSharpManifestResourceName c = new CreateCSharpManifestResourceName();
             c.BuildEngine = m;
 
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: "MyForm.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -796,15 +761,12 @@ namespace ClassLibrary3
     class MyForm 
     {
     }
-}"
-                    ),
-                    log: c.Log
-                );
+}"),
+                    log: c.Log);
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("CreateManifestResourceName.DefinitionFoundWithinConditionalDirective"), "MyForm.cs", "MyForm.resx"),
-                m.Log
-            );
+                m.Log);
         }
 
         /// <summary>
@@ -933,8 +895,7 @@ public void NoLogicalNameAddedForResx()
         public void CulturedResourcesFileWithRootNamespaceWithinSubfolder()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"SubFolder\MyResource.fr.resources",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: false,
@@ -942,8 +903,7 @@ public void CulturedResourcesFileWithRootNamespaceWithinSubfolder()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(@"RootNamespace.SubFolder.MyResource.fr.resources", result);
         }
@@ -955,8 +915,7 @@ public void CulturedResourcesFileWithRootNamespaceWithinSubfolder()
         public void CulturedResourcesFileWithRootNamespace()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"MyResource.fr.resources",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: false,
@@ -964,8 +923,7 @@ public void CulturedResourcesFileWithRootNamespace()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(@"RootNamespace.MyResource.fr.resources", result);
         }
@@ -977,8 +935,7 @@ public void CulturedResourcesFileWithRootNamespace()
         public void ResourcesFileWithRootNamespace()
         {
             string result =
-            CreateCSharpManifestResourceName.CreateManifestNameImpl
-                (
+            CreateCSharpManifestResourceName.CreateManifestNameImpl(
                     fileName: @"MyResource.resources",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: false,
@@ -986,8 +943,7 @@ public void ResourcesFileWithRootNamespace()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(@"RootNamespace.MyResource.resources", result);
         }
diff --git a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
index 443b6769f57..05c23b38348 100644
--- a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
@@ -32,8 +32,7 @@ public CreateVisualBasicManifestResourceName_Tests(ITestOutputHelper output)
         public void Basic()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -47,8 +46,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal("Nested.TestNamespace.TestClass", result);
         }
@@ -60,8 +58,7 @@ End Namespace
         public void RelativeDependentUpon()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -75,9 +72,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("TestNamespace.TestClass", result);
         }
@@ -89,8 +84,7 @@ End Namespace
         public void AbsoluteDependentUpon()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -104,9 +98,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("Nested.TestNamespace.TestClass", result);
         }
@@ -118,8 +110,7 @@ End Namespace
         public void DependentWithCulture()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.en-GB.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -133,9 +124,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("Nested.TestNamespace.TestClass.en-GB", result);
         }
@@ -148,8 +137,7 @@ End Namespace
         public void DependentWithCultureMetadata()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -163,9 +151,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("Nested.TestNamespace.TestClass.en-GB", result);
         }
@@ -177,8 +163,7 @@ End Namespace
         public void DependentWithCultureAndRootNamespace()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.en-GB.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -192,9 +177,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.Nested.TestNamespace.TestClass.en-GB", result);
         }
@@ -206,8 +189,7 @@ End Namespace
         public void DependentWithEmbeddedCulture()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"f:\myproject\SubFolder\MyForm.fr-fr.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -221,9 +203,7 @@ Class TestClass
     End Class
 End Namespace
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.Nested.TestNamespace.TestClass.fr-fr", result);
         }
@@ -259,8 +239,7 @@ public void RootnamespaceWithCulture()
         public void RootnamespaceWithCulture_RetainCultureInFileName()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"File.cs.vb",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -269,8 +248,7 @@ public void RootnamespaceWithCulture_RetainCultureInFileName()
                     culture: null,
                     binaryStream: null,
                     log: null,
-                    treatAsCultureNeutral: true // retain culture in name
-                );
+                    treatAsCultureNeutral: true); // retain culture in name
 
             // Visual basic does not carry subfolder.
             // See https://github.com/dotnet/msbuild/pull/5477
@@ -284,8 +262,7 @@ public void RootnamespaceWithCulture_RetainCultureInFileName()
         public void Regress222308()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"..\..\XmlEditor\Setup\XmlEditor.rgs",
                     linkFileName: @"MyXmlEditor.rgs",
                     prependCultureAsDirectory: true,
@@ -293,9 +270,7 @@ public void Regress222308()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.MyXmlEditor.rgs", result);
         }
@@ -470,8 +445,7 @@ End Namespace
         public void Regress419591()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: "MyForm.ro.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -483,9 +457,7 @@ public void Regress419591()
     Class MyForm 
     End Class
 "),
-                    log: null
-
-                );
+                    log: null);
 
             Assert.Equal("RootNamespace.MyForm", result);
         }
@@ -503,8 +475,7 @@ public void Regress459265()
             c.BuildEngine = m;
 
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: "MyForm.resx",
                     linkFileName: null,
                     prependCultureAsDirectory: true,
@@ -525,15 +496,12 @@ Namespace ClassLibrary3
     Class MyForm 
     End Class
 End Namespace
-"
-                    ),
-                    log: c.Log
-                );
+"),
+                    log: c.Log);
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("CreateManifestResourceName.DefinitionFoundWithinConditionalDirective"), "MyForm.vb", "MyForm.resx"),
-                m.Log
-            );
+                m.Log);
         }
 
         /// <summary>
@@ -665,8 +633,7 @@ public void CulturedResourcesFileWithRootNamespaceWithinSubfolder()
         public void CulturedResourcesFileWithRootNamespace()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"MyResource.fr.resources",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: false,
@@ -674,8 +641,7 @@ public void CulturedResourcesFileWithRootNamespace()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(@"RootNamespace.MyResource.fr.resources", result);
         }
@@ -687,8 +653,7 @@ public void CulturedResourcesFileWithRootNamespace()
         public void ResourcesFileWithRootNamespace()
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: @"MyResource.resources",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: false,
@@ -696,8 +661,7 @@ public void ResourcesFileWithRootNamespace()
                     dependentUponFileName: null,
                     culture: null,
                     binaryStream: null,
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(@"RootNamespace.MyResource.resources", result);
         }
@@ -705,8 +669,7 @@ public void ResourcesFileWithRootNamespace()
         private void AssertSimpleCase(string code, string expected)
         {
             string result =
-            CreateVisualBasicManifestResourceName.CreateManifestNameImpl
-                (
+            CreateVisualBasicManifestResourceName.CreateManifestNameImpl(
                     fileName: "MyForm.resx",
                     linkFileName: null,    // Link file name
                     prependCultureAsDirectory: true,
@@ -714,8 +677,7 @@ private void AssertSimpleCase(string code, string expected)
                     dependentUponFileName: "MyForm.vb",
                     culture: null,
                     binaryStream: StreamHelpers.StringToStream(code),
-                    log: null
-                );
+                    log: null);
 
             Assert.Equal(expected, result);
         }
diff --git a/src/Tasks.UnitTests/FileStateTests.cs b/src/Tasks.UnitTests/FileStateTests.cs
index 623fd213391..0b1cd0c3150 100644
--- a/src/Tasks.UnitTests/FileStateTests.cs
+++ b/src/Tasks.UnitTests/FileStateTests.cs
@@ -22,8 +22,7 @@ public void BadNoName()
             Assert.Throws<ArgumentException>(() =>
             {
                 new FileState("");
-            }
-           );
+            });
         }
         [Fact]
         public void BadCharsCtorOK()
@@ -402,8 +401,7 @@ public void DoesNotExistIsDirectory()
                 string file = Guid.NewGuid().ToString("N"); // presumably doesn't exist
 
                 var x = new FileState(file).IsDirectory;
-            }
-           );
+            });
         }
         [Fact]
         public void DoesNotExistDirectoryOrFileExists()
diff --git a/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs b/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
index 020faf1e2fa..fb08f792d36 100644
--- a/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
+++ b/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
@@ -174,8 +174,7 @@ public void NullTargetPlatformVersion()
                 t.TargetPlatformIdentifier = "Hello";
                 t.TargetPlatformVersion = null;
                 t.Execute();
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get a ArgumentException if null is passed into the target platform version.
@@ -189,8 +188,7 @@ public void NullTargetPlatformIdentifier()
                 t.TargetPlatformIdentifier = null;
                 t.TargetPlatformVersion = "1.0";
                 t.Execute();
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get an error message if an empty platform identifier is passed in.
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index 9deb3861387..fa322d35a56 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -43,8 +43,7 @@ public void AttributeForwarding()
                 Assert.Equal(dir, t.DirectoriesCreated[0].ItemSpec);
                 Assert.Contains(
                     String.Format(AssemblyResources.GetString("MakeDir.Comment"), dir),
-                    engine.Log
-                );
+                    engine.Log);
                 Assert.Equal("en-GB", t.DirectoriesCreated[0].GetMetadata("Locale"));
 
                 // Output ItemSpec should not be overwritten.
@@ -105,11 +104,9 @@ public void SomeInputsFailToCreate()
                 }
 
                 Assert.Equal(dir, t.DirectoriesCreated[0].ItemSpec);
-                Assert.Contains
-                (
+                Assert.Contains(
                     String.Format(AssemblyResources.GetString("MakeDir.Comment"), dir),
-                    engine.Log
-                );
+                    engine.Log);
             }
             finally
             {
@@ -150,8 +147,7 @@ public void CreateNewDirectory()
                 Assert.Equal(dir, t.DirectoriesCreated[0].ItemSpec);
                 Assert.Contains(
                     String.Format(AssemblyResources.GetString("MakeDir.Comment"), dir),
-                    engine.Log
-                );
+                    engine.Log);
 
                 engine.Log = "";
                 success = t.Execute();
diff --git a/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs b/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
index 257eaff6403..4e6ce9d4857 100644
--- a/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
+++ b/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
@@ -67,8 +67,7 @@ public IntPtr AllocateHandle(int cb)
         public void FreeHandle(IntPtr handle)
         {
             Assert.True(_allocatedHandles.Exists(new Predicate<IntPtr>(
-                delegate (IntPtr ptr) { return ptr == handle; }
-            )));
+                delegate (IntPtr ptr) { return ptr == handle; })));
             Marshal.FreeHGlobal(handle);
             _allocatedHandles.Remove(handle);
 
diff --git a/src/Tasks.UnitTests/ResolveComReference_Tests.cs b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
index 8ed7527a31c..62a0b48b5ad 100644
--- a/src/Tasks.UnitTests/ResolveComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
@@ -807,20 +807,16 @@ private void CheckAxReferenceRCWTlbExists(RcwStyle rcwStyle, bool includeVersion
             var embedInteropTypes = tlbRefInfo.taskItem.GetMetadata(ItemMetadataNames.embedInteropTypes);
             Assert.Equal("false", embedInteropTypes); // "The tlb wrapper for the activex control should have EmbedInteropTypes=false not " + embedInteropTypes);
             Assert.True(ComReference.AreTypeLibAttrEqual(tlbRefInfo.attr, axRefInfo.attr)); // "reference information should be the same"
-            Assert.Equal(TlbReference.GetWrapperFileName
-                        (
+            Assert.Equal(TlbReference.GetWrapperFileName(
                         axRefInfo.taskItem.GetMetadata(ComReferenceItemMetadataNames.tlbReferenceName),
                         includeVersionInInteropName,
                         axRefInfo.attr.wMajorVerNum,
-                        axRefInfo.attr.wMinorVerNum
-                        ),
-                    TlbReference.GetWrapperFileName
-                        (
+                        axRefInfo.attr.wMinorVerNum),
+                    TlbReference.GetWrapperFileName(
                         tlbRefInfo.typeLibName,
                         includeVersionInInteropName,
                         tlbRefInfo.attr.wMajorVerNum,
-                        tlbRefInfo.attr.wMinorVerNum
-                        )); // "Expected Ax reference's RCW name to match the new TLB"
+                        tlbRefInfo.attr.wMinorVerNum)); // "Expected Ax reference's RCW name to match the new TLB"
         }
     }
 }
diff --git a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
index 0bcb3ac0fec..d5340361c62 100644
--- a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
@@ -1443,8 +1443,7 @@ public void NullSDKReferences()
                 ResolveSDKReference t = new ResolveSDKReference();
                 t.SDKReferences = null;
                 bool succeeded = t.Execute();
-            }
-           );
+            });
         }
         /// <summary>
         /// When a null is passed into the set of InstalledSDKS property make sure we get the correct exception out.
@@ -1460,8 +1459,7 @@ public void NullInstalledSDKs()
                 ResolveSDKReference t = new ResolveSDKReference();
                 t.InstalledSDKs = null;
                 bool succeeded = t.Execute();
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index d975c7789f5..e8598004c9d 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -1787,9 +1787,9 @@ public void OutputFilesNotSpecified()
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
 
             t.Sources = new ITaskItem[] {
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
                 new TaskItem( Utilities.WriteTestResX(false, null, null)),
             };
 
@@ -1825,9 +1825,9 @@ public void FilesWrittenSet()
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
 
             t.Sources = new ITaskItem[] {
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
                 new TaskItem( Utilities.WriteTestResX(false, null, null)),
             };
 
@@ -1869,9 +1869,9 @@ public void OutputFilesPartialInputs()
             try
             {
                 t.Sources = new ITaskItem[] {
-                new TaskItem( Utilities.WriteTestText(null, null) ),
-                new TaskItem( Utilities.WriteTestText(null, null) ),
-                new TaskItem( Utilities.WriteTestText("goober", null) ),
+                new TaskItem( Utilities.WriteTestText(null, null)),
+                new TaskItem( Utilities.WriteTestText(null, null)),
+                new TaskItem( Utilities.WriteTestText("goober", null)),
                 new TaskItem( Utilities.WriteTestText(null, null)),
             };
                 foreach (ITaskItem taskItem in t.Sources)
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index 167ab7577d4..e15e6ef806d 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -2164,9 +2164,9 @@ public void OutputFilesNotSpecified()
             GenerateResource t = Utilities.CreateTask(_output);
 
             t.Sources = new ITaskItem[] {
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
                 new TaskItem( Utilities.WriteTestResX(false, null, null)),
             };
 
@@ -2200,9 +2200,9 @@ public void FilesWrittenSet()
             GenerateResource t = Utilities.CreateTask(_output);
 
             t.Sources = new ITaskItem[] {
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
-                new TaskItem( Utilities.WriteTestResX(false, null, null) ),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
+                new TaskItem( Utilities.WriteTestResX(false, null, null)),
                 new TaskItem( Utilities.WriteTestResX(false, null, null)),
             };
 
@@ -2244,9 +2244,9 @@ public void OutputFilesPartialInputs()
             try
             {
                 t.Sources = new ITaskItem[] {
-                    new TaskItem( Utilities.WriteTestText(null, null) ),
-                    new TaskItem( Utilities.WriteTestText(null, null) ),
-                    new TaskItem( Utilities.WriteTestText("goober", null) ),
+                    new TaskItem( Utilities.WriteTestText(null, null)),
+                    new TaskItem( Utilities.WriteTestText(null, null)),
+                    new TaskItem( Utilities.WriteTestText("goober", null)),
                     new TaskItem( Utilities.WriteTestText(null, null)),
                 };
 
@@ -3664,8 +3664,7 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI
         {
             Assert.Contains(
                 String.Format(AssemblyResources.GetString(messageID), replacements),
-                ((MockEngine)t.BuildEngine).Log
-            );
+                ((MockEngine)t.BuildEngine).Log);
         }
 
         /// <summary>
@@ -3941,15 +3940,13 @@ public static string GetTestResXContent(bool useType, string linkedBitmap, strin
                 + "  </resheader>\xd\xa"
                 + "  <resheader name='writer'>\xd\xa"
                 + "    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\xd\xa"
-                + "  </resheader>\xd\xa"
-                );
+                + "  </resheader>\xd\xa");
 
             resgenFileContents.Append(
                  // A plain old string value.
                  "  <data name=\"MyString\">\xd\xa"
                 + "    <value>MyValue</value>\xd\xa"
-                + "  </data>\xd\xa"
-                );
+                + "  </data>\xd\xa");
 
             if (extraToken != null)
             {
@@ -3962,8 +3959,7 @@ public static string GetTestResXContent(bool useType, string linkedBitmap, strin
                 resgenFileContents.Append(
                      "  <data name='Label.Modifiers' type='System.CodeDom.MemberAttributes, System'>\xd\xa"
                     + "    <value>Assembly</value>\xd\xa"
-                    + "  </data>\xd\xa"
-                    );
+                    + "  </data>\xd\xa");
             }
 
             if (useInvalidType)
@@ -3972,8 +3968,7 @@ public static string GetTestResXContent(bool useType, string linkedBitmap, strin
                 resgenFileContents.Append(
                      "  <data name='xx' type='X, INVALID'>\xd\xa"
                     + "    <value>1</value>\xd\xa"
-                    + "  </data>\xd\xa"
-                    );
+                    + "  </data>\xd\xa");
             }
 
             if (linkedBitmap != null)
@@ -3981,8 +3976,7 @@ public static string GetTestResXContent(bool useType, string linkedBitmap, strin
                 // A linked-in bitmap.
                 resgenFileContents.Append(
                      "  <data name='Image1' type='System.Resources.ResXFileRef, System.Windows.Forms'>\xd\xa"
-                    + "    <value>"
-                    );
+                    + "    <value>");
 
                 // The linked file may have a different case than reported by the filesystem
                 // simulate this by lower-casing our file before writing it into the resx.
@@ -3993,8 +3987,7 @@ public static string GetTestResXContent(bool useType, string linkedBitmap, strin
 
                 resgenFileContents.Append(
                      ";System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>\xd\xa"
-                    + "  </data>\xd\xa"
-                    );
+                    + "  </data>\xd\xa");
             }
 
             resgenFileContents.Append("</root>\xd\xa");
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
index 55e86ffbd73..a8382a0cb0f 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
@@ -104,15 +104,13 @@ public void OutputFiles()
             Assert.Equal(differentLengthInput, t.InputFiles); // "New InputFiles value should be set"
             Assert.Equal(differentLengthOutput, t.OutputFiles); // "New OutputFiles value should be set"
 
-            ExecuteTaskAndVerifyLogContainsErrorFromResource
-                (
+            ExecuteTaskAndVerifyLogContainsErrorFromResource(
                 t,
                 "General.TwoVectorsMustHaveSameLength",
                 differentLengthInput.Length,
                 differentLengthOutput.Length,
                 "InputFiles",
-                "OutputFiles"
-                );
+                "OutputFiles");
 
             // If only OutputFiles is set, then the task should return -- as far as
             // it's concerned, no work needs to be done.
@@ -292,13 +290,11 @@ public void References()
             int commandLineLength = CommandLine.GetCommandLine(t, false).Length;
             Assert.Equal(commandLineLength, maxCommandLineLength);
 
-            ExecuteTaskAndVerifyLogDoesNotContainResource
-            (
+            ExecuteTaskAndVerifyLogDoesNotContainResource(
                 t,
                 false,
                 "ResGen.CommandTooLong",
-                CommandLine.GetCommandLine(t, false).Length
-            );
+                CommandLine.GetCommandLine(t, false).Length);
 
             VerifyLogDoesNotContainResource((MockEngine)t.BuildEngine, GetPrivateLog(t), "ToolTask.CommandTooLong", typeof(ResGen).Name);
 
@@ -318,12 +314,10 @@ public void References()
             commandLineLength = CommandLine.GetCommandLine(t, false).Length;
             Assert.Equal(commandLineLength, maxCommandLineLength + 1);
 
-            ExecuteTaskAndVerifyLogContainsErrorFromResource
-            (
+            ExecuteTaskAndVerifyLogContainsErrorFromResource(
                 t,
                 "ResGen.CommandTooLong",
-                CommandLine.GetCommandLine(t, false).Length
-            );
+                CommandLine.GetCommandLine(t, false).Length);
 
             VerifyLogDoesNotContainResource((MockEngine)t.BuildEngine, GetPrivateLog(t), "ToolTask.CommandTooLong", typeof(ResGen).Name);
         }
diff --git a/src/Tasks.UnitTests/SGen_Tests.cs b/src/Tasks.UnitTests/SGen_Tests.cs
index d8328dfc5ed..1827ef55e42 100644
--- a/src/Tasks.UnitTests/SGen_Tests.cs
+++ b/src/Tasks.UnitTests/SGen_Tests.cs
@@ -153,8 +153,7 @@ public void TestInputChecks3()
                 // This should result in a quoted parameter...
                 sgen.KeyFile = "c:\\Some Folder\\MyKeyFile.snk";
                 string commandLine = sgen.CommandLine();
-            }
-           );
+            });
         }
 
         [Fact]
@@ -173,8 +172,7 @@ public void TestInputChecks4()
                 sgen.KeyFile = "c:\\Some Folder\\MyKeyFile.snk";
 
                 string commandLine = sgen.CommandLine();
-            }
-           );
+            });
         }
         [Fact]
         public void TestInputPlatform()
diff --git a/src/Tasks.UnitTests/StreamMappedString_Tests.cs b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
index ad5d7ea0b69..669cab506ce 100644
--- a/src/Tasks.UnitTests/StreamMappedString_Tests.cs
+++ b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
@@ -138,8 +138,7 @@ public void Regress_Mutation_SubstringReadPastEndThrowsException()
                 StreamMappedString s = new StreamMappedString(stream, false);
 
                 Assert.Equal(String.Empty, s.Substring(1, 30));
-            }
-           );
+            });
         }
         [Fact]
         public void Regress_Mutation_SubstringOnLastPageWorks()
@@ -226,8 +225,7 @@ public void Regress_Codereview_RequestPageWellPastEnd()
 
                 // Read something way past the end. This should result in a range exception.
                 s.GetAt(1000000);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -239,8 +237,7 @@ public void Regress_Mutation_FirstCharacterOnPagePastEndDoesntExist()
                 StreamMappedString s = new StreamMappedString(stream, false, 256);
 
                 s.GetAt(256);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -253,8 +250,7 @@ public void Regress_Mutation_RequestPageWellPastEnd()
 
                 // Read something way past the end. This should result in a range exception.
                 s.GetAt(1000000);
-            }
-           );
+            });
         }
 
 
diff --git a/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs b/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
index 6243bbc1495..4f9653de596 100644
--- a/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
+++ b/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
@@ -62,8 +62,7 @@ public void ResourceAccessSanityCheck()
 
                 t.BuildEngine = engine;
                 t.Log.LogErrorFromResources("Beyond Good and Evil");
-            }
-           );
+            });
         }
         /// <summary>
         /// Retrieve a non-existent value but ask for a default.
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index bb0e2b9d03c..aa63f0f81e9 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -30,15 +30,13 @@ public sealed class Touch_Tests
 
         private bool Execute(Touch t)
         {
-            return t.ExecuteImpl
-            (
+            return t.ExecuteImpl(
                 fileExists,
                 fileCreate,
                 fileGetAttributes,
                 fileSetAttributes,
                 setLastAccessTime,
-                setLastWriteTime
-            );
+                setLastWriteTime);
         }
 
         /// <summary>
@@ -203,8 +201,7 @@ public void TouchExisting()
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.Touching"), myexisting_txt),
-                engine.Log
-            );
+                engine.Log);
         }
 
         [Fact]
@@ -226,8 +223,7 @@ public void TouchNonExisting()
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.FileDoesNotExist"), mynonexisting_txt),
-                engine.Log
-            );
+                engine.Log);
         }
 
         [Fact]
@@ -250,8 +246,7 @@ public void TouchNonExistingAlwaysCreate()
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.CreatingFile"), mynonexisting_txt, "AlwaysCreate"),
-                engine.Log
-            );
+                engine.Log);
         }
 
         [Fact]
diff --git a/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs b/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
index 80ef700d874..40437bd3845 100644
--- a/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
@@ -21,8 +21,7 @@ public void EmptyFile()
         [Fact]
         public void SimpleForm()
         {
-            AssertParse
-            (
+            AssertParse(
                 @"
         rem This is my class
         <DefaultInstanceProperty(&qtGetInstance&qt)> Public ClAsS Form1
@@ -35,8 +34,7 @@ End Class
         [Fact]
         public void Namespace()
         {
-            AssertParse
-            (
+            AssertParse(
                 @"
     ' This is my Namespace
     NamEspacE Goofy.Mickey
@@ -52,8 +50,7 @@ End Namespace
         [Fact]
         public void NestedNamespace()
         {
-            AssertParse
-            (
+            AssertParse(
                 @"
     Namespace Goofy
         Namespace Mickey
@@ -66,8 +63,7 @@ Namespace Mickey
         [Fact]
         public void NestedAndEndedNamespace()
         {
-            AssertParse
-            (
+            AssertParse(
                 @"
     Namespace Goofy
         Namespace Mickey
@@ -87,8 +83,7 @@ Namespace Mickey
         [Fact]
         public void NamespaceElementBeginsWithRem()
         {
-            AssertParse
-(
+            AssertParse(
     @"
     ' This is my Namespace
     NamEspacE Artist.Painter.Rembrandt
@@ -110,10 +105,8 @@ private static void AssertParse(string source, string expectedClassName)
         {
             source = source.Replace("&qt", "\"");
 
-            ExtractedClassName className = VisualBasicParserUtilities.GetFirstClassNameFullyQualified
-            (
-                StreamHelpers.StringToStream(source)
-            );
+            ExtractedClassName className = VisualBasicParserUtilities.GetFirstClassNameFullyQualified(
+                StreamHelpers.StringToStream(source));
 
             Assert.Equal(expectedClassName, className.Name);
         }
diff --git a/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs b/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
index d3535af80b7..6ccfc974d8d 100644
--- a/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
+++ b/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
@@ -73,11 +73,9 @@ public sealed class VisualBasicTokenizer_Tests
         [Fact]
         public void LoneUnderscore()
         {
-            AssertTokenize
-            (
+            AssertTokenize(
                 "Sub Foo(ByVal _ As Int16)\xd",
-                "Keyword(Sub).Identifier(Foo)Separator(()Keyword(ByVal).ExpectedIdentifier(_)"
-            );
+                "Keyword(Sub).Identifier(Foo)Separator(()Keyword(ByVal).ExpectedIdentifier(_)");
         }
 
         // Boolean literals
@@ -166,22 +164,18 @@ public void LoneUnderscore()
         [Fact]
         public void CheckAllOperators()
         {
-            AssertTokenize
-            (
+            AssertTokenize(
                 "a=1 & 2*3+4-5/6\\7^8<9=10>11\xd",
-                @"Identifier(a)Operator(=)DecimalIntegerLiteral(1).Operator(&).DecimalIntegerLiteral(2)Operator(*)DecimalIntegerLiteral(3)Operator(+)DecimalIntegerLiteral(4)Operator(-)DecimalIntegerLiteral(5)Operator(/)DecimalIntegerLiteral(6)Operator(\)DecimalIntegerLiteral(7)Operator(^)DecimalIntegerLiteral(8)Operator(<)DecimalIntegerLiteral(9)Operator(=)DecimalIntegerLiteral(10)Operator(>)DecimalIntegerLiteral(11)eol"
-            );
+                @"Identifier(a)Operator(=)DecimalIntegerLiteral(1).Operator(&).DecimalIntegerLiteral(2)Operator(*)DecimalIntegerLiteral(3)Operator(+)DecimalIntegerLiteral(4)Operator(-)DecimalIntegerLiteral(5)Operator(/)DecimalIntegerLiteral(6)Operator(\)DecimalIntegerLiteral(7)Operator(^)DecimalIntegerLiteral(8)Operator(<)DecimalIntegerLiteral(9)Operator(=)DecimalIntegerLiteral(10)Operator(>)DecimalIntegerLiteral(11)eol");
         }
 
         // Inplace arrays
         [Fact]
         public void InplaceArray()
         {
-            AssertTokenize
-            (
+            AssertTokenize(
                 "Me.Controls.AddRange(New Control() {Me.lblCodebase, Me.lblCopyright})\xd",
-                "Keyword(Me)Separator(.)Identifier(Controls)Separator(.)Identifier(AddRange)Separator(()Keyword(New).Identifier(Control)Separator(()Separator()).Separator({)Keyword(Me)Separator(.)Identifier(lblCodebase)Separator(,).Keyword(Me)Separator(.)Identifier(lblCopyright)Separator(})Separator())eol"
-            );
+                "Keyword(Me)Separator(.)Identifier(Controls)Separator(.)Identifier(AddRange)Separator(()Keyword(New).Identifier(Control)Separator(()Separator()).Separator({)Keyword(Me)Separator(.)Identifier(lblCodebase)Separator(,).Keyword(Me)Separator(.)Identifier(lblCopyright)Separator(})Separator())eol");
         }
 
         // Keywords
@@ -192,20 +186,16 @@ public void InplaceArray()
         [Fact]
         public void WackyBrackettedClassName()
         {
-            AssertTokenize
-            (
+            AssertTokenize(
                 "Public Class [!output SAFE_ITEM_NAME]\xd",
-                "Keyword(Public).Keyword(Class).ExpectedIdentifier([)"
-            );
+                "Keyword(Public).Keyword(Class).ExpectedIdentifier([)");
         }
         [Fact]
         public void MyClassIsAKeyword()
         {
-            AssertTokenize
-            (
+            AssertTokenize(
                 "Class MyClass\xd",
-                "Keyword(Class).Keyword(MyClass)eol"
-            );
+                "Keyword(Class).Keyword(MyClass)eol");
         }
 
 
@@ -235,19 +225,15 @@ private static void AssertTokenize(string source, string expectedTokenKey)
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        private static void AssertTokenize
-        (
+        private static void AssertTokenize(
            string source,
            string expectedSource,
            string expectedTokenKey,
-           int expectedLastLineNumber
-        )
+           int expectedLastLineNumber)
         {
-            VisualBasicTokenizer tokens = new VisualBasicTokenizer
-            (
+            VisualBasicTokenizer tokens = new VisualBasicTokenizer(
                 StreamHelpers.StringToStream(source),
-                false
-            );
+                false);
             string results = "";
             string tokenKey = "";
             int lastLine = 0;
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index 35b49a2a38d..d25217688a2 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -670,8 +670,7 @@ public void DeclaredTypeForPositionalParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: CLSCompliantAttribute(true)]"
-            );
+                @"[assembly: CLSCompliantAttribute(true)]");
         }
 
         /// <summary>
@@ -689,8 +688,7 @@ public void DeclaredTypeForNamedParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: TestAttribute(Int32Argument=42, BoolArgument=false)]"
-            );
+                @"[assembly: TestAttribute(Int32Argument=42, BoolArgument=false)]");
         }
 
         /// <summary>
@@ -707,8 +705,7 @@ public void DeclaredTypedWithoutCorrespondingNamedParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: TestAttribute(Int32Argument_TypeName=""System.Int32"", BoolArgument=false)]"
-            );
+                @"[assembly: TestAttribute(Int32Argument_TypeName=""System.Int32"", BoolArgument=false)]");
         }
 
         /// <summary>
@@ -723,8 +720,7 @@ public void DeclaredTypeIsUnknown()
 
             ExecuteAndVerifyFailure(
                 CreateTask("c#", attribute),
-                "MSB3715"
-            );
+                "MSB3715");
         }
 
         /// <summary>
@@ -739,8 +735,7 @@ public void DeclaredTypeCausesConversionFailure()
 
             ExecuteAndVerifyFailure(
                 CreateTask("c#", attribute),
-                "MSB3716"
-            );
+                "MSB3716");
         }
 
         /// <summary>
@@ -755,8 +750,7 @@ public void DeclaredTypeCausesOverflow()
 
             ExecuteAndVerifyFailure(
                 CreateTask("c#", attribute),
-                "MSB3716"
-            );
+                "MSB3716");
         }
 
         /// <summary>
@@ -771,8 +765,7 @@ public void DeclaredTypeIsEnum()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: TestAttribute(System.DateTimeKind.Local)]"
-            );
+                @"[assembly: TestAttribute(System.DateTimeKind.Local)]");
         }
 
         /// <summary>
@@ -787,8 +780,7 @@ public void DeclaredTypeIsTypeInCSharp()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: TestAttribute(typeof(System.Console))]"
-            );
+                @"[assembly: TestAttribute(typeof(System.Console))]");
         }
 
         /// <summary>
@@ -803,8 +795,7 @@ public void DeclaredTypeIsTypeInVB()
 
             ExecuteAndVerifySuccess(
                 CreateTask("visualbasic", attribute),
-                @"<Assembly: TestAttribute(GetType(System.Console))>"
-            );
+                @"<Assembly: TestAttribute(GetType(System.Console))>");
         }
 
         /// <summary>
@@ -820,8 +811,7 @@ public void DeclaredTypeOfArrayIsNotSupported()
 
             ExecuteAndVerifyFailure(
                 CreateTask("c#", attribute),
-                "MSB3716"
-            );
+                "MSB3716");
         }
 
         /// <summary>
@@ -837,8 +827,7 @@ public void LiteralPositionalParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: TestAttribute(42 /* A comment */)]"
-            );
+                @"[assembly: TestAttribute(42 /* A comment */)]");
         }
 
         /// <summary>
@@ -854,8 +843,7 @@ public void LiteralNamedParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: TestAttribute(TestParameter=42 /* A comment */)]"
-            );
+                @"[assembly: TestAttribute(TestParameter=42 /* A comment */)]");
         }
 
         /// <summary>
@@ -870,8 +858,7 @@ public void InferredTypeForPositionalParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: CLSCompliantAttribute(true)]"
-            );
+                @"[assembly: CLSCompliantAttribute(true)]");
         }
 
         /// <summary>
@@ -887,8 +874,7 @@ public void InferredTypeForNamedParameter()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(""MyAssembly"", AllInternalsVisible=true)]"
-            );
+                @"[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(""MyAssembly"", AllInternalsVisible=true)]");
         }
 
         /// <summary>
@@ -914,8 +900,7 @@ public void InferredTypePrefersStringWhenMultipleConstructorsAreFound()
             // all strings should be preferred over all other constructors.
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.Diagnostics.Contracts.ContractOptionAttribute(""a"", ""b"", ""false"")]"
-            );
+                @"[assembly: System.Diagnostics.Contracts.ContractOptionAttribute(""a"", ""b"", ""false"")]");
         }
 
         /// <summary>
@@ -940,8 +925,7 @@ public void InferredTypeWithMultipleAttributeConstructorsIsDeterministic()
             // is alphabetically before any of the other types.
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.Reflection.AssemblyFlagsAttribute(2)]"
-            );
+                @"[assembly: System.Reflection.AssemblyFlagsAttribute(2)]");
 
             // To prove that it's treating the argument as an int,
             // we can specify an enum value which should fail type
@@ -949,8 +933,7 @@ public void InferredTypeWithMultipleAttributeConstructorsIsDeterministic()
             attribute.SetMetadata("_Parameter1", "PublicKey");
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.Reflection.AssemblyFlagsAttribute(""PublicKey"")]"
-            );
+                @"[assembly: System.Reflection.AssemblyFlagsAttribute(""PublicKey"")]");
         }
 
         /// <summary>
@@ -967,8 +950,7 @@ public void InferredTypeFallsBackToStringWhenTypeCannotBeInferred()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.ComponentModel.TypeConverterAttribute(""false"")]"
-            );
+                @"[assembly: System.ComponentModel.TypeConverterAttribute(""false"")]");
         }
 
         /// <summary>
@@ -984,8 +966,7 @@ public void InferredTypeFallsBackToStringWhenTypeConversionFails()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.Diagnostics.DebuggableAttribute(true, ""42"")]"
-            );
+                @"[assembly: System.Diagnostics.DebuggableAttribute(true, ""42"")]");
         }
 
         /// <summary>
@@ -1003,8 +984,7 @@ public void UsingInferredDeclaredTypesAndLiteralsInSameAttribute()
 
             ExecuteAndVerifySuccess(
                 CreateTask("c#", attribute),
-                @"[assembly: System.Diagnostics.Contracts.ContractOptionAttribute(""foo"", ""bar"" /* setting */, false)]"
-            );
+                @"[assembly: System.Diagnostics.Contracts.ContractOptionAttribute(""foo"", ""bar"" /* setting */, false)]");
         }
 
         private WriteCodeFragment CreateTask(string language, params TaskItem[] attributes)
diff --git a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
index 824e5507aeb..31bbd2cc356 100644
--- a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
+++ b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
@@ -187,8 +187,7 @@ public void TestComplexIntegerLessThanMin()
             {
                 object fakeTaskInstance = CreateFakeTask();
                 XamlTestHelpers.SetProperty(fakeTaskInstance, "ComplexInteger", 2);
-            }
-           );
+            });
         }
 
         [Fact]
@@ -201,8 +200,7 @@ public void TestComplexIntegerGreaterThanMax()
                 XamlTestHelpers.SetProperty(fakeTaskInstance, "ComplexInteger", 256);
                 string expectedResult = "/always /Ci256 /Cr:CT";
                 CheckCommandLine(expectedResult, XamlTestHelpers.GenerateCommandLine(fakeTaskInstance));
-            }
-           );
+            });
         }
         [Fact]
         [Trait("Category", "mono-osx-failing")]
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index 07507fab720..d3af82015a1 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -629,8 +629,7 @@ public void MissingOutputFile()
                 }
 
                 CleanUp(dir);
-            }
-           );
+            });
         }
         /// <summary>
         /// Missing XmlFile file.
diff --git a/src/Tasks/Al.cs b/src/Tasks/Al.cs
index 6ec4429ad6f..0121aadebd8 100644
--- a/src/Tasks/Al.cs
+++ b/src/Tasks/Al.cs
@@ -353,19 +353,15 @@ protected internal override void AddResponseFileCommands(CommandLineBuilderExten
 
             commandLine.AppendSwitchIfNotNull("", SourceModules, new[] { "TargetFile" });
 
-            commandLine.AppendSwitchIfNotNull
-            (
+            commandLine.AppendSwitchIfNotNull(
                 "/embed:",
                 EmbedResources,
-                new[] { "LogicalName", "Access" }
-            );
+                new[] { "LogicalName", "Access" });
 
-            commandLine.AppendSwitchIfNotNull
-            (
+            commandLine.AppendSwitchIfNotNull(
                 "/link:",
                 LinkResources,
-                new[] { "LogicalName", "TargetFile", "Access" }
-            );
+                new[] { "LogicalName", "TargetFile", "Access" });
 
             // It's a good idea for the response file to be the very last switch passed, just
             // from a predictability perspective.  This is also consistent with the compiler
diff --git a/src/Tasks/AppConfig/DependentAssembly.cs b/src/Tasks/AppConfig/DependentAssembly.cs
index 07a58ffc375..e8c3397db9e 100644
--- a/src/Tasks/AppConfig/DependentAssembly.cs
+++ b/src/Tasks/AppConfig/DependentAssembly.cs
@@ -82,14 +82,12 @@ internal void Read(XmlReader reader)
                         }
                     }
 
-                    string assemblyName = String.Format
-                    (
+                    string assemblyName = String.Format(
                         CultureInfo.InvariantCulture,
                         "{0}, Version=0.0.0.0, Culture={1}, PublicKeyToken={2}",
                         name,
                         culture,
-                        publicKeyToken
-                    );
+                        publicKeyToken);
 
                     try
                     {
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
index af687d163b0..6b84da6d636 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
@@ -25,13 +25,10 @@ internal class AssemblyFoldersExResolver : Resolver
         /// Regex for breaking up the searchpath pieces.
         /// </summary>
         private static readonly Lazy<Regex> s_crackAssemblyFoldersExSentinel = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 AssemblyResolutionConstants.assemblyFoldersExSentinel +
                 "(?<REGISTRYKEYROOT>[^,]*),(?<TARGETRUNTIMEVERSION>[^,]*),(?<REGISTRYKEYSUFFIX>[^,]*)([,]*)(?<CONDITIONS>.*)}",
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                )
-            );
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         /// <summary>
         /// Delegate.
@@ -200,8 +197,7 @@ private void LazyInitialize()
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -212,8 +208,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
index 45694f0cb88..d2610da0332 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
@@ -24,13 +24,10 @@ internal class AssemblyFoldersFromConfigResolver : Resolver
         ///     Regex for breaking up the search path pieces.
         /// </summary>
         private static readonly Lazy<Regex> s_crackAssemblyFoldersFromConfigSentinel = new Lazy<Regex>(
-            () => new Regex
-                (
+            () => new Regex(
                 AssemblyResolutionConstants.assemblyFoldersFromConfigSentinel +
                 "(?<ASSEMBLYFOLDERCONFIGFILE>[^,]*),(?<TARGETRUNTIMEVERSION>[^,]*)}",
-                RegexOptions.IgnoreCase | RegexOptions.Compiled
-                )
-            );
+                RegexOptions.IgnoreCase | RegexOptions.Compiled));
 
         /// <summary>
         /// Whether or not the search path could be cracked.
@@ -169,8 +166,7 @@ private void LazyInitialize()
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -181,8 +177,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
index 53f7f0cfcd5..48d53690d9b 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
@@ -42,8 +42,7 @@ public AssemblyFoldersResolver(string searchPathElement, GetAssemblyName getAsse
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -55,8 +54,7 @@ public override bool Resolve
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
 
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 767f33ac23a..abb3e3a77cc 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -201,14 +201,12 @@ public FrameworkName FrameworkNameAttribute
         /// <param name="dependencies">Receives the list of dependencies.</param>
         /// <param name="scatterFiles">Receives the list of associated scatter files.</param>
         /// <param name="frameworkName">Gets the assembly name.</param>
-        internal static void GetAssemblyMetadata
-        (
+        internal static void GetAssemblyMetadata(
             string path,
             ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache,
             out AssemblyNameExtension[] dependencies,
             out string[] scatterFiles,
-            out FrameworkName frameworkName
-        )
+            out FrameworkName frameworkName)
         {
             var import = assemblyMetadataCache?.GetOrAdd(path, p => new AssemblyMetadata(p))
                 ?? new AssemblyMetadata(path);
diff --git a/src/Tasks/AssemblyDependency/AssemblyResolution.cs b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
index 178c57101a5..d67f6eab57e 100644
--- a/src/Tasks/AssemblyDependency/AssemblyResolution.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
@@ -42,8 +42,7 @@ internal static class AssemblyResolution
         /// <param name="resolvedSearchPath">Receives the searchPath that the reference was resolved at. Empty if not resolved.</param>
         /// <param name="userRequestedSpecificFile"> This will be true if the user requested a specific file.</param>
         /// <returns>The resolved path</returns>
-        internal static string ResolveReference
-        (
+        internal static string ResolveReference(
             IEnumerable<Resolver[]> jaggedResolvers,
             AssemblyNameExtension assemblyName,
             string sdkName,
@@ -55,8 +54,7 @@ internal static string ResolveReference
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string resolvedSearchPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             // Initialize outs.
             userRequestedSpecificFile = false;
@@ -76,8 +74,7 @@ out bool userRequestedSpecificFile
                 {
                     if
                     (
-                        resolver.Resolve
-                        (
+                        resolver.Resolve(
                             assemblyName,
                             sdkName,
                             rawFileNameCandidate,
@@ -88,9 +85,7 @@ out bool userRequestedSpecificFile
                             assemblyFolderKey,
                             assembliesConsideredAndRejected,
                             out string fileLocation,
-                            out userRequestedSpecificFile
-                        )
-                    )
+                            out userRequestedSpecificFile))
                     {
                         resolvedSearchPath = resolver.SearchPath;
                         return fileLocation;
@@ -139,8 +134,7 @@ out userRequestedSpecificFile
         /// <param name="log"></param>
         /// <returns></returns>
 #endif
-        public static Resolver[] CompileSearchPaths
-        (
+        public static Resolver[] CompileSearchPaths(
             IBuildEngine buildEngine,
             string[] searchPaths,
             string[] candidateAssemblyFiles,
@@ -157,8 +151,7 @@ public static Resolver[] CompileSearchPaths
             GetAssemblyRuntimeVersion getRuntimeVersion,
             Version targetedRuntimeVersion,
             GetAssemblyPathInGac getAssemblyPathInGac,
-            TaskLoggingHelper log
-        )
+            TaskLoggingHelper log)
         {
             var resolvers = new Resolver[searchPaths.Length];
 
@@ -216,14 +209,12 @@ TaskLoggingHelper log
         /// <summary>
         /// Build a resolver array from a set of directories to resolve directly from.
         /// </summary>
-        internal static Resolver[] CompileDirectories
-        (
+        internal static Resolver[] CompileDirectories(
             List<string> directories,
             FileExists fileExists,
             GetAssemblyName getAssemblyName,
             GetAssemblyRuntimeVersion getRuntimeVersion,
-            Version targetedRuntimeVersion
-        )
+            Version targetedRuntimeVersion)
         {
             var resolvers = new Resolver[directories.Count];
             for (int i = 0; i < directories.Count; i++)
diff --git a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
index 35c170ed419..a3b5834a0cf 100644
--- a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
+++ b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
@@ -51,8 +51,7 @@ public CandidateAssemblyFilesResolver(string[] candidateAssemblyFiles, string se
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -63,8 +62,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/DirectoryResolver.cs b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
index f2d9cee0b5b..70d13977c96 100644
--- a/src/Tasks/AssemblyDependency/DirectoryResolver.cs
+++ b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
@@ -37,8 +37,7 @@ public DirectoryResolver(string searchPathElement, GetAssemblyName getAssemblyNa
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -49,8 +48,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs b/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
index 6312220d3f2..752338f0c1e 100644
--- a/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
+++ b/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
@@ -45,8 +45,7 @@ public FrameworkPathResolver(string[] frameworkPaths, InstalledAssemblies instal
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -57,8 +56,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/GacResolver.cs b/src/Tasks/AssemblyDependency/GacResolver.cs
index 40b3c26eadc..df7c2bda58e 100644
--- a/src/Tasks/AssemblyDependency/GacResolver.cs
+++ b/src/Tasks/AssemblyDependency/GacResolver.cs
@@ -50,8 +50,7 @@ public GacResolver(System.Reflection.ProcessorArchitecture targetProcessorArchit
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -62,8 +61,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index f48289a9686..d57e6f71769 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -239,8 +239,7 @@ private static string CheckForFullFusionNameInGac(AssemblyNameExtension assembly
         /// <param name="getGacEnumerator">Delegate to get the enumerator which will enumerate over the GAC.</param>
         /// <param name="specificVersion">Whether to check for a specific version.</param>
         /// <returns>The path to the assembly. Empty if none exists.</returns>
-        internal static string GetLocation
-        (
+        internal static string GetLocation(
             AssemblyNameExtension strongName,
             ProcessorArchitecture targetProcessorArchitecture,
             GetAssemblyRuntimeVersion getRuntimeVersion,
@@ -249,8 +248,7 @@ internal static string GetLocation
             FileExists fileExists,
             GetPathFromFusionName getPathFromFusionName,
             GetGacEnumerator getGacEnumerator,
-            bool specificVersion
-        )
+            bool specificVersion)
         {
             return GetLocation(null, strongName, targetProcessorArchitecture, getRuntimeVersion, targetedRuntimeVersion, fullFusionName, fileExists, getPathFromFusionName, getGacEnumerator, specificVersion);
         }
@@ -269,8 +267,7 @@ bool specificVersion
         /// <param name="getGacEnumerator">Delegate to get the enumerator which will enumerate over the GAC.</param>
         /// <param name="specificVersion">Whether to check for a specific version.</param>
         /// <returns>The path to the assembly. Empty if none exists.</returns>
-        internal static string GetLocation
-        (
+        internal static string GetLocation(
             IBuildEngine4 buildEngine,
             AssemblyNameExtension strongName,
             ProcessorArchitecture targetProcessorArchitecture,
@@ -280,8 +277,7 @@ internal static string GetLocation
             FileExists fileExists,
             GetPathFromFusionName getPathFromFusionName,
             GetGacEnumerator getGacEnumerator,
-            bool specificVersion
-        )
+            bool specificVersion)
         {
             ConcurrentDictionary<AssemblyNameExtension, string> fusionNameToResolvedPath = null;
             bool useGacRarCache = Environment.GetEnvironmentVariable("MSBUILDDISABLEGACRARCACHE") == null;
diff --git a/src/Tasks/AssemblyDependency/HintPathResolver.cs b/src/Tasks/AssemblyDependency/HintPathResolver.cs
index 381e7d3d60e..62b44fe4860 100644
--- a/src/Tasks/AssemblyDependency/HintPathResolver.cs
+++ b/src/Tasks/AssemblyDependency/HintPathResolver.cs
@@ -38,8 +38,7 @@ public HintPathResolver(string searchPathElement, GetAssemblyName getAssemblyNam
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -50,8 +49,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             // If there is newline or white space `FileUtilities.NormalizePath` will get garbage result(throw on fullframework).
             // Adding FileUtilities.NormalizePath (https://github.com/dotnet/msbuild/pull/4414) caused https://github.com/dotnet/msbuild/issues/4593
diff --git a/src/Tasks/AssemblyDependency/InstalledAssemblies.cs b/src/Tasks/AssemblyDependency/InstalledAssemblies.cs
index cf35873ca38..0bf89ca122c 100644
--- a/src/Tasks/AssemblyDependency/InstalledAssemblies.cs
+++ b/src/Tasks/AssemblyDependency/InstalledAssemblies.cs
@@ -33,14 +33,12 @@ internal InstalledAssemblies(RedistList redistList)
         /// <param name="isPrerequisite">Whether this assembly will be available on target machines.</param>
         /// <param name="isRedistRoot">May be true, false or null. Null means there was no IsRedistRoot in the redist list.</param>
         /// <param name="redistName">Name of the corresponding Resist specified in the redist list.</param>
-        internal void GetInfo
-        (
+        internal void GetInfo(
             AssemblyNameExtension assemblyName,
             out Version unifiedVersion,
             out bool isPrerequisite,
             out bool? isRedistRoot,
-            out string redistName
-        )
+            out string redistName)
         {
             unifiedVersion = assemblyName.Version;
             isPrerequisite = false;
diff --git a/src/Tasks/AssemblyDependency/RawFilenameResolver.cs b/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
index 8b7a26432e2..d7d6c95967a 100644
--- a/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
+++ b/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
@@ -38,8 +38,7 @@ public RawFilenameResolver(string searchPathElement, GetAssemblyName getAssembly
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -50,8 +49,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index 93321d38d9b..12f7b1c0e14 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -877,12 +877,10 @@ internal void MakeDependentAssemblyReference(Reference sourceReference)
         /// <param name="sourceItem">The source item.</param>
         /// <param name="wantSpecificVersionValue">Whether the version needs to match exactly or loosely.</param>
         /// <param name="executableExtension">The filename extension that the resulting assembly must have.</param>
-        internal void MakePrimaryAssemblyReference
-        (
+        internal void MakePrimaryAssemblyReference(
             ITaskItem sourceItem,
             bool wantSpecificVersionValue,
-            string executableExtension
-        )
+            string executableExtension)
         {
             CopyLocal = CopyLocalState.Undecided;
 
@@ -926,14 +924,11 @@ internal static bool IsFrameworkFile(string fullPath, string[] frameworkPaths)
                 {
                     if
                     (
-                        String.Compare
-                        (
+                        String.Compare(
                             frameworkPath, 0,
                             fullPath, 0,
                             frameworkPath.Length,
-                            StringComparison.OrdinalIgnoreCase
-                        ) == 0
-                    )
+                            StringComparison.OrdinalIgnoreCase) == 0)
                     {
                         return true;
                     }
@@ -955,8 +950,7 @@ internal static bool IsFrameworkFile(string fullPath, string[] frameworkPaths)
         /// <param name="copyLocalDependenciesWhenParentReferenceInGac">if set to true, copy local dependencies when only parent reference in gac.</param>
         /// <param name="doNotCopyLocalIfInGac">If set to true, do not copy local a reference that exists in the GAC (legacy behavior).</param>
         /// <param name="referenceTable">The reference table.</param>
-        internal void SetFinalCopyLocalState
-        (
+        internal void SetFinalCopyLocalState(
             AssemblyNameExtension assemblyName,
             string[] frameworkPaths,
             ProcessorArchitecture targetProcessorArchitecture,
@@ -966,8 +960,7 @@ internal void SetFinalCopyLocalState
             GetAssemblyPathInGac getAssemblyPathInGac,
             bool copyLocalDependenciesWhenParentReferenceInGac,
             bool doNotCopyLocalIfInGac,
-            ReferenceTable referenceTable
-        )
+            ReferenceTable referenceTable)
         {
             if (IsBadImage)
             {
@@ -999,12 +992,10 @@ ReferenceTable referenceTable
             if (IsPrimary)
             {
                 bool found;
-                bool result = MetadataConversionUtilities.TryConvertItemMetadataToBool
-                    (
+                bool result = MetadataConversionUtilities.TryConvertItemMetadataToBool(
                         PrimarySourceItem,
                         ItemMetadataNames.privateMetadata,
-                        out found
-                    );
+                        out found);
 
                 if (found)
                 {
@@ -1023,12 +1014,10 @@ out found
                 foreach (ITaskItem item in _sourceItems.Values)
                 {
                     bool found;
-                    bool result = MetadataConversionUtilities.TryConvertItemMetadataToBool
-                        (
+                    bool result = MetadataConversionUtilities.TryConvertItemMetadataToBool(
                             item,
                             ItemMetadataNames.privateMetadata,
-                            out found
-                        );
+                            out found);
 
                     if (found)
                     {
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 322ee5c7cc8..e08362edb59 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -240,8 +240,7 @@ internal sealed class ReferenceTable
         /// <param name="warnOrErrorOnTargetArchitectureMismatch"></param>
         /// <param name="ignoreFrameworkAttributeVersionMismatch"></param>
 #endif
-        internal ReferenceTable
-        (
+        internal ReferenceTable(
             IBuildEngine buildEngine,
             bool findDependencies,
             bool findSatellites,
@@ -335,8 +334,7 @@ internal ReferenceTable
             }
 
             // Compile searchpaths into fast resolver array.
-            Resolvers = AssemblyResolution.CompileSearchPaths
-                (
+            Resolvers = AssemblyResolution.CompileSearchPaths(
                     buildEngine,
                     searchPaths,
                     candidateAssemblyFiles,
@@ -353,8 +351,7 @@ internal ReferenceTable
                     getRuntimeVersion,
                     targetedRuntimeVersion,
                     getAssemblyPathInGac,
-                    log
-                );
+                    log);
         }
 
         /// <summary>
@@ -436,11 +433,9 @@ internal Reference GetReference(AssemblyNameExtension assemblyName)
         /// <param name="reference">The reference to work on</param>
         /// <param name="assemblyFileName">The path to the assembly file.</param>
         /// <returns>The AssemblyName of assemblyFileName</returns>
-        private AssemblyNameExtension NameAssemblyFileReference
-        (
+        private AssemblyNameExtension NameAssemblyFileReference(
             Reference reference,
-            string assemblyFileName
-        )
+            string assemblyFileName)
         {
             AssemblyNameExtension assemblyName = null;
 
@@ -467,23 +462,17 @@ string assemblyFileName
                 {
                     assemblyName = new AssemblyNameExtension("*directory*");
 
-                    reference.AddError
-                    (
-                        new ReferenceResolutionException
-                        (
+                    reference.AddError(
+                        new ReferenceResolutionException(
                             ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileGotDirectory", reference.FullPath),
-                            null
-                        )
-                    );
+                            null));
                     reference.FullPath = String.Empty;
                 }
 
                 if (assemblyName == null)
                 {
-                    reference.AddError
-                    (
-                        new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null)
-                    );
+                    reference.AddError(
+                        new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null));
                 }
             }
             catch (BadImageFormatException e)
@@ -513,12 +502,10 @@ string assemblyFileName
         /// <param name="referenceAssemblyFiles">The task items which contain file names to add.</param>
         /// <param name="referenceAssemblyNames">The task items which contain fusion names to add.</param>
         /// <param name="exceptions">Exceptions encountered while setting primary items. Exceptions are logged, but it doesn't stop the resolution process.</param>
-        private void SetPrimaryItems
-        (
+        private void SetPrimaryItems(
             ITaskItem[] referenceAssemblyFiles,
             ITaskItem[] referenceAssemblyNames,
-            List<Exception> exceptions
-        )
+            List<Exception> exceptions)
         {
             // Loop over the referenceAssemblyFiles provided and add each one that doesn't exist.
             // Set the primary flag to 'true'.
@@ -551,10 +538,8 @@ List<Exception> exceptions
         /// </summary>
         /// <param name="referenceAssemblyName">The task item which contain fusion names to add.</param>
         /// <returns>Resulting exception containing resolution failure details, if any: too costly to throw it.</returns>
-        private Exception SetPrimaryAssemblyReferenceItem
-        (
-            ITaskItem referenceAssemblyName
-        )
+        private Exception SetPrimaryAssemblyReferenceItem(
+            ITaskItem referenceAssemblyName)
         {
             // Get the desired executable extension.
             string executableExtension = referenceAssemblyName.GetMetadata(ItemMetadataNames.executableExtension);
@@ -591,10 +576,8 @@ ITaskItem referenceAssemblyName
             // 2) We have found the metadata and it is specifically set to false
             if (assemblyName != null && (isSimpleName || (foundSpecificVersionMetadata && !wantSpecificVersion)))
             {
-                assemblyName = new AssemblyNameExtension
-                (
-                    AssemblyNameExtension.EscapeDisplayNameCharacters(assemblyName.Name)
-                );
+                assemblyName = new AssemblyNameExtension(
+                    AssemblyNameExtension.EscapeDisplayNameCharacters(assemblyName.Name));
 
                 isSimpleName = assemblyName.IsSimpleName;
             }
@@ -630,11 +613,9 @@ ITaskItem referenceAssemblyName
             // So, we just ignore this setting on down-level platforms
             if (_projectTargetFramework != null && _projectTargetFramework >= s_targetFrameworkVersion_40)
             {
-                reference.EmbedInteropTypes = MetadataConversionUtilities.TryConvertItemMetadataToBool
-                    (
+                reference.EmbedInteropTypes = MetadataConversionUtilities.TryConvertItemMetadataToBool(
                         referenceAssemblyName,
-                        ItemMetadataNames.embedInteropTypes
-                    );
+                        ItemMetadataNames.embedInteropTypes);
             }
 
             // Set the AssemblyFolderKey if there is one.
@@ -700,10 +681,8 @@ ITaskItem referenceAssemblyName
                     return new InvalidReferenceAssemblyNameException(referenceAssemblyName.ItemSpec);
                 }
 
-                assemblyName = new AssemblyNameExtension
-                (
-                    AssemblyNameExtension.EscapeDisplayNameCharacters(reference.FileNameWithoutExtension)
-                );
+                assemblyName = new AssemblyNameExtension(
+                    AssemblyNameExtension.EscapeDisplayNameCharacters(reference.FileNameWithoutExtension));
             }
 
             // Check to see if this is a prereq assembly.
@@ -713,14 +692,12 @@ ITaskItem referenceAssemblyName
             }
             else
             {
-                _installedAssemblies.GetInfo
-                (
+                _installedAssemblies.GetInfo(
                     assemblyName,
                     out _,
                     out bool isPrerequisite,
                     out bool? isRedistRoot,
-                    out string redistName
-                );
+                    out string redistName);
 
                 reference.IsPrerequisite = isPrerequisite;
                 reference.IsRedistRoot = isRedistRoot;
@@ -858,28 +835,22 @@ private void SetPrimaryFileItem(ITaskItem referenceAssemblyFile)
 
                 string itemSpec = referenceAssemblyFile.ItemSpec;
                 bool hasSpecificVersionMetadata = MetadataConversionUtilities.TryConvertItemMetadataToBool(referenceAssemblyFile, ItemMetadataNames.specificVersion);
-                reference.MakePrimaryAssemblyReference
-                (
+                reference.MakePrimaryAssemblyReference(
                     referenceAssemblyFile,
                     hasSpecificVersionMetadata,
-                    Path.GetExtension(itemSpec)
-                );
+                    Path.GetExtension(itemSpec));
 
-                AssemblyNameExtension assemblyName = NameAssemblyFileReference
-                (
+                AssemblyNameExtension assemblyName = NameAssemblyFileReference(
                     reference,
-                    itemSpec  // Contains the assembly file name.
-                );
+                    itemSpec);  // Contains the assembly file name.
 
                 // Embed Interop Types aka "NOPIAs" support is not available for Fx < 4.0
                 // So, we just ignore this setting on down-level platforms
                 if (_projectTargetFramework >= s_targetFrameworkVersion_40)
                 {
-                    reference.EmbedInteropTypes = MetadataConversionUtilities.TryConvertItemMetadataToBool
-                        (
+                    reference.EmbedInteropTypes = MetadataConversionUtilities.TryConvertItemMetadataToBool(
                             referenceAssemblyFile,
-                            ItemMetadataNames.embedInteropTypes
-                        );
+                            ItemMetadataNames.embedInteropTypes);
                 }
 
                 AddReference(assemblyName, reference);
@@ -899,10 +870,8 @@ private void SetPrimaryFileItem(ITaskItem referenceAssemblyFile)
         /// Find related files like .pdbs and .xmls
         /// </summary>
         /// <param name="reference">The reference to the parent assembly.</param>
-        private void FindRelatedFiles
-        (
-            Reference reference
-        )
+        private void FindRelatedFiles(
+            Reference reference)
         {
             string baseName = reference.FullPathWithoutExtension;
 
@@ -946,10 +915,8 @@ Reference reference
         /// Find satellite assemblies.
         /// </summary>
         /// <param name="reference">The reference to the parent assembly.</param>
-        private void FindSatellites
-        (
-            Reference reference
-        )
+        private void FindSatellites(
+            Reference reference)
         {
             try
             {
@@ -993,10 +960,8 @@ Reference reference
         /// Find serialization assemblies.
         /// </summary>
         /// <param name="reference">The reference to the parent assembly.</param>
-        private void FindSerializationAssemblies
-        (
-            Reference reference
-        )
+        private void FindSerializationAssemblies(
+            Reference reference)
         {
             string serializationAssemblyFilename = reference.FileNameWithoutExtension + ".XmlSerializers.dll";
             string serializationAssemblyPath = Path.Combine(reference.DirectoryName, serializationAssemblyFilename);
@@ -1010,12 +975,10 @@ Reference reference
         /// <summary>
         /// Get unified dependencies and scatter files for a reference.
         /// </summary>
-        private void GetUnifiedAssemblyMetadata
-            (
+        private void GetUnifiedAssemblyMetadata(
                 Reference reference,
                 out IEnumerable<UnifiedAssemblyName> unifiedDependencies,
-                out string[] scatterFiles
-            )
+                out string[] scatterFiles)
         {
             // Shortcut if this is a prereq file--don't find dependencies.
             // We also don't want to look for dependencies if we already know
@@ -1027,14 +990,12 @@ out string[] scatterFiles
                 return;
             }
 
-            _getAssemblyMetadata
-            (
+            _getAssemblyMetadata(
                 reference.FullPath,
                 _assemblyMetadataCache,
                 out AssemblyNameExtension[] dependentAssemblies,
                 out scatterFiles,
-                out FrameworkName frameworkName
-            );
+                out FrameworkName frameworkName);
 
             reference.FrameworkNameAttribute = frameworkName;
 
@@ -1083,10 +1044,8 @@ out FrameworkName frameworkName
         /// Given an enumerator of pre-unified assembly names, return an enumerator of unified
         /// assembly names.
         /// </summary>
-        private IEnumerable<UnifiedAssemblyName> GetUnifiedAssemblyNames
-        (
-            IEnumerable<AssemblyNameExtension> preUnificationAssemblyNames
-        )
+        private IEnumerable<UnifiedAssemblyName> GetUnifiedAssemblyNames(
+            IEnumerable<AssemblyNameExtension> preUnificationAssemblyNames)
         {
             foreach (AssemblyNameExtension preUnificationAssemblyName in preUnificationAssemblyNames)
             {
@@ -1106,21 +1065,17 @@ IEnumerable<AssemblyNameExtension> preUnificationAssemblyNames
         /// </summary>
         /// <param name="reference">The reference to the parent assembly.</param>
         /// <param name="newEntries">New references are added to this list.</param>
-        private void FindDependenciesAndScatterFiles
-        (
+        private void FindDependenciesAndScatterFiles(
             Reference reference,
-            List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
-        )
+            List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries)
         {
             // Before checking for dependencies check to see if the reference itself exists. 
             // Even though to get to this point the reference must be resolved
             // the reference may not exist on disk if the reference is a project to project reference.
             if (!_fileExists(reference.FullPath))
             {
-                reference.AddError
-                      (
-                          new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null)
-                      );
+                reference.AddError(
+                          new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null));
 
                 return;
             }
@@ -1265,12 +1220,10 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer
         /// <param name="assemblyName">The fusion name for this reference.</param>
         /// <param name="rawFileNameCandidate">The file name to match if {RawFileName} is seen. (May be null).</param>
         /// <param name="reference">The reference object.</param>
-        private void ResolveReference
-        (
+        private void ResolveReference(
             AssemblyNameExtension assemblyName,
             string rawFileNameCandidate,
-            Reference reference
-        )
+            Reference reference)
         {
             // Now, resolve this reference.
             string resolvedPath = null;
@@ -1313,8 +1266,7 @@ Reference reference
             // Resolve
             try
             {
-                resolvedPath = AssemblyResolution.ResolveReference
-                (
+                resolvedPath = AssemblyResolution.ResolveReference(
                     jaggedResolvers,
                     assemblyName,
                     reference.SDKName,
@@ -1326,8 +1278,7 @@ Reference reference
                     reference.AssemblyFolderKey,
                     assembliesConsideredAndRejected,
                     out resolvedSearchPath,
-                    out userRequestedSpecificFile
-                );
+                    out userRequestedSpecificFile);
             }
             catch (BadImageFormatException e)
             {
@@ -1348,14 +1299,10 @@ out userRequestedSpecificFile
             {
                 if (assemblyName != null)
                 {
-                    reference.AddError
-                    (
-                        new ReferenceResolutionException
-                        (
+                    reference.AddError(
+                        new ReferenceResolutionException(
                             ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.CouldNotLocateAssembly", assemblyName.FullName),
-                            null
-                        )
-                    );
+                            null));
                 }
             }
         }
@@ -1613,13 +1560,11 @@ private static void RemoveDependencies(Reference removedReference, Dictionary<As
         /// <param name="referenceAssemblyFiles">The task items which contain file names to add.</param>
         /// <param name="referenceAssemblyNames">The task items which contain fusion names to add.</param>
         /// <param name="exceptions">Errors encountered while computing closure.</param>
-        internal void ComputeClosure
-        (
+        internal void ComputeClosure(
             IEnumerable<DependentAssembly> remappedAssembliesValue,
             ITaskItem[] referenceAssemblyFiles,
             ITaskItem[] referenceAssemblyNames,
-            List<Exception> exceptions
-        )
+            List<Exception> exceptions)
         {
             MSBuildEventSource.Log.RarComputeClosureStart();
             {
@@ -1822,11 +1767,9 @@ private void ResolveConflictsBetweenReferences(List<AssemblyNameReference> assem
 
             while (comparisonIndex < assemblyReferences.Count)
             {
-                bool isLeftVictim = ResolveAssemblyNameConflict
-                (
+                bool isLeftVictim = ResolveAssemblyNameConflict(
                     assemblyReferences[currentWinnerIndex],
-                    assemblyReferences[comparisonIndex]
-                ) == 0;
+                    assemblyReferences[comparisonIndex]) == 0;
 
                 if (isLeftVictim)
                 {
@@ -1841,11 +1784,9 @@ private void ResolveConflictsBetweenReferences(List<AssemblyNameReference> assem
         /// Based on the closure, get a table of ideal remappings needed to
         /// produce zero conflicts.
         /// </summary>
-        internal void ResolveConflicts
-        (
+        internal void ResolveConflicts(
             out List<DependentAssembly> idealRemappings,
-            out List<AssemblyNameReference> conflictingReferences
-        )
+            out List<AssemblyNameReference> conflictingReferences)
         {
             idealRemappings = null;
             conflictingReferences = null;
@@ -2209,10 +2150,8 @@ private Dictionary<string, List<AssemblyNameReference>> BuildSimpleNameTable()
             return baseNameToReferences;
         }
 
-        private static void RemoveReferencesWithoutConflicts
-        (
-            Dictionary<string, List<AssemblyNameReference>> baseNameToReferences
-        )
+        private static void RemoveReferencesWithoutConflicts(
+            Dictionary<string, List<AssemblyNameReference>> baseNameToReferences)
         {
             string[] baseNames = new string[baseNameToReferences.Count];
             baseNameToReferences.Keys.CopyTo(baseNames, 0);
@@ -2381,13 +2320,11 @@ private static int ResolveAssemblyNameConflict(AssemblyNameReference assemblyRef
                 bool rightConflictLegacyUnified = !isNonUnified && assemblyReference1.reference.IsPrimary;
 
                 // This is ok here because even if the method says two versions are equivalent the algorithm below will still pick the highest version.
-                bool equivalent = AreAssembliesEquivalent
-                (
+                bool equivalent = AreAssembliesEquivalent(
                     leftConflictFusionName,
                     leftConflictLegacyUnified,
                     rightConflictFusionName,
-                    rightConflictLegacyUnified
-                );
+                    rightConflictLegacyUnified);
 
                 Version leftConflictVersion = assemblyReference0.assemblyName.Version;
                 Version rightConflictVersion = assemblyReference1.assemblyName.Version;
@@ -2397,8 +2334,7 @@ private static int ResolveAssemblyNameConflict(AssemblyNameReference assemblyRef
                     // Version comparison only if there are two versions to compare.
                     // Null versions can occur when simply-named assemblies are unresolved.
                     leftConflictVersion != null && rightConflictVersion != null
-                    && leftConflictVersion > rightConflictVersion
-                )
+                    && leftConflictVersion > rightConflictVersion)
                 {
                     // Choose the higher version
                     victim = 1;
@@ -2412,8 +2348,7 @@ private static int ResolveAssemblyNameConflict(AssemblyNameReference assemblyRef
                     // Version comparison only if there are two versions to compare.
                     // Null versions can occur when simply-named assemblies are unresolved.
                     leftConflictVersion != null && rightConflictVersion != null
-                    && leftConflictVersion < rightConflictVersion
-                )
+                    && leftConflictVersion < rightConflictVersion)
                 {
                     // Choose the higher version
                     victim = 0;
@@ -2483,15 +2418,13 @@ private static bool IsAssemblyRemovedFromDotNetFramework(AssemblyNameExtension a
         /// <param name="isRedistRoot">May be true, false or null. Null means there was no IsRedistRoot in the redist list.</param>
         /// <param name="redistName">Name of the corresponding Resist specified in the redist list.</param>
         /// <returns>True if there was a unification.</returns>
-        private bool UnifyAssemblyNameVersions
-        (
+        private bool UnifyAssemblyNameVersions(
             AssemblyNameExtension assemblyName,
             out Version unifiedVersion,
             out UnificationReason unificationReason,
             out bool isPrerequisite,
             out bool? isRedistRoot,
-            out string redistName
-        )
+            out string redistName)
         {
             unifiedVersion = assemblyName.Version;
             isPrerequisite = false;
@@ -2534,14 +2467,12 @@ out string redistName
             // Try for an installed assemblies unification.
             if (_installedAssemblies != null)
             {
-                _installedAssemblies.GetInfo
-                (
+                _installedAssemblies.GetInfo(
                     assemblyName,
                     out unifiedVersion,
                     out isPrerequisite,
                     out isRedistRoot,
-                    out redistName
-                );
+                    out redistName);
 
                 // Was there a unification?
                 if (unifiedVersion != assemblyName.Version)
@@ -2595,16 +2526,14 @@ private bool CompareAssembliesIgnoringVersion(AssemblyName a, AssemblyName b)
         /// <param name="serializationAssemblyFiles">Serialization assembly files.</param>
         /// <param name="scatterFiles">Receives the list of associated scatter files.</param>
         /// <param name="copyLocalFiles">All copy-local files out of primaryFiles+dependencyFiles+relatedFiles+satelliteFiles.</param>
-        internal void GetReferenceItems
-        (
+        internal void GetReferenceItems(
             out ITaskItem[] primaryFiles,
             out ITaskItem[] dependencyFiles,
             out ITaskItem[] relatedFiles,
             out ITaskItem[] satelliteFiles,
             out ITaskItem[] serializationAssemblyFiles,
             out ITaskItem[] scatterFiles,
-            out ITaskItem[] copyLocalFiles
-        )
+            out ITaskItem[] copyLocalFiles)
         {
             var primaryItems = new List<ITaskItem>();
             var dependencyItems = new List<ITaskItem>();
@@ -2619,8 +2548,7 @@ out ITaskItem[] copyLocalFiles
                 AssemblyNameExtension assemblyName = kvp.Key;
                 Reference reference = kvp.Value;
 
-                reference.SetFinalCopyLocalState
-                (
+                reference.SetFinalCopyLocalState(
                     assemblyName,
                     _frameworkPaths,
                     _targetProcessorArchitecture,
@@ -2630,8 +2558,7 @@ out ITaskItem[] copyLocalFiles
                     _getAssemblyPathInGac,
                     _copyLocalDependenciesWhenParentReferenceInGac,
                     _doNotCopyLocalIfInGac,
-                    this
-                );
+                    this);
 
                 // Conflict victims and badimages are filtered out.
                 if (reference.IsBadImage)
@@ -3063,12 +2990,10 @@ private static void FindCopyLocalItems(ITaskItem[] items, List<ITaskItem> copyLo
         {
             foreach (ITaskItem i in items)
             {
-                bool copyLocal = MetadataConversionUtilities.TryConvertItemMetadataToBool
-                    (
+                bool copyLocal = MetadataConversionUtilities.TryConvertItemMetadataToBool(
                         i,
                         ItemMetadataNames.copyLocal,
-                        out bool found
-                    );
+                        out bool found);
 
                 if (found && copyLocal)
                 {
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index ac54e1c047a..3ad5b24594f 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1050,13 +1050,11 @@ public String DependsOnNETStandard
         /// <param name="idealAssemblyRemappingsIdentities">Array of identities of ideal assembly remappings.</param>
         /// <param name="generalResolutionExceptions">List of exceptions that were not attributable to a particular fusion name.</param>
         /// <returns></returns>
-        private bool LogResults
-        (
+        private bool LogResults(
             ReferenceTable dependencyTable,
             List<DependentAssembly> idealAssemblyRemappings,
             List<AssemblyNameReference> idealAssemblyRemappingsIdentities,
-            List<Exception> generalResolutionExceptions
-        )
+            List<Exception> generalResolutionExceptions)
         {
             bool success = true;
             MSBuildEventSource.Log.RarLogResultsStart();
@@ -1180,16 +1178,14 @@ quiet at the engine level.
 
                                     Reference victimReference = dependencyTable.GetReference(conflictVictim);
                                     var newVerStr = idealRemapping.BindingRedirects[j].NewVersion.ToString();
-                                    Log.LogMessageFromResources
-                                    (
+                                    Log.LogMessageFromResources(
                                         MessageImportance.High,
                                         "ResolveAssemblyReference.ConflictRedirectSuggestion",
                                         idealRemappingPartialAssemblyName,
                                         conflictVictim.Version,
                                         victimReference.FullPath,
                                         newVerStr,
-                                        reference.FullPath
-                                    );
+                                        reference.FullPath);
 
                                     if (!SupportsBindingRedirectGeneration && !AutoUnify)
                                     {
@@ -1772,8 +1768,7 @@ private void LogAssembliesConsideredAndRejected(Reference reference, string fusi
                         }
 
                         if ((messageImportance == MessageImportance.Low && (importance == MessageImportance.Normal || importance == MessageImportance.High)) ||
-                            (messageImportance == MessageImportance.Normal && importance == MessageImportance.High)
-                           )
+                            (messageImportance == MessageImportance.Normal && importance == MessageImportance.High))
                         {
                             _showAssemblyFoldersExLocations[location.SearchPath] = importance;
                         }
@@ -2115,8 +2110,7 @@ private List<DependentAssembly> GetAssemblyRemappingsFromAppConfig()
         /// <param name="readMachineTypeFromPEHeader">Delegate use to read machine type from PE Header</param>
         /// <returns>True if there was success.</returns>
 #endif
-        internal bool Execute
-        (
+        internal bool Execute(
             FileExists fileExists,
             DirectoryExists directoryExists,
             GetDirectories getDirectories,
@@ -2133,8 +2127,7 @@ internal bool Execute
 #endif
             GetAssemblyPathInGac getAssemblyPathInGac,
             IsWinMDFile isWinMDFile,
-            ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
-        )
+            ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader)
         {
             bool success = true;
             MSBuildEventSource.Log.RarOverallStart();
@@ -2326,8 +2319,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                             : null;
 
                     // Start the table of dependencies with all of the primary references.
-                    ReferenceTable dependencyTable = new ReferenceTable
-                    (
+                    ReferenceTable dependencyTable = new ReferenceTable(
                         BuildEngine,
                         _findDependencies,
                         _findSatellites,
@@ -2366,8 +2358,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                         _warnOrErrorOnTargetArchitectureMismatch,
                         _ignoreTargetFrameworkAttributeVersionMismatch,
                         _unresolveFrameworkAssembliesFromHigherFrameworks,
-                        assemblyMetadataCache
-                        );
+                        assemblyMetadataCache);
 
                     dependencyTable.FindDependenciesOfExternallyResolvedReferences = FindDependenciesOfExternallyResolvedReferences;
 
@@ -2382,15 +2373,13 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                     if (AutoUnify && FindDependencies)
                     {
                         // Compute all dependencies.
-                        dependencyTable.ComputeClosure
-                        (
+                        dependencyTable.ComputeClosure(
                             // Use any app.config specified binding redirects so that later when we output suggested redirects
                             // for the GenerateBindingRedirects target, we don't suggest ones that the user already wrote
                             appConfigRemappedAssemblies,
                             _assemblyFiles,
                             _assemblyNames,
-                            generalResolutionExceptions
-                        );
+                            generalResolutionExceptions);
 
                         try
                         {
@@ -2413,11 +2402,9 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
 
                         // Based on the closure, get a table of ideal remappings needed to
                         // produce zero conflicts.
-                        dependencyTable.ResolveConflicts
-                        (
+                        dependencyTable.ResolveConflicts(
                             out autoUnifiedRemappedAssemblies,
-                            out autoUnifiedRemappedAssemblyReferences
-                        );
+                            out autoUnifiedRemappedAssemblyReferences);
                     }
 
                     IReadOnlyCollection<DependentAssembly> allRemappedAssemblies = CombineRemappedAssemblies(appConfigRemappedAssemblies, autoUnifiedRemappedAssemblies);
@@ -2450,24 +2437,20 @@ out autoUnifiedRemappedAssemblyReferences
                         }
 
                         // Resolve any conflicts.
-                        dependencyTable.ResolveConflicts
-                        (
+                        dependencyTable.ResolveConflicts(
                             out idealAssemblyRemappings,
-                            out idealAssemblyRemappingsIdentities
-                        );
+                            out idealAssemblyRemappingsIdentities);
                     }
 
                     // Build the output tables.
-                    dependencyTable.GetReferenceItems
-                    (
+                    dependencyTable.GetReferenceItems(
                         out _resolvedFiles,
                         out _resolvedDependencyFiles,
                         out _relatedFiles,
                         out _satelliteFiles,
                         out _serializationAssemblyFiles,
                         out _scatterFiles,
-                        out _copyLocalFiles
-                    );
+                        out _copyLocalFiles);
 
                     // If we're not finding dependencies, then don't suggest redirects (they're only about dependencies).
                     if (FindDependencies)
@@ -3168,8 +3151,7 @@ private string GetAssemblyPathInGac(AssemblyNameExtension assemblyName, SystemPr
         /// <returns>True if there was success.</returns>
         public override bool Execute()
         {
-            return Execute
-            (
+            return Execute(
                 p => FileUtilities.FileExistsNoThrow(p),
                 p => FileUtilities.DirectoryExistsNoThrow(p),
                 (p, searchPattern) => Directory.GetDirectories(p, searchPattern),
@@ -3189,8 +3171,7 @@ public override bool Execute()
                     => GetAssemblyPathInGac(assemblyName, targetProcessorArchitecture, getRuntimeVersion, targetedRuntimeVersion, fileExists, fullFusionName, specificVersion),
                 (string fullPath, GetAssemblyRuntimeVersion getAssemblyRuntimeVersion, FileExists fileExists, out string imageRuntimeVersion, out bool isManagedWinmd)
                     => AssemblyInformation.IsWinMDFile(fullPath, getAssemblyRuntimeVersion, fileExists, out imageRuntimeVersion, out isManagedWinmd),
-                p => ReferenceTable.ReadMachineTypeFromPEHeader(p)
-            );
+                p => ReferenceTable.ReadMachineTypeFromPEHeader(p));
         }
 
         #endregion
diff --git a/src/Tasks/AssemblyDependency/Resolver.cs b/src/Tasks/AssemblyDependency/Resolver.cs
index 66fddca12ab..82e0c11ca78 100644
--- a/src/Tasks/AssemblyDependency/Resolver.cs
+++ b/src/Tasks/AssemblyDependency/Resolver.cs
@@ -80,8 +80,7 @@ protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, Fi
         /// <param name="foundPath">The path where the file was found.</param>
         /// <param name="userRequestedSpecificFile">Whether or not the user wanted a specific file (for example, HintPath is a request for a specific file)</param>
         /// <returns>True if the file was resolved.</returns>
-        public abstract bool Resolve
-        (
+        public abstract bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -92,8 +91,7 @@ public abstract bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        );
+            out bool userRequestedSpecificFile);
 
         /// <summary>
         /// The search path element that this resolver is based on.
@@ -104,15 +102,13 @@ out bool userRequestedSpecificFile
         /// Resolve a single file.
         /// </summary>
         /// <returns>True if the file was a match, false otherwise.</returns>
-        protected bool ResolveAsFile
-        (
+        protected bool ResolveAsFile(
             string fullPath,
             AssemblyNameExtension assemblyName,
             bool isPrimaryProjectReference,
             bool wantSpecificVersion,
             bool allowMismatchBetweenFusionNameAndFileName,
-            List<ResolutionSearchLocation> assembliesConsideredAndRejected
-        )
+            List<ResolutionSearchLocation> assembliesConsideredAndRejected)
         {
             ResolutionSearchLocation considered = null;
             if (assembliesConsideredAndRejected != null)
@@ -144,15 +140,13 @@ List<ResolutionSearchLocation> assembliesConsideredAndRejected
         /// <param name="allowMismatchBetweenFusionNameAndFileName">Whether to allow naming mismatch.</param>
         /// <param name="pathToCandidateAssembly">Path to a possible file.</param>
         /// <param name="searchLocation">Information about why the candidate file didn't match</param>
-        protected bool FileMatchesAssemblyName
-        (
+        protected bool FileMatchesAssemblyName(
             AssemblyNameExtension assemblyName,
             bool isPrimaryProjectReference,
             bool wantSpecificVersion,
             bool allowMismatchBetweenFusionNameAndFileName,
             string pathToCandidateAssembly,
-            ResolutionSearchLocation searchLocation
-        )
+            ResolutionSearchLocation searchLocation)
         {
             if (searchLocation != null)
             {
@@ -241,8 +235,7 @@ ResolutionSearchLocation searchLocation
                         if (
                               targetAssemblyName.AssemblyName.ProcessorArchitecture != targetProcessorArchitecture &&  /* The target and assembly architectures do not match*/
                               (targetProcessorArchitecture != ProcessorArchitecture.None && targetAssemblyName.AssemblyName.ProcessorArchitecture != ProcessorArchitecture.None)  /*The assembly is not none*/
-                              && (targetProcessorArchitecture != ProcessorArchitecture.MSIL && targetAssemblyName.AssemblyName.ProcessorArchitecture != ProcessorArchitecture.MSIL) /*The assembly is not MSIL*/
-                           )
+                              && (targetProcessorArchitecture != ProcessorArchitecture.MSIL && targetAssemblyName.AssemblyName.ProcessorArchitecture != ProcessorArchitecture.MSIL)) /*The assembly is not MSIL*/
                         {
                             if (searchLocation != null)
                             {
@@ -300,15 +293,13 @@ ResolutionSearchLocation searchLocation
         /// <param name="directory">the directory to look in</param>
         /// <param name="assembliesConsideredAndRejected">Receives the list of locations that this function tried to find the assembly. May be "null".</param>
         /// <returns>'null' if the assembly wasn't found.</returns>
-        protected string ResolveFromDirectory
-        (
+        protected string ResolveFromDirectory(
             AssemblyNameExtension assemblyName,
             bool isPrimaryProjectReference,
             bool wantSpecificVersion,
             string[] executableExtensions,
             string directory,
-            List<ResolutionSearchLocation> assembliesConsideredAndRejected
-        )
+            List<ResolutionSearchLocation> assembliesConsideredAndRejected)
         {
             if (assemblyName == null)
             {
diff --git a/src/Tasks/AssemblyFolder.cs b/src/Tasks/AssemblyFolder.cs
index d8cafc0a6d6..03a1e888952 100644
--- a/src/Tasks/AssemblyFolder.cs
+++ b/src/Tasks/AssemblyFolder.cs
@@ -34,12 +34,10 @@ internal static class AssemblyFolder
         /// <param name="hive">Like 'hklm' or 'hkcu'</param>
         /// <param name="key">The registry key to examine</param>
         /// <param name="directories">The object to populate</param>
-        private static void AddFoldersFromRegistryKey
-        (
+        private static void AddFoldersFromRegistryKey(
             RegistryKey hive,
             string key,
-            Dictionary<string, string> directories
-        )
+            Dictionary<string, string> directories)
         {
             using (RegistryKey baseKey = hive.OpenSubKey(key))
             {
@@ -84,24 +82,19 @@ Dictionary<string, string> directories
         /// </summary>
         private static void AddFoldersFromRegistryKey(
             string key,
-            Dictionary<string, string> directories
-        )
+            Dictionary<string, string> directories)
         {
             // First add the current user.
-            AddFoldersFromRegistryKey
-            (
+            AddFoldersFromRegistryKey(
                 Registry.CurrentUser,
                 key,
-                directories
-            );
+                directories);
 
             // Then add the local machine.            
-            AddFoldersFromRegistryKey
-            (
+            AddFoldersFromRegistryKey(
                 Registry.LocalMachine,
                 key,
-                directories
-            );
+                directories);
         }
 
         /// <summary>
@@ -114,17 +107,13 @@ private static void CreateAssemblyFolders()
             if (NativeMethodsShared.IsWindows)
             {
                 // Populate the table of assembly folders.
-                AddFoldersFromRegistryKey
-                (
+                AddFoldersFromRegistryKey(
                     @"SOFTWARE\Microsoft\.NETFramework\AssemblyFolders",
-                    s_assemblyFolders
-                );
+                    s_assemblyFolders);
 
-                AddFoldersFromRegistryKey
-                (
+                AddFoldersFromRegistryKey(
                     @"SOFTWARE\Microsoft\VisualStudio\8.0\AssemblyFolders",
-                    s_assemblyFolders
-                );
+                    s_assemblyFolders);
             }
         }
 
diff --git a/src/Tasks/AssignCulture.cs b/src/Tasks/AssignCulture.cs
index 55dd775623c..7199eb4d0ef 100644
--- a/src/Tasks/AssignCulture.cs
+++ b/src/Tasks/AssignCulture.cs
@@ -134,14 +134,12 @@ public override bool Execute()
                     AssignedFiles[i] = new TaskItem(Files[i]);
 
                     string dependentUpon = AssignedFiles[i].GetMetadata(ItemMetadataNames.dependentUpon);
-                    Culture.ItemCultureInfo info = Culture.GetItemCultureInfo
-                        (
+                    Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(
                             AssignedFiles[i].ItemSpec,
                             dependentUpon,
                             // If 'WithCulture' is explicitly set to false, treat as 'culture-neutral' and keep the original name of the resource.
                             // https://github.com/dotnet/msbuild/issues/3064
-                            AssignedFiles[i].GetMetadata("WithCulture").Equals("false", StringComparison.OrdinalIgnoreCase)
-                        );
+                            AssignedFiles[i].GetMetadata("WithCulture").Equals("false", StringComparison.OrdinalIgnoreCase));
 
                     if (!string.IsNullOrEmpty(info.culture))
                     {
@@ -158,13 +156,11 @@ public override bool Execute()
                     CultureNeutralAssignedFiles[i] =
                         new TaskItem(AssignedFiles[i]) { ItemSpec = info.cultureNeutralFilename };
 
-                    Log.LogMessageFromResources
-                    (
+                    Log.LogMessageFromResources(
                         MessageImportance.Low,
                         "AssignCulture.Comment",
                         AssignedFiles[i].GetMetadata("Culture"),
-                        AssignedFiles[i].ItemSpec
-                    );
+                        AssignedFiles[i].ItemSpec);
                 }
                 catch (ArgumentException e)
                 {
diff --git a/src/Tasks/AssignLinkMetadata.cs b/src/Tasks/AssignLinkMetadata.cs
index 3e4c0c62633..9e6a48b082c 100644
--- a/src/Tasks/AssignLinkMetadata.cs
+++ b/src/Tasks/AssignLinkMetadata.cs
@@ -51,8 +51,7 @@ public override bool Execute()
                         if (
                                 String.IsNullOrEmpty(item.GetMetadata("Link"))
                                 && !String.IsNullOrEmpty(definingProject)
-                                && fullPath.StartsWith(definingProjectDirectory, StringComparison.OrdinalIgnoreCase)
-                            )
+                                && fullPath.StartsWith(definingProjectDirectory, StringComparison.OrdinalIgnoreCase))
                         {
                             string link = fullPath.Substring(definingProjectDirectory.Length);
                             ITaskItem outputItem = new TaskItem(item);
diff --git a/src/Tasks/AxTlbBaseTask.cs b/src/Tasks/AxTlbBaseTask.cs
index a6bde0f4930..524fb95f548 100644
--- a/src/Tasks/AxTlbBaseTask.cs
+++ b/src/Tasks/AxTlbBaseTask.cs
@@ -106,15 +106,13 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
         /// <returns>A string containing the full path of this tool, or null if the tool was not found</returns>
         protected override string GenerateFullPathToTool()
         {
-            string pathToTool = SdkToolsPathUtility.GeneratePathToTool
-            (
+            string pathToTool = SdkToolsPathUtility.GeneratePathToTool(
                 SdkToolsPathUtility.FileInfoExists,
                 Utilities.ProcessorArchitecture.CurrentProcessArchitecture,
                 SdkToolsPath,
                 ToolName,
                 Log,
-                true
-            );
+                true);
 
             return pathToTool;
         }
diff --git a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
index 8cc9dc555c6..bca8e999f1d 100644
--- a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
@@ -1653,12 +1653,14 @@ private static string GetFileHash(string filePath)
             // Bootstrapper is always signed with the SHA-256 algorithm, no matter which version of
             // the .NET Framework we are targeting.  In ideal situations, bootstrapper files will be
             // pre-signed anwyay; this is a fallback in case we ever encounter a bootstrapper that is
-            // not signed.  
+            // not signed.
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
             System.Security.Cryptography.SHA256 sha = System.Security.Cryptography.SHA256.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                 "System.Security.Cryptography.SHA256CryptoServiceProvider"
 #endif
                 );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
             using (Stream s = fi.OpenRead())
             {
diff --git a/src/Tasks/CallTarget.cs b/src/Tasks/CallTarget.cs
index 3ce6ae1b3b0..503ff21312d 100644
--- a/src/Tasks/CallTarget.cs
+++ b/src/Tasks/CallTarget.cs
@@ -76,8 +76,7 @@ public override bool Execute()
             var singleProject = new List<ITaskItem>(1) { null };
 
             // Build the specified targets in the current project.
-            return MSBuild.ExecuteTargets
-                (
+            return MSBuild.ExecuteTargets(
                 singleProject,  // project = null (current project)
                 null,           // propertiesTable = null
                 null,           // undefineProperties
@@ -88,8 +87,7 @@ public override bool Execute()
                 Log,
                 _targetOutputs,
                 false,
-                null            // toolsVersion = null
-                );
+                null);            // toolsVersion = null
         }
 
         #endregion
diff --git a/src/Tasks/CommandLineBuilderExtension.cs b/src/Tasks/CommandLineBuilderExtension.cs
index c07634ce739..9bc05ab8a19 100644
--- a/src/Tasks/CommandLineBuilderExtension.cs
+++ b/src/Tasks/CommandLineBuilderExtension.cs
@@ -36,12 +36,10 @@ public CommandLineBuilderExtension(bool quoteHyphensOnCommandLine, bool useNewLi
         /// <summary>
         /// Set a boolean switch iff its value exists and its value is 'true'.
         /// </summary>
-        internal void AppendWhenTrue
-            (
+        internal void AppendWhenTrue(
             string switchName,
             Hashtable bag,
-            string parameterName
-            )
+            string parameterName)
         {
             object obj = bag[parameterName];
             // If the switch isn't set, don't add it to the command line.
@@ -59,12 +57,10 @@ string parameterName
         /// <summary>
         /// Set a boolean switch only if its value exists.
         /// </summary>
-        internal void AppendPlusOrMinusSwitch
-            (
+        internal void AppendPlusOrMinusSwitch(
             string switchName,
             Hashtable bag,
-            string parameterName
-            )
+            string parameterName)
         {
             object obj = bag[parameterName];
             // If the switch isn't set, don't add it to the command line.
@@ -79,11 +75,9 @@ string parameterName
         /// <summary>
         /// Set a boolean switch only if its value exists.
         /// </summary>
-        internal void AppendPlusOrMinusSwitch
-            (
+        internal void AppendPlusOrMinusSwitch(
             string switchName,
-            bool? value
-            )
+            bool? value)
         {
             if (value.HasValue)
             {
@@ -95,14 +89,12 @@ internal void AppendPlusOrMinusSwitch
         /// <summary>
         /// Set a switch if its value exists by choosing from the input choices
         /// </summary>
-        internal void AppendByChoiceSwitch
-            (
+        internal void AppendByChoiceSwitch(
             string switchName,
             Hashtable bag,
             string parameterName,
             string choice1,
-            string choice2
-            )
+            string choice2)
         {
             object obj = bag[parameterName];
             // If the switch isn't set, don't add it to the command line.
@@ -116,12 +108,10 @@ string choice2
         /// <summary>
         /// Set an integer switch only if its value exists.
         /// </summary>
-        internal void AppendSwitchWithInteger
-            (
+        internal void AppendSwitchWithInteger(
             string switchName,
             Hashtable bag,
-            string parameterName
-            )
+            string parameterName)
         {
             object obj = bag[parameterName];
             // If the switch isn't set, don't add it to the command line.
@@ -178,12 +168,10 @@ protected string GetQuotedText(string unquotedText)
         /// <param name="switchName"></param>
         /// <param name="parameters"></param>
         /// <param name="attributes"></param>
-        internal void AppendSwitchIfNotNull
-        (
+        internal void AppendSwitchIfNotNull(
             string switchName,
             ITaskItem[] parameters,
-            string[] attributes
-        )
+            string[] attributes)
         {
             AppendSwitchIfNotNull(switchName, parameters, attributes, null /* treatAsFlag */);
         }
@@ -239,20 +227,16 @@ internal static bool IsParameterEmpty(string parameter, params char[] splitOn)
         /// <param name="parameters"></param>
         /// <param name="metadataNames"></param>
         /// <param name="treatAsFlags"></param>
-        internal void AppendSwitchIfNotNull
-        (
+        internal void AppendSwitchIfNotNull(
             string switchName,
             ITaskItem[] parameters,
             string[] metadataNames,
-            bool[] treatAsFlags       // May be null. In this case no metadata are treated as flags.
-            )
+            bool[] treatAsFlags)       // May be null. In this case no metadata are treated as flags.
         {
-            ErrorUtilities.VerifyThrow
-            (
+            ErrorUtilities.VerifyThrow(
                 treatAsFlags == null ||
                 (metadataNames != null && metadataNames.Length == treatAsFlags.Length),
-                "metadataNames and treatAsFlags should have the same length."
-            );
+                "metadataNames and treatAsFlags should have the same length.");
 
             if (parameters != null)
             {
@@ -312,11 +296,9 @@ internal void AppendSwitchIfNotNull
         /// <summary>
         /// Appends a switch if the specified value is <code>true</code>.
         /// </summary>
-        internal void AppendSwitchIfTrue
-            (
+        internal void AppendSwitchIfTrue(
             string switchName,
-            bool? value
-            )
+            bool? value)
         {
             if (value.HasValue && value.Value)
             {
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index dab3ddb553a..70bb83dc4e0 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -170,11 +170,9 @@ public void Cancel()
         /// </summary>
         /// <param name="sourceFile">The source file</param>
         /// <param name="destinationFile">The destination file</param>
-        private static bool IsMatchingSizeAndTimeStamp
-        (
+        private static bool IsMatchingSizeAndTimeStamp(
             FileState sourceFile,
-            FileState destinationFile
-        )
+            FileState destinationFile)
         {
             // If the destination doesn't exist, then it is not a matching file.
             if (!destinationFile.FileExists)
@@ -224,11 +222,9 @@ private void LogDiagnostic(string message, params object[] messageArgs)
         /// leave the file read-write.
         /// </summary>
         /// <returns>Return true to indicate success, return false to indicate failure and NO retry, return NULL to indicate retry.</returns>
-        private bool? CopyFileWithLogging
-        (
+        private bool? CopyFileWithLogging(
             FileState sourceFileState,      // The source file
-            FileState destinationFileState  // The destination file
-        )
+            FileState destinationFileState)  // The destination file
         {
             bool destinationFileExists = false;
 
@@ -394,11 +390,9 @@ private void MakeFileWriteable(FileState file, bool logActivity)
         /// <param name="parallelism">
         /// Thread parallelism allowed during copies. 1 uses the original algorithm, >1 uses newer algorithm.
         /// </param>
-        internal bool Execute
-        (
+        internal bool Execute(
             CopyFileWithState copyFile,
-            int parallelism
-        )
+            int parallelism)
         {
             // If there are no source files then just return success.
             if (SourceFiles == null || SourceFiles.Length == 0)
@@ -743,8 +737,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                         sourceFileState.Name,
                         destinationFileState.Name,
                         "SkipUnchangedFiles",
-                        "true"
-                    );
+                        "true");
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, true);
                 }
                 // We only do the cheap check for identicalness here, we try the more expensive check
diff --git a/src/Tasks/CreateCSharpManifestResourceName.cs b/src/Tasks/CreateCSharpManifestResourceName.cs
index 3ba09011657..ddc6ff5ecb1 100644
--- a/src/Tasks/CreateCSharpManifestResourceName.cs
+++ b/src/Tasks/CreateCSharpManifestResourceName.cs
@@ -30,14 +30,12 @@ public class CreateCSharpManifestResourceName : CreateManifestResourceName
         /// <param name="dependentUponFileName">The file name of the parent of this dependency (usually a .cs file). May be null</param>
         /// <param name="binaryStream">File contents binary stream, may be null</param>
         /// <returns>Returns the manifest name</returns>
-        protected override string CreateManifestName
-        (
+        protected override string CreateManifestName(
             string fileName,
             string linkFileName,
             string rootNamespace,
             string dependentUponFileName,
-            Stream binaryStream
-        )
+            Stream binaryStream)
         {
             string culture = null;
             bool treatAsCultureNeutral = false;
@@ -55,8 +53,7 @@ The reason is that CreateManifestName can't be static because it is an
                 override of a method declared in the base class, but its convenient 
                 to expose a static version anyway for unittesting purposes.
             */
-            return CreateManifestNameImpl
-            (
+            return CreateManifestNameImpl(
                 fileName,
                 linkFileName,
                 PrependCultureAsDirectory,
@@ -65,8 +62,7 @@ The reason is that CreateManifestName can't be static because it is an
                 culture,
                 binaryStream,
                 Log,
-                treatAsCultureNeutral
-            );
+                treatAsCultureNeutral);
         }
 
         /// <summary>
@@ -86,8 +82,7 @@ The reason is that CreateManifestName can't be static because it is an
         /// <param name="log">Task's TaskLoggingHelper, for logging warnings or errors</param>
         /// <param name="treatAsCultureNeutral">Whether to treat the current file as 'culture-neutral' and retain the culture in the name.</param>
         /// <returns>Returns the manifest name</returns>
-        internal static string CreateManifestNameImpl
-        (
+        internal static string CreateManifestNameImpl(
             string fileName,
             string linkFileName,
             bool prependCultureAsDirectory, // true by default
@@ -96,8 +91,7 @@ internal static string CreateManifestNameImpl
             string culture, // may be null 
             Stream binaryStream, // File contents binary stream, may be null
             TaskLoggingHelper log,
-            bool treatAsCultureNeutral = false
-        )
+            bool treatAsCultureNeutral = false)
         {
             // Use the link file name if there is one, otherwise, fall back to file name.
             string embeddedFileName = FileUtilities.FixFilePath(linkFileName);
@@ -161,8 +155,7 @@ internal static string CreateManifestNameImpl
                         ||
                         string.Equals(sourceExtension, restextFileExtension, StringComparison.OrdinalIgnoreCase)
                         ||
-                        string.Equals(sourceExtension, resourcesFileExtension, StringComparison.OrdinalIgnoreCase)
-                    )
+                        string.Equals(sourceExtension, resourcesFileExtension, StringComparison.OrdinalIgnoreCase))
                 {
                     if (!string.IsNullOrEmpty(directoryName))
                     {
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index 2ab2cf25397..991fc21b6e1 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -105,8 +105,7 @@ private List<ITaskItem> CreateOutputItems(Dictionary<string, string> metadataTab
             {
                 if (
                     (excludeItems.Count == 0) ||        // minor perf optimization
-                    (!excludeItems.ContainsKey(i.ItemSpec))
-                )
+                    (!excludeItems.ContainsKey(i.ItemSpec)))
                 {
                     ITaskItem newItem = i;
                     if (metadataTable != null)
diff --git a/src/Tasks/CreateManifestResourceName.cs b/src/Tasks/CreateManifestResourceName.cs
index 49d1b38bd52..f65f85c29c3 100644
--- a/src/Tasks/CreateManifestResourceName.cs
+++ b/src/Tasks/CreateManifestResourceName.cs
@@ -85,14 +85,12 @@ public ITaskItem[] ResourceFiles
         /// <param name="dependentUponFileName">The file name of the parent of this dependency. May be null</param>
         /// <param name="binaryStream">File contents binary stream, may be null</param>
         /// <returns>Returns the manifest name</returns>
-        protected abstract string CreateManifestName
-        (
+        protected abstract string CreateManifestName(
             string fileName,
             string linkFileName,
             string rootNamespaceName,
             string dependentUponFileName,
-            Stream binaryStream
-        );
+            Stream binaryStream);
 
         /// <summary>
         /// The derived class chooses whether this is a valid source file to work against.
@@ -120,10 +118,8 @@ private static Stream CreateFileStreamOverNewFileStream(string path, FileMode mo
         /// </summary>
         /// <param name="createFileStream">CreateFileStream delegate</param>
         /// <returns>True if task succeeded.</returns>
-        internal bool Execute
-        (
-            CreateFileStream createFileStream
-        )
+        internal bool Execute(
+            CreateFileStream createFileStream)
         {
             ManifestResourceNames = new ITaskItem[ResourceFiles.Length];
             ResourceFilesWithManifestResourceNames = new ITaskItem[ResourceFiles.Length];
@@ -217,14 +213,12 @@ CreateFileStream createFileStream
                     // we're done with it.
                     using (binaryStream)
                     {
-                        manifestName = CreateManifestName
-                            (
+                        manifestName = CreateManifestName(
                                 fileName,
                                 resourceFile.GetMetadata(ItemMetadataNames.targetPath),
                                 RootNamespace,
                                 isDependentOnSourceFile ? dependentUpon : null,
-                                binaryStream
-                            );
+                                binaryStream);
                     }
 
                     // Emit an item with our manifest name.
diff --git a/src/Tasks/CreateVisualBasicManifestResourceName.cs b/src/Tasks/CreateVisualBasicManifestResourceName.cs
index 27c60d89d2a..b932ecfe855 100644
--- a/src/Tasks/CreateVisualBasicManifestResourceName.cs
+++ b/src/Tasks/CreateVisualBasicManifestResourceName.cs
@@ -28,14 +28,12 @@ public class CreateVisualBasicManifestResourceName : CreateManifestResourceName
         /// <param name="dependentUponFileName">The file name of the parent of this dependency (usually a .vb file). May be null</param>
         /// <param name="binaryStream">File contents binary stream, may be null</param>
         /// <returns>Returns the manifest name</returns>
-        protected override string CreateManifestName
-        (
+        protected override string CreateManifestName(
             string fileName,
             string linkFileName,
             string rootNamespace, // May be null
             string dependentUponFileName, // May be null
-            Stream binaryStream // File contents binary stream, may be null
-        )
+            Stream binaryStream) // File contents binary stream, may be null
         {
             string culture = null;
             bool treatAsCultureNeutral = false;
@@ -53,8 +51,7 @@ The reason is that CreateManifestName can't be static because it is an
                 override of a method declared in the base class, but its convenient 
                 to expose a static version anyway for unittesting purposes.
             */
-            return CreateManifestNameImpl
-            (
+            return CreateManifestNameImpl(
                 fileName,
                 linkFileName,
                 PrependCultureAsDirectory,
@@ -63,8 +60,7 @@ The reason is that CreateManifestName can't be static because it is an
                 culture,
                 binaryStream,
                 Log,
-                treatAsCultureNeutral
-            );
+                treatAsCultureNeutral);
         }
 
         /// <summary>
@@ -84,8 +80,7 @@ The reason is that CreateManifestName can't be static because it is an
         /// <param name="log">Task's TaskLoggingHelper, for logging warnings or errors</param>
         /// <param name="treatAsCultureNeutral">Whether to treat the current file as 'culture-neutral' and retain the culture in the name.</param>
         /// <returns>Returns the manifest name</returns>
-        internal static string CreateManifestNameImpl
-        (
+        internal static string CreateManifestNameImpl(
             string fileName,
             string linkFileName,
             bool prependCultureAsDirectory, // true by default
@@ -94,8 +89,7 @@ internal static string CreateManifestNameImpl
             string culture,
             Stream binaryStream, // File contents binary stream, may be null
             TaskLoggingHelper log,
-            bool treatAsCultureNeutral = false
-        )
+            bool treatAsCultureNeutral = false)
         {
             // Use the link file name if there is one, otherwise, fall back to file name.
             string embeddedFileName = linkFileName;
@@ -160,8 +154,7 @@ internal static string CreateManifestNameImpl
                         ||
                         string.Equals(sourceExtension, restextFileExtension, StringComparison.OrdinalIgnoreCase)
                         ||
-                        string.Equals(sourceExtension, resourcesFileExtension, StringComparison.OrdinalIgnoreCase)
-                    )
+                        string.Equals(sourceExtension, resourcesFileExtension, StringComparison.OrdinalIgnoreCase))
                 {
                     manifestName.Append(Path.GetFileNameWithoutExtension(info.cultureNeutralFilename));
 
diff --git a/src/Tasks/Culture.cs b/src/Tasks/Culture.cs
index f138332472b..25a6dc31a81 100644
--- a/src/Tasks/Culture.cs
+++ b/src/Tasks/Culture.cs
@@ -28,12 +28,10 @@ internal struct ItemCultureInfo
         /// <remarks>
         /// We've decided to ignore explicit Culture attributes on items.
         /// </remarks>
-        internal static ItemCultureInfo GetItemCultureInfo
-        (
+        internal static ItemCultureInfo GetItemCultureInfo(
             string name,
             string dependentUponFilename,
-            bool treatAsCultureNeutral = false
-        )
+            bool treatAsCultureNeutral = false)
         {
             ItemCultureInfo info;
             info.culture = null;
diff --git a/src/Tasks/Delegate.cs b/src/Tasks/Delegate.cs
index d8baa8ef059..e2cb145f0d0 100644
--- a/src/Tasks/Delegate.cs
+++ b/src/Tasks/Delegate.cs
@@ -89,14 +89,12 @@ namespace Microsoft.Build.Tasks
     /// <param name="dependencies">Receives the list of dependencies.</param>
     /// <param name="scatterFiles">Receives the list of associated scatter files.</param>
     /// <param name="frameworkNameAttribute">The framework name</param>
-    internal delegate void GetAssemblyMetadata
-    (
+    internal delegate void GetAssemblyMetadata(
         string path,
         ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache,
         out AssemblyNameExtension[] dependencies,
         out string[] scatterFiles,
-        out FrameworkName frameworkNameAttribute
-    );
+        out FrameworkName frameworkNameAttribute);
 
     /// <summary>
     /// Delegate to take in a dll path and read the machine type from the PEHeader
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index af3c2600535..05702d4f087 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -191,12 +191,13 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                         using (var target = new FileStream(destinationFile.FullName, FileMode.Create, FileAccess.Write, FileShare.None))
                         {
                             Log.LogMessageFromResources(MessageImportance.High, "DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
-
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                             using (Stream responseStream = await response.Content.ReadAsStreamAsync(
 #if NET6_0_OR_GREATER
                             cancellationToken
 #endif
                             ).ConfigureAwait(false))
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                             {
                                 await responseStream.CopyToAsync(target, 1024, cancellationToken).ConfigureAwait(false);
                             }
diff --git a/src/Tasks/FindInvalidProjectReferences.cs b/src/Tasks/FindInvalidProjectReferences.cs
index 84a92a0147a..a6850f7ece3 100644
--- a/src/Tasks/FindInvalidProjectReferences.cs
+++ b/src/Tasks/FindInvalidProjectReferences.cs
@@ -21,11 +21,9 @@ public class FindInvalidProjectReferences : TaskExtension
         /// Regex for breaking up the platform moniker
         /// Example: XNA, Version=8.0
         /// </summary>
-        private static readonly Regex s_platformMonikerFormat = new Regex
-        (
+        private static readonly Regex s_platformMonikerFormat = new Regex(
              @"(?<PLATFORMIDENTITY>^[^,]*),\s*Version=(?<PLATFORMVERSION>.*)",
-            RegexOptions.IgnoreCase
-        );
+            RegexOptions.IgnoreCase);
 
         /// <summary>
         /// Reference moniker metadata
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index c403af81cd9..c715c349bb0 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -570,11 +570,9 @@ private void LogResgenCommandLine(List<ITaskItem> inputFiles, List<ITaskItem> ou
                 {
                     if (!ExtractResWFiles)
                     {
-                        commandLineBuilder.AppendFileNamesIfNotNull
-                        (
+                        commandLineBuilder.AppendFileNamesIfNotNull(
                             new string[] { inputFiles[i].ItemSpec, outputFiles[i].ItemSpec },
-                            ","
-                        );
+                            ",");
                     }
                     else
                     {
@@ -589,12 +587,10 @@ private void LogResgenCommandLine(List<ITaskItem> inputFiles, List<ITaskItem> ou
                 commandLineBuilder.AppendFileNamesIfNotNull(outputFiles.ToArray(), " ");
 
                 // append the strongly-typed resource details
-                commandLineBuilder.AppendSwitchIfNotNull
-                (
+                commandLineBuilder.AppendSwitchIfNotNull(
                     "/str:",
                     new string[] { StronglyTypedLanguage, StronglyTypedNamespace, StronglyTypedClassName, StronglyTypedFileName },
-                    ","
-                );
+                    ",");
             }
 
             Log.LogCommandLine(MessageImportance.Low, commandLineBuilder.ToString());
@@ -774,18 +770,14 @@ public override bool Execute()
                                 // create the list that we'll use to disconnect the taskitems once we're done
                                 _remotedTaskItems = new List<ITaskItem>();
 
-                                appDomain = AppDomain.CreateDomain
-                                (
+                                appDomain = AppDomain.CreateDomain(
                                     "generateResourceAppDomain",
                                     null,
-                                    AppDomain.CurrentDomain.SetupInformation
-                                );
+                                    AppDomain.CurrentDomain.SetupInformation);
 
-                                object obj = appDomain.CreateInstanceFromAndUnwrap
-                                   (
+                                object obj = appDomain.CreateInstanceFromAndUnwrap(
                                        typeof(ProcessResourceFiles).Module.FullyQualifiedName,
-                                       typeof(ProcessResourceFiles).FullName
-                                   );
+                                       typeof(ProcessResourceFiles).FullName);
 
                                 Type processType = obj.GetType();
                                 ErrorUtilities.VerifyThrow(processType == typeof(ProcessResourceFiles), "Somehow got a wrong and possibly incompatible type for ProcessResourceFiles.");
@@ -1216,11 +1208,9 @@ private int CalculateResourceBatchSize(List<ITaskItem> inputsToProcess, List<ITa
             int i = initialResourceIndex;
             while (currentCommand.Length < s_maximumCommandLength && i < inputsToProcess.Count)
             {
-                currentCommand.AppendFileNamesIfNotNull
-                    (
+                currentCommand.AppendFileNamesIfNotNull(
                         new ITaskItem[] { inputsToProcess[i], outputsToProcess[i] },
-                        ","
-                    );
+                        ",");
                 i++;
             }
 
@@ -1804,15 +1794,13 @@ private bool NeedSeparateAppDomain()
                                             // we should create a separate app-domain, so that those assemblies
                                             // can be unlocked when the task is finished.
                                             // The type didn't start with "System." so return true.
-                                            Log.LogMessageFromResources
-                                            (
+                                            Log.LogMessageFromResources(
                                                 MessageImportance.Low,
                                                 "GenerateResource.SeparateAppDomainBecauseOfType",
                                                 name ?? String.Empty,
                                                 typeName,
                                                 source.ItemSpec,
-                                                ((IXmlLineInfo)reader).LineNumber
-                                            );
+                                                ((IXmlLineInfo)reader).LineNumber);
 
                                             return true;
                                         }
@@ -1850,15 +1838,13 @@ private bool NeedSeparateAppDomain()
                                     {
                                         if (NeedSeparateAppDomainBasedOnSerializedType(reader))
                                         {
-                                            Log.LogMessageFromResources
-                                            (
+                                            Log.LogMessageFromResources(
                                                 MessageImportance.Low,
                                                 "GenerateResource.SeparateAppDomainBecauseOfMimeType",
                                                 name ?? String.Empty,
                                                 mimeType,
                                                 source.ItemSpec,
-                                                ((IXmlLineInfo)reader).LineNumber
-                                            );
+                                                ((IXmlLineInfo)reader).LineNumber);
 
                                             return true;
                                         }
@@ -1882,28 +1868,24 @@ private bool NeedSeparateAppDomain()
                     }
                     catch (XmlException e)
                     {
-                        Log.LogMessageFromResources
-                                    (
+                        Log.LogMessageFromResources(
                                         MessageImportance.Low,
                                         "GenerateResource.SeparateAppDomainBecauseOfExceptionLineNumber",
                                         source.ItemSpec,
                                         ((IXmlLineInfo)reader).LineNumber,
-                                        e.Message
-                                    );
+                                        e.Message);
 
                         return true;
                     }
                     catch (SerializationException e)
                     {
-                        Log.LogMessageFromResources
-                                    (
+                        Log.LogMessageFromResources(
                                         MessageImportance.Low,
                                         "GenerateResource.SeparateAppDomainBecauseOfErrorDeserializingLineNumber",
                                         source.ItemSpec,
                                         name ?? String.Empty,
                                         ((IXmlLineInfo)reader).LineNumber,
-                                        e.Message
-                                    );
+                                        e.Message);
 
                         return true;
                     }
@@ -1921,13 +1903,11 @@ private bool NeedSeparateAppDomain()
 
                         // If there was any problem parsing the .resx then log a message and
                         // fall back to using a separate AppDomain.
-                        Log.LogMessageFromResources
-                                    (
+                        Log.LogMessageFromResources(
                                         MessageImportance.Low,
                                         "GenerateResource.SeparateAppDomainBecauseOfException",
                                         source.ItemSpec,
-                                        e.Message
-                                    );
+                                        e.Message);
 
                         // In case we need more information from the customer (given this has been heavily reported
                         // and we don't understand it properly) let the usual debug switch dump the stack.
@@ -3077,9 +3057,7 @@ internal void ReadAssemblyResources(String name, String outFileOrDir)
                             targetFrameworkAttribute != null &&
                             (
                                 targetFrameworkAttribute.FrameworkName.StartsWith("Silverlight,", StringComparison.OrdinalIgnoreCase) ||
-                                targetFrameworkAttribute.FrameworkName.StartsWith("WindowsPhone,", StringComparison.OrdinalIgnoreCase)
-                            )
-                        )
+                                targetFrameworkAttribute.FrameworkName.StartsWith("WindowsPhone,", StringComparison.OrdinalIgnoreCase)))
                     {
                         // Skip Silverlight assemblies.
                         _logger.LogMessageFromResources("GenerateResource.SkippingExtractingFromNonSupportedFramework", name, targetFrameworkAttribute.FrameworkName);
@@ -3434,8 +3412,7 @@ private void CreateStronglyTypedResources(ReaderInfo reader, String outFile, Str
                     _stronglyTypedResourcesNamespace,
                     provider,
                     generateInternalClass,
-                    out errors
-                    );
+                    out errors);
 
             CodeGeneratorOptions codeGenOptions = new CodeGeneratorOptions();
             using (TextWriter output = new StreamWriter(_stronglyTypedFilename))
diff --git a/src/Tasks/GetFrameworkSDKPath.cs b/src/Tasks/GetFrameworkSDKPath.cs
index 99555f83897..418718fc57d 100644
--- a/src/Tasks/GetFrameworkSDKPath.cs
+++ b/src/Tasks/GetFrameworkSDKPath.cs
@@ -44,8 +44,7 @@ public string Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Latest, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Latest, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Latest, VisualStudioVersion.VersionLatest));
 
                         s_path = String.Empty;
                     }
@@ -82,8 +81,7 @@ public string FrameworkSdkVersion20Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version20),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version20)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version20));
 
                         s_version20Path = String.Empty;
                     }
@@ -116,8 +114,7 @@ public string FrameworkSdkVersion35Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version35, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version35, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version35, VisualStudioVersion.VersionLatest));
 
                         s_version35Path = String.Empty;
                     }
@@ -150,8 +147,7 @@ public string FrameworkSdkVersion40Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version40, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version40, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version40, VisualStudioVersion.VersionLatest));
 
                         s_version40Path = String.Empty;
                     }
@@ -184,8 +180,7 @@ public string FrameworkSdkVersion45Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.VersionLatest));
 
                         s_version45Path = String.Empty;
                     }
@@ -218,8 +213,7 @@ public string FrameworkSdkVersion451Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.VersionLatest));
 
                         s_version451Path = String.Empty;
                     }
@@ -252,8 +246,7 @@ public string FrameworkSdkVersion46Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.VersionLatest));
 
                         s_version46Path = String.Empty;
                     }
@@ -286,8 +279,7 @@ public string FrameworkSdkVersion461Path
                             MessageImportance.High,
                             "GetFrameworkSdkPath.CouldNotFindSDK",
                             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.VersionLatest),
-                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.VersionLatest)
-                        );
+                            ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.VersionLatest));
 
                         s_version461Path = String.Empty;
                     }
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index 64afe2300aa..9bb6e418abd 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -249,8 +249,7 @@ internal bool Execute(GetAssemblyName getAssemblyName, GetAssemblyRuntimeVersion
             {
                 // Filter out all references tagged as RuntimeReferenceOnly 
                 IEnumerable<ITaskItem> filteredResolvedSDKReferences = ResolvedSDKReferences.Where(
-                    sdkReference => !MetadataConversionUtilities.TryConvertItemMetadataToBool(sdkReference, "RuntimeReferenceOnly")
-                );
+                    sdkReference => !MetadataConversionUtilities.TryConvertItemMetadataToBool(sdkReference, "RuntimeReferenceOnly"));
 
                 PopulateReferencesForSDK(filteredResolvedSDKReferences);
 
diff --git a/src/Tasks/InstalledSDKResolver.cs b/src/Tasks/InstalledSDKResolver.cs
index 58b97e46883..c49ef57d4b1 100644
--- a/src/Tasks/InstalledSDKResolver.cs
+++ b/src/Tasks/InstalledSDKResolver.cs
@@ -33,8 +33,7 @@ public InstalledSDKResolver(Dictionary<string, ITaskItem> resolvedSDKs, string s
         /// <summary>
         /// Resolve references which are found in a specific SDK
         /// </summary>
-        public override bool Resolve
-        (
+        public override bool Resolve(
             AssemblyNameExtension assemblyName,
             string sdkName,
             string rawFileNameCandidate,
@@ -45,8 +44,7 @@ public override bool Resolve
             string assemblyFolderKey,
             List<ResolutionSearchLocation> assembliesConsideredAndRejected,
             out string foundPath,
-            out bool userRequestedSpecificFile
-        )
+            out bool userRequestedSpecificFile)
         {
             foundPath = null;
             userRequestedSpecificFile = false;
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index ea4213c9688..cc175250ea6 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -321,8 +321,7 @@ public override bool Execute()
                     {
                         singleProject[0] = project;
 
-                        if (!ExecuteTargets
-                                (
+                        if (!ExecuteTargets(
                                 singleProject,
                                 propertiesTable,
                                 undefinePropertiesArray,
@@ -333,9 +332,7 @@ public override bool Execute()
                                 Log,
                                 _targetOutputs,
                                 UnloadProjectsOnCompletion,
-                                ToolsVersion
-                                )
-                           )
+                                ToolsVersion))
                         {
                             success = false;
                         }
@@ -388,8 +385,7 @@ private bool BuildProjectsInParallel(Dictionary<string, string> propertiesTable,
             // Make the call to build the projects
             if (projectsToBuildInParallel.Count > 0)
             {
-                if (!ExecuteTargets
-                                (
+                if (!ExecuteTargets(
                                 projectsToBuildInParallel,
                                 propertiesTable,
                                 undefinePropertiesArray,
@@ -400,9 +396,7 @@ private bool BuildProjectsInParallel(Dictionary<string, string> propertiesTable,
                                 Log,
                                 _targetOutputs,
                                 UnloadProjectsOnCompletion,
-                                ToolsVersion
-                                )
-                           )
+                                ToolsVersion))
                 {
                     success = false;
                 }
@@ -481,8 +475,7 @@ internal static List<string[]> CreateTargetLists(string[] targets, bool runEachT
         }
 
         /// <returns>True if the operation was successful</returns>
-        internal static bool ExecuteTargets
-            (
+        internal static bool ExecuteTargets(
             List<ITaskItem> projects,
             Dictionary<string, string> propertiesTable,
             string[] undefineProperties,
@@ -493,8 +486,7 @@ internal static bool ExecuteTargets
             TaskLoggingHelper log,
             List<ITaskItem> targetOutputs,
             bool unloadProjectsOnCompletion,
-            string toolsVersion
-            )
+            string toolsVersion)
         {
             bool success = true;
 
@@ -524,10 +516,9 @@ string toolsVersion
                     // parse the string containing the properties
                     if (!String.IsNullOrEmpty(projects[i].GetMetadata("Properties")))
                     {
-                        if (!PropertyParser.GetTableWithEscaping
-                             (log, ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.OverridingProperties", projectNames[i]), "Properties", projects[i].GetMetadata("Properties").Split(MSBuildConstants.SemicolonChar),
-                              out Dictionary<string, string> preProjectPropertiesTable)
-                           )
+                        if (!PropertyParser.GetTableWithEscaping(
+                             log, ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.OverridingProperties", projectNames[i]), "Properties", projects[i].GetMetadata("Properties").Split(MSBuildConstants.SemicolonChar),
+                              out Dictionary<string, string> preProjectPropertiesTable))
                         {
                             return false;
                         }
@@ -565,10 +556,9 @@ string toolsVersion
                     // parse the string containing the properties
                     if (!String.IsNullOrEmpty(projects[i].GetMetadata("AdditionalProperties")))
                     {
-                        if (!PropertyParser.GetTableWithEscaping
-                             (log, ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.AdditionalProperties", projectNames[i]), "AdditionalProperties", projects[i].GetMetadata("AdditionalProperties").Split(MSBuildConstants.SemicolonChar),
-                              out Dictionary<string, string> additionalProjectPropertiesTable)
-                           )
+                        if (!PropertyParser.GetTableWithEscaping(
+                             log, ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.AdditionalProperties", projectNames[i]), "AdditionalProperties", projects[i].GetMetadata("AdditionalProperties").Split(MSBuildConstants.SemicolonChar),
+                              out Dictionary<string, string> additionalProjectPropertiesTable))
                         {
                             return false;
                         }
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index 85f15e08e1a..385e0ed6acf 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -245,19 +245,23 @@ private static void GetFileInfoImpl(string path, string targetFrameWorkVersion,
 
                 if (string.IsNullOrEmpty(targetFrameWorkVersion) || CompareFrameworkVersions(targetFrameWorkVersion, Constants.TargetFrameworkVersion40) <= 0)
                 {
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     hashAlg = SHA1.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                         "System.Security.Cryptography.SHA1CryptoServiceProvider"
 #endif
                         );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                 }
                 else
                 {
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     hashAlg = SHA256.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                         "System.Security.Cryptography.SHA256CryptoServiceProvider"
 #endif
                         );
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                 }
                 byte[] hashBytes = hashAlg.ComputeHash(s);
                 hash = Convert.ToBase64String(hashBytes);
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index a097d2713cf..563f641be1c 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -565,11 +565,13 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
 
                 if (useSha256)
                 {
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     using (SHA256 sha2 = SHA256.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                         "System.Security.Cryptography.SHA256CryptoServiceProvider"
 #endif
                 ))
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     {
                         byte[] hash = sha2.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -582,11 +584,13 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
                 }
                 else
                 {
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     using (SHA1 sha1 = SHA1.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                         "System.Security.Cryptography.SHA1CryptoServiceProvider"
 #endif
                         ))
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     {
                         byte[] hash = sha1.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -621,11 +625,13 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
 
                 if (useSha256)
                 {
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     using (SHA256 sha2 = SHA256.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                         "System.Security.Cryptography.SHA256CryptoServiceProvider"
 #endif
                         ))
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     {
                         byte[] hash = sha2.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -638,11 +644,13 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
                 }
                 else
                 {
+#pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     using (SHA1 sha1 = SHA1.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                         "System.Security.Cryptography.SHA1CryptoServiceProvider"
 #endif
                          ))
+#pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                     {
                         byte[] hash = sha1.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
diff --git a/src/Tasks/Move.cs b/src/Tasks/Move.cs
index 1e0b1da9200..c7ced28d6fb 100644
--- a/src/Tasks/Move.cs
+++ b/src/Tasks/Move.cs
@@ -190,11 +190,9 @@ private static void MakeWriteableIfReadOnly(string file)
         /// Move one file from source to destination. Create the target directory if necessary.
         /// </summary>
         /// <throws>IO related exceptions</throws>
-        private bool MoveFileWithLogging
-        (
+        private bool MoveFileWithLogging(
             string sourceFile,
-            string destinationFile
-        )
+            string destinationFile)
         {
             if (FileSystems.Default.DirectoryExists(destinationFile))
             {
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index a100afbb4e7..e9e3027d034 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -819,12 +819,10 @@ internal static bool MakeHardLink(string newFileName, string exitingFileName, re
         // MoveFileEx
         //------------------------------------------------------------------------------
         [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode, EntryPoint = "MoveFileEx")]
-        internal static extern bool MoveFileExWindows
-        (
+        internal static extern bool MoveFileExWindows(
             [In] string existingFileName,
             [In] string newFileName,
-            [In] MoveFileFlags flags
-        );
+            [In] MoveFileFlags flags);
 
         /// <summary>
         /// Add implementation of this function when not running on windows. The implementation is
@@ -883,14 +881,12 @@ internal static bool MoveFileEx(string existingFileName, string newFileName, Mov
         // UnRegisterTypeLib
         //------------------------------------------------------------------------------
         [DllImport("oleaut32", PreserveSig = false, EntryPoint = "UnRegisterTypeLib")]
-        internal static extern void UnregisterTypeLib
-        (
+        internal static extern void UnregisterTypeLib(
             [In] ref Guid guid,
             [In] short wMajorVerNum,
             [In] short wMinorVerNum,
             [In] int lcid,
-            [In] System.Runtime.InteropServices.ComTypes.SYSKIND syskind
-        );
+            [In] System.Runtime.InteropServices.ComTypes.SYSKIND syskind);
 
         //------------------------------------------------------------------------------
         // LoadTypeLib
@@ -958,8 +954,7 @@ internal static extern IntPtr CreateFileMapping(IntPtr hFile, IntPtr lpFileMappi
         //------------------------------------------------------------------------------
         [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
         [return: MarshalAs(UnmanagedType.Bool)]
-        internal static extern bool CreateProcess
-        (
+        internal static extern bool CreateProcess(
             string lpApplicationName,
             string lpCommandLine,
             IntPtr lpProcessAttributes,
@@ -970,8 +965,7 @@ internal static extern bool CreateProcess
             IntPtr lpEnvironment,
             string lpCurrentDirectory,
             [In] ref STARTUPINFO lpStartupInfo,
-            out PROCESS_INFORMATION lpProcessInformation
-        );
+            out PROCESS_INFORMATION lpProcessInformation);
 
         //------------------------------------------------------------------------------
         // ImageNtHeader
diff --git a/src/Tasks/ResGen.cs b/src/Tasks/ResGen.cs
index 8c45e0a33c1..9a7ef6aca43 100644
--- a/src/Tasks/ResGen.cs
+++ b/src/Tasks/ResGen.cs
@@ -425,8 +425,7 @@ protected override bool ValidateParameters()
                     if (
                         !String.IsNullOrEmpty(StronglyTypedClassName) ||
                         !String.IsNullOrEmpty(StronglyTypedNamespace) ||
-                        !String.IsNullOrEmpty(StronglyTypedFileName)
-                        )
+                        !String.IsNullOrEmpty(StronglyTypedFileName))
                     {
                         // We have no language to generate a STR, but nevertheless the user passed us a class, 
                         // namespace, and/or filename. Let them know that they probably wanted to pass a language too.
@@ -514,15 +513,13 @@ private string GenerateResGenFullPath()
                     // If it still hasn't been found, try to generate the appropriate path. 
                     if (pathToTool == null)
                     {
-                        pathToTool = SdkToolsPathUtility.GeneratePathToTool
-                                        (
+                        pathToTool = SdkToolsPathUtility.GeneratePathToTool(
                                             SdkToolsPathUtility.FileInfoExists,
                                             MSBuildProcessorArchitecture.CurrentProcessArchitecture,
                                             SdkToolsPath,
                                             ToolExe,
                                             Log,
-                                            true /* log errors and warnings */
-                                        );
+                                            true); /* log errors and warnings */
 
                         pathToTool = NativeMethodsShared.GetLongFilePath(pathToTool);
                     }
@@ -600,11 +597,9 @@ private void GenerateResGenCommands(CommandLineBuilderExtension resGenArguments,
                             }
                             else
                             {
-                                resGenArguments.AppendFileNamesIfNotNull
-                                (
+                                resGenArguments.AppendFileNamesIfNotNull(
                                     new[] { inputFiles[i], outputFiles[i] },
-                                    ","
-                                );
+                                    ",");
                             }
                         }
                     }
@@ -616,12 +611,10 @@ private void GenerateResGenCommands(CommandLineBuilderExtension resGenArguments,
                     resGenArguments.AppendFileNamesIfNotNull(OutputFiles, " ");
 
                     // append the strongly-typed resource details
-                    resGenArguments.AppendSwitchIfNotNull
-                    (
+                    resGenArguments.AppendSwitchIfNotNull(
                         "/str:",
                         new[] { StronglyTypedLanguage, StronglyTypedNamespace, StronglyTypedClassName, StronglyTypedFileName },
-                        ","
-                    );
+                        ",");
                 }
             }
 
diff --git a/src/Tasks/ResolveComReference.cs b/src/Tasks/ResolveComReference.cs
index 7f9f39f71dd..c8189a8a81b 100644
--- a/src/Tasks/ResolveComReference.cs
+++ b/src/Tasks/ResolveComReference.cs
@@ -853,13 +853,11 @@ internal void AddMissingTlbReferences()
         /// <summary>
         /// Resolves the COM reference, and adds it to the appropriate item list.
         /// </summary>
-        private bool ResolveReferenceAndAddToList
-            (
+        private bool ResolveReferenceAndAddToList(
             ComDependencyWalker dependencyWalker,
             ComReferenceInfo projectRefInfo,
             List<ITaskItem> resolvedReferenceList,
-            List<ITaskItem> moduleList
-            )
+            List<ITaskItem> moduleList)
         {
             if (ResolveReference(dependencyWalker, projectRefInfo, WrapperOutputDirectory, out ITaskItem referencePath))
             {
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index 9936453c588..dc25afe4fb8 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -37,11 +37,9 @@ public class ResolveSDKReference : TaskExtension
         /// Regex for breaking up the sdk reference include into pieces.
         /// Example: XNA, Version=8.0
         /// </summary>
-        private static readonly Regex s_sdkReferenceFormat = new Regex
-        (
+        private static readonly Regex s_sdkReferenceFormat = new Regex(
              @"(?<SDKSIMPLENAME>^[^,]*),\s*Version=(?<SDKVERSION>.*)",
-            RegexOptions.IgnoreCase
-        );
+            RegexOptions.IgnoreCase);
 
         /// <summary>
         /// SimpleName group
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 077ef0a8d00..95c0d224a72 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -230,10 +230,8 @@ public SystemState(ITranslator translator)
         /// of the FX folders.
         /// </summary>
         /// <param name="installedAssemblyTableInfos">List of Assembly Table Info.</param>
-        internal void SetInstalledAssemblyInformation
-        (
-            AssemblyTableInfo[] installedAssemblyTableInfos
-        )
+        internal void SetInstalledAssemblyInformation(
+            AssemblyTableInfo[] installedAssemblyTableInfos)
         {
             redistList = RedistList.GetRedistList(installedAssemblyTableInfos);
         }
@@ -423,10 +421,8 @@ private AssemblyNameExtension GetAssemblyName(string path)
 
                 if (string.Equals(extension, ".dll", StringComparison.OrdinalIgnoreCase))
                 {
-                    IEnumerable<AssemblyEntry> assemblyNames = redistList.FindAssemblyNameFromSimpleName
-                        (
-                            Path.GetFileNameWithoutExtension(path)
-                        );
+                    IEnumerable<AssemblyEntry> assemblyNames = redistList.FindAssemblyNameFromSimpleName(
+                            Path.GetFileNameWithoutExtension(path));
                     string filename = Path.GetFileName(path);
 
                     foreach (AssemblyEntry a in assemblyNames)
@@ -490,26 +486,22 @@ private string GetRuntimeVersion(string path)
         /// <param name="dependencies">Receives the list of dependencies.</param>
         /// <param name="scatterFiles">Receives the list of associated scatter files.</param>
         /// <param name="frameworkName"></param>
-        private void GetAssemblyMetadata
-        (
+        private void GetAssemblyMetadata(
             string path,
             ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache,
             out AssemblyNameExtension[] dependencies,
             out string[] scatterFiles,
-            out FrameworkName frameworkName
-        )
+            out FrameworkName frameworkName)
         {
             FileState fileState = GetFileState(path);
             if (fileState.dependencies == null)
             {
-                getAssemblyMetadata
-                (
+                getAssemblyMetadata(
                     path,
                     assemblyMetadataCache,
                     out fileState.dependencies,
                     out fileState.scatterFiles,
-                    out fileState.frameworkName
-                 );
+                    out fileState.frameworkName);
 
                 isDirty = true;
             }
diff --git a/src/Tasks/TlbReference.cs b/src/Tasks/TlbReference.cs
index f08ae5f4d27..251230c879f 100644
--- a/src/Tasks/TlbReference.cs
+++ b/src/Tasks/TlbReference.cs
@@ -317,36 +317,28 @@ private void WriteWrapperToDisk(AssemblyBuilder assemblyBuilder, string wrapperP
                 switch (_targetProcessorArchitecture)
                 {
                     case UtilitiesProcessorArchitecture.X86:
-                        assemblyBuilder.Save
-                            (
+                        assemblyBuilder.Save(
                                 wrapperFile.Name,
                                 PortableExecutableKinds.ILOnly | PortableExecutableKinds.Required32Bit,
-                                ImageFileMachine.I386
-                            );
+                                ImageFileMachine.I386);
                         break;
                     case UtilitiesProcessorArchitecture.AMD64:
-                        assemblyBuilder.Save
-                            (
+                        assemblyBuilder.Save(
                                 wrapperFile.Name,
                                 PortableExecutableKinds.ILOnly | PortableExecutableKinds.PE32Plus,
-                                ImageFileMachine.AMD64
-                            );
+                                ImageFileMachine.AMD64);
                         break;
                     case UtilitiesProcessorArchitecture.IA64:
-                        assemblyBuilder.Save
-                            (
+                        assemblyBuilder.Save(
                                 wrapperFile.Name,
                                 PortableExecutableKinds.ILOnly | PortableExecutableKinds.PE32Plus,
-                                ImageFileMachine.IA64
-                            );
+                                ImageFileMachine.IA64);
                         break;
                     case UtilitiesProcessorArchitecture.ARM:
-                        assemblyBuilder.Save
-                            (
+                        assemblyBuilder.Save(
                                 wrapperFile.Name,
                                 PortableExecutableKinds.ILOnly | PortableExecutableKinds.Required32Bit,
-                                ImageFileMachine.ARM
-                            );
+                                ImageFileMachine.ARM);
                         break;
                     case UtilitiesProcessorArchitecture.MSIL:
                     default:
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index 77a2060bdd3..0cecaf50965 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -49,15 +49,13 @@ public class Touch : TaskExtension
         /// Implementation of the execute method.
         /// </summary>
         /// <returns></returns>
-        internal bool ExecuteImpl
-        (
+        internal bool ExecuteImpl(
             FileExists fileExists,
             FileCreate fileCreate,
             GetAttributes fileGetAttributes,
             SetAttributes fileSetAttributes,
             SetLastAccessTime fileSetLastAccessTime,
-            SetLastWriteTime fileSetLastWriteTime
-        )
+            SetLastWriteTime fileSetLastWriteTime)
         {
             // See what time we are touching all files to
             DateTime touchDateTime;
@@ -89,8 +87,7 @@ SetLastWriteTime fileSetLastWriteTime
                 // touched items. 
                 if
                 (
-                    TouchFile
-                    (
+                    TouchFile(
                         path,
                         touchDateTime,
                         fileExists,
@@ -98,9 +95,7 @@ SetLastWriteTime fileSetLastWriteTime
                         fileGetAttributes,
                         fileSetAttributes,
                         fileSetLastAccessTime,
-                        fileSetLastWriteTime
-                    )
-                )
+                        fileSetLastWriteTime))
                 {
                     touchedItems.Add(file);
                 }
@@ -125,15 +120,13 @@ SetLastWriteTime fileSetLastWriteTime
         /// <returns></returns>
         public override bool Execute()
         {
-            return ExecuteImpl
-            (
+            return ExecuteImpl(
                 File.Exists,
                 File.Create,
                 File.GetAttributes,
                 File.SetAttributes,
                 File.SetLastAccessTime,
-                File.SetLastWriteTime
-            );
+                File.SetLastWriteTime);
         }
 
         /// <summary>
@@ -142,11 +135,9 @@ public override bool Execute()
         /// <param name="file"></param>
         /// <param name="fileCreate"></param>
         /// <returns>"true" if the file was created.</returns>
-        private bool CreateFile
-        (
+        private bool CreateFile(
             string file,
-            FileCreate fileCreate
-        )
+            FileCreate fileCreate)
         {
             try
             {
@@ -167,8 +158,7 @@ FileCreate fileCreate
         /// Helper method touches a file.
         /// </summary>
         /// <returns>"True" if the file was touched.</returns>
-        private bool TouchFile
-        (
+        private bool TouchFile(
             string file,
             DateTime dt,
             FileExists fileExists,
@@ -176,8 +166,7 @@ private bool TouchFile
             GetAttributes fileGetAttributes,
             SetAttributes fileSetAttributes,
             SetLastAccessTime fileSetLastAccessTime,
-            SetLastWriteTime fileSetLastWriteTime
-        )
+            SetLastWriteTime fileSetLastWriteTime)
         {
             if (!fileExists(file))
             {
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index 4f43cd7f928..f9c98f3c2d5 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -253,8 +253,7 @@ private string GenerateCode(out string extension)
                 // as well as within the namespaces that we automatically import.
                 Lazy<Type> attributeType = new(
                     () => Type.GetType(attribute.Name, throwOnError: false) ?? NamespaceImports.Select(x => Type.GetType($"{x}.{attribute.Name}", throwOnError: false)).FirstOrDefault(),
-                    System.Threading.LazyThreadSafetyMode.None
-                );
+                    System.Threading.LazyThreadSafetyMode.None);
 
                 if (
                     !AddArguments(attribute, attributeType, providedOrderedParameters, isPositional: true)
@@ -383,8 +382,7 @@ private bool AddArguments(
             CodeAttributeDeclaration attribute,
             Lazy<Type> attributeType,
             IReadOnlyList<AttributeParameter> parameters,
-            bool isPositional
-        )
+            bool isPositional)
         {
             Type[] constructorParameterTypes = null;
 
@@ -435,8 +433,7 @@ bool isPositional
                             value = ConvertParameterValueToInferredType(
                                 constructorParameterTypes[i],
                                 parameter.Value,
-                                $"#{i + 1}" /* back to 1 based */
-                            );
+                                $"#{i + 1}"); /* back to 1 based */
                         }
                         else
                         {
@@ -444,8 +441,7 @@ bool isPositional
                             value = ConvertParameterValueToInferredType(
                                 attributeType.Value?.GetProperty(parameter.Name)?.PropertyType,
                                 parameter.Value,
-                                parameter.Name
-                            );
+                                parameter.Name);
                         }
 
                         break;
diff --git a/src/Tasks/XamlTaskFactory/TaskGenerator.cs b/src/Tasks/XamlTaskFactory/TaskGenerator.cs
index f9dde2dd5fe..826fb564ed6 100644
--- a/src/Tasks/XamlTaskFactory/TaskGenerator.cs
+++ b/src/Tasks/XamlTaskFactory/TaskGenerator.cs
@@ -1193,8 +1193,8 @@ private void GenerateRelations(CodeTypeDeclaration taskClass)
                             }
                         }
 
-                        checkRequired.TrueStatements.Add(new CodeMethodInvokeExpression
-                            (new CodeThisReferenceExpression(), "RemoveSwitchToolBasedOnValue",
+                        checkRequired.TrueStatements.Add(new CodeMethodInvokeExpression(
+                            new CodeThisReferenceExpression(), "RemoveSwitchToolBasedOnValue",
                             new CodeSnippetExpression(SurroundWithQuotes(switchRelations.Key))));
 
                         addValidateRelationsMethod.Statements.Add(checkRequired);
diff --git a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
index 1ed499cc61b..2c070d377d4 100644
--- a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
+++ b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
@@ -117,16 +117,14 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> ta
 
             // create the code generator options    
             // Since we are running msbuild 12.0 these had better load.
-            var compilerParameters = new CompilerParameters
-            (
+            var compilerParameters = new CompilerParameters(
                 new[]
                 {
                     "System.dll",
                     Path.Combine(pathToMSBuildBinaries, "Microsoft.Build.Framework.dll"),
                     Path.Combine(pathToMSBuildBinaries, "Microsoft.Build.Utilities.Core.dll"),
                     Path.Combine(pathToMSBuildBinaries, "Microsoft.Build.Tasks.Core.dll")
-                }
-            )
+                })
             {
                 GenerateInMemory = true,
                 TreatWarningsAsErrors = false
diff --git a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
index 74c5ac7e403..9dbcdda01ab 100644
--- a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
+++ b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
@@ -288,8 +288,7 @@ public void AppendSingleFileNameWithQuotes()
                 c.AppendFileNameIfNotNull("string with \"quotes\"");
 
                 c.ShouldBe("\"string with \\\"quotes\\\"\"");
-            }
-           );
+            });
         }
         /// <summary>
         /// Trigger escaping of literal quotes.
@@ -484,8 +483,7 @@ public void TestVerifyThrowElse()
                 TestCommandLineBuilder c = new TestCommandLineBuilder();
                 c.TestVerifyThrow("SuperSwitch", @"Parameter");
                 c.TestVerifyThrow("SuperSwitch", @"Para""meter");
-            }
-           );
+            });
         }
     }
 
diff --git a/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs b/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
index 2776d3762bb..5a86be527ae 100644
--- a/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
+++ b/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
@@ -163,8 +163,7 @@ public void FormatEventMessageOnNullBEEA()
                 MyLogger l = new MyLogger();
                 BuildErrorEventArgs beea = null;
                 l.FormatErrorEvent(beea);
-            }
-           );
+            });
         }
         /// <summary>
         /// Check null handling
@@ -177,8 +176,7 @@ public void FormatEventMessageOnNullBWEA()
                 MyLogger l = new MyLogger();
                 BuildWarningEventArgs bwea = null;
                 l.FormatWarningEvent(bwea);
-            }
-           );
+            });
         }
     }
 
diff --git a/src/Utilities.UnitTests/MuxLogger_Tests.cs b/src/Utilities.UnitTests/MuxLogger_Tests.cs
index fac643fade0..3f54973d07e 100644
--- a/src/Utilities.UnitTests/MuxLogger_Tests.cs
+++ b/src/Utilities.UnitTests/MuxLogger_Tests.cs
@@ -69,8 +69,7 @@ public void RegisteringLoggerBeforeBuildStartedThrows()
             {
                 MuxLogger muxLogger = new MuxLogger();
                 muxLogger.RegisterLogger(1, new MockLogger());
-            }
-           );
+            });
         }
         /// <summary>
         /// Verifies that building with a logger attached to the mux logger is equivalent to building with the logger directly.
diff --git a/src/Utilities.UnitTests/TaskItem_Tests.cs b/src/Utilities.UnitTests/TaskItem_Tests.cs
index e98a8129c0e..f468266b0e0 100644
--- a/src/Utilities.UnitTests/TaskItem_Tests.cs
+++ b/src/Utilities.UnitTests/TaskItem_Tests.cs
@@ -79,8 +79,7 @@ public void NullITaskItem()
                 TaskItem taskItem = new TaskItem(item);
 
                 // no NullReferenceException
-            }
-           );
+            });
         }
 
         [Fact]
@@ -108,8 +107,7 @@ public void NullITaskItemCast()
                 string result = (string)item;
 
                 // no NullReferenceException
-            }
-           );
+            });
         }
         [Fact]
         public void ConstructFromDictionary()
@@ -144,8 +142,7 @@ public void CannotChangeModifiers()
                     Console.WriteLine(e.Message);
                     throw;
                 }
-            }
-           );
+            });
         }
 
         [Fact]
@@ -165,8 +162,7 @@ public void CannotRemoveModifiers()
                     Console.WriteLine(e.Message);
                     throw;
                 }
-            }
-           );
+            });
         }
         [Fact]
         public void CheckMetadataCount()
@@ -186,12 +182,9 @@ public void NonexistentRequestFullPath()
             TaskItem from = new TaskItem();
             from.ItemSpec = "Monkey.txt";
             from.GetMetadata(FileUtilities.ItemSpecModifiers.FullPath).ShouldBe(
-                Path.Combine
-                (
+                Path.Combine(
                     Directory.GetCurrentDirectory(),
-                    "Monkey.txt"
-                )
-            );
+                    "Monkey.txt"));
         }
 
         [Fact]
@@ -295,8 +288,7 @@ public void CreateNullNamedMetadata()
             {
                 TaskItem item = new TaskItem("foo");
                 item.SetMetadata(null, "x");
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify metadata cannot be created with empty name
@@ -308,8 +300,7 @@ public void CreateEmptyNamedMetadata()
             {
                 TaskItem item = new TaskItem("foo");
                 item.SetMetadata("", "x");
-            }
-           );
+            });
         }
         /// <summary>
         /// Create a TaskItem with a null metadata value -- this is allowed, but 
@@ -349,18 +340,14 @@ public void RemoteTaskItem()
             AppDomain appDomain = null;
             try
             {
-                appDomain = AppDomain.CreateDomain
-                            (
+                appDomain = AppDomain.CreateDomain(
                                 "generateResourceAppDomain",
                                 null,
-                                AppDomain.CurrentDomain.SetupInformation
-                            );
+                                AppDomain.CurrentDomain.SetupInformation);
 
-                object obj = appDomain.CreateInstanceFromAndUnwrap
-                   (
+                object obj = appDomain.CreateInstanceFromAndUnwrap(
                        typeof(TaskItemCreator).Module.FullyQualifiedName,
-                       typeof(TaskItemCreator).FullName
-                   );
+                       typeof(TaskItemCreator).FullName);
 
                 TaskItemCreator creator = (TaskItemCreator)obj;
 
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index e065da82058..b8e4f1f2a15 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -227,8 +227,7 @@ public void CheckResourcesRegistered()
                     Console.WriteLine(e.Message);
                     throw;
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify the LogErrorFromException & LogWarningFromException methods
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index f9e320a8af0..142822dfa0b 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -519,8 +519,7 @@ public void FindFrameworksPathRunningThisTest()
                 ToolLocationHelper.GetDotNetFrameworkVersionFolderPrefix(TargetDotNetFrameworkVersion.Version40),
                 DirectoryExists,
                 GetDirectories,
-                SharedDotNetFrameworkArchitecture.Current
-            );
+                SharedDotNetFrameworkArchitecture.Current);
 
 #if FEATURE_INSTALLED_MSBUILD
             path.ShouldBe(Path.GetDirectoryName(typeof(object).GetTypeInfo().Module.FullyQualifiedName));
@@ -538,14 +537,12 @@ public void FindFrameworksPathRunningThisTest()
         [PlatformSpecific(TestPlatforms.Windows)]
         public void FindFrameworksPathRunningUnderWhidbey()
         {
-            string path = FrameworkLocationHelper.FindDotNetFrameworkPath
-                (
+            string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
                     @"{runtime-base}\v1.2.x86dbg",    // Simulate "Whidbey" as the current runtime.
                     "v1.2",
                     DirectoryExists,
                     GetDirectories,
-                    SharedDotNetFrameworkArchitecture.Current
-                );
+                    SharedDotNetFrameworkArchitecture.Current);
             path.ShouldBe(Path.Combine("{runtime-base}", "v1.2.x86dbg"));
         }
 
@@ -558,14 +555,12 @@ public void FindFrameworksPathRunningUnderWhidbey()
         [PlatformSpecific(TestPlatforms.Windows)]
         public void FindFrameworksPathRunningUnderOrcas()
         {
-            string path = FrameworkLocationHelper.FindDotNetFrameworkPath
-                (
+            string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
                     Path.Combine("{runtime-base}", "v1.3.x86dbg"),        // Simulate "Orcas" as the current runtime.}
                     "v1.2",                                              // But we're looking for "Whidbey"
                     DirectoryExists,
                     GetDirectories,
-                    SharedDotNetFrameworkArchitecture.Current
-                );
+                    SharedDotNetFrameworkArchitecture.Current);
             path.ShouldBe(Path.Combine("{runtime-base}", "v1.2.x86fre"));
         }
 
@@ -578,14 +573,12 @@ public void FindFrameworksPathRunningUnderOrcas()
         [PlatformSpecific(TestPlatforms.Windows)]
         public void FindFrameworksPathRunningUnderEverett()
         {
-            string path = FrameworkLocationHelper.FindDotNetFrameworkPath
-                (
+            string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
                     Path.Combine("{runtime-base}", "v1.1.x86dbg"),       // Simulate "Everett" as the current runtime.
                     "v1.2",                                              // But we're looking for "Whidbey"
                     DirectoryExists,
                     GetDirectories,
-                    SharedDotNetFrameworkArchitecture.Current
-                );
+                    SharedDotNetFrameworkArchitecture.Current);
 
             path.ShouldBe(Path.Combine("{runtime-base}", "v1.2.x86fre"));
         }
@@ -598,14 +591,12 @@ public void FindFrameworksPathRunningUnderEverett()
         [Fact]
         public void FindPathForNonexistentFrameworks()
         {
-            string path = FrameworkLocationHelper.FindDotNetFrameworkPath
-                (
+            string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
                     Path.Combine(@"{runtime-base}", "v1.1"),             // Simulate "everett" as the current runtime
                     "v1.3",                                              // And we're trying to find "orchas" runtime which isn't installed.
                     DirectoryExists,
                     GetDirectories,
-                    SharedDotNetFrameworkArchitecture.Current
-                );
+                    SharedDotNetFrameworkArchitecture.Current);
 
             path.ShouldBeNull();
         }
@@ -623,14 +614,12 @@ public void FindPathForEverettThatIsntProperlyInstalled()
             string fakeEverettPath = Path.Combine(tempPath, "v1.1.43225");
             Directory.CreateDirectory(fakeEverettPath);
 
-            string path = FrameworkLocationHelper.FindDotNetFrameworkPath
-                (
+            string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
                     fakeWhidbeyPath,  // Simulate "whidbey" as the current runtime
                     "v1.1",                 // We're looking for "everett"
                     DirectoryExists,
                     GetDirectories,
-                    SharedDotNetFrameworkArchitecture.Current
-                );
+                    SharedDotNetFrameworkArchitecture.Current);
 
             FileUtilities.DeleteWithoutTrailingBackslash(fakeEverettPath);
             path.ShouldBeNull();
@@ -661,53 +650,39 @@ public void ExerciseMiscToolLocationHelperMethods()
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Latest).ShouldBe(FrameworkLocationHelper.PathToDotNetFrameworkV40);
 
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version11, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV11(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV11(SharedDotNetFrameworkArchitecture.Bitness32));
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV20(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV20(SharedDotNetFrameworkArchitecture.Bitness32));
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version30, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV30(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV30(SharedDotNetFrameworkArchitecture.Bitness32));
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version35, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV35(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV35(SharedDotNetFrameworkArchitecture.Bitness32));
 
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version40, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness32));
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.VersionLatest, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness32));
             ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Latest, UtilitiesDotNetFrameworkArchitecture.Bitness32).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness32)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness32));
 
             if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("ProgramFiles(x86)")))
             {
                 // 64-bit machine, so we should test the 64-bit overloads as well
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version11, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                    FrameworkLocationHelper.GetPathToDotNetFrameworkV11(SharedDotNetFrameworkArchitecture.Bitness64)
-                );
+                    FrameworkLocationHelper.GetPathToDotNetFrameworkV11(SharedDotNetFrameworkArchitecture.Bitness64));
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                        FrameworkLocationHelper.GetPathToDotNetFrameworkV20(SharedDotNetFrameworkArchitecture.Bitness64)
-                    );
+                        FrameworkLocationHelper.GetPathToDotNetFrameworkV20(SharedDotNetFrameworkArchitecture.Bitness64));
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version30, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                        FrameworkLocationHelper.GetPathToDotNetFrameworkV30(SharedDotNetFrameworkArchitecture.Bitness64)
-                    );
+                        FrameworkLocationHelper.GetPathToDotNetFrameworkV30(SharedDotNetFrameworkArchitecture.Bitness64));
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version35, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                        FrameworkLocationHelper.GetPathToDotNetFrameworkV35(SharedDotNetFrameworkArchitecture.Bitness64)
-                    );
+                        FrameworkLocationHelper.GetPathToDotNetFrameworkV35(SharedDotNetFrameworkArchitecture.Bitness64));
 
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version40, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                        FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness64)
-                    );
+                        FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness64));
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.VersionLatest, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                        FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness64)
-                    );
+                        FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness64));
                 ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Latest, UtilitiesDotNetFrameworkArchitecture.Bitness64).ShouldBe(
-                        FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness64)
-                    );
+                        FrameworkLocationHelper.GetPathToDotNetFrameworkV40(SharedDotNetFrameworkArchitecture.Bitness64));
             }
         }
 
@@ -1356,8 +1331,7 @@ public void GenerateReferencAssemblyInvalidProfile()
                 FrameworkNameVersioning frameworkName = new FrameworkNameVersioning(targetFrameworkIdentifier, targetFrameworkVersion, targetFrameworkProfile);
 
                 FrameworkLocationHelper.GenerateReferenceAssemblyPath(targetFrameworkRootPath, frameworkName);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure if the identifier has invalid chars which would be used as part of path generation that we get an InvalidOperationException
@@ -1378,8 +1352,7 @@ public void GenerateReferencAssemblyInvalidIdentifier()
                 FrameworkNameVersioning frameworkName = new FrameworkNameVersioning(targetFrameworkIdentifier, targetFrameworkVersion, targetFrameworkProfile);
 
                 FrameworkLocationHelper.GenerateReferenceAssemblyPath(targetFrameworkRootPath, frameworkName);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure if the moniker and the root make a too long path that an InvalidOperationException is raised
@@ -1404,8 +1377,7 @@ public void GenerateReferencAssemblyPathTooLong()
                 FrameworkNameVersioning frameworkName = new FrameworkNameVersioning(targetFrameworkIdentifier, targetFrameworkVersion, targetFrameworkProfile);
 
                 FrameworkLocationHelper.GenerateReferenceAssemblyPath(targetFrameworkRootPath, frameworkName);
-            }
-           );
+            });
         }
         #endregion
 
@@ -1588,8 +1560,7 @@ public void ChainReferenceAssembliesRedistExistsBadFile()
                         FileUtilities.DeleteWithoutTrailingBackslash(redist40Directory, true);
                     }
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get the correct exception when the xml file points to an included framework which does not exist.
@@ -1656,8 +1627,7 @@ public void ChainReferenceAssembliesRedistInvalidPathChars()
                         FileUtilities.DeleteWithoutTrailingBackslash(redist41Directory, true);
                     }
                 }
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get the correct exception when the xml file points to an included framework which has invalid path chars.
@@ -1693,8 +1663,7 @@ public void ChainReferenceAssembliesRedistPathTooLong()
                         FileUtilities.DeleteWithoutTrailingBackslash(redist41Directory, true);
                     }
                 }
-            }
-           );
+            });
         }
         #endregion
 
@@ -1891,8 +1860,7 @@ public void GetPathToReferenceAssembliesNullFrameworkName()
             Should.Throw<ArgumentNullException>(() =>
             {
                 ToolLocationHelper.GetPathToReferenceAssemblies("Not Null String", (FrameworkNameVersioning)null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get the correct exception when both parameters are null
@@ -1903,8 +1871,7 @@ public void GetPathToReferenceAssembliesNullArgumentNameandFrameworkName()
             Should.Throw<ArgumentNullException>(() =>
             {
                 ToolLocationHelper.GetPathToReferenceAssemblies(null, (FrameworkNameVersioning)null);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get the correct exception when the root is null but the frameworkname is not null
@@ -1916,8 +1883,7 @@ public void GetPathToReferenceAssembliesNullArgumentGoodFrameworkNameNullRoot()
             {
                 FrameworkNameVersioning frameworkName = new FrameworkNameVersioning("Ident", new Version("2.0"));
                 ToolLocationHelper.GetPathToReferenceAssemblies(null, frameworkName);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get the correct exception when the root is null but the frameworkname is not null
@@ -1930,8 +1896,7 @@ public void GetPathToReferenceAssembliesNullArgumentGoodFrameworkNameEmptyRoot()
             {
                 FrameworkNameVersioning frameworkName = new FrameworkNameVersioning("Ident", new Version("2.0"));
                 ToolLocationHelper.GetPathToReferenceAssemblies(string.Empty, frameworkName);
-            }
-           );
+            });
         }
         /// <summary>
         /// Make sure we get the correct exception when the root is null but the frameworkname is not empty to make sure we cover the different input cases
@@ -1944,8 +1909,7 @@ public void GetPathToReferenceAssembliesNullArgumentGoodFrameworkNameEmptyRoot2(
             {
                 FrameworkNameVersioning frameworkName = new FrameworkNameVersioning("Ident", new Version("2.0"));
                 ToolLocationHelper.GetPathToReferenceAssemblies(string.Empty, frameworkName);
-            }
-           );
+            });
         }
         #endregion
 
@@ -1961,8 +1925,7 @@ public void GetPathToReferenceAssembliesDefaultLocationNullFrameworkName()
             Should.Throw<ArgumentNullException>(() =>
             {
                 ToolLocationHelper.GetPathToReferenceAssemblies((FrameworkNameVersioning)null);
-            }
-           );
+            });
         }
 
         /// <summary>
@@ -2453,8 +2416,7 @@ public void GetAssemblyFoldersExInfoTestEmptyRegistryRoot()
             Should.Throw<ArgumentException>(() =>
             {
                 ToolLocationHelper.GetAssemblyFoldersExInfo("", "v3.0", "AssemblyFoldersEx", null, null, System.Reflection.ProcessorArchitecture.MSIL);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we can an argumentNull exception if we try and pass a null registry root
@@ -2465,8 +2427,7 @@ public void GetAssemblyFoldersExInfoListTestNullRegistryRoot()
             Should.Throw<ArgumentNullException>(() =>
             {
                 ToolLocationHelper.GetAssemblyFoldersExInfo(null, "v3.0", "AssemblyFoldersEx", null, null, System.Reflection.ProcessorArchitecture.MSIL);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we can an argument exception if we try and pass a empty registry suffix
@@ -2477,8 +2438,7 @@ public void GetAssemblyFoldersExInfoTestEmptyRegistrySuffix()
             Should.Throw<ArgumentException>(() =>
             {
                 ToolLocationHelper.GetAssemblyFoldersExInfo(@"SOFTWARE\Microsoft\.UnitTest", "v3.0", "", null, null, System.Reflection.ProcessorArchitecture.MSIL);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we can an argumentNull exception if we try and pass a null registry suffix
@@ -2489,8 +2449,7 @@ public void GetAssemblyFoldersExInfoTestNullRegistrySuffix()
             Should.Throw<ArgumentNullException>(() =>
             {
                 ToolLocationHelper.GetAssemblyFoldersExInfo(@"SOFTWARE\Microsoft\.UnitTest", "v3.0", null, null, null, System.Reflection.ProcessorArchitecture.MSIL);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we can an argument exception if we try and pass a empty registry suffix
@@ -2501,8 +2460,7 @@ public void GetAssemblyFoldersExInfoTestEmptyTargetRuntime()
             Should.Throw<ArgumentException>(() =>
             {
                 ToolLocationHelper.GetAssemblyFoldersExInfo(@"SOFTWARE\Microsoft\.UnitTest", "", "AssemblyFoldersEx", null, null, System.Reflection.ProcessorArchitecture.MSIL);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we can an argumentNull exception if we try and pass a null target runtime version
@@ -2513,8 +2471,7 @@ public void GetAssemblyFoldersExInfoTestNullTargetRuntimeVersion()
             Should.Throw<ArgumentNullException>(() =>
             {
                 ToolLocationHelper.GetAssemblyFoldersExInfo(@"SOFTWARE\Microsoft\.UnitTest", null, "AssemblyFoldersEx", null, null, System.Reflection.ProcessorArchitecture.MSIL);
-            }
-           );
+            });
         }
         /// <summary>
         /// Verify we can get a list of directories out of the public API.
@@ -3172,8 +3129,7 @@ public void ResolveFromDirectoryPathTooLong()
                 var targetPlatform = new Dictionary<TargetPlatformSDK, TargetPlatformSDK>();
 
                 ToolLocationHelper.GatherSDKListFromDirectory(paths, targetPlatform);
-            }
-           );
+            });
         }
 
         /// <summary>
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index 722314a5afa..41cd31a67f2 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -1024,8 +1024,7 @@ public void InProcTrackingTestStopBeforeWrite()
 
                 // This should throw a COMException, since we have cleaned up
                 FileTracker.WriteContextTLogs(Path.GetFullPath("."), tlogRootName);
-            }
-           );
+            });
         }
         [Fact(Skip = "FileTracker tests require VS2015 Update 3 or a packaged version of Tracker.exe https://github.com/dotnet/msbuild/issues/649")]
         public void InProcTrackingTestNotStop()
@@ -1359,8 +1358,7 @@ public void InProcTrackingTwoContextsTwoEnds()
                     File.Delete(tlogWriteFile);
                     File.Delete(tlogWriteFile2);
                 }
-            }
-           );
+            });
         }
 
         [Fact(Skip = "Test fails in xunit because tracker includes the PID in the log file.")]
diff --git a/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs b/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
index ea5ef8f34bf..8e62c09540f 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
@@ -85,86 +85,86 @@ public void FormatNormalizedRootingMarkerTests()
             var tests = new Dictionary<ITaskItem[], string>
             {
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.9999-cvtres.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.9999-cvtres.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.[ID]-cvtres.write.[ID].tlog")
                         .ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.0000-cvtres.read.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.0000-cvtres.read.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.[ID]-cvtres.read.[ID].tlog")
                         .ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.4567-cvtres.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.4567-cvtres.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.[ID]-cvtres.write.[ID].tlog")
                         .ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.9999.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.9999.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.[ID].write.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.0000.read.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.0000.read.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.[ID].read.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.4567.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.4567.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.[ID].write.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link2345.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link2345.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link2345.write.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("link.4567.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("link.4567.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "link.[ID].write.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\a.1234.b\\link.4567.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\a.1234.b\\link.4567.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\a.1234.b\\link.[ID].write.[ID].tlog")
                         .ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("link.write.tlog")},
+                    new ITaskItem[] {new TaskItem("link.write.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "link.write.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("link%20with%20spaces.write.3.tlog")},
+                    new ITaskItem[] {new TaskItem("link%20with%20spaces.write.3.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "link with spaces.write.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[2] {new TaskItem("link.write.tlog"), new TaskItem("Debug\\link2345.write.1.tlog")},
+                    new ITaskItem[2] {new TaskItem("link.write.tlog"), new TaskItem("Debug\\link2345.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link2345.write.[ID].tlog")
                         .ToUpperInvariant() + "|" +
                     Path.Combine(Directory.GetCurrentDirectory(), "link.write.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("link.write.tlog1234")},
+                    new ITaskItem[] {new TaskItem("link.write.tlog1234") },
                     Path.Combine(Directory.GetCurrentDirectory(), "link.write.tlog1234").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("1234link.write.tlog")},
+                    new ITaskItem[] {new TaskItem("1234link.write.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "1234link.write.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("link-1234.write.tlog")},
+                    new ITaskItem[] {new TaskItem("link-1234.write.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "link-1234.write.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("C:\\Debug\\a.1234.b\\link.4567.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("C:\\Debug\\a.1234.b\\link.4567.write.1.tlog") },
                     "C:\\DEBUG\\A.1234.B\\LINK.[ID].WRITE.[ID].TLOG"
                 },
                 {
-                    new ITaskItem[] {new TaskItem("a\\")},
+                    new ITaskItem[] {new TaskItem("a\\") },
                     Path.Combine(Directory.GetCurrentDirectory(), "a\\").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.45\\67.write.1.tlog")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.45\\67.write.1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.45\\67.write.[ID].tlog")
                         .ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("Debug\\link.4567.write.1.tlog\\")},
+                    new ITaskItem[] {new TaskItem("Debug\\link.4567.write.1.tlog\\") },
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.4567.write.1.tlog\\").ToUpperInvariant()
                 },
                 {Array.Empty<ITaskItem>(), ""},
@@ -212,47 +212,47 @@ public void FormatNormalizedRootingMarkerTests()
                     Path.Combine(Directory.GetCurrentDirectory(), "cl.write.[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("foo\\.tlog")},
+                    new ITaskItem[] {new TaskItem("foo\\.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "foo\\.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("foo\\1.tlog")},
+                    new ITaskItem[] {new TaskItem("foo\\1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), "foo\\1.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("\\1.tlog")},
+                    new ITaskItem[] {new TaskItem("\\1.tlog") },
                     Path.Combine(Path.GetPathRoot(Directory.GetCurrentDirectory()), "1.tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem(".1.tlog")},
+                    new ITaskItem[] {new TaskItem(".1.tlog") },
                     Path.Combine(Directory.GetCurrentDirectory(), ".[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("-2")},
+                    new ITaskItem[] {new TaskItem("-2") },
                     Path.Combine(Directory.GetCurrentDirectory(), "-2").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem(".2")},
+                    new ITaskItem[] {new TaskItem(".2") },
                     Path.Combine(Directory.GetCurrentDirectory(), ".2").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("2-")},
+                    new ITaskItem[] {new TaskItem("2-") },
                     Path.Combine(Directory.GetCurrentDirectory(), "2-").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("2.")},
+                    new ITaskItem[] {new TaskItem("2.") },
                     Path.Combine(Directory.GetCurrentDirectory(), "2").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("\\.1.tlog")},
+                    new ITaskItem[] {new TaskItem("\\.1.tlog") },
                     Path.Combine(Path.GetPathRoot(Directory.GetCurrentDirectory()), ".[ID].tlog").ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("\\")},
+                    new ITaskItem[] {new TaskItem("\\") },
                     Path.GetPathRoot(Directory.GetCurrentDirectory()).ToUpperInvariant()
                 },
                 {
-                    new ITaskItem[] {new TaskItem("\\\\share\\foo.read.8.tlog")},
+                    new ITaskItem[] {new TaskItem("\\\\share\\foo.read.8.tlog") },
                     "\\\\share\\foo.read.[ID].tlog".ToUpperInvariant()
                 }
             };
@@ -280,16 +280,14 @@ public void CreateTrackedDependencies()
             Console.WriteLine("Test: CreateTrackedDependencies");
             ITaskItem[] sources = null;
             ITaskItem[] outputs = null;
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     null,
                     sources,
                     null,
                     outputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
             Assert.NotNull(d);
         }
 
@@ -312,16 +310,14 @@ public void SingleCanonicalCL()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -341,16 +337,14 @@ public void NonExistentTlog()
             // Just to be sure, delete the test tlog.
             File.Delete(Path.Combine("TestFiles", "one.tlog"));
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -369,16 +363,14 @@ public void EmptyTLog()
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one.obj"), "");
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one.tlog"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -399,16 +391,14 @@ public void InvalidReadTLogName()
 
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\|one|.tlog")),
                     DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\one.cpp")),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\one.obj")),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             d.ComputeSourcesNeedingCompilation();
 
@@ -429,16 +419,14 @@ public void ReadTLogWithInitialEmptyLine()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "", "^FOO" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -457,16 +445,14 @@ public void ReadTLogWithEmptyLineImmediatelyAfterRoot()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "^FOO", "", "FOO" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -485,16 +471,14 @@ public void ReadTLogWithEmptyLineBetweenRoots()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "^FOO", "FOO", "", "^BAR", "BAR" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -513,16 +497,14 @@ public void ReadTLogWithEmptyRoot()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "^", "FOO" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -543,16 +525,14 @@ public void ReadTLogWithDuplicateInRoot()
             File.WriteAllLines("TestFiles\\one.tlog", new[] { "^TestFiles\\foo.cpp|TestFiles\\foo.cpp", "TestFiles\\bar.cpp", "TestFiles\\foo.cpp" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\one.tlog")),
                     sources,
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\one.obj")),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.NotEmpty(d.DependencyTable); // "Dependency Table should not be empty."
         }
@@ -564,11 +544,9 @@ public void InvalidWriteTLogName()
 
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles
-                (
+            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles(
                     task,
-                    DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\|one|.write.tlog"))
-                );
+                    DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\|one|.write.tlog")));
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have an error."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -583,11 +561,9 @@ public void WriteTLogWithInitialEmptyLine()
             File.WriteAllLines(Path.Combine("TestFiles", "one.write.tlog"), new[] { "", "^FOO" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles
-                (
+            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles(
                     task,
-                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog")))
-                );
+                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -602,11 +578,9 @@ public void WriteTLogWithEmptyLineImmediatelyAfterRoot()
             File.WriteAllLines(Path.Combine("TestFiles", "one.write.tlog"), new[] { "^FOO", "", "FOO" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles
-                (
+            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles(
                     task,
-                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog")))
-                );
+                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -621,11 +595,9 @@ public void WriteTLogWithEmptyLineBetweenRoots()
             File.WriteAllLines(Path.Combine("TestFiles", "one.write.tlog"), new[] { "^FOO", "FOO", "", "^BAR", "BAR" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles
-                (
+            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles(
                     task,
-                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog")))
-                );
+                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -640,11 +612,9 @@ public void WriteTLogWithEmptyRoot()
             File.WriteAllLines(Path.Combine("TestFiles", "one.write.tlog"), new[] { "^", "FOO" });
             MockTask task = DependencyTestHelper.MockTask;
 
-            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles
-                (
+            CanonicalTrackedOutputFiles d = new CanonicalTrackedOutputFiles(
                     task,
-                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog")))
-                );
+                    DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(d.DependencyTable); // "DependencyTable should be empty."
@@ -672,16 +642,14 @@ public void PrimarySourceNotInTlog()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one.obj"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -712,16 +680,14 @@ public void MultipleCanonicalCL()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one2.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -760,16 +726,14 @@ public void MultipleCanonicalCLCompactMissingOnSuccess()
             compactOutputs.SaveTlog();
 
             // Compact the read tlog
-            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     compactOutputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             compactInputs.RemoveDependenciesFromEntryIfMissing(new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))));
             compactInputs.SaveTlog();
@@ -777,16 +741,14 @@ public void MultipleCanonicalCLCompactMissingOnSuccess()
             CanonicalTrackedOutputFiles outputs = new CanonicalTrackedOutputFiles(DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     outputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -829,16 +791,14 @@ public void MultipleCanonicalCLCompactMissingOnSuccessMultiEntry()
             compactOutputs.RemoveDependenciesFromEntryIfMissing(new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))));
             compactOutputs.SaveTlog();
             // Compact the read tlog
-            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     compactOutputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             compactInputs.RemoveDependenciesFromEntryIfMissing(new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))));
             compactInputs.SaveTlog();
@@ -846,16 +806,14 @@ public void MultipleCanonicalCLCompactMissingOnSuccessMultiEntry()
             CanonicalTrackedOutputFiles writtenOutputs = new CanonicalTrackedOutputFiles(DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
-            CanonicalTrackedInputFiles writtenInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles writtenInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     writtenOutputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.Single(writtenOutputs.DependencyTable[Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))]);
             Assert.Equal(4, writtenInputs.DependencyTable[Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))].Count);
@@ -908,30 +866,26 @@ public void RemoveDependencyFromEntry()
 
             Assert.False(writtenOutputs.DependencyTable[Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))].ContainsKey(Path.GetFullPath(Path.Combine("TestFiles", "one3.obj"))));
 
-            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     compactOutputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             compactInputs.RemoveDependencyFromEntry(new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one3.obj"))));
             compactInputs.SaveTlog();
 
-            CanonicalTrackedInputFiles writtenInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles writtenInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     writtenOutputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             Assert.False(writtenInputs.DependencyTable[Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))].ContainsKey(Path.GetFullPath(Path.Combine("TestFiles", "one3.obj"))));
         }
@@ -983,30 +937,26 @@ public void RemoveDependencyFromEntries()
 
             Assert.False(writtenOutputs.DependencyTable[rootingMarker].ContainsKey(Path.GetFullPath(Path.Combine("TestFiles", "one3.obj"))));
 
-            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     new[] { new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) },
                     null,
                     compactOutputs,
                     false, /* no minimal rebuild optimization */
-                    true /* shred composite rooting markers */
-                );
+                    true); /* shred composite rooting markers */
 
             compactInputs.RemoveDependencyFromEntry(new[] { new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) }, new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one3.obj"))));
             compactInputs.SaveTlog();
 
-            CanonicalTrackedInputFiles writtenInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles writtenInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     new[] { new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))), new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) },
                     null,
                     writtenOutputs,
                     false, /* no minimal rebuild optimization */
-                    true /* shred composite rooting markers */
-                );
+                    true); /* shred composite rooting markers */
 
             Assert.False(writtenInputs.DependencyTable[rootingMarker].ContainsKey(Path.GetFullPath(Path.Combine("TestFiles", "one3.obj"))));
         }
@@ -1126,16 +1076,14 @@ public void MultipleCanonicalCLMissingDependency()
             string missing = Path.GetFullPath(Path.Combine("TestFiles", "one2.h"));
             File.Delete(missing);
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // We're out of date, since a missing dependency indicates out-of-dateness
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
@@ -1150,16 +1098,14 @@ public void MultipleCanonicalCLMissingDependency()
             d.SaveTlog();
 
             // read the tlog back in again
-            d = new CanonicalTrackedInputFiles
-                (
+            d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // We're out of date, since a missing dependency indicates out-of-dateness
             outofdate = d.ComputeSourcesNeedingCompilation();
@@ -1218,16 +1164,14 @@ public void MultipleCanonicalCLMissingOutputDependencyRemoved()
             // Read the Tlogs back in..
             compactOutputs = new CanonicalTrackedOutputFiles(DependencyTestHelper.MockTask, DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
             // Compact the read tlog
-            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles compactInputs = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     new[] { new TaskItem(Path.Combine("TestFiles", "one.cpp")), new TaskItem(Path.Combine("TestFiles", "two.cpp")) },
                     null,
                     compactOutputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             compactInputs.SaveTlog();
 
@@ -1258,16 +1202,14 @@ public void MultipleCanonicalCLMissingInputDependencyRemoved()
             string missing = Path.GetFullPath(Path.Combine("TestFiles", "one2.h"));
             File.Delete(missing);
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // We're out of date, since a missing dependency indicates out-of-dateness
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
@@ -1285,16 +1227,14 @@ public void MultipleCanonicalCLMissingInputDependencyRemoved()
             });
 
             // read the tlog back in again
-            d = new CanonicalTrackedInputFiles
-                (
+            d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // We're not out of date, since the missing dependency has been removed
             outofdate = d.ComputeSourcesNeedingCompilation();
@@ -1337,8 +1277,7 @@ public void MultiplePrimaryCanonicalCL()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "two2.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     new ITaskItem[] {
@@ -1351,8 +1290,7 @@ public void MultiplePrimaryCanonicalCL()
                         new TaskItem(Path.Combine("TestFiles", "two.obj")),
                         },
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1404,8 +1342,7 @@ public void MultiplePrimaryCanonicalCLUnderTemp()
                 Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
                 DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "two2.h"), "");
 
-                CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                    (
+                CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                         DependencyTestHelper.MockTask,
                         DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                         new ITaskItem[] {
@@ -1418,8 +1355,7 @@ public void MultiplePrimaryCanonicalCLUnderTemp()
                             new TaskItem(Path.Combine("TestFiles", "two.obj")),
                             },
                         false, /* no minimal rebuild optimization */
-                        false /* shred composite rooting markers */
-                    );
+                        false); /* shred composite rooting markers */
 
                 ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1466,8 +1402,7 @@ public void MultiplePrimaryCanonicalCLSharedDependency()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one2.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     new ITaskItem[] {
@@ -1480,8 +1415,7 @@ public void MultiplePrimaryCanonicalCLSharedDependency()
                         new TaskItem(Path.Combine("TestFiles", "two.obj")),
                         },
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1515,16 +1449,14 @@ public void MultipleCanonicalCLAcrossCommand1()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one1.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1557,16 +1489,14 @@ public void MultipleCanonicalCLAcrossCommand2()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one2.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1603,16 +1533,14 @@ public void MultipleCanonicalCLAcrossCommandNonDependency()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "two2.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1652,16 +1580,14 @@ public void MultipleCanonicalCLAcrossTlogs1()
                                     new TaskItem(Path.Combine("TestFiles", "one2.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1702,16 +1628,14 @@ public void MultipleCanonicalCLAcrossTlogs2()
                                     new TaskItem(Path.Combine("TestFiles", "one2.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1738,16 +1662,14 @@ public void SingleRootedCL()
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "one.h"), "");
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1788,16 +1710,14 @@ public void MultipleRootedCLAcrossTlogs1()
                                     new TaskItem(Path.Combine("TestFiles", "one2.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1840,16 +1760,14 @@ public void MultipleRootedCL()
                                     new TaskItem(Path.Combine("TestFiles", "one2.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "two.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1891,16 +1809,14 @@ public void MultipleRootedCLNonDependency()
                                     new TaskItem(Path.Combine("TestFiles", "one1.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -1940,16 +1856,14 @@ public void MultipleRootedCLAcrossTlogs2()
                                     new TaskItem(Path.Combine("TestFiles", "one2.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -2035,7 +1949,7 @@ public void OutputMultipleCanonicalCL()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
 
             // Prepare files
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
@@ -2067,13 +1981,13 @@ public void OutputMultipleCanonicalCLSubrootMatch()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
             ITaskItem[] sources2 = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "four.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "five.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "five.cpp"))) };
 
             // Prepare files
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
@@ -2145,22 +2059,22 @@ public void OutputMultipleCanonicalCLSubrootMisMatch()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
             ITaskItem[] sources2 = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "four.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "five.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "five.cpp"))) };
             ITaskItem[] sources2Match = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "four.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "five.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "five.cpp"))) };
             ITaskItem[] sourcesPlusOne = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "eight.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
 
             // Do note sources2Match and source2 is missing three.cpp.  It is to test if the RootContainsAllSubRootComponents can handle the case. 
 
@@ -2221,7 +2135,7 @@ public void OutputMultipleCanonicalCLLongTempPath()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
 
             string oldTempPath = Environment.GetEnvironmentVariable("TEMP");
             string oldTmpPath = Environment.GetEnvironmentVariable("TMP");
@@ -2265,7 +2179,7 @@ public void OutputMultipleCanonicalCLAcrossTLogs()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
 
             // Prepare files
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
@@ -2306,7 +2220,7 @@ public void OutputMultipleSingleSubRootCanonicalCL()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
 
             // Prepare files
             Thread.Sleep(_sleepTimeMilliseconds); // need to wait since the timestamp check needs some time to register
@@ -2413,16 +2327,14 @@ public void OutputCLMinimalRebuildOptimization()
             CanonicalTrackedOutputFiles outputs = new CanonicalTrackedOutputFiles(DependencyTestHelper.MockTask, DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
             // Represent our tracked and provided inputs
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     sources,
                     null,
                     outputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // First of all, all things should be up to date
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
@@ -2437,16 +2349,14 @@ public void OutputCLMinimalRebuildOptimization()
             Assert.Equal(3, outofdate.Length);
 
             // With optimization on, only the source that matches the output will need compilation
-            d = new CanonicalTrackedInputFiles
-                    (
+            d = new CanonicalTrackedInputFiles(
                         DependencyTestHelper.MockTask,
                         DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                         sources,
                         null,
                         outputs,
                         true, /* enable minimal rebuild optimization */
-                        false /* shred composite rooting markers */
-                    );
+                        false); /* shred composite rooting markers */
 
             outofdate = d.ComputeSourcesNeedingCompilation();
             Assert.Single(outofdate);
@@ -2512,16 +2422,14 @@ public void OutputCLMinimalRebuildOptimizationComputed()
             outputs.AddComputedOutputForSourceRoot(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")), Path.GetFullPath(Path.Combine("TestFiles", "three.obj")));
 
             // Represent our tracked and provided inputs
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     sources,
                     null,
                     outputs,
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // First of all, all things should be up to date
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
@@ -2536,16 +2444,14 @@ public void OutputCLMinimalRebuildOptimizationComputed()
             Assert.Equal(3, outofdate.Length);
 
             // With optimization on, only the source that matches the output will need compilation
-            d = new CanonicalTrackedInputFiles
-                (
+            d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     sources,
                     null,
                     outputs,
                     true, /* enable minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             outofdate = d.ComputeSourcesNeedingCompilation();
             Assert.Single(outofdate);
@@ -2623,16 +2529,14 @@ public void ReplaceOutputForSource()
             outputs.AddComputedOutputForSourceRoot(threeRootingMarker, Path.GetFullPath(Path.Combine("TestFiles", "three.i")));
 
             // Represent our tracked and provided inputs
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     sources,
                     null,
                     outputs,
                     true, /* minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // We should have one output for three.cpp
             Assert.Single(outputs.DependencyTable[threeRootingMarker]);
@@ -2713,16 +2617,14 @@ public void ExcludeSpecificDirectory()
             CanonicalTrackedOutputFiles outputs = new CanonicalTrackedOutputFiles(DependencyTestHelper.MockTask, DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.write.tlog"))));
 
             // Represent our tracked and provided inputs
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.read.tlog"))),
                     sources,
                     new[] { new TaskItem(Path.GetFullPath(Path.Combine("TeSTfiles", "Foo"))) },
                     outputs,
                     true, /* minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             // All things should be up to date
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
@@ -2776,16 +2678,14 @@ public void SaveCompactedReadTlog()
                                     new TaskItem(Path.Combine("TestFiles", "two1.tlog"))
                                 };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -2801,16 +2701,14 @@ public void SaveCompactedReadTlog()
             Assert.True(Microsoft.Build.Utilities.TrackedDependencies.ItemsExist(tlogs));
 
             // There should be no difference in the out of date files after compaction
-            CanonicalTrackedInputFiles d1 = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d1 = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             outofdate = d1.ComputeSourcesNeedingCompilation();
 
@@ -2822,16 +2720,14 @@ public void SaveCompactedReadTlog()
                                  };
 
             // All log information should now be in the tlog[0]
-            CanonicalTrackedInputFiles d2 = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d2 = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs2,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "two.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "two.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             outofdate = d2.ComputeSourcesNeedingCompilation();
 
@@ -2840,16 +2736,14 @@ public void SaveCompactedReadTlog()
             Assert.False(d2.DependencyTable.ContainsKey(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))));
 
             // There should be no difference even if we send in all the original tlogs
-            CanonicalTrackedInputFiles d3 = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d3 = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "two.cpp"))),
                     null,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "two.obj"))),
                     false, /* no minimal rebuild optimization */
-                    false /* shred composite rooting markers */
-                );
+                    false); /* shred composite rooting markers */
 
             outofdate = d3.ComputeSourcesNeedingCompilation();
 
@@ -2867,7 +2761,7 @@ public void SaveCompactedWriteTlog()
             ITaskItem[] sources = {
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "one.cpp"))),
                                     new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "two.cpp"))),
-                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp")))};
+                                    new TaskItem(Path.GetFullPath(Path.Combine("TestFiles", "three.cpp"))) };
 
             string rootMarker = FileTracker.FormatRootingMarker(sources);
 
@@ -3038,16 +2932,14 @@ public void SaveCompactedReadTlog_MaintainCompositeRootingMarkers()
                                       new TaskItem(Path.Combine("TestFiles", "twothree.obj"))
                                   };
 
-            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     inputs,
                     null,
                     outputs,
                     false, /* no minimal rebuild optimization */
-                    true /* keep composite rooting markers */
-                );
+                    true); /* keep composite rooting markers */
 
             ITaskItem[] outofdate = d.ComputeSourcesNeedingCompilation();
 
@@ -3060,16 +2952,14 @@ public void SaveCompactedReadTlog_MaintainCompositeRootingMarkers()
 
             d.SaveTlog();
 
-            CanonicalTrackedInputFiles d2 = new CanonicalTrackedInputFiles
-                (
+            CanonicalTrackedInputFiles d2 = new CanonicalTrackedInputFiles(
                     DependencyTestHelper.MockTask,
                     tlogs,
                     inputs,
                     null,
                     outputs,
                     false, /* no minimal rebuild optimization */
-                    true /* keep composite rooting markers */
-                );
+                    true); /* keep composite rooting markers */
 
             d2.ComputeSourcesNeedingCompilation();
 
@@ -3092,12 +2982,10 @@ public void InvalidFlatTrackingTLogName()
             DependencyTestHelper.WriteAll("TestFiles\\one.tlog", "");
 
             MockTask task = DependencyTestHelper.MockTask;
-            FlatTrackingData data = new FlatTrackingData
-                (
+            FlatTrackingData data = new FlatTrackingData(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem("TestFiles\\|one|.write.tlog")),
-                    false /* don't skip missing files */
-                );
+                    false); /* don't skip missing files */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(data.DependencyTable); // "DependencyTable should be empty."
@@ -3111,12 +2999,10 @@ public void FlatTrackingTLogWithInitialEmptyLine()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "", "^FOO" });
 
             MockTask task = DependencyTestHelper.MockTask;
-            FlatTrackingData data = new FlatTrackingData
-                (
+            FlatTrackingData data = new FlatTrackingData(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
-                    false /* don't skip missing files */
-                );
+                    false); /* don't skip missing files */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(data.DependencyTable); // "DependencyTable should be empty."
@@ -3130,12 +3016,10 @@ public void FlatTrackingTLogWithEmptyLineImmediatelyAfterRoot()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "^FOO", "", "FOO" });
 
             MockTask task = DependencyTestHelper.MockTask;
-            FlatTrackingData data = new FlatTrackingData
-                (
+            FlatTrackingData data = new FlatTrackingData(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
-                    false /* don't skip missing files */
-                );
+                    false); /* don't skip missing files */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(data.DependencyTable); // "DependencyTable should be empty."
@@ -3149,12 +3033,10 @@ public void FlatTrackingTLogWithEmptyLineBetweenRoots()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "^FOO", "FOO", "", "^BAR", "BAR" });
 
             MockTask task = DependencyTestHelper.MockTask;
-            FlatTrackingData data = new FlatTrackingData
-                (
+            FlatTrackingData data = new FlatTrackingData(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
-                    false /* don't skip missing files */
-                );
+                    false); /* don't skip missing files */
 
             Assert.Equal(1, ((MockEngine)task.BuildEngine).Warnings); // "Should have a warning."
             Assert.Empty(data.DependencyTable); // "DependencyTable should be empty."
@@ -3168,12 +3050,10 @@ public void FlatTrackingTLogWithEmptyRoot()
             File.WriteAllLines(Path.Combine("TestFiles", "one.tlog"), new[] { "^", "FOO" });
 
             MockTask task = DependencyTestHelper.MockTask;
-            FlatTrackingData data = new FlatTrackingData
-                (
+            FlatTrackingData data = new FlatTrackingData(
                     task,
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
-                    false /* don't skip missing files */
-                );
+                    false); /* don't skip missing files */
 
             Assert.Equal(0, ((MockEngine)task.BuildEngine).Warnings); // "Should not warn -- root markers are ignored by default"
             Assert.Single(data.DependencyTable); // "DependencyTable should only contain one entry."
@@ -3575,14 +3455,12 @@ public void FlatTrackingExcludeDirectories()
 
             // Get the newest time w/o any exclude paths
             Dictionary<string, DateTime> sharedLastWriteTimeUtcCache = new Dictionary<string, DateTime>(StringComparer.OrdinalIgnoreCase);
-            FlatTrackingData data = new FlatTrackingData
-                (
+            FlatTrackingData data = new FlatTrackingData(
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     null,
                     DateTime.MinValue,
                     null,
-                    sharedLastWriteTimeUtcCache
-                );
+                    sharedLastWriteTimeUtcCache);
 
             DateTime originalNewest = data.NewestFileTimeUtc;
 
@@ -3597,14 +3475,12 @@ public void FlatTrackingExcludeDirectories()
             DependencyTestHelper.WriteAll(Path.Combine("TestFiles", "ToBeExcluded", "SubdirectoryExcluded", "three.h"), "");
 
             // Now do a flat tracker ignoring the exclude directories and make sure the time didn't change
-            data = new FlatTrackingData
-                (
+            data = new FlatTrackingData(
                     DependencyTestHelper.ItemArray(new TaskItem(Path.Combine("TestFiles", "one.tlog"))),
                     null,
                     DateTime.MinValue,
                     new[] { Path.GetFullPath(Path.Combine("TestFiles", "ToBeExcluded")) },
-                    sharedLastWriteTimeUtcCache
-                );
+                    sharedLastWriteTimeUtcCache);
 
             Assert.Equal(originalNewest, data.NewestFileTimeUtc); // "Timestamp changed when no tracked files changed."
         }
diff --git a/src/Utilities/ApiContract.cs b/src/Utilities/ApiContract.cs
index 4023e0adb6b..468cca313dc 100644
--- a/src/Utilities/ApiContract.cs
+++ b/src/Utilities/ApiContract.cs
@@ -56,8 +56,7 @@ internal static void ReadContractsElement(XmlElement element, ICollection<ApiCon
                     {
                         apiContracts.Add(new ApiContract(
                             contractElement.GetAttribute(Attributes.Name),
-                            contractElement.GetAttribute(Attributes.Version)
-                        ));
+                            contractElement.GetAttribute(Attributes.Version)));
                     }
                 }
             }
diff --git a/src/Utilities/CommandLineBuilder.cs b/src/Utilities/CommandLineBuilder.cs
index 6baa7da046b..0a8d7d4fe5a 100644
--- a/src/Utilities/CommandLineBuilder.cs
+++ b/src/Utilities/CommandLineBuilder.cs
@@ -518,22 +518,18 @@ protected virtual void VerifyThrowNoEmbeddedDoubleQuotes(string switchName, stri
             {
                 if (string.IsNullOrEmpty(switchName))
                 {
-                    ErrorUtilities.VerifyThrowArgument
-                        (
+                    ErrorUtilities.VerifyThrowArgument(
                             -1 == parameter.IndexOf('"'),
                             "General.QuotesNotAllowedInThisKindOfTaskParameterNoSwitchName",
-                            parameter
-                        );
+                            parameter);
                 }
                 else
                 {
-                    ErrorUtilities.VerifyThrowArgument
-                        (
+                    ErrorUtilities.VerifyThrowArgument(
                             -1 == parameter.IndexOf('"'),
                             "General.QuotesNotAllowedInThisKindOfTaskParameter",
                             switchName,
-                            parameter
-                        );
+                            parameter);
                 }
             }
         }
diff --git a/src/Utilities/MuxLogger.cs b/src/Utilities/MuxLogger.cs
index 5f67d9265a7..861529b1ccd 100644
--- a/src/Utilities/MuxLogger.cs
+++ b/src/Utilities/MuxLogger.cs
@@ -675,9 +675,7 @@ private void RaiseErrorEvent(object sender, BuildErrorEventArgs buildEvent)
                         buildEvent.BuildEventContext != null &&
                         (
                          buildEvent.BuildEventContext.SubmissionId != _submissionId && /* The build submission does not match the submissionId for this logger */
-                         buildEvent.BuildEventContext.SubmissionId != BuildEventContext.InvalidSubmissionId /*We do not have a build submissionid this can happen if the error comes from the nodeloggingcontext*/
-                        )
-                       )
+                         buildEvent.BuildEventContext.SubmissionId != BuildEventContext.InvalidSubmissionId))
                     {
                         return;
                     }
@@ -720,9 +718,7 @@ private void RaiseWarningEvent(object sender, BuildWarningEventArgs buildEvent)
                         buildEvent.BuildEventContext != null &&
                         (
                          buildEvent.BuildEventContext.SubmissionId != _submissionId && /* The build submission does not match the submissionId for this logger */
-                         buildEvent.BuildEventContext.SubmissionId != BuildEventContext.InvalidSubmissionId /*We do not have a build submissionid this can happen if the error comes from the nodeloggingcontext*/
-                        )
-                       )
+                         buildEvent.BuildEventContext.SubmissionId != BuildEventContext.InvalidSubmissionId))
                     {
                         return;
                     }
@@ -1217,10 +1213,7 @@ private void RaiseAnyEvent(object sender, BuildEventArgs buildEvent)
                         (
                          buildEvent.BuildEventContext.SubmissionId != _submissionId && /* The build submission does not match the submissionId for this logger */
                          !( /* We do not have a build submissionid this can happen if the event comes from the nodeloggingcontext -- but we only want to raise it if it was an error or warning */
-                           buildEvent.BuildEventContext.SubmissionId == BuildEventContext.InvalidSubmissionId && eventIsErrorOrWarning
-                          )
-                        )
-                       )
+                           buildEvent.BuildEventContext.SubmissionId == BuildEventContext.InvalidSubmissionId && eventIsErrorOrWarning)))
                     {
                         return;
                     }
diff --git a/src/Utilities/TaskItem.cs b/src/Utilities/TaskItem.cs
index edba3b1af42..6048ab4d087 100644
--- a/src/Utilities/TaskItem.cs
+++ b/src/Utilities/TaskItem.cs
@@ -72,10 +72,8 @@ public TaskItem()
         /// </summary>
         /// <comments>Assumes the itemspec passed in is escaped.</comments>
         /// <param name="itemSpec">The item-spec string.</param>
-        public TaskItem
-        (
-            string itemSpec
-        )
+        public TaskItem(
+            string itemSpec)
         {
             ErrorUtilities.VerifyThrowArgumentNull(itemSpec, nameof(itemSpec));
 
@@ -91,11 +89,9 @@ string itemSpec
         /// </comments>
         /// <param name="itemSpec">The item-spec string.</param>
         /// <param name="itemMetadata">Custom metadata on the item.</param>
-        public TaskItem
-        (
+        public TaskItem(
             string itemSpec,
-            IDictionary itemMetadata
-        ) :
+            IDictionary itemMetadata) :
             this(itemSpec)
         {
             ErrorUtilities.VerifyThrowArgumentNull(itemMetadata, nameof(itemMetadata));
@@ -120,10 +116,8 @@ IDictionary itemMetadata
         /// This constructor creates a new TaskItem, using the given ITaskItem.
         /// </summary>
         /// <param name="sourceItem">The item to copy.</param>
-        public TaskItem
-        (
-            ITaskItem sourceItem
-        )
+        public TaskItem(
+            ITaskItem sourceItem)
         {
             ErrorUtilities.VerifyThrowArgumentNull(sourceItem, nameof(sourceItem));
 
@@ -259,11 +253,9 @@ public void RemoveMetadata(string metadataName)
         /// </comments>
         /// <param name="metadataName">Name of metadata to set or change.</param>
         /// <param name="metadataValue">Value of metadata.</param>
-        public void SetMetadata
-        (
+        public void SetMetadata(
             string metadataName,
-            string metadataValue
-        )
+            string metadataValue)
         {
             ErrorUtilities.VerifyThrowArgumentLength(metadataName, nameof(metadataName));
 
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 4b3d0eb2804..3f30c31aa63 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -476,8 +476,7 @@ private static IEnumerable<TargetPlatformSDK> GetTargetPlatformMonikers(string[]
                     ||
                     (
                         platformSDK.TargetPlatformIdentifier.Equals(targetPlatformIdentifier, StringComparison.OrdinalIgnoreCase)
-                        && platformSDK.TargetPlatformVersion <= targetPlatformVersion
-                    ) || platformSDK.ContainsPlatform(targetPlatformIdentifier, targetPlatformVersionString))
+                        && platformSDK.TargetPlatformVersion <= targetPlatformVersion) || platformSDK.ContainsPlatform(targetPlatformIdentifier, targetPlatformVersionString))
                 .OrderBy<TargetPlatformSDK, Version>(platform => platform.TargetPlatformVersion);
         }
 
@@ -532,8 +531,7 @@ public static string GetPlatformExtensionSDKLocation(string sdkMoniker, string t
                         string.IsNullOrEmpty(platform.TargetPlatformIdentifier)
                         ||
                         (platform.TargetPlatformIdentifier.Equals(targetPlatformIdentifier, StringComparison.OrdinalIgnoreCase)
-                        && platform.TargetPlatformVersion <= targetPlatformVersion)
-                    )
+                        && platform.TargetPlatformVersion <= targetPlatformVersion))
                     && platform.ExtensionSDKs.ContainsKey(sdkMoniker))
                 .OrderByDescending<TargetPlatformSDK, Version>(platform => platform.TargetPlatformVersion)
                 .DefaultIfEmpty(null).FirstOrDefault<TargetPlatformSDK>();
@@ -791,8 +789,7 @@ public static IList<TargetPlatformSDK> FilterTargetPlatformSdks(IList<TargetPlat
             {
                 if (
                     (targetPlatformSdk.MinOSVersion == null || osVersion == null || targetPlatformSdk.MinOSVersion <= osVersion) && // filter based on OS version - let pass if not in manifest or parameter
-                    (targetPlatformSdk.MinVSVersion == null || vsVersion == null || targetPlatformSdk.MinVSVersion <= vsVersion)    // filter based on VS version - let pass if not in manifest or parameter
-                    )
+                    (targetPlatformSdk.MinVSVersion == null || vsVersion == null || targetPlatformSdk.MinVSVersion <= vsVersion))    // filter based on VS version - let pass if not in manifest or parameter
                 {
                     filteredTargetPlatformSdkList.Add(targetPlatformSdk);
                 }
@@ -941,8 +938,7 @@ public static string[] GetPlatformOrFrameworkExtensionSdkReferences(string exten
         /// <param name="diskRoots">The disk roots used to gather installed SDKs.</param>
         /// <param name="extensionDiskRoots">The disk roots used to gather installed extension SDKs.</param>
         /// <param name="registryRoot">The registry root used to gather installed extension SDKs.</param>
-        public static string[] GetPlatformOrFrameworkExtensionSdkReferences
-            (
+        public static string[] GetPlatformOrFrameworkExtensionSdkReferences(
                 string extensionSdkMoniker,
                 string targetSdkIdentifier,
                 string targetSdkVersion,
@@ -950,8 +946,7 @@ public static string[] GetPlatformOrFrameworkExtensionSdkReferences
                 string extensionDiskRoots,
                 string registryRoot,
                 string targetPlatformIdentifier,
-                string targetPlatformVersion
-            )
+                string targetPlatformVersion)
         {
             lock (s_locker)
             {
@@ -1074,16 +1069,14 @@ private static string[] GetLegacyTargetPlatformReferences(string targetPlatformI
         /// Gathers the set of platform winmds for a particular {SDKI, SDKV, TPI, TPMinV, TPV} combination,
         /// based on the assumption that it is an SDK that has both {SDKI, SDKV} and TP* specifiers.
         /// </summary>
-        private static string[] GetTargetPlatformReferencesFromManifest
-            (
+        private static string[] GetTargetPlatformReferencesFromManifest(
                 string sdkIdentifier,
                 string sdkVersion,
                 string targetPlatformIdentifier,
                 string targetPlatformMinVersion,
                 string targetPlatformVersion,
                 string diskRoots,
-                string registryRoot
-            )
+                string registryRoot)
         {
             ErrorUtilities.VerifyThrowArgumentLength(sdkIdentifier, nameof(sdkIdentifier));
             ErrorUtilities.VerifyThrowArgumentLength(sdkVersion, nameof(sdkVersion));
@@ -3285,8 +3278,7 @@ public static string GetPathToDotNetFrameworkSdkFile(string fileName, TargetDotN
                 version,
                 visualStudioVersion,
                 UtilitiesDotNetFrameworkArchitecture.Current,
-                canFallBackIfNecessary: true /* If the file is not found for the current architecture, it's OK to follow fallback mechanisms. */
-            );
+                canFallBackIfNecessary: true); /* If the file is not found for the current architecture, it's OK to follow fallback mechanisms. */
 
         /// <summary>
         /// Get a fully qualified path to a file in the .NET Framework SDK. Error if the .NET Framework SDK can't be found.
@@ -3311,8 +3303,7 @@ public static string GetPathToDotNetFrameworkSdkFile(string fileName, TargetDotN
                 version,
                 visualStudioVersion,
                 architecture,
-                false /* Do _not_ fall back -- if the user is specifically requesting a particular architecture, they want that architecture. */
-            );
+                false); /* Do _not_ fall back -- if the user is specifically requesting a particular architecture, they want that architecture. */
 
         /// <summary>
         /// Get a fully qualified path to a file in the .NET Framework SDK. Error if the .NET Framework SDK can't be found.
@@ -3459,8 +3450,7 @@ public static string GetPathToWindowsSdkFile(string fileName, TargetDotNetFramew
                 version,
                 visualStudioVersion,
                 UtilitiesDotNetFrameworkArchitecture.Current,
-                true /* If the file is not found for the current architecture, it's OK to follow fallback mechanisms. */
-            );
+                true); /* If the file is not found for the current architecture, it's OK to follow fallback mechanisms. */
 
         /// <summary>
         /// Returns the path to a file in the Windows SDK for the desired .NET Framework and Visual Studio version and the desired
@@ -3478,8 +3468,7 @@ public static string GetPathToWindowsSdkFile(string fileName, TargetDotNetFramew
                 version,
                 visualStudioVersion,
                 architecture,
-                false /* Do _not_ fall back -- if the user is specifically requesting a particular architecture, they want that architecture. */
-            );
+                false); /* Do _not_ fall back -- if the user is specifically requesting a particular architecture, they want that architecture. */
 
         /// <summary>
         /// Returns the path to a file in the Windows SDK for the desired .NET Framework and Visual Studio version and the desired
@@ -3808,9 +3797,7 @@ internal static IList<string> GetFrameworkIdentifiers(string frameworkReferenceR
                     if (programFilesReferenceAssemblyLocationFound &&
                         (
                             string.Equals(folder.Name, FrameworkLocationHelper.dotNetFrameworkVersionFolderPrefixV30, StringComparison.OrdinalIgnoreCase)
-                            || string.Equals(folder.Name, FrameworkLocationHelper.dotNetFrameworkVersionFolderPrefixV35, StringComparison.OrdinalIgnoreCase)
-                        )
-                       )
+                            || string.Equals(folder.Name, FrameworkLocationHelper.dotNetFrameworkVersionFolderPrefixV35, StringComparison.OrdinalIgnoreCase)))
                     {
                         bAddDotNetFrameworkIdentifier = true;
                         continue;
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index a275a3be4fa..5b444012b92 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -566,12 +566,10 @@ private string GetTemporaryResponseFile(string responseFileCommands, out string
         /// <param name="commandLineCommands"></param>
         /// <param name="responseFileSwitch"></param>
         /// <returns>The information required to start the process.</returns>
-        protected virtual ProcessStartInfo GetProcessStartInfo
-        (
+        protected virtual ProcessStartInfo GetProcessStartInfo(
             string pathToTool,
             string commandLineCommands,
-            string responseFileSwitch
-        )
+            string responseFileSwitch)
         {
             // Build up the command line that will be spawned.
             string commandLine = commandLineCommands;
@@ -652,12 +650,10 @@ string responseFileSwitch
         /// <param name="responseFileCommands">Command line arguments that should go into a temporary response file</param>
         /// <param name="commandLineCommands">Command line arguments that should be passed to the tool executable directly</param>
         /// <returns>exit code from the tool - if errors were logged and the tool has an exit code of zero, then we sit it to -1</returns>
-        protected virtual int ExecuteTool
-        (
+        protected virtual int ExecuteTool(
             string pathToTool,
             string responseFileCommands,
-            string commandLineCommands
-        )
+            string commandLineCommands)
         {
             if (!UseCommandProcessor)
             {
@@ -1027,13 +1023,11 @@ private void LogMessagesFromStandardOutput()
         /// <param name="dataAvailableSignal"></param>
         /// <param name="messageImportance"></param>
         /// <param name="queueType"></param>
-        private void LogMessagesFromStandardErrorOrOutput
-        (
+        private void LogMessagesFromStandardErrorOrOutput(
             Queue dataQueue,
             ManualResetEvent dataAvailableSignal,
             MessageImportance messageImportance,
-            StandardOutputOrErrorQueueType queueType
-        )
+            StandardOutputOrErrorQueueType queueType)
         {
             ErrorUtilities.VerifyThrow(dataQueue != null,
                 "The data queue must be available.");
diff --git a/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs b/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
index a4a22eacb2d..cfba753cd42 100644
--- a/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
+++ b/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
@@ -389,8 +389,7 @@ private ITaskItem[] ComputeSourcesNeedingCompilationFromCompositeRootingMarker(b
             string newestSourceDependencyFile;
             if (
                 CanonicalTrackedFilesHelper.FilesExistAndRecordNewestWriteTime(sourcesNeedingCompilationList, _log, out newestSourceDependencyTime, out newestSourceDependencyFile) &&
-                CanonicalTrackedFilesHelper.FilesExistAndRecordOldestWriteTime(_outputFileGroup, _log, out oldestOutputTime, out oldestOutputFile)
-                )
+                CanonicalTrackedFilesHelper.FilesExistAndRecordOldestWriteTime(_outputFileGroup, _log, out oldestOutputTime, out oldestOutputFile))
             {
                 if (newestSourceDependencyTime <= oldestOutputTime)
                 {
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 0e823a027ab..285054637bb 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -529,8 +529,7 @@ private static string GetPath(string filename, DotNetFrameworkArchitecture bitne
                                        s_TrackerFilename.Equals(filename, StringComparison.OrdinalIgnoreCase) ||
                                        s_FileTrackerFilename.Equals(filename, StringComparison.OrdinalIgnoreCase),
                                        "This method should only be passed s_TrackerFilename or s_FileTrackerFilename, but was passed {0} instead!",
-                                       filename
-                                       );
+                                       filename);
 
             // Look for FileTracker.dll/Tracker.exe in the MSBuild tools directory. They may exist elsewhere on disk,
             // but other copies aren't guaranteed to be compatible with the latest.
