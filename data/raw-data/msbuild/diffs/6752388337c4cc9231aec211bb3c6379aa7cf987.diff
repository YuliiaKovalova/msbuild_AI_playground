diff --git a/src/Tasks.UnitTests/AssemblyDependency/BaseComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/BaseComparer.cs
new file mode 100644
index 00000000000..9a07897b708
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/BaseComparer.cs
@@ -0,0 +1,24 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
+{
+    internal abstract class BaseComparer<T> : EqualityComparer<T>
+    {
+        protected bool CollectionEquals<TIn>(IEnumerable<TIn> c1, IEnumerable<TIn> c2, IEqualityComparer<TIn> equalityComparer)
+        {
+            if (c1 == null)
+            {
+                return c2 == null;
+            }
+
+            return c1.SequenceEqual(c2, equalityComparer);
+        }
+
+        public override int GetHashCode(T obj)
+        {
+            throw new NotSupportedException();
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARRequestComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARRequestComparer.cs
new file mode 100644
index 00000000000..2b089a3a359
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/RARRequestComparer.cs
@@ -0,0 +1,71 @@
+﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+using System;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
+{
+
+    internal class RARRequestComparer
+        : BaseComparer<ResolveAssemblyReferenceRequest>
+    {
+        internal static IEqualityComparer<ResolveAssemblyReferenceRequest> Instance { get; } = new RARRequestComparer();
+
+        private static readonly IEqualityComparer<string> StringEqualityComparer = StringComparer.InvariantCulture;
+
+        private RARRequestComparer() { }
+
+        public override bool Equals(ResolveAssemblyReferenceRequest x, ResolveAssemblyReferenceRequest y)
+        {
+            // Same reference or null
+            if (x == y)
+                return true;
+
+            if (x == null || y == null)
+                return false;
+
+            bool fieldsEqual = y != null &&
+                   x.AppConfigFile == y.AppConfigFile &&
+                   x.AutoUnify == y.AutoUnify &&
+                   x.CopyLocalDependenciesWhenParentReferenceInGac == y.CopyLocalDependenciesWhenParentReferenceInGac &&
+                   x.DoNotCopyLocalIfInGac == y.DoNotCopyLocalIfInGac &&
+                   x.FindDependencies == y.FindDependencies &&
+                   x.FindDependenciesOfExternallyResolvedReferences == y.FindDependenciesOfExternallyResolvedReferences &&
+                   x.FindRelatedFiles == y.FindRelatedFiles &&
+                   x.FindSatellites == y.FindSatellites &&
+                   x.FindSerializationAssemblies == y.FindSerializationAssemblies &&
+                   x.IgnoreDefaultInstalledAssemblySubsetTables == y.IgnoreDefaultInstalledAssemblySubsetTables &&
+                   x.IgnoreDefaultInstalledAssemblyTables == y.IgnoreDefaultInstalledAssemblyTables &&
+                   x.IgnoreTargetFrameworkAttributeVersionMismatch == y.IgnoreTargetFrameworkAttributeVersionMismatch &&
+                   x.IgnoreVersionForFrameworkReferences == y.IgnoreVersionForFrameworkReferences &&
+                   x.ProfileName == y.ProfileName &&
+                   x.Silent == y.Silent &&
+                   x.StateFile == y.StateFile &&
+                   x.SupportsBindingRedirectGeneration == y.SupportsBindingRedirectGeneration &&
+                   x.TargetedRuntimeVersion == y.TargetedRuntimeVersion &&
+                   x.TargetFrameworkMoniker == y.TargetFrameworkMoniker &&
+                   x.TargetFrameworkMonikerDisplayName == y.TargetFrameworkMonikerDisplayName &&
+                   x.TargetFrameworkVersion == y.TargetFrameworkVersion &&
+                   x.TargetProcessorArchitecture == y.TargetProcessorArchitecture &&
+                   x.UnresolveFrameworkAssembliesFromHigherFrameworks == y.UnresolveFrameworkAssembliesFromHigherFrameworks &&
+                   x.UseResolveAssemblyReferenceService == y.UseResolveAssemblyReferenceService &&
+                   x.WarnOrErrorOnTargetArchitectureMismatch == y.WarnOrErrorOnTargetArchitectureMismatch;
+
+            return fieldsEqual &&
+                   CollectionEquals(x.AllowedAssemblyExtensions, y.AllowedAssemblyExtensions, StringEqualityComparer) &&
+                   CollectionEquals(x.AllowedRelatedFileExtensions, y.AllowedRelatedFileExtensions, StringEqualityComparer) &&
+                   CollectionEquals(x.Assemblies, y.Assemblies, ReadOnlyTaskItemComparer.Instance) &&
+                   CollectionEquals(x.AssemblyFiles, y.AssemblyFiles, ReadOnlyTaskItemComparer.Instance) &&
+                   CollectionEquals(x.CandidateAssemblyFiles, y.CandidateAssemblyFiles, StringEqualityComparer) &&
+                   CollectionEquals(x.FullFrameworkAssemblyTables, y.FullFrameworkAssemblyTables, ReadOnlyTaskItemComparer.Instance) &&
+                   CollectionEquals(x.FullFrameworkFolders, y.FullFrameworkFolders, StringEqualityComparer) &&
+                   CollectionEquals(x.FullTargetFrameworkSubsetNames, y.FullTargetFrameworkSubsetNames, StringEqualityComparer) &&
+                   CollectionEquals(x.InstalledAssemblySubsetTables, y.InstalledAssemblySubsetTables, ReadOnlyTaskItemComparer.Instance) &&
+                   CollectionEquals(x.InstalledAssemblyTables, y.InstalledAssemblyTables, ReadOnlyTaskItemComparer.Instance) &&
+                   CollectionEquals(x.LatestTargetFrameworkDirectories, y.LatestTargetFrameworkDirectories, StringEqualityComparer) &&
+                   CollectionEquals(x.ResolvedSDKReferences, y.ResolvedSDKReferences, ReadOnlyTaskItemComparer.Instance) &&
+                   CollectionEquals(x.SearchPaths, y.SearchPaths, StringEqualityComparer) &&
+                   CollectionEquals(x.TargetFrameworkDirectories, y.TargetFrameworkDirectories, StringEqualityComparer) &&
+                   CollectionEquals(x.TargetFrameworkSubsets, y.TargetFrameworkSubsets, StringEqualityComparer);
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARResponseComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARResponseComparer.cs
new file mode 100644
index 00000000000..dad0216dca6
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/RARResponseComparer.cs
@@ -0,0 +1,32 @@
+﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
+{
+    internal class RARResponseComparer : BaseComparer<ResolveAssemblyReferenceResponse>
+    {
+        public static IEqualityComparer<ResolveAssemblyReferenceResponse> Instance { get; } = new RARResponseComparer();
+
+        public override bool Equals(ResolveAssemblyReferenceResponse x, ResolveAssemblyReferenceResponse y)
+        {
+            if (x == y)
+                return true;
+
+            if (x == null || y == null)
+                return false;
+
+            return y != null &&
+               CollectionEquals(x.CopyLocalFiles, y.CopyLocalFiles, ReadOnlyTaskItemComparer.Instance) &&
+               x.DependsOnNETStandard == y.DependsOnNETStandard &&
+               x.DependsOnSystemRuntime == y.DependsOnSystemRuntime &&
+               CollectionEquals(x.FilesWritten, y.FilesWritten, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.RelatedFiles, y.RelatedFiles, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.ResolvedDependencyFiles, y.ResolvedDependencyFiles, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.ResolvedFiles, y.ResolvedFiles, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.SatelliteFiles, y.SatelliteFiles, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.ScatterFiles, y.ScatterFiles, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.SerializationAssemblyFiles, y.SerializationAssemblyFiles, ReadOnlyTaskItemComparer.Instance) &&
+               CollectionEquals(x.SuggestedRedirects, y.SuggestedRedirects, ReadOnlyTaskItemComparer.Instance);
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
new file mode 100644
index 00000000000..213153e8720
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
@@ -0,0 +1,26 @@
+﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
+{
+    internal class RARResultComparer : BaseComparer<ResolveAssemblyReferenceResult>
+    {
+        public static IEqualityComparer<ResolveAssemblyReferenceResult> Instance { get; } = new RARResultComparer();
+
+        public override bool Equals(ResolveAssemblyReferenceResult x, ResolveAssemblyReferenceResult y)
+        {
+            if (x == y)
+                return true;
+
+            if (x == null || y == null)
+                return false;
+
+            return x.TaskResult == y.TaskResult &&
+                CollectionEquals(x.BuildEventArgs?.Select(e => e.Message).ToList(), y.BuildEventArgs?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
+                RARResponseComparer.Instance.Equals(x.Response, y.Response);
+                
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ReadOnlyTaskItemComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/ReadOnlyTaskItemComparer.cs
new file mode 100644
index 00000000000..be85be3f2b7
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/ReadOnlyTaskItemComparer.cs
@@ -0,0 +1,28 @@
+﻿using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+
+namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
+{
+    internal class ReadOnlyTaskItemComparer : BaseComparer<ReadOnlyTaskItem>
+    {
+        internal static IEqualityComparer<ReadOnlyTaskItem> Instance { get; } = new ReadOnlyTaskItemComparer();
+        private ReadOnlyTaskItemComparer() { }
+
+        public override bool Equals(ReadOnlyTaskItem x, ReadOnlyTaskItem y)
+        {
+            // Same reference or null
+            if (x == y)
+                return true;
+
+            return
+                //EqualityComparer<ICollection>.Default.Equals(x.MetadataNames.Count, y.MetadataNames) &&
+               x.MetadataCount == y.MetadataCount &&
+               x.ItemSpec == y.ItemSpec &&
+               CollectionEquals(x.MetadataNameToValue, y.MetadataNameToValue, EqualityComparer<KeyValuePair<string, string>>.Default) &&
+               x.EvaluatedIncludeEscaped == y.EvaluatedIncludeEscaped;
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
new file mode 100644
index 00000000000..a2cf11f7e64
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
@@ -0,0 +1,137 @@
+﻿using MessagePack;
+using MessagePack.Resolvers;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Client;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Server;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Services;
+using Microsoft.Build.Utilities;
+using Nerdbank.Streams;
+using Shouldly;
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.IO.Pipelines;
+using System.IO.Pipes;
+using System.Linq;
+using System.Reflection;
+using System.Text;
+using System.Threading;
+using System.Threading.Tasks;
+using Xunit;
+
+using Task = System.Threading.Tasks.Task;
+
+namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
+{
+    public sealed class ResolveAssemblyReferenceAsAService_Tests
+    {
+        [Fact]
+        public void EnsureInputPropertiesMatch()
+        {
+            string[] rarInputProperties = typeof(ResolveAssemblyReference).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
+                .Where(p => !p.GetCustomAttributes(typeof(OutputAttribute), true).Any()).Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
+            string[] inputProperties = typeof(ResolveAssemblyReferenceTaskInput).GetProperties().Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
+
+            Assert.Equal(rarInputProperties.Length, inputProperties.Length);
+            foreach (var item in rarInputProperties)
+            {
+                Assert.Contains(item, inputProperties);
+            }
+        }
+
+        [Fact]
+        public void EnsureOutputPropertiesMatch()
+        {
+            string[] rarInputProperties = typeof(ResolveAssemblyReference).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
+                .Where(p => p.GetCustomAttributes(typeof(OutputAttribute), true).Any()).Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
+            string[] inputProperties = typeof(ResolveAssemblyReferenceTaskOutput).GetProperties().Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
+
+            Assert.Equal(rarInputProperties.Length, inputProperties.Length);
+            foreach (var item in rarInputProperties)
+            {
+                Assert.Contains(item, inputProperties);
+            }
+        }
+
+        [Fact]
+        public void TransferedRequestEquals()
+        {
+            ITaskItem[] assemblyNames = new TaskItem[]
+            {
+                new TaskItem("DependsOnEverettSystem, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=feedbeadbadcadbe")
+            };
+
+            ResolveAssemblyReference rar = new ResolveAssemblyReference
+            {
+                Assemblies = assemblyNames
+            };
+            ResolveAssemblyReferenceRequest request = new ResolveAssemblyReferenceRequest(rar.ResolveAssemblyReferenceInput);
+            byte[] data = MessagePackSerializer.Serialize(request);
+            ResolveAssemblyReferenceRequest requestDes = MessagePackSerializer.Deserialize<ResolveAssemblyReferenceRequest>(data);
+
+            Assert.Equal(request, requestDes, RARRequestComparer.Instance);
+        }
+
+
+        [Fact]
+        public void TransmitDataTest()
+        {
+            using CancellationTokenSource cts = new CancellationTokenSource();
+            (Stream serverStream, Stream clientStream) = FullDuplexStream.CreatePair();
+
+            RarController controller = new RarController(string.Empty, GetPipe);
+            Task serverTask = controller.HandleClientAsync(serverStream, cts.Token);
+            RarClient client = new RarClient(new RarTestEngine(clientStream));
+            ITaskItem[] assemblyNames = new TaskItem[]
+            {
+                new TaskItem("DependsOnEverettSystem, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=feedbeadbadcadbe")
+            };
+
+            ResolveAssemblyReference rar = new ResolveAssemblyReference();
+            rar.Assemblies = assemblyNames;
+            ResolveAssemblyReferenceRequest request = new ResolveAssemblyReferenceRequest(rar.ResolveAssemblyReferenceInput);
+            ResolveAssemblyReferenceTaskHandler handler = new ResolveAssemblyReferenceTaskHandler();
+            ResolveAssemblyReferenceResult expectedResult = handler.Execute(request);
+
+            client.Connect();
+            ResolveAssemblyReferenceResult result = client.Execute(rar.ResolveAssemblyReferenceInput);
+            cts.Cancel();
+
+            Assert.Equal(expectedResult, result, RARResultComparer.Instance);
+
+            serverStream.Dispose();
+            clientStream.Dispose();
+        }
+
+        private NamedPipeServerStream GetPipe(string pipeName, int? arg2, int? arg3, int arg4, bool arg5)
+        {
+            throw new NotSupportedException();
+        }
+
+        class RarTestEngine : IRarBuildEngine
+        {
+            public Stream ClientStream { get; }
+
+            public RarTestEngine(Stream clientStream)
+            {
+                ClientStream = clientStream;
+            }
+
+            bool IRarBuildEngine.CreateRarNode()
+            {
+                throw new NotImplementedException();
+            }
+
+            Stream IRarBuildEngine.GetRarClientStream(string pipeName, int timeout)
+            {
+                return ClientStream;
+            }
+
+            string IRarBuildEngine.GetRarPipeName()
+            {
+                return string.Empty;
+            }
+        }
+    }
+}
