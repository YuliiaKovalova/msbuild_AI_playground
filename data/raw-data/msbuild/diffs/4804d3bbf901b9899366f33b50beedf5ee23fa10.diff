diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index c0ee34dd6eb..f5f55824210 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -33,18 +33,13 @@ internal sealed partial class TerminalLogger : INodeLogger
 
 #if NET7_0_OR_GREATER
     [StringSyntax(StringSyntaxAttribute.Regex)]
-#endif
     private const string ImmediateMessagePattern = @"\[CredentialProvider\]|--interactive";
-
     private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;
 
-#if NET7_0_OR_GREATER
     [GeneratedRegex(ImmediateMessagePattern, Options)]
     private static partial Regex ImmediateMessageRegex();
 #else
-    private static Regex ImmediateMessageRegex() => immediateMessageRegex;
-
-    private static readonly Regex immediateMessageRegex = new(ImmediateMessagePattern, RegexOptions.Compiled | Options);
+    private readonly string[] _immediateMessageKeywords = { @"\[CredentialProvider\]", "--interactive" };
 #endif
 
     /// <summary>
@@ -626,7 +621,14 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)
     /// </summary>
     /// <param name="message">Raised event.</param>
     /// <returns>true if marker is detected.</returns>
-    private bool IsImmediateMessage(string message) => ImmediateMessageRegex().IsMatch(message);
+    private bool IsImmediateMessage(string message)
+    {
+#if NET7_0_OR_GREATER
+        return ImmediateMessageRegex().IsMatch(message);
+#else
+        return _immediateMessageKeywords.Any(imk => message.IndexOf(imk, StringComparison.OrdinalIgnoreCase) >= 0);
+#endif
+    }
 
     /// <summary>
     /// The <see cref="IEventSource.ErrorRaised"/> callback.
@@ -654,7 +656,7 @@ private void ErrorRaised(object sender, BuildErrorEventArgs e)
         }
     }
 
-    #endregion
+#endregion
 
     #region Refresher thread implementation
 
