diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index 3af3c50d59a..494960d6e5b 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -17,7 +17,6 @@ namespace Microsoft.Build.BuildCop.Infrastructure;
 
 
 // TODO: https://github.com/dotnet/msbuild/issues/9628
-// Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)
 internal class ConfigurationProvider
 {
     private IEditorConfigParser s_editorConfigParser = new EditorConfigParser();
@@ -37,7 +36,13 @@ internal class ConfigurationProvider
     /// <returns></returns>
     public CustomConfigurationData GetCustomConfiguration(string projectFullPath, string ruleId)
     {
-        return CustomConfigurationData.Null;
+        var configuration = GetConfiguration(projectFullPath, ruleId);
+
+        if (configuration is null || !configuration.Any())
+        {
+            return CustomConfigurationData.Null;
+        }
+        return new CustomConfigurationData(ruleId, configuration);
     }
 
     /// <summary>
@@ -95,25 +100,8 @@ private TConfig[] FillConfiguration<TConfig, TRule>(string projectFullPath, IRea
         return configurations;
     }
 
-    /// <summary>
-    /// Gets effective user specified (or default) configuration for the given analyzer rule.
-    /// The configuration values CAN be null upon this operation.
-    /// 
-    /// The configuration module should as well check that BuildAnalyzerConfigurationInternal.EvaluationAnalysisScope
-    ///  for all rules is equal - otherwise it should error out.
-    /// </summary>
-    /// <param name="projectFullPath"></param>
-    /// <param name="ruleId"></param>
-    /// <returns></returns>
-    public BuildAnalyzerConfiguration GetUserConfiguration(string projectFullPath, string ruleId)
+    internal Dictionary<string, string> GetConfiguration(string projectFullPath, string ruleId)
     {
-        var cacheKey = $"{ruleId}-projectFullPath ";
-
-        if (!_editorConfig.TryGetValue(cacheKey, out BuildAnalyzerConfiguration? editorConfig))
-        {
-            editorConfig = BuildAnalyzerConfiguration.Null;
-        }
-
         var config = new Dictionary<string, string>();
         try
         {
@@ -123,7 +111,7 @@ public BuildAnalyzerConfiguration GetUserConfiguration(string projectFullPath, s
         {
             Debug.WriteLine(ex);
         }
-        
+
         var keyTosearch = $"msbuild_analyzer.{ruleId}.";
         var dictionaryConfig = new Dictionary<string, string>();
 
@@ -135,9 +123,33 @@ public BuildAnalyzerConfiguration GetUserConfiguration(string projectFullPath, s
             }
         }
 
-        if (dictionaryConfig.Any())
+        return dictionaryConfig;
+    }
+
+    /// <summary>
+    /// Gets effective user specified (or default) configuration for the given analyzer rule.
+    /// The configuration values CAN be null upon this operation.
+    /// 
+    /// The configuration module should as well check that BuildAnalyzerConfigurationInternal.EvaluationAnalysisScope
+    ///  for all rules is equal - otherwise it should error out.
+    /// </summary>
+    /// <param name="projectFullPath"></param>
+    /// <param name="ruleId"></param>
+    /// <returns></returns>
+    public BuildAnalyzerConfiguration GetUserConfiguration(string projectFullPath, string ruleId)
+    {
+        var cacheKey = $"{ruleId}-projectFullPath ";
+
+        if (!_editorConfig.TryGetValue(cacheKey, out BuildAnalyzerConfiguration? editorConfig))
+        {
+            editorConfig = BuildAnalyzerConfiguration.Null;
+        }
+
+        var config = GetConfiguration(projectFullPath, ruleId);
+
+        if (config.Any())
         {
-            editorConfig = BuildAnalyzerConfiguration.Create(dictionaryConfig);
+            editorConfig = BuildAnalyzerConfiguration.Create(config);
         }
 
         _editorConfig[cacheKey] = editorConfig;
diff --git a/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs
index f6ecf0b91cf..928d7c12eba 100644
--- a/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs
@@ -15,17 +15,27 @@ namespace Microsoft.Build.Experimental.BuildCop;
 ///  that were attribute to a particular rule, but were not recognized by the infrastructure.
 /// The configuration data that is recognized by the infrastructure is passed as <see cref="BuildAnalyzerConfiguration"/>.
 /// </summary>
-/// <param name="ruleId"></param>
-public class CustomConfigurationData(string ruleId)
+public class CustomConfigurationData
 {
     public static CustomConfigurationData Null { get; } = new(string.Empty);
 
     public static bool NotNull(CustomConfigurationData data) => !Null.Equals(data);
 
+    public CustomConfigurationData(string ruleId)
+    {
+        RuleId = ruleId;
+    }
+
+    public CustomConfigurationData(string ruleId, Dictionary<string, string> properties)
+    {
+        RuleId = ruleId;
+        ConfigurationData = properties;
+    }
+
     /// <summary>
     /// Identifier of the rule that the configuration data is for.
     /// </summary>
-    public string RuleId { get; init; } = ruleId;
+    public string RuleId { get; init; }
 
     /// <summary>
     /// Key-value pairs of unstructured data from .editorconfig file.
