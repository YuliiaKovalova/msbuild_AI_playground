diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index d892c47a917..7fa9f5670f1 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -57,7 +57,8 @@ public void ConstructorWithNullName()
                     taskLocation: @"c:\my tasks\mytask.dll",
                     taskParameters: null,
                     globalParameters: null,
-                    warningsAsErrors: null);
+                    warningsAsErrors: null,
+                    warningsAsMessages: null);
             }
            );
         }
@@ -90,7 +91,8 @@ public void ConstructorWithEmptyName()
                     taskLocation: @"c:\my tasks\mytask.dll",
                     taskParameters: null,
                     globalParameters: null,
-                    warningsAsErrors: null);
+                    warningsAsErrors: null,
+                    warningsAsMessages: null);
             }
            );
         }
@@ -123,7 +125,8 @@ public void ConstructorWithNullLocation()
                     taskLocation: null,
                     taskParameters: null,
                     globalParameters: null,
-                    warningsAsErrors: null);
+                    warningsAsErrors: null,
+                    warningsAsMessages: null);
             }
            );
         }
@@ -158,7 +161,8 @@ public void ConstructorWithEmptyLocation()
                     taskLocation: String.Empty,
                     taskParameters: null,
                     globalParameters: null,
-                    warningsAsErrors: null);
+                    warningsAsErrors: null,
+                    warningsAsMessages: null);
             }
            );
         }
@@ -191,26 +195,32 @@ public void TestValidConstructors()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: null,
                 globalParameters: null,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             TaskHostConfiguration config2 = new TaskHostConfiguration(
-                1,
-                Directory.GetCurrentDirectory(),
-                null,
-                Thread.CurrentThread.CurrentCulture,
-                Thread.CurrentThread.CurrentUICulture,
+                nodeId: 1,
+                startupDirectory: Directory.GetCurrentDirectory(),
+                buildProcessEnvironment: null,
+                culture: Thread.CurrentThread.CurrentCulture,
+                uiCulture: Thread.CurrentThread.CurrentUICulture,
+#if FEATURE_APPDOMAIN
+                appDomainSetup:
 #if FEATURE_APPDOMAIN
                 null,
+#endif
+                lineNumberOfTask:
 #endif
                 1,
-                1,
-                @"c:\my project\myproj.proj",
-                _continueOnErrorDefault,
-                "TaskName",
-                @"c:\MyTasks\MyTask.dll",
-                null,
-                null,
-                null);
+                columnNumberOfTask: 1,
+                projectFileOfTask: @"c:\my project\myproj.proj",
+                continueOnError: _continueOnErrorDefault,
+                taskName: "TaskName",
+                taskLocation: @"c:\MyTasks\MyTask.dll",
+                taskParameters: null,
+                globalParameters: null,
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             TaskHostConfiguration config3 = new TaskHostConfiguration(
@@ -234,7 +244,8 @@ public void TestValidConstructors()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: parameters,
                 globalParameters: null,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             IDictionary<string, object> parameters2 = new Dictionary<string, object>();
             parameters2.Add("Text", "Hello!");
@@ -263,7 +274,8 @@ public void TestValidConstructors()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: parameters2,
                 globalParameters: null,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             HashSet<string> WarningsAsErrors = new HashSet<string>();
             WarningsAsErrors.Add("MSB1234");
@@ -292,7 +304,8 @@ public void TestValidConstructors()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: parameters2,
                 globalParameters: null,
-                warningsAsErrors: WarningsAsErrors);
+                warningsAsErrors: WarningsAsErrors,
+                warningsAsMessages: null);
         }
 
         /// <summary>
@@ -328,7 +341,8 @@ public void TestTranslationWithNullDictionary()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: null,
                 globalParameters: expectedGlobalProperties,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -371,7 +385,8 @@ public void TestTranslationWithEmptyDictionary()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: new Dictionary<string, object>(),
                 globalParameters: new Dictionary<string, string>(),
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -419,7 +434,8 @@ public void TestTranslationWithValueTypesInDictionary()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: parameters,
                 globalParameters: null,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -465,7 +481,8 @@ public void TestTranslationWithITaskItemInDictionary()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: parameters,
                 globalParameters: null,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -510,7 +527,8 @@ public void TestTranslationWithITaskItemArrayInDictionary()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: parameters,
                 globalParameters: null,
-                warningsAsErrors: null);
+                warningsAsErrors: null,
+                warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -562,7 +580,8 @@ public void TestTranslationWithWarningsAsErrors()
                 taskLocation: @"c:\MyTasks\MyTask.dll",
                 taskParameters: null,
                 globalParameters: null,
-                warningsAsErrors: WarningsAsErrors);
+                warningsAsErrors: WarningsAsErrors,
+                warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 4956e1383cd..e26b9429d0c 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -272,7 +272,8 @@ public bool Execute()
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
-                        _taskLoggingContext.GetWarningsAsErrors()
+                        _taskLoggingContext.GetWarningsAsErrors(),
+                        _taskLoggingContext.GetWarningsAsMessages()
                         
                     );
 
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 7d8b8fcc7ef..7d9cdb33121 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -815,6 +815,7 @@ private void RunTask(object state)
             _updateEnvironment = !taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostDoNotUpdateEnvironment", "1", StringComparison.OrdinalIgnoreCase);
             _updateEnvironmentAndLog = taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostUpdateEnvironmentAndLog", "1", StringComparison.OrdinalIgnoreCase);
             WarningsAsErrors = taskConfiguration.WarningsAsErrors;
+            WarningsAsMessages = taskConfiguration.WarningsAsMessages;
             try
             {
                 // Change to the startup directory
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 367e2845823..e3a0bbaec0e 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -87,6 +87,8 @@ internal class TaskHostConfiguration : INodePacket
 
         private ICollection<string> _warningsAsErrors;
 
+        private ICollection<string> _warningsAsMessages;
+
 #if FEATURE_APPDOMAIN
         /// <summary>
         /// Constructor
@@ -105,7 +107,8 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
-        /// <param name="warningsAsErrors">Warning codes to be thrown as errors for the current project.</param>
+        /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
+        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #else
         /// <summary>
         /// Constructor
@@ -124,6 +127,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
+        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
         public TaskHostConfiguration
             (
@@ -143,7 +147,8 @@ public TaskHostConfiguration
                 string taskLocation,
                 IDictionary<string, object> taskParameters,
                 Dictionary<string, string> globalParameters,
-                ICollection<string> warningsAsErrors
+                ICollection<string> warningsAsErrors,
+                ICollection<string> warningsAsMessages
             )
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
@@ -174,6 +179,7 @@ ICollection<string> warningsAsErrors
             _taskName = taskName;
             _taskLocation = taskLocation;
             _warningsAsErrors = warningsAsErrors;
+            _warningsAsMessages = warningsAsMessages;
 
             if (taskParameters != null)
             {
@@ -357,6 +363,15 @@ public ICollection<string> WarningsAsErrors
             }
         }
 
+        public ICollection<string> WarningsAsMessages
+        {
+            [DebuggerStepThrough]
+            get
+            {
+                return _warningsAsMessages;
+            }
+        }
+
         /// <summary>
         /// Translates the packet to/from binary form.
         /// </summary>
@@ -385,6 +400,13 @@ public void Translate(ITranslator translator)
                                  collectionFactory: count => new HashSet<string>());
 #else
                                  collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
+#endif
+            translator.Translate(collection: ref _warningsAsMessages,
+                                 objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),
+#if CLR2COMPATIBILITY
+                                 collectionFactory: count => new HashSet<string>());
+#else
+                                 collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
 #endif
         }
 
