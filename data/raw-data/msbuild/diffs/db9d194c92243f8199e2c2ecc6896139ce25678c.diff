diff --git a/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
index 2fa7d10e6df..38e72483f3f 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
@@ -40,13 +40,17 @@ protected override void OnEventWritten(EventWrittenEventArgs eventData)
         }
 
         public override void Dispose() {
-            DisableEvents(_eventSources);
+            if (_eventSources  != null)
+            {
+                DisableEvents(_eventSources);
+            }
+            
             base.Dispose();
         }
 
         /// <summary>
         /// Returns the events that were emitted till invocation of this method.
-        /// The events are cleared from the in-memory store and are populated again. 
+        /// The events are cleared from the in-memory store and are populated again in <see cref="OnEventWritten"/>. 
         /// </summary>
         /// <returns>List of the events that were emitted for eventSource</returns>
         internal List<EventWrittenEventArgs> GetEvents()
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 416a296c012..367a74bb276 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -107,9 +107,6 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
 
             _logger.WarningCount.ShouldBe(1);
             _logger.Warnings.First().Code.ShouldStartWith("MSB4241");
-
-            var resultsOfEventSource = _eventSourceTestListener.GetEvents();
-            resultsOfEventSource.Count.ShouldBe(2);
         }
 
         [Fact]
@@ -123,9 +120,6 @@ public void AssertResolverThrows()
             SdkResolverException e = Should.Throw<SdkResolverException>(() => SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true));
             e.Resolver.Name.ShouldBe("MockSdkResolverThrows");
             e.Sdk.Name.ShouldBe("1sdkName");
-
-            var resultsOfEventSource = _eventSourceTestListener.GetEvents();
-            resultsOfEventSource.Count.ShouldBe(16);
         }
 
         [Fact]
@@ -215,6 +209,22 @@ public void AssertSdkResolutionMessagesAreLogged()
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("SucceededToResolveSDK", sdk.ToString(), nameof(MockSdkResolver1), result.Path, result.Version));
         }
 
+        [Fact]
+        public void AssertSdkResolutionMessagesAreLoggedInEventSource()
+        {
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(false, false, true));
+            SdkReference sdk = new SdkReference("1sdkName", "referencedVersion", "minimumVersion");
+
+            SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);
+            var eventsLogged = _eventSourceTestListener.GetEvents();
+            eventsLogged.Count.ShouldBe(2);
+            eventsLogged.ShouldContain(x => x.EventId == 64); // Start of the sdk resolve
+
+            var sdkStopEvent = eventsLogged.FirstOrDefault(x => x.EventId == 65); // End sdk resolve
+            sdkStopEvent.ShouldNotBeNull();
+            sdkStopEvent.Payload[1].ShouldBe("1sdkName");
+        }
+
         [Fact]
         public void AssertFirstResolverErrorsSupressedWhenResolved()
         {
