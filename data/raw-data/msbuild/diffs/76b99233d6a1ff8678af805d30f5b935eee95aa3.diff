diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 6c2b6337393..875f276b48e 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -1254,6 +1254,41 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
                 }
             }
 
+            /// <summary>
+            /// Translates a dictionary of { string, T } for dictionaries with public parameterless constructors.
+            /// </summary>
+            /// <param name="dictionary">The dictionary to be translated.</param>
+            /// <param name="comparer">Key comparer</param>
+            public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
+            {
+                int count = 0;
+                if (Mode == TranslationDirection.ReadFromStream)
+                {
+                    dictionary = new(comparer);
+                    Translate(ref count);
+                    string key = string.Empty;
+                    DateTime val = DateTime.MinValue;
+                    for (int i = 0; i < count; i++)
+                    {
+                        Translate(ref key);
+                        Translate(ref val);
+                        dictionary.Add(key, val);
+                    }
+                }
+                else
+                {
+                    count = dictionary.Count;
+                    Translate(ref count);
+                    foreach (KeyValuePair<string, DateTime> kvp in dictionary)
+                    {
+                        string key = kvp.Key;
+                        DateTime val = kvp.Value;
+                        Translate(ref key);
+                        Translate(ref val);
+                    }
+                }
+            }
+
             /// <summary>
             /// Writes out the boolean which says if this object is null or not.
             /// </summary>
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index b1acb85ec2f..55e56c24746 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -301,6 +301,8 @@ void TranslateArray<T>(ref T[] array)
 
         void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> collectionCreator);
 
+        public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer);
+
         void TranslateDictionary<K, V>(ref IDictionary<K, V> dictionary, ObjectTranslator<K> keyTranslator, ObjectTranslator<V> valueTranslator, NodePacketCollectionCreator<IDictionary<K, V>> dictionaryCreator);
 
         /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 7e29179a750..2f0a70d2204 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -1,5 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index 0962a995b48..af9f6e2ffb9 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -107,7 +107,7 @@ public override void Translate(ITranslator translator)
         internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
         {
             // First, try to retrieve the resx information from our hashtable.
-            if (resXFiles.GetDependencyFile(resxFile) is not ResXFile retVal || retVal == null)
+            if ((resXFiles.GetDependencyFile(resxFile) as ResXFile retVal) is null)
             {
                 // Ok, the file wasn't there.  Add it to our cache and return it to the caller.  
                 retVal = AddResxFile(resxFile, useMSBuildResXReader);
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 71b8f873f2d..a94833887f0 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -246,6 +246,9 @@ public override void Translate(ITranslator translator)
                 ref instanceLocalFileStateCache,
                 StringComparer.OrdinalIgnoreCase,
                 (ITranslator t) => new FileState(t));
+
+            // IsDirty should be false for either direction. Either this cache was brought
+            // up-to-date with the on-disk cache or vice versa. Either way, they agree.
             IsDirty = false;
         }
 
diff --git a/src/Tasks/TaskTranslatorHelpers.cs b/src/Tasks/TaskTranslatorHelpers.cs
index e0d7bb4baa0..7db48cf61ae 100644
--- a/src/Tasks/TaskTranslatorHelpers.cs
+++ b/src/Tasks/TaskTranslatorHelpers.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections.Generic;
 using System.Runtime.Versioning;
 using Microsoft.Build.BackEnd;
 
@@ -35,35 +34,5 @@ public static void Translate(this ITranslator translator, ref FrameworkName fram
                 frameworkName = new FrameworkName(identifier, version, profile);
             }
         }
-
-        public static void TranslateDictionary(this ITranslator translator, ref Dictionary<string, DateTime> dict, StringComparer comparer)
-        {
-            int count = 0;
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                dict = new Dictionary<string, DateTime>(comparer);
-                translator.Translate(ref count);
-                string key = string.Empty;
-                DateTime val = DateTime.Now;
-                for (int i = 0; i < count; i++)
-                {
-                    translator.Translate(ref key);
-                    translator.Translate(ref val);
-                    dict.Add(key, val);
-                }
-            }
-            else
-            {
-                count = dict.Count;
-                translator.Translate(ref count);
-                foreach (KeyValuePair<string, DateTime> kvp in dict)
-                {
-                    string key = kvp.Key;
-                    DateTime val = kvp.Value;
-                    translator.Translate(ref key);
-                    translator.Translate(ref val);
-                }
-            }
-        }
     }
 }
