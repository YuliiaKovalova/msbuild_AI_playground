diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index 225ea077970..068809ccc8c 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -314,6 +314,27 @@ public void ItemKeepDuplicatesFalse()
             Assert.Single(group);
         }
 
+        [Fact]
+        public void ItemKeepDuplicatesFalseTwoDuplicatesAtOnce()
+        {
+            string content = ObjectModelHelpers.CleanupFileContents("""
+            <Project>
+            <Target Name='t'>
+                <ItemGroup>
+                    <i1 Include='a1'/>
+                    <i1 Include='a1;a1' KeepDuplicates='false' />
+                </ItemGroup>
+            </Target>
+            </Project>
+            """);
+            IntrinsicTask task = CreateIntrinsicTask(content);
+            Lookup lookup = LookupHelpers.CreateEmptyLookup();
+            ExecuteTask(task, lookup);
+
+            var group = lookup.GetItems("i1");
+            Assert.Single(group);
+        }
+
         [Fact]
         public void ItemKeepDuplicatesAsCondition()
         {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 2a9cc0e26b0..423679a1f6e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
@@ -215,21 +216,27 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
                 FileSystems.Default,
                 LoggingContext);
 
+            Action<IList> logFunction = null;
+
             if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents && itemsToAdd?.Count > 0)
             {
-                ItemGroupLoggingHelper.LogTaskParameter(
-                    LoggingContext,
-                    TaskParameterMessageKind.AddItem,
-                    parameterName: null,
-                    propertyName: null,
-                    child.ItemType,
-                    itemsToAdd,
-                    logItemMetadata: true,
-                    child.Location);
+                logFunction = (itemList) =>
+                {
+                    ItemGroupLoggingHelper.LogTaskParameter(
+                        LoggingContext,
+                        TaskParameterMessageKind.AddItem,
+                        parameterName: null,
+                        propertyName: null,
+                        child.ItemType,
+                        itemList,
+                        logItemMetadata: true,
+                        child.Location);
+                };
             }
 
             // Now add the items we created to the lookup.
-            bucket.Lookup.AddNewItemsOfItemType(child.ItemType, itemsToAdd, !keepDuplicates); // Add in one operation for potential copy-on-write
+            bucket.Lookup.AddNewItemsOfItemType(child.ItemType, itemsToAdd, !keepDuplicates, logFunction);
+            // Add in one operation for potential copy-on-write
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
index e0bcc5eff38..069a9482f62 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
 using System.Threading;
@@ -636,7 +637,7 @@ internal void SetProperty(ProjectPropertyInstance property)
         /// <summary>
         /// Implements a true add, an item that has been created in a batch.
         /// </summary>
-        internal void AddNewItemsOfItemType(string itemType, ICollection<ProjectItemInstance> group, bool doNotAddDuplicates = false)
+        internal void AddNewItemsOfItemType(string itemType, ICollection<ProjectItemInstance> group, bool doNotAddDuplicates = false, Action<IList> logFunction = null)
         {
             // Adding to outer scope could be easily implemented, but our code does not do it at present
             MustNotBeOuterScope();
@@ -658,14 +659,32 @@ internal void AddNewItemsOfItemType(string itemType, ICollection<ProjectItemInst
             IEnumerable<ProjectItemInstance> itemsToAdd = group;
             if (doNotAddDuplicates)
             {
-                // Remove duplicates from the inputs.
-                itemsToAdd = itemsToAdd.Distinct(ProjectItemInstance.EqualityComparer);
-
                 // Ensure we don't also add any that already exist.
                 var existingItems = GetItems(itemType);
-                if (existingItems.Count > 0)
+                var existingItemsHashSet = existingItems.ToHashSet(ProjectItemInstance.EqualityComparer);
+
+                var deduplicatedItemsToAdd = new List<ProjectItemInstance>();
+                foreach (var item in itemsToAdd)
+                {
+                    if (existingItemsHashSet.Add(item))
+                    {
+                        deduplicatedItemsToAdd.Add(item);
+                    }
+                }
+                itemsToAdd = deduplicatedItemsToAdd;
+            }
+
+            if (logFunction != null)
+            {
+                if (doNotAddDuplicates)
+                {
+                    // itemsToAdd is guaranteed to be a List if we're doing the doNotAddDuplicates part.
+                    logFunction.Invoke(itemsToAdd as List<ProjectItemInstance>);
+                }
+                else
                 {
-                    itemsToAdd = itemsToAdd.Where(item => !existingItems.Contains(item, ProjectItemInstance.EqualityComparer));
+                    var groupAsList = group as List<ProjectItemInstance>;
+                    logFunction.Invoke(groupAsList ?? group.ToList());
                 }
             }
 
