diff --git a/src/Build/BackEnd/Node/RarNode.cs b/src/Build/BackEnd/Node/RarNode.cs
index e455651bc60..6db989dcc0b 100644
--- a/src/Build/BackEnd/Node/RarNode.cs
+++ b/src/Build/BackEnd/Node/RarNode.cs
@@ -28,6 +28,11 @@ public sealed class RarNode : INode
         /// </summary>
         private const string RarControllerName = "Microsoft.Build.Tasks.ResolveAssemblyReferences.Server.RarController, Microsoft.Build.Tasks.Core";
 
+        /// <summary>
+        /// Timeout for node shutdwon
+        /// </summary>
+        private static readonly TimeSpan NodeShutdownTimeout = TimeSpan.FromHours(1);
+
         public NodeEngineShutdownReason Run(bool nodeReuse, bool lowPriority, out Exception shutdownException, CancellationToken cancellationToken = default)
         {
             shutdownException = null;
@@ -42,15 +47,18 @@ public NodeEngineShutdownReason Run(bool nodeReuse, bool lowPriority, out Except
 
             Task<NodeEngineShutdownReason> msBuildShutdown = RunShutdownCheckAsync(handshake, cts.Token);
 
+            // Timeout for node, limits lifetime of node to 1 hour
+            cts.CancelAfter(NodeShutdownTimeout);
             int index;
             try
             {
                 // Wait for any of these task to finish:
                 // - rarTask can timeout (default is 15 mins)
                 // - msBuildShutdown ends when it recieves command to shutdown
-                index = Task.WaitAny(msBuildShutdown, rarTask);
+                // - node lifetime expires
+                index = Task.WaitAny(new Task[] { msBuildShutdown, rarTask }, cts.Token);
             }
-            catch (TaskCanceledException e)
+            catch (OperationCanceledException e)
             {
                 shutdownException = e;
                 return NodeEngineShutdownReason.Error;
