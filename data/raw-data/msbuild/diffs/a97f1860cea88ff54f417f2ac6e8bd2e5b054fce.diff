diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 7d009776150..ed4766f5450 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -843,7 +843,7 @@ private void AssertCacheBuild(
             InstanceMockCache? instanceMockCache,
             MockLogger mockLogger,
             IReadOnlyDictionary<ProjectGraphNode, BuildResult> projectPathToBuildResults,
-            string targets)
+            string? targets)
         {
             if (instanceMockCache != null)
             {
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index a6e37a369bd..fb7fb722bdd 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -11,6 +11,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Execution;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
@@ -44,6 +45,7 @@ internal class ProjectCacheService
         private readonly ProjectCacheDescriptor _projectCacheDescriptor;
         private readonly CancellationToken _cancellationToken;
         private readonly ProjectCachePluginBase _projectCachePlugin;
+        private readonly string _projectCachePluginTypeName;
         private ProjectCacheServiceState _serviceState = ProjectCacheServiceState.NotInitialized;
 
         /// <summary>
@@ -61,6 +63,7 @@ private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase { }
 
         private ProjectCacheService(
             ProjectCachePluginBase projectCachePlugin,
+            string pluginTypeName,
             BuildManager buildManager,
             ILoggingService loggingService,
             ProjectCacheDescriptor projectCacheDescriptor,
@@ -68,6 +71,7 @@ CancellationToken cancellationToken
         )
         {
             _projectCachePlugin = projectCachePlugin;
+            _projectCachePluginTypeName = pluginTypeName;
             _buildManager = buildManager;
             _loggingService = loggingService;
             _projectCacheDescriptor = projectCacheDescriptor;
@@ -80,10 +84,10 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
             ILoggingService loggingService,
             CancellationToken cancellationToken)
         {
-            var plugin = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
+            (ProjectCachePluginBase plugin, string pluginTypeName) = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
                 .ConfigureAwait(false);
 
-            var service = new ProjectCacheService(plugin, buildManager, loggingService, pluginDescriptor, cancellationToken);
+            var service = new ProjectCacheService(plugin, pluginTypeName, buildManager, loggingService, pluginDescriptor, cancellationToken);
 
             // TODO: remove the if after we change VS to set the cache descriptor via build parameters and always call BeginBuildAsync in FromDescriptorAsync.
             // When running under VS we can't initialize the plugin until we evaluate a project (any project) and extract
@@ -105,13 +109,14 @@ private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideD
                 _loggingService,
                 buildEventContext,
                 buildEventFileInfo);
+            ProjectCacheDescriptor projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;
 
             try
             {
                 SetState(ProjectCacheServiceState.BeginBuildStarted);
                 _loggingService.LogComment(buildEventContext, MessageImportance.Low, "ProjectCacheBeginBuild");
+                MSBuildEventSource.Log.ProjectCacheBeginBuildStart(_projectCachePluginTypeName);
 
-                var projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;
                 await _projectCachePlugin.BeginBuildAsync(
                     new CacheContext(
                         projectDescriptor.PluginSettings,
@@ -120,13 +125,16 @@ await _projectCachePlugin.BeginBuildAsync(
                         projectDescriptor.EntryPoints),
                     pluginLogger,
                     _cancellationToken);
-
-                SetState(ProjectCacheServiceState.BeginBuildFinished);
             }
             catch (Exception e)
             {
                 HandlePluginException(e, nameof(ProjectCachePluginBase.BeginBuildAsync));
             }
+            finally
+            {
+                MSBuildEventSource.Log.ProjectCacheBeginBuildStop(_projectCachePluginTypeName);
+                SetState(ProjectCacheServiceState.BeginBuildFinished);
+            }
 
             if (pluginLogger.HasLoggedErrors)
             {
@@ -134,20 +142,24 @@ await _projectCachePlugin.BeginBuildAsync(
             }
         }
 
-        private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
+        private static (ProjectCachePluginBase PluginInstance, string PluginTypeName) GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
         {
             if (pluginDescriptor.PluginInstance != null)
             {
-                return pluginDescriptor.PluginInstance;
+                return (pluginDescriptor.PluginInstance, pluginDescriptor.PluginInstance.GetType().Name);
             }
+
             if (pluginDescriptor.PluginAssemblyPath != null)
             {
-                return GetPluginInstanceFromType(GetTypeFromAssemblyPath(pluginDescriptor.PluginAssemblyPath));
+                MSBuildEventSource.Log.ProjectCacheCreatePluginInstanceStart(pluginDescriptor.PluginAssemblyPath);
+                Type pluginType = GetTypeFromAssemblyPath(pluginDescriptor.PluginAssemblyPath);
+                ProjectCachePluginBase pluginInstance = GetPluginInstanceFromType(pluginType);
+                MSBuildEventSource.Log.ProjectCacheCreatePluginInstanceStop(pluginDescriptor.PluginAssemblyPath, pluginType.Name);
+                return (pluginInstance, pluginType.Name);
             }
 
             ErrorUtilities.ThrowInternalErrorUnreachable();
-
-            return null!;
+            return (null!, null!);
         }
 
         private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
@@ -491,12 +503,18 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
             CacheResult cacheResult = null!;
             try
             {
+                MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames);
                 cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, pluginLogger, _cancellationToken);
             }
             catch (Exception e)
             {
                 HandlePluginException(e, nameof(ProjectCachePluginBase.GetCacheResultAsync));
             }
+            finally
+            {
+                string cacheResultType = cacheResult?.ResultType.ToString() ?? nameof(CacheResultType.None);
+                MSBuildEventSource.Log.ProjectCacheGetCacheResultStop(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames, cacheResultType);
+            }
 
             if (pluginLogger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)
             {
@@ -566,6 +584,7 @@ public async Task ShutDown()
             {
                 SetState(ProjectCacheServiceState.ShutdownStarted);
                 _loggingService.LogComment(buildEventContext, MessageImportance.Low, "ProjectCacheEndBuild");
+                MSBuildEventSource.Log.ProjectCacheEndBuildStart(_projectCachePluginTypeName);
 
                 await _projectCachePlugin.EndBuildAsync(pluginLogger, _cancellationToken);
 
@@ -580,6 +599,7 @@ public async Task ShutDown()
             }
             finally
             {
+                MSBuildEventSource.Log.ProjectCacheEndBuildStop(_projectCachePluginTypeName);
                 SetState(ProjectCacheServiceState.ShutdownFinished);
             }
         }
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 2a6e017322a..635e41af224 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1906,10 +1906,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
     <value>Shutting down project cache plugin.</value>
   </data>
   <data name="ProjectCacheQueryStartedWithTargetNames" xml:space="preserve">
-    <value>Project cache query "{0}" ({1} target(s)):</value>
+    <value>Querying project cache for "{0}" (targets: {1}):</value>
   </data>
   <data name="ProjectCacheQueryStartedWithDefaultTargets" xml:space="preserve">
-    <value>Project cache query "{0}" (default targets):</value>
+    <value>Querying project cache for "{0}" (default targets):</value>
   </data>
   <data name="ProjectCacheHitWithDefaultTargets" xml:space="preserve">
     <value>Project cache hit for "{0}" (default targets).</value>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index d4a11657c84..b43bf494f43 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index f1ed3abf28a..6ca1cbe3834 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index d94bfcbd1f2..3ec7105abd3 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 9fa4b8685f3..cb934443463 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 4bbb0cdf2e0..6e05cebb7f6 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index f56b2ae56d6..7caa6156ec9 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 4f01aa95460..4adb08d1627 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index af9e1c1b5ce..6c18adb9809 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 913c8bc2fbe..d57d6a76b7a 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 1e91cb26890..ee7b48b49af 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index c90b6eed969..d044b11519a 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 5ebe470a507..0022d0ef26b 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 0ee19d9c368..b6dfd9c479c 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -280,13 +280,13 @@
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
-        <source>Project cache query "{0}" (default targets):</source>
-        <target state="new">Project cache query "{0}" (default targets):</target>
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
-        <source>Project cache query "{0}" ({1} target(s)):</source>
-        <target state="new">Project cache query "{0}" ({1} target(s)):</target>
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
         <note />
       </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 092b844562f..c624cc58e25 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -551,6 +551,54 @@ public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submis
             WriteEvent(75, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
+        [Event(76, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheCreatePluginInstanceStart(string pluginAssemblyPath)
+        {
+            WriteEvent(76, pluginAssemblyPath);
+        }
+
+        [Event(77, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheCreatePluginInstanceStop(string pluginAssemblyPath, string pluginTypeName)
+        {
+            WriteEvent(77, pluginAssemblyPath, pluginTypeName);
+        }
+
+        [Event(78, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheBeginBuildStart(string pluginTypeName)
+        {
+            WriteEvent(78, pluginTypeName);
+        }
+
+        [Event(79, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheBeginBuildStop(string pluginTypeName)
+        {
+            WriteEvent(79, pluginTypeName);
+        }
+
+        [Event(80, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheGetCacheResultStart(string pluginTypeName, string projectPath, string targets)
+        {
+            WriteEvent(80, pluginTypeName, projectPath, targets);
+        }
+
+        [Event(81, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheGetCacheResultStop(string pluginTypeName, string projectPath, string targets, string cacheResultType)
+        {
+            WriteEvent(81, pluginTypeName, projectPath, targets, cacheResultType);
+        }
+
+        [Event(82, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheEndBuildStart(string pluginTypeName)
+        {
+            WriteEvent(82, pluginTypeName);
+        }
+
+        [Event(83, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void ProjectCacheEndBuildStop(string pluginTypeName)
+        {
+            WriteEvent(83, pluginTypeName);
+        }
+
         #endregion
     }
 }
