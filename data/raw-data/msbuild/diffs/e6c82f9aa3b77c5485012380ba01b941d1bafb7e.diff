diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 8804918dbc0..1cacd8e50f3 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -105,6 +105,11 @@ internal sealed class EventSourceSink :
         /// This event is raised to log BuildCheck events.
         /// </summary>
         internal event BuildCheckEventHandler BuildCheckEventRaised;
+
+        /// <summary>
+        /// This event is raised to log environment variable read events.
+        /// </summary>
+        internal event ExtendedEnvironmentVariableReadEventHandler ExtendedEnvironmentVariableReadEventRaised;
         #endregion
 
         #region Properties
@@ -276,6 +281,9 @@ public void Consume(BuildEventArgs buildEvent)
                 case BuildCheckEventArgs buildCheckEvent:
                     RaiseBuildCheckEvent(null, buildCheckEvent);
                     break;
+                case ExtendedEnvironmentVariableReadEventArgs extendedEnvVariableReadEvent:
+                    RaiseExtendedEnvironmentVariableReadEvent(null, extendedEnvVariableReadEvent);
+                    break;
 
                 default:
                     ErrorUtilities.ThrowInternalError("Unknown event args type.");
@@ -315,6 +323,7 @@ internal void UnregisterAllEventHandlers()
             AnyEventRaised = null;
             TelemetryLogged = null;
             BuildCheckEventRaised = null;
+            ExtendedEnvironmentVariableReadEventRaised = null;
         }
 
         #endregion
@@ -897,6 +906,43 @@ private void RaiseBuildCheckEvent(object sender, BuildCheckEventArgs buildEvent)
             RaiseAnyEvent(sender, buildEvent);
         }
 
+        /// <summary>
+        /// Raises ExtendedEnvironmentVariableRead event to all registered loggers.
+        /// </summary>
+        private void RaiseExtendedEnvironmentVariableReadEvent(object sender, ExtendedEnvironmentVariableReadEventArgs buildEvent)
+        {
+            if (ExtendedEnvironmentVariableReadEventRaised != null)
+            {
+                try
+                {
+                    ExtendedEnvironmentVariableReadEventRaised(sender, buildEvent);
+                }
+                catch (LoggerException)
+                {
+                    // if a logger has failed politely, abort immediately
+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
+                    // if a fellow logger is throwing in an event handler.
+                    this.UnregisterAllEventHandlers();
+                    throw;
+                }
+                catch (Exception exception)
+                {
+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
+                    // if a fellow logger is throwing in an event handler.
+                    this.UnregisterAllEventHandlers();
+
+                    if (ExceptionHandling.IsCriticalException(exception))
+                    {
+                        throw;
+                    }
+
+                    InternalLoggerException.Throw(exception, buildEvent, "FatalErrorWhileLogging", false);
+                }
+            }
+
+            RaiseAnyEvent(sender, buildEvent);
+        }
+
         /// <summary>
         /// Raises a catch-all build event to all registered loggers.
         /// </summary>
diff --git a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
index f9a8b62d7f8..1ea37b56da1 100644
--- a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
+++ b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
@@ -1,6 +1,5 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-using System;
 using System.Collections.Generic;
 using System.IO;
 using Microsoft.Build.Shared;
@@ -10,12 +9,20 @@ namespace Microsoft.Build.Framework
     /// <summary>
     /// Arguments for the environment variable read event.
     /// </summary>
-    public sealed class ExtendedEnvironmentVariableReadEventArgs : CustomBuildEventArgs, IExtendedBuildEventArgs
+    public sealed class ExtendedEnvironmentVariableReadEventArgs : BuildEventArgs, IExtendedBuildEventArgs
     {
         /// <summary>
         /// Default constructor. Used for deserialization.
         /// </summary>
-        internal ExtendedEnvironmentVariableReadEventArgs() { }
+        internal ExtendedEnvironmentVariableReadEventArgs()
+            : this("undefined")
+        { }
+
+        /// <summary>
+        /// This constructor specifies only type of extended data.
+        /// </summary>
+        /// <param name="type">Type of <see cref="IExtendedBuildEventArgs.ExtendedType"/>.</param>
+        public ExtendedEnvironmentVariableReadEventArgs(string type) => ExtendedType = type;
 
         /// <inheritdoc />
         public string ExtendedType { get; set; } = string.Empty;
@@ -79,6 +86,8 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.Write7BitEncodedInt(Line);
             writer.Write7BitEncodedInt(Column);
             writer.WriteOptionalString(File);
+
+            writer.WriteExtendedBuildEventData(this);
         }
 
         internal override void CreateFromStream(BinaryReader reader, int version)
@@ -88,6 +97,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             Line = reader.Read7BitEncodedInt();
             Column = reader.Read7BitEncodedInt();
             File = reader.ReadOptionalString() ?? string.Empty;
+
+            reader.ReadExtendedBuildEventData(this);
         }
     }
 }
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 2439db58eea..ab317d5a686 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -3,6 +3,7 @@
 
 #nullable disable
 
+using System;
 using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Framework
@@ -83,10 +84,15 @@ namespace Microsoft.Build.Framework
     public delegate void AnyEventHandler(object sender, BuildEventArgs e);
 
     /// <summary>
-    /// Type of handler for BuildCheckEventRaised events
+    /// Type of handler for BuildCheckEventRaised events.
     /// </summary>
     internal delegate void BuildCheckEventHandler(object sender, BuildCheckEventArgs e);
 
+    /// <summary>
+    /// Type of handler for ExtendedEnvironmentVariableReadEvent events.
+    /// </summary>
+    internal delegate void ExtendedEnvironmentVariableReadEventHandler(object sender, ExtendedEnvironmentVariableReadEventArgs e);
+
     /// <summary>
     /// This interface defines the events raised by the build engine.
     /// Loggers use this interface to subscribe to the events they
@@ -171,158 +177,44 @@ public interface IEventSource
     public static class EventSourceExtensions
     {
         /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.MessageRaised"/> event.
+        /// Helper method ensuring single deduplicated subscription to the <see cref="TEventHandler"/> event.
         /// </summary>
-        /// <param name="eventSource"></param>
+        /// <param name="removeHandler"></param>
+        /// <param name="addHandler"></param>
         /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleMessageRaised(this IEventSource eventSource, BuildMessageEventHandler handler)
+        private static void EnsureSingleSubscription<TEventHandler>(Action<TEventHandler> removeHandler, Action<TEventHandler> addHandler, TEventHandler handler)
+            where TEventHandler : Delegate
         {
-            eventSource.MessageRaised -= handler;
-            eventSource.MessageRaised += handler;
+            removeHandler(handler);
+            addHandler(handler);
         }
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.ErrorRaised"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleErrorRaised(this IEventSource eventSource, BuildErrorEventHandler handler)
-        {
-            eventSource.ErrorRaised -= handler;
-            eventSource.ErrorRaised += handler;
-        }
+        public static void HandleMessageRaised(this IEventSource eventSource, BuildMessageEventHandler handler) => EnsureSingleSubscription(h => eventSource.MessageRaised -= h, h => eventSource.MessageRaised += h,  handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.WarningRaised"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleWarningRaised(this IEventSource eventSource, BuildWarningEventHandler handler)
-        {
-            eventSource.WarningRaised -= handler;
-            eventSource.WarningRaised += handler;
-        }
+        public static void HandleErrorRaised(this IEventSource eventSource, BuildErrorEventHandler handler) => EnsureSingleSubscription(h => eventSource.ErrorRaised -= h, h => eventSource.ErrorRaised += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.BuildStarted"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleBuildStarted(this IEventSource eventSource, BuildStartedEventHandler handler)
-        {
-            eventSource.BuildStarted -= handler;
-            eventSource.BuildStarted += handler;
-        }
+        public static void HandleWarningRaised(this IEventSource eventSource, BuildWarningEventHandler handler) => EnsureSingleSubscription(h => eventSource.WarningRaised -= h, h => eventSource.WarningRaised += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.BuildFinished"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleBuildFinished(this IEventSource eventSource, BuildFinishedEventHandler handler)
-        {
-            eventSource.BuildFinished -= handler;
-            eventSource.BuildFinished += handler;
-        }
+        public static void HandleBuildStarted(this IEventSource eventSource, BuildStartedEventHandler handler) => EnsureSingleSubscription(h => eventSource.BuildStarted -= h, h => eventSource.BuildStarted += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.ProjectStarted"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleProjectStarted(this IEventSource eventSource, ProjectStartedEventHandler handler)
-        {
-            eventSource.ProjectStarted -= handler;
-            eventSource.ProjectStarted += handler;
-        }
+        public static void HandleBuildFinished(this IEventSource eventSource, BuildFinishedEventHandler handler) => EnsureSingleSubscription(h => eventSource.BuildFinished -= h, h => eventSource.BuildFinished += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.ProjectFinished"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleProjectFinished(this IEventSource eventSource, ProjectFinishedEventHandler handler)
-        {
-            eventSource.ProjectFinished -= handler;
-            eventSource.ProjectFinished += handler;
-        }
+        public static void HandleProjectStarted(this IEventSource eventSource, ProjectStartedEventHandler handler) => EnsureSingleSubscription(h => eventSource.ProjectStarted -= h, h => eventSource.ProjectStarted += h, handler);
 
+        public static void HandleProjectFinished(this IEventSource eventSource, ProjectFinishedEventHandler handler) => EnsureSingleSubscription(h => eventSource.ProjectFinished -= h, h => eventSource.ProjectFinished += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TargetStarted"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleTargetStarted(this IEventSource eventSource, TargetStartedEventHandler handler)
-        {
-            eventSource.TargetStarted -= handler;
-            eventSource.TargetStarted += handler;
-        }
+        public static void HandleTargetStarted(this IEventSource eventSource, TargetStartedEventHandler handler) => EnsureSingleSubscription(h => eventSource.TargetStarted -= h, h => eventSource.TargetStarted += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TargetFinished"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleTargetFinished(this IEventSource eventSource, TargetFinishedEventHandler handler)
-        {
-            eventSource.TargetFinished -= handler;
-            eventSource.TargetFinished += handler;
-        }
+        public static void HandleTargetFinished(this IEventSource eventSource, TargetFinishedEventHandler handler) => EnsureSingleSubscription(h => eventSource.TargetFinished -= h, h => eventSource.TargetFinished += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TaskStarted"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleTaskStarted(this IEventSource eventSource, TaskStartedEventHandler handler)
-        {
-            eventSource.TaskStarted -= handler;
-            eventSource.TaskStarted += handler;
-        }
+        public static void HandleTaskStarted(this IEventSource eventSource, TaskStartedEventHandler handler) => EnsureSingleSubscription(h => eventSource.TaskStarted -= h, h => eventSource.TaskStarted += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.TaskFinished"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleTaskFinished(this IEventSource eventSource, TaskFinishedEventHandler handler)
-        {
-            eventSource.TaskFinished -= handler;
-            eventSource.TaskFinished += handler;
-        }
+        public static void HandleTaskFinished(this IEventSource eventSource, TaskFinishedEventHandler handler) => EnsureSingleSubscription(h => eventSource.TaskFinished -= h, h => eventSource.TaskFinished += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.CustomEventRaised"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleCustomEventRaised(this IEventSource eventSource, CustomBuildEventHandler handler)
-        {
-            eventSource.CustomEventRaised -= handler;
-            eventSource.CustomEventRaised += handler;
-        }
+        public static void HandleCustomEventRaised(this IEventSource eventSource, CustomBuildEventHandler handler) => EnsureSingleSubscription(h => eventSource.CustomEventRaised -= h, h => eventSource.CustomEventRaised += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.StatusEventRaised"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleStatusEventRaised(this IEventSource eventSource, BuildStatusEventHandler handler)
-        {
-            eventSource.StatusEventRaised -= handler;
-            eventSource.StatusEventRaised += handler;
-        }
+        public static void HandleStatusEventRaised(this IEventSource eventSource, BuildStatusEventHandler handler) => EnsureSingleSubscription(h => eventSource.StatusEventRaised -= h, h => eventSource.StatusEventRaised += h, handler);
 
-        /// <summary>
-        /// Helper method ensuring single deduplicated subscription to the <see cref="IEventSource.AnyEventRaised"/> event.
-        /// </summary>
-        /// <param name="eventSource"></param>
-        /// <param name="handler">Handler to the event. If this handler is already subscribed, single subscription will be ensured.</param>
-        public static void HandleAnyEventRaised(this IEventSource eventSource, AnyEventHandler handler)
-        {
-            eventSource.AnyEventRaised -= handler;
-            eventSource.AnyEventRaised += handler;
-        }
+        public static void HandleAnyEventRaised(this IEventSource eventSource, AnyEventHandler handler) => EnsureSingleSubscription(h => eventSource.AnyEventRaised -= h, h => eventSource.AnyEventRaised += h, handler);
     }
 }
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index f35acc7fbeb..efbfc9f9b12 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -215,7 +215,7 @@ internal enum LoggingEventType : int
         /// Event is a <see cref="GeneratedFileUsedEventArgs"/>
         /// </summary>
         GeneratedFileUsedEvent = 34,
-        
+
         /// <summary>
         /// Event is <see cref="BuildCheckResultMessage"/>
         /// </summary>
@@ -276,6 +276,52 @@ internal abstract class LogMessagePacketBase : INodePacket
         /// </summary>
         private static HashSet<string> s_customEventsLoaded = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
 
+        private static readonly Dictionary<Type, LoggingEventType> EventTypeToLoggingEventTypeMap = new()
+        {
+             { typeof(BuildMessageEventArgs), LoggingEventType.BuildMessageEvent },
+             { typeof(TaskCommandLineEventArgs), LoggingEventType.TaskCommandLineEvent },
+         #if !TASKHOST
+             { typeof(TaskParameterEventArgs), LoggingEventType.TaskParameterEvent },
+             { typeof(ProjectEvaluationFinishedEventArgs), LoggingEventType.ProjectEvaluationFinishedEvent },
+             { typeof(ProjectEvaluationStartedEventArgs), LoggingEventType.ProjectEvaluationStartedEvent },
+             { typeof(ProjectImportedEventArgs), LoggingEventType.ProjectImportedEvent },
+             { typeof(TargetSkippedEventArgs), LoggingEventType.TargetSkipped },
+             { typeof(TelemetryEventArgs), LoggingEventType.Telemetry },
+             { typeof(AssemblyLoadBuildEventArgs), LoggingEventType.AssemblyLoadEvent },
+             { typeof(ExtendedCustomBuildEventArgs), LoggingEventType.ExtendedCustomEvent },
+             { typeof(ExtendedBuildErrorEventArgs), LoggingEventType.ExtendedBuildErrorEvent },
+             { typeof(ExtendedBuildWarningEventArgs), LoggingEventType.ExtendedBuildWarningEvent },
+             { typeof(ExtendedBuildMessageEventArgs), LoggingEventType.ExtendedBuildMessageEvent },
+             { typeof(CriticalBuildMessageEventArgs), LoggingEventType.CriticalBuildMessage },
+             { typeof(ExtendedCriticalBuildMessageEventArgs), LoggingEventType.ExtendedCriticalBuildMessageEvent },
+             { typeof(ExtendedEnvironmentVariableReadEventArgs), LoggingEventType.ExtendedEnvironmentVariableReadEventArgs },
+             { typeof(MetaprojectGeneratedEventArgs), LoggingEventType.MetaprojectGenerated },
+             { typeof(PropertyInitialValueSetEventArgs), LoggingEventType.PropertyInitialValueSet },
+             { typeof(PropertyReassignmentEventArgs), LoggingEventType.PropertyReassignment },
+             { typeof(UninitializedPropertyReadEventArgs), LoggingEventType.UninitializedPropertyRead },
+             { typeof(GeneratedFileUsedEventArgs), LoggingEventType.GeneratedFileUsedEvent },
+             { typeof(BuildCheckResultMessage), LoggingEventType.BuildCheckMessageEvent },
+             { typeof(BuildCheckResultWarning), LoggingEventType.BuildCheckWarningEvent },
+             { typeof(BuildCheckResultError), LoggingEventType.BuildCheckErrorEvent },
+             { typeof(BuildCheckAcquisitionEventArgs), LoggingEventType.BuildCheckAcquisitionEvent },
+             { typeof(BuildCheckTracingEventArgs), LoggingEventType.BuildCheckTracingEvent },
+         #endif
+             { typeof(ProjectFinishedEventArgs), LoggingEventType.ProjectFinishedEvent },
+             { typeof(ProjectStartedEventArgs), LoggingEventType.ProjectStartedEvent },
+             { typeof(ExternalProjectStartedEventArgs), LoggingEventType.ExternalProjectStartedEvent },
+             { typeof(ExternalProjectFinishedEventArgs), LoggingEventType.ExternalProjectFinishedEvent },
+             { typeof(TargetStartedEventArgs), LoggingEventType.TargetStartedEvent },
+             { typeof(TargetFinishedEventArgs), LoggingEventType.TargetFinishedEvent },
+             { typeof(TaskStartedEventArgs), LoggingEventType.TaskStartedEvent },
+             { typeof(TaskFinishedEventArgs), LoggingEventType.TaskFinishedEvent },
+             { typeof(BuildFinishedEventArgs), LoggingEventType.BuildFinishedEvent },
+             { typeof(BuildStartedEventArgs), LoggingEventType.BuildStartedEvent },
+             { typeof(BuildWarningEventArgs), LoggingEventType.BuildWarningEvent },
+             { typeof(BuildErrorEventArgs), LoggingEventType.BuildErrorEvent },
+             { typeof(EnvironmentVariableReadEventArgs), LoggingEventType.EnvironmentVariableReadEvent },
+             { typeof(ResponseFileUsedEventArgs), LoggingEventType.ResponseFileUsedEvent },
+        };
+
 #if FEATURE_APPDOMAIN
         /// <summary>
         /// The resolver used to load custom event types.
@@ -629,7 +675,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
-                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),               
+                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
 
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
@@ -644,9 +690,9 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.ExtendedBuildWarningEvent => new ExtendedBuildWarningEventArgs(),
                 LoggingEventType.ExtendedBuildMessageEvent => new ExtendedBuildMessageEventArgs(),
                 LoggingEventType.ExtendedCriticalBuildMessageEvent => new ExtendedCriticalBuildMessageEventArgs(),
+                LoggingEventType.ExtendedEnvironmentVariableReadEventArgs => new ExtendedEnvironmentVariableReadEventArgs(),
                 LoggingEventType.ExternalProjectStartedEvent => new ExternalProjectStartedEventArgs(null, null, null, null, null),
                 LoggingEventType.ExternalProjectFinishedEvent => new ExternalProjectFinishedEventArgs(null, null, null, null, false),
-                LoggingEventType.ExtendedEnvironmentVariableReadEventArgs => new ExtendedEnvironmentVariableReadEventArgs(),
                 LoggingEventType.CriticalBuildMessage => new CriticalBuildMessageEventArgs(null, null, null, -1, -1, -1, -1, null, null, null),
                 LoggingEventType.MetaprojectGenerated => new MetaprojectGeneratedEventArgs(null, null, null),
                 LoggingEventType.PropertyInitialValueSet => new PropertyInitialValueSetEventArgs(),
@@ -673,171 +719,7 @@ private BuildEventArgs GetBuildEventArgFromId()
         private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
         {
             Type eventType = eventArg.GetType();
-            if (eventType == typeof(BuildMessageEventArgs))
-            {
-                return LoggingEventType.BuildMessageEvent;
-            }
-            else if (eventType == typeof(TaskCommandLineEventArgs))
-            {
-                return LoggingEventType.TaskCommandLineEvent;
-            }
-#if !TASKHOST
-            else if (eventType == typeof(TaskParameterEventArgs))
-            {
-                return LoggingEventType.TaskParameterEvent;
-            }
-#endif
-            else if (eventType == typeof(ProjectFinishedEventArgs))
-            {
-                return LoggingEventType.ProjectFinishedEvent;
-            }
-            else if (eventType == typeof(ProjectStartedEventArgs))
-            {
-                return LoggingEventType.ProjectStartedEvent;
-            }
-            else if (eventType == typeof(ExternalProjectStartedEventArgs))
-            {
-                return LoggingEventType.ExternalProjectStartedEvent;
-            }
-            else if (eventType == typeof(ExternalProjectFinishedEventArgs))
-            {
-                return LoggingEventType.ExternalProjectFinishedEvent;
-            }
-
-#if !TASKHOST
-            else if (eventType == typeof(ProjectEvaluationFinishedEventArgs))
-            {
-                return LoggingEventType.ProjectEvaluationFinishedEvent;
-            }
-            else if (eventType == typeof(ProjectEvaluationStartedEventArgs))
-            {
-                return LoggingEventType.ProjectEvaluationStartedEvent;
-            }
-            else if (eventType == typeof(ProjectImportedEventArgs))
-            {
-                return LoggingEventType.ProjectImportedEvent;
-            }
-            else if (eventType == typeof(TargetSkippedEventArgs))
-            {
-                return LoggingEventType.TargetSkipped;
-            }
-            else if (eventType == typeof(TelemetryEventArgs))
-            {
-                return LoggingEventType.Telemetry;
-            }
-            else if (eventType == typeof(AssemblyLoadBuildEventArgs))
-            {
-                return LoggingEventType.AssemblyLoadEvent;
-            }
-            else if (eventType == typeof(ExtendedCustomBuildEventArgs))
-            {
-                return LoggingEventType.ExtendedCustomEvent;
-            }
-            else if (eventType == typeof(ExtendedBuildErrorEventArgs))
-            {
-                return LoggingEventType.ExtendedBuildErrorEvent;
-            }
-            else if (eventType == typeof(ExtendedBuildWarningEventArgs))
-            {
-                return LoggingEventType.ExtendedBuildWarningEvent;
-            }
-            else if (eventType == typeof(ExtendedBuildMessageEventArgs))
-            {
-                return LoggingEventType.ExtendedBuildMessageEvent;
-            }
-            else if (eventType == typeof(CriticalBuildMessageEventArgs))
-            {
-                return LoggingEventType.CriticalBuildMessage;
-            }
-            else if (eventType == typeof(ExtendedCriticalBuildMessageEventArgs))
-            {
-                return LoggingEventType.ExtendedCriticalBuildMessageEvent;
-            }
-            else if (eventType == typeof(MetaprojectGeneratedEventArgs))
-            {
-                return LoggingEventType.MetaprojectGenerated;
-            }
-            else if (eventType == typeof(PropertyInitialValueSetEventArgs))
-            {
-                return LoggingEventType.PropertyInitialValueSet;
-            }
-            else if (eventType == typeof(PropertyReassignmentEventArgs))
-            {
-                return LoggingEventType.PropertyReassignment;
-            }
-            else if (eventType == typeof(UninitializedPropertyReadEventArgs))
-            {
-                return LoggingEventType.UninitializedPropertyRead;
-            }
-            else if (eventType == typeof(GeneratedFileUsedEventArgs))
-            {
-                return LoggingEventType.GeneratedFileUsedEvent;
-            }
-            else if (eventType == typeof(BuildCheckResultMessage))
-            {
-                return LoggingEventType.BuildCheckMessageEvent;
-            }
-            else if (eventType == typeof(BuildCheckResultWarning))
-            {
-                return LoggingEventType.BuildCheckWarningEvent;
-            }
-            else if (eventType == typeof(BuildCheckResultError))
-            {
-                return LoggingEventType.BuildCheckErrorEvent;
-            }
-            else if (eventType == typeof(BuildCheckAcquisitionEventArgs))
-            {
-                return LoggingEventType.BuildCheckAcquisitionEvent;
-            }
-            else if (eventType == typeof(BuildCheckTracingEventArgs))
-            {
-                return LoggingEventType.BuildCheckTracingEvent;
-            }
-#endif
-            else if (eventType == typeof(TargetStartedEventArgs))
-            {
-                return LoggingEventType.TargetStartedEvent;
-            }
-            else if (eventType == typeof(TargetFinishedEventArgs))
-            {
-                return LoggingEventType.TargetFinishedEvent;
-            }
-            else if (eventType == typeof(TaskStartedEventArgs))
-            {
-                return LoggingEventType.TaskStartedEvent;
-            }
-            else if (eventType == typeof(TaskFinishedEventArgs))
-            {
-                return LoggingEventType.TaskFinishedEvent;
-            }
-            else if (eventType == typeof(BuildFinishedEventArgs))
-            {
-                return LoggingEventType.BuildFinishedEvent;
-            }
-            else if (eventType == typeof(BuildStartedEventArgs))
-            {
-                return LoggingEventType.BuildStartedEvent;
-            }
-            else if (eventType == typeof(BuildWarningEventArgs))
-            {
-                return LoggingEventType.BuildWarningEvent;
-            }
-            else if (eventType == typeof(BuildErrorEventArgs))
-            {
-                return LoggingEventType.BuildErrorEvent;
-            }
-            else if (eventType == typeof(EnvironmentVariableReadEventArgs))
-            {
-                return LoggingEventType.EnvironmentVariableReadEvent;
-            }
-            else if (eventType == typeof(ResponseFileUsedEventArgs))
-            {
-                return LoggingEventType.ResponseFileUsedEvent;
-            }
-            else
-            {
-                return LoggingEventType.CustomEvent;
-            }
+            return EventTypeToLoggingEventTypeMap.TryGetValue(eventType, out var loggingEventType) ? loggingEventType : LoggingEventType.CustomEvent;
         }
 
         /// <summary>
