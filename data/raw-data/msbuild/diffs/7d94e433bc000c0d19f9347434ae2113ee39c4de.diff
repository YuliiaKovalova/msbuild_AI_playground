diff --git a/src/Build/Instance/ProjectItemDefinitionInstance.cs b/src/Build/Instance/ProjectItemDefinitionInstance.cs
index 2658a0ebe5a..59e6a4630b7 100644
--- a/src/Build/Instance/ProjectItemDefinitionInstance.cs
+++ b/src/Build/Instance/ProjectItemDefinitionInstance.cs
@@ -236,6 +236,18 @@ internal static ProjectItemDefinitionInstance FactoryForDeserialization(ITransla
 
         string IItemTypeDefinition.ItemType => _itemType;
 
+        internal bool TryFastCopyOnWritePropertyDictionary(out ICopyOnWritePropertyDictionary<ProjectMetadataInstance> metadata)
+        {
+            if (_metadata is CopyOnWritePropertyDictionary copyOnWritePropertyDictionary)
+            {
+                metadata = copyOnWritePropertyDictionary.DeepClone();
+                return true;
+            }
+
+            metadata = null;
+            return false;
+        }
+
         private static IDictionary<string, ProjectMetadataInstance> CreateMetadataCollection(int capacity)
         {
             return new CopyOnWritePropertyDictionary();
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 9a058d7c135..fec92be96e5 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1175,17 +1175,38 @@ internal ICopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollect
                         return (_directMetadata == null) ? new CopyOnWritePropertyDictionary() : _directMetadata.DeepClone(); // copy on write!
                     }
 
+                    int lastIndex = _itemDefinitions.Count - 1;
+
+                    if (_itemDefinitions[lastIndex].TryFastCopyOnWritePropertyDictionary(out ICopyOnWritePropertyDictionary<ProjectMetadataInstance> fastMetadata))
+                    {
+                        // In most cases, we only have a single item definition and can either directly return it, or at least start with an allocated dictionary.
+                        if (lastIndex == 0)
+                        {
+                            if (_directMetadata != null)
+                            {
+                                fastMetadata.ImportProperties(_directMetadata);
+                            }
+                        }
+                        else
+                        {
+                            fastMetadata.ImportProperties(metaData(lastIndex - 1));
+                        }
+
+                        return fastMetadata;
+                    }
+
+                    // Slow path - enumerate all our metadata.
                     CopyOnWritePropertyDictionary allMetadata = new();
 
-                    allMetadata.ImportProperties(metaData());
+                    allMetadata.ImportProperties(metaData(lastIndex));
 
                     return allMetadata;
 
-                    IEnumerable<ProjectMetadataInstance> metaData()
+                    IEnumerable<ProjectMetadataInstance> metaData(int frontIndex)
                     {
                         // Next, any inherited item definitions. Front of the list is highest priority,
                         // so walk backwards.
-                        for (int i = _itemDefinitions.Count - 1; i >= 0; i--)
+                        for (int i = frontIndex; i >= 0; i--)
                         {
                             foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)
                             {
