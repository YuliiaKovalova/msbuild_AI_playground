diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index a94c154ec50..a3785da9774 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -10,14 +10,52 @@ namespace Microsoft.Build.Logging.FancyLogger
 {
     internal static class ANSIBuilder
     {
+        public static string ANSIRegex = @"\x1b(?:[@-Z\-_]|\[[0-?]*[ -\/]*[@-~])";
         public static string ANSIRemove(string text)
         {
-            return Regex.Replace(text, "\\x1b(?:[@-Z\\-_]|\\[[0-?]*[ -\\/]*[@-~])", "");
+            return Regex.Replace(text, ANSIRegex, "");
         }
 
         public static int ANSIBreakpoint(string text, int position)
         {
             if (position >= text.Length) return text.Length;
+            int nonAnsiIndex = 0;
+            Match nextMatch = Regex.Match(text, ANSIRegex);
+            int i = 0;
+            while (i < text.Length && nonAnsiIndex < position)
+            {
+                // Jump over ansi codes
+                if (i == nextMatch.Index && nextMatch.Length > 0)
+                {
+                    i += nextMatch.Length;
+                    nextMatch = nextMatch.NextMatch();
+                }
+                // Increment non ansi index
+                nonAnsiIndex++;
+                i++;
+            }
+            return i;
+
+            /*int nonAnsiIndex = 0;
+            Match nextMatch = Regex.Match(text, ANSIRegex);
+            for (int i = 0; i < text.Length; i++)
+            {
+                if (nonAnsiIndex == position) return i;
+                // Match
+                if (i == nextMatch.Index)
+                {
+                    i += nextMatch.Length;
+                    nextMatch = nextMatch.NextMatch();
+                }
+                else
+                {
+                    nonAnsiIndex++;
+                }
+            }
+            return text.Length;*/
+
+
+            /*if (position >= text.Length) return text.Length;
             // Create new array of positions
             int[] nonAnsiIndices = new int[text.Length];
             for (int i = 0; i < text.Length; i++)
@@ -31,7 +69,7 @@ public static int ANSIBreakpoint(string text, int position)
             {
                 if (nonAnsiIndices[i] == position - 1) breakpoint = i;
             }
-            return breakpoint;
+            return breakpoint;*/
         }
 
         public static List<string> ANSIWrap(string text, int position)
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index bca12100227..f795efaa4d7 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -29,7 +29,7 @@ public void Initialize(IEventSource eventSource)
         {
             // Register for different events
             // Started
-            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
+            /*eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
             eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
             eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
@@ -43,12 +43,14 @@ public void Initialize(IEventSource eventSource)
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Cancelled
-            Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);
+            Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed); */
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine(string.Empty);
-            // FancyLoggerBuffer.WriteNewLine("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
+            string s = "Lorem ipsum \x1b[2mdolor sit amet\x1b[0m, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\x1b[0m";
+            FancyLoggerBuffer.WriteNewLine(s);
+            // FancyLoggerBuffer.WriteNewLine("Hi");
             FancyLoggerBuffer.Render();
         }
 
