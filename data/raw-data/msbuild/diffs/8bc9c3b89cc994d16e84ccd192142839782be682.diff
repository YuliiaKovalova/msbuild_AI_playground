diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index a0f5302d621..eea2401dca9 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -171,11 +171,6 @@ internal static class ItemMetadataNames
         /// The output path for a given item.
         /// </summary>
         internal const string targetPath = "TargetPath";
-
-        /// <summary>
-        /// The user-specified override for TargetPath. See the AssignTargetPath task.
-        /// </summary>
-        internal const string targetPathOverride = "TargetPathOverride";
         internal const string dependentUpon = "DependentUpon";
         internal const string msbuildSourceProjectFile = "MSBuildSourceProjectFile";
         internal const string msbuildSourceTargetName = "MSBuildSourceTargetName";
diff --git a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
index 7ec074875ee..a2b3f6604cf 100644
--- a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
+++ b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
@@ -86,12 +86,13 @@ public void InConeButAbsolute()
         [InlineData(@"some\dir\to\file.txt")]
         [InlineData("file.txt")]
         [InlineData("file")]
-        public void TargetPathOverrideSet(string targetPath)
+        public void TargetPathAlreadySet(string targetPath)
         {
             AssignTargetPath t = new AssignTargetPath();
             t.BuildEngine = new MockEngine();
             Dictionary<string, string> metaData = new Dictionary<string, string>();
-            metaData.Add("TargetPathOverride", targetPath);
+            metaData.Add("TargetPath", targetPath);
+            metaData.Add("Link", "c:/foo/bar");
             t.Files = new ITaskItem[]
                           {
                               new TaskItem(
@@ -104,6 +105,35 @@ public void TargetPathOverrideSet(string targetPath)
             t.AssignedFiles.Length.ShouldBe(1);
             targetPath.ShouldBe(t.AssignedFiles[0].GetMetadata("TargetPath"));
         }
+
+        [Theory]
+        [InlineData("c:/fully/qualified/path.txt")]
+        [InlineData("test/output/file.txt")]
+        [InlineData(@"some\dir\to\file.txt")]
+        [InlineData("file.txt")]
+        [InlineData("file")]
+        public void TargetPathAlreadySet_DisabledUnderChangeWave16_10(string targetPath)
+        {
+            using TestEnvironment env = TestEnvironment.Create();
+            string link = "c:/some/path";
+            env.SetEnvironmentVariable("MSBuildDisableFeaturesFromVersion", "16.10");
+            AssignTargetPath t = new AssignTargetPath();
+            t.BuildEngine = new MockEngine();
+            Dictionary<string, string> metaData = new Dictionary<string, string>();
+            metaData.Add("TargetPath", targetPath);
+            metaData.Add("Link", link);
+            t.Files = new ITaskItem[]
+                          {
+                              new TaskItem(
+                                  itemSpec: NativeMethodsShared.IsWindows ? @"c:\f1\f2\file.txt" : "/f1/f2/file.txt",
+                                  itemMetadata: metaData)
+                          };
+            t.RootFolder = NativeMethodsShared.IsWindows ? @"c:\f1\f2" : "/f1/f2";
+
+            t.Execute().ShouldBeTrue();
+            t.AssignedFiles.Length.ShouldBe(1);
+            link.ShouldBe(t.AssignedFiles[0].GetMetadata("TargetPath"));
+        }
     }
 }
 
diff --git a/src/Tasks/AssignTargetPath.cs b/src/Tasks/AssignTargetPath.cs
index a4cffdc434b..6b033ae1fb0 100644
--- a/src/Tasks/AssignTargetPath.cs
+++ b/src/Tasks/AssignTargetPath.cs
@@ -73,11 +73,11 @@ public override bool Execute()
                 {
                     AssignedFiles[i] = new TaskItem(Files[i]);
 
-                    // TargetPathOverride takes priority.
+                    // If TargetPath is already set, it takes priority.
                     // https://github.com/dotnet/msbuild/issues/2795
-                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPathOverride);
+                    string targetPath =  ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10) ? Files[i].GetMetadata(ItemMetadataNames.targetPath) : null;
 
-                    // If TargetPathOverride not set, fall back to default behavior.
+                    // If TargetPath not already set, fall back to default behavior.
                     if (string.IsNullOrEmpty(targetPath))
                     {
                         targetPath = Files[i].GetMetadata(ItemMetadataNames.link);
