diff --git a/.config/1espt/PipelineAutobaseliningConfig.yml b/.config/1espt/PipelineAutobaseliningConfig.yml
new file mode 100644
index 00000000000..1901db1b137
--- /dev/null
+++ b/.config/1espt/PipelineAutobaseliningConfig.yml
@@ -0,0 +1,21 @@
+## DO NOT MODIFY THIS FILE MANUALLY. This is part of auto-baselining from 1ES Pipeline Templates. Go to [https://aka.ms/1espt-autobaselining] for more details.
+
+pipelines:
+  9434:
+    retail:
+      source:
+        credscan:
+          lastModifiedDate: 2024-03-14
+        eslint:
+          lastModifiedDate: 2024-03-14
+        psscriptanalyzer:
+          lastModifiedDate: 2024-03-14
+        armory:
+          lastModifiedDate: 2024-03-14
+      binary:
+        credscan:
+          lastModifiedDate: 2024-03-14
+        binskim:
+          lastModifiedDate: 2024-03-14
+        spotbugs:
+          lastModifiedDate: 2024-03-14
diff --git a/.config/guardian/.gdnbaselines b/.config/guardian/.gdnbaselines
new file mode 100644
index 00000000000..7c1e70b5438
--- /dev/null
+++ b/.config/guardian/.gdnbaselines
@@ -0,0 +1,57 @@
+{
+  "properties": {
+    "helpUri": "https://eng.ms/docs/microsoft-security/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/microsoft-guardian/general/baselines"
+  },
+  "version": "1.0.0",
+  "baselines": {
+    "default": {
+      "name": "default",
+      "createdDate": "2024-03-14 11:30:33Z",
+      "lastUpdatedDate": "2024-03-14 11:30:33Z"
+    }
+  },
+  "results": {
+    "1757d0179485ad6618415e151de2453f25d5484071f7bae328fa9ca9d4d54688": {
+      "signature": "1757d0179485ad6618415e151de2453f25d5484071f7bae328fa9ca9d4d54688",
+      "alternativeSignatures": [],
+      "target": "src/Tasks.UnitTests/TestResources/mycert.pfx",
+      "line": 1,
+      "memberOf": [
+        "default"
+      ],
+      "tool": "credscan",
+      "ruleId": "CSCAN-GENERAL0020",
+      "createdDate": "2024-03-14 11:30:33Z",
+      "expirationDate": "2024-08-31 12:48:32Z",
+      "justification": "This error is baselined with an expiration date of 180 days from 2024-03-14 12:48:32Z"
+    },
+    "60d4d52e838e08dc19d3ac2b43b7c809b080db55f9c754b80bd60f30624e9687": {
+      "signature": "60d4d52e838e08dc19d3ac2b43b7c809b080db55f9c754b80bd60f30624e9687",
+      "alternativeSignatures": [],
+      "target": "artifacts/bin/Microsoft.Build.Tasks.UnitTests/Release/net472/TestResources/mycert.pfx",
+      "line": 1,
+      "memberOf": [
+        "default"
+      ],
+      "tool": "credscan",
+      "ruleId": "CSCAN-GENERAL0020",
+      "createdDate": "2024-03-14 12:01:14Z",
+      "expirationDate": "2024-08-31 12:48:32Z",
+      "justification": "This error is baselined with an expiration date of 180 days from 2024-03-14 12:48:32Z"
+    },
+    "7cb5d42a8744e4a214149aa27d3d8a1b7989914d1a2fee8cea13287368cbafff": {
+      "signature": "7cb5d42a8744e4a214149aa27d3d8a1b7989914d1a2fee8cea13287368cbafff",
+      "alternativeSignatures": [],
+      "target": "artifacts/bin/Microsoft.Build.Tasks.UnitTests/Release/net8.0/TestResources/mycert.pfx",
+      "line": 1,
+      "memberOf": [
+        "default"
+      ],
+      "tool": "credscan",
+      "ruleId": "CSCAN-GENERAL0020",
+      "createdDate": "2024-03-14 12:01:14Z",
+      "expirationDate": "2024-08-31 12:48:32Z",
+      "justification": "This error is baselined with an expiration date of 180 days from 2024-03-14 12:48:32Z"
+    }
+  }
+}
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/01_bugreport.yml b/.github/ISSUE_TEMPLATE/01_bugreport.yml
index ac84e2563ad..35d55437a5a 100644
--- a/.github/ISSUE_TEMPLATE/01_bugreport.yml
+++ b/.github/ISSUE_TEMPLATE/01_bugreport.yml
@@ -1,7 +1,7 @@
 name: üêû Bug Report
 description: Report a bug to help us improve MSBuild.
 title: "[Bug]: "
-labels: ["bug", "needs-triage"]
+labels: ["bug"]
 body:
   - type: textarea
     attributes:
diff --git a/.github/ISSUE_TEMPLATE/02_performanceissue.yml b/.github/ISSUE_TEMPLATE/02_performanceissue.yml
index 846a9747b55..7cca706981f 100644
--- a/.github/ISSUE_TEMPLATE/02_performanceissue.yml
+++ b/.github/ISSUE_TEMPLATE/02_performanceissue.yml
@@ -1,7 +1,7 @@
 name: üìâ Performance Issue
 description: Report a performance issue or regression.
 title: "[Performance]: "
-labels: ["performance", "needs-triage"]
+labels: ["performance"]
 body:
   - type: textarea
     attributes:
diff --git a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml
index a7e104afbe0..31869c5aedc 100644
--- a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml
+++ b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml
@@ -1,7 +1,6 @@
 name: üòµ My Build is Broken
 description: Use this template for helping figure out what's wrong with your build.
 title: "[Broken Build]: "
-labels: ["needs-triage"]
 body:
   - type: markdown
     attributes:
diff --git a/.github/ISSUE_TEMPLATE/05_unhandledexception.yml b/.github/ISSUE_TEMPLATE/05_unhandledexception.yml
index 34ff39f44b0..12388e79503 100644
--- a/.github/ISSUE_TEMPLATE/05_unhandledexception.yml
+++ b/.github/ISSUE_TEMPLATE/05_unhandledexception.yml
@@ -1,7 +1,7 @@
 name: üò± Unhandled Exception
 description: Reporting holes in our bug reporting system
 title: "[Unhandled Exception]: "
-labels: ["bug", "needs-triage"]
+labels: ["bug"]
 body:
   - type: textarea
     attributes:
diff --git a/.github/ISSUE_TEMPLATE/06_feature_request.yml b/.github/ISSUE_TEMPLATE/06_feature_request.yml
index c2108af202e..15a628ffe1b 100644
--- a/.github/ISSUE_TEMPLATE/06_feature_request.yml
+++ b/.github/ISSUE_TEMPLATE/06_feature_request.yml
@@ -1,7 +1,7 @@
 name: üí° Feature  Request
 description: Suggest an idea for this project.
 title: "[Feature Request]: "
-labels: ["Feature Request", "needs-triage"]
+labels: ["Feature Request"]
 body:
   - type: textarea
     attributes:
diff --git a/.github/policies/resourceManagement.yml b/.github/policies/resourceManagement.yml
index f361d5ea040..effb189ad06 100644
--- a/.github/policies/resourceManagement.yml
+++ b/.github/policies/resourceManagement.yml
@@ -20,8 +20,8 @@ configuration:
           milestone: Backlog
       - isNotPartOfMilestone:
           milestone: Discussion
-      - isNotLabeledWith:
-          label: needs-triage
+      - hasLabel:
+          label: triaged
       - isIssue
       - isNotLabeledWith:
           label: stale
@@ -50,8 +50,8 @@ configuration:
           milestone: Backlog
       - isNotPartOfMilestone:
           milestone: Discussion
-      - isNotLabeledWith:
-          label: needs-triage
+      - hasLabel:
+          label: triaged
       actions:
       - closeIssue
       - addReply:
@@ -64,46 +64,53 @@ configuration:
       - isOpen
       - hasLabel:
           label: stale
+      - hasLabel:
+          label: triaged
       - not:
           hasLabel:
             label: bot-exclude
       then:
       - removeLabel:
           label: stale
-      - addLabel:
-          label: needs-triage
+      - removeLabel:
+          label: triaged
       description: Unstale Open Issues that get comments
     - if:
       - payloadType: Issue_Comment
       - not: isOpen
       - hasLabel:
           label: stale
+      - hasLabel:
+          label: triaged
       - not:
           hasLabel:
             label: bot-exclude
       then:
-      - addLabel:
-          label: needs-triage
-      description: Apply needs-triage to closed stale issues that get comments
+      - removeLabel:
+          label: triaged
+      description: Remove label triaged from closed stale issues that get comments
     - if:
       - payloadType: Issues
       - labelAdded:
           label: needs-more-info
-      - hasLabel:
-          label: needs-triage
+      - not:
+          hasLabel:
+            label: triaged
       then:
-      - removeLabel:
-          label: needs-triage
-      description: remove needs-triage when needs-more-info is applied
+      - addLabel:
+          label: triaged
+      description: Add label triaged to issue when needs-more-info is applied
     - if:
       - payloadType: Issue_Comment
       - isActivitySender:
           issueAuthor: True
       - hasLabel:
           label: needs-more-info
+      - hasLabel:
+          label: triaged
       then:
-      - addLabel:
-          label: needs-triage
+      - removeLabel:
+          label: triaged
       - addLabel:
           label: author-responded
       - removeLabel:
@@ -145,5 +152,21 @@ configuration:
       - addReply:
           reply: Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.
       description: Comment on vs* branches
+    - if:
+      - payloadType: Pull_Request
+      - or:
+        - isAction:
+            action: Opened
+        - isAction:
+            action: Reopened
+      - or:
+        - filesMatchPattern:
+            pattern: ^.+\.swr$
+        - filesMatchPattern:
+            pattern: src/Package/MSBuild.VSSetup.*/.*
+      then:
+      - addReply:
+          reply: Hello @${issueAuthor}, I noticed that you‚Äôre changing an *.swr file or any file under src/Package/MSBuild.VSSetup.*. Please make sure to validate this change by an experimental VS insertion. This is accomplished by pushing to an exp/* branch, which requires write permissions to this repo.
+      description: Remind to run VS Perf DDRITs when deployed assemblies change
 onFailure: 
 onSuccess: 
diff --git a/.opt-prof.yml b/.opt-prof.yml
index 47c168210ca..c53ec2cfac1 100644
--- a/.opt-prof.yml
+++ b/.opt-prof.yml
@@ -24,15 +24,16 @@ resources:
   - pipeline: DartLab.OptProf
     source: DartLab.OptProf
     branch: main
+    tags:
+    - production
   repositories:
   - repository: DartLabTemplates
     type: git
     name: DartLab.Templates
-    ref: refs/heads/main
   - repository: DartLabOptProfTemplates
     type: git
     name: DartLab.OptProf
-    ref: refs/heads/main
+    ref: refs/tags/Production
 
 parameters:
   # Whether or not to delete the test machines after the run completes
@@ -53,6 +54,7 @@ stages:
     name: OptProfProfilingWorkflow
     displayName: OptProf Profiling Workflow
     optOptimizationInputsDropName: $(OptimizationInputsDropName)
+    cloudBuildResourceName: ComponentBuildUnderTest
     testLabPoolName: VS-Platform # The test lab pool to run your tests in
     testMachineCleanUpStrategy: ${{parameters.testMachineCleanUpStrategy}}
     testMachineImageName: Windows-10-Enterprise-20H2
diff --git a/.vsts-dotnet-ci.yml b/.vsts-dotnet-ci.yml
index 922df9717a7..12768a44440 100644
--- a/.vsts-dotnet-ci.yml
+++ b/.vsts-dotnet-ci.yml
@@ -4,7 +4,28 @@ trigger:
 - vs*
 
 jobs:
+- job: IfOnlyDocumentionChanged
+  displayName: "Check whether Test Results need to be executed"
+  steps:
+  - powershell: |
+      $changedFiles = git diff --name-only HEAD HEAD~1
+      $changedFiles
+      $onlyDocChanged = 1
+      foreach ($file in $changedFiles) {
+        $isUnderDocumentation = $file -match "^documentation/"
+        if(!$isUnderDocumentation)
+        {
+          $onlyDocChanged = 0
+          break;
+        }
+      }
+      Write-Host "##vso[task.setvariable variable=onlyDocChanged;isoutput=true]$onlyDocChanged"
+    name: SetIfOnlyDocumentionChangedVaribale
+    displayName: Check whether only documentation has been updated
 - job: BootstrapMSBuildOnFullFrameworkWindows
+  dependsOn: IfOnlyDocumentionChanged
+  variables:
+    onlyDocChanged: $[ dependencies.IfOnlyDocumentionChanged.outputs['SetIfOnlyDocumentionChangedVaribale.onlyDocChanged'] ]
   displayName: "Windows Full"
   pool:
     vmImage: 'windows-2022'
@@ -13,6 +34,7 @@ jobs:
     displayName: cibuild_bootstrapped_msbuild.cmd
     inputs:
       filename: 'eng/cibuild_bootstrapped_msbuild.cmd'
+      arguments: -onlyDocChanged $(onlyDocChanged)
   - task: PublishTestResults@2
     displayName: Publish .NET Framework Test Results
     inputs:
@@ -22,7 +44,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: PublishTestResults@2
     displayName: Publish .NET Test Results
     inputs:
@@ -34,7 +56,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: CmdLine@2
     displayName: 'Set flag to publish Verify *.received.* files when test step fails'
     condition: failed()
@@ -53,7 +75,7 @@ jobs:
       PathtoPublish: 'artifacts/TestResults'
       ArtifactName: 'FullOnWindows test logs'
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: CopyFiles@2
     condition: eq(variables['publishverify'], 'Yes')
     displayName: 'Copy Verify *.received.* files to Artifact Staging'
@@ -73,6 +95,9 @@ jobs:
 
 - job: BootstrapMSBuildOnCoreWindows
   displayName: "Windows Core"
+  dependsOn: IfOnlyDocumentionChanged
+  variables:
+    onlyDocChanged: $[ dependencies.IfOnlyDocumentionChanged.outputs['SetIfOnlyDocumentionChangedVaribale.onlyDocChanged'] ]
   pool:
     vmImage: 'windows-2022'
   steps:
@@ -80,7 +105,7 @@ jobs:
     displayName: cibuild_bootstrapped_msbuild.cmd
     inputs:
       filename: 'eng/cibuild_bootstrapped_msbuild.cmd'
-      arguments: '-msbuildEngine dotnet'
+      arguments: '-msbuildEngine dotnet -onlyDocChanged $(onlyDocChanged)'
   - task: PublishTestResults@2
     displayName: Publish .NET Framework Test Results
     inputs:
@@ -90,7 +115,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: PublishTestResults@2
     displayName: Publish .NET Test Results
     inputs:
@@ -102,7 +127,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: PublishBuildArtifacts@1
     displayName: 'Publish Artifact: logs'
     inputs:
@@ -116,10 +141,13 @@ jobs:
       PathtoPublish: 'artifacts/TestResults'
       ArtifactName: 'CoreOnWindows test logs'
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
 
 - job: FullReleaseOnWindows
   displayName: "Windows Full Release (no bootstrap)"
+  dependsOn: IfOnlyDocumentionChanged
+  variables:
+    onlyDocChanged: $[ dependencies.IfOnlyDocumentionChanged.outputs['SetIfOnlyDocumentionChangedVaribale.onlyDocChanged'] ]
   pool:
     ${{ if eq(variables['System.TeamProject'], 'public') }}:
       name: NetCore-Public
@@ -133,6 +161,13 @@ jobs:
     inputs:
       filename: 'eng/cibuild.cmd'
       arguments: '-configuration Release -test'
+    condition: eq(variables.onlyDocChanged, 0)
+  - task: BatchScript@1
+    displayName: cibuild.cmd without test
+    inputs:
+      filename: 'eng/cibuild.cmd'
+      arguments: '-configuration Release'
+    condition: eq(variables.onlyDocChanged, 1)
   - task: PublishTestResults@2
     displayName: Publish .NET Framework Test Results
     inputs:
@@ -142,7 +177,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: PublishTestResults@2
     displayName: Publish .NET Test Results
     inputs:
@@ -154,7 +189,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: PublishBuildArtifacts@1
     displayName: 'Publish Artifact: logs'
     inputs:
@@ -168,7 +203,7 @@ jobs:
       PathtoPublish: 'artifacts/TestResults'
       ArtifactName: 'FullOnWindows Release test logs'
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
 
 # Unavailable in dnceng-public as of 9/1/2022; should be restored soon.
 # - job: RichCodeNavIndex
@@ -189,10 +224,13 @@ jobs:
 
 - job: CoreBootstrappedOnLinux
   displayName: "Linux Core"
+  dependsOn: IfOnlyDocumentionChanged
+  variables:
+    onlyDocChanged: $[ dependencies.IfOnlyDocumentionChanged.outputs['SetIfOnlyDocumentionChangedVaribale.onlyDocChanged'] ]
   pool:
     vmImage: 'ubuntu-latest'
   steps:
-  - bash: . 'eng/cibuild_bootstrapped_msbuild.sh'
+  - bash: . 'eng/cibuild_bootstrapped_msbuild.sh' --onlyDocChanged $(onlyDocChanged)
     displayName: CI Build
   - task: PublishTestResults@2
     displayName: Publish .NET Test Results
@@ -205,7 +243,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: CmdLine@2
     displayName: 'Set flag to publish Verify *.received.* files when test step fails'
     condition: failed()
@@ -224,7 +262,7 @@ jobs:
       PathtoPublish: 'artifacts/TestResults'
       ArtifactName: 'CoreOnLinux test logs'
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: CopyFiles@2
     condition: eq(variables['publishverify'], 'Yes')
     displayName: 'Copy Verify *.received.* files to Artifact Staging'
@@ -243,10 +281,13 @@ jobs:
 
 - job: CoreOnMac
   displayName: "macOS Core"
+  dependsOn: IfOnlyDocumentionChanged
+  variables:
+    onlyDocChanged: $[ dependencies.IfOnlyDocumentionChanged.outputs['SetIfOnlyDocumentionChangedVaribale.onlyDocChanged'] ]
   pool:
     vmImage: 'macOS-latest'
   steps:
-  - bash: . 'eng/cibuild_bootstrapped_msbuild.sh'
+  - bash: . 'eng/cibuild_bootstrapped_msbuild.sh' --onlyDocChanged $(onlyDocChanged)
     displayName: CI Build
   - task: PublishTestResults@2
     displayName: Publish .NET Test Results
@@ -259,7 +300,7 @@ jobs:
       publishRunAttachments: true
       mergeTestResults: true
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: CmdLine@2
     displayName: 'Set flag to publish Verify *.received.* files when test step fails'
     condition: failed()
@@ -278,7 +319,7 @@ jobs:
       PathtoPublish: 'artifacts/TestResults'
       ArtifactName: 'CoreOnMac test logs'
     continueOnError: true
-    condition: always()
+    condition: eq(variables.onlyDocChanged, 0)
   - task: CopyFiles@2
     condition: eq(variables['publishverify'], 'Yes')
     displayName: 'Copy Verify *.received.* files to Artifact Staging'
diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index 1afdfd0c7c7..3bf73e47ab0 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -37,266 +37,289 @@ variables:
     value: true
   - name: Codeql.Enabled
     value: true
-  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-    - group: DotNet-MSBuild-SDLValidation-Params
-
-stages:
-- stage: build
-  displayName: Build
-
-  jobs:
-  - ${{ if and( ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-    # The localization setup for release/ branches. Note difference in LclPackageId. main branch is handled separately below.
-    # Used for vs17.2, vs17.4, vs17.6 etc. branches only.
-    # When the branch is setup for localization (the localization ticket needs to be created - https://aka.ms/ceChangeLocConfig, requesting change from one release branch to another),
-    #  set 'EnableReleaseOneLocBuild' to true.
-    - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/vs') }}:
-      - template: /eng/common/templates/job/onelocbuild.yml
-        parameters:
-          MirrorRepo: 'msbuild'
-          LclSource: lclFilesfromPackage
-          LclPackageId: 'LCL-JUNO-PROD-MSBUILDREL'
-          MirrorBranch: ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}
-          JobNameSuffix: '_release'
-          condition: ${{ variables.EnableReleaseOneLocBuild }}
-    # The localization setup for main branch. Note difference in package ID. Should not be used with release/ branches.
-    - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
-      - template: /eng/common/templates/job/onelocbuild.yml
-        parameters:
-          MirrorRepo: 'msbuild'
-          LclSource: lclFilesfromPackage
-          LclPackageId: 'LCL-JUNO-PROD-MSBUILD'
-          MirrorBranch: 'main'
-          JobNameSuffix: '_main'
-          condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
-
-  - job: Windows_NT
+  - group: DotNet-MSBuild-SDLValidation-Params
+
+resources:
+  repositories:
+  - repository: 1ESPipelineTemplates
+    type: git
+    name: 1ESPipelineTemplates/1ESPipelineTemplates
+
+extends:
+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
+  parameters:
+    featureFlags:
+      autoBaseline: true
     pool:
       name: VSEngSS-MicroBuild2022-1ES
-      demands:
-      - agent.os -equals Windows_NT
-
-    timeoutInMinutes: 180
-
-    variables:
-    - group: Publish-Build-Assets
-    - name: TeamName
-      value: MSBuild
-    - name: VisualStudio.MajorVersion
-      value: 17
-    - name: VisualStudio.ChannelName
-      value: 'int.main'
-    - name: VisualStudio.DropName
-      value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
-
-    steps:
-    - task: NuGetToolInstaller@1
-      displayName: 'Install NuGet.exe'
-
-    - task: NuGetCommand@2
-      displayName: Restore internal tools
-      inputs:
-        command: restore
-        feedsToUse: config
-        restoreSolution: 'eng\common\internal\Tools.csproj'
-        nugetConfigPath: 'NuGet.config'
-        restoreDirectory: '$(Build.SourcesDirectory)\.packages'
-
-    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
-      inputs:
-        signType: $(SignType)
-        zipSources: false
-      condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))
-
-    - task: MicroBuildOptProfPlugin@6
-      inputs:
-        ProfilingInputsDropName: '$(VisualStudio.DropName)'
-        ShouldSkipOptimize: true
-        AccessToken: '$(System.AccessToken)'
-        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
-      displayName: 'Install OptProf Plugin'
-
-    # Required by MicroBuildBuildVSBootstrapper
-    - task: MicroBuildSwixPlugin@4
-      inputs:
-        dropName: $(VisualStudio.DropName)
-
-    - script: eng/CIBuild.cmd
-                -configuration $(BuildConfiguration)
-                -officialBuildId $(Build.BuildNumber)
-                -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)
-                /p:RepositoryName=$(Build.Repository.Name)
-                /p:VisualStudioIbcSourceBranchName=$(SourceBranch)
-                /p:VisualStudioDropAccessToken=$(System.AccessToken)
-                /p:VisualStudioDropName=$(VisualStudio.DropName)
-                /p:DotNetSignType=$(SignType)
-                /p:TeamName=MSBuild
-                /p:DotNetPublishUsingPipelines=true
-                /p:VisualStudioIbcDrop=$(OptProfDrop)
-                /p:GenerateSbom=true
+      os: windows
+    sdl:
+      # We generate SBOM ourselves, so don't need steps injected by 1ES.
+      sbom:
+        enabled: false
+
+    stages:
+    - stage: build
       displayName: Build
-      condition: succeeded()
-
-    # Required by Microsoft policy
-    - template: eng\common\templates\steps\generate-sbom.yml
-
-    # Publish OptProf configuration files
-    - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0
-      inputs:
-        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
-        buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'
-        sourcePath: '$(Build.SourcesDirectory)\artifacts\OptProf\$(BuildConfiguration)\Data'
-        toLowerCase: false
-        usePat: true
-      displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'
-      condition: succeeded()
-
-    # Build VS bootstrapper
-    # Generates $(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json
-    - task: MicroBuildBuildVSBootstrapper@3
-      inputs:
-        vsMajorVersion: $(VisualStudio.MajorVersion)
-        channelName: $(VisualStudio.ChannelName)
-        manifests: $(VisualStudio.SetupManifestList)
-        outputFolder: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\Insertion'
-        bootstrapperCoreVersion:
-      displayName: 'OptProf - Build VS bootstrapper'
-      condition: succeeded()
-
-    # Publish run settings
-    - task: PowerShell@2
-      inputs:
-        filePath: eng\common\sdk-task.ps1
-        arguments: -configuration $(BuildConfiguration)
-                  -task VisualStudio.BuildIbcTrainingSettings
-                  /p:VisualStudioDropName=$(VisualStudio.DropName)
-                  /p:BootstrapperInfoPath=$(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json
-                  /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\eng\config\OptProf.runsettings
-      displayName: 'OptProf - Build IBC training settings'
-      condition: succeeded()
-
-    # Publish bootstrapper info
-    - task: PublishBuildArtifacts@1
-      inputs:
-        PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
-        ArtifactName: MicroBuildOutputs
-        ArtifactType: Container
-      displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'
-      condition: succeeded()
-
-    - task: PublishBuildArtifacts@1
-      displayName: 'Publish Artifact: logs'
-      inputs:
-        PathtoPublish: 'artifacts\log\$(BuildConfiguration)'
-        ArtifactName: logs
-      condition: succeededOrFailed()
-
-    - task: PublishPipelineArtifact@1
-      displayName: 'Publish Artifact: bin'
-      inputs:
-        path: 'artifacts\bin'
-        artifactName: bin
-      condition: succeededOrFailed()
-
-    # Publishes setup VSIXes to a drop.
-    # Note: The insertion tool looks for the display name of this task in the logs.
-    - task: MicroBuildUploadVstsDropFolder@2
-      displayName: Upload VSTS Drop
-      inputs:
-        DropName: $(VisualStudio.DropName)
-        DropFolder: 'artifacts\VSSetup\$(BuildConfiguration)\Insertion'
-        DropRetentionDays: '30' # extended by insertion + VS release
-        AccessToken: '$(System.AccessToken)'
-        DropServiceUri: 'https://devdiv.artifacts.visualstudio.com'
-        VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'
-      condition: succeeded()
-
-    # Publish an artifact that the RoslynInsertionTool is able to find by its name.
-    - task: PublishBuildArtifacts@1
-      displayName: 'Publish Artifact: VSSetup'
-      inputs:
-        PathtoPublish: 'artifacts\VSSetup\$(BuildConfiguration)'
-        ArtifactName: VSSetup
-      condition: succeeded()
-
-    # Archive NuGet packages to DevOps.
-    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the
-    # arcade templates depend on the name.
-    - task: PublishBuildArtifacts@1
-      displayName: 'Publish Artifact: packages'
-      inputs:
-        PathtoPublish: 'artifacts\packages\$(BuildConfiguration)'
-        ArtifactName: PackageArtifacts
-      condition: succeeded()
-
-    # Publish "IntelliSense" XSD files to their own artifact
-    # so it can be consumed by the insertion-to-VS job
-    - task: PublishPipelineArtifact@1
-      displayName: 'Publish Artifact: xsd'
-      inputs:
-        path: 'artifacts\xsd'
-        artifactName: xsd
-      condition: succeeded()
-
-    # Publish Asset Manifests for Build Asset Registry job
-    - task: PublishBuildArtifacts@1
-      displayName: Publish Asset Manifests
-      inputs:
-        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'
-        ArtifactName: AssetManifests
-      condition: succeeded()
-
-    # Tag the build at the very end when we know it's been successful.
-    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
-      displayName: Tag build as ready for optimization training
-      inputs:
-        tags: 'ready-for-training'
-      condition: succeeded()
-
-    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
-      displayName: Execute cleanup tasks
-      condition: succeededOrFailed()
-
-    - template: /eng/common/templates/steps/component-governance.yml
+
+      jobs:
+      # The localization setup for release/ branches. Note difference in LclPackageId. main branch is handled separately below.
+      # Used for vs17.2, vs17.4, vs17.6 etc. branches only.
+      # When the branch is setup for localization (the localization ticket needs to be created - https://aka.ms/ceChangeLocConfig, requesting change from one release branch to another),
+      #  set 'EnableReleaseOneLocBuild' to true.
+      - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/vs') }}:
+        - template: /eng/common/templates-official/job/onelocbuild.yml@self
+          parameters:
+            MirrorRepo: 'msbuild'
+            LclSource: lclFilesfromPackage
+            LclPackageId: 'LCL-JUNO-PROD-MSBUILDREL'
+            MirrorBranch: ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}
+            JobNameSuffix: '_release'
+            condition: ${{ variables.EnableReleaseOneLocBuild }}
+      # The localization setup for main branch. Note difference in package ID. Should not be used with release/ branches.
+      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
+        - template: /eng/common/templates-official/job/onelocbuild.yml@self
+          parameters:
+            MirrorRepo: 'msbuild'
+            LclSource: lclFilesfromPackage
+            LclPackageId: 'LCL-JUNO-PROD-MSBUILD'
+            MirrorBranch: 'main'
+            JobNameSuffix: '_main'
+            condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
+
+      - job: Windows_NT
+        pool:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands:
+          - agent.os -equals Windows_NT
+
+        timeoutInMinutes: 180
+
+        variables:
+        - group: Publish-Build-Assets
+        - name: TeamName
+          value: MSBuild
+        - name: VisualStudio.MajorVersion
+          value: 17
+        - name: VisualStudio.ChannelName
+          value: 'int.main'
+        - name: VisualStudio.DropName
+          value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
+
+        steps:
+        - task: NuGetToolInstaller@1
+          displayName: 'Install NuGet.exe'
+
+        - task: NuGetCommand@2
+          displayName: Restore internal tools
+          inputs:
+            command: restore
+            feedsToUse: config
+            restoreSolution: 'eng\common\internal\Tools.csproj'
+            nugetConfigPath: 'NuGet.config'
+            restoreDirectory: '$(Build.SourcesDirectory)\.packages'
+
+        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
+          inputs:
+            signType: $(SignType)
+            zipSources: false
+          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))
+
+        - task: MicroBuildOptProfPlugin@6
+          inputs:
+            ProfilingInputsDropName: '$(VisualStudio.DropName)'
+            ShouldSkipOptimize: true
+            AccessToken: '$(System.AccessToken)'
+            feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
+          displayName: 'Install OptProf Plugin'
+
+        # Required by MicroBuildBuildVSBootstrapper
+        - task: MicroBuildSwixPlugin@4
+          inputs:
+            dropName: $(VisualStudio.DropName)
+
+        - script: eng/CIBuild.cmd
+                    -configuration $(BuildConfiguration)
+                    -officialBuildId $(Build.BuildNumber)
+                    -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)
+                    /p:RepositoryName=$(Build.Repository.Name)
+                    /p:VisualStudioIbcSourceBranchName=$(SourceBranch)
+                    /p:VisualStudioDropAccessToken=$(System.AccessToken)
+                    /p:VisualStudioDropName=$(VisualStudio.DropName)
+                    /p:DotNetSignType=$(SignType)
+                    /p:TeamName=MSBuild
+                    /p:DotNetPublishUsingPipelines=true
+                    /p:VisualStudioIbcDrop=$(OptProfDrop)
+                    /p:GenerateSbom=true
+          displayName: Build
+          condition: succeeded()
+
+        # Required by Microsoft policy
+        - template: eng\common\templates-official\steps\generate-sbom.yml@self
+
+        # Publish OptProf configuration files
+        - task: 1ES.PublishArtifactsDrop@1
+          inputs:
+            dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
+            buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'
+            sourcePath: '$(Build.SourcesDirectory)\artifacts\OptProf\$(BuildConfiguration)\Data'
+            toLowerCase: false
+            usePat: true
+          displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'
+          condition: succeeded()
+
+        # Build VS bootstrapper
+        # Generates $(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json
+        - task: MicroBuildBuildVSBootstrapper@3
+          inputs:
+            vsMajorVersion: $(VisualStudio.MajorVersion)
+            channelName: $(VisualStudio.ChannelName)
+            manifests: $(VisualStudio.SetupManifestList)
+            outputFolder: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\Insertion'
+            bootstrapperCoreVersion:
+          displayName: 'OptProf - Build VS bootstrapper'
+          condition: succeeded()
+
+        # Publish run settings
+        - task: PowerShell@2
+          inputs:
+            filePath: eng\common\sdk-task.ps1
+            arguments: -configuration $(BuildConfiguration)
+                      -task VisualStudio.BuildIbcTrainingSettings
+                      /p:VisualStudioDropName=$(VisualStudio.DropName)
+                      /p:BootstrapperInfoPath=$(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json
+                      /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\eng\config\OptProf.runsettings
+          displayName: 'OptProf - Build IBC training settings'
+          condition: succeeded()
+
+        # Publish bootstrapper info
+        - task: 1ES.PublishBuildArtifacts@1
+          inputs:
+            PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
+            ArtifactName: MicroBuildOutputs
+            ArtifactType: Container
+          displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'
+          condition: succeeded()
+
+        - task: 1ES.PublishBuildArtifacts@1
+          displayName: 'Publish Artifact: logs'
+          inputs:
+            PathtoPublish: 'artifacts\log\$(BuildConfiguration)'
+            ArtifactName: logs
+          condition: succeededOrFailed()
+
+        - task: 1ES.PublishPipelineArtifact@1
+          displayName: 'Publish Artifact: bin'
+          inputs:
+            path: 'artifacts\bin'
+            artifactName: bin
+          condition: succeededOrFailed()
+
+        # Publishes setup VSIXes to a drop.
+        # Note: The insertion tool looks for the display name of this task in the logs.
+        - task: 1ES.MicroBuildVstsDrop@1
+          displayName: Upload VSTS Drop
+          inputs:
+            dropName: $(VisualStudio.DropName)
+            dropFolder: 'artifacts\VSSetup\$(BuildConfiguration)\Insertion'
+            dropRetentionDays: '30' # extended by insertion + VS release
+            accessToken: '$(System.AccessToken)'
+            dropServiceUri: 'https://devdiv.artifacts.visualstudio.com'
+            vsDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'
+          condition: succeeded()
+
+        # Publish an artifact that the RoslynInsertionTool is able to find by its name.
+        - task: 1ES.PublishBuildArtifacts@1
+          displayName: 'Publish Artifact: VSSetup'
+          inputs:
+            PathtoPublish: 'artifacts\VSSetup\$(BuildConfiguration)'
+            ArtifactName: VSSetup
+          condition: succeeded()
+
+        # Archive NuGet packages to DevOps.
+        # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the
+        # arcade templates depend on the name.
+        - task: 1ES.PublishBuildArtifacts@1
+          displayName: 'Publish Artifact: packages'
+          inputs:
+            PathtoPublish: 'artifacts\packages\$(BuildConfiguration)'
+            ArtifactName: PackageArtifacts
+          condition: succeeded()
+
+        # Publish "IntelliSense" XSD files to their own artifact
+        # so it can be consumed by the insertion-to-VS job
+        - task: 1ES.PublishPipelineArtifact@1
+          displayName: 'Publish Artifact: xsd'
+          inputs:
+            path: 'artifacts\xsd'
+            artifactName: xsd
+          condition: succeeded()
+
+        # Publish Asset Manifests for Build Asset Registry job
+        - task: 1ES.PublishBuildArtifacts@1
+          displayName: Publish Asset Manifests
+          inputs:
+            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'
+            ArtifactName: AssetManifests
+          condition: succeeded()
+
+        # Tag the build at the very end when we know it's been successful.
+        - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
+          displayName: Tag build as ready for optimization training
+          inputs:
+            tags: 'ready-for-training'
+          condition: succeeded()
+
+        - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
+          displayName: Execute cleanup tasks
+          condition: succeededOrFailed()
+
+        - template: /eng/common/templates-official/steps/component-governance.yml@self
+          parameters:
+            ${{ if or(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
+              disableComponentGovernance: false
+            ${{ else }}:
+              disableComponentGovernance: true
+
+      - template: /eng/common/templates-official/jobs/source-build.yml@self
+        parameters:
+          platforms:
+            - name: Managed
+              pool:
+                name: AzurePipelines-EO
+                image: 1ESPT-Ubuntu22.04
+                os: linux
+
+      - template: /eng/common/templates-official/job/publish-build-assets.yml@self
+        parameters:
+          enablePublishBuildArtifacts: true
+          publishUsingPipelines: true
+          dependsOn:
+            - Windows_NT
+            - Source_Build_Managed
+          pool:
+            name: $(DncEngInternalBuildPool)
+            image: $(WindowsImage)
+            os: windows
+
+    - template: eng\common\templates-official\post-build\post-build.yml@self
       parameters:
-        ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))) }}:
-          disableComponentGovernance: false
-        ${{ else }}:
-          disableComponentGovernance: true
-
-  - template: /eng/common/templates/jobs/source-build.yml
-
-  - template: /eng/common/templates/job/publish-build-assets.yml
-    parameters:
-      enablePublishBuildArtifacts: true
-      publishUsingPipelines: true
-      dependsOn:
-        - Windows_NT
-        - Source_Build_Managed
-      pool:
-        vmImage: windows-latest
-
-- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-  - template: eng\common\templates\post-build\post-build.yml
-    parameters:
-      publishingInfraVersion: 3
-      # Symbol validation is not entirely reliable as of yet, so should be turned off until
-      # https://github.com/dotnet/arcade/issues/2871 is resolved.
-      enableSymbolValidation: false
-      enableSourceLinkValidation: false
-      enableNugetValidation: false
-      SDLValidationParameters:
-        enable: true
-        continueOnError: false
-        params: ' -SourceToolsList @("policheck","credscan")
-        -TsaInstanceURL "$(_TsaInstanceURL)"
-        -TsaProjectName "$(_TsaProjectName)"
-        -TsaNotificationEmail "$(_TsaNotificationEmail)"
-        -TsaCodebaseAdmin "$(_TsaCodebaseAdmin)"
-        -TsaBugAreaPath "$(_TsaBugAreaPath)"
-        -TsaIterationPath "$(_TsaIterationPath)"
-        -TsaRepositoryName "dotnet-msbuild"
-        -TsaCodebaseName "dotnet-msbuild"
-        -TsaPublish $True
-        -CrScanAdditionalRunConfigParams @("SuppressionsPath < $(Build.SourcesDirectory)\eng\CredScanSuppressions.json")
-        -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)\eng\policheck_exclusions.xml")'
+        publishingInfraVersion: 3
+        enableSymbolValidation: true
+        enableSourceLinkValidation: false
+        enableNugetValidation: false
+        SDLValidationParameters:
+          enable: true
+          continueOnError: false
+          params: ' -SourceToolsList @("policheck","credscan")
+          -TsaInstanceURL "$(_TsaInstanceURL)"
+          -TsaProjectName "$(_TsaProjectName)"
+          -TsaNotificationEmail "$(_TsaNotificationEmail)"
+          -TsaCodebaseAdmin "$(_TsaCodebaseAdmin)"
+          -TsaBugAreaPath "$(_TsaBugAreaPath)"
+          -TsaIterationPath "$(_TsaIterationPath)"
+          -TsaRepositoryName "dotnet-msbuild"
+          -TsaCodebaseName "dotnet-msbuild"
+          -TsaPublish $True
+          -CrScanAdditionalRunConfigParams @("SuppressionsPath < $(Build.SourcesDirectory)\eng\CredScanSuppressions.json")
+          -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)\eng\policheck_exclusions.xml")'
diff --git a/Directory.Build.props b/Directory.Build.props
index c02b9d345f2..a55e6b642b2 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -9,7 +9,7 @@
 
   <PropertyGroup>
     <Product>Microsoft¬Æ Build Tools¬Æ</Product>
-    <Configurations>Debug;Release;Debug-MONO;Release-MONO;MachineIndependent</Configurations>
+    <Configurations>Debug;Release;MachineIndependent</Configurations>
   </PropertyGroup>
 
   <PropertyGroup>
@@ -60,17 +60,6 @@
     <NoWarn>$(NoWarn);NU1507;NU1603;NU5105;1701;1702;SYSLIB0011;SYSLIB0037;SYSLIB0044;RS0016;RS0017;</NoWarn>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(Configuration)' == 'Debug-MONO'">
-    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
-    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
-    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
-    <MonoBuild>true</MonoBuild>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(Configuration)' == 'Release-MONO'">
-    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
-    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
-    <MonoBuild>true</MonoBuild>
-  </PropertyGroup>
   <!-- Configuration MSBuild for portable (xcopy-install) toolsets: works on WinNT and linux/mac via Mono, isolates from machine environment:
     uses only tools installed with it, ignores Registry and GAC and Visual Studio installations to provide the same build experience on all machines -->
   <PropertyGroup Condition="'$(Configuration)' == 'MachineIndependent'">
diff --git a/Directory.Build.targets b/Directory.Build.targets
index 3c3e5820070..c75ce0fde19 100644
--- a/Directory.Build.targets
+++ b/Directory.Build.targets
@@ -39,8 +39,10 @@
   </Target>
 
   <!-- Make APICompat use roslyn from the toolset SDK instead of from the toolset package. This avoids unification issues on desktop msbuild.
-       TODO: Remove when a 8.0.200 or 9.0 SDK is consumed. -->
-  <Target Name="FixAPICompatWorkAroundRoslynMove" AfterTargets="CollectApiCompatInputs">
+       TODO: Remove when Visual Studio with an 8.0.200 or 9.0 SDK is consumed. -->
+  <Target Name="FixAPICompatWorkAroundRoslynMove"
+          AfterTargets="CollectApiCompatInputs"
+          Condition="'$(MSBuildRuntimeType)' != 'Core'">
     <PropertyGroup>
       <RoslynAssembliesPath>$(RoslynTargetsPath)</RoslynAssembliesPath>
     </PropertyGroup>
diff --git a/MSBuild.Dev.slnf b/MSBuild.Dev.slnf
index 4ae636a74a6..39e25ebb5a8 100644
--- a/MSBuild.Dev.slnf
+++ b/MSBuild.Dev.slnf
@@ -14,7 +14,8 @@
       "src\\Utilities.UnitTests\\Microsoft.Build.Utilities.UnitTests.csproj",
       "src\\Utilities\\Microsoft.Build.Utilities.csproj",
       "src\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj",
-      "src\\StringTools\\StringTools.csproj"
+      "src\\StringTools\\StringTools.csproj",
+      "src\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj"
     ]
   }
 }
\ No newline at end of file
diff --git a/MSBuild.sln b/MSBuild.sln
index 01e91980f6a..5c8326406f6 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -78,16 +78,14 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools.Benchmark", "sr
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuild.VSSetup.Arm64", "src\Package\MSBuild.VSSetup.Arm64\MSBuild.VSSetup.Arm64.csproj", "{71E59632-D644-491B-AF93-22BC93167C56}"
 EndProject
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Microsoft.Build.UnitTests.Shared", "src\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj", "{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
 		Debug|ARM64 = Debug|ARM64
 		Debug|x64 = Debug|x64
 		Debug|x86 = Debug|x86
-		Debug-MONO|Any CPU = Debug-MONO|Any CPU
-		Debug-MONO|ARM64 = Debug-MONO|ARM64
-		Debug-MONO|x64 = Debug-MONO|x64
-		Debug-MONO|x86 = Debug-MONO|x86
 		MachineIndependent|Any CPU = MachineIndependent|Any CPU
 		MachineIndependent|ARM64 = MachineIndependent|ARM64
 		MachineIndependent|x64 = MachineIndependent|x64
@@ -96,10 +94,6 @@ Global
 		Release|ARM64 = Release|ARM64
 		Release|x64 = Release|x64
 		Release|x86 = Release|x86
-		Release-MONO|Any CPU = Release-MONO|Any CPU
-		Release-MONO|ARM64 = Release-MONO|ARM64
-		Release-MONO|x64 = Release-MONO|x64
-		Release-MONO|x86 = Release-MONO|x86
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
@@ -110,14 +104,6 @@ Global
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x64.Build.0 = Debug|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x86.Build.0 = Debug|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -134,14 +120,6 @@ Global
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x64.Build.0 = Release|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x86.ActiveCfg = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x86.Build.0 = Release|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -150,14 +128,6 @@ Global
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x64.Build.0 = Debug|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x86.Build.0 = Debug|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -174,14 +144,6 @@ Global
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x64.Build.0 = Release|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x86.ActiveCfg = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x86.Build.0 = Release|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -190,14 +152,6 @@ Global
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x64.Build.0 = Debug|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x86.Build.0 = Debug|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -214,14 +168,6 @@ Global
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x64.Build.0 = Release|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x86.ActiveCfg = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x86.Build.0 = Release|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -230,14 +176,6 @@ Global
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x64.Build.0 = Debug|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x86.Build.0 = Debug|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -254,14 +192,6 @@ Global
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x64.Build.0 = Release|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x86.ActiveCfg = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x86.Build.0 = Release|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -270,14 +200,6 @@ Global
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x64.Build.0 = Debug|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x86.Build.0 = Debug|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -294,14 +216,6 @@ Global
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x64.Build.0 = Release|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x86.ActiveCfg = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x86.Build.0 = Release|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|ARM64.ActiveCfg = Debug|ARM64
@@ -310,14 +224,6 @@ Global
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x64.Build.0 = Debug|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x86.Build.0 = Debug|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -334,14 +240,6 @@ Global
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x64.Build.0 = Release|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x86.ActiveCfg = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x86.Build.0 = Release|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -350,14 +248,6 @@ Global
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x64.Build.0 = Debug|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x86.Build.0 = Debug|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -374,14 +264,6 @@ Global
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x64.Build.0 = Release|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x86.ActiveCfg = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x86.Build.0 = Release|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -390,14 +272,6 @@ Global
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x64.Build.0 = Debug|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x86.Build.0 = Debug|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -414,14 +288,6 @@ Global
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x64.Build.0 = Release|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x86.ActiveCfg = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x86.Build.0 = Release|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -430,14 +296,6 @@ Global
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x64.Build.0 = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x86.Build.0 = Debug|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x64.Build.0 = Debug|x64
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -454,14 +312,6 @@ Global
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x64.Build.0 = Release|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x86.ActiveCfg = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x86.Build.0 = Release|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -470,14 +320,6 @@ Global
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x64.Build.0 = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x86.Build.0 = Debug|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x64.Build.0 = Debug|x64
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -494,14 +336,6 @@ Global
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x64.Build.0 = Release|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x86.ActiveCfg = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x86.Build.0 = Release|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -510,14 +344,6 @@ Global
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x64.Build.0 = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x86.Build.0 = Debug|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x64.Build.0 = Debug|x64
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -534,14 +360,6 @@ Global
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x64.Build.0 = Release|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x86.ActiveCfg = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x86.Build.0 = Release|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -550,14 +368,6 @@ Global
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x64.Build.0 = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x86.Build.0 = Debug|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x64.Build.0 = Debug|x64
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -574,14 +384,6 @@ Global
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x64.Build.0 = Release|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x86.ActiveCfg = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x86.Build.0 = Release|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -590,14 +392,6 @@ Global
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x64.Build.0 = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x86.Build.0 = Debug|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x64.Build.0 = Debug|x64
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -614,14 +408,6 @@ Global
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x64.Build.0 = Release|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x86.ActiveCfg = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x86.Build.0 = Release|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -630,14 +416,6 @@ Global
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x64.Build.0 = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x86.Build.0 = Debug|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x64.Build.0 = Debug|x64
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -654,14 +432,6 @@ Global
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x64.Build.0 = Release|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x86.ActiveCfg = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x86.Build.0 = Release|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -670,14 +440,6 @@ Global
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x64.Build.0 = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x86.Build.0 = Debug|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x64.Build.0 = Debug|x64
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -694,14 +456,6 @@ Global
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x64.Build.0 = Release|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x86.ActiveCfg = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x86.Build.0 = Release|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -710,14 +464,6 @@ Global
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x64.Build.0 = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x86.Build.0 = Debug|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x64.Build.0 = Debug|x64
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -734,14 +480,6 @@ Global
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x64.Build.0 = Release|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x86.ActiveCfg = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x86.Build.0 = Release|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -750,14 +488,6 @@ Global
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x64.Build.0 = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x86.Build.0 = Debug|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x64.Build.0 = Debug|x64
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -774,14 +504,6 @@ Global
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x64.Build.0 = Release|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x86.ActiveCfg = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x86.Build.0 = Release|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -790,14 +512,6 @@ Global
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x64.Build.0 = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x86.Build.0 = Debug|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x64.Build.0 = Debug|x64
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -814,14 +528,6 @@ Global
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x64.Build.0 = Release|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x86.ActiveCfg = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x86.Build.0 = Release|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -830,14 +536,6 @@ Global
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x64.Build.0 = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x86.Build.0 = Debug|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x64.Build.0 = Debug|x64
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -854,14 +552,6 @@ Global
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x64.Build.0 = Release|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x86.ActiveCfg = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x86.Build.0 = Release|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -870,14 +560,6 @@ Global
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x64.Build.0 = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x86.Build.0 = Debug|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x64.Build.0 = Debug|x64
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -894,14 +576,6 @@ Global
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x64.Build.0 = Release|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x86.ActiveCfg = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x86.Build.0 = Release|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -910,14 +584,6 @@ Global
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x64.Build.0 = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x86.Build.0 = Debug|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x64.Build.0 = Debug|x64
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -934,14 +600,6 @@ Global
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x64.Build.0 = Release|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x86.ActiveCfg = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x86.Build.0 = Release|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -950,14 +608,6 @@ Global
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x64.Build.0 = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x86.Build.0 = Debug|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x64.Build.0 = Debug|x64
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -974,14 +624,6 @@ Global
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x64.Build.0 = Release|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x86.ActiveCfg = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x86.Build.0 = Release|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -990,14 +632,6 @@ Global
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x64.Build.0 = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x86.Build.0 = Debug|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x64.Build.0 = Debug|x64
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1014,14 +648,6 @@ Global
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x64.Build.0 = Release|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x86.ActiveCfg = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x86.Build.0 = Release|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1030,14 +656,6 @@ Global
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x64.Build.0 = Debug|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x86.Build.0 = Debug|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1054,14 +672,6 @@ Global
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x64.Build.0 = Release|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x86.ActiveCfg = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x86.Build.0 = Release|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1070,14 +680,6 @@ Global
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x64.Build.0 = Debug|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x86.Build.0 = Debug|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1094,14 +696,6 @@ Global
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x64.Build.0 = Release|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x86.ActiveCfg = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x86.Build.0 = Release|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1110,14 +704,6 @@ Global
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x64.Build.0 = Debug|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x86.Build.0 = Debug|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1134,14 +720,6 @@ Global
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x64.Build.0 = Release|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x86.ActiveCfg = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x86.Build.0 = Release|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1150,14 +728,6 @@ Global
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x64.Build.0 = Debug|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x86.Build.0 = Debug|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1174,14 +744,6 @@ Global
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x64.Build.0 = Release|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x86.ActiveCfg = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x86.Build.0 = Release|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1190,14 +752,6 @@ Global
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.Build.0 = Debug|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.Build.0 = Debug|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1214,14 +768,6 @@ Global
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.Build.0 = Release|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.ActiveCfg = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.Build.0 = Release|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1230,14 +776,6 @@ Global
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x64.Build.0 = Debug|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x86.Build.0 = Debug|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1254,14 +792,6 @@ Global
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x64.Build.0 = Release|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x86.ActiveCfg = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x86.Build.0 = Release|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
@@ -1270,14 +800,6 @@ Global
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x64.Build.0 = Debug|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x86.Build.0 = Debug|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
@@ -1294,14 +816,6 @@ Global
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x64.Build.0 = Release|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x86.ActiveCfg = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x86.Build.0 = Release|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|ARM64.ActiveCfg = Debug|arm64
@@ -1310,14 +824,6 @@ Global
 		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x64.Build.0 = Debug|x64
 		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x86.Build.0 = Debug|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|arm64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|ARM64.Build.0 = Debug-MONO|arm64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|arm64
@@ -1334,14 +840,30 @@ Global
 		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x64.Build.0 = Release|x64
 		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x86.ActiveCfg = Release|Any CPU
 		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x86.Build.0 = Release|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|ARM64.ActiveCfg = Release-MONO|arm64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|ARM64.Build.0 = Release-MONO|arm64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|ARM64.ActiveCfg = Debug|arm64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|ARM64.Build.0 = Debug|arm64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|x64.ActiveCfg = Debug|x64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|x64.Build.0 = Debug|x64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Debug|x86.Build.0 = Debug|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|arm64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|ARM64.Build.0 = MachineIndependent|arm64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|Any CPU.Build.0 = Release|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|ARM64.ActiveCfg = Release|arm64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|ARM64.Build.0 = Release|arm64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|x64.ActiveCfg = Release|x64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|x64.Build.0 = Release|x64
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|x86.ActiveCfg = Release|Any CPU
+		{52A0B9C1-23B7-4CCC-B3FC-BDBA1C619E2A}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/README.md b/README.md
index 28ed1ca7fcf..bb357a2ad6d 100644
--- a/README.md
+++ b/README.md
@@ -41,7 +41,6 @@ Before you contribute, please read through the contributing and developer guides
 * **Developer Guide on:**
    - [.NET Core](documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
    - [Full Framework](documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
-   - [Mono](documentation/wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md)
 
 * See our [help wanted issues](https://github.com/dotnet/msbuild/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) for a list of issues we think are great to onboard new developers.
    - **Note:** Please leave a comment asking to be assigned the issue if you want to work on it.
diff --git a/documentation/Deploy-MSBuild.md b/documentation/Deploy-MSBuild.md
index 80e1e7d2b84..db8d3b53f65 100644
--- a/documentation/Deploy-MSBuild.md
+++ b/documentation/Deploy-MSBuild.md
@@ -22,3 +22,7 @@ If you cannot build or cannot deploy MSBuild on the same machine on which you wi
 ## .NET (Core) SDK
 
 Deploy-MSBuild can also patch a .NET (Core) SDK installation. Pass the `-runtime Core` argument to `Deploy-MSBuild.ps1` to ensure that it selects .NET Core MSBuild.
+
+### Linux
+
+There isn‚Äôt a shell script for deploying MSBuild. Instead, you‚Äôll need to [install the PowerShell tool](https://learn.microsoft.com/powershell/scripting/install/installing-powershell-on-linux) and execute `Deploy-MSBuild.ps1` using the tool on Unix platforms with the command: `pwsh scripts\Deploy-MSBuild.ps1`.
diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index b7508160ef6..000d4675069 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -23,6 +23,10 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 
 ## Current Rotation of Change Waves
 
+### 17.12
+- [Log TaskParameterEvent for scalar parameters](https://github.com/dotnet/msbuild/pull/9908)
+- [Convert.ToString during a property evaluation uses the InvariantCulture for all types](https://github.com/dotnet/msbuild/pull/9874)
+
 ### 17.10
 - [AppDomain configuration is serialized without using BinFmt](https://github.com/dotnet/msbuild/pull/9320) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`
 - [Warning on serialization custom events by default in .NET framework](https://github.com/dotnet/msbuild/pull/9318)
@@ -30,11 +34,11 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 - [Target parameters will be unquoted](https://github.com/dotnet/msbuild/pull/9452), meaning  the ';' symbol in the parameter target name will always be treated as separator
 - [Add Link metadata to Resources in AssignLinkMetadata target](https://github.com/dotnet/msbuild/pull/9464)
 - [Change Version switch output to finish with a newline](https://github.com/dotnet/msbuild/pull/9485)
-- [Load Microsoft.DotNet.MSBuildSdkResolver into default load context (MSBuild.exe only)](https://github.com/dotnet/msbuild/pull/9439)
 - [Load NuGet.Frameworks into secondary AppDomain (MSBuild.exe only)](https://github.com/dotnet/msbuild/pull/9446)
 - [Update Traits when environment has been changed](https://github.com/dotnet/msbuild/pull/9655)
 - [Exec task does not trim leading whitespaces for ConsoleOutput](https://github.com/dotnet/msbuild/pull/9722)
-
+- [Introduce [MSBuild]::StableStringHash overloads](https://github.com/dotnet/msbuild/issues/9519)
+- [Keep the encoding of standard output & error consistent with the console code page for ToolTask](https://github.com/dotnet/msbuild/pull/9539)
 
 ### 17.8
 - [[RAR] Don't do I/O on SDK-provided references](https://github.com/dotnet/msbuild/pull/8688)
@@ -42,7 +46,6 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 - [Moving from SHA1 to SHA256 for Hash task](https://github.com/dotnet/msbuild/pull/8812)
 - [Deprecating custom derived BuildEventArgs](https://github.com/dotnet/msbuild/pull/8917) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`
 
-
 ### 17.6
 - [Parse invalid property under target](https://github.com/dotnet/msbuild/pull/8190)
 - [Eliminate project string cache](https://github.com/dotnet/msbuild/pull/7965)
diff --git a/documentation/wiki/Labels.md b/documentation/wiki/Labels.md
index 0ede6a53483..4571064a233 100644
--- a/documentation/wiki/Labels.md
+++ b/documentation/wiki/Labels.md
@@ -3,10 +3,10 @@ Here's a brief explanation on the labels most often used by the MSBuild team exc
 
 | Label             | Applied When | Notes |
 |-------------------|--------------|-------|
-| `needs-triage`    | Team has yet to determine what area/prioritization applies to the issue. | This is the primary label queried during a regular bug triage meeting. Automatically removed when `needs-more-info` is applied. |
+| `triaged`    | Team has determined what area/prioritization applies to the issue. | This is the primary label absence of which is queried during a regular bug triage meeting. Automatically added when `needs-more-info` is applied. |
 | `needs-attention` | An issue requires the team look at it during bug triage. | Automatically applied when a stale issue receives a comment. |
 | `needs-more-info` | Team asked for info needed to continue an investigation. | If no response is given within 7 days, the `stale` label is applied. |
-| `initial-investigation` | A member of the team does a "first pass" investigation. | `needs-triage` is applied and team member and unassigns themselves after the initial investigation is complete. |
+| `initial-investigation` | A member of the team does a "first pass" investigation. | `triaged` label is removed and team member unassigns themselves after the initial investigation is complete. |
 | `stale` | An issue marked with `needs-more-info` is inactive for 7 days. | The issue will be closed after 30 days of inactivity while the `stale` label is applied. |
 | `For consideration` | An issue should get higher prioritization when planning the next set of features. | |
 | `help wanted` | Anyone can take ownership over this issue. | If a contributor wants to take the issue on, they should ask that it be assigned to them BEFORE doing development work.  |
diff --git a/documentation/wiki/MSBuild-Environment-Variables.md b/documentation/wiki/MSBuild-Environment-Variables.md
new file mode 100644
index 00000000000..39daa716718
--- /dev/null
+++ b/documentation/wiki/MSBuild-Environment-Variables.md
@@ -0,0 +1,33 @@
+# MSBuild environment variables list
+
+This document describes the environment variables that are respected in MSBuild, its purpose and usage. 
+
+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.
+
+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`
+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio. More details on [capturing binary logs](./Providing-Binary-Logs.md)
+* `MSBUILDTARGETOUTPUTLOGGING=1`
+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).
+* `MSBUILDLOGTASKINPUTS=1`
+   * Log task inputs (not needed if there are any diagnostic loggers already).
+ * `MSBUILDEMITSOLUTION=1`
+   * Save the generated .proj file for the .sln that is used to build the solution. The generated files are emitted into a binary log by default and their presence on disk can break subsequent builds.
+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`
+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/). If you need this level of detail you are generally served better with a binary log than the text log.
+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`
+   * In ResolveAssemblyReference task, log verbose search results.
+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`
+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory
+* `MSBUILDDISABLENODEREUSE=1`
+   * Set this to not leave MSBuild processes behind (see `/nr:false`, but the environment variable is useful to also set this for Visual Studio for example).
+* `MSBUILDLOGASYNC=1`
+   * Enable asynchronous logging.
+* `MSBUILDDEBUGONSTART=1`
+   * Launches debugger on build start. Works on Windows operating systems only.  
+   * Setting the value of 2 allows for manually attaching a debugger to a process ID. This works on Windows and non-Windows operating systems.
+* `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`
+   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).
+
+* `MsBuildSkipEagerWildCardEvaluationRegexes`
+  *  If specified, overrides the default behavior of glob expansion. During glob expansion, if the path with wildcards that is being processed matches one of the regular expressions provided in the [environment variable](#msbuildskipeagerwildcardevaluationregexes), the path is not processed (expanded). 
+  * The value of the environment  variable is a list of regular expressions, separated by semicolon (;).
\ No newline at end of file
diff --git a/documentation/wiki/MSBuild-Resources.md b/documentation/wiki/MSBuild-Resources.md
index 506e407258d..73c6edde44f 100644
--- a/documentation/wiki/MSBuild-Resources.md
+++ b/documentation/wiki/MSBuild-Resources.md
@@ -12,7 +12,10 @@
    * find targets [referencesource.microsoft.com/#MSBuildTarget=ResolveAssemblyReferences](https://referencesource.microsoft.com/#MSBuildTarget=ResolveAssemblyReferences)
 
 # Tools
-**Note:** These are third party tools
+ * [PowerShell](https://learn.microsoft.com/powershell/scripting/overview)
+   * Allows to execute powershell scripts in Windows, Linux, and macOS.
+
+Third-party tools:
  * [MSBuildStructuredLog](https://msbuildlog.com/)
    * A log viewer that displays a structured representation of executed targets, tasks, property and item values.
  * [MSBuildExtensionPack](https://github.com/mikefourie-zz/MSBuildExtensionPack) (also via [NuGet](https://www.nuget.org/packages/MSBuild.Extension.Pack))
diff --git a/documentation/wiki/MSBuild-Tips-&-Tricks.md b/documentation/wiki/MSBuild-Tips-&-Tricks.md
index 94b9ec2f91b..17b137ae33d 100644
--- a/documentation/wiki/MSBuild-Tips-&-Tricks.md
+++ b/documentation/wiki/MSBuild-Tips-&-Tricks.md
@@ -6,37 +6,22 @@ See the [MSBuild Command-Line Reference](https://learn.microsoft.com/visualstudi
  * `MSBuild.exe -nr:false`
    * Disable node reuse (`/nodeReuse:false`). Don't leave MSBuild.exe processes hanging around (and possibly locking files) after the build completes. See more details in MSBuild command line help (/?). See also `MSBUILDDISABLENODEREUSE=1` below. Note that using this when building repeatedly will cause slower builds.
  * `MSBuild.exe -bl`
-   * Records all build events to a structured binary log file. The [MSBuildStructuredLog](https://github.com/KirillOsenkov/MSBuildStructuredLog) tool can be used to analyze this file.
+   * Records all build events to a structured [binary log file](./Providing-Binary-Logs.md). The [MSBuildStructuredLog](https://github.com/KirillOsenkov/MSBuildStructuredLog) tool can be used to analyze this file.
  * `MSBuild.exe -noconlog`
    * Used to suppress the usage of the console logger, which is otherwise always attached.
  * `MSBuild.exe -flp:v=diag`
    * Passes parameters to the file logger. If you want to attach multiple file loggers, you do so by specifying additional parameters in the switches /flp1, /flp2, /flp3, and so on.
 
+
+# Building MSBuild
+
+The documentation on building MSBuild:
+- [Full Framework MSBuild](./Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
+- [.Net Core MSBuild](./Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
+
 # Environment Variables
 
- * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`
-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.
- * `MSBUILDTARGETOUTPUTLOGGING=1`
-   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).
- * `MSBUILDLOGTASKINPUTS=1`
-   * Log task inputs (not needed if there are any diagnostic loggers already).
- * `MSBUILDEMITSOLUTION=1`
-   * Save the generated .proj file for the .sln that is used to build the solution.
- * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`
-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).
- * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`
-   * In ResolveAssemblyReference task, log verbose search results.
- * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`
-   * Dump generated code for task to a <GUID>.txt file in the TEMP directory
- * `MSBUILDDISABLENODEREUSE=1`
-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).
- * `MSBUILDLOGASYNC=1`
-   * Enable asynchronous logging.
- * `MSBUILDDEBUGONSTART=1`
-   * Launch debugger on build start.
-   * Setting the value of 2 allows for manually attaching a debugger to a process ID.
- * `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`
-   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).
+The list of environment variables could be found [here](./MSBuild-Environment-Variables.md)
 
 # TreatAsLocalProperty
 If MSBuild.exe is passed properties on the command line, such as `/p:Platform=AnyCPU` then this value overrides whatever assignments you have to that property inside property groups. For instance, `<Platform>x86</Platform>` will be ignored. To make sure your local assignment to properties overrides whatever they pass on the command line, add the following at the top of your MSBuild project file:
diff --git a/eng/AfterSigning.targets b/eng/AfterSigning.targets
index 36be3ca1ed0..eb6c1a06ca5 100644
--- a/eng/AfterSigning.targets
+++ b/eng/AfterSigning.targets
@@ -10,6 +10,6 @@
         <Copy
             SourceFiles="$(ArtifactsBinDir)MSBuildTaskHost\x64\Release\net35\MSBuildTaskHost.pdb"
             DestinationFolder="$(ArtifactsSymStoreDirectory)\MSBuildTaskHost\net35\amd64"
-            Condition="'$(MSBuildRuntimeType)' != 'Core' and '$(MonoBuild)' != 'true'"/>
+            Condition="'$(MSBuildRuntimeType)' != 'Core'"/>
     </Target>
 </Project>
diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index e6fee0282f8..3aafd190c94 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -2,7 +2,7 @@
 
   <!--
   Copies the binaries of MSBuild to a bootstrap folder so we can rebuild msbuild with itself.
-  On netcore and mono it performs a directory copy.
+  On netcore it performs a directory copy.
   On full framework it performs a more involved deployment.
    -->
 
@@ -11,7 +11,6 @@
     <BootstrapDestination Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
     <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\MSBuild\</BootstrapDestination>
 
-    <!-- TODO: Mono build should use BootstrapNetCore logic -->
     <BootstrapDependsOn Condition="$(TargetFramework.StartsWith('net4'))">BootstrapFull</BootstrapDependsOn>
     <BootstrapDependsOn Condition="!$(TargetFramework.StartsWith('net4'))">BootstrapNetCore</BootstrapDependsOn>
 
@@ -72,10 +71,8 @@
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.exe" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\FileTracker*.dll" />
       <SdkResolverFiles Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\**\*.*" />
-      <NuGetSdkResolverManifest Include= "$(RepoRoot)src\MSBuild\SdkResolvers\VS\Microsoft.Build.NuGetSdkResolver.xml" Condition="'$(MonoBuild)' != 'true'" />
-      <NuGetSdkResolverManifest Include= "$(RepoRoot)src\MSBuild\SdkResolvers\Standalone\Microsoft.Build.NuGetSdkResolver.xml" Condition="'$(MonoBuild)' == 'true'" />
+      <NuGetSdkResolverManifest Include="$(RepoRoot)src\MSBuild\SdkResolvers\VS\Microsoft.Build.NuGetSdkResolver.xml" />
       <InstalledSdks Include="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Sdks\**\*.*" />
-      <InstalledSdks Include="$(MSBuildBinPath)\Sdks\**\*" Condition="'$(MonoBuild)' == 'true'" />
 
       <InstalledStaticAnalysisTools Include="$(VsInstallRoot)\Team Tools\Static Analysis Tools\**\*.*" />
 
@@ -140,11 +137,6 @@
 
     <Copy SourceFiles="@(InstalledSdks)"
           DestinationFiles="@(InstalledSdks -> '$(BootstrapDestination)Sdks\%(RecursiveDir)%(Filename)%(Extension)')"
-          Condition="'$(MonoBuild)' != 'true'"
-          SkipUnchangedFiles="true" />
-    <Copy SourceFiles="@(InstalledSdks)"
-          DestinationFiles="@(InstalledSdks -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\Sdks\%(RecursiveDir)%(Filename)%(Extension)')"
-          Condition="'$(MonoBuild)' == 'true'"
           SkipUnchangedFiles="true" />
 
     <Copy SourceFiles="@(InstalledStaticAnalysisTools)"
@@ -155,14 +147,9 @@
           DestinationFiles="@(InstalledNuGetFiles->'$(BootstrapDestination)Microsoft\NuGet\%(Filename)%(Extension)')"
           SkipUnchangedFiles="true" />
 
-    <Copy Condition="'$(MonoBuild)' != 'true'"
-          SourceFiles="@(_NuGetRuntimeDependencies)"
+    <Copy SourceFiles="@(_NuGetRuntimeDependencies)"
           DestinationFolder="$(BootstrapDestination)..\Common7\IDE\CommonExtensions\Microsoft\NuGet\"
           SkipUnchangedFiles="true" />
-    <Copy Condition="'$(MonoBuild)' == 'true'"
-          SourceFiles="@(_NuGetRuntimeDependencies)"
-          DestinationFolder="$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin"
-          SkipUnchangedFiles="true" />
 
     <Copy SourceFiles="@(NuGetSdkResolverManifest)"
           DestinationFolder="$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\SdkResolvers\Microsoft.Build.NuGetSdkResolver"
diff --git a/eng/SourceBuildPrebuiltBaseline.xml b/eng/SourceBuildPrebuiltBaseline.xml
index b341b5e5b5a..64d04b3e036 100644
--- a/eng/SourceBuildPrebuiltBaseline.xml
+++ b/eng/SourceBuildPrebuiltBaseline.xml
@@ -3,15 +3,18 @@
 
 <UsageData>
   <IgnorePatterns>
-    <!-- Baseline 7.0 dependencies until msbuild targets net8 and uses a net8 arcade, SBRP, etc.
-         These cannot be added to 7.0 SBRP, because they would are produced in the 7.0 build. -->
+    <!-- 8.0 packages are not allowed in the 8.0 build, because they're not "current", so baseline them. -->
+    <UsagePattern IdentityGlob="System.CodeDom/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Collections.Immutable/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Configuration.ConfigurationManager/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Diagnostics.EventLog/*8.0.0*" />
+    <UsagePattern IdentityGlob="System.Formats.Asn1/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Reflection.Metadata/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Reflection.MetadataLoadContext/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Resources.Extensions/*8.0.0*" />
+    <UsagePattern IdentityGlob="System.Security.Cryptography.Pkcs/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Security.Cryptography.ProtectedData/*8.0.0*" />
+    <UsagePattern IdentityGlob="System.Security.Cryptography.Xml/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Text.Json/*8.0.0*" />
     <UsagePattern IdentityGlob="System.Threading.Tasks.Dataflow/*8.0.0*" />
   </IgnorePatterns>
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 4622577c8fd..0cbb5880746 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -2,9 +2,9 @@
 <Dependencies>
   <ProductDependencies>
     <!-- Intermediate is necessary for source build. -->
-    <Dependency Name="Microsoft.SourceBuild.Intermediate.source-build-reference-packages" Version="8.0.0-alpha.1.24061.1">
+    <Dependency Name="Microsoft.SourceBuild.Intermediate.source-build-reference-packages" Version="8.0.0-alpha.1.24163.3">
       <Uri>https://github.com/dotnet/source-build-reference-packages</Uri>
-      <Sha>453a37ef7ae6c335cd49b3b9ab7713c87faeb265</Sha>
+      <Sha>79827eed138fd2575a8b24820b4f385ee4ffb6e6</Sha>
       <SourceBuild RepoName="source-build-reference-packages" ManagedOnly="true" />
     </Dependency>
     <!-- Necessary for source-build. This allows the live version of the package to be used by source-build. -->
@@ -67,14 +67,14 @@
     </Dependency>
   </ProductDependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="8.0.0-beta.24060.4">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="8.0.0-beta.24204.3">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>888985fb9a9ae4cb30bca75f98af9126c839e660</Sha>
+      <Sha>188340e12c0a372b1681ad6a5e72c608021efdba</Sha>
     </Dependency>
     <!-- Intermediate is necessary for source build. -->
-    <Dependency Name="Microsoft.SourceBuild.Intermediate.arcade" Version="8.0.0-beta.24060.4">
+    <Dependency Name="Microsoft.SourceBuild.Intermediate.arcade" Version="8.0.0-beta.24204.3">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>888985fb9a9ae4cb30bca75f98af9126c839e660</Sha>
+      <Sha>188340e12c0a372b1681ad6a5e72c608021efdba</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
     <Dependency Name="Microsoft.DotNet.XliffTasks" Version="1.0.0-beta.23475.1" CoherentParentDependency="Microsoft.DotNet.Arcade.Sdk">
@@ -87,18 +87,18 @@
       <Sha>73f0850939d96131c28cf6ea6ee5aacb4da0083a</Sha>
       <SourceBuild RepoName="xliff-tasks" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.10.0-preview.1.18">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.10.0-preview.2.97">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>f207cbb3530350f785d1b04014e15563cc9b5e03</Sha>
+      <Sha>fb50d1a45ed10b39b5f335bc3a4bdcaea9b951cf</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.10.0-2.24104.1">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.10.0-3.24202.15">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>d9272a3f01928b1c3614a942bdbbfeb0fb17a43b</Sha>
+      <Sha>cbca41cad4e21c29548e9e57d7135740b6f78df9</Sha>
       <SourceBuild RepoName="roslyn" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="8.0.0-beta.24060.4">
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="8.0.0-beta.24204.3">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>888985fb9a9ae4cb30bca75f98af9126c839e660</Sha>
+      <Sha>188340e12c0a372b1681ad6a5e72c608021efdba</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index 8b628f57553..1318a69bbb4 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,7 +2,7 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>17.10.0</VersionPrefix>
+    <VersionPrefix>17.11.0</VersionPrefix>
     <PackageValidationBaselineVersion>17.8.3</PackageValidationBaselineVersion>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
@@ -10,14 +10,12 @@
     <!-- Workaround for https://github.com/dotnet/roslyn/issues/35793 -->
     <SemanticVersioningV1>true</SemanticVersioningV1>
     <MicroBuildPluginsSwixBuildVersion>1.1.87</MicroBuildPluginsSwixBuildVersion>
-    <MonoBuild Condition="'$(Configuration)' == 'Debug-MONO' or '$(Configuration)' == 'Release-MONO'">true</MonoBuild>
   </PropertyGroup>
   <!-- Repo Toolset Features -->
-  <PropertyGroup Condition="'$(MonoBuild)' != 'true'">
+  <PropertyGroup>
     <UsingToolIbcOptimization>true</UsingToolIbcOptimization>
-    <!-- Force a specific compiler version because record changes cause genapi output to flip-flop -->
-    <UsingToolMicrosoftNetCompilers>true</UsingToolMicrosoftNetCompilers>
     <UsingToolVisualStudioIbcTraining>true</UsingToolVisualStudioIbcTraining>
+    <UsingToolMicrosoftNetCompilers>true</UsingToolMicrosoftNetCompilers>
     <UsingToolSymbolUploader>true</UsingToolSymbolUploader>
     <UsingToolVSSDK>true</UsingToolVSSDK>
     <!-- Override Arcade's default VSSDK version with one that supports client enablement.
@@ -50,11 +48,11 @@
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
     <MicrosoftCodeAnalysisCollectionsVersion>4.2.0-1.22102.8</MicrosoftCodeAnalysisCollectionsVersion>
-    <MicrosoftDotNetXUnitExtensionsVersion>8.0.0-beta.24060.4</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>8.0.0-beta.24204.3</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>7.0.0</MicrosoftExtensionsDependencyModelVersion>
     <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.10.0-2.24104.1</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.10.0-preview.1.18</NuGetBuildTasksVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.10.0-3.24202.15</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.10.0-preview.2.97</NuGetBuildTasksVersion>
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 46d471d042b..71cbf493110 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -4,6 +4,7 @@ Param(
   [string] $configuration = "Debug",
   [switch] $prepareMachine,
   [bool] $buildStage1 = $True,
+  [bool] $onlyDocChanged = 0,
   [Parameter(ValueFromRemainingArguments=$true)][String[]]$properties
 )
 
@@ -80,13 +81,6 @@ try {
     $buildToolPath = Join-Path $bootstrapRoot "net472\MSBuild\Current\Bin\MSBuild.exe"
     $buildToolCommand = "";
     $buildToolFramework = "net472"
-
-    if ($configuration -eq "Debug-MONO" -or $configuration -eq "Release-MONO")
-    {
-      # Copy MSBuild.dll to MSBuild.exe so we can run it without a host
-      $sourceDll = Join-Path $bootstrapRoot "net472\MSBuild\Current\Bin\MSBuild.dll"
-      Copy-Item -Path $sourceDll -Destination $msbuildToUse
-    }
   }
   else
   {
@@ -123,7 +117,12 @@ try {
   # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
   # - Do run tests
   # - Don't try to create a bootstrap deployment
-  & $PSScriptRoot\Common\Build.ps1 -restore -build -test -ci /p:CreateBootstrap=false /nr:false @properties
+  if ($onlyDocChanged) {
+    & $PSScriptRoot\Common\Build.ps1 -restore -build -ci /p:CreateBootstrap=false /nr:false @properties
+  }
+  else {
+    & $PSScriptRoot\Common\Build.ps1 -restore -build -test -ci /p:CreateBootstrap=false /nr:false @properties
+  }
 
   exit $lastExitCode
 }
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index ceb2b343329..06d4ba46e21 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -3,6 +3,7 @@
 configuration="Debug"
 host_type="core"
 build_stage1=true
+onlyDocChanged=0
 properties=
 extra_properties=
 
@@ -29,6 +30,10 @@ while [[ $# -gt 0 ]]; do
       host_type=$2
       shift 2
       ;;
+    --onlydocchanged)
+      onlyDocChanged=$2
+      shift 2
+      ;;
     *)
       properties="$properties $1"
       shift 1
@@ -44,15 +49,6 @@ PerfLogDir="$ArtifactsDir/log/$configuration/PerformanceLogs"
 . "$ScriptRoot/common/tools.sh"
 InitializeDotNetCli true
 
-if [ $host_type = "mono" ] ; then
-  export _InitializeBuildTool="msbuild"
-  export _InitializeBuildToolCommand=""
-  export _InitializeBuildToolFramework="net472"
-
-  configuration="$configuration-MONO"
-  extra_properties=" /p:DeterministicSourcePaths=false"
-fi
-
 if [[ $build_stage1 == true ]];
 then
 	/bin/bash "$ScriptRoot/common/build.sh" --restore --build --ci --configuration $configuration /p:CreateBootstrap=true $properties $extra_properties || exit $?
@@ -65,18 +61,6 @@ then
   _InitializeBuildTool="$_InitializeDotNetCli/dotnet"
   _InitializeBuildToolCommand="$bootstrapRoot/net8.0/MSBuild/MSBuild.dll"
   _InitializeBuildToolFramework="net8.0"
-elif [ $host_type = "mono" ]
-then
-  export _InitializeBuildTool="mono"
-  export _InitializeBuildToolCommand="$bootstrapRoot/net472/MSBuild/Current/Bin/MSBuild.dll"
-  export _InitializeBuildToolFramework="net472"
-
-  # FIXME: remove this once we move to a newer version of Arcade with a fix for $MonoTool
-  # https://github.com/dotnet/arcade/commit/f6f14c169ba19cd851120e0d572cd1c5619205b3
-  export MonoTool=`which mono`
-
-  extn_path="$bootstrapRoot/net472/MSBuild/Current/Bin/Extensions"
-  extra_properties=" /p:MSBuildExtensionsPath=$extn_path /p:MSBuildExtensionsPath32=$extn_path /p:MSBuildExtensionsPath64=$extn_path /p:DeterministicSourcePaths=false"
 else
   echo "Unsupported hostType ($host_type)"
   exit 1
@@ -98,4 +82,10 @@ export DOTNET_HOST_PATH="$_InitializeDotNetCli/dotnet"
 # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
 # - Do run tests
 # - Don't try to create a bootstrap deployment
-. "$ScriptRoot/common/build.sh" --restore --build --test --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties
+if [ $onlyDocChanged = 0 ]
+then
+    . "$ScriptRoot/common/build.sh" --restore --build --test --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties
+
+else
+    . "$ScriptRoot/common/build.sh" --restore --build --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties
+fi
diff --git a/eng/common/SetupNugetSources.ps1 b/eng/common/SetupNugetSources.ps1
index 6c65e81925f..efa2fd72bfa 100644
--- a/eng/common/SetupNugetSources.ps1
+++ b/eng/common/SetupNugetSources.ps1
@@ -35,7 +35,7 @@ Set-StrictMode -Version 2.0
 . $PSScriptRoot\tools.ps1
 
 # Add source entry to PackageSources
-function AddPackageSource($sources, $SourceName, $SourceEndPoint, $creds, $Username, $Password) {
+function AddPackageSource($sources, $SourceName, $SourceEndPoint, $creds, $Username, $pwd) {
     $packageSource = $sources.SelectSingleNode("add[@key='$SourceName']")
     
     if ($packageSource -eq $null)
@@ -48,12 +48,11 @@ function AddPackageSource($sources, $SourceName, $SourceEndPoint, $creds, $Usern
     else {
         Write-Host "Package source $SourceName already present."
     }
-    
-    AddCredential -Creds $creds -Source $SourceName -Username $Username -Password $Password
+    AddCredential -Creds $creds -Source $SourceName -Username $Username -pwd $pwd
 }
 
 # Add a credential node for the specified source
-function AddCredential($creds, $source, $username, $password) {
+function AddCredential($creds, $source, $username, $pwd) {
     # Looks for credential configuration for the given SourceName. Create it if none is found.
     $sourceElement = $creds.SelectSingleNode($Source)
     if ($sourceElement -eq $null)
@@ -82,17 +81,18 @@ function AddCredential($creds, $source, $username, $password) {
         $passwordElement.SetAttribute("key", "ClearTextPassword")
         $sourceElement.AppendChild($passwordElement) | Out-Null
     }
-    $passwordElement.SetAttribute("value", $Password)
+    
+    $passwordElement.SetAttribute("value", $pwd)
 }
 
-function InsertMaestroPrivateFeedCredentials($Sources, $Creds, $Username, $Password) {
+function InsertMaestroPrivateFeedCredentials($Sources, $Creds, $Username, $pwd) {
     $maestroPrivateSources = $Sources.SelectNodes("add[contains(@key,'darc-int')]")
 
     Write-Host "Inserting credentials for $($maestroPrivateSources.Count) Maestro's private feeds."
     
     ForEach ($PackageSource in $maestroPrivateSources) {
         Write-Host "`tInserting credential for Maestro's feed:" $PackageSource.Key
-        AddCredential -Creds $creds -Source $PackageSource.Key -Username $Username -Password $Password
+        AddCredential -Creds $creds -Source $PackageSource.Key -Username $Username -pwd $pwd
     }
 }
 
@@ -144,13 +144,13 @@ if ($disabledSources -ne $null) {
 $userName = "dn-bot"
 
 # Insert credential nodes for Maestro's private feeds
-InsertMaestroPrivateFeedCredentials -Sources $sources -Creds $creds -Username $userName -Password $Password
+InsertMaestroPrivateFeedCredentials -Sources $sources -Creds $creds -Username $userName -pwd $Password
 
 # 3.1 uses a different feed url format so it's handled differently here
 $dotnet31Source = $sources.SelectSingleNode("add[@key='dotnet3.1']")
 if ($dotnet31Source -ne $null) {
-    AddPackageSource -Sources $sources -SourceName "dotnet3.1-internal" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal/nuget/v2" -Creds $creds -Username $userName -Password $Password
-    AddPackageSource -Sources $sources -SourceName "dotnet3.1-internal-transport" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-transport/nuget/v2" -Creds $creds -Username $userName -Password $Password
+    AddPackageSource -Sources $sources -SourceName "dotnet3.1-internal" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal/nuget/v2" -Creds $creds -Username $userName -pwd $Password
+    AddPackageSource -Sources $sources -SourceName "dotnet3.1-internal-transport" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-transport/nuget/v2" -Creds $creds -Username $userName -pwd $Password
 }
 
 $dotnetVersions = @('5','6','7','8')
@@ -159,9 +159,9 @@ foreach ($dotnetVersion in $dotnetVersions) {
     $feedPrefix = "dotnet" + $dotnetVersion;
     $dotnetSource = $sources.SelectSingleNode("add[@key='$feedPrefix']")
     if ($dotnetSource -ne $null) {
-        AddPackageSource -Sources $sources -SourceName "$feedPrefix-internal" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/$feedPrefix-internal/nuget/v2" -Creds $creds -Username $userName -Password $Password
-        AddPackageSource -Sources $sources -SourceName "$feedPrefix-internal-transport" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/$feedPrefix-internal-transport/nuget/v2" -Creds $creds -Username $userName -Password $Password
+        AddPackageSource -Sources $sources -SourceName "$feedPrefix-internal" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/$feedPrefix-internal/nuget/v2" -Creds $creds -Username $userName -pwd $Password
+        AddPackageSource -Sources $sources -SourceName "$feedPrefix-internal-transport" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/$feedPrefix-internal-transport/nuget/v2" -Creds $creds -Username $userName -pwd $Password
     }
 }
 
-$doc.Save($filename)
+$doc.Save($filename)
\ No newline at end of file
diff --git a/eng/common/native/init-compiler.sh b/eng/common/native/init-compiler.sh
index f5c1ec7eafe..2d5660642b8 100644
--- a/eng/common/native/init-compiler.sh
+++ b/eng/common/native/init-compiler.sh
@@ -63,7 +63,7 @@ if [ -z "$CLR_CC" ]; then
     # Set default versions
     if [ -z "$majorVersion" ]; then
         # note: gcc (all versions) and clang versions higher than 6 do not have minor version in file name, if it is zero.
-        if [ "$compiler" = "clang" ]; then versions="17 16 15 14 13 12 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5"
+        if [ "$compiler" = "clang" ]; then versions="18 17 16 15 14 13 12 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5"
         elif [ "$compiler" = "gcc" ]; then versions="13 12 11 10 9 8 7 6 5 4.9"; fi
 
         for version in $versions; do
diff --git a/eng/common/post-build/publish-using-darc.ps1 b/eng/common/post-build/publish-using-darc.ps1
index 1e779fec4dd..5a3a32ea8d7 100644
--- a/eng/common/post-build/publish-using-darc.ps1
+++ b/eng/common/post-build/publish-using-darc.ps1
@@ -12,7 +12,7 @@ param(
 try {
   . $PSScriptRoot\post-build-utils.ps1
 
-  $darc = Get-Darc 
+  $darc = Get-Darc
 
   $optionalParams = [System.Collections.ArrayList]::new()
 
@@ -46,7 +46,7 @@ try {
   }
 
   Write-Host 'done.'
-} 
+}
 catch {
   Write-Host $_
   Write-PipelineTelemetryError -Category 'PromoteBuild' -Message "There was an error while trying to publish build '$BuildId' to default channels."
diff --git a/eng/common/templates-official/job/job.yml b/eng/common/templates-official/job/job.yml
new file mode 100644
index 00000000000..1f035fee73f
--- /dev/null
+++ b/eng/common/templates-official/job/job.yml
@@ -0,0 +1,264 @@
+# Internal resources (telemetry, microbuild) can only be accessed from non-public projects,
+# and some (Microbuild) should only be applied to non-PR cases for internal builds.
+
+parameters:
+# Job schema parameters - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#job
+  cancelTimeoutInMinutes: ''
+  condition: ''
+  container: ''
+  continueOnError: false
+  dependsOn: ''
+  displayName: ''
+  pool: ''
+  steps: []
+  strategy: ''
+  timeoutInMinutes: ''
+  variables: []
+  workspace: ''
+  templateContext: ''
+
+# Job base template specific parameters
+  # See schema documentation - https://github.com/dotnet/arcade/blob/master/Documentation/AzureDevOps/TemplateSchema.md
+  artifacts: ''
+  enableMicrobuild: false
+  enablePublishBuildArtifacts: false
+  enablePublishBuildAssets: false
+  enablePublishTestResults: false
+  enablePublishUsingPipelines: false
+  enableBuildRetry: false
+  disableComponentGovernance: ''
+  componentGovernanceIgnoreDirectories: ''
+  mergeTestResults: false
+  testRunTitle: ''
+  testResultsFormat: ''
+  name: ''
+  preSteps: []
+  runAsPublic: false
+# Sbom related params
+  enableSbom: true
+  PackageVersion: 7.0.0
+  BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
+
+jobs:
+- job: ${{ parameters.name }}
+
+  ${{ if ne(parameters.cancelTimeoutInMinutes, '') }}:
+    cancelTimeoutInMinutes: ${{ parameters.cancelTimeoutInMinutes }}
+
+  ${{ if ne(parameters.condition, '') }}:
+    condition: ${{ parameters.condition }}
+
+  ${{ if ne(parameters.container, '') }}:
+    container: ${{ parameters.container }}
+
+  ${{ if ne(parameters.continueOnError, '') }}:
+    continueOnError: ${{ parameters.continueOnError }}
+
+  ${{ if ne(parameters.dependsOn, '') }}:
+    dependsOn: ${{ parameters.dependsOn }}
+
+  ${{ if ne(parameters.displayName, '') }}:
+    displayName: ${{ parameters.displayName }}
+
+  ${{ if ne(parameters.pool, '') }}:
+    pool: ${{ parameters.pool }}
+
+  ${{ if ne(parameters.strategy, '') }}:
+    strategy: ${{ parameters.strategy }}
+
+  ${{ if ne(parameters.timeoutInMinutes, '') }}:
+    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
+
+  ${{ if ne(parameters.templateContext, '') }}:
+    templateContext: ${{ parameters.templateContext }}
+
+  variables:
+  - ${{ if ne(parameters.enableTelemetry, 'false') }}:
+    - name: DOTNET_CLI_TELEMETRY_PROFILE
+      value: '$(Build.Repository.Uri)'
+  - ${{ if eq(parameters.enableRichCodeNavigation, 'true') }}:
+    - name: EnableRichCodeNavigation
+      value: 'true'
+  # Retry signature validation up to three times, waiting 2 seconds between attempts.
+  # See https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3028#retry-untrusted-root-failures
+  - name: NUGET_EXPERIMENTAL_CHAIN_BUILD_RETRY_POLICY
+    value: 3,2000
+  - ${{ each variable in parameters.variables }}:
+    # handle name-value variable syntax
+    # example:
+    # - name: [key]
+    #   value: [value]
+    - ${{ if ne(variable.name, '') }}:
+      - name: ${{ variable.name }}
+        value: ${{ variable.value }}
+
+    # handle variable groups
+    - ${{ if ne(variable.group, '') }}:
+      - group: ${{ variable.group }}
+
+    # handle template variable syntax
+    # example:
+    # - template: path/to/template.yml
+    #   parameters:
+    #     [key]: [value]
+    - ${{ if ne(variable.template, '') }}:
+      - template: ${{ variable.template }}
+        ${{ if ne(variable.parameters, '') }}:
+          parameters: ${{ variable.parameters }}
+
+    # handle key-value variable syntax.
+    # example:
+    # - [key]: [value]
+    - ${{ if and(eq(variable.name, ''), eq(variable.group, ''), eq(variable.template, '')) }}:
+      - ${{ each pair in variable }}:
+        - name: ${{ pair.key }}
+          value: ${{ pair.value }}
+
+  # DotNet-HelixApi-Access provides 'HelixApiAccessToken' for internal builds
+  - ${{ if and(eq(parameters.enableTelemetry, 'true'), eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - group: DotNet-HelixApi-Access
+
+  ${{ if ne(parameters.workspace, '') }}:
+    workspace: ${{ parameters.workspace }}
+
+  steps:
+  - ${{ if ne(parameters.preSteps, '') }}:
+    - ${{ each preStep in parameters.preSteps }}:
+      - ${{ preStep }}
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - ${{ if eq(parameters.enableMicrobuild, 'true') }}:
+      - task: MicroBuildSigningPlugin@4
+        displayName: Install MicroBuild plugin
+        inputs:
+          signType: $(_SignType)
+          zipSources: false
+          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
+        env:
+          TeamName: $(_TeamName)
+          MicroBuildOutputFolderOverride: '$(Agent.TempDirectory)'
+        continueOnError: ${{ parameters.continueOnError }}
+        condition: and(succeeded(), in(variables['_SignType'], 'real', 'test'), eq(variables['Agent.Os'], 'Windows_NT'))
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), eq(variables['System.TeamProject'], 'internal')) }}:
+    - task: NuGetAuthenticate@1
+
+  - ${{ if and(ne(parameters.artifacts.download, 'false'), ne(parameters.artifacts.download, '')) }}:
+    - task: DownloadPipelineArtifact@2
+      inputs:
+        buildType: current
+        artifactName: ${{ coalesce(parameters.artifacts.download.name, 'Artifacts_$(Agent.OS)_$(_BuildConfig)') }}
+        targetPath: ${{ coalesce(parameters.artifacts.download.path, 'artifacts') }}
+        itemPattern: ${{ coalesce(parameters.artifacts.download.pattern, '**') }}
+
+  - ${{ each step in parameters.steps }}:
+    - ${{ step }}
+
+  - ${{ if eq(parameters.enableRichCodeNavigation, true) }}:
+    - task: RichCodeNavIndexer@0
+      displayName: RichCodeNav Upload
+      inputs:
+        languages: ${{ coalesce(parameters.richCodeNavigationLanguage, 'csharp') }}
+        environment: ${{ coalesce(parameters.richCodeNavigationEnvironment, 'production') }}
+        richNavLogOutputDirectory: $(Build.SourcesDirectory)/artifacts/bin
+        uploadRichNavArtifacts: ${{ coalesce(parameters.richCodeNavigationUploadArtifacts, false) }}
+      continueOnError: true
+
+  - template: /eng/common/templates-official/steps/component-governance.yml
+    parameters:
+      ${{ if eq(parameters.disableComponentGovernance, '') }}:
+        ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(parameters.runAsPublic, 'false'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dotnet/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/microsoft/'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))) }}:
+          disableComponentGovernance: false
+        ${{ else }}:
+          disableComponentGovernance: true
+      ${{ else }}:
+        disableComponentGovernance: ${{ parameters.disableComponentGovernance }}
+      componentGovernanceIgnoreDirectories: ${{ parameters.componentGovernanceIgnoreDirectories }}
+
+  - ${{ if eq(parameters.enableMicrobuild, 'true') }}:
+    - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+      - task: MicroBuildCleanup@1
+        displayName: Execute Microbuild cleanup tasks
+        condition: and(always(), in(variables['_SignType'], 'real', 'test'), eq(variables['Agent.Os'], 'Windows_NT'))
+        continueOnError: ${{ parameters.continueOnError }}
+        env:
+          TeamName: $(_TeamName)
+
+  - ${{ if ne(parameters.artifacts.publish, '') }}:
+    - ${{ if and(ne(parameters.artifacts.publish.artifacts, 'false'), ne(parameters.artifacts.publish.artifacts, '')) }}:
+      - task: CopyFiles@2
+        displayName: Gather binaries for publish to artifacts
+        inputs:
+          SourceFolder: 'artifacts/bin'
+          Contents: '**'
+          TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/bin'
+      - task: CopyFiles@2
+        displayName: Gather packages for publish to artifacts
+        inputs:
+          SourceFolder: 'artifacts/packages'
+          Contents: '**'
+          TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/packages'
+      - task: 1ES.PublishBuildArtifacts@1
+        displayName: Publish pipeline artifacts
+        inputs:
+          PathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
+          PublishLocation: Container
+          ArtifactName: ${{ coalesce(parameters.artifacts.publish.artifacts.name , 'Artifacts_$(Agent.Os)_$(_BuildConfig)') }}
+        continueOnError: true
+        condition: always()
+    - ${{ if and(ne(parameters.artifacts.publish.logs, 'false'), ne(parameters.artifacts.publish.logs, '')) }}:
+      - task: 1ES.PublishPipelineArtifact@1
+        inputs:
+          targetPath: 'artifacts/log'
+          artifactName: ${{ coalesce(parameters.artifacts.publish.logs.name, 'Logs_Build_$(Agent.Os)_$(_BuildConfig)') }}
+        displayName: 'Publish logs'
+        continueOnError: true
+        condition: always()
+
+  - ${{ if ne(parameters.enablePublishBuildArtifacts, 'false') }}:
+    - task: 1ES.PublishBuildArtifacts@1
+      displayName: Publish Logs
+      inputs:
+        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
+        PublishLocation: Container
+        ArtifactName: ${{ coalesce(parameters.enablePublishBuildArtifacts.artifactName, '$(Agent.Os)_$(Agent.JobName)' ) }}
+      continueOnError: true
+      condition: always()
+
+  - ${{ if or(and(eq(parameters.enablePublishTestResults, 'true'), eq(parameters.testResultsFormat, '')), eq(parameters.testResultsFormat, 'xunit')) }}:
+    - task: PublishTestResults@2
+      displayName: Publish XUnit Test Results
+      inputs:
+        testResultsFormat: 'xUnit'
+        testResultsFiles: '*.xml'
+        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
+        testRunTitle: ${{ coalesce(parameters.testRunTitle, parameters.name, '$(System.JobName)') }}-xunit
+        mergeTestResults: ${{ parameters.mergeTestResults }}
+      continueOnError: true
+      condition: always()
+  - ${{ if or(and(eq(parameters.enablePublishTestResults, 'true'), eq(parameters.testResultsFormat, '')), eq(parameters.testResultsFormat, 'vstest')) }}:
+    - task: PublishTestResults@2
+      displayName: Publish TRX Test Results
+      inputs:
+        testResultsFormat: 'VSTest'
+        testResultsFiles: '*.trx'
+        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
+        testRunTitle: ${{ coalesce(parameters.testRunTitle, parameters.name, '$(System.JobName)') }}-trx
+        mergeTestResults: ${{ parameters.mergeTestResults }}
+      continueOnError: true
+      condition: always()
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(parameters.enableSbom, 'true')) }}:
+    - template: /eng/common/templates-official/steps/generate-sbom.yml
+      parameters:
+        PackageVersion: ${{ parameters.packageVersion}}
+        BuildDropPath: ${{ parameters.buildDropPath }}
+        IgnoreDirectories: ${{ parameters.componentGovernanceIgnoreDirectories }}
+
+  - ${{ if eq(parameters.enableBuildRetry, 'true') }}:
+    - task: 1ES.PublishPipelineArtifact@1
+      inputs:
+        targetPath: '$(Build.SourcesDirectory)\eng\common\BuildConfiguration'
+        artifactName: 'BuildConfiguration'
+      displayName: 'Publish build retry configuration'
+      continueOnError: true
\ No newline at end of file
diff --git a/eng/common/templates-official/job/onelocbuild.yml b/eng/common/templates-official/job/onelocbuild.yml
new file mode 100644
index 00000000000..52b4d05d3f8
--- /dev/null
+++ b/eng/common/templates-official/job/onelocbuild.yml
@@ -0,0 +1,112 @@
+parameters:
+  # Optional: dependencies of the job
+  dependsOn: ''
+
+  # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
+  pool: ''
+    
+  CeapexPat: $(dn-bot-ceapex-package-r) # PAT for the loc AzDO instance https://dev.azure.com/ceapex
+  GithubPat: $(BotAccount-dotnet-bot-repo-PAT)
+
+  SourcesDirectory: $(Build.SourcesDirectory)
+  CreatePr: true
+  AutoCompletePr: false
+  ReusePr: true
+  UseLfLineEndings: true
+  UseCheckedInLocProjectJson: false
+  SkipLocProjectJsonGeneration: false
+  LanguageSet: VS_Main_Languages
+  LclSource: lclFilesInRepo
+  LclPackageId: ''
+  RepoType: gitHub
+  GitHubOrg: dotnet
+  MirrorRepo: ''
+  MirrorBranch: main
+  condition: ''
+  JobNameSuffix: ''
+
+jobs:
+- job: OneLocBuild${{ parameters.JobNameSuffix }}
+  
+  dependsOn: ${{ parameters.dependsOn }}
+
+  displayName: OneLocBuild${{ parameters.JobNameSuffix }}
+
+  variables:
+    - group: OneLocBuildVariables # Contains the CeapexPat and GithubPat
+    - name: _GenerateLocProjectArguments
+      value: -SourcesDirectory ${{ parameters.SourcesDirectory }}
+        -LanguageSet "${{ parameters.LanguageSet }}"
+        -CreateNeutralXlfs
+    - ${{ if eq(parameters.UseCheckedInLocProjectJson, 'true') }}:
+      - name: _GenerateLocProjectArguments
+        value: ${{ variables._GenerateLocProjectArguments }} -UseCheckedInLocProjectJson
+    - template: /eng/common/templates-official/variables/pool-providers.yml
+
+  ${{ if ne(parameters.pool, '') }}:
+    pool: ${{ parameters.pool }}
+  ${{ if eq(parameters.pool, '') }}:
+    pool:
+      # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+      ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+        name: AzurePipelines-EO
+        image: 1ESPT-Windows2022
+        demands: Cmd
+        os: windows
+      # If it's not devdiv, it's dnceng
+      ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+        name: $(DncEngInternalBuildPool)
+        image: 1es-windows-2022
+        os: windows
+
+  steps:
+    - ${{ if ne(parameters.SkipLocProjectJsonGeneration, 'true') }}:
+      - task: Powershell@2
+        inputs:
+          filePath: $(Build.SourcesDirectory)/eng/common/generate-locproject.ps1
+          arguments: $(_GenerateLocProjectArguments)
+        displayName: Generate LocProject.json
+        condition: ${{ parameters.condition }}
+
+    - task: OneLocBuild@2
+      displayName: OneLocBuild
+      env:
+        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
+      inputs:
+        locProj: eng/Localize/LocProject.json
+        outDir: $(Build.ArtifactStagingDirectory)
+        lclSource: ${{ parameters.LclSource }}
+        lclPackageId: ${{ parameters.LclPackageId }}
+        isCreatePrSelected: ${{ parameters.CreatePr }}
+        isAutoCompletePrSelected: ${{ parameters.AutoCompletePr }}
+        ${{ if eq(parameters.CreatePr, true) }}:
+          isUseLfLineEndingsSelected: ${{ parameters.UseLfLineEndings }}
+          ${{ if eq(parameters.RepoType, 'gitHub') }}:
+            isShouldReusePrSelected: ${{ parameters.ReusePr }}
+        packageSourceAuth: patAuth
+        patVariable: ${{ parameters.CeapexPat }}
+        ${{ if eq(parameters.RepoType, 'gitHub') }}:
+          repoType: ${{ parameters.RepoType }}
+          gitHubPatVariable: "${{ parameters.GithubPat }}"
+        ${{ if ne(parameters.MirrorRepo, '') }}:
+          isMirrorRepoSelected: true
+          gitHubOrganization: ${{ parameters.GitHubOrg }}
+          mirrorRepo: ${{ parameters.MirrorRepo }}
+          mirrorBranch: ${{ parameters.MirrorBranch }}
+      condition: ${{ parameters.condition }}
+
+    - task: 1ES.PublishBuildArtifacts@1
+      displayName: Publish Localization Files
+      inputs:
+        PathtoPublish: '$(Build.ArtifactStagingDirectory)/loc'
+        PublishLocation: Container
+        ArtifactName: Loc
+      condition: ${{ parameters.condition }}
+
+    - task: 1ES.PublishBuildArtifacts@1
+      displayName: Publish LocProject.json
+      inputs:
+        PathtoPublish: '$(Build.SourcesDirectory)/eng/Localize/'
+        PublishLocation: Container
+        ArtifactName: Loc
+      condition: ${{ parameters.condition }}
\ No newline at end of file
diff --git a/eng/common/templates-official/job/publish-build-assets.yml b/eng/common/templates-official/job/publish-build-assets.yml
new file mode 100644
index 00000000000..589ac80a18b
--- /dev/null
+++ b/eng/common/templates-official/job/publish-build-assets.yml
@@ -0,0 +1,155 @@
+parameters:
+  configuration: 'Debug'
+
+  # Optional: condition for the job to run
+  condition: ''
+
+  # Optional: 'true' if future jobs should run even if this job fails
+  continueOnError: false
+
+  # Optional: dependencies of the job
+  dependsOn: ''
+
+  # Optional: Include PublishBuildArtifacts task
+  enablePublishBuildArtifacts: false
+
+  # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
+  pool: {}
+
+  # Optional: should run as a public build even in the internal project
+  #           if 'true', the build won't run any of the internal only steps, even if it is running in non-public projects.
+  runAsPublic: false
+
+  # Optional: whether the build's artifacts will be published using release pipelines or direct feed publishing
+  publishUsingPipelines: false
+
+  # Optional: whether the build's artifacts will be published using release pipelines or direct feed publishing
+  publishAssetsImmediately: false
+
+  artifactsPublishingAdditionalParameters: ''
+
+  signingValidationAdditionalParameters: ''
+
+jobs:
+- job: Asset_Registry_Publish
+
+  dependsOn: ${{ parameters.dependsOn }}
+  timeoutInMinutes: 150
+
+  ${{ if eq(parameters.publishAssetsImmediately, 'true') }}:
+    displayName: Publish Assets
+  ${{ else }}:
+    displayName: Publish to Build Asset Registry
+
+  variables:
+  - template: /eng/common/templates-official/variables/pool-providers.yml
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - group: Publish-Build-Assets
+    - group: AzureDevOps-Artifact-Feeds-Pats
+    - name: runCodesignValidationInjection
+      value: false
+    - ${{ if eq(parameters.publishAssetsImmediately, 'true') }}:
+      - template: /eng/common/templates-official/post-build/common-variables.yml
+
+  pool:
+    # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+    ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+      name: AzurePipelines-EO
+      image: 1ESPT-Windows2022
+      demands: Cmd
+      os: windows
+    # If it's not devdiv, it's dnceng
+    ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+      name: NetCore1ESPool-Publishing-Internal
+      image: windows.vs2019.amd64
+      os: windows
+  steps:
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - task: DownloadBuildArtifacts@0
+      displayName: Download artifact
+      inputs:
+        artifactName: AssetManifests
+        downloadPath: '$(Build.StagingDirectory)/Download'
+        checkDownloadedFiles: true
+      condition: ${{ parameters.condition }}
+      continueOnError: ${{ parameters.continueOnError }}
+    
+    - task: NuGetAuthenticate@1
+
+    - task: PowerShell@2
+      displayName: Publish Build Assets
+      inputs:
+        filePath: eng\common\sdk-task.ps1
+        arguments: -task PublishBuildAssets -restore -msbuildEngine dotnet
+          /p:ManifestsPath='$(Build.StagingDirectory)/Download/AssetManifests'
+          /p:BuildAssetRegistryToken=$(MaestroAccessToken)
+          /p:MaestroApiEndpoint=https://maestro-prod.westus2.cloudapp.azure.com
+          /p:PublishUsingPipelines=${{ parameters.publishUsingPipelines }}
+          /p:OfficialBuildId=$(Build.BuildNumber)
+      condition: ${{ parameters.condition }}
+      continueOnError: ${{ parameters.continueOnError }}
+    
+    - task: powershell@2
+      displayName: Create ReleaseConfigs Artifact
+      inputs:
+        targetType: inline
+        script: |
+          New-Item -Path "$(Build.StagingDirectory)/ReleaseConfigs" -ItemType Directory -Force
+          $filePath = "$(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt"
+          Add-Content -Path $filePath -Value $(BARBuildId)
+          Add-Content -Path $filePath -Value "$(DefaultChannels)"
+          Add-Content -Path $filePath -Value $(IsStableBuild)
+    
+    - task: 1ES.PublishBuildArtifacts@1
+      displayName: Publish ReleaseConfigs Artifact
+      inputs:
+        PathtoPublish: '$(Build.StagingDirectory)/ReleaseConfigs'
+        PublishLocation: Container
+        ArtifactName: ReleaseConfigs
+
+    - task: powershell@2
+      displayName: Check if SymbolPublishingExclusionsFile.txt exists
+      inputs:
+        targetType: inline
+        script: |
+          $symbolExclusionfile = "$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt"
+          if(Test-Path -Path $symbolExclusionfile)
+          {
+            Write-Host "SymbolExclusionFile exists"
+            Write-Host "##vso[task.setvariable variable=SymbolExclusionFile]true"
+          }
+          else{
+           Write-Host "Symbols Exclusion file does not exists"
+           Write-Host "##vso[task.setvariable variable=SymbolExclusionFile]false"
+          }
+
+    - task: 1ES.PublishBuildArtifacts@1
+      displayName: Publish SymbolPublishingExclusionsFile Artifact
+      condition: eq(variables['SymbolExclusionFile'], 'true') 
+      inputs:
+        PathtoPublish: '$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
+        PublishLocation: Container
+        ArtifactName: ReleaseConfigs
+
+    - ${{ if eq(parameters.publishAssetsImmediately, 'true') }}:
+      - template: /eng/common/templates-official/post-build/setup-maestro-vars.yml
+        parameters:
+          BARBuildId: ${{ parameters.BARBuildId }}
+          PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
+      - task: PowerShell@2
+        displayName: Publish Using Darc
+        inputs:
+          filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
+          arguments: -BuildId $(BARBuildId) 
+            -PublishingInfraVersion 3
+            -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
+            -MaestroToken '$(MaestroApiAccessToken)'
+            -WaitPublishingFinish true
+            -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
+            -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
+
+    - ${{ if eq(parameters.enablePublishBuildArtifacts, 'true') }}:
+      - template: /eng/common/templates-official/steps/publish-logs.yml
+        parameters:
+          JobLabel: 'Publish_Artifacts_Logs'     
diff --git a/eng/common/templates-official/job/source-build.yml b/eng/common/templates-official/job/source-build.yml
new file mode 100644
index 00000000000..f193dfbe236
--- /dev/null
+++ b/eng/common/templates-official/job/source-build.yml
@@ -0,0 +1,67 @@
+parameters:
+  # This template adds arcade-powered source-build to CI. The template produces a server job with a
+  # default ID 'Source_Build_Complete' to put in a dependency list if necessary.
+
+  # Specifies the prefix for source-build jobs added to pipeline. Use this if disambiguation needed.
+  jobNamePrefix: 'Source_Build'
+
+  # Defines the platform on which to run the job. By default, a linux-x64 machine, suitable for
+  # managed-only repositories. This is an object with these properties:
+  #
+  # name: ''
+  #   The name of the job. This is included in the job ID.
+  # targetRID: ''
+  #   The name of the target RID to use, instead of the one auto-detected by Arcade.
+  # nonPortable: false
+  #   Enables non-portable mode. This means a more specific RID (e.g. fedora.32-x64 rather than
+  #   linux-x64), and compiling against distro-provided packages rather than portable ones.
+  # skipPublishValidation: false
+  #   Disables publishing validation.  By default, a check is performed to ensure no packages are
+  #   published by source-build.
+  # container: ''
+  #   A container to use. Runs in docker.
+  # pool: {}
+  #   A pool to use. Runs directly on an agent.
+  # buildScript: ''
+  #   Specifies the build script to invoke to perform the build in the repo. The default
+  #   './build.sh' should work for typical Arcade repositories, but this is customizable for
+  #   difficult situations.
+  # jobProperties: {}
+  #   A list of job properties to inject at the top level, for potential extensibility beyond
+  #   container and pool.
+  platform: {}
+
+jobs:
+- job: ${{ parameters.jobNamePrefix }}_${{ parameters.platform.name }}
+  displayName: Source-Build (${{ parameters.platform.name }})
+
+  ${{ each property in parameters.platform.jobProperties }}:
+    ${{ property.key }}: ${{ property.value }}
+
+  ${{ if ne(parameters.platform.container, '') }}:
+    container: ${{ parameters.platform.container }}
+
+  ${{ if eq(parameters.platform.pool, '') }}:
+    # The default VM host AzDO pool. This should be capable of running Docker containers: almost all
+    # source-build builds run in Docker, including the default managed platform.
+    # /eng/common/templates-official/variables/pool-providers.yml can't be used here (some customers declare variables already), so duplicate its logic
+    pool:
+      ${{ if eq(variables['System.TeamProject'], 'public') }}:
+        name: $[replace(replace(eq(contains(coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranch'], 'refs/heads/main'), 'release'), 'true'), True, 'NetCore-Svc-Public' ), False, 'NetCore-Public')]
+        demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open
+
+      ${{ if eq(variables['System.TeamProject'], 'internal') }}:
+        name: $[replace(replace(eq(contains(coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranch'], 'refs/heads/main'), 'release'), 'true'), True, 'NetCore1ESPool-Svc-Internal'), False, 'NetCore1ESPool-Internal')]
+        image: 1es-mariner-2
+        os: linux
+
+  ${{ if ne(parameters.platform.pool, '') }}:
+    pool: ${{ parameters.platform.pool }}
+
+  workspace:
+    clean: all
+
+  steps:
+  - template: /eng/common/templates-official/steps/source-build.yml
+    parameters:
+      platform: ${{ parameters.platform }}
diff --git a/eng/common/templates-official/job/source-index-stage1.yml b/eng/common/templates-official/job/source-index-stage1.yml
new file mode 100644
index 00000000000..f0513aee5b0
--- /dev/null
+++ b/eng/common/templates-official/job/source-index-stage1.yml
@@ -0,0 +1,68 @@
+parameters:
+  runAsPublic: false
+  sourceIndexPackageVersion: 1.0.1-20230228.2
+  sourceIndexPackageSource: https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json
+  sourceIndexBuildCommand: powershell -NoLogo -NoProfile -ExecutionPolicy Bypass -Command "eng/common/build.ps1 -restore -build -binarylog -ci"
+  preSteps: []
+  binlogPath: artifacts/log/Debug/Build.binlog
+  condition: ''
+  dependsOn: ''
+  pool: ''
+
+jobs:
+- job: SourceIndexStage1
+  dependsOn: ${{ parameters.dependsOn }}
+  condition: ${{ parameters.condition }}
+  variables:
+  - name: SourceIndexPackageVersion
+    value: ${{ parameters.sourceIndexPackageVersion }}
+  - name: SourceIndexPackageSource
+    value: ${{ parameters.sourceIndexPackageSource }}
+  - name: BinlogPath
+    value: ${{ parameters.binlogPath }}
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - group: source-dot-net stage1 variables
+  - template: /eng/common/templates-official/variables/pool-providers.yml
+
+  ${{ if ne(parameters.pool, '') }}:
+    pool: ${{ parameters.pool }}
+  ${{ if eq(parameters.pool, '') }}:
+    pool:
+      ${{ if eq(variables['System.TeamProject'], 'public') }}:
+        name: $(DncEngPublicBuildPool)
+        demands: ImageOverride -equals windows.vs2019.amd64.open
+      ${{ if eq(variables['System.TeamProject'], 'internal') }}:
+        name: $(DncEngInternalBuildPool)
+        image: windows.vs2022.amd64
+        os: windows
+
+  steps:
+  - ${{ each preStep in parameters.preSteps }}:
+    - ${{ preStep }}
+
+  - task: UseDotNet@2
+    displayName: Use .NET Core SDK 6
+    inputs:
+      packageType: sdk
+      version: 6.0.x
+      installationPath: $(Agent.TempDirectory)/dotnet
+      workingDirectory: $(Agent.TempDirectory)
+
+  - script: |
+      $(Agent.TempDirectory)/dotnet/dotnet tool install BinLogToSln --version $(SourceIndexPackageVersion) --add-source $(SourceIndexPackageSource) --tool-path $(Agent.TempDirectory)/.source-index/tools
+      $(Agent.TempDirectory)/dotnet/dotnet tool install UploadIndexStage1 --version $(SourceIndexPackageVersion) --add-source $(SourceIndexPackageSource) --tool-path $(Agent.TempDirectory)/.source-index/tools
+    displayName: Download Tools
+    # Set working directory to temp directory so 'dotnet' doesn't try to use global.json and use the repo's sdk.
+    workingDirectory: $(Agent.TempDirectory)
+
+  - script: ${{ parameters.sourceIndexBuildCommand }}
+    displayName: Build Repository
+
+  - script: $(Agent.TempDirectory)/.source-index/tools/BinLogToSln -i $(BinlogPath) -r $(Build.SourcesDirectory) -n $(Build.Repository.Name) -o .source-index/stage1output
+    displayName: Process Binlog into indexable sln
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - script: $(Agent.TempDirectory)/.source-index/tools/UploadIndexStage1 -i .source-index/stage1output -n $(Build.Repository.Name)
+      displayName: Upload stage1 artifacts to source index
+      env:
+        BLOB_CONTAINER_URL: $(source-dot-net-stage1-blob-container-url)
diff --git a/eng/common/templates-official/jobs/codeql-build.yml b/eng/common/templates-official/jobs/codeql-build.yml
new file mode 100644
index 00000000000..b68d3c2f319
--- /dev/null
+++ b/eng/common/templates-official/jobs/codeql-build.yml
@@ -0,0 +1,31 @@
+parameters:
+  # See schema documentation in /Documentation/AzureDevOps/TemplateSchema.md
+  continueOnError: false
+  # Required: A collection of jobs to run - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#job
+  jobs: []
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+
+jobs:
+- template: /eng/common/templates-official/jobs/jobs.yml
+  parameters:
+    enableMicrobuild: false
+    enablePublishBuildArtifacts: false
+    enablePublishTestResults: false
+    enablePublishBuildAssets: false
+    enablePublishUsingPipelines: false
+    enableTelemetry: true
+
+    variables:
+      - group: Publish-Build-Assets
+      # The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+      # sync with the packages.config file.
+      - name: DefaultGuardianVersion
+        value: 0.109.0
+      - name: GuardianPackagesConfigFile
+        value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
+      - name: GuardianVersion
+        value: ${{ coalesce(parameters.overrideGuardianVersion, '$(DefaultGuardianVersion)') }}
+  
+    jobs: ${{ parameters.jobs }}
+        
diff --git a/eng/common/templates-official/jobs/jobs.yml b/eng/common/templates-official/jobs/jobs.yml
new file mode 100644
index 00000000000..857a0f8ba43
--- /dev/null
+++ b/eng/common/templates-official/jobs/jobs.yml
@@ -0,0 +1,97 @@
+parameters:
+  # See schema documentation in /Documentation/AzureDevOps/TemplateSchema.md
+  continueOnError: false
+
+  # Optional: Include PublishBuildArtifacts task
+  enablePublishBuildArtifacts: false
+
+  # Optional: Enable publishing using release pipelines
+  enablePublishUsingPipelines: false
+
+  # Optional: Enable running the source-build jobs to build repo from source
+  enableSourceBuild: false
+
+  # Optional: Parameters for source-build template.
+  #           See /eng/common/templates-official/jobs/source-build.yml for options
+  sourceBuildParameters: []
+
+  graphFileGeneration:
+    # Optional: Enable generating the graph files at the end of the build
+    enabled: false
+    # Optional: Include toolset dependencies in the generated graph files
+    includeToolset: false
+    
+  # Required: A collection of jobs to run - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#job
+  jobs: []
+
+  # Optional: Override automatically derived dependsOn value for "publish build assets" job
+  publishBuildAssetsDependsOn: ''
+
+  # Optional: Publish the assets as soon as the publish to BAR stage is complete, rather doing so in a separate stage.
+  publishAssetsImmediately: false
+
+  # Optional: If using publishAssetsImmediately and additional parameters are needed, can be used to send along additional parameters (normally sent to post-build.yml)
+  artifactsPublishingAdditionalParameters: ''
+  signingValidationAdditionalParameters: ''
+
+  # Optional: should run as a public build even in the internal project
+  #           if 'true', the build won't run any of the internal only steps, even if it is running in non-public projects.
+  runAsPublic: false
+
+  enableSourceIndex: false
+  sourceIndexParams: {}
+
+# Internal resources (telemetry, microbuild) can only be accessed from non-public projects,
+# and some (Microbuild) should only be applied to non-PR cases for internal builds.
+
+jobs:
+- ${{ each job in parameters.jobs }}:
+  - template: ../job/job.yml
+    parameters: 
+      # pass along parameters
+      ${{ each parameter in parameters }}:
+        ${{ if ne(parameter.key, 'jobs') }}:
+          ${{ parameter.key }}: ${{ parameter.value }}
+
+      # pass along job properties
+      ${{ each property in job }}:
+        ${{ if ne(property.key, 'job') }}:
+          ${{ property.key }}: ${{ property.value }}
+
+      name: ${{ job.job }}
+
+- ${{ if eq(parameters.enableSourceBuild, true) }}:
+  - template: /eng/common/templates-official/jobs/source-build.yml
+    parameters:
+      allCompletedJobId: Source_Build_Complete
+      ${{ each parameter in parameters.sourceBuildParameters }}:
+        ${{ parameter.key }}: ${{ parameter.value }}
+
+- ${{ if eq(parameters.enableSourceIndex, 'true') }}:
+  - template: ../job/source-index-stage1.yml
+    parameters:
+      runAsPublic: ${{ parameters.runAsPublic }}
+      ${{ each parameter in parameters.sourceIndexParams }}:
+        ${{ parameter.key }}: ${{ parameter.value }}
+
+- ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+  - ${{ if or(eq(parameters.enablePublishBuildAssets, true), eq(parameters.artifacts.publish.manifests, 'true'), ne(parameters.artifacts.publish.manifests, '')) }}:
+    - template: ../job/publish-build-assets.yml
+      parameters:
+        continueOnError: ${{ parameters.continueOnError }}
+        dependsOn:
+        - ${{ if ne(parameters.publishBuildAssetsDependsOn, '') }}:
+          - ${{ each job in parameters.publishBuildAssetsDependsOn }}:
+            - ${{ job.job }}
+        - ${{ if eq(parameters.publishBuildAssetsDependsOn, '') }}:
+          - ${{ each job in parameters.jobs }}:
+            - ${{ job.job }}
+        - ${{ if eq(parameters.enableSourceBuild, true) }}:
+          - Source_Build_Complete
+
+        runAsPublic: ${{ parameters.runAsPublic }}
+        publishUsingPipelines: ${{ parameters.enablePublishUsingPipelines }}
+        publishAssetsImmediately: ${{ parameters.publishAssetsImmediately }}
+        enablePublishBuildArtifacts: ${{ parameters.enablePublishBuildArtifacts }}
+        artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
+        signingValidationAdditionalParameters: ${{ parameters.signingValidationAdditionalParameters }}
diff --git a/eng/common/templates-official/jobs/source-build.yml b/eng/common/templates-official/jobs/source-build.yml
new file mode 100644
index 00000000000..08e5db9bb11
--- /dev/null
+++ b/eng/common/templates-official/jobs/source-build.yml
@@ -0,0 +1,46 @@
+parameters:
+  # This template adds arcade-powered source-build to CI. A job is created for each platform, as
+  # well as an optional server job that completes when all platform jobs complete.
+
+  # The name of the "join" job for all source-build platforms. If set to empty string, the job is
+  # not included. Existing repo pipelines can use this job depend on all source-build jobs
+  # completing without maintaining a separate list of every single job ID: just depend on this one
+  # server job. By default, not included. Recommended name if used: 'Source_Build_Complete'.
+  allCompletedJobId: ''
+
+  # See /eng/common/templates-official/job/source-build.yml
+  jobNamePrefix: 'Source_Build'
+
+  # This is the default platform provided by Arcade, intended for use by a managed-only repo.
+  defaultManagedPlatform:
+    name: 'Managed'
+    container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-stream8'
+
+  # Defines the platforms on which to run build jobs. One job is created for each platform, and the
+  # object in this array is sent to the job template as 'platform'. If no platforms are specified,
+  # one job runs on 'defaultManagedPlatform'.
+  platforms: []
+
+jobs:
+
+- ${{ if ne(parameters.allCompletedJobId, '') }}:
+  - job: ${{ parameters.allCompletedJobId }}
+    displayName: Source-Build Complete
+    pool: server
+    dependsOn:
+    - ${{ each platform in parameters.platforms }}:
+      - ${{ parameters.jobNamePrefix }}_${{ platform.name }}
+    - ${{ if eq(length(parameters.platforms), 0) }}:
+      - ${{ parameters.jobNamePrefix }}_${{ parameters.defaultManagedPlatform.name }}
+
+- ${{ each platform in parameters.platforms }}:
+  - template: /eng/common/templates-official/job/source-build.yml
+    parameters:
+      jobNamePrefix: ${{ parameters.jobNamePrefix }}
+      platform: ${{ platform }}
+
+- ${{ if eq(length(parameters.platforms), 0) }}:
+  - template: /eng/common/templates-official/job/source-build.yml
+    parameters:
+      jobNamePrefix: ${{ parameters.jobNamePrefix }}
+      platform: ${{ parameters.defaultManagedPlatform }}
diff --git a/eng/common/templates-official/post-build/common-variables.yml b/eng/common/templates-official/post-build/common-variables.yml
new file mode 100644
index 00000000000..c24193acfc9
--- /dev/null
+++ b/eng/common/templates-official/post-build/common-variables.yml
@@ -0,0 +1,22 @@
+variables:
+  - group: Publish-Build-Assets
+
+  # Whether the build is internal or not
+  - name: IsInternalBuild
+    value: ${{ and(ne(variables['System.TeamProject'], 'public'), contains(variables['Build.SourceBranch'], 'internal')) }}
+
+  # Default Maestro++ API Endpoint and API Version
+  - name: MaestroApiEndPoint
+    value: "https://maestro-prod.westus2.cloudapp.azure.com"
+  - name: MaestroApiAccessToken
+    value: $(MaestroAccessToken)
+  - name: MaestroApiVersion
+    value: "2020-02-20"
+
+  - name: SourceLinkCLIVersion
+    value: 3.0.0
+  - name: SymbolToolVersion
+    value: 1.0.1
+
+  - name: runCodesignValidationInjection
+    value: false
diff --git a/eng/common/templates-official/post-build/post-build.yml b/eng/common/templates-official/post-build/post-build.yml
new file mode 100644
index 00000000000..da1f40958b4
--- /dev/null
+++ b/eng/common/templates-official/post-build/post-build.yml
@@ -0,0 +1,285 @@
+parameters:
+  # Which publishing infra should be used. THIS SHOULD MATCH THE VERSION ON THE BUILD MANIFEST.
+  # Publishing V1 is no longer supported
+  # Publishing V2 is no longer supported
+  # Publishing V3 is the default
+  - name: publishingInfraVersion
+    displayName: Which version of publishing should be used to promote the build definition?
+    type: number
+    default: 3
+    values:
+    - 3
+
+  - name: BARBuildId
+    displayName: BAR Build Id
+    type: number
+    default: 0
+
+  - name: PromoteToChannelIds
+    displayName: Channel to promote BARBuildId to
+    type: string
+    default: ''
+
+  - name: enableSourceLinkValidation
+    displayName: Enable SourceLink validation
+    type: boolean
+    default: false
+
+  - name: enableSigningValidation
+    displayName: Enable signing validation
+    type: boolean
+    default: true
+
+  - name: enableSymbolValidation
+    displayName: Enable symbol validation
+    type: boolean
+    default: false
+
+  - name: enableNugetValidation
+    displayName: Enable NuGet validation
+    type: boolean
+    default: true
+    
+  - name: publishInstallersAndChecksums
+    displayName: Publish installers and checksums
+    type: boolean
+    default: true
+
+  - name: SDLValidationParameters
+    type: object
+    default:
+      enable: false
+      publishGdn: false
+      continueOnError: false
+      params: ''
+      artifactNames: ''
+      downloadArtifacts: true
+
+  # These parameters let the user customize the call to sdk-task.ps1 for publishing
+  # symbols & general artifacts as well as for signing validation
+  - name: symbolPublishingAdditionalParameters
+    displayName: Symbol publishing additional parameters
+    type: string
+    default: ''
+
+  - name: artifactsPublishingAdditionalParameters
+    displayName: Artifact publishing additional parameters
+    type: string
+    default: ''
+
+  - name: signingValidationAdditionalParameters
+    displayName: Signing validation additional parameters
+    type: string
+    default: ''
+
+  # Which stages should finish execution before post-build stages start
+  - name: validateDependsOn
+    type: object
+    default:
+    - build
+
+  - name: publishDependsOn
+    type: object
+    default:
+    - Validate
+
+  # Optional: Call asset publishing rather than running in a separate stage
+  - name: publishAssetsImmediately
+    type: boolean
+    default: false
+
+stages:
+- ${{ if or(eq( parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
+  - stage: Validate
+    dependsOn: ${{ parameters.validateDependsOn }}
+    displayName: Validate Build Assets
+    variables:
+      - template: common-variables.yml
+      - template: /eng/common/templates-official/variables/pool-providers.yml
+    jobs:
+    - job:
+      displayName: NuGet Validation
+      condition: and(succeededOrFailed(), eq( ${{ parameters.enableNugetValidation }}, 'true'))
+      pool:
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: AzurePipelines-EO
+          image: 1ESPT-Windows2022
+          demands: Cmd
+          os: windows
+        # If it's not devdiv, it's dnceng
+        ${{ else }}:
+          name: $(DncEngInternalBuildPool)
+          image: 1es-windows-2022
+          os: windows
+
+      steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
+        - task: DownloadBuildArtifacts@0
+          displayName: Download Package Artifacts
+          inputs:
+            buildType: specific
+            buildVersionToDownload: specific
+            project: $(AzDOProjectName)
+            pipeline: $(AzDOPipelineId)
+            buildId: $(AzDOBuildId)
+            artifactName: PackageArtifacts
+            checkDownloadedFiles: true
+
+        - task: PowerShell@2
+          displayName: Validate
+          inputs:
+            filePath: $(Build.SourcesDirectory)/eng/common/post-build/nuget-validation.ps1
+            arguments: -PackagesPath $(Build.ArtifactStagingDirectory)/PackageArtifacts/ 
+              -ToolDestinationPath $(Agent.BuildDirectory)/Extract/ 
+
+    - job:
+      displayName: Signing Validation
+      condition: and( eq( ${{ parameters.enableSigningValidation }}, 'true'), ne( variables['PostBuildSign'], 'true'))
+      pool:
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: AzurePipelines-EO
+          image: 1ESPT-Windows2022
+          demands: Cmd
+          os: windows
+        # If it's not devdiv, it's dnceng
+        ${{ else }}:
+          name: $(DncEngInternalBuildPool)
+          image: 1es-windows-2022
+          os: windows
+      steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
+        - task: DownloadBuildArtifacts@0
+          displayName: Download Package Artifacts
+          inputs:
+            buildType: specific
+            buildVersionToDownload: specific
+            project: $(AzDOProjectName)
+            pipeline: $(AzDOPipelineId)
+            buildId: $(AzDOBuildId)
+            artifactName: PackageArtifacts
+            checkDownloadedFiles: true
+            itemPattern: |
+              **
+              !**/Microsoft.SourceBuild.Intermediate.*.nupkg
+
+        # This is necessary whenever we want to publish/restore to an AzDO private feed
+        # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
+        # otherwise it'll complain about accessing a private feed.
+        - task: NuGetAuthenticate@1
+          displayName: 'Authenticate to AzDO Feeds'
+
+        # Signing validation will optionally work with the buildmanifest file which is downloaded from
+        # Azure DevOps above.
+        - task: PowerShell@2
+          displayName: Validate
+          inputs:
+            filePath: eng\common\sdk-task.ps1
+            arguments: -task SigningValidation -restore -msbuildEngine vs
+              /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts'
+              /p:SignCheckExclusionsFile='$(Build.SourcesDirectory)/eng/SignCheckExclusionsFile.txt'
+              ${{ parameters.signingValidationAdditionalParameters }}
+
+        - template: ../steps/publish-logs.yml
+          parameters:
+            StageLabel: 'Validation'
+            JobLabel: 'Signing'
+            BinlogToolVersion: $(BinlogToolVersion)
+
+    - job:
+      displayName: SourceLink Validation
+      condition: eq( ${{ parameters.enableSourceLinkValidation }}, 'true')
+      pool:
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: AzurePipelines-EO
+          image: 1ESPT-Windows2022
+          demands: Cmd
+          os: windows
+        # If it's not devdiv, it's dnceng
+        ${{ else }}:
+          name: $(DncEngInternalBuildPool)
+          image: 1es-windows-2022
+          os: windows
+      steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
+        - task: DownloadBuildArtifacts@0
+          displayName: Download Blob Artifacts
+          inputs:
+            buildType: specific
+            buildVersionToDownload: specific
+            project: $(AzDOProjectName)
+            pipeline: $(AzDOPipelineId)
+            buildId: $(AzDOBuildId)
+            artifactName: BlobArtifacts
+            checkDownloadedFiles: true
+
+        - task: PowerShell@2
+          displayName: Validate
+          inputs:
+            filePath: $(Build.SourcesDirectory)/eng/common/post-build/sourcelink-validation.ps1
+            arguments: -InputPath $(Build.ArtifactStagingDirectory)/BlobArtifacts/ 
+              -ExtractPath $(Agent.BuildDirectory)/Extract/ 
+              -GHRepoName $(Build.Repository.Name) 
+              -GHCommit $(Build.SourceVersion)
+              -SourcelinkCliVersion $(SourceLinkCLIVersion)
+          continueOnError: true
+
+- ${{ if ne(parameters.publishAssetsImmediately, 'true') }}:
+  - stage: publish_using_darc
+    ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
+      dependsOn: ${{ parameters.publishDependsOn }}
+    ${{ else }}:
+      dependsOn: ${{ parameters.validateDependsOn }}
+    displayName: Publish using Darc
+    variables:
+      - template: common-variables.yml
+      - template: /eng/common/templates-official/variables/pool-providers.yml
+    jobs:
+    - job:
+      displayName: Publish Using Darc
+      timeoutInMinutes: 120
+      pool:
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: AzurePipelines-EO
+          image: 1ESPT-Windows2022
+          demands: Cmd
+          os: windows
+        # If it's not devdiv, it's dnceng
+        ${{ else }}:
+          name: NetCore1ESPool-Publishing-Internal
+          image: windows.vs2019.amd64
+          os: windows
+      steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
+        - task: NuGetAuthenticate@1
+
+        - task: PowerShell@2
+          displayName: Publish Using Darc
+          inputs:
+            filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
+            arguments: -BuildId $(BARBuildId) 
+              -PublishingInfraVersion ${{ parameters.publishingInfraVersion }}
+              -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
+              -MaestroToken '$(MaestroApiAccessToken)'
+              -WaitPublishingFinish true
+              -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
+              -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
diff --git a/eng/common/templates-official/post-build/setup-maestro-vars.yml b/eng/common/templates-official/post-build/setup-maestro-vars.yml
new file mode 100644
index 00000000000..0c87f149a4a
--- /dev/null
+++ b/eng/common/templates-official/post-build/setup-maestro-vars.yml
@@ -0,0 +1,70 @@
+parameters:
+  BARBuildId: ''
+  PromoteToChannelIds: ''
+
+steps:
+  - ${{ if eq(coalesce(parameters.PromoteToChannelIds, 0), 0) }}:
+    - task: DownloadBuildArtifacts@0
+      displayName: Download Release Configs
+      inputs:
+        buildType: current
+        artifactName: ReleaseConfigs
+        checkDownloadedFiles: true
+
+  - task: PowerShell@2
+    name: setReleaseVars
+    displayName: Set Release Configs Vars
+    inputs:
+      targetType: inline
+      pwsh: true
+      script: |
+        try {
+          if (!$Env:PromoteToMaestroChannels -or $Env:PromoteToMaestroChannels.Trim() -eq '') {
+            $Content = Get-Content $(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt
+
+            $BarId = $Content | Select -Index 0
+            $Channels = $Content | Select -Index 1             
+            $IsStableBuild = $Content | Select -Index 2
+
+            $AzureDevOpsProject = $Env:System_TeamProject
+            $AzureDevOpsBuildDefinitionId = $Env:System_DefinitionId
+            $AzureDevOpsBuildId = $Env:Build_BuildId
+          }
+          else {
+            $buildApiEndpoint = "${Env:MaestroApiEndPoint}/api/builds/${Env:BARBuildId}?api-version=${Env:MaestroApiVersion}"
+
+            $apiHeaders = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
+            $apiHeaders.Add('Accept', 'application/json')
+            $apiHeaders.Add('Authorization',"Bearer ${Env:MAESTRO_API_TOKEN}")
+
+            $buildInfo = try { Invoke-WebRequest -Method Get -Uri $buildApiEndpoint -Headers $apiHeaders | ConvertFrom-Json } catch { Write-Host "Error: $_" }
+            
+            $BarId = $Env:BARBuildId
+            $Channels = $Env:PromoteToMaestroChannels -split ","
+            $Channels = $Channels -join "]["
+            $Channels = "[$Channels]"
+
+            $IsStableBuild = $buildInfo.stable
+            $AzureDevOpsProject = $buildInfo.azureDevOpsProject
+            $AzureDevOpsBuildDefinitionId = $buildInfo.azureDevOpsBuildDefinitionId
+            $AzureDevOpsBuildId = $buildInfo.azureDevOpsBuildId
+          }
+
+          Write-Host "##vso[task.setvariable variable=BARBuildId]$BarId"
+          Write-Host "##vso[task.setvariable variable=TargetChannels]$Channels"
+          Write-Host "##vso[task.setvariable variable=IsStableBuild]$IsStableBuild"
+
+          Write-Host "##vso[task.setvariable variable=AzDOProjectName]$AzureDevOpsProject"
+          Write-Host "##vso[task.setvariable variable=AzDOPipelineId]$AzureDevOpsBuildDefinitionId"
+          Write-Host "##vso[task.setvariable variable=AzDOBuildId]$AzureDevOpsBuildId"
+        }
+        catch {
+          Write-Host $_
+          Write-Host $_.Exception
+          Write-Host $_.ScriptStackTrace
+          exit 1
+        }
+    env:
+      MAESTRO_API_TOKEN: $(MaestroApiAccessToken)
+      BARBuildId: ${{ parameters.BARBuildId }}
+      PromoteToMaestroChannels: ${{ parameters.PromoteToChannelIds }}
diff --git a/eng/common/templates-official/post-build/trigger-subscription.yml b/eng/common/templates-official/post-build/trigger-subscription.yml
new file mode 100644
index 00000000000..da669030daf
--- /dev/null
+++ b/eng/common/templates-official/post-build/trigger-subscription.yml
@@ -0,0 +1,13 @@
+parameters:
+  ChannelId: 0
+
+steps:
+- task: PowerShell@2
+  displayName: Triggering subscriptions
+  inputs:
+    filePath: $(Build.SourcesDirectory)/eng/common/post-build/trigger-subscriptions.ps1
+    arguments: -SourceRepo $(Build.Repository.Uri)
+      -ChannelId ${{ parameters.ChannelId }}
+      -MaestroApiAccessToken $(MaestroAccessToken)
+      -MaestroApiEndPoint $(MaestroApiEndPoint)
+      -MaestroApiVersion $(MaestroApiVersion)
diff --git a/eng/common/templates-official/steps/add-build-to-channel.yml b/eng/common/templates-official/steps/add-build-to-channel.yml
new file mode 100644
index 00000000000..f67a210d62f
--- /dev/null
+++ b/eng/common/templates-official/steps/add-build-to-channel.yml
@@ -0,0 +1,13 @@
+parameters:
+  ChannelId: 0
+
+steps:
+- task: PowerShell@2
+  displayName: Add Build to Channel
+  inputs:
+    filePath: $(Build.SourcesDirectory)/eng/common/post-build/add-build-to-channel.ps1
+    arguments: -BuildId $(BARBuildId) 
+      -ChannelId ${{ parameters.ChannelId }}
+      -MaestroApiAccessToken $(MaestroApiAccessToken)
+      -MaestroApiEndPoint $(MaestroApiEndPoint)
+      -MaestroApiVersion $(MaestroApiVersion) 
diff --git a/eng/common/templates-official/steps/build-reason.yml b/eng/common/templates-official/steps/build-reason.yml
new file mode 100644
index 00000000000..eba58109b52
--- /dev/null
+++ b/eng/common/templates-official/steps/build-reason.yml
@@ -0,0 +1,12 @@
+# build-reason.yml
+# Description: runs steps if build.reason condition is valid.  conditions is a string of valid build reasons 
+# to include steps (',' separated).
+parameters:
+  conditions: ''
+  steps: []
+
+steps:
+  - ${{ if and( not(startsWith(parameters.conditions, 'not')), contains(parameters.conditions, variables['build.reason'])) }}:
+    - ${{ parameters.steps }}
+  - ${{ if and( startsWith(parameters.conditions, 'not'), not(contains(parameters.conditions, variables['build.reason']))) }}:
+    - ${{ parameters.steps }}
diff --git a/eng/common/templates-official/steps/component-governance.yml b/eng/common/templates-official/steps/component-governance.yml
new file mode 100644
index 00000000000..cbba0596709
--- /dev/null
+++ b/eng/common/templates-official/steps/component-governance.yml
@@ -0,0 +1,13 @@
+parameters:
+  disableComponentGovernance: false
+  componentGovernanceIgnoreDirectories: ''
+
+steps:
+- ${{ if eq(parameters.disableComponentGovernance, 'true') }}:
+  - script: echo "##vso[task.setvariable variable=skipComponentGovernanceDetection]true"
+    displayName: Set skipComponentGovernanceDetection variable
+- ${{ if ne(parameters.disableComponentGovernance, 'true') }}:
+  - task: ComponentGovernanceComponentDetection@0
+    continueOnError: true
+    inputs:
+      ignoreDirectories: ${{ parameters.componentGovernanceIgnoreDirectories }}
\ No newline at end of file
diff --git a/eng/common/templates-official/steps/execute-codeql.yml b/eng/common/templates-official/steps/execute-codeql.yml
new file mode 100644
index 00000000000..9b4a5ffa30a
--- /dev/null
+++ b/eng/common/templates-official/steps/execute-codeql.yml
@@ -0,0 +1,32 @@
+parameters:
+  # Language that should be analyzed. Defaults to csharp
+  language: csharp
+  # Build Commands
+  buildCommands: ''
+  overrideParameters: ''                                       # Optional: to override values for parameters.
+  additionalParameters: ''                                     # Optional: parameters that need user specific values eg: '-SourceToolsList @("abc","def") -ArtifactToolsList @("ghi","jkl")'
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+  # Optional: if true, publish the '.gdn' folder as a pipeline artifact. This can help with in-depth
+  # diagnosis of problems with specific tool configurations.
+  publishGuardianDirectoryToPipeline: false
+  # The script to run to execute all SDL tools. Use this if you want to use a script to define SDL
+  # parameters rather than relying on YAML. It may be better to use a local script, because you can
+  # reproduce results locally without piecing together a command based on the YAML.
+  executeAllSdlToolsScript: 'eng/common/sdl/execute-all-sdl-tools.ps1'
+  # There is some sort of bug (has been reported) in Azure DevOps where if this parameter is named
+  # 'continueOnError', the parameter value is not correctly picked up.
+  # This can also be remedied by the caller (post-build.yml) if it does not use a nested parameter
+  # optional: determines whether to continue the build if the step errors;
+  sdlContinueOnError: false
+
+steps:
+- template: /eng/common/templates-official/steps/execute-sdl.yml
+  parameters:
+    overrideGuardianVersion: ${{ parameters.overrideGuardianVersion }}
+    executeAllSdlToolsScript: ${{ parameters.executeAllSdlToolsScript }}
+    overrideParameters: ${{ parameters.overrideParameters }}
+    additionalParameters: '${{ parameters.additionalParameters }}
+      -CodeQLAdditionalRunConfigParams @("BuildCommands < ${{ parameters.buildCommands }}", "Language < ${{ parameters.language }}")'
+    publishGuardianDirectoryToPipeline: ${{ parameters.publishGuardianDirectoryToPipeline }}
+    sdlContinueOnError: ${{ parameters.sdlContinueOnError }}
\ No newline at end of file
diff --git a/eng/common/templates-official/steps/execute-sdl.yml b/eng/common/templates-official/steps/execute-sdl.yml
new file mode 100644
index 00000000000..07426fde05d
--- /dev/null
+++ b/eng/common/templates-official/steps/execute-sdl.yml
@@ -0,0 +1,88 @@
+parameters:
+  overrideGuardianVersion: ''
+  executeAllSdlToolsScript: ''
+  overrideParameters: ''
+  additionalParameters: ''
+  publishGuardianDirectoryToPipeline: false
+  sdlContinueOnError: false
+  condition: ''
+
+steps:
+- task: NuGetAuthenticate@1
+  inputs:
+    nuGetServiceConnections: GuardianConnect
+
+- task: NuGetToolInstaller@1
+  displayName: 'Install NuGet.exe'
+  
+- ${{ if ne(parameters.overrideGuardianVersion, '') }}:
+  - pwsh: |
+      Set-Location -Path $(Build.SourcesDirectory)\eng\common\sdl
+      . .\sdl.ps1
+      $guardianCliLocation = Install-Gdn -Path $(Build.SourcesDirectory)\.artifacts -Version ${{ parameters.overrideGuardianVersion }}
+      Write-Host "##vso[task.setvariable variable=GuardianCliLocation]$guardianCliLocation"
+    displayName: Install Guardian (Overridden)
+
+- ${{ if eq(parameters.overrideGuardianVersion, '') }}:
+  - pwsh: |
+      Set-Location -Path $(Build.SourcesDirectory)\eng\common\sdl
+      . .\sdl.ps1
+      $guardianCliLocation = Install-Gdn -Path $(Build.SourcesDirectory)\.artifacts
+      Write-Host "##vso[task.setvariable variable=GuardianCliLocation]$guardianCliLocation"
+    displayName: Install Guardian
+
+- ${{ if ne(parameters.overrideParameters, '') }}:
+  - powershell: ${{ parameters.executeAllSdlToolsScript }} ${{ parameters.overrideParameters }}
+    displayName: Execute SDL (Overridden)
+    continueOnError: ${{ parameters.sdlContinueOnError }}
+    condition: ${{ parameters.condition }}
+
+- ${{ if eq(parameters.overrideParameters, '') }}:
+  - powershell: ${{ parameters.executeAllSdlToolsScript }}
+      -GuardianCliLocation $(GuardianCliLocation)
+      -NugetPackageDirectory $(Build.SourcesDirectory)\.packages
+      -AzureDevOpsAccessToken $(dn-bot-dotnet-build-rw-code-rw)
+      ${{ parameters.additionalParameters }}
+    displayName: Execute SDL
+    continueOnError: ${{ parameters.sdlContinueOnError }}
+    condition: ${{ parameters.condition }}
+
+- ${{ if ne(parameters.publishGuardianDirectoryToPipeline, 'false') }}:
+  # We want to publish the Guardian results and configuration for easy diagnosis. However, the
+  # '.gdn' dir is a mix of configuration, results, extracted dependencies, and Guardian default
+  # tooling files. Some of these files are large and aren't useful during an investigation, so
+  # exclude them by simply deleting them before publishing. (As of writing, there is no documented
+  # way to selectively exclude a dir from the pipeline artifact publish task.)
+  - task: DeleteFiles@1
+    displayName: Delete Guardian dependencies to avoid uploading
+    inputs:
+      SourceFolder: $(Agent.BuildDirectory)/.gdn
+      Contents: |
+        c
+        i
+    condition: succeededOrFailed()
+
+  - publish: $(Agent.BuildDirectory)/.gdn
+    artifact: GuardianConfiguration
+    displayName: Publish GuardianConfiguration
+    condition: succeededOrFailed()
+
+  # Publish the SARIF files in a container named CodeAnalysisLogs to enable integration
+  # with the "SARIF SAST Scans Tab" Azure DevOps extension
+  - task: CopyFiles@2
+    displayName: Copy SARIF files
+    inputs:
+      flattenFolders: true
+      sourceFolder:  $(Agent.BuildDirectory)/.gdn/rc/
+      contents: '**/*.sarif'
+      targetFolder: $(Build.SourcesDirectory)/CodeAnalysisLogs
+    condition: succeededOrFailed()
+
+  # Use PublishBuildArtifacts because the SARIF extension only checks this case
+  # see microsoft/sarif-azuredevops-extension#4
+  - task: PublishBuildArtifacts@1
+    displayName: Publish SARIF files to CodeAnalysisLogs container
+    inputs:
+      pathToPublish:  $(Build.SourcesDirectory)/CodeAnalysisLogs
+      artifactName: CodeAnalysisLogs
+    condition: succeededOrFailed()
\ No newline at end of file
diff --git a/eng/common/templates-official/steps/generate-sbom.yml b/eng/common/templates-official/steps/generate-sbom.yml
new file mode 100644
index 00000000000..1bf43bf807a
--- /dev/null
+++ b/eng/common/templates-official/steps/generate-sbom.yml
@@ -0,0 +1,48 @@
+# BuildDropPath - The root folder of the drop directory for which the manifest file will be generated.
+# PackageName - The name of the package this SBOM represents.
+# PackageVersion - The version of the package this SBOM represents. 
+# ManifestDirPath - The path of the directory where the generated manifest files will be placed
+# IgnoreDirectories - Directories to ignore for SBOM generation. This will be passed through to the CG component detector.
+
+parameters:
+  PackageVersion: 8.0.0
+  BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
+  PackageName: '.NET'
+  ManifestDirPath: $(Build.ArtifactStagingDirectory)/sbom
+  IgnoreDirectories: ''
+  sbomContinueOnError: true
+
+steps:
+- task: PowerShell@2 
+  displayName: Prep for SBOM generation in (Non-linux)
+  condition: or(eq(variables['Agent.Os'], 'Windows_NT'), eq(variables['Agent.Os'], 'Darwin'))
+  inputs: 
+    filePath: ./eng/common/generate-sbom-prep.ps1
+    arguments: ${{parameters.manifestDirPath}}
+
+# Chmodding is a workaround for https://github.com/dotnet/arcade/issues/8461
+- script: |
+    chmod +x ./eng/common/generate-sbom-prep.sh
+    ./eng/common/generate-sbom-prep.sh ${{parameters.manifestDirPath}}
+  displayName: Prep for SBOM generation in (Linux)
+  condition: eq(variables['Agent.Os'], 'Linux')
+  continueOnError: ${{ parameters.sbomContinueOnError }}
+
+- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
+  displayName: 'Generate SBOM manifest'
+  continueOnError: ${{ parameters.sbomContinueOnError }}
+  inputs:
+      PackageName: ${{ parameters.packageName }}
+      BuildDropPath: ${{ parameters.buildDropPath }}
+      PackageVersion: ${{ parameters.packageVersion }}
+      ManifestDirPath: ${{ parameters.manifestDirPath }}
+      ${{ if ne(parameters.IgnoreDirectories, '') }}:
+        AdditionalComponentDetectorArgs: '--IgnoreDirectories ${{ parameters.IgnoreDirectories }}'
+
+- task: 1ES.PublishPipelineArtifact@1
+  displayName: Publish SBOM manifest
+  continueOnError: ${{parameters.sbomContinueOnError}}
+  inputs:
+    targetPath: '${{parameters.manifestDirPath}}'
+    artifactName: $(ARTIFACT_NAME)
+
diff --git a/eng/common/templates-official/steps/publish-logs.yml b/eng/common/templates-official/steps/publish-logs.yml
new file mode 100644
index 00000000000..04012fed182
--- /dev/null
+++ b/eng/common/templates-official/steps/publish-logs.yml
@@ -0,0 +1,23 @@
+parameters:
+  StageLabel: ''
+  JobLabel: ''
+
+steps:
+- task: Powershell@2
+  displayName: Prepare Binlogs to Upload
+  inputs:
+    targetType: inline
+    script: |
+      New-Item -ItemType Directory $(Build.SourcesDirectory)/PostBuildLogs/${{parameters.StageLabel}}/${{parameters.JobLabel}}/
+      Move-Item -Path $(Build.SourcesDirectory)/artifacts/log/Debug/* $(Build.SourcesDirectory)/PostBuildLogs/${{parameters.StageLabel}}/${{parameters.JobLabel}}/
+  continueOnError: true
+  condition: always()
+
+- task: 1ES.PublishBuildArtifacts@1
+  displayName: Publish Logs
+  inputs:
+    PathtoPublish: '$(Build.SourcesDirectory)/PostBuildLogs'
+    PublishLocation: Container
+    ArtifactName: PostBuildLogs
+  continueOnError: true
+  condition: always()
diff --git a/eng/common/templates-official/steps/retain-build.yml b/eng/common/templates-official/steps/retain-build.yml
new file mode 100644
index 00000000000..83d97a26a01
--- /dev/null
+++ b/eng/common/templates-official/steps/retain-build.yml
@@ -0,0 +1,28 @@
+parameters:
+  # Optional azure devops PAT with build execute permissions for the build's organization,
+  # only needed if the build that should be retained ran on a different organization than 
+  # the pipeline where this template is executing from
+  Token: ''
+  # Optional BuildId to retain, defaults to the current running build
+  BuildId: ''
+  # Azure devops Organization URI for the build in the https://dev.azure.com/<organization> format.
+  # Defaults to the organization the current pipeline is running on
+  AzdoOrgUri: '$(System.CollectionUri)'
+  # Azure devops project for the build. Defaults to the project the current pipeline is running on
+  AzdoProject: '$(System.TeamProject)'
+
+steps:
+  - task: powershell@2
+    inputs:
+      targetType: 'filePath'
+      filePath: eng/common/retain-build.ps1
+      pwsh: true
+      arguments: >
+        -AzdoOrgUri: ${{parameters.AzdoOrgUri}}
+        -AzdoProject ${{parameters.AzdoProject}}
+        -Token ${{coalesce(parameters.Token, '$env:SYSTEM_ACCESSTOKEN') }}
+        -BuildId ${{coalesce(parameters.BuildId, '$env:BUILD_ID')}}
+    displayName: Enable permanent build retention
+    env:
+      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
+      BUILD_ID: $(Build.BuildId)
\ No newline at end of file
diff --git a/eng/common/templates-official/steps/send-to-helix.yml b/eng/common/templates-official/steps/send-to-helix.yml
new file mode 100644
index 00000000000..3eb7e2d5f84
--- /dev/null
+++ b/eng/common/templates-official/steps/send-to-helix.yml
@@ -0,0 +1,91 @@
+# Please remember to update the documentation if you make changes to these parameters!
+parameters:
+  HelixSource: 'pr/default'              # required -- sources must start with pr/, official/, prodcon/, or agent/
+  HelixType: 'tests/default/'            # required -- Helix telemetry which identifies what type of data this is; should include "test" for clarity and must end in '/'
+  HelixBuild: $(Build.BuildNumber)       # required -- the build number Helix will use to identify this -- automatically set to the AzDO build number
+  HelixTargetQueues: ''                  # required -- semicolon-delimited list of Helix queues to test on; see https://helix.dot.net/ for a list of queues
+  HelixAccessToken: ''                   # required -- access token to make Helix API requests; should be provided by the appropriate variable group
+  HelixConfiguration: ''                 # optional -- additional property attached to a job
+  HelixPreCommands: ''                   # optional -- commands to run before Helix work item execution
+  HelixPostCommands: ''                  # optional -- commands to run after Helix work item execution
+  WorkItemDirectory: ''                  # optional -- a payload directory to zip up and send to Helix; requires WorkItemCommand; incompatible with XUnitProjects
+  WorkItemCommand: ''                    # optional -- a command to execute on the payload; requires WorkItemDirectory; incompatible with XUnitProjects
+  WorkItemTimeout: ''                    # optional -- a timeout in TimeSpan.Parse-ready value (e.g. 00:02:00) for the work item command; requires WorkItemDirectory; incompatible with XUnitProjects
+  CorrelationPayloadDirectory: ''        # optional -- a directory to zip up and send to Helix as a correlation payload
+  XUnitProjects: ''                      # optional -- semicolon-delimited list of XUnitProjects to parse and send to Helix; requires XUnitRuntimeTargetFramework, XUnitPublishTargetFramework, XUnitRunnerVersion, and IncludeDotNetCli=true
+  XUnitWorkItemTimeout: ''               # optional -- the workitem timeout in seconds for all workitems created from the xUnit projects specified by XUnitProjects
+  XUnitPublishTargetFramework: ''        # optional -- framework to use to publish your xUnit projects
+  XUnitRuntimeTargetFramework: ''        # optional -- framework to use for the xUnit console runner
+  XUnitRunnerVersion: ''                 # optional -- version of the xUnit nuget package you wish to use on Helix; required for XUnitProjects
+  IncludeDotNetCli: false                # optional -- true will download a version of the .NET CLI onto the Helix machine as a correlation payload; requires DotNetCliPackageType and DotNetCliVersion
+  DotNetCliPackageType: ''               # optional -- either 'sdk', 'runtime' or 'aspnetcore-runtime'; determines whether the sdk or runtime will be sent to Helix; see https://raw.githubusercontent.com/dotnet/core/main/release-notes/releases-index.json
+  DotNetCliVersion: ''                   # optional -- version of the CLI to send to Helix; based on this: https://raw.githubusercontent.com/dotnet/core/main/release-notes/releases-index.json
+  WaitForWorkItemCompletion: true        # optional -- true will make the task wait until work items have been completed and fail the build if work items fail. False is "fire and forget."
+  IsExternal: false                      # [DEPRECATED] -- doesn't do anything, jobs are external if HelixAccessToken is empty and Creator is set
+  HelixBaseUri: 'https://helix.dot.net/' # optional -- sets the Helix API base URI (allows targeting https://helix.int-dot.net )
+  Creator: ''                            # optional -- if the build is external, use this to specify who is sending the job
+  DisplayNamePrefix: 'Run Tests'         # optional -- rename the beginning of the displayName of the steps in AzDO 
+  condition: succeeded()                 # optional -- condition for step to execute; defaults to succeeded()
+  continueOnError: false                 # optional -- determines whether to continue the build if the step errors; defaults to false
+
+steps:
+  - powershell: 'powershell "$env:BUILD_SOURCESDIRECTORY\eng\common\msbuild.ps1 $env:BUILD_SOURCESDIRECTORY\eng\common\helixpublish.proj /restore /p:TreatWarningsAsErrors=false /t:Test /bl:$env:BUILD_SOURCESDIRECTORY\artifacts\log\$env:BuildConfig\SendToHelix.binlog"'
+    displayName: ${{ parameters.DisplayNamePrefix }} (Windows)
+    env:
+      BuildConfig: $(_BuildConfig)
+      HelixSource: ${{ parameters.HelixSource }}
+      HelixType: ${{ parameters.HelixType }}
+      HelixBuild: ${{ parameters.HelixBuild }}
+      HelixConfiguration:  ${{ parameters.HelixConfiguration }}
+      HelixTargetQueues: ${{ parameters.HelixTargetQueues }}
+      HelixAccessToken: ${{ parameters.HelixAccessToken }}
+      HelixPreCommands: ${{ parameters.HelixPreCommands }}
+      HelixPostCommands: ${{ parameters.HelixPostCommands }}
+      WorkItemDirectory: ${{ parameters.WorkItemDirectory }}
+      WorkItemCommand: ${{ parameters.WorkItemCommand }}
+      WorkItemTimeout: ${{ parameters.WorkItemTimeout }}
+      CorrelationPayloadDirectory: ${{ parameters.CorrelationPayloadDirectory }}
+      XUnitProjects: ${{ parameters.XUnitProjects }}
+      XUnitWorkItemTimeout: ${{ parameters.XUnitWorkItemTimeout }}
+      XUnitPublishTargetFramework: ${{ parameters.XUnitPublishTargetFramework }}
+      XUnitRuntimeTargetFramework: ${{ parameters.XUnitRuntimeTargetFramework }}
+      XUnitRunnerVersion: ${{ parameters.XUnitRunnerVersion }}
+      IncludeDotNetCli: ${{ parameters.IncludeDotNetCli }}
+      DotNetCliPackageType: ${{ parameters.DotNetCliPackageType }}
+      DotNetCliVersion: ${{ parameters.DotNetCliVersion }}
+      WaitForWorkItemCompletion: ${{ parameters.WaitForWorkItemCompletion }}
+      HelixBaseUri: ${{ parameters.HelixBaseUri }}
+      Creator: ${{ parameters.Creator }}
+      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
+    condition: and(${{ parameters.condition }}, eq(variables['Agent.Os'], 'Windows_NT'))
+    continueOnError: ${{ parameters.continueOnError }}
+  - script: $BUILD_SOURCESDIRECTORY/eng/common/msbuild.sh $BUILD_SOURCESDIRECTORY/eng/common/helixpublish.proj /restore /p:TreatWarningsAsErrors=false /t:Test /bl:$BUILD_SOURCESDIRECTORY/artifacts/log/$BuildConfig/SendToHelix.binlog
+    displayName: ${{ parameters.DisplayNamePrefix }} (Unix)
+    env:
+      BuildConfig: $(_BuildConfig)
+      HelixSource: ${{ parameters.HelixSource }}
+      HelixType: ${{ parameters.HelixType }}
+      HelixBuild: ${{ parameters.HelixBuild }}
+      HelixConfiguration:  ${{ parameters.HelixConfiguration }}
+      HelixTargetQueues: ${{ parameters.HelixTargetQueues }}
+      HelixAccessToken: ${{ parameters.HelixAccessToken }}
+      HelixPreCommands: ${{ parameters.HelixPreCommands }}
+      HelixPostCommands: ${{ parameters.HelixPostCommands }}
+      WorkItemDirectory: ${{ parameters.WorkItemDirectory }}
+      WorkItemCommand: ${{ parameters.WorkItemCommand }}
+      WorkItemTimeout: ${{ parameters.WorkItemTimeout }}
+      CorrelationPayloadDirectory: ${{ parameters.CorrelationPayloadDirectory }}
+      XUnitProjects: ${{ parameters.XUnitProjects }}
+      XUnitWorkItemTimeout: ${{ parameters.XUnitWorkItemTimeout }}
+      XUnitPublishTargetFramework: ${{ parameters.XUnitPublishTargetFramework }}
+      XUnitRuntimeTargetFramework: ${{ parameters.XUnitRuntimeTargetFramework }}
+      XUnitRunnerVersion: ${{ parameters.XUnitRunnerVersion }}
+      IncludeDotNetCli: ${{ parameters.IncludeDotNetCli }}
+      DotNetCliPackageType: ${{ parameters.DotNetCliPackageType }}
+      DotNetCliVersion: ${{ parameters.DotNetCliVersion }}
+      WaitForWorkItemCompletion: ${{ parameters.WaitForWorkItemCompletion }}
+      HelixBaseUri: ${{ parameters.HelixBaseUri }}
+      Creator: ${{ parameters.Creator }}
+      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
+    condition: and(${{ parameters.condition }}, ne(variables['Agent.Os'], 'Windows_NT'))
+    continueOnError: ${{ parameters.continueOnError }}
diff --git a/eng/common/templates-official/steps/source-build.yml b/eng/common/templates-official/steps/source-build.yml
new file mode 100644
index 00000000000..829f17c34d1
--- /dev/null
+++ b/eng/common/templates-official/steps/source-build.yml
@@ -0,0 +1,129 @@
+parameters:
+  # This template adds arcade-powered source-build to CI.
+
+  # This is a 'steps' template, and is intended for advanced scenarios where the existing build
+  # infra has a careful build methodology that must be followed. For example, a repo
+  # (dotnet/runtime) might choose to clone the GitHub repo only once and store it as a pipeline
+  # artifact for all subsequent jobs to use, to reduce dependence on a strong network connection to
+  # GitHub. Using this steps template leaves room for that infra to be included.
+
+  # Defines the platform on which to run the steps. See 'eng/common/templates-official/job/source-build.yml'
+  # for details. The entire object is described in the 'job' template for simplicity, even though
+  # the usage of the properties on this object is split between the 'job' and 'steps' templates.
+  platform: {}
+
+steps:
+# Build. Keep it self-contained for simple reusability. (No source-build-specific job variables.)
+- script: |
+    set -x
+    df -h
+
+    # If building on the internal project, the artifact feeds variable may be available (usually only if needed)
+    # In that case, call the feed setup script to add internal feeds corresponding to public ones.
+    # In addition, add an msbuild argument to copy the WIP from the repo to the target build location.
+    # This is because SetupNuGetSources.sh will alter the current NuGet.config file, and we need to preserve those
+    # changes.
+    internalRestoreArgs=
+    if [ '$(dn-bot-dnceng-artifact-feeds-rw)' != '$''(dn-bot-dnceng-artifact-feeds-rw)' ]; then
+      # Temporarily work around https://github.com/dotnet/arcade/issues/7709
+      chmod +x $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
+      $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $(dn-bot-dnceng-artifact-feeds-rw)
+      internalRestoreArgs='/p:CopyWipIntoInnerSourceBuildRepo=true'
+
+      # The 'Copy WIP' feature of source build uses git stash to apply changes from the original repo.
+      # This only works if there is a username/email configured, which won't be the case in most CI runs.
+      git config --get user.email
+      if [ $? -ne 0 ]; then
+        git config user.email dn-bot@microsoft.com
+        git config user.name dn-bot
+      fi
+    fi
+
+    # If building on the internal project, the internal storage variable may be available (usually only if needed)
+    # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
+    # in the default public locations.
+    internalRuntimeDownloadArgs=
+    if [ '$(dotnetbuilds-internal-container-read-token-base64)' != '$''(dotnetbuilds-internal-container-read-token-base64)' ]; then
+      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64) --runtimesourcefeed https://dotnetbuilds.blob.core.windows.net/internal --runtimesourcefeedkey $(dotnetbuilds-internal-container-read-token-base64)'
+    fi
+
+    buildConfig=Release
+    # Check if AzDO substitutes in a build config from a variable, and use it if so.
+    if [ '$(_BuildConfig)' != '$''(_BuildConfig)' ]; then
+      buildConfig='$(_BuildConfig)'
+    fi
+
+    officialBuildArgs=
+    if [ '${{ and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}' = 'True' ]; then
+      officialBuildArgs='/p:DotNetPublishUsingPipelines=true /p:OfficialBuildId=$(BUILD.BUILDNUMBER)'
+    fi
+
+    targetRidArgs=
+    if [ '${{ parameters.platform.targetRID }}' != '' ]; then
+      targetRidArgs='/p:TargetRid=${{ parameters.platform.targetRID }}'
+    fi
+
+    runtimeOsArgs=
+    if [ '${{ parameters.platform.runtimeOS }}' != '' ]; then
+      runtimeOsArgs='/p:RuntimeOS=${{ parameters.platform.runtimeOS }}'
+    fi
+
+    baseOsArgs=
+    if [ '${{ parameters.platform.baseOS }}' != '' ]; then
+      baseOsArgs='/p:BaseOS=${{ parameters.platform.baseOS }}'
+    fi
+
+    publishArgs=
+    if [ '${{ parameters.platform.skipPublishValidation }}' != 'true' ]; then
+      publishArgs='--publish'
+    fi
+
+    assetManifestFileName=SourceBuild_RidSpecific.xml
+    if [ '${{ parameters.platform.name }}' != '' ]; then
+      assetManifestFileName=SourceBuild_${{ parameters.platform.name }}.xml
+    fi
+
+    ${{ coalesce(parameters.platform.buildScript, './build.sh') }} --ci \
+      --configuration $buildConfig \
+      --restore --build --pack $publishArgs -bl \
+      $officialBuildArgs \
+      $internalRuntimeDownloadArgs \
+      $internalRestoreArgs \
+      $targetRidArgs \
+      $runtimeOsArgs \
+      $baseOsArgs \
+      /p:SourceBuildNonPortable=${{ parameters.platform.nonPortable }} \
+      /p:ArcadeBuildFromSource=true \
+      /p:AssetManifestFileName=$assetManifestFileName
+  displayName: Build
+
+# Upload build logs for diagnosis.
+- task: CopyFiles@2
+  displayName: Prepare BuildLogs staging directory
+  inputs:
+    SourceFolder: '$(Build.SourcesDirectory)'
+    Contents: |
+      **/*.log
+      **/*.binlog
+      artifacts/source-build/self/prebuilt-report/**
+    TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
+    CleanTargetFolder: true
+  continueOnError: true
+  condition: succeededOrFailed()
+
+- task: 1ES.PublishPipelineArtifact@1
+  displayName: Publish BuildLogs
+  inputs:
+    targetPath: '$(Build.StagingDirectory)/BuildLogs'
+    artifactName: BuildLogs_SourceBuild_${{ parameters.platform.name }}_Attempt$(System.JobAttempt)
+  continueOnError: true
+  condition: succeededOrFailed()
+
+# Manually inject component detection so that we can ignore the source build upstream cache, which contains
+# a nupkg cache of input packages (a local feed).
+# This path must match the upstream cache path in property 'CurrentRepoSourceBuiltNupkgCacheDir'
+# in src\Microsoft.DotNet.Arcade.Sdk\tools\SourceBuild\SourceBuildArcade.targets
+- task: ComponentGovernanceComponentDetection@0
+  displayName: Component Detection (Exclude upstream cache)
+  inputs:
+    ignoreDirectories: '$(Build.SourcesDirectory)/artifacts/source-build/self/src/artifacts/obj/source-built-upstream-cache'
diff --git a/eng/common/templates-official/variables/pool-providers.yml b/eng/common/templates-official/variables/pool-providers.yml
new file mode 100644
index 00000000000..1f308b24efc
--- /dev/null
+++ b/eng/common/templates-official/variables/pool-providers.yml
@@ -0,0 +1,45 @@
+# Select a pool provider based off branch name. Anything with branch name containing 'release' must go into an -Svc pool, 
+# otherwise it should go into the "normal" pools. This separates out the queueing and billing of released branches.
+
+# Motivation: 
+#   Once a given branch of a repository's output has been officially "shipped" once, it is then considered to be COGS
+#   (Cost of goods sold) and should be moved to a servicing pool provider. This allows both separation of queueing
+#   (allowing release builds and main PR builds to not intefere with each other) and billing (required for COGS.
+#   Additionally, the pool provider name itself may be subject to change when the .NET Core Engineering Services 
+#   team needs to move resources around and create new and potentially differently-named pools. Using this template 
+#   file from an Arcade-ified repo helps guard against both having to update one's release/* branches and renaming.
+
+# How to use: 
+#  This yaml assumes your shipped product branches use the naming convention "release/..." (which many do).
+#  If we find alternate naming conventions in broad usage it can be added to the condition below.
+#
+#  First, import the template in an arcade-ified repo to pick up the variables, e.g.:
+#
+#  variables:
+#  - template: /eng/common/templates-official/variables/pool-providers.yml
+#
+#  ... then anywhere specifying the pool provider use the runtime variables,
+#      $(DncEngInternalBuildPool)
+#
+#        pool:
+#           name: $(DncEngInternalBuildPool)
+#           image: 1es-windows-2022
+
+variables:
+  # Coalesce the target and source branches so we know when a PR targets a release branch
+  # If these variables are somehow missing, fall back to main (tends to have more capacity)
+
+  # Any new -Svc alternative pools should have variables added here to allow for splitting work
+
+  - name: DncEngInternalBuildPool
+    value: $[
+        replace(
+          replace(
+            eq(contains(coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranch'], 'refs/heads/main'), 'release'), 'true'),
+            True,
+            'NetCore1ESPool-Svc-Internal'
+          ),
+          False,
+          'NetCore1ESPool-Internal'
+        )
+      ]
\ No newline at end of file
diff --git a/eng/common/templates-official/variables/sdl-variables.yml b/eng/common/templates-official/variables/sdl-variables.yml
new file mode 100644
index 00000000000..dbdd66d4a4b
--- /dev/null
+++ b/eng/common/templates-official/variables/sdl-variables.yml
@@ -0,0 +1,7 @@
+variables:
+# The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+# sync with the packages.config file.
+- name: DefaultGuardianVersion
+  value: 0.109.0
+- name: GuardianPackagesConfigFile
+  value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
\ No newline at end of file
diff --git a/eng/common/templates/job/job.yml b/eng/common/templates/job/job.yml
index e24ca2f46f9..8ec5c4f2d9f 100644
--- a/eng/common/templates/job/job.yml
+++ b/eng/common/templates/job/job.yml
@@ -15,6 +15,7 @@ parameters:
   timeoutInMinutes: ''
   variables: []
   workspace: ''
+  templateContext: ''
 
 # Job base template specific parameters
   # See schema documentation - https://github.com/dotnet/arcade/blob/master/Documentation/AzureDevOps/TemplateSchema.md
@@ -68,6 +69,9 @@ jobs:
   ${{ if ne(parameters.timeoutInMinutes, '') }}:
     timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
 
+  ${{ if ne(parameters.templateContext, '') }}:
+    templateContext: ${{ parameters.templateContext }}
+
   variables:
   - ${{ if ne(parameters.enableTelemetry, 'false') }}:
     - name: DOTNET_CLI_TELEMETRY_PROFILE
diff --git a/eng/common/templates/job/publish-build-assets.yml b/eng/common/templates/job/publish-build-assets.yml
index fa5446c093d..8ec0151def2 100644
--- a/eng/common/templates/job/publish-build-assets.yml
+++ b/eng/common/templates/job/publish-build-assets.yml
@@ -58,7 +58,7 @@ jobs:
       demands: Cmd
     # If it's not devdiv, it's dnceng
     ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
-      name: $(DncEngInternalBuildPool)
+      name: NetCore1ESPool-Publishing-Internal
       demands: ImageOverride -equals windows.vs2019.amd64
 
   steps:
@@ -71,7 +71,7 @@ jobs:
         checkDownloadedFiles: true
       condition: ${{ parameters.condition }}
       continueOnError: ${{ parameters.continueOnError }}
-    
+
     - task: NuGetAuthenticate@1
 
     - task: PowerShell@2
@@ -86,7 +86,7 @@ jobs:
           /p:OfficialBuildId=$(Build.BuildNumber)
       condition: ${{ parameters.condition }}
       continueOnError: ${{ parameters.continueOnError }}
-    
+
     - task: powershell@2
       displayName: Create ReleaseConfigs Artifact
       inputs:
@@ -95,7 +95,7 @@ jobs:
           Add-Content -Path "$(Build.StagingDirectory)/ReleaseConfigs.txt" -Value $(BARBuildId)
           Add-Content -Path "$(Build.StagingDirectory)/ReleaseConfigs.txt" -Value "$(DefaultChannels)"
           Add-Content -Path "$(Build.StagingDirectory)/ReleaseConfigs.txt" -Value $(IsStableBuild)
-    
+
     - task: PublishBuildArtifacts@1
       displayName: Publish ReleaseConfigs Artifact
       inputs:
@@ -121,7 +121,7 @@ jobs:
 
     - task: PublishBuildArtifacts@1
       displayName: Publish SymbolPublishingExclusionsFile Artifact
-      condition: eq(variables['SymbolExclusionFile'], 'true') 
+      condition: eq(variables['SymbolExclusionFile'], 'true')
       inputs:
         PathtoPublish: '$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
         PublishLocation: Container
@@ -137,7 +137,7 @@ jobs:
         displayName: Publish Using Darc
         inputs:
           filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
-          arguments: -BuildId $(BARBuildId) 
+          arguments: -BuildId $(BARBuildId)
             -PublishingInfraVersion 3
             -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
             -MaestroToken '$(MaestroApiAccessToken)'
@@ -148,4 +148,4 @@ jobs:
     - ${{ if eq(parameters.enablePublishBuildArtifacts, 'true') }}:
       - template: /eng/common/templates/steps/publish-logs.yml
         parameters:
-          JobLabel: 'Publish_Artifacts_Logs'     
+          JobLabel: 'Publish_Artifacts_Logs'
diff --git a/eng/common/templates/post-build/post-build.yml b/eng/common/templates/post-build/post-build.yml
index 3f74abf7ce0..aba44a25a33 100644
--- a/eng/common/templates/post-build/post-build.yml
+++ b/eng/common/templates/post-build/post-build.yml
@@ -39,7 +39,7 @@ parameters:
     displayName: Enable NuGet validation
     type: boolean
     default: true
-    
+
   - name: publishInstallersAndChecksums
     displayName: Publish installers and checksums
     type: boolean
@@ -131,8 +131,8 @@ stages:
           displayName: Validate
           inputs:
             filePath: $(Build.SourcesDirectory)/eng/common/post-build/nuget-validation.ps1
-            arguments: -PackagesPath $(Build.ArtifactStagingDirectory)/PackageArtifacts/ 
-              -ToolDestinationPath $(Agent.BuildDirectory)/Extract/ 
+            arguments: -PackagesPath $(Build.ArtifactStagingDirectory)/PackageArtifacts/
+              -ToolDestinationPath $(Agent.BuildDirectory)/Extract/
 
     - job:
       displayName: Signing Validation
@@ -221,9 +221,9 @@ stages:
           displayName: Validate
           inputs:
             filePath: $(Build.SourcesDirectory)/eng/common/post-build/sourcelink-validation.ps1
-            arguments: -InputPath $(Build.ArtifactStagingDirectory)/BlobArtifacts/ 
-              -ExtractPath $(Agent.BuildDirectory)/Extract/ 
-              -GHRepoName $(Build.Repository.Name) 
+            arguments: -InputPath $(Build.ArtifactStagingDirectory)/BlobArtifacts/
+              -ExtractPath $(Agent.BuildDirectory)/Extract/
+              -GHRepoName $(Build.Repository.Name)
               -GHCommit $(Build.SourceVersion)
               -SourcelinkCliVersion $(SourceLinkCLIVersion)
           continueOnError: true
@@ -258,7 +258,7 @@ stages:
           demands: Cmd
         # If it's not devdiv, it's dnceng
         ${{ else }}:
-          name: $(DncEngInternalBuildPool)
+          name: NetCore1ESPool-Publishing-Internal
           demands: ImageOverride -equals windows.vs2019.amd64
       steps:
         - template: setup-maestro-vars.yml
@@ -272,7 +272,7 @@ stages:
           displayName: Publish Using Darc
           inputs:
             filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
-            arguments: -BuildId $(BARBuildId) 
+            arguments: -BuildId $(BARBuildId)
               -PublishingInfraVersion ${{ parameters.publishingInfraVersion }}
               -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
               -MaestroToken '$(MaestroApiAccessToken)'
diff --git a/eng/common/templates/steps/component-governance.yml b/eng/common/templates/steps/component-governance.yml
index 0ecec47b0c9..cbba0596709 100644
--- a/eng/common/templates/steps/component-governance.yml
+++ b/eng/common/templates/steps/component-governance.yml
@@ -4,7 +4,7 @@ parameters:
 
 steps:
 - ${{ if eq(parameters.disableComponentGovernance, 'true') }}:
-  - script: "echo ##vso[task.setvariable variable=skipComponentGovernanceDetection]true"
+  - script: echo "##vso[task.setvariable variable=skipComponentGovernanceDetection]true"
     displayName: Set skipComponentGovernanceDetection variable
 - ${{ if ne(parameters.disableComponentGovernance, 'true') }}:
   - task: ComponentGovernanceComponentDetection@0
diff --git a/eng/common/templates/steps/generate-sbom.yml b/eng/common/templates/steps/generate-sbom.yml
index a06373f38fa..2b21eae4273 100644
--- a/eng/common/templates/steps/generate-sbom.yml
+++ b/eng/common/templates/steps/generate-sbom.yml
@@ -5,7 +5,7 @@
 # IgnoreDirectories - Directories to ignore for SBOM generation. This will be passed through to the CG component detector.
 
 parameters:
-  PackageVersion: 7.0.0
+  PackageVersion: 8.0.0
   BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
   PackageName: '.NET'
   ManifestDirPath: $(Build.ArtifactStagingDirectory)/sbom
diff --git a/eng/common/templates/variables/pool-providers.yml b/eng/common/templates/variables/pool-providers.yml
index 9cc5c550d3b..d236f9fdbb1 100644
--- a/eng/common/templates/variables/pool-providers.yml
+++ b/eng/common/templates/variables/pool-providers.yml
@@ -1,15 +1,15 @@
-# Select a pool provider based off branch name. Anything with branch name containing 'release' must go into an -Svc pool, 
+# Select a pool provider based off branch name. Anything with branch name containing 'release' must go into an -Svc pool,
 # otherwise it should go into the "normal" pools. This separates out the queueing and billing of released branches.
 
-# Motivation: 
+# Motivation:
 #   Once a given branch of a repository's output has been officially "shipped" once, it is then considered to be COGS
 #   (Cost of goods sold) and should be moved to a servicing pool provider. This allows both separation of queueing
 #   (allowing release builds and main PR builds to not intefere with each other) and billing (required for COGS.
-#   Additionally, the pool provider name itself may be subject to change when the .NET Core Engineering Services 
-#   team needs to move resources around and create new and potentially differently-named pools. Using this template 
+#   Additionally, the pool provider name itself may be subject to change when the .NET Core Engineering Services
+#   team needs to move resources around and create new and potentially differently-named pools. Using this template
 #   file from an Arcade-ified repo helps guard against both having to update one's release/* branches and renaming.
 
-# How to use: 
+# How to use:
 #  This yaml assumes your shipped product branches use the naming convention "release/..." (which many do).
 #  If we find alternate naming conventions in broad usage it can be added to the condition below.
 #
@@ -54,4 +54,4 @@ variables:
           False,
           'NetCore1ESPool-Internal'
         )
-      ]
\ No newline at end of file
+      ]
diff --git a/eng/config/OptProf.runsettings b/eng/config/OptProf.runsettings
index 3c5f7566a46..672be956050 100644
--- a/eng/config/OptProf.runsettings
+++ b/eng/config/OptProf.runsettings
@@ -21,6 +21,20 @@
   </SessionConfiguration>
   <DataCollectionRunSettings>
     <DataCollectors>
+      <DataCollector uri="datacollector://microsoft/DevDiv/TestExtensions/LingeringProcessCollector/v1" friendlyName="Lingering Process Collector" enabled="True">
+        <Configuration>
+          <KillLingeringProcesses>false</KillLingeringProcesses>
+          <LoggingBehavior>Warning</LoggingBehavior>
+          <CollectDumps>true</CollectDumps>
+          <RootDumpDirectory>%SystemDrive%\dumps</RootDumpDirectory>
+          <WhiteList>
+            <ProcessName>devenv</ProcessName>
+          </WhiteList>
+          <ShutdownCommands>
+            <ShutdownCommand Process="VBCSCompiler" Command="%ProcessPath%" Arguments="-shutdown" Timeout="60000" />
+          </ShutdownCommands>
+        </Configuration>
+      </DataCollector>
       <DataCollector uri="datacollector://microsoft/DevDiv/TestExtensions/ProcDumpCollector/v1" friendlyName="ProcDump Collector" enabled="True">
         <Configuration>
           <RootDumpDirectory>C:\Test\Dumps</RootDumpDirectory>
@@ -89,4 +103,4 @@
       </Workloads>
     </InstallationUnderTest>
   </VisualStudioConfiguration>
-</RunSettings>
\ No newline at end of file
+</RunSettings>
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index 224676be2db..b098ccc9e3a 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -19,7 +19,7 @@
     <PackageVersion Include="LargeAddressAware" Version="1.0.5" />
     <PackageVersion Update="LargeAddressAware" Condition="'$(LargeAddressAwareVersion)' != ''" Version="$(LargeAddressAwareVersion)" />
 
-    <PackageVersion Include="Microsoft.BuildXL.Processes" Version="0.1.0-20240113.1" />
+    <PackageVersion Include="Microsoft.BuildXL.Processes" Version="0.1.0-20240307.8" />
     <PackageVersion Update="Microsoft.BuildXL.Processes" Condition="'$(BuildXLProcessesVersion)' != ''" Version="$(BuildXLProcessesVersion)" />
 
     <PackageVersion Include="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.8.2112" />
@@ -37,7 +37,7 @@
     <PackageVersion Include="Shouldly" Version="4.2.1" />
     <PackageVersion Update="Shouldly" Condition="'$(ShouldlyVersion)' != ''" Version="$(ShouldlyVersion)" />
 
-    <PackageVersion Include="System.CodeDom" Version="7.0.0" />
+    <PackageVersion Include="System.CodeDom" Version="8.0.0" />
     <PackageVersion Update="System.CodeDom" Condition="'$(SystemCodeDomVersion)' != ''" Version="$(SystemCodeDomVersion)" />
 
     <PackageVersion Include="System.Private.Uri" Version="4.3.2" />
@@ -46,10 +46,10 @@
     <PackageVersion Include="System.Runtime" Version="4.3.1" />
     <PackageVersion Update="System.Runtime" Condition="'$(SystemRuntimeVersion)' != ''" Version="$(SystemRuntimeVersion)" />
 
-    <PackageVersion Include="System.Security.Cryptography.Pkcs" Version="7.0.2" />
+    <PackageVersion Include="System.Security.Cryptography.Pkcs" Version="8.0.0" />
     <PackageVersion Update="System.Security.Cryptography.Pkcs" Condition="'$(SystemSecurityCryptographyPkcsVersion)' != ''" Version="$(SystemSecurityCryptographyPkcsVersion)" />
 
-    <PackageVersion Include="System.Security.Cryptography.Xml" Version="7.0.1" />
+    <PackageVersion Include="System.Security.Cryptography.Xml" Version="8.0.0" />
     <PackageVersion Update="System.Security.Cryptography.Xml" Condition="'$(SystemSecurityCryptographyXmlVersion)' != ''" Version="$(SystemSecurityCryptographyXmlVersion)" />
 
     <PackageVersion Include="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
diff --git a/global.json b/global.json
index 111f7c04db7..7c11ef6ece2 100644
--- a/global.json
+++ b/global.json
@@ -3,13 +3,13 @@
     "allowPrerelease": true
   },
   "tools": {
-    "dotnet": "8.0.101",
+    "dotnet": "8.0.201",
     "vs": {
       "version": "17.8.0"
     },
-    "xcopy-msbuild": "17.8.1-2"
+    "xcopy-msbuild": "17.8.5"
   },
   "msbuild-sdks": {
-    "Microsoft.DotNet.Arcade.Sdk": "8.0.0-beta.24060.4"
+    "Microsoft.DotNet.Arcade.Sdk": "8.0.0-beta.24204.3"
   }
 }
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index d2515288da0..df1c15ea5e6 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -36,17 +36,9 @@
     <Compile Include="..\Shared\EncodingStringWriter.cs">
       <Link>EncodingStringWriter.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs" />
-    <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
     <Compile Include="..\Shared\ErrorUtilities.cs" />
     <Compile Include="..\Shared\FileDelegates.cs" />
     <Compile Include="..\Shared\ResourceUtilities.cs" />
-    <Compile Include="..\Shared\UnitTests\EngineTestEnvironment.cs">
-      <Link>EngineTestEnvironment.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs">
-      <Link>TestEnvironment.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
     </Compile>
@@ -55,15 +47,7 @@
     <Compile Include="..\Shared\EscapingUtilities.cs" />
     <Compile Include="..\Shared\FileUtilitiesRegex.cs" />
     <Compile Include="..\Shared\ExceptionHandling.cs" />
-    <Compile Include="..\Shared\UnitTests\TestData\GlobbingTestData.cs">
-      <Link>TestData\GlobbingTestData.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\ProcessExtensions.cs" />
-    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
-    <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
-    <Compile Include="..\UnitTests.Shared\DriveMapping.cs" />
-    <Compile Include="..\UnitTests.Shared\DummyMappedDrive.cs" />
-    <Compile Include="..\UnitTests.Shared\DummyMappedDriveUtils.cs"/>
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
       <SubType>Designer</SubType>
@@ -79,6 +63,7 @@
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index 7b1a91dfd04..8d19fd20280 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -325,8 +325,6 @@ public void VerifyEnvironmentSavedBetweenCalls()
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
         [Theory(Skip = "https://github.com/dotnet/msbuild/issues/1975")]
-#elif MONO
-        [Theory(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
 #else
         [Theory(Skip = "https://github.com/dotnet/msbuild/issues/2057")]
 #endif
@@ -403,11 +401,7 @@ public void ShutdownNodesAfterParallelBuild(int numberOfParallelProjectsToBuild,
         /// <summary>
         /// A simple successful build, out of process only.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void SimpleBuildOutOfProcess()
         {
             RunOutOfProcBuild(_ => _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1"));
@@ -416,11 +410,7 @@ public void SimpleBuildOutOfProcess()
         /// <summary>
         /// A simple successful build, out of process only. Triggered by setting build parameters' DisableInProcNode to true.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void DisableInProcNode()
         {
             RunOutOfProcBuild(buildParameters => buildParameters.DisableInProcNode = true);
@@ -466,11 +456,7 @@ private void RunOutOfProcBuild(Action<BuildParameters> buildParametersModifier)
             Assert.NotEqual(Process.GetCurrentProcess().Id, processId); // "Build is expected to be out-of-proc. In fact it was in-proc."
         }
 
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void RequestedResultsAreSatisfied()
         {
             const string contents = @"
@@ -689,8 +675,6 @@ public void MsBuildForwardAllPropertiesFromChildLaunchChildNode()
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1976")]
-#elif MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
 #else
         [Fact]
 #endif
@@ -742,8 +726,6 @@ public void OutOfProcNodeForwardCertainproperties()
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1976")]
-#elif MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
 #else
         [Fact]
 #endif
@@ -811,11 +793,7 @@ public void OutOfProcNodeForwardCertainpropertiesAlsoGetResultsFromCache()
         /// Make sure when if the environment variable MsBuildForwardPropertiesFromChild is set to empty and
         /// we launch a child node that we get no properties
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void ForwardNoPropertiesLaunchChildNode()
         {
             string contents = CleanupFileContents(@"
@@ -855,8 +833,6 @@ public void ForwardNoPropertiesLaunchChildNode()
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/933")]
-#elif MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
 #else
         [Fact]
 #endif
@@ -916,11 +892,7 @@ public override bool Execute()
         /// When a child node is launched by default we should not send any properties.
         /// we launch a child node that we get no properties
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void ForwardNoPropertiesLaunchChildNodeDefault()
         {
             string contents = CleanupFileContents(@"
@@ -2139,11 +2111,7 @@ public void Regress251333()
         /// <summary>
         /// Verify that disabling the in-proc node doesn't cause projects which don't require it to fail.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void Regress239661()
         {
             string contents = CleanupFileContents(@"
@@ -2201,11 +2169,7 @@ public void ExplicitInprocAffinityGetsOverruledByDisableInprocNode()
         /// <summary>
         /// Ensures that properties and items are transferred to the out-of-proc node when an instance is used to start the build.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void ProjectInstanceTransfersToOOPNode()
         {
             string contents = CleanupFileContents(@"
@@ -2266,11 +2230,7 @@ public void ProjectInstanceTransfersToOOPNode()
         /// <summary>
         /// Ensures that a limited set of properties are transferred from a project instance to an OOP node.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void ProjectInstanceLimitedTransferToOOPNode()
         {
             string contents = CleanupFileContents(@"
@@ -2566,8 +2526,6 @@ public void NonOverlappingEnusingTrypointTargetsShouldNotInfluenceEachOthersResu
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/933")]
-#elif MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
 #else
         [Fact]
 #endif
@@ -2665,11 +2623,7 @@ public void Regress473114()
         /// second request will bail out where the first request did, as though it had
         /// executed the target, rather than skipping and continuing.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyMultipleRequestForSameProjectWithErrors_Simple()
         {
             var projA = _env.CreateFile(".proj").Path;
@@ -2748,11 +2702,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_Simple()
         /// expected in the first request, but be skipped by the second (since if it's "skipping
         /// unsuccessful", it can assume that all other OnError targets have also already been run)
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyMultipleRequestForSameProjectWithErrors_OnErrorChain()
         {
             var projA = _env.CreateFile(".proj").Path;
@@ -2867,11 +2817,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_OnErrorChain()
         /// they're marked as ContinueOnError=ErrorAndContinue, then we won't bail, but
         /// will continue executing (on the first request) or skipping (on the second)
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyMultipleRequestForSameProjectWithErrors_ErrorAndContinue()
         {
             var projA = _env.CreateFile(".proj").Path;
@@ -2957,11 +2903,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_ErrorAndContinue()
         /// This test verifies that if the errors are in AfterTargets, we still
         /// exit as though the target that those targets run after has already run.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyMultipleRequestForSameProjectWithErrors_AfterTargets()
         {
             var projA = _env.CreateFile(".proj").Path;
@@ -3244,11 +3186,7 @@ public void TestSimultaneousSubmissionsWithLegacyThreadingData_P2P()
         /// submissions aren't restricted to running strictly serially by the single in-proc
         /// node.
         /// </summary>
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1245")]
-#else
         [Fact]
-#endif
         public void TestSimultaneousSubmissionsWithLegacyThreadingData_P2P_MP()
         {
             string projectContent1 = @"<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
@@ -4408,5 +4346,29 @@ public void TaskInputLoggingIsExposedToTasks(string taskFactory, bool taskInputL
 
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
         }
+
+        [Fact]
+        public void ProjectWithNoTargets()
+        {
+            string contents = @"<Project />";
+
+            BuildRequestData data = GetBuildRequestData(contents);
+            BuildResult result = _buildManager.Build(_parameters, data);
+            Assert.Equal(BuildResultCode.Failure, result.OverallResult);
+
+            _logger.AssertLogContains("MSB4040");
+        }
+
+        [Fact]
+        public void ProjectWithNoTargetsGraph()
+        {
+            string contents = @"<Project />";
+
+            GraphBuildRequestData data = GetGraphBuildRequestData(contents);
+            GraphBuildResult result = _buildManager.Build(_parameters, data);
+            Assert.Equal(BuildResultCode.Failure, result.OverallResult);
+
+            _logger.AssertLogContains("MSB4040");
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
new file mode 100644
index 00000000000..41a7edf7e42
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
@@ -0,0 +1,86 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Diagnostics.Tracing;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Engine.UnitTests.BackEnd
+{
+    /// <summary>
+    /// This class provides the ability to fetch events emitted from the "Microsoft-Build" EventSource.
+    /// The instance listens and saves emitted events in-memory.
+    /// To fetch the events, use the <see cref="GetEvents"/> method.
+    /// Note that the current implementation of this class does not have protection against concurrent usage in tests.
+    /// If used in tests, ensure to rely on unique variables, names, or IDs. For example usage: <see cref="SdkResolverService_Tests.AssertSdkResolutionMessagesAreLoggedInEventSource"/>.
+    /// 
+    /// Reference: <see href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlistener"/>
+    /// <example>
+    /// <code>
+    /// // ...
+    /// using var eventSourceTestListener = new EventSourceTestHelper();
+    /// // ...
+    /// var events = eventSourceTestListener.GetEvents();
+    /// // verification
+    /// </code>
+    /// </example>
+    /// </summary>
+    internal sealed class EventSourceTestHelper : EventListener
+    {
+        private readonly string eventSourceName = "Microsoft-Build";
+        private readonly List<EventWrittenEventArgs> emittedEvents;
+        private object _eventListLock = new object();
+        private EventSource? _eventSources = null;
+
+        public EventSourceTestHelper()
+        {
+            emittedEvents = new List<EventWrittenEventArgs>();
+        }
+
+        protected override void OnEventSourceCreated(EventSource eventSource)
+        {
+            if (eventSource.Name == eventSourceName)
+            {
+                EnableEvents(eventSource, EventLevel.LogAlways);
+                _eventSources = eventSource;
+            }
+        }
+
+        protected override void OnEventWritten(EventWrittenEventArgs eventData)
+        {
+            lock (_eventListLock)
+            {
+                emittedEvents.Add(eventData);
+            }
+        }
+
+        public override void Dispose() {
+            if (_eventSources  != null)
+            {
+                DisableEvents(_eventSources);
+            }
+            
+            base.Dispose();
+        }
+
+        /// <summary>
+        /// Returns the events that were emitted till invocation of this method.
+        /// The events are cleared from the in-memory store and are populated again in <see cref="OnEventWritten"/>. 
+        /// </summary>
+        /// <returns>List of the events that were emitted for eventSource</returns>
+        internal List<EventWrittenEventArgs> GetEvents()
+        {
+            var resultList = new List<EventWrittenEventArgs>();
+            lock (_eventListLock)
+            {
+                resultList = new List<EventWrittenEventArgs>(emittedEvents);
+                emittedEvents.Clear();
+            }
+            
+            return resultList;
+        }
+    }
+}
diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index 0649b96b566..67eba7e0b12 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -74,6 +74,7 @@ public void VerifyEventType()
             ResponseFileUsedEventArgs responseFileUsed = new("path");
             UninitializedPropertyReadEventArgs uninitializedPropertyRead = new("prop", "message", "help", "sender", MessageImportance.Normal);
             EnvironmentVariableReadEventArgs environmentVariableRead = new("env", "message", "help", "sender", MessageImportance.Normal);
+            GeneratedFileUsedEventArgs generatedFileUsed = new GeneratedFileUsedEventArgs("path", "some content");
 
             VerifyLoggingPacket(buildFinished, LoggingEventType.BuildFinishedEvent);
             VerifyLoggingPacket(buildStarted, LoggingEventType.BuildStartedEvent);
@@ -106,6 +107,7 @@ public void VerifyEventType()
             VerifyLoggingPacket(responseFileUsed, LoggingEventType.ResponseFileUsedEvent);
             VerifyLoggingPacket(uninitializedPropertyRead, LoggingEventType.UninitializedPropertyRead);
             VerifyLoggingPacket(environmentVariableRead, LoggingEventType.EnvironmentVariableReadEvent);
+            VerifyLoggingPacket(generatedFileUsed, LoggingEventType.GeneratedFileUsedEvent);
         }
 
         private static BuildEventContext CreateBuildEventContext()
@@ -307,6 +309,7 @@ public void TestTranslation()
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
+                    new GeneratedFileUsedEventArgs("path", "some content"),
                 };
                 foreach (BuildEventArgs arg in testArgs)
                 {
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index d15bd7d203d..f5887f5a46b 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics.Tracing;
 using System.Linq;
 using System.Text.RegularExpressions;
 using System.Threading.Tasks;
@@ -203,6 +204,20 @@ public void AssertSdkResolutionMessagesAreLogged()
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("SucceededToResolveSDK", sdk.ToString(), nameof(MockSdkResolver1), result.Path, result.Version));
         }
 
+        [Fact]
+        public void AssertSdkResolutionMessagesAreLoggedInEventSource()
+        {
+            using var eventSourceTestListener = new EventSourceTestHelper();
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(false, false, true));
+            var sdkName = Guid.NewGuid().ToString();
+            SdkReference sdk = new SdkReference(sdkName, "referencedVersion", "minimumVersion");
+
+            SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);
+            var eventsLogged = eventSourceTestListener.GetEvents();
+            eventsLogged.ShouldContain(x => x.EventId == 64); // Start of the sdk resolve
+            eventsLogged.ShouldContain(x => x.EventId == 65 && x.Payload[1].ToString() == sdkName);
+        }
+
         [Fact]
         public void AssertFirstResolverErrorsSupressedWhenResolved()
         {
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index f4644d4e358..b1516503006 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -18,6 +18,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
+using Shouldly;
 using Xunit;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
@@ -1048,6 +1050,80 @@ public void TestTaskDictionaryOutputItems()
                 """);
             ml.AssertLogContains("a=b");
         }
+
+        [Theory]
+        [InlineData(typeof(OutOfMemoryException), true)]
+        [InlineData(typeof(ArgumentException), false)]
+        public void TaskExceptionHandlingTest(Type exceptionType, bool isCritical)
+        {
+            string testExceptionMessage = "Test Message";
+            string customTaskPath = Assembly.GetExecutingAssembly().Location;
+            MockLogger ml = new MockLogger() { AllowTaskCrashes = true };
+
+            using TestEnvironment env = TestEnvironment.Create();
+            var debugFolder = env.CreateFolder();
+            // inject the location for failure logs - not to interact with other tests
+            env.SetEnvironmentVariable("MSBUILDDEBUGPATH", debugFolder.Path);
+            // Force initing the DebugPath from the env var - as we need it to be unique for those tests.
+            // The ProjectCacheTests DataMemberAttribute usages (specifically SuccessfulGraphsWithBuildParameters) lead
+            //  to the DebugPath being set before this test runs - and hence the env var is ignored.
+            DebugUtils.SetDebugPath();
+
+            ObjectModelHelpers.BuildProjectExpectFailure($"""
+                     <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
+                         <UsingTask TaskName=`TaskThatThrows` AssemblyFile=`{customTaskPath}`/>
+                         <Target Name=`Build`>
+                            <TaskThatThrows ExceptionType="{exceptionType.ToString()}" ExceptionMessage="{testExceptionMessage}">
+                             </TaskThatThrows>
+                         </Target>
+                     </Project>
+                  """,
+                ml);
+            // 'This is an unhandled exception from a task'
+            ml.AssertLogContains("MSB4018");
+            // 'An internal failure occurred while running MSBuild'
+            ml.AssertLogDoesntContain("MSB1025");
+            // 'This is an unhandled error in MSBuild'
+            ml.AssertLogDoesntContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("UnhandledMSBuildError", string.Empty));
+            ml.AssertLogContains(testExceptionMessage);
+
+            File.Exists(ExceptionHandling.DumpFilePath).ShouldBe(isCritical,
+                $"{ExceptionHandling.DumpFilePath} expected to exist: {isCritical}");
+            if (isCritical)
+            {
+                FileUtilities.DeleteNoThrow(ExceptionHandling.DumpFilePath);
+            }
+        }
+
+        [Fact]
+        public void TestTaskParameterLogging()
+        {
+            string customTaskPath = Assembly.GetExecutingAssembly().Location;
+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess($"""
+                    <Project>
+                        <UsingTask TaskName=`TaskThatReturnsDictionaryTaskItem` AssemblyFile=`{customTaskPath}`/>
+                        <ItemGroup>
+                            <MyItem Include="item1"/>
+                            <MyItem Include="item2"/>
+                        </ItemGroup>
+                        <Target Name=`Build`>
+                           <TaskThatReturnsDictionaryTaskItem Key="a" Value="b" AdditionalParameters="@(MyItem)" />
+                        </Target>
+                    </Project>
+                """);
+
+            // Each parameter should be logged as TaskParameterEvent.
+            ml.TaskParameterEvents.Count.ShouldBe(3);
+            IList<string> messages = ml.TaskParameterEvents.Select(e => e.Message).ToList();
+            messages.ShouldContain($"{ItemGroupLoggingHelper.TaskParameterPrefix}Key=a");
+            messages.ShouldContain($"{ItemGroupLoggingHelper.TaskParameterPrefix}Value=b");
+            messages.ShouldContain($"{ItemGroupLoggingHelper.TaskParameterPrefix}\n    AdditionalParameters=\n        item1\n        item2");
+
+            // Parameters should not be logged as messages.
+            messages = ml.BuildMessageEvents.Select(e => e.Message).ToList();
+            messages.ShouldNotContain(m => m.StartsWith(ItemGroupLoggingHelper.TaskParameterPrefix));
+        }
+
         #endregion
 
         #region ITestTaskHost Members
diff --git a/src/Build.UnitTests/BackEnd/TaskThatReturnsDictionaryTaskItem.cs b/src/Build.UnitTests/BackEnd/TaskThatReturnsDictionaryTaskItem.cs
index c258beb89a4..b662a2ca441 100644
--- a/src/Build.UnitTests/BackEnd/TaskThatReturnsDictionaryTaskItem.cs
+++ b/src/Build.UnitTests/BackEnd/TaskThatReturnsDictionaryTaskItem.cs
@@ -17,6 +17,8 @@ public sealed class TaskThatReturnsDictionaryTaskItem : Utilities.Task
     public string Key { get; set; }
     public string Value { get; set; }
 
+    public ITaskItem[] AdditionalParameters { get; set; }
+
     public override bool Execute()
     {
         var metaValue = new MinimalDictionary<string, string>
diff --git a/src/Build.UnitTests/BackEnd/TaskThatThrows.cs b/src/Build.UnitTests/BackEnd/TaskThatThrows.cs
new file mode 100644
index 00000000000..b837e225740
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/TaskThatThrows.cs
@@ -0,0 +1,33 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Engine.UnitTests;
+
+/// <summary>
+/// Task that throws exception based on input parameters.
+/// </summary>
+public sealed class TaskThatThrows : Utilities.Task
+{
+    public string? ExceptionType { get; set; }
+
+    public string? ExceptionMessage { get; set; }
+
+    public override bool Execute()
+    {
+        string exceptionMessage = string.IsNullOrWhiteSpace(ExceptionMessage) ? "Default exception message" : ExceptionMessage!;
+
+        Type exceptionType = string.IsNullOrWhiteSpace(ExceptionType) ? typeof(Exception) : Type.GetType(ExceptionType) ?? typeof(Exception);
+
+        ConstructorInfo? ctor = exceptionType.GetConstructor([typeof(string)]);
+        Exception exceptionInstance = (Exception)(ctor?.Invoke([exceptionMessage]) ?? new Exception(exceptionMessage));
+
+        throw exceptionInstance;
+    }
+}
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 99474115048..46170961e81 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -547,6 +547,7 @@ public void RoundtripResponseFileUsedEventArgs()
                 e => e.ResponseFilePath);
         }
 
+
         [Fact]
         public void RoundtripCriticalBuildMessageEventArgs()
         {
diff --git a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
index 78cd0f31dc1..0427761054c 100644
--- a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
@@ -56,6 +56,7 @@ private static void SetResolverForContext(EvaluationContext context, SdkResolver
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Shared)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
         [InlineData(EvaluationContext.SharingPolicy.Isolated)]
         public void SharedContextShouldGetReusedWhereasIsolatedContextShouldNot(EvaluationContext.SharingPolicy policy)
         {
@@ -76,6 +77,9 @@ public void SharedContextShouldGetReusedWhereasIsolatedContextShouldNot(Evaluati
                         case EvaluationContext.SharingPolicy.Shared:
                             currentContext.ShouldBeSameAs(previousContext, $"Shared policy: usage {i} was not the same as usage {i - 1}");
                             break;
+                        case EvaluationContext.SharingPolicy.SharedSDKCache:
+                            currentContext.ShouldNotBeSameAs(previousContext, $"SharedSDKCache policy: usage {i} was the same as usage {i - 1}");
+                            break;
                         case EvaluationContext.SharingPolicy.Isolated:
                             currentContext.ShouldNotBeSameAs(previousContext, $"Isolated policy: usage {i} was the same as usage {i - 1}");
                             break;
@@ -123,11 +127,13 @@ public void PassedInFileSystemShouldBeReusedInSharedContext()
             fileSystem.FileOrDirectoryExistsCalls.ShouldBe(2);
         }
 
-        [Fact]
-        public void IsolatedContextShouldNotSupportBeingPassedAFileSystem()
+        [Theory]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
+        [InlineData(EvaluationContext.SharingPolicy.Isolated)]
+        public void NonSharedContextShouldNotSupportBeingPassedAFileSystem(EvaluationContext.SharingPolicy policy)
         {
             var fileSystem = new Helpers.LoggingFileSystem();
-            Should.Throw<ArgumentException>(() => EvaluationContext.Create(EvaluationContext.SharingPolicy.Isolated, fileSystem));
+            Should.Throw<ArgumentException>(() => EvaluationContext.Create(policy, fileSystem));
         }
 
         [Theory]
@@ -184,6 +190,7 @@ public void EvaluationShouldUseDirectoryCache(bool useProjectInstance)
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Shared)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
         [InlineData(EvaluationContext.SharingPolicy.Isolated)]
         public void ReevaluationShouldNotReuseInitialContext(EvaluationContext.SharingPolicy policy)
         {
@@ -220,6 +227,7 @@ public void ReevaluationShouldNotReuseInitialContext(EvaluationContext.SharingPo
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Shared)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
         [InlineData(EvaluationContext.SharingPolicy.Isolated)]
         public void ProjectInstanceShouldRespectSharingPolicy(EvaluationContext.SharingPolicy policy)
         {
@@ -267,6 +275,7 @@ public void ProjectInstanceShouldRespectSharingPolicy(EvaluationContext.SharingP
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Shared, 1, 1)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache, 1, 1)]
         [InlineData(EvaluationContext.SharingPolicy.Isolated, 4, 4)]
         public void ContextPinsSdkResolverCache(EvaluationContext.SharingPolicy policy, int sdkLookupsForFoo, int sdkLookupsForBar)
         {
@@ -323,17 +332,20 @@ public static IEnumerable<object[]> ContextPinsGlobExpansionCacheData
                     }
                 };
 
-                yield return new object[]
+                foreach (var policy in new[] { EvaluationContext.SharingPolicy.SharedSDKCache, EvaluationContext.SharingPolicy.Isolated })
                 {
-                    EvaluationContext.SharingPolicy.Isolated,
-                    new[]
+                    yield return new object[]
                     {
-                        new[] {"0.cs"},
-                        new[] {"0.cs", "1.cs"},
-                        new[] {"0.cs", "1.cs", "2.cs"},
-                        new[] {"0.cs", "1.cs", "2.cs", "3.cs"},
-                    }
-                };
+                        policy,
+                        new[]
+                        {
+                            new[] {"0.cs"},
+                            new[] {"0.cs", "1.cs"},
+                            new[] {"0.cs", "1.cs", "2.cs"},
+                            new[] {"0.cs", "1.cs", "2.cs", "3.cs"},
+                        }
+                    };
+                }
             }
         }
 
@@ -394,17 +406,20 @@ public static IEnumerable<object[]> ContextDisambiguatesRelativeGlobsData
                     }
                 };
 
-                yield return new object[]
+                foreach (var policy in new[] { EvaluationContext.SharingPolicy.SharedSDKCache, EvaluationContext.SharingPolicy.Isolated })
                 {
-                    EvaluationContext.SharingPolicy.Isolated,
-                    new[]
+                    yield return new object[]
                     {
-                        new[] {"0.cs"},
-                        new[] {"0.cs", "1.cs"},
-                        new[] {"0.cs", "1.cs", "2.cs"},
-                        new[] {"0.cs", "1.cs", "2.cs", "3.cs"},
-                    }
-                };
+                        policy,
+                        new[]
+                        {
+                            new[] {"0.cs"},
+                            new[] {"0.cs", "1.cs"},
+                            new[] {"0.cs", "1.cs", "2.cs"},
+                            new[] {"0.cs", "1.cs", "2.cs", "3.cs"},
+                        }
+                    };
+                }
             }
         }
 
@@ -672,12 +687,18 @@ private void ContextCachesCommonOutOfProjectCone(bool itemSpecPathIsRelative, Ev
 
             Directory.CreateDirectory(globDirectory.Path);
 
-            // Globs with a directory part will produce items prepended with that directory part
-            foreach (var globExpansion in expectedGlobExpansions)
+            // Globs with a directory part will produce items prepended with that directory part.
+            // Make a deep copy of the argument to avoid writing to global variables.
+            string[][] prependedExpectedGlobExpansions = new string[expectedGlobExpansions.Length][];
+            for (int expIndex = 0; expIndex < expectedGlobExpansions.Length; expIndex++)
             {
+                string[] globExpansion = expectedGlobExpansions[expIndex];
+                string[] prependedGlobExpansion = new string[globExpansion.Length];
+
+                prependedExpectedGlobExpansions[expIndex] = prependedGlobExpansion;
                 for (var i = 0; i < globExpansion.Length; i++)
                 {
-                    globExpansion[i] = Path.Combine(itemSpecDirectoryPart, globExpansion[i]);
+                    prependedGlobExpansion[i] = Path.Combine(itemSpecDirectoryPart, globExpansion[i]);
                 }
             }
 
@@ -708,7 +729,7 @@ private void ContextCachesCommonOutOfProjectCone(bool itemSpecPathIsRelative, Ev
                 context,
                 project =>
                 {
-                    var expectedGlobExpansion = expectedGlobExpansions[evaluationCount];
+                    var expectedGlobExpansion = prependedExpectedGlobExpansions[evaluationCount];
                     evaluationCount++;
 
                     File.WriteAllText(Path.Combine(globDirectory.Path, $"{evaluationCount}.cs"), "");
@@ -771,6 +792,7 @@ public void ContextCachesImportGlobExpansions(EvaluationContext.SharingPolicy po
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Isolated)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
         [InlineData(EvaluationContext.SharingPolicy.Shared)]
         public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPolicy policy)
         {
@@ -806,6 +828,7 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
                             case EvaluationContext.SharingPolicy.Shared:
                                 project.GetPropertyValue("p").ShouldBe("val");
                                 break;
+                            case EvaluationContext.SharingPolicy.SharedSDKCache:
                             case EvaluationContext.SharingPolicy.Isolated:
                                 project.GetPropertyValue("p").ShouldBeEmpty();
                                 break;
@@ -818,6 +841,7 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Isolated)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
         [InlineData(EvaluationContext.SharingPolicy.Shared)]
         public void ContextCachesExistenceChecksInGetDirectoryNameOfFileAbove(EvaluationContext.SharingPolicy policy)
         {
@@ -850,6 +874,7 @@ public void ContextCachesExistenceChecksInGetDirectoryNameOfFileAbove(Evaluation
                         case EvaluationContext.SharingPolicy.Shared:
                             searchedPath.EvaluatedValue.ShouldBe(subdirectory.Path);
                             break;
+                        case EvaluationContext.SharingPolicy.SharedSDKCache:
                         case EvaluationContext.SharingPolicy.Isolated:
                             searchedPath.EvaluatedValue.ShouldBe(
                                 evaluationCount == 1
@@ -872,6 +897,7 @@ public void ContextCachesExistenceChecksInGetDirectoryNameOfFileAbove(Evaluation
 
         [Theory]
         [InlineData(EvaluationContext.SharingPolicy.Isolated)]
+        [InlineData(EvaluationContext.SharingPolicy.SharedSDKCache)]
         [InlineData(EvaluationContext.SharingPolicy.Shared)]
         public void ContextCachesExistenceChecksInGetPathOfFileAbove(EvaluationContext.SharingPolicy policy)
         {
@@ -904,6 +930,7 @@ public void ContextCachesExistenceChecksInGetPathOfFileAbove(EvaluationContext.S
                         case EvaluationContext.SharingPolicy.Shared:
                             searchedPath.EvaluatedValue.ShouldBe(subdirectoryFile.Path);
                             break;
+                        case EvaluationContext.SharingPolicy.SharedSDKCache:
                         case EvaluationContext.SharingPolicy.Isolated:
                             searchedPath.EvaluatedValue.ShouldBe(
                                 evaluationCount == 1
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 1fb7e636e55..4af483bd8e8 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -9,6 +9,7 @@
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
 using System.Text;
+using System.Threading;
 using System.Xml;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
@@ -3890,8 +3891,14 @@ public void PropertyStringConstructorConsumingItemMetadata(string metadatumName,
             result.ShouldBe(metadatumValue);
         }
 
-        [Fact]
-        public void PropertyFunctionHashCodeSameOnlyIfStringSame()
+        public static IEnumerable<object[]> GetHashAlgoTypes()
+            => Enum.GetNames(typeof(IntrinsicFunctions.StringHashingAlgorithm))
+                .Append(null)
+                .Select(t => new object[] { t });
+
+        [Theory]
+        [MemberData(nameof(GetHashAlgoTypes))]
+        public void PropertyFunctionHashCodeSameOnlyIfStringSame(string hashType)
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
@@ -3906,8 +3913,9 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()
                 "cat12s",
                 "cat1s"
             };
-            int[] hashes = stringsToHash.Select(toHash =>
-                (int)expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::StableStringHash('{toHash}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance))
+            string hashTypeString = hashType == null ? "" : $", '{hashType}'";
+            object[] hashes = stringsToHash.Select(toHash =>
+                expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::StableStringHash('{toHash}'{hashTypeString}))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance))
                 .ToArray();
             for (int a = 0; a < hashes.Length; a++)
             {
@@ -3925,6 +3933,33 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()
             }
         }
 
+        [Theory]
+        [MemberData(nameof(GetHashAlgoTypes))]
+        public void PropertyFunctionHashCodeReturnsExpectedType(string hashType)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
+            Type expectedType;
+
+            expectedType = hashType switch
+            {
+                null => typeof(int),
+                "Legacy" => typeof(int),
+                "Fnv1a32bit" => typeof(int),
+                "Fnv1a32bitFast" => typeof(int),
+                "Fnv1a64bit" => typeof(long),
+                "Fnv1a64bitFast" => typeof(long),
+                "Sha256" => typeof(string),
+                _ => throw new ArgumentOutOfRangeException(nameof(hashType))
+            };
+
+
+            string hashTypeString = hashType == null ? "" : $", '{hashType}'";
+            object hashValue = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::StableStringHash('FooBar'{hashTypeString}))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
+
+            hashValue.ShouldBeOfType(expectedType);
+        }
+
         [Theory]
         [InlineData("easycase")]
         [InlineData("")]
@@ -4333,9 +4368,9 @@ public void PropertyFunctionGuidNewGuid()
             Assert.True(Guid.TryParse(result, out Guid guid));
         }
 
-        // TODO: update features list
         [Theory]
         [InlineData("NonExistingFeature", "Undefined")]
+        [InlineData("EvaluationContext_SharedSDKCachePolicy", "Available")]
         public void PropertyFunctionCheckFeatureAvailability(string featureName, string availability)
         {
             var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(new PropertyDictionary<ProjectPropertyInstance>(), FileSystems.Default);
@@ -4859,5 +4894,166 @@ public void ExpandItemVectorFunctions_Exists_Directories()
                 squiggleItems.Select(i => i.EvaluatedInclude).ShouldBe(new[] { alphaBetaPath, alphaDeltaPath }, Case.Insensitive);
             }
         }
+
+        [Fact]
+        public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData()
+        {
+            var currentThread = Thread.CurrentThread;
+            var originalCulture = currentThread.CurrentCulture;
+            var originalUICulture = currentThread.CurrentUICulture;
+
+            try
+            {
+                var svSECultureInfo = new CultureInfo("sv-SE");
+                using (var env = TestEnvironment.Create())
+                {
+                    currentThread.CurrentCulture = svSECultureInfo;
+                    currentThread.CurrentUICulture = svSECultureInfo;
+                    var root = env.CreateFolder();
+
+                    var projectFile = env.CreateFile(root, ".proj",
+                        @"<Project>
+
+  <PropertyGroup>
+    <_value>$([MSBuild]::Subtract(0, 1))</_value>
+    <_otherValue Condition=""'$(_value)' &gt;= -1"">test-value</_otherValue>
+  </PropertyGroup>
+  <Target Name=""Build"" />
+</Project>");
+                    ProjectInstance projectInstance = new ProjectInstance(projectFile.Path);
+                    projectInstance.GetPropertyValue("_value").ShouldBe("-1");
+                    projectInstance.GetPropertyValue("_otherValue").ShouldBe("test-value");
+                }
+            }
+            finally
+            {
+                currentThread.CurrentCulture = originalCulture;
+                currentThread.CurrentUICulture = originalUICulture;
+            }
+        }
+
+        [Fact]
+        public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData_RespectingChangeWave()
+        {
+            // Note: Skipping the test since it is not a valid scenario when ICU mode is not used.
+            if (!ICUModeAvailable())
+            {
+                return;
+            }
+
+            var currentThread = Thread.CurrentThread;
+            var originalCulture = currentThread.CurrentCulture;
+            var originalUICulture = currentThread.CurrentUICulture;
+
+            try
+            {
+                var svSECultureInfo = new CultureInfo("sv-SE");
+                using (var env = TestEnvironment.Create())
+                {
+                    env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_12.ToString());
+                    currentThread.CurrentCulture = svSECultureInfo;
+                    currentThread.CurrentUICulture = svSECultureInfo;
+                    var root = env.CreateFolder();
+
+                    var projectFile = env.CreateFile(root, ".proj",
+                        @"<Project>
+
+  <PropertyGroup>
+    <_value>$([MSBuild]::Subtract(0, 1))</_value>
+    <_otherValue Condition=""'$(_value)' &gt;= -1"">test-value</_otherValue>
+  </PropertyGroup>
+  <Target Name=""Build"" />
+</Project>");
+                    var exception = Should.Throw<InvalidProjectFileException>(() =>
+                    {
+                        new ProjectInstance(projectFile.Path);
+                    });
+                    exception.BaseMessage.ShouldContain("A numeric comparison was attempted on \"$(_value)\"");
+                }
+            }
+            finally
+            {
+                currentThread.CurrentCulture = originalCulture;
+                currentThread.CurrentUICulture = originalUICulture;
+            }
+        }
+
+        [Theory]
+        [InlineData("getType")]
+        [InlineData("GetType")]
+        [InlineData("gettype")]
+        public void GetTypeMethod_ShouldNotBeAllowed(string methodName)
+        {
+            var currentThread = Thread.CurrentThread;
+            var originalCulture = currentThread.CurrentCulture;
+            var originalUICulture = currentThread.CurrentUICulture;
+            var enCultureInfo = new CultureInfo("en");
+
+            try
+            {
+                currentThread.CurrentCulture = enCultureInfo;
+                currentThread.CurrentUICulture = enCultureInfo;
+
+                using (var env = TestEnvironment.Create())
+                {
+                    var root = env.CreateFolder();
+
+                    var projectFile = env.CreateFile(root, ".proj",
+                        @$"<Project>
+            <PropertyGroup>
+                <foo>aa</foo>
+                <typeval>$(foo.{methodName}().FullName)</typeval>
+            </PropertyGroup>
+        </Project>");
+                    var exception = Should.Throw<InvalidProjectFileException>(() =>
+                    {
+                        new ProjectInstance(projectFile.Path);
+                    });
+                    exception.BaseMessage.ShouldContain($"The function \"{methodName}\" on type \"System.String\" is not available for execution as an MSBuild property function.");
+                }
+            }
+            finally
+            {
+                currentThread.CurrentCulture = originalCulture;
+                currentThread.CurrentUICulture = originalUICulture;
+            }
+        }
+
+        [Theory]
+        [InlineData("getType")]
+        [InlineData("GetType")]
+        [InlineData("gettype")]
+        public void GetTypeMethod_ShouldBeAllowed_EnabledByEnvVariable(string methodName)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                env.SetEnvironmentVariable("MSBUILDENABLEALLPROPERTYFUNCTIONS", "1");
+                var root = env.CreateFolder();
+
+                var projectFile = env.CreateFile(root, ".proj",
+                    @$"<Project>
+    <PropertyGroup>
+        <foo>aa</foo>
+        <typeval>$(foo.{methodName}().FullName)</typeval>
+    </PropertyGroup>
+</Project>");
+                Should.NotThrow(() =>
+                {
+                    new ProjectInstance(projectFile.Path);
+                });
+            }
+        }
+
+        /// <summary>
+        /// Determines if ICU mode is enabled.
+        /// Copied from: https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu#determine-if-your-app-is-using-icu
+        /// </summary>
+        private static bool ICUModeAvailable()
+        {
+            SortVersion sortVersion = CultureInfo.InvariantCulture.CompareInfo.Version;
+            byte[] bytes = sortVersion.SortId.ToByteArray();
+            int version = bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
+            return version != 0 && version == sortVersion.FullVersion;
+        }
     }
 }
diff --git a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
index 1d30e7f6067..915e38582d5 100644
--- a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
@@ -79,7 +79,7 @@ public void AddEntry()
         /// <summary>
         /// Tests that a strong reference is held to a single item
         /// </summary>
-        [WindowsFullFrameworkOnlyFact(additionalMessage: "This test fails on .NET Core and Mono: https://github.com/dotnet/msbuild/issues/282")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "This test fails on .NET Core: https://github.com/dotnet/msbuild/issues/282")]
         public void AddEntryStrongReference()
         {
             string projectPath = NativeMethodsShared.IsUnixLike ? "/foo" : "c:\\foo";
diff --git a/src/Build.UnitTests/EvaluationProfiler_Tests.cs b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
index 078dc9e3520..bcf76c7e5a1 100644
--- a/src/Build.UnitTests/EvaluationProfiler_Tests.cs
+++ b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
@@ -95,11 +95,7 @@ public void Dispose()
 <ItemGroup>
     <CSFile Include='file.cs'/>
 </ItemGroup>")]
-#if MONO
-        [Theory(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Theory]
-#endif
         public void VerifySimpleProfiledData(string elementName, string body)
         {
             string contents = $@"
@@ -131,11 +127,7 @@ public void VerifySimpleProfiledData(string elementName, string body)
 <ItemGroup>
     <CSFile Include='file.cs'/>
 </ItemGroup>")]
-#if MONO
-        [Theory(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Theory]
-#endif
         public void VerifySimpleProfiledDataWithoutProjectLoadSetting(string elementName, string body)
         {
             string contents = $@"
@@ -149,11 +141,7 @@ public void VerifySimpleProfiledDataWithoutProjectLoadSetting(string elementName
             Assert.Contains(profiledElements, location => location.ElementName == elementName);
         }
 
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyProfiledData()
         {
             var result = BuildAndGetProfilerResult(SpecData);
@@ -186,11 +174,7 @@ public void VerifyProfiledData()
             Assert.Single(profiledElements.Where(location => location.ElementName == "Target"));
         }
 
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyProfiledGlobData()
         {
             string contents = @"
@@ -220,11 +204,7 @@ public void VerifyProfiledGlobData()
             Assert.Equal(2, totalGlobLocation.NumberOfHits);
         }
 
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyParentIdData()
         {
             string contents = @"
@@ -264,11 +244,7 @@ public void VerifyParentIdData()
             Assert.Equal(target.Id, messageTarget.ParentId);
         }
 
-#if MONO
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1240")]
-#else
         [Fact]
-#endif
         public void VerifyIdsSanity()
         {
             var result = BuildAndGetProfilerResult(SpecData);
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index 6b415681733..d23ce086db7 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -65,7 +65,7 @@ public static void AssertOuterBuild(
             foreach (ProjectGraphNode outerBuildReferencer in outerBuild.ReferencingProjects)
             {
                 ProjectGraphNode[] innerBuilds = outerBuildReferencer.ProjectReferences
-                    .Where(p => IsInnerBuild(p) && p.ProjectInstance.FullPath == outerBuild.ProjectInstance.FullPath)
+                    .Where(p => p.ProjectType == ProjectInterpretation.ProjectType.InnerBuild && p.ProjectInstance.FullPath == outerBuild.ProjectInstance.FullPath)
                     .ToArray();
 
                 innerBuilds.Length.ShouldBe(expectedInnerBuildCount);
@@ -91,7 +91,7 @@ public static void AssertNonMultitargetingNode(ProjectGraphNode node, Dictionary
         {
             additionalGlobalProperties ??= new Dictionary<string, string>();
 
-            IsNotMultitargeting(node).ShouldBeTrue();
+            node.ProjectType.ShouldBe(ProjectInterpretation.ProjectType.NonMultitargeting);
             node.ProjectInstance.GlobalProperties.ShouldBeSameIgnoringOrder(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
             node.ProjectInstance.GetProperty(InnerBuildPropertyName).ShouldBeNull();
         }
@@ -100,8 +100,7 @@ public static void AssertOuterBuildEvaluation(ProjectGraphNode outerBuild, Dicti
         {
             additionalGlobalProperties.ShouldNotBeNull();
 
-            IsOuterBuild(outerBuild).ShouldBeTrue();
-            IsInnerBuild(outerBuild).ShouldBeFalse();
+            outerBuild.ProjectType.ShouldBe(ProjectInterpretation.ProjectType.OuterBuild);
 
             outerBuild.ProjectInstance.GetProperty(InnerBuildPropertyName).ShouldBeNull();
             outerBuild.ProjectInstance.GlobalProperties.ShouldBeSameIgnoringOrder(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
@@ -114,8 +113,7 @@ public static void AssertInnerBuildEvaluation(
         {
             additionalGlobalProperties.ShouldNotBeNull();
 
-            IsOuterBuild(innerBuild).ShouldBeFalse();
-            IsInnerBuild(innerBuild).ShouldBeTrue();
+            innerBuild.ProjectType.ShouldBe(ProjectInterpretation.ProjectType.InnerBuild);
 
             var innerBuildPropertyValue = innerBuild.ProjectInstance.GetPropertyValue(InnerBuildPropertyName);
 
@@ -130,21 +128,6 @@ public static void AssertInnerBuildEvaluation(
             }
         }
 
-        internal static bool IsOuterBuild(ProjectGraphNode project)
-        {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.OuterBuild;
-        }
-
-        internal static bool IsInnerBuild(ProjectGraphNode project)
-        {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.InnerBuild;
-        }
-
-        internal static bool IsNotMultitargeting(ProjectGraphNode project)
-        {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.NonMultitargeting;
-        }
-
         internal static ProjectGraphNode GetFirstNodeWithProjectNumber(ProjectGraph graph, int projectNum)
         {
             return GetNodesWithProjectNumber(graph, projectNum).First();
@@ -157,7 +140,7 @@ internal static IEnumerable<ProjectGraphNode> GetNodesWithProjectNumber(ProjectG
 
         internal static ProjectGraphNode GetOuterBuild(ProjectGraph graph, int projectNumber)
         {
-            return GetNodesWithProjectNumber(graph, projectNumber).FirstOrDefault(IsOuterBuild);
+            return GetNodesWithProjectNumber(graph, projectNumber).FirstOrDefault(i => i.ProjectType == ProjectInterpretation.ProjectType.OuterBuild);
         }
 
         internal static IReadOnlyCollection<ProjectGraphNode> GetInnerBuilds(ProjectGraph graph, int projectNumber)
@@ -171,7 +154,7 @@ internal static IReadOnlyCollection<ProjectGraphNode> GetInnerBuilds(ProjectGrap
             else
             {
                 var innerBuilds = GetNodesWithProjectNumber(graph, projectNumber)
-                    .Where(p => IsInnerBuild(p) && p.ProjectInstance.FullPath.Equals(outerBuild.ProjectInstance.FullPath))
+                    .Where(p => p.ProjectType == ProjectInterpretation.ProjectType.InnerBuild && p.ProjectInstance.FullPath.Equals(outerBuild.ProjectInstance.FullPath))
                     .ToArray();
 
                 innerBuilds.ShouldNotBeEmpty();
diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index d3f01d757fb..063df0be739 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -558,9 +558,7 @@ private void AssertBuild(
 
             TransientTestFile CreateTmpFile(TestEnvironment env)
             {
-                return NativeMethodsShared.IsMono && NativeMethodsShared.IsOSX
-                                                ? env.CreateFile(new TransientTestFolder(Path.Combine(Directory.GetCurrentDirectory(), Guid.NewGuid().ToString("N"))))
-                                                : env.CreateFile();
+                return env.CreateFile();
             }
         }
 
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index f2bc8fd22a8..26729eee551 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -2133,7 +2133,7 @@ public void InnerBuildProducedByOuterBuildCanBeReferencedByAnotherNode()
 
             graph.ProjectNodes.Count.ShouldBe(4);
 
-            var outerBuild = graph.GraphRoots.First(IsOuterBuild);
+            var outerBuild = graph.GraphRoots.First(i => i.ProjectType == ProjectInterpretation.ProjectType.OuterBuild);
 
             AssertOuterBuild(outerBuild, graph, additionalGlobalProperties);
             AssertNonMultitargetingNode(GetFirstNodeWithProjectNumber(graph, 2), additionalGlobalProperties);
@@ -2215,7 +2215,7 @@ public void InnerBuildsProducedByOuterBuildsCanBeReferencedByOtherInnerBuilds()
 
             AssertOuterBuild(outerBuild1, graph, additionalGlobalProperties);
 
-            var innerBuild1WithReferenceToInnerBuild2 = outerBuild1.ProjectReferences.FirstOrDefault(n => IsInnerBuild(n) && n.ProjectInstance.GlobalProperties[InnerBuildPropertyName] == "a");
+            var innerBuild1WithReferenceToInnerBuild2 = outerBuild1.ProjectReferences.FirstOrDefault(n => n.ProjectType == ProjectInterpretation.ProjectType.InnerBuild && n.ProjectInstance.GlobalProperties[InnerBuildPropertyName] == "a");
             innerBuild1WithReferenceToInnerBuild2.ShouldNotBeNull();
 
             var outerBuild2 = GetOuterBuild(graph, 2);
diff --git a/src/Build.UnitTests/Instance/TaskItem_Tests.cs b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
index 7c9a8b14f6c..9a9cc0eb4ca 100644
--- a/src/Build.UnitTests/Instance/TaskItem_Tests.cs
+++ b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
@@ -289,11 +289,7 @@ public void Escaping1()
         /// <summary>
         /// Flushing an item through a task run in the task host also should not mess up special characters on the metadata.
         /// </summary>
-#if RUNTIME_TYPE_NETCORE || MONO
-        [Fact(Skip = "FEATURE: TASKHOST")]
-#else
         [Fact]
-#endif
         public void Escaping2()
         {
             string content = ObjectModelHelpers.CleanupFileContents(@"
@@ -346,11 +342,7 @@ public void Escaping2()
         /// <summary>
         /// Flushing an item through a task run in the task host also should not mess up the escaping of the itemspec either.
         /// </summary>
-#if RUNTIME_TYPE_NETCORE || MONO
-        [Fact(Skip = "FEATURE: TASKHOST")]
-#else
         [Fact]
-#endif
         public void Escaping3()
         {
             string content = ObjectModelHelpers.CleanupFileContents(@"
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index dda2456a9f9..b9c1cefc88c 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -9,7 +9,7 @@
     <DefineConstants>$(DefineConstants);MICROSOFT_BUILD_ENGINE_UNITTESTS</DefineConstants>
 
     <!-- Define a constant so we can skip tests that require MSBuildTaskHost -->
-    <DefineConstants Condition="'$(MSBuildRuntimeType)' == 'Core' or '$(MonoBuild)' == 'true'">$(DefineConstants);NO_MSBUILDTASKHOST</DefineConstants>
+    <DefineConstants Condition="'$(MSBuildRuntimeType)' == 'Core'">$(DefineConstants);NO_MSBUILDTASKHOST</DefineConstants>
 
     <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
   </PropertyGroup>
@@ -28,21 +28,20 @@
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
-    <ProjectReference Include="..\MSBuildTaskHost\MSBuildTaskHost.csproj" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' != 'true'" Aliases="MSBuildTaskHost" />
+    <ProjectReference Include="..\MSBuildTaskHost\MSBuildTaskHost.csproj" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" Aliases="MSBuildTaskHost" />
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
 
     <ProjectReference Include="..\Samples\TaskWithDependency\TaskWithDependency.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="TaskWithDependencyResolvedProjectReferencePath">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
-      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' == 'true'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=$(LatestDotNetCoreForMSBuild)</SetTargetFramework>
     </ProjectReference>
     <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" />
 
     <ProjectReference Include="..\Samples\ProjectCachePlugin\ProjectCachePlugin.csproj" Private="false" ReferenceOutputAssembly="false">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
-      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' == 'true'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=$(LatestDotNetCoreForMSBuild)</SetTargetFramework>
     </ProjectReference>
 
@@ -50,27 +49,13 @@
   </ItemGroup>
 
   <ItemGroup>
-    <Compile Include="..\Shared\UnitTests\BuildEventArgsExtension.cs" />
+    <Compile Include="..\Shared\UnitTests\CommunicationUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\EscapingUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\ErrorUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\PrintLineDebugger_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\FileUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\FileMatcher_Tests.cs" />
-    <Compile Include="..\Shared\UnitTests\MockEngine.cs" />
-    <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
     <Compile Include="..\Shared\UnitTests\ResourceUtilities_Tests.cs" />
-    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
-    <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
-    <Compile Include="..\UnitTests.Shared\DriveMapping.cs" />
-    <Compile Include="..\UnitTests.Shared\DummyMappedDrive.cs" />
-    <Compile Include="..\UnitTests.Shared\DummyMappedDriveUtils.cs" />
-    <Compile Include="..\Shared\UnitTests\StreamHelpers.cs" />
-    <Compile Include="..\Shared\UnitTests\EngineTestEnvironment.cs">
-      <Link>EngineTestEnvironment.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs">
-      <Link>TestEnvironment.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\UnitTests\TypeLoader_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\TypeLoader_Dependencies_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\XmakeAttributes_Tests.cs">
@@ -83,22 +68,12 @@
     <Compile Include="..\Shared\UnitTests\TaskParameter_Tests.cs">
       <Link>TaskParameter_Tests.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs" />
     <Compile Include="..\Shared\UnitTests\CopyOnWriteDictionary_Tests.cs">
       <Link>Collections\CopyOnWriteDictionary_Tests.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\TestData\GlobbingTestData.cs">
-      <Link>TestData\GlobbingTestData.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\UnitTests\ImmutableDictionary_Tests.cs" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' == 'Full' and '$(MonoBuild)' != 'true'">
+    <Compile Include="..\Shared\UnitTests\ImmutableDictionary_Tests.cs" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' == 'Full'">
       <Link>Collections\ImmutableDictionary_Tests.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\LongPathSupportDisabledFactAttribute.cs">
-      <Link>Shared\LongPathSupportDisabledFactAttribute.cs</Link>
-    </Compile>
-    <Compile Include="..\UnitTests.Shared\RequiresSymbolicLinksFactAttribute.cs">
-      <Link>RequiresSymbolicLinksFactAttribute.cs</Link>
-    </Compile>
 
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
diff --git a/src/Build.UnitTests/Utilities_Tests.cs b/src/Build.UnitTests/Utilities_Tests.cs
index 491ad832358..6f618546667 100644
--- a/src/Build.UnitTests/Utilities_Tests.cs
+++ b/src/Build.UnitTests/Utilities_Tests.cs
@@ -2,14 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.IO;
-using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using CommunicationsUtilities = Microsoft.Build.Internal.CommunicationsUtilities;
 using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using MSBuildApp = Microsoft.Build.CommandLine.MSBuildApp;
@@ -322,24 +319,6 @@ public void CreateToolsVersionString()
             Assert.Equal("\"66\", \"44\"", result);
         }
 
-        /// <summary>
-        /// Verify our custom way of getting env vars gives the same results as the BCL.
-        /// </summary>
-        [Fact]
-        public void GetEnvVars()
-        {
-            IDictionary<string, string> envVars = CommunicationsUtilities.GetEnvironmentVariables();
-            IDictionary referenceVars = Environment.GetEnvironmentVariables();
-            IDictionary<string, string> referenceVars2 = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-
-            foreach (DictionaryEntry item in referenceVars)
-            {
-                referenceVars2.Add((string)item.Key, (string)item.Value);
-            }
-
-            Helpers.AssertCollectionsValueEqual(envVars, referenceVars2);
-        }
-
         protected string GetXmlContents(string xmlText)
         {
             XmlDocumentWithLocation xmldoc = new XmlDocumentWithLocation(loadAsReadOnly);
diff --git a/src/Build/AssemblyInfo.cs b/src/Build/AssemblyInfo.cs
index 86a5a8073d2..6e57337863d 100644
--- a/src/Build/AssemblyInfo.cs
+++ b/src/Build/AssemblyInfo.cs
@@ -19,6 +19,7 @@
 #endif
 [assembly: InternalsVisibleTo("Microsoft.Build.Framework.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Engine.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
+[assembly: InternalsVisibleTo("Microsoft.Build.UnitTests.Shared, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Conversion.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Tasks.Cop, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 9ece7dbe7ec..fd56c9175f0 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1956,11 +1956,20 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
             {
                 _projectCacheService.InitializePluginsForGraph(projectGraph, submission.BuildRequestData.TargetNames, _executionCancellationTokenSource.Token);
 
-                var targetListTask = projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames);
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode = projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames);
 
-                DumpGraph(projectGraph, targetListTask);
+                DumpGraph(projectGraph, targetsPerNode);
 
-                resultsPerNode = BuildGraph(projectGraph, targetListTask, submission.BuildRequestData);
+                // Non-graph builds verify this in RequestBuilder, but for graph builds we need to disambiguate
+                // between entry nodes and other nodes in the graph since only entry nodes should error. Just do
+                // the verification expicitly before the build even starts.
+                foreach (ProjectGraphNode entryPointNode in projectGraph.EntryPointNodes)
+                {
+                    ImmutableList<string> targetList = targetsPerNode[entryPointNode];
+                    ProjectErrorUtilities.VerifyThrowInvalidProject(targetList.Count > 0, entryPointNode.ProjectInstance.ProjectFileLocation, "NoTargetSpecified");
+                }
+
+                resultsPerNode = BuildGraph(projectGraph, targetsPerNode, submission.BuildRequestData);
             }
             else
             {
diff --git a/src/Build/BackEnd/Components/Communications/CurrentHost.cs b/src/Build/BackEnd/Components/Communications/CurrentHost.cs
index 97855dfd97f..37bc10fc28e 100644
--- a/src/Build/BackEnd/Components/Communications/CurrentHost.cs
+++ b/src/Build/BackEnd/Components/Communications/CurrentHost.cs
@@ -1,7 +1,7 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-#if RUNTIME_TYPE_NETCORE || MONO
+#if RUNTIME_TYPE_NETCORE
 using System.Diagnostics;
 using System.IO;
 using Microsoft.Build.Shared;
@@ -14,7 +14,7 @@ namespace Microsoft.Build.BackEnd
     internal static class CurrentHost
     {
 
-#if RUNTIME_TYPE_NETCORE || MONO
+#if RUNTIME_TYPE_NETCORE
         private static string s_currentHost;
 #endif
 
@@ -24,7 +24,7 @@ internal static class CurrentHost
         /// <returns>The full path to the executable hosting the current process, or null if running on Full Framework on Windows.</returns>
         public static string GetCurrentHost()
         {
-#if RUNTIME_TYPE_NETCORE || MONO
+#if RUNTIME_TYPE_NETCORE
             if (s_currentHost == null)
             {
                 string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, 2),
diff --git a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
index ddec6d79279..ff60a441e23 100644
--- a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
@@ -93,13 +93,9 @@ private Process StartInternal(string msbuildLocation, string commandLineArgs)
 
             string exeName = msbuildLocation;
 
-#if RUNTIME_TYPE_NETCORE || MONO
-            // Mono automagically uses the current mono, to execute a managed assembly
-            if (!NativeMethodsShared.IsMono)
-            {
-                // Run the child process with the same host as the currently-running process.
-                exeName = CurrentHost.GetCurrentHost();
-            }
+#if RUNTIME_TYPE_NETCORE
+            // Run the child process with the same host as the currently-running process.
+            exeName = CurrentHost.GetCurrentHost();
 #endif
 
             if (!NativeMethodsShared.IsWindows)
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 273e6990f13..99e706d2486 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -490,7 +490,7 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
             nodeStream.Connect(timeout);
 
 #if !FEATURE_PIPEOPTIONS_CURRENTUSERONLY
-            if (NativeMethodsShared.IsWindows && !NativeMethodsShared.IsMono)
+            if (NativeMethodsShared.IsWindows)
             {
                 // Verify that the owner of the pipe is us.  This prevents a security hole where a remote node has
                 // been faked up with ACLs that would let us attach to it.  It could then issue fake build requests back to
@@ -514,7 +514,7 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
 
             CommunicationsUtilities.Trace("Reading handshake from pipe {0}", pipeName);
 
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
             nodeStream.ReadEndOfHandshakeSignal(true, timeout);
 #else
             nodeStream.ReadEndOfHandshakeSignal(true);
diff --git a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
index a0dc533bbd1..107393b4e7d 100644
--- a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
+++ b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
@@ -37,7 +37,8 @@ private static void RegisterExceptions()
                 new(typeof(SchedulerCircularDependencyException), (msg, inner) => new SchedulerCircularDependencyException(msg, inner)),
                 new(typeof(RegistryException), (msg, inner) => new RegistryException(msg, inner)),
                 new(typeof(HostObjectException), (msg, inner) => new HostObjectException(msg, inner)),
-                new(typeof(UnbuildableProjectTypeException), (msg, inner) => new UnbuildableProjectTypeException(msg, inner)));
+                new(typeof(UnbuildableProjectTypeException), (msg, inner) => new UnbuildableProjectTypeException(msg, inner)),
+                new(typeof(CriticalTaskException), (msg, inner) => new CriticalTaskException(msg, inner)));
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 0d98b32f5a8..0214e3f4150 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -762,9 +762,13 @@ private void VerifyEntryInActiveOrWaitingState()
 
         /// <summary>
         /// The entry point for the request builder thread.
+        /// Launch the project and gather the results, reporting them back to the BuildRequestEngine.
         /// </summary>
         private async Task RequestThreadProc(bool setThreadParameters)
         {
+            Exception thrownException = null;
+            BuildResult result = null;
+
             try
             {
                 if (setThreadParameters)
@@ -772,42 +776,9 @@ private async Task RequestThreadProc(bool setThreadParameters)
                     SetCommonWorkerThreadParameters();
                 }
                 MSBuildEventSource.Log.RequestThreadProcStart();
-                await BuildAndReport();
-                MSBuildEventSource.Log.RequestThreadProcStop();
-            }
-            catch (ThreadAbortException)
-            {
-                // Do nothing.  This will happen when the thread is forcibly terminated because we are shutting down, for example
-                // when the unit test framework terminates.
-                throw;
-            }
-            catch (Exception e)
-            {
-                // Dump all engine exceptions to a temp file
-                // so that we have something to go on in the
-                // event of a failure
-                ExceptionHandling.DumpExceptionToFile(e);
-
-                // This is fatal: process will terminate: make sure the
-                // debugger launches
-                ErrorUtilities.ThrowInternalError(e.Message, e);
-                throw;
-            }
-        }
-
-        /// <summary>
-        /// Launch the project and gather the results, reporting them back to the BuildRequestEngine.
-        /// </summary>
-        private async Task BuildAndReport()
-        {
-            Exception thrownException = null;
-            BuildResult result = null;
-            VerifyEntryInActiveState();
-
-            // Start the build request
-            try
-            {
+                VerifyEntryInActiveState();
                 result = await BuildProject();
+                MSBuildEventSource.Log.RequestThreadProcStop();
             }
             catch (InvalidProjectFileException ex)
             {
@@ -853,17 +824,32 @@ private async Task BuildAndReport()
 
                     loggingContext.LogCommentFromText(MessageImportance.Low, ex.ToString());
                 }
-                else
+                else if (ex is ThreadAbortException)
+                {
+                    // Do nothing.  This will happen when the thread is forcibly terminated because we are shutting down, for example
+                    // when the unit test framework terminates.
+                    throw;
+                }
+                else if (ex is not CriticalTaskException)
                 {
                     (((LoggingContext)_projectLoggingContext) ?? _nodeLoggingContext).LogError(BuildEventFileInfo.Empty, "UnhandledMSBuildError", ex.ToString());
                 }
 
                 if (ExceptionHandling.IsCriticalException(ex))
                 {
+                    // Dump all engine exceptions to a temp file
+                    // so that we have something to go on in the
+                    // event of a failure
+                    ExceptionHandling.DumpExceptionToFile(ex);
+
                     // This includes InternalErrorException, which we definitely want a callstack for.
                     // Fortunately the default console UnhandledExceptionHandler will log the callstack even
                     // for unhandled exceptions thrown from threads other than the main thread, like here.
                     // Less fortunately NUnit doesn't.
+
+                    // This is fatal: process will terminate: make sure the
+                    // debugger launches
+                    ErrorUtilities.ThrowInternalError(ex.Message, ex);
                     throw;
                 }
             }
@@ -879,8 +865,6 @@ private async Task BuildAndReport()
 
                 ReportResultAndCleanUp(result);
             }
-
-            return;
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index ee09e5be50f..b4d621fce8d 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -814,8 +814,18 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                         }
                     }
                 }
-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex) && Environment.GetEnvironmentVariable("MSBUILDDONOTCATCHTASKEXCEPTIONS") != "1")
+                catch (Exception ex)
                 {
+                    if (ExceptionHandling.IsCriticalException(ex) || Environment.GetEnvironmentVariable("MSBUILDDONOTCATCHTASKEXCEPTIONS") == "1")
+                    {
+                        taskLoggingContext.LogFatalTaskError(
+                            ex,
+                            new BuildEventFileInfo(_targetChildInstance.Location),
+                            _taskNode.Name);
+
+                        throw new CriticalTaskException(ex);
+                    }
+
                     taskException = ex;
                 }
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 25039ccd712..a7f54890bbd 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -9,6 +9,7 @@
 using System.Xml;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -39,27 +40,33 @@ internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()
             var resolvers = !string.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> { new DefaultSdkResolver() }
                 : new List<SdkResolver>();
-
             return resolvers;
         }
 
         internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)
         {
+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStart();
             var resolvers = !string.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
-                new List<SdkResolver> { new DefaultSdkResolver() }
-                : new List<SdkResolver>();
+                    new List<SdkResolver> { new DefaultSdkResolver() }
+                    : new List<SdkResolver>();
+            try
+            {   
+                var potentialResolvers = FindPotentialSdkResolvers(
+                    Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, "SdkResolvers"), location);
 
-            var potentialResolvers = FindPotentialSdkResolvers(
-                Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, "SdkResolvers"), location);
+                if (potentialResolvers.Count == 0)
+                {
+                    return resolvers;
+                }
 
-            if (potentialResolvers.Count == 0)
-            {
-                return resolvers;
+                foreach (var potentialResolver in potentialResolvers)
+                {
+                    LoadResolvers(potentialResolver, location, resolvers);
+                }
             }
-
-            foreach (var potentialResolver in potentialResolvers)
+            finally
             {
-                LoadResolvers(potentialResolver, location, resolvers);
+                MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);
             }
 
             return resolvers.OrderBy(t => t.Priority).ToList();
@@ -67,8 +74,18 @@ internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation loc
 
         internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)
         {
-            return FindPotentialSdkResolversManifests(
+            MSBuildEventSource.Log.SdkResolverFindResolversManifestsStart();
+            IReadOnlyList<SdkResolverManifest> allResolversManifests = null;
+            try
+            {
+                allResolversManifests = FindPotentialSdkResolversManifests(
                 Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot, "SdkResolvers"), location);
+            }
+            finally
+            {
+                MSBuildEventSource.Log.SdkResolverFindResolversManifestsStop(allResolversManifests?.Count ?? 0);
+            }
+            return allResolversManifests;
         }
 
         /// <summary>
@@ -226,20 +243,6 @@ protected virtual IEnumerable<Type> GetResolverTypes(Assembly assembly)
         protected virtual Assembly LoadResolverAssembly(string resolverPath)
         {
 #if !FEATURE_ASSEMBLYLOADCONTEXT
-            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))
-            {
-                string resolverFileName = Path.GetFileNameWithoutExtension(resolverPath);
-                if (resolverFileName.Equals("Microsoft.DotNet.MSBuildSdkResolver", StringComparison.OrdinalIgnoreCase))
-                {
-                    // This will load the resolver assembly into the default load context if possible, and fall back to LoadFrom context.
-                    // We very much prefer the default load context because it allows native images to be used by the CLR, improving startup perf.
-                    AssemblyName assemblyName = new AssemblyName(resolverFileName)
-                    {
-                        CodeBase = resolverPath,
-                    };
-                    return Assembly.Load(assemblyName);
-                }
-            }
             return Assembly.LoadFrom(resolverPath);
 #else
             return s_loader.LoadFromPath(resolverPath);
@@ -248,8 +251,16 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath)
 
         protected internal virtual IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, ElementLocation location)
         {
+            MSBuildEventSource.Log.SdkResolverLoadResolversStart();
             var resolvers = new List<SdkResolver>();
-            LoadResolvers(manifest.Path, location, resolvers);
+            try
+            {
+                LoadResolvers(manifest.Path, location, resolvers);
+            }
+            finally
+            {
+                MSBuildEventSource.Log.SdkResolverLoadResolversStop(manifest.DisplayName ?? string.Empty, resolvers.Count);
+            }
             return resolvers;
         }
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 56ff6299a87..f2f71286e8e 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -298,10 +298,8 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
                         if (!_manifestToResolvers.TryGetValue(resolverManifest, out newResolvers))
                         {
                             // Loading of the needed resolvers.
-                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
                             newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, sdkReferenceLocation);
                             _manifestToResolvers[resolverManifest] = newResolvers;
-                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName ?? string.Empty, newResolvers.Count);
                         }
                     }
                 }
@@ -517,9 +515,7 @@ private void Initialize(ElementLocation location)
                     return;
                 }
 
-                MSBuildEventSource.Log.SdkResolverServiceInitializeStart();
                 _resolversList = _sdkResolverLoader.LoadAllResolvers(location);
-                MSBuildEventSource.Log.SdkResolverServiceInitializeStop(_resolversList.Count);
             }
         }
 
@@ -532,7 +528,6 @@ private void RegisterResolversManifests(ElementLocation location)
                     return;
                 }
 
-                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
                 var allResolversManifests = _sdkResolverLoader.GetResolversManifests(location);
 
                 _manifestToResolvers = new Dictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>>();
@@ -546,15 +541,11 @@ private void RegisterResolversManifests(ElementLocation location)
                     IReadOnlyList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers();
                     if (defaultResolvers.Count > 0)
                     {
-                        MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
                         sdkDefaultResolversManifest = new SdkResolverManifest(DisplayName: "DefaultResolversManifest", Path: null, ResolvableSdkRegex: null);
                         _manifestToResolvers[sdkDefaultResolversManifest] = defaultResolvers;
-                        MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(sdkDefaultResolversManifest.DisplayName ?? string.Empty, defaultResolvers.Count);
                     }
                 }
 
-                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStop(allResolversManifests.Count);
-
                 // Break the list of all resolvers manifests into two parts: manifests with specific and general resolvers.
                 _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
                 _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 69f7990dd51..51ac31c32dd 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -472,11 +472,18 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
             // so reset it away from a user-requested folder that may get deleted.
             NativeMethodsShared.SetCurrentDirectory(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory);
 
-            // Restore the original environment.
+            // Restore the original environment, best effort.
             // If the node was never configured, this will be null.
             if (_savedEnvironment != null)
             {
-                CommunicationsUtilities.SetEnvironment(_savedEnvironment);
+                try
+                {
+                    CommunicationsUtilities.SetEnvironment(_savedEnvironment);
+                }
+                catch (Exception ex)
+                {
+                    CommunicationsUtilities.Trace("Failed to restore the original environment: {0}.", ex);
+                }
                 Traits.UpdateFromEnvironment();
             }
             try
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 4418a48a63d..8296519a5b0 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1266,30 +1266,6 @@ private bool InitializeTaskVectorParameter(
             return success;
         }
 
-        /// <summary>
-        /// Variation to handle arrays, to help with logging the parameters.
-        /// </summary>
-        /// <remarks>
-        /// Logging currently enabled only by an env var.
-        /// </remarks>
-        private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList parameterValue)
-        {
-            if (LogTaskInputs &&
-                !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents &&
-                parameterValue.Count > 0 &&
-                parameter.Log)
-            {
-                ItemGroupLoggingHelper.LogTaskParameter(
-                    _taskLoggingContext,
-                    TaskParameterMessageKind.TaskInput,
-                    parameter.Name,
-                    parameterValue,
-                    parameter.LogItemMetadata);
-            }
-
-            return InternalSetTaskParameter(parameter, (object)parameterValue);
-        }
-
         private static readonly string TaskParameterFormatString = ItemGroupLoggingHelper.TaskParameterPrefix + "{0}={1}";
 
         /// <summary>
@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(
 
             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)
             {
-                // If the type is a list, we already logged the parameters
-                if (!(parameterValue is IList))
+                IList parameterValueAsList = parameterValue as IList;
+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);
+
+                // Legacy textual logging for parameters that are not lists.
+                if (legacyBehavior && parameterValueAsList == null)
                 {
                     _taskLoggingContext.LogCommentFromText(
-                        MessageImportance.Low,
-                        TaskParameterFormatString,
-                        parameter.Name,
-                        ItemGroupLoggingHelper.GetStringFromParameterValue(parameterValue));
+                       MessageImportance.Low,
+                       TaskParameterFormatString,
+                       parameter.Name,
+                       ItemGroupLoggingHelper.GetStringFromParameterValue(parameterValue));
+                }
+
+                if (parameter.Log)
+                {
+                    // Structured logging for all parameters that have logging enabled and are not empty lists.
+                    if (parameterValueAsList?.Count > 0 || (parameterValueAsList == null && !legacyBehavior))
+                    {
+                        ItemGroupLoggingHelper.LogTaskParameter(
+                            _taskLoggingContext,
+                            TaskParameterMessageKind.TaskInput,
+                            parameter.Name,
+                            parameterValueAsList ?? new object[] { parameterValue },
+                            parameter.LogItemMetadata);
+                    }
                 }
             }
 
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 86c6a442d44..92e920c3f80 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -1649,7 +1649,7 @@ public void ReloadFrom(string path, bool throwIfUnsavedChanges = true, bool? pre
         /// <summary>
         /// Reload the existing project root element from the given <paramref name="reader"/>
         /// A reload operation completely replaces the state of this <see cref="ProjectRootElement"/> object. This operation marks the
-        /// object as dirty (see <see cref="ProjectRootElement.MarkDirty"/> for side effects).
+        /// object as dirty.
         ///
         /// If the new state has invalid XML or MSBuild syntax, then this method throws an <see cref="InvalidProjectFileException"/>.
         /// When this happens, the state of this object does not change.
diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index 3880a57f618..97c8e269da4 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -8,7 +8,7 @@
 using System.Security;
 using System.Text;
 using System.Xml;
-#if !NETFRAMEWORK || MONO
+#if !NETFRAMEWORK
 using Microsoft.Build.Shared;
 #endif
 
@@ -157,7 +157,7 @@ public string RelativePath
 
             internal set
             {
-#if NETFRAMEWORK && !MONO
+#if NETFRAMEWORK
                 // Avoid loading System.Runtime.InteropServices.RuntimeInformation in full-framework
                 // cases. It caused https://github.com/NuGet/Home/issues/6918.
                 _relativePath = value;
@@ -184,7 +184,7 @@ public string AbsolutePath
                     {
                         try
                         {
-#if NETFRAMEWORK && !MONO
+#if NETFRAMEWORK
                             _absolutePath = Path.GetFullPath(_absolutePath);
 #else
                             _absolutePath = FileUtilities.NormalizePath(_absolutePath);
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index cd5b9de17d9..791c88c741c 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Build.Evaluation
     /// Edits to this project always update the backing XML.
     /// </summary>
     // UNDONE: (Multiple configurations.) Protect against problems when attempting to edit, after edits were made to the same ProjectRootElement either directly or through other projects evaluated from that ProjectRootElement.
-    [DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} #GlobalProperties={implementation._data.GlobalPropertiesDictionary.Count} #Properties={implementation._data.Properties.Count} #ItemTypes={implementation._data.ItemTypes.Count} #ItemDefinitions={implementation._data.ItemDefinitions.Count} #Items={implementation._data.Items.Count} #Targets={implementation._data.Targets.Count}")]
+    [DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} {implementation}")]
     public class Project : ILinkableObject
     {
         /// <summary>
@@ -1812,6 +1812,7 @@ internal void VerifyThrowInvalidOperationNotImported(ProjectRootElement otherXml
         /// <summary>
         /// Internal project evaluation implementation.
         /// </summary>
+        [DebuggerDisplay("#GlobalProperties={_data.GlobalPropertiesDictionary.Count} #Properties={_data.Properties.Count} #ItemTypes={_data.ItemTypes.Count} #ItemDefinitions={_data.ItemDefinitions.Count} #Items={_data.Items.Count} #Targets={_data.Targets.Count}")]
         private class ProjectImpl : ProjectLink, IProjectLinkInternal
         {
             /// <summary>
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index 212fb7fecc1..bf9ae352007 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -915,8 +915,6 @@ private void InitializeProperties(ILoggingService loggingServices, BuildEventCon
                 reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,
 #if RUNTIME_TYPE_NETCORE
                     Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core",
-#elif MONO
-                    NativeMethodsShared.IsMono ? "Mono" : "Full");
 #else
                     "Full",
 #endif
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index dc91a43e774..0799d38db90 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -179,16 +179,12 @@ void ReadConfigToolset()
                             FrameworkLocationHelper.GetPathToDotNetFrameworkV40(DotNetFrameworkArchitecture.Current);
                         if (v4Dir != null && !toolsets.ContainsKey("4.0"))
                         {
-                            // Create standard properties. On Mono they are well known
-                            var buildProperties =
-                                CreateStandardProperties(globalProperties, "4.0", libraryPath, v4Dir);
-
                             toolsets.Add(
                                 "4.0",
                                 new Toolset(
                                     "4.0",
                                     v4Dir,
-                                    buildProperties,
+                                    buildProperties: null,
                                     environmentProperties,
                                     globalProperties,
                                     null,
@@ -210,21 +206,12 @@ void ReadConfigToolset()
                                     continue;
                                 }
 
-                                if (NativeMethodsShared.IsMono && Version.TryParse(version, out Version parsedVersion) && parsedVersion.Major > 14)
-                                {
-                                    continue;
-                                }
-
-                                // Create standard properties. On Mono they are well known
-                                var buildProperties =
-                                    CreateStandardProperties(globalProperties, version, xbuildToolsetsDir, binPath);
-
                                 toolsets.Add(
                                     version,
                                     new Toolset(
                                         version,
                                         binPath,
-                                        buildProperties,
+                                        buildProperties: null,
                                         environmentProperties,
                                         globalProperties,
                                         null,
@@ -535,7 +522,6 @@ private Toolset ReadToolset(
                 InvalidToolsetDefinitionException.Throw("ConflictingValuesOfMSBuildToolsPath", toolsVersion.Name, toolsVersion.Source.LocationString);
             }
 
-            AppendStandardProperties(properties, globalProperties, toolsVersion.Name, null, toolsPath);
             Toolset toolset = null;
 
             try
@@ -551,100 +537,6 @@ private Toolset ReadToolset(
             return toolset;
         }
 
-        /// <summary>
-        /// Create a dictionary with standard properties.
-        /// </summary>
-        private static PropertyDictionary<ProjectPropertyInstance> CreateStandardProperties(
-            PropertyDictionary<ProjectPropertyInstance> globalProperties,
-            string version,
-            string root,
-            string toolsPath)
-        {
-            // Create standard properties. On Mono they are well known
-            if (!NativeMethodsShared.IsMono)
-            {
-                return null;
-            }
-            PropertyDictionary<ProjectPropertyInstance> buildProperties =
-                new PropertyDictionary<ProjectPropertyInstance>();
-            AppendStandardProperties(buildProperties, globalProperties, version, root, toolsPath);
-            return buildProperties;
-        }
-
-        /// <summary>
-        /// Appends standard properties to a dictionary. These properties are read from
-        /// the registry under Windows (they are a part of a toolset definition).
-        /// </summary>
-        private static void AppendStandardProperties(
-            PropertyDictionary<ProjectPropertyInstance> properties,
-            PropertyDictionary<ProjectPropertyInstance> globalProperties,
-            string version,
-            string root,
-            string toolsPath)
-        {
-            if (NativeMethodsShared.IsMono)
-            {
-                var v4Dir = FrameworkLocationHelper.GetPathToDotNetFrameworkV40(DotNetFrameworkArchitecture.Current)
-                            + Path.DirectorySeparatorChar;
-                var v35Dir = FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current)
-                             + Path.DirectorySeparatorChar;
-
-                if (root == null)
-                {
-                    var libraryPath = NativeMethodsShared.FrameworkBasePath;
-                    if (toolsPath.StartsWith(libraryPath))
-                    {
-                        root = Path.GetDirectoryName(toolsPath);
-                        if (toolsPath.EndsWith("bin"))
-                        {
-                            root = Path.GetDirectoryName(root);
-                        }
-                    }
-                    else
-                    {
-                        root = libraryPath;
-                    }
-                }
-
-                root += Path.DirectorySeparatorChar;
-
-                // Global properties cannot be overwritten
-                if (globalProperties["FrameworkSDKRoot"] == null && properties["FrameworkSDKRoot"] == null)
-                {
-                    properties.Set(ProjectPropertyInstance.Create("FrameworkSDKRoot", root, true, false));
-                }
-                if (globalProperties["MSBuildToolsRoot"] == null && properties["MSBuildToolsRoot"] == null)
-                {
-                    properties.Set(ProjectPropertyInstance.Create("MSBuildToolsRoot", root, true, false));
-                }
-                if (globalProperties["MSBuildFrameworkToolsPath"] == null
-                    && properties["MSBuildFrameworkToolsPath"] == null)
-                {
-                    properties.Set(ProjectPropertyInstance.Create("MSBuildFrameworkToolsPath", toolsPath, true, false));
-                }
-                if (globalProperties["MSBuildFrameworkToolsPath32"] == null
-                    && properties["MSBuildFrameworkToolsPath32"] == null)
-                {
-                    properties.Set(
-                        ProjectPropertyInstance.Create("MSBuildFrameworkToolsPath32", toolsPath, true, false));
-                }
-                if (globalProperties["MSBuildRuntimeVersion"] == null && properties["MSBuildRuntimeVersion"] == null)
-                {
-                    properties.Set(ProjectPropertyInstance.Create("MSBuildRuntimeVersion", version, true, false));
-                }
-                if (!string.IsNullOrEmpty(v35Dir) && globalProperties["SDK35ToolsPath"] == null
-                    && properties["SDK35ToolsPath"] == null)
-                {
-                    properties.Set(ProjectPropertyInstance.Create("SDK35ToolsPath", v35Dir, true, false));
-                }
-                if (!string.IsNullOrEmpty(v4Dir) && globalProperties["SDK40ToolsPath"] == null
-                    && properties["SDK40ToolsPath"] == null)
-                {
-                    properties.Set(ProjectPropertyInstance.Create("SDK40ToolsPath", v4Dir, true, false));
-                }
-            }
-        }
-
         /// <summary>
         /// Processes a particular ToolsetPropertyDefinition into the correct value and location in the initial and/or final property set.
         /// </summary>
diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 649ae9ac856..c4130775330 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -26,20 +26,29 @@ public class EvaluationContext
         public enum SharingPolicy
         {
             /// <summary>
-            /// Instructs the <see cref="EvaluationContext"/> to reuse state between the different project evaluations that use it.
+            /// Instructs the <see cref="EvaluationContext"/> to reuse all cached state between the different project evaluations that use it.
             /// </summary>
             Shared,
 
             /// <summary>
-            /// Instructs the <see cref="EvaluationContext"/> not to reuse state between the different project evaluations that use it.
+            /// Instructs the <see cref="EvaluationContext"/> to not reuse any cached state between the different project evaluations that use it.
             /// </summary>
-            Isolated
-        }
+            Isolated,
 
-        internal static Action<EvaluationContext> TestOnlyHookOnCreate { get; set; }
+            /// <summary>
+            /// Instructs the <see cref="EvaluationContext"/> to reuse SDK resolver cache between the different project evaluations that use it.
+            /// No other cached state is reused.
+            /// </summary>
+            SharedSDKCache,
+        }
 
+        /// <summary>
+        /// For contexts that are not fully shared, this field tracks whether the instance has already been used for evaluation.
+        /// </summary>
         private int _used;
 
+        internal static Action<EvaluationContext> TestOnlyHookOnCreate { get; set; }
+
         internal SharingPolicy Policy { get; }
 
         internal ISdkResolverService SdkResolverService { get; }
@@ -65,28 +74,26 @@ private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ISdkReso
         /// <summary>
         ///     Factory for <see cref="EvaluationContext" />
         /// </summary>
+        /// <param name="policy">The <see cref="SharingPolicy"/> to use.</param>
         public static EvaluationContext Create(SharingPolicy policy)
         {
-
-            // ReSharper disable once IntroduceOptionalParameters.Global
-            // do not remove this method to avoid breaking binary compatibility
+            // Do not remove this method to avoid breaking binary compatibility.
             return Create(policy, fileSystem: null);
         }
 
         /// <summary>
         ///     Factory for <see cref="EvaluationContext" />
         /// </summary>
-        /// <param name="policy"> The <see cref="SharingPolicy"/> to use.</param>
+        /// <param name="policy">The <see cref="SharingPolicy"/> to use.</param>
         /// <param name="fileSystem">The <see cref="IFileSystem"/> to use.
         ///     This parameter is compatible only with <see cref="SharingPolicy.Shared"/>.
-        ///     The method throws if a file system is used with <see cref="SharingPolicy.Isolated"/>.
-        ///     The reasoning is that <see cref="SharingPolicy.Isolated"/> means not reusing any caches between evaluations,
+        ///     The method throws if a file system is used with <see cref="SharingPolicy.Isolated"/> or <see cref="SharingPolicy.SharedSDKCache"/>.
+        ///     The reasoning is that these values guarantee not reusing file system caches between evaluations,
         ///     and the passed in <paramref name="fileSystem"/> might cache state.
         /// </param>
         public static EvaluationContext Create(SharingPolicy policy, MSBuildFileSystemBase fileSystem)
         {
-            // Unsupported case: isolated context with non null file system.
-            // Isolated means caches aren't reused, but the given file system might cache.
+            // Unsupported case: not-fully-shared context with non null file system.
             ErrorUtilities.VerifyThrowArgument(
                 policy == SharingPolicy.Shared || fileSystem == null,
                 "IsolatedContextDoesNotSupportFileSystem");
@@ -100,27 +107,28 @@ public static EvaluationContext Create(SharingPolicy policy, MSBuildFileSystemBa
             return context;
         }
 
-        private EvaluationContext CreateUsedIsolatedContext()
-        {
-            var context = Create(SharingPolicy.Isolated);
-            context._used = 1;
-
-            return context;
-        }
-
         internal EvaluationContext ContextForNewProject()
         {
-            // Projects using isolated contexts need to get a new context instance
+            // Projects using Isolated and SharedSDKCache contexts need to get a new context instance.
             switch (Policy)
             {
                 case SharingPolicy.Shared:
                     return this;
+                case SharingPolicy.SharedSDKCache:
                 case SharingPolicy.Isolated:
-                    // reuse the first isolated context if it has not seen an evaluation yet.
-                    var previousValueWasUsed = Interlocked.CompareExchange(ref _used, 1, 0);
-                    return previousValueWasUsed == 0
-                        ? this
-                        : CreateUsedIsolatedContext();
+                    // Reuse the first not-fully-shared context if it's not been used for an evaluation yet.
+                    if (Interlocked.CompareExchange(ref _used, 1, 0) == 0)
+                    {
+                        return this;
+                    }
+                    // Create a copy if this context has already been used. Mark it used.
+                    EvaluationContext context = new EvaluationContext(Policy, fileSystem: null, sdkResolverService: Policy == SharingPolicy.SharedSDKCache ? SdkResolverService : null)
+                    {
+                        _used = 1,
+                    };
+                    TestOnlyHookOnCreate?.Invoke(context);
+                    return context;
+
                 default:
                     ErrorUtilities.ThrowInternalErrorUnreachable();
                     return null;
@@ -134,11 +142,10 @@ internal EvaluationContext ContextForNewProject()
         /// <returns>The new evaluation context.</returns>
         internal EvaluationContext ContextWithFileSystem(IFileSystem fileSystem)
         {
-            var newContext = new EvaluationContext(this.Policy, fileSystem, this.SdkResolverService, this.FileEntryExpansionCache)
+            return new EvaluationContext(Policy, fileSystem, SdkResolverService, FileEntryExpansionCache)
             {
-                _used = 1
+                _used = 1,
             };
-            return newContext;
         }
     }
 }
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 5ba4caef172..780d58db6b1 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1150,9 +1150,6 @@ private void AddBuiltInProperties()
 #if RUNTIME_TYPE_NETCORE
             SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType,
                 Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core");
-#elif MONO
-            SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType,
-                                                        NativeMethodsShared.IsMono ? "Mono" : "Full");
 #else
             SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType, "Full");
 #endif
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index b98f902e994..c8c3d32f072 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -1478,7 +1478,15 @@ internal static string ConvertToString(object valueToConvert)
                 else
                 {
                     // The fall back is always to just convert to a string directly.
-                    convertedString = valueToConvert.ToString();
+                    // Issue: https://github.com/dotnet/msbuild/issues/9757
+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12))
+                    {
+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture);
+                    }
+                    else
+                    {
+                        convertedString = valueToConvert.ToString();
+                    }
                 }
 
                 return convertedString;
@@ -4159,7 +4167,15 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         {
                             if (TryGetArg(args, out string arg0))
                             {
-                                returnVal = IntrinsicFunctions.StableStringHash(arg0);
+                                // Prevent loading methods refs from StringTools if ChangeWave opted out.
+                                returnVal = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10)
+                                    ? IntrinsicFunctions.StableStringHash(arg0)
+                                    : IntrinsicFunctions.StableStringHashLegacy(arg0);
+                                return true;
+                            }
+                            else if (TryGetArgs(args, out string arg1, out string arg2) && Enum.TryParse<IntrinsicFunctions.StringHashingAlgorithm>(arg2, true, out var hashAlgorithm))
+                            {
+                                returnVal = IntrinsicFunctions.StableStringHash(arg1, hashAlgorithm);
                                 return true;
                             }
                         }
@@ -5292,7 +5308,7 @@ private static bool IsInstanceMethodAvailable(string methodName)
                 }
 
                 // This could be expanded to an allow / deny list.
-                return methodName != "GetType";
+                return !string.Equals("GetType", methodName, StringComparison.OrdinalIgnoreCase);
             }
 
             /// <summary>
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 37312b8c83e..6f8c5ed00f6 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
 using System.Text;
@@ -14,6 +15,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
+using Microsoft.NET.StringTools;
 using Microsoft.Win32;
 
 // Needed for DoesTaskHostExistForParameters
@@ -397,12 +399,60 @@ internal static string ConvertFromBase64(string toDecode)
             return Encoding.UTF8.GetString(Convert.FromBase64String(toDecode));
         }
 
+        internal enum StringHashingAlgorithm
+        {
+            // Legacy way of calculating StableStringHash - which was derived from string GetHashCode
+            Legacy,
+            // FNV-1a 32bit hash
+            Fnv1a32bit,
+            // Custom FNV-1a 32bit hash - optimized for speed by hashing by the whole chars (not individual bytes)
+            Fnv1a32bitFast,
+            // FNV-1a 64bit hash
+            Fnv1a64bit,
+            // Custom FNV-1a 64bit hash - optimized for speed by hashing by the whole chars (not individual bytes)
+            Fnv1a64bitFast,
+            // SHA256 hash - gets the hex string of the hash (with no prefix)
+            Sha256
+        }
+
         /// <summary>
-        /// Hash the string independent of bitness and target framework.
+        /// Legacy implementation that doesn't lead to JIT pulling the new functions from StringTools (so those must not be referenced anywhere in the function body)
+        ///  - for cases where the calling code would erroneously load old version of StringTools alongside of the new version of Microsoft.Build.
+        /// Should be removed once Wave17_10 is removed.
         /// </summary>
-        internal static int StableStringHash(string toHash)
-        {
-            return CommunicationsUtilities.GetHashCode(toHash);
+        internal static object StableStringHashLegacy(string toHash)
+            => CommunicationsUtilities.GetHashCode(toHash);
+
+        /// <summary>
+        /// Hash the string independent of bitness, target framework and default codepage of the environment.
+        /// We do not want this to be inlined, as then the Expander would call directly the new overload, and hence
+        ///  JIT load the functions from StringTools - so we would not be able to prevent their loading with ChangeWave as we do now.
+        /// </summary>
+        [MethodImpl(MethodImplOptions.NoInlining)]
+        internal static object StableStringHash(string toHash)
+            => StableStringHash(toHash, StringHashingAlgorithm.Legacy);
+
+        internal static object StableStringHash(string toHash, StringHashingAlgorithm algo) =>
+            algo switch
+            {
+                StringHashingAlgorithm.Legacy => CommunicationsUtilities.GetHashCode(toHash),
+                StringHashingAlgorithm.Fnv1a32bit => FowlerNollVo1aHash.ComputeHash32(toHash),
+                StringHashingAlgorithm.Fnv1a32bitFast => FowlerNollVo1aHash.ComputeHash32Fast(toHash),
+                StringHashingAlgorithm.Fnv1a64bit => FowlerNollVo1aHash.ComputeHash64(toHash),
+                StringHashingAlgorithm.Fnv1a64bitFast => FowlerNollVo1aHash.ComputeHash64Fast(toHash),
+                StringHashingAlgorithm.Sha256 => CalculateSha256(toHash),
+                _ => throw new ArgumentOutOfRangeException(nameof(algo), algo, null)
+            };
+
+        private static string CalculateSha256(string toHash)
+        {
+            var sha = System.Security.Cryptography.SHA256.Create();
+            var hashResult = new StringBuilder();
+            foreach (byte theByte in sha.ComputeHash(Encoding.UTF8.GetBytes(toHash)))
+            {
+                hashResult.Append(theByte.ToString("x2"));
+            }
+            return hashResult.ToString();
         }
 
         /// <summary>
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index e343a98c4cc..dabd4276bc6 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -137,7 +137,7 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,
             {
                 var currentNode = parsedProject.Value.GraphNode;
 
-                var requiresTransitiveProjectReferences = _projectInterpretation.RequiresTransitiveProjectReferences(currentNode.ProjectInstance);
+                var requiresTransitiveProjectReferences = _projectInterpretation.RequiresTransitiveProjectReferences(currentNode);
 
                 foreach (var referenceInfo in parsedProject.Value.ReferenceInfos)
                 {
@@ -572,7 +572,7 @@ private void SubmitProjectForParsing(ConfigurationMetadata projectToEvaluate)
         {
             var referenceInfos = new List<ProjectInterpretation.ReferenceInfo>();
 
-            foreach (var referenceInfo in _projectInterpretation.GetReferences(parsedProject.ProjectInstance, _projectCollection, GetInstanceForPlatformNegotiationWithCaching))
+            foreach (var referenceInfo in _projectInterpretation.GetReferences(parsedProject, _projectCollection, GetInstanceForPlatformNegotiationWithCaching))
             {
                 if (FileUtilities.IsSolutionFilename(referenceInfo.ReferenceConfiguration.ProjectFullPath))
                 {
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 39993e3a4fc..c9b55477667 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -635,7 +635,7 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                 // Queue the project references for visitation, if the edge hasn't already been traversed.
                 foreach (var referenceNode in node.ProjectReferences)
                 {
-                    var applicableTargets = targetsToPropagate.GetApplicableTargetsForReference(referenceNode.ProjectInstance);
+                    var applicableTargets = targetsToPropagate.GetApplicableTargetsForReference(referenceNode);
 
                     if (applicableTargets.IsEmpty)
                     {
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index bb14d663c84..f5f5f9e2c4b 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -1,6 +1,7 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
@@ -21,11 +22,15 @@ public sealed class ProjectGraphNode
         private readonly HashSet<ProjectGraphNode> _projectReferences = new HashSet<ProjectGraphNode>();
         private readonly HashSet<ProjectGraphNode> _referencingProjects = new HashSet<ProjectGraphNode>();
 
+        internal ProjectInterpretation.ProjectType ProjectType { get; }
+
         // No public creation.
         internal ProjectGraphNode(ProjectInstance projectInstance)
         {
             ErrorUtilities.VerifyThrowInternalNull(projectInstance, nameof(projectInstance));
             ProjectInstance = projectInstance;
+
+            ProjectType = ProjectInterpretation.GetProjectType(projectInstance);
         }
 
         /// <summary>
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index d617f78e35a..93aebf6c1af 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -78,12 +78,14 @@ public TargetSpecification(string target, bool skipIfNonexistent)
             public bool SkipIfNonexistent { get; }
         }
 
-        public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstance, ProjectCollection projectCollection, ProjectGraph.ProjectInstanceFactoryFunc projectInstanceFactory)
+        public IEnumerable<ReferenceInfo> GetReferences(ProjectGraphNode projectGraphNode, ProjectCollection projectCollection, ProjectGraph.ProjectInstanceFactoryFunc projectInstanceFactory)
         {
             IEnumerable<ProjectItemInstance> projectReferenceItems;
             IEnumerable<GlobalPropertiesModifier> globalPropertiesModifiers = null;
 
-            switch (GetProjectType(requesterInstance))
+            ProjectInstance requesterInstance = projectGraphNode.ProjectInstance;
+
+            switch (projectGraphNode.ProjectType)
             {
                 case ProjectType.OuterBuild:
                     projectReferenceItems = ConstructInnerBuildReferences(requesterInstance);
@@ -251,7 +253,7 @@ public void AddInnerBuildEdges(Dictionary<ConfigurationMetadata, ParsedProject>
             {
                 ProjectGraphNode outerBuild = node.Value.GraphNode;
 
-                if (GetProjectType(outerBuild.ProjectInstance) == ProjectType.OuterBuild && outerBuild.ReferencingProjects.Count != 0)
+                if (outerBuild.ProjectType == ProjectType.OuterBuild && outerBuild.ReferencingProjects.Count != 0)
                 {
                     foreach (ProjectGraphNode innerBuild in outerBuild.ProjectReferences)
                     {
@@ -524,18 +526,18 @@ public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance proj
                 return new TargetsToPropagate(targetsForOuterBuild.ToImmutable(), targetsForInnerBuild.ToImmutable());
             }
 
-            public ImmutableList<string> GetApplicableTargetsForReference(ProjectInstance reference)
+            public ImmutableList<string> GetApplicableTargetsForReference(ProjectGraphNode projectGraphNode)
             {
                 ImmutableList<string> RemoveNonexistentTargetsIfSkippable(ImmutableList<TargetSpecification> targets)
                 {
                     // Keep targets that are non-skippable or that exist but are skippable.
                     return targets
-                        .Where(t => !t.SkipIfNonexistent || reference.Targets.ContainsKey(t.Target))
+                        .Where(t => !t.SkipIfNonexistent || projectGraphNode.ProjectInstance.Targets.ContainsKey(t.Target))
                         .Select(t => t.Target)
                         .ToImmutableList();
                 }
 
-                return GetProjectType(reference) switch
+                return projectGraphNode.ProjectType switch
                 {
                     ProjectType.InnerBuild => RemoveNonexistentTargetsIfSkippable(_allTargets),
                     ProjectType.OuterBuild => RemoveNonexistentTargetsIfSkippable(_outerBuildTargets),
@@ -545,14 +547,16 @@ ImmutableList<string> RemoveNonexistentTargetsIfSkippable(ImmutableList<TargetSp
             }
         }
 
-        public bool RequiresTransitiveProjectReferences(ProjectInstance projectInstance)
+        public bool RequiresTransitiveProjectReferences(ProjectGraphNode projectGraphNode)
         {
             // Outer builds do not get edges based on ProjectReference or their transitive closure, only inner builds do.
-            if (GetProjectType(projectInstance) == ProjectType.OuterBuild)
+            if (projectGraphNode.ProjectType == ProjectType.OuterBuild)
             {
                 return false;
             }
 
+            ProjectInstance projectInstance = projectGraphNode.ProjectInstance;
+
             // special case for Quickbuild which updates msbuild binaries independent of props/targets. Remove this when all QB repos will have
             // migrated to new enough Visual Studio versions whose Microsoft.Managed.After.Targets enable transitive references.
             if (string.IsNullOrWhiteSpace(projectInstance.GetPropertyValue(AddTransitiveProjectReferencesInStaticGraphPropertyName)) &&
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 616a99de8f3..a830764d053 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -332,9 +332,7 @@ internal ITask CreateTaskInstance(ElementLocation taskLocation, TaskLoggingConte
                 VerifyThrowIdentityParametersValid(taskIdentityParameters, taskLocation, _taskName, "MSBuildRuntime", "MSBuildArchitecture");
 
                 mergedParameters = MergeTaskFactoryParameterSets(_factoryIdentityParameters, taskIdentityParameters);
-                useTaskFactory = !NativeMethodsShared.IsMono
-                                 && (_taskHostFactoryExplicitlyRequested
-                                     || !TaskHostParametersMatchCurrentProcess(mergedParameters));
+                useTaskFactory = _taskHostFactoryExplicitlyRequested || !TaskHostParametersMatchCurrentProcess(mergedParameters);
             }
             else
             {
diff --git a/src/Build/Instance/TaskFactoryLoggingHost.cs b/src/Build/Instance/TaskFactoryLoggingHost.cs
index 1fbad6a47b6..c8e70102bda 100644
--- a/src/Build/Instance/TaskFactoryLoggingHost.cs
+++ b/src/Build/Instance/TaskFactoryLoggingHost.cs
@@ -340,7 +340,9 @@ internal bool IsEventSerializable(BuildEventArgs e)
 #pragma warning disable SYSLIB0050
             // Types which are not serializable and are not IExtendedBuildEventArgs as
             // those always implement custom serialization by WriteToStream and CreateFromStream.
-            if (!e.GetType().GetTypeInfo().IsSerializable && e is not IExtendedBuildEventArgs)
+            if (!e.GetType().GetTypeInfo().IsSerializable &&
+                e is not IExtendedBuildEventArgs &&
+                e is not GeneratedFileUsedEventArgs)
 #pragma warning restore SYSLIB0050
             {
                 _loggingContext.LogWarning(null, new BuildEventFileInfo(string.Empty), "ExpectedEventToBeSerializable", e.GetType().Name);
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 96942d03d55..7dc448e6fb5 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -12,6 +12,7 @@
 using System.Threading;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Framework.Logging;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
@@ -75,20 +76,9 @@ internal abstract class BaseConsoleLogger : INodeLogger, IStringBuilderProvider
         /// </summary>
         public void ParseParameters()
         {
-            if (Parameters == null)
+            foreach (var parameter in LoggerParametersHelper.ParseParameters(Parameters))
             {
-                return;
-            }
-
-            foreach (string parameter in Parameters.Split(parameterDelimiters))
-            {
-                if (string.IsNullOrWhiteSpace(parameter))
-                {
-                    continue;
-                }
-
-                string[] parameterAndValue = parameter.Split(s_parameterValueSplitCharacter);
-                ApplyParameter(parameterAndValue[0], parameterAndValue.Length > 1 ? parameterAndValue[1] : null);
+                ApplyParameter(parameter.Item1, parameter.Item2);
             }
         }
 
@@ -1038,33 +1028,17 @@ internal virtual bool ApplyParameter(string parameterName, string parameterValue
         /// </summary>
         private bool ApplyVerbosityParameter(string parameterValue)
         {
-            switch (parameterValue.ToUpperInvariant())
+            if (LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))
             {
-                case "Q":
-                case "QUIET":
-                    Verbosity = LoggerVerbosity.Quiet;
-                    return true;
-                case "M":
-                case "MINIMAL":
-                    Verbosity = LoggerVerbosity.Minimal;
-                    return true;
-                case "N":
-                case "NORMAL":
-                    Verbosity = LoggerVerbosity.Normal;
-                    return true;
-                case "D":
-                case "DETAILED":
-                    Verbosity = LoggerVerbosity.Detailed;
-                    return true;
-                case "DIAG":
-                case "DIAGNOSTIC":
-                    Verbosity = LoggerVerbosity.Diagnostic;
-                    return true;
-                default:
-                    string errorCode;
-                    string helpKeyword;
-                    string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, "InvalidVerbosity", parameterValue);
-                    throw new LoggerException(message, null, errorCode, helpKeyword);
+                Verbosity = (LoggerVerbosity)verbosity;
+                return true;
+            }
+            else
+            {
+                string errorCode;
+                string helpKeyword;
+                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, "InvalidVerbosity", parameterValue);
+                throw new LoggerException(message, null, errorCode, helpKeyword);
             }
         }
 
@@ -1135,16 +1109,6 @@ private bool ApplyVerbosityParameter(string parameterValue)
         internal const string projectSeparatorLine =
                  "__________________________________________________";
 
-        /// <summary>
-        /// Console logger parameters delimiters.
-        /// </summary>
-        internal static readonly char[] parameterDelimiters = MSBuildConstants.SemicolonChar;
-
-        /// <summary>
-        /// Console logger parameter value split character.
-        /// </summary>
-        private static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;
-
         /// <summary>
         /// When true, accumulate performance numbers.
         /// </summary>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 25f6c300664..b537172036d 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -68,6 +68,8 @@ public sealed class BinaryLogger : ILogger
         //   - Making ProjectStartedEventArgs, ProjectEvaluationFinishedEventArgs, AssemblyLoadBuildEventArgs equal
         //     between de/serialization roundtrips.
         //   - Adding serialized events lengths - to support forward compatible reading
+        // version 19:
+        //   - GeneratedFileUsedEventArgs exposed for brief period of time (so let's continue with 20)
 
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
@@ -366,19 +368,29 @@ private void Write(BuildEventArgs e)
         {
             if (stream != null)
             {
-                // TODO: think about queuing to avoid contention
-                lock (eventArgsWriter)
+                if (projectImportsCollector != null)
                 {
-                    eventArgsWriter.Write(e);
+                    CollectImports(e);
                 }
 
-                if (projectImportsCollector != null)
+                if (DoNotWriteToBinlog(e))
                 {
-                    CollectImports(e);
+                    return;
+                }
+
+                // TODO: think about queuing to avoid contention
+                lock (eventArgsWriter)
+                {
+                    eventArgsWriter.Write(e);
                 }
             }
         }
 
+        private static bool DoNotWriteToBinlog(BuildEventArgs e)
+        {
+            return e is GeneratedFileUsedEventArgs;
+        }
+
         private void CollectImports(BuildEventArgs e)
         {
             if (e is ProjectImportedEventArgs importArgs && importArgs.ImportedProjectFile != null)
@@ -397,6 +409,11 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
             }
+            else if (e is GeneratedFileUsedEventArgs generatedFileUsedEventArgs && generatedFileUsedEventArgs.FilePath != null)
+            {
+                string fullPath = Path.GetFullPath(generatedFileUsedEventArgs.FilePath);
+                projectImportsCollector.AddFileFromMemory(fullPath, generatedFileUsedEventArgs.Content);
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 8a8311e1fd6..a3ce5efa3c5 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -15,6 +15,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
+using Microsoft.NET.StringTools;
 
 #nullable disable
 
@@ -1260,9 +1262,9 @@ private void Write(IExtendedBuildEventArgs extendedData)
 
         internal readonly struct HashKey : IEquatable<HashKey>
         {
-            private readonly ulong value;
+            private readonly long value;
 
-            private HashKey(ulong i)
+            private HashKey(long i)
             {
                 value = i;
             }
@@ -1275,13 +1277,13 @@ public HashKey(string text)
                 }
                 else
                 {
-                    value = FnvHash64.GetHashCode(text);
+                    value = FowlerNollVo1aHash.ComputeHash64Fast(text);
                 }
             }
 
             public static HashKey Combine(HashKey left, HashKey right)
             {
-                return new HashKey(FnvHash64.Combine(left.value, right.value));
+                return new HashKey(FowlerNollVo1aHash.Combine64(left.value, right.value));
             }
 
             public HashKey Add(HashKey other) => Combine(this, other);
@@ -1311,35 +1313,5 @@ public override string ToString()
                 return value.ToString();
             }
         }
-
-        internal static class FnvHash64
-        {
-            public const ulong Offset = 14695981039346656037;
-            public const ulong Prime = 1099511628211;
-
-            public static ulong GetHashCode(string text)
-            {
-                ulong hash = Offset;
-
-                unchecked
-                {
-                    for (int i = 0; i < text.Length; i++)
-                    {
-                        char ch = text[i];
-                        hash = (hash ^ ch) * Prime;
-                    }
-                }
-
-                return hash;
-            }
-
-            public static ulong Combine(ulong left, ulong right)
-            {
-                unchecked
-                {
-                    return (left ^ right) * Prime;
-                }
-            }
-        }
     }
 }
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 35886babcca..41bfaf94f50 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -4,6 +4,7 @@
 using System;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Framework.Logging;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Shared;
 using BaseConsoleLogger = Microsoft.Build.BackEnd.Logging.BaseConsoleLogger;
@@ -113,7 +114,7 @@ private void InitializeBaseConsoleLogger()
             bool preferConsoleColor = false;
             if (!string.IsNullOrEmpty(_parameters))
             {
-                string[] parameterComponents = _parameters.Split(BaseConsoleLogger.parameterDelimiters);
+                string[] parameterComponents = _parameters.Split(LoggerParametersHelper.s_parameterDelimiters);
                 foreach (string param in parameterComponents)
                 {
                     if (param.Length <= 0)
diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
index a1e387f69aa..02d14829a9d 100644
--- a/src/Build/Logging/SimpleErrorLogger.cs
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -35,7 +35,7 @@ public LoggerVerbosity Verbosity
             set { }
         }
 
-        public string Parameters
+        public string? Parameters
         {
             get => string.Empty;
             set { }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 84eece2482b..7388f408644 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -5,7 +5,6 @@
 
   <PropertyGroup>
     <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
-    <TargetFrameworks Condition="'$(MonoBuild)'=='true'">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <RootNamespace>Microsoft.Build</RootNamespace>
     <AssemblyName>Microsoft.Build</AssemblyName>
 
@@ -37,7 +36,6 @@
     <PackageReference Include="System.Security.Principal.Windows" />
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
 
-    <PackageReference Include="System.Reflection.Metadata" Condition="'$(MonoBuild)' == 'true'" />
     <PackageReference Include="System.Reflection.MetadataLoadContext" />
 
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 6dbe8ad2c32..c89f4bf8e8e 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1911,7 +1911,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
     <value>Static graph loaded in {0} seconds: {1} nodes, {2} edges</value>
   </data>
   <data name="IsolatedContextDoesNotSupportFileSystem" xml:space="preserve">
-    <value>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</value>
+    <value>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</value>
   </data>
   <data name="LoadingProjectCachePlugin" xml:space="preserve">
     <value>Loading the following project cache plugin: {0}</value>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 04049906e36..d4bb46a4c35 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: Importovan√Ω soubor ‚Äû{0}‚Äú neexistuje a zd√° se, ≈æe je souƒç√°st√≠ komponenty Visual Studia. Tento soubor m≈Ø≈æe vy≈æadovat MSBuild.exe, aby se mohl √∫spƒõ≈°nƒõ importovat, a proto se nemus√≠ poda≈ôit sestavit v rozhran√≠ p≈ô√≠kazov√©ho ≈ô√°dku dotnet. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Objekty EvaluationContext vytvo≈ôen√© pomoc√≠ SharingPolicy.Isolated nepodporuj√≠ p≈ôed√°v√°n√≠ souborov√©ho syst√©mu MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Objekty EvaluationContext vytvo≈ôen√© pomoc√≠ SharingPolicy.Isolated nebo SharingPolicy.SharedSDKCache nepodporuj√≠ p≈ôed√°v√°n√≠ syst√©mu soubor≈Ø MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index ea46bf46b82..04492b080d4 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: Die importierte Datei ‚Äû{0}‚Äú ist nicht vorhanden und scheint Teil einer Visual Studio Komponente zu sein. Diese Datei erfordert m√∂glicherweise ‚ÄûMSBuild.exe‚Äú, um erfolgreich importiert zu werden, und kann daher m√∂glicherweise nicht in der dotnet-CLI erstellt werden. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Die √úbergabe eines MSBuildFileSystemBase-Dateisystems an EvaluationContext-Objekte, die mit "SharingPolicy.Isolated" erstellt wurden, wird nicht unterst√ºtzt.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Die √úbergabe eines MSBuildFileSystemBase-Dateisystems an EvaluationContext-Objekte, die mit "SharingPolicy.Isolated" oder "SharingPolicy.SharedSDKCache" erstellt wurden, wird nicht unterst√ºtzt.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 8f4049417d9..cdb389e7957 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: El archivo importado "{0}" no existe y parece formar parte de un componente de Visual Studio. Este archivo puede requerir MSBuild.exe para poder importarse correctamente, por lo que es posible que no se pueda compilar en la CLI de dotnet. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Los objetos EvaluationContext creados con SharingPolicy.Isolated no admiten que se les pase un sistema de archivos MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Los objetos EvaluationContext creados con SharingPolicy.Isolated o SharingPolicy.SharedSDKCache no admiten que se pase un sistema de archivos MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index e73e949479c..c68298025c8 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: le fichier import√© ¬´¬†{0}¬†¬ª n‚Äôexiste pas et semble faire partie d‚Äôun composant Visual Studio. Ce fichier peut n√©cessiter MSBuild.exe afin d‚Äô√™tre import√© avec succ√®s, et peut donc ne pas √™tre g√©n√©r√© dans l‚Äôinterface CLI dotnet. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Les objets EvaluationContext cr√©√©s avec SharingPolicy.Isolated ne prennent pas en charge le passage d'un syst√®me de fichiers MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Les objets EvaluationContext cr√©√©s avec SharingPolicy.Isolated ou SharingPolicy.SharedSDKCache ne prennent pas en charge le passage √† un syst√®me de fichiers MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 1b1574c0c22..ab9c3f34cfd 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: il file importato "{0}" non esiste e sembra far parte di un componente di Visual Studio. Per l'importazione corretta di questo file potrebbe essere richiesto MSBuild.exe ed √® quindi possibile che la compilazione abbia esito negativo nell'interfaccia della riga di comando di dotnet. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Agli oggetti EvaluationContext creati con SharingPolicy.Isolated non √® possibile passare un file system MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Agli oggetti EvaluationContext creati con SharingPolicy.Isolated o SharingPolicy.SharedSDKCache non √® possibile passare un file system MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 0f75ce39980..e39b4ff0583 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: „Ç§„É≥„Éù„Éº„Éà„Åï„Çå„Åü„Éï„Ç°„Ç§„É´ "{0}" „ÅØÂ≠òÂú®„Åõ„Åö„ÄÅVisual Studio „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ‰∏ÄÈÉ®„Åß„ÅÇ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÊ≠£Â∏∏„Å´„Ç§„É≥„Éù„Éº„Éà„Åô„Çã„Å´„ÅØ MSBuild.exe „ÅåÂøÖË¶Å„Å™Â†¥Âêà„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅdotnet CLI „Åß„Éì„É´„Éâ„Åß„Åç„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">SharingPolicy.Isolated „ÇíÊåáÂÆö„Åó„Å¶‰ΩúÊàê„Åï„Çå„Åü EvaluationContext „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´ MSBuildFileSystemBase „Éï„Ç°„Ç§„É´ „Ç∑„Çπ„ÉÜ„É†„ÇíÊ∏°„Åô„Åì„Å®„ÅØ„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">SharingPolicy.Isolated „Åæ„Åü„ÅØ SharingPolicy.SharedSDKCache „Çí‰ΩøÁî®„Åó„Å¶‰ΩúÊàê„Åï„Çå„Åü EvaluationContext „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅMSBuildFileSystemBase „Éï„Ç°„Ç§„É´ „Ç∑„Çπ„ÉÜ„É†„Å∏„ÅÆÊ∏°„Åó„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 064b07a0899..a97e44cce5f 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: Í∞ÄÏ†∏Ïò® ÌååÏùº "{0}"Ïù¥(Í∞Ä) Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú Visual Studio Íµ¨ÏÑ± ÏöîÏÜåÏùò ÏùºÎ∂ÄÏù∏ Í≤É Í∞ôÏäµÎãàÎã§. Ïù¥ ÌååÏùºÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏Ïò§Î†§Î©¥ MSBuild.exeÍ∞Ä ÌïÑÏöîÌï† Ïàò ÏûàÏúºÎØÄÎ°ú dotnet CLIÏóêÏÑú ÎπåÎìúÌïòÏßÄ Î™ªÌï† Ïàò ÏûàÏäµÎãàÎã§. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">SharingPolicy.IsolatedÎ°ú ÎßåÎì† EvaluationContext Í∞úÏ≤¥Îäî MSBuildFileSystemBase ÌååÏùº ÏãúÏä§ÌÖú Ï†ÑÎã¨ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">SharingPolicy.Isolated ÎòêÎäî SharingPolicy.SharedSDKCacheÎ°ú ÎßåÎì† EvaluationContext Í∞úÏ≤¥Îäî MSBuildFileSystemBase ÌååÏùº ÏãúÏä§ÌÖú Ï†ÑÎã¨ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 79d50915abb..e7da0a54f5e 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: zaimportowany plik ‚Äû{0}‚Äùnie istnieje i prawdopodobnie jest czƒô≈õciƒÖ sk≈Çadnika programu Visual Studio. Ten plik mo≈ºe wymagaƒá MSBuild.exe w celu pomy≈õlnego zaimportowania, dlatego kompilacja w interfejsie wiersza polecenia dotnet mo≈ºe zako≈Ñczyƒá siƒô niepowodzeniem. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Obiekty EvaluationContext utworzone za pomocƒÖ elementu SharingPolicy.Isolated nie obs≈ÇugujƒÖ przekazywania za pomocƒÖ systemu plik√≥w MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Obiekty EvaluationContext utworzone za pomocƒÖ elementu SharingPolicy.Isolated lub SharingPolicy.SharedSDKCache nie obs≈ÇugujƒÖ przekazywania za pomocƒÖ systemu plik√≥w MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index fe4993e333f..16bce09582c 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: o arquivo importado "{0}" n√£o existe e parece fazer parte de um componente do Visual Studio. Este arquivo pode exigir o MSBuild.exe para ser importado com √™xito e, portanto, talvez n√£o possa ser compilado na CLI do dotnet. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">Os objetos EvaluationContext criados com SharingPolicy.Isolated n√£o s√£o compat√≠veis com o recebimento de um sistema de arquivos MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">Objetos EvaluationContext criados com SharingPolicy.Isolated ou SharingPolicy.SharedSDKCache n√£o d√£o suporte a serem passados em um sistema de arquivos MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 3c40e2a59ce..9e6fe7280ed 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª "{0}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Visual Studio. –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è MSBuild.exe, –∏ –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ —Å–±–æ—Ä–∫–∞ –≤ CLI dotnet –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–±–æ–µ–º. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">–û–±—ä–µ–∫—Ç—ã EvaluationContext, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é SharingPolicy.Isolated, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–¥–∞—á—É –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É MSBuildFileSystemBase.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">–û–±—ä–µ–∫—Ç—ã EvaluationContext, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é SharingPolicy.SharedSDKCache, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–¥–∞—á—É –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É MSBuildFileSystemBase.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 91d2792f907..af2ba92eed0 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: ƒ∞√ßeri aktarƒ±lan "{0}" dosyasƒ± mevcut deƒüil ve bir Visual Studio bile≈üeninin par√ßasƒ± gibi g√∂r√ºn√ºyor. Ba≈üarƒ±yla i√ßeri aktarƒ±labilmesi i√ßin bu dosya MSBuild.exe dosyasƒ±nƒ± gerektirir ve bu nedenle dotnet CLI‚Äôde derleme ba≈üarƒ±sƒ±z olabilir. </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">SharingPolicy.Isolated ile olu≈üturulan EvaluationContext nesneleri bir MSBuildFileSystemBase dosya sisteminin ge√ßirilmesini desteklemez.</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">SharingPolicy.Isolated veya SharingPolicy.SharedSDKCache ile olu≈üturulan EvaluationContext nesneleri, bir MSBuildFileSystemBase dosya sisteminin ge√ßirilmesini desteklemez.</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index afa03fb641f..8b33659cfaa 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: ÂØºÂÖ•ÁöÑÊñá‰ª∂‚Äú{0}‚Äù‰∏çÂ≠òÂú®ÔºåÂπ∂‰∏î‰ºº‰πéÊòØ Visual Studio ÁªÑ‰ª∂ÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇÊ≠§Êñá‰ª∂ÂèØËÉΩÈúÄË¶Å MSBuild.exe ÊâçËÉΩÊàêÂäüÂØºÂÖ•ÔºåÂõ†Ê≠§ÂèØËÉΩÊó†Ê≥ïÂú® dotnet CLI ‰∏≠ÁîüÊàê„ÄÇ </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">‰ΩøÁî® SharingPolicy.Isolated ÂàõÂª∫ÁöÑ EvaluationContext ÂØπË±°‰∏çÊîØÊåÅÈÄöËøá MSBuildFileSystemBase Êñá‰ª∂Á≥ªÁªü‰º†ÈÄí„ÄÇ</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">‰ΩøÁî® SharingPolicy.Isolated ÂàõÂª∫ÁöÑ EvaluationContext ÂØπË±°„ÄÇSharingPolicy.SharedSDKCache ‰∏çÊîØÊåÅË¢´‰º†ÈÄí MSBuildFileSystemBase Êñá‰ª∂Á≥ªÁªü„ÄÇ</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index cd07bc4b1fb..597a1c02e14 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -270,7 +270,7 @@
       </trans-unit>
       <trans-unit id="ImportedProjectFromVSDistribution">
         <source>MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </source>
-        <target state="new">MSB4278: The imported file "{0}" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </target>
+        <target state="translated">MSB4278: ÂåØÂÖ•ÁöÑÊ™îÊ°à "{0}" ‰∏çÂ≠òÂú®ÔºåËÄå‰∏î‰ºº‰πéÊòØ Visual Studio ÂÖÉ‰ª∂ÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇÊ≠§Ê™îÊ°àÂèØËÉΩÈúÄË¶Å MSBuild.exe ÊâçËÉΩÊàêÂäüÂåØÂÖ•ÔºåÂõ†Ê≠§ÂèØËÉΩÁÑ°Ê≥ïÂú® dotnet CLI ‰∏≠Âª∫ÁΩÆ„ÄÇ </target>
         <note>{StrBegin="MSB4278: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
       </trans-unit>
       <trans-unit id="IncompatibleBinaryLoggerConfiguration">
@@ -289,8 +289,8 @@
         <note />
       </trans-unit>
       <trans-unit id="IsolatedContextDoesNotSupportFileSystem">
-        <source>EvaluationContext objects created with SharingPolicy.Isolated do not support being passed an MSBuildFileSystemBase file system.</source>
-        <target state="translated">‰ΩøÁî® SharingPolicy.Isolated Âª∫Á´ãÁöÑ EvaluationContext Áâ©‰ª∂‰∏çÊîØÊè¥‰ª• MSBuildFileSystemBase Ê™îÊ°àÁ≥ªÁµ±ÂÇ≥ÈÅû„ÄÇ</target>
+        <source>EvaluationContext objects created with SharingPolicy.Isolated or SharingPolicy.SharedSDKCache do not support being passed an MSBuildFileSystemBase file system.</source>
+        <target state="translated">‰ΩøÁî® SharingPolicy.Isolated Êàñ SharingPolicy.SharedSDKCache Âª∫Á´ãÁöÑ EvaluationContext Áâ©‰ª∂‰∏çÊîØÊè¥‰ª• MSBuildFileSystemBase Ê™îÊ°àÁ≥ªÁµ±ÂÇ≥ÈÅû„ÄÇ</target>
         <note />
       </trans-unit>
       <trans-unit id="ItemReferencingSelfInTarget">
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index e2d3c40a131..9fc62d7b964 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -185,20 +185,19 @@ private static string[] GetFileList(
         {
             ErrorUtilities.VerifyThrowInternalLength(filespecEscaped, nameof(filespecEscaped));
 
-            string[] fileList;
+            string[] fileList = Array.Empty<string>();
 
             // Used to properly detect and log drive enumerating wildcards when applicable.
-            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;
             string excludeFileSpec = string.Empty;
 
             var filespecHasNoWildCards = !FilespecHasWildcards(filespecEscaped);
             var filespecMatchesLazyWildcard = FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards);
             var excludeSpecsAreEmpty = excludeSpecsEscaped?.Any() != true;
-            
+
             // Return original value if:
             //      FileSpec matches lazyloading regex or
             //      file has no wildcard and excludeSpecs are empty
-            if ( filespecMatchesLazyWildcard || (filespecHasNoWildCards && excludeSpecsAreEmpty) )
+            if (filespecMatchesLazyWildcard || (filespecHasNoWildCards && excludeSpecsAreEmpty))
             {
                 // Just return the original string.
                 fileList = new string[] { returnEscaped ? filespecEscaped : EscapingUtilities.UnescapeAll(filespecEscaped) };
@@ -215,124 +214,142 @@ private static string[] GetFileList(
                 var filespecUnescaped = EscapingUtilities.UnescapeAll(filespecEscaped);
                 var excludeSpecsUnescaped = excludeSpecsEscaped?.Where(IsValidExclude).Select(i => EscapingUtilities.UnescapeAll(i)).ToList();
 
-                // Get the list of actual files which match the filespec.  Put
-                // the list into a string array.  If the filespec started out
-                // as a relative path, we will get back a bunch of relative paths.
-                // If the filespec started out as an absolute path, we will get
-                // back a bunch of absolute paths. Also retrieves the search action
-                // and relevant Exclude filespec for drive enumerating wildcard detection.
-                (fileList, action, excludeFileSpec) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
+                // Extract file spec information
+                FileMatcher.Default.GetFileSpecInfo(filespecUnescaped, out string directoryPart, out string wildcardPart, out string filenamePart, out bool needsRecursion, out bool isLegalFileSpec);
 
-                // Determines whether Exclude filespec or passed in file spec should be
-                // used in drive enumeration warning or exception.
-                bool excludeFileSpecIsEmpty = string.IsNullOrWhiteSpace(excludeFileSpec);
-                string fileSpec = excludeFileSpecIsEmpty ? filespecUnescaped : excludeFileSpec;
+                // Check if the file spec contains a drive-enumerating wildcard
+                bool logDriveEnumeratingWildcard = FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart);
 
-                switch (action)
+                // Process exclude specs (if provided) and check if any of them contain a drive-enumerating wildcard
+                if (excludeSpecsUnescaped != null)
                 {
-                    case (FileMatcher.SearchAction.LogDriveEnumeratingWildcard):
-                        switch (loggingMechanism)
-                        {
-                            // Logging mechanism received from ItemGroupIntrinsicTask.
-                            case TargetLoggingContext targetLoggingContext:
-                                LogDriveEnumerationWarningWithTargetLoggingContext(
-                                    targetLoggingContext,
-                                    includeLocation,
-                                    excludeLocation,
-                                    excludeFileSpecIsEmpty,
-                                    disableExcludeDriveEnumerationWarning,
-                                    fileSpec);
-
-                                break;
-
-                            // Logging mechanism received from Evaluator.
-                            case ILoggingService loggingService:
-                                LogDriveEnumerationWarningWithLoggingService(
-                                    loggingService,
-                                    includeLocation,
-                                    buildEventContext,
-                                    buildEventFileInfoFullPath,
-                                    filespecUnescaped);
-
-                                break;
-
-                            // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
-                            case EvaluationLoggingContext evaluationLoggingContext:
-                                LogDriveEnumerationWarningWithEvaluationLoggingContext(
-                                    evaluationLoggingContext,
-                                    importLocation,
-                                    includeLocation,
-                                    excludeLocation,
-                                    excludeFileSpecIsEmpty,
-                                    filespecUnescaped,
-                                    fileSpec);
-
-                                break;
-
-                            default:
-                                throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
-                        }
-
-                        break;
-
-                    case (FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard):
-                        switch (loggingMechanism)
+                    foreach (string excludeSpec in excludeSpecsUnescaped)
+                    {
+                        FileMatcher.Default.GetFileSpecInfo(excludeSpec, out directoryPart, out wildcardPart, out filenamePart, out needsRecursion, out isLegalFileSpec);
+                        bool logDriveEnumeratingWildcardFromExludeSpec = FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart);
+                        if (logDriveEnumeratingWildcardFromExludeSpec)
                         {
-                            // Logging mechanism received from ItemGroupIntrinsicTask.
-                            case TargetLoggingContext targetLoggingContext:
-                                ThrowDriveEnumerationExceptionWithTargetLoggingContext(
-                                    includeLocation,
-                                    excludeLocation,
-                                    excludeFileSpecIsEmpty,
-                                    filespecUnescaped,
-                                    fileSpec);
-
-                                break;
-
-                            // Logging mechanism received from Evaluator.
-                            case ILoggingService loggingService:
-                                ThrowDriveEnumerationExceptionWithLoggingService(includeLocation, filespecUnescaped);
-
-                                break;
-
-                            // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
-                            case EvaluationLoggingContext evaluationLoggingContext:
-                                ThrowDriveEnumerationExceptionWithEvaluationLoggingContext(
-                                    importLocation,
-                                    includeLocation,
-                                    excludeLocation,
-                                    filespecUnescaped,
-                                    fileSpec,
-                                    excludeFileSpecIsEmpty);
-
-                                break;
-
-                            default:
-                                throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                            excludeFileSpec = excludeSpec;
                         }
 
-                        break;
-
-                    default: break;
+                        logDriveEnumeratingWildcard |= logDriveEnumeratingWildcardFromExludeSpec;
+                    }
                 }
 
-                ErrorUtilities.VerifyThrow(fileList != null, "We must have a list of files here, even if it's empty.");
+                // Determines whether Exclude filespec or passed in file spec should be
+                // used in drive enumeration warning or exception.
+                bool excludeFileSpecIsEmpty = string.IsNullOrWhiteSpace(excludeFileSpec);
+                string fileSpec = excludeFileSpecIsEmpty ? filespecUnescaped : excludeFileSpec;
 
-                // Before actually returning the file list, we sort them alphabetically.  This
-                // provides a certain amount of extra determinism and reproducability.  That is,
-                // we're sure that the build will behave in exactly the same way every time,
-                // and on every machine.
-                Array.Sort(fileList, StringComparer.OrdinalIgnoreCase);
+                if (logDriveEnumeratingWildcard)
+                {
+                    switch (loggingMechanism)
+                    {
+                        // Logging mechanism received from ItemGroupIntrinsicTask.
+                        case TargetLoggingContext targetLoggingContext:
+                            LogDriveEnumerationWarningWithTargetLoggingContext(
+                                targetLoggingContext,
+                                includeLocation,
+                                excludeLocation,
+                                excludeFileSpecIsEmpty,
+                                disableExcludeDriveEnumerationWarning,
+                                fileSpec);
+
+                            break;
+
+                        // Logging mechanism received from Evaluator.
+                        case ILoggingService loggingService:
+                            LogDriveEnumerationWarningWithLoggingService(
+                                loggingService,
+                                includeLocation,
+                                buildEventContext,
+                                buildEventFileInfoFullPath,
+                                filespecUnescaped);
+
+                            break;
+
+                        // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
+                        case EvaluationLoggingContext evaluationLoggingContext:
+                            LogDriveEnumerationWarningWithEvaluationLoggingContext(
+                                evaluationLoggingContext,
+                                importLocation,
+                                includeLocation,
+                                excludeLocation,
+                                excludeFileSpecIsEmpty,
+                                filespecUnescaped,
+                                fileSpec);
+
+                            break;
+
+                        default:
+                            throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                    }
+                }
 
-                if (returnEscaped)
+                if (logDriveEnumeratingWildcard && Traits.Instance.ThrowOnDriveEnumeratingWildcard)
                 {
-                    // We must now go back and make sure all special characters are escaped because we always
-                    // store data in the engine in escaped form so it doesn't interfere with our parsing.
-                    // Note that this means that characters that were not escaped in the original filespec
-                    // may now be escaped, but that's not easy to avoid.
-                    for (int i = 0; i < fileList.Length; i++)
+                    switch (loggingMechanism)
                     {
-                        fileList[i] = EscapingUtilities.Escape(fileList[i]);
+                        // Logging mechanism received from ItemGroupIntrinsicTask.
+                        case TargetLoggingContext targetLoggingContext:
+                            ThrowDriveEnumerationExceptionWithTargetLoggingContext(
+                                includeLocation,
+                                excludeLocation,
+                                excludeFileSpecIsEmpty,
+                                filespecUnescaped,
+                                fileSpec);
+
+                            break;
+
+                        // Logging mechanism received from Evaluator.
+                        case ILoggingService loggingService:
+                            ThrowDriveEnumerationExceptionWithLoggingService(includeLocation, filespecUnescaped);
+
+                            break;
+
+                        // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
+                        case EvaluationLoggingContext evaluationLoggingContext:
+                            ThrowDriveEnumerationExceptionWithEvaluationLoggingContext(
+                                importLocation,
+                                includeLocation,
+                                excludeLocation,
+                                filespecUnescaped,
+                                fileSpec,
+                                excludeFileSpecIsEmpty);
+
+                            break;
+
+                        default:
+                            throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                    }
+                }
+                else
+                {
+                    // Get the list of actual files which match the filespec.  Put
+                    // the list into a string array.  If the filespec started out
+                    // as a relative path, we will get back a bunch of relative paths.
+                    // If the filespec started out as an absolute path, we will get
+                    // back a bunch of absolute paths
+                    (fileList, _, _) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
+
+                    ErrorUtilities.VerifyThrow(fileList != null, "We must have a list of files here, even if it's empty.");
+
+                    // Before actually returning the file list, we sort them alphabetically.  This
+                    // provides a certain amount of extra determinism and reproducability.  That is,
+                    // we're sure that the build will behave in exactly the same way every time,
+                    // and on every machine.
+                    Array.Sort(fileList, StringComparer.OrdinalIgnoreCase);
+
+                    if (returnEscaped)
+                    {
+                        // We must now go back and make sure all special characters are escaped because we always
+                        // store data in the engine in escaped form so it doesn't interfere with our parsing.
+                        // Note that this means that characters that were not escaped in the original filespec
+                        // may now be escaped, but that's not easy to avoid.
+                        for (int i = 0; i < fileList.Length; i++)
+                        {
+                            fileList[i] = EscapingUtilities.Escape(fileList[i]);
+                        }
                     }
                 }
             }
diff --git a/src/Deprecated/Conversion.UnitTests/XMakeConversionUnitTests.csproj b/src/Deprecated/Conversion.UnitTests/XMakeConversionUnitTests.csproj
index e40299d2289..de178a504d3 100644
--- a/src/Deprecated/Conversion.UnitTests/XMakeConversionUnitTests.csproj
+++ b/src/Deprecated/Conversion.UnitTests/XMakeConversionUnitTests.csproj
@@ -33,8 +33,8 @@
   </PropertyGroup>
   <ItemGroup>
     <!-- Source Files -->
-    <Compile Include="..\..\shared\unittests\MockLogger.cs" />
-    <Compile Include="..\..\shared\unittests\ObjectModelHelpers.cs" />
+    <Compile Include="..\..\UnitTests.Shared\MockLogger.cs" />
+    <Compile Include="..\..\UnitTests.Shared\ObjectModelHelpers.cs" />
     <Compile Include="OldVSProjectFileReader_Tests.cs" />
     <Compile Include="ProjectFileConverter_Tests.cs" />
     <!-- Assemblies Files we depend on -->
diff --git a/src/Deprecated/Engine.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Deprecated/Engine.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index 7360b075b1d..b43f608a108 100644
--- a/src/Deprecated/Engine.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Deprecated/Engine.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -25,12 +25,12 @@
     <Compile Include="..\Shared\UnitTests\ErrorUtilities_Tests.cs" />
     <Compile Include="..\shared\unittests\FileUtilities_Tests.cs" />
     <Compile Include="..\shared\unittests\FileMatcher_Tests.cs" />
-    <Compile Include="..\shared\unittests\ObjectModelHelpers.cs" />
-    <Compile Include="..\Shared\UnitTests\MockEngine.cs" />
-    <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
+    <Compile Include="..\UnitTests.Shared\ObjectModelHelpers.cs" />
+    <Compile Include="..\UnitTests.Shared\MockEngine.cs" />
+    <Compile Include="..\UnitTests.Shared\MockLogger.cs" />
     <Compile Include="..\shared\unittests\ResourceUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\SolutionParser_Tests.cs" />
-    <Compile Include="..\Shared\UnitTests\StreamHelpers.cs" />
+    <Compile Include="..\UnitTests.Shared\StreamHelpers.cs" />
     <Compile Include="..\shared\unittests\TypeLoader_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\XmakeAttributes_Tests.cs">
       <Link>XmakeAttributes_Tests.cs</Link>
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index c855029462e..27628d8d2e8 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -11,25 +11,25 @@
   </PropertyGroup>
 
   <PropertyGroup>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_DEBUG_LAUNCH</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_DEBUG_LAUNCH</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="$(TargetFramework.StartsWith('net4')) Or $(TargetFramework.StartsWith('net3'))">
     <DefineConstants>$(DefineConstants);FEATURE_APARTMENT_STATE</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_APM</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_APM</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_APPDOMAIN</DefineConstants>
     <FeatureAppDomain>true</FeatureAppDomain>
     <DefineConstants>$(DefineConstants);FEATURE_ASPNET_COMPILER</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_LOCATION</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILED_XSL</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILE_IN_TESTS</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_COMPILED_XSL</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_COMPILE_IN_TESTS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CONSTRAINED_EXECUTION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CODETASKFACTORY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTURES</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
+    <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ENVIRONMENT_SYSTEMDIRECTORY</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_FILE_TRACKER</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_FILE_TRACKER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_GAC</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_GET_COMMANDLINE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS</DefineConstants>
@@ -52,8 +52,7 @@
     <DefineConstants>$(DefineConstants);FEATURE_RESOURCE_EXPOSURE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESXREADER_LIVEDESERIALIZATION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RUN_EXE_IN_TESTS</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' == 'true'">$(DefineConstants);USE_MSBUILD_DLL_EXTN</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_SECURITY_PERMISSIONS</DefineConstants>
+    <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_SECURITY_PERMISSIONS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_SECURITY_PRINCIPAL_WINDOWS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_STRONG_NAMES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_SYSTEM_CONFIGURATION</DefineConstants>
@@ -67,20 +66,18 @@
     <DefineConstants>$(DefineConstants);FEATURE_XAML_TYPES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_XAMLTASKFACTORY</DefineConstants>
     <FeatureXamlTypes>true</FeatureXamlTypes>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_XML_SCHEMA_VALIDATION</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_XML_SCHEMA_VALIDATION</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_WIN32_REGISTRY</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5' and '$(DotNetBuildFromSource)' != 'true'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
+    <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5' and '$(DotNetBuildFromSource)' != 'true'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_MSCOREE</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup>
-    <DefineConstants Condition="'$(MonoBuild)'=='true'">$(DefineConstants);MONO</DefineConstants>
-
     <!-- Useful for tests that need OS information as a constant -->
     <DefineConstants Condition="$([MSBuild]::IsOSPlatform('windows'))">$(DefineConstants);TEST_ISWINDOWS</DefineConstants>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' or $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard')">
+  <PropertyGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' or $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard'">
     <NetCoreBuild>true</NetCoreBuild>
     <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE;FEATURE_FASTSPAN</DefineConstants>
   </PropertyGroup>
@@ -113,7 +110,7 @@
     <DocumentationFile Condition=" '$(GenerateDocumentationFile)' == 'true' ">$(IntermediateOutputPath)\$(AssemblyName).xml</DocumentationFile>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(MonoBuild)' != 'true' and '$(DotNetBuildFromSource)' != 'true' and $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETFramework'">
+  <PropertyGroup Condition="'$(DotNetBuildFromSource)' != 'true' and $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETFramework'">
     <DefineConstants>$(DefineConstants);FEATURE_MSIOREDIST</DefineConstants>
     <FeatureMSIORedist>true</FeatureMSIORedist>
   </PropertyGroup>
diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index 554aa2b2533..8946c45dc5a 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -32,13 +32,11 @@
     <!-- Defaults for target frameworks and architecture -->
     <LibraryTargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild);netstandard2.0</LibraryTargetFrameworks>
     <LibraryTargetFrameworks Condition="'$(DotNetBuildFromSource)' == 'true'">$(LatestDotNetCoreForMSBuild);netstandard2.0</LibraryTargetFrameworks>
-    <LibraryTargetFrameworks Condition="'$(MonoBuild)'=='true'">$(FullFrameworkTFM);netstandard2.0</LibraryTargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
 
     <!-- Target frameworks for Exe and unit test projects (ie projects with runtime output) -->
     <RuntimeOutputTargetFrameworks>$(LatestDotNetCoreForMSBuild)</RuntimeOutputTargetFrameworks>
     <RuntimeOutputTargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);$(RuntimeOutputTargetFrameworks)</RuntimeOutputTargetFrameworks>
-    <RuntimeOutputTargetFrameworks Condition="'$(MonoBuild)' == 'true'">$(FullFrameworkTFM)</RuntimeOutputTargetFrameworks>
 
     <!-- Don't automatically append target framework to output path, since we want to put the Platform Target beforehand, if it's not AnyCPU -->
     <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index 704dfa3bacd..fc6affaa7d2 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -8,12 +8,14 @@
     <StrongNameKeyId>Microsoft</StrongNameKeyId>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(IsUnitTestProject)' == 'true'">
+  <PropertyGroup Condition="'$(IsTestLibrary)' == 'true' or '$(IsUnitTestProject)' == 'true'">
     <StrongNameKeyId>MSBuildTest</StrongNameKeyId>
     <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)Test.snk</AssemblyOriginatorKeyFile>
     <PublicKey>002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4</PublicKey>
     <PublicKeyToken>9d77cc7ad39b68eb</PublicKeyToken>
+  </PropertyGroup>
 
+  <PropertyGroup Condition="'$(IsUnitTestProject)' == 'true'">
     <!-- Set output type of test projects to EXE.  This will allow us to run tests on .NET Core via F5 or "dotnet run" -->
     <OutputType>Exe</OutputType>
     <GenerateProgramFile>false</GenerateProgramFile>
@@ -30,10 +32,6 @@
     <!-- Replace with MSBuild::IsBsdLike once the initial msbuild knows about it -->
     <XunitOptions Condition="$([MSBuild]::IsOSPlatform('FREEBSD')) Or $([MSBuild]::IsOSPlatform('NETBSD')) Or $([MSBuild]::IsOSPlatform('OPENBSD'))">$(XunitOptions) -notrait category=nonfreebsdtests</XunitOptions>
 
-    <XunitOptions Condition="'$(MonoBuild)' == 'true'">$(XunitOptions) -notrait category=non-mono-tests -notrait category=nonmonotests</XunitOptions>
-    <XunitOptions Condition="$([MSBuild]::IsOSPlatform('osx')) and '$(MonoBuild)' == 'true'">$(XunitOptions) -notrait category=mono-osx-failing</XunitOptions>
-    <XunitOptions Condition="$([MSBuild]::IsOSPlatform('windows')) and '$(MonoBuild)' == 'true'">$(XunitOptions) -notrait category=mono-windows-failing</XunitOptions>
-
     <XunitOptions Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">$(XunitOptions) -notrait category=nonnetcoreapptests</XunitOptions>
     <XunitOptions Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">$(XunitOptions) -notrait category=nonnetfxtests</XunitOptions>
 
@@ -81,8 +79,6 @@
     <PublicApiTfm Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETFramework' and $([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')) == '3.5'">net35</PublicApiTfm>
     <PublicApiTfm Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard'">netstandard</PublicApiTfm>
     <PublicApiTfm Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp'">netstandard</PublicApiTfm>
-
-    <GenAPIFolderPath>$(RepoRoot)ref\$(GenAPIAssemblyName)\$(GenAPIShortFrameworkIdentifier)\</GenAPIFolderPath>
   </PropertyGroup>
 
   <ItemGroup Condition="'$(IsUnitTestProject)' == 'true' And '$(TargetFrameworkIdentifier)' != '.NETFramework' ">
diff --git a/src/Framework.UnitTests/GeneratedFileUsedEventArgs_Tests.cs b/src/Framework.UnitTests/GeneratedFileUsedEventArgs_Tests.cs
new file mode 100644
index 00000000000..576c37e265f
--- /dev/null
+++ b/src/Framework.UnitTests/GeneratedFileUsedEventArgs_Tests.cs
@@ -0,0 +1,38 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.Framework.UnitTests
+{
+    public class GeneratedFileUsedEventArgs_Tests
+    {
+        [Fact]
+        public void SerializationDeserializationTest()
+        {
+            string filePath = "path";
+            string content = "content";
+            GeneratedFileUsedEventArgs arg = new(filePath, content);
+
+            using MemoryStream stream = new MemoryStream();
+            using BinaryWriter bw = new BinaryWriter(stream);
+            arg.WriteToStream(bw);
+
+            stream.Position = 0;
+            using BinaryReader br = new BinaryReader(stream);
+            GeneratedFileUsedEventArgs argDeserialized = new();
+            int packetVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
+            argDeserialized.CreateFromStream(br, packetVersion);
+
+            argDeserialized.FilePath.ShouldBe(filePath);
+            argDeserialized.Content.ShouldBe(content);
+        }
+    }
+}
diff --git a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
index 7821be8ff91..f5931d3d9af 100644
--- a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
+++ b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
@@ -1,8 +1,5 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
-  <Import Project="..\Shared\FileSystemSources.proj" />
-  <Import Project="..\Shared\DebuggingSources.proj" />
-
   <PropertyGroup>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
@@ -22,6 +19,7 @@
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
+    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
   </ItemGroup>
 
   <ItemGroup>
@@ -29,17 +27,10 @@
   </ItemGroup>
 
   <ItemGroup>
-    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs" />
-    <Compile Include="..\Shared\FileUtilities.cs" />
-    <Compile Include="..\Shared\TempFileUtilities.cs" />
-    <Compile Include="..\Shared\ErrorUtilities.cs" />
     <Compile Include="..\Shared\EscapingUtilities.cs" />
-    <Compile Include="..\Shared\BuildEnvironmentHelper.cs" />
     <Compile Include="..\Shared\ProcessExtensions.cs" />
     <Compile Include="..\Shared\ResourceUtilities.cs" />
-    <Compile Include="..\Shared\ExceptionHandling.cs" />
     <Compile Include="..\Shared\FileUtilitiesRegex.cs" />
-    <Compile Include="..\Shared\UnitTests\AssemblyResources.cs" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Framework/AssemblyUtilities.cs b/src/Framework/AssemblyUtilities.cs
index dcb013b3a0d..eea490775a7 100644
--- a/src/Framework/AssemblyUtilities.cs
+++ b/src/Framework/AssemblyUtilities.cs
@@ -99,9 +99,8 @@ public static AssemblyName CloneIfPossible(this AssemblyName assemblyNameToClone
             name.CodeBase = assemblyNameToClone.CodeBase;
             name.KeyPair = assemblyNameToClone.KeyPair;
             name.VersionCompatibility = assemblyNameToClone.VersionCompatibility;
-#elif !MONO
+#else
             // Setting the culture name creates a new CultureInfo, leading to many allocations. Only set CultureName when the CultureInfo member is not available.
-            // CultureName not available on Mono
             name.CultureName = assemblyNameToClone.CultureName;
 #endif
 
diff --git a/src/Framework/BuildEventArgs.cs b/src/Framework/BuildEventArgs.cs
index 883bbca9d12..e7d5868c1d8 100644
--- a/src/Framework/BuildEventArgs.cs
+++ b/src/Framework/BuildEventArgs.cs
@@ -113,7 +113,7 @@ public DateTime Timestamp
         }
 
         /// <summary>
-        /// Exposes the private <see cref="timestamp"/> field to derived types.
+        /// Exposes the private timestamp field to derived types.
         /// Used for serialization. Avoids the side effects of calling the
         /// <see cref="Timestamp"/> getter.
         /// </summary>
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index b6479c3698e..51717c375ae 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -29,7 +29,8 @@ internal static class ChangeWaves
         internal static readonly Version Wave17_6 = new Version(17, 6);
         internal static readonly Version Wave17_8 = new Version(17, 8);
         internal static readonly Version Wave17_10 = new Version(17, 10);
-        internal static readonly Version[] AllWaves = { Wave17_4, Wave17_6, Wave17_8, Wave17_10 };
+        internal static readonly Version Wave17_12 = new Version(17, 12);
+        internal static readonly Version[] AllWaves = { Wave17_4, Wave17_6, Wave17_8, Wave17_10, Wave17_12 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
diff --git a/src/Framework/CriticalTaskException.cs b/src/Framework/CriticalTaskException.cs
new file mode 100644
index 00000000000..6bd36d576f6
--- /dev/null
+++ b/src/Framework/CriticalTaskException.cs
@@ -0,0 +1,30 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework.BuildException;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// A wrapper exception for exceptions thrown by MsBuild Tasks (in TaskBuilder) that are critical to the task run and overall to the build process.
+    /// However such exception desn't indicate problem within the MsBuild engine, but rather in the Task itself - for this reason we wrap the exception,
+    ///  so that we can properly log it up the stack (and not assume it is a bug within the build engine)
+    /// </summary>
+    internal sealed class CriticalTaskException : BuildExceptionBase
+    {
+        public CriticalTaskException(
+            Exception innerException)
+            : base(string.Empty, innerException)
+        { }
+
+        // Do not remove - used by BuildExceptionSerializationHelper
+        internal CriticalTaskException(string message, Exception? inner)
+            : base(message, inner)
+        { }
+    }
+}
diff --git a/src/Framework/CustomBuildEventArgs.cs b/src/Framework/CustomBuildEventArgs.cs
index e85b1efb91e..c39be4acc91 100644
--- a/src/Framework/CustomBuildEventArgs.cs
+++ b/src/Framework/CustomBuildEventArgs.cs
@@ -14,9 +14,9 @@ namespace Microsoft.Build.Framework
     /// <format type="text/markdown"><![CDATA[
     /// ## Remarks
     /// > [!CAUTION]
-    /// In .NET 8 and later and Visual Studio 17.8 and later, this type is deprecated; instead use <see cref="ExtendedCustomBuildEventArgs"/>.
-    /// For more information, see <see href="https://learn.microsoft.com/dotnet/core/compatibility/sdk/8.0/custombuildeventargs"/>
-    /// For recommended replacement, see <see href="https://learn.microsoft.com/dotnet/core/compatibility/sdk/8.0/custombuildeventargs#recommended-action" />.
+    /// In .NET 8 and later and Visual Studio 17.8 and later, this type is deprecated; instead use <xref:Microsoft.Build.Framework.ExtendedCustomBuildEventArgs>.
+    /// For more information, [this link](https://learn.microsoft.com/dotnet/core/compatibility/sdk/8.0/custombuildeventargs).
+    /// For recommended replacement, see [this link](https://learn.microsoft.com/dotnet/core/compatibility/sdk/8.0/custombuildeventargs#recommended-action).
     /// ]]></format>
     /// </remarks>
     [Serializable]
diff --git a/src/Framework/EncodingUtilities.cs b/src/Framework/EncodingUtilities.cs
index 1a895022929..93e0dd940fe 100644
--- a/src/Framework/EncodingUtilities.cs
+++ b/src/Framework/EncodingUtilities.cs
@@ -274,10 +274,17 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
             {
                 if (CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
                 {
-                    // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.
-                    Console.OutputEncoding = Encoding.UTF8;
-                    // If the InputEncoding is not set, the encoding will work in CMD but not in PowerShell, as the raw CHCP page won't be changed.
-                    Console.InputEncoding = Encoding.UTF8;
+                    try
+                    {
+                        // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.
+                        Console.OutputEncoding = Encoding.UTF8;
+                        // If the InputEncoding is not set, the encoding will work in CMD but not in PowerShell, as the raw CHCP page won't be changed.
+                        Console.InputEncoding = Encoding.UTF8;
+                    }
+                    catch (Exception ex) when (ex is IOException || ex is SecurityException)
+                    {
+                        // The encoding is unavailable. Do nothing.
+                    }
                     return externalLanguageSetting;
                 }
                 else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
diff --git a/src/Framework/Features.cs b/src/Framework/Features.cs
index 636a30ba859..e5910b3cf5f 100644
--- a/src/Framework/Features.cs
+++ b/src/Framework/Features.cs
@@ -42,7 +42,9 @@ public static class Features
     {
         private static readonly Dictionary<string, FeatureStatus> _featureStatusMap = new Dictionary<string, FeatureStatus>
         {
-            // TODO: Fill in the dictionary with the features and their status
+            { "EvaluationContext_SharedSDKCachePolicy", FeatureStatus.Available }, // EvaluationContext supports the SharingPolicy.SharedSDKCache flag.
+            { "TerminalLogger_MultiLineHandler", FeatureStatus.Available }, // TerminalLogger has better explicit support for rendering multi-line messages
+            // Add more features here.
         };
 
         /// <summary>
diff --git a/src/Framework/GeneratedFileUsedEventArgs.cs b/src/Framework/GeneratedFileUsedEventArgs.cs
new file mode 100644
index 00000000000..f64ba9521ff
--- /dev/null
+++ b/src/Framework/GeneratedFileUsedEventArgs.cs
@@ -0,0 +1,60 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// Arguments for the generated file used event
+    /// </summary>
+    internal class GeneratedFileUsedEventArgs : BuildMessageEventArgs
+    {
+        public GeneratedFileUsedEventArgs()
+        {
+        }
+
+        /// <summary>
+        /// Initializes a new instance of the <see cref="GeneratedFileUsedEventArgs"/> class.
+        /// </summary>
+        /// 
+        public GeneratedFileUsedEventArgs(string filePath, string content)
+        // We are not sending the event to binlog (just the file), so we do not want it
+        // to have any stringified representation for other logs either.
+            : base(string.Empty, null, null, MessageImportance.Low)
+        {
+            FilePath = filePath;
+            Content = content;
+        }
+
+        /// <summary>
+        /// The file path relative to the current project.
+        /// </summary>
+        public string? FilePath { set; get; }
+
+        /// <summary>
+        /// The content of the file.
+        /// </summary>
+        public string? Content { set; get; }
+
+        internal override void WriteToStream(BinaryWriter writer)
+        {
+            base.WriteToStream(writer);
+
+            if (FilePath != null && Content != null)
+            {
+                writer.Write(FilePath);
+                writer.Write(Content);
+            }
+        }
+
+        internal override void CreateFromStream(BinaryReader reader, int version)
+        {
+            base.CreateFromStream(reader, version);
+
+            FilePath = reader.ReadString();
+            Content = reader.ReadString();
+        }
+    }
+}
diff --git a/src/Framework/ILogger.cs b/src/Framework/ILogger.cs
index 30973514607..5f3a31f5464 100644
--- a/src/Framework/ILogger.cs
+++ b/src/Framework/ILogger.cs
@@ -3,8 +3,6 @@
 
 using System.Runtime.InteropServices;
 
-#nullable disable
-
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -75,7 +73,7 @@ public interface ILogger
         /// to defaults. If a logger does not take parameters, it can ignore this property.
         /// </summary>
         /// <value>The parameter string (can be null).</value>
-        string Parameters { get; set; }
+        string? Parameters { get; set; }
 
         /// <summary>
         /// Called by the build engine to allow loggers to subscribe to the events they desire.
diff --git a/src/Framework/Logging/LoggerParametersHelper.cs b/src/Framework/Logging/LoggerParametersHelper.cs
new file mode 100644
index 00000000000..b4f7a843d4f
--- /dev/null
+++ b/src/Framework/Logging/LoggerParametersHelper.cs
@@ -0,0 +1,69 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Framework.Logging
+{
+    internal static class LoggerParametersHelper
+    {
+        // Logger parameters delimiters.
+        public static readonly char[] s_parameterDelimiters = MSBuildConstants.SemicolonChar;
+
+        // Logger parameter value split character.
+        public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;
+
+        public static bool TryParseVerbosityParameter(string parameterValue, [NotNullWhen(true)] out LoggerVerbosity? verbosity)
+        {
+            switch (parameterValue.ToUpperInvariant())
+            {
+                case "Q":
+                case "QUIET":
+                    verbosity = LoggerVerbosity.Quiet;
+                    return true;
+                case "M":
+                case "MINIMAL":
+                    verbosity = LoggerVerbosity.Minimal;
+                    return true;
+                case "N":
+                case "NORMAL":
+                    verbosity = LoggerVerbosity.Normal;
+                    return true;
+                case "D":
+                case "DETAILED":
+                    verbosity = LoggerVerbosity.Detailed;
+                    return true;
+                case "DIAG":
+                case "DIAGNOSTIC":
+                    verbosity = LoggerVerbosity.Diagnostic;
+                    return true;
+                default:
+                    verbosity = null;
+                    return false;
+            }
+        }
+
+        public static IEnumerable<Tuple<string, string?>> ParseParameters(string? parametersString)
+        {
+            if (parametersString is not null)
+            {
+                foreach (string parameter in parametersString.Split(s_parameterDelimiters))
+                {
+                    if (string.IsNullOrWhiteSpace(parameter))
+                    {
+                        continue;
+                    }
+
+                    string[] parameterAndValue = parameter.Split(s_parameterValueSplitCharacter);
+                    yield return new Tuple<string, string?>(parameterAndValue[0], parameterAndValue.Length > 1 ? parameterAndValue[1] : null);
+                }
+            }
+        }
+    }
+}
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index f96d17a98e3..efe948081a3 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -476,13 +476,13 @@ public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)
         }
 
         [Event(62, Keywords = Keywords.All)]
-        public void SdkResolverServiceInitializeStart()
+        public void SdkResolverLoadAllResolversStart()
         {
             WriteEvent(62);
         }
 
         [Event(63, Keywords = Keywords.All)]
-        public void SdkResolverServiceInitializeStop(int resolverCount)
+        public void SdkResolverLoadAllResolversStop(int resolverCount)
         {
             WriteEvent(63, resolverCount);
         }
@@ -601,25 +601,25 @@ public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submis
         }
 
         [Event(81, Keywords = Keywords.All)]
-        public void SdkResolverServiceFindResolversManifestsStart()
+        public void SdkResolverFindResolversManifestsStart()
         {
             WriteEvent(81);
         }
 
         [Event(82, Keywords = Keywords.All)]
-        public void SdkResolverServiceFindResolversManifestsStop(int resolverManifestCount)
+        public void SdkResolverFindResolversManifestsStop(int resolverManifestCount)
         {
             WriteEvent(82, resolverManifestCount);
         }
 
         [Event(83, Keywords = Keywords.All)]
-        public void SdkResolverServiceLoadResolversStart()
+        public void SdkResolverLoadResolversStart()
         {
             WriteEvent(83);
         }
 
         [Event(84, Keywords = Keywords.All)]
-        public void SdkResolverServiceLoadResolversStop(string manifestName, int resolverCount)
+        public void SdkResolverLoadResolversStop(string manifestName, int resolverCount)
         {
             WriteEvent(84, manifestName, resolverCount);
         }
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index b1cb2b0d7b2..b543973746e 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -490,7 +490,6 @@ public SystemInformationData()
     public static int GetLogicalCoreCount()
     {
         int numberOfCpus = Environment.ProcessorCount;
-#if !MONO
         // .NET on Windows returns a core count limited to the current NUMA node
         //     https://github.com/dotnet/runtime/issues/29686
         // so always double-check it.
@@ -502,7 +501,6 @@ public static int GetLogicalCoreCount()
                 numberOfCpus = result;
             }
         }
-#endif
 
         return numberOfCpus;
     }
@@ -661,37 +659,6 @@ internal static bool IsBSD
 #endif
     }
 
-    private static readonly object IsMonoLock = new object();
-
-    private static bool? _isMono;
-
-    /// <summary>
-    /// Gets a flag indicating if we are running under MONO
-    /// </summary>
-    internal static bool IsMono
-    {
-        get
-        {
-            if (_isMono != null)
-            {
-                return _isMono.Value;
-            }
-
-            lock (IsMonoLock)
-            {
-                if (_isMono == null)
-                {
-                    // There could be potentially expensive TypeResolve events, so cache IsMono.
-                    // Also, VS does not host Mono runtimes, so turn IsMono off when msbuild is running under VS
-                    _isMono = !BuildEnvironmentState.s_runningInVisualStudio &&
-                              Type.GetType("Mono.Runtime") != null;
-                }
-            }
-
-            return _isMono.Value;
-        }
-    }
-
 #if !CLR2COMPATIBILITY
     private static bool? _isWindows;
 #endif
@@ -750,8 +717,6 @@ internal static string FrameworkName
         {
 #if RUNTIME_TYPE_NETCORE
             const string frameworkName = ".NET";
-#elif MONO
-            const string frameworkName = "Mono";
 #else
             const string frameworkName = ".NET Framework";
 #endif
diff --git a/src/Framework/Properties/AssemblyInfo.cs b/src/Framework/Properties/AssemblyInfo.cs
index f0d1f5e83d7..1f0b9011081 100644
--- a/src/Framework/Properties/AssemblyInfo.cs
+++ b/src/Framework/Properties/AssemblyInfo.cs
@@ -53,6 +53,7 @@
 [assembly: InternalsVisibleTo("Microsoft.Build.Utilities.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.CommandLine.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Tasks.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
+[assembly: InternalsVisibleTo("Microsoft.Build.UnitTests.Shared, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 
 // This is the assembly-level GUID, and the GUID for the TypeLib associated with
 // this assembly.  We should specify this explicitly, as opposed to letting
diff --git a/src/Framework/XamlTypes/BaseProperty.cs b/src/Framework/XamlTypes/BaseProperty.cs
index 0160d559c8e..07efc4bda21 100644
--- a/src/Framework/XamlTypes/BaseProperty.cs
+++ b/src/Framework/XamlTypes/BaseProperty.cs
@@ -153,7 +153,7 @@ public string HelpUrl
         /// The help file to use when the user hits F1. Must specify <see cref="HelpContext"/> along with this.
         /// </summary>
         /// <remarks>
-        /// This property goes along with <see cref="HelpContext"/>. <seealso cref="HelpContext"/>. This
+        /// This property goes along with <see cref="HelpContext"/>. This
         /// form of specifying the help page for a property takes lower precedence than both <see cref="F1Keyword"/>
         /// and <see cref="HelpUrl"/>.
         /// This field is optional and is culture insensitive.
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index 9af73b6864c..d2b2b866183 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -35,20 +35,8 @@
     <PackageReference Include="Microsoft.BuildXL.Processes" Condition="'$(FeatureReportFileAccesses)' == 'true'" PrivateAssets="all" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(MonoBuild)' == 'true'">
-    <!-- This is for the second build. Copy over the resolvers from the bootstrap directory, which will include the
-         nuget resolver also -->
-    <Content
-            Condition="'$(CreateBootstrap)' != 'true'"
-            Include="$(MSBuildBinPath)\SdkResolvers\**\*" LinkBase="SdkResolvers" CopyToOutputDirectory="PreserveNewest" />
-
-    <Content Include="$(MSBuildExtensionsPath)\**\*" LinkBase="Extensions" CopyToOutputDirectory="PreserveNewest" />
-
-    <Content Include="$(DotNetRoot)sdk\$(DotNetCliVersion)\RuntimeIdentifierGraph.json" CopyToOutputDirectory="PreserveNewest" />
-  </ItemGroup>
-
   <!-- Use deps file from this project with additional dependencies listed instead of the one generated in the MSBuild project -->
-  <Target Name="UpdateMSBuildDepsFile" AfterTargets="Build" Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1')) or '$(TargetFramework)' == 'netstandard2.0')">
+  <Target Name="UpdateMSBuildDepsFile" AfterTargets="Build" Condition="($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1')) or '$(TargetFramework)' == 'netstandard2.0')">
     <Copy SourceFiles="$(OutputPath)$(AssemblyName).deps.json" DestinationFiles="$(OutputPath)MSBuild.deps.json" SkipUnchangedFiles="true" />
   </Target>
   <Target Name="UpdatePublishedMSBuildDepsFile" AfterTargets="Publish" Condition="'$(TargetFramework)' == '$(LatestDotNetCoreForMSBuild)'">
diff --git a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
index abb5f36de05..35fa1dbb627 100644
--- a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
+++ b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
@@ -20,6 +20,7 @@
     <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
     
     <!-- Tasks are needed for some tests -->
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
@@ -33,18 +34,9 @@
     <Compile Include="..\Shared\RegistryHelper.cs">
       <Link>RegistryHelper.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\EngineTestEnvironment.cs" />
-    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs">
-      <Link>TestEnvironment.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\VersionUtilities.cs">
       <Link>VersionUtilities.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\MockEngine.cs" />
-    <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
-    <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs" />
-    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
-    <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
 
     <EmbeddedResource Include="..\MSBuild\MSBuild\Microsoft.Build.Core.xsd">
       <Link>Microsoft.Build.Core.xsd</Link>
diff --git a/src/MSBuild.UnitTests/NodeStatus_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs
similarity index 94%
rename from src/MSBuild.UnitTests/NodeStatus_Tests.cs
rename to src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs
index 42e821c4ae6..ba6e2f50ecd 100644
--- a/src/MSBuild.UnitTests/NodeStatus_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs
@@ -19,11 +19,11 @@
 namespace Microsoft.Build.CommandLine.UnitTests;
 
 [UsesVerify]
-public class NodeStatus_Tests
+public class NodeStatus_SizeChange_Tests
 {
     private readonly NodeStatus _status = new("Namespace.Project", "TargetFramework", "Target", new MockStopwatch());
 
-    public NodeStatus_Tests()
+    public NodeStatus_SizeChange_Tests()
     {
         UseProjectRelativeDirectory("Snapshots");
     }
diff --git a/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
new file mode 100644
index 00000000000..1d1dacae7f0
--- /dev/null
+++ b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
@@ -0,0 +1,181 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Text.RegularExpressions;
+using System.Threading.Tasks;
+
+using Microsoft.Build.Logging.TerminalLogger;
+using Shouldly;
+using VerifyTests;
+using VerifyXunit;
+using Xunit;
+
+using static VerifyXunit.Verifier;
+
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+[UsesVerify]
+public class NodeStatus_Transition_Tests
+{
+    public NodeStatus_Transition_Tests()
+    {
+        UseProjectRelativeDirectory("Snapshots");
+    }
+
+    [Fact]
+    public void NodeStatusTargetThrowsForInputWithAnsi()
+    {
+#if DEBUG
+        // This is testing a Debug.Assert, which won't throw in Release mode.
+        Func<NodeStatus> newNodeStatus = () => new NodeStatus("project", "tfm", AnsiCodes.Colorize("colorized target", TerminalColor.Green), new MockStopwatch());
+        newNodeStatus.ShouldThrow<ArgumentException>().Message.ShouldContain("Target should not contain any escape codes, if you want to colorize target use the other constructor.");
+#endif
+    }
+
+    [Fact]
+    public async Task NodeTargetChanges()
+    {
+        var rendered = Animate(
+            [
+                new("Namespace.Project", "TargetFramework", "Build", new MockStopwatch())
+            ],
+            [
+               new("Namespace.Project", "TargetFramework", "Testing", new MockStopwatch())
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    [Fact]
+    public async Task NodeTargetUpdatesTime()
+    {
+        // This test look like there is no change between the frames, but we ask the stopwatch for time they will increase the number.
+        // We need this because animations check that NodeStatus reference is the same.
+        // And we cannot use MockStopwatch because we don't know when to call Tick on them, and if we do it right away, the time will update in "both" nodes.
+        NodeStatus node = new("Namespace.Project", "TargetFramework", "Build", new TickingStopwatch());
+        var rendered = Animate(
+            [
+                node,
+            ],
+            [
+               node,
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    [Fact]
+    public async Task NodeTargetChangesToColoredTarget()
+    {
+        var rendered = Animate(
+            [
+                new("Namespace.Project", "TargetFramework", "Testing", new MockStopwatch())
+            ],
+            [
+               new("Namespace.Project", "TargetFramework", TerminalColor.Red, "failed", "MyTestName1", new MockStopwatch())
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    [Fact]
+    public async Task NodeWithColoredTargetUpdatesTime()
+    {
+        // This test look like there is no change between the frames, but we ask the stopwatch for time they will increase the number.
+        // We need this because animations check that NodeStatus reference is the same.
+        // And we cannot use MockStopwatch because we don't know when to call Tick on them, and if we do it right away, the time will update in "both" nodes.
+        NodeStatus node = new("Namespace.Project", "TargetFramework", TerminalColor.Green, "passed", "MyTestName1", new TickingStopwatch());
+        var rendered = Animate(
+            [
+                node,
+            ],
+            [
+               node
+            ]);
+
+        await VerifyReplay(rendered);
+    }
+
+    /// <summary>
+    /// Chains and renders node status updates and outputs replay able string of all the transitions.
+    /// </summary>
+    /// <param name="nodeStatusesUpdates">Takes array of arrays. The inner array is collection of nodes that are currently running. The outer array is how they update over time.</param>
+    /// <returns></returns>
+    private string Animate(params NodeStatus[][] nodeStatusesUpdates)
+    {
+        var width = 80;
+        var height = 1;
+
+        NodesFrame previousFrame = new(Array.Empty<NodeStatus>(), 0, 0);
+        StringBuilder result = new StringBuilder();
+        foreach (var nodeStatuses in nodeStatusesUpdates)
+        {
+            NodesFrame currentFrame = new NodesFrame(nodeStatuses, width, height);
+            result.Append(currentFrame.Render(previousFrame));
+            previousFrame = currentFrame;
+        }
+
+        return result.ToString();
+    }
+
+    private async Task VerifyReplay(string rendered)
+    {
+        try
+        {
+            await Verify(rendered);
+        }
+        catch (Exception ex)
+        {
+            if (ex.GetType().Name != "VerifyException")
+            {
+                throw;
+            }
+
+            if (!ex.Message.StartsWith("Directory:"))
+            {
+                throw;
+            }
+
+            string? directory = null;
+            string? received = null;
+            string? verified = null;
+            foreach (var line in ex.Message.Split('\n'))
+            {
+                var trimmed = line.TrimStart(' ', '-');
+                Extract(trimmed, "Directory", ref directory);
+                Extract(trimmed, "Received", ref received);
+                Extract(trimmed, "Verified", ref verified);
+            }
+
+            if (directory == null || received == null || verified == null)
+            {
+                throw;
+            }
+
+            var pipeline = $$""" | % { "`n`n" } { $_ -split "(?=`e)" | % { Write-Host -NoNewline $_; Start-Sleep 0.5 }; Write-Host }""";
+            throw new Exception($$"""
+                {{ex.Message.TrimEnd('\n')}}
+
+                Received replay:
+                    Get-Content {{Path.Combine(directory, received)}} {{pipeline}}
+
+                Verified replay:
+                    Get-Content {{Path.Combine(directory, verified)}} {{pipeline}}
+                """);
+        }
+
+        void Extract(string line, string prefix, ref string? output)
+        {
+            if (line.StartsWith($"{prefix}: "))
+            {
+                output = line.Substring(prefix.Length + 2);
+            }
+        }
+    }
+}
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.EverythingFits.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.EverythingFits.verified.txt
similarity index 100%
rename from src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.EverythingFits.verified.txt
rename to src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.EverythingFits.verified.txt
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.GoesToProject.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.GoesToProject.verified.txt
similarity index 100%
rename from src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.GoesToProject.verified.txt
rename to src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.GoesToProject.verified.txt
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.NamespaceIsTruncatedNext.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.NamespaceIsTruncatedNext.verified.txt
similarity index 100%
rename from src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.NamespaceIsTruncatedNext.verified.txt
rename to src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.NamespaceIsTruncatedNext.verified.txt
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.TargetIsTruncatedFirst.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.TargetIsTruncatedFirst.verified.txt
similarity index 100%
rename from src/MSBuild.UnitTests/Snapshots/NodeStatus_Tests.TargetIsTruncatedFirst.verified.txt
rename to src/MSBuild.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.TargetIsTruncatedFirst.verified.txt
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChanges.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChanges.verified.txt
new file mode 100644
index 00000000000..c76bd410799
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChanges.verified.txt
@@ -0,0 +1,4 @@
+Ôªø[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[12DBuild (0.0s)
+[2F
+[K  Namespace.Project [36;1mTargetFramework[m [120G[14DTesting (0.0s)
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChangesToColoredTarget.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChangesToColoredTarget.verified.txt
new file mode 100644
index 00000000000..3be7cd9e970
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetChangesToColoredTarget.verified.txt
@@ -0,0 +1,4 @@
+Ôªø[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[14DTesting (0.0s)
+[2F
+[K  Namespace.Project [36;1mTargetFramework[m [120G[25D[31;1mfailed[m MyTestName1 (0.0s)
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetUpdatesTime.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetUpdatesTime.verified.txt
new file mode 100644
index 00000000000..5f7a118d89e
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeTargetUpdatesTime.verified.txt
@@ -0,0 +1,4 @@
+Ôªø[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[12DBuild (0.0s)
+[2F
+[120G[6D(0.2s)
diff --git a/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt
new file mode 100644
index 00000000000..70de0fffa5d
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt
@@ -0,0 +1,4 @@
+Ôªø[1F
+  Namespace.Project [36;1mTargetFramework[m [120G[25D[32;1mpassed[m MyTestName1 (0.0s)
+[2F
+[120G[6D(0.2s)
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Linux.verified.txt
new file mode 100644
index 00000000000..2a011fd87a4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Linux.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.OSX.verified.txt
new file mode 100644
index 00000000000..94c8f8666eb
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.OSX.verified.txt
@@ -0,0 +1,8 @@
+ÔªøThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Windows.verified.txt
new file mode 100644
index 00000000000..2a011fd87a4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Windows.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.Linux.verified.txt
new file mode 100644
index 00000000000..2a011fd87a4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.Linux.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.OSX.verified.txt
new file mode 100644
index 00000000000..94c8f8666eb
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.OSX.verified.txt
@@ -0,0 +1,8 @@
+ÔªøThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.Windows.verified.txt
new file mode 100644
index 00000000000..2a011fd87a4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors.Windows.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Linux.verified.txt
new file mode 100644
index 00000000000..c0b5f816a67
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Linux.verified.txt
@@ -0,0 +1,8 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.OSX.verified.txt
new file mode 100644
index 00000000000..f2c3daca5c7
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.OSX.verified.txt
@@ -0,0 +1,7 @@
+ÔªøThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Windows.verified.txt
new file mode 100644
index 00000000000..c0b5f816a67
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Windows.verified.txt
@@ -0,0 +1,8 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Linux.verified.txt
new file mode 100644
index 00000000000..c0b5f816a67
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Linux.verified.txt
@@ -0,0 +1,8 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.OSX.verified.txt
new file mode 100644
index 00000000000..f2c3daca5c7
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.OSX.verified.txt
@@ -0,0 +1,7 @@
+ÔªøThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Windows.verified.txt
new file mode 100644
index 00000000000..c0b5f816a67
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Windows.verified.txt
@@ -0,0 +1,8 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Linux.verified.txt
new file mode 100644
index 00000000000..ed7d3ade9de
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Linux.verified.txt
@@ -0,0 +1,3 @@
+Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.OSX.verified.txt
new file mode 100644
index 00000000000..b52d4bf957f
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.OSX.verified.txt
@@ -0,0 +1,2 @@
+Ôªødirectory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Windows.verified.txt
new file mode 100644
index 00000000000..ed7d3ade9de
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Windows.verified.txt
@@ -0,0 +1,3 @@
+Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Linux.verified.txt
new file mode 100644
index 00000000000..0a185cc6f0f
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Linux.verified.txt
@@ -0,0 +1,15 @@
+Ôªø]9;4;3;\  project [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!
+[?25l[1F
+[?25h  project2 [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning3!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning4!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error3!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error4!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 4 error(s) and 4 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.OSX.verified.txt
new file mode 100644
index 00000000000..5c6f0da685a
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.OSX.verified.txt
@@ -0,0 +1,14 @@
+Ôªø  project [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!
+[?25l[1F
+[?25h  project2 [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning3!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning4!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error3!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error4!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 4 error(s) and 4 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Windows.verified.txt
new file mode 100644
index 00000000000..0a185cc6f0f
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Windows.verified.txt
@@ -0,0 +1,15 @@
+Ôªø]9;4;3;\  project [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!
+[?25l[1F
+[?25h  project2 [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning3!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning4!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error3!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error4!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 4 error(s) and 4 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Linux.verified.txt
index 11e72f94fbf..041c431ce68 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Linux.verified.txt
@@ -1,6 +1,6 @@
-Ôªø]9;4;3;\  project [31;1mfailed with errors[m (0.2s)
+Ôªø]9;4;3;\  project [31;1mfailed with 1 error(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
 [?25l[1F
 [?25h
-Build [31;1mfailed with errors[m in 5.0s
+Build [31;1mfailed with 1 error(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.OSX.verified.txt
index bc476784fbb..0e0ac959050 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.OSX.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.OSX.verified.txt
@@ -1,5 +1,5 @@
-Ôªø  project [31;1mfailed with errors[m (0.2s)
+Ôªø  project [31;1mfailed with 1 error(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
 [?25l[1F
 [?25h
-Build [31;1mfailed with errors[m in 5.0s
+Build [31;1mfailed with 1 error(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Windows.verified.txt
index 11e72f94fbf..041c431ce68 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Windows.verified.txt
@@ -1,6 +1,6 @@
-Ôªø]9;4;3;\  project [31;1mfailed with errors[m (0.2s)
+Ôªø]9;4;3;\  project [31;1mfailed with 1 error(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
 [?25l[1F
 [?25h
-Build [31;1mfailed with errors[m in 5.0s
+Build [31;1mfailed with 1 error(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.Linux.verified.txt
new file mode 100644
index 00000000000..c36c4afd0e4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.Linux.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\  project [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 2 error(s) and 2 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.OSX.verified.txt
new file mode 100644
index 00000000000..84963693004
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.OSX.verified.txt
@@ -0,0 +1,8 @@
+Ôªø  project [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 2 error(s) and 2 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.Windows.verified.txt
new file mode 100644
index 00000000000..c36c4afd0e4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrorsAndWarnings.Windows.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\  project [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 2 error(s) and 2 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt
index aeec26abf26..8ef5d856df3 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt
@@ -1,6 +1,10 @@
-Ôªø]9;4;3;\  project [33;1msucceeded with warnings[m (0.2s)
-    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+Ôªø]9;4;3;\  project [33;1msucceeded with 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: 
+      A
+      Multi
+      Line
+      Warning!
 [?25l[1F
 [?25h
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 1 warning(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.OSX.verified.txt
index 3b6fcaf238d..b8d0095cff9 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.OSX.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.OSX.verified.txt
@@ -1,5 +1,10 @@
-Ôªø  project [33;1msucceeded with warnings[m (0.2s)
-    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+Ôªø  project [33;1msucceeded with 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: 
+      A
+      Multi
+      Line
+      Warning!
 [?25l[1F
 [?25h
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 1 warning(s)[m in 5.0s
+
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt
index aeec26abf26..8ef5d856df3 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt
@@ -1,6 +1,10 @@
-Ôªø]9;4;3;\  project [33;1msucceeded with warnings[m (0.2s)
-    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+Ôªø]9;4;3;\  project [33;1msucceeded with 1 warning(s)[m (0.2s)
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: 
+      A
+      Multi
+      Line
+      Warning!
 [?25l[1F
 [?25h
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 1 warning(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Linux.verified.txt
index 512b5b78d7e..350abfacc35 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Linux.verified.txt
@@ -1,9 +1,9 @@
 Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]DeviceFlow: https://testfeed/index.json
 directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]ATTENTION: User interaction required.**********************************************************************To sign in, use a web browser to open the page https://devicelogin and enter the code XXXXXX to authenticate.**********************************************************************
-  project [33;1msucceeded with warnings[m (0.2s)
+  project [33;1msucceeded with 2 warning(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]DeviceFlow: https://testfeed/index.json
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]ATTENTION: User interaction required.**********************************************************************To sign in, use a web browser to open the page https://devicelogin and enter the code XXXXXX to authenticate.**********************************************************************
 [?25l[1F
 [?25h
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 2 warning(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.OSX.verified.txt
index 0b5a2d831c1..7b518a239b1 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.OSX.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.OSX.verified.txt
@@ -1,8 +1,8 @@
 Ôªødirectory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]DeviceFlow: https://testfeed/index.json
 directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]ATTENTION: User interaction required.**********************************************************************To sign in, use a web browser to open the page https://devicelogin and enter the code XXXXXX to authenticate.**********************************************************************
-  project [33;1msucceeded with warnings[m (0.2s)
+  project [33;1msucceeded with 2 warning(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]DeviceFlow: https://testfeed/index.json
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]ATTENTION: User interaction required.**********************************************************************To sign in, use a web browser to open the page https://devicelogin and enter the code XXXXXX to authenticate.**********************************************************************
 [?25l[1F
 [?25h
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 2 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Windows.verified.txt
index 512b5b78d7e..350abfacc35 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateWarningMessage_Succeeded.Windows.verified.txt
@@ -1,9 +1,9 @@
 Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]DeviceFlow: https://testfeed/index.json
 directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]ATTENTION: User interaction required.**********************************************************************To sign in, use a web browser to open the page https://devicelogin and enter the code XXXXXX to authenticate.**********************************************************************
-  project [33;1msucceeded with warnings[m (0.2s)
+  project [33;1msucceeded with 2 warning(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]DeviceFlow: https://testfeed/index.json
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: [CredentialProvider]ATTENTION: User interaction required.**********************************************************************To sign in, use a web browser to open the page https://devicelogin and enter the code XXXXXX to authenticate.**********************************************************************
 [?25l[1F
 [?25h
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 2 warning(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Linux.verified.txt
index fde469843b0..ce00a4f3d5a 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Linux.verified.txt
@@ -1,4 +1,4 @@
 Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Restore Failed
 
-Build [31;1mfailed with errors[m in 5.0s
+Build [31;1mfailed with 1 error(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.OSX.verified.txt
index f912378dc48..481a262e96b 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.OSX.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.OSX.verified.txt
@@ -1,3 +1,3 @@
 Ôªødirectory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Restore Failed
 
-Build [31;1mfailed with errors[m in 5.0s
+Build [31;1mfailed with 1 error(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Windows.verified.txt
index fde469843b0..ce00a4f3d5a 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_Failed.Windows.verified.txt
@@ -1,4 +1,4 @@
 Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Restore Failed
 
-Build [31;1mfailed with errors[m in 5.0s
+Build [31;1mfailed with 1 error(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Linux.verified.txt
index 927084af0f3..c55453841ef 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Linux.verified.txt
@@ -1,4 +1,4 @@
 Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Restore with Warning
 
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 1 warning(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.OSX.verified.txt
index 430fce9be26..0a60f704fb0 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.OSX.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.OSX.verified.txt
@@ -1,3 +1,3 @@
 Ôªødirectory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Restore with Warning
 
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 1 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Windows.verified.txt
index 927084af0f3..c55453841ef 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintRestore_SuccessWithWarnings.Windows.verified.txt
@@ -1,4 +1,4 @@
 Ôªø]9;4;3;\directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Restore with Warning
 
-Build [33;1msucceeded with warnings[m in 5.0s
+Build [33;1msucceeded with 1 warning(s)[m in 5.0s
 ]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.Linux.verified.txt
new file mode 100644
index 00000000000..2a011fd87a4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.Linux.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.OSX.verified.txt
new file mode 100644
index 00000000000..94c8f8666eb
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.OSX.verified.txt
@@ -0,0 +1,8 @@
+ÔªøThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.Windows.verified.txt
new file mode 100644
index 00000000000..2a011fd87a4
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithOverwrittenVerbosity_FailedWithErrors.Windows.verified.txt
@@ -0,0 +1,9 @@
+Ôªø]9;4;3;\The plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
+    High importance message!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
+    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
+[?25l[1F
+[?25h
+Build [31;1mfailed with 1 error(s) and 1 warning(s)[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.Linux.verified.txt
new file mode 100644
index 00000000000..ea19717537f
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.Linux.verified.txt
@@ -0,0 +1,6 @@
+Ôªø]9;4;3;\  project [32;1msucceeded[m (0.2s)
+    Task Command Line.
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.OSX.verified.txt
new file mode 100644
index 00000000000..809a4f0a0eb
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.OSX.verified.txt
@@ -0,0 +1,5 @@
+Ôªø  project [32;1msucceeded[m (0.2s)
+    Task Command Line.
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.Windows.verified.txt
new file mode 100644
index 00000000000..ea19717537f
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithTaskCommandLineEventArgs_Succeeded.Windows.verified.txt
@@ -0,0 +1,6 @@
+Ôªø]9;4;3;\  project [32;1msucceeded[m (0.2s)
+    Task Command Line.
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Linux.verified.txt
new file mode 100644
index 00000000000..d5e6b72e894
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Linux.verified.txt
@@ -0,0 +1,4 @@
+Ôªø]9;4;3;\[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.OSX.verified.txt
new file mode 100644
index 00000000000..4d414bf90bf
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.OSX.verified.txt
@@ -0,0 +1,3 @@
+Ôªø[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Windows.verified.txt
new file mode 100644
index 00000000000..d5e6b72e894
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Windows.verified.txt
@@ -0,0 +1,4 @@
+Ôªø]9;4;3;\[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.Linux.verified.txt
new file mode 100644
index 00000000000..34897dfd415
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.Linux.verified.txt
@@ -0,0 +1,6 @@
+Ôªø]9;4;3;\  project test [32;1msucceeded[m (0.2s)
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+Test run [31;1mfailed[m. Total: 10 Failed: 1 Passed: 7 Skipped: 2, Duration: 1.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.OSX.verified.txt
new file mode 100644
index 00000000000..6615c0644e7
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.OSX.verified.txt
@@ -0,0 +1,5 @@
+Ôªø  project test [32;1msucceeded[m (0.2s)
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+Test run [31;1mfailed[m. Total: 10 Failed: 1 Passed: 7 Skipped: 2, Duration: 1.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.Windows.verified.txt
new file mode 100644
index 00000000000..34897dfd415
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.Windows.verified.txt
@@ -0,0 +1,6 @@
+Ôªø]9;4;3;\  project test [32;1msucceeded[m (0.2s)
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+Test run [31;1mfailed[m. Total: 10 Failed: 1 Passed: 7 Skipped: 2, Duration: 1.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.Linux.verified.txt
new file mode 100644
index 00000000000..1631c824d25
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.Linux.verified.txt
@@ -0,0 +1 @@
+Ôªø]9;4;3;\]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.OSX.verified.txt
new file mode 100644
index 00000000000..c1b8d743e34
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.OSX.verified.txt
@@ -0,0 +1 @@
+ÔªøemptyString
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.Windows.verified.txt
new file mode 100644
index 00000000000..1631c824d25
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryQuietVerbosity_Succeeded.Windows.verified.txt
@@ -0,0 +1 @@
+Ôªø]9;4;3;\]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/StaticStopwatch.cs b/src/MSBuild.UnitTests/StaticStopwatch.cs
new file mode 100644
index 00000000000..c1afad3179c
--- /dev/null
+++ b/src/MSBuild.UnitTests/StaticStopwatch.cs
@@ -0,0 +1,23 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Net.Http.Headers;
+using Microsoft.Build.Logging.TerminalLogger;
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+/// <summary>
+/// Stopwatch that always show the time provided in constructor.
+/// </summary>
+internal sealed class StaticStopwatch : StopwatchAbstraction
+{
+    public StaticStopwatch(double elapsedSeconds)
+    {
+        ElapsedSeconds = elapsedSeconds;
+    }
+
+    public override double ElapsedSeconds { get; }
+
+    public override void Start() => throw new System.NotImplementedException();
+    public override void Stop() => throw new System.NotImplementedException();
+}
diff --git a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
index 75749517b55..955610abad2 100644
--- a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
+++ b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
@@ -30,7 +30,14 @@ public class TerminalLogger_Tests : IEventSource, IDisposable
     {
         private const int _nodeCount = 8;
         private const string _eventSender = "Test";
+
+        private const string _immediateMessageString =
+            "The plugin credential provider could not acquire credentials." +
+            "Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, " +
+            "/p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`";
+
         private readonly string _projectFile = NativeMethods.IsUnixLike ? "/src/project.proj" : @"C:\src\project.proj";
+        private readonly string _projectFile2 = NativeMethods.IsUnixLike ? "/src/project2.proj" : @"C:\src\project2.proj";
 
         private StringWriter _outputWriter = new();
 
@@ -38,10 +45,15 @@ public class TerminalLogger_Tests : IEventSource, IDisposable
         private readonly TerminalLogger _terminallogger;
 
         private readonly DateTime _buildStartTime = new DateTime(2023, 3, 30, 16, 30, 0);
+        private readonly DateTime _targetStartTime = new DateTime(2023, 3, 30, 16, 30, 1);
+        private readonly DateTime _messageTime = new DateTime(2023, 3, 30, 16, 30, 2);
         private readonly DateTime _buildFinishTime = new DateTime(2023, 3, 30, 16, 30, 5);
 
+
         private VerifySettings _settings = new();
 
+        private readonly CultureInfo _originalCulture = Thread.CurrentThread.CurrentCulture;
+
         public TerminalLogger_Tests()
         {
             _mockTerminal = new Terminal(_outputWriter);
@@ -52,6 +64,9 @@ public TerminalLogger_Tests()
             _terminallogger.CreateStopwatch = () => new MockStopwatch();
 
             UseProjectRelativeDirectory("Snapshots");
+
+            // Avoids issues with different cultures on different machines
+            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
         }
 
         #region IEventSource implementation
@@ -93,6 +108,7 @@ public TerminalLogger_Tests()
         public void Dispose()
         {
             _terminallogger.Shutdown();
+            Thread.CurrentThread.CurrentCulture = _originalCulture;
         }
 
         #endregion
@@ -132,7 +148,7 @@ private ProjectFinishedEventArgs MakeProjectFinishedEventArgs(string projectFile
 
         private TargetStartedEventArgs MakeTargetStartedEventArgs(string projectFile, string targetName)
         {
-            return new TargetStartedEventArgs("", "", targetName, projectFile, targetFile: projectFile)
+            return new TargetStartedEventArgs("", "", targetName, projectFile, targetFile: projectFile, String.Empty, TargetBuiltReason.None, _targetStartTime)
             {
                 BuildEventContext = MakeBuildEventContext(),
             };
@@ -170,14 +186,31 @@ private BuildWarningEventArgs MakeWarningEventArgs(string warning)
             };
         }
 
-        private BuildMessageEventArgs MakeMessageEventArgs(string message)
+        private BuildMessageEventArgs MakeMessageEventArgs(string message, MessageImportance importance)
+        {
+            return new BuildMessageEventArgs(message, "keyword", null, importance)
+            {
+                BuildEventContext = MakeBuildEventContext(),
+            };
+        }
+
+        private BuildMessageEventArgs MakeTaskCommandLineEventArgs(string message, MessageImportance importance)
         {
-            return new BuildMessageEventArgs(message, "keyword", null, MessageImportance.High)
+            return new TaskCommandLineEventArgs(message, "Task", importance)
             {
                 BuildEventContext = MakeBuildEventContext(),
             };
         }
 
+        private BuildMessageEventArgs MakeExtendedMessageEventArgs(string message, MessageImportance importance, string extendedType, Dictionary<string, string?>? extendedMetadata)
+        {
+            return new ExtendedBuildMessageEventArgs(extendedType, message, "keyword", null, importance, _messageTime)
+            {
+                BuildEventContext = MakeBuildEventContext(),
+                ExtendedMetadata = extendedMetadata
+            };
+        }
+
         private BuildErrorEventArgs MakeErrorEventArgs(string error)
         {
             return new BuildErrorEventArgs("", "AA0000", "directory/file", 1, 2, 3, 4, error, null, null)
@@ -207,6 +240,51 @@ private void InvokeLoggerCallbacksForSimpleProject(bool succeeded, Action additi
             BuildFinished?.Invoke(_eventSender, MakeBuildFinishedEventArgs(succeeded));
         }
 
+        private void InvokeLoggerCallbacksForTestProject(bool succeeded, Action additionalCallbacks)
+        {
+            BuildStarted?.Invoke(_eventSender, MakeBuildStartedEventArgs());
+            ProjectStarted?.Invoke(_eventSender, MakeProjectStartedEventArgs(_projectFile));
+
+            TargetStarted?.Invoke(_eventSender, MakeTargetStartedEventArgs(_projectFile, "_TestRunStart"));
+            TaskStarted?.Invoke(_eventSender, MakeTaskStartedEventArgs(_projectFile, "Task"));
+
+            additionalCallbacks();
+
+            TaskFinished?.Invoke(_eventSender, MakeTaskFinishedEventArgs(_projectFile, "Task", succeeded));
+            TargetFinished?.Invoke(_eventSender, MakeTargetFinishedEventArgs(_projectFile, "_TestRunStart", succeeded));
+
+            ProjectFinished?.Invoke(_eventSender, MakeProjectFinishedEventArgs(_projectFile, succeeded));
+
+            BuildFinished?.Invoke(_eventSender, MakeBuildFinishedEventArgs(succeeded));
+        }
+        
+        private void InvokeLoggerCallbacksForTwoProjects(bool succeeded, Action additionalCallbacks, Action additionalCallbacks2)
+        {
+            BuildStarted?.Invoke(_eventSender, MakeBuildStartedEventArgs());
+
+            ProjectStarted?.Invoke(_eventSender, MakeProjectStartedEventArgs(_projectFile));
+            TargetStarted?.Invoke(_eventSender, MakeTargetStartedEventArgs(_projectFile, "Build1"));
+            TaskStarted?.Invoke(_eventSender, MakeTaskStartedEventArgs(_projectFile, "Task1"));
+
+            additionalCallbacks();
+
+            TaskFinished?.Invoke(_eventSender, MakeTaskFinishedEventArgs(_projectFile, "Task1", succeeded));
+            TargetFinished?.Invoke(_eventSender, MakeTargetFinishedEventArgs(_projectFile, "Build1", succeeded));
+            ProjectFinished?.Invoke(_eventSender, MakeProjectFinishedEventArgs(_projectFile, succeeded));
+
+            ProjectStarted?.Invoke(_eventSender, MakeProjectStartedEventArgs(_projectFile2));
+            TargetStarted?.Invoke(_eventSender, MakeTargetStartedEventArgs(_projectFile2, "Build2"));
+            TaskStarted?.Invoke(_eventSender, MakeTaskStartedEventArgs(_projectFile2, "Task2"));
+
+            additionalCallbacks2();
+
+            TaskFinished?.Invoke(_eventSender, MakeTaskFinishedEventArgs(_projectFile2, "Task2", succeeded));
+            TargetFinished?.Invoke(_eventSender, MakeTargetFinishedEventArgs(_projectFile2, "Build2", succeeded));
+            ProjectFinished?.Invoke(_eventSender, MakeProjectFinishedEventArgs(_projectFile2, succeeded));
+
+            BuildFinished?.Invoke(_eventSender, MakeBuildFinishedEventArgs(succeeded));
+        }
+
         [Fact]
         public Task PrintsBuildSummary_Succeeded()
         {
@@ -220,7 +298,7 @@ public Task PrintBuildSummary_SucceededWithWarnings()
         {
             InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
             {
-                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning!"));
+                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("A\nMulti\r\nLine\nWarning!"));
             });
 
             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
@@ -247,10 +325,7 @@ public Task PrintImmediateMessage_Success()
         {
             InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
             {
-                MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs(
-                    "The plugin credential provider could not acquire credentials." +
-                    "Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, " +
-                    "/p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`"));
+                MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs(_immediateMessageString, MessageImportance.High));
             });
 
             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
@@ -261,7 +336,7 @@ public Task PrintImmediateMessage_Skipped()
         {
             InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
             {
-                MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs("--anycustomarg"));
+                MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs("--anycustomarg", MessageImportance.High));
             });
 
             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
@@ -313,8 +388,183 @@ public Task PrintBuildSummary_FailedWithErrors()
             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
         }
 
+        [Fact]
+        public Task PrintBuildSummary_FailedWithErrorsAndWarnings()
+        {
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, () =>
+            {
+                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning1!"));
+                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning2!"));
+                ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error1!"));
+                ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error2!"));
+            });
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+
+        [Fact]
+        public Task PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings()
+        {
+            InvokeLoggerCallbacksForTwoProjects(
+                succeeded: false,
+                () =>
+                {
+                    WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning1!"));
+                    WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning2!"));
+                    ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error1!"));
+                    ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error2!"));
+                },
+                () =>
+                {
+                    WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning3!"));
+                    WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning4!"));
+                    ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error3!"));
+                    ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error4!"));
+                });
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+
         #endregion
 
+        private void CallAllTypesOfMessagesWarningAndError()
+        {
+            MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs(_immediateMessageString, MessageImportance.High));
+            MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs("High importance message!", MessageImportance.High));
+            MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs("Normal importance message!", MessageImportance.Normal));
+            MessageRaised?.Invoke(_eventSender, MakeMessageEventArgs("Low importance message!", MessageImportance.Low));
+            WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("Warning!"));
+            ErrorRaised?.Invoke(_eventSender, MakeErrorEventArgs("Error!"));
+        }
+
+        private void CallAllTypesOfTestMessages()
+        {
+            MessageRaised?.Invoke(_eventSender, MakeExtendedMessageEventArgs(
+                "Test passed.",
+                MessageImportance.High,
+                "TLTESTPASSED",
+                new Dictionary<string, string?>() { { "displayName", "testName1" }, { "localizedResult", "passed" } }));
+            MessageRaised?.Invoke(_eventSender, MakeExtendedMessageEventArgs(
+                "Test skipped.",
+                MessageImportance.High,
+                "TLTESTSKIPPED",
+                new Dictionary<string, string?>() { { "displayName", "testName2" }, { "localizedResult", "skipped" } }));
+            MessageRaised?.Invoke(_eventSender, MakeExtendedMessageEventArgs(
+                "Test results.",
+                MessageImportance.High,
+                "TLTESTFINISH",
+                new Dictionary<string, string?>() { { "total", "10" }, { "passed", "7" }, { "skipped", "2" }, { "failed", "1" } }));
+        }
+
+        [Fact]
+        public Task PrintBuildSummaryQuietVerbosity_FailedWithErrors()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Quiet;
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, CallAllTypesOfMessagesWarningAndError);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+
+        [Fact]
+        public Task PrintBuildSummaryMinimalVerbosity_FailedWithErrors()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Minimal;
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, CallAllTypesOfMessagesWarningAndError);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintBuildSummaryNormalVerbosity_FailedWithErrors()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Normal;
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, CallAllTypesOfMessagesWarningAndError);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintBuildSummaryDetailedVerbosity_FailedWithErrors()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Detailed;
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, CallAllTypesOfMessagesWarningAndError);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+
+        [Fact]
+        public Task PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Diagnostic;
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, CallAllTypesOfMessagesWarningAndError);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintTestSummaryNormalVerbosity_Succeeded()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Normal;
+            InvokeLoggerCallbacksForTestProject(succeeded: true, CallAllTypesOfTestMessages);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintTestSummaryQuietVerbosity_Succeeded()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Quiet;
+            InvokeLoggerCallbacksForTestProject(succeeded: true, CallAllTypesOfTestMessages);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintSummaryWithOverwrittenVerbosity_FailedWithErrors()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Minimal;
+            _terminallogger.Parameters = "v=diag";
+            _terminallogger.ParseParameters();
+
+            InvokeLoggerCallbacksForSimpleProject(succeeded: false, CallAllTypesOfMessagesWarningAndError);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintSummaryWithTaskCommandLineEventArgs_Succeeded()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Detailed;
+            _terminallogger.Parameters = "SHOWCOMMANDLINE=on";
+            _terminallogger.ParseParameters();
+
+            InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
+            {
+                MessageRaised?.Invoke(_eventSender, MakeTaskCommandLineEventArgs("Task Command Line.", MessageImportance.High));
+            });
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
+        [Fact]
+        public Task PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded()
+        {
+            _terminallogger.Verbosity = LoggerVerbosity.Detailed;
+            _terminallogger.Parameters = "SHOWCOMMANDLINE=off";
+            _terminallogger.ParseParameters();
+
+            InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
+            {
+                MessageRaised?.Invoke(_eventSender, MakeTaskCommandLineEventArgs("Task Command Line.", MessageImportance.High));
+            });
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
+
         [Fact]
         public void DisplayNodesShowsCurrent()
         {
diff --git a/src/MSBuild.UnitTests/TickingStopwatch.cs b/src/MSBuild.UnitTests/TickingStopwatch.cs
new file mode 100644
index 00000000000..e0cd213ebeb
--- /dev/null
+++ b/src/MSBuild.UnitTests/TickingStopwatch.cs
@@ -0,0 +1,32 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Logging.TerminalLogger;
+
+namespace Microsoft.Build.CommandLine.UnitTests;
+
+/// <summary>
+/// Stopwatch that will increase by 0.1, every time you ask them for time. Useful for animations, because they check that NodeStatus
+/// reference stays the same, and also for ensuring we are grabbing the time only once per frame.
+/// </summary>
+internal sealed class TickingStopwatch : StopwatchAbstraction
+{
+    private double _elapsedSeconds;
+
+    public TickingStopwatch(double elapsedSeconds = 0.0)
+    {
+        _elapsedSeconds = elapsedSeconds;
+    }
+
+    public override double ElapsedSeconds
+    {
+        get
+        {
+            var elapsed = _elapsedSeconds;
+            _elapsedSeconds += 0.1;
+            return elapsed;
+        }
+    }
+    public override void Start() => throw new System.NotImplementedException();
+    public override void Stop() => throw new System.NotImplementedException();
+}
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index ceaf38e0326..1c3aed6df74 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -12,6 +12,7 @@
 using System.Runtime.InteropServices;
 using System.Threading;
 using Microsoft.Build.CommandLine;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
@@ -809,6 +810,37 @@ public void BuildFailsWithBadPropertyName()
             results.ShouldContain("error MSB4177");
         }
 
+        [Theory]
+        [InlineData("-getProperty:Foo", "propertyContent")]
+        [InlineData("-getItem:Bar", "ItemContent")]
+        [InlineData("-getTargetResult:Biz", "Success")]
+        public void GetStarOutputsToFileIfRequested(string extraSwitch, string result)
+        {
+            using TestEnvironment env = TestEnvironment.Create();
+            TransientTestFile project = env.CreateFile("testProject.csproj", @"
+<Project>
+  <PropertyGroup>
+    <Foo>propertyContent</Foo>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <Bar Include=""ItemContent"" />
+  </ItemGroup>
+
+  <Target Name=""Biz"" />
+</Project>
+");
+            string resultFile = env.GetTempFile(".tmp").Path;
+            string results = RunnerUtilities.ExecMSBuild($" {project.Path} {extraSwitch} -getResultOutputFile:{resultFile}", out bool success);
+            success.ShouldBeTrue();
+            File.Exists(resultFile).ShouldBeTrue();
+            File.ReadAllText(resultFile).ShouldContain(result);
+
+            result = RunnerUtilities.ExecMSBuild($" {project.Path} {extraSwitch} -getResultOutputFile:", out success);
+            success.ShouldBeFalse();
+            result.ShouldContain("MSB1068");
+        }
+
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
@@ -863,6 +895,7 @@ public void SetConsoleUICulture()
 
             // Restore the current UI culture back to the way it was at the beginning of this unit test.
             thisThread.CurrentUICulture = originalUICulture;
+            MSBuildApp.SetConsoleUI();
         }
 
 
@@ -2578,6 +2611,41 @@ public override bool Execute()
             }
         }
 
+        [Theory]
+        [InlineData("", true)]
+        [InlineData("/tl:true", false)]
+        [InlineData("/nologo", false)]
+        [InlineData("/getProperty:p", false)]
+        public void EndToEndVersionMessage(string arguments, bool shouldContainVersionMessage)
+        {
+            using TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create();
+
+            string projectContents = ObjectModelHelpers.CleanupFileContents("""
+                                                                            <Project>
+                                                                                <Target Name="Hello">
+                                                                                </Target>
+                                                                            </Project>
+                                                                            """);
+
+            TransientTestProjectWithFiles testProject = testEnvironment.CreateTestProjectWithFiles(projectContents);
+
+            string output = RunnerUtilities.ExecMSBuild($"{arguments} \"{testProject.ProjectFile}\"", out bool success, _output);
+            success.ShouldBeTrue();
+
+            string expectedVersionString =
+                ResourceUtilities.FormatResourceStringStripCodeAndKeyword("MSBuildVersionMessage",
+                    ProjectCollection.DisplayVersion, NativeMethodsShared.FrameworkName);
+
+            if (shouldContainVersionMessage)
+            {
+                output.ShouldContain(expectedVersionString);
+            }
+            else
+            {
+                output.ShouldNotContain(expectedVersionString);
+            }
+        }
+
         [Theory]
         [InlineData("/v:diagnostic", MessageImportance.Low)]
         [InlineData("/v:detailed", MessageImportance.Low)]
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index e616912f75d..569eb51d7cb 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -117,6 +117,7 @@ internal enum ParameterizedSwitch
             GetProperty,
             GetItem,
             GetTargetResult,
+            GetResultOutputFile,
             FeatureAvailability,
             // This has to be kept as last enum value
             NumberOfParameterizedSwitches,
@@ -285,6 +286,7 @@ internal ParameterizedSwitchInfo(
             new ParameterizedSwitchInfo(  new string[] { "getProperty" },                       ParameterizedSwitch.GetProperty,                null,                           true,           "MissingGetPropertyError",             true,   false),
             new ParameterizedSwitchInfo(  new string[] { "getItem" },                           ParameterizedSwitch.GetItem,                    null,                           true,           "MissingGetItemError",                 true,   false),
             new ParameterizedSwitchInfo(  new string[] { "getTargetResult" },                   ParameterizedSwitch.GetTargetResult,            null,                           true,           "MissingGetTargetResultError",         true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "getResultOutputFile" },               ParameterizedSwitch.GetResultOutputFile,        null,                           true,           "MissingGetResultFileError",           true,   false),
             new ParameterizedSwitchInfo(  new string[] { "featureavailability", "fa" },         ParameterizedSwitch.FeatureAvailability,        null,                           true,           "MissingFeatureAvailabilityError",     true,   false),
         };
 
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index f14027fee14..f396ca22cfe 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -58,10 +58,6 @@
     <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.tlb</AllowedReferenceRelatedFileExtensions>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(MonoBuild)' == 'true'">
-    <TargetExt>.dll</TargetExt>
-  </PropertyGroup>
-
   <ItemGroup>
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
@@ -132,6 +128,7 @@
     <Compile Include="..\Shared\AssemblyNameExtension.cs" />
     <Compile Include="..\Shared\ThreadPoolExtensions.cs" />
     <Compile Include="..\Shared\StringExtensions.cs" />
+    <Compile Include="..\Shared\ConversionUtilities.cs" />
     <Compile Include="AssemblyInfo.cs" />
     <Compile Include="AssemblyResources.cs" />
     <Compile Include="AutomaticEncodingRestorer.cs" />
@@ -228,7 +225,7 @@
        in resolving references using them instead of the correct build-time references.
        Instead, add them just afterward, before assigning target paths/copying to
        the bin folder. -->
-  <Target Name="AddRefAssemblies" DependsOnTargets="ResolveAssemblyReferences" BeforeTargets="AssignTargetPaths" Condition="'$(MonoBuild)' != 'true'">
+  <Target Name="AddRefAssemblies" DependsOnTargets="ResolveAssemblyReferences" BeforeTargets="AssignTargetPaths">
     <ItemGroup>
       <Content Include="$(NuGetPackageRoot)\netstandard.library\2.0.3\build\netstandard2.0\ref\netstandard.dll" Link="ref\netstandard.dll" CopyToOutputDirectory="PreserveNewest" />
       <Content Include="$(NuGetPackageRoot)\netstandard.library\2.0.3\build\netstandard2.0\ref\mscorlib.dll" Link="ref\mscorlib.dll" CopyToOutputDirectory="PreserveNewest" />
diff --git a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
index 5c715c33297..186e3c18a53 100644
--- a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -1160,7 +1160,7 @@ elementFormDefault="qualified">
     </xs:element>
     <xs:element name="Folder" type="msb:SimpleItemType" substitutionGroup="msb:Item">
         <xs:annotation>
-            <xs:documentation><!-- _locID_text="Folder" _locComment="" -->Folder on disk</xs:documentation>
+            <xs:documentation><!-- _locID_text="Folder" _locComment="" -->Used by Visual Studio to identify an empty folder.</xs:documentation>
         </xs:annotation>
     </xs:element>
     <xs:element name="Import" type="msb:SimpleItemType" substitutionGroup="msb:Item">
@@ -2074,12 +2074,12 @@ elementFormDefault="qualified">
     <xs:element name="RootNamespace" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="RuntimeIdentifier" type="msb:StringPropertyType" substitutionGroup="msb:Property">
       <xs:annotation>
-        <xs:documentation><!-- _locID_text="RuntimeIdentifier" _locComment="" -->Runtime identifier supported by the project (e.g. win10-x64)</xs:documentation>
+        <xs:documentation><!-- _locID_text="RuntimeIdentifier" _locComment="" -->Runtime identifier supported by the project (e.g. win-x64)</xs:documentation>
       </xs:annotation>
     </xs:element>
     <xs:element name="RuntimeIdentifiers" type="msb:StringPropertyType" substitutionGroup="msb:Property">
       <xs:annotation>
-        <xs:documentation><!-- _locID_text="RuntimeIdentifiers" _locComment="" -->Semi-colon separated list of runtime identifiers supported by the project (e.g. win10-x64;osx.10.11-x64;ubuntu.16.04-x64)</xs:documentation>
+        <xs:documentation><!-- _locID_text="RuntimeIdentifiers" _locComment="" -->Semi-colon separated list of runtime identifiers supported by the project (e.g. win-x64;osx-x64;linux-x64)</xs:documentation>
       </xs:annotation>
     </xs:element>
     <xs:element name="SccProjectName" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
@@ -2123,12 +2123,12 @@ elementFormDefault="qualified">
     <xs:element name="TargetCulture" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="TargetFramework" type="msb:StringPropertyType" substitutionGroup="msb:Property">
       <xs:annotation>
-        <xs:documentation><!-- _locID_text="TargetFramework" _locComment="" -->Framework that this project targets. Must be a Target Framework Moniker (e.g. netcoreapp1.0)</xs:documentation>
+        <xs:documentation><!-- _locID_text="TargetFramework" _locComment="" -->Framework that this project targets. Must be a Target Framework Moniker (e.g. net8.0)</xs:documentation>
       </xs:annotation>
     </xs:element>
     <xs:element name="TargetFrameworks" type="msb:StringPropertyType" substitutionGroup="msb:Property">
       <xs:annotation>
-        <xs:documentation><!-- _locID_text="TargetFrameworks" _locComment="" -->Semi-colon separated list of frameworks that this project targets. Must be a Target Framework Moniker (e.g. netcoreapp1.0;net461)</xs:documentation>
+        <xs:documentation><!-- _locID_text="TargetFrameworks" _locComment="" -->Semi-colon separated list of frameworks that this project targets. Must be a Target Framework Moniker (e.g. net8.0;net461)</xs:documentation>
       </xs:annotation>
     </xs:element>
     <xs:element name="TargetFrameworkVersion" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
diff --git a/src/MSBuild/MSBuildClientApp.cs b/src/MSBuild/MSBuildClientApp.cs
index 3bc82973b49..fbe3d349fc4 100644
--- a/src/MSBuild/MSBuildClientApp.cs
+++ b/src/MSBuild/MSBuildClientApp.cs
@@ -7,7 +7,7 @@
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Shared;
 
-#if RUNTIME_TYPE_NETCORE || MONO
+#if RUNTIME_TYPE_NETCORE
 using System.IO;
 using System.Diagnostics;
 #endif
@@ -99,7 +99,7 @@ public static MSBuildApp.ExitType Execute(
         }
 
         // Copied from NodeProviderOutOfProcBase.cs
-#if RUNTIME_TYPE_NETCORE || MONO
+#if RUNTIME_TYPE_NETCORE
         private static string? CurrentHost;
         private static string GetCurrentHost()
         {
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index dc6cfcdf7e6..00b1333080b 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -810,13 +810,10 @@ private NodeEngineShutdownReason HandleShutdown()
             // Wait for the RunTask task runner thread before shutting down so that we can cleanly dispose all WaitHandles.
             _taskRunnerThread?.Join();
 
-            if (_debugCommunications)
-            {
-                using (StreamWriter writer = File.CreateText(String.Format(CultureInfo.CurrentCulture, Path.Combine(FileUtilities.TempFileDirectory, @"MSBuild_NodeShutdown_{0}.txt"), Process.GetCurrentProcess().Id)))
-                {
-                    writer.WriteLine("Node shutting down with reason {0}.", _shutdownReason);
-                }
-            }
+            using StreamWriter debugWriter = _debugCommunications
+                ? File.CreateText(string.Format(CultureInfo.CurrentCulture, Path.Combine(FileUtilities.TempFileDirectory, @"MSBuild_NodeShutdown_{0}.txt"), Process.GetCurrentProcess().Id))
+                : null;
+            debugWriter?.WriteLine("Node shutting down with reason {0}.", _shutdownReason);
 
 #if !CLR2COMPATIBILITY
             _registeredTaskObjectCache.DisposeCacheObjects(RegisteredTaskObjectLifetime.Build);
@@ -827,8 +824,15 @@ private NodeEngineShutdownReason HandleShutdown()
             // so reset it away from a user-requested folder that may get deleted.
             NativeMethodsShared.SetCurrentDirectory(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory);
 
-            // Restore the original environment.
-            CommunicationsUtilities.SetEnvironment(_savedEnvironment);
+            // Restore the original environment, best effort.
+            try
+            {
+                CommunicationsUtilities.SetEnvironment(_savedEnvironment);
+            }
+            catch (Exception ex)
+            {
+                debugWriter?.WriteLine("Failed to restore the original environment: {0}.", ex);
+            }
 
             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)
             {
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index a8f93e5f609..c6ddf821ce0 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -1,6 +1,66 @@
 Ôªø<?xml version="1.0" encoding="utf-8"?>
 <root>
+  <!--
+    Microsoft ResX Schema
+
+    Version 2.0
+
+    The primary goals of this format is to allow a simple XML format
+    that is mostly human readable. The generation and parsing of the
+    various data types are done through the TypeConverter classes
+    associated with the data types.
+
+    Example:
+
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+
+    There are any number of "resheader" rows that contain simple
+    name/value pairs.
+
+    Each data row contains a name, and value. The row also contains a
+    type or mimetype. Type corresponds to a .NET class that support
+    text/value conversion through the TypeConverter architecture.
+    Classes that don't support this are serialized and stored with the
+    mimetype set.
+
+    The mimetype is used for serialized objects, and tells the
+    ResXResourceReader how to depersist the object. This is currently not
+    extensible. For a given mimetype the value must be set accordingly:
+
+    Note - application/x-microsoft.net.object.binary.base64 is the format
+    that the ResXResourceWriter will generate, however the reader can
+    read any of the formats listed below.
+
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with
+            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
   <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
     <xsd:element name="root" msdata:IsDataSet="true">
       <xsd:complexType>
         <xsd:choice maxOccurs="unbounded">
@@ -9,9 +69,16 @@
               <xsd:sequence>
                 <xsd:element name="value" type="xsd:string" minOccurs="0" />
               </xsd:sequence>
-              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="name" use="required" type="xsd:string" />
               <xsd:attribute name="type" type="xsd:string" />
               <xsd:attribute name="mimetype" type="xsd:string" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
             </xsd:complexType>
           </xsd:element>
           <xsd:element name="data">
@@ -20,11 +87,10 @@
                 <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                 <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
               </xsd:sequence>
-              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
-              <xsd:attribute name="UESanitized" type="xsd:boolean" msdata:Ordinal="3" />
-              <xsd:attribute name="Visibility" type="Visibility_Type" msdata:Ordinal="4" />
-              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="5" />
-              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="6" />
+              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+              <xsd:attribute ref="xml:space" />
             </xsd:complexType>
           </xsd:element>
           <xsd:element name="resheader">
@@ -38,13 +104,6 @@
         </xsd:choice>
       </xsd:complexType>
     </xsd:element>
-    <xsd:simpleType name="Visibility_Type">
-      <xsd:restriction base="xsd:string">
-        <xsd:enumeration value="Public" />
-        <xsd:enumeration value="Obsolete" />
-        <xsd:enumeration value="Private_OM" />
-      </xsd:restriction>
-    </xsd:simpleType>
   </xsd:schema>
   <resheader name="resmimetype">
     <value>text/microsoft-resx</value>
@@ -53,19 +112,19 @@
     <value>2.0</value>
   </resheader>
   <resheader name="reader">
-    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
   </resheader>
   <resheader name="writer">
-    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
   </resheader>
-  <data name="AmbiguousProjectError" UESanitized="false" Visibility="Public">
+  <data name="AmbiguousProjectError" xml:space="preserve">
     <value>MSBUILD : error MSB1011: Specify which project or solution file to use because this folder contains more than one project or solution file.</value>
     <comment>{StrBegin="MSBUILD : error MSB1011: "}UE: If no project or solution file is explicitly specified on the MSBuild.exe command-line, then the engine searches for a
       project or solution file in the current directory by looking for *.*PROJ and *.SLN. If more than one file is found that matches this wildcard, we
       fire this error.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="AmbiguousProjectDirectoryError" UESanitized="false" Visibility="Public">
+  <data name="AmbiguousProjectDirectoryError" xml:space="preserve">
     <value>MSBUILD : error MSB1050: Specify which project or solution file to use because the folder "{0}" contains more than one project or solution file.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1050: "}UE: If no project or solution file is explicitly specified on the MSBuild.exe command-line, then the engine searches for a
@@ -74,36 +133,35 @@
       LOCALIZATION: The prefix "MSB1050 : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-
-  <data name="ConfigurationFailurePrefixNoErrorCode" UESanitized="false" Visibility="Public">
+  <data name="ConfigurationFailurePrefixNoErrorCode" xml:space="preserve">
     <value>MSBUILD : Configuration error {0}: {1}</value>
     <comment>{SubString="Configuration"}UE: This prefixes any error from reading the toolset definitions in msbuild.exe.config or the registry.
       There's no error code because one was included in the error message.
       LOCALIZATION: The word "Configuration" should be localized, the words "MSBuild" and "error" should NOT be localized.
     </comment>
   </data>
-  <data name="CannotAutoDisableAutoResponseFile" UESanitized="false" Visibility="Public">
+  <data name="CannotAutoDisableAutoResponseFile" xml:space="preserve">
     <value>MSBUILD : error MSB1027: The -noAutoResponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.</value>
     <comment>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</comment>
   </data>
-  <data name="MSBuildVersionMessage" UESanitized="true" Visibility="Public">
+  <data name="MSBuildVersionMessage" xml:space="preserve">
     <value>MSBuild version {0} for {1}</value>
-    <comment>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</comment>
+    <comment>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</comment>
   </data>
-  <data name="DuplicateProjectSwitchError" UESanitized="true" Visibility="Public">
+  <data name="DuplicateProjectSwitchError" xml:space="preserve">
     <value>MSBUILD : error MSB1008: Only one project can be specified.</value>
     <comment>{StrBegin="MSBUILD : error MSB1008: "}UE: This happens if the user does something like "msbuild.exe myapp.proj myapp2.proj". This is not allowed.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="FatalError" UESanitized="true" Visibility="Public">
+  <data name="FatalError" xml:space="preserve">
     <value>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</value>
     <comment>{StrBegin="MSBUILD : error MSB1025: "}UE: This message is shown when the application has to terminate either because of a bug in the code, or because some
       FX/CLR method threw an unexpected exception.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" and "MSBuild" should not be localized.</comment>
   </data>
-  <data name="HelpMessage_1_Syntax" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_1_Syntax" xml:space="preserve">
     <value>Syntax:              MSBuild.exe [options] [project file | directory]
 </value>
     <comment>
@@ -115,7 +173,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_2_Description" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_2_Description" xml:space="preserve">
     <value>Description:         Builds the specified targets in the project file. If
                      a project file is not specified, MSBuild searches the
                      current working directory for a file that has a file
@@ -132,7 +190,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_3_SwitchesHeader" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_3_SwitchesHeader" xml:space="preserve">
     <value>Switches:            Note that you can specify switches using
                      "-switch", "/switch" and "--switch".
 </value>
@@ -145,7 +203,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_4_HelpSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_4_HelpSwitch" xml:space="preserve">
     <value>  -help              Display this usage message. (Short form: -? or -h)
 </value>
     <comment>
@@ -157,7 +215,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_5_NoLogoSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_5_NoLogoSwitch" xml:space="preserve">
     <value>  -noLogo            Do not display the startup banner and copyright message.
 </value>
     <comment>
@@ -169,7 +227,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_6_VersionSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_6_VersionSwitch" xml:space="preserve">
     <value>  -version           Display version information only. (Short form: -ver)
 </value>
     <comment>
@@ -181,7 +239,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_7_ResponseFile" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_7_ResponseFile" xml:space="preserve">
     <value>  @&lt;file&gt;            Insert command-line settings from a text file. To specify
                      multiple response files, specify each response file
                      separately.
@@ -200,7 +258,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_8_NoAutoResponseSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_8_NoAutoResponseSwitch" xml:space="preserve">
     <value>  -noAutoResponse    Do not auto-include any MSBuild.rsp files. (Short form:
                      -noAutoRsp)
 </value>
@@ -213,7 +271,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_9_TargetSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_9_TargetSwitch" xml:space="preserve">
     <value>  -target:&lt;targets&gt;  Build these targets in this project. Use a semicolon or a
                      comma to separate multiple targets, or specify each
                      target separately. (Short form: -t)
@@ -229,7 +287,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_10_PropertySwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_10_PropertySwitch" xml:space="preserve">
     <value>  -property:&lt;n&gt;=&lt;v&gt;  Set or override these project-level properties. &lt;n&gt; is
                      the property name, and &lt;v&gt; is the property value. Use a
                      semicolon or a comma to separate multiple properties, or
@@ -246,7 +304,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_11_LoggerSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_11_LoggerSwitch" xml:space="preserve">
     <value>  -logger:&lt;logger&gt;   Use this logger to log events from MSBuild. To specify
                      multiple loggers, specify each logger separately.
                      The &lt;logger&gt; syntax is:
@@ -271,7 +329,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_12_VerbositySwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_12_VerbositySwitch" xml:space="preserve">
     <value>  -verbosity:&lt;level&gt; Display this amount of information in the event log.
                      The available verbosity levels are: q[uiet], m[inimal],
                      n[ormal], d[etailed], and diag[nostic]. (Short form: -v)
@@ -291,7 +349,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_13_ConsoleLoggerParametersSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_13_ConsoleLoggerParametersSwitch" xml:space="preserve">
     <value>  -consoleLoggerParameters:&lt;parameters&gt;
                      Parameters to console logger. (Short form: -clp)
                      The available parameters are:
@@ -338,7 +396,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_14_NoConsoleLoggerSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_14_NoConsoleLoggerSwitch" xml:space="preserve">
     <value>  -noConsoleLogger   Disable the default console logger and do not log events
                      to the console. (Short form: -noConLog)
 </value>
@@ -351,7 +409,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_15_ValidateSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_15_ValidateSwitch" xml:space="preserve">
     <value>  -validate          Validate the project against the default schema. (Short
                      form: -val)
 
@@ -369,19 +427,19 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_17_MaximumCPUSwitch" UESanitized="false" Visibility="Public">
-      <value>  -maxCpuCount[:n]   Specifies the maximum number of concurrent processes to
+  <data name="HelpMessage_17_MaximumCPUSwitch" xml:space="preserve">
+    <value>  -maxCpuCount[:n]   Specifies the maximum number of concurrent processes to
                      build with. If the switch is not used, the default
                      value used is 1. If the switch is used without a value
                      MSBuild will use up to the number of processors on the
                      computer. (Short form: -m[:n])
       </value>
-      <comment>
+    <comment>
           LOCALIZATION: "maxCpuCount" should not be localized.
           LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
       </comment>
   </data>
-  <data name="HelpMessage_16_Examples" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_16_Examples" xml:space="preserve">
     <value>Examples:
 
         MSBuild MyApp.sln -t:Rebuild -p:Configuration=Release
@@ -397,14 +455,12 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpPrompt" UESanitized="true" Visibility="Public">
+  <data name="HelpPrompt" xml:space="preserve">
     <value>For switch syntax, type "MSBuild -help"</value>
     <comment>UE: this message is shown when the user makes a syntax error on the command-line for a switch.
     LOCALIZATION: "MSBuild -help" should not be localized.</comment>
   </data>
-
-
- <data name="HelpMessage_18_DistributedLoggerSwitch" UESanitized="true" Visibility="Public">
+  <data name="HelpMessage_18_DistributedLoggerSwitch" xml:space="preserve">
     <value>  -distributedLogger:&lt;central logger&gt;*&lt;forwarding logger&gt;
                      Use this logger to log events from MSBuild, attaching a
                      different logger instance to each node. To specify
@@ -432,7 +488,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg chars.
     </comment>
   </data>
-   <data name="HelpMessage_19_IgnoreProjectExtensionsSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_19_IgnoreProjectExtensionsSwitch" xml:space="preserve">
     <value>  -ignoreProjectExtensions:&lt;extensions&gt;
                      List of extensions to ignore when determining which
                      project file to build. Use a semicolon or a comma
@@ -450,9 +506,8 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-
-  <data name="HelpMessage_23_ToolsVersionSwitch" UESanitized="false" Visibility="Public">
-   <value>  -toolsVersion:&lt;version&gt;
+  <data name="HelpMessage_23_ToolsVersionSwitch" xml:space="preserve">
+    <value>  -toolsVersion:&lt;version&gt;
                      The version of the MSBuild Toolset (tasks, targets, etc.)
                      to use during build. This version will override the
                      versions specified by individual projects. (Short form:
@@ -469,9 +524,8 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-
-  <data name="HelpMessage_OutputCacheFile" UESanitized="false" Visibility="Public">
-   <value>  -outputResultsCache:[cacheFile]
+  <data name="HelpMessage_OutputCacheFile" xml:space="preserve">
+    <value>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
                      If -isolateProjects is set to False, this sets it to True.
@@ -482,9 +536,8 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-
-  <data name="HelpMessage_InputCachesFiles" UESanitized="false" Visibility="Public">
-   <value>  -inputResultsCaches:&lt;cacheFile&gt;...
+  <data name="HelpMessage_InputCachesFiles" xml:space="preserve">
+    <value>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
                      will read build results from. If -isolateProjects is set
                      to False, this sets it to True. (short form: -irc)
@@ -494,8 +547,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-
-  <data name="HelpMessage_20_FileLoggerSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_20_FileLoggerSwitch" xml:space="preserve">
     <value>  -fileLogger[n]     Logs the build output to a file. By default
                      the file is in the current directory and named
                      "msbuild[n].log". Events from all nodes are combined into
@@ -514,7 +566,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_21_DistributedFileLoggerSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_21_DistributedFileLoggerSwitch" xml:space="preserve">
     <value>  -distributedFileLogger
                      Logs the build output to multiple log files, one log file
                      per MSBuild node. The initial location for these files is
@@ -537,7 +589,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_22_FileLoggerParametersSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_22_FileLoggerParametersSwitch" xml:space="preserve">
     <value>  -fileLoggerParameters[n]:&lt;parameters&gt;
                      Provides any extra parameters for file loggers.
                      The presence of this switch implies the
@@ -576,7 +628,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_24_NodeReuse" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_24_NodeReuse" xml:space="preserve">
     <value>  -nodeReuse:&lt;parameters&gt;
                      Enables or Disables the reuse of MSBuild nodes.
                      The parameters are:
@@ -588,7 +640,7 @@
                        -nr:true
     </value>
   </data>
-  <data name="HelpMessage_25_PreprocessSwitch">
+  <data name="HelpMessage_25_PreprocessSwitch" xml:space="preserve">
     <value>  -preprocess[:file]
                      Creates a single, aggregated project file by
                      inlining all the files that would be imported during a
@@ -603,7 +655,7 @@
                        -pp:out.txt
     </value>
   </data>
-  <data name="HelpMessage_26_DetailedSummarySwitch">
+  <data name="HelpMessage_26_DetailedSummarySwitch" xml:space="preserve">
     <value>  -detailedSummary[:True|False]
                      Shows detailed information at the end of the build
                      about the configurations built and how they were
@@ -615,7 +667,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_28_WarnAsErrorSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_28_WarnAsErrorSwitch" xml:space="preserve">
     <value>  -warnAsError[:code[;code2]]
                      List of warning codes to treats as errors.  Use a semicolon
                      or a comma to separate multiple warning codes. To treat all
@@ -634,7 +686,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_29_WarnAsMessageSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_29_WarnAsMessageSwitch" xml:space="preserve">
     <value>  -warnAsMessage[:code[;code2]]
                      List of warning codes to treats as low importance
                      messages.  Use a semicolon or a comma to separate
@@ -649,7 +701,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_30_BinaryLoggerSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_30_BinaryLoggerSwitch" xml:space="preserve">
     <value>  -binaryLogger[:[LogFile=]output.binlog[;ProjectImports={None,Embed,ZipFile}]]
                      Serializes all build events to a compressed binary file.
                      By default the file is in the current directory and named
@@ -701,7 +753,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_31_RestoreSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_31_RestoreSwitch" xml:space="preserve">
     <value>  -restore[:True|False]
                      Runs a target named Restore prior to building
                      other targets and ensures the build for these
@@ -726,7 +778,7 @@
                      format. Otherwise, a tab separated file is produced.
     </value>
   </data>
-  <data name="HelpMessage_33_RestorePropertySwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_33_RestorePropertySwitch" xml:space="preserve">
     <value>  -restoreProperty:&lt;n&gt;=&lt;v&gt;
                      Set or override these project-level properties only
                      during restore and do not use properties specified
@@ -743,7 +795,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_34_InteractiveSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_34_InteractiveSwitch" xml:space="preserve">
     <value>  -interactive[:True|False]
                      Indicates that actions in the build are allowed to
                      interact with the user.  Do not use this argument
@@ -758,7 +810,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_35_IsolateProjectsSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_35_IsolateProjectsSwitch" xml:space="preserve">
     <value>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
@@ -784,7 +836,7 @@
       LOCALIZATION: "-isolateProjects" should not be localized.
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.</comment>
   </data>
-  <data name="HelpMessage_36_GraphBuildSwitch" UESanitized="false" Visibility="Public">
+  <data name="HelpMessage_36_GraphBuildSwitch" xml:space="preserve">
     <value>  -graphBuild[:True|False]
                      Causes MSBuild to construct and build a project graph.
 
@@ -803,10 +855,10 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_37_DocsLink" Visibility="Public">
+  <data name="HelpMessage_37_DocsLink" xml:space="preserve">
     <value>For more detailed information, see https://aka.ms/msbuild/docs</value>
   </data>
-  <data name="HelpMessage_38_TargetsSwitch" Visibility="Public">
+  <data name="HelpMessage_38_TargetsSwitch" xml:space="preserve">
     <value>  -targets[:file]
                      Prints a list of available targets without executing the
                      actual build process. By default the output is written to
@@ -822,7 +874,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_39_LowPrioritySwitch" Visibility="Public">
+  <data name="HelpMessage_39_LowPrioritySwitch" xml:space="preserve">
     <value>  -lowPriority[:True|False]
                      Causes MSBuild to run at low process priority.
 
@@ -836,7 +888,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_40_WarnNotAsErrorSwitch" Visibility="Public">
+  <data name="HelpMessage_40_WarnNotAsErrorSwitch" xml:space="preserve">
     <value>  -warnNotAsError[:code[;code2]]
                      List of warning codes to treats not treat as errors.
                      Use a semicolon or a comma to separate
@@ -851,7 +903,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_41_QuestionSwitch" Visibility="Public">
+  <data name="HelpMessage_41_QuestionSwitch" xml:space="preserve">
     <value>  -question
                      (Experimental) Question whether there is any build work.
                      MSBuild will error out when it detects a target or task
@@ -865,7 +917,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="HelpMessage_42_ReportFileAccessesSwitch" Visibility="Public">
+  <data name="HelpMessage_42_ReportFileAccessesSwitch" xml:space="preserve">
     <value>  -reportFileAccesses[:True|False]
                      Causes MSBuild to report file accesses to any configured
                      project cache plugins.
@@ -877,7 +929,7 @@
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
-  <data name="InvalidConfigurationFile" Visibility="Public">
+  <data name="InvalidConfigurationFile" xml:space="preserve">
     <value>MSBUILD : Configuration error MSB1043: The application could not start. {0}</value>
     <comment>
       {StrBegin="MSBUILD : Configuration error MSB1043: "}
@@ -885,7 +937,7 @@
       LOCALIZATION: The prefix "MSBUILD : Configuration error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidLoggerError" UESanitized="false" Visibility="Public">
+  <data name="InvalidLoggerError" xml:space="preserve">
     <value>MSBUILD : error MSB1019: Logger switch was not correctly formed.</value>
     <comment>{StrBegin="MSBUILD : error MSB1019: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
       This error is shown when a user does any of the following:
@@ -896,7 +948,7 @@
       parameters are optional).
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="InvalidMaxCPUCountValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidMaxCPUCountValue" xml:space="preserve">
     <value>MSBUILD : error MSB1030: Maximum CPU count is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1030: "}
@@ -905,15 +957,15 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidMaxCPUCountValueOutsideRange" UESanitized="true" Visibility="Public">
+  <data name="InvalidMaxCPUCountValueOutsideRange" xml:space="preserve">
     <value>MSBUILD : error MSB1032: Maximum CPU count is not valid. Value must be an integer greater than zero and no more than 1024.</value>
     <comment>{StrBegin="MSBUILD : error MSB1032: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
       This error is shown when a user specifies a CPU value that is zero or less. For example, -m:0 instead of -m:2.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
-    </data>
-  <data name="InvalidNodeNumberValue" UESanitized="true" Visibility="Public">
+  </data>
+  <data name="InvalidNodeNumberValue" xml:space="preserve">
     <value>MSBUILD : error MSB1033: Node number is not valid. {0}.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1033: "}
@@ -922,7 +974,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidNodeNumberValueIsNegative" UESanitized="true" Visibility="Public">
+  <data name="InvalidNodeNumberValueIsNegative" xml:space="preserve">
     <value>MSBUILD : error MSB1034: Node number is not valid. Value must be an integer greater than zero.</value>
     <comment>{StrBegin="MSBUILD : error MSB1034: "}
         UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -930,7 +982,7 @@
         LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
       </comment>
   </data>
-  <data name="InvalidPropertyError" UESanitized="true" Visibility="Public">
+  <data name="InvalidPropertyError" xml:space="preserve">
     <value>MSBUILD : error MSB1006: Property is not valid.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1006: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -941,12 +993,12 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidSchemaFile" UESanitized="false" Visibility="Public">
+  <data name="InvalidSchemaFile" xml:space="preserve">
     <value>MSBUILD : MSB1046: The schema "{0}" is not valid. {1}</value>
     <comment>{StrBegin="MSBUILD : MSB1046: "}UE: This message is shown when the schema file provided for the validation of a project is itself not valid.
     LOCALIZATION: "{0}" is the schema file path. "{1}" is a message from an FX exception that describes why the schema file is bad.</comment>
   </data>
-  <data name="InvalidSwitchIndicator" UESanitized="true" Visibility="Public">
+  <data name="InvalidSwitchIndicator" xml:space="preserve">
     <value>Switch: {0}</value>
     <comment>
       UE: This is attached to error messages caused by an invalid switch. This message indicates what the invalid arg was.
@@ -956,7 +1008,7 @@
       LOCALIZATION: {0} contains the invalid switch text.
     </comment>
   </data>
-  <data name="InvalidToolsVersionError" UESanitized="false" Visibility="Public">
+  <data name="InvalidToolsVersionError" xml:space="preserve">
     <value>MSBUILD : error MSB1040: ToolsVersion is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1040: "}
@@ -965,7 +1017,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidVerbosityError" UESanitized="true" Visibility="Public">
+  <data name="InvalidVerbosityError" xml:space="preserve">
     <value>MSBUILD : error MSB1018: Verbosity level is not valid.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1018: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -974,31 +1026,31 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="LoggerFatalError" UESanitized="false" Visibility="Public">
+  <data name="LoggerFatalError" xml:space="preserve">
     <value>MSBUILD : error MSB1028: The logger failed unexpectedly.</value>
     <comment>{StrBegin="MSBUILD : error MSB1028: "}
       UE: This error is shown when a logger specified with the -logger switch throws an exception while being
       initialized. This message is followed by the exception text including the stack trace.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="LoggerFailurePrefixNoErrorCode" UESanitized="false" Visibility="Public">
-      <value>MSBUILD : Logger error {0}: {1}</value>
-      <comment>UE: This prefixes the error message emitted by a logger, when a logger fails in a controlled way using a LoggerException.
+  <data name="LoggerFailurePrefixNoErrorCode" xml:space="preserve">
+    <value>MSBUILD : Logger error {0}: {1}</value>
+    <comment>UE: This prefixes the error message emitted by a logger, when a logger fails in a controlled way using a LoggerException.
       For example, the logger is indicating that it could not create its output file.
       There's no error code because one was supplied by the logger.
       LOCALIZATION: The word "Logger" should be localized, the words "MSBuild" and "error" should NOT be localized.
       </comment>
   </data>
-  <data name="LoggerFailurePrefixWithErrorCode" UESanitized="false" Visibility="Public">
-      <value>MSBUILD : Logger error MSB1029: {0}</value>
-      <comment>{SubString="Logger", "{0}"}{StrBegin="MSBUILD : "}
+  <data name="LoggerFailurePrefixWithErrorCode" xml:space="preserve">
+    <value>MSBUILD : Logger error MSB1029: {0}</value>
+    <comment>{SubString="Logger", "{0}"}{StrBegin="MSBUILD : "}
         UE: This prefixes the error message emitted by a logger, when a logger fails in a controlled way using a LoggerException.
         For example, the logger is indicating that it could not create its output file.
         This is like LoggerFailurePrefixNoErrorCode, but the logger didn't supply its own error code, so we have to provide one.
         LOCALIZATION: The word "Logger" should be localized, the words "MSBuild" and "error" should NOT be localized.
       </comment>
   </data>
-  <data name="MissingLoggerError" UESanitized="true" Visibility="Public">
+  <data name="MissingLoggerError" xml:space="preserve">
     <value>MSBUILD : error MSB1007: Specify a logger.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1007: "}UE: This happens if the user does something like "msbuild.exe -logger". The user must pass in an actual logger class
@@ -1006,14 +1058,14 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingMaxCPUCountError" UESanitized="true" Visibility="Public">
+  <data name="MissingMaxCPUCountError" xml:space="preserve">
     <value>MSBUILD : error MSB1031: Specify the maximum number of CPUs.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1031: "}UE: This happens if the user does something like "msbuild.exe -m". The user must pass in an actual number like -m:4.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingProjectError" UESanitized="false" Visibility="Public">
+  <data name="MissingProjectError" xml:space="preserve">
     <value>MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1003: "}UE: The user must either specify a project or solution file to build, or there must be a project file in the current directory
@@ -1021,7 +1073,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingPropertyError" UESanitized="true" Visibility="Public">
+  <data name="MissingPropertyError" xml:space="preserve">
     <value>MSBUILD : error MSB1005: Specify a property and its value.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1005: "}UE: This happens if the user does something like "msbuild.exe -property". The user must pass in an actual property
@@ -1029,7 +1081,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingResponseFileError" UESanitized="true" Visibility="Public">
+  <data name="MissingResponseFileError" xml:space="preserve">
     <value>MSBUILD : error MSB1012: Specify a response file.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1012: "}UE: This error would occur if the user did something like "msbuild.exe @ foo.proj". The at-sign must be followed by a
@@ -1037,7 +1089,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingTargetError" UESanitized="true" Visibility="Public">
+  <data name="MissingTargetError" xml:space="preserve">
     <value>MSBUILD : error MSB1004: Specify the name of the target.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1004: "}UE: This happens if the user does something like "msbuild.exe -target". The user must pass in an actual target name
@@ -1045,7 +1097,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingGetPropertyError" UESanitized="true" Visibility="Public">
+  <data name="MissingGetPropertyError" xml:space="preserve">
     <value>MSBUILD : error MSB1010: Must provide a property name for the getProperty switch.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
@@ -1069,7 +1121,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingGetTargetResultError" UESanitized="true" Visibility="Public">
+  <data name="MissingGetTargetResultError" xml:space="preserve">
     <value>MSBUILD : error MSB1017: Must provide a target name for the getTargetResult switch.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1017: "}UE: This happens if the user does something like "msbuild.exe -getTargetResult". The user must pass in an actual target name
@@ -1077,14 +1129,22 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="SolutionBuildInvalidForCommandLineEvaluation" UESanitized="true" Visibility="Public">
+  <data name="MissingGetResultFileError" xml:space="preserve">
+    <value>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</value>
+    <comment>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </comment>
+  </data>
+  <data name="SolutionBuildInvalidForCommandLineEvaluation" xml:space="preserve">
     <value>MSBUILD : error MSB1063: Cannot access properties or items when building solution files or solution filter files. This feature is only available when building individual projects.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1063: "}UE: This happens if the user passes in a solution file when trying to access individual properties or items. The user must pass in a project file.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingToolsVersionError" UESanitized="false" Visibility="Public">
+  <data name="MissingToolsVersionError" xml:space="preserve">
     <value>MSBUILD : error MSB1039: Specify the version of the toolset.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1039: "}
@@ -1093,7 +1153,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingVerbosityError" UESanitized="true" Visibility="Public">
+  <data name="MissingVerbosityError" xml:space="preserve">
     <value>MSBUILD : error MSB1016: Specify the verbosity level.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
@@ -1101,14 +1161,14 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MultipleSchemasError" UESanitized="true" Visibility="Public">
+  <data name="MultipleSchemasError" xml:space="preserve">
     <value>MSBUILD : error MSB1024: Only one schema can be specified for validation of the project.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1024: "}UE: The user did something like msbuild -validate:foo.xsd -validate:bar.xsd. We only allow one schema to be specified.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="PickedUpSwitchesFromAutoResponse" UESanitized="false" Visibility="Public">
+  <data name="PickedUpSwitchesFromAutoResponse" xml:space="preserve">
     <value>Some command line switches were read from the auto-response file "{0}". To disable this file, use the "-noAutoResponse" switch.</value>
     <comment>
       UE: This message appears in high verbosity modes when we used some
@@ -1116,25 +1176,25 @@
       where the switches are coming from.
     </comment>
   </data>
-  <data name="ProjectNotFoundError" UESanitized="true" Visibility="Public">
+  <data name="ProjectNotFoundError" xml:space="preserve">
     <value>MSBUILD : error MSB1009: Project file does not exist.</value>
     <comment>{StrBegin="MSBUILD : error MSB1009: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="PossiblyOmittedMaxCPUSwitch" UESanitized="false" Visibility="Public">
+  <data name="PossiblyOmittedMaxCPUSwitch" xml:space="preserve">
     <value>Building the projects in this solution one at a time. To enable parallel build, please add the "-m" switch.</value>
   </data>
-  <data name="ProjectSchemaErrorHalt" UESanitized="false" Visibility="Public">
+  <data name="ProjectSchemaErrorHalt" xml:space="preserve">
     <value>MSBUILD : MSB1045: Stopping because of syntax errors in project file.</value>
     <comment>{StrBegin="MSBUILD : MSB1045: "}</comment>
   </data>
-  <data name="ReadResponseFileError" UESanitized="true" Visibility="Public">
+  <data name="ReadResponseFileError" xml:space="preserve">
     <value>MSBUILD : error MSB1023: Cannot read the response file. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1023: "}UE: This error is shown when the response file cannot be read off disk.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized. {0} contains a localized message explaining
     why the response file could not be read -- this message comes from the CLR/FX.</comment>
   </data>
-  <data name="RepeatedResponseFileError" UESanitized="true" Visibility="Public">
+  <data name="RepeatedResponseFileError" xml:space="preserve">
     <value>MSBUILD : error MSB1013: The response file was specified twice. A response file can be specified only once. Any files named "msbuild.rsp" in the directory of MSBuild.exe or in the directory of the first project or solution built (which if no project or solution is specified is the current working directory) were automatically used as response files.</value>
     <comment>{StrBegin="MSBUILD : error MSB1013: "}UE: Response files are just text files that contain a bunch of command-line switches to be passed to MSBuild.exe. The
     purpose is so you don't have to type the same switches over and over again ... you can just pass in the response file instead.
@@ -1143,54 +1203,54 @@
     exact @ switch that resulted in the duplicate response file.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="ResponseFileNotFoundError" UESanitized="true" Visibility="Public">
+  <data name="ResponseFileNotFoundError" xml:space="preserve">
     <value>MSBUILD : error MSB1022: Response file does not exist.</value>
     <comment>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="SchemaFileLocation" UESanitized="false" Visibility="Public">
+  <data name="SchemaFileLocation" xml:space="preserve">
     <value>Validating project using schema file "{0}".</value>
     <comment>LOCALIZATION: "{0}" is the location of the schema file.</comment>
   </data>
-  <data name="SchemaValidationError" UESanitized="false" Visibility="Public">
+  <data name="SchemaValidationError" xml:space="preserve">
     <value>MSBUILD : MSB1044: Project is not valid. {0}</value>
     <comment>{StrBegin="MSBUILD : MSB1044: "}UE: This error is shown when the user asks his project to be validated against a schema (-val switch for
     MSBuild.exe), and the project has errors. "{0}" contains a message explaining the problem.
     LOCALIZATION: "{0}" is a message from the System.XML schema validator and is already localized.</comment>
   </data>
-  <data name="SchemaNotFoundError" UESanitized="true" Visibility="Public">
+  <data name="SchemaNotFoundError" xml:space="preserve">
     <value>MSBUILD : error MSB1026: Schema file does not exist.</value>
     <comment>{StrBegin="MSBUILD : error MSB1026: "}UE: This error is shown when the user specifies a schema file using the -validate:&lt;schema&gt; switch, and the file
     does not exist on disk. This message does not need in-line parameters because the exception takes care of displaying the
     invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="SchemaNotFoundErrorWithFile" UESanitized="true" Visibility="Public">
+  <data name="SchemaNotFoundErrorWithFile" xml:space="preserve">
     <value>MSBUILD : error MSB1026: Schema file '{0}' does not exist.</value>
     <comment>{StrBegin="MSBUILD : error MSB1026: "}UE: This error is printed if the default schema does not exist or in the extremely unlikely event
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
- <data name="UnexpectedParametersError" UESanitized="true" Visibility="Public">
+  <data name="UnexpectedParametersError" xml:space="preserve">
     <value>MSBUILD : error MSB1002: This switch does not take any parameters.</value>
     <comment>{StrBegin="MSBUILD : error MSB1002: "}UE: For example, if somebody types "msbuild.exe -noLogo:1", they would get this error because the -noLogo switch
     should not be followed by any parameters ... it stands alone.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="UnknownSwitchError" UESanitized="true" Visibility="Public">
+  <data name="UnknownSwitchError" xml:space="preserve">
     <value>MSBUILD : error MSB1001: Unknown switch.</value>
     <comment>{StrBegin="MSBUILD : error MSB1001: "}UE: This occurs when the user passes in an unrecognized switch on the MSBuild.exe command-line.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="UnsupportedOS" UESanitized="true" Visibility="Public">
+  <data name="UnsupportedOS" xml:space="preserve">
     <value>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</value>
     <comment>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="Using35Engine" UESanitized="true" Visibility="Public">
+  <data name="Using35Engine" xml:space="preserve">
     <value>Forcing load of Microsoft.Build.Engine because MSBUILDOLDOM=1...</value>
   </data>
-    <data name="MissingIgnoreProjectExtensionsError" UESanitized="false" Visibility="Public">
+  <data name="MissingIgnoreProjectExtensionsError" xml:space="preserve">
     <value>MSBUILD : error MSB1035: Specify the project extensions to ignore.</value>
     <comment>{StrBegin="MSBUILD : error MSB1035: "}
       UE: This happens if the user does something like "msbuild.exe -ignoreProjectExtensions". The user must pass in one or more
@@ -1198,11 +1258,11 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidExtensionToIgnore" UESanitized="false" Visibility="Public">
+  <data name="InvalidExtensionToIgnore" xml:space="preserve">
     <value>MSBUILD : error MSB1036: There is an invalid extension in the -ignoreProjectExtensions list. Extensions must start with a period ".", have one or more characters after the period and not contain any invalid path characters or wildcards.</value>
     <comment>{StrBegin="MSBUILD : error MSB1036: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
-  <data name="MissingConsoleLoggerParameterError" UESanitized="true" Visibility="Public">
+  <data name="MissingConsoleLoggerParameterError" xml:space="preserve">
     <value>MSBUILD : error MSB1037: Specify one or more parameters for the console logger if using the -consoleLoggerParameters switch</value>
     <comment>{StrBegin="MSBUILD : error MSB1037: "}
       UE: This happens if the user does something like "msbuild.exe -consoleLoggerParameters:". The user must pass in one or more parameters
@@ -1210,7 +1270,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingFileLoggerParameterError" UESanitized="true" Visibility="Public">
+  <data name="MissingFileLoggerParameterError" xml:space="preserve">
     <value>MSBUILD : error MSB1038: Specify one or more parameters for the file logger if using the -fileLoggerParameters switch</value>
     <comment>{StrBegin="MSBUILD : error MSB1038: "}
       UE: This happens if the user does something like "msbuild.exe -fileLoggerParameters:". The user must pass in one or more parameters
@@ -1218,7 +1278,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingTerminalLoggerParameterError" UESanitized="true" Visibility="Public">
+  <data name="MissingTerminalLoggerParameterError" xml:space="preserve">
     <value>MSBUILD : error MSB1066: Specify one or more parameters for the terminal logger if using the -terminalLoggerParameters switch</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1066: "}
@@ -1227,14 +1287,14 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingNodeReuseParameterError" UESanitized="true" Visibility="Public">
+  <data name="MissingNodeReuseParameterError" xml:space="preserve">
     <value>MSBUILD : error MSB1041: Specify one or more parameters for node reuse if using the -nodeReuse switch</value>
     <comment>{StrBegin="MSBUILD : error MSB1041: "}
       UE: This happens if the user does something like "msbuild.exe -nodeReuse:" without a true or false
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
      </comment>
   </data>
-  <data name="InvalidNodeReuseValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidNodeReuseValue" xml:space="preserve">
     <value>MSBUILD : error MSB1042: Node reuse value is not valid. {0}.</value>
     <comment>{StrBegin="MSBUILD : error MSB1042: "}
      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -1242,7 +1302,7 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </comment>
   </data>
-  <data name="InvalidNodeReuseTrueValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidNodeReuseTrueValue" xml:space="preserve">
     <value>MSBUILD : error MSB1042: Node reuse value is not valid. This version of MSBuild does not support node reuse. If specified, the node reuse switch value must be false.</value>
     <comment>{StrBegin="MSBUILD : error MSB1042: "}
      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -1250,7 +1310,7 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </comment>
   </data>
-  <data name="InvalidRestoreValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidRestoreValue" xml:space="preserve">
     <value>MSBUILD : error MSB1052: Restore value is not valid. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1052: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -1258,7 +1318,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidInteractiveValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidInteractiveValue" xml:space="preserve">
     <value>MSBUILD : error MSB1055: Interactive value is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1055: "}
@@ -1267,7 +1327,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidIsolateProjectsValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidIsolateProjectsValue" xml:space="preserve">
     <value>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1056: "}
@@ -1277,7 +1337,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidGraphBuildValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidGraphBuildValue" xml:space="preserve">
     <value>MSBUILD : error MSB1057: Graph build value is not valid.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1057: "}
@@ -1286,7 +1346,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidDetailedSummaryValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidDetailedSummaryValue" xml:space="preserve">
     <value>MSBUILD : error MSB1061: Detailed summary value is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1061: "}
@@ -1295,7 +1355,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidLowPriorityValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidLowPriorityValue" xml:space="preserve">
     <value>MSBUILD : error MSB1064: Low priority value is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1064: "}
@@ -1304,7 +1364,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="InvalidTerminalLoggerValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidTerminalLoggerValue" xml:space="preserve">
     <value>MSBUILD : error MSB1065: Terminal logger value is not valid. It should be one of 'auto', 'true', or 'false'. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1065: "}
@@ -1313,26 +1373,25 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="AbortingBuild" UESanitized="true" Visibility="Public">
+  <data name="AbortingBuild" xml:space="preserve">
     <value>Attempting to cancel the build...</value>
   </data>
-  <data name="InvalidPreprocessPath">
+  <data name="InvalidPreprocessPath" xml:space="preserve">
     <value>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1047: "}</comment>
   </data>
-  <data name="TargetsCouldNotBePrinted">
+  <data name="TargetsCouldNotBePrinted" xml:space="preserve">
     <value>MSBUILD : error MSB1059: Targets could not be printed. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1059: "}</comment>
   </data>
-  <!-- MSB1021 and MSB1020 are also used in the engine but their copies do not have the "MSBUILD : " prefix so we must have our own -->
-  <data name="LoggerCreationError" UESanitized="true" Visibility="Public">
+  <data name="LoggerCreationError" xml:space="preserve">
     <value>MSBUILD : error MSB1021: Cannot create an instance of the logger. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1021: "}
       UE: This error is shown when a logger cannot be loaded and instantiated from its assembly.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized. {0} contains a message explaining why the
       logger could not be created -- this message comes from the CLR/FX and is localized.</comment>
   </data>
-  <data name="LoggerNotFoundError" UESanitized="false" Visibility="Public">
+  <data name="LoggerNotFoundError" xml:space="preserve">
     <value>MSBUILD : error MSB1020: The logger was not found. Check the following: 1.) The logger name specified is the same as the name of the logger class. 2.) The logger class is "public" and implements the Microsoft.Build.Framework.ILogger interface. 3.) The path to the logger assembly is correct, or the logger can be loaded using only the assembly name provided.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1020: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
@@ -1341,22 +1400,22 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="ProjectUpgradeNeededToVcxProj">
+  <data name="ProjectUpgradeNeededToVcxProj" xml:space="preserve">
     <value>MSBUILD : error MSB4192: The project file "{0}" is in the ".vcproj" or ".dsp" file format, which MSBuild cannot build directly. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or, for ".vcproj", use MSBuild to build the solution file containing the project instead.</value>
     <comment>{StrBegin="MSBUILD : error MSB4192: "} LOC: ".vcproj" and ".dsp" should not be localized</comment>
   </data>
-  <data name="NeedJustMyCode">
+  <data name="NeedJustMyCode" xml:space="preserve">
     <value>If MSBuild debugging does not work correctly, please verify that the "Just My Code" feature is enabled in Visual Studio, and that you have selected the managed debugger.</value>
   </data>
-  <data name="DebuggingSolutionFiles">
+  <data name="DebuggingSolutionFiles" xml:space="preserve">
     <value>MSBUILD : error MSB1048: Solution files cannot be debugged directly. Run MSBuild first with an environment variable MSBUILDEMITSOLUTION=1 to create a corresponding ".sln.metaproj" file. Then debug that.</value>
     <comment>{StrBegin="MSBUILD : error MSB1048: "} LOC: ".SLN" should not be localized</comment>
   </data>
-  <data name="ParameterRequiredError">
+  <data name="ParameterRequiredError" xml:space="preserve">
     <value>MSBUILD : error MSB1049: The {0} parameter must be specified</value>
     <comment>{StrBegin="MSBUILD : error MSB1049: "}</comment>
   </data>
-  <data name="InvalidReportFileAccessesValue" UESanitized="true" Visibility="Public">
+  <data name="InvalidReportFileAccessesValue" xml:space="preserve">
     <value>MSBUILD : error MSB1063: Report file accesses value is not valid. {0}</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1063: "}
@@ -1365,21 +1424,14 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <!-- #################################################################################################-->
-  <!-- ######################################## Shared strings #########################################-->
-  <!-- ###### These belong in Strings.shared.resx, but have been copied here for performance ###########-->
-  <!-- ##### If you change the string here, please also change it in Shared\Resources\Strings.shared.resx ########-->
-  <!-- #################### and in XMakeBuildEngine\Resources\Strings.resx #############################-->
-  <!-- ############## Remove this block once ResourceManager bug 627270 has been fixed. ################-->
-  <!-- #################################################################################################-->
-  <data name="BuildStarted" UESanitized="false" Visibility="Public">
+  <data name="BuildStarted" xml:space="preserve">
     <value>Build started.</value>
   </data>
-  <data name="FileLocation" UESanitized="false" Visibility="Public">
+  <data name="FileLocation" xml:space="preserve">
     <value>{0} ({1},{2})</value>
     <comment>A file location to be embedded in a string.</comment>
   </data>
-  <data name="MissingWarnAsMessageParameterError" UESanitized="true" Visibility="Public">
+  <data name="MissingWarnAsMessageParameterError" xml:space="preserve">
     <value>MSBUILD : error MSB1051: Specify one or more warning codes to treat as low importance messages when using the -warnAsMessage switch.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1051: "}
@@ -1387,7 +1439,7 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="MissingWarnNotAsErrorParameterError" UESanitized="true" Visibility="Public">
+  <data name="MissingWarnNotAsErrorParameterError" xml:space="preserve">
     <value>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1060: "}
@@ -1401,11 +1453,11 @@
   <data name="MissingProfileParameterError" xml:space="preserve">
     <value>MSBUILD :error MSB1054: A filename must be specified to generate the profiler result.</value>
   </data>
-  <data name="DuplicateOutputResultsCache" UESanitized="true" Visibility="Public">
+  <data name="DuplicateOutputResultsCache" xml:space="preserve">
     <value>MSBUILD : error MSB1058: Only one output results cache can be specified.</value>
     <comment>{StrBegin="MSBUILD : error MSB1058: "}</comment>
   </data>
-  <data name="OptionalLoggerCreationMessage" UESanitized="true" Visibility="Public">
+  <data name="OptionalLoggerCreationMessage" xml:space="preserve">
     <value>The specified logger "{0}" could not be created and will not be used. {1}</value>
     <comment>
       UE: This error is shown when a logger cannot be loaded and instantiated from its assembly.
@@ -1414,7 +1466,7 @@
       logger could not be created -- this message comes from the CLR/FX and is localized.
     </comment>
   </data>
-  <data name="EnvironmentVariableAsSwitch" Visibility="Public">
+  <data name="EnvironmentVariableAsSwitch" xml:space="preserve">
     <value>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</value>
     <comment>
       {StrBegin="MSBUILD : error MSB1060: "}
@@ -1422,49 +1474,48 @@
       but the environment variable is not defined.
     </comment>
   </data>
-  <data name="Process" UESanitized="true" Visibility="Public">
+  <data name="Process" xml:space="preserve">
     <value>Process = "{0}"</value>
   </data>
-  <data name="MSBExePath" UESanitized="true" Visibility="Public">
+  <data name="MSBExePath" xml:space="preserve">
     <value>MSBuild executable path = "{0}"</value>
   </data>
-  <data name="CommandLine" UESanitized="true" Visibility="Public">
+  <data name="CommandLine" xml:space="preserve">
     <value>Command line arguments = "{0}"</value>
   </data>
-  <data name="CurrentDirectory" UESanitized="true" Visibility="Public">
+  <data name="CurrentDirectory" xml:space="preserve">
     <value>Current directory = "{0}"</value>
   </data>
-  <data name="MSBVersion" UESanitized="true" Visibility="Public">
+  <data name="MSBVersion" xml:space="preserve">
     <value>MSBuild version = "{0}"</value>
   </data>
-  <data name="MSBuildDebugPath" Visibility="Public">
+  <data name="MSBuildDebugPath" xml:space="preserve">
     <value>MSBuild logs and debug information will be at "{0}"</value>
   </data>
-  <data name="SwitchErrorWithArguments" Visibility="Public">
+  <data name="SwitchErrorWithArguments" xml:space="preserve">
     <value>{0}
     Full command line: '{1}'
   Switches appended by response files:{2}</value>
   </data>
-  <data name="ResponseFileSwitchFromLocation" Visibility="Public">
+  <data name="ResponseFileSwitchFromLocation" xml:space="preserve">
     <value>'{0}' came from '{1}'</value>
     <comment>
       These are response file switches with the location of the response file on disk.
     </comment>
   </data>
-  <data name="NotWarnAsErrorWithoutWarnAsError" Visibility="Public">
+  <data name="NotWarnAsErrorWithoutWarnAsError" xml:space="preserve">
     <value>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</value>
     <comment>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</comment>
   </data>
-  <data name="UnsupportedSwitchForSolutionFiles" Visibility="Public">
+  <data name="UnsupportedSwitchForSolutionFiles" xml:space="preserve">
     <value>The '{0}' switch is not supported for solution files.</value>
   </data>
-  <data name="NameInvalid" Visibility="Public">
+  <data name="NameInvalid" xml:space="preserve">
     <value>MSBUILD : error MSB5016: The name "{0}" contains an invalid character "{1}".</value>
     <comment>
       {StrBegin="MSBUILD : error MSB5016: "}
     </comment>
   </data>
-  <!-- **** TerminalLogger strings begin **** -->
   <data name="RestoreComplete" xml:space="preserve">
     <value>Restore complete ({0}s)</value>
     <comment>
@@ -1488,13 +1539,19 @@
     </comment>
   </data>
   <data name="BuildResult_FailedWithErrors" xml:space="preserve">
-    <value>failed with errors</value>
+    <value>failed with {0} error(s)</value>
+    <comment>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </comment>
+  </data>
+  <data name="BuildResult_FailedWithErrorsAndWarnings" xml:space="preserve">
+    <value>failed with {0} error(s) and {1} warning(s)</value>
     <comment>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </comment>
   </data>
   <data name="BuildResult_FailedWithWarnings" xml:space="preserve">
-    <value>failed with warnings</value>
+    <value>failed with {0} warning(s)</value>
     <comment>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </comment>
@@ -1512,7 +1569,7 @@
     </comment>
   </data>
   <data name="BuildResult_SucceededWithWarnings" xml:space="preserve">
-    <value>succeeded with warnings</value>
+    <value>succeeded with {0} warning(s)</value>
     <comment>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </comment>
@@ -1545,9 +1602,9 @@
       {0}: VT100 coded hyperlink to project output directory
     </comment>
   </data>
-  <data name="DurationDisplay">
-      <value>({0:F1}s)</value>
-      <comment>
+  <data name="DurationDisplay" xml:space="preserve">
+    <value>({0:F1}s)</value>
+    <comment>
         {0}: duration in seconds with 1 decimal point
       </comment>
   </data>
@@ -1563,11 +1620,37 @@
   <data name="TerminalLoggerNotUsedRedirected" xml:space="preserve">
     <value>Terminal Logger was not used because the output is being redirected to a file.</value>
   </data>
+  <data name="TestProjectFinished_NoTF" xml:space="preserve">
+    <value>{0}{1} test {2} ({3}s)</value>
+    <comment>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </comment>
+  </data>
+  <data name="TestProjectFinished_WithTF" xml:space="preserve">
+    <value>{0}{1} test {2} {3} ({4}s)</value>
+    <comment>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </comment>
+  </data>
+  <data name="TestSummary" xml:space="preserve">
+    <value>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</value>
+    <comment>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</comment>
+  </data>
   <!-- **** TerminalLogger strings end **** -->
     <!--
         The command line message bucket is: MSB1001 - MSB1999
 
-        Next error code should be MSB1068.
+        Next error code should be MSB1069.
 
         Don't forget to update this comment after using the new code.
   -->
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index 26d010b3288..fe8f7c4a859 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">selhalo s chybami</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">selhalo s {0} chybami.</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">selhalo s {0} chybami a {1} upozornƒõn√≠mi.</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">selhalo s upozornƒõn√≠mi</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">selhalo s {0} upozornƒõn√≠m(i).</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">√∫spƒõ≈°nƒõ dokonƒçeno s upozornƒõn√≠mi</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">akce probƒõhla √∫spƒõ≈°nƒõ s {0} upozornƒõn√≠m(i).</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -157,7 +164,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">MSBuild verze {0} pro {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1359,6 +1366,15 @@ Kdy≈æ se nastav√≠ na MessageUponIsolationViolation (nebo jeho kr√°tk√Ω
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: Je nutn√© zadat soubor pro p≈ôep√≠naƒç getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1663,6 +1679,35 @@ Kdy≈æ se nastav√≠ na MessageUponIsolationViolation (nebo jeho kr√°tk√Ω
         <target state="translated">Termin√°lov√Ω protokolovaƒç se nepou≈æil, proto≈æe v√Ωstup se p≈ôesmƒõrov√°v√° do souboru.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} ‚Äì test {2} ({3} s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} ‚Äì test {2} {3} ({4} s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Testovac√≠ bƒõh {0}. Celkem: {1}, ne√∫spƒõ≈°n√©: {2}, √∫spƒõ≈°n√©: {3}, p≈ôeskoƒçeno: {4}, doba trv√°n√≠: {5} s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Pro tento p≈ôep√≠naƒç se nepou≈æ√≠vaj√≠ ≈æ√°dn√© parametry.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 76ed83f2f1c..5e22ec6e196 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">Fehlgeschlagen mit Fehlern</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">fehlerhaft mit {0}¬†Fehler(n)</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">fehlerhaft mit {0}¬†Fehler(n) und {1}¬†Warnung(en)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">Fehlgeschlagen mit Warnungen</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">fehlerhaft mit {0}¬†Warnung(en)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">Erfolgreich mit Warnungen</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">erfolgreich mit {0}¬†Warnung(en)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -157,7 +164,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">MSBuild-Version {0} f√ºr {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1347,6 +1354,15 @@ Dieses Protokollierungsformat ist standardm√§√üig aktiviert.
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: Es muss eine Datei f√ºr den getResultOutputFile-Switch angegeben werden.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1651,6 +1667,35 @@ Dieses Protokollierungsformat ist standardm√§√üig aktiviert.
         <target state="translated">Die Terminalprotokollierung wurde nicht verwendet, da die Ausgabe an eine Datei umgeleitet wird.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} Test {2} ({3}s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} Test {2} {3} ({4}s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Testlauf {0}. Gesamt: {1} Fehlgeschlagen: {2} Erfolgreich: {3} √úbersprungen: {4}, Dauer: {5}s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Der Schalter erlaubt keine Parameter.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index 664150db0fe..4dac587cf5c 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">error con errores</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">error con {0} errores</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">error con {0} errores y {1} advertencias</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">error con advertencias</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">error con {0} advertencias</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">correcto con advertencias</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">correcto con {0} advertencias</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@ Esta marca es experimental y puede que no funcione seg√∫n lo previsto.
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">Versi√≥n de MSBuild {0} para {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1353,6 +1360,15 @@ Esta marca es experimental y puede que no funcione seg√∫n lo previsto.
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: debe proporcionar un archivo para el modificador getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1657,6 +1673,35 @@ Esta marca es experimental y puede que no funcione seg√∫n lo previsto.
         <target state="translated">No se us√≥ el terminal de Logger porque la salida se est√° redirigiendo a un archivo.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} prueba{2} ({3}s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} {2} {3} prueba ({4}s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Serie de pruebas {0}. Total: {1} error: {2} Pasado: {3} Omitido: {4}, Duraci√≥n: {5}s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Este modificador no tiene ning√∫n par√°metro.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index df2477fa98c..9886752a310 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">a √©chou√© avec des erreurs</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">a √©chou√© avec {0} erreur(s)</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">a √©chou√© avec {0} erreur(s) et {1} avertissement(s)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">a √©chou√© avec des avertissements</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">a √©chou√© avec {0} avertissement(s)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">a r√©ussi avec des avertissements</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">a r√©ussi avec {0} avertissement(s)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">Version MSBuild {0} pour {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1346,6 +1353,15 @@ Remarque : verbosit√© des enregistreurs d‚Äô√©v√©nements de fichiers
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: doit fournir un fichier pour la bascule getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1650,6 +1666,35 @@ Remarque : verbosit√© des enregistreurs d‚Äô√©v√©nements de fichiers
         <target state="translated">L‚Äôenregistreur d‚Äô√©v√©nements du terminal n‚Äôa pas √©t√© utilis√© car la sortie est redirig√©e vers un fichier.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}Test de {1}¬†: {2} ({3}¬†s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}Test de {1} {2}¬†: {3} ({4}¬†s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">S√©rie de tests¬†: {0}. Total¬†: {1} √âchec¬†: {2}, R√©ussi¬†: {3}, Ignor√©¬†: {4}, Dur√©e¬†: {5}¬†s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Ce commutateur n'accepte aucun param√®tre.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index 786ad121d82..d633ec372ff 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">non riuscito con errori</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">non riuscito con {0} errori</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">non riuscito con {0} errori e {1} avvisi</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">non riuscito con avvisi</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">non riuscito con {0} avvisi</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">completato con avvisi</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">completato con {0} avvisi</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@ Questo flag √® sperimentale e potrebbe non funzionare come previsto.
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">Versione di MSBuild {0} per {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1357,6 +1364,15 @@ Nota: livello di dettaglio dei logger di file
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: √® necessario fornire un file per il passaggio getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1661,6 +1677,35 @@ Nota: livello di dettaglio dei logger di file
         <target state="translated">Il logger del terminale non √® stato usato perch√© l'output viene reindirizzato a un file.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} test {2} {3}</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} test {2} {3} {4}</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Esecuzione dei test {0}. Totale: {1} non superati: {2} superati: {3} ignorati: {4}, durata: {5}s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: questa opzione non accetta parametri.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index ae31872e6d5..ff16124ddbd 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">„Ç®„É©„Éº„ÅßÂ§±Êïó„Åó„Åæ„Åó„Åü</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">{0} ‰ª∂„ÅÆ„Ç®„É©„Éº„ÅßÂ§±Êïó„Åó„Åæ„Åó„Åü</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">{0} ‰ª∂„ÅÆ„Ç®„É©„Éº„Å® {1} ‰ª∂„ÅÆË≠¶Âëä„ÅßÂ§±Êïó„Åó„Åæ„Åó„Åü</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">Â§±Êïó„Åó„ÄÅË≠¶Âëä„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">{0} ‰ª∂„ÅÆË≠¶Âëä‰ªò„Åç„ÅßÂ§±Êïó„Åó„Åæ„Åó„Åü</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">Ë≠¶Âëä‰ªò„Åç„ÅßÊàêÂäü</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">{0} ‰ª∂„ÅÆË≠¶Âëä‰ªò„Åç„ÅßÊàêÂäü„Åó„Åæ„Åó„Åü</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">MSBuild „ÅÆ„Éê„Éº„Ç∏„Éß„É≥ {0} ({1})</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1346,6 +1353,15 @@
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: getResultOutputFile „Çπ„Ç§„ÉÉ„ÉÅ„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÊåáÂÆö„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1650,6 +1666,35 @@
         <target state="translated">Âá∫Âäõ„Åå„Éï„Ç°„Ç§„É´„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Çø„Éº„Éü„Éä„É´ „É≠„Ç¨„Éº„ÅØ‰ΩøÁî®„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} „ÉÜ„Çπ„Éà {2} ({3} Áßí)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} „ÉÜ„Çπ„Éà {2} {3} ({4} Áßí)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">{0}„ÄÄ„Çí„ÉÜ„Çπ„ÉàÂÆüË°å„Åó„Åæ„Åô„ÄÇÂêàË®à: {1} ‰∏çÂêàÊ†º: {2} ÂêàÊ†º: {3} „Çπ„Ç≠„ÉÉ„Éó: {4}„ÄÅÊúüÈñì: {5} Áßí</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: „Åì„ÅÆ„Çπ„Ç§„ÉÉ„ÉÅ„Å´„ÅØ„Éë„É©„É°„Éº„Çø„Éº„ÇíÊåáÂÆö„Åß„Åç„Åæ„Åõ„Çì„ÄÇ</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index d0983796b6b..dd8ec661d08 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">Ïã§Ìå®(Ïò§Î•ò Î∞úÏÉù)</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">{0} Ïò§Î•òÏôÄ Ìï®Íªò Ïã§Ìå®</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">{0} Ïò§Î•òÏôÄ {1} Í≤ΩÍ≥†ÏôÄ Ìï®Íªò Ïã§Ìå®</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">Ïã§Ìå®(Í≤ΩÍ≥† Î∞úÏÉù)</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">{0} Í≤ΩÍ≥†ÏôÄ Ìï®Íªò Ïã§Ìå®</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">ÏÑ±Í≥µ(Í≤ΩÍ≥† Î∞úÏÉù)</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">{0} Í≤ΩÍ≥†ÏôÄ Ìï®Íªò ÏÑ±Í≥µ</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">msbuild Î≤ÑÏ†Ñ {0}({1}Ïö©)</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1346,6 +1353,15 @@
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: getResultOutputFile Ïä§ÏúÑÏπòÏóê ÎåÄÌïú ÌååÏùºÏùÑ Ï†úÍ≥µÌï¥Ïïº Ìï©ÎãàÎã§.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1650,6 +1666,35 @@
         <target state="translated">Ï∂úÎ†•Ïù¥ ÌååÏùºÎ°ú Î¶¨ÎîîÎ†âÏÖòÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ÌÑ∞ÎØ∏ÎÑê Î°úÍ±∞Í∞Ä ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} ÌÖåÏä§Ìä∏ {2}({3}Ï¥à)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} ÌÖåÏä§Ìä∏ {2} {3}({4}Ï¥à)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">{0} ÌÖåÏä§Ìä∏Î•º Ïã§ÌñâÌï©ÎãàÎã§. Ìï©Í≥Ñ: {1} Ïã§Ìå®: {2} ÌÜµÍ≥º: {3} Í±¥ÎÑàÎúÄ: {4}, Í∏∞Í∞Ñ: {5}Ï¥à</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Ïù¥ Ïä§ÏúÑÏπòÏóêÎäî Îß§Í∞ú Î≥ÄÏàòÎ•º ÏßÄÏ†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index bc3840aeadf..6e010c6afe3 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">zako≈Ñczono niepowodzeniem, z b≈Çƒôdami</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">zako≈Ñczono niepowodzeniem, z b≈Çƒôdami w liczbie: {0}</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">zako≈Ñczono niepowodzeniem, z b≈Çƒôdami w liczbie: {0} i ostrze≈ºeniami w liczbie: {1}</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">zako≈Ñczono niepowodzeniem, z ostrze≈ºeniami.</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">zako≈Ñczono niepowodzeniem, z ostrze≈ºeniami w liczbie: {0}</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">zako≈Ñczono powodzeniem, z ostrze≈ºeniem</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">zako≈Ñczono powodzeniem, z ostrze≈ºeniami w liczbie: {0}</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@ Ta flaga jest eksperymentalna i mo≈ºe nie dzia≈Çaƒá zgodnie z oczekiwaniami.
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">Wersja programu MSBuild {0} dla {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1357,6 +1364,15 @@ Ta flaga jest eksperymentalna i mo≈ºe nie dzia≈Çaƒá zgodnie z oczekiwaniami.
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: nale≈ºy podaƒá plik prze≈ÇƒÖcznika getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1661,6 +1677,35 @@ Ta flaga jest eksperymentalna i mo≈ºe nie dzia≈Çaƒá zgodnie z oczekiwaniami.
         <target state="translated">Rejestrator terminali nie zosta≈Ç u≈ºyty, poniewa≈º dane wyj≈õciowe sƒÖ przekierowywane do pliku.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} test {2} ({3}s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} test {2} {3} ({4}s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Przebieg testu {0}. ≈ÅƒÖcznie: {1} niepowodzenie: {2} zako≈Ñczone powodzeniem: {3} pominiƒôto: {4}, czas trwania: {5}s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: ten prze≈ÇƒÖcznik nie ma ≈ºadnych parametr√≥w.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index f6760a0c80a..fd52acfedc7 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">falhou com erros</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">falhou com {0} erro(s)</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">falhou com{0} erros e {1} avisos</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">falhou com avisos</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">falhou com {0} aviso(s)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">√™xito com avisos</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">√™xito(s) com {0} aviso(s)</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">Vers√£o do MSBuild {0} para {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1347,6 +1354,15 @@ arquivo de resposta.
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: deve ser fornecido um arquivo para a op√ß√£o getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1651,6 +1667,35 @@ arquivo de resposta.
         <target state="translated">O Agente de Terminal n√£o foi usado porque a sa√≠da est√° sendo redirecionada para um arquivo.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} teste {2} ({3}s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} teste {2} {3} ({4}s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Execu√ß√£o de teste {0}. Total: {1} Falha: {2} Aprovado: {3} Ignorado: {4}, Dura√ß√£o: {5}s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Esta op√ß√£o n√£o aceita par√¢metros.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index 05fd4fafbd7..46e56814216 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">—Å–±–æ–π —Å –æ—à–∏–±–∫–∞–º–∏</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">—Å–±–æ–π —Å –æ—à–∏–±–∫–∞–º–∏ ({0})</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">—Å–±–æ–π —Å –æ—à–∏–±–∫–∞–º–∏ ({0}) –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ ({1})</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">—Å–±–æ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">—Å–±–æ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ ({0})</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ ({0})</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">–í–µ—Ä—Å–∏—è MSBuild {0} –¥–ª—è {1}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1345,6 +1352,15 @@
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ getResultOutputFile.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1649,6 +1665,35 @@
         <target state="translated">–°—Ä–µ–¥—Å—Ç–≤–æ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} (—Ç–µ—Å—Ç) {2} ({3}¬†—Å)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} (—Ç–µ—Å—Ç) {2} {3} ({4}¬†—Å)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ {0}. –í—Å–µ–≥–æ: {1}, –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {2}, –ø—Ä–æ–π–¥–µ–Ω–æ: {3}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {4}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {5}¬†—Å</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: —É —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index 673b039e685..6fcdffc386d 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">hatalarla ba≈üarƒ±sƒ±z oldu</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">{0} hata ile ba≈üarƒ±sƒ±z oldu</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">{0} hata ve {1} uyarƒ±yla ba≈üarƒ±sƒ±z oldu</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">uyarƒ±larla ba≈üarƒ±sƒ±z oldu</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">{0} uyarƒ±yla ba≈üarƒ±sƒ±z oldu</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">uyarƒ±larla birlikte ba≈üarƒ±lƒ±</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">{0} uyarƒ±yla ba≈üarƒ±lƒ± oldu</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">{1} i√ßin MSBuild s√ºr√ºm {0}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1350,6 +1357,15 @@
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: getResultOutputFile anahtarƒ± i√ßin bir dosya saƒülanmalƒ±dƒ±r.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1654,6 +1670,35 @@
         <target state="translated">√áƒ±kƒ±≈ü bir dosyaya yeniden y√∂nlendirildiƒüi i√ßin Terminal G√ºnl√ºk√ß√ºs√º kullanƒ±lmadƒ±.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} testi {2} ({3}s)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} testi {2} {3} ({4}s)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Test √ßalƒ±≈ütƒ±rmasƒ± {0}. Toplam: {1} Ba≈üarƒ±sƒ±z: {2} Ge√ßti: {3} Atlandƒ±: {4}, S√ºre: {5}s</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Bu anahtar parametreyle kullanƒ±lmaz.</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index 1eaa3109c55..85f89d32be5 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">Â§±Ë¥•ÔºåÂá∫Áé∞ÈîôËØØ</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">Â§±Ë¥•ÔºåÂá∫Áé∞ {0} ÈîôËØØ</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">Â§±Ë¥•ÔºåÂá∫Áé∞ {0} ÈîôËØØÂíå {1} Ë≠¶Âëä</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">Â§±Ë¥•ÔºåÂá∫Áé∞Ë≠¶Âëä</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">Â§±Ë¥•ÔºåÂá∫Áé∞ {0} Ë≠¶Âëä</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">ÊàêÂäüÔºå‰ΩÜÂá∫Áé∞Ë≠¶Âëä</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">ÊàêÂäüÔºåÂá∫Áé∞ {0} Ë≠¶Âëä</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">ÈÄÇÁî®‰∫é {1} MSBuild ÁâàÊú¨ {0}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1346,6 +1353,15 @@
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: ÂøÖÈ°ª‰∏∫ getResultOutputFile ÂºÄÂÖ≥Êèê‰æõÊñá‰ª∂„ÄÇ</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1494,7 +1510,7 @@
       </trans-unit>
       <trans-unit id="ProjectFinished_NoTF">
         <source>{0}{1} {2} ({3}s)</source>
-        <target state="translated">{0}{1} {2} ({3})</target>
+        <target state="translated">{0}{1} {2} ({3} Áßí)</target>
         <note>
       Project finished summary.
       {0}: indentation - few spaces to visually indent row
@@ -1650,6 +1666,35 @@
         <target state="translated">Êú™‰ΩøÁî®ÁªàÁ´ØËÆ∞ÂΩïÂô®ÔºåÂõ†‰∏∫Ê≠£Âú®Â∞ÜËæìÂá∫ÈáçÂÆöÂêëÂà∞Êñá‰ª∂„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} ÊµãËØï {2} ({3} Áßí)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} ÊµãËØï {2} {3} ({4} Áßí)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">ÊµãËØïËøêË°å {0}„ÄÇÊÄªËÆ°: {1} Â§±Ë¥•: {2} ÈÄöËøá: {3} Ë∑≥Ëøá: {4}, ÊåÅÁª≠Êó∂Èó¥: {5} Áßí</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: Ê≠§ÂºÄÂÖ≥‰∏çÈááÁî®‰ªª‰ΩïÂèÇÊï∞„ÄÇ</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index 72e2703e211..62f632fc19a 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -32,15 +32,22 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithErrors">
-        <source>failed with errors</source>
-        <target state="translated">Â§±Êïó‰ΩÜÊúâÈåØË™§</target>
+        <source>failed with {0} error(s)</source>
+        <target state="translated">Â§±ÊïóÔºåÊúâ {0} ÂÄãÈåØË™§</target>
+        <note>
+      Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
+    </note>
+      </trans-unit>
+      <trans-unit id="BuildResult_FailedWithErrorsAndWarnings">
+        <source>failed with {0} error(s) and {1} warning(s)</source>
+        <target state="translated">Â§±ÊïóÔºåÊúâ {0} ÂÄãÈåØË™§Âíå {1} ÂÄãË≠¶Âëä</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_FailedWithWarnings">
-        <source>failed with warnings</source>
-        <target state="translated">Â§±Êïó‰ΩÜÊúâË≠¶Âëä</target>
+        <source>failed with {0} warning(s)</source>
+        <target state="translated">Â§±ÊïóÔºåÊúâ {0} ÂÄãË≠¶Âëä</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -53,8 +60,8 @@
     </note>
       </trans-unit>
       <trans-unit id="BuildResult_SucceededWithWarnings">
-        <source>succeeded with warnings</source>
-        <target state="translated">ÊàêÂäü‰ΩÜÊúâË≠¶Âëä</target>
+        <source>succeeded with {0} warning(s)</source>
+        <target state="translated">ÊàêÂäü‰ΩÜÊúâ {0} ÂÄãË≠¶Âëä</target>
         <note>
       Part of Terminal Logger summary message: "Build {BuildResult_X} in {duration}s"
     </note>
@@ -156,7 +163,7 @@
       <trans-unit id="MSBuildVersionMessage">
         <source>MSBuild version {0} for {1}</source>
         <target state="translated">{1} ÁöÑ MSBuild ÁâàÊú¨ {0}</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
+        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework" or ".NET Core"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
         <source>Current directory = "{0}"</source>
@@ -1346,6 +1353,15 @@
       {StrBegin="MSBUILD : error MSB1010: "}UE: This happens if the user does something like "msbuild.exe -getProperty". The user must pass in an actual property name
       following the switch, as in "msbuild.exe -getProperty:blah".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingGetResultFileError">
+        <source>MSBUILD : error MSB1068: Must provide a file for the getResultOutputFile switch.</source>
+        <target state="translated">MSBUILD : error MSB1068: ÂøÖÈ†àÊèê‰æõ getResultOutputFile ÂàáÊèõÁöÑÊ™îÊ°à„ÄÇ</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1068: "}UE: This happens if the user does something like "msbuild.exe -getResultOutputFile". The user must pass in an actual file
+      following the switch, as in "msbuild.exe -getTargetResult:blah -getResultOutputFile:blah.txt".
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MissingGetTargetResultError">
@@ -1650,6 +1666,35 @@
         <target state="translated">Âõ†ÁÇ∫Ëº∏Âá∫Ê≠£ÈáçÊñ∞Â∞éÂêëËá≥Ê™îÊ°àÔºåÊâÄ‰ª•Êú™‰ΩøÁî®ÁµÇÁ´ØË®òÈåÑÂô®„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="TestProjectFinished_NoTF">
+        <source>{0}{1} test {2} ({3}s)</source>
+        <target state="translated">{0}{1} Ê∏¨Ë©¶ {2} ({3} Áßí)</target>
+        <note>
+      Project finished summary.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: BuildResult_{X}
+      {3}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestProjectFinished_WithTF">
+        <source>{0}{1} test {2} {3} ({4}s)</source>
+        <target state="translated">{0}{1} Ê∏¨Ë©¶ {2} {3} ({4} Áßí)</target>
+        <note>
+      Project finished summary including target framework information.
+      {0}: indentation - few spaces to visually indent row
+      {1}: project name
+      {2}: target framework
+      {3}: BuildResult_{X}
+      {4}: duration in seconds with 1 decimal point
+    </note>
+      </trans-unit>
+      <trans-unit id="TestSummary">
+        <source>Test run {0}. Total: {1} Failed: {2} Passed: {3} Skipped: {4}, Duration: {5}s</source>
+        <target state="translated">Ê∏¨Ë©¶ÂõûÂêà {0}„ÄÇÁ∏ΩË®à: {1} Â§±Êïó: {2} ÂÇ≥ÈÅû: {3} Ë∑≥ÈÅé: {4}, ÊúüÈñì: {5} Áßí</target>
+        <note>{0} string, localized result e.g. Failed surrounded by ANSI colors.
+{1-5} whole number</note>
+      </trans-unit>
       <trans-unit id="UnexpectedParametersError">
         <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
         <target state="translated">MSBUILD : error MSB1002: ÈÄôÂÄãÂèÉÊï∏‰∏ç‰ΩøÁî®‰ªª‰ΩïÂèÉÊï∏„ÄÇ</target>
diff --git a/src/MSBuild/TerminalLogger/MessageSeverity.cs b/src/MSBuild/TerminalLogger/MessageSeverity.cs
index 07aa9058be3..9f374e292dd 100644
--- a/src/MSBuild/TerminalLogger/MessageSeverity.cs
+++ b/src/MSBuild/TerminalLogger/MessageSeverity.cs
@@ -6,4 +6,4 @@ namespace Microsoft.Build.Logging.TerminalLogger;
 /// <summary>
 /// Enumerates the supported message severities.
 /// </summary>
-internal enum MessageSeverity { Warning, Error }
+internal enum MessageSeverity { Message, Warning, Error }
diff --git a/src/MSBuild/TerminalLogger/NodeStatus.cs b/src/MSBuild/TerminalLogger/NodeStatus.cs
index d199edc461c..3b3de635dee 100644
--- a/src/MSBuild/TerminalLogger/NodeStatus.cs
+++ b/src/MSBuild/TerminalLogger/NodeStatus.cs
@@ -1,6 +1,7 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 
@@ -13,17 +14,48 @@ internal class NodeStatus
 {
     public string Project { get; }
     public string? TargetFramework { get; }
+    public TerminalColor TargetPrefixColor { get; } = TerminalColor.Default;
+    public string? TargetPrefix { get; }
     public string Target { get; }
     public StopwatchAbstraction Stopwatch { get; }
 
+    /// <summary>
+    /// Status of a node that is currently doing work.
+    /// </summary>
+    /// <param name="project">The project that is written on left side.</param>
+    /// <param name="targetFramework">Target framework that is colorized and written on left side after project.</param>
+    /// <param name="target">The currently running work, usually the currently running target. Written on right.</param>
+    /// <param name="stopwatch">Duration of the current step. Written on right after target.</param>
     public NodeStatus(string project, string? targetFramework, string target, StopwatchAbstraction stopwatch)
     {
+#if DEBUG
+        if (target.Contains("\x1B"))
+        {
+            throw new ArgumentException("Target should not contain any escape codes, if you want to colorize target use the other constructor.");
+        }
+#endif
         Project = project;
         TargetFramework = targetFramework;
         Target = target;
         Stopwatch = stopwatch;
     }
 
+    /// <summary>
+    /// Status of a node that is currently doing work.
+    /// </summary>
+    /// <param name="project">The project that is written on left side.</param>
+    /// <param name="targetFramework">Target framework that is colorized and written on left side after project.</param>
+    /// <param name="targetPrefixColor">Color for the status of the currently running work written on right.</param>
+    /// <param name="targetPrefix">Colorized status for the currently running work, written on right, before target, and separated by 1 space from it.</param>
+    /// <param name="target">The currently running work, usually the currently runnig target. Written on right.</param>
+    /// <param name="stopwatch">Duration of the current step. Written on right after target.</param>
+    public NodeStatus(string project, string? targetFramework, TerminalColor targetPrefixColor, string targetPrefix, string target, StopwatchAbstraction stopwatch)
+        : this(project, targetFramework, target, stopwatch)
+    {
+        TargetPrefixColor = targetPrefixColor;
+        TargetPrefix = targetPrefix;
+    }
+
     /// <summary>
     /// Equality is based on the project, target framework, and target, but NOT the elapsed time.
     /// </summary>
@@ -31,7 +63,9 @@ public override bool Equals(object? obj) =>
         obj is NodeStatus status &&
         Project == status.Project &&
         TargetFramework == status.TargetFramework &&
-        Target == status.Target;
+        Target == status.Target &&
+        TargetPrefixColor == status.TargetPrefixColor &&
+        TargetPrefix == status.TargetPrefix;
 
     public override string ToString()
     {
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
index 33fbf2c8d42..38c82c36f93 100644
--- a/src/MSBuild/TerminalLogger/NodesFrame.cs
+++ b/src/MSBuild/TerminalLogger/NodesFrame.cs
@@ -53,13 +53,21 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
         string project = status.Project;
         string? targetFramework = status.TargetFramework;
         string target = status.Target;
+        string? targetPrefix = status.TargetPrefix;
+        TerminalColor targetPrefixColor = status.TargetPrefixColor;
 
-        int renderedWidth = Length(durationString, project, targetFramework, target);
+        var targetWithoutAnsiLength = !string.IsNullOrWhiteSpace(targetPrefix)
+            // +1 because we will join them by space in the final output.
+            ? targetPrefix!.Length + 1 + target.Length
+            : target.Length;
+
+        int renderedWidth = Length(durationString, project, targetFramework, targetWithoutAnsiLength);
 
         if (renderedWidth > Width)
         {
-            renderedWidth -= target.Length;
-            target = string.Empty;
+            renderedWidth -= targetWithoutAnsiLength;
+            targetPrefix = target = string.Empty;
+            targetWithoutAnsiLength = 0;
 
             if (renderedWidth > Width)
             {
@@ -74,13 +82,14 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
             }
         }
 
-        return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(target.Length + durationString.Length + 1)}{target} {durationString}".AsSpan();
+        var renderedTarget = !string.IsNullOrWhiteSpace(targetPrefix) ? $"{AnsiCodes.Colorize(targetPrefix, targetPrefixColor)} {target}" : target;
+        return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(targetWithoutAnsiLength + durationString.Length + 1)}{renderedTarget} {durationString}".AsSpan();
 
-        static int Length(string durationString, string project, string? targetFramework, string target) =>
+        static int Length(string durationString, string project, string? targetFramework, int targetWithoutAnsiLength) =>
                 TerminalLogger.Indentation.Length +
                 project.Length + 1 +
                 (targetFramework?.Length ?? -1) + 1 +
-                target.Length + 1 +
+                targetWithoutAnsiLength + 1 +
                 durationString.Length;
     }
 
@@ -92,6 +101,9 @@ public string Render(NodesFrame previousFrame)
         StringBuilder sb = _renderBuilder;
         sb.Clear();
 
+        // Move cursor back to 1st line of nodes.
+        sb.AppendLine($"{AnsiCodes.CSI}{previousFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
+
         int i = 0;
         for (; i < NodesCount; i++)
         {
diff --git a/src/MSBuild/TerminalLogger/Project.cs b/src/MSBuild/TerminalLogger/Project.cs
index 3f027249782..959bab12960 100644
--- a/src/MSBuild/TerminalLogger/Project.cs
+++ b/src/MSBuild/TerminalLogger/Project.cs
@@ -46,6 +46,11 @@ public Project(string? targetFramework, StopwatchAbstraction? stopwatch)
     /// </summary>
     public string? TargetFramework { get; }
 
+    /// <summary>
+    /// True when the project has run target with name "_TestRunStart" defined in <see cref="TerminalLogger._testStartTarget"/>.
+    /// </summary>
+    public bool IsTestProject { get; set; }
+
     /// <summary>
     /// A lazily initialized list of build messages/warnings/errors raised during the build.
     /// </summary>
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 10048c7ac19..dd13fbe28aa 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -4,12 +4,19 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Text;
 using System.Threading;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System.Text.RegularExpressions;
+using System.Diagnostics;
+using Microsoft.Build.Framework.Logging;
+
 #if NET7_0_OR_GREATER
 using System.Diagnostics.CodeAnalysis;
+using System.Globalization;
+
+
 #endif
 #if NETFRAMEWORK
 using Microsoft.IO;
@@ -40,6 +47,8 @@ internal sealed partial class TerminalLogger : INodeLogger
     private static readonly string[] _immediateMessageKeywords = { "[CredentialProvider]", "--interactive" };
 #endif
 
+    private static readonly string[] newLineStrings = { "\r\n", "\n" };
+
     /// <summary>
     /// A wrapper over the project context ID passed to us in <see cref="IEventSource"/> logger events.
     /// </summary>
@@ -93,14 +102,14 @@ public ProjectContext(BuildEventContext context)
     private readonly string _initialWorkingDirectory = Environment.CurrentDirectory;
 
     /// <summary>
-    /// True if the build has encountered at least one error.
+    /// Number of build errors.
     /// </summary>
-    private bool _buildHasErrors;
+    private int _buildErrorsCount;
 
     /// <summary>
-    /// True if the build has encountered at least one warning.
+    /// Number of build warnings.
     /// </summary>
-    private bool _buildHasWarnings;
+    private int _buildWarningsCount;
 
     /// <summary>
     /// True if restore failed and this failure has already been reported.
@@ -171,6 +180,31 @@ public ProjectContext(BuildEventContext context)
     /// </summary>
     private static readonly char[] PathSeparators = { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar };
 
+    /// <summary>
+    /// One summary per finished project test run.
+    /// </summary>
+    private List<TestSummary> _testRunSummaries = new();
+
+    /// <summary>
+    /// Name of target that identifies a project that has tests, and that they just started.
+    /// </summary>
+    private static string _testStartTarget = "_TestRunStart";
+
+    /// <summary>
+    /// Time of the oldest observed test target start.
+    /// </summary>
+    private DateTime? _testStartTime;
+
+    /// <summary>
+    /// Time of the most recently observed test target finished.
+    /// </summary>
+    private DateTime? _testEndTime;
+
+    /// <summary>
+    /// Whether to show TaskCommandLineEventArgs high-priority messages. 
+    /// </summary>
+    private bool _showCommandLine = false;
+
     /// <summary>
     /// Default constructor, used by the MSBuild logger infra.
     /// </summary>
@@ -179,6 +213,12 @@ public TerminalLogger()
         Terminal = new Terminal();
     }
 
+    public TerminalLogger(LoggerVerbosity verbosity)
+        : this()
+    {
+        Verbosity = verbosity;
+    }
+
     /// <summary>
     /// Internal constructor accepting a custom <see cref="ITerminal"/> for testing.
     /// </summary>
@@ -191,13 +231,10 @@ internal TerminalLogger(ITerminal terminal)
     #region INodeLogger implementation
 
     /// <inheritdoc/>
-    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
+    public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Minimal;
 
     /// <inheritdoc/>
-    public string Parameters
-    {
-        get => ""; set { }
-    }
+    public string? Parameters { get; set; } = null;
 
     /// <inheritdoc/>
     public void Initialize(IEventSource eventSource, int nodeCount)
@@ -211,6 +248,8 @@ public void Initialize(IEventSource eventSource, int nodeCount)
     /// <inheritdoc/>
     public void Initialize(IEventSource eventSource)
     {
+        ParseParameters();
+
         eventSource.BuildStarted += BuildStarted;
         eventSource.BuildFinished += BuildFinished;
         eventSource.ProjectStarted += ProjectStarted;
@@ -229,6 +268,76 @@ public void Initialize(IEventSource eventSource)
         }
     }
 
+    /// <summary>
+    /// Parses out the logger parameters from the Parameters string.
+    /// </summary>
+    public void ParseParameters()
+    {
+        foreach (var parameter in LoggerParametersHelper.ParseParameters(Parameters))
+        {
+            ApplyParameter(parameter.Item1, parameter.Item2);
+        }
+    }
+
+    /// <summary>
+    /// Apply a terminal logger parameter.
+    /// parameterValue may be null, if there is no parameter value.
+    /// </summary>
+    /// <remark>
+    /// If verbosity parameter value is not correct, throws an exception. Other incorrect parameter values are disregarded.
+    /// </remark>
+    private void ApplyParameter(string parameterName, string? parameterValue)
+    {
+        ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));
+
+        switch (parameterName.ToUpperInvariant())
+        {
+            case "V":
+            case "VERBOSITY":
+                ApplyVerbosityParameter(parameterValue);
+                break;
+            case "SHOWCOMMANDLINE":
+                TryApplyShowCommandLineParameter(parameterValue);
+                break;
+        }
+    }
+
+    /// <summary>
+    /// Apply the verbosity value
+    /// </summary>
+    private void ApplyVerbosityParameter(string? parameterValue)
+    {
+        if (parameterValue is not null && LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))
+        {
+            Verbosity = (LoggerVerbosity)verbosity;
+        }
+        else
+        {
+            string errorCode;
+            string helpKeyword;
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, "InvalidVerbosity", parameterValue);
+            throw new LoggerException(message, null, errorCode, helpKeyword);
+        }
+    }
+
+    /// <summary>
+    /// Apply the show command Line value
+    /// </summary>
+    private bool TryApplyShowCommandLineParameter(string? parameterValue)
+    {
+        if (String.IsNullOrEmpty(parameterValue))
+        {
+            _showCommandLine = true;
+        }
+        else
+        {
+            return ConversionUtilities.TryConvertStringToBool(parameterValue, out _showCommandLine);
+        }
+
+        return true;
+    }
+
+
     /// <inheritdoc/>
     public void Shutdown()
     {
@@ -273,22 +382,46 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
 
         Terminal.BeginUpdate();
         try
-        {
-            string duration = (e.Timestamp - _buildStartTime).TotalSeconds.ToString("F1");
-            string buildResult = RenderBuildResult(e.Succeeded, _buildHasErrors, _buildHasWarnings);
-
-            Terminal.WriteLine("");
-            if (_restoreFailed)
-            {
-                Terminal.WriteLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("RestoreCompleteWithMessage",
-                    buildResult,
-                    duration));
-            }
-            else
+        { 
+            if (Verbosity > LoggerVerbosity.Quiet)
             {
-                Terminal.WriteLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("BuildFinished",
-                    buildResult,
-                    duration));
+                string duration = (e.Timestamp - _buildStartTime).TotalSeconds.ToString("F1");
+                string buildResult = RenderBuildResult(e.Succeeded, _buildErrorsCount, _buildWarningsCount);
+
+                Terminal.WriteLine("");
+                if (_restoreFailed)
+                {
+                    Terminal.WriteLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("RestoreCompleteWithMessage",
+                        buildResult,
+                        duration));
+                }
+                else
+                {
+                    Terminal.WriteLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("BuildFinished",
+                        buildResult,
+                        duration));
+                }
+
+                if (_testRunSummaries.Any())
+                {
+                    var total = _testRunSummaries.Sum(t => t.Total);
+                    var failed = _testRunSummaries.Sum(t => t.Failed);
+                    var passed = _testRunSummaries.Sum(t => t.Passed);
+                    var skipped = _testRunSummaries.Sum(t => t.Skipped);
+                    var testDuration = (_testStartTime != null && _testEndTime != null ? (_testEndTime - _testStartTime).Value.TotalSeconds : 0).ToString("F1");
+
+                    var colorizedResult = _testRunSummaries.Any(t => t.Failed > 0) || (_buildErrorsCount > 0)
+                        ? AnsiCodes.Colorize(ResourceUtilities.GetResourceString("BuildResult_Failed"), TerminalColor.Red)
+                        : AnsiCodes.Colorize(ResourceUtilities.GetResourceString("BuildResult_Succeeded"), TerminalColor.Green);
+
+                    Terminal.WriteLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("TestSummary",
+                        colorizedResult,
+                        total,
+                        failed,
+                        passed,
+                        skipped,
+                        testDuration));
+                }
             }
         }
         finally
@@ -301,9 +434,12 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
             Terminal.EndUpdate();
         }
 
-        _buildHasErrors = false;
-        _buildHasWarnings = false;
+        _testRunSummaries.Clear();
+        _buildErrorsCount = 0;
+        _buildWarningsCount = 0;
         _restoreFailed = false;
+        _testStartTime = null;
+        _testEndTime = null;
     }
 
     /// <summary>
@@ -354,6 +490,12 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
             UpdateNodeStatus(buildEventContext, null);
         }
 
+        // Continue execution and add project summary to the static part of the Console only if verbosity is higher than Quiet.
+        if (Verbosity <= LoggerVerbosity.Quiet)
+        {
+            return;
+        }
+
         ProjectContext c = new(buildEventContext);
 
         if (_projects.TryGetValue(c, out Project? project))
@@ -374,10 +516,13 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
                     // Build result. One of 'failed', 'succeeded with warnings', or 'succeeded' depending on the build result and diagnostic messages
                     // reported during build.
-                    bool haveErrors = project.BuildMessages?.Exists(m => m.Severity == MessageSeverity.Error) == true;
-                    bool haveWarnings = project.BuildMessages?.Exists(m => m.Severity == MessageSeverity.Warning) == true;
+                    int countErrors = project.BuildMessages?.Count(m => m.Severity == MessageSeverity.Error) ?? 0;
+                    int countWarnings = project.BuildMessages?.Count(m => m.Severity == MessageSeverity.Warning) ?? 0;
+
+                    string buildResult = RenderBuildResult(e.Succeeded, countErrors, countWarnings);
 
-                    string buildResult = RenderBuildResult(e.Succeeded, haveErrors, haveWarnings);
+                    bool haveErrors = countErrors > 0;
+                    bool haveWarnings = countWarnings > 0;
 
                     // Check if we're done restoring.
                     if (c == _restoreContext)
@@ -406,26 +551,50 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                         _restoreFinished = true;
                     }
                     // If this was a notable project build, we print it as completed only if it's produced an output or warnings/error.
-                    else if (project.OutputPath is not null || project.BuildMessages is not null)
+                    // If this is a test project, print it always, so user can see either a success or failure, otherwise success is hidden
+                    // and it is hard to see if project finished, or did not run at all.
+                    else if (project.OutputPath is not null || project.BuildMessages is not null || project.IsTestProject)
                     {
                         // Show project build complete and its output
-
-                        if (string.IsNullOrEmpty(project.TargetFramework))
+                        if (project.IsTestProject)
                         {
-                            Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ProjectFinished_NoTF",
-                                Indentation,
-                                projectFile,
-                                buildResult,
-                                duration));
+                            if (string.IsNullOrEmpty(project.TargetFramework))
+                            {
+                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("TestProjectFinished_NoTF",
+                                    Indentation,
+                                    projectFile,
+                                    buildResult,
+                                    duration));
+                            }
+                            else
+                            {
+                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("TestProjectFinished_WithTF",
+                                    Indentation,
+                                    projectFile,
+                                    AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),
+                                    buildResult,
+                                    duration));
+                            }
                         }
                         else
                         {
-                            Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ProjectFinished_WithTF",
-                                Indentation,
-                                projectFile,
-                                AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),
-                                buildResult,
-                                duration));
+                            if (string.IsNullOrEmpty(project.TargetFramework))
+                            {
+                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ProjectFinished_NoTF",
+                                    Indentation,
+                                    projectFile,
+                                    buildResult,
+                                    duration));
+                            }
+                            else
+                            {
+                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ProjectFinished_WithTF",
+                                    Indentation,
+                                    projectFile,
+                                    AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),
+                                    buildResult,
+                                    duration));
+                            }
                         }
 
                         // Print the output path as a link if we have it.
@@ -479,8 +648,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                         }
                     }
 
-                    _buildHasErrors |= haveErrors;
-                    _buildHasWarnings |= haveWarnings;
+                    _buildErrorsCount += countErrors;
+                    _buildWarningsCount += countWarnings;
 
                     DisplayNodes();
                 }
@@ -503,7 +672,23 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
             project.Stopwatch.Start();
 
             string projectFile = Path.GetFileNameWithoutExtension(e.ProjectFile);
-            NodeStatus nodeStatus = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
+
+
+            var isTestTarget = e.TargetName == _testStartTarget;
+
+            var targetName = isTestTarget ? "Testing" : e.TargetName;
+            if (isTestTarget)
+            {
+                // Use the minimal start time, so if we run tests in parallel, we can calculate duration
+                // as this start time, minus time when tests finished.
+                _testStartTime = _testStartTime == null
+                    ? e.Timestamp
+                    : e.Timestamp < _testStartTime
+                        ? e.Timestamp : _testStartTime;
+                project.IsTestProject = true;
+            }
+
+            NodeStatus nodeStatus = new(projectFile, project.TargetFramework, targetName, project.Stopwatch);
             UpdateNodeStatus(buildEventContext, nodeStatus);
         }
     }
@@ -556,6 +741,8 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
         string? message = e.Message;
         if (message is not null && e.Importance == MessageImportance.High)
         {
+            var hasProject = _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project);
+
             // Detect project output path by matching high-importance messages against the "$(MSBuildProjectName) -> ..."
             // pattern used by the CopyFilesToOutputDirectory target.
             int index = message.IndexOf(FilePathPattern, StringComparison.Ordinal);
@@ -563,26 +750,104 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
             {
                 var projectFileName = Path.GetFileName(e.ProjectFile.AsSpan());
                 if (!projectFileName.IsEmpty &&
-                    message.AsSpan().StartsWith(Path.GetFileNameWithoutExtension(projectFileName)) &&
-                    _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
+                    message.AsSpan().StartsWith(Path.GetFileNameWithoutExtension(projectFileName)) && hasProject)
                 {
                     ReadOnlyMemory<char> outputPath = e.Message.AsMemory().Slice(index + 4);
-                    project.OutputPath = outputPath;
+                    project!.OutputPath = outputPath;
+                    return;
                 }
             }
 
-            if (IsImmediateMessage(message))
+            if (Verbosity > LoggerVerbosity.Quiet)
             {
-                RenderImmediateMessage(message);
+                // Show immediate messages to the user.
+                if (IsImmediateMessage(message))
+                {
+                    RenderImmediateMessage(message);
+                    return;
+                }
+                if (e.Code == "NETSDK1057" && !_loggedPreviewMessage)
+                {
+                    // The SDK will log the high-pri "not-a-warning" message NETSDK1057
+                    // when it's a preview version up to MaxCPUCount times, but that's
+                    // an implementation detail--the user cares about at most one.
+
+                    RenderImmediateMessage(message);
+                    _loggedPreviewMessage = true;
+                    return;
+                }
             }
-            else if (e.Code == "NETSDK1057" && !_loggedPreviewMessage)
+
+            if (hasProject && project!.IsTestProject)
             {
-                // The SDK will log the high-pri "not-a-warning" message NETSDK1057
-                // when it's a preview version up to MaxCPUCount times, but that's
-                // an implementation detail--the user cares about at most one.
+                var node = _nodes[NodeIndexForContext(buildEventContext)];
 
-                RenderImmediateMessage(message);
-                _loggedPreviewMessage = true;
+                // Consumes test update messages produced by VSTest and MSTest runner.
+                if (node != null && e is IExtendedBuildEventArgs extendedMessage)
+                {
+                    switch (extendedMessage.ExtendedType)
+                    {
+                        case "TLTESTPASSED":
+                            {
+                                var indicator = extendedMessage.ExtendedMetadata!["localizedResult"]!;
+                                var displayName = extendedMessage.ExtendedMetadata!["displayName"]!;
+
+                                var status = new NodeStatus(node.Project, node.TargetFramework, TerminalColor.Green, indicator, displayName, project.Stopwatch);
+                                UpdateNodeStatus(buildEventContext, status);
+                                break;
+                            }
+
+                        case "TLTESTSKIPPED":
+                            {
+                                var indicator = extendedMessage.ExtendedMetadata!["localizedResult"]!;
+                                var displayName = extendedMessage.ExtendedMetadata!["displayName"]!;
+
+                                var status = new NodeStatus(node.Project, node.TargetFramework, TerminalColor.Yellow, indicator, displayName, project.Stopwatch);
+                                UpdateNodeStatus(buildEventContext, status);
+                                break;
+                            }
+
+                        case "TLTESTFINISH":
+                            {
+                                // Collect test run summary.
+                                if (Verbosity > LoggerVerbosity.Quiet)
+                                {
+                                    _ = int.TryParse(extendedMessage.ExtendedMetadata!["total"]!, out int total);
+                                    _ = int.TryParse(extendedMessage.ExtendedMetadata!["passed"]!, out int passed);
+                                    _ = int.TryParse(extendedMessage.ExtendedMetadata!["skipped"]!, out int skipped);
+                                    _ = int.TryParse(extendedMessage.ExtendedMetadata!["failed"]!, out int failed);
+
+                                    _testRunSummaries.Add(new TestSummary(total, passed, skipped, failed));
+
+                                    _testEndTime = _testEndTime == null
+                                            ? e.Timestamp
+                                            : e.Timestamp > _testEndTime
+                                                ? e.Timestamp : _testEndTime;
+                                }
+                                
+                                break;
+                            }
+                    }
+                    return;
+                }
+            }
+
+            if (Verbosity > LoggerVerbosity.Normal)
+            {
+                if (e is TaskCommandLineEventArgs && !_showCommandLine)
+                {
+                    return;
+                }
+
+                if (hasProject)
+                {
+                    project!.AddBuildMessage(MessageSeverity.Message, message);
+                }
+                else
+                {
+                    // Display messages reported by MSBuild, even if it's not tracked in _projects collection.
+                    RenderImmediateMessage(message);
+                }
             }
         }
     }
@@ -593,21 +858,20 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
     private void WarningRaised(object sender, BuildWarningEventArgs e)
     {
         BuildEventContext? buildEventContext = e.BuildEventContext;
-        string message = EventArgsFormatting.FormatEventMessage(
+        string message = FormatEventMessage(
                 category: AnsiCodes.Colorize("warning", TerminalColor.Yellow),
                 subcategory: e.Subcategory,
                 message: e.Message,
                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),
                 file: HighlightFileName(e.File),
-                projectFile: e.ProjectFile ?? null,
                 lineNumber: e.LineNumber,
                 endLineNumber: e.EndLineNumber,
                 columnNumber: e.ColumnNumber,
-                endColumnNumber: e.EndColumnNumber,
-                threadId: e.ThreadId,
-                logOutputProperties: null);
+                endColumnNumber: e.EndColumnNumber);
 
-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
+        if (buildEventContext is not null
+            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)
+            && Verbosity > LoggerVerbosity.Quiet)
         {
             if (IsImmediateMessage(message))
             {
@@ -618,9 +882,9 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)
         }
         else
         {
-            // It is necessary to display warning messages reported by MSBuild, even if it's not tracked in _projects collection.
+            // It is necessary to display warning messages reported by MSBuild, even if it's not tracked in _projects collection or the verbosity is Quiet.
             RenderImmediateMessage(message);
-            _buildHasWarnings = true;
+            _buildWarningsCount++;
         }
     }
 
@@ -642,29 +906,28 @@ private bool IsImmediateMessage(string message) =>
     private void ErrorRaised(object sender, BuildErrorEventArgs e)
     {
         BuildEventContext? buildEventContext = e.BuildEventContext;
-        string message = EventArgsFormatting.FormatEventMessage(
+        string message = FormatEventMessage(
                 category: AnsiCodes.Colorize("error", TerminalColor.Red),
                 subcategory: e.Subcategory,
                 message: e.Message,
                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),
                 file: HighlightFileName(e.File),
-                projectFile: e.ProjectFile ?? null,
                 lineNumber: e.LineNumber,
                 endLineNumber: e.EndLineNumber,
                 columnNumber: e.ColumnNumber,
-                endColumnNumber: e.EndColumnNumber,
-                threadId: e.ThreadId,
-                logOutputProperties: null);
+                endColumnNumber: e.EndColumnNumber);
 
-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
+        if (buildEventContext is not null
+            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)
+            && Verbosity > LoggerVerbosity.Quiet)
         {
             project.AddBuildMessage(MessageSeverity.Error, message);
         }
         else
         {
-            // It is necessary to display error messages reported by MSBuild, even if it's not tracked in _projects collection.
+            // It is necessary to display error messages reported by MSBuild, even if it's not tracked in _projects collection or the verbosity is Quiet.
             RenderImmediateMessage(message);
-            _buildHasErrors = true;
+            _buildErrorsCount++;
         }
     }
 
@@ -709,8 +972,6 @@ internal void DisplayNodes()
         Terminal.Write(AnsiCodes.HideCursor);
         try
         {
-            // Move cursor back to 1st line of nodes.
-            Terminal.WriteLine($"{AnsiCodes.CSI}{_currentFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
             Terminal.Write(rendered);
         }
         finally
@@ -745,22 +1006,23 @@ private void EraseNodes()
     /// <param name="succeeded">True if the build completed with success.</param>
     /// <param name="hasError">True if the build has logged at least one error.</param>
     /// <param name="hasWarning">True if the build has logged at least one warning.</param>
-    private string RenderBuildResult(bool succeeded, bool hasError, bool hasWarning)
+    private string RenderBuildResult(bool succeeded, int countErrors, int countWarnings)
     {
         if (!succeeded)
         {
             // If the build failed, we print one of three red strings.
-            string text = (hasError, hasWarning) switch
+            string text = (countErrors > 0, countWarnings > 0) switch
             {
-                (true, _) => ResourceUtilities.GetResourceString("BuildResult_FailedWithErrors"),
-                (false, true) => ResourceUtilities.GetResourceString("BuildResult_FailedWithWarnings"),
+                (true, true) => ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("BuildResult_FailedWithErrorsAndWarnings", countErrors, countWarnings),
+                (true, _) => ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("BuildResult_FailedWithErrors", countErrors),
+                (false, true) => ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("BuildResult_FailedWithWarnings", countWarnings),
                 _ => ResourceUtilities.GetResourceString("BuildResult_Failed"),
             };
             return AnsiCodes.Colorize(text, TerminalColor.Red);
         }
-        else if (hasWarning)
+        else if (countWarnings > 0)
         {
-            return AnsiCodes.Colorize(ResourceUtilities.GetResourceString("BuildResult_SucceededWithWarnings"), TerminalColor.Yellow);
+            return AnsiCodes.Colorize(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("BuildResult_SucceededWithWarnings", countWarnings), TerminalColor.Yellow);
         }
         else
         {
@@ -808,5 +1070,107 @@ private int NodeIndexForContext(BuildEventContext context)
             : path;
     }
 
+    private string FormatEventMessage(
+            string category,
+            string subcategory,
+            string? message,
+            string code,
+            string? file,
+            int lineNumber,
+            int endLineNumber,
+            int columnNumber,
+            int endColumnNumber)
+    {
+        message ??= string.Empty;
+        StringBuilder builder = new(128);
+
+        if (string.IsNullOrEmpty(file))
+        {
+            builder.Append("MSBUILD : ");    // Should not be localized.
+        }
+        else
+        {
+            builder.Append(file);
+
+            if (lineNumber == 0)
+            {
+                builder.Append(" : ");
+            }
+            else
+            {
+                if (columnNumber == 0)
+                {
+                    builder.Append(endLineNumber == 0 ?
+                        $"({lineNumber}): " :
+                        $"({lineNumber}-{endLineNumber}): ");
+                }
+                else
+                {
+                    if (endLineNumber == 0)
+                    {
+                        builder.Append(endColumnNumber == 0 ?
+                            $"({lineNumber},{columnNumber}): " :
+                            $"({lineNumber},{columnNumber}-{endColumnNumber}): ");
+                    }
+                    else
+                    {
+                        builder.Append(endColumnNumber == 0 ?
+                            $"({lineNumber}-{endLineNumber},{columnNumber}): " :
+                            $"({lineNumber},{columnNumber},{endLineNumber},{endColumnNumber}): ");
+                    }
+                }
+            }
+        }
+
+        if (!string.IsNullOrEmpty(subcategory))
+        {
+            builder.Append(subcategory);
+            builder.Append(' ');
+        }
+
+        builder.Append($"{category} {code}: ");
+
+        // render multi-line message in a special way
+        if (message.IndexOf('\n') >= 0)
+        {
+            const string indent = $"{Indentation}{Indentation}{Indentation}";
+            string[] lines = message.Split(newLineStrings, StringSplitOptions.None);
+
+            foreach (string line in lines)
+            {
+                if (indent.Length + line.Length > Terminal.Width) // custom wrapping with indentation
+                {
+                    WrapText(builder, line, Terminal.Width, indent);
+                }
+                else
+                {
+                    builder.AppendLine();
+                    builder.Append(indent);
+                    builder.Append(line);
+                }
+            }
+        }
+        else
+        {
+            builder.Append(message);
+        }
+
+        return builder.ToString();
+    }
+
+    private static void WrapText(StringBuilder sb, string text, int maxLength, string indent)
+    {
+        int start = 0;
+        while (start < text.Length)
+        {
+            int length = Math.Min(maxLength - indent.Length, text.Length - start);
+            sb.AppendLine();
+            sb.Append(indent);
+            sb.Append(text.AsSpan().Slice(start, length));
+
+            start += length;
+        }
+    }
+
     #endregion
 }
diff --git a/src/MSBuild/TerminalLogger/TestSummary.cs b/src/MSBuild/TerminalLogger/TestSummary.cs
new file mode 100644
index 00000000000..dff316e37b8
--- /dev/null
+++ b/src/MSBuild/TerminalLogger/TestSummary.cs
@@ -0,0 +1,9 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Logging.TerminalLogger
+{
+    internal readonly record struct TestSummary(int Total, int Passed, int Skipped, int Failed);
+}
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 5f795f9df87..a3fad5cb5d2 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -720,6 +720,7 @@ public static ExitType Execute(
                 string[] getProperty = Array.Empty<string>();
                 string[] getItem = Array.Empty<string>();
                 string[] getTargetResult = Array.Empty<string>();
+                string getResultOutputFile = string.Empty;
                 BuildResult result = null;
 #if FEATURE_REPORTFILEACCESSES
                 bool reportFileAccesses = false;
@@ -766,6 +767,7 @@ public static ExitType Execute(
                                             ref getProperty,
                                             ref getItem,
                                             ref getTargetResult,
+                                            ref getResultOutputFile,
                                             recursing: false,
 #if FEATURE_GET_COMMANDLINE
                                             commandLine);
@@ -822,7 +824,8 @@ public static ExitType Execute(
                             using (ProjectCollection collection = new(globalProperties, loggers, ToolsetDefinitionLocations.Default))
                             {
                                 Project project = collection.LoadProject(projectFile, globalProperties, toolsVersion);
-                                exitType = OutputPropertiesAfterEvaluation(getProperty, getItem, project);
+                                TextWriter output = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
+                                exitType = OutputPropertiesAfterEvaluation(getProperty, getItem, project, output);
                                 collection.LogBuildFinishedEvent(exitType == ExitType.Success);
                             }
                         }
@@ -884,7 +887,8 @@ public static ExitType Execute(
 
                     if (outputPropertiesItemsOrTargetResults && targets?.Length > 0 && result is not null)
                     {
-                        exitType = OutputBuildInformationInJson(result, getProperty, getItem, getTargetResult, loggers, exitType);
+                        TextWriter outputStream = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
+                        exitType = OutputBuildInformationInJson(result, getProperty, getItem, getTargetResult, loggers, exitType, outputStream);
                     }
 
                     if (!string.IsNullOrEmpty(timerOutputFilename))
@@ -1044,25 +1048,27 @@ public static ExitType Execute(
             return exitType;
         }
 
-        private static ExitType OutputPropertiesAfterEvaluation(string[] getProperty, string[] getItem, Project project)
+        private static ExitType OutputPropertiesAfterEvaluation(string[] getProperty, string[] getItem, Project project, TextWriter outputStream)
         {
             // Special case if the user requests exactly one property: skip json formatting
             if (getProperty.Length == 1 && getItem.Length == 0)
             {
-                Console.WriteLine(project.GetPropertyValue(getProperty[0]));
+                outputStream.WriteLine(project.GetPropertyValue(getProperty[0]));
             }
             else
             {
                 JsonOutputFormatter jsonOutputFormatter = new();
                 jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => project.GetPropertyValue(property));
                 jsonOutputFormatter.AddItemsInJsonFormat(getItem, project);
-                Console.WriteLine(jsonOutputFormatter.ToString());
+                outputStream.WriteLine(jsonOutputFormatter.ToString());
             }
 
+            outputStream.Flush();
+
             return ExitType.Success;
         }
 
-        private static ExitType OutputBuildInformationInJson(BuildResult result, string[] getProperty, string[] getItem, string[] getTargetResult, ILogger[] loggers, ExitType exitType)
+        private static ExitType OutputBuildInformationInJson(BuildResult result, string[] getProperty, string[] getItem, string[] getTargetResult, ILogger[] loggers, ExitType exitType, TextWriter outputStream)
         {
             ProjectInstance builtProject = result.ProjectStateAfterBuild;
 
@@ -1080,7 +1086,7 @@ private static ExitType OutputBuildInformationInJson(BuildResult result, string[
             // Special case if the user requests exactly one property: skip the json formatting
             else if (getProperty.Length == 1 && getItem.Length == 0 && getTargetResult.Length == 0)
             {
-                Console.WriteLine(builtProject.GetPropertyValue(getProperty[0]));
+                outputStream.WriteLine(builtProject.GetPropertyValue(getProperty[0]));
             }
             else
             {
@@ -1088,9 +1094,11 @@ private static ExitType OutputBuildInformationInJson(BuildResult result, string[
                 jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => builtProject.GetPropertyValue(property));
                 jsonOutputFormatter.AddItemInstancesInJsonFormat(getItem, builtProject);
                 jsonOutputFormatter.AddTargetResultsInJsonFormat(getTargetResult, result);
-                Console.WriteLine(jsonOutputFormatter.ToString());
+                outputStream.WriteLine(jsonOutputFormatter.ToString());
             }
 
+            outputStream.Flush();
+
             return exitType;
         }
 
@@ -1774,7 +1782,10 @@ private static BuildResult ExecuteRestore(string projectFile, string toolsVersio
             // Add/set a property with a random value to ensure that restore happens under a different evaluation context
             // If the evaluation context is not different, then projects won't be re-evaluated after restore
             // The initializer syntax can't be used just in case a user set this property to a value
-            restoreGlobalProperties["MSBuildRestoreSessionId"] = Guid.NewGuid().ToString("D");
+            restoreGlobalProperties[MSBuildConstants.MSBuildRestoreSessionId] = Guid.NewGuid().ToString("D");
+
+            // Add a property to indicate that a Restore is executing
+            restoreGlobalProperties[MSBuildConstants.MSBuildIsRestoring] = bool.TrueString;
 
             // Create a new request with a Restore target only and specify:
             //  - BuildRequestDataFlags.ClearCachesAfterBuild to ensure the projects will be reloaded from disk for subsequent builds
@@ -1833,6 +1844,26 @@ internal static void SetConsoleUI()
             CultureInfo.CurrentUICulture = desiredCulture;
             CultureInfo.DefaultThreadCurrentUICulture = desiredCulture;
 
+#if RUNTIME_TYPE_NETCORE
+            if (EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
+#else
+            if (EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
+                && !CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.Equals("en", StringComparison.InvariantCultureIgnoreCase))
+#endif
+            {
+                try
+                {
+                    // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.
+                    Console.OutputEncoding = Encoding.UTF8;
+                    // If the InputEncoding is not set, the encoding will work in CMD but not in PowerShell, as the raw CHCP page won't be changed.
+                    Console.InputEncoding = Encoding.UTF8;
+                }
+                catch (Exception ex) when (ex is IOException || ex is SecurityException)
+                {
+                    // The encoding is unavailable. Do nothing.
+                }
+            }
+
             // Determine if the language can be displayed in the current console codepage, otherwise set to US English
             int codepage;
 
@@ -2411,6 +2442,7 @@ private static bool ProcessCommandLineSwitches(
             ref string[] getProperty,
             ref string[] getItem,
             ref string[] getTargetResult,
+            ref string getResultOutputFile,
             bool recursing,
             string commandLine)
         {
@@ -2435,20 +2467,8 @@ private static bool ProcessCommandLineSwitches(
             }
 #endif
 
-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&
-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&
-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&
-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&
-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&
-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);
-
-            // show copyright message if nologo switch is not set
-            // NOTE: we heed the nologo switch even if there are switch errors
-            if (!recursing && shouldShowLogo)
-            {
-                DisplayVersionMessage();
-            }
-
+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);
+            DisplayVersionMessageIfNeeded(recursing, useTerminalLogger, commandLineSwitches);
 
             // Idle priority would prevent the build from proceeding as the user does normal actions.
             // This switch is processed early to capture both the command line case (main node should
@@ -2552,6 +2572,7 @@ private static bool ProcessCommandLineSwitches(
                                                            ref getProperty,
                                                            ref getItem,
                                                            ref getTargetResult,
+                                                           ref getResultOutputFile,
                                                            recursing: true,
                                                            commandLine);
                     }
@@ -2565,7 +2586,10 @@ private static bool ProcessCommandLineSwitches(
                     getProperty = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.GetProperty] ?? Array.Empty<string>();
                     getItem = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.GetItem] ?? Array.Empty<string>();
                     getTargetResult = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.GetTargetResult] ?? Array.Empty<string>();
-                    if (getProperty.Length > 0 || getItem.Length > 0 || getTargetResult.Length > 0)
+                    getResultOutputFile = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.GetResultOutputFile].FirstOrDefault() ?? string.Empty;
+
+                    bool minimizeStdOutOutput = getProperty.Length + getItem.Length + getTargetResult.Length > 0 && getResultOutputFile.Length == 0;
+                    if (minimizeStdOutOutput)
                     {
                         commandLineSwitches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.Verbosity, "q", "q", true, true, true);
                     }
@@ -2634,8 +2658,6 @@ private static bool ProcessCommandLineSwitches(
 
                     outputResultsCache = ProcessOutputResultsCache(commandLineSwitches);
 
-                    bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);
-
                     // figure out which loggers are going to listen to build events
                     string[][] groupedFileLoggerParameters = commandLineSwitches.GetFileLoggerParameters();
 
@@ -2670,7 +2692,7 @@ private static bool ProcessCommandLineSwitches(
                         binaryLoggerConfiguration,
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation],
                         groupedFileLoggerParameters,
-                        getProperty.Length + getItem.Length + getTargetResult.Length > 0,
+                        minimizeStdOutOutput,
                         out distributedLoggerRecords,
                         out verbosity,
                         out originalVerbosity,
@@ -3747,7 +3769,7 @@ private static ILogger[] ProcessLoggingSwitches(
             }
             else if (terminalloggerOptIn)
             {
-                ProcessTerminalLogger(noConsoleLogger, aggregatedTerminalLoggerParameters, distributedLoggerRecords, cpuCount, loggers);
+                ProcessTerminalLogger(noConsoleLogger, aggregatedTerminalLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
             }
             else
             {
@@ -3925,13 +3947,14 @@ internal static void ProcessConsoleLoggerSwitch(
         private static void ProcessTerminalLogger(bool noConsoleLogger,
             string aggregatedLoggerParameters,
             List<DistributedLoggerRecord> distributedLoggerRecords,
+            LoggerVerbosity verbosity,
             int cpuCount,
             List<ILogger> loggers)
         {
             if (!noConsoleLogger)
             {
                 // A central logger will be created for both single proc and multiproc.
-                TerminalLogger logger = new TerminalLogger()
+                TerminalLogger logger = new TerminalLogger(verbosity)
                 {
                     Parameters = aggregatedLoggerParameters
                 };
@@ -4460,9 +4483,29 @@ private static void ThrowInvalidToolsVersionInitializationException(IEnumerable<
         /// <summary>
         /// Displays the application version message/logo.
         /// </summary>
-        private static void DisplayVersionMessage()
+        private static void DisplayVersionMessageIfNeeded(bool recursing, bool useTerminalLogger, CommandLineSwitches commandLineSwitches)
         {
-            Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("MSBuildVersionMessage", ProjectCollection.DisplayVersion, NativeMethods.FrameworkName));
+            if (recursing)
+            {
+                return;
+            }
+
+            // Show the versioning information if the user has not disabled it or msbuild is not running in a mode
+            //  where it is not appropriate to show the versioning information (information querying mode that can be plugged into CLI scripts,
+            //  terminal logger mode, where we want to display only the most relevant info, while output is not meant for investigation).
+            // NOTE: response files are not reflected in this check. So enabling TL in response file will lead to version message still being shown.
+            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&
+                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&
+                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&
+                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&
+                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&
+                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability) &&
+                                  !useTerminalLogger;
+
+            if (shouldShowLogo)
+            {
+                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("MSBuildVersionMessage", ProjectCollection.DisplayVersion, NativeMethods.FrameworkName));
+            }
         }
 
         /// <summary>
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index d21ec8b5294..4d26307590c 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -184,21 +184,6 @@
           <assemblyIdentity name="Microsoft.VisualStudio.CodeAnalysis.Sdk" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <codeBase version="17.0.0.0" href="..\..\..\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.VisualStudio.CodeAnalysis.Sdk.dll" />
         </dependentAssembly>
-
-        <!-- Redirects for SDK resolver components -->
-        <qualifyAssembly partialName="Microsoft.DotNet.MSBuildSdkResolver" fullName="Microsoft.DotNet.MSBuildSdkResolver, Version=8.0.100.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" />
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.DotNet.MSBuildSdkResolver" culture="neutral" publicKeyToken="adb9793829ddae60" />
-          <codeBase version="8.0.100.0" href="..\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Microsoft.DotNet.MSBuildSdkResolver.dll" />
-        </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Deployment.DotNet.Releases" culture="neutral" publicKeyToken="31bf3856ad364e35" />
-          <codeBase version="2.0.0.0" href="..\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Microsoft.Deployment.DotNet.Releases.dll" />
-        </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed" />
-          <codeBase version="13.0.0.0" href="..\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Newtonsoft.Json.dll" />
-        </dependentAssembly>
       </assemblyBinding>
     </runtime>
     <!-- To define one or more new toolsets, add an 'msbuildToolsets' element in this file. -->
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index a372f0c4760..f024ccd4130 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -133,21 +133,6 @@
           <assemblyIdentity name="Microsoft.VisualStudio.CodeAnalysis.Sdk" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <codeBase version="17.0.0.0" href="..\..\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.VisualStudio.CodeAnalysis.Sdk.dll" />
         </dependentAssembly>
-
-        <!-- Redirects for SDK resolver components -->
-        <qualifyAssembly partialName="Microsoft.DotNet.MSBuildSdkResolver" fullName="Microsoft.DotNet.MSBuildSdkResolver, Version=8.0.100.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" />
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.DotNet.MSBuildSdkResolver" culture="neutral" publicKeyToken="adb9793829ddae60" />
-          <codeBase version="8.0.100.0" href=".\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Microsoft.DotNet.MSBuildSdkResolver.dll" />
-        </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Deployment.DotNet.Releases" culture="neutral" publicKeyToken="31bf3856ad364e35" />
-          <codeBase version="2.0.0.0" href=".\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Microsoft.Deployment.DotNet.Releases.dll" />
-        </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed" />
-          <codeBase version="13.0.0.0" href=".\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Newtonsoft.Json.dll" />
-        </dependentAssembly>
       </assemblyBinding>
     </runtime>
     <!-- To define one or more new toolsets, add an 'msbuildToolsets' element in this file. -->
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index aa4ce2eac58..26ad0cf2151 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -2,7 +2,7 @@
 
   <!-- The .NET Core version of MSBuild doesn't support targeting .NET Framework 3.5.  So in that case, we import
        a .props file that prevents building the project from doing much of anything. -->
-  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(MSBuildRuntimeType)' == 'Core' or '$(MonoBuild)' == 'true'" />
+  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(MSBuildRuntimeType)' == 'Core'" />
 
   <PropertyGroup>
     <TargetFramework>net35</TargetFramework>
diff --git a/src/Package/Localization/Localization.csproj b/src/Package/Localization/Localization.csproj
index e1ecca1aab4..36e52455e6f 100644
--- a/src/Package/Localization/Localization.csproj
+++ b/src/Package/Localization/Localization.csproj
@@ -1,7 +1,6 @@
 Ôªø<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
-    <TargetFramework Condition="$(MonoBuild) != 'true'">$(LatestDotNetCoreForMSBuild)</TargetFramework>
-    <TargetFramework Condition="$(MonoBuild) == 'true'">net472</TargetFramework>
+    <TargetFramework>$(LatestDotNetCoreForMSBuild)</TargetFramework>
     <NuspecFile>Microsoft.Build.Localization.nuspec</NuspecFile>
     <IsShipping>false</IsShipping>
     <NoPackageAnalysis>true</NoPackageAnalysis>
@@ -11,7 +10,6 @@
     <ProjectReference Include="..\..\MSBuild\MSBuild.csproj" />
   </ItemGroup>
 
-  <Import Project="..\NuspecProject.targets" Condition="'$(MonoBuild)' != 'true'" />
-  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(MonoBuild)' == 'true'" />
+  <Import Project="..\NuspecProject.targets" />
   
 </Project>
diff --git a/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj b/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj
index 297958b416d..2886ce40bc8 100644
--- a/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj
+++ b/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj
@@ -6,7 +6,7 @@
     <TargetVsixContainerName>Microsoft.Build.Arm64.vsix</TargetVsixContainerName>
     <VisualStudioInsertionComponent>Microsoft.Build.Arm64</VisualStudioInsertionComponent>
     <ShouldSkipProject>false</ShouldSkipProject>
-    <ShouldSkipProject Condition="'$(MonoBuild)' == 'true' or '$(MSBuildRuntimeType)' != 'Full'">true</ShouldSkipProject>
+    <ShouldSkipProject Condition="'$(MSBuildRuntimeType)' != 'Full'">true</ShouldSkipProject>
   </PropertyGroup>
 
   <ItemGroup>
diff --git a/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj b/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
index f3b3f9d2431..fa17cd82f82 100644
--- a/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
+++ b/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
@@ -7,7 +7,7 @@
     <VisualStudioInsertionComponent>Microsoft.Build</VisualStudioInsertionComponent>
 
     <ShouldSkipProject>false</ShouldSkipProject>
-    <ShouldSkipProject Condition="'$(MonoBuild)' == 'true' or '$(MSBuildRuntimeType)' != 'Full'">true</ShouldSkipProject>
+    <ShouldSkipProject Condition="'$(MSBuildRuntimeType)' != 'Full'">true</ShouldSkipProject>
   </PropertyGroup>
 
   <ItemGroup>
diff --git a/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj b/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj
index 30b51c5f35e..5ba08499c68 100644
--- a/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj
+++ b/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj
@@ -6,7 +6,6 @@
 
     <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
     <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
-    <TargetFrameworks Condition="'$(MonoBuild)'=='true'">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
   </PropertyGroup>
   <ItemGroup>
     <ProjectReference Include="..\..\Build\Microsoft.Build.csproj" />
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 55e0024479d..314301eec05 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -240,23 +240,48 @@ internal static int NodeConnectionTimeout
             get { return GetIntegerVariableOrDefault("MSBUILDNODECONNECTIONTIMEOUT", DefaultNodeConnectionTimeout); }
         }
 
+#if NETFRAMEWORK
         /// <summary>
-        /// Get environment block
+        /// Get environment block.
         /// </summary>
         [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
         internal static extern unsafe char* GetEnvironmentStrings();
 
         /// <summary>
-        /// Free environment block
+        /// Free environment block.
         /// </summary>
         [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
         internal static extern unsafe bool FreeEnvironmentStrings(char* pStrings);
 
         /// <summary>
-        /// Copied from the BCL implementation to eliminate some expensive security asserts.
+        /// Set environment variable P/Invoke.
+        /// </summary>
+        [DllImport("kernel32.dll", EntryPoint = "SetEnvironmentVariable", SetLastError = true, CharSet = CharSet.Unicode)]
+        [return: MarshalAs(UnmanagedType.Bool)]
+        private static extern bool SetEnvironmentVariableNative(string name, string value);
+
+        /// <summary>
+        /// Sets an environment variable using P/Invoke to workaround the .NET Framework BCL implementation.
+        /// </summary>
+        /// <remarks>
+        /// .NET Framework implementation of SetEnvironmentVariable checks the length of the value and throws an exception if
+        /// it's greater than or equal to 32,767 characters. This limitation does not exist on modern Windows or .NET.
+        /// </remarks>
+        internal static void SetEnvironmentVariable(string name, string value)
+        {
+            if (!SetEnvironmentVariableNative(name, value))
+            {
+                throw Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error());
+            }
+        }
+
+        /// <summary>
         /// Returns key value pairs of environment variables in a new dictionary
         /// with a case-insensitive key comparer.
         /// </summary>
+        /// <remarks>
+        /// Copied from the BCL implementation to eliminate some expensive security asserts on .NET Framework.
+        /// </remarks>
         internal static Dictionary<string, string> GetEnvironmentVariables()
         {
 #if !CLR2COMPATIBILITY
@@ -268,107 +293,121 @@ internal static Dictionary<string, string> GetEnvironmentVariables()
 
             Dictionary<string, string> table = new Dictionary<string, string>(200, StringComparer.OrdinalIgnoreCase); // Razzle has 150 environment variables
 
-            if (NativeMethodsShared.IsWindows)
+            unsafe
             {
-                unsafe
+                char* pEnvironmentBlock = null;
+
+                try
                 {
-                    char* pEnvironmentBlock = null;
+                    pEnvironmentBlock = GetEnvironmentStrings();
+                    if (pEnvironmentBlock == null)
+                    {
+                        throw new OutOfMemoryException();
+                    }
 
-                    try
+                    // Search for terminating \0\0 (two unicode \0's).
+                    char* pEnvironmentBlockEnd = pEnvironmentBlock;
+                    while (!(*pEnvironmentBlockEnd == '\0' && *(pEnvironmentBlockEnd + 1) == '\0'))
                     {
-                        pEnvironmentBlock = GetEnvironmentStrings();
-                        if (pEnvironmentBlock == null)
+                        pEnvironmentBlockEnd++;
+                    }
+                    long stringBlockLength = pEnvironmentBlockEnd - pEnvironmentBlock;
+
+                    // Copy strings out, parsing into pairs and inserting into the table.
+                    // The first few environment variable entries start with an '='!
+                    // The current working directory of every drive (except for those drives
+                    // you haven't cd'ed into in your DOS window) are stored in the
+                    // environment block (as =C:=pwd) and the program's exit code is
+                    // as well (=ExitCode=00000000)  Skip all that start with =.
+                    // Read docs about Environment Blocks on MSDN's CreateProcess page.
+
+                    // Format for GetEnvironmentStrings is:
+                    // (=HiddenVar=value\0 | Variable=value\0)* \0
+                    // See the description of Environment Blocks in MSDN's
+                    // CreateProcess page (null-terminated array of null-terminated strings).
+                    // Note the =HiddenVar's aren't always at the beginning.
+                    for (int i = 0; i < stringBlockLength; i++)
+                    {
+                        int startKey = i;
+
+                        // Skip to key
+                        // On some old OS, the environment block can be corrupted.
+                        // Some lines will not have '=', so we need to check for '\0'.
+                        while (*(pEnvironmentBlock + i) != '=' && *(pEnvironmentBlock + i) != '\0')
                         {
-                            throw new OutOfMemoryException();
+                            i++;
                         }
 
-                        // Search for terminating \0\0 (two unicode \0's).
-                        char* pEnvironmentBlockEnd = pEnvironmentBlock;
-                        while (!(*pEnvironmentBlockEnd == '\0' && *(pEnvironmentBlockEnd + 1) == '\0'))
+                        if (*(pEnvironmentBlock + i) == '\0')
                         {
-                            pEnvironmentBlockEnd++;
+                            continue;
                         }
-                        long stringBlockLength = pEnvironmentBlockEnd - pEnvironmentBlock;
-
-                        // Copy strings out, parsing into pairs and inserting into the table.
-                        // The first few environment variable entries start with an '='!
-                        // The current working directory of every drive (except for those drives
-                        // you haven't cd'ed into in your DOS window) are stored in the
-                        // environment block (as =C:=pwd) and the program's exit code is
-                        // as well (=ExitCode=00000000)  Skip all that start with =.
-                        // Read docs about Environment Blocks on MSDN's CreateProcess page.
-
-                        // Format for GetEnvironmentStrings is:
-                        // (=HiddenVar=value\0 | Variable=value\0)* \0
-                        // See the description of Environment Blocks in MSDN's
-                        // CreateProcess page (null-terminated array of null-terminated strings).
-                        // Note the =HiddenVar's aren't always at the beginning.
-                        for (int i = 0; i < stringBlockLength; i++)
-                        {
-                            int startKey = i;
 
-                            // Skip to key
-                            // On some old OS, the environment block can be corrupted.
-                            // Some lines will not have '=', so we need to check for '\0'.
-                            while (*(pEnvironmentBlock + i) != '=' && *(pEnvironmentBlock + i) != '\0')
+                        // Skip over environment variables starting with '='
+                        if (i - startKey == 0)
+                        {
+                            while (*(pEnvironmentBlock + i) != 0)
                             {
                                 i++;
                             }
 
-                            if (*(pEnvironmentBlock + i) == '\0')
-                            {
-                                continue;
-                            }
+                            continue;
+                        }
 
-                            // Skip over environment variables starting with '='
-                            if (i - startKey == 0)
-                            {
-                                while (*(pEnvironmentBlock + i) != 0)
-                                {
-                                    i++;
-                                }
+                        string key = new string(pEnvironmentBlock, startKey, i - startKey);
+                        i++;
 
-                                continue;
-                            }
+                        // skip over '='
+                        int startValue = i;
 
-                            string key = new string(pEnvironmentBlock, startKey, i - startKey);
+                        while (*(pEnvironmentBlock + i) != 0)
+                        {
+                            // Read to end of this entry
                             i++;
+                        }
 
-                            // skip over '='
-                            int startValue = i;
-
-                            while (*(pEnvironmentBlock + i) != 0)
-                            {
-                                // Read to end of this entry
-                                i++;
-                            }
-
-                            string value = new string(pEnvironmentBlock, startValue, i - startValue);
+                        string value = new string(pEnvironmentBlock, startValue, i - startValue);
 
-                            // skip over 0 handled by for loop's i++
-                            table[key] = value;
-                        }
+                        // skip over 0 handled by for loop's i++
+                        table[key] = value;
                     }
-                    finally
+                }
+                finally
+                {
+                    if (pEnvironmentBlock != null)
                     {
-                        if (pEnvironmentBlock != null)
-                        {
-                            FreeEnvironmentStrings(pEnvironmentBlock);
-                        }
+                        FreeEnvironmentStrings(pEnvironmentBlock);
                     }
                 }
             }
-            else
+
+            return table;
+        }
+
+#else // NETFRAMEWORK
+
+        /// <summary>
+        /// Sets an environment variable using <see cref="Environment.SetEnvironmentVariable(string,string)" />.
+        /// </summary>
+        internal static void SetEnvironmentVariable(string name, string value)
+            => Environment.SetEnvironmentVariable(name, value);
+
+        /// <summary>
+        /// Returns key value pairs of environment variables in a new dictionary
+        /// with a case-insensitive key comparer.
+        /// </summary>
+        internal static Dictionary<string, string> GetEnvironmentVariables()
+        {
+            var vars = Environment.GetEnvironmentVariables();
+
+            Dictionary<string, string> table = new Dictionary<string, string>(vars.Count, StringComparer.OrdinalIgnoreCase);
+            foreach (var key in vars.Keys)
             {
-                var vars = Environment.GetEnvironmentVariables();
-                foreach (var key in vars.Keys)
-                {
-                    table[(string)key] = (string)vars[key];
-                }
+                table[(string)key] = (string)vars[key];
             }
-
             return table;
         }
+#endif // NETFRAMEWORK
 
         /// <summary>
         /// Updates the environment to match the provided dictionary.
@@ -378,18 +417,22 @@ internal static void SetEnvironment(IDictionary<string, string> newEnvironment)
             if (newEnvironment != null)
             {
                 // First, delete all no longer set variables
-                foreach (KeyValuePair<string, string> entry in CommunicationsUtilities.GetEnvironmentVariables())
+                Dictionary<string, string> currentEnvironment = GetEnvironmentVariables();
+                foreach (KeyValuePair<string, string> entry in currentEnvironment)
                 {
                     if (!newEnvironment.ContainsKey(entry.Key))
                     {
-                        Environment.SetEnvironmentVariable(entry.Key, null);
+                        SetEnvironmentVariable(entry.Key, null);
                     }
                 }
 
                 // Then, make sure the new ones have their new values.
                 foreach (KeyValuePair<string, string> entry in newEnvironment)
                 {
-                    Environment.SetEnvironmentVariable(entry.Key, entry.Value);
+                    if (!currentEnvironment.TryGetValue(entry.Key, out string currentValue) || currentValue != entry.Value)
+                    {
+                        SetEnvironmentVariable(entry.Key, entry.Value);
+                    }
                 }
             }
         }
@@ -426,7 +469,7 @@ internal static void WriteIntForHandshake(this PipeStream stream, int value)
         internal static void ReadEndOfHandshakeSignal(
             this PipeStream stream,
             bool isProvider
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
             , int timeout
 #endif
             )
@@ -436,7 +479,7 @@ bool isProvider
 #pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
             int valueRead = stream.ReadIntForHandshake(
                 byteToAccept: null
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
             , timeout
 #endif
                 );
@@ -462,7 +505,7 @@ bool isProvider
         /// If specified, leading byte matches one in the supplied array if any, returns rejection byte and throws IOException.
         /// </summary>
         internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAccept
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
             , int timeout
 #endif
             )
@@ -470,7 +513,7 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce
         {
             byte[] bytes = new byte[4];
 
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
             if (!NativeMethodsShared.IsWindows)
             {
                 // Enforce a minimum timeout because the Windows code can pass
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 0e596c6cf56..77978ac3749 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -69,6 +69,17 @@ internal static class MSBuildConstants
 
         internal const string MSBuildDummyGlobalPropertyHeader = "MSBuildProjectInstance";
 
+        /// <summary>
+        /// A property set during an implicit restore (/restore) or explicit restore (/t:restore) to ensure that the evaluations are not re-used during build
+        /// </summary>
+        internal const string MSBuildRestoreSessionId = nameof(MSBuildRestoreSessionId);
+
+        /// <summary>
+        /// A property set during an implicit restore (/restore) or explicit restore (/t:restore) to indicate that a restore is executing.
+        /// </summary>
+        internal const string MSBuildIsRestoring = nameof(MSBuildIsRestoring);
+
+
         /// <summary>
         /// The most current VSGeneralAssemblyVersion known to this version of MSBuild.
         /// </summary>
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index cd81d66dc0c..de83a6de360 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -21,6 +21,13 @@ private enum NodeMode
         }
 
         static DebugUtils()
+        {
+            SetDebugPath();
+        }
+
+        // DebugUtils are initialized early on by the test runner - during preparing data for DataMemeberAttribute of some test,
+        //  for that reason it is not easily possible to inject the DebugPath in tests via env var (unless we want to run expensive exec style test).
+        internal static void SetDebugPath()
         {
             string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH"));
             string debugDirectory = environmentDebugPath;
@@ -95,7 +102,7 @@ private static bool CurrentProcessMatchesDebugName()
 
         public static readonly bool ShouldDebugCurrentProcess = CurrentProcessMatchesDebugName();
 
-        public static string DebugPath { get; }
+        public static string DebugPath { get; private set; }
 
         public static string FindNextAvailableDebugFilePath(string fileName)
         {
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index eca284ecb64..f8601953836 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -79,6 +79,11 @@ private static string GetDebugDumpPath()
         /// </summary>
         internal static string DebugDumpPath => s_debugDumpPath;
 
+        /// <summary>
+        /// The file used for diagnostic log files.
+        /// </summary>
+        internal static string DumpFilePath => s_dumpFileName;
+
 #if !BUILDINGAPPXTASKS
         /// <summary>
         /// The filename that exceptions will be dumped to
@@ -99,6 +104,9 @@ internal static bool IsCriticalException(Exception e)
              || e is ThreadAbortException
              || e is ThreadInterruptedException
              || e is AccessViolationException
+#if !TASKHOST
+             || e is CriticalTaskException
+#endif
 #if !BUILDINGAPPXTASKS
              || e is InternalErrorException
 #endif
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index e50a6b860d3..479bd5ac67a 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -1697,9 +1697,6 @@ internal static bool IsMatch(ReadOnlySpan<char> input, string pattern)
             // Store the information whether the tail was checked when a pattern "*?" occurred
             bool tailChecked = false;
 
-#if MONO    // MONO doesn't support local functions
-            Func<char, char, int, int, bool> CompareIgnoreCase = (inputChar, patternChar, iIndex, pIndex) =>
-#else
             // Function for comparing two characters, ignoring case
             // PERF NOTE:
             // Having a local function instead of a variable increases the speed by approx. 2 times.
@@ -1708,7 +1705,6 @@ internal static bool IsMatch(ReadOnlySpan<char> input, string pattern)
             // when we have to compare two non ASCII characters. Using just string.Compare for
             // character comparison, would reduce the speed by approx. 5 times.
             bool CompareIgnoreCase(ref ReadOnlySpan<char> input, int iIndex, int pIndex)
-#endif
             {
                 char inputChar = input[iIndex];
                 char patternChar = pattern[pIndex];
@@ -1728,9 +1724,6 @@ bool CompareIgnoreCase(ref ReadOnlySpan<char> input, int iIndex, int pIndex)
                 }
                 return MemoryExtensions.Equals(input.Slice(iIndex, 1), pattern.AsSpan(pIndex, 1), StringComparison.OrdinalIgnoreCase);
             }
-#if MONO
-            ; // The end of the CompareIgnoreCase anonymous function
-#endif
 
             while (inputIndex < inputLength)
             {
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index b1cee220d8b..3a67481a23e 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -1485,7 +1485,7 @@ internal static string GetPathOfFileAbove(string file, string startingDirectory,
 
         internal static void EnsureDirectoryExists(string directoryPath)
         {
-            if (directoryPath != null && !DefaultFileSystem.DirectoryExists(directoryPath))
+            if (!string.IsNullOrEmpty(directoryPath) && !DefaultFileSystem.DirectoryExists(directoryPath))
             {
                 Directory.CreateDirectory(directoryPath);
             }
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index 3ff6eb90662..51d551eef38 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -873,12 +873,6 @@ internal static string FindDotNetFrameworkPath(
         /// </summary>
         internal static string GenerateProgramFiles32()
         {
-            // With Mono, all we look for in Files32 should be found in the below location
-            if (!NativeMethodsShared.IsWindows && NativeMethodsShared.IsMono)
-            {
-                return Path.Combine(NativeMethodsShared.FrameworkBasePath, "xbuild");
-            }
-
             // On a 64 bit machine we always want to use the program files x86.  If we are running as a 64 bit process then this variable will be set correctly
             // If we are on a 32 bit machine or running as a 32 bit process then this variable will be null and the programFiles variable will be correct.
             string programFilesX86 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
@@ -897,12 +891,6 @@ internal static string GenerateProgramFiles32()
         /// </summary>
         internal static string GenerateProgramFiles64()
         {
-            // With Mono, all we look for in Files32 should be found in the below location
-            if (!NativeMethodsShared.IsWindows && NativeMethodsShared.IsMono)
-            {
-                return Path.Combine(NativeMethodsShared.FrameworkBasePath, "xbuild");
-            }
-
             string programFilesX64;
             if (string.Equals(programFiles, programFiles32))
             {
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 92cc46106f0..81eacb5e604 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -205,6 +205,11 @@ internal enum LoggingEventType : int
         /// Event is <see cref="ExtendedCriticalBuildMessageEventArgs"/>
         /// </summary>
         ExtendedCriticalBuildMessageEvent = 33,
+
+        /// <summary>
+        /// Event is a <see cref="GeneratedFileUsedEventArgs"/>
+        /// </summary>
+        GeneratedFileUsedEvent = 34,
     }
     #endregion
 
@@ -589,7 +594,8 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
-                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
+                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),               
+
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
                 LoggingEventType.TaskParameterEvent => new TaskParameterEventArgs(0, null, null, true, default),
@@ -610,6 +616,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.PropertyInitialValueSet => new PropertyInitialValueSetEventArgs(),
                 LoggingEventType.PropertyReassignment => new PropertyReassignmentEventArgs(),
                 LoggingEventType.UninitializedPropertyRead => new UninitializedPropertyReadEventArgs(),
+                LoggingEventType.GeneratedFileUsedEvent => new GeneratedFileUsedEventArgs(),
 #endif
                 _ => throw new InternalErrorException("Should not get to the default of GetBuildEventArgFromId ID: " + _eventType)
             };
@@ -721,6 +728,10 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.UninitializedPropertyRead;
             }
+            else if (eventType == typeof(GeneratedFileUsedEventArgs))
+            {
+                return LoggingEventType.GeneratedFileUsedEvent;
+            }
 #endif
             else if (eventType == typeof(TargetStartedEventArgs))
             {
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 76705f4a6cb..6c12448b1ad 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -33,12 +33,12 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
     {
         #region Private Data
 
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
         /// <summary>
         /// The amount of time to wait for the client to connect to the host.
         /// </summary>
         private const int ClientConnectTimeout = 60000;
-#endif // NETCOREAPP2_1 || MONO
+#endif // NETCOREAPP2_1
 
         /// <summary>
         /// The size of the buffers to use for named pipes
@@ -212,51 +212,46 @@ internal void InternalConstruct(string pipeName = null)
             pipeName ??= NamedPipeUtil.GetPlatformSpecificPipeName();
 
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
-            if (!NativeMethodsShared.IsMono)
-            {
-                SecurityIdentifier identifier = WindowsIdentity.GetCurrent().Owner;
-                PipeSecurity security = new PipeSecurity();
-
-                // Restrict access to just this account.  We set the owner specifically here, and on the
-                // pipe client side they will check the owner against this one - they must have identical
-                // SIDs or the client will reject this server.  This is used to avoid attacks where a
-                // hacked server creates a less restricted pipe in an attempt to lure us into using it and
-                // then sending build requests to the real pipe client (which is the MSBuild Build Manager.)
-                PipeAccessRule rule = new PipeAccessRule(identifier, PipeAccessRights.ReadWrite, AccessControlType.Allow);
-                security.AddAccessRule(rule);
-                security.SetOwner(identifier);
-
-                _pipeServer = new NamedPipeServerStream(
-                    pipeName,
-                    PipeDirection.InOut,
-                    1, // Only allow one connection at a time.
-                    PipeTransmissionMode.Byte,
-                    PipeOptions.Asynchronous | PipeOptions.WriteThrough
+            SecurityIdentifier identifier = WindowsIdentity.GetCurrent().Owner;
+            PipeSecurity security = new PipeSecurity();
+
+            // Restrict access to just this account.  We set the owner specifically here, and on the
+            // pipe client side they will check the owner against this one - they must have identical
+            // SIDs or the client will reject this server.  This is used to avoid attacks where a
+            // hacked server creates a less restricted pipe in an attempt to lure us into using it and
+            // then sending build requests to the real pipe client (which is the MSBuild Build Manager.)
+            PipeAccessRule rule = new PipeAccessRule(identifier, PipeAccessRights.ReadWrite, AccessControlType.Allow);
+            security.AddAccessRule(rule);
+            security.SetOwner(identifier);
+
+            _pipeServer = new NamedPipeServerStream(
+                pipeName,
+                PipeDirection.InOut,
+                1, // Only allow one connection at a time.
+                PipeTransmissionMode.Byte,
+                PipeOptions.Asynchronous | PipeOptions.WriteThrough
 #if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
-                    | PipeOptions.CurrentUserOnly
-#endif
-                    ,
-                    PipeBufferSize, // Default input buffer
-                    PipeBufferSize,  // Default output buffer
-                    security,
-                    HandleInheritability.None);
-            }
-            else
+                | PipeOptions.CurrentUserOnly
 #endif
-            {
-                _pipeServer = new NamedPipeServerStream(
-                    pipeName,
-                    PipeDirection.InOut,
-                    1, // Only allow one connection at a time.
-                    PipeTransmissionMode.Byte,
-                    PipeOptions.Asynchronous | PipeOptions.WriteThrough
+                ,
+                PipeBufferSize, // Default input buffer
+                PipeBufferSize,  // Default output buffer
+                security,
+                HandleInheritability.None);
+#else
+            _pipeServer = new NamedPipeServerStream(
+                pipeName,
+                PipeDirection.InOut,
+                1, // Only allow one connection at a time.
+                PipeTransmissionMode.Byte,
+                PipeOptions.Asynchronous | PipeOptions.WriteThrough
 #if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
-                    | PipeOptions.CurrentUserOnly
+                | PipeOptions.CurrentUserOnly
+#endif
+                ,
+                PipeBufferSize, // Default input buffer
+                PipeBufferSize);  // Default output buffer
 #endif
-                    ,
-                    PipeBufferSize, // Default input buffer
-                    PipeBufferSize);  // Default output buffer
-            }
         }
 
         #endregion
@@ -402,7 +397,7 @@ private void PacketPumpProc()
 #pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
                             int handshakePart = _pipeServer.ReadIntForHandshake(
                                 byteToAccept: i == 0 ? (byte?)CommunicationsUtilities.handshakeVersion : null /* this will disconnect a < 16.8 host; it expects leading 00 or F5 or 06. 0x00 is a wildcard */
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
                             , ClientConnectTimeout /* wait a long time for the handshake from this side */
 #endif
                             );
@@ -420,7 +415,7 @@ private void PacketPumpProc()
                         if (gotValidConnection)
                         {
                             // To ensure that our handshake and theirs have the same number of bytes, receive and send a magic number indicating EOS.
-#if NETCOREAPP2_1_OR_GREATER || MONO
+#if NETCOREAPP2_1_OR_GREATER
                             _pipeServer.ReadEndOfHandshakeSignal(false, ClientConnectTimeout); /* wait a long time for the handshake from this side */
 #else
                             _pipeServer.ReadEndOfHandshakeSignal(false);
diff --git a/src/Shared/Resources/Strings.shared.resx b/src/Shared/Resources/Strings.shared.resx
index fc738f26816..3b091e485d0 100644
--- a/src/Shared/Resources/Strings.shared.resx
+++ b/src/Shared/Resources/Strings.shared.resx
@@ -350,7 +350,7 @@
     <comment>{StrBegin="MSB5028: "}UE: The project filename is provided separately to loggers.</comment>
   </data>
   <data name="WildcardResultsInDriveEnumeration" xml:space="preserve">
-    <value>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</value>
+    <value>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</value>
     <comment>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</comment>
   </data>
diff --git a/src/Shared/Resources/xlf/Strings.shared.cs.xlf b/src/Shared/Resources/xlf/Strings.shared.cs.xlf
index 1edd7bcb179..b8eb609791a 100644
--- a/src/Shared/Resources/xlf/Strings.shared.cs.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.cs.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: Hodnota {0} atributu {1} v elementu &lt;{2}&gt; v souboru {3} je z√°stupn√Ω znak, jeho≈æ v√Ωsledkem je v√Ωƒçet v≈°ech soubor≈Ø na jednotce, co≈æ pravdƒõpodobnƒõ nebylo zam√Ω≈°leno. Zkontrolujte, jestli jsou odkazovan√© vlastnosti v≈ædy definov√°ny.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: Hodnota {0} atributu {1} v elementu &lt;{2}&gt; v souboru {3}je z√°stupn√Ω znak, jeho≈æ v√Ωsledkem je v√Ωƒçet v≈°ech soubor≈Ø na jednotce, co≈æ pravdƒõpodobnƒõ nebylo zam√Ω≈°leno. Zkontrolujte, zda jsou odkazovan√© vlastnosti v≈ædy definov√°ny a zda projekt a aktu√°ln√≠ pracovn√≠ adres√°≈ô nejsou v ko≈ôenov√©m adres√°≈ôi jednotky.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.de.xlf b/src/Shared/Resources/xlf/Strings.shared.de.xlf
index ee1ab288105..2403a3e5472 100644
--- a/src/Shared/Resources/xlf/Strings.shared.de.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.de.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: Der Wert "{0}" des Attributs "{1}" in Element &lt;{2}&gt; in der Datei "{3}" ist ein Platzhalter, der dazu f√ºhrt, dass alle Dateien auf dem Laufwerk aufgelistet werden, was wahrscheinlich nicht beabsichtigt war. √úberpr√ºfen Sie, ob Eigenschaften, auf die verwiesen wird, immer definiert sind.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: Der Wert ‚Äû{0}‚Äú des Attributs ‚Äû{1}‚Äú in Element &lt;{2}&gt; in der Datei ‚Äû{3}‚Äú ist ein Platzhalter, der dazu f√ºhrt, dass alle Dateien auf dem Laufwerk aufgelistet werden, was wahrscheinlich nicht beabsichtigt war. √úberpr√ºfen Sie, ob die referenzierten Eigenschaften immer definiert sind und dass sich das Projekt und das aktuelle Arbeitsverzeichnis nicht im Laufwerkstamm befinden.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.es.xlf b/src/Shared/Resources/xlf/Strings.shared.es.xlf
index 95cf2fbc390..a93c81f506d 100644
--- a/src/Shared/Resources/xlf/Strings.shared.es.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.es.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: El valor ‚Äú{0}‚Äù del atributo ‚Äú{1}‚Äù en el elemento &lt;{2}&gt; en el archivo "{3}" es un car√°cter comod√≠n que da como resultado la enumeraci√≥n de todos los archivos de la unidad, lo que probablemente no estaba previsto. Compruebe que siempre se definan las propiedades a las que se hace referencia.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: el valor "{0}" del atributo "{1}" en el elemento &lt;{2}&gt; en el archivo "{3}" es un car√°cter comod√≠n que da como resultado enumerar todos los archivos de la unidad, lo que probablemente no estaba previsto. Compruebe que las propiedades a las que se hace referencia siempre est√°n definidas y que el proyecto y el directorio de trabajo actual no est√°n en la ra√≠z de la unidad.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.fr.xlf b/src/Shared/Resources/xlf/Strings.shared.fr.xlf
index c498cd0cd39..cc8dcec1d97 100644
--- a/src/Shared/Resources/xlf/Strings.shared.fr.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.fr.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: La valeur ¬´{0}¬ª de l‚Äôattribut ¬´{1}¬ª dans l‚Äô√©l√©ment &lt;{2}&gt; dans le fichier ¬´{3}¬ª est un caract√®re g√©n√©rique qui entra√Æne l‚Äô√©num√©ration de tous les fichiers sur le lecteur, ce qui n‚Äô√©tait probablement pas pr√©vu. V√©rifiez que les propri√©t√©s r√©f√©renc√©es sont toujours d√©finies.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: La valeur ¬´{0}¬ª de l‚Äôattribut ¬´{1}¬ª dans l‚Äô√©l√©ment &lt;{2}&gt; dans le fichier ¬´{3}¬ª est un caract√®re g√©n√©rique qui entra√Æne l‚Äô√©num√©ration de tous les fichiers sur le lecteur, ce qui n‚Äô√©tait probablement pas pr√©vu. V√©rifiez que les propri√©t√©s r√©f√©renc√©es sont toujours d√©finies et que le projet et le r√©pertoire de travail actuel ne se trouvent pas √† la racine du lecteur.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.it.xlf b/src/Shared/Resources/xlf/Strings.shared.it.xlf
index a3c710638c9..44811a6d6bb 100644
--- a/src/Shared/Resources/xlf/Strings.shared.it.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.it.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: il valore "{0}" dell'attributo "{1}" nell'elemento &lt;{2}&gt; nel file "{3}" √® un carattere jolly che determina l'enumerazione di tutti i file nell'unit√†, che probabilmente non era previsto. Verificare che le propriet√† di riferimento siano sempre definite.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: il valore "{0}" dell'attributo "{1}" nell'elemento &lt;{2}&gt; nel file "{3}" √® un carattere jolly che determina l'enumerazione di tutti i file nell'unit√†, che probabilmente non era previsto. Controllare che le propriet√† a cui si fa riferimento siano sempre definite e che il progetto e la directory di lavoro corrente non siano nella radice dell'unit√†.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.ja.xlf b/src/Shared/Resources/xlf/Strings.shared.ja.xlf
index 5689a1f9504..756494d5448 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ja.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ja.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: „Éï„Ç°„Ç§„É´ "{3}" ÂÜÖ„ÅÆË¶ÅÁ¥† &lt;{2}&gt; „ÅÆ "{1}" Â±ûÊÄß„ÅÆÂÄ§ "{0}" „ÅØ„ÉØ„Ç§„É´„Éâ„Ç´„Éº„Éâ„Åß„ÅÇ„Çä„ÄÅ„Éâ„É©„Ç§„Éñ‰∏ä„ÅÆ„Åô„Åπ„Å¶„ÅÆ„Éï„Ç°„Ç§„É´„ÅåÂàóÊåô„Åï„Çå„Åæ„Åô„ÄÇ„Åù„Çå„ÅØÊÑèÂõ≥„Åï„Çå„Å¶„ÅØ„ÅÑ„Å™„ÅÑ„Å®ÊÄù„Çè„Çå„Åæ„Åô„ÄÇÂèÇÁÖß„Åï„Çå„Çã„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÂ∏∏„Å´ÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: „Éï„Ç°„Ç§„É´ "{3}" „ÅÆË¶ÅÁ¥† &lt;{2}&gt; „ÅÆ "{1}" Â±ûÊÄß„ÅÆÂÄ§ "{0}" „ÅØ„ÄÅ„Éâ„É©„Ç§„Éñ‰∏ä„ÅÆ„Åô„Åπ„Å¶„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂàóÊåô„Åô„Çã„ÉØ„Ç§„É´„Éâ„Ç´„Éº„Éâ„Åß„ÅÇ„Çä„ÄÅÊÑèÂõ≥„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂèÇÁÖß„Åï„Çå„Çã„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÂ∏∏„Å´ÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÄÅ„Åä„Çà„Å≥„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å®ÁèæÂú®„ÅÆ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™„Åå„Éâ„É©„Ç§„Éñ „É´„Éº„Éà„Å´„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÄÇ</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.ko.xlf b/src/Shared/Resources/xlf/Strings.shared.ko.xlf
index d3da7922151..6535777301b 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ko.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ko.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: ÌååÏùº "{3}"Ïóê ÏûàÎäî ÏöîÏÜå &lt;{2}&gt; ÏöîÏÜåÏùò "{1}" ÌäπÏÑ±Ïùò Í∞í "{0}"ÏùÄ(Îäî) ÏùòÎèÑÌïòÏßÄ ÏïäÏùÄ ÎìúÎùºÏù¥Î∏åÏùò Î™®Îì† ÌååÏùºÏùÑ Ïó¥Í±∞ÌïòÎäî ÏôÄÏùºÎìúÏπ¥ÎìúÏûÖÎãàÎã§. Ï∞∏Ï°∞Îêú ÏÜçÏÑ±Ïù¥ Ìï≠ÏÉÅ Ï†ïÏùòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: ÌååÏùº "{0}"Ïóê ÏûàÎäî ÏöîÏÜå &lt;{1}&gt; ÏöîÏÜåÏùò "{2}" ÌäπÏÑ±Ïùò Í∞í "{3}"ÏùÄ(Îäî) ÏùòÎèÑÌïòÏßÄ ÏïäÏùÄ ÎìúÎùºÏù¥Î∏åÏùò Î™®Îì† ÌååÏùºÏùÑ Ïó¥Í±∞ÌïòÎäî ÏôÄÏùºÎìúÏπ¥ÎìúÏûÖÎãàÎã§. Ï∞∏Ï°∞Îêú ÏÜçÏÑ±Ïù¥ Ìï≠ÏÉÅ Ï†ïÏùòÎêòÏñ¥ ÏûàÍ≥† ÌîÑÎ°úÏ†ùÌä∏ Î∞è ÌòÑÏû¨ ÏûëÏóÖ ÎîîÎ†âÌÑ∞Î¶¨Í∞Ä ÎìúÎùºÏù¥Î∏å Î£®Ìä∏Ïóê ÏóÜÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.pl.xlf b/src/Shared/Resources/xlf/Strings.shared.pl.xlf
index 32da5c6782c..833406cf7f0 100644
--- a/src/Shared/Resources/xlf/Strings.shared.pl.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.pl.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: Warto≈õƒá ‚Äû{0}‚Äù atrybutu ‚Äû{1}‚Äù w elemencie &lt;{2}&gt; w pliku ‚Äû{3}‚Äù jest symbolem wieloznacznym, kt√≥ry powoduje wyliczenie wszystkich plik√≥w na dysku, co prawdopodobnie nie by≈Ço zamierzone. Sprawd≈∫, aby przywo≈Çywane w≈Ça≈õciwo≈õci by≈Çy zawsze zdefiniowane.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: Warto≈õƒá ‚Äû{0}‚Äù atrybutu ‚Äû{1}‚Äù w elemencie &lt;{2}&gt; w pliku ‚Äû{3}‚Äù jest symbolem wieloznacznym, kt√≥ry powoduje wyliczenie wszystkich plik√≥w na dysku, co prawdopodobnie nie by≈Ço zamierzone. Sprawd≈∫, czy przywo≈Çywane w≈Ça≈õciwo≈õci sƒÖ zawsze zdefiniowane oraz czy projekt i bie≈ºƒÖcy katalog roboczy nie znajdujƒÖ siƒô w katalogu g≈Ç√≥wnym dysku.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf b/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
index 6be67780d46..54b0024c1a7 100644
--- a/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: O valor "{0}" do atributo "{1}" no elemento &lt;{2}&gt; no arquivo "{3}" √© um curinga que resulta na enumera√ß√£o de todos os arquivos na unidade, o que provavelmente n√£o foi planejado. Verifique se as propriedades referenciadas est√£o sempre definidas.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: O valor "{0}" do atributo "{1}" no elemento &lt;{2}&gt; no arquivo "{3}" √© um curinga que resulta na enumera√ß√£o de todos os arquivos na unidade, o que provavelmente n√£o foi planejado. Verifique se as propriedades referenciadas est√£o sempre definidas e se o projeto e o diret√≥rio de trabalho atual n√£o est√£o na raiz da unidade.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.ru.xlf b/src/Shared/Resources/xlf/Strings.shared.ru.xlf
index 92b45a030e4..1e017cd3a60 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ru.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ru.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: –∑–Ω–∞—á–µ–Ω–∏–µ "{0}" –∞—Ç—Ä–∏–±—É—Ç–∞ "{1}" –≤ —ç–ª–µ–º–µ–Ω—Ç–µ &lt;{2}&gt; –≤ —Ñ–∞–π–ª–µ "{3}" —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º –∑–Ω–∞–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ, —á—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–ª–æ—Å—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–æ—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: –∑–Ω–∞—á–µ–Ω–∏–µ "{0}" –∞—Ç—Ä–∏–±—É—Ç–∞ "{1}" –≤ —ç–ª–µ–º–µ–Ω—Ç–µ &lt;{2}&gt; –≤ —Ñ–∞–π–ª–µ "{3}" —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º –∑–Ω–∞–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ, —á—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–ª–æ—Å—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∏ —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –¥–∏—Å–∫–∞.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.tr.xlf b/src/Shared/Resources/xlf/Strings.shared.tr.xlf
index e5631033254..b3afdcac482 100644
--- a/src/Shared/Resources/xlf/Strings.shared.tr.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.tr.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: "{3}" dosyasƒ±ndaki &lt;{2}&gt; √∂ƒüesinde "{1}" √∂zniteliƒüinin "{0}" deƒüeri, s√ºr√ºc√ºdeki t√ºm dosyalarƒ±n numaralandƒ±rƒ±lmasƒ±yla sonu√ßlanan (b√ºy√ºk olasƒ±lƒ±kla bunun olmasƒ± ama√ßlanmƒ±yordu) bir joker karakterdir. Ba≈üvurulan √∂zelliklerin her zaman tanƒ±mlƒ± olduƒüundan emin olun.</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: "{0}" dosyasƒ±ndaki &lt;{1}&gt; √∂ƒüesinde "{2}" √∂zniteliƒüinin "{3}" deƒüeri, s√ºr√ºc√ºdeki t√ºm dosyalarƒ±n numaralandƒ±rƒ±lmasƒ±yla sonu√ßlanan (b√ºy√ºk olasƒ±lƒ±kla bunun olmasƒ± ama√ßlanmƒ±yordu) bir joker karakterdir. Ba≈üvurulan √∂zelliklerin her zaman tanƒ±mlandƒ±ƒüƒ±nƒ± ve projenin ve ge√ßerli √ßalƒ±≈üma dizininin s√ºr√ºc√º k√∂k√ºnde bulunmadƒ±ƒüƒ±nƒ± kontrol edin.</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf b/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
index c40f0476018..71e7e3a3419 100644
--- a/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: Êñá‰ª∂ "{3}" ‰∏≠ÂÖÉÁ¥† &lt;{2}&gt; ‰∏≠ "{1}" Â±ûÊÄßÁöÑÂÄº "{0}" ÊòØÈÄöÈÖçÁ¨¶ÔºåÂèØÂØºËá¥Êûö‰∏æÈ©±Âä®Âô®‰∏äÁöÑÊâÄÊúâÊñá‰ª∂ÔºåËøôÂèØËÉΩ‰∏çÊòØÈ¢ÑÊúüÁöÑË°å‰∏∫„ÄÇËØ∑Ê£ÄÊü•ÊòØÂê¶ÂßãÁªàÂÆö‰πâ‰∫ÜÊâÄÂºïÁî®ÁöÑÂ±ûÊÄß„ÄÇ</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: Êñá‰ª∂‚Äú{3}‚Äù‰∏≠ÂÖÉÁ¥† &lt;{2}&gt; ‰∏≠‚Äú{1}‚ÄùÂ±ûÊÄßÁöÑÂÄº‚Äú{0}‚ÄùÊòØÈÄöÈÖçÁ¨¶ÔºåÂèØÂØºËá¥Êûö‰∏æÈ©±Âä®Âô®‰∏äÁöÑÊâÄÊúâÊñá‰ª∂ÔºåËøôÂèØËÉΩ‰∏çÊòØÈ¢ÑÊúüÁöÑË°å‰∏∫„ÄÇÁ°ÆËÆ§ÂßãÁªàÂÆö‰πâ‰∫ÜÂºïÁî®ÁöÑÂ±ûÊÄßÔºåÂπ∂‰∏îÈ°πÁõÆÂíåÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï‰∏çÂú®È©±Âä®Âô®Ê†πÁõÆÂΩï‰∏ã„ÄÇ</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf b/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
index 4b995564ab6..a38c783e8a0 100644
--- a/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
@@ -324,8 +324,8 @@
         <note />
       </trans-unit>
       <trans-unit id="WildcardResultsInDriveEnumeration">
-        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
-        <target state="translated">MSB5029: Ê™îÊ°à„Äå{3}„ÄçÂÖÉÁ¥† &lt;{2}&gt; ‰∏≠Â±¨ÊÄß„Äå{1}„ÄçÁöÑÂÄº„Äå{0}„ÄçÊòØËê¨Áî®Â≠óÂÖÉÔºåÂ∞éËá¥ÂàóËàâÁ£ÅÁ¢üÊ©ü‰∏äÁöÑÊâÄÊúâÊ™îÊ°àÔºåÈÄôÂæàÂèØËÉΩ‰∏çÊòØÈ†êÊúüÁöÑÁµêÊûú„ÄÇÊ™¢Êü•ÊòØÂê¶‰∏ÄÁõ¥ÂÆöÁæ©ÂèÉËÄÉÂ±¨ÊÄß„ÄÇ</target>
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined and that the project and current working directory are not at the drive root.</source>
+        <target state="translated">MSB5029: Ê™îÊ°à„Äå{3}„ÄçÂÖÉÁ¥† &lt;{2}&gt; ‰∏≠Â±¨ÊÄß„Äå{1}„ÄçÁöÑÂÄº„Äå{0}„ÄçÊòØËê¨Áî®Â≠óÂÖÉÔºåÂ∞éËá¥ÂàóËàâÁ£ÅÁ¢üÊ©ü‰∏äÁöÑÊâÄÊúâÊ™îÊ°àÔºåÈÄôÂæàÂèØËÉΩ‰∏çÊòØÈ†êÊúüÁöÑÁµêÊûú„ÄÇÊ™¢Êü•ÂèÉËÄÉÁöÑÂ±¨ÊÄßÊòØÂê¶‰∏ÄÁõ¥ÂÆöÁæ©Ôºå‰ª•ÂèäÂ∞àÊ°àËàáÁõÆÂâçÁöÑÂ∑•‰ΩúÁõÆÈåÑÊòØÂê¶‰∏çÂú®Á£ÅÁ¢üÊ©üÊ†πÁõÆÈåÑ‰∏≠„ÄÇ</target>
         <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
       attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
       </trans-unit>
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index da848678ded..9a5315b1b32 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -503,6 +503,21 @@ public void LogMessageFromResources(MessageImportance importance, string message
 #endif
         }
 
+        /// <summary>
+        /// Logs a file generated from the given data.
+        /// </summary>
+        /// <param name="filePath">The file path relative to the currecnt project.</param>
+        /// <param name="content">The content of the file.</param>
+        public void LogIncludeGeneratedFile(string filePath, string content)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));
+            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));
+
+            var e = new GeneratedFileUsedEventArgs(filePath, content);
+
+            BuildEngine.LogMessageEvent(e);
+        }
+
         /// <summary>
         /// Flatten the inner exception message
         /// </summary>
diff --git a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
index 1114e941ff9..ec407e54d29 100644
--- a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
+++ b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
@@ -324,14 +324,10 @@ public void CompareBaseNameRealCase1()
         [Fact]
         public void CreateAssemblyNameExtensionWithNoSimpleName()
         {
-            // Mono does not throw on this string
-            if (!NativeMethodsShared.IsMono)
+            Assert.Throws<FileLoadException>(() =>
             {
-                Assert.Throws<FileLoadException>(() =>
-                {
-                    AssemblyNameExtension extension = new AssemblyNameExtension("Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a", true);
-                });
-            }
+                AssemblyNameExtension extension = new AssemblyNameExtension("Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a", true);
+            });
         }
 
         /// <summary>
@@ -340,16 +336,12 @@ public void CreateAssemblyNameExtensionWithNoSimpleName()
         [Fact]
         public void CreateAssemblyNameExtensionWithNoSimpleName2()
         {
-            // Mono does not throw on this string
-            if (!NativeMethodsShared.IsMono)
+            Assert.Throws<FileLoadException>(() =>
             {
-                Assert.Throws<FileLoadException>(() =>
-                {
-                    AssemblyNameExtension extension = new AssemblyNameExtension("Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
-                    AssemblyNameExtension extension2 = new AssemblyNameExtension("A, Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
-                    extension2.PartialNameCompare(extension);
-                });
-            }
+                AssemblyNameExtension extension = new AssemblyNameExtension("Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
+                AssemblyNameExtension extension2 = new AssemblyNameExtension("A, Version=2.0.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a");
+                extension2.PartialNameCompare(extension);
+            });
         }
 
         /// <summary>
diff --git a/src/Shared/UnitTests/CommunicationUtilities_Tests.cs b/src/Shared/UnitTests/CommunicationUtilities_Tests.cs
new file mode 100644
index 00000000000..84cfcd034b8
--- /dev/null
+++ b/src/Shared/UnitTests/CommunicationUtilities_Tests.cs
@@ -0,0 +1,66 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+using CommunicationsUtilities = Microsoft.Build.Internal.CommunicationsUtilities;
+
+namespace Microsoft.Build.UnitTests
+{
+    public class CommunicationUtilitiesTests
+    {
+        /// <summary>
+        /// Verify our custom way of getting env vars gives the same results as the BCL.
+        /// </summary>
+        [Fact]
+        public void GetEnvVars()
+        {
+            IDictionary<string, string> envVars = CommunicationsUtilities.GetEnvironmentVariables();
+            IDictionary referenceVars = Environment.GetEnvironmentVariables();
+            IDictionary<string, string> referenceVars2 = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+
+            foreach (DictionaryEntry item in referenceVars)
+            {
+                referenceVars2.Add((string)item.Key!, (string)item.Value!);
+            }
+
+            Helpers.AssertCollectionsValueEqual(envVars, referenceVars2);
+        }
+
+        /// <summary>
+        /// Verify that we correctly restore environment variables.
+        /// </summary>
+        [Fact]
+        public void RestoreEnvVars()
+        {
+            string testName1 = "_MSBUILD_TEST_ENV_VAR1";
+            string testName2 = "_MSBUILD_TEST_ENV_VAR2";
+
+            // A long value exceeding the former limit of 32,767 characters.
+            string testValue = new string('a', 1_000_000);
+
+            CommunicationsUtilities.SetEnvironmentVariable(testName1, testValue);
+            try
+            {
+                IDictionary<string, string> envVars = CommunicationsUtilities.GetEnvironmentVariables();
+
+                CommunicationsUtilities.SetEnvironmentVariable(testName1, null);
+                CommunicationsUtilities.SetEnvironmentVariable(testName2, testValue);
+
+                CommunicationsUtilities.SetEnvironment(envVars);
+
+                Environment.GetEnvironmentVariable(testName1).ShouldBe(testValue);
+                Environment.GetEnvironmentVariable(testName2).ShouldBe(null);
+            }
+            finally
+            {
+                CommunicationsUtilities.SetEnvironmentVariable(testName1, null);
+                CommunicationsUtilities.SetEnvironmentVariable(testName2, null);
+            }
+        }
+    }
+}
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index 5e5c6aca707..9576c8b5c78 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -325,7 +325,6 @@ public static IEnumerable<object[]> GetTestData()
                     }
                 };
 
-#if !MONO // https://github.com/mono/mono/issues/8441
                 yield return new object[]
                 {
                     new GetFilesComplexGlobbingMatchingInfo
@@ -361,7 +360,6 @@ public static IEnumerable<object[]> GetTestData()
                         ExpectNoMatches = NativeMethodsShared.IsLinux,
                     }
                 };
-#endif
 
                 yield return new object[]
                 {
diff --git a/src/Shared/UnitTests/StreamHelpers.cs b/src/Shared/UnitTests/StreamHelpers.cs
deleted file mode 100644
index f4150ee4723..00000000000
--- a/src/Shared/UnitTests/StreamHelpers.cs
+++ /dev/null
@@ -1,33 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System.IO;
-
-#nullable disable
-
-namespace Microsoft.Build.UnitTests
-{
-    internal sealed class StreamHelpers
-    {
-        /// <summary>
-        /// Take a string and convert it to a StreamReader.
-        /// </summary>
-        /// <param name="value"></param>
-        /// <returns></returns>
-        internal static StreamReader StringToStreamReader(string value)
-        {
-            MemoryStream m = new MemoryStream();
-#if FEATURE_ENCODING_DEFAULT
-            TextWriter w = new StreamWriter(m, System.Text.Encoding.Default);
-#else
-            TextWriter w = new StreamWriter(m, System.Text.Encoding.UTF8);
-#endif
-
-            w.Write(value);
-            w.Flush();
-            m.Seek(0, SeekOrigin.Begin);
-
-            return new StreamReader(m);
-        }
-    }
-}
diff --git a/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj b/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj
index 6b8d8eb14f0..acea1b5a025 100644
--- a/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj
+++ b/src/StringTools.UnitTests/StringTools.UnitTests.net35.csproj
@@ -2,7 +2,7 @@
 
   <!-- The .NET Core version of MSBuild doesn't support targeting .NET Framework 3.5.  So in that case, we import
        a .props file that prevents building the project from doing much of anything. -->
-  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(MSBuildRuntimeType)' == 'Core' or '$(MonoBuild)' == 'true'" />
+  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(MSBuildRuntimeType)' == 'Core'" />
 
   <PropertyGroup>
     <TargetFrameworks>$(FullFrameworkTFM)</TargetFrameworks>
diff --git a/src/StringTools.UnitTests/WeakStringCache_Tests.cs b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
index 41990c59396..95c769a5fa7 100644
--- a/src/StringTools.UnitTests/WeakStringCache_Tests.cs
+++ b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
@@ -120,10 +120,6 @@ private void AddStringsWithSameHashCode(int numberOfStrings)
         /// 2. The string is no longer retrievable after all strong GC refs are gone.
         /// 3. The cache completely removes the handle after calling Scavenge on it.
         /// </summary>
-        /// <remarks>
-        /// Disabled on MacOS Mono because it doesn't play well with conservative GC scanning.
-        /// https://www.mono-project.com/docs/advanced/garbage-collector/sgen/#precise-stack-marking
-        /// </remarks>
         [Fact]
         public void RetainsStringUntilCollected()
         {
@@ -161,10 +157,6 @@ public void RetainsStringUntilCollected()
         /// <summary>
         /// Same as RetainsStringUntilCollected but with multiple strings sharing the same hash code.
         /// </summary>
-        /// <remarks>
-        /// Disabled on MacOS Mono because it doesn't play well with conservative GC scanning.
-        /// https://www.mono-project.com/docs/advanced/garbage-collector/sgen/#precise-stack-marking
-        /// </remarks>
         [Fact]
         public void RetainsLastStringWithGivenHashCode()
         {
diff --git a/src/StringTools/FowlerNollVo1aHash.cs b/src/StringTools/FowlerNollVo1aHash.cs
new file mode 100644
index 00000000000..5a9a876e4c0
--- /dev/null
+++ b/src/StringTools/FowlerNollVo1aHash.cs
@@ -0,0 +1,145 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+using System;
+
+namespace Microsoft.NET.StringTools
+{
+    /// <summary>
+    /// Fowler/Noll/Vo hashing.
+    /// </summary>
+    public static class FowlerNollVo1aHash
+    {
+        // Fowler/Noll/Vo hashing.
+        // http://www.isthe.com/chongo/tech/comp/fnv/
+        // https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash
+        // http://www.isthe.com/chongo/src/fnv/hash_32a.c
+
+        // 32 bit FNV prime and offset basis for FNV-1a.
+        private const uint fnvPrimeA32Bit = 16777619;
+        private const uint fnvOffsetBasisA32Bit = 2166136261;
+
+        // 64 bit FNV prime and offset basis for FNV-1a.
+        private const long fnvPrimeA64Bit = 1099511628211;
+        private const long fnvOffsetBasisA64Bit = unchecked((long)14695981039346656037);
+
+        /// <summary>
+        /// Computes 32 bit Fowler/Noll/Vo-1a hash of a string (regardless of encoding).
+        /// </summary>
+        /// <param name="text">String to be hashed.</param>
+        /// <returns>32 bit signed hash</returns>
+        public static int ComputeHash32(string text)
+        {
+            uint hash = fnvOffsetBasisA32Bit;
+
+            unchecked
+            {
+                for (int i = 0; i < text.Length; i++)
+                {
+                    char ch = text[i];
+                    byte b = (byte)ch;
+                    hash ^= b;
+                    hash *= fnvPrimeA32Bit;
+
+                    b = (byte)(ch >> 8);
+                    hash ^= b;
+                    hash *= fnvPrimeA32Bit;
+                }
+            }
+
+            return unchecked((int)hash);
+        }
+
+        /// <summary>
+        /// Computes 32 bit Fowler/Noll/Vo-1a inspired hash of a string.
+        /// The hashing algorithm process the data by the whole 16bit chars, instead of by bytes.
+        ///  this speeds up the hashing process almost by 2x, while not significantly increasing collisions rate.
+        /// Analysis: https://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/String-Hashing#faster-fnv-1a
+        /// </summary>
+        /// <param name="text">String to be hashed.</param>
+        /// <returns>32 bit unsigned hash</returns>
+        public static int ComputeHash32Fast(string text)
+        {
+            uint hash = fnvOffsetBasisA32Bit;
+
+            unchecked
+            {
+                for (int i = 0; i < text.Length; i++)
+                {
+                    char ch = text[i];
+
+                    hash = (hash ^ ch) * fnvPrimeA32Bit;
+                }
+            }
+
+            return unchecked((int)hash);
+        }
+
+        /// <summary>
+        /// Computes 64 bit Fowler/Noll/Vo-1a inspired hash of a string.
+        /// The hashing algorithm process the data by the whole 16bit chars, instead of by bytes.
+        ///  this speeds up the hashing process almost by 2x, while not significantly increasing collisions rate.
+        /// Analysis: https://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/String-Hashing#faster-fnv-1a
+        /// </summary>
+        /// <param name="text">String to be hashed.</param>
+        /// <returns>64 bit unsigned hash</returns>
+        public static long ComputeHash64Fast(string text)
+        {
+            long hash = fnvOffsetBasisA64Bit;
+
+            unchecked
+            {
+                for (int i = 0; i < text.Length; i++)
+                {
+                    char ch = text[i];
+
+                    hash = (hash ^ ch) * fnvPrimeA64Bit;
+                }
+            }
+
+            return hash;
+        }
+
+        /// <summary>
+        /// Computes 64 bit Fowler/Noll/Vo-1a hash of a string (regardless of encoding).
+        /// </summary>
+        /// <param name="text">String to be hashed.</param>
+        /// <returns>64 bit unsigned hash</returns>
+        public static long ComputeHash64(string text)
+        {
+            long hash = fnvOffsetBasisA64Bit;
+
+            unchecked
+            {
+                for (int i = 0; i < text.Length; i++)
+                {
+                    char ch = text[i];
+                    byte b = (byte)ch;
+                    hash ^= b;
+                    hash *= fnvPrimeA64Bit;
+
+                    b = (byte)(ch >> 8);
+                    hash ^= b;
+                    hash *= fnvPrimeA64Bit;
+                }
+            }
+
+            return hash;
+        }
+
+        /// <summary>
+        /// Combines two 64 bit hashes generated by <see cref="FowlerNollVo1aHash"/> class into one.
+        /// </summary>
+        /// <param name="left">First hash value to be combined.</param>
+        /// <param name="right">Second hash value to be combined.</param>
+        /// <returns></returns>
+        public static long Combine64(long left, long right)
+        {
+            unchecked
+            {
+                return (left ^ right) * fnvPrimeA64Bit;
+            }
+        }
+    }
+}
diff --git a/src/StringTools/SpanBasedStringBuilder.cs b/src/StringTools/SpanBasedStringBuilder.cs
index 0bea471d8be..01c9c70c18c 100644
--- a/src/StringTools/SpanBasedStringBuilder.cs
+++ b/src/StringTools/SpanBasedStringBuilder.cs
@@ -154,12 +154,12 @@ public void Dispose()
         /// Appends a string.
         /// </summary>
         /// <param name="value">The string to append.</param>
-        public void Append(string value)
+        public void Append(string? value)
         {
             if (!string.IsNullOrEmpty(value))
             {
-                _spans.Add(value.AsMemory());
-                Length += value.Length;
+                _spans.Add(value!.AsMemory());
+                Length += value!.Length;
             }
         }
 
diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index 238bd8a4ca1..2eabf9a73b7 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>
-    <TargetFrameworks Condition="'$(MSBuildRuntimeType)' != 'Core' and '$(MonoBuild)' != 'true'">$(LibraryTargetFrameworks);net35</TargetFrameworks>
+    <TargetFrameworks Condition="'$(MSBuildRuntimeType)' != 'Core'">$(LibraryTargetFrameworks);net35</TargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <IsPackable>true</IsPackable>
diff --git a/src/Tasks.UnitTests/AxImp_Tests.cs b/src/Tasks.UnitTests/AxImp_Tests.cs
index 932661cdbbd..52d433c32f9 100644
--- a/src/Tasks.UnitTests/AxImp_Tests.cs
+++ b/src/Tasks.UnitTests/AxImp_Tests.cs
@@ -70,7 +70,7 @@ public void GenerateSource()
         /// <summary>
         /// Tests the /nologo switch
         /// </summary>
-        [WindowsOnlyFact("The /nologo switch is not available on Mono.")]
+        [Fact]
         public void NoLogo()
         {
             var t = new ResolveComReference.AxImp();
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs b/src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs
new file mode 100644
index 00000000000..20542cd8ce8
--- /dev/null
+++ b/src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs
@@ -0,0 +1,133 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+using System.IO.Compression;
+using Microsoft.Build.Logging;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.Tasks.UnitTests
+{
+    internal enum FactoryType
+    {
+        CodeTaskFactory,
+        RoslynCodeTaskFactory,
+    }
+
+    internal static class CodeTaskFactoryEmbeddedFileInBinlogTestHelper
+    {
+        internal static void BuildFromSourceAndCheckForEmbeddedFileInBinlog(
+            FactoryType factoryType,
+            string taskName,
+            string sourceContent,
+            bool buildShouldSucceed)
+        {
+            using var env = TestEnvironment.Create();
+
+            TransientTestFolder folder = env.CreateFolder(createFolder: true);
+
+            var sourceClass = env.CreateFile(folder, $"{taskName}.cs", sourceContent);
+
+            string projectFileContents = $"""
+                <Project>
+
+                  <UsingTask
+                    TaskName="{taskName}"
+                    TaskFactory="{factoryType}"
+                    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
+                    <Task>
+                      <Code Type="Class" Language="cs" Source="{sourceClass.Path}">
+                      </Code>
+                    </Task>
+                  </UsingTask>
+
+                    <Target Name="SayHello">
+                        <{taskName} />
+                    </Target>
+
+                </Project>
+                """;
+
+            TransientTestFile binlog = env.ExpectFile(".binlog");
+
+            var binaryLogger = new BinaryLogger()
+            {
+                Parameters = $"LogFile={binlog.Path}",
+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
+            };
+
+            Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result, out string projectDirectoryPath);
+
+            Assert.Equal(buildShouldSucceed, result);
+
+            string projectImportsZipPath = Path.ChangeExtension(binlog.Path, ".ProjectImports.zip");
+            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
+            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
+
+            // A path like "C:\path" in ZipArchive is saved as "C\path"
+            // For unix-based systems path uses '/'
+            projectDirectoryPath = NativeMethodsShared.IsWindows ? projectDirectoryPath.Replace(":\\", "\\") : projectDirectoryPath.Replace("/", "\\");
+
+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
+            zipArchive.Entries.ShouldContain(
+                zE => zE.FullName.StartsWith(projectDirectoryPath) && zE.Name.EndsWith($"{taskName}-compilation-file.tmp"),
+                $"Binlog's embedded files didn't have the expected '{projectDirectoryPath}/{{guid}}-{taskName}-compilation-file.tmp'.");
+        }
+
+        internal static void BuildAndCheckForEmbeddedFileInBinlog(
+            FactoryType factoryType,
+            string taskName,
+            string taskXml,
+            bool buildShouldSucceed)
+        {
+            string projectFileContents = $"""
+                <Project>
+
+                  <UsingTask
+                    TaskName="{taskName}"
+                    TaskFactory="{factoryType}"
+                    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
+                    {taskXml}
+                  </UsingTask>
+
+                    <Target Name="SayHello">
+                        <{taskName} />
+                    </Target>
+
+                </Project>
+                """;
+
+            using var env = TestEnvironment.Create();
+
+            TransientTestFile binlog = env.ExpectFile(".binlog");
+
+            var binaryLogger = new BinaryLogger()
+            {
+                Parameters = $"LogFile={binlog.Path}",
+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
+            };
+
+            Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result, out string projectDirectory);
+
+            Assert.Equal(buildShouldSucceed, result);
+
+            string projectImportsZipPath = Path.ChangeExtension(binlog.Path, ".ProjectImports.zip");
+            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
+            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
+
+            // A path like "C:\path" in ZipArchive is saved as "C\path"
+            // For unix-based systems path uses '/'
+            projectDirectory = NativeMethodsShared.IsWindows ? projectDirectory.Replace(":\\", "\\") : projectDirectory.Replace("/", "\\");
+
+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
+            zipArchive.Entries.ShouldContain(
+                zE => zE.FullName.StartsWith(projectDirectory) && zE.Name.EndsWith($"{taskName}-compilation-file.tmp"),
+                $"Binlog's embedded files didn't have the expected '{projectDirectory}/{{guid}}-{taskName}-compilation-file.tmp'.");
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index f6d0b3a01ed..784e05d8bae 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -16,6 +16,7 @@ namespace Microsoft.Build.UnitTests
 #if FEATURE_CODETASKFACTORY
 
     using System.CodeDom.Compiler;
+    using Microsoft.Build.Tasks.UnitTests;
 
     public sealed class CodeTaskFactoryTests
     {
@@ -1120,6 +1121,81 @@ public void RedundantMSBuildReferences()
             MockLogger mockLogger = Helpers.BuildProjectWithNewOMExpectSuccess(projectFileContents);
             mockLogger.AssertLogContains("Hello, World!");
         }
+
+        [Fact]
+        public void EmbedsGeneratedFromSourceFileInBinlog()
+        {
+            string taskName = "HelloTask";
+
+            string sourceContent = $$"""
+                namespace InlineTask
+                {
+                    using Microsoft.Build.Utilities;
+
+                    public class {{taskName}} : Task
+                    {
+                        public override bool Execute()
+                        {
+                            Log.LogMessage("Hello, world!");
+                            return !Log.HasLoggedErrors;
+                        }
+                    }
+                }
+                """;
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
+                FactoryType.CodeTaskFactory, taskName, sourceContent, true);
+        }
+
+        [Fact]
+        public void EmbedsGeneratedFromSourceFileInBinlogWhenFailsToCompile()
+        {
+            string taskName = "HelloTask";
+
+            string sourceContent =  $$"""
+                namespace InlineTask
+                {
+                    using Microsoft.Build.Utilities;
+
+                    public class {{taskName}} : Task
+                    {
+                """;
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
+                FactoryType.CodeTaskFactory, taskName, sourceContent, false);
+        }
+
+        [Fact]
+        public void EmbedsGeneratedFileInBinlog()
+        {
+            string taskXml = @"
+                <Task>
+                    <Code Type=""Fragment"" Language=""cs"">
+                        <![CDATA[
+                              Log.LogMessage(""Hello, World!"");
+                		   ]]>
+                    </Code>
+                </Task>";
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
+                FactoryType.CodeTaskFactory, "HelloTask", taskXml, true);
+        }
+
+        [Fact]
+        public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
+        {
+            string taskXml = @"
+                <Task>
+                    <Code Type=""Fragment"" Language=""cs"">
+                        <![CDATA[
+                              Log.LogMessage(""Hello, World!
+                		   ]]>
+                    </Code>
+                </Task>";
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
+                FactoryType.CodeTaskFactory, "HelloTask", taskXml, false);
+        }
     }
 #else
     public sealed class CodeTaskFactoryTests
diff --git a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
index 22c89a4872d..30f45e8d9fc 100644
--- a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
@@ -131,7 +131,6 @@ public void TemplateParametersAreCaseInsensitive()
 
         private CommandLineGenerator CreateGenerator()
         {
-#if !MONO
             Rule rule = XamlReader.Parse(testXamlFile) as Rule;
 
             Dictionary<string, Object> switchValues = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
@@ -154,9 +153,6 @@ private CommandLineGenerator CreateGenerator()
 
             CommandLineGenerator generator = new CommandLineGenerator(rule, switchValues);
             return generator;
-#else
-            return new CommandLineGenerator(new Rule(), new Dictionary<string, object>());
-#endif
         }
 
         private sealed class TaskItem : ITaskItem
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 12e27c9f2de..38700fed179 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -191,16 +191,8 @@ public void TimeoutFailsEvenWhenExitCodeIsIgnored()
             // ToolTask does not log an error on timeout.
             mockEngine.Errors.ShouldBe(0);
 
-            if (NativeMethodsShared.IsMono)
-            {
-                const int STILL_ACTIVE = 259; // When Process.WaitForExit times out.
-                exec.ExitCode.ShouldBeOneOf(137, STILL_ACTIVE);
-            }
-            else
-            {
-                // On non-Windows the exit code of a killed process is 128 + SIGKILL = 137
-                exec.ExitCode.ShouldBe(NativeMethodsShared.IsWindows ? -1 : 137);
-            }
+            // On non-Windows the exit code of a killed process is 128 + SIGKILL = 137
+            exec.ExitCode.ShouldBe(NativeMethodsShared.IsWindows ? -1 : 137);
         }
 
         [UnixOnlyFact]
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 6b3d539cacf..2c1fca47574 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -25,6 +25,7 @@
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
     <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" />
     <ProjectReference Include="..\Samples\Dependency\Dependency.csproj" ReferenceOutputAssembly="false" Private="false" />
   </ItemGroup>
@@ -46,28 +47,12 @@
     <Compile Include="..\Shared\UnitTests\EscapingUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\ErrorUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\PrintLineDebugger_Tests.cs" />
-    <Compile Include="..\Shared\UnitTests\MockEngine.cs" />
-    <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
     <Compile Include="..\Shared\UnitTests\NativeMethodsShared_Tests.cs">
       <Link>NativeMethodsShared_Tests.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs" />
     <Compile Include="..\Shared\UnitTests\ResourceUtilities_Tests.cs" />
     <Compile Include="..\Shared\QuotingUtilities.cs" />
-    <Compile Include="..\Shared\UnitTests\EngineTestEnvironment.cs" />
-    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs">
-      <Link>TestEnvironment.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\ProcessExtensions.cs" />
-    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
-    <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
-    <Compile Include="..\UnitTests.Shared\DriveMapping.cs" />
-    <Compile Include="..\UnitTests.Shared\DummyMappedDrive.cs" />
-    <Compile Include="..\UnitTests.Shared\DummyMappedDriveUtils.cs" />
-    <Compile Include="..\Shared\UnitTests\LongPathSupportDisabledFactAttribute.cs">
-      <Link>Shared\LongPathSupportDisabledFactAttribute.cs</Link>
-    </Compile>
-    <Compile Include="..\UnitTests.Shared\RequiresSymbolicLinksFactAttribute.cs" />
 
     <EmbeddedResource Include="SampleResx" />
     <EmbeddedResource Include="AssemblyDependency\CacheFileSamples\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache" />
@@ -106,11 +91,6 @@
     <Compile Remove="XamlTestHelpers.cs" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(MonoBuild)' == 'true'">
-    <Compile Remove="LC_Tests.cs" />
-    <Compile Remove="SGen_Tests.cs" />
-  </ItemGroup>
-
   <ItemGroup Condition="$(TargetFrameworkIdentifier) != '.NETFramework'">
     <Compile Remove="Al_Tests.cs" />
     <Compile Remove="AppConfig_Tests.cs" />
diff --git a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
index a430f5c2993..30eae83deae 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
@@ -5,6 +5,7 @@
 using System.IO;
 using System.Linq;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 
@@ -68,6 +69,57 @@ public void DoesNotImportProjectIfNotExist()
             project.GetPropertyValue(PropertyNameToSignalImportSucceeded).ShouldBeEmpty();
         }
 
+        [Fact]
+        public void DoesNotImportProjectIfRestoring()
+        {
+            ObjectModelHelpers.CreateFileInTempProjectDirectory(ImportProjectPath, BasicProjectImportContents);
+
+            Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
+                    <PropertyGroup>
+                        <{MSBuildConstants.MSBuildIsRestoring}>true</{MSBuildConstants.MSBuildIsRestoring}>
+                    </PropertyGroup>
+
+                    <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
+
+                    <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
+                </Project>
+            "));
+
+            string projectExtensionsPath = project.GetPropertyValue("MSBuildProjectExtensionsPath");
+
+            projectExtensionsPath.ShouldNotBeNullOrWhiteSpace();
+            Directory.Exists(projectExtensionsPath).ShouldBeTrue();
+            project.GetPropertyValue(PropertyNameToEnableImport).ShouldBe(bool.FalseString, StringCompareShould.IgnoreCase);
+            project.GetPropertyValue(PropertyNameToSignalImportSucceeded).ShouldBeEmpty();
+        }
+
+        [Fact]
+        public void ImportsProjectIfRestoringAndExplicitlySet()
+        {
+            ObjectModelHelpers.CreateFileInTempProjectDirectory(ImportProjectPath, BasicProjectImportContents);
+
+            Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
+                    <PropertyGroup>
+                        <{PropertyNameToEnableImport}>true</{PropertyNameToEnableImport}>
+                        <{MSBuildConstants.MSBuildIsRestoring}>true</{MSBuildConstants.MSBuildIsRestoring}>
+                    </PropertyGroup>
+
+                    <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
+
+                    <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
+                </Project>
+            "));
+
+            string projectExtensionsPath = project.GetPropertyValue("MSBuildProjectExtensionsPath");
+
+            projectExtensionsPath.ShouldNotBeNullOrWhiteSpace();
+            Directory.Exists(projectExtensionsPath).ShouldBeTrue();
+            project.GetPropertyValue(PropertyNameToEnableImport).ShouldBe(bool.TrueString, StringCompareShould.IgnoreCase);
+            project.GetPropertyValue(PropertyNameToSignalImportSucceeded).ShouldBe(bool.TrueString, StringCompareShould.IgnoreCase);
+        }
+
         /// <summary>
         /// Ensures that even if the MSBuildProjectExtensionsPath exists, the extensions are not imported if the functionality is disabled via the <see cref="PropertyNameToEnableImport"/>.
         /// </summary>
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index 4172d013c78..472d732a973 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -2567,8 +2567,6 @@ public References(ITestOutputHelper output)
         }
 
         [Fact]
-        // FIXME: mono: looks for csc.exe
-        // https://github.com/dotnet/msbuild/issues/677
         public void DontLockP2PReferenceWhenResolvingSystemTypes()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -2744,8 +2742,6 @@ public class Class1
         /// absolute path).  The fix was to use Assembly.LoadFrom instead.
         /// </summary>
         [Fact]
-        // FIXME: mono: looks for csc.exe
-        // https://github.com/dotnet/msbuild/issues/677
         public void ReferencedAssemblySpecifiedUsingRelativePath()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index 967dfe65a42..0a142052398 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -644,6 +644,81 @@ public override bool Execute()
             }
         }
 
+        [Fact]
+        public void EmbedsGeneratedFromSourceFileInBinlog()
+        {
+            string taskName = "HelloTask";
+
+            string sourceContent = $$"""
+                namespace InlineTask
+                {
+                    using Microsoft.Build.Utilities;
+
+                    public class {{taskName}} : Task
+                    {
+                        public override bool Execute()
+                        {
+                            Log.LogMessage("Hello, world!");
+                            return !Log.HasLoggedErrors;
+                        }
+                    }
+                }
+                """;
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
+                FactoryType.RoslynCodeTaskFactory, taskName, sourceContent, true);
+        }
+
+        [Fact]
+        public void EmbedsGeneratedFromSourceFileInBinlogWhenFailsToCompile()
+        {
+            string taskName = "HelloTask";
+
+            string sourceContent =  $$"""
+                namespace InlineTask
+                {
+                    using Microsoft.Build.Utilities;
+
+                    public class {{taskName}} : Task
+                    {
+                """;
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
+                FactoryType.RoslynCodeTaskFactory, taskName, sourceContent, false);
+        }
+
+        [Fact]
+        public void EmbedsGeneratedFileInBinlog()
+        {
+            string taskXml = @"
+                <Task>
+                    <Code Type=""Fragment"" Language=""cs"">
+                        <![CDATA[
+                              Log.LogMessage(""Hello, World!"");
+                		   ]]>
+                    </Code>
+                </Task>";
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
+                FactoryType.RoslynCodeTaskFactory, "HelloTask", taskXml, true);
+        }
+
+        [Fact]
+        public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
+        {
+            string taskXml = @"
+                <Task>
+                    <Code Type=""Fragment"" Language=""cs"">
+                        <![CDATA[
+                              Log.LogMessage(""Hello, World!
+                		   ]]>
+                    </Code>
+                </Task>";
+
+            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
+                FactoryType.RoslynCodeTaskFactory, "HelloTask", taskXml, false);
+        }
+
 #if !FEATURE_RUN_EXE_IN_TESTS
         [Fact]
         public void RoslynCodeTaskFactory_UsingAPI()
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index 0f862db51ee..b53c19047be 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -197,7 +197,7 @@ public void LogsErrorIfReadOnlyFileCannotBeOverwitten()
 
                 unzip.Execute().ShouldBeFalse(_mockEngine.Log);
 
-                _mockEngine.Log.ShouldContain($"D6DFD219DACE48F8B86EFCDF98433333.txt{(NativeMethodsShared.IsMono ? "\"" : "'")} is denied", customMessage: _mockEngine.Log);
+                _mockEngine.Log.ShouldContain("D6DFD219DACE48F8B86EFCDF98433333.txt' is denied", customMessage: _mockEngine.Log);
             }
         }
 
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index e4ce0c64991..1c8dffcff37 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -137,6 +137,30 @@ public void FileWithPathAndDirectoryDoesNotExist()
             Assert.True(File.Exists(task.OutputFile.ItemSpec));
         }
 
+        /// <summary>
+        /// File name is set but no OutputDirectory
+        /// </summary>
+        [Fact]
+        public void FileNameNoDirectory()
+        {
+            using TestEnvironment env = TestEnvironment.Create();
+            var file = env.ExpectFile(Directory.GetCurrentDirectory(), ".tmp");
+            WriteCodeFragment task = new WriteCodeFragment();
+            MockEngine engine = new MockEngine(true);
+            task.BuildEngine = engine;
+            task.Language = "c#";
+            task.AssemblyAttributes = new TaskItem[] { new TaskItem("aa") };
+
+            string fileName = Path.GetFileName(file.Path);
+            task.OutputFile = new TaskItem(fileName);
+            bool result = task.Execute();
+
+            Assert.True(result);
+
+            Assert.Equal(fileName, task.OutputFile.ItemSpec);
+            Assert.True(File.Exists(file.Path));
+        }
+
         /// <summary>
         /// Ignore directory if file is rooted
         /// </summary>
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index e449c1e8dea..3c218f2ebe7 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -20,7 +20,6 @@
 
 namespace Microsoft.Build.UnitTests
 {
-#if !MONO
     /// <summary>
     /// These tests run. The temporary output folder for this test is Path.Combine(Path.GetTempPath(), DateTime.Now.Ticks.ToString())
     /// 1. When combination of (xml, xmlfile) x (xsl, xslfile).
@@ -1259,5 +1258,4 @@ private void CompileDoubleType(string outputFile)
 #endif
         #endregion
     }
-#endif
 }
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 91785df5c86..1c5480263e2 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -18,7 +18,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using static Microsoft.Build.Shared.FileSystem.WindowsNative;
-#if FEATURE_ASSEMBLYLOADCONTEXT || MONO
+#if FEATURE_ASSEMBLYLOADCONTEXT
 using System.Reflection.PortableExecutable;
 using System.Reflection.Metadata;
 #endif
@@ -45,11 +45,11 @@ internal class AssemblyInformation : DisposableBase
         private readonly string _sourceFile;
         private FrameworkName _frameworkName;
 
-#if FEATURE_ASSEMBLYLOADCONTEXT || MONO
+#if FEATURE_ASSEMBLYLOADCONTEXT
         private bool _metadataRead;
 #endif
 
-#if !FEATURE_ASSEMBLYLOADCONTEXT && !MONO
+#if !FEATURE_ASSEMBLYLOADCONTEXT
         private static string s_targetFrameworkAttribute = "System.Runtime.Versioning.TargetFrameworkAttribute";
 #endif
 #if !FEATURE_ASSEMBLYLOADCONTEXT
@@ -380,20 +380,9 @@ private string GetStringCustomAttribute(IMetaDataImport2 import2, uint assemblyS
         /// </summary>
         private FrameworkName GetFrameworkName()
         {
-            // Disabling use of System.Reflection in case of MONO, because
-            // Assembly.GetCustomAttributes* for an attribute which belongs
-            // to an assembly that mono cannot find, causes a crash!
-            // Instead, opt for using PEReader and friends to get that info
-#if !FEATURE_ASSEMBLYLOADCONTEXT && !MONO
+#if !FEATURE_ASSEMBLYLOADCONTEXT
             if (!NativeMethodsShared.IsWindows)
             {
-                if (String.Equals(Environment.GetEnvironmentVariable("MONO29679"), "1", StringComparison.OrdinalIgnoreCase))
-                {
-                    // Getting custom attributes in CoreFx contract assemblies is busted
-                    // https://bugzilla.xamarin.com/show_bug.cgi?id=29679
-                    return null;
-                }
-
                 CustomAttributeData attr = null;
 
                 foreach (CustomAttributeData a in _assembly.GetCustomAttributesData())
@@ -442,7 +431,7 @@ private FrameworkName GetFrameworkName()
 #endif
         }
 
-#if FEATURE_ASSEMBLYLOADCONTEXT || MONO
+#if FEATURE_ASSEMBLYLOADCONTEXT
         /// <summary>
         /// Read everything from the assembly in a single stream.
         /// </summary>
@@ -579,9 +568,7 @@ private static AssemblyName GetAssemblyName(MetadataReader metadataReader, Assem
         }
 #endif
 
-        // Enabling this for MONO, because it's required by GetFrameworkName.
-        // More details are in the comment for that method
-#if FEATURE_ASSEMBLYLOADCONTEXT || MONO
+#if FEATURE_ASSEMBLYLOADCONTEXT
         // This method copied from DNX source: https://github.com/aspnet/dnx/blob/e0726f769aead073af2d8cd9db47b89e1745d574/src/Microsoft.Dnx.Tooling/Utils/LockFileUtils.cs#L385
         //  System.Reflection.Metadata 1.1 is expected to have an API that helps with this.
         /// <summary>
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 01de06c0c7b..f8cc28a2fa4 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -962,7 +962,7 @@ private void FindSatellites(
                 }
 
                 string[] subDirectories = _getDirectories(reference.DirectoryName, "*");
-                string sateliteFilename = subDirectories.Length > 0
+                string satelliteFilename = subDirectories.Length > 0
                     ? reference.FileNameWithoutExtension + ".resources.dll"
                     : string.Empty;
 
@@ -973,11 +973,11 @@ private void FindSatellites(
 
                     if (CultureInfoCache.IsValidCultureString(cultureName))
                     {
-                        string satelliteAssembly = Path.Combine(subDirectory, sateliteFilename);
+                        string satelliteAssembly = Path.Combine(subDirectory, satelliteFilename);
                         if (_fileExists(satelliteAssembly))
                         {
                             // This is valid satellite assembly.
-                            reference.AddSatelliteFile(Path.Combine(cultureName, sateliteFilename));
+                            reference.AddSatelliteFile(Path.Combine(cultureName, satelliteFilename));
                         }
                     }
                 }
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 9f4aead3f71..75ea877da61 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -15,6 +15,7 @@
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.AssemblyDependency;
 using Microsoft.Build.Utilities;
 
@@ -3208,7 +3209,7 @@ public override bool Execute()
             return Execute(
                 p => FileUtilities.FileExistsNoThrow(p),
                 p => FileUtilities.DirectoryExistsNoThrow(p),
-                (p, searchPattern) => Directory.GetDirectories(p, searchPattern),
+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern).ToArray(),
                 p => AssemblyNameExtension.GetAssemblyNameEx(p),
                 (string path, ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache, out AssemblyNameExtension[] dependencies, out string[] scatterFiles, out FrameworkNameVersioning frameworkName)
                     => AssemblyInformation.GetAssemblyMetadata(path, assemblyMetadataCache, out dependencies, out scatterFiles, out frameworkName),
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index 4c076939d98..f863c969cbf 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -658,23 +658,6 @@ static string GetPathFromPartialAssemblyName(string partialName)
                 {
                     candidateAssemblyLocation = candidateAssembly.Location;
                 }
-                else if (NativeMethodsShared.IsMono)
-                {
-                    string path = Path.Combine(
-                        NativeMethodsShared.FrameworkCurrentPath,
-                        "Facades",
-                        Path.GetFileName(partialName));
-                    if (!FileSystems.Default.FileExists(path))
-                    {
-                        var newPath = path + ".dll";
-                        path = !FileSystems.Default.FileExists(newPath) ? path + ".exe" : newPath;
-                    }
-                    candidateAssembly = Assembly.UnsafeLoadFrom(path);
-                    if (candidateAssembly != null)
-                    {
-                        candidateAssemblyLocation = candidateAssembly.Location;
-                    }
-                }
 #pragma warning restore 618, 612
                 return candidateAssemblyLocation;
             }
@@ -808,6 +791,10 @@ private Assembly CompileInMemoryAssembly()
                 // Our code generation is complete, grab the source from the builder ready for compilation
                 string fullCode = codeBuilder.ToString();
 
+                // Embed generated file in the binlog
+                string fileNameInBinlog = $"{Guid.NewGuid()}-{_nameOfTask}-compilation-file.tmp";
+                _log.LogIncludeGeneratedFile(fileNameInBinlog, fullCode);
+
                 var fullSpec = new FullTaskSpecification(finalReferencedAssemblies, fullCode);
                 if (!s_compiledTaskCache.TryGetValue(fullSpec, out Assembly existingAssembly))
                 {
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index 46c8bd99c20..bb259445d96 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -61,8 +61,8 @@ public override bool Execute()
             }
 
             // Expand wild cards.
-            (Include, bool expandedInclude) = TryExpandingWildcards(Include, XMakeAttributes.include);
-            (Exclude, bool expandedExclude) = TryExpandingWildcards(Exclude, XMakeAttributes.exclude);
+            (Include, bool expandedInclude) = TryExpandWildcards(Include, XMakeAttributes.include);
+            (Exclude, bool expandedExclude) = TryExpandWildcards(Exclude, XMakeAttributes.exclude);
 
             // Execution stops if wildcard expansion fails due to drive enumeration and related env var is set.
             if (!(expandedInclude && expandedExclude))
@@ -133,45 +133,11 @@ private List<ITaskItem> CreateOutputItems(Dictionary<string, string> metadataTab
             return outputItems;
         }
 
-        /// <summary>
-        /// Attempts to expand wildcards and logs warnings or errors for attempted drive enumeration.
-        /// </summary>
-        private (ITaskItem[] Element, bool NoLoggedErrors) TryExpandingWildcards(ITaskItem[] expand, string attributeType)
-        {
-            const string CreateItemTask = nameof(CreateItem);
-
-            string fileSpec;
-            FileMatcher.SearchAction searchAction;
-
-            (expand, searchAction, fileSpec) = ExpandWildcards(expand);
-
-            // Log potential drive enumeration glob anomalies when applicable.
-            if (searchAction == FileMatcher.SearchAction.LogDriveEnumeratingWildcard)
-            {
-                Log.LogWarningWithCodeFromResources(
-                    "WildcardResultsInDriveEnumeration",
-                    EscapingUtilities.UnescapeAll(fileSpec),
-                    attributeType,
-                    CreateItemTask,
-                    BuildEngine.ProjectFileOfTaskNode);
-            }
-            else if (searchAction == FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard)
-            {
-                Log.LogErrorWithCodeFromResources(
-                    "WildcardResultsInDriveEnumeration",
-                    EscapingUtilities.UnescapeAll(fileSpec),
-                    attributeType,
-                    CreateItemTask,
-                    BuildEngine.ProjectFileOfTaskNode);
-            }
-
-            return (expand, !Log.HasLoggedErrors);
-        }
 
         /// <summary>
         /// Expand wildcards in the item list.
         /// </summary>
-        private static (ITaskItem[] Element, FileMatcher.SearchAction Action, string FileSpec) ExpandWildcards(ITaskItem[] expand)
+        private (ITaskItem[] Element, bool NoLoggedErrors) TryExpandWildcards(ITaskItem[] expand, string attributeType)
         {
             // Used to detect and log drive enumerating wildcard patterns.
             string[] files;
@@ -180,7 +146,7 @@ private static (ITaskItem[] Element, FileMatcher.SearchAction Action, string Fil
 
             if (expand == null)
             {
-                return (null, action, itemSpec);
+                return (null, true);
             }
             else
             {
@@ -189,28 +155,47 @@ private static (ITaskItem[] Element, FileMatcher.SearchAction Action, string Fil
                 {
                     if (FileMatcher.HasWildcards(i.ItemSpec))
                     {
-                        (files, action, _) = FileMatcher.Default.GetFiles(null /* use current directory */, i.ItemSpec);
-                        itemSpec = i.ItemSpec;
-                        if (action == FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard)
+                        FileMatcher.Default.GetFileSpecInfo(i.ItemSpec, out string directoryPart, out string wildcardPart, out string filenamePart, out bool needsRecursion, out bool isLegalFileSpec);
+                        bool logDriveEnumeratingWildcard = FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart);
+                        if (logDriveEnumeratingWildcard)
                         {
-                            return (expanded.ToArray(), action, itemSpec);
+                            Log.LogWarningWithCodeFromResources(
+                                "WildcardResultsInDriveEnumeration",
+                                EscapingUtilities.UnescapeAll(i.ItemSpec),
+                                attributeType,
+                                nameof(CreateItem),
+                                BuildEngine.ProjectFileOfTaskNode);
                         }
 
-                        foreach (string file in files)
+                        if (logDriveEnumeratingWildcard && Traits.Instance.ThrowOnDriveEnumeratingWildcard)
+                        {
+                            Log.LogErrorWithCodeFromResources(
+                                "WildcardResultsInDriveEnumeration",
+                                EscapingUtilities.UnescapeAll(i.ItemSpec),
+                                attributeType,
+                                nameof(CreateItem),
+                                BuildEngine.ProjectFileOfTaskNode);
+                        }
+                        else if (isLegalFileSpec)
                         {
-                            TaskItem newItem = new TaskItem(i) { ItemSpec = file };
+                            (files, action, _) = FileMatcher.Default.GetFiles(null /* use current directory */, i.ItemSpec);
 
-                            // Compute the RecursiveDir portion.
-                            FileMatcher.Result match = FileMatcher.Default.FileMatch(i.ItemSpec, file);
-                            if (match.isLegalFileSpec && match.isMatch)
+                            foreach (string file in files)
                             {
-                                if (!string.IsNullOrEmpty(match.wildcardDirectoryPart))
+                                TaskItem newItem = new TaskItem(i) { ItemSpec = file };
+
+                                // Compute the RecursiveDir portion.
+                                FileMatcher.Result match = FileMatcher.Default.FileMatch(i.ItemSpec, file);
+                                if (match.isLegalFileSpec && match.isMatch)
                                 {
-                                    newItem.SetMetadata(FileUtilities.ItemSpecModifiers.RecursiveDir, match.wildcardDirectoryPart);
+                                    if (!string.IsNullOrEmpty(match.wildcardDirectoryPart))
+                                    {
+                                        newItem.SetMetadata(FileUtilities.ItemSpecModifiers.RecursiveDir, match.wildcardDirectoryPart);
+                                    }
                                 }
-                            }
 
-                            expanded.Add(newItem);
+                                expanded.Add(newItem);
+                            }
                         }
                     }
                     else
@@ -218,7 +203,7 @@ private static (ITaskItem[] Element, FileMatcher.SearchAction Action, string Fil
                         expanded.Add(i);
                     }
                 }
-                return (expanded.ToArray(), action, itemSpec);
+                return (expanded.ToArray(), !Log.HasLoggedErrors);
             }
         }
 
diff --git a/src/Tasks/Delegate.cs b/src/Tasks/Delegate.cs
index b315d29426b..48711172264 100644
--- a/src/Tasks/Delegate.cs
+++ b/src/Tasks/Delegate.cs
@@ -14,13 +14,13 @@
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
-    /// File.GetAttributes delegate
+    /// File.GetAttributes delegate.
     /// </summary>
     /// <param name="path">The path get attributes for.</param>
     internal delegate FileAttributes GetAttributes(string path);
 
     /// <summary>
-    /// File SetAttributes delegate
+    /// File SetAttributes delegate.
     /// </summary>
     /// <param name="path">The path to set attributes for.</param>
     /// <param name="attributes">The actual file attributes.</param>
@@ -37,7 +37,7 @@ namespace Microsoft.Build.Tasks
     internal delegate void SetLastWriteTime(string path, DateTime timestamp);
 
     /// <summary>
-    /// GetDirectories delegate
+    /// GetDirectories delegate.
     /// </summary>
     /// <param name="path">The path to get directories for.</param>
     /// <param name="pattern">The pattern to search for.</param>
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 64dcc470f86..f241972e4c3 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -250,29 +250,6 @@ private void CreateTemporaryBatchFile()
                     sw.WriteLine("#!/bin/sh");
                 }
 
-                if (NativeMethodsShared.IsUnixLike && NativeMethodsShared.IsMono)
-                {
-                    // Extract the command we are going to run. Note that the command name may
-                    // be preceded by whitespace
-                    var m = Regex.Match(Command, @"^\s*((?:(?:(?<!\\)[^\0 !$`&*()+])|(?:(?<=\\)[^\0]))+)(.*)");
-                    if (m.Success && m.Groups.Count > 1 && m.Groups[1].Captures.Count > 0)
-                    {
-                        string exe = m.Groups[1].Captures[0].ToString();
-                        string commandLine = (m.Groups.Count > 2 && m.Groups[2].Captures.Count > 0) ?
-                            m.Groups[2].Captures[0].Value : "";
-
-
-                        // If we are trying to run a .exe file, prepend mono as the file may
-                        // not be runnable
-                        if (exe.EndsWith(".exe", StringComparison.OrdinalIgnoreCase)
-                            || exe.EndsWith(".exe\"", StringComparison.OrdinalIgnoreCase)
-                            || exe.EndsWith(".exe'", StringComparison.OrdinalIgnoreCase))
-                        {
-                            Command = "mono " + FileUtilities.FixFilePath(exe) + commandLine;
-                        }
-                    }
-                }
-
                 sw.WriteLine(Command);
 
                 if (!NativeMethodsShared.IsUnixLike)
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index d292aa55468..3012b0ef44e 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -226,12 +226,12 @@
     <Compile Include="FileIO\ReadLinesFromFile.cs" />
     <Compile Include="FileIO\WriteLinesToFile.cs" />
     <Compile Include="FindInList.cs" />
-    <Compile Include="FormatUrl.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="FormatUrl.cs" />
     <Compile Include="FormatVersion.cs" />
-    <Compile Include="GenerateApplicationManifest.cs" Condition="'$(MonoBuild)' != 'true'" />
-    <Compile Include="GenerateDeploymentManifest.cs" Condition="'$(MonoBuild)' != 'true'" />
-    <Compile Include="GenerateLauncher.cs" Condition="'$(MonoBuild)' != 'true'" />
-    <Compile Include="GenerateManifestBase.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="GenerateApplicationManifest.cs" />
+    <Compile Include="GenerateDeploymentManifest.cs" />
+    <Compile Include="GenerateLauncher.cs" />
+    <Compile Include="GenerateManifestBase.cs" />
     <Compile Include="GenerateResource.cs" />
     <Compile Include="GetAssemblyIdentity.cs" />
     <Compile Include="GetInstalledSDKLocations.cs" />
@@ -248,12 +248,12 @@
     <Compile Include="IVbcHostObject5.cs" />
     <Compile Include="IVbcHostObjectFreeThreaded.cs" />
     <Compile Include="InvalidParameterValueException.cs" />
-    <Compile Include="LC.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="LC.cs" />
     <Compile Include="ListOperators\FindUnderPath.cs" />
     <Compile Include="ListOperators\RemoveDuplicates.cs" />
     <Compile Include="LockCheck.cs" />
     <Compile Include="MakeDir.cs" />
-    <Compile Include="ManifestUtil\*.cs" Exclude="ManifestUtil\CngLightup.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="ManifestUtil\*.cs" Exclude="ManifestUtil\CngLightup.cs" />
     <Compile Include="Message.cs" />
     <Compile Include="Move.cs" />
     <Compile Include="MSBuild.cs" />
@@ -264,7 +264,7 @@
     <Compile Include="ResGenDependencies.cs" />
     <Compile Include="ResolveCodeAnalysisRuleSet.cs" />
     <Compile Include="ResolveKeySource.cs" />
-    <Compile Include="ResolveManifestFiles.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="ResolveManifestFiles.cs" />
     <Compile Include="ResolveNonMSBuildProjectOutput.cs" />
     <Compile Include="ResolveProjectBase.cs" />
     <Compile Include="ResolveSDKReference.cs" />
@@ -274,8 +274,8 @@
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCompilers.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryTaskInfo.cs" />
     <Compile Include="SdkToolsPathUtility.cs" />
-    <Compile Include="SGen.cs" Condition="'$(MonoBuild)' != 'true'" />
-    <Compile Include="SignFile.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="SGen.cs" />
+    <Compile Include="SignFile.cs" />
     <Compile Include="System.Design.cs" />
     <Compile Include="system.design\stronglytypedresourcebuilder.cs" />
     <Compile Include="TaskExtension.cs" />
@@ -306,13 +306,13 @@
     <Compile Include="Al.cs" />
     <Compile Include="AspNetCompiler.cs" />
     <Compile Include="GenerateBootstrapper.cs" />
-    <Compile Include="GenerateTrustInfo.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="GenerateTrustInfo.cs" />
     <Compile Include="GetFrameworkSDKPath.cs" />
     <Compile Include="RegisterAssembly.cs" />
     <Compile Include="ResolveComReference.cs" />
-    <Compile Include="ResolveNativeReference.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="ResolveNativeReference.cs" />
     <Compile Include="UnregisterAssembly.cs" />
-    <Compile Include="UpdateManifest.cs" Condition="'$(MonoBuild)' != 'true'" />
+    <Compile Include="UpdateManifest.cs" />
     <Compile Include="WinMDExp.cs" />
   </ItemGroup>
   <ItemGroup Condition="$(TargetFrameworkIdentifier) == '.NETFramework'">
@@ -677,7 +677,7 @@
   <!-- Tasks need to mimic redistributing the compilers, so add references to both full framework and .net core -->
   <ItemGroup>
     <!-- Reference this package to get binaries at runtime even when Arcade is not adding compiler references -->
-    <PackageReference Include="Microsoft.Net.Compilers.Toolset" ExcludeAssets="all" Condition="'$(UsingToolMicrosoftNetCompilers)' == 'false'" />
+    <PackageDownload Include="Microsoft.Net.Compilers.Toolset" Version="[$(MicrosoftNetCompilersToolsetVersion)]" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETCoreApp'">
@@ -704,9 +704,6 @@
     <Content Include="$(NuGetPackageRoot)microsoft.net.compilers.toolset\$(MicrosoftNetCompilersToolsetVersion)\tasks\netcore\**\*" CopyToOutputDirectory="PreserveNewest" LinkBase="Roslyn" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(MonoBuild)' == 'true'">
-    <PackageReference Include="System.Reflection.Metadata" />
-  </ItemGroup>
   <ItemGroup>
     <!--
       Content items in this project are used to copy files to the output directory but we don't
diff --git a/src/Tasks/Microsoft.Common.CrossTargeting.targets b/src/Tasks/Microsoft.Common.CrossTargeting.targets
index 8d079e3f057..9850e8cc161 100644
--- a/src/Tasks/Microsoft.Common.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.Common.CrossTargeting.targets
@@ -227,6 +227,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     build.
   -->
   <PropertyGroup>
+    <!--
+        Don't import project extensions during restore because NuGet restore generates them.  Importing them during restore will embed
+        the pre-restore files in the binary log and then NuGet won't be able to embed the generated one after restore.  If some other
+        project extension mechanism wants to import project extensions during restore, they need to explicitly set ImportProjectExtensionTargets
+    -->
+    <ImportProjectExtensionTargets Condition="$([MSBuild]::AreFeaturesEnabled('17.10')) And '$(ImportProjectExtensionTargets)' == '' And '$(MSBuildIsRestoring)' == 'true'">false</ImportProjectExtensionTargets>
+    
     <ImportProjectExtensionTargets Condition="'$(ImportProjectExtensionTargets)' == ''">true</ImportProjectExtensionTargets>
   </PropertyGroup>
 
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 4d9ba1fe103..1c931d712d0 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -544,7 +544,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <ProcessorArchitecture Condition="'$(ProcessorArchitecture)'==''">$(PROCESSOR_ARCHITECTURE)</ProcessorArchitecture>
   </PropertyGroup>
 
-  <!-- Sensible defaults for the most-commonly-desired MSBuildRuntime and MSBuildArchitecture values. The Core and Mono runtimes do not currently support specifying task architecture or runtime.
+  <!-- Sensible defaults for the most-commonly-desired MSBuildRuntime and MSBuildArchitecture values. The Core runtime does not currently support specifying task architecture or runtime.
        If support for out-of-proc task execution is added on other runtimes, make sure each task's logic is checked against the current state of support. -->
   <PropertyGroup Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Full'">
     <TargetFrameworkAsMSBuildRuntime Condition="'$(TargetFrameworkVersion)' == 'v2.0' or '$(TargetFrameworkVersion)' == 'v3.0' or '$(TargetFrameworkVersion)' == 'v3.5'">CLR2</TargetFrameworkAsMSBuildRuntime>
@@ -1729,7 +1729,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <SetPlatform>Platform=%(ProjectsWithNearestPlatform.NearestPlatform)</SetPlatform>
       </ProjectsWithNearestPlatform>
 
-      <!-- When GetCompatiblePlatform fails to assign NearestPlatform, undefine Platform and let that project build "on its own" -->
+      <!-- When GetCompatiblePlatform fails to assign NearestPlatform (or determines it's identical to default for the referenced project), undefine Platform and let that project build "on its own" -->
       <ProjectsWithNearestPlatform Condition="'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' == ''">
         <UndefineProperties>%(ProjectsWithNearestPlatform.UndefineProperties);Platform</UndefineProperties>
       </ProjectsWithNearestPlatform>
@@ -3800,6 +3800,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <CoreCompileCache Include="@(ReferencePath)" />
       <CoreCompileCache Include="$(DefineConstants)" />
       <CoreCompileCache Include="$(LangVersion)" />
+      <CoreCompileCache Include="$(Deterministic)" />
+      <CoreCompileCache Include="$(PathMap)" />
     </ItemGroup>
 
     <Hash
diff --git a/src/Tasks/Microsoft.Common.props b/src/Tasks/Microsoft.Common.props
index e3771628bdd..e322c4a2f1e 100644
--- a/src/Tasks/Microsoft.Common.props
+++ b/src/Tasks/Microsoft.Common.props
@@ -59,6 +59,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
     <MSBuildProjectExtensionsPath Condition="'$([System.IO.Path]::IsPathRooted($(MSBuildProjectExtensionsPath)))' == 'false'">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(MSBuildProjectExtensionsPath)'))</MSBuildProjectExtensionsPath>
     <MSBuildProjectExtensionsPath Condition="!HasTrailingSlash('$(MSBuildProjectExtensionsPath)')">$(MSBuildProjectExtensionsPath)\</MSBuildProjectExtensionsPath>
+
+    <!--
+        Don't import project extensions during restore because NuGet restore generates them.  Importing them during restore will embed
+        the pre-restore files in the binary log and then NuGet won't be able to embed the generated one after restore.  If some other
+        project extension mechanism wants to import project extensions during restore, they need to explicitly set ImportProjectExtensionProps
+    -->
+    <ImportProjectExtensionProps Condition="$([MSBuild]::AreFeaturesEnabled('17.10')) And '$(ImportProjectExtensionProps)' == '' And '$(MSBuildIsRestoring)' == 'true'">false</ImportProjectExtensionProps>
+    
     <ImportProjectExtensionProps Condition="'$(ImportProjectExtensionProps)' == ''">true</ImportProjectExtensionProps>
     <_InitialMSBuildProjectExtensionsPath Condition=" '$(ImportProjectExtensionProps)' == 'true' ">$(MSBuildProjectExtensionsPath)</_InitialMSBuildProjectExtensionsPath>
   </PropertyGroup>
@@ -134,4 +142,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <DisableLogTaskParameterItemMetadata_WriteLinesToFile_Lines>true</DisableLogTaskParameterItemMetadata_WriteLinesToFile_Lines>
   </PropertyGroup>
 
-</Project>
\ No newline at end of file
+</Project>
diff --git a/src/Tasks/Microsoft.Common.targets b/src/Tasks/Microsoft.Common.targets
index 4e71065ca26..b61819797bf 100644
--- a/src/Tasks/Microsoft.Common.targets
+++ b/src/Tasks/Microsoft.Common.targets
@@ -29,6 +29,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
   -->
   <PropertyGroup>
+    <!--
+        Don't import project extensions during restore because NuGet restore generates them.  Importing them during restore will embed
+        the pre-restore files in the binary log and then NuGet won't be able to embed the generated one after restore.  If some other
+        project extension mechanism wants to import project extensions during restore, they need to explicitly set ImportProjectExtensionTargets
+    -->
+    <ImportProjectExtensionTargets Condition="$([MSBuild]::AreFeaturesEnabled('17.10')) And '$(ImportProjectExtensionTargets)' == '' And '$(MSBuildIsRestoring)' == 'true'">false</ImportProjectExtensionTargets>
+    
     <ImportProjectExtensionTargets Condition="'$(ImportProjectExtensionTargets)' == ''">true</ImportProjectExtensionTargets>
   </PropertyGroup>
 
@@ -54,4 +61,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(CustomAfterDirectoryBuildTargets)" Condition="'$(CustomAfterDirectoryBuildTargets)' != ''" />
 
-</Project>
\ No newline at end of file
+</Project>
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 374fa50852d..7989a98917a 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -80,12 +80,6 @@ public sealed class RoslynCodeTaskFactory : ITaskFactory
         /// </summary>
         private const string ReferenceAssemblyDirectoryName = "ref";
 
-
-        /// <summary>
-        /// Array of mono lib directories used to resolve references
-        /// </summary>
-        private static readonly string[] MonoLibDirs = GetMonoLibDirs();
-
         /// <summary>
         /// A cache of <see cref="RoslynCodeTaskFactoryTaskInfo"/> objects and their corresponding compiled assembly.  This cache ensures that two of the exact same code task
         /// declarations are not compiled multiple times.
@@ -573,7 +567,6 @@ internal bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynCodeTask
                     Path.Combine(ThisAssemblyDirectoryLazy.Value, ReferenceAssemblyDirectoryName),
                     ThisAssemblyDirectoryLazy.Value,
                 }
-                .Concat(MonoLibDirs)
                 .FirstOrDefault(p => File.Exists(Path.Combine(p, assemblyFileName)));
 
                 if (resolvedDir != null)
@@ -692,6 +685,10 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
             try
             {
+                // Embed generated file in the binlog
+                string fileNameInBinlog = $"{Guid.NewGuid()}-{_taskName}-compilation-file.tmp";
+                _log.LogIncludeGeneratedFile(fileNameInBinlog, taskInfo.SourceCode);
+
                 // Create the code
                 File.WriteAllText(sourceCodePath, taskInfo.SourceCode);
 
@@ -788,20 +785,5 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
                 }
             }
         }
-
-        private static string[] GetMonoLibDirs()
-        {
-            if (NativeMethodsShared.IsMono)
-            {
-                string monoLibDir = Path.GetDirectoryName(typeof(object).Assembly.Location);
-                string monoLibFacadesDir = Path.Combine(monoLibDir, "Facades");
-
-                return new[] { monoLibDir, monoLibFacadesDir };
-            }
-            else
-            {
-                return Array.Empty<string>();
-            }
-        }
     }
 }
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index dd09094f7d1..cb7031ecb55 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -631,7 +631,7 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         /// </summary>
         /// <param name="path"></param>
         /// <param name="pattern"></param>
-        /// <returns></returns>
+        /// <returns>The list of directories from the specified path.</returns>
         private string[] GetDirectories(string path, string pattern)
         {
             // Only cache the *. pattern. This is by far the most common pattern
diff --git a/src/Tasks/TlbReference.cs b/src/Tasks/TlbReference.cs
index 9334ab87fbb..30acc7f8e38 100644
--- a/src/Tasks/TlbReference.cs
+++ b/src/Tasks/TlbReference.cs
@@ -254,11 +254,9 @@ internal bool GenerateWrapper(out ComReferenceWrapperInfo wrapperInfo)
                         case UtilitiesProcessorArchitecture.X86:
                             flags |= TypeLibImporterFlags.ImportAsX86;
                             break;
-#if !MONO
                         case UtilitiesProcessorArchitecture.ARM:
                             flags |= TypeLibImporterFlags.ImportAsArm;
                             break;
-#endif
                         default:
                             // Let the type importer decide.
                             break;
diff --git a/src/UnitTests.Shared/AssemblyInfo.cs b/src/UnitTests.Shared/AssemblyInfo.cs
new file mode 100644
index 00000000000..3b5d7bbb185
--- /dev/null
+++ b/src/UnitTests.Shared/AssemblyInfo.cs
@@ -0,0 +1,4 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
diff --git a/src/UnitTests.Shared/AssemblyResources.cs b/src/UnitTests.Shared/AssemblyResources.cs
deleted file mode 100644
index baa3ffd33ba..00000000000
--- a/src/UnitTests.Shared/AssemblyResources.cs
+++ /dev/null
@@ -1,23 +0,0 @@
-// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-
-#nullable disable
-
-namespace Microsoft.Build.Shared
-{
-    /// <summary>
-    /// This class provides access to the assembly's resources.
-    /// </summary>
-    internal static class AssemblyResources
-    {
-        /// <summary>
-        /// Dummy
-        /// </summary>
-        internal static string GetString(string name)
-        {
-            return String.Empty;
-        }
-    }
-}
diff --git a/src/Shared/UnitTests/BuildEventArgsExtension.cs b/src/UnitTests.Shared/BuildEventArgsExtension.cs
similarity index 99%
rename from src/Shared/UnitTests/BuildEventArgsExtension.cs
rename to src/UnitTests.Shared/BuildEventArgsExtension.cs
index 4ccf2f47b5c..ad52cea6b50 100644
--- a/src/Shared/UnitTests/BuildEventArgsExtension.cs
+++ b/src/UnitTests.Shared/BuildEventArgsExtension.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// A class containing an extension to BuildEventArgs
     /// </summary>
-    internal static class BuildEventArgsExtension
+    public static class BuildEventArgsExtension
     {
         /// <summary>
         /// Extension method to help our tests without adding shipping code.
diff --git a/src/UnitTests.Shared/DummyMappedDriveUtils.cs b/src/UnitTests.Shared/DummyMappedDriveUtils.cs
index c2c28c8f0e5..90f596858d3 100644
--- a/src/UnitTests.Shared/DummyMappedDriveUtils.cs
+++ b/src/UnitTests.Shared/DummyMappedDriveUtils.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.UnitTests.Shared;
 
-internal static class DummyMappedDriveUtils
+public static class DummyMappedDriveUtils
 {
     public static string UpdatePathToMappedDrive(string path, char driveLetter)
     {
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/UnitTests.Shared/EngineTestEnvironment.cs
similarity index 96%
rename from src/Shared/UnitTests/EngineTestEnvironment.cs
rename to src/UnitTests.Shared/EngineTestEnvironment.cs
index d7276569acf..2b34451c9b3 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/UnitTests.Shared/EngineTestEnvironment.cs
@@ -30,7 +30,7 @@ public partial class TestEnvironment
 
         private sealed class ResetDefaultBuildManager
         {
-            internal static FieldInfo SingletonField;
+            public static FieldInfo SingletonField;
 
             public ResetDefaultBuildManager()
             {
@@ -132,13 +132,13 @@ public TransientTestProjectWithFiles(
             CreatedFiles = Helpers.CreateFilesInDirectory(TestRoot, files);
         }
 
-        internal MockLogger BuildProjectExpectFailure(IDictionary<string, string> globalProperties = null, string toolsVersion = null, bool validateLoggerRoundtrip = true)
+        public MockLogger BuildProjectExpectFailure(IDictionary<string, string> globalProperties = null, string toolsVersion = null, bool validateLoggerRoundtrip = true)
         {
             BuildProject(globalProperties, toolsVersion, out MockLogger logger, validateLoggerRoundtrip).ShouldBeFalse();
             return logger;
         }
 
-        internal MockLogger BuildProjectExpectSuccess(IDictionary<string, string> globalProperties = null, string toolsVersion = null, bool validateLoggerRoundtrip = true)
+        public MockLogger BuildProjectExpectSuccess(IDictionary<string, string> globalProperties = null, string toolsVersion = null, bool validateLoggerRoundtrip = true)
         {
             BuildProject(globalProperties, toolsVersion, out MockLogger logger, validateLoggerRoundtrip).ShouldBeTrue();
             return logger;
diff --git a/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs b/src/UnitTests.Shared/LongPathSupportDisabledFactAttribute.cs
similarity index 100%
rename from src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs
rename to src/UnitTests.Shared/LongPathSupportDisabledFactAttribute.cs
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 438cb91ff75..0bade6a09d5 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -1,69 +1,22 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build">
-  <Import Project="..\dir.props" />
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
-    <ProjectGuid>{E1ADB824-2B34-4920-953F-746DFD6DB3C1}</ProjectGuid>
-    <OutputType>Library</OutputType>
-    <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>Microsoft.Build.UnitTests.Shared</RootNamespace>
+    <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
     <AssemblyName>Microsoft.Build.UnitTests.Shared</AssemblyName>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
-    <DoNotLocalizeProject>true</DoNotLocalizeProject>
     <IsShipping>false</IsShipping>
+    <IsTestProject>false</IsTestProject>
+    <IsTestLibrary>true</IsTestLibrary>
   </PropertyGroup>
-  <!-- Default configurations to help VS understand the configurations -->
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' " />
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' " />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug-MONO|AnyCPU'" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release-MONO|AnyCPU'" />
-  <ItemGroup Condition="'$(NetCoreBuild)' != 'true'">
-    <Reference Include="System" />
-    <Reference Include="System.Core" />
-    <Reference Include="System.Xml" />
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
-      <Link>BuildEnvironmentHelper.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\Compat\SafeHandleZeroOrMinusOneIsInvalid.cs"  Condition="'$(NetCoreBuild)' == 'true'">
-      <Link>SafeHandleZeroOrMinusOneIsInvalid.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\Constants.cs">
-      <Link>Constants.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ErrorUtilities.cs">
-      <Link>ErrorUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\EscapingUtilities.cs">
-      <Link>EscapingUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ExceptionHandling.cs">
-      <Link>ExceptionHandling.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\FileUtilities.cs">
-      <Link>FileUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\FileUtilitiesRegex.cs">
-      <Link>FileUtilitiesRegex.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ResourceUtilities.cs">
-      <Link>ResourceUtilities.cs</Link>
-    </Compile>
-    <Compile Include="AssemblyResources.cs" />
-    <Compile Include="RunnerUtilities.cs" />
-  </ItemGroup>
   <ItemGroup>
-    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj">
-      <Project>{828566ee-6f6a-4ef4-98b0-513f7df9c628}</Project>
-      <Name>Microsoft.Build.Utilities</Name>
-    </ProjectReference>
+    <!-- Implicit references to xunit.core and xunit.assert in test projects by Arcade
+         cause restore failures if PackageVersion is in the normal .props file. -->
+    <PackageReference Include="xunit.assert" VersionOverride="$(XUnitVersion)" />
+    <PackageReference Include="xunit.core" VersionOverride="$(XUnitVersion)" />
+    <PackageReference Include="Shouldly" />
   </ItemGroup>
   <ItemGroup>
-    <None Include="project.json" />
+    <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
+    <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
   </ItemGroup>
-  <Import Project="..\dir.targets" />
 </Project>
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/UnitTests.Shared/MockEngine.cs
similarity index 95%
rename from src/Shared/UnitTests/MockEngine.cs
rename to src/UnitTests.Shared/MockEngine.cs
index a0dfb0c644e..2e3894d4562 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/UnitTests.Shared/MockEngine.cs
@@ -32,7 +32,7 @@ namespace Microsoft.Build.UnitTests
      * is somewhat of a no-no for task assemblies.
      *
      **************************************************************************/
-    internal sealed class MockEngine : IBuildEngine7
+    public sealed class MockEngine : IBuildEngine7
     {
         private readonly object _lockObj = new object();  // Protects _log, _output
         private readonly ITestOutputHelper _output;
@@ -43,15 +43,15 @@ internal sealed class MockEngine : IBuildEngine7
         private readonly ConcurrentQueue<BuildErrorEventArgs> _errorEvents = new ConcurrentQueue<BuildErrorEventArgs>();
         private readonly ConcurrentQueue<BuildWarningEventArgs> _warningEvents = new ConcurrentQueue<BuildWarningEventArgs>();
 
-        internal MockEngine() : this(false)
+        public MockEngine() : this(false)
         {
         }
 
-        internal int Messages { get; set; }
+        public int Messages { get; set; }
 
-        internal int Warnings { get; set; }
+        public int Warnings { get; set; }
 
-        internal int Errors { get; set; }
+        public int Errors { get; set; }
 
         public bool AllowFailureWithoutError { get; set; } = false;
 
@@ -60,7 +60,7 @@ internal MockEngine() : this(false)
 
         public Dictionary<string, string> GlobalProperties { get; set; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
-        internal MockLogger MockLogger { get; }
+        public MockLogger MockLogger { get; }
 
         public MockEngine(bool logToConsole)
         {
@@ -192,7 +192,7 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
 
         public int ColumnNumberOfTaskNode => 0;
 
-        internal string Log
+        public string Log
         {
             get
             {
@@ -373,7 +373,7 @@ public void UnloadAllProjects()
         /// <summary>
         /// Assert that the mock log in the engine doesn't contain a certain message based on a resource string and some parameters
         /// </summary>
-        internal void AssertLogDoesntContainMessageFromResource(GetStringDelegate getString, string resourceName, params string[] parameters)
+        public void AssertLogDoesntContainMessageFromResource(GetStringDelegate getString, string resourceName, params string[] parameters)
         {
             string resource = getString(resourceName);
             string stringToSearchFor = String.Format(resource, parameters);
@@ -383,7 +383,7 @@ internal void AssertLogDoesntContainMessageFromResource(GetStringDelegate getStr
         /// <summary>
         /// Assert that the mock log in the engine contains a certain message based on a resource string and some parameters
         /// </summary>
-        internal void AssertLogContainsMessageFromResource(GetStringDelegate getString, string resourceName, params string[] parameters)
+        public void AssertLogContainsMessageFromResource(GetStringDelegate getString, string resourceName, params string[] parameters)
         {
             string resource = getString(resourceName);
             string stringToSearchFor = String.Format(resource, parameters);
@@ -396,7 +396,7 @@ internal void AssertLogContainsMessageFromResource(GetStringDelegate getString,
         /// First check if the string is in the log string. If not
         /// than make sure it is also check the MockLogger
         /// </summary>
-        internal void AssertLogContains(string contains)
+        public void AssertLogContains(string contains)
         {
             // If we do not contain this string than pass it to
             // MockLogger. Since MockLogger is also registered as
@@ -426,7 +426,7 @@ internal void AssertLogContains(string contains)
         /// First check if the string is in the log string. If not
         /// than make sure it is also not in the MockLogger
         /// </summary>
-        internal void AssertLogDoesntContain(string contains)
+        public void AssertLogDoesntContain(string contains)
         {
             string logText;
             lock (_lockObj)
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/UnitTests.Shared/MockLogger.cs
similarity index 84%
rename from src/Shared/UnitTests/MockLogger.cs
rename to src/UnitTests.Shared/MockLogger.cs
index 38ac661d845..782cef74d41 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/UnitTests.Shared/MockLogger.cs
@@ -40,7 +40,7 @@ public sealed class MockLogger : ILogger
         /// Should the build finished event be logged in the log file. This is to work around the fact we have different
         /// localized strings between env and xmake for the build finished event.
         /// </summary>
-        internal bool LogBuildFinished { get; set; } = true;
+        public bool LogBuildFinished { get; set; } = true;
 
         /*
          * Method:  ErrorCount
@@ -48,7 +48,7 @@ public sealed class MockLogger : ILogger
          * The count of all errors seen so far.
          *
          */
-        internal int ErrorCount { get; private set; }
+        public int ErrorCount { get; private set; }
 
         /*
          * Method:  WarningCount
@@ -56,94 +56,99 @@ public sealed class MockLogger : ILogger
          * The count of all warnings seen so far.
          *
          */
-        internal int WarningCount { get; private set; }
+        public int WarningCount { get; private set; }
 
         /// <summary>
         /// Return the list of logged errors
         /// </summary>
-        internal List<BuildErrorEventArgs> Errors { get; } = new List<BuildErrorEventArgs>();
+        public List<BuildErrorEventArgs> Errors { get; } = new List<BuildErrorEventArgs>();
 
         /// <summary>
         /// Returns the list of logged warnings
         /// </summary>
-        internal List<BuildWarningEventArgs> Warnings { get; } = new List<BuildWarningEventArgs>();
+        public List<BuildWarningEventArgs> Warnings { get; } = new List<BuildWarningEventArgs>();
 
         /// <summary>
         /// When set to true, allows task crashes to be logged without causing an assert.
         /// </summary>
-        internal bool AllowTaskCrashes { get; set; }
+        public bool AllowTaskCrashes { get; set; }
 
         /// <summary>
         /// List of ExternalProjectStarted events
         /// </summary>
-        internal List<ExternalProjectStartedEventArgs> ExternalProjectStartedEvents { get; } = new List<ExternalProjectStartedEventArgs>();
+        public List<ExternalProjectStartedEventArgs> ExternalProjectStartedEvents { get; } = new List<ExternalProjectStartedEventArgs>();
 
         /// <summary>
         /// List of ExternalProjectFinished events
         /// </summary>
-        internal List<ExternalProjectFinishedEventArgs> ExternalProjectFinishedEvents { get; } = new List<ExternalProjectFinishedEventArgs>();
+        public List<ExternalProjectFinishedEventArgs> ExternalProjectFinishedEvents { get; } = new List<ExternalProjectFinishedEventArgs>();
 
         /// <summary>
         /// List of ProjectStarted events
         /// </summary>
-        internal List<ProjectEvaluationStartedEventArgs> EvaluationStartedEvents { get; } = new List<ProjectEvaluationStartedEventArgs>();
+        public List<ProjectEvaluationStartedEventArgs> EvaluationStartedEvents { get; } = new List<ProjectEvaluationStartedEventArgs>();
 
         /// <summary>
         /// List of ProjectFinished events
         /// </summary>
-        internal List<ProjectEvaluationFinishedEventArgs> EvaluationFinishedEvents { get; } = new List<ProjectEvaluationFinishedEventArgs>();
+        public List<ProjectEvaluationFinishedEventArgs> EvaluationFinishedEvents { get; } = new List<ProjectEvaluationFinishedEventArgs>();
 
         /// <summary>
         /// List of ProjectStarted events
         /// </summary>
-        internal List<ProjectStartedEventArgs> ProjectStartedEvents { get; } = new List<ProjectStartedEventArgs>();
+        public List<ProjectStartedEventArgs> ProjectStartedEvents { get; } = new List<ProjectStartedEventArgs>();
 
         /// <summary>
         /// List of ProjectFinished events
         /// </summary>
-        internal List<ProjectFinishedEventArgs> ProjectFinishedEvents { get; } = new List<ProjectFinishedEventArgs>();
+        public List<ProjectFinishedEventArgs> ProjectFinishedEvents { get; } = new List<ProjectFinishedEventArgs>();
 
         /// <summary>
         /// List of TargetStarted events
         /// </summary>
-        internal List<TargetStartedEventArgs> TargetStartedEvents { get; } = new List<TargetStartedEventArgs>();
+        public List<TargetStartedEventArgs> TargetStartedEvents { get; } = new List<TargetStartedEventArgs>();
 
         /// <summary>
         /// List of TargetFinished events
         /// </summary>
-        internal List<TargetFinishedEventArgs> TargetFinishedEvents { get; } = new List<TargetFinishedEventArgs>();
+        public List<TargetFinishedEventArgs> TargetFinishedEvents { get; } = new List<TargetFinishedEventArgs>();
 
         /// <summary>
         /// List of TaskStarted events
         /// </summary>
-        internal List<TaskStartedEventArgs> TaskStartedEvents { get; } = new List<TaskStartedEventArgs>();
+        public List<TaskStartedEventArgs> TaskStartedEvents { get; } = new List<TaskStartedEventArgs>();
 
         /// <summary>
         /// List of TaskFinished events
         /// </summary>
-        internal List<TaskFinishedEventArgs> TaskFinishedEvents { get; } = new List<TaskFinishedEventArgs>();
+        public List<TaskFinishedEventArgs> TaskFinishedEvents { get; } = new List<TaskFinishedEventArgs>();
+
+        /// <summary>
+        /// List of TaskParameter events
+        /// </summary>
+        public List<TaskParameterEventArgs> TaskParameterEvents { get; } = new List<TaskParameterEventArgs>();
 
         /// <summary>
         /// List of BuildMessage events
         /// </summary>
-        internal List<BuildMessageEventArgs> BuildMessageEvents { get; } = new List<BuildMessageEventArgs>();
+        public List<BuildMessageEventArgs> BuildMessageEvents { get; } = new List<BuildMessageEventArgs>();
 
         /// <summary>
         /// List of BuildStarted events, thought we expect there to only be one, a valid check is to make sure this list is length 1
         /// </summary>
-        internal List<BuildStartedEventArgs> BuildStartedEvents { get; } = new List<BuildStartedEventArgs>();
+        public List<BuildStartedEventArgs> BuildStartedEvents { get; } = new List<BuildStartedEventArgs>();
 
         /// <summary>
         /// List of BuildFinished events, thought we expect there to only be one, a valid check is to make sure this list is length 1
         /// </summary>
-        internal List<BuildFinishedEventArgs> BuildFinishedEvents { get; } = new List<BuildFinishedEventArgs>();
+        public List<BuildFinishedEventArgs> BuildFinishedEvents { get; } = new List<BuildFinishedEventArgs>();
 
         /// <summary>
         /// List of Telemetry events
         /// </summary>
-        internal List<TelemetryEventArgs> TelemetryEvents { get; } = new();
+        public List<TelemetryEventArgs> TelemetryEvents { get; } = new();
 
-        internal List<BuildEventArgs> AllBuildEvents { get; } = new List<BuildEventArgs>();
+        public List<BuildEventArgs> AllBuildEvents { get; } = new List<BuildEventArgs>();
 
         /*
          * Method:  FullLog
@@ -151,7 +156,7 @@ public sealed class MockLogger : ILogger
          * The raw concatenation of all messages, errors and warnings seen so far.
          *
          */
-        internal string FullLog
+        public string FullLog
         {
             get
             {
@@ -253,7 +258,7 @@ public MockLogger(ITestOutputHelper testOutputHelper = null, bool profileEvaluat
          * Receives build events and logs them the way we like.
          *
          */
-        internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
+        public void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
         {
             lock (_lockObj)
             {
@@ -362,6 +367,11 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                             TaskFinishedEvents.Add(taskFinishedEventArgs);
                             break;
                         }
+                    case TaskParameterEventArgs taskParameterEventArgs:
+                        {
+                            TaskParameterEvents.Add(taskParameterEventArgs);
+                            break;
+                        }
                     case BuildMessageEventArgs buildMessageEventArgs:
                         {
                             BuildMessageEvents.Add(buildMessageEventArgs);
@@ -398,7 +408,7 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
             }
         }
 
-        internal void TelemetryEventHandler(object sender, BuildEventArgs eventArgs)
+        public void TelemetryEventHandler(object sender, BuildEventArgs eventArgs)
         {
             lock (_lockObj)
             {
@@ -442,14 +452,14 @@ private void PrintFullLog()
         /// Assert that the log file contains the given strings, in order.
         /// </summary>
         /// <param name="contains"></param>
-        internal void AssertLogContains(params string[] contains) => AssertLogContains(true, contains);
+        public void AssertLogContains(params string[] contains) => AssertLogContains(true, contains);
 
         /// <summary>
         /// Assert that the log file contains the given string, in order. Includes the option of case invariance
         /// </summary>
         /// <param name="isCaseSensitive">False if we do not care about case sensitivity</param>
         /// <param name="contains"></param>
-        internal void AssertLogContains(bool isCaseSensitive, params string[] contains)
+        public void AssertLogContains(bool isCaseSensitive, params string[] contains)
         {
             lock (_lockObj)
             {
@@ -508,7 +518,7 @@ internal void AssertLogContains(bool isCaseSensitive, params string[] contains)
         /// Assert that the log file does not contain the given string.
         /// </summary>
         /// <param name="contains"></param>
-        internal void AssertLogDoesntContain(string contains)
+        public void AssertLogDoesntContain(string contains)
         {
             lock (_lockObj)
             {
@@ -531,14 +541,14 @@ internal void AssertLogDoesntContain(string contains)
         /// <summary>
         /// Assert that no errors were logged
         /// </summary>
-        internal void AssertNoErrors() => Assert.Equal(0, ErrorCount);
+        public void AssertNoErrors() => Assert.Equal(0, ErrorCount);
 
         /// <summary>
         /// Assert that no warnings were logged
         /// </summary>
-        internal void AssertNoWarnings() => Assert.Equal(0, WarningCount);
+        public void AssertNoWarnings() => Assert.Equal(0, WarningCount);
 
-        internal void AssertMessageCount(string message, int expectedCount, bool regexSearch = true)
+        public void AssertMessageCount(string message, int expectedCount, bool regexSearch = true)
         {
             var matches = Regex.Matches(FullLog, regexSearch ? message : Regex.Escape(message));
             matches.Count.ShouldBe(expectedCount);
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
similarity index 89%
rename from src/Shared/UnitTests/ObjectModelHelpers.cs
rename to src/UnitTests.Shared/ObjectModelHelpers.cs
index 5b6f8b43cec..ce51be22785 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -38,7 +38,7 @@ namespace Microsoft.Build.UnitTests
      * Utility methods for unit tests that work through the object model.
      *
      */
-    internal static class ObjectModelHelpers
+    public static class ObjectModelHelpers
     {
         private const string msbuildNamespace = "http://schemas.microsoft.com/developer/msbuild/2003";
         private static string s_msbuildDefaultToolsVersion = MSBuildConstants.CurrentToolsVersion;
@@ -48,7 +48,7 @@ internal static class ObjectModelHelpers
         /// <summary>
         /// Return the current Visual Studio version
         /// </summary>
-        internal static string CurrentVisualStudioVersion
+        public static string CurrentVisualStudioVersion
         {
             get
             {
@@ -59,7 +59,7 @@ internal static string CurrentVisualStudioVersion
         /// <summary>
         /// Return the default tools version
         /// </summary>
-        internal static string MSBuildDefaultToolsVersion
+        public static string MSBuildDefaultToolsVersion
         {
             get
             {
@@ -70,7 +70,7 @@ internal static string MSBuildDefaultToolsVersion
         /// <summary>
         /// Return the current assembly version
         /// </summary>
-        internal static string MSBuildAssemblyVersion
+        public static string MSBuildAssemblyVersion
         {
             get
             {
@@ -103,7 +103,7 @@ private static bool IsBuiltInItemMetadataName(string metadataName)
         /// Gets an item list from the project and assert that it contains
         /// exactly one item with the supplied name.
         /// </summary>
-        internal static ProjectItem AssertSingleItem(Project p, string type, string itemInclude)
+        public static ProjectItem AssertSingleItem(Project p, string type, string itemInclude)
         {
             ProjectItem[] items = p.GetItems(type).ToArray();
             int count = 0;
@@ -118,7 +118,7 @@ internal static ProjectItem AssertSingleItem(Project p, string type, string item
             return items[0];
         }
 
-        internal static void AssertItemEvaluationFromProject(string projectContents, string[] inputFiles, string[] expectedInclude, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false, bool makeExpectedIncludeAbsolute = false)
+        public static void AssertItemEvaluationFromProject(string projectContents, string[] inputFiles, string[] expectedInclude, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false, bool makeExpectedIncludeAbsolute = false)
         {
             AssertItemEvaluationFromGenericItemEvaluator((p, c) =>
                 {
@@ -135,7 +135,7 @@ internal static void AssertItemEvaluationFromProject(string projectContents, str
             normalizeSlashes);
         }
 
-        internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, ProjectCollection, IList<ITestItem>> itemEvaluator, string projectContents, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false)
+        public static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, ProjectCollection, IList<ITestItem>> itemEvaluator, string projectContents, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false)
         {
             using (var env = TestEnvironment.Create())
             using (var collection = new ProjectCollection())
@@ -159,21 +159,21 @@ internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, P
             }
         }
 
-        internal static void ShouldHaveSucceeded(this BuildResult result)
+        public static void ShouldHaveSucceeded(this BuildResult result)
         {
             result.OverallResult.ShouldBe(
                 BuildResultCode.Success,
                 customMessage: result.Exception is not null ? result.Exception.ToString() : string.Empty);
         }
 
-        internal static void ShouldHaveSucceeded(this GraphBuildResult result)
+        public static void ShouldHaveSucceeded(this GraphBuildResult result)
         {
             result.OverallResult.ShouldBe(
                 BuildResultCode.Success,
                 customMessage: result.Exception is not null ? result.Exception.ToString() : string.Empty);
         }
 
-        internal static void ShouldHaveFailed(this BuildResult result, string exceptionMessageSubstring = null)
+        public static void ShouldHaveFailed(this BuildResult result, string exceptionMessageSubstring = null)
         {
             result.OverallResult.ShouldBe(BuildResultCode.Failure);
 
@@ -183,7 +183,7 @@ internal static void ShouldHaveFailed(this BuildResult result, string exceptionM
             }
         }
 
-        internal static void ShouldHaveFailed(this GraphBuildResult result, string exceptionMessageSubstring = null)
+        public static void ShouldHaveFailed(this GraphBuildResult result, string exceptionMessageSubstring = null)
         {
             result.OverallResult.ShouldBe(BuildResultCode.Failure);
 
@@ -193,20 +193,20 @@ internal static void ShouldHaveFailed(this GraphBuildResult result, string excep
             }
         }
 
-        internal static string NormalizeSlashes(string path)
+        public static string NormalizeSlashes(string path)
         {
             return path.Replace('/', Path.DirectorySeparatorChar).Replace('\\', Path.DirectorySeparatorChar);
         }
 
         // todo Make IItem<M> public and add these new members to it.
-        internal interface ITestItem
+        public interface ITestItem
         {
             string EvaluatedInclude { get; }
             int DirectMetadataCount { get; }
             string GetMetadataValue(string key);
         }
 
-        internal sealed class ProjectItemTestItemAdapter : ITestItem
+        public sealed class ProjectItemTestItemAdapter : ITestItem
         {
             private readonly ProjectItem _projectInstance;
 
@@ -225,7 +225,7 @@ public static implicit operator ProjectItemTestItemAdapter(ProjectItem pi)
             }
         }
 
-        internal sealed class ProjectItemInstanceTestItemAdapter : ITestItem
+        public sealed class ProjectItemInstanceTestItemAdapter : ITestItem
         {
             private readonly ProjectItemInstance _projectInstance;
 
@@ -244,7 +244,7 @@ public static implicit operator ProjectItemInstanceTestItemAdapter(ProjectItemIn
             }
         }
 
-        internal static void AssertItems(string[] expectedItems, ICollection<ProjectItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
+        public static void AssertItems(string[] expectedItems, ICollection<ProjectItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
         {
             var converteditems = items.Select(i => (ITestItem)new ProjectItemTestItemAdapter(i)).ToList();
             AssertItems(expectedItems, converteditems, expectedDirectMetadata, normalizeSlashes);
@@ -253,7 +253,7 @@ internal static void AssertItems(string[] expectedItems, ICollection<ProjectItem
         /// <summary>
         /// Asserts that the list of items has the specified evaluated includes.
         /// </summary>
-        internal static void AssertItems(string[] expectedItems, IList<ITestItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
+        public static void AssertItems(string[] expectedItems, IList<ITestItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
         {
             if (expectedDirectMetadata == null)
             {
@@ -325,7 +325,7 @@ public static void AssertItems(string[] expectedItems, IList<ITestItem> items, D
         /// </summary>
         /// <param name="expectedItemsString"></param>
         /// <param name="actualItems"></param>
-        internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] actualItems)
+        public static void AssertItemsMatch(string expectedItemsString, ITaskItem[] actualItems)
         {
             AssertItemsMatch(expectedItemsString, actualItems, true);
         }
@@ -348,7 +348,7 @@ internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] ac
         /// <param name="expectedItemsString"></param>
         /// <param name="actualItems"></param>
         /// <param name="orderOfItemsShouldMatch"></param>
-        internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] actualItems, bool orderOfItemsShouldMatch)
+        public static void AssertItemsMatch(string expectedItemsString, ITaskItem[] actualItems, bool orderOfItemsShouldMatch)
         {
             List<ITaskItem> expectedItems = ParseExpectedItemsString(expectedItemsString);
 
@@ -454,18 +454,18 @@ internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] ac
             }
         }
 
-        internal static void AssertItemHasMetadata(Dictionary<string, string> expected, ProjectItem item)
+        public static void AssertItemHasMetadata(Dictionary<string, string> expected, ProjectItem item)
         {
             AssertItemHasMetadata(expected, new ProjectItemTestItemAdapter(item));
         }
 
-        internal static void AssertItemHasMetadata(string key, string value, ProjectItem item)
+        public static void AssertItemHasMetadata(string key, string value, ProjectItem item)
         {
             item.DirectMetadataCount.ShouldBe(1, customMessage: $"Expected 1 metadata, ({key}), got {item.DirectMetadataCount}");
             item.GetMetadataValue(key).ShouldBe(value);
         }
 
-        internal static void AssertItemHasMetadata(Dictionary<string, string> expected, ITestItem item)
+        public static void AssertItemHasMetadata(Dictionary<string, string> expected, ITestItem item)
         {
             expected ??= new Dictionary<string, string>();
 
@@ -480,7 +480,7 @@ internal static void AssertItemHasMetadata(Dictionary<string, string> expected,
         /// <summary>
         /// Used to compare the contents of two arrays.
         /// </summary>
-        internal static void AssertArrayContentsMatch(object[] expected, object[] actual)
+        public static void AssertArrayContentsMatch(object[] expected, object[] actual)
         {
             if (expected == null)
             {
@@ -560,7 +560,7 @@ private static List<ITaskItem> ParseExpectedItemsString(string expectedItemsStri
         /// Assert that a given file exists within the temp project directory.
         /// </summary>
         /// <param name="fileRelativePath"></param>
-        internal static void AssertFileExistsInTempProjectDirectory(string fileRelativePath)
+        public static void AssertFileExistsInTempProjectDirectory(string fileRelativePath)
         {
             AssertFileExistsInTempProjectDirectory(fileRelativePath, null);
         }
@@ -570,7 +570,7 @@ internal static void AssertFileExistsInTempProjectDirectory(string fileRelativeP
         /// </summary>
         /// <param name="fileRelativePath"></param>
         /// <param name="message">Can be null.</param>
-        internal static void AssertFileExistsInTempProjectDirectory(string fileRelativePath, string message)
+        public static void AssertFileExistsInTempProjectDirectory(string fileRelativePath, string message)
         {
             if (message == null)
             {
@@ -587,7 +587,7 @@ internal static void AssertFileExistsInTempProjectDirectory(string fileRelativeP
         /// </summary>
         /// <param name="projectFileContents"></param>
         /// <returns></returns>
-        internal static string CleanupFileContents(string projectFileContents)
+        public static string CleanupFileContents(string projectFileContents)
         {
             // Replace reverse-single-quotes with double-quotes.
             projectFileContents = projectFileContents.Replace("`", "\"");
@@ -609,7 +609,7 @@ public static string Cleanup(this string aString)
         /// Normalizes all the whitespace in an xml string so that two documents that
         /// differ only in whitespace can be easily compared to each other for sameness.
         /// </summary>
-        internal static string NormalizeXmlWhitespace(string xml)
+        public static string NormalizeXmlWhitespace(string xml)
         {
             XmlDocument xmldoc = new XmlDocument();
             xmldoc.LoadXml(xml);
@@ -639,7 +639,7 @@ internal static string NormalizeXmlWhitespace(string xml)
         /// </summary>
         /// <param name="xml"></param>
         /// <returns></returns>
-        internal static string CreateTempFileOnDisk(string fileContents, params object[] args)
+        public static string CreateTempFileOnDisk(string fileContents, params object[] args)
         {
             return CreateTempFileOnDiskNoFormat(string.Format(fileContents, args));
         }
@@ -649,7 +649,7 @@ internal static string CreateTempFileOnDisk(string fileContents, params object[]
         /// </summary>
         /// <param name="xml"></param>
         /// <returns></returns>
-        internal static string CreateTempFileOnDiskNoFormat(string fileContents)
+        public static string CreateTempFileOnDiskNoFormat(string fileContents)
         {
             string projectFilePath = FileUtilities.GetTemporaryFile();
 
@@ -658,7 +658,7 @@ internal static string CreateTempFileOnDiskNoFormat(string fileContents)
             return projectFilePath;
         }
 
-        internal static ProjectRootElement CreateInMemoryProjectRootElement(string projectContents, ProjectCollection collection = null, bool preserveFormatting = true)
+        public static ProjectRootElement CreateInMemoryProjectRootElement(string projectContents, ProjectCollection collection = null, bool preserveFormatting = true)
         {
             var cleanedProject = CleanupFileContents(projectContents);
 
@@ -673,7 +673,7 @@ internal static ProjectRootElement CreateInMemoryProjectRootElement(string proje
         /// </summary>
         /// <param name="xml">the project to be created in string format.</param>
         /// <returns>Returns created <see cref="Project"/>.</returns>
-        internal static Project CreateInMemoryProject(string xml)
+        public static Project CreateInMemoryProject(string xml)
         {
             return CreateInMemoryProject(xml, new ConsoleLogger());
         }
@@ -684,7 +684,7 @@ internal static Project CreateInMemoryProject(string xml)
         /// <param name="xml">the project to be created in string format.</param>
         /// <param name="loggers">The array of loggers to attach on project evaluation.</param>
         /// <returns>Returns created <see cref="Project"/>.</returns>
-        internal static Project CreateInMemoryProject(string xml, params ILogger[] loggers)
+        public static Project CreateInMemoryProject(string xml, params ILogger[] loggers)
         {
             return CreateInMemoryProject(new ProjectCollection(), xml, loggers);
         }
@@ -696,7 +696,7 @@ internal static Project CreateInMemoryProject(string xml, params ILogger[] logge
         /// <param name="xml">the project to be created in string format.</param>
         /// <param name="loggers">The array of loggers to attach on project evaluation. May be null.</param>
         /// <returns>Returns created <see cref="Project"/>.</returns>
-        internal static Project CreateInMemoryProject(ProjectCollection projectCollection, string xml, params ILogger[] loggers)
+        public static Project CreateInMemoryProject(ProjectCollection projectCollection, string xml, params ILogger[] loggers)
         {
             return CreateInMemoryProject(projectCollection, xml, null, loggers);
         }
@@ -709,7 +709,7 @@ internal static Project CreateInMemoryProject(ProjectCollection projectCollectio
         /// <param name="toolsVersion">The tools version to use on project creation. May be null.</param>
         /// <param name="loggers">The array of loggers to attach to project collection before evaluation. May be null.</param>
         /// <returns>Returns created <see cref="Project"/>.</returns>
-        internal static Project CreateInMemoryProject(
+        public static Project CreateInMemoryProject(
             ProjectCollection projectCollection,
             string xml,
             string toolsVersion /* may be null */,
@@ -745,7 +745,7 @@ internal static Project CreateInMemoryProject(
         /// <param name="testOutputHelper"><see cref="ITestOutputHelper"/> to log to.</param>
         /// <param name="loggerVerbosity">The required logging verbosity.</param>
         /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
-        internal static MockLogger BuildProjectExpectSuccess(
+        public static MockLogger BuildProjectExpectSuccess(
             string projectContents,
             ITestOutputHelper testOutputHelper = null,
             LoggerVerbosity loggerVerbosity = LoggerVerbosity.Normal)
@@ -761,7 +761,7 @@ internal static MockLogger BuildProjectExpectSuccess(
         /// </summary>
         /// <param name="projectContents">The project file content in string format.</param>
         /// <param name="loggers">The array of loggers to use.</param>
-        internal static void BuildProjectExpectSuccess(
+        public static void BuildProjectExpectSuccess(
             string projectContents,
             params ILogger[] loggers)
         {
@@ -776,7 +776,7 @@ internal static void BuildProjectExpectSuccess(
         /// </summary>
         /// <param name="projectContents">The project file content in string format.</param>
         /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
-        internal static MockLogger BuildProjectExpectFailure(string projectContents)
+        public static MockLogger BuildProjectExpectFailure(string projectContents)
         {
             MockLogger logger = new MockLogger();
             BuildProjectExpectFailure(projectContents, logger);
@@ -789,7 +789,7 @@ internal static MockLogger BuildProjectExpectFailure(string projectContents)
         /// </summary>
         /// <param name="projectContents">The project file content in string format.</param>
         /// <param name="loggers">The array of loggers to use.</param>
-        internal static void BuildProjectExpectFailure(
+        public static void BuildProjectExpectFailure(
             string projectContents,
             params ILogger[] loggers)
         {
@@ -804,7 +804,7 @@ internal static void BuildProjectExpectFailure(
         /// </summary>
         /// <param name="project"></param>
         /// <param name="newExpectedProjectContents"></param>
-        internal static void CompareProjectContents(
+        public static void CompareProjectContents(
             Project project,
             string newExpectedProjectContents)
         {
@@ -829,7 +829,7 @@ internal static void CompareProjectContents(
         /// <summary>
         /// Creates and returns a unique path under temp
         /// </summary>
-        internal static string TempProjectDir
+        public static string TempProjectDir
         {
             get
             {
@@ -847,7 +847,7 @@ internal static string TempProjectDir
         /// <summary>
         /// Deletes the directory %TEMP%\TempDirForMSBuildUnitTests, and all its contents.
         /// </summary>
-        internal static void DeleteTempProjectDirectory()
+        public static void DeleteTempProjectDirectory()
         {
             DeleteDirectory(TempProjectDir);
         }
@@ -855,7 +855,7 @@ internal static void DeleteTempProjectDirectory()
         /// <summary>
         /// Deletes the directory and all its contents.
         /// </summary>
-        internal static void DeleteDirectory(string dir)
+        public static void DeleteDirectory(string dir)
         {
             // Manually deleting all children, but intentionally leaving the
             // Temp project directory behind due to locking issues which were causing
@@ -894,7 +894,7 @@ internal static void DeleteDirectory(string dir)
         /// up the file contents (replacing single-back-quote with double-quote, etc.).
         /// Silently OVERWRITES existing file.
         /// </summary>
-        internal static string CreateFileInTempProjectDirectory(string fileRelativePath, string fileContents, Encoding encoding = null)
+        public static string CreateFileInTempProjectDirectory(string fileRelativePath, string fileContents, Encoding encoding = null)
         {
             Assert.False(string.IsNullOrEmpty(fileRelativePath));
             string fullFilePath = Path.Combine(TempProjectDir, fileRelativePath);
@@ -934,7 +934,7 @@ internal static string CreateFileInTempProjectDirectory(string fileRelativePath,
         /// </summary>
         /// <param name="projectFileRelativePath"></param>
         /// <returns></returns>
-        internal static void BuildTempProjectFileExpectSuccess(string projectFileRelativePath, MockLogger logger)
+        public static void BuildTempProjectFileExpectSuccess(string projectFileRelativePath, MockLogger logger)
         {
             BuildTempProjectFileWithTargetsExpectSuccess(projectFileRelativePath, null, null, logger);
         }
@@ -942,7 +942,7 @@ internal static void BuildTempProjectFileExpectSuccess(string projectFileRelativ
         /// <summary>
         /// Builds a project file from disk, and asserts if the build does not succeed.
         /// </summary>
-        internal static void BuildTempProjectFileWithTargetsExpectSuccess(string projectFileRelativePath, string[] targets, IDictionary<string, string> additionalProperties, MockLogger logger)
+        public static void BuildTempProjectFileWithTargetsExpectSuccess(string projectFileRelativePath, string[] targets, IDictionary<string, string> additionalProperties, MockLogger logger)
         {
             BuildTempProjectFileWithTargets(projectFileRelativePath, targets, additionalProperties, logger)
                 .ShouldBeTrue("Build failed.  See test output (Attachments in Azure Pipelines) for details");
@@ -951,7 +951,7 @@ internal static void BuildTempProjectFileWithTargetsExpectSuccess(string project
         /// <summary>
         /// Builds a project file from disk, and asserts if the build succeeds.
         /// </summary>
-        internal static void BuildTempProjectFileExpectFailure(string projectFileRelativePath, MockLogger logger)
+        public static void BuildTempProjectFileExpectFailure(string projectFileRelativePath, MockLogger logger)
         {
             BuildTempProjectFileWithTargets(projectFileRelativePath, null, null, logger)
                 .ShouldBeFalse("Build unexpectedly succeeded.  See test output (Attachments in Azure Pipelines) for details");
@@ -962,7 +962,7 @@ internal static void BuildTempProjectFileExpectFailure(string projectFileRelativ
         /// </summary>
         /// <param name="fileRelativePath"></param>
         /// <returns></returns>
-        internal static Project LoadProjectFileInTempProjectDirectory(string projectFileRelativePath)
+        public static Project LoadProjectFileInTempProjectDirectory(string projectFileRelativePath)
         {
             return LoadProjectFileInTempProjectDirectory(projectFileRelativePath, false /* don't touch project*/);
         }
@@ -972,7 +972,7 @@ internal static Project LoadProjectFileInTempProjectDirectory(string projectFile
         /// </summary>
         /// <param name="fileRelativePath"></param>
         /// <returns></returns>
-        internal static Project LoadProjectFileInTempProjectDirectory(string projectFileRelativePath, bool touchProject)
+        public static Project LoadProjectFileInTempProjectDirectory(string projectFileRelativePath, bool touchProject)
         {
             string projectFileFullPath = Path.Combine(TempProjectDir, projectFileRelativePath);
 
@@ -996,7 +996,7 @@ internal static Project LoadProjectFileInTempProjectDirectory(string projectFile
         /// <param name="additionalProperties">Can be null.</param>
         /// <param name="logger"></param>
         /// <returns></returns>
-        internal static bool BuildTempProjectFileWithTargets(
+        public static bool BuildTempProjectFileWithTargets(
             string projectFileRelativePath,
             string[] targets,
             IDictionary<string, string> globalProperties,
@@ -1036,7 +1036,7 @@ internal static bool BuildTempProjectFileWithTargets(
         /// Delete any files in the list that currently exist.
         /// </summary>
         /// <param name="files"></param>
-        internal static void DeleteTempFiles(string[] files)
+        public static void DeleteTempFiles(string[] files)
         {
             for (int i = 0; i < files.Length; i++)
             {
@@ -1050,7 +1050,7 @@ internal static void DeleteTempFiles(string[] files)
         /// <summary>
         /// Returns the requested number of temporary files.
         /// </summary>
-        internal static string[] GetTempFiles(int number)
+        public static string[] GetTempFiles(int number)
         {
             return GetTempFiles(number, DateTime.Now);
         }
@@ -1058,7 +1058,7 @@ internal static string[] GetTempFiles(int number)
         /// <summary>
         /// Returns the requested number of temporary files, with the requested write time.
         /// </summary>
-        internal static string[] GetTempFiles(int number, DateTime lastWriteTime)
+        public static string[] GetTempFiles(int number, DateTime lastWriteTime)
         {
             string[] files = new string[number];
 
@@ -1073,7 +1073,7 @@ internal static string[] GetTempFiles(int number, DateTime lastWriteTime)
         /// <summary>
         /// Get items of item type "i" with using the item xml fragment passed in
         /// </summary>
-        internal static IList<ProjectItem> GetItemsFromFragment(string fragment, bool allItems = false, bool ignoreCondition = false)
+        public static IList<ProjectItem> GetItemsFromFragment(string fragment, bool allItems = false, bool ignoreCondition = false)
         {
             string content = FormatProjectContentsWithItemGroupFragment(fragment);
 
@@ -1081,7 +1081,7 @@ internal static IList<ProjectItem> GetItemsFromFragment(string fragment, bool al
             return items;
         }
 
-        internal static string GetConcatenatedItemsOfType(this Project project, string itemType, string itemSeparator = ";")
+        public static string GetConcatenatedItemsOfType(this Project project, string itemType, string itemSeparator = ";")
         {
             return string.Join(itemSeparator, project.Items.Where(i => i.ItemType.Equals(itemType)).Select(i => i.EvaluatedInclude));
         }
@@ -1089,7 +1089,7 @@ internal static IList<ProjectItem> GetItemsFromFragment(string fragment, bool al
         /// <summary>
         /// Get the items of type "i" in the project provided
         /// </summary>
-        internal static IList<ProjectItem> GetItems(string content, bool allItems = false, bool ignoreCondition = false)
+        public static IList<ProjectItem> GetItems(string content, bool allItems = false, bool ignoreCondition = false)
         {
             var projectXml = ProjectRootElement.Create(XmlReader.Create(new StringReader(CleanupFileContents(content))));
             Project project = new Project(projectXml);
@@ -1101,7 +1101,7 @@ internal static IList<ProjectItem> GetItems(string content, bool allItems = fals
             return item;
         }
 
-        internal static string FormatProjectContentsWithItemGroupFragment(string fragment)
+        public static string FormatProjectContentsWithItemGroupFragment(string fragment)
         {
             return
                 $@"
@@ -1117,16 +1117,16 @@ internal static string FormatProjectContentsWithItemGroupFragment(string fragmen
     /// <summary>
     /// Various generic unit test helper methods
     /// </summary>
-    internal static partial class Helpers
+    public static partial class Helpers
     {
-        internal static string Format(this string s, params object[] formatItems)
+        public static string Format(this string s, params object[] formatItems)
         {
             ErrorUtilities.VerifyThrowArgumentNull(s, nameof(s));
 
             return string.Format(s, formatItems);
         }
 
-        internal static string GetOSPlatformAsString()
+        public static string GetOSPlatformAsString()
         {
             var currentPlatformString = string.Empty;
 
@@ -1153,7 +1153,7 @@ internal static string GetOSPlatformAsString()
         /// <summary>
         /// Returns the count of objects returned by an enumerator
         /// </summary>
-        internal static int Count(IEnumerable enumerable)
+        public static int Count(IEnumerable enumerable)
         {
             if (enumerable is ICollection c)
             {
@@ -1172,7 +1172,7 @@ internal static int Count(IEnumerable enumerable)
         /// <summary>
         /// Makes a temporary list out of an enumerable
         /// </summary>
-        internal static List<T> MakeList<T>(IEnumerable<T> enumerable)
+        public static List<T> MakeList<T>(IEnumerable<T> enumerable)
         {
             List<T> list = new List<T>();
             foreach (T item in enumerable)
@@ -1185,7 +1185,7 @@ internal static List<T> MakeList<T>(IEnumerable<T> enumerable)
         /// <summary>
         /// Gets the first element in the enumeration, or null if there are none
         /// </summary>
-        internal static T GetFirst<T>(IEnumerable<T> enumerable)
+        public static T GetFirst<T>(IEnumerable<T> enumerable)
             where T : class
         {
             T first = null;
@@ -1202,7 +1202,7 @@ internal static T GetFirst<T>(IEnumerable<T> enumerable)
         /// <summary>
         /// Gets the last element in the enumeration, or null if there are none
         /// </summary>
-        internal static T GetLast<T>(IEnumerable<T> enumerable)
+        public static T GetLast<T>(IEnumerable<T> enumerable)
             where T : class
         {
             T last = null;
@@ -1218,7 +1218,7 @@ internal static T GetLast<T>(IEnumerable<T> enumerable)
         /// <summary>
         /// Makes a temporary dictionary out of an enumerable of keyvaluepairs.
         /// </summary>
-        internal static Dictionary<string, V> MakeDictionary<V>(IEnumerable<KeyValuePair<string, V>> enumerable)
+        public static Dictionary<string, V> MakeDictionary<V>(IEnumerable<KeyValuePair<string, V>> enumerable)
         {
             Dictionary<string, V> dictionary = new Dictionary<string, V>(StringComparer.OrdinalIgnoreCase);
             foreach (KeyValuePair<string, V> item in enumerable)
@@ -1231,7 +1231,7 @@ internal static Dictionary<string, V> MakeDictionary<V>(IEnumerable<KeyValuePair
         /// <summary>
         /// Verify that the two lists are value identical
         /// </summary>
-        internal static void AssertListsValueEqual<T>(IList<T> one, IList<T> two)
+        public static void AssertListsValueEqual<T>(IList<T> one, IList<T> two)
         {
             Assert.Equal(one.Count, two.Count);
 
@@ -1244,7 +1244,7 @@ internal static void AssertListsValueEqual<T>(IList<T> one, IList<T> two)
         /// <summary>
         /// Verify that the two collections are value identical
         /// </summary>
-        internal static void AssertCollectionsValueEqual<T>(ICollection<T> one, ICollection<T> two)
+        public static void AssertCollectionsValueEqual<T>(ICollection<T> one, ICollection<T> two)
         {
             Assert.Equal(one.Count, two.Count);
 
@@ -1259,7 +1259,7 @@ internal static void AssertCollectionsValueEqual<T>(ICollection<T> one, ICollect
             }
         }
 
-        internal static void AssertDictionariesEqual<K, V>(IDictionary<K, V> x, IDictionary<K, V> y, Action<KeyValuePair<K, V>, KeyValuePair<K, V>> assertPairsEqual)
+        public static void AssertDictionariesEqual<K, V>(IDictionary<K, V> x, IDictionary<K, V> y, Action<KeyValuePair<K, V>, KeyValuePair<K, V>> assertPairsEqual)
         {
             if (x == null || y == null)
             {
@@ -1278,7 +1278,7 @@ internal static void AssertDictionariesEqual<K, V>(IDictionary<K, V> x, IDiction
             }
         }
 
-        internal static void AssertDictionariesEqual(IDictionary<string, string> x, IDictionary<string, string> y)
+        public static void AssertDictionariesEqual(IDictionary<string, string> x, IDictionary<string, string> y)
         {
             AssertDictionariesEqual(x, y,
                 (xPair, yPair) =>
@@ -1288,21 +1288,21 @@ internal static void AssertDictionariesEqual(IDictionary<string, string> x, IDic
                 });
         }
 
-        internal static void ShouldBeSameIgnoringOrder<K, V>(this IDictionary<K, V> a, IReadOnlyDictionary<K, V> b)
+        public static void ShouldBeSameIgnoringOrder<K, V>(this IDictionary<K, V> a, IReadOnlyDictionary<K, V> b)
         {
             a.ShouldBeSubsetOf(b);
             b.ShouldBeSubsetOf(a);
             a.Count.ShouldBe(b.Count);
         }
 
-        internal static void ShouldBeSameIgnoringOrder<K>(this IEnumerable<K> a, IEnumerable<K> b)
+        public static void ShouldBeSameIgnoringOrder<K>(this IEnumerable<K> a, IEnumerable<K> b)
         {
             a.ShouldBeSubsetOf(b);
             b.ShouldBeSubsetOf(a);
             a.Count().ShouldBe(b.Count());
         }
 
-        internal static void ShouldBeSetEquivalentTo<K>(this IEnumerable<K> a, IEnumerable<K> b)
+        public static void ShouldBeSetEquivalentTo<K>(this IEnumerable<K> a, IEnumerable<K> b)
         {
             a.ShouldBeSubsetOf(b);
             b.ShouldBeSubsetOf(a);
@@ -1311,7 +1311,7 @@ internal static void ShouldBeSetEquivalentTo<K>(this IEnumerable<K> a, IEnumerab
         /// <summary>
         /// Verify that the two enumerables are value identical
         /// </summary>
-        internal static void AssertEnumerationsValueEqual<T>(IEnumerable<T> one, IEnumerable<T> two)
+        public static void AssertEnumerationsValueEqual<T>(IEnumerable<T> one, IEnumerable<T> two)
         {
             List<T> listOne = new List<T>();
             List<T> listTwo = new List<T>();
@@ -1333,7 +1333,7 @@ internal static void AssertEnumerationsValueEqual<T>(IEnumerable<T> one, IEnumer
         /// Build a project with the provided content in memory.
         /// Assert that it succeeded, and return the mock logger with the output.
         /// </summary>
-        internal static MockLogger BuildProjectWithNewOMExpectSuccess(string content, Dictionary<string, string> globalProperties = null, MockLogger logger = null)
+        public static MockLogger BuildProjectWithNewOMExpectSuccess(string content, Dictionary<string, string> globalProperties = null, MockLogger logger = null)
         {
             BuildProjectWithNewOM(content, ref logger, out bool result, false, globalProperties);
             Assert.True(result);
@@ -1359,6 +1359,20 @@ private static void BuildProjectWithNewOM(string content, ref MockLogger logger,
             result = project.Build(loggers);
         }
 
+        public static void BuildProjectWithNewOMAndBinaryLogger(string content, BinaryLogger binaryLogger, out bool result, out string projectDirectory)
+        {
+            // Replace the nonstandard quotes with real ones
+            content = ObjectModelHelpers.CleanupFileContents(content);
+
+            Project project = new Project(XmlReader.Create(new StringReader(content)), null, toolsVersion: null);
+
+            List<ILogger> loggers = new List<ILogger>() { binaryLogger };
+
+            result = project.Build(loggers);
+
+            projectDirectory = project.DirectoryPath;
+        }
+
         public static MockLogger BuildProjectContentUsingBuildManagerExpectResult(string content, BuildResultCode expectedResult)
         {
             var logger = new MockLogger();
@@ -1415,7 +1429,7 @@ public static BuildResult BuildProjectFileUsingBuildManager(
             }
         }
 
-        internal enum ExpectedBuildResult
+        public enum ExpectedBuildResult
         {
             // The build should fail with a logged error upon drive enumerationg wildcard detection and setting of environment variable.
             FailWithError,
@@ -1428,7 +1442,7 @@ internal enum ExpectedBuildResult
         /// <summary>
         /// Verify that a drive enumerating wildcard warning is logged or exception is thrown.
         /// </summary>
-        internal static void CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(string content, string failOnDriveEnumerationEnvVar, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
+        public static void CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(string content, string failOnDriveEnumerationEnvVar, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
         {
             using (var env = TestEnvironment.Create(testOutput))
             {
@@ -1444,14 +1458,14 @@ internal static void CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(str
             }
         }
 
-        internal static void ResetStateForDriveEnumeratingWildcardTests(TestEnvironment env, string setEnvVar)
+        public static void ResetStateForDriveEnumeratingWildcardTests(TestEnvironment env, string setEnvVar)
         {
             ChangeWaves.ResetStateForTests();
             env.SetEnvironmentVariable("MSBUILDFAILONDRIVEENUMERATINGWILDCARD", setEnvVar);
             BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
         }
 
-        internal static void BuildTargetWithDriveEnumeratingWildcardUsingBuildManager(TestEnvironment env, string testProjectFile, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
+        public static void BuildTargetWithDriveEnumeratingWildcardUsingBuildManager(TestEnvironment env, string testProjectFile, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
         {
             try
             {
@@ -1522,7 +1536,7 @@ private static void VerifySuccessOfBuildAndTargetResults(BuildResult buildResult
         /// Build a project with the provided content in memory.
         /// Assert that it fails, and return the mock logger with the output.
         /// </summary>
-        internal static MockLogger BuildProjectWithNewOMExpectFailure(string content, bool allowTaskCrash, MockLogger logger = null)
+        public static MockLogger BuildProjectWithNewOMExpectFailure(string content, bool allowTaskCrash, MockLogger logger = null)
         {
             bool result;
             BuildProjectWithNewOM(content, ref logger, out result, allowTaskCrash);
@@ -1536,7 +1550,7 @@ internal static MockLogger BuildProjectWithNewOMExpectFailure(string content, bo
         /// </summary>
         /// <param name="newExpectedProjectContents"></param>
         /// <param name="newActualProjectContents"></param>
-        internal static void CompareProjectXml(string newExpectedProjectContents, string newActualProjectContents)
+        public static void CompareProjectXml(string newExpectedProjectContents, string newActualProjectContents)
         {
             // Replace single-quotes with double-quotes, and normalize whitespace.
             newExpectedProjectContents =
@@ -1559,7 +1573,7 @@ internal static void CompareProjectXml(string newExpectedProjectContents, string
         /// <summary>
         /// Verify that the saved project content matches the provided content
         /// </summary>
-        internal static void VerifyAssertProjectContent(string expected, Project project)
+        public static void VerifyAssertProjectContent(string expected, Project project)
         {
             VerifyAssertProjectContent(expected, project.Xml);
         }
@@ -1567,7 +1581,7 @@ internal static void VerifyAssertProjectContent(string expected, Project project
         /// <summary>
         /// Verify that the saved project content matches the provided content
         /// </summary>
-        internal static void VerifyAssertProjectContent(string expected, ProjectRootElement project, bool ignoreFirstLineOfActual = true)
+        public static void VerifyAssertProjectContent(string expected, ProjectRootElement project, bool ignoreFirstLineOfActual = true)
         {
             VerifyAssertLineByLine(expected, project.RawXml, ignoreFirstLineOfActual);
         }
@@ -1575,7 +1589,7 @@ internal static void VerifyAssertProjectContent(string expected, ProjectRootElem
         /// <summary>
         /// Verify that the expected content matches the actual content
         /// </summary>
-        internal static void VerifyAssertLineByLine(string expected, string actual)
+        public static void VerifyAssertLineByLine(string expected, string actual)
         {
             VerifyAssertLineByLine(expected, actual, false /* do not ignore first line */);
         }
@@ -1584,7 +1598,7 @@ internal static void VerifyAssertLineByLine(string expected, string actual)
         /// Write the given <see cref="projectContents"/> in a new temp directory and create the given <see cref="files"/> relative to the project
         /// </summary>
         /// <returns>the path to the temp root directory that contains the project and files</returns>
-        internal static string CreateProjectInTempDirectoryWithFiles(string projectContents, string[] files, out string createdProjectFile, out string[] createdFiles, string relativePathFromRootToProject = ".")
+        public static string CreateProjectInTempDirectoryWithFiles(string projectContents, string[] files, out string createdProjectFile, out string[] createdFiles, string relativePathFromRootToProject = ".")
         {
             var root = GetTempDirectoryWithGuid();
             Directory.CreateDirectory(root);
@@ -1609,7 +1623,7 @@ private static string GetTempDirectoryWithGuid()
         /// Creates a bunch of temporary files with the specified names and returns
         /// their full paths (so they can ultimately be cleaned up)
         /// </summary>
-        internal static string[] CreateFiles(params string[] files)
+        public static string[] CreateFiles(params string[] files)
         {
             string directory = GetTempDirectoryWithGuid();
             Directory.CreateDirectory(directory);
@@ -1621,7 +1635,7 @@ internal static string[] CreateFiles(params string[] files)
         /// Creates a bunch of temporary files in the given directory with the specified names and returns
         /// their full paths (so they can ultimately be cleaned up)
         /// </summary>
-        internal static string[] CreateFilesInDirectory(string rootDirectory, params string[] files)
+        public static string[] CreateFilesInDirectory(string rootDirectory, params string[] files)
         {
             if (files == null)
             {
@@ -1656,7 +1670,7 @@ internal static string[] CreateFilesInDirectory(string rootDirectory, params str
             return result;
         }
 
-        internal delegate TransientTestFile CreateProjectFileDelegate(
+        public delegate TransientTestFile CreateProjectFileDelegate(
             TestEnvironment env,
             int projectNumber,
             int[] projectReferences = null,
@@ -1664,7 +1678,7 @@ internal delegate TransientTestFile CreateProjectFileDelegate(
             string defaultTargets = null,
             string extraContent = null);
 
-        internal static TransientTestFile CreateProjectFile(
+        public static TransientTestFile CreateProjectFile(
             TestEnvironment env,
             int projectNumber,
             int[] projectReferences = null,
@@ -1699,6 +1713,8 @@ internal static TransientTestFile CreateProjectFile(
 
             sb.Append("</ItemGroup>");
 
+            // Ensure there is at least one valid target in the project
+            sb.Append("<Target Name='Build'/>");
 
             foreach (var defaultTarget in (defaultTargets ?? string.Empty).Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
             {
@@ -1712,7 +1728,7 @@ internal static TransientTestFile CreateProjectFile(
             return env.CreateFile(projectNumber + ".proj", sb.ToString());
         }
 
-        internal static ProjectGraph CreateProjectGraph(
+        public static ProjectGraph CreateProjectGraph(
             TestEnvironment env,
             // direct dependencies that the kvp.key node has on the nodes represented by kvp.value
             IDictionary<int, int[]> dependencyEdges,
@@ -1823,7 +1839,7 @@ private static string[] SplitPathIntoFragments(string path)
         /// Deletes a bunch of files, including their containing directories
         /// if they become empty
         /// </summary>
-        internal static void DeleteFiles(params string[] paths)
+        public static void DeleteFiles(params string[] paths)
         {
             // When we delete the file directory which has the sub folder/file firstly, it will not be deleted since not empty.
             // So sort paths descendingly by file directory length, it will delete sub folder/file at first.
@@ -1848,7 +1864,7 @@ internal static void DeleteFiles(params string[] paths)
         /// Given two methods accepting no parameters and returning none, verifies they
         /// both throw, and throw the same exception type.
         /// </summary>
-        internal static void VerifyAssertThrowsSameWay(Action method1, Action method2)
+        public static void VerifyAssertThrowsSameWay(Action method1, Action method2)
         {
             Exception ex1 = null;
             Exception ex2 = null;
@@ -1886,7 +1902,7 @@ internal static void VerifyAssertThrowsSameWay(Action method1, Action method2)
         /// <summary>
         /// Verify method throws invalid operation exception.
         /// </summary>
-        internal static void VerifyAssertThrowsInvalidOperation(Action method)
+        public static void VerifyAssertThrowsInvalidOperation(Action method)
         {
             Assert.Throws<InvalidOperationException>(method);
         }
@@ -1894,7 +1910,7 @@ internal static void VerifyAssertThrowsInvalidOperation(Action method)
         /// <summary>
         /// Verify that the expected content matches the actual content
         /// </summary>
-        internal static void VerifyAssertLineByLine(string expected, string actual, bool ignoreFirstLineOfActual, ITestOutputHelper testOutput = null)
+        public static void VerifyAssertLineByLine(string expected, string actual, bool ignoreFirstLineOfActual, ITestOutputHelper testOutput = null)
         {
             Action<string> LogLine = testOutput == null ? (Action<string>)Console.WriteLine : testOutput.WriteLine;
 
@@ -1953,7 +1969,7 @@ internal static void VerifyAssertLineByLine(string expected, string actual, bool
         /// <summary>
         /// Clear the dirty flag of a ProjectRootElement by saving to a dummy writer.
         /// </summary>
-        internal static void ClearDirtyFlag(ProjectRootElement project)
+        public static void ClearDirtyFlag(ProjectRootElement project)
         {
             project.Save(new StringWriter());
             Assert.False(project.HasUnsavedChanges);
@@ -1963,7 +1979,7 @@ internal static void ClearDirtyFlag(ProjectRootElement project)
         /// Gets a command that can be used by an Exec task to sleep for the specified amount of time.
         /// </summary>
         /// <param name="timeSpan">A <see cref="TimeSpan"/> representing the amount of time to sleep.</param>
-        internal static string GetSleepCommand(TimeSpan timeSpan)
+        public static string GetSleepCommand(TimeSpan timeSpan)
         {
             return string.Format(
                 GetSleepCommandTemplate(),
@@ -1975,7 +1991,7 @@ internal static string GetSleepCommand(TimeSpan timeSpan)
         /// <summary>
         /// Gets a command template that can be used by an Exec task to sleep for the specified amount of time. The string has to be formatted with the number of seconds to sleep
         /// </summary>
-        internal static string GetSleepCommandTemplate()
+        public static string GetSleepCommandTemplate()
         {
             return
                 NativeMethodsShared.IsWindows
@@ -1997,12 +2013,12 @@ private static string[] SplitIntoLines(string content)
         /// Used for file matching tests
         /// MSBuild does not accept forward slashes on rooted paths, so those are returned unchanged
         /// </summary>
-        internal static string ToForwardSlash(string path) =>
+        public static string ToForwardSlash(string path) =>
             Path.IsPathRooted(path)
                 ? path
                 : path.ToSlash();
 
-        internal sealed class ElementLocationComparerIgnoringType : IEqualityComparer<ElementLocation>
+        public sealed class ElementLocationComparerIgnoringType : IEqualityComparer<ElementLocation>
         {
             public bool Equals(ElementLocation x, ElementLocation y)
             {
@@ -2030,7 +2046,7 @@ public int GetHashCode(ElementLocation obj)
             }
         }
 
-        internal sealed class BuildManagerSession : IDisposable
+        public sealed class BuildManagerSession : IDisposable
         {
             private readonly TestEnvironment _env;
             private readonly BuildManager _buildManager;
@@ -2118,7 +2134,7 @@ public void Dispose()
             }
         }
 
-        internal sealed class LoggingDirectoryCacheFactory : IDirectoryCacheFactory
+        public sealed class LoggingDirectoryCacheFactory : IDirectoryCacheFactory
         {
             public List<LoggingDirectoryCache> DirectoryCaches { get; } = new();
 
@@ -2130,9 +2146,9 @@ public IDirectoryCache GetDirectoryCacheForEvaluation(int evaluationId)
             }
         }
 
-        internal sealed class LoggingDirectoryCache : IDirectoryCache
+        public sealed class LoggingDirectoryCache : IDirectoryCache
         {
-            internal int EvaluationId { get; }
+            public int EvaluationId { get; }
 
             public ConcurrentDictionary<string, int> ExistenceChecks { get; } = new();
             public ConcurrentDictionary<string, int> Enumerations { get; } = new();
@@ -2177,7 +2193,7 @@ private void IncrementEnumerations(string path)
             }
         }
 
-        internal sealed class LoggingFileSystem : MSBuildFileSystemBase
+        public sealed class LoggingFileSystem : MSBuildFileSystemBase
         {
             private int _fileSystemCalls;
 
diff --git a/src/Tasks.UnitTests/StreamHelpers.cs b/src/UnitTests.Shared/StreamHelpers.cs
similarity index 59%
rename from src/Tasks.UnitTests/StreamHelpers.cs
rename to src/UnitTests.Shared/StreamHelpers.cs
index b28c8a5c319..e28bf080fd3 100644
--- a/src/Tasks.UnitTests/StreamHelpers.cs
+++ b/src/UnitTests.Shared/StreamHelpers.cs
@@ -7,15 +7,36 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    internal sealed class StreamHelpers
+    public sealed class StreamHelpers
     {
+        /// <summary>
+        /// Take a string and convert it to a StreamReader.
+        /// </summary>
+        /// <param name="value"></param>
+        /// <returns></returns>
+        public static StreamReader StringToStreamReader(string value)
+        {
+            MemoryStream m = new MemoryStream();
+#if FEATURE_ENCODING_DEFAULT
+            TextWriter w = new StreamWriter(m, System.Text.Encoding.Default);
+#else
+            TextWriter w = new StreamWriter(m, System.Text.Encoding.UTF8);
+#endif
+
+            w.Write(value);
+            w.Flush();
+            m.Seek(0, SeekOrigin.Begin);
+
+            return new StreamReader(m);
+        }
+
         /*
          * Method:  StringToStream (overload)
          *
          * Take a string and convert it into a Stream.
          * Use the default encoding which means this machine's ANSI codepage.
          */
-        internal static Stream StringToStream(string value)
+        public static Stream StringToStream(string value)
         {
 #if FEATURE_ENCODING_DEFAULT
             return StringToStream(value, System.Text.Encoding.Default); // We want this to be Default which is ANSI
@@ -30,7 +51,7 @@ internal static Stream StringToStream(string value)
          * Take a string and convert it into a Stream.
          * Takes an alternate encoding type
          */
-        internal static Stream StringToStream(string value, System.Text.Encoding encoding)
+        public static Stream StringToStream(string value, System.Text.Encoding encoding)
         {
             MemoryStream m = new MemoryStream();
             TextWriter w = new StreamWriter(m, encoding); // HIGHCHAR: StringToStream helper accepts encoding from caller.
diff --git a/src/Shared/UnitTests/TestData/GlobbingTestData.cs b/src/UnitTests.Shared/TestData/GlobbingTestData.cs
similarity index 100%
rename from src/Shared/UnitTests/TestData/GlobbingTestData.cs
rename to src/UnitTests.Shared/TestData/GlobbingTestData.cs
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/UnitTests.Shared/TestEnvironment.cs
similarity index 98%
rename from src/Shared/UnitTests/TestEnvironment.cs
rename to src/UnitTests.Shared/TestEnvironment.cs
index 42341719c1d..86e85d3cd51 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/UnitTests.Shared/TestEnvironment.cs
@@ -264,6 +264,17 @@ public TransientTestFile ExpectFile(string extension = ".tmp")
             return WithTransientTestState(new TransientTestFile(extension, createFile: false, expectedAsOutput: true));
         }
 
+        /// <summary>
+        ///     Create a temp file name that is expected to exist under specified folder when the test completes.
+        /// </summary>
+        /// <param name="folderPath">Folder path of the file.</param>
+        /// <param name="extension">Extension of the file (defaults to '.tmp')</param>
+        /// <returns></returns>
+        public TransientTestFile ExpectFile(string folderPath, string extension = ".tmp")
+        {
+            return WithTransientTestState(new TransientTestFile(folderPath, extension, createFile: false, expectedAsOutput: true));
+        }
+
         /// <summary>
         ///     Creates a test variant used to add a unique temporary folder during a test. Will be deleted when the test
         ///     completes.
diff --git a/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj b/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj
index 3cdbee08cb6..3f86257bcfc 100644
--- a/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj
+++ b/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj
@@ -19,6 +19,7 @@
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\MSBuild\MSBuild.csproj" ReferenceOutputAssembly="false" OutputItemType="ReferenceCopyLocalPaths" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
   </ItemGroup>
 
   <ItemGroup>
@@ -26,13 +27,7 @@
     <Compile Include="..\Shared\UnitTests\ErrorUtilities_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\PrintLineDebugger_Tests.cs" />
     <Compile Include="..\Shared\UnitTests\NativeMethodsShared_Tests.cs" />
-    <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
-    <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs" />
     <Compile Include="..\Shared\UnitTests\ResourceUtilities_Tests.cs" />
-    <Compile Include="..\Shared\UnitTests\EngineTestEnvironment.cs" />
-    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs">
-      <Link>TestEnvironment.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\StringExtensions.cs" />
     <Compile Include="..\Build\BackEnd\Node\NativeMethods.cs">
       <Link>NativeMethods.cs</Link>
diff --git a/src/Utilities.UnitTests/MockEngine.cs b/src/Utilities.UnitTests/MockEngine.cs
index 8b6c48c541e..0d283df9558 100644
--- a/src/Utilities.UnitTests/MockEngine.cs
+++ b/src/Utilities.UnitTests/MockEngine.cs
@@ -27,7 +27,7 @@ namespace Microsoft.Build.UnitTests
      * is somewhat of a no-no for task assemblies.
      *
      **************************************************************************/
-    internal sealed class MockEngine : IBuildEngine3
+    internal sealed class MockEngine3 : IBuildEngine3
     {
         private StringBuilder _log = new StringBuilder();
 
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index 33c2cab46f3..b96ccfd0dde 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -89,7 +89,7 @@ public void CheckMessageCode()
         [Fact]
         public void CheckMessageFromStreamParsesErrorsAndMessagesCorrectly()
         {
-            IBuildEngine2 mockEngine = new MockEngine();
+            IBuildEngine2 mockEngine = new MockEngine3();
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
@@ -109,7 +109,7 @@ public void CheckMessageFromStreamParsesErrorsAndMessagesCorrectly()
         [Fact]
         public void LogCommandLine()
         {
-            MockEngine mockEngine = new MockEngine();
+            MockEngine3 mockEngine = new MockEngine3();
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
@@ -124,7 +124,7 @@ public void LogCommandLine()
         [Fact]
         public void LogMessageWithUnmatchedCurly()
         {
-            MockEngine mockEngine = new MockEngine();
+            MockEngine3 mockEngine = new MockEngine3();
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
@@ -144,7 +144,7 @@ public void LogMessageWithUnmatchedCurly()
         [Fact]
         public void LogFromResources()
         {
-            MockEngine mockEngine = new MockEngine();
+            MockEngine3 mockEngine = new MockEngine3();
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
@@ -183,7 +183,7 @@ nor is this
                 // This closes the reader
                 File.WriteAllText(file, contents);
 
-                MockEngine mockEngine = new MockEngine();
+                MockEngine3 mockEngine = new MockEngine3();
                 Task t = new MockTask();
                 t.BuildEngine = mockEngine;
                 t.Log.LogMessagesFromFile(file, MessageImportance.High);
@@ -192,7 +192,7 @@ nor is this
                 mockEngine.Warnings.ShouldBe(1);
                 mockEngine.Messages.ShouldBe(3);
 
-                mockEngine = new MockEngine();
+                mockEngine = new MockEngine3();
                 t = new MockTask();
                 t.BuildEngine = mockEngine;
                 t.Log.LogMessagesFromFile(file);
@@ -238,7 +238,7 @@ public void TestLogFromException()
             string message = "exception message";
             string stackTrace = "TaskLoggingHelperTests.TestLogFromException";
 
-            MockEngine engine = new MockEngine();
+            MockEngine3 engine = new MockEngine3();
             MockTask task = new MockTask();
             task.BuildEngine = engine;
 
@@ -297,7 +297,7 @@ public void TestLogFromExceptionWithAggregateException()
                 new InvalidOperationException("The operation was invalid"),
                 new IOException("An I/O error occurred"));
 
-            MockEngine engine = new MockEngine();
+            MockEngine3 engine = new MockEngine3();
             MockTask task = new MockTask
             {
                 BuildEngine = engine
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index bb98a4a196f..e8ae9db9ba2 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -2683,17 +2683,8 @@ private void CheckGetPathToReferenceAssemblies(TestEnvironment env, string custo
             string asmPath = CreateNewFrameworkAndGetAssembliesPath(env, frameworkName, frameworkVersionWithV, customFrameworkDir);
 
             var stdLibPaths = getPathToReferenceAssemblies(frameworkName, frameworkVersion, frameworkProfile, customFrameworkDir, fallbackSearchPaths);
-            if (NativeMethodsShared.IsMono)
-            {
-                stdLibPaths.Count.ShouldBe(2);
-                stdLibPaths[0].ShouldBe(Path.Combine(customFrameworkDir, frameworkName, frameworkVersionWithV) + Path.DirectorySeparatorChar, stdLibPaths[0]);
-                stdLibPaths[1].ShouldBe(asmPath + Path.DirectorySeparatorChar);
-            }
-            else
-            {
-                stdLibPaths.Count.ShouldBe(1);
-                stdLibPaths[0].ShouldBe(Path.Combine(customFrameworkDir, frameworkName, frameworkVersionWithV) + Path.DirectorySeparatorChar, stdLibPaths[0]);
-            }
+            stdLibPaths.Count.ShouldBe(1);
+            stdLibPaths[0].ShouldBe(Path.Combine(customFrameworkDir, frameworkName, frameworkVersionWithV) + Path.DirectorySeparatorChar, stdLibPaths[0]);
         }
 
         [Fact]
@@ -2726,22 +2717,11 @@ public void GetPathToReferenceAssembliesWithNullTargetFrameworkFallbackSearchPat
 
         private static string CreateNewFrameworkAndGetAssembliesPath(TestEnvironment env, string frameworkName, string frameworkVersion, string rootDir)
         {
-            string frameworkListXml;
-            if (NativeMethodsShared.IsMono)
-            {
-                // Mono uses an extra attribute to point to the location of the corresponding
-                // assemblies
-                frameworkListXml = @"<?xml version=""1.0"" encoding=""utf-8""?>
-                    <FileList  Name=""{0}"" TargetFrameworkDirectory=""..\assemblies"" />";
-            }
-            else
-            {
-                frameworkListXml = @"<?xml version=""1.0"" encoding=""utf-8""?>
-                    <FileList  Name=""{0}""/>";
-            }
+            string frameworkListXml = @"<?xml version=""1.0"" encoding=""utf-8""?>
+                <FileList  Name=""{0}""/>";
 
             string redistPath = Path.Combine(rootDir, frameworkName, frameworkVersion, "RedistList");
-            string asmPath = Path.Combine(rootDir, frameworkName, frameworkVersion, NativeMethodsShared.IsMono ? "assemblies" : string.Empty);
+            string asmPath = Path.Combine(rootDir, frameworkName, frameworkVersion);
 
             env.CreateFolder(redistPath);
             env.CreateFolder(asmPath);
diff --git a/src/Utilities.UnitTests/ToolTask_Tests.cs b/src/Utilities.UnitTests/ToolTask_Tests.cs
index 1c359273b56..822c68ad317 100644
--- a/src/Utilities.UnitTests/ToolTask_Tests.cs
+++ b/src/Utilities.UnitTests/ToolTask_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Diagnostics;
 using System.IO;
+using System.Text.RegularExpressions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
@@ -124,7 +125,7 @@ public void Regress_Mutation_UserSuppliedToolPathIsLogged()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.ToolPath = NativeMethodsShared.IsWindows ? @"C:\MyAlternatePath" : "/MyAlternatePath";
 
@@ -140,7 +141,7 @@ public void Regress_Mutation_MissingExecutableIsLogged()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.ToolPath = NativeMethodsShared.IsWindows ? @"C:\MyAlternatePath" : "/MyAlternatePath";
 
@@ -156,7 +157,7 @@ public void Regress_Mutation_WarnIfCommandLineTooLong()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
 
                 // "cmd.exe" croaks big-time when given a very long command-line.  It pops up a message box on
@@ -182,7 +183,7 @@ public void HandleExecutionErrorsWhenToolDoesntLogError()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.MockCommandLineCommands = NativeMethodsShared.IsWindows ? "/C garbagegarbagegarbagegarbage.exe" : "-c garbagegarbagegarbagegarbage.exe";
 
@@ -207,7 +208,7 @@ public void HandleExecutionErrorsWhenToolLogsError()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.MockCommandLineCommands = NativeMethodsShared.IsWindows
                                                 ? "/C echo Main.cs(17,20): error CS0168: The variable 'foo' is declared but never used"
@@ -233,7 +234,7 @@ public void HandleExecutionErrorsWhenToolLogsError()
         public void DoNotFormatTaskCommandOrMessage()
         {
             MyTool t = new MyTool();
-            MockEngine engine = new MockEngine();
+            MockEngine3 engine = new MockEngine3();
             t.BuildEngine = engine;
             // Unmatched curly would crash if they did
             t.MockCommandLineCommands = NativeMethodsShared.IsWindows
@@ -244,6 +245,37 @@ public void DoNotFormatTaskCommandOrMessage()
             engine.Errors.ShouldBe(0);
         }
 
+        /// <summary>
+        /// Process notification encoding should be consistent with console code page.
+        /// not meant to be formatted.
+        /// </summary>
+        [InlineData(0, "")]
+        [InlineData(-1, "1>&2")]
+        [Theory]
+        public void ProcessNotificationEncodingConsistentWithConsoleCodePage(int exitCode, string errorPart)
+        {
+            MyTool t = new MyTool();
+            MockEngine engine = new MockEngine();
+            t.BuildEngine = engine;
+            t.UseCommandProcessor = true;
+            t.LogStandardErrorAsError = true;
+            t.EchoOff = true;
+            t.UseUtf8Encoding = EncodingUtilities.UseUtf8Always;
+            string content = "Building Custom Rule „Éó„É≠„Ç∏„Çß„ÇØ„Éà";
+            string outputMessage = exitCode == 0 ? content : $"'{content}' {errorPart}";
+            string commandLine = $"echo {outputMessage}";
+            t.MockCommandLineCommands = commandLine;
+            t.Execute();
+            t.ExitCode.ShouldBe(exitCode);
+
+            string log = engine.Log;
+            string singleQuote = NativeMethodsShared.IsWindows ? "'" : string.Empty;
+            string displayMessage = exitCode == 0 ? content : $"ERROR : {singleQuote}{content}{singleQuote}";
+            string pattern = $"{commandLine}{Environment.NewLine}\\s*{displayMessage}";
+            Regex regex = new Regex(pattern);
+            regex.Matches(log).Count.ShouldBe(1, $"{log} doesn't contain the log matching the pattern: {pattern}");
+        }
+
         /// <summary>
         /// When a message is logged to the standard error stream do not error is LogStandardErrorAsError is not true or set.
         /// </summary>
@@ -252,7 +284,7 @@ public void DoNotErrorWhenTextSentToStandardError()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.MockCommandLineCommands = NativeMethodsShared.IsWindows
                                                 ? "/C Echo 'Who made you king anyways' 1>&2"
@@ -275,7 +307,7 @@ public void DoNotErrorWhenTextSentToStandardOutput()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.LogStandardErrorAsError = true;
                 t.MockCommandLineCommands = NativeMethodsShared.IsWindows
@@ -299,7 +331,7 @@ public void ErrorWhenTextSentToStandardError()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.LogStandardErrorAsError = true;
                 t.MockCommandLineCommands = NativeMethodsShared.IsWindows
@@ -324,7 +356,7 @@ public void ToolExeWinsOverToolName()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.FullToolName = NativeMethodsShared.IsWindows ? "c:\\baz\\foo.exe" : "/baz/foo.exe";
 
@@ -345,7 +377,7 @@ public void ToolExeIsFoundOnToolPath()
             string copyName = NativeMethodsShared.IsWindows ? "xcopy.exe" : "cp";
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.FullToolName = shellName;
                 string systemPath = NativeMethodsShared.IsUnixLike ? "/bin" : Environment.GetFolderPath(Environment.SpecialFolder.System);
@@ -372,7 +404,7 @@ public void TaskNotFoundOnPath()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 t.FullToolName = "doesnotexist.exe";
 
@@ -392,7 +424,7 @@ public void TaskFoundOnPath()
         {
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 string toolName = NativeMethodsShared.IsWindows ? "cmd.exe" : "sh";
                 t.FullToolName = toolName;
@@ -418,7 +450,7 @@ public void OverrideStdOutImportanceToLow()
 
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 engine.MinimumMessageImportance = MessageImportance.High;
 
                 t.BuildEngine = engine;
@@ -446,7 +478,7 @@ public void OverrideStdOutImportanceToHigh()
 
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 engine.MinimumMessageImportance = MessageImportance.High;
 
                 t.BuildEngine = engine;
@@ -480,7 +512,7 @@ public void ToolTaskCanChangeCanonicalErrorFormat()
 
             using (MyTool t = new MyTool())
             {
-                MockEngine engine = new MockEngine();
+                MockEngine3 engine = new MockEngine3();
                 t.BuildEngine = engine;
                 // The command we're giving is the command to spew the contents of the temp
                 // file we created above.
@@ -510,7 +542,7 @@ public void ToolTaskCanChangeCanonicalErrorFormat()
         public void EnvironmentVariablesToToolTask()
         {
             MyTool task = new MyTool();
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             string userVarName = NativeMethodsShared.IsWindows ? "username" : "user";
             task.EnvironmentVariables = new[] { "a=b", "c=d", userVarName + "=x" /* built-in */, "path=" /* blank value */};
             bool result = task.Execute();
@@ -541,7 +573,7 @@ public void EnvironmentVariablesToToolTask()
         public void EnvironmentVariablesToToolTaskEqualsSign()
         {
             MyTool task = new MyTool();
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             task.EnvironmentVariables = new[] { "a=b=c" };
             bool result = task.Execute();
 
@@ -556,7 +588,7 @@ public void EnvironmentVariablesToToolTaskEqualsSign()
         public void EnvironmentVariablesToToolTaskInvalid1()
         {
             MyTool task = new MyTool();
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             task.EnvironmentVariables = new[] { "x" };
             bool result = task.Execute();
 
@@ -571,7 +603,7 @@ public void EnvironmentVariablesToToolTaskInvalid1()
         public void EnvironmentVariablesToToolTaskInvalid2()
         {
             MyTool task = new MyTool();
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             task.EnvironmentVariables = new[] { "" };
             bool result = task.Execute();
 
@@ -586,7 +618,7 @@ public void EnvironmentVariablesToToolTaskInvalid2()
         public void EnvironmentVariablesToToolTaskInvalid3()
         {
             MyTool task = new MyTool();
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             task.EnvironmentVariables = new[] { "=a;b=c" };
             bool result = task.Execute();
 
@@ -601,7 +633,7 @@ public void EnvironmentVariablesToToolTaskInvalid3()
         public void EnvironmentVariablesToToolTaskNotSet()
         {
             MyTool task = new MyTool();
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             task.EnvironmentVariables = null;
             bool result = task.Execute();
 
@@ -633,7 +665,7 @@ public void ToolPathIsFoundWhenDirectoryExistsWithNameOfTool()
 
                     MyTool task = new MyTool
                     {
-                        BuildEngine = new MockEngine(),
+                        BuildEngine = new MockEngine3(),
                         FullToolName = toolName,
                     };
                     bool result = task.Execute();
@@ -683,7 +715,7 @@ public void GetProcessStartInfoCanOverrideEnvironmentVariables()
             MyTool task = new MyTool();
             task.DoProcessStartInfoMutation = (p) => p.Environment.Remove("a");
 
-            task.BuildEngine = new MockEngine();
+            task.BuildEngine = new MockEngine3();
             task.EnvironmentVariables = new[] { "a=b" };
             bool result = task.Execute();
 
@@ -695,7 +727,7 @@ public void GetProcessStartInfoCanOverrideEnvironmentVariables()
         public void VisualBasicLikeEscapedQuotesInCommandAreNotMadeForwardSlashes()
         {
             MyTool t = new MyTool();
-            MockEngine engine = new MockEngine();
+            MockEngine3 engine = new MockEngine3();
             t.BuildEngine = engine;
             t.MockCommandLineCommands = NativeMethodsShared.IsWindows
                                             ? "/C echo \"hello \\\"world\\\"\""
@@ -779,7 +811,7 @@ public void ToolTaskCanUseUnicode(string environmentVariableName, string environ
 
             var output = testEnvironment.ExpectFile();
 
-            MockEngine engine = new MockEngine();
+            MockEngine3 engine = new MockEngine3();
 
             var task = new ToolTaskThatNeedsUnicode
             {
@@ -846,7 +878,7 @@ public void SetsTerminationTimeoutCorrectly(int timeout, bool isInvalidValid)
             // Task under test:
             var task = new ToolTaskSetsTerminationTimeout
             {
-                BuildEngine = new MockEngine()
+                BuildEngine = new MockEngine3()
             };
 
             task.TerminationTimeout = timeout;
@@ -874,7 +906,7 @@ public void ToolTaskThatTimeoutAndRetry(int repeats, int initialDelay, int follo
         {
             using var env = TestEnvironment.Create(_output);
 
-            MockEngine engine = new();
+            MockEngine3 engine = new();
 
             // Task under test:
             var task = new ToolTaskThatSleeps
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index d9db9e78b7b..3d09fe07dd1 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -318,7 +318,7 @@ static void Main(string[] args)
                 codeFile = FileUtilities.GetTemporaryFileName();
                 File.WriteAllText(codeFile, codeContent);
                 Csc csc = new Csc();
-                csc.BuildEngine = new MockEngine();
+                csc.BuildEngine = new MockEngine3();
                 csc.Sources = new ITaskItem[] { new TaskItem(codeFile) };
                 csc.OutputAssembly = new TaskItem(outputFile);
                 csc.Execute();
@@ -423,7 +423,7 @@ public void FileTrackerFindStrInIncludeDuplicates()
                 string codeContent = @"using System.IO; class X { static void Main() { File.ReadAllText(@""" + inputPath + @"""); File.ReadAllText(@""" + inputPath + @"""); }}";
                 File.WriteAllText(codeFile, codeContent);
                 Csc csc = new Csc();
-                csc.BuildEngine = new MockEngine();
+                csc.BuildEngine = new MockEngine3();
                 csc.Sources = new[] { new TaskItem(codeFile) };
                 csc.OutputAssembly = new TaskItem(outputFile);
                 csc.Execute();
@@ -484,7 +484,7 @@ static void Main()
 
                 File.WriteAllText(codeFile, codeContent);
                 Csc csc = new Csc();
-                csc.BuildEngine = new MockEngine();
+                csc.BuildEngine = new MockEngine3();
                 csc.Sources = new[] { new TaskItem(codeFile) };
                 csc.OutputAssembly = new TaskItem(outputFile);
                 bool success = csc.Execute();
@@ -2272,7 +2272,7 @@ static void Main(string[] args)
                 string codeFile = Path.Combine(testDir, "Program.cs");
                 File.WriteAllText(codeFile, codeContent);
                 Csc csc = new Csc();
-                csc.BuildEngine = new MockEngine();
+                csc.BuildEngine = new MockEngine3();
                 csc.Sources = new ITaskItem[] { new TaskItem(codeFile) };
                 csc.OutputAssembly = new TaskItem(outputFile);
                 csc.Platform = "x86";
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 61d80f07220..a4f1f9295aa 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -2346,15 +2346,6 @@ private static IList<string> GetPathAndChainReferenceAssemblyLocations(string ta
                                 break;
                             }
                             referencePaths.Add(path);
-                            if (NativeMethodsShared.IsMono)
-                            {
-                                // On Mono, some directories contain Facades subdirectory with valid assemblies
-                                var facades = Path.Combine(path, "Facades");
-                                if (FileSystems.Default.DirectoryExists(Path.Combine(path, "Facades")))
-                                {
-                                    referencePaths.Add(facades);
-                                }
-                            }
                         }
                         else if (path == null)
                         {
@@ -3121,15 +3112,13 @@ internal static string ChainReferenceAssemblyPath(string targetFrameworkDirector
             // If the redist list does not exist then the entire chain is incorrect.
             if (!FileSystems.Default.FileExists(redistFilePath))
             {
-                // Under MONO a directory may chain to one that has no redist list
-                var chainReference = NativeMethodsShared.IsMono ? string.Empty : null;
                 lock (s_locker)
                 {
-                    s_chainedReferenceAssemblyPath[path] = chainReference;
-                    s_cachedTargetFrameworkDisplayNames[path] = chainReference;
+                    s_chainedReferenceAssemblyPath[path] = null;
+                    s_cachedTargetFrameworkDisplayNames[path] = null;
                 }
 
-                return chainReference;
+                return null;
             }
 
             string includeFramework = null;
@@ -3163,13 +3152,6 @@ internal static string ChainReferenceAssemblyPath(string targetFrameworkDirector
                                         displayName = reader.Value;
                                         continue;
                                     }
-
-                                    // Mono may redirect this to another place
-                                    if (NativeMethodsShared.IsMono && string.Equals(reader.Name, "TargetFrameworkDirectory", StringComparison.OrdinalIgnoreCase))
-                                    {
-                                        // The new folder is relative to the place where the FrameworkList.
-                                        redirectPath = Path.GetFullPath(Path.Combine(redistListFolder, FileUtilities.FixFilePath(reader.Value)));
-                                    }
                                 }
                                 while (reader.MoveToNextAttribute());
                                 reader.MoveToElement();
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index a4be487c4ee..52313983a33 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -149,6 +149,11 @@ protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix)
         /// </summary>
         private string _temporaryBatchFile;
 
+        /// <summary>
+        /// The encoding set to the console code page.
+        /// </summary>
+        private Encoding _encoding;
+
         /// <summary>
         /// Implemented by the derived class. Returns a string which is the name of the underlying .EXE to run e.g. "resgen.exe"
         /// Only used by the ToolExe getter.
@@ -229,7 +234,21 @@ public virtual string ToolExe
         /// here since processes we run don't really have much to do with our console window (and also Console.OutputEncoding
         /// doesn't return the OEM code page if the running application that hosts MSBuild is not a console application).
         /// </remarks>
-        protected virtual Encoding StandardOutputEncoding => EncodingUtilities.CurrentSystemOemEncoding;
+        protected virtual Encoding StandardOutputEncoding
+        {
+            get
+            {
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))
+                {
+                    if (_encoding != null)
+                    {
+                        // Keep the encoding of standard output & error consistent with the console code page.
+                        return _encoding;
+                    }
+                }
+                return EncodingUtilities.CurrentSystemOemEncoding;
+            }
+        }
 
         /// <summary>
         /// Overridable property specifying the encoding of the captured task standard error stream
@@ -239,7 +258,21 @@ public virtual string ToolExe
         /// here since processes we run don't really have much to do with our console window (and also Console.OutputEncoding
         /// doesn't return the OEM code page if the running application that hosts MSBuild is not a console application).
         /// </remarks>
-        protected virtual Encoding StandardErrorEncoding => EncodingUtilities.CurrentSystemOemEncoding;
+        protected virtual Encoding StandardErrorEncoding
+        {
+            get
+            {
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))
+                {
+                    if (_encoding != null)
+                    {
+                        // Keep the encoding of standard output & error consistent with the console code page.
+                        return _encoding;
+                    }
+                }
+                return EncodingUtilities.CurrentSystemOemEncoding;
+            }
+        }
 
         /// <summary>
         /// Gets the Path override value.
@@ -1417,6 +1450,10 @@ public override bool Execute()
                         }
 
                         File.AppendAllText(_temporaryBatchFile, commandLineCommands, encoding);
+                        if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))
+                        {
+                            _encoding = encoding;
+                        }
 
                         string batchFileForCommandLine = _temporaryBatchFile;
 
