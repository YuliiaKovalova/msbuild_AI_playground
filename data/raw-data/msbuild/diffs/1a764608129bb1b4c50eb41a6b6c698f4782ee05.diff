diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index 050c6d4e466..e21015b4c68 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -847,7 +847,7 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
         /// Fall-back search path on a property that is not valid. https://github.com/dotnet/msbuild/issues/8762
         /// </summary>
         /// <param name="projectValue">imported project value expression</param>
-        [WindowsFullFrameworkOnlyTheory]
+        [Theory]
         [InlineData("")]
         [InlineData("|")]
         public void FallbackImportWithInvalidProjectValue(string projectValue)
@@ -861,22 +861,23 @@ public void FallbackImportWithInvalidProjectValue(string projectValue)
                 </Project>
                 """;
 
-            string mainProjectPath = null;
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+            string mainProjectPath = testEnvironment.CreateTestProjectWithFiles("main.proj", mainTargetsFileContent).ProjectFile;
+            var projectCollection = GetProjectCollection();
+            projectCollection.ResetToolsetsForTests(WriteConfigFileAndGetReader("VSToolsPath", "temp"));
+            var logger = new MockLogger();
+            projectCollection.RegisterLogger(logger);
+            Assert.Throws<InvalidProjectFileException>(() => projectCollection.LoadProject(mainProjectPath));
 
-            try
+            if (string.IsNullOrEmpty(projectValue))
             {
-                mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", mainTargetsFileContent);
-                var projectCollection = GetProjectCollection();
-                projectCollection.ResetToolsetsForTests(WriteConfigFileAndGetReader("VSToolsPath", "temp"));
-                var logger = new MockLogger();
-                projectCollection.RegisterLogger(logger);
-
-                Assert.Throws<InvalidProjectFileException>(() => projectCollection.LoadProject(mainProjectPath));
                 logger.AssertLogContains("MSB4102");
             }
-            finally
+            else
             {
-                FileUtilities.DeleteNoThrow(mainProjectPath);
+#if NETFRAMEWORK
+                logger.AssertLogContains("MSB4102");
+#endif
             }
         }
 
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index ee59ed0ace9..89318337c7f 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -2553,7 +2553,7 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat
                 }
                 catch (ArgumentException ex)
                 {
-                    // https://github.com/dotnet/msbuild/issues/8762 In NET Framework, Path.* function will throw exceptions if the path contains invalid characters.
+                    // https://github.com/dotnet/msbuild/issues/8762 .Catch the exceptions when extensionsPathPropValue is null or importExpandedWithDefaultPath is empty. In NET Framework, Path.* function also throws exceptions if the path contains invalid characters.
                     ProjectErrorUtilities.ThrowInvalidProject(importElement.Location, "InvalidAttributeValueWithException", importExpandedWithDefaultPath, XMakeAttributes.project, XMakeElements.import, ex.Message);
                     return;
                 }
