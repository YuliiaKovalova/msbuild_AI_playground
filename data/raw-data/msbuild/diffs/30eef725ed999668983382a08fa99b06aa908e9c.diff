diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 952cf063c7a..69b3aa8aae8 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1732,7 +1732,7 @@ internal static void GatherCommandLineSwitches(ArrayList commandLineArgs, Comman
                                 // So if we get a high core count on Windows, double-check it.
                                 if (numberOfCpus >= 32 && NativeMethodsShared.IsWindows)
                                 {
-                                    var result = NativeMethodsShared.GetPhysicalCoreCount();
+                                    var result = NativeMethodsShared.GetLogicalCoreCount();
                                     if(result != -1)
                                         numberOfCpus = result;
                                 }
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index e9fba905e9b..906d8f4486c 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -502,7 +502,7 @@ public SystemInformationData()
         /// as Environment.ProcessorCount has a 32-core limit in that case. 
         /// https://github.com/dotnet/runtime/blob/221ad5b728f93489655df290c1ea52956ad8f51c/src/libraries/System.Runtime.Extensions/src/System/Environment.Windows.cs#L171-L210
         /// </summary>
-        public unsafe static int GetPhysicalCoreCount()
+        public unsafe static int GetLogicalCoreCount()
         {
             uint len = 0;
             const int ERROR_INSUFFICIENT_BUFFER = 122;
