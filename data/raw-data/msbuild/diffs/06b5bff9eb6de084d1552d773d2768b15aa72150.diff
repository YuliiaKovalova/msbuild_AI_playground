diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index da4e8adc444..8a33ff373f7 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -804,8 +804,9 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn
         [InlineData(@"%DRIVE%:\**\*.cs")]
         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)
         {
-            var mappedDrive = GetDummyMappedDrive();
-            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, mappedDrive.MappedDriveLetter);
+            var mappedDriveUtils = new DummyMappedDriveUtils(_mappedDrive);
+            var mappedDrive = mappedDriveUtils.GetDummyMappedDrive();
+            unevaluatedInclude = mappedDriveUtils.UpdatePathToMappedDrive(unevaluatedInclude, mappedDrive.MappedDriveLetter);
             ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
         }
 
@@ -898,35 +899,14 @@ public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent
             @"%DRIVE%:\$(Microsoft_WindowsAzure_EngSys)**")]
         public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
         {
-            var mappedDrive = GetDummyMappedDrive();
-            placeHolder = UpdatePathToMappedDrive(placeHolder, mappedDrive.MappedDriveLetter);
-            excludePlaceHolder = UpdatePathToMappedDrive(excludePlaceHolder, mappedDrive.MappedDriveLetter);
+            var mappedDriveUtils = new DummyMappedDriveUtils(_mappedDrive);
+            _mappedDrive = mappedDriveUtils.GetDummyMappedDrive();
+            placeHolder = mappedDriveUtils.UpdatePathToMappedDrive(placeHolder, _mappedDrive.MappedDriveLetter);
+            excludePlaceHolder = mappedDriveUtils.UpdatePathToMappedDrive(excludePlaceHolder, _mappedDrive.MappedDriveLetter);
             content = string.Format(content, placeHolder, excludePlaceHolder);
             CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
         }
 
-        private DummyMappedDrive GetDummyMappedDrive()
-        {
-            if (NativeMethods.IsWindows)
-            {
-                // let's create the mapped drive only once it's needed by any test, then let's reuse;
-                _mappedDrive ??= new DummyMappedDrive();
-            }
-
-            return _mappedDrive;
-        }
-
-        private static string UpdatePathToMappedDrive(string path, char driveLetter)
-        {
-            const string drivePlaceholder = "%DRIVE%";
-            // if this seems to be rooted path - replace with the dummy mount
-            if (!string.IsNullOrEmpty(path) && path.StartsWith(drivePlaceholder))
-            {
-                path = driveLetter + path.Substring(drivePlaceholder.Length);
-            }
-            return path;
-        }
-
         [UnixOnlyTheory]
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/8373")]
         [InlineData(
@@ -968,7 +948,7 @@ private static void CreateProjectInstanceFromFileWithDriveEnumeratingWildcard(Te
         {
             try
             {
-                // Reset state 
+                // Reset state
                 Helpers.ResetStateForDriveEnumeratingWildcardTests(env, throwException ? "1" : "0");
 
                 if (throwException)
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 57cba86c10c..f70d2b50fdb 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -81,6 +81,7 @@
     <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
     <Compile Include="..\UnitTests.Shared\DriveMapping.cs" />
     <Compile Include="..\UnitTests.Shared\DummyMappedDrive.cs" />
+    <Compile Include="..\UnitTests.Shared\DummyMappedDriveUtils.cs"/>
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
       <SubType>Designer</SubType>
diff --git a/src/UnitTests.Shared/DummyMappedDriveUtils.cs b/src/UnitTests.Shared/DummyMappedDriveUtils.cs
new file mode 100644
index 00000000000..5189ed28a96
--- /dev/null
+++ b/src/UnitTests.Shared/DummyMappedDriveUtils.cs
@@ -0,0 +1,39 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#nullable enable
+using System;
+using Microsoft.Build.Framework;
+using Microsoft.Build.UnitTests.Shared;
+
+namespace Microsoft.Build.UnitTests.Shared;
+
+public class DummyMappedDriveUtils
+{
+    private DummyMappedDrive _mappedDrive;
+
+    public DummyMappedDriveUtils(DummyMappedDrive mappedDrive)
+    {
+        _mappedDrive = mappedDrive;
+    }
+
+    public DummyMappedDrive GetDummyMappedDrive()
+    {
+        if (NativeMethods.IsWindows)
+        {
+            _mappedDrive ??= new DummyMappedDrive();
+        }
+
+        return _mappedDrive;
+    }
+    public string UpdatePathToMappedDrive(string path, char driveLetter)
+    {
+        const string drivePlaceholder = "%DRIVE%";
+        // if this seems to be rooted path - replace with the dummy mount
+        if (!string.IsNullOrEmpty(path) && path.StartsWith(drivePlaceholder))
+        {
+            path = driveLetter + path.Substring(drivePlaceholder.Length);
+        }
+        return path;
+    }
+}
