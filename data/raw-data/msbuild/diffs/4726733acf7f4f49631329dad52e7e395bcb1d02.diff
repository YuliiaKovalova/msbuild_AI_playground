diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 6282d833a0c..655102699a7 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -222,16 +222,12 @@ public void TestBinaryLoggerRoundtripEquality(string projectText, BinlogRoundtri
                 logReader.BuildFinished += (_, _) => { };
             }
 
-            _logFile = @"C:\tmp\trash\console\packed.binlog";
-
             BinaryLogger outputBinlog = new BinaryLogger()
             {
                 Parameters = $"LogFile={replayedLogFile};ProjectImports=Replay;OmitInitialInfo"
             };
             outputBinlog.Initialize(logReader);
             logReader.Replay(_logFile);
-            // TODO: remove here
-            // logReader.Replay(originalBuildEventsReader, CancellationToken.None);
             outputBinlog.Shutdown();
 
             AssertBinlogsHaveEqualContent(_logFile, replayedLogFile);
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index a4374b8bbdc..087ccebc898 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -25,11 +25,9 @@ internal interface IRawLogEventsSource
         /// At this point all other possible subscribers should be already subscribed -
         ///  so it can be determined if raw events or structured events should be replayed.
         /// </summary>
-        /// <param name="onFileFormatVersionRead"></param>
         /// <param name="onRawReadingPossible"></param>
         /// <param name="onStructuredReadingOnly"></param>
         void DeferredInitialize(
-            Action<int> onFileFormatVersionRead,
             Action onRawReadingPossible,
             Action onStructuredReadingOnly);
     }
@@ -195,7 +193,6 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
                 _onRawReadingPossible?.Invoke();
             }
 
-            _fileFormatVersionRead?.Invoke(reader.FileFormatVersion);
             reader.EmbeddedContentRead += _embeddedContentRead;
             reader.StringReadDone += _stringReadDone;
 
@@ -237,18 +234,15 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
 
         /// <inheritdoc cref="IRawLogEventsSource.DeferredInitialize"/>
         void IRawLogEventsSource.DeferredInitialize(
-            Action<int> onFileFormatVersionRead,
             Action onRawReadingPossible,
             Action onStructuredReadingOnly)
         {
-            this._fileFormatVersionRead += onFileFormatVersionRead;
             this._onRawReadingPossible += onRawReadingPossible;
             this._onStructuredReadingOnly += onStructuredReadingOnly;
         }
 
         private Action? _onRawReadingPossible;
         private Action? _onStructuredReadingOnly;
-        private Action<int>? _fileFormatVersionRead;
         private Action<EmbeddedContentEventArgs>? _embeddedContentRead;
         /// <inheritdoc cref="IEmbeddedContentSource.EmbeddedContentRead"/>
         event Action<EmbeddedContentEventArgs>? IEmbeddedContentSource.EmbeddedContentRead
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index f1f684d2a97..fd3c8d5e3ca 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -199,6 +199,8 @@ public void Initialize(IEventSource eventSource)
                 eventArgsWriter.EmbedFile += EventArgsWriter_EmbedFile;
             }
 
+            binaryWriter.Write(FileFormatVersion);
+
             if (eventSource is IBinaryLogReplaySource replayEventsSource)
             {
                 if (CollectProjectImports == ProjectImportsCollectionMode.Replay)
@@ -211,7 +213,6 @@ public void Initialize(IEventSource eventSource)
                 // But other subscribers can later on subscribe to structured events -
                 //  for this reason we do only subscribe delayed.
                 replayEventsSource.DeferredInitialize(
-                    version => binaryWriter.Write(version),
                     // For raw events we cannot write the initial info - as we cannot write
                     //  at the same time as raw events are being written - this would break the deduplicated strings store.
                     () =>
@@ -224,7 +225,6 @@ public void Initialize(IEventSource eventSource)
             }
             else
             {
-                binaryWriter.Write(FileFormatVersion);
                 SubscribeToStructuredEvents();
             }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 245d9adcdd4..2ca7dbbbb87 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -272,7 +272,7 @@ public void Dispose()
                     default:
                         OnRecoverableReadError?.Invoke(
                             $"BuildEvent record number {recordNumber} (serialized size: {serializedEventLength}) is of unsupported type: {recordKind}.{(SkipUnknownEvents ? " Skipping it." : string.Empty)}");
-                        if (SkipUnknownEvents)
+                        if (SkipUnknownEvents && serializedEventLength > 0)
                         {
                             SkipBytes(serializedEventLength);
                         }
