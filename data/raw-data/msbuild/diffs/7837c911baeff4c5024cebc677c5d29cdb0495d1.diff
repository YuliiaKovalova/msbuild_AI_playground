diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 9f7340ddab2..6683aee819d 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -13,16 +13,12 @@ internal class LiveLogger : ILogger
         private Dictionary<int, ProjectNode> projects = new Dictionary<int, ProjectNode>();
 
         private bool Succeeded;
-
-        private float existingTasks = 1;
-        private float completedTasks = 0;
-        private int completedProjects = 0;
-        private TerminalBufferLine? finishedProjectsLine;
-        private Dictionary<string, string> blockedProjects = new();
-
         public string Parameters { get; set; }
-
+        public int StartedProjects = 0;
+        public int FinishedProjects = 0;
         public LoggerVerbosity Verbosity { get; set; }
+        private TerminalBufferLine? finishedProjectsLine;
+        private Dictionary<string, string> blockedProjects = new();
 
         public LiveLogger()
         {
@@ -63,7 +59,7 @@ private void Render()
             TerminalBuffer.WriteNewLine(string.Empty);
 
             // Top line indicates the number of finished projects.
-            finishedProjectsLine = TerminalBuffer.WriteNewLine($"{completedProjects} projects finished building.");
+            finishedProjectsLine = TerminalBuffer.WriteNewLine($"{FinishedProjects} projects finished building.");
 
             // First render
             TerminalBuffer.Render();
@@ -112,6 +108,15 @@ private void Render()
             }
         }
 
+        private void UpdateFooter()
+        {
+            float percentage = (float)FinishedProjects / StartedProjects;
+            TerminalBuffer.FooterText = ANSIBuilder.Alignment.SpaceBetween(
+                $"Build progress (approx.) [{ANSIBuilder.Graphics.ProgressBar(percentage)}]",
+                ANSIBuilder.Formatting.Italic(ANSIBuilder.Formatting.Dim("[Up][Down] Scroll")),
+                Console.BufferWidth);
+        }
+
         // Build
         private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         {
@@ -125,6 +130,7 @@ private void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         // Project
         private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
+            StartedProjects++;
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
             // If id already exists...
@@ -136,14 +142,13 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e
             ProjectNode node = new ProjectNode(e);
             projects[id] = node;
             // Log
+            // Update footer
+            UpdateFooter();
             node.ShouldRerender = true;
         }
 
         private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
-            completedProjects++;
-            finishedProjectsLine!.Text = $"{completedProjects} projects finished building.";
-
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
             if (!projects.TryGetValue(id, out ProjectNode? node))
@@ -152,7 +157,9 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs
             }
             // Update line
             node.Finished = true;
-            // Log
+            FinishedProjects++;
+            finishedProjectsLine!.Text = $"{FinishedProjects} projects finished building.";
+            UpdateFooter();
             node.ShouldRerender = true;
         }
 
@@ -196,20 +203,17 @@ private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             }
             // Update
             node.AddTask(e);
-            existingTasks++;
+            // Log
+            node.ShouldRerender = true;
 
             if (e.TaskName.Equals("MSBuild"))
             {
                 blockedProjects[e.ProjectFile] = "Blocked by MSBuild task";
             }
-
-            // Log
-            node.ShouldRerender = true;
         }
 
         private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
-            completedTasks++;
         }
 
         // Raised messages, warnings and errors
diff --git a/src/MSBuild/LiveLogger/TerminalBuffer.cs b/src/MSBuild/LiveLogger/TerminalBuffer.cs
index 68164bc0342..b4268af4c8b 100644
--- a/src/MSBuild/LiveLogger/TerminalBuffer.cs
+++ b/src/MSBuild/LiveLogger/TerminalBuffer.cs
@@ -57,6 +57,7 @@ public TerminalBufferLine(string text, bool shouldWrapLines)
     internal class TerminalBuffer
     {
         private static List<TerminalBufferLine> Lines = new();
+        public static string FooterText = string.Empty;
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
         internal static bool IsTerminated = false;
@@ -102,9 +103,8 @@ public static void Render()
                 ANSIBuilder.Cursor.Home() +
                 ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress")) +
                 // Write footer
-                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
-                // TODO: Remove and replace with actual footer
-                new string('-', Console.BufferWidth) + $"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}");
+                ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) + ANSIBuilder.Eraser.LineCursorToEnd() +
+                new string('-', Console.BufferWidth) + '\n' + FooterText);
 
             if (Lines.Count == 0)
             {
