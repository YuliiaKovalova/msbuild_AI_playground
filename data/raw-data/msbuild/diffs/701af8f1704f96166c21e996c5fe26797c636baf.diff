diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index d4c6b00c07d..bb6d75a9578 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using System.IO;
 #if FEATURE_APPDOMAIN
 using System.Runtime.Remoting;
 #endif
@@ -115,7 +116,7 @@ IDictionary<string, TaskParameter> taskParams
             try
             {
                 TypeLoader typeLoader = new TypeLoader(TaskLoader.IsTaskClass);
-                taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation), false).LoadedType;
+                taskType = typeLoader.Load(taskName, Path.IsPathRooted(taskLocation) ? AssemblyLoadInfo.Create(null, taskLocation) : AssemblyLoadInfo.Create(taskLocation, null), false).LoadedType;
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 0f26eb588c3..5b021a014d2 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -893,7 +893,7 @@ private void RunTask(object state)
 
                 taskResult = _taskWrapper.ExecuteTask
                 (
-                    this as IBuildEngine,
+                    this,
                     taskName,
                     taskLocation,
                     taskConfiguration.ProjectFileOfTask,
diff --git a/src/Shared/AssemblyLoadInfo.cs b/src/Shared/AssemblyLoadInfo.cs
index 014d7d411df..afc0e96568b 100644
--- a/src/Shared/AssemblyLoadInfo.cs
+++ b/src/Shared/AssemblyLoadInfo.cs
@@ -174,7 +174,7 @@ private sealed class AssemblyLoadInfoWithFile : AssemblyLoadInfo
             /// </summary>
             internal AssemblyLoadInfoWithFile(string assemblyFile)
             {
-                ErrorUtilities.VerifyThrow(Path.IsPathRooted(assemblyFile), "Assembly file path should be rooted");
+                ErrorUtilities.VerifyThrow(Path.IsPathRooted(assemblyFile), $"Assembly file path should be rooted: {assemblyFile}");
 
                 _assemblyFile = assemblyFile;
             }
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index 3476a6146c6..d7ca8293148 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -110,7 +110,7 @@ internal static ITask CreateTask(TypeInformation typeInformation, string taskNam
 
                         taskAppDomain = AppDomain.CreateDomain(isOutOfProc ? "taskAppDomain (out-of-proc)" : "taskAppDomain (in-proc)", null, appDomainInfo);
 
-                        if (typeInformation.LoadedType.LoadedAssembly != null)
+                        if (typeInformation.LoadedType?.LoadedAssembly != null)
                         {
                             taskAppDomain.Load(typeInformation.AssemblyName);
                         }
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index c233a0e27b4..5e6680cfa60 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Collections.Immutable;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
@@ -421,10 +422,14 @@ private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string
                                 {
                                     TypeInformationPropertyInfo toAdd = new();
                                     toAdd.Name = metadataReader.GetString(propertyDefinition.Name);
+                                    SignatureDecoder<string, object> decoder = new(ConstantSignatureVisualizer.Instance, metadataReader, genericContext: null);
+                                    BlobReader blob = metadataReader.GetBlobReader(propertyDefinition.Signature);
+                                    MethodSignature<string> signature = decoder.DecodeMethodSignature(ref blob);
+                                    toAdd.PropertyType = StringToType(signature.ReturnType);
                                     //MethodSignature<RuntimeTypeInfo> sign = propertyDefinition.DecodeSignature<RuntimeTypeInfo, TypeContext>(new SignatureDecoder<RuntimeTypeInfo, TypeContext>(), null);
                                     //toAdd.PropertyType = sign.ReturnType ?? sign.ParameterTypes[0];
-                                    byte[] bytes = metadataReader.GetBlobReader(propertyDefinition.Signature).ReadBytes(metadataReader.GetBlobReader(propertyDefinition.Signature).Length);
-                                    toAdd.PropertyType = ByteSignatureToType(bytes);
+                                    //byte[] bytes = metadataReader.GetBlobReader(propertyDefinition.Signature).ReadBytes(metadataReader.GetBlobReader(propertyDefinition.Signature).Length);
+                                    //toAdd.PropertyType = ByteSignatureToType(bytes);
                                     toAdd.OutputAttribute = false;
                                     toAdd.RequiredAttribute = false;
                                     foreach (CustomAttributeHandle attr in propertyDefinition.GetCustomAttributes())
@@ -550,6 +555,83 @@ private Type ByteSignatureToType(byte[] bytes)
                 };
             }
 
+            private Type StringToType(string s)
+            {
+                //return Type.GetType(s, false, true) ?? typeof(object);
+                return s switch
+                {
+                    "String" => typeof(String),
+                    "Microsoft.Build.Framework.ITaskItem" => typeof(ITaskItem),
+                    "Boolean" => typeof(Boolean),
+                    "Int32" => typeof(Int32),
+                    "Char" => typeof(Char),
+                    "Single" => typeof(Single),
+                    "Int64" => typeof(Int64),
+                    "Double" => typeof(Double),
+                    "Byte" => typeof(Byte),
+                    "SByte" => typeof(SByte),
+                    "Decimal" => typeof(Decimal),
+                    "UInt32" => typeof(UInt32),
+                    "IntPtr" => typeof(IntPtr),
+                    "UIntPtr" => typeof(UIntPtr),
+                    "UInt64" => typeof(UInt64),
+                    "Int16" => typeof(Int16),
+                    "UInt16" => typeof(UInt16),
+                    "String[]" => typeof(String[]),
+                    "Microsoft.Build.Framework.ITaskItem[]" => typeof(ITaskItem[]),
+                    "Boolean[]" => typeof(Boolean[]),
+                    "Int32[]" => typeof(Int32[]),
+                    "Char[]" => typeof(Char[]),
+                    "Single[]" => typeof(Single[]),
+                    "Int64[]" => typeof(Int64[]),
+                    "Double[]" => typeof(Double[]),
+                    "Byte[]" => typeof(Byte[]),
+                    "SByte[]" => typeof(SByte[]),
+                    "Decimal[]" => typeof(Decimal[]),
+                    "UInt32[]" => typeof(UInt32[]),
+                    "IntPtr[]" => typeof(IntPtr[]),
+                    "UIntPtr[]" => typeof(UIntPtr[]),
+                    "UInt64[]" => typeof(UInt64[]),
+                    "Int16[]" => typeof(Int16[]),
+                    "UInt16[]" => typeof(UInt16[]),
+                    "String?" => typeof(String),
+                    "Microsoft.Build.Framework.ITaskItem?" => typeof(ITaskItem),
+                    "Boolean?" => typeof(Boolean?),
+                    "Int32?" => typeof(Int32?),
+                    "Char?" => typeof(Char?),
+                    "Single?" => typeof(Single?),
+                    "Int64?" => typeof(Int64?),
+                    "Double?" => typeof(Double?),
+                    "Byte?" => typeof(Byte?),
+                    "SByte?" => typeof(SByte?),
+                    "Decimal?" => typeof(Decimal?),
+                    "UInt32?" => typeof(UInt32?),
+                    "IntPtr?" => typeof(IntPtr?),
+                    "UIntPtr?" => typeof(UIntPtr?),
+                    "UInt64?" => typeof(UInt64?),
+                    "Int16?" => typeof(Int16?),
+                    "UInt16?" => typeof(UInt16?),
+                    "String?[]" => typeof(String[]),
+                    "Microsoft.Build.Framework.ITaskItem?[]" => typeof(ITaskItem[]),
+                    "Boolean?[]" => typeof(Boolean?[]),
+                    "Int32?[]" => typeof(Int32?[]),
+                    "Char?[]" => typeof(Char?[]),
+                    "Single?[]" => typeof(Single?[]),
+                    "Int64?[]" => typeof(Int64?[]),
+                    "Double?[]" => typeof(Double?[]),
+                    "Byte?[]" => typeof(Byte?[]),
+                    "SByte?[]" => typeof(SByte?[]),
+                    "Decimal?[]" => typeof(Decimal?[]),
+                    "UInt32?[]" => typeof(UInt32?[]),
+                    "IntPtr?[]" => typeof(IntPtr?[]),
+                    "UIntPtr?[]" => typeof(UIntPtr?[]),
+                    "UInt64?[]" => typeof(UInt64?[]),
+                    "Int16?[]" => typeof(Int16?[]),
+                    "UInt16?[]" => typeof(UInt16?[]),
+                    _ => typeof(object),
+                };
+            }
+
             /// <summary>
             /// Scan the assembly pointed to by the assemblyLoadInfo for public types. We will use these public types to do partial name matching on 
             /// to find tasks, loggers, and task factories.
@@ -571,5 +653,64 @@ private void ScanAssemblyForPublicTypes()
                 }
             }
         }
+
+        // Copied from https://github.com/dotnet/roslyn/blob/a9027f3d3bddcd77eb3c97bf0caba61335c08426/src/Compilers/Test/Core/Metadata/MetadataReaderUtils.cs#L405
+        private sealed class ConstantSignatureVisualizer : ISignatureTypeProvider<string, object>
+        {
+            public static readonly ConstantSignatureVisualizer Instance = new();
+
+            public string GetArrayType(string elementType, ArrayShape shape)
+                => elementType + "[" + new string(',', shape.Rank) + "]";
+
+            public string GetByReferenceType(string elementType)
+                => elementType + "&";
+
+            public string GetFunctionPointerType(MethodSignature<string> signature)
+                => "method-ptr";
+
+            public string GetGenericInstantiation(string genericType, ImmutableArray<string> typeArguments)
+                => genericType + "{" + string.Join(", ", typeArguments) + "}";
+
+            public string GetGenericMethodParameter(object genericContext, int index)
+                => "!!" + index;
+
+            public string GetGenericTypeParameter(object genericContext, int index)
+                => "!" + index;
+
+            public string GetModifiedType(string modifier, string unmodifiedType, bool isRequired)
+                => (isRequired ? "modreq" : "modopt") + "(" + modifier + ") " + unmodifiedType;
+
+            public string GetPinnedType(string elementType)
+                => "pinned " + elementType;
+
+            public string GetPointerType(string elementType)
+                => elementType + "*";
+
+            public string GetPrimitiveType(PrimitiveTypeCode typeCode)
+                => typeCode.ToString();
+
+            public string GetSZArrayType(string elementType)
+                => elementType + "[]";
+
+            public string GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind)
+            {
+                var typeDef = reader.GetTypeDefinition(handle);
+                var name = reader.GetString(typeDef.Name);
+                return typeDef.Namespace.IsNil ? name : reader.GetString(typeDef.Namespace) + "." + name;
+            }
+
+            public string GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind)
+            {
+                var typeRef = reader.GetTypeReference(handle);
+                var name = reader.GetString(typeRef.Name);
+                return typeRef.Namespace.IsNil ? name : reader.GetString(typeRef.Namespace) + "." + name;
+            }
+
+            public string GetTypeFromSpecification(MetadataReader reader, object genericContext, TypeSpecificationHandle handle, byte rawTypeKind)
+            {
+                var sigReader = reader.GetBlobReader(reader.GetTypeSpecification(handle).Signature);
+                return new SignatureDecoder<string, object>(Instance, reader, genericContext).DecodeType(ref sigReader);
+            }
+        }
     }
 }
