diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index d8b2c66c98d..eea2401dca9 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -166,6 +166,10 @@ internal static class ItemMetadataNames
         internal const string subType = "SubType";
         internal const string executableExtension = "ExecutableExtension";
         internal const string embedInteropTypes = "EmbedInteropTypes";
+
+        /// <summary>
+        /// The output path for a given item.
+        /// </summary>
         internal const string targetPath = "TargetPath";
         internal const string dependentUpon = "DependentUpon";
         internal const string msbuildSourceProjectFile = "MSBuildSourceProjectFile";
diff --git a/src/Tasks/AssignTargetPath.cs b/src/Tasks/AssignTargetPath.cs
index ffb085cfcf6..438bcecabd5 100644
--- a/src/Tasks/AssignTargetPath.cs
+++ b/src/Tasks/AssignTargetPath.cs
@@ -71,13 +71,20 @@ public override bool Execute()
 
                 for (int i = 0; i < Files.Length; ++i)
                 {
-                    string link = Files[i].GetMetadata(ItemMetadataNames.link);
                     AssignedFiles[i] = new TaskItem(Files[i]);
+                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPath);
 
-                    // If file has a link, use that.
-                    string targetPath = link;
+                    // If TargetPath is already set, copy it over.
+                    // https://github.com/dotnet/msbuild/issues/2795
+                    if (!string.IsNullOrEmpty(targetPath))
+                    {
+                        AssignedFiles[i].SetMetadata(ItemMetadataNames.targetPath, EscapingUtilities.Escape(targetPath));
+                        continue;
+                    }
+
+                    targetPath = Files[i].GetMetadata(ItemMetadataNames.link);
 
-                    if (string.IsNullOrEmpty(link))
+                    if (string.IsNullOrEmpty(targetPath))
                     {
                         if (// if the file path is relative
                             !Path.IsPathRooted(Files[i].ItemSpec) &&
