diff --git a/eng/Packages.props b/eng/Packages.props
index 30ae007906c..2f3f2796438 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -11,6 +11,7 @@
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.15" />
     <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="1.16.30" />
     <PackageReference Update="Microsoft.Win32.Registry" Version="4.3.0" />
+    <PackageReference Update="Newtonsoft.Json" Version="9.0.1" />
     <PackageReference Update="NuGet.Build.Tasks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="PdbGit" Version="3.0.41" />
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index fa1585b557a..4c7f04f2b13 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -1,39 +1,237 @@
 using System;
 using System.IO;
+using System.Reflection;
+using System.Runtime.Versioning;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
+using Newtonsoft.Json;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
-    public class ResolveAssemblyReferenceCacheSerialization
+    public class ResolveAssemblyReferenceCacheSerialization : IDisposable
     {
+        // Maintain this two in sync with the constant in SystemState
+        private static readonly byte[] TranslateContractSignature = new[] { (byte)'M', (byte)'B', (byte)'R', (byte)'S', (byte)'C', }; // Microsoft Build Rar State Cache
+        private static readonly byte TranslateContractVersion = 0x01;
+
+        private string _tempPath;
+        private string _rarCacheFile;
+        private TaskLoggingHelper _taskLoggingHelper;
+
+        public ResolveAssemblyReferenceCacheSerialization()
+        {
+            _tempPath = Path.GetTempPath();
+            _rarCacheFile = Path.Combine(_tempPath, Guid.NewGuid() + ".UnitTest.RarCache");
+            _taskLoggingHelper = new TaskLoggingHelper(new MockEngine(), "TaskA")
+            {
+                TaskResources = AssemblyResources.PrimaryResources
+            };
+        }
+
+        public void Dispose()
+        {
+            if (File.Exists(_rarCacheFile))
+            {
+                FileUtilities.DeleteNoThrow(_rarCacheFile);
+            }
+        }
+
         [Fact]
         public void RoundTripEmptyState()
         {
-            string rarCacheFile = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".UnitTest.RarCache");
-            var taskLoggingHelper = new TaskLoggingHelper(new MockEngine(), "TaskA");
-
             SystemState systemState = new();
 
-            systemState.SerializeCacheByTranslator(rarCacheFile, taskLoggingHelper);
+            systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
 
-            var deserialized = SystemState.DeserializeCacheByTranslator(rarCacheFile, taskLoggingHelper);
+            var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
 
             Assert.NotNull(deserialized);
         }
 
         [Fact]
-        public void RoundTripFullFileState()
+        public void WrongFileSignature()
+        {
+            SystemState systemState = new();
+
+            for (int i = 0; i < TranslateContractSignature.Length; i++)
+            {
+                systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+                using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
+                {
+                    cacheStream.Seek(i, SeekOrigin.Begin);
+                    cacheStream.WriteByte(0);
+                    cacheStream.Close();
+                }
+
+                var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+                Assert.Null(deserialized);
+            }
+        }
+
+        [Fact]
+        public void WrongFileVersion()
+        {
+            SystemState systemState = new();
+
+            systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
+            {
+                cacheStream.Seek(TranslateContractSignature.Length, SeekOrigin.Begin);
+                cacheStream.WriteByte((byte) (TranslateContractVersion + 1));
+                cacheStream.Close();
+            }
+
+            var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            Assert.Null(deserialized);
+        }
+
+        [Fact]
+        public void CorrectFileSignature()
+        {
+            SystemState systemState = new();
+
+            for (int i = 0; i < TranslateContractSignature.Length; i++)
+            {
+                systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+                using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
+                {
+                    cacheStream.Seek(i, SeekOrigin.Begin);
+                    cacheStream.WriteByte(TranslateContractSignature[i]);
+                    cacheStream.Close();
+                }
+
+                var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+                Assert.NotNull(deserialized);
+            }
+        }
+
+        [Fact]
+        public void CorrectFileVersion()
         {
+            SystemState systemState = new();
+
+            systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
+            {
+                cacheStream.Seek(TranslateContractSignature.Length, SeekOrigin.Begin);
+                cacheStream.WriteByte(TranslateContractVersion);
+                cacheStream.Close();
+            }
+
+            var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            Assert.NotNull(deserialized);
+        }
+
+        [Theory]
+        [InlineData("Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache")]
+        [InlineData("Microsoft.CodeAnalysis.csprojAssemblyReference.cache")]
+        [InlineData("Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.vbprojAssemblyReference.cache")]
+        [InlineData("Roslyn.Compilers.Extension.csprojAssemblyReference.cache")]
+        public void RoundTripSampleFileState(string sampleName)
+        {
+            var fileSample = GetTestPayloadFileName($@"AssemblyDependency\CacheFileSamples\BinaryFormatter\{sampleName}");
             // read old file
+            var deserialized = SystemState.DeserializeCacheByBinaryFormatter(fileSample, _taskLoggingHelper);
             // white as TR
+            deserialized.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
             // read as TR
-            // write as BF
-            // compare old and new BF
+            var deserializedByTranslator = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+
+            var sOld = JsonConvert.SerializeObject(deserialized, Formatting.Indented);
+            var sNew = JsonConvert.SerializeObject(deserializedByTranslator, Formatting.Indented);
+            Assert.Equal(sOld, sNew);
+        }
 
-            string rarCacheFile = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".UnitTest.RarCache");
-            var taskLoggingHelper = new TaskLoggingHelper(new MockEngine(), "TaskA");
+        [Fact]
+        public void VerifySampleStateDeserialization()
+        {
+            // This test might also fail when binary format is modified.
+            // Any change in SystemState and child class ITranslatable implementation will most probably make this fail.
+            // To fix it, file referred by 'sampleName' needs to be recaptured and constant bellow modified to reflect
+            // the content of that cache.
+            // This sample was captured by compiling https://github.com/dotnet/roslyn/commit/f8107de2a94a01e96ac3d7c1f225acbb61e18830
+            const string sampleName = "Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache";
+            const string expectedAssemblyPath = @"C:\Users\rokon\.nuget\packages\microsoft.visualstudio.codeanalysis.sdk.ui\15.8.27812-alpha\lib\net46\Microsoft.VisualStudio.CodeAnalysis.Sdk.UI.dll";
+            const long expectedAssemblyLastWriteTimeTicks = 636644382480000000;
+            const string expectedAssemblyName = "Microsoft.VisualStudio.CodeAnalysis.Sdk.UI, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
+            const string expectedFrameworkName = ".NETFramework,Version=v4.5";
+            var expectedDependencies = new[]
+            {
+                "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
+                "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
+                "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.CodeAnalysis, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.DeveloperTools, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
+                "Microsoft.VisualStudio.Shell.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "EnvDTE, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.CodeAnalysis.Sdk, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.Build.Framework, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Text.Logic, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Text.UI, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Text.Data, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Text.UI.Wpf, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.ComponentModelHost, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.VSHelp, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Shell.Interop.11.0, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.VCProjectEngine, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Shell.15.0, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.OLE.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
+                "Microsoft.VisualStudio.TextManager.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "EnvDTE80, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
+                "Microsoft.VisualStudio.VirtualTreeGrid, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Shell.Interop.8.0, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+                "Microsoft.VisualStudio.Editor, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
+            };
+
+
+            var fileSample = GetTestPayloadFileName($@"AssemblyDependency\CacheFileSamples\{sampleName}");
+            var deserializedByTranslator = SystemState.DeserializeCacheByTranslator(fileSample, _taskLoggingHelper);
+
+            deserializedByTranslator.SetGetLastWriteTime(path =>
+            {
+                if (path != expectedAssemblyPath)
+                    throw new InvalidOperationException("Unexpected file name for this test case");
+
+                return new DateTime(expectedAssemblyLastWriteTimeTicks, DateTimeKind.Utc);
+            });
+
+            GetAssemblyName getAssemblyName = deserializedByTranslator.CacheDelegate((GetAssemblyName)null);
+            GetAssemblyMetadata getAssemblyMetadata = deserializedByTranslator.CacheDelegate((GetAssemblyMetadata)null);
+
+            var assemblyName = getAssemblyName(expectedAssemblyPath);
+            getAssemblyMetadata(expectedAssemblyPath, null,
+                out AssemblyNameExtension[] dependencies,
+                out string[] scatterFiles,
+                out FrameworkName frameworkNameAttribute);
+
+            Assert.NotNull(assemblyName);
+            Assert.Equal(
+                new AssemblyNameExtension(expectedAssemblyName, false),
+                assemblyName);
+            Assert.Empty(scatterFiles);
+            Assert.Equal(
+                new FrameworkName(expectedFrameworkName),
+                frameworkNameAttribute);
+
+            Assert.NotNull(dependencies);
+            Assert.Equal(expectedDependencies.Length, dependencies.Length);
+            foreach (var expectedDependency in expectedDependencies)
+            {
+                Assert.Contains(new AssemblyNameExtension(expectedDependency), dependencies);
+            }
+        }
+
+        private static string GetTestPayloadFileName(string name)
+        {
+            var codeBaseUrl = new Uri(Assembly.GetExecutingAssembly().CodeBase);
+            var codeBasePath = Uri.UnescapeDataString(codeBaseUrl.AbsolutePath);
+            var dirPath = Path.GetDirectoryName(codeBasePath) ?? string.Empty;
+            return Path.Combine(dirPath, name);
         }
     }
 }
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 406ce641895..8f337f1b61e 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -12,6 +12,7 @@
   </PropertyGroup>
 
   <ItemGroup>
+    <PackageReference Include="Newtonsoft.Json" />
     <PackageReference Include="System.Security.Principal.Windows" />
     <PackageReference Include="System.Xml.XPath" />
     <PackageReference Include="Shouldly" />
@@ -138,6 +139,21 @@
 
   <ItemGroup>
     <None Update="ResourceHandling\*.txt" CopyToOutputDirectory="PreserveNewest" />
+    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Microsoft.CodeAnalysis.csprojAssemblyReference.cache">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
+    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.vbprojAssemblyReference.cache">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
+    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
+    <None Update="AssemblyDependency\CacheFileSamples\BinaryFormatter\Roslyn.Compilers.Extension.csprojAssemblyReference.cache">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
+    <None Update="AssemblyDependency\CacheFileSamples\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
     <None Update="TestResources\lorem.bin">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index d94d8460812..b987cebdd6b 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1911,13 +1911,7 @@ private void WriteStateFile()
         /// </summary>
         private void ReadStateFileBinaryFormatter()
         {
-            _cache = (SystemState)StateFileBase.DeserializeCache(_stateFile, Log, typeof(SystemState));
-
-            // Construct the cache if necessary.
-            if (_cache == null)
-            {
-                _cache = new SystemState();
-            }
+            _cache = SystemState.DeserializeCacheByBinaryFormatter(_stateFile, Log);
         }
 
         /// <summary>
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 9b289dfd75e..f89eb5b239e 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -39,6 +39,7 @@ internal sealed class SystemState : StateFileBase, ISerializable, ITranslatable
         /// Cache at the SystemState instance level. It is serialized and reused between instances.
         /// </summary>
         private Dictionary<string, FileState> instanceLocalFileStateCache = new Dictionary<string, FileState>(StringComparer.OrdinalIgnoreCase);
+        private Hashtable instanceLocalFileStateCacheForBfDeserialize = new Hashtable(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
         /// LastModified information is purely instance-local. It doesn't make sense to
@@ -278,17 +279,37 @@ internal SystemState(SerializationInfo info, StreamingContext context)
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
 
-            var localFilesAsHashTable = (Hashtable)info.GetValue("fileState", typeof(Hashtable));
-
-            instanceLocalFileStateCache = localFilesAsHashTable.Cast<DictionaryEntry>()
-                .ToDictionary(
-                    kvp => (string)kvp.Key,
-                    kvp => (FileState)kvp.Value,
-                    StringComparer.OrdinalIgnoreCase);
+            instanceLocalFileStateCacheForBfDeserialize = (Hashtable)info.GetValue("fileState", typeof(Hashtable));
 
             isDirty = false;
         }
 
+        /// <summary>
+        /// Deserialize cache of this class using BinaryFormatter
+        /// </summary>
+        internal static SystemState DeserializeCacheByBinaryFormatter(string stateFile, TaskLoggingHelper log)
+        {
+            SystemState systemSate  = (SystemState)StateFileBase.DeserializeCache(stateFile, log, typeof(SystemState));
+
+            // Construct the cache if necessary.
+            if (systemSate == null)
+            {
+                systemSate = new SystemState();
+            }
+
+            if (systemSate.instanceLocalFileStateCacheForBfDeserialize != null)
+            {
+                foreach (DictionaryEntry entry in systemSate.instanceLocalFileStateCacheForBfDeserialize)
+                {
+                    systemSate.instanceLocalFileStateCache.Add((string)entry.Key, (FileState)entry.Value);
+                }
+
+                systemSate.instanceLocalFileStateCacheForBfDeserialize = null;
+            }
+
+            return systemSate;
+        }
+
         /// <summary>
         /// Set the target framework paths.
         /// This is used to optimize IO in the case of files requested from one
