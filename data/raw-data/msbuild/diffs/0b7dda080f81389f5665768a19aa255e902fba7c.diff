diff --git a/eng/BootStrapMsBuild.targets b/eng/BootStrapMsBuild.targets
index 044d1bdfabe..b4b66ea6755 100644
--- a/eng/BootStrapMsBuild.targets
+++ b/eng/BootStrapMsBuild.targets
@@ -202,12 +202,14 @@
            AlwaysCreate="true" />
   </Target>
 
-  <!-- <UsingTask TaskName="InstallDotNetCoreTask" AssemblyFile="$(AssemblyPath)"/> -->
+  <UsingTask TaskName="InstallDotNetCoreTask" AssemblyFile="$(BootstrapUtilsOutputPath)"/>
   <Target Name="BootstrapNetCore" DependsOnTargets="CleanBootstrapFolder">
 
-    <InstallDotNetCoreTask DotNetInstallScript="$(DotNetRoot)" InstallDir="$(BootstrapDestination)">
-      <Output TaskParameter="ExtractedVersion" PropertyName="ExtractedVersion" />
-    </InstallDotNetCoreTask>
+    <PropertyGroup>
+      <NetVersion>8.0.302</NetVersion>
+    </PropertyGroup>
+
+    <InstallDotNetCoreTask DotNetInstallScriptRootPath="$(DotNetRoot)" InstallDir="$(ArtifactsBinDir)bootstrap\$(TargetFramework)" Version="$(NetVersion)"/>
 
   </Target>
 
@@ -218,7 +220,7 @@
     </ItemGroup>
 
     <Copy SourceFiles="@(FreshlyBuiltNetBinaries)"
-          DestinationFolder="$(BootstrapDestination)sdk\8.0.302\%(RecursiveDir)" />
+          DestinationFolder="$(BootstrapDestination)sdk\$(NetVersion)\%(RecursiveDir)" />
 
   </Target>
 
diff --git a/src/MSBuild.Bootstrap.Utils/AssemblyInfo.cs b/src/MSBuild.Bootstrap.Utils/AssemblyInfo.cs
deleted file mode 100644
index 3b5d7bbb185..00000000000
--- a/src/MSBuild.Bootstrap.Utils/AssemblyInfo.cs
+++ /dev/null
@@ -1,4 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
diff --git a/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj b/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
index e8fa7d63ead..8c7d3033ee2 100644
--- a/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
+++ b/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
@@ -1,12 +1,10 @@
 <Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
-    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->
-    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
-    <TargetFrameworks Condition="'$(MSBuildRuntimeType)' == 'Full'">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>
-
+    <TargetFramework>$(LatestDotNetCoreForMSBuild)</TargetFramework>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
     <IsPackable>false</IsPackable>
     <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
+    <BootstrapUtilsOutputPath>$(OutputPath)$(TargetFramework)\$(AssemblyName).dll</BootstrapUtilsOutputPath>
   </PropertyGroup>
 
   <ItemGroup>
@@ -15,5 +13,7 @@
     <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
   </ItemGroup>
-  
+
+  <Import Project="$(RepoRoot)eng\BootStrapMsBuild.targets" />
+
 </Project>
diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
index d6d4fc613a4..fbd081a17d4 100644
--- a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
@@ -1,49 +1,49 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+#if RUNTIME_TYPE_NETCORE
+
+using System;
 using System.Diagnostics;
+using System.IO;
+using System.Net.Http;
+using System.Runtime.InteropServices;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 
 namespace MSBuild.Bootstrap.Utils.Tasks
 {
-    public sealed class InstallDotNetCoreTask : TaskExtension
+    public sealed class InstallDotNetCoreTask : Task
     {
+        private const string ScriptName = "dotnet-install";
         private const string DotNetInstallBaseUrl = "https://dot.net/v1/";
 
         public InstallDotNetCoreTask()
         {
             InstallDir = string.Empty;
-            DotNetInstallScript = string.Empty;
-            Channel = string.Empty;
+            DotNetInstallScriptRootPath = string.Empty;
+            Version = string.Empty;
         }
 
         [Required]
         public string InstallDir { get; set; }
 
         [Required]
-        public string DotNetInstallScript { get; set; }
+        public string DotNetInstallScriptRootPath { get; set; }
 
-        public string Channel { get; set; }
+        [Required]
+        public string Version { get; set; }
 
         public override bool Execute()
         {
-            string scriptName = GetScriptName();
-            string scriptPath = Path.Combine(DotNetInstallScript, scriptName);
-
-            if (!File.Exists(scriptPath))
+            ScriptExecutionSettings executionSettings = SetupScriptsExecutionSettings();
+            if (!File.Exists(executionSettings.ScriptsFullPath))
             {
-                DownloadScript(scriptName, scriptPath);
+                DownloadScript(executionSettings.ScriptName, executionSettings.ScriptsFullPath);
             }
 
-            string scriptArgs = GetScriptArgs();
-            Log.LogMessage(MessageImportance.Low, $"Executing: {scriptPath} {scriptArgs}");
-
-            if (!NativeMethods.IsWindows)
-            {
-                MakeScriptExecutable(scriptPath);
-            }
-
-            return RunScript(scriptPath, scriptArgs);
+            return RunScript(executionSettings);
         }
 
         private void DownloadScript(string scriptName, string scriptPath)
@@ -58,39 +58,11 @@ private void DownloadScript(string scriptName, string scriptPath)
             }
         }
 
-        private void MakeScriptExecutable(string scriptPath)
-        {
-            using (Process chmodProcess = new Process
-            {
-                StartInfo = new ProcessStartInfo
-                {
-                    FileName = "chmod",
-                    Arguments = $"+x {scriptPath}",
-                    UseShellExecute = false
-                },
-            })
-            {
-                chmodProcess.Start();
-                chmodProcess.WaitForExit();
-            }
-        }
-
-        private bool RunScript(string scriptPath, string scriptArgs)
+        private bool RunScript(ScriptExecutionSettings executionSettings)
         {
-            ProcessStartInfo startInfo = new ProcessStartInfo
-            {
-                FileName = GetProcessName(),
-                Arguments = GetProcessArguments(scriptPath, scriptArgs),
-                RedirectStandardOutput = true,
-                RedirectStandardError = true,
-                UseShellExecute = false,
-                CreateNoWindow = true
-            };
-
-            using (Process process = new Process { StartInfo = startInfo })
+            using (Process process = new Process { StartInfo = executionSettings.StartInfo })
             {
                 process.Start();
-
                 string output = process.StandardOutput.ReadToEnd();
                 Log.LogMessage(output);
 
@@ -103,24 +75,47 @@ private bool RunScript(string scriptPath, string scriptArgs)
                     {
                         Log.LogError("Errors: " + errors);
                     }
-
-                    Log.LogError("dotnet-install failed");
                 }
             }
 
             return !Log.HasLoggedErrors;
         }
 
-        private string GetScriptName() => NativeMethodsShared.IsWindows ? "dotnet-install.ps1" : "dotnet-install.sh";
+        private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
 
-        private string GetProcessName() => NativeMethodsShared.IsWindows ? "powershell.exe" : @"/bin/bash";
+        private struct ScriptExecutionSettings(string executableName, ProcessStartInfo startInfo, string scriptName, string scriptsFullPath)
+        {
+            public string ExecutableName { get; } = executableName;
 
-        private string GetProcessArguments(string scriptPath, string scriptArgs) => NativeMethodsShared.IsWindows
-            ? $"-NoProfile -ExecutionPolicy Bypass -File \"{scriptPath}\" {scriptArgs}"
-            : $"{scriptPath} {scriptArgs}";
+            public ProcessStartInfo StartInfo { get; } = startInfo;
 
-        private string GetScriptArgs() => NativeMethodsShared.IsWindows
-            ? $"{(string.IsNullOrEmpty(Channel) ? "-Quality preview" : $"-Channel {Channel}")} -InstallDir {InstallDir}"
-            : $"{(string.IsNullOrEmpty(Channel) ? "--quality preview" : $"--channel {Channel}")} --install-dir {InstallDir}";
+            public string ScriptName { get; } = scriptName;
+
+            public string ScriptsFullPath { get; } = scriptsFullPath;
+        }
+
+        private ScriptExecutionSettings SetupScriptsExecutionSettings()
+        {
+            string scriptExtension = IsWindows ? "ps1" : "sh";
+            string executableName = IsWindows ? "powershell.exe" : "/bin/bash";
+            string scriptPath = Path.Combine(DotNetInstallScriptRootPath, $"{ScriptName}.{scriptExtension}");
+            string scriptArgs = IsWindows
+                ? $"-NoProfile -ExecutionPolicy Bypass -File {scriptPath} -Version {Version} -InstallDir {InstallDir}"
+                : $"--version {Version} --install-dir {InstallDir}";
+
+            var startInfo = new ProcessStartInfo
+            {
+                FileName = IsWindows ? executableName : "chmod",
+                Arguments = IsWindows ? scriptArgs : $"+x {scriptPath} {scriptArgs}",
+                RedirectStandardOutput = true,
+                RedirectStandardError = true,
+                UseShellExecute = false,
+                CreateNoWindow = true,
+            };
+
+            return new ScriptExecutionSettings(executableName, startInfo, $"{ScriptName}.{scriptExtension}", scriptPath);
+        }
     }
 }
+
+#endif
