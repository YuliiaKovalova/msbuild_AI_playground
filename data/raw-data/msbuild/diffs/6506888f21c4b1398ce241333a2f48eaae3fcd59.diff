diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index ec093612169..64c8de664c3 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2950,8 +2950,7 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
             });
         }
 
-        public IBinaryLogReplaySource GetBuildCheckBinaryLogReplayEventSourceWrapper(
-            BinaryLogReplayEventSource replayEventSource)
+        public void AttachBuildCheckForBinaryLogReplay(BinaryLogReplayEventSource replayEventSource)
         {
             _buildParameters = new BuildParameters
             {
@@ -2967,7 +2966,7 @@ public IBinaryLogReplaySource GetBuildCheckBinaryLogReplayEventSourceWrapper(
                 new AnalysisDispatchingContextFactory(replayEventSource.Dispatch),
                 buildCheckManagerProvider.Instance);
 
-            return new BuildCheckBinaryLogReplaySourcerWrapper(replayEventSource, buildCheckEventHandler);
+            replayEventSource.AnyEventRaised += (sender, e) => buildCheckEventHandler.HandleBuildEvent(e);
         }
 
         /// <summary>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs
deleted file mode 100644
index 2d675db0527..00000000000
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs
+++ /dev/null
@@ -1,76 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading;
-using System.Threading.Tasks;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Logging;
-
-namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-
-internal class BuildCheckBinaryLogReplaySourcerWrapper : IBinaryLogReplaySource
-{
-    private readonly BinaryLogReplayEventSource _replayEventSource;
-    private readonly IBuildEventHandler _buildCheckEventHandler;
-
-    public BuildCheckBinaryLogReplaySourcerWrapper(
-        BinaryLogReplayEventSource replayEventSource,
-        IBuildEventHandler buildCheckEventHandler)
-    {
-        _replayEventSource = replayEventSource;
-        _buildCheckEventHandler = buildCheckEventHandler;
-
-        InitializeEventHandlers();
-    }
-
-    public void Replay(string sourceFilePath, CancellationToken cancellationToken)
-        => _replayEventSource.Replay(sourceFilePath, cancellationToken, Dispatch);
-
-    private void Dispatch(BuildEventArgs buildEvent)
-    {
-        _replayEventSource.Dispatch(buildEvent);
-
-        _buildCheckEventHandler.HandleBuildEvent(buildEvent);
-    }
-
-    #region Events
-
-    public event BuildMessageEventHandler? MessageRaised;
-    public event BuildErrorEventHandler? ErrorRaised;
-    public event BuildWarningEventHandler? WarningRaised;
-    public event BuildStartedEventHandler? BuildStarted;
-    public event BuildFinishedEventHandler? BuildFinished;
-    public event ProjectStartedEventHandler? ProjectStarted;
-    public event ProjectFinishedEventHandler? ProjectFinished;
-    public event TargetStartedEventHandler? TargetStarted;
-    public event TargetFinishedEventHandler? TargetFinished;
-    public event TaskStartedEventHandler? TaskStarted;
-    public event TaskFinishedEventHandler? TaskFinished;
-    public event CustomBuildEventHandler? CustomEventRaised;
-    public event BuildStatusEventHandler? StatusEventRaised;
-    public event AnyEventHandler? AnyEventRaised;
-
-    private void InitializeEventHandlers()
-    {
-        _replayEventSource.MessageRaised += (sender, e) => MessageRaised?.Invoke(sender, e);
-        _replayEventSource.ErrorRaised += (sender, e) => ErrorRaised?.Invoke(sender, e);
-        _replayEventSource.WarningRaised += (sender, e) => WarningRaised?.Invoke(sender, e);
-        _replayEventSource.BuildStarted += (sender, e) => BuildStarted?.Invoke(sender, e);
-        _replayEventSource.BuildFinished += (sender, e) => BuildFinished?.Invoke(sender, e);
-        _replayEventSource.ProjectStarted += (sender, e) => ProjectStarted?.Invoke(sender, e);
-        _replayEventSource.ProjectFinished += (sender, e) => ProjectFinished?.Invoke(sender, e);
-        _replayEventSource.TargetStarted += (sender, e) => TargetStarted?.Invoke(sender, e);
-        _replayEventSource.TargetFinished += (sender, e) => TargetFinished?.Invoke(sender, e);
-        _replayEventSource.TaskStarted += (sender, e) => TaskStarted?.Invoke(sender, e);
-        _replayEventSource.TaskFinished += (sender, e) => TaskFinished?.Invoke(sender, e);
-        _replayEventSource.CustomEventRaised += (sender, e) => CustomEventRaised?.Invoke(sender, e);
-        _replayEventSource.StatusEventRaised += (sender, e) => StatusEventRaised?.Invoke(sender, e);
-        _replayEventSource.AnyEventRaised += (sender, e) => AnyEventRaised?.Invoke(sender, e);
-    }
-
-    #endregion
-}
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index bc72c651fc7..dc4c9a19bc9 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
-internal class BuildCheckBuildEventHandler : IBuildEventHandler
+internal class BuildCheckBuildEventHandler
 {
     private readonly IBuildCheckManager _buildCheckManager;
     private readonly IAnalysisContextFactory _analyzerContextFactory;
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs
deleted file mode 100644
index 1cd4a78d671..00000000000
--- a/src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs
+++ /dev/null
@@ -1,11 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using Microsoft.Build.Framework;
-
-namespace Microsoft.Build.Experimental.BuildCheck;
-
-public interface IBuildEventHandler
-{
-    void HandleBuildEvent(BuildEventArgs e);
-}
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index 59670d19a62..1e7ab846695 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -11,15 +11,10 @@
 
 namespace Microsoft.Build.Logging
 {
-    public interface IBinaryLogReplaySource : IEventSource
-    {
-        void Replay(string sourceFilePath, CancellationToken cancellationToken);
-    }
-
     /// <summary>
     /// Interface for replaying a binary log file (*.binlog)
     /// </summary>
-    internal interface IBinaryLogEventReaderNotificationsReplaySource :
+    internal interface IBinaryLogReplaySource :
         IEventSource,
         IBuildEventArgsReaderNotifications
     {
@@ -66,7 +61,6 @@ void DeferredInitialize(
     /// <remarks>The class is public so that we can call it from MSBuild.exe when replaying a log file.</remarks>
     public sealed class BinaryLogReplayEventSource :
         EventArgsDispatcher,
-        IBinaryLogEventReaderNotificationsReplaySource,
         IBinaryLogReplaySource
     {
         private int? _fileFormatVersion;
@@ -196,12 +190,6 @@ public static BuildEventArgsReader OpenBuildEventsReader(
         public static BuildEventArgsReader OpenBuildEventsReader(string sourceFilePath)
             => OpenBuildEventsReader(OpenReader(sourceFilePath), true);
 
-        public void Replay(string sourceFilePath, CancellationToken cancellationToken, Action<BuildEventArgs> dispatchBuildEvent)
-        {
-            using var eventsReader = OpenBuildEventsReader(sourceFilePath);
-            Replay(eventsReader, cancellationToken, dispatchBuildEvent);
-        }
-
         /// <summary>
         /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
         /// </summary>
@@ -239,15 +227,6 @@ public void Replay(BinaryReader binaryReader, bool closeInput, CancellationToken
         /// <param name="reader">The build events reader - caller is responsible for disposing.</param>
         /// <param name="cancellationToken">A <see cref="CancellationToken"/> indicating the replay should stop as soon as possible.</param>
         public void Replay(BuildEventArgsReader reader, CancellationToken cancellationToken)
-            => Replay(reader, cancellationToken, Dispatch);
-
-        /// <summary>
-        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
-        /// </summary>
-        /// <param name="reader">The build events reader - caller is responsible for disposing.</param>
-        /// <param name="cancellationToken">A <see cref="CancellationToken"/> indicating the replay should stop as soon as possible.</param>
-        /// <param name="dispatchBuildEvent">Dispatcher of the <see cref="BuildEventArgs"/></param>
-        private void Replay(BuildEventArgsReader reader, CancellationToken cancellationToken, Action<BuildEventArgs> dispatchBuildEvent)
         {
             _fileFormatVersion = reader.FileFormatVersion;
             _minimumReaderVersion = reader.MinimumReaderVersion;
@@ -282,7 +261,7 @@ private void Replay(BuildEventArgsReader reader, CancellationToken cancellationT
 
                 while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
                 {
-                    dispatchBuildEvent(instance);
+                    Dispatch(instance);
                 }
             }
             else
@@ -318,8 +297,8 @@ private void Replay(BuildEventArgsReader reader, CancellationToken cancellationT
 
         private Action? _onRawReadingPossible;
         private Action? _onStructuredReadingOnly;
-        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.DeferredInitialize"/>
-        void IBinaryLogEventReaderNotificationsReplaySource.DeferredInitialize(
+        /// <inheritdoc cref="IBinaryLogReplaySource.DeferredInitialize"/>
+        void IBinaryLogReplaySource.DeferredInitialize(
             Action onRawReadingPossible,
             Action onStructuredReadingOnly)
         {
@@ -328,8 +307,8 @@ void IBinaryLogEventReaderNotificationsReplaySource.DeferredInitialize(
         }
 
         private Action<EmbeddedContentEventArgs>? _embeddedContentRead;
-        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.EmbeddedContentRead"/>
-        event Action<EmbeddedContentEventArgs>? IBinaryLogEventReaderNotificationsReplaySource.EmbeddedContentRead
+        /// <inheritdoc cref="IBinaryLogReplaySource.EmbeddedContentRead"/>
+        event Action<EmbeddedContentEventArgs>? IBinaryLogReplaySource.EmbeddedContentRead
         {
             // Explicitly implemented event has to declare explicit add/remove accessors
             //  https://stackoverflow.com/a/2268472/2308106
@@ -354,8 +333,8 @@ event Action<ArchiveFileEventArgs>? IBuildEventArgsReaderNotifications.ArchiveFi
         }
 
         private Action<BinaryLogRecordKind, Stream>? _rawLogRecordReceived;
-        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.RawLogRecordReceived"/>
-        event Action<BinaryLogRecordKind, Stream>? IBinaryLogEventReaderNotificationsReplaySource.RawLogRecordReceived
+        /// <inheritdoc cref="IBinaryLogReplaySource.RawLogRecordReceived"/>
+        event Action<BinaryLogRecordKind, Stream>? IBinaryLogReplaySource.RawLogRecordReceived
         {
             add => _rawLogRecordReceived += value;
             remove => _rawLogRecordReceived -= value;
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 221c9ef7c93..d4c37461938 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -163,7 +163,7 @@ public void Initialize(IEventSource eventSource)
             bool logPropertiesAndItemsAfterEvaluation = Traits.Instance.EscapeHatches.LogPropertiesAndItemsAfterEvaluation ?? true;
 
             ProcessParameters(out bool omitInitialInfo);
-            var replayEventSource = eventSource as IBinaryLogEventReaderNotificationsReplaySource;
+            var replayEventSource = eventSource as IBinaryLogReplaySource;
 
             try
             {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 817d8d732d3..358c410265f 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -145,7 +145,7 @@ public void Dispose()
         internal int FileFormatVersion => _fileFormatVersion;
         internal int MinimumReaderVersion { get; set; } = BinaryLogger.ForwardCompatibilityMinimalVersion;
 
-        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.EmbeddedContentRead"/>
+        /// <inheritdoc cref="IBinaryLogReplaySource.EmbeddedContentRead"/>
         internal event Action<EmbeddedContentEventArgs>? EmbeddedContentRead;
 
         /// <inheritdoc cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index ce4e6da0003..9751b24cce6 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -166,14 +166,12 @@
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContext.cs" />
-    <Compile Include="BuildCheck\Infrastructure\BuildCheckBinaryLogReplaySourcerWrapper.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationException.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckBuildEventHandler.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManagerProvider.cs" />
-    <Compile Include="BuildCheck\Infrastructure\IBuildEventHandler.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManager.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManagerProvider.cs" />
     <Compile Include="BuildCheck\Infrastructure\TracingReporter.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 68f24f63600..ae8b83fade1 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4410,12 +4410,11 @@ private static void ReplayBinaryLog(
             bool isBuildCheckEnabled)
         {
 
-            IBinaryLogReplaySource replayEventSource = new BinaryLogReplayEventSource();
+            var replayEventSource = new BinaryLogReplayEventSource();
 
             if (isBuildCheckEnabled)
             {
-                replayEventSource = BuildManager.DefaultBuildManager
-                    .GetBuildCheckBinaryLogReplayEventSourceWrapper((BinaryLogReplayEventSource)replayEventSource);
+                BuildManager.DefaultBuildManager.AttachBuildCheckForBinaryLogReplay(replayEventSource);
             }
 
             foreach (var distributedLoggerRecord in distributedLoggerRecords)
