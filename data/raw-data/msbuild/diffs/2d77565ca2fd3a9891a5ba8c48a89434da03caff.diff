diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index df11c277466..42e912b95ae 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -54,7 +54,7 @@ internal class ProjectCacheService
         /// i.e. falling back to FileSystem.Default.
         /// </summary>
         private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase { }
-      
+
         // Use NullableBool to make it work with Interlock.CompareExchange (doesn't accept bool?).
         // Assume that if one request is a design time build, all of them are.
         // Volatile because it is read by the BuildManager thread and written by one project cache service thread pool thread.
@@ -195,7 +195,7 @@ Assembly LoadAssembly(string resolverPath)
 #if !FEATURE_ASSEMBLYLOADCONTEXT
                 return Assembly.LoadFrom(resolverPath);
 #else
-                return _loader.LoadFromPath(resolverPath);
+                return s_loader.LoadFromPath(resolverPath);
 #endif
             }
 
@@ -213,7 +213,7 @@ IEnumerable<Type> GetTypes<T>(Assembly assembly)
         }
 
 #if FEATURE_ASSEMBLYLOADCONTEXT
-        private static readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();
+        private static readonly CoreClrAssemblyLoader s_loader = new CoreClrAssemblyLoader();
 #endif
 
         public void PostCacheRequest(CacheRequest cacheRequest)
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 97b4e83a02c..9c2fca19031 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     internal class SdkResolverLoader
     {
 #if FEATURE_ASSEMBLYLOADCONTEXT
-        private readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();
+        private static readonly CoreClrAssemblyLoader s_loader = new CoreClrAssemblyLoader();
 #endif
 
         private readonly string IncludeDefaultResolver = Environment.GetEnvironmentVariable("MSBUILDINCLUDEDEFAULTSDKRESOLVER");
@@ -35,7 +35,7 @@ internal class SdkResolverLoader
         internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
             ElementLocation location)
         {
-            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ? 
+            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> {new DefaultSdkResolver()}
                 : new List<SdkResolver>();
 
@@ -192,7 +192,7 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingCont
 #if !FEATURE_ASSEMBLYLOADCONTEXT
             return Assembly.LoadFrom(resolverPath);
 #else
-            return _loader.LoadFromPath(resolverPath);
+            return s_loader.LoadFromPath(resolverPath);
 #endif
         }
 
