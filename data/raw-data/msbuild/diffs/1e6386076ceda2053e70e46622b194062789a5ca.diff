diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index f1a8bd5dd1a..3af3c50d59a 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -107,13 +107,14 @@ private TConfig[] FillConfiguration<TConfig, TRule>(string projectFullPath, IRea
     /// <returns></returns>
     public BuildAnalyzerConfiguration GetUserConfiguration(string projectFullPath, string ruleId)
     {
-        if (!_editorConfig.TryGetValue(ruleId, out BuildAnalyzerConfiguration? editorConfig))
+        var cacheKey = $"{ruleId}-projectFullPath ";
+
+        if (!_editorConfig.TryGetValue(cacheKey, out BuildAnalyzerConfiguration? editorConfig))
         {
             editorConfig = BuildAnalyzerConfiguration.Null;
         }
 
         var config = new Dictionary<string, string>();
-
         try
         {
             config = s_editorConfigParser.Parse(projectFullPath);
@@ -136,9 +137,11 @@ public BuildAnalyzerConfiguration GetUserConfiguration(string projectFullPath, s
 
         if (dictionaryConfig.Any())
         {
-            return BuildAnalyzerConfiguration.Create(dictionaryConfig);
+            editorConfig = BuildAnalyzerConfiguration.Create(dictionaryConfig);
         }
 
+        _editorConfig[cacheKey] = editorConfig;
+
         return editorConfig;
     }
 
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
index c0034659b79..f2fff4b9e32 100644
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -18,20 +18,21 @@ namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
     internal class EditorConfigParser : IEditorConfigParser
     {
         private const string EditorconfigFile = ".editorconfig";
-        private Dictionary<string, Dictionary<string, string>> filePathConfigCache;
+        private Dictionary<string, EditorConfigFile> editorConfigFileCache;
 
         internal EditorConfigParser()
         {
-            filePathConfigCache = new Dictionary<string, Dictionary<string, string>>();
+            editorConfigFileCache = new Dictionary<string, EditorConfigFile>();
         }
 
         public Dictionary<string, string> Parse(string filePath)
         {
-            if (filePathConfigCache.ContainsKey(filePath))
-            {
-                return filePathConfigCache[filePath];
-            }
+            var editorConfigs = EditorConfigFileDiscovery(filePath);
+            return MergeEditorConfigFiles(editorConfigs, filePath);
+        }
 
+        public IList<EditorConfigFile> EditorConfigFileDiscovery(string filePath)
+        {
             var editorConfigDataFromFilesList = new List<EditorConfigFile>();
 
             var directoryOfTheProject = Path.GetDirectoryName(filePath);
@@ -39,8 +40,19 @@ public Dictionary<string, string> Parse(string filePath)
 
             while (editorConfigFile != string.Empty)
             {
-                var editorConfigfileContent = File.ReadAllText(editorConfigFile);
-                var editorConfig = EditorConfigFile.Parse(editorConfigfileContent);
+                EditorConfigFile editorConfig;
+
+                if (editorConfigFileCache.ContainsKey(editorConfigFile))
+                {
+                    editorConfig = editorConfigFileCache[editorConfigFile];
+                }
+                else
+                {
+                    var editorConfigfileContent = File.ReadAllText(editorConfigFile);
+                    editorConfig = EditorConfigFile.Parse(editorConfigfileContent);
+                    editorConfigFileCache[editorConfigFile] = editorConfig;
+                }
+
                 editorConfigDataFromFilesList.Add(editorConfig);
 
                 if (editorConfig.IsRoot)
@@ -53,13 +65,18 @@ public Dictionary<string, string> Parse(string filePath)
                 }
             }
 
+            return editorConfigDataFromFilesList;
+        }
+
+        public Dictionary<string, string> MergeEditorConfigFiles(IEnumerable<EditorConfigFile> editorConfigFiles, string filePath)
+        {
             var resultingDictionary = new Dictionary<string, string>();
 
-            if (editorConfigDataFromFilesList.Any())
+            if (editorConfigFiles.Any())
             {
-                editorConfigDataFromFilesList.Reverse();
-                
-                foreach (var configData in editorConfigDataFromFilesList)
+                editorConfigFiles.Reverse();
+
+                foreach (var configData in editorConfigFiles)
                 {
                     foreach (var section in configData.NamedSections)
                     {
@@ -78,7 +95,6 @@ public Dictionary<string, string> Parse(string filePath)
                 }
             }
 
-            filePathConfigCache[filePath] = resultingDictionary;
             return resultingDictionary;
         }
 
