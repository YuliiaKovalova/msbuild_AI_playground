diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index 4396758a77e..ad4fae9c692 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -124,7 +124,7 @@ internal override void ExecuteTask(Lookup lookup)
         /// <param name="evaluatedValue">The new evaluated value of the property.</param>
         private void LogPropertyInTargetAssignment(ProjectPropertyGroupTaskPropertyInstance property, string evaluatedValue)
         {
-            if (_propertyTrackingSettings == 0 || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))
+            if (_propertyTrackingSettings == 0)
             {
                 return;
             }
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 4611cca9335..71def813d93 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1601,7 +1601,7 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
         /// <param name="location">The source location where the property assignment occurs.</param>
         private void LogPropertyInTaskAssignment(string propertyName, string propertyValue, IElementLocation location)
         {
-            if (_propertyTrackingSettings == 0 || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))
+            if (_propertyTrackingSettings == 0)
             {
                 return;
             }
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 16c634d6aab..a60e16e07e0 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -298,7 +298,7 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source, IEl
                 property.EvaluatedValue,
 
                 // If the property is from XML, we don't need property source since a full location is available.
-                location == null ? EnumUtilities.GetEnumString(source) : string.Empty,
+                location == null ? GetPropertySourceName(source) : string.Empty,
                 location?.File,
                 location?.Line ?? 0,
                 location?.Column ?? 0,
@@ -332,8 +332,7 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
 
             // Either we want to specifically track property reassignments
             // or we do not want to track nothing - in which case the prop reassignment is enabled by default.
-            if ((_settings & PropertyTrackingSetting.PropertyReassignment) == PropertyTrackingSetting.PropertyReassignment ||
-                (_settings == 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10)))
+            if (_settings == 0 || (_settings & PropertyTrackingSetting.PropertyReassignment) == PropertyTrackingSetting.PropertyReassignment)
             {
                 var args = new PropertyReassignmentEventArgs(
                     property.Name,
@@ -391,6 +390,17 @@ private enum PropertySource
             EnvironmentVariable,
             CommandLine,
         }
+
+        private static string GetPropertySourceName(PropertySource source) => source switch
+        {
+            PropertySource.Xml => "XML",
+            PropertySource.BuiltIn => "Built-in",
+            PropertySource.Global => "Global",
+            PropertySource.Toolset => "Toolset",
+            PropertySource.EnvironmentVariable => "Environment Variable",
+            PropertySource.CommandLine => "Command Line",
+            _ => throw new ArgumentOutOfRangeException(nameof(source), source, null)
+        };
     }
 
     [Flags]
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 618272429c2..66d6c38d007 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -59,9 +59,6 @@
   </ItemGroup>
 
   <ItemGroup>
-    <Compile Include="..\Shared\EnumUtilities.cs">
-      <Link>SharedUtilities\EnumUtilities.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\EnvironmentUtilities.cs">
       <Link>SharedUtilities\EnvironmentUtilities.cs</Link>
     </Compile>
diff --git a/src/Shared/EnumUtilities.cs b/src/Shared/EnumUtilities.cs
deleted file mode 100644
index 256e87ef81a..00000000000
--- a/src/Shared/EnumUtilities.cs
+++ /dev/null
@@ -1,25 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-
-namespace Microsoft.Build.Shared
-{
-    public static class EnumUtilities
-    {
-        private static readonly Dictionary<Enum, string> _enumStringCache = [];
-
-        public static string GetEnumString(Enum value)
-        {
-            if (_enumStringCache.TryGetValue(value, out string? stringValue))
-            {
-                return stringValue;
-            }
-
-            _enumStringCache[value] = value.ToString();
-
-            return _enumStringCache[value];
-        }
-    }
-}
