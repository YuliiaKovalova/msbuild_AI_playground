diff --git a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
index 30bdd9bedab..74d0ba579a9 100644
--- a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;
 
@@ -44,9 +45,8 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
         }
 
         string? binPath, objPath;
-
-        context.Data.EvaluatedProperties.TryGetValue("OutputPath", out binPath);
-        context.Data.EvaluatedProperties.TryGetValue("IntermediateOutputPath", out objPath);
+        context.Data.EvaluatedProperties.TryGetPathValue("OutputPath", out binPath);
+        context.Data.EvaluatedProperties.TryGetPathValue("IntermediateOutputPath", out objPath);
 
         string? absoluteBinPath = CheckAndAddFullOutputPath(binPath, context);
         // Check objPath only if it is different from binPath
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 0eacfd24c73..832ffcd8057 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -576,6 +576,26 @@ internal static string MaybeAdjustFilePath(string value, string baseDirectory =
             return shouldAdjust ? newValue.ToString() : value;
         }
 
+        /// <summary>
+        /// Gets the path value that is associated with the specified key in a dictionary with <see cref="string"/> values.
+        /// Normalizes the value as a path.
+        /// </summary>
+        /// <param name="dictionary">The dictionary to search.</param>
+        /// <param name="key">The key to locate.</param>
+        /// <param name="value">When this method returns, the value associated with the specified key normalized as a path, if the key is found; otherwise <see langword="null"/>.</param>
+        /// <returns><see langword="true"/> if the dictionary contains an element that has the specified key; otherwise, <see langword="false"/>.</returns>
+        /// <remarks>Use this method to get paths from dictionaries of properties whose default values may contain backslashes.</remarks>
+        internal static bool TryGetPathValue<TKey>(this IReadOnlyDictionary<TKey, string> dictionary, TKey key, out string value)
+        {
+            bool result = dictionary.TryGetValue(key, out value);
+            if (result)
+            {
+                value = NormalizePath(value);
+            }
+
+            return result;
+        }
+
         /// <summary>
         /// If on Unix, convert backslashes to slashes for strings that resemble paths.
         /// This overload takes and returns ReadOnlyMemory of characters.
