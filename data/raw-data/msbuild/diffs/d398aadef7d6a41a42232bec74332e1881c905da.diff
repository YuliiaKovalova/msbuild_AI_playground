diff --git a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
index de486a2e086..7e99c551627 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
@@ -27,23 +27,32 @@ public void TaskNodesDieAfterBuild()
             <Output PropertyName=""PID"" TaskParameter=""Pid"" />
         </ProcessIdTask>
     </Target>
+    <Target Name='AccessPID2' AfterTargets='AccessPID'>
+        <ProcessIdTask>
+            <Output PropertyName=""PID2"" TaskParameter=""Pid"" />
+        </ProcessIdTask>
+    </Target>
 </Project>";
                 TransientTestFile project = env.CreateFile("testProject.csproj", pidTaskProject);
-                ProjectInstance projectInstance = new ProjectInstance(project.Path);
+                ProjectInstance projectInstance = new(project.Path);
                 projectInstance.Build().ShouldBeTrue();
                 string processId = projectInstance.GetPropertyValue("PID");
                 string.IsNullOrEmpty(processId).ShouldBeFalse();
                 Int32.TryParse(processId, out int pid).ShouldBeTrue();
+                string processId2 = projectInstance.GetPropertyValue("PID2");
+                string.IsNullOrEmpty(processId2).ShouldBeFalse();
+                Int32.TryParse(processId2, out int pid2).ShouldBeTrue();
+                pid2.ShouldNotBe(pid);
                 Process.GetCurrentProcess().Id.ShouldNotBe<int>(pid);
                 try
                 {
-                    Process taskHostNode = Process.GetProcessById(pid);
+                    Process taskHostNode = Process.GetProcessById(pid2);
                     taskHostNode.WaitForExit(2000).ShouldBeTrue();
                 }
                 // We expect the TaskHostNode to exit quickly. If it exits before Process.GetProcessById, it will throw an ArgumentException.
                 catch (ArgumentException e)
                 {
-                    e.Message.ShouldBe($"Process with an Id of {pid} is not running.");
+                    e.Message.ShouldBe($"Process with an Id of {pid2} is not running.");
                 }
             }
         }
