diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 62718bb90bf..370c472c8eb 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -8,13 +8,11 @@
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
-    // TODO: Move to separate file
-    class FancyLoggerNode
-    {
-        public FancyLoggerNode() { }
-    }
     public class FancyLogger : ILogger
     {
+
+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);
+
         public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
         public Dictionary<int, FancyLoggerBufferLine> targetConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
         public Dictionary<int, FancyLoggerBufferLine> taskConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
@@ -70,6 +68,18 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
                 + ANSIBuilder.Formatting.Dim("Project: ")
                 + e.ProjectFile
             );
+            // Node on tree
+            if (e.ParentProjectBuildEventContext?.ProjectInstanceId != null)
+            {
+                // Find node
+                FancyLoggerNode? node = root.Find(e.ParentProjectBuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
+                if (node == null) return;
+                node.Add(e.BuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
+            }
+            else
+            {
+                root.Add(e.BuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
+            }
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
@@ -88,6 +98,10 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             targetConsoleLines[e.BuildEventContext.TargetId] = FancyLoggerBuffer.WriteNewLine("\t  "
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + e.TargetName);
+            // Node on tree
+            FancyLoggerNode? node = root.Find(e.BuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
+            if (node == null) return;
+            node.Add(e.BuildEventContext.TargetId, FancyLoggerNodeType.Target);
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
@@ -110,6 +124,10 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
                 + e.TaskName
             );
             FancyLoggerBuffer.WriteFooter($"Build: {(completedTasks / existingTasks) * 100}");
+            // Node on tree
+            FancyLoggerNode? node = root.Find(e.BuildEventContext.TargetId, FancyLoggerNodeType.Target);
+            if (node == null) return;
+            node.Add(e.BuildEventContext.TaskId, FancyLoggerNodeType.Task);
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 70fcfb93b53..d05da0c59f7 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -10,6 +10,9 @@
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
+    /// <summary>
+    /// Represents an identifiable line inside the fancylogger buffer.
+    /// </summary>
     public class FancyLoggerBufferLine
     {
         private static int counter = 0;
@@ -26,22 +29,23 @@ public FancyLoggerBufferLine(string text)
             Text = text;
         }
     }
+
+    /// <summary>
+    /// Buffer manager for FancyLogger
+    /// </summary>
     internal static class FancyLoggerBuffer
     {
-        public static bool AutoScrollEnabled = true;
-        private static bool IsTerminated = false;
-
-
-        private static Task? keysPressTask;
+        // Status
+        public static bool AutoScrollEnabled { get; private set; }
+        public static bool IsTerminated { get; private set; }
+        public static int CurrentTopLineIndex { get; private set; }
+        public static int Height { get { return Console.BufferHeight; } }
+        // Lines to be presented by the buffer
         private static List<FancyLoggerBufferLine> lines = new();
-        private static int Height {
-            get { return Console.BufferHeight; }
-        }
-        private static int CurrentTopLineIndex = 0;
         public static void Initialize()
         {
             // Setup event listeners
-            keysPressTask = Task.Run(() =>
+            Task.Run(() =>
             {
                 while (true)
                 {
@@ -49,10 +53,10 @@ public static void Initialize()
                     switch (Console.ReadKey().Key)
                     {
                         case ConsoleKey.UpArrow:
-                            ScrollUp();
+                            ScrollToLine(CurrentTopLineIndex - 1);
                             break;
                         case ConsoleKey.DownArrow:
-                            ScrollDown();
+                            ScrollToLine(CurrentTopLineIndex + 1);
                             break;
                         case ConsoleKey.Home:
                             ScrollToLine(0);
@@ -69,6 +73,8 @@ public static void Initialize()
             });
             // Switch to alternate buffer
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+            // Settings
+            AutoScrollEnabled = true;
             // Render contents
             WriteTitleBar();
             WriteFooter("This is an empty footer haha");
@@ -84,8 +90,7 @@ public static void Terminate()
             lines = new();
         }
 
-        
-
+        #region Scrolling
         private static void ScrollToLine(int firstLineIndex)
         {
             if (firstLineIndex < 0) return;
@@ -93,24 +98,14 @@ private static void ScrollToLine(int firstLineIndex)
             CurrentTopLineIndex = firstLineIndex;
             for (int i = 0; i < Height - 4; i++)
             {
-                // If line exists
-                if (i + firstLineIndex < lines.Count)
-                {
-                    Console.Write(""
-                        + ANSIBuilder.Cursor.Position(i + 2, 0)
-                        + ANSIBuilder.Eraser.LineCursorToEnd()
-                        + lines[i + firstLineIndex].Text);
-                } else
-                {
-                    Console.Write(""
-                        + ANSIBuilder.Cursor.Position(i + 2, 0)
-                        + ANSIBuilder.Eraser.LineCursorToEnd()
-                    );
-                }
+                Console.Write(""
+                    + ANSIBuilder.Cursor.Position(i+2, 0)
+                    + ANSIBuilder.Eraser.LineCursorToEnd()
+                    + ((i + firstLineIndex < lines.Count) ? lines[i + firstLineIndex].Text : "")
+                );
             }
             Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
         }
-
         private static void ScrollToEnd()
         {
             // If number of lines is smaller than height
@@ -125,23 +120,12 @@ private static void ScrollToEnd()
             // Go to end
             Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
         }
-
-        private static void ScrollUp()
-        {
-            ScrollToLine(CurrentTopLineIndex - 1);
-        }
-
-        private static void ScrollDown()
-        {
-            ScrollToLine(CurrentTopLineIndex + 1);
-        }
-
         private static void ToggleAutoScroll()
         {
-            //
             AutoScrollEnabled = !AutoScrollEnabled;
         }
-
+        #endregion
+        #region Line Referencing
         public static int GetLineIndexById(int lineId)
         {
             for (int i = 0; i < lines.Count; i++)
@@ -156,22 +140,20 @@ public static int GetLineIndexById(int lineId)
             if (i == -1) return null;
             return lines[i];
         }
-
+        #endregion
+        #region Writing
         public static void WriteTitleBar()
         {
             Console.Write(""
                 + ANSIBuilder.Cursor.Home()
-                /*+ ANSIBuilder.ANSIRemove(
-                    ANSIBuilder.Formatting.Inverse("                         MSBuild                         ")
-                  )*/
-                + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Align.Center("MSBuild"))
+                + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress"))
             );
         }
         public static void WriteFooter(string text)
         {
             Console.Write(""
                 + ANSIBuilder.Cursor.Position(Height - 2, 0) // Position at bottom
-                + "---------------------------------------------------------\n"
+                + new string('-', Console.BufferWidth) + "\n"
                 + ANSIBuilder.Eraser.LineCursorToEnd()
                 + text
             );
@@ -186,6 +168,25 @@ public static FancyLoggerBufferLine WriteNewLine(string text)
             if (AutoScrollEnabled) ScrollToEnd();
             return line;
         }
+        public static FancyLoggerBufferLine? WriteNewLineAfter(string text, int lineId)
+        {
+            // get line
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return null;
+
+            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
+            lines.Insert(lineIndex + 1, line);
+            ScrollToLine(CurrentTopLineIndex);
+            return line;
+        }
+
+        public static void DeleteLine(int lineId)
+        {
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return;
+            lines.RemoveAt(lineIndex);
+            ScrollToLine(CurrentTopLineIndex);
+        }
 
         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
         {
@@ -196,5 +197,6 @@ public static FancyLoggerBufferLine WriteNewLine(string text)
             ScrollToLine(CurrentTopLineIndex);
             return line;
         }
+        #endregion
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
new file mode 100644
index 00000000000..09b534c075b
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -0,0 +1,64 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    // TODO: Maybe remove
+    public enum FancyLoggerNodeType
+    {
+        None = 0,
+        Build,
+        Project,
+        Target,
+        Task,
+        Message,
+        Warning,
+        Error
+    }
+    public class FancyLoggerNode
+    {
+        public int Id;
+        public FancyLoggerNodeType Type; // TODO: Maybe remove
+        public BuildEventArgs? Args = null;
+        public Dictionary<int, FancyLoggerNode> Children = new();
+
+        public FancyLoggerNode(int id, FancyLoggerNodeType type)
+        {
+            Id = id;
+            Type = type;
+        }
+        public FancyLoggerNode(int id, FancyLoggerNodeType type, BuildEventArgs? args) : this(id, type) { Args = args; }
+
+        public void Add(FancyLoggerNode node)
+        {
+            Children.Add(node.Id, node);
+        }
+        public void Add(int id, FancyLoggerNodeType type)
+        {
+            FancyLoggerNode node = new FancyLoggerNode(id, type);
+            Add(node);
+        }
+        public FancyLoggerNode? Find(int id, FancyLoggerNodeType type)
+        {
+            // If id is self
+            if (Id == id && Type == type) return this;
+            // If not self and no children
+            if (Children.Count == 0) return null;
+            // Find in all children
+            foreach (var child in Children)
+            {
+                FancyLoggerNode? node = child.Value.Find(id, type);
+                if (node != null) return node;
+            }
+            return null;
+        }
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/LogWriterOld.cs b/src/Build/Logging/FancyLogger/LogWriterOld.cs
deleted file mode 100644
index 8d4cb944c78..00000000000
--- a/src/Build/Logging/FancyLogger/LogWriterOld.cs
+++ /dev/null
@@ -1,147 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-//
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace Microsoft.Build.Logging.FancyLogger
-{
-    internal class LogWriterLine
-    {
-        private static int Counter = 0;
-        public int Id;
-        public string Text = String.Empty;
-
-        public LogWriterLine() {
-            Text = String.Empty;
-            Id = Counter++;
-        }
-        public LogWriterLine(string text) {
-            Text = text;
-            Id = Counter++;
-        }
-
-        public void Update(string text)
-        {
-            LogWriterOld.UpdateLine(Id, text);
-        }
-
-        public void Delete()
-        {
-            LogWriterOld.DeleteLine(Id);
-        }
-    }
-    internal static class LogWriterOld
-    {
-        public static int InitialCursorTop;
-        public static List<LogWriterLine> Lines = new List<LogWriterLine>();
-        public static int LastLineTop
-        {
-            get { return InitialCursorTop + Lines.Count; }
-        }
-
-        static int GetLineIndexById(int lineId)
-        {
-            for (int i = 0; i < Lines.Count; i++)
-            {
-                if (Lines[i].Id == lineId) return i;
-            }
-            return -1;
-        }
-
-
-        public static LogWriterLine WriteNewLine(string text) 
-        {
-            // Get line top
-            int lineTop = LastLineTop + 1;
-            // Create line
-            LogWriterLine line = new LogWriterLine(text);
-            // Append
-            Lines.Add(line);
-            // Print
-            Console.Write(""
-                + ANSIBuilder.Cursor.Position(lineTop, 0)
-                + line.Text
-                + "\n");
-            // Return
-            Console.Out.Flush();
-            return line;
-        }
-        public static LogWriterLine? WriteNewLineAt(int lineId, string text)
-        {
-            int lineIndex = GetLineIndexById(lineId);
-            if(lineIndex == -1) return null;
-            return WriteNewLineAtIndex(lineIndex, text);
-        }
-
-        public static LogWriterLine? WriteNewLineAtIndex(int lineIndex, string text)
-        {
-            // If line index is equal to lines size, just add a new line
-            if (lineIndex >= Lines.Count) return WriteNewLine(text);
-            // Add one line at the end
-            WriteNewLine("");
-            // Shift everything one line down
-            for (int i = Lines.Count - 1; i > lineIndex - 1; i--)
-            {
-                UpdateLineByIndex(i, Lines[i - 1].Text);
-            }
-            UpdateLineByIndex(lineIndex, text);
-            Console.Write(ANSIBuilder.Cursor.Position(LastLineTop, 0) + "\n");
-            Console.Out.Flush();
-            return null;
-        }
-        public static void DeleteLine(int lineId)
-        {
-            int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return;
-            DeleteLineByIndex(lineIndex);
-        }
-        public static void DeleteLineByIndex(int lineIndex)
-        {
-            // Count lines before deleition
-            int currentLinesCount = Lines.Count;
-            // Shift remaining lines up
-            for (int i = lineIndex; i < currentLinesCount - 1; i++)
-            {
-                UpdateLineByIndex(i, Lines[i+1].Text);
-            }
-            // Erase contents from last line
-            UpdateLineByIndex(currentLinesCount - 1, ANSIBuilder.Eraser.LineCursorToEnd());
-            // Remove from memory
-            Lines.RemoveAt(currentLinesCount - 1);
-            // Position cursor
-            Console.Write(ANSIBuilder.Cursor.Position(LastLineTop, 0) + "\n");
-            Console.Out.Flush();
-        }
-
-        public static LogWriterLine? UpdateLine(int lineId, string text)
-        {
-            // Check if line exists
-            int lineIndex = GetLineIndexById(lineId);
-            if(lineIndex == -1) return null;
-            return UpdateLineByIndex(lineIndex, text);
-        }
-
-        public static LogWriterLine? UpdateLineByIndex(int lineIndex, string text)
-        {
-            // Get line position
-            int lineTop = lineIndex + InitialCursorTop + 1;
-            // Update in list
-            Lines[lineIndex].Text = text;
-            // Print
-            Console.Write(""
-                // + ANSIBuilder.Cursor.Position(lineTop, 0)
-                + ANSIBuilder.Cursor.UpAndScroll(LastLineTop - lineTop + 1)
-                + ANSIBuilder.Eraser.LineCursorToEnd()
-                + Lines[lineIndex].Text
-                + ANSIBuilder.Cursor.Position(LastLineTop, 0)
-                + "\n");
-            Console.Out.Flush();
-            return Lines[lineIndex];
-        }
-    }
-}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 3e1356569f1..83dbaab2a2b 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -162,7 +162,7 @@
     <Compile Include="Logging\FancyLogger\ANSIBuilder.cs" />
     <Compile Include="Logging\FancyLogger\FancyLogger.cs" />
     <Compile Include="Logging\FancyLogger\FancyLoggerBuffer.cs" />
-    <Compile Include="Logging\FancyLogger\LogWriterOld.cs" />
+    <Compile Include="Logging\FancyLogger\FancyLoggerNode.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
