diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 598837e60e1..7dc448e6fb5 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -76,11 +76,9 @@ internal abstract class BaseConsoleLogger : INodeLogger, IStringBuilderProvider
         /// </summary>
         public void ParseParameters()
         {
-            var parameters = LoggerParametersHelper.ParseParameters(Parameters);
-
-            foreach (var parameter in parameters)
+            foreach (var parameter in LoggerParametersHelper.ParseParameters(Parameters))
             {
-                ApplyParameter(parameter.Key, parameter.Value);
+                ApplyParameter(parameter.Item1, parameter.Item2);
             }
         }
 
diff --git a/src/Framework/Logging/LoggerParametersHelper.cs b/src/Framework/Logging/LoggerParametersHelper.cs
index 2dd27bed0b3..b4f7a843d4f 100644
--- a/src/Framework/Logging/LoggerParametersHelper.cs
+++ b/src/Framework/Logging/LoggerParametersHelper.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
@@ -18,7 +19,7 @@ internal static class LoggerParametersHelper
         // Logger parameter value split character.
         public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;
 
-        public static bool TryParseVerbosityParameter(string parameterValue, out LoggerVerbosity? verbosity)
+        public static bool TryParseVerbosityParameter(string parameterValue, [NotNullWhen(true)] out LoggerVerbosity? verbosity)
         {
             switch (parameterValue.ToUpperInvariant())
             {
@@ -48,26 +49,21 @@ public static bool TryParseVerbosityParameter(string parameterValue, out LoggerV
             }
         }
 
-        public static IEnumerable<KeyValuePair<string, string?>> ParseParameters(string? parametersString)
+        public static IEnumerable<Tuple<string, string?>> ParseParameters(string? parametersString)
         {
-            List<KeyValuePair<string, string?>> parameters = new();
-            if (parametersString == null)
+            if (parametersString is not null)
             {
-                return parameters;
-            }
-
-            foreach (string parameter in parametersString.Split(s_parameterDelimiters))
-            {
-                if (string.IsNullOrWhiteSpace(parameter))
+                foreach (string parameter in parametersString.Split(s_parameterDelimiters))
                 {
-                    continue;
-                }
+                    if (string.IsNullOrWhiteSpace(parameter))
+                    {
+                        continue;
+                    }
 
-                string[] parameterAndValue = parameter.Split(s_parameterValueSplitCharacter);
-                parameters.Add(new KeyValuePair<string, string?>(parameterAndValue[0], parameterAndValue.Length > 1 ? parameterAndValue[1] : null ));
+                    string[] parameterAndValue = parameter.Split(s_parameterValueSplitCharacter);
+                    yield return new Tuple<string, string?>(parameterAndValue[0], parameterAndValue.Length > 1 ? parameterAndValue[1] : null);
+                }
             }
-
-            return parameters;
         }
     }
 }
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 8687642f2ce..dd13fbe28aa 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -273,11 +273,9 @@ public void Initialize(IEventSource eventSource)
     /// </summary>
     public void ParseParameters()
     {
-        var parameters = LoggerParametersHelper.ParseParameters(Parameters);
-
-        foreach (var parameter in parameters)
+        foreach (var parameter in LoggerParametersHelper.ParseParameters(Parameters))
         {
-            ApplyParameter(parameter.Key, parameter.Value);
+            ApplyParameter(parameter.Item1, parameter.Item2);
         }
     }
 
@@ -285,7 +283,10 @@ public void ParseParameters()
     /// Apply a terminal logger parameter.
     /// parameterValue may be null, if there is no parameter value.
     /// </summary>
-    private bool ApplyParameter(string parameterName, string? parameterValue)
+    /// <remark>
+    /// If verbosity parameter value is not correct, throws an exception. Other incorrect parameter values are disregarded.
+    /// </remark>
+    private void ApplyParameter(string parameterName, string? parameterValue)
     {
         ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));
 
@@ -293,23 +294,22 @@ private bool ApplyParameter(string parameterName, string? parameterValue)
         {
             case "V":
             case "VERBOSITY":
-                return ApplyVerbosityParameter(parameterValue);
+                ApplyVerbosityParameter(parameterValue);
+                break;
             case "SHOWCOMMANDLINE":
-                return ApplyShowCommandLineParameter(parameterValue);
+                TryApplyShowCommandLineParameter(parameterValue);
+                break;
         }
-
-        return false;
     }
 
     /// <summary>
     /// Apply the verbosity value
     /// </summary>
-    private bool ApplyVerbosityParameter(string? parameterValue)
+    private void ApplyVerbosityParameter(string? parameterValue)
     {
         if (parameterValue is not null && LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))
         {
-            Verbosity = (LoggerVerbosity)verbosity!;
-            return true;
+            Verbosity = (LoggerVerbosity)verbosity;
         }
         else
         {
@@ -323,7 +323,7 @@ private bool ApplyVerbosityParameter(string? parameterValue)
     /// <summary>
     /// Apply the show command Line value
     /// </summary>
-    private bool ApplyShowCommandLineParameter(string? parameterValue)
+    private bool TryApplyShowCommandLineParameter(string? parameterValue)
     {
         if (String.IsNullOrEmpty(parameterValue))
         {
