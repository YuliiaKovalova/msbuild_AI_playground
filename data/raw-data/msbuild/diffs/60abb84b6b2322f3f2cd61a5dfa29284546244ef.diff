diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 652fe6593ce..cb22fcf0ec6 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2060,6 +2060,64 @@ public void MissingOptionalLoggersAreIgnored(string logger)
             }
         }
 
+        [Theory]
+        [InlineData("", "[v0][]")] // empty does nothing
+        [InlineData(" ", "[v0][]")] // whitespace does nothing
+        [InlineData("/p:p1=v1", "[v1][]")]   // simple case
+        [InlineData("/p:p1=v1 /p:p2=\"v2a v2b\"", "[v1][v2a v2b]")] // split quoted values correctly
+        [InlineData("/p:p1=\"username is %username%\"", "[username is %username%][]")] // expand env vars, like for response file content
+        public void ArgumentsPulledFromEnvironmentVariable(string value, string expected)
+        {
+            try
+            {
+                Environment.SetEnvironmentVariable("_MSBUILD_", value);
+
+                string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+
+  <Target Name=""Build"">
+    <Message Text=""[$(p1)][$(p2)]"" />
+  </Target>
+
+</Project>");
+
+                expected = Environment.ExpandEnvironmentVariables(expected);
+                string logContents = ExecuteMSBuildExeExpectSuccess(projectContents, null, new string[] { "/p:p1=v0" } );
+
+                logContents.ShouldContain(expected);
+            }
+            finally
+            {
+                Environment.SetEnvironmentVariable("_MSBUILD_", "");
+            }
+        }
+
+        [Theory]
+        [InlineData("/invalidflag=invalid")]
+        [InlineData("/p=\"quotes not closed")]
+        public void ArgumentsPulledFromEnvironmentVariable_Bad(string value)
+        {
+            try
+            {
+                Environment.SetEnvironmentVariable("_MSBUILD_", value);
+
+                using (TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create())
+                {
+                    var testProject = testEnvironment.CreateFile("test.proj", ObjectModelHelpers.CleanupFileContents(@"
+                <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                    <Target Name=""Build""/>
+                </Project>"));
+
+                    string output = RunnerUtilities.ExecMSBuild($"\"{testProject.Path}\"", out var success, _output);
+
+                    success.ShouldBeFalse(output);
+                }
+            }
+            finally
+            {
+                Environment.SetEnvironmentVariable("_MSBUILD_", "");
+            }
+        }
+
         [Theory]
         [InlineData("/interactive")]
         [InlineData("/p:NuGetInteractive=true")]
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b23d903fe98..84b4e1f2971 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1548,6 +1548,19 @@ private static void GatherAllSwitches(
             switchesNotFromAutoResponseFile = new CommandLineSwitches();
             GatherCommandLineSwitches(commandLineArgs, switchesNotFromAutoResponseFile);
 
+            // special feature: any value of an environment variable "_MSBUILD_"
+            // gets treated as switches that override any other switches
+            string extraCommandLine = Environment.GetEnvironmentVariable("_MSBUILD_");
+            if (!String.IsNullOrWhiteSpace(extraCommandLine))
+            {
+                // we have to split these into individual arguments, as we do for response file content,
+                // since the shell didn't do this for us; also expand environment variables, to be consistent
+                // with response file content
+                ArrayList extraArgs = QuotingUtilities.SplitUnquoted(Environment.ExpandEnvironmentVariables(extraCommandLine));
+                // we want these last in the non-response file switches, so they win over all other switches
+                GatherCommandLineSwitches(extraArgs, switchesNotFromAutoResponseFile);
+            }
+
             // parse the auto-response file (if "/noautoresponse" is not specified), and combine those switches with the
             // switches on the command line
             switchesFromAutoResponseFile = new CommandLineSwitches();
