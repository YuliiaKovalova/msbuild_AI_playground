diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index ec0df79750b..716bb8827e3 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -33,7 +33,7 @@ public void ResolvesViaPlatformLookupTable()
                 AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
 
             task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x64");
         }
@@ -57,7 +57,7 @@ public void ResolvesViaChildsPlatformLookupTable()
                 AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
 
             task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x86");
         }
@@ -78,7 +78,7 @@ public void ResolvesViaAnyCPUDefault()
                 AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
 
             task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("AnyCPU");
         }
@@ -100,7 +100,7 @@ public void ResolvesViaSamePlatform()
                 AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
 
             task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x86");
         }
@@ -121,9 +121,9 @@ public void FailsToResolve()
                 AnnotatedProjects = new TaskItem[] { projectReference },
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
             // When the task logs a warning, it does not set NearestPlatform
-            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("");
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
             ((MockEngine)task.BuildEngine).AssertLogContains("MSB3981");
         }
 
@@ -133,7 +133,7 @@ public void WarnsWhenProjectReferenceHasNoPlatformOptions()
             // Task should log a warning when a ProjectReference has no options to build as.
             // It will continue and have no NearestPlatform metadata.
             TaskItem projectReference = new TaskItem("foo.bar");
-            projectReference.SetMetadata("Platforms", "");
+            projectReference.SetMetadata("Platforms", string.Empty);
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
@@ -143,9 +143,9 @@ public void WarnsWhenProjectReferenceHasNoPlatformOptions()
                 AnnotatedProjects = new TaskItem[] { projectReference },
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
             // When the task logs a warning, it does not set NearestPlatform
-            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("");
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
             ((MockEngine)task.BuildEngine).AssertLogContains("MSB3982");
         }
 
@@ -166,11 +166,11 @@ public void WarnsOnInvalidFormatLookupTable()
                 AnnotatedProjects = new TaskItem[] { projectReference },
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
             // When the platformlookuptable is in an invalid format, it is discarded.
             // There shouldn't have been a translation found from AnyCPU to anything.
             // Meaning the projectreference would not have NearestPlatform set.
-            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("");
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
             ((MockEngine)task.BuildEngine).AssertLogContains("MSB3983");
         }
 
@@ -192,7 +192,7 @@ public void WarnsOnInvalidFormatProjectReferenceLookupTable()
                 AnnotatedProjects = new TaskItem[] { projectReference },
             };
 
-            task.Execute();
+            task.Execute().ShouldBeTrue();
 
             // A ProjectReference PlatformLookupTable should take priority, but is thrown away when
             // it has an invalid format. The current project's PLT should be the next priority.
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 61579d1d8be..25198f6a823 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -7,7 +7,6 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
 
 namespace Microsoft.Build.Tasks
 {
@@ -79,7 +78,7 @@ public override bool Execute()
                     childPlatforms.Add(s);
                 }
 
-                string buildChildProjectAs = "";
+                string buildChildProjectAs = string.Empty;
 
                 // Prefer matching platforms
                 if (childPlatforms.Contains(CurrentProjectPlatform))
@@ -138,7 +137,7 @@ private Dictionary<string, string> ExtractLookupTable(string stringTable)
                 string[] keyVal = s.Split(MSBuildConstants.EqualsChar, StringSplitOptions.RemoveEmptyEntries);
 
                 // Invalid table, don't use it.
-                if (keyVal.Length <= 1)
+                if (keyVal.Length <= 1 || keyVal.Length > 2)
                 {
                     Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.InvalidLookupTableFormat", stringTable);
                     return null;
