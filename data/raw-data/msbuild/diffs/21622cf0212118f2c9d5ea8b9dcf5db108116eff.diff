diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 8e32077045d..63e7a479736 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -87,7 +87,7 @@ public override bool IsMatch(string itemToMatch)
 
             public override IEnumerable<string> GetReferencedItems()
             {
-                return ReferencedItems.Select(v => v.ItemAsValueFragment.TextFragment);
+                return ReferencedItems.Select(v => EscapingUtilities.UnescapeAll(v.ItemAsValueFragment.TextFragment));
             }
 
             public override IMSBuildGlob ToMSBuildGlob()
@@ -427,7 +427,7 @@ public virtual bool IsMatchNormalized(string normalizedItemToMatch)
 
         public virtual IEnumerable<string> GetReferencedItems()
         {
-            yield return TextFragment;
+            yield return EscapingUtilities.UnescapeAll(TextFragment);
         }
 
         public virtual IMSBuildGlob ToMSBuildGlob()
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 3ca5cd9560b..9005ea5be18 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -40,6 +40,11 @@ public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M
             /// </remarks>
             protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
+                if (!_conditionResult)
+                {
+                    return;
+                }
+
                 if (_matchOnMetadata.IsEmpty && ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType) && _conditionResult)
                 {
                     // Perf optimization: If the Remove operation references itself (e.g. <I Remove="@(I)"/>)
diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index cd65b6821cc..c196385f2b1 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -30,7 +30,7 @@ private FileSpecMatcherTester(string currentDirectory, string unescapedFileSpec,
             {
                 // We'll be testing files by comparing their normalized paths. Normalize our file spec right away
                 // to avoid doing this work on each IsMatch call.
-                _unescapedFileSpec = FileUtilities.NormalizePathForComparisonNoThrow(_unescapedFileSpec, _currentDirectory);
+                _unescapedFileSpec = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, _unescapedFileSpec));
             }
         }
 
