diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index fda33ca1341..a93e2074044 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -732,8 +732,11 @@ private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
 
         private BuildEventArgs ReadResponseFileUsedEventArgs()
         {
-            var responseFilePathName = ReadDeduplicatedString();
-            var e = new ResponseFileUsedEventArgs(responseFilePathName);
+            var fields = ReadBuildEventArgsFields();
+            var responseFilePath = ReadDeduplicatedString();
+            var e = new ResponseFileUsedEventArgs(responseFilePath);
+            SetCommonFields(e, fields);
+
             return e;
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 7dd97286859..79dac4ce124 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -509,9 +509,8 @@ private void Write(EnvironmentVariableReadEventArgs e)
         }
         private void Write(ResponseFileUsedEventArgs e)
         {
-            // TODO: Apparently this causes the build to appear as failed on the binlogger.
-            // I assume it is because the binlogger doesn't know how to interpret it??
             Write(BinaryLogRecordKind.ResponseFileUsed);
+            WriteMessageFields(e);
             WriteDeduplicatedString(e.ResponseFilePath);
         }
         private void Write(TaskCommandLineEventArgs e)
diff --git a/src/Framework/ResponseFileUsedEventArgs.cs b/src/Framework/ResponseFileUsedEventArgs.cs
index ed6cee02446..c1f96a3cbda 100644
--- a/src/Framework/ResponseFileUsedEventArgs.cs
+++ b/src/Framework/ResponseFileUsedEventArgs.cs
@@ -19,7 +19,6 @@ public ResponseFileUsedEventArgs()
         /// </summary>
         public ResponseFileUsedEventArgs(string responseFilePath) : base()
         {
-            this.ResponseFilePath = responseFilePath;
         }
         public string? ResponseFilePath { set; get; }
     }
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 7d518897aa6..9d7d199941d 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -1243,6 +1243,8 @@ private BuildMessageEventArgs ReadBuildMessageEventFromStream(ITranslator transl
 
         private ResponseFileUsedEventArgs ReadResponseFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
         {
+            // MessageImportance importance = MessageImportance.Normal;
+            // translator.TranslateEnum(ref importance, (int)importance);
             string responseFilePath = String.Empty;
             translator.Translate(ref responseFilePath);
             ResponseFileUsedEventArgs buildEvent = new ResponseFileUsedEventArgs(responseFilePath);
