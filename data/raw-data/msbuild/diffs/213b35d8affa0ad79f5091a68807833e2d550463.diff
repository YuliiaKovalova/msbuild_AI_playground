diff --git a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
index 809f34999c9..6c38bab0b9c 100644
--- a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
+++ b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
@@ -100,14 +100,10 @@ public bool UpdateResources(string filename, BuildResults results)
                                 fileLength = (int)fs.Length;
                                 fileContent = new byte[fileLength];
 
-#if NET7_0_OR_GREATER
-                                fs.ReadExactly(fileContent, 0, fileLength);
-#else
 #pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
                                // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
-                                fs.Read(fileContent, 0, fileLength);
+                               fs.Read(fileContent, 0, fileLength);
 #pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
-#endif
                             }
 
                             // Update the resources to include this file's data
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index ff6114d8eed..f72c71a6c5e 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -127,15 +127,10 @@ private bool ResolveAssemblyKey()
                             fs = File.OpenRead(KeyFile);
                             int fileLength = (int)fs.Length;
                             var keyBytes = new byte[fileLength];
-#if NET7_0_OR_GREATER
-                            // fail fast in case the file is not read till the end
-                            fs.ReadExactly(keyBytes, 0, fileLength);
-#else
 #pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
                             // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
                             fs.Read(keyBytes, 0, fileLength);
 #pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
-#endif
 
                             UInt64 hash = HashFromBlob(keyBytes);
                             hash ^= HashFromBlob(userNameBytes); // modify it with the username hash, so each user would get different hash for the same key
