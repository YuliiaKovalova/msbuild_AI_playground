diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 7757598b2cd..341638cd00e 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -584,18 +584,16 @@ private void SendPacket(INodePacket packet)
         {
             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)
             {
-#if RUNTIME_TYPE_NETCORE
                 if (packet is LogMessagePacketBase logMessage
                     && logMessage.EventType == LoggingEventType.CustomEvent 
-                    &&
-                    (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)
+                    && (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)
                     && Traits.Instance.EscapeHatches.EnableWarningOnCustomBuildEvent)
                 {
                     BuildEventArgs buildEvent = logMessage.NodeBuildEvent.Value.Value;
 
                     // Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
-                    // Since BinaryFormatter is deprecated in dotnet 8+, log error so users discover root cause easier
-                    // then by reading CommTrace where it would be otherwise logged as critical infra error.
+                    // Since BinaryFormatter is deprecated, log error so users discover root cause easier than
+                    // by reading CommTrace where it would be otherwise logged as critical infra error.
                     _loggingService.LogError(_loggingContext?.BuildEventContext ?? BuildEventContext.Invalid, null, BuildEventFileInfo.Empty,
                             "DeprecatedEventSerialization",
                             buildEvent?.GetType().Name ?? string.Empty);
@@ -604,9 +602,6 @@ private void SendPacket(INodePacket packet)
                 {
                     _nodeEndpoint.SendData(packet);
                 }
-#else
-                _nodeEndpoint.SendData(packet);
-#endif
             }
         }
 
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 04b2fc90237..e053a44600d 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics;
 using System.Globalization;
 
 #nullable disable
@@ -388,12 +389,8 @@ public bool EnableWarningOnCustomBuildEvent
 
                 if (value == null)
                 {
-                    // If variable is not set explicitly, for .NETCORE warning appears.
-#if RUNTIME_TYPE_NETCORE
+                    // If variable is not set explicitly, warning appears.
                     return true;
-#else
-                    return false;
-#endif
                 }
 
                 return value == "1";
@@ -407,13 +404,20 @@ public bool IsBinaryFormatterSerializationAllowed
             {
                 if (!_isBinaryFormatterSerializationAllowed.HasValue)
                 {
+                    if (AppContext.TryGetSwitch("System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization",
+                            out bool enabled))
+                    {
 #if RUNTIME_TYPE_NETCORE
-                    AppContext.TryGetSwitch("System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization",
-                        out bool enabled);
-                    _isBinaryFormatterSerializationAllowed = enabled;
+                        // Unexpected, but not worth to throw, but since maybe in future it will be removed from .NET Core, let's assert here.
+                        Debug.Assert(!enabled, "Switch System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization is expected to be defined for current runtime.");
+                        // At this point it means it is actually possible to use BinFmt serialization, but we shan't used it anyway.
+                        enabled = false;
 #else
-                    _isBinaryFormatterSerializationAllowed = true;
+                        // We expect, if the switch is not configured, that it use default/old behavior of .NET Framework = enabled.
+                        enabled = true;
 #endif
+                    }
+                    _isBinaryFormatterSerializationAllowed = enabled;
                 }
 
                 return _isBinaryFormatterSerializationAllowed.Value;
