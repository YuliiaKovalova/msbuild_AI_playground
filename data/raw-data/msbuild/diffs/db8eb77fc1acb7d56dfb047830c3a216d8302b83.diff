diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 32e221ac704..106488b67ba 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -1180,7 +1180,7 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
                             parentRequest: issuingEntry.Request,
                             buildRequestDataFlags: buildRequestDataFlags,
                             requestedProjectState: null,
-                            skipStaticGraphIsolationConstraints: request.SkipStaticGraphIsolationConstraints,
+                            skipIsolationConstraints: request.SkipIsolationConstraints,
                             buildUnderIsolationExemption: buildUnderIsolationExemption);
 
                         issuingEntry.WaitForResult(newRequest);
@@ -1210,7 +1210,7 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
                             parentRequest: issuingEntry.Request,
                             buildRequestDataFlags: buildRequestDataFlags,
                             requestedProjectState: null,
-                            skipStaticGraphIsolationConstraints: request.SkipStaticGraphIsolationConstraints,
+                            skipIsolationConstraints: request.SkipIsolationConstraints,
                             buildUnderIsolationExemption: buildUnderIsolationExemption);
 
                         IResultsCache resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
index b415350f1e6..b8088f9814d 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
@@ -26,13 +26,13 @@ internal class FullyQualifiedBuildRequest
         /// <param name="config">The configuration to use for the request.</param>
         /// <param name="targets">The set of targets to build.</param>
         /// <param name="resultsNeeded">Whether or not to wait for the results of this request.</param>
-        /// <param name="skipStaticGraphIsolationConstraints">Whether to skip the constraints of static graph isolation.</param>
+        /// <param name="skipIsolationConstraints">Whether to skip the constraints of isolation.</param>
         /// <param name="flags">Flags specified for the build request.</param>
         public FullyQualifiedBuildRequest(
             BuildRequestConfiguration config,
             string[] targets,
             bool resultsNeeded,
-            bool skipStaticGraphIsolationConstraints = false,
+            bool skipIsolationConstraints = false,
             BuildRequestDataFlags flags = BuildRequestDataFlags.None
             )
         {
@@ -42,7 +42,7 @@ public FullyQualifiedBuildRequest(
             Config = config;
             Targets = targets;
             ResultsNeeded = resultsNeeded;
-            SkipStaticGraphIsolationConstraints = skipStaticGraphIsolationConstraints;
+            SkipIsolationConstraints = skipIsolationConstraints;
             BuildRequestDataFlags = flags;
         }
 
@@ -66,7 +66,7 @@ public FullyQualifiedBuildRequest(
         /// </summary>
         public BuildRequestDataFlags BuildRequestDataFlags { get; set; }
 
-        public bool SkipStaticGraphIsolationConstraints { get; }
+        public bool SkipIsolationConstraints { get; }
 
         /// <summary>
         /// Implementation of the equality operator.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index a920c4d3710..dcc116fc25a 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -363,13 +363,13 @@ public async Task<BuildResult[]> BuildProjects(string[] projectFiles, PropertyDi
 
                 BuildRequestConfiguration config = new BuildRequestConfiguration(data, _componentHost.BuildParameters.DefaultToolsVersion);
                 IsolateProjects isolateProjects = _componentHost.BuildParameters.IsolateProjects;
-                bool skipStaticGraphIsolationConstraints = (isolateProjects != IsolateProjects.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))
+                bool skipIsolationConstraints = (isolateProjects != IsolateProjects.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))
                     || isolateProjects == IsolateProjects.Message;
                 requests[i] = new FullyQualifiedBuildRequest(
                     config: config,
                     targets: targets,
                     resultsNeeded: waitForResults,
-                    skipStaticGraphIsolationConstraints: skipStaticGraphIsolationConstraints,
+                    skipIsolationConstraints: skipIsolationConstraints,
                     flags: skipNonexistentTargets
                         ? BuildRequestDataFlags.SkipNonexistentTargets
                         : BuildRequestDataFlags.None);
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 69009eda3a1..88c4dcd24f2 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1967,10 +1967,9 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
             var configCache = (IConfigCache) _componentHost.GetComponent(BuildComponentType.ConfigCache);
 
             // do not check root requests as nothing depends on them
-            if (isolateProjects == IsolateProjects.False || request.IsRootRequest || request.SkipStaticGraphIsolationConstraints)
+            if (isolateProjects == IsolateProjects.False || request.IsRootRequest || request.SkipIsolationConstraints)
             {
-                // N.B.: isolateProjects == IsolateProjects.Message iff request.SkipStaticGraphIsolationConstraints
-                bool logComment = ((isolateProjects == IsolateProjects.True || isolateProjects == IsolateProjects.Message) && request.SkipStaticGraphIsolationConstraints);
+                bool logComment = ((isolateProjects == IsolateProjects.True || isolateProjects == IsolateProjects.Message) && request.SkipIsolationConstraints);
                 if (logComment)
                 {
                     // retrieving the configs is not quite free, so avoid computing them eagerly
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index 96d8f9a38d0..bcc5c984750 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -90,7 +90,7 @@ internal class BuildRequest : INodePacket
         /// </summary>
         private RequestedProjectState _requestedProjectState;
 
-        private bool _skipStaticGraphIsolationConstraints;
+        private bool _skipIsolationConstraints;
 
         /// <summary>
         /// Constructor for serialization.
@@ -161,7 +161,7 @@ public BuildRequest(
         /// <param name="hostServices">Host services if any. May be null.</param>
         /// <param name="parentBuildEventContext">The build event context of the parent project.</param>
         /// <param name="parentRequest">The parent build request, if any.</param>
-        /// <param name="skipStaticGraphIsolationConstraints"></param>
+        /// <param name="skipIsolationConstraints"></param>
         /// <param name="buildRequestDataFlags">Additional flags for the request.</param>
         /// <param name="requestedProjectState">Filter for desired build results.</param>
         /// <param name="projectContextId">The project context id</param>
@@ -183,7 +183,7 @@ public BuildRequest(
             BuildRequest parentRequest,
             BuildRequestDataFlags buildRequestDataFlags = BuildRequestDataFlags.None,
             RequestedProjectState requestedProjectState = null,
-            bool skipStaticGraphIsolationConstraints = false,
+            bool skipIsolationConstraints = false,
             int projectContextId = BuildEventContext.InvalidProjectContextId,
             bool buildUnderIsolationExemption = false)
         : this(submissionId, nodeRequestId, configurationId, hostServices, buildRequestDataFlags, requestedProjectState, projectContextId)
@@ -201,7 +201,7 @@ public BuildRequest(
             _parentBuildEventContext = parentBuildEventContext;
             _parentGlobalRequestId = parentRequest?.GlobalRequestId ?? InvalidGlobalRequestId;
 
-            _skipStaticGraphIsolationConstraints = skipStaticGraphIsolationConstraints;
+            _skipIsolationConstraints = skipIsolationConstraints;
             BuildUnderIsolationExemption = buildUnderIsolationExemption;
         }
 
@@ -402,9 +402,9 @@ internal bool IsRootRequest
         }
 
         /// <summary>
-        /// Whether static graph isolation constraints should be skipped for this request
+        /// Whether isolation constraints should be skipped for this request.
         /// </summary>
-        internal bool SkipStaticGraphIsolationConstraints => _skipStaticGraphIsolationConstraints;
+        internal bool SkipIsolationConstraints => _skipIsolationConstraints;
 
         /// <summary>
         /// Gets a value indicating whether this request's <see cref="BuildRequest.Targets"></see>
@@ -447,7 +447,7 @@ public void Translate(ITranslator translator)
             translator.Translate(ref _parentBuildEventContext);
             translator.Translate(ref _buildEventContext);
             translator.TranslateEnum(ref _buildRequestDataFlags, (int)_buildRequestDataFlags);
-            translator.Translate(ref _skipStaticGraphIsolationConstraints);
+            translator.Translate(ref _skipIsolationConstraints);
             translator.Translate(ref _requestedProjectState);
             translator.Translate(ref _hostServices);
             translator.Translate(ref _proxyTargets, ProxyTargets.FactoryForDeserialization);
