diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index 26325de8241..7dad87ddebf 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -32,6 +32,10 @@ public class WriteCodeFragment : TaskExtension
     {
         private const string TypeNameSuffix = "_TypeName";
         private const string IsLiteralSuffix = "_IsLiteral";
+
+        // When ImplicitUsings is "enable" this can be ignored because by default System is added to the global usings,
+        // System.Reflection can be the job of the people who make projects to add it to their global usings file
+        // generated by the .NET SDK. At least until it is added to the default global usings list.
         private static readonly IEnumerable<string> NamespaceImports = new string[] { "System", "System.Reflection" };
         private static readonly IReadOnlyDictionary<string, ParameterType> EmptyParameterTypes = new Dictionary<string, ParameterType>();
 
@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension
         [Required]
         public string Language { get; set; }
 
+        /// <summary>
+        /// If the projects have ImplictUsings set, then use it's value.
+        /// Anything other than "enable" changes nothing here.
+        /// When it is set to "enable" then do not add the usings that
+        /// this normally writes to the output file.
+        /// This leverages the full power of what was added in .NET 6+
+        /// called global usings of C# 10 which is specific to C# (I think).
+        /// </summary>
+        [Required]
+        public string ImplicitUsings { get; set; }
+
         /// <summary>
         /// Description of attributes to write.
         /// Item include is the full type name of the attribute.
@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)
             }
 
             // For convenience, bring in the namespaces, where many assembly attributes lie
-            foreach (string name in NamespaceImports)
+            // This will be skipped for only a single situation:
+            // - When Language is "C#" and sets ImplicitUsings to "enable".
+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.
+            if (ImplicitUsings is not "enable")
             {
-                globalNamespace.Imports.Add(new CodeNamespaceImport(name));
+                foreach (string name in NamespaceImports)
+                {
+                    globalNamespace.Imports.Add(new CodeNamespaceImport(name));
+                }
             }
 
             foreach (ITaskItem attributeItem in AssemblyAttributes)
