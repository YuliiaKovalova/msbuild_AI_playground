diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index c55eedb3974..ef4194d663c 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -150,7 +150,11 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                     {
                         // HttpRequestException does not have the status code so its wrapped and thrown here so that later on we can determine
                         // if a retry is possible based on the status code
+#if RUNTIME_TYPE_NETCORE
+                        throw new HttpRequestException(e.Message, e.InnerException, response.StatusCode);
+#else
                         throw new CustomHttpRequestException(e.Message, e.InnerException, response.StatusCode);
+#endif
                     }
 
                     if (!TryGetFileName(response, out string filename))
@@ -220,17 +224,30 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
             }
 
             // Some HttpRequestException have an inner exception that has the real error
-            if (actualException is HttpRequestException httpRequestException && httpRequestException.InnerException != null)
+            if (actualException is HttpRequestException httpRequestException)
             {
-                actualException = httpRequestException.InnerException;
+                if (httpRequestException.InnerException != null)
+                {
+                    actualException = httpRequestException.InnerException;
+
+                    // An IOException inside of a HttpRequestException means that something went wrong while downloading
+                    if (actualException is IOException)
+                    {
+                        return true;
+                    }
+                }
 
-                // An IOException inside of a HttpRequestException means that something went wrong while downloading
-                if (actualException is IOException)
+#if RUNTIME_TYPE_NETCORE
+                switch (httpRequestException.StatusCode)
                 {
-                    return true;
+                    case HttpStatusCode.InternalServerError:
+                    case HttpStatusCode.RequestTimeout:
+                        return true;
                 }
+#endif
             }
 
+#if !RUNTIME_TYPE_NETCORE
             if (actualException is CustomHttpRequestException customHttpRequestException)
             {
                 // A wrapped CustomHttpRequestException has the status code from the error
@@ -241,6 +258,7 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
                         return true;
                 }
             }
+#endif
 
             if (actualException is WebException webException)
             {
@@ -287,6 +305,7 @@ private bool TryGetFileName(HttpResponseMessage response, out string filename)
             return !String.IsNullOrWhiteSpace(filename);
         }
 
+#if !RUNTIME_TYPE_NETCORE
         /// <summary>
         /// Represents a wrapper around the <see cref="HttpRequestException"/> that also contains the <see cref="HttpStatusCode"/>.
         /// </summary>
@@ -299,9 +318,12 @@ public CustomHttpRequestException(string message, Exception inner, HttpStatusCod
             }
 
             public HttpStatusCode StatusCode { get; }
+
+
         }
+#endif
 
-        private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)
+private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)
         {
             return SkipUnchangedFiles
                    && destinationFile.Exists
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index de1caa01567..e9b827bb1a7 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -1,28 +1,33 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using System;
-using System.Collections.Generic;
 using System.ComponentModel;
 using System.Deployment.Internal.CodeSigning;
 using System.Diagnostics;
-using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
-using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Security;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
-using System.Security.Permissions;
-using System.Security.Policy;
 using System.Text;
 using System.Xml;
 using Microsoft.Build.Shared.FileSystem;
+
+#if RUNTIME_TYPE_NETCORE
+using System.Runtime.Versioning;
+#else
+using Microsoft.Build.Framework;
+using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
+using System.Reflection;
+using System.Security.Permissions;
+using System.Security.Policy;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
+#endif
 
 #nullable disable
 
@@ -483,6 +488,9 @@ public static PermissionSet XmlToPermissionSet(XmlElement element)
         /// <param name="certThumbprint">Hexadecimal string that contains the SHA-1 hash of the certificate.</param>
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         public static void SignFile(string certThumbprint, Uri timestampUrl, string path)
         {
             SignFile(certThumbprint, timestampUrl, path, null, null);
@@ -495,6 +503,9 @@ public static void SignFile(string certThumbprint, Uri timestampUrl, string path
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         public static void SignFile(string certThumbprint,
                                     Uri timestampUrl,
                                     string path,
@@ -511,6 +522,9 @@ public static void SignFile(string certThumbprint,
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
         /// <param name="targetFrameworkIdentifier">.NET Framework identifier for the target.</param>
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         public static void SignFile(string certThumbprint,
                                     Uri timestampUrl,
                                     string path,
@@ -568,6 +582,9 @@ public static void SignFile(string certThumbprint,
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <remarks>This function is only for signing a manifest, not a PE file.</remarks>
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         public static void SignFile(string certPath, SecureString certPassword, Uri timestampUrl, string path)
         {
             X509Certificate2 cert = new X509Certificate2(certPath, certPassword, X509KeyStorageFlags.PersistKeySet);
@@ -592,6 +609,9 @@ private static bool UseSha256Algorithm(X509Certificate2 cert)
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <remarks>This function can only sign a PE file if the X509Certificate2 parameter represents a certificate in the
         /// current user's personal certificate store.</remarks>
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         public static void SignFile(X509Certificate2 cert, Uri timestampUrl, string path)
         {
             // setup resources
@@ -599,6 +619,9 @@ public static void SignFile(X509Certificate2 cert, Uri timestampUrl, string path
             SignFileInternal(cert, timestampUrl, path, true, resources);
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, string path, bool targetFrameworkSupportsSha256, System.Resources.ResourceManager resources)
         {
             if (cert == null)
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 191add569e4..de9f546f472 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -13,6 +13,10 @@
 using System.Xml;
 using System.Runtime.InteropServices;
 
+#if RUNTIME_TYPE_NETCORE
+using System.Runtime.Versioning;
+#endif
+
 using _FILETIME = System.Runtime.InteropServices.ComTypes.FILETIME;
 
 #nullable disable
@@ -330,12 +334,17 @@ internal SignedCmiManifest2(XmlDocument manifestDom, bool useSha256)
             _manifestDom = manifestDom ?? throw new ArgumentNullException(nameof(manifestDom));
             _useSha256 = useSha256;
         }
-
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         internal void Sign(CmiManifestSigner2 signer)
         {
             Sign(signer, null);
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         internal void Sign(CmiManifestSigner2 signer, string timeStampUrl)
         {
             // Reset signer infos.
@@ -468,6 +477,9 @@ private static void RemoveExistingSignature(XmlDocument manifestDom)
         /// <param name="useSha256">Whether to use sha256</param>
         /// <returns></returns>
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Cryptographic.Standard", "CA5358:RSAProviderNeeds2048bitKey", Justification = "SHA1 is retained for compatibility reasons as an option in VisualStudio signing page and consequently in the trust manager, default is SHA2.")]
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         internal static RSACryptoServiceProvider GetFixedRSACryptoServiceProvider(RSACryptoServiceProvider oldCsp, bool useSha256)
         {
             if (!useSha256)
@@ -496,6 +508,9 @@ internal static RSACryptoServiceProvider GetFixedRSACryptoServiceProvider(RSACry
             return fixedRsa;
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         private static void ReplacePublicKeyToken(XmlDocument manifestDom, AsymmetricAlgorithm snKey, bool useSha256)
         {
             // Make sure we can find the publicKeyToken attribute.
@@ -692,6 +707,9 @@ private static XmlDocument CreateLicenseDom(CmiManifestSigner2 signer, XmlElemen
             return licenseDom;
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManifestSigner2 signer, string timeStampUrl, bool useSha256)
         {
             // Make sure it is RSA, as this is the only one Fusion will support.
@@ -903,6 +921,9 @@ private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string tim
             signatureNode.AppendChild(dsObject);
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         private static void StrongNameSignManifestDom(XmlDocument manifestDom, XmlDocument licenseDom, CmiManifestSigner2 signer, bool useSha256)
         {
             RSA snKey = signer.StrongNameKey as RSA;
@@ -1232,6 +1253,9 @@ internal CmiAuthenticodeSignerInfo(int errorCode)
             _error = errorCode;
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         internal CmiAuthenticodeSignerInfo(Win32.AXL_SIGNER_INFO signerInfo,
                                             Win32.AXL_TIMESTAMPER_INFO timestamperInfo)
         {
@@ -1350,6 +1374,9 @@ internal class CmiAuthenticodeTimestamperInfo
 
         private CmiAuthenticodeTimestamperInfo() { }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         internal CmiAuthenticodeTimestamperInfo(Win32.AXL_TIMESTAMPER_INFO timestamperInfo)
         {
             _error = (int)timestamperInfo.dwError;
