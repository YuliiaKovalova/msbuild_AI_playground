diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 31e2bec7ae4..03cb01f8b25 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1226,6 +1226,7 @@ private void InitializeOperatingEnvironment()
         /// </summary>
         private void RestoreOperatingEnvironment()
         {
+            // logic cloned in Microsoft.Build.BackEnd.InProcNode.HandleShutdown
             if (_componentHost.BuildParameters.SaveOperatingEnvironment)
             {
                 ErrorUtilities.VerifyThrow(_requestEntry.RequestConfiguration.SavedCurrentDirectory != null, "Current directory not previously saved.");
@@ -1271,8 +1272,7 @@ private void UpdateEnvironmentVariables(IDictionary<string, string> savedEnviron
                 // If the environment doesn't have the variable set, or if its value differs from what we have saved, set it
                 // to the saved value.  Doing the comparison before setting is faster than unconditionally setting it using
                 // the API.
-                string value;
-                if (!currentEnvironment.TryGetValue(entry.Key, out value) || !String.Equals(entry.Value, value, StringComparison.Ordinal))
+                if (!currentEnvironment.TryGetValue(entry.Key, out var currentValue) || !string.Equals(entry.Value, currentValue, StringComparison.Ordinal))
                 {
                     Environment.SetEnvironmentVariable(entry.Key, entry.Value);
                 }
diff --git a/src/Build/BackEnd/Node/InProcNode.cs b/src/Build/BackEnd/Node/InProcNode.cs
index b6a58044acd..8184ab96bf9 100644
--- a/src/Build/BackEnd/Node/InProcNode.cs
+++ b/src/Build/BackEnd/Node/InProcNode.cs
@@ -318,13 +318,16 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
                 ((IBuildComponent)objectCache).ShutdownComponent();
             }
 
+            // logic cloned in Microsoft.Build.BackEnd.RequestBuilder.RestoreOperatingEnvironment
             if (_componentHost.BuildParameters.SaveOperatingEnvironment)
             {
                 // Restore the original current directory.
                 NativeMethodsShared.SetCurrentDirectory(_savedCurrentDirectory);
 
                 // Restore the original environment.
-                foreach (KeyValuePair<string, string> entry in CommunicationsUtilities.GetEnvironmentVariables())
+                var currentEnvironment = CommunicationsUtilities.GetEnvironmentVariables();
+
+                foreach (KeyValuePair<string, string> entry in currentEnvironment)
                 {
                     if (!_savedEnvironment.ContainsKey(entry.Key))
                     {
@@ -334,7 +337,10 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
 
                 foreach (KeyValuePair<string, string> entry in _savedEnvironment)
                 {
-                    Environment.SetEnvironmentVariable(entry.Key, entry.Value);
+                    if (!currentEnvironment.TryGetValue(entry.Key, out var currentValue) || !string.Equals(entry.Value, currentValue, StringComparison.Ordinal))
+                    {
+                        Environment.SetEnvironmentVariable(entry.Key, entry.Value);
+                    }
                 }
             }
 
