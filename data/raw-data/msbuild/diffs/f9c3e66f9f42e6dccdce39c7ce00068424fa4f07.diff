diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 6fd931e36c9..dfc53935816 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -614,9 +614,11 @@ public GetAssemblyIdentity() { }
     public partial class GetCompatiblePlatform : Microsoft.Build.Tasks.TaskExtension
     {
         public GetCompatiblePlatform() { }
+        [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
+        [Microsoft.Build.Framework.RequiredAttribute]
         public string CurrentProjectPlatform { get { throw null; } set { } }
         public string PlatformLookupTable { get { throw null; } set { } }
         public override bool Execute() { throw null; }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 4e39b6565ea..2c47545ebc7 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -507,9 +507,11 @@ public GetAssemblyIdentity() { }
     public partial class GetCompatiblePlatform : Microsoft.Build.Tasks.TaskExtension
     {
         public GetCompatiblePlatform() { }
+        [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
+        [Microsoft.Build.Framework.RequiredAttribute]
         public string CurrentProjectPlatform { get { throw null; } set { } }
         public string PlatformLookupTable { get { throw null; } set { } }
         public override bool Execute() { throw null; }
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 63cecd7dd94..c3c2ce0a277 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -1,12 +1,12 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable enable
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using System;
 using System.Collections.Generic;
-using System.Linq;
 
 namespace Microsoft.Build.Tasks
 {
@@ -21,11 +21,13 @@ public class GetCompatiblePlatform : TaskExtension
         /// <summary>
         /// All ProjectReference items.
         /// </summary>
+        [Required]
         public ITaskItem[] AnnotatedProjects { get; set; }
 
         /// <summary>
         /// The platform the current project is building as. 
         /// </summary>
+        [Required]
         public string CurrentProjectPlatform { get; set; }
 
         /// <summary>
@@ -39,11 +41,18 @@ public class GetCompatiblePlatform : TaskExtension
         /// The resulting items with NearestPlatform metadata set.
         /// </summary>
         [Output]
-        public ITaskItem[] AssignedProjectsWithPlatform { get; set; }
+        public ITaskItem[]? AssignedProjectsWithPlatform { get; set; }
+
+        public GetCompatiblePlatform()
+        {
+            AnnotatedProjects = new ITaskItem[0];
+            CurrentProjectPlatform = string.Empty;
+            PlatformLookupTable = string.Empty;
+        }
 
         public override bool Execute()
         {
-            Dictionary<string, string> currentProjectLookupTable = ExtractLookupTable(PlatformLookupTable);
+            Dictionary<string, string>? currentProjectLookupTable = ExtractLookupTable(PlatformLookupTable);
 
             AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
             for (int i = 0; i < AnnotatedProjects.Length; i++)
@@ -61,7 +70,7 @@ public override bool Execute()
                 string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable");
                 // Pull platformlookuptable metadata from the referenced project. This allows custom
                 // mappings on a per-ProjectReference basis.
-                Dictionary<string, string> projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);
+                Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);
 
                 HashSet<string> projectReferencePlatforms = new HashSet<string>();
                 foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
@@ -114,7 +123,7 @@ public override bool Execute()
             return !Log.HasLoggedErrors;
         }
 
-        private Dictionary<string, string> ExtractLookupTable(string stringTable)
+        private Dictionary<string, string>? ExtractLookupTable(string stringTable)
         {
             if (string.IsNullOrEmpty(stringTable))
             {
