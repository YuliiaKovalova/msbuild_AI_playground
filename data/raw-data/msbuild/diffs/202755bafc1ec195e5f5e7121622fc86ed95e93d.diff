diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index b55b0dec344..6b9bd50e7d9 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -3394,12 +3394,6 @@ public void PropertyFunctionStaticMethodIntrinsicMaths()
             result = expander.ExpandIntoStringLeaveEscaped(@"$([MSBuild]::Modulo(2345.5, 43))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
 
             Assert.Equal((2345.5 % 43).ToString(), result);
-
-            // test for overflow wrapping
-            result = expander.ExpandIntoStringLeaveEscaped(@"$([MSBuild]::Add(9223372036854775807, 20))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-
-            double expectedResult = 9223372036854775807D + 20D;
-            Assert.Equal(expectedResult.ToString(), result);
         }
 
         /// <summary>
@@ -3692,14 +3686,16 @@ public void Medley()
                 new string[] {@"$([System.Text.RegularExpressions.Regex]::Match($(Input), `EXPORT\s+(.+)`).Groups[1].Value)","a"},
                 new string[] {"$([MSBuild]::Add(1,2).CompareTo(3))", "0"},
                 new string[] {"$([MSBuild]::Add(1,2).CompareTo(3))", "0"},
-                new string[] {"$([MSBuild]::Add(1,2).CompareTo(3.0))", "0"},
+                new string[] {"$([MSBuild]::Add(1,2.0).CompareTo(3.0))", "0"},
+                new string[] {"$([System.Convert]::ToDouble($([MSBuild]::Add(1,2))).CompareTo(3.0))", "0"},
                 new string[] {"$([MSBuild]::Add(1,2).CompareTo('3'))", "0"},
-                new string[] {"$([MSBuild]::Add(1,2).CompareTo(3.1))", "-1"},
+                new string[] {"$([System.Convert]::ToDouble($([MSBuild]::Add(1,2))).CompareTo(3.1))", "-1"},
                 new string[] {"$([MSBuild]::Add(1,2).CompareTo(2))", "1"},
                 new string[] {"$([MSBuild]::Add(1,2).Equals(3))", "True"},
-                new string[] {"$([MSBuild]::Add(1,2).Equals(3.0))", "True"},
+                new string[] {"$([MSBuild]::Add(1,2.0).Equals(3.0))", "True"},
+                new string[] {"$([System.Convert]::ToDouble($([MSBuild]::Add(1,2))).Equals(3.0))", "True"},
                 new string[] {"$([MSBuild]::Add(1,2).Equals('3'))", "True"},
-                new string[] {"$([MSBuild]::Add(1,2).Equals(3.1))", "False"},
+                new string[] {"$([System.Convert]::ToDouble($([MSBuild]::Add(1,2))).Equals(3.1))", "False"},
                 new string[] {"$(a.Insert(0,'%28'))", "%28no"},
                 new string[] {"$(a.Insert(0,'\"'))", "\"no"},
                 new string[] {"$(a.Insert(0,'(('))", "%28%28no"},
@@ -3858,7 +3854,11 @@ public void Medley()
                 "$((((",
                 "$($())",
                 "$",
-                "()"
+                "()",
+                "$([MSBuild]::Add(1,2).CompareTo(3.0))", // Add() returns a long
+                "$([MSBuild]::Add(1,2).CompareTo(3.1))",
+                "$([MSBuild]::Add(1,2).Equals(3.0))",
+                "$([MSBuild]::Add(1,2).Equals(3.1))"
             };
 
 #if !RUNTIME_TYPE_NETCORE
@@ -4179,6 +4179,9 @@ public void PropertyFunctionMathMin()
         public void PropertyFunctionMSBuildAdd()
         {
             TestPropertyFunction("$([MSBuild]::Add($(X), 5))", "X", "7", "12");
+            TestPropertyFunction("$([MSBuild]::Add($(X), 0.5))", "X", "7", "7.5");
+            // Overflow wrapping
+            TestPropertyFunction("$([MSBuild]::Add($(X), 1))", "X", long.MaxValue.ToString(), "-9223372036854775808");
         }
 
         [Fact]
@@ -4191,12 +4194,16 @@ public void PropertyFunctionMSBuildAddComplex()
         public void PropertyFunctionMSBuildSubtract()
         {
             TestPropertyFunction("$([MSBuild]::Subtract($(X), 20100000))", "X", "20100042", "42");
+            TestPropertyFunction("$([MSBuild]::Subtract($(X), 20100000.0))", "X", "20100042", "42");
+            // Overflow wrapping
+            TestPropertyFunction("$([MSBuild]::Subtract($(X), 9223372036854775806))", "X", long.MaxValue.ToString(), "1");
         }
 
         [Fact]
         public void PropertyFunctionMSBuildMultiply()
         {
             TestPropertyFunction("$([MSBuild]::Multiply($(X), 8800))", "X", "2", "17600");
+            TestPropertyFunction("$([MSBuild]::Multiply($(X), .5))", "X", "2", "1");
         }
 
         [Fact]
@@ -4208,7 +4215,15 @@ public void PropertyFunctionMSBuildMultiplyComplex()
         [Fact]
         public void PropertyFunctionMSBuildDivide()
         {
-            TestPropertyFunction("$([MSBuild]::Divide($(X), 10000))", "X", "65536", (6.5536).ToString());
+            TestPropertyFunction("$([MSBuild]::Divide($(X), 10000))", "X", "65536", "6");
+            TestPropertyFunction("$([MSBuild]::Divide($(X), 10000.0))", "X", "65536", "6.5536");
+        }
+
+        [Fact]
+        public void PropertyFunctionMSBuildModulo()
+        {
+            TestPropertyFunction("$([MSBuild]::Modulo($(X), 3))", "X", "10", "1");
+            TestPropertyFunction("$([MSBuild]::Modulo($(X), 3.0))", "X", "10", "1");
         }
 
         [Fact]
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 459217b3389..2ba63af71aa 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -78,7 +78,7 @@ internal enum ExpanderOptions
         /// When an error occurs expanding a property, just leave it unexpanded.
         /// </summary>
         /// <remarks>
-        /// This should only be used in cases where property evaluation isn't critcal, such as when attempting to log a
+        /// This should only be used in cases where property evaluation isn't critical, such as when attempting to log a
         /// message with a best effort expansion of a string, or when discovering partial information during lazy evaluation.
         /// </remarks>
         LeavePropertiesUnexpandedOnError = 0x20,
@@ -285,7 +285,7 @@ private void FlushFirstValueIfNeeded()
 
         /// <summary>
         /// The CultureInfo from the invariant culture. Used to avoid allocations for
-        /// perfoming IndexOf etc.
+        /// performing IndexOf etc.
         /// </summary>
         private static CompareInfo s_invariantCompareInfo = CultureInfo.InvariantCulture.CompareInfo;
 
@@ -3530,7 +3530,7 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                                 functionResult = _receiverType.InvokeMember(_methodMethodName, _bindingFlags, Type.DefaultBinder, objectInstance, args, CultureInfo.InvariantCulture);
                             }
                             // If we're invoking a method, then there are deeper attempts that can be made to invoke the method.
-                            // If not, we were asked to get a property or field but found that we cannot locate it. No further argument coersion is possible, so throw.
+                            // If not, we were asked to get a property or field but found that we cannot locate it. No further argument coercion is possible, so throw.
                             catch (MissingMethodException ex) when ((_bindingFlags & BindingFlags.InvokeMethod) == BindingFlags.InvokeMethod)
                             {
                                 // The standard binder failed, so do our best to coerce types into the arguments for the function
@@ -3934,41 +3934,36 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.Add), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (TryGetArgs(args, out double arg0, out double arg1))
+                            if (TryExecuteAdd(args, out returnVal))
                             {
-                                returnVal = IntrinsicFunctions.Add(arg0, arg1);
                                 return true;
                             }
                         }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.Subtract), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (TryGetArgs(args, out double arg0, out double arg1))
+                            if (TryExecuteSubtract(args, out returnVal))
                             {
-                                returnVal = IntrinsicFunctions.Subtract(arg0, arg1);
                                 return true;
                             }
                         }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.Multiply), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (TryGetArgs(args, out double arg0, out double arg1))
+                            if (TryExecuteMultiply(args, out returnVal))
                             {
-                                returnVal = IntrinsicFunctions.Multiply(arg0, arg1);
                                 return true;
                             }
                         }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.Divide), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (TryGetArgs(args, out double arg0, out double arg1))
+                            if (TryExecuteDivide(args, out returnVal))
                             {
-                                returnVal = IntrinsicFunctions.Divide(arg0, arg1);
                                 return true;
                             }
                         }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.Modulo), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (TryGetArgs(args, out double arg0, out double arg1))
+                            if (TryExecuteModulo(args, out returnVal))
                             {
-                                returnVal = IntrinsicFunctions.Modulo(arg0, arg1);
                                 return true;
                             }
                         }
@@ -4534,6 +4529,24 @@ private static bool TryConvertToInt(object value, out int arg0)
                 return false;
             }
 
+            private static bool TryConvertToLong(object value, out long arg0)
+            {
+                switch (value)
+                {
+                    case double d:
+                        arg0 = Convert.ToInt64(d);
+                        return arg0 == d;
+                    case long i:
+                        arg0 = i;
+                        return true;
+                    case string s when long.TryParse(s, out arg0):
+                        return true;
+                }
+
+                arg0 = 0;
+                return false;
+            }
+
             private static bool TryConvertToDouble(object value, out double arg)
             {
                 if (value is double unboxed)
@@ -4677,6 +4690,142 @@ private static bool TryGetArgs(object[] args, out string arg0, out int arg1)
                 return false;
             }
 
+            private static bool IsFloatingPointRepresentation(object value)
+            {
+                return value is double ||
+                       (value is string str && str.Contains(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator));
+            }
+
+            private static bool TryExecuteAdd(object[] args, out object resultValue)
+            {
+                resultValue = null;
+
+                if (args.Length != 2)
+                {
+                    return false;
+                }
+
+                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                {
+                    if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
+                    {
+                        resultValue = IntrinsicFunctions.Add(arg0, arg1);
+                        return true;
+                    }
+                }
+                else if (TryConvertToLong(args[0], out long arg0) && TryConvertToLong(args[1], out long arg1))
+                {
+                    resultValue = IntrinsicFunctions.Add(arg0, arg1);
+                    return true;
+                }
+
+                return false;
+            }
+
+            private static bool TryExecuteSubtract(object[] args, out object resultValue)
+            {
+                resultValue = null;
+
+                if (args.Length != 2)
+                {
+                    return false;
+                }
+
+                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                {
+                    if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
+                    {
+                        resultValue = IntrinsicFunctions.Subtract(arg0, arg1);
+                        return true;
+                    }
+                }
+                else if (TryConvertToLong(args[0], out long arg0) && TryConvertToLong(args[1], out long arg1))
+                {
+                    resultValue = IntrinsicFunctions.Subtract(arg0, arg1);
+                    return true;
+                }
+
+                return false;
+            }
+
+            private static bool TryExecuteMultiply(object[] args, out object resultValue)
+            {
+                resultValue = null;
+
+                if (args.Length != 2)
+                {
+                    return false;
+                }
+
+                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                {
+                    if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
+                    {
+                        resultValue = IntrinsicFunctions.Multiply(arg0, arg1);
+                        return true;
+                    }
+                }
+                else if (TryConvertToLong(args[0], out long arg0) && TryConvertToLong(args[1], out long arg1))
+                {
+                    resultValue = IntrinsicFunctions.Multiply(arg0, arg1);
+                    return true;
+                }
+
+                return false;
+            }
+
+            private static bool TryExecuteDivide(object[] args, out object resultValue)
+            {
+                resultValue = null;
+
+                if (args.Length != 2)
+                {
+                    return false;
+                }
+
+                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                {
+                    if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
+                    {
+                        resultValue = IntrinsicFunctions.Divide(arg0, arg1);
+                        return true;
+                    }
+                }
+                else if (TryConvertToLong(args[0], out long arg0) && TryConvertToLong(args[1], out long arg1))
+                {
+                    resultValue = IntrinsicFunctions.Divide(arg0, arg1);
+                    return true;
+                }
+
+                return false;
+            }
+
+            private static bool TryExecuteModulo(object[] args, out object resultValue)
+            {
+                resultValue = null;
+
+                if (args.Length != 2)
+                {
+                    return false;
+                }
+
+                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                {
+                    if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
+                    {
+                        resultValue = IntrinsicFunctions.Modulo(arg0, arg1);
+                        return true;
+                    }
+                }
+                else if (TryConvertToLong(args[0], out long arg0) && TryConvertToLong(args[1], out long arg1))
+                {
+                    resultValue = IntrinsicFunctions.Modulo(arg0, arg1);
+                    return true;
+                }
+
+                return false;
+            }
+
             [MethodImpl(MethodImplOptions.AggressiveInlining)]
             private void LogFunctionCall(string fileName, object objectInstance, object[] args)
             {
