diff --git a/.editorconfig b/.editorconfig
index 72c7d4a2b87..b8e856dc62d 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -1,25 +1,199 @@
-# EditorConfig is awesome:
-http://EditorConfig.org
+# editorconfig.org
 
 # top-most EditorConfig file
 root = true
 
 # Default settings:
+# A newline ending every file
 # Use 4 spaces as indentation
 [*]
+insert_final_newline = true
 indent_style = space
 indent_size = 4
-insert_final_newline = true
 trim_trailing_whitespace = true
 
+[project.json]
+indent_size = 2
+
+# C# files
+[*.cs]
+# New line preferences
+csharp_new_line_before_open_brace = all
+csharp_new_line_before_else = true
+csharp_new_line_before_catch = true
+csharp_new_line_before_finally = true
+csharp_new_line_before_members_in_object_initializers = true
+csharp_new_line_before_members_in_anonymous_types = true
+csharp_new_line_between_query_expression_clauses = true
+
+# Indentation preferences
+csharp_indent_block_contents = true
+csharp_indent_braces = false
+csharp_indent_case_contents = true
+csharp_indent_case_contents_when_block = true
+csharp_indent_switch_labels = true
+csharp_indent_labels = one_less_than_current
+
+# Modifier preferences
+csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
+
+# avoid this. unless absolutely necessary
+dotnet_style_qualification_for_field = false:suggestion
+dotnet_style_qualification_for_property = false:suggestion
+dotnet_style_qualification_for_method = false:suggestion
+dotnet_style_qualification_for_event = false:suggestion
+
+# Types: use keywords instead of BCL types, and permit var only when the type is clear
+csharp_style_var_for_built_in_types = false:suggestion
+csharp_style_var_when_type_is_apparent = false:none
+csharp_style_var_elsewhere = false:suggestion
+dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
+dotnet_style_predefined_type_for_member_access = true:suggestion
+
+# name all constant fields using PascalCase
+dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
+dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
+dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
+dotnet_naming_symbols.constant_fields.applicable_kinds   = field
+dotnet_naming_symbols.constant_fields.required_modifiers = const
+dotnet_naming_style.pascal_case_style.capitalization = pascal_case
+
+# static fields should have s_ prefix
+dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion
+dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
+dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style
+dotnet_naming_symbols.static_fields.applicable_kinds   = field
+dotnet_naming_symbols.static_fields.required_modifiers = static
+dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
+dotnet_naming_style.static_prefix_style.required_prefix = s_
+dotnet_naming_style.static_prefix_style.capitalization = camel_case
+
+# internal and private fields should be _camelCase
+dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
+dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
+dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style
+dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
+dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
+dotnet_naming_style.camel_case_underscore_style.required_prefix = _
+dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case
+
+# Code style defaults
+csharp_using_directive_placement = outside_namespace:suggestion
+dotnet_sort_system_directives_first = true
+csharp_prefer_braces = true:silent
+csharp_preserve_single_line_blocks = true:none
+csharp_preserve_single_line_statements = false:none
+csharp_prefer_static_local_function = true:suggestion
+csharp_prefer_simple_using_statement = false:none
+csharp_style_prefer_switch_expression = true:suggestion
+
+# Code quality
+dotnet_style_readonly_field = true:suggestion
+dotnet_code_quality_unused_parameters = non_public:suggestion
+
+# Expression-level preferences
+dotnet_style_object_initializer = true:suggestion
+dotnet_style_collection_initializer = true:suggestion
+dotnet_style_explicit_tuple_names = true:suggestion
+dotnet_style_coalesce_expression = true:suggestion
+dotnet_style_null_propagation = true:suggestion
+dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
+dotnet_style_prefer_inferred_tuple_names = true:suggestion
+dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
+dotnet_style_prefer_auto_properties = true:suggestion
+dotnet_style_prefer_conditional_expression_over_assignment = true:silent
+dotnet_style_prefer_conditional_expression_over_return = true:silent
+csharp_prefer_simple_default_expression = true:suggestion
+
+# Expression-bodied members
+csharp_style_expression_bodied_methods = true:silent
+csharp_style_expression_bodied_constructors = true:silent
+csharp_style_expression_bodied_operators = true:silent
+csharp_style_expression_bodied_properties = true:silent
+csharp_style_expression_bodied_indexers = true:silent
+csharp_style_expression_bodied_accessors = true:silent
+csharp_style_expression_bodied_lambdas = true:silent
+csharp_style_expression_bodied_local_functions = true:silent
+
+# Pattern matching
+csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
+csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
+csharp_style_inlined_variable_declaration = true:suggestion
+
+# Null checking preferences
+csharp_style_throw_expression = true:suggestion
+csharp_style_conditional_delegate_call = true:suggestion
+
+# Other features
+csharp_style_prefer_index_operator = false:none
+csharp_style_prefer_range_operator = false:none
+csharp_style_pattern_local_over_anonymous_function = false:none
+
+# Space preferences
+csharp_space_after_cast = false
+csharp_space_after_colon_in_inheritance_clause = true
+csharp_space_after_comma = true
+csharp_space_after_dot = false
+csharp_space_after_keywords_in_control_flow_statements = true
+csharp_space_after_semicolon_in_for_statement = true
+csharp_space_around_binary_operators = before_and_after
+csharp_space_around_declaration_statements = do_not_ignore
+csharp_space_before_colon_in_inheritance_clause = true
+csharp_space_before_comma = false
+csharp_space_before_dot = false
+csharp_space_before_open_square_brackets = false
+csharp_space_before_semicolon_in_for_statement = false
+csharp_space_between_empty_square_brackets = false
+csharp_space_between_method_call_empty_parameter_list_parentheses = false
+csharp_space_between_method_call_name_and_opening_parenthesis = false
+csharp_space_between_method_call_parameter_list_parentheses = false
+csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
+csharp_space_between_method_declaration_name_and_open_parenthesis = false
+csharp_space_between_method_declaration_parameter_list_parentheses = false
+csharp_space_between_parentheses = false
+csharp_space_between_square_brackets = false
+
+# Analyzers
+dotnet_code_quality.ca1802.api_surface = private, internal
+dotnet_code_quality.ca2208.api_surface = public
+
+# License header
+file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\n
+
+# C++ Files
+[*.{cpp,h,in}]
+curly_bracket_next_line = true
+indent_brace_style = Allman
+
 # Xml project files
-[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
+[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
+indent_size = 2
+
+[*.{csproj,vbproj,proj,nativeproj,locproj}]
+charset = utf-8
+
+# Xml build files
+[*.builds]
+indent_size = 2
+
+# Xml files
+[*.{xml,stylecop,resx,ruleset}]
 indent_size = 2
 
 # Xml config files
-[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
+[*.{props,targets,config,nuspec}]
 indent_size = 2
 
+# YAML config files
+[*.{yml,yaml}]
+indent_size = 2
+
+# Shell scripts
+[*.sh]
+end_of_line = lf
+[*.{cmd, bat}]
+end_of_line = crlf
+
 [src/**/*.{cs,vb}]
 # IDE0005: Remove unnecessary usings/imports
 dotnet_diagnostic.IDE0005.severity = warning
diff --git a/Directory.Build.props b/Directory.Build.props
index 2cc17a1372f..7f25a3aa5b6 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -68,4 +68,7 @@
 
     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
   </PropertyGroup>
+  
+  <Import Project="$(RepositoryEngineeringDir)Analyzers.props" />
+  
 </Project>
diff --git a/eng/Analyzers.props b/eng/Analyzers.props
new file mode 100644
index 00000000000..41194ccb2c5
--- /dev/null
+++ b/eng/Analyzers.props
@@ -0,0 +1,11 @@
+<Project>
+  <PropertyGroup>
+    <CodeAnalysisRuleset>$(MSBuildThisFileDirectory)CodeAnalysis.ruleset</CodeAnalysisRuleset>
+    <!-- Disable analyzers in sourcebuild -->
+    <EnableAnalyzers Condition="'$(DotNetBuildFromSource)' == 'true'">false</EnableAnalyzers>
+  </PropertyGroup>
+  <ItemGroup Condition="'$(EnableAnalyzers)' == 'true'">
+    <PackageReference Include="Microsoft.CodeQuality.Analyzers" VersionOverride="3.3.0" PrivateAssets="all" />
+    <PackageReference Include="StyleCop.Analyzers" VersionOverride="1.2.0-beta.164" PrivateAssets="all" />
+  </ItemGroup>
+</Project>
diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
new file mode 100644
index 00000000000..ce7ac39d787
--- /dev/null
+++ b/eng/CodeAnalysis.ruleset
@@ -0,0 +1,342 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<RuleSet Name="Microsoft.Analyzers.ManagedCodeAnalysis" Description="Microsoft.Analyzers.ManagedCodeAnalysis" ToolsVersion="16.0">
+<Rules AnalyzerId="Microsoft.DotNet.CodeAnalysis" RuleNamespace="Microsoft.DotNet.CodeAnalysis.Analyzers"> 
+      <Rule Id="BCL0001" Action="Warning" />         <!-- Ensure minimum API surface is respected --> 
+      <Rule Id="BCL0010" Action="Warning" />         <!-- AppContext default value expected to be true --> 
+      <Rule Id="BCL0011" Action="Warning" />         <!-- AppContext default value defined in if statement with incorrect pattern --> 
+      <Rule Id="BCL0012" Action="Warning" />         <!-- AppContext default value defined in if statement at root of switch case --> 
+      <Rule Id="BCL0015" Action="None" />            <!-- Invalid P/Invoke call --> 
+      <Rule Id="BCL0020" Action="Warning" />         <!-- Invalid SR.Format call --> 
+   </Rules> 
+   CommentEnd 
+   <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers"> 
+      <Rule Id="CA1000" Action="None" />             <!-- Do not declare static members on generic types --> 
+      <Rule Id="CA1001" Action="None" />             <!-- Types that own disposable fields should be disposable --> 
+      <Rule Id="CA1002" Action="None" />             <!-- Do not expose generic lists --> 
+      <Rule Id="CA1003" Action="None" />             <!-- Use generic event handler instances --> 
+      <Rule Id="CA1005" Action="None" />             <!-- Avoid excessive parameters on generic types --> 
+      <Rule Id="CA1008" Action="None" />             <!-- Enums should have zero value --> 
+      <Rule Id="CA1010" Action="None" />             <!-- Generic interface should also be implemented --> 
+      <Rule Id="CA1012" Action="None" />             <!-- Abstract types should not have constructors --> 
+      <Rule Id="CA1014" Action="None" />             <!-- Mark assemblies with CLSCompliant --> 
+      <Rule Id="CA1016" Action="None" />             <!-- Mark assemblies with assembly version --> 
+      <Rule Id="CA1017" Action="None" />             <!-- Mark assemblies with ComVisible --> 
+      <Rule Id="CA1018" Action="Warning" />          <!-- Mark attributes with AttributeUsageAttribute --> 
+      <Rule Id="CA1019" Action="None" />             <!-- Define accessors for attribute arguments --> 
+      <Rule Id="CA1024" Action="None" />             <!-- Use properties where appropriate --> 
+      <Rule Id="CA1027" Action="None" />             <!-- Mark enums with FlagsAttribute --> 
+      <Rule Id="CA1028" Action="None" />             <!-- Enum Storage should be Int32 --> 
+      <Rule Id="CA1030" Action="None" />             <!-- Use events where appropriate --> 
+      <Rule Id="CA1031" Action="None" />             <!-- Do not catch general exception types --> 
+      <Rule Id="CA1033" Action="None" />             <!-- Interface methods should be callable by child types --> 
+      <Rule Id="CA1036" Action="None" />             <!-- Override methods on comparable types --> 
+      <Rule Id="CA1040" Action="None" />             <!-- Avoid empty interfaces --> 
+      <Rule Id="CA1041" Action="None" />             <!-- Provide ObsoleteAttribute message --> 
+      <Rule Id="CA1043" Action="None" />             <!-- Use Integral Or String Argument For Indexers --> 
+      <Rule Id="CA1044" Action="None" />             <!-- Properties should not be write only --> 
+      <Rule Id="CA1046" Action="None" />             <!-- Do not overload equality operator on reference types --> 
+      <Rule Id="CA1047" Action="Warning" />          <!-- Do not declare protected member in sealed type --> 
+      <Rule Id="CA1050" Action="Warning" />          <!-- Declare types in namespaces --> 
+      <Rule Id="CA1051" Action="None" />             <!-- Do not declare visible instance fields --> 
+      <Rule Id="CA1052" Action="None" />             <!-- Static holder types should be Static or NotInheritable --> 
+      <Rule Id="CA1054" Action="None" />             <!-- Uri parameters should not be strings --> 
+      <Rule Id="CA1055" Action="None" />             <!-- Uri return values should not be strings --> 
+      <Rule Id="CA1056" Action="None" />             <!-- Uri properties should not be strings --> 
+      <Rule Id="CA1058" Action="None" />             <!-- Types should not extend certain base types --> 
+      <Rule Id="CA1061" Action="None" />             <!-- Do not hide base class methods --> 
+      <Rule Id="CA1062" Action="None" />             <!-- Validate arguments of public methods --> 
+      <Rule Id="CA1063" Action="None" />             <!-- Implement IDisposable Correctly --> 
+      <Rule Id="CA1064" Action="None" />             <!-- Exceptions should be public --> 
+      <Rule Id="CA1065" Action="None" />             <!-- Do not raise exceptions in unexpected locations --> 
+      <Rule Id="CA1066" Action="None" />             <!-- Implement IEquatable when overriding Object.Equals --> 
+      <Rule Id="CA1067" Action="None" />             <!-- Override Object.Equals(object) when implementing IEquatable<T> --> 
+      <Rule Id="CA1068" Action="None" />             <!-- CancellationToken parameters must come last --> 
+      <Rule Id="CA1069" Action="None" />             <!-- Enums values should not be duplicated --> 
+      <Rule Id="CA1070" Action="Info" />             <!-- Do not declare event fields as virtual --> 
+      <Rule Id="CA1200" Action="Warning" />          <!-- Avoid using cref tags with a prefix --> 
+      <Rule Id="CA1303" Action="None" />             <!-- Do not pass literals as localized parameters --> 
+      <Rule Id="CA1304" Action="None" />             <!-- Specify CultureInfo --> 
+      <Rule Id="CA1305" Action="None" />             <!-- Specify IFormatProvider --> 
+      <Rule Id="CA1307" Action="None" />             <!-- Specify StringComparison --> 
+      <Rule Id="CA1308" Action="None" />             <!-- Normalize strings to uppercase --> 
+      <Rule Id="CA1309" Action="None" />             <!-- Use ordinal stringcomparison --> 
+      <Rule Id="CA1401" Action="Warning" />          <!-- P/Invokes should not be visible --> 
+      <Rule Id="CA1417" Action="Warning" />          <!-- Do not use 'OutAttribute' on string parameters for P/Invokes --> 
+      <Rule Id="CA1502" Action="None" />             <!-- Avoid excessive complexity --> 
+      <Rule Id="CA1505" Action="None" />             <!-- Avoid unmaintainable code --> 
+      <Rule Id="CA1506" Action="None" />             <!-- Avoid excessive class coupling --> 
+      <Rule Id="CA1507" Action="Warning" />          <!-- Use nameof to express symbol names --> 
+      <Rule Id="CA1508" Action="None" />             <!-- Avoid dead conditional code --> 
+      <Rule Id="CA1509" Action="None" />             <!-- Invalid entry in code metrics rule specification file --> 
+      <Rule Id="CA1700" Action="None" />             <!-- Do not name enum values 'Reserved' --> 
+      <Rule Id="CA1710" Action="None" />             <!-- Identifiers should have correct suffix --> 
+      <Rule Id="CA1711" Action="None" />             <!-- Identifiers should not have incorrect suffix --> 
+      <Rule Id="CA1712" Action="None" />             <!-- Do not prefix enum values with type name --> 
+      <Rule Id="CA1715" Action="None" />             <!-- Identifiers should have correct prefix --> 
+      <Rule Id="CA1716" Action="None" />             <!-- Identifiers should not match keywords --> 
+      <Rule Id="CA1720" Action="None" />             <!-- Identifier contains type name --> 
+      <Rule Id="CA1721" Action="None" />             <!-- Property names should not match get methods --> 
+      <Rule Id="CA1724" Action="None" />             <!-- Type names should not match namespaces --> 
+      <Rule Id="CA1801" Action="None" />             <!-- Review unused parameters --> 
+      <Rule Id="CA1802" Action="Warning" />          <!-- Use literals where appropriate --> 
+      <Rule Id="CA1805" Action="Warning" />          <!-- Do not initialize unnecessarily --> 
+      <Rule Id="CA1810" Action="Warning" />          <!-- Initialize reference type static fields inline --> 
+      <Rule Id="CA1812" Action="None" />             <!-- Avoid uninstantiated internal classes --> 
+      <Rule Id="CA1816" Action="None" />             <!-- Dispose methods should call SuppressFinalize --> 
+      <Rule Id="CA1820" Action="None" />             <!-- Test for empty strings using string length --> 
+      <Rule Id="CA1821" Action="Warning" />          <!-- Remove empty Finalizers --> 
+      <Rule Id="CA1822" Action="None" />             <!-- Mark members as static --> 
+      <Rule Id="CA1823" Action="Warning" />          <!-- Avoid unused private fields --> 
+      <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
+      <Rule Id="CA1825" Action="Warning" />          <!-- Avoid zero-length array allocations. --> 
+      <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used --> 
+      <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used --> 
+      <Rule Id="CA1829" Action="Warning" />          <!-- Use Length/Count property instead of Count() when available --> 
+      <Rule Id="CA1830" Action="Warning" />          <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder. --> 
+      <Rule Id="CA1831" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+      <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+      <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+      <Rule Id="CA1834" Action="Warning" />          <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
+      <Rule Id="CA1835" Action="Warning" />          <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
+      <Rule Id="CA1836" Action="Warning" />          <!-- Prefer IsEmpty over Count --> 
+      <Rule Id="CA1837" Action="Warning" />          <!-- Use 'Environment.ProcessId' -->  
+      <Rule Id="CA1838" Action="Warning" />          <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
+      <Rule Id="CA2000" Action="None" />             <!-- Dispose objects before losing scope --> 
+      <Rule Id="CA2002" Action="None" />             <!-- Do not lock on objects with weak identity --> 
+      <Rule Id="CA2007" Action="Warning" />          <!-- Consider calling ConfigureAwait on the awaited task --> 
+      <Rule Id="CA2008" Action="Warning" />          <!-- Do not create tasks without passing a TaskScheduler --> 
+      <Rule Id="CA2009" Action="Warning" />          <!-- Do not call ToImmutableCollection on an ImmutableCollection value --> 
+      <Rule Id="CA2011" Action="Warning" />          <!-- Avoid infinite recursion --> 
+      <Rule Id="CA2012" Action="Warning" />          <!-- Use ValueTasks correctly --> 
+      <Rule Id="CA2013" Action="Warning" />          <!-- Do not use ReferenceEquals with value types --> 
+      <Rule Id="CA2014" Action="Warning" />          <!-- Do not use stackalloc in loops. --> 
+      <Rule Id="CA2015" Action="Warning" />          <!-- Do not define finalizers for types derived from MemoryManager<T> --> 
+      <Rule Id="CA2016" Action="Warning" />          <!-- Forward the 'CancellationToken' parameter to methods that take one --> 
+      <Rule Id="CA2100" Action="None" />             <!-- Review SQL queries for security vulnerabilities --> 
+      <Rule Id="CA2101" Action="None" />             <!-- Specify marshaling for P/Invoke string arguments --> 
+      <Rule Id="CA2109" Action="None" />             <!-- Review visible event handlers --> 
+      <Rule Id="CA2119" Action="None" />             <!-- Seal methods that satisfy private interfaces --> 
+      <Rule Id="CA2153" Action="None" />             <!-- Do Not Catch Corrupted State Exceptions --> 
+      <Rule Id="CA2201" Action="None" />             <!-- Do not raise reserved exception types --> 
+      <Rule Id="CA2208" Action="Warning" />          <!-- Instantiate argument exceptions correctly --> 
+      <Rule Id="CA2211" Action="None" />             <!-- Non-constant fields should not be visible --> 
+      <Rule Id="CA2213" Action="None" />             <!-- Disposable fields should be disposed --> 
+      <Rule Id="CA2215" Action="None" />             <!-- Dispose methods should call base class dispose --> 
+      <Rule Id="CA2216" Action="None" />             <!-- Disposable types should declare finalizer --> 
+      <Rule Id="CA2224" Action="None" />             <!-- Override Equals on overloading operator equals --> 
+      <Rule Id="CA2225" Action="None" />             <!-- Operator overloads have named alternates --> 
+      <Rule Id="CA2226" Action="None" />             <!-- Operators should have symmetrical overloads --> 
+      <Rule Id="CA2227" Action="None" />             <!-- Collection properties should be read only --> 
+      <Rule Id="CA2231" Action="None" />             <!-- Overload operator equals on overriding value type Equals --> 
+      <Rule Id="CA2234" Action="None" />             <!-- Pass system uri objects instead of strings --> 
+      <Rule Id="CA2235" Action="None" />             <!-- Mark all non-serializable fields --> 
+      <Rule Id="CA2241" Action="Warning" />          <!-- Provide correct arguments to formatting methods --> 
+      <Rule Id="CA2242" Action="Warning" />          <!-- Test for NaN correctly --> 
+      <Rule Id="CA2243" Action="None" />             <!-- Attribute string literals should parse correctly --> 
+      <Rule Id="CA2244" Action="None" />             <!-- Do not duplicate indexed element initializations --> 
+      <Rule Id="CA2245" Action="Warning" />          <!-- Do not assign a property to itself. --> 
+      <Rule Id="CA2246" Action="None" />             <!-- Assigning symbol and its member in the same statement. --> 
+      <Rule Id="CA2247" Action="Warning" />          <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum. --> 
+      <Rule Id="CA2248" Action="Warning" />          <!-- Provide correct 'enum' argument to 'Enum.HasFlag' --> 
+      <Rule Id="CA2249" Action="Warning" />          <!-- Consider using 'string.Contains' instead of 'string.IndexOf' --> 
+      <Rule Id="CA2300" Action="None" />             <!-- Do not use insecure deserializer BinaryFormatter --> 
+      <Rule Id="CA2301" Action="None" />             <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder --> 
+      <Rule Id="CA2302" Action="None" />             <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize --> 
+      <Rule Id="CA2305" Action="None" />             <!-- Do not use insecure deserializer LosFormatter --> 
+      <Rule Id="CA2310" Action="None" />             <!-- Do not use insecure deserializer NetDataContractSerializer --> 
+      <Rule Id="CA2311" Action="None" />             <!-- Do not deserialize without first setting NetDataContractSerializer.Binder --> 
+      <Rule Id="CA2312" Action="None" />             <!-- Ensure NetDataContractSerializer.Binder is set before deserializing --> 
+      <Rule Id="CA2315" Action="None" />             <!-- Do not use insecure deserializer ObjectStateFormatter --> 
+      <Rule Id="CA2321" Action="None" />             <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver --> 
+      <Rule Id="CA2322" Action="None" />             <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing --> 
+      <Rule Id="CA2326" Action="None" />             <!-- Do not use TypeNameHandling values other than None --> 
+      <Rule Id="CA2350" Action="None" />             <!-- Do not use DataTable.ReadXml() with untrusted data --> 
+      <Rule Id="CA2351" Action="None" />             <!-- Do not use DataSet.ReadXml() with untrusted data --> 
+      <Rule Id="CA2352" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks --> 
+      <Rule Id="CA2353" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type --> 
+      <Rule Id="CA2354" Action="None" />             <!-- Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks --> 
+      <Rule Id="CA2355" Action="None" />             <!-- Unsafe DataSet or DataTable type found in deserializable object graph --> 
+      <Rule Id="CA2356" Action="None" />             <!-- Unsafe DataSet or DataTable type in web deserializable object graph --> 
+      <Rule Id="CA2361" Action="None" />             <!-- Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data --> 
+      <Rule Id="CA2362" Action="None" />             <!-- Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks --> 
+      <Rule Id="CA3001" Action="None" />             <!-- Review code for SQL injection vulnerabilities --> 
+      <Rule Id="CA3002" Action="None" />             <!-- Review code for XSS vulnerabilities --> 
+      <Rule Id="CA3003" Action="None" />             <!-- Review code for file path injection vulnerabilities --> 
+      <Rule Id="CA3004" Action="None" />             <!-- Review code for information disclosure vulnerabilities --> 
+      <Rule Id="CA3005" Action="None" />             <!-- Review code for LDAP injection vulnerabilities --> 
+      <Rule Id="CA3006" Action="None" />             <!-- Review code for process command injection vulnerabilities --> 
+      <Rule Id="CA3007" Action="None" />             <!-- Review code for open redirect vulnerabilities --> 
+      <Rule Id="CA3008" Action="None" />             <!-- Review code for XPath injection vulnerabilities --> 
+      <Rule Id="CA3009" Action="None" />             <!-- Review code for XML injection vulnerabilities --> 
+      <Rule Id="CA3010" Action="None" />             <!-- Review code for XAML injection vulnerabilities --> 
+      <Rule Id="CA3011" Action="None" />             <!-- Review code for DLL injection vulnerabilities --> 
+      <Rule Id="CA3012" Action="None" />             <!-- Review code for regex injection vulnerabilities --> 
+      <Rule Id="CA3061" Action="Warning" />          <!-- Do Not Add Schema By URL --> 
+      <Rule Id="CA3075" Action="Warning" />          <!-- Insecure DTD processing in XML --> 
+      <Rule Id="CA3076" Action="Warning" />          <!-- Insecure XSLT script processing. --> 
+      <Rule Id="CA3077" Action="Warning" />          <!-- Insecure Processing in API Design, XmlDocument and XmlTextReader --> 
+      <Rule Id="CA3147" Action="Warning" />          <!-- Mark Verb Handlers With Validate Antiforgery Token --> 
+      <Rule Id="CA5350" Action="Warning" />          <!-- Do Not Use Weak Cryptographic Algorithms --> 
+      <Rule Id="CA5351" Action="Warning" />          <!-- Do Not Use Broken Cryptographic Algorithms --> 
+      <Rule Id="CA5358" Action="None" />             <!-- Review cipher mode usage with cryptography experts --> 
+      <Rule Id="CA5359" Action="Warning" />          <!-- Do Not Disable Certificate Validation --> 
+      <Rule Id="CA5360" Action="Warning" />          <!-- Do Not Call Dangerous Methods In Deserialization --> 
+      <Rule Id="CA5361" Action="Warning" />          <!-- Do Not Disable SChannel Use of Strong Crypto --> 
+      <Rule Id="CA5362" Action="None" />             <!-- Potential reference cycle in deserialized object graph --> 
+      <Rule Id="CA5363" Action="Warning" />          <!-- Do Not Disable Request Validation --> 
+      <Rule Id="CA5364" Action="Warning" />          <!-- Do Not Use Deprecated Security Protocols --> 
+      <Rule Id="CA5365" Action="Warning" />          <!-- Do Not Disable HTTP Header Checking --> 
+      <Rule Id="CA5366" Action="None" />             <!-- Use XmlReader For DataSet Read Xml --> 
+      <Rule Id="CA5367" Action="None" />             <!-- Do Not Serialize Types With Pointer Fields --> 
+      <Rule Id="CA5368" Action="Warning" />          <!-- Set ViewStateUserKey For Classes Derived From Page --> 
+      <Rule Id="CA5369" Action="None" />             <!-- Use XmlReader For Deserialize --> 
+      <Rule Id="CA5370" Action="Warning" />          <!-- Use XmlReader For Validating Reader --> 
+      <Rule Id="CA5371" Action="None" />             <!-- Use XmlReader For Schema Read --> 
+      <Rule Id="CA5372" Action="None" />             <!-- Use XmlReader For XPathDocument --> 
+      <Rule Id="CA5373" Action="Warning" />          <!-- Do not use obsolete key derivation function --> 
+      <Rule Id="CA5374" Action="Warning" />          <!-- Do Not Use XslTransform --> 
+      <Rule Id="CA5375" Action="None" />             <!-- Do Not Use Account Shared Access Signature --> 
+      <Rule Id="CA5376" Action="Warning" />          <!-- Use SharedAccessProtocol HttpsOnly --> 
+      <Rule Id="CA5377" Action="Warning" />          <!-- Use Container Level Access Policy --> 
+      <Rule Id="CA5378" Action="Warning" />          <!-- Do not disable ServicePointManagerSecurityProtocols --> 
+      <Rule Id="CA5379" Action="Warning" />          <!-- Do Not Use Weak Key Derivation Function Algorithm --> 
+      <Rule Id="CA5380" Action="Warning" />          <!-- Do Not Add Certificates To Root Store --> 
+      <Rule Id="CA5381" Action="Warning" />          <!-- Ensure Certificates Are Not Added To Root Store --> 
+      <Rule Id="CA5382" Action="None" />             <!-- Use Secure Cookies In ASP.Net Core --> 
+      <Rule Id="CA5383" Action="None" />             <!-- Ensure Use Secure Cookies In ASP.Net Core --> 
+      <Rule Id="CA5384" Action="Warning" />          <!-- Do Not Use Digital Signature Algorithm (DSA) --> 
+      <Rule Id="CA5385" Action="Warning" />          <!-- Use RivestâShamirâAdleman (RSA) Algorithm With Sufficient Key Size --> 
+      <Rule Id="CA5386" Action="None" />             <!-- Avoid hardcoding SecurityProtocolType value --> 
+      <Rule Id="CA5387" Action="None" />             <!-- Do Not Use Weak Key Derivation Function With Insufficient Iteration Count --> 
+      <Rule Id="CA5388" Action="None" />             <!-- Ensure Sufficient Iteration Count When Using Weak Key Derivation Function --> 
+      <Rule Id="CA5389" Action="None" />             <!-- Do Not Add Archive Item's Path To The Target File System Path --> 
+      <Rule Id="CA5390" Action="None" />             <!-- Do not hard-code encryption key --> 
+      <Rule Id="CA5391" Action="None" />             <!-- Use antiforgery tokens in ASP.NET Core MVC controllers --> 
+      <Rule Id="CA5392" Action="None" />             <!-- Use DefaultDllImportSearchPaths attribute for P/Invokes --> 
+      <Rule Id="CA5393" Action="None" />             <!-- Do not use unsafe DllImportSearchPath value --> 
+      <Rule Id="CA5394" Action="None" />             <!-- Do not use insecure randomness --> 
+      <Rule Id="CA5395" Action="None" />             <!-- Miss HttpVerb attribute for action methods --> 
+      <Rule Id="CA5396" Action="None" />             <!-- Set HttpOnly to true for HttpCookie --> 
+      <Rule Id="CA5397" Action="None" />             <!-- Do not use deprecated SslProtocols values --> 
+      <Rule Id="CA5398" Action="None" />             <!-- Avoid hardcoded SslProtocols values --> 
+      <Rule Id="CA5399" Action="None" />             <!-- HttpClients should enable certificate revocation list checks --> 
+      <Rule Id="CA5400" Action="None" />             <!-- Ensure HttpClient certificate revocation list check is not disabled --> 
+      <Rule Id="CA5401" Action="None" />             <!-- Do not use CreateEncryptor with non-default IV --> 
+      <Rule Id="CA5402" Action="None" />             <!-- Use CreateEncryptor with the default IV  --> 
+      <Rule Id="CA5403" Action="None" />             <!-- Do not hard-code certificate --> 
+      <Rule Id="IL3000" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
+      <Rule Id="IL3001" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
+  </Rules> 
+  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers"> 
+    <Rule Id="AD0001" Action="None" /> <!-- Analyzer threw an exception --> 
+    <Rule Id="SA0001" Action="None" /> <!-- XML comments --> 
+    <Rule Id="SA1002" Action="None" /> <!-- Semicolons should not be preceded by a space --> 
+    <Rule Id="SA1004" Action="None" /> <!-- Documentation line should begin with a space --> 
+    <Rule Id="SA1005" Action="None" /> <!-- Single line comment should begin with a space --> 
+    <Rule Id="SA1008" Action="None" /> <!-- Opening parenthesis should not be preceded by a space --> 
+    <Rule Id="SA1009" Action="None" /> <!-- Closing parenthesis should not be followed by a space --> 
+    <Rule Id="SA1010" Action="None" /> <!-- Opening square brackets should not be preceded by a space --> 
+    <Rule Id="SA1011" Action="None" /> <!-- Closing square bracket should be followed by a space --> 
+    <Rule Id="SA1012" Action="None" /> <!-- Opening brace should be followed by a space --> 
+    <Rule Id="SA1013" Action="None" /> <!-- Closing brace should be preceded by a space --> 
+    <Rule Id="SA1015" Action="None" /> <!-- Closing generic bracket should not be followed by a space --> 
+    <Rule Id="SA1021" Action="None" /> <!-- Negative sign should be preceded by a space --> 
+    <Rule Id="SA1023" Action="None" /> <!-- Dereference symbol '*' should not be preceded by a space." --> 
+    <Rule Id="SA1024" Action="None" /> <!-- Colon should be followed by a space --> 
+    <Rule Id="SA1025" Action="None" /> <!-- Code should not contain multiple whitespace characters in a row --> 
+    <Rule Id="SA1100" Action="None" /> <!-- Do not prefix calls with base unless local implementation exists --> 
+    <Rule Id="SA1106" Action="None" /> <!-- Code should not contain empty statements --> 
+    <Rule Id="SA1107" Action="None" /> <!-- Code should not contain multiple statements on one line --> 
+    <Rule Id="SA1110" Action="None" /> <!-- Opening parenthesis or bracket should be on declaration line --> 
+    <Rule Id="SA1111" Action="None" /> <!-- Closing parenthesis should be on line of last parameter --> 
+    <Rule Id="SA1114" Action="None" /> <!-- Parameter list should follow declaration --> 
+    <Rule Id="SA1116" Action="None" /> <!-- Split parameters should start on line after declaration --> 
+    <Rule Id="SA1117" Action="None" /> <!-- Parameters should be on same line or separate lines --> 
+    <Rule Id="SA1120" Action="None" /> <!-- Comments should contain text --> 
+    <Rule Id="SA1122" Action="None" /> <!-- Use string.Empty for empty strings --> 
+    <Rule Id="SA1123" Action="None" /> <!-- Region should not be located within a code element --> 
+    <Rule Id="SA1125" Action="None" /> <!-- Use shorthand for nullable types --> 
+    <Rule Id="SA1127" Action="None" /> <!-- Generic type constraints should be on their own line --> 
+    <Rule Id="SA1128" Action="None" /> <!-- Put constructor initializers on their own line --> 
+    <Rule Id="SA1130" Action="None" /> <!-- Use lambda syntax --> 
+    <Rule Id="SA1131" Action="None" /> <!-- Constant values should appear on the right-hand side of comparisons --> 
+    <Rule Id="SA1132" Action="None" /> <!-- Do not combine fields --> 
+    <Rule Id="SA1133" Action="None" /> <!-- Do not combine attributes --> 
+    <Rule Id="SA1134" Action="None" /> <!-- Each attribute should be placed on its own line of code --> 
+    <Rule Id="SA1135" Action="None" /> <!-- Using directive should be qualified --> 
+    <Rule Id="SA1136" Action="None" /> <!-- Enum values should be on separate lines --> 
+    <Rule Id="SA1137" Action="None" /> <!-- Elements should have the same indentation --> 
+    <Rule Id="SA1201" Action="None" /> <!-- Elements should appear in the correct order --> 
+    <Rule Id="SA1202" Action="None" /> <!-- Elements should be ordered by access --> 
+    <Rule Id="SA1203" Action="None" /> <!-- Constants should appear before fields --> 
+    <Rule Id="SA1204" Action="None" /> <!-- Static elements should appear before instance elements --> 
+    <Rule Id="SA1208" Action="None" /> <!-- Using directive ordering --> 
+    <Rule Id="SA1209" Action="None" /> <!-- Using alias directives should be placed after all using namespace directives --> 
+    <Rule Id="SA1210" Action="None" /> <!-- Using directives should be ordered alphabetically by the namespaces --> 
+    <Rule Id="SA1211" Action="None" /> <!-- Using alias directive ordering --> 
+    <Rule Id="SA1214" Action="None" /> <!-- Readonly fields should appear before non-readonly fields --> 
+    <Rule Id="SA1216" Action="None" /> <!-- Using static directives should be placed at the correct location --> 
+    <Rule Id="SA1300" Action="None" /> <!-- Element should begin with an uppercase letter --> 
+    <Rule Id="SA1303" Action="None" /> <!-- Const field names should begin with upper-case letter --> 
+    <Rule Id="SA1304" Action="None" /> <!-- Non-private readonly fields should begin with upper-case letter --> 
+    <Rule Id="SA1306" Action="None" /> <!-- Field should begin with lower-case letter --> 
+    <Rule Id="SA1308" Action="None" /> <!-- Field should not begin with the prefix 's_' --> 
+    <Rule Id="SA1311" Action="None" /> <!-- Static readonly fields should begin with upper-case letter --> 
+    <Rule Id="SA1312" Action="None" /> <!-- Variable should begin with lower-case letter --> 
+    <Rule Id="SA1313" Action="None" /> <!-- Parameter should begin with lower-case letter --> 
+    <Rule Id="SA1316" Action="None" /> <!-- Tuple element names should use correct casing --> 
+    <Rule Id="SA1401" Action="None" /> <!-- Fields should be private --> 
+    <Rule Id="SA1402" Action="None" /> <!-- File may only contain a single type --> 
+    <Rule Id="SA1403" Action="None" /> <!-- File may only contain a single namespace --> 
+    <Rule Id="SA1404" Action="Warning" /> <!-- Code analysis suppression should have justification --> 
+    <Rule Id="SA1405" Action="None" /> <!-- Debug.Assert should provide message text --> 
+    <Rule Id="SA1407" Action="None" /> <!-- Arithmetic expressions should declare precedence --> 
+    <Rule Id="SA1408" Action="None" /> <!-- Conditional expressions should declare precedence --> 
+    <Rule Id="SA1413" Action="None" /> <!-- Use trailing comma in multi-line initializers --> 
+    <Rule Id="SA1414" Action="None" /> <!-- Tuple types in signatures should have element names --> 
+    <Rule Id="SA1500" Action="None" /> <!-- Braces for multi-line statements should not share line --> 
+    <Rule Id="SA1501" Action="None" /> <!-- Statement should not be on a single line --> 
+    <Rule Id="SA1502" Action="None" /> <!-- Element should not be on a single line --> 
+    <Rule Id="SA1503" Action="None" /> <!-- Braces should not be omitted --> 
+    <Rule Id="SA1504" Action="None" /> <!-- All accessors should be single-line or multi-line --> 
+    <Rule Id="SA1505" Action="None" /> <!-- An opening brace should not be followed by a blank line --> 
+    <Rule Id="SA1506" Action="None" /> <!-- Element documentation headers should not be followed by blank line --> 
+    <Rule Id="SA1507" Action="None" /> <!-- Code should not contain multiple blank lines in a row --> 
+    <Rule Id="SA1508" Action="None" /> <!-- A closing brace should not be preceded by a blank line --> 
+    <Rule Id="SA1509" Action="None" /> <!-- Opening braces should not be preceded by blank line --> 
+    <Rule Id="SA1510" Action="None" /> <!-- 'else' statement should not be preceded by a blank line --> 
+    <Rule Id="SA1512" Action="None" /> <!-- Single-line comments should not be followed by blank line --> 
+    <Rule Id="SA1513" Action="None" /> <!-- Closing brace should be followed by blank line --> 
+    <Rule Id="SA1514" Action="None" /> <!-- Element documentation header should be preceded by blank line --> 
+    <Rule Id="SA1515" Action="None" /> <!-- Single-line comment should be preceded by blank line --> 
+    <Rule Id="SA1516" Action="None" /> <!-- Elements should be separated by blank line --> 
+    <Rule Id="SA1519" Action="None" /> <!-- Braces should not be omitted from multi-line child statement --> 
+    <Rule Id="SA1520" Action="None" /> <!-- Use braces consistently --> 
+    <Rule Id="SA1601" Action="None" /> <!-- Partial elements should be documented --> 
+    <Rule Id="SA1602" Action="None" /> <!-- Enumeration items should be documented --> 
+    <Rule Id="SA1604" Action="None" /> <!-- Element documentation should have summary --> 
+    <Rule Id="SA1605" Action="None" /> <!-- Partial element documentation should have summary --> 
+    <Rule Id="SA1606" Action="None" /> <!-- Element documentation should have summary text --> 
+    <Rule Id="SA1608" Action="None" /> <!-- Element documentation should not have default summary --> 
+    <Rule Id="SA1610" Action="None" /> <!-- Property documentation should have value text --> 
+    <Rule Id="SA1611" Action="None" /> <!-- The documentation for parameter 'message' is missing --> 
+    <Rule Id="SA1612" Action="None" /> <!-- The parameter documentation is at incorrect position --> 
+    <Rule Id="SA1614" Action="None" /> <!-- Element parameter documentation should have text --> 
+    <Rule Id="SA1616" Action="None" /> <!-- Element return value documentation should have text --> 
+    <Rule Id="SA1618" Action="None" /> <!-- The documentation for type parameter is missing --> 
+    <Rule Id="SA1619" Action="None" /> <!-- The documentation for type parameter is missing --> 
+    <Rule Id="SA1622" Action="None" /> <!-- Generic type parameter documentation should have text --> 
+    <Rule Id="SA1623" Action="None" /> <!-- Property documentation text --> 
+    <Rule Id="SA1624" Action="None" /> <!-- Because the property only contains a visible get accessor, the documentation summary text should begin with 'Gets' --> 
+    <Rule Id="SA1626" Action="None" /> <!-- Single-line comments should not use documentation style slashes --> 
+    <Rule Id="SA1627" Action="None" /> <!-- The documentation text within the \'exception\' tag should not be empty --> 
+    <Rule Id="SA1629" Action="None" /> <!-- Documentation text should end with a period --> 
+    <Rule Id="SA1633" Action="None" /> <!-- File should have header --> 
+    <Rule Id="SA1642" Action="None" /> <!-- Constructor summary documentation should begin with standard text --> 
+    <Rule Id="SA1643" Action="None" /> <!-- Destructor summary documentation should begin with standard text --> 
+    <Rule Id="SA1649" Action="None" /> <!-- File name should match first type name --> 
+  </Rules> 
+  <Rules AnalyzerId="xunit.analyzers" RuleNamespace="xunit.analyzers"> 
+    <Rule Id="xUnit2013" Action="None" /> <!-- Do not use equality check to check for collection size. --> 
+  </Rules> 
+</RuleSet> 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 8b51e260d1f..16c086af36b 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -24,6 +24,7 @@
 
     <!-- Do not generate a warning that our 'stable' package should not have a prerelease dependency. -->
     <NoWarn>$(NoWarn);NU5104</NoWarn>
+    <EnableAnalyzers>true</EnableAnalyzers>
   </PropertyGroup>
 
   <ItemGroup>
