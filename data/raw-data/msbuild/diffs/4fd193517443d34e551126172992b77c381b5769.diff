diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index d904b008a11..f8587c129c4 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -490,18 +490,29 @@ public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string soluti
             WriteEvent(67, sdkName, solutionPath, projectPath, success);
         }
 
+        /// <remarks>
+        /// This events are quite frequent so they are collected by Debug binaries only.
+        /// </remarks>
         [Event(68, Keywords = Keywords.All)]
         public void ReusableStringBuilderFactoryStart(int hash, int newCapacity, int oldCapacity, string type)
         {
             WriteEvent(68, hash, newCapacity, oldCapacity, type);
         }
 
+        /// <remarks>
+        /// This events are quite frequent so they are collected by Debug binaries only.
+        /// </remarks>
         [Event(69, Keywords = Keywords.All)]
         public void ReusableStringBuilderFactoryStop(int hash, int returningCapacity, int returningLength, string type)
         {
             WriteEvent(69, hash, returningCapacity, returningLength, type);
         }
 
+        /// <remarks>
+        /// As oppose to other ReusableStringBuilderFactory events this one is expected to happens very un-frequently
+        ///    and if it is seen more than 100x per build it might indicates wrong usage patterns resulting into degrading
+        ///    efficiency of ReusableStringBuilderFactory. Hence it is collected in release build as well.
+        /// </remarks>
         [Event(70, Keywords = Keywords.All)]
         public void ReusableStringBuilderFactoryUnbalanced(int oldHash, int newHash)
         {
diff --git a/src/Framework/ReuseableStringBuilder.cs b/src/Framework/ReuseableStringBuilder.cs
index cd70959bfbf..72b7ea47073 100644
--- a/src/Framework/ReuseableStringBuilder.cs
+++ b/src/Framework/ReuseableStringBuilder.cs
@@ -312,12 +312,10 @@ internal static void Release(ReuseableStringBuilder returning)
                     var oldSharedBuilder = Interlocked.Exchange(ref s_sharedBuilder, returningBuilder);
                     if (oldSharedBuilder != null)
                     {
-#if DEBUG
                         // This can identify improper usage from multiple thread or bug in code - Get was reentered before Release.
                         // User of ReuseableStringBuilder has to make sure that calling method call stacks do not also use ReuseableStringBuilder.
                         // Look at stack traces of ETW events which contains reported string builder hashes.
                         MSBuildEventSource.Log.ReusableStringBuilderFactoryUnbalanced(oldHash: oldSharedBuilder.GetHashCode(), newHash: returningBuilder.GetHashCode());
-#endif
                     }
 #if DEBUG
                     MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, returningLength: returningLength, type: returning._borrowedBuilder != returningBuilder ? "return-new" : "return");
