diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 06324b51b52..929f4dd9a18 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -2609,6 +2609,21 @@ public void MSBuildVersion()
                 "DisplayVersion is semver2 while MSBuildVersion is Major.Minor.Build but should be a prefix match");
         }
 
+        /// <summary>
+        /// Assert MSBuildStartTime property
+        /// </summary>
+        [Fact]
+        public void MSBuildStartTimeNotNull()
+        {
+            Project project = new Project();
+            string msBuildStartTimeValue = project.GetPropertyValue("MSBuildStartTime");
+            Assert.NotNull(msBuildStartTimeValue);
+            Assert.True(DateTime.TryParse(msBuildStartTimeValue, null, System.Globalization.DateTimeStyles.RoundtripKind, out var _));
+
+            string msBuildProjectStartTimeValue = project.GetPropertyValue("MSBuildProjectStartTime");
+            Assert.NotNull(msBuildProjectStartTimeValue);
+            Assert.True(DateTime.TryParse(msBuildProjectStartTimeValue, null, System.Globalization.DateTimeStyles.RoundtripKind, out var _));
+        }
 
         /// <summary>
         /// Test standard reserved properties
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 1fec6f1c510..7b01535c354 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -64,6 +64,11 @@ public class BuildParameters : ITranslatable
         /// </summary>
         private static string s_startupDirectory = NativeMethodsShared.GetCurrentDirectory();
 
+        /// <summary>
+        /// The start time.
+        /// </summary>
+        private static System.DateTime s_startTime = System.DateTime.Now;
+
         /// <summary>
         /// Indicates whether we should warn when a property is uninitialized when it is used.
         /// </summary>
@@ -633,6 +638,11 @@ public bool ShutdownInProcNodeOnBuildFinish
         /// </summary>
         internal static string StartupDirectory => s_startupDirectory;
 
+        /// <summary>
+        /// Gets or sets the start time.
+        /// </summary>
+        internal static string StartTime => BuildParameters.s_startTime.ToString("o");
+
         /// <summary>
         /// Indicates whether the build plan is enabled or not.
         /// </summary>
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 5c211089967..471d4baa933 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1129,7 +1129,7 @@ private void AddBuiltInProperties()
             SetBuiltInProperty(ReservedPropertyNames.toolsPath, _data.Toolset.ToolsPath);
             SetBuiltInProperty(ReservedPropertyNames.binPath, _data.Toolset.ToolsPath);
             SetBuiltInProperty(ReservedPropertyNames.startupDirectory, startupDirectory);
-            builtInProperties.Add(SetBuiltInProperty(ReservedPropertyNames.startTime, BuildParameters.StartTime));
+            SetBuiltInProperty(ReservedPropertyNames.startTime, BuildParameters.StartTime);
             SetBuiltInProperty(ReservedPropertyNames.buildNodeCount, _maxNodeCount.ToString(CultureInfo.CurrentCulture));
             SetBuiltInProperty(ReservedPropertyNames.programFiles32, FrameworkLocationHelper.programFiles32);
             SetBuiltInProperty(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion);
@@ -1753,7 +1753,7 @@ private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
 
                     _evaluationLoggingContext.LogBuildEvent(eventArgs);
                 }
-                
+
                 return;
             }
 
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index 02ace6e3e0a..64117589183 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -46,6 +46,8 @@ internal static class ReservedPropertyNames
         internal const string overrideTasksPath = "MSBuildOverrideTasksPath";
         internal const string defaultOverrideToolsVersion = "DefaultOverrideToolsVersion";
         internal const string startupDirectory = "MSBuildStartupDirectory";
+        internal const string startTime = "MSBuildStartTime";
+        internal const string projectStartTime = "MSBuildProjectStartTime";
         internal const string buildNodeCount = "MSBuildNodeCount";
         internal const string lastTaskResult = "MSBuildLastTaskResult";
         internal const string extensionsPathSuffix = "MSBuild";
@@ -132,17 +134,17 @@ internal static class Constants
         internal const string VisualStudioVersionPropertyName = "VisualStudioVersion";
 
         /// <summary>
-        /// Name of the property used to select which sub-toolset to use. 
+        /// Name of the property used to select which sub-toolset to use.
         /// </summary>
         internal const string SubToolsetVersionPropertyName = VisualStudioVersionPropertyName;
 
         /// <summary>
-        /// Value we should be setting VisualStudioVersion as the ultimate fallback when Dev10 is installed. 
+        /// Value we should be setting VisualStudioVersion as the ultimate fallback when Dev10 is installed.
         /// </summary>
         internal const string Dev10SubToolsetValue = "10.0";
 
         /// <summary>
-        /// Current version of this MSBuild Engine assembly in the 
+        /// Current version of this MSBuild Engine assembly in the
         /// form, e.g, "4.0"
         /// </summary>
         internal static string AssemblyVersion
@@ -231,12 +233,12 @@ internal static Tuple<string, Type> GetValue(string key)
         }
 
         /// <summary>
-        /// Tries to retrieve the type information for a type name / method name combination. 
-        /// 
+        /// Tries to retrieve the type information for a type name / method name combination.
+        ///
         /// It does 2 lookups:
         /// 1st try: 'typeFullName'
         /// 2nd try: 'typeFullName::simpleMethodName'
-        /// 
+        ///
         /// </summary>
         /// <param name="typeFullName">namespace qualified type name</param>
         /// <param name="simpleMethodName">name of the method</param>
