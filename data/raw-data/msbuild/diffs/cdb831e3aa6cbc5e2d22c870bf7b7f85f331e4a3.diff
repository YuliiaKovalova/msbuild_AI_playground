diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 93d86a9f079..9f4eac95214 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -5,6 +5,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Threading;
 
 
@@ -12,7 +13,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
-
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.BackEnd
@@ -235,6 +236,31 @@ public void TestValidConstructors()
                 parameters2,
                 null,
                 null);
+
+            HashSet<string> WarningsAsErrors = new HashSet<string>();
+            WarningsAsErrors.Add("MSB1234");
+            WarningsAsErrors.Add("MSB1235");
+            WarningsAsErrors.Add("MSB1236");
+            WarningsAsErrors.Add("MSB1237");
+
+            TaskHostConfiguration config5 = new TaskHostConfiguration(
+                1,
+                Directory.GetCurrentDirectory(),
+                null,
+                Thread.CurrentThread.CurrentCulture,
+                Thread.CurrentThread.CurrentUICulture,
+#if FEATURE_APPDOMAIN
+                null,
+#endif
+                1,
+                1,
+                @"c:\my project\myproj.proj",
+                _continueOnErrorDefault,
+                "TaskName",
+                @"c:\MyTasks\MyTask.dll",
+                parameters2,
+                null,
+                WarningsAsErrors);
         }
 
         /// <summary>
@@ -452,6 +478,50 @@ public void TestTranslationWithITaskItemArrayInDictionary()
             TaskHostPacketHelpers.AreEqual(itemArray, deserializedItemArray);
         }
 
+        /// <summary>
+        /// Test serialization / deserialization when the parameter dictionary contains an ITaskItem array. 
+        /// </summary>
+        [Fact]
+        public void TestTranslationWithWarningsAsErrors()
+        {
+            HashSet<string> WarningsAsErrors = new HashSet<string>();
+            WarningsAsErrors.Add("MSB1234");
+            WarningsAsErrors.Add("MSB1235");
+            WarningsAsErrors.Add("MSB1236");
+            WarningsAsErrors.Add("MSB1237");
+            TaskHostConfiguration config = new TaskHostConfiguration(
+                1,
+                Directory.GetCurrentDirectory(),
+                null,
+                Thread.CurrentThread.CurrentCulture,
+                Thread.CurrentThread.CurrentUICulture,
+#if FEATURE_APPDOMAIN
+                null,
+#endif
+                1,
+                1,
+                @"c:\my project\myproj.proj",
+                _continueOnErrorDefault,
+                "TaskName",
+                @"c:\MyTasks\MyTask.dll",
+                null,
+                null,
+                WarningsAsErrors);
+
+            ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
+            INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
+
+            TaskHostConfiguration deserializedConfig = packet as TaskHostConfiguration;
+
+            Assert.Equal(config.TaskName, deserializedConfig.TaskName);
+#if !FEATURE_ASSEMBLYLOADCONTEXT
+            Assert.Equal(config.TaskLocation, deserializedConfig.TaskLocation);
+#endif
+            Assert.NotNull(deserializedConfig.WarningsAsErrors);
+            config.WarningsAsErrors.SequenceEqual(deserializedConfig.WarningsAsErrors, StringComparer.Ordinal).ShouldBeTrue();
+
+        }
+
         /// <summary>
         /// Helper methods for testing the task host-related packets. 
         /// </summary>
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 0a78ef5ab4f..5ae040eb353 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -273,7 +273,7 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn
         }
 
         [Fact]
-        public void WarningsAsErrors_ExpectTaskFailureWhenLoggingWarningAsError()
+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
@@ -292,7 +292,10 @@ public void WarningsAsErrors_ExpectTaskFailureWhenLoggingWarningAsError()
 
                 MockLogger logger = proj.BuildProjectExpectFailure();
 
-                // The build should STOP when a task logs an error
+                logger.WarningCount.ShouldBe(0);
+                logger.ErrorCount.ShouldBe(1);
+
+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. 
                 logger.AssertLogDoesntContain("MSB4181");
             }
         }
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index ea47e9ce060..d15465780cd 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -515,6 +515,11 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;
         }
 
+        /// <summary>
+        /// Returns a hashset of warnings to be logged as errors.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be logged as errors.</param>
+        /// <returns></returns>
         public HashSet<string> GetWarningsAsErrors(BuildEventContext context)
         {
             int key = GetWarningsAsErrorOrMessageKey(context);
