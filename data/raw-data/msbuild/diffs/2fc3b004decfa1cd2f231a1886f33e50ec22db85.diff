diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 0cf98ee1bb8..7edb0ae0447 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -55,7 +55,7 @@ public sealed class BinaryLogger : ILogger
         //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext
         // version 15:
         //   - Don't log all environment variables at BuildStarted
-        //   - Log environment variables accessed as properties at BuildFinished
+        //   - Log environment variables accessed as properties via EnvironmentVariableReadEventArgs
         internal const int FileFormatVersion = 15;
 
         private Stream stream;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index ab422aca622..64a26269a78 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -362,14 +362,12 @@ private BuildEventArgs ReadBuildFinishedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
             var succeeded = ReadBoolean();
-            var environmentProperties = fileFormatVersion >= 15 ? ReadStringDictionary() : null;
 
             var e = new BuildFinishedEventArgs(
                 fields.Message,
                 fields.HelpKeyword,
                 succeeded,
-                fields.Timestamp,
-                environmentVariables: environmentProperties);
+                fields.Timestamp);
             SetCommonFields(e, fields);
             return e;
         }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index b5737686fef..1089888ff12 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -262,7 +262,6 @@ private void Write(BuildFinishedEventArgs e)
             Write(BinaryLogRecordKind.BuildFinished);
             WriteBuildEventArgsFields(e);
             Write(e.Succeeded);
-            Write(EnvironmentUtilities.EnvironmentVariablesUsedAsProperties);
         }
 
         private void Write(ProjectEvaluationStartedEventArgs e)
diff --git a/src/Framework/BuildFinishedEventArgs.cs b/src/Framework/BuildFinishedEventArgs.cs
index 54224f38b52..1647591416c 100644
--- a/src/Framework/BuildFinishedEventArgs.cs
+++ b/src/Framework/BuildFinishedEventArgs.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections.Generic;
 using System.IO;
 
 #nullable disable
@@ -26,11 +25,6 @@ public class BuildFinishedEventArgs : BuildStatusEventArgs
         /// </summary>
         private bool succeeded;
 
-        /// <summary>
-        /// Environment variable-derived properties
-        /// </summary>
-        private IDictionary<string, string> environmentVariables;
-
         /// <summary>
         /// Default constructor
         /// </summary>
@@ -71,7 +65,7 @@ public BuildFinishedEventArgs
             bool succeeded,
             DateTime eventTimestamp
         )
-            : this(message, helpKeyword, succeeded, eventTimestamp, messageArgs: null)
+            : this(message, helpKeyword, succeeded, eventTimestamp, null)
         {
             // do nothing
         }
@@ -97,30 +91,6 @@ params object[] messageArgs
             this.succeeded = succeeded;
         }
 
-        /// <summary>
-        /// Constructor which allows environment variable-derived properties to be set
-        /// </summary>
-        /// <param name="message">text message</param>
-        /// <param name="helpKeyword">help keyword </param>
-        /// <param name="succeeded">True indicates a successful build</param>
-        /// <param name="eventTimestamp">Timestamp when the event was created</param>
-        /// <param name="environmentVariables">Properties derived from environment variables</param>
-        /// <param name="messageArgs">message arguments</param>
-        public BuildFinishedEventArgs
-        (
-            string message,
-            string helpKeyword,
-            bool succeeded,
-            DateTime eventTimestamp,
-            IDictionary<string, string> environmentVariables,
-            params object[] messageArgs
-        )
-            : base(message, helpKeyword, "MSBuild", eventTimestamp, messageArgs)
-        {
-            this.succeeded = succeeded;
-            this.environmentVariables = environmentVariables;
-        }
-
 
         #region CustomSerializationToStream
         /// <summary>
@@ -155,10 +125,5 @@ public bool Succeeded
                 return succeeded;
             }
         }
-
-        /// <summary>
-        /// Gets all environment variables read when trying to evaluate properties along with their values.
-        /// </summary>
-        public IDictionary<string, string> EnvironmentVariables => environmentVariables;
     }
 }
diff --git a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
index 813fa92a36d..e69de29bb2d 100644
--- a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,2 +0,0 @@
-Microsoft.Build.Framework.BuildFinishedEventArgs.BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, System.DateTime eventTimestamp, System.Collections.Generic.IDictionary<string, string> environmentVariables, params object[] messageArgs) -> void
-Microsoft.Build.Framework.BuildFinishedEventArgs.EnvironmentVariables.get -> System.Collections.Generic.IDictionary<string, string>
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 813fa92a36d..e69de29bb2d 100644
--- a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,2 +0,0 @@
-Microsoft.Build.Framework.BuildFinishedEventArgs.BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, System.DateTime eventTimestamp, System.Collections.Generic.IDictionary<string, string> environmentVariables, params object[] messageArgs) -> void
-Microsoft.Build.Framework.BuildFinishedEventArgs.EnvironmentVariables.get -> System.Collections.Generic.IDictionary<string, string>
\ No newline at end of file
diff --git a/src/Shared/EnvironmentUtilities.cs b/src/Shared/EnvironmentUtilities.cs
index 97b4e53a1a4..01cf349f2f8 100644
--- a/src/Shared/EnvironmentUtilities.cs
+++ b/src/Shared/EnvironmentUtilities.cs
@@ -2,9 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections.Generic;
 using System.Runtime.InteropServices;
-using Microsoft.Build.Collections;
 
 namespace Microsoft.Build.Shared
 {
@@ -14,7 +12,5 @@ internal static partial class EnvironmentUtilities
 
         public static bool Is64BitOperatingSystem =>
             Environment.Is64BitOperatingSystem;
-
-        public static Dictionary<string, string> EnvironmentVariablesUsedAsProperties { get; } = new(MSBuildNameIgnoreCaseComparer.Default);
     }
 }
