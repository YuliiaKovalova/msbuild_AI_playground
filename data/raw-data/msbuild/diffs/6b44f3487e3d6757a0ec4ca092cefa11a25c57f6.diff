diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 9f17afc88e7..0a85fcd67dd 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -496,19 +496,16 @@ string assemblyFileName
                     (
                         new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null)
                     );
-                    referencesToResolve.Remove(reference);
                 }
             }
             catch (BadImageFormatException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (UnauthorizedAccessException e)
             {
                 // If this isn't a valid assembly, then record the exception and continue on
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
 
             // If couldn't resolve the assemly name then just use the simple name extracted from
@@ -599,7 +596,6 @@ ITaskItem referenceAssemblyName
 
             // Create the reference.
             var reference = new Reference(_isWinMDFile, _fileExists, _getRuntimeVersion);
-            referencesToResolve.Add(reference);
             reference.MakePrimaryAssemblyReference(referenceAssemblyName, wantSpecificVersion, executableExtension);
 
             // Escape simple names.
@@ -689,23 +685,19 @@ ITaskItem referenceAssemblyName
             {
                 // If this isn't a valid assembly, then record the exception and continue on
                 reference.AddError(new BadImageReferenceException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (FileNotFoundException e) // Why isn't this covered in NotExpectedException?
             {
                 reference.AddError(new BadImageReferenceException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (FileLoadException e)
             {
                 // Managed assembly was found but could not be loaded.
                 reference.AddError(new BadImageReferenceException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
                 reference.AddError(new BadImageReferenceException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
 
             // If there is still no assembly name then this is a case where the assembly metadata
@@ -1141,7 +1133,6 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
                       (
                           new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null)
                       );
-                referencesToResolve.Remove(reference);
 
                 return;
             }
@@ -1182,7 +1173,6 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
 
                         var newEntry = new KeyValuePair<AssemblyNameExtension, Reference>(unifiedDependency.PostUnified, newReference);
                         newEntries.Add(newEntry);
-                        referencesToResolve.Add(newReference);
                     }
                     else
                     {
@@ -1199,11 +1189,6 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
                             existingReference.AddSourceItems(reference.GetSourceItems());
                             existingReference.AddDependee(reference);
 
-                            if (!existingReference.IsResolved && !existingReference.IsUnresolvable)
-                            {
-                                referencesToResolve.Add(existingReference);
-                            }
-
                             if (unifiedDependency.IsUnified)
                             {
                                 existingReference.AddPreUnificationVersion(reference.FullPath, unifiedDependency.PreUnified.Version, unifiedDependency.UnificationReason);
@@ -1222,28 +1207,23 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
             catch (FileNotFoundException e) // Why isn't this covered in NotExpectedException?
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (FileLoadException e)
             {
                 // Managed assembly was found but could not be loaded.
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (BadImageFormatException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (System.Runtime.InteropServices.COMException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
-                referencesToResolve.Remove(reference);
             }
         }
 
@@ -1611,6 +1591,7 @@ internal AssemblyNameExtension GetReferenceFromItemSpec(string itemSpec)
         /// <param name="removedReference">Reference to remove dependencies for</param>
         /// <param name="referenceList">Reference list which contains reference to be used in unification and returned as resolved items</param>
         /// <param name="dependencyList"> A dictionary (Key: Reference Value: List of dependencies and their assembly name)</param>
+        /// <param name="referencesToResolve">List of unresolved references that should be kept updated.</param>
         private static void RemoveDependencies(Reference removedReference, Dictionary<AssemblyNameExtension, Reference> referenceList, Dictionary<Reference, List<ReferenceAssemblyExtensionPair>> dependencyList, Dictionary<AssemblyNameExtension, Reference> referencesToResolve)
         {
             // See if the reference has a list of dependencies
