diff --git a/src/Framework/StringBuilderCache.cs b/src/Framework/StringBuilderCache.cs
index 6ca6563823f..7e255266aa3 100644
--- a/src/Framework/StringBuilderCache.cs
+++ b/src/Framework/StringBuilderCache.cs
@@ -31,8 +31,6 @@
 **
 ===========================================================*/
 
-//#define ASSERT_BALANCE
-
 using System;
 using System.Diagnostics;
 using System.Text;
@@ -82,12 +80,9 @@ public static void Release(StringBuilder sb)
         {
             if (sb.Capacity <= MAX_BUILDER_SIZE)
             {
-#if ASSERT_BALANCE
                 // Assert we are not replacing another string builder. That could happen when Acquire is reentered.
                 // User of StringBuilderCache has to make sure that calling method call stacks do not also use StringBuilderCache.
                 Debug.Assert(StringBuilderCache.t_cachedInstance == null, "Unexpected replacing of other StringBuilder.");
-#endif
-
                 StringBuilderCache.t_cachedInstance = sb;
             }
 #if DEBUG && !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 53b19c17a62..3390d2dfd83 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1087,7 +1087,10 @@ quiet at the engine level.
                             bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);
                             StringBuilder logConflict = StringBuilderCache.Acquire();
                             LogConflict(conflictCandidate, fusionName, logConflict);
-                            StringBuilder logDependencies = logWarning ? logConflict.AppendLine() : StringBuilderCache.Acquire();
+
+                            // If we logging warnings append it into existing StringBuilder, otherwise build details by new StringBuilder.
+                            // Remark: There is no point to use StringBuilderCache.Acquire() here as at this point StringBuilderCache already rent StringBuilder for this thread
+                            StringBuilder logDependencies = logWarning ? logConflict.AppendLine() : new StringBuilder();
 
                             // Log the assemblies and primary source items which are related to the conflict which was just logged.
                             Reference victor = dependencyTable.GetReference(conflictCandidate.ConflictVictorName);
@@ -1108,7 +1111,7 @@ quiet at the engine level.
                             }
                             else
                             {
-                                details = StringBuilderCache.GetStringAndRelease(logDependencies);
+                                details = logDependencies.ToString();
                                 Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), output);
                                 Log.LogMessage(MessageImportance.Low, details);
                             }
