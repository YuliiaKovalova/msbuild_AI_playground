diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 4e74b719ba4..7a932c671f9 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -242,8 +242,6 @@ private static void ReportResult(
             return;
         }
 
-		// Add the diagnostic to the check wrapper for telemetry purposes.
-        checkWrapper.AddDiagnostic(config);
         checkWrapper.ReportResult(result, checkContext, config);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
index 49749cfd358..9568709534c 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
@@ -116,7 +116,7 @@ internal void StartNewProject(
         }
     }
 
-    internal void AddDiagnostic(CheckConfigurationEffective configurationEffective)
+    private void AddDiagnostic(CheckConfigurationEffective configurationEffective)
     {
         BuildCheckRuleTelemetryData? telemetryData =
             _ruleTelemetryData.FirstOrDefault(td => td.RuleId.Equals(configurationEffective.RuleId));
@@ -144,7 +144,10 @@ internal void AddDiagnostic(CheckConfigurationEffective configurationEffective)
                 break;
         }
 
-        // TODO: add throttling info - once it's merged
+        if (IsThrottled)
+        {
+            telemetryData.SetThrottled();
+        }
     }
 
     internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)
@@ -166,6 +169,9 @@ internal void ReportResult(BuildCheckResult result, ICheckContext checkContext,
                     IsThrottled = true;
                 }
             }
+
+            // Add the diagnostic to the check wrapper for telemetry purposes.
+            AddDiagnostic(config);
         }
     }
 
@@ -185,8 +191,6 @@ internal IReadOnlyList<BuildCheckRuleTelemetryData> GetRuleTelemetryData()
         return _ruleTelemetryData;
     }
 
-    internal TimeSpan Elapsed => _stopwatch.Elapsed;
-
     internal CleanupScope StartSpan()
     {
         _stopwatch.Start();
