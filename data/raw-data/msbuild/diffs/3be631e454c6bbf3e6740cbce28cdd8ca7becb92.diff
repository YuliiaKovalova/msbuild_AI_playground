diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 2a61b0d755a..b04cc1d7f87 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -47,7 +47,7 @@ public void Initialize(IEventSource eventSource)
             // Finished
             eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);
             eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);
-            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
+            eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
             // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
             // Raised
             eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
@@ -75,8 +75,9 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             if (projects.ContainsKey(id)) return;
             // Add project
             FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
-            node.WriteStart();
             projects[id] = node;
+            // Log
+            node.Log();
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
@@ -84,7 +85,8 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
             int id = e.BuildEventContext!.ProjectInstanceId;
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update line
-            node.WriteEnd();
+            node.Finished = true;
+            node.Log();
         }
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
@@ -93,10 +95,17 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             int id = e.BuildEventContext!.ProjectInstanceId;
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
-            node.WriteTarget(e);
+            node.AddTarget(e);
+            node.Log();
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
+            // Get project id
+            int id = e.BuildEventContext!.ProjectInstanceId;
+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            // Update
+            node.FinishedTargets++;
+            node.Log();
         }
 
         // Task
@@ -107,7 +116,8 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
 
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
-            node.UpdateLine();
+            node.AddTask(e);
+            node.Log();
             existingTasks++;
         }
 
@@ -136,6 +146,7 @@ public void Shutdown() {
             {
             }*/
             FancyLoggerBuffer.Terminate();
+            Console.Clear();
             Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
         }
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index ee5a07bf835..f435b6cab45 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -18,61 +18,60 @@ private static string GetUnambiguousPath(string path)
         {
             return Path.GetFileName(path);
         }
+
         public int Id;
         public string ProjectPath;
+        public bool Finished;
+        // Line to display project info
         public FancyLoggerBufferLine? Line;
+        // Targets
+        public int FinishedTargets;
         public FancyLoggerBufferLine? CurrentTargetLine;
+        public FancyLoggerTargetNode? CurrentTargetNode;
+
         public FancyLoggerProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
             ProjectPath = args.ProjectFile!;
+            Finished = false;
+            FinishedTargets = 0;
         }
 
-        public void UpdateLine()
+        public void Log()
         {
-            if (Line == null) return;
-            FancyLoggerBuffer.UpdateLine(Line.Id,
-                ANSIBuilder.Alignment.SpaceBetween(
-                    $"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim("Project - ")} {GetUnambiguousPath(ProjectPath)}",
-                    $"({ANSIBuilder.Formatting.Italic("n")} targets completed)",
-                    Console.WindowWidth
-                )
+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(
+                $"{(Finished ? ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim("Project - ")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}",
+                $"({FinishedTargets} targets completed)",
+                Console.WindowWidth
             );
+            // Create or update line
+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);
+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);
+            // If current target
+            if (CurrentTargetNode == null) return;
+            // Create or update
+            if (Finished && CurrentTargetLine != null)
+            {
+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                return;
+            }
+            string currentTargetLineContents = $"\t  └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? "Something"}";
+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);
+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);
         }
 
-        public void WriteStart()
+        public void AddTarget(TargetStartedEventArgs args)
         {
-            Line = FancyLoggerBuffer.WriteNewLine("");
-            CurrentTargetLine = FancyLoggerBuffer.WriteNewLine("   `- Target and task information will be shown here...");
-            UpdateLine();
+            CurrentTargetNode = new FancyLoggerTargetNode(args);
         }
-        public void WriteEnd()
+        public void AddTask(TaskStartedEventArgs args)
         {
-            if (Line == null) return;
-            FancyLoggerBuffer.UpdateLine(Line.Id,
-                ANSIBuilder.Alignment.SpaceBetween(
-                    $"{ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim("Project - ")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(ProjectPath), ANSIBuilder.Formatting.ForegroundColor.Green)}",
-                    "(All targets complete)",
-                    Console.WindowWidth
-                )
-            );
-            if (CurrentTargetLine == null) return;
-            FancyLoggerBuffer.DeleteLine(CurrentTargetLine!.Id);
-        }
-
-        public void WriteTarget(TargetStartedEventArgs args)
-        {
-            if (Line == null) return;
-            // Update spinner
-            UpdateLine();
-            // Update target line
-            FancyLoggerBuffer.UpdateLine(CurrentTargetLine!.Id, $"   `- {ANSIBuilder.Formatting.Dim(args.TargetName)}");
-
-            /* FancyLoggerTargetNode targetNode = new FancyLoggerTargetNode(args);
-            FancyLoggerBuffer.WriteNewLineAfter(
-                $"-- Target {targetNode.TargetName}",
-                Line.Id
-            ); */
+            // Get target id
+            int targetId = args.BuildEventContext!.TargetId;
+            if (CurrentTargetNode?.Id == targetId)
+            {
+                CurrentTargetNode.AddTask(args);
+            }
         }
     }
 
@@ -80,11 +79,16 @@ public class FancyLoggerTargetNode
     {
         public int Id;
         public string TargetName;
+        public FancyLoggerTaskNode? CurrentTaskNode;
         public FancyLoggerTargetNode(TargetStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TargetId;
             TargetName = args.TargetName;
         }
+        public void AddTask(TaskStartedEventArgs args)
+        {
+            CurrentTaskNode = new FancyLoggerTaskNode(args);
+        }
     }
 
     public class FancyLoggerTaskNode
