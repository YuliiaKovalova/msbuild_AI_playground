diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 9b769125ffd..84163fb13d3 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -114,7 +114,7 @@ internal void ProcessTaskStartedEventArgs(
                 TaskParameters = taskParameters,
                 AnalysisData = new(
                     projectFilePath: taskStartedEventArgs.ProjectFile!,
-                    projectInstanceId: taskStartedEventArgs.BuildEventContext.ProjectInstanceId,
+                    projectConfigurationId: taskStartedEventArgs.BuildEventContext.ProjectInstanceId,
                     taskInvocationLocation: invocationLocation,
                     taskName: taskStartedEventArgs.TaskName,
                     taskAssemblyLocation: taskStartedEventArgs.TaskAssemblyLocation,
diff --git a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
index cad281012a1..97d7cb451a3 100644
--- a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
+++ b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
@@ -18,8 +18,8 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// Base for a data passed from infrastructure to build analyzers.
 /// </summary>
 /// <param name="projectFilePath">Currently built project.</param>
-/// <param name="projectInstanceId">The unique id of a project with unique global properties set.</param>
-public abstract class AnalysisData(string projectFilePath, int? projectInstanceId)
+/// <param name="projectConfigurationId">The unique id of a project with unique global properties set.</param>
+public abstract class AnalysisData(string projectFilePath, int? projectConfigurationId)
 {
     private string? _projectFileDirectory;
 
@@ -34,7 +34,14 @@ public abstract class AnalysisData(string projectFilePath, int? projectInstanceI
     ///
     /// In cases where the project instance cannot be determined, it will be set to <see cref="BuildEventContext.InvalidProjectInstanceId"/>.
     /// </summary>
-    public int ProjectInstanceId { get; } = projectInstanceId ?? BuildEventContext.InvalidProjectInstanceId;
+    /// <remarks>
+    /// The same project with same global properties (aka configuration), can be executed multiple times to obtain results for multiple targets.
+    ///  (this is internally distinguished as 'ProjectContextId' - each context is a different request for different targets results).
+    /// This is not distinguished by the ProjectConfigurationId - as all of those executions share same configuration and results and prevents re-execution of the same targets.
+    ///
+    /// InstanceId (ConfigurationId): https://github.com/dotnet/msbuild/blob/2a8b16dbabd25782554ff0fe77619d58eccfe603/src/Build/BackEnd/BuildManager/BuildManager.cs#L2186-L2244
+    /// </remarks>
+    public int ProjectConfigurationId { get; } = projectConfigurationId ?? BuildEventContext.InvalidProjectInstanceId;
 
     /// <summary>
     /// Directory path of the file being built (the containing directory of <see cref="ProjectFilePath"/>).
diff --git a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
index 1c34552cd21..be24b5346c0 100644
--- a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
@@ -13,10 +13,10 @@ public class EvaluatedPropertiesAnalysisData : AnalysisData
 {
     internal EvaluatedPropertiesAnalysisData(
         string projectFilePath,
-        int? projectInstanceId,
+        int? projectConfigurationId,
         IReadOnlyDictionary<string, string> evaluatedProperties,
         IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)
-        : base(projectFilePath, projectInstanceId)
+        : base(projectFilePath, projectConfigurationId)
     {
         EvaluatedProperties = evaluatedProperties;
         EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
diff --git a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
index 04ac41ca1d7..6d3cb3aa1fe 100644
--- a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
@@ -46,9 +46,9 @@ public class ParsedItemsAnalysisData : AnalysisData
 {
     internal ParsedItemsAnalysisData(
         string projectFilePath,
-        int? projectInstanceId,
+        int? projectConfigurationId,
         ItemsHolder itemsHolder) :
-        base(projectFilePath, projectInstanceId) => ItemsHolder = itemsHolder;
+        base(projectFilePath, projectConfigurationId) => ItemsHolder = itemsHolder;
 
     public ItemsHolder ItemsHolder { get; }
 }
@@ -109,12 +109,12 @@ public IEnumerable<string> EnumerateStringValues()
 
     internal TaskInvocationAnalysisData(
         string projectFilePath,
-        int? projectInstanceId,
+        int? projectConfigurationId,
         ElementLocation taskInvocationLocation,
         string taskName,
         string taskAssemblyLocation,
         IReadOnlyDictionary<string, TaskParameter> parameters)
-        : base(projectFilePath, projectInstanceId)
+        : base(projectFilePath, projectConfigurationId)
     {
         TaskInvocationLocation = taskInvocationLocation;
         TaskName = taskName;
diff --git a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
index 14fb0cbbeb4..79c1ece94be 100644
--- a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
+++ b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
@@ -5,4 +5,4 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
-internal class ProjectProcessingDoneData(string projectFilePath, int? projectInstanceId) : AnalysisData(projectFilePath, projectInstanceId);
+internal class ProjectProcessingDoneData(string projectFilePath, int? projectConfigurationId) : AnalysisData(projectFilePath, projectConfigurationId);
diff --git a/src/Build/BuildCheck/OM/PropertyReadData.cs b/src/Build/BuildCheck/OM/PropertyReadData.cs
index d2083bedebc..4efb1107ffd 100644
--- a/src/Build/BuildCheck/OM/PropertyReadData.cs
+++ b/src/Build/BuildCheck/OM/PropertyReadData.cs
@@ -13,19 +13,19 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 internal class PropertyReadData(
     string projectFilePath,
-    int? projectInstanceId,
+    int? projectConfigurationId,
     string propertyName,
     IMsBuildElementLocation elementLocation,
     bool isUninitialized,
     PropertyReadContext propertyReadContext)
-    : AnalysisData(projectFilePath, projectInstanceId)
+    : AnalysisData(projectFilePath, projectConfigurationId)
 {
     public PropertyReadData(
         string projectFilePath,
-        int? projectInstanceId,
+        int? projectConfigurationId,
         PropertyReadInfo propertyReadInfo)
         : this(projectFilePath,
-            projectInstanceId,
+            projectConfigurationId,
             propertyReadInfo.PropertyName.Substring(propertyReadInfo.StartIndex, propertyReadInfo.EndIndex - propertyReadInfo.StartIndex + 1),
             propertyReadInfo.ElementLocation,
             propertyReadInfo.IsUninitialized,
diff --git a/src/Build/BuildCheck/OM/PropertyWriteData.cs b/src/Build/BuildCheck/OM/PropertyWriteData.cs
index 483fcf2f594..f2148075e43 100644
--- a/src/Build/BuildCheck/OM/PropertyWriteData.cs
+++ b/src/Build/BuildCheck/OM/PropertyWriteData.cs
@@ -13,15 +13,15 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 internal class PropertyWriteData(
     string projectFilePath,
-    int? projectInstanceId,
+    int? projectConfigurationId,
     string propertyName,
     IMsBuildElementLocation? elementLocation,
     bool isEmpty)
-    : AnalysisData(projectFilePath, projectInstanceId)
+    : AnalysisData(projectFilePath, projectConfigurationId)
 {
-    public PropertyWriteData(string projectFilePath, int? projectInstanceId, PropertyWriteInfo propertyWriteInfo)
+    public PropertyWriteData(string projectFilePath, int? projectConfigurationId, PropertyWriteInfo propertyWriteInfo)
         : this(projectFilePath,
-            projectInstanceId,
+            projectConfigurationId,
             propertyWriteInfo.PropertyName,
             propertyWriteInfo.ElementLocation,
             propertyWriteInfo.IsEmpty)
