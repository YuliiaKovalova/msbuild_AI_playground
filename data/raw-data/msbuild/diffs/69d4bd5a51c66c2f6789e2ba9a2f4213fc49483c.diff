diff --git a/src/MSBuild/LiveLogger/AnsiCodes.cs b/src/MSBuild/LiveLogger/AnsiCodes.cs
new file mode 100644
index 00000000000..d5126c25d47
--- /dev/null
+++ b/src/MSBuild/LiveLogger/AnsiCodes.cs
@@ -0,0 +1,78 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Logging.LiveLogger;
+
+/// <summary>
+/// A collection of standard ANSI/VT100 control codes.
+/// </summary>
+internal static class AnsiCodes
+{
+    /// <summary>
+    /// The control sequence introducer.
+    /// </summary>
+    public const string CSI = "\x1b[";
+
+    /// <summary>
+    /// Select graphic rendition.
+    /// </summary>
+    /// <remarks>\
+    /// Print <see cref="CSI"/>color-code<see cref="SetColor"/> to change text color.
+    /// </remarks>
+    public const string SetColor = ";1m";
+
+    /// <summary>
+    /// A shortcut to reset color back to normal.
+    /// </summary>
+    public const string SetDefaultColor = CSI + "m";
+
+    /// <summary>
+    /// Non-xterm extension to render a hyperlink.
+    /// </summary>
+    /// <remarks>
+    /// Print <see cref="LinkPrefix"/>url<see cref="LinkInfix"/>text<see cref="LinkSuffix"/> to render a hyperlink.
+    /// </remarks>
+    public const string LinkPrefix = "\x1b]8;;";
+
+    /// <summary>
+    /// <see cref="LinkPrefix"/>
+    /// </summary>
+    public const string LinkInfix = "\x1b\\";
+
+    /// <summary>
+    /// <see cref="LinkPrefix"/>
+    /// </summary>
+    public const string LinkSuffix = "\x1b]8;;\x1b\\";
+
+    /// <summary>
+    /// Moves up the specified number of lines and puts cursor at the beginning of the line.
+    /// </summary>
+    /// <remarks>
+    /// Print <see cref="CSI"/>N<see cref="MoveUpToLineStart"/> to move N lines up.
+    /// </remarks>
+    public const string MoveUpToLineStart = "F";
+
+    /// <summary>
+    /// Moves forward (to the right) the specified number of characters.
+    /// </summary>
+    /// <remarks>
+    /// Print <see cref="CSI"/>N<see cref="MoveForward"/> to move N characters forward.
+    /// </remarks>
+    public const string MoveForward = "C";
+
+    /// <summary>
+    /// Clears everything from cursor to end of screen.
+    /// </summary>
+    /// <remarks>
+    /// Print <see cref="CSI"/><see cref="EraseInDisplay"/> to clear.
+    /// </remarks>
+    public const string EraseInDisplay = "J";
+
+    /// <summary>
+    /// Clears everything from cursor to the end of the current line.
+    /// </summary>
+    /// <remarks>
+    /// Print <see cref="CSI"/><see cref="EraseInLine"/> to clear.
+    /// </remarks>
+    public const string EraseInLine = "K";
+}
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index b0c89dee18c..a198fa06924 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -347,7 +347,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                         {
                             // Ignore any GetDirectoryName exceptions
                         }
-                        Terminal.WriteLine($" ({duration:F1}s) → \x1b]8;;{url}\x1b\\{outputPath}\x1b]8;;\x1b\\");
+                        Terminal.WriteLine($" ({duration:F1}s) → {AnsiCodes.LinkPrefix}{url}{AnsiCodes.LinkInfix}{outputPath}{AnsiCodes.LinkSuffix}");
                     }
                     else
                     {
@@ -522,7 +522,7 @@ private void DisplayNodes()
         string rendered = newFrame.Render(_currentFrame);
 
         // Move cursor back to 1st line of nodes
-        Terminal.WriteLine($"\x1b[{_currentFrame.NodesCount + 1}F");
+        Terminal.WriteLine($"{AnsiCodes.CSI}{_currentFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
         Terminal.Write(rendered);
 
         _currentFrame = newFrame;
@@ -537,8 +537,8 @@ private void EraseNodes()
         {
             return;
         }
-        Terminal.WriteLine($"\x1b[{_currentFrame.NodesCount + 1}F");
-        Terminal.Write($"\x1b[0J");
+        Terminal.WriteLine($"{AnsiCodes.CSI}{_currentFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
+        Terminal.Write($"{AnsiCodes.CSI}{AnsiCodes.EraseInDisplay}");
         _currentFrame.Clear();
     }
 
@@ -619,7 +619,7 @@ public string Render(NodesFrame previousFrame)
             int i = 0;
             for (; i < NodesCount; i++)
             {
-                var needed = FitToWidth(this.NodeString(i));
+                var needed = FitToWidth(NodeString(i));
 
                 // Do we have previous node string to compare with?
                 if (previousFrame.NodesCount > i)
@@ -637,12 +637,12 @@ public string Render(NodesFrame previousFrame)
                         else
                         {
                             // set cursor to different char
-                            sb.Append($"\x1b[{commonPrefixLen}C");
+                            sb.Append($"{AnsiCodes.CSI}{commonPrefixLen}{AnsiCodes.MoveForward}");
                             sb.Append(needed.Slice(commonPrefixLen));
                             // Shall we clear rest of line
                             if (needed.Length < previous.Length)
                             {
-                                sb.Append($"\x1b[K");
+                                sb.Append($"{AnsiCodes.CSI}{AnsiCodes.EraseInLine}");
                             }
                         }
                     }
@@ -660,7 +660,7 @@ public string Render(NodesFrame previousFrame)
             // clear no longer used lines
             if (i < previousFrame.NodesCount)
             {
-                sb.Append($"\x1b[0J");
+                sb.Append($"{AnsiCodes.CSI}{AnsiCodes.EraseInDisplay}");
             }
 
             return sb.ToString();
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
index a0bc269d3bb..08f1b3cf39a 100644
--- a/src/MSBuild/LiveLogger/Terminal.cs
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -113,15 +113,15 @@ public void WriteColor(TerminalColor color, string text)
         if (_isBuffering)
         {
             _outputBuilder
-                .Append("\x1b[")
+                .Append(AnsiCodes.CSI)
                 .Append((int)color)
-                .Append(";1m")
+                .Append(AnsiCodes.SetColor)
                 .Append(text)
-                .Append("\x1b[m");
+                .Append(AnsiCodes.SetDefaultColor);
         }
         else
         {
-            Write($"\x1b[{(int)color};1m{text}\x1b[m");
+            Write($"{AnsiCodes.CSI}{(int)color}{AnsiCodes.SetColor}{text}{AnsiCodes.SetDefaultColor}");
         }
     }
 
@@ -135,7 +135,7 @@ public void WriteColorLine(TerminalColor color, string text)
         }
         else
         {
-            WriteLine($"\x1b[{(int)color};1m{text}\x1b[m");
+            WriteLine($"{AnsiCodes.CSI}{(int)color}{AnsiCodes.SetColor}{text}{AnsiCodes.SetDefaultColor}");
         }
     }
 
