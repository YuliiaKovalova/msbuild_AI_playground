diff --git a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
index 42aee43c5e0..490ab73ea35 100644
--- a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -4,14 +4,14 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Reflection.Metadata;
 using System.Text;
 using System.Threading.Tasks;
+using Microsoft.Build.BuildCop.Infrastructure;
 using Microsoft.Build.Experimental.BuildCop;
 using Shouldly;
 using Xunit;
 
-#nullable disable
-
 namespace Microsoft.Build.Analyzers.UnitTests
 {
     public class BuildAnalyzerConfiguration_Test
@@ -19,7 +19,7 @@ public class BuildAnalyzerConfiguration_Test
         [Fact]
         public void CreateWithNull_ReturnsObjectWithNullValues()
         {
-            var buildConfig = BuildAnalyzerConfiguration.Create(null);
+            var buildConfig = BuildAnalyzerConfiguration.Create(null!);
             buildConfig.ShouldNotBeNull();
             buildConfig.Severity.ShouldBeNull();
             buildConfig.IsEnabled.ShouldBeNull();
@@ -41,7 +41,6 @@ public void CreateWithEmpty_ReturnsObjectWithNullValues()
         [InlineData("info", BuildAnalyzerResultSeverity.Info)]
         [InlineData("warning", BuildAnalyzerResultSeverity.Warning)]
         [InlineData("WARNING", BuildAnalyzerResultSeverity.Warning)]
-        [InlineData("non-existing-option", null)]
         public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAnalyzerResultSeverity? expected)
         {
             var config = new Dictionary<string, string>()
@@ -62,7 +61,6 @@ public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAna
         [InlineData("TRUE", true)]
         [InlineData("false", false)]
         [InlineData("FALSE", false)]
-        [InlineData("", null)]
         public void CreateBuildAnalyzerConfiguration_IsEnabled(string parameter, bool? expected)
         {
             var config = new Dictionary<string, string>()
@@ -85,7 +83,6 @@ public void CreateBuildAnalyzerConfiguration_IsEnabled(string parameter, bool? e
         [InlineData("AnalyzedProjectWithImportsWithoutSdks", EvaluationAnalysisScope.AnalyzedProjectWithImportsWithoutSdks)]
         [InlineData("AnalyzedProjectWithAllImports", EvaluationAnalysisScope.AnalyzedProjectWithAllImports)]
         [InlineData("analyzedprojectwithallimports", EvaluationAnalysisScope.AnalyzedProjectWithAllImports)]
-        [InlineData("non existing value", null)]
         public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string parameter, EvaluationAnalysisScope? expected)
         {
             var config = new Dictionary<string, string>()
@@ -101,5 +98,22 @@ public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string para
             buildConfig.IsEnabled.ShouldBeNull();
             buildConfig.Severity.ShouldBeNull();
         }
+
+        [Theory]
+        [InlineData("evaluationanalysisscope", "incorrec-value")]
+        [InlineData("isenabled", "incorrec-value")]
+        [InlineData("severity", "incorrec-value")]
+        public void CreateBuildAnalyzerConfiguration_ExceptionOnInvalidInputValue(string key, string value)
+        {
+            var config = new Dictionary<string, string>()
+            {
+                { key , value},
+            };
+
+            var exception = Should.Throw<BuildCopConfigurationException>(() => {
+                BuildAnalyzerConfiguration.Create(config);
+            });
+            exception.Message.ShouldContain($"Incorrect value provided in config for key {key}");
+        }
     }
 }
diff --git a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
index d931cf8a691..323e58cfafd 100644
--- a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
@@ -17,8 +17,6 @@
 using Xunit;
 using static Microsoft.Build.BuildCop.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
 
-#nullable disable
-
 namespace Microsoft.Build.Analyzers.UnitTests
 {
     public class ConfigurationProvider_Tests
@@ -96,7 +94,7 @@ public void GetRuleIdConfiguration_CustomConfigurationData()
             var customConfiguration = configurationProvider.GetCustomConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
             var configs = customConfiguration.ConfigurationData;
 
-            configs.Keys.Count().ShouldBe(3);
+            configs!.Keys.Count().ShouldBe(3);
 
             configs.ContainsKey("property1").ShouldBeTrue();
             configs.ContainsKey("property2").ShouldBeTrue();
diff --git a/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs b/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs
index ef3215863cb..e37d912f773 100644
--- a/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs
+++ b/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs
@@ -15,7 +15,6 @@
 using Xunit;
 using static Microsoft.Build.BuildCop.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
 
-#nullable disable
 
 namespace Microsoft.Build.Analyzers.UnitTests
 {
diff --git a/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
index 136d396218c..d052bda719f 100644
--- a/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
@@ -3,6 +3,7 @@
 
 using System.Collections.Generic;
 using System;
+using Microsoft.Build.BuildCop.Infrastructure;
 
 namespace Microsoft.Build.Experimental.BuildCop;
 
@@ -71,19 +72,29 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
             return false;
         }
 
+        bool isParsed = false;
+
         if (typeof(T) == typeof(bool))
         {
             if (bool.TryParse(config[key], out bool boolValue))
             {
                 value = (T)(object)boolValue;
-                return true;
+                isParsed = true;
             }
         }
         else if(typeof(T).IsEnum)
         {
-            return Enum.TryParse(config[key], true, out value);
+            
+            isParsed = Enum.TryParse(config[key], true, out value);
+        }
+
+        if (!isParsed)
+        {
+            throw new BuildCopConfigurationException(
+                $"Incorrect value provided in config for key {key}",
+                buildCopConfigurationErrorScope: BuildCopConfigurationErrorScope.EditorConfigParser);
         }
 
-        return false;
+        return isParsed;
     }
 }
diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index aff50f8293e..1139caabd36 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -20,10 +20,13 @@ namespace Microsoft.Build.BuildCop.Infrastructure;
 internal class ConfigurationProvider
 {
     private EditorConfigParser s_editorConfigParser = new EditorConfigParser();
+
     // TODO: This module should have a mechanism for removing unneeded configurations
     //  (disabled rules and analyzers that need to run in different node)
     private readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = new Dictionary<string, BuildAnalyzerConfiguration>();
 
+    // private readonly Dictionary<string, CustomConfigurationData> _customConfigurationData = new Dictionary<string, CustomConfigurationData>();
+
     private readonly List<string> _infrastructureConfigurationKeys = new List<string>() {
         nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
         nameof(BuildAnalyzerConfiguration.IsEnabled).ToLower(),
@@ -71,7 +74,7 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
     internal void CheckCustomConfigurationDataValidity(string projectFullPath, string ruleId)
     {
         // Note: requires another cache layer for custom configuration. 
-        // var prevData = GetCustomConfiguration(projectFullPath, ruleId);
+        // var customConfiguration = GetCustomConfiguration(projectFullPath, ruleId);
         // if prevData in cache => raise BuildCopConfigurationException;
     }
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index e57604823d0..9dfecf06339 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -185,7 +185,6 @@
     <Compile Include="BuildCop\Infrastructure\EditorConfig\EditorConfigFile.cs" />
     <Compile Include="BuildCop\Infrastructure\EditorConfig\EditorConfigGlobsMatcher.cs" />
     <Compile Include="BuildCop\Infrastructure\EditorConfig\EditorConfigParser.cs" />
-    <Compile Include="BuildCop\Infrastructure\IBuildCopContext.cs" />
     <Compile Include="BuildCop\API\IBuildCopRegistrationContext.cs" />
     <Compile Include="BuildCop\Infrastructure\IBuildCopManager.cs" />
     <Compile Include="BuildCop\Logging\IBuildAnalysisLoggingContext.cs" />
