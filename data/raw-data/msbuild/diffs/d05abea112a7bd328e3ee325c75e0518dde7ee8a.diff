diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index d72172c331c..e6334353a1c 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -969,10 +969,6 @@ internal static bool FileExistsNoThrow(string fullPath, IFileSystem fileSystem =
         /// <summary>
         /// Get all files from directory matching pattern
         /// </summary>
-        /// <param name="path"></param>
-        /// <param name="pattern"></param>
-        /// <param name="fileSystem"></param>
-        /// <returns>list of files or null if it is impossible to get files</returns>
         internal static string[] DirectoryGetFiles(string path, string pattern = "*", IFileSystem fileSystem = null)
         {
             path = AttemptToShortenPath(path);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index d35996d1640..c5e2d4d88f4 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -7655,7 +7655,7 @@ public void HandleFilesInSearchPathsWhichDiffersOnlyInCasing()
 
                 t.SearchPaths = new string[]
                 {
-                        @"{TargetFrameworkDirectory}"
+                    @"{TargetFrameworkDirectory}"
                 };
 
                 t.TargetFrameworkDirectories = new string[] { Path.Combine(ObjectModelHelpers.TempProjectDir, "v3.5") };
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 04ac08d3255..50410d88e8e 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -3053,27 +3053,27 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                     t.FindSerializationAssemblies = false;
                     t.FindRelatedFiles = false;
                     t.StateFile = null;
-	                t.Execute
-	                (
-	                    fileExists,
-	                    directoryExists,
-	                    getDirectories,
-                        getDirectoryFiles,
-	                    getAssemblyName,
-	                    getAssemblyMetadata,
-	#if FEATURE_WIN32_REGISTRY
-	                    getRegistrySubKeyNames,
-	                    getRegistrySubKeyDefaultValue,
-	#endif
-	                    getLastWriteTime,
-	                    getRuntimeVersion,
-	#if FEATURE_WIN32_REGISTRY
-	                    openBaseKey,
-	#endif
-	                    checkIfAssemblyIsInGac,
-	                    isWinMDFile,
-	                    readMachineTypeFromPEHeader
-	                );
+                    t.Execute
+                    (
+                        fileExists,
+                        directoryExists,
+                        getDirectories,
+                            getDirectoryFiles,
+                        getAssemblyName,
+                        getAssemblyMetadata,
+    #if FEATURE_WIN32_REGISTRY
+                        getRegistrySubKeyNames,
+                        getRegistrySubKeyDefaultValue,
+    #endif
+                        getLastWriteTime,
+                        getRuntimeVersion,
+    #if FEATURE_WIN32_REGISTRY
+                        openBaseKey,
+    #endif
+                        checkIfAssemblyIsInGac,
+                        isWinMDFile,
+                        readMachineTypeFromPEHeader
+                );
 
                     // A few checks. These should always be true or it may be a perf issue for project load.
                     ITaskItem[] loadModeResolvedFiles = new TaskItem[0];
@@ -3115,28 +3115,28 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                     string cache = rarCacheFile;
                     t.StateFile = cache;
                     File.Delete(t.StateFile);
-	                succeeded =
-	                    t.Execute
-	                    (
-	                        fileExists,
-	                        directoryExists,
-	                        getDirectories,
+                    succeeded =
+                        t.Execute
+                        (
+                            fileExists,
+                            directoryExists,
+                            getDirectories,
                             getDirectoryFiles,
                             getAssemblyName,
-	                        getAssemblyMetadata,
-	#if FEATURE_WIN32_REGISTRY
-	                        getRegistrySubKeyNames,
-	                        getRegistrySubKeyDefaultValue,
-	#endif
-	                        getLastWriteTime,
-	                        getRuntimeVersion,
-	#if FEATURE_WIN32_REGISTRY
-	                        openBaseKey,
-	#endif
-	                        checkIfAssemblyIsInGac,
-	                        isWinMDFile,
-	                        readMachineTypeFromPEHeader
-	                    );
+                            getAssemblyMetadata,
+    #if FEATURE_WIN32_REGISTRY
+                            getRegistrySubKeyNames,
+                            getRegistrySubKeyDefaultValue,
+    #endif
+                            getLastWriteTime,
+                            getRuntimeVersion,
+    #if FEATURE_WIN32_REGISTRY
+                            openBaseKey,
+    #endif
+                            checkIfAssemblyIsInGac,
+                            isWinMDFile,
+                            readMachineTypeFromPEHeader
+                        );
                     if (FileUtilities.FileExistsNoThrow(t.StateFile))
                     {
                         Assert.Single(t.FilesWritten);
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
index 3f9abe4e96d..a6b03f2d71e 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
@@ -18,7 +18,7 @@ internal class AssemblyFoldersResolver : Resolver
         /// <param name="searchPathElement">The corresponding element from the search path.</param>
         /// <param name="getAssemblyName">Delegate that gets the assembly name.</param>
         /// <param name="fileExists">Delegate that returns if the file exists.</param>
-        /// <param name="getDirectoryFile">Delegate to test if file exists in directory and return fill file name</param>
+        /// <param name="getDirectoryFile">Delegate to test if file exists in directory and return full file name</param>
         /// <param name="getRuntimeVersion">Delegate that returns the clr runtime version for the file.</param>
         /// <param name="targetedRuntimeVesion">The targeted runtime version.</param>
         public AssemblyFoldersResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, DirectoryFile getDirectoryFile, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
diff --git a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
index 4c76f79c0cb..1fad2e6cdef 100644
--- a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
+++ b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
@@ -26,7 +26,7 @@ internal class CandidateAssemblyFilesResolver : Resolver
         /// <param name="searchPathElement">The corresponding element from the search path.</param>
         /// <param name="getAssemblyName">Delegate that gets the assembly name.</param>
         /// <param name="fileExists">Delegate that returns if the file exists.</param>
-        /// <param name="getDirectoryFile">Delegate to test if file exists in directory and return fill file name</param>
+        /// <param name="getDirectoryFile">Delegate to test if file exists in directory and return full file name</param>
         /// <param name="getRuntimeVersion">Delegate that returns the clr runtime version for the file.</param>
         /// <param name="targetedRuntimeVesion">The targeted runtime version.</param>
         public CandidateAssemblyFilesResolver(string[] candidateAssemblyFiles, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, DirectoryFile getDirectoryFile, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 1dc833a596a..63774430e0b 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -79,7 +79,7 @@ internal sealed class ReferenceTable
         private readonly DirectoryExists _directoryExists;
         /// <summary>Delegate used for getting directories.</summary>
         private readonly GetDirectories _getDirectories;
-        /// <summary>Delegate used for verify file in directories.</summary>
+        /// <summary>Delegate used for checking for the existence of a file in a directory and mapping it to full path.</summary>
         private readonly DirectoryFile _getDirectoryFile;
         /// <summary>Delegate used for getting assembly names.</summary>
         private readonly GetAssemblyName _getAssemblyName;
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 7ddbddf0bc8..df808b48e78 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -601,7 +601,6 @@ private string[] GetDirectories(string path, string pattern)
         /// <returns>file full path or null if file do not exists</returns>
         private string GetDirectoryFile(string path, string fileName)
         {
-
             instanceLocalDirectoryFiles.TryGetValue(path, out Dictionary<string, string> cached);
             if (cached == null)
             {
@@ -610,13 +609,13 @@ private string GetDirectoryFile(string path, string fileName)
                 {
                     files = getFiles(path, "*");
                 }
-                catch(DirectoryNotFoundException)
+                catch (DirectoryNotFoundException)
                 {
                     files = Array.Empty<string>();
                 }
 
                 cached = new Dictionary<string, string>(files.Length, StringComparer.OrdinalIgnoreCase);
-                foreach(var file in files)
+                foreach (var file in files)
                 {
                     // this will not throw if there are files which differs only by case
                     cached[Path.GetFileName(file)] = file;
