diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index 95d8888c777..64cb42f1e3e 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1268,6 +1268,7 @@ public void InvalidToolsVersionErrors()
                                         1,
                                         true,
                                         new StringWriter(),
+                                        new StringWriter(),
                                         false,
                                         warningsAsErrors: null,
                                         warningsAsMessages: null,
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index f6264dbc52f..4c55b58638f 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -1154,6 +1154,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <value>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1047: "}</comment>
   </data>
+  <data name="InvalidTargetsPath">
+    <value>MSBUILD : error MSB1047: File to print targets to is not valid. {0}</value>
+    <comment>{StrBegin="MSBUILD : error MSB1047: "}</comment>
+  </data>
   <!-- MSB1021 and MSB1020 are also used in the engine but their copies do not have the "MSBUILD : " prefix so we must have our own -->
   <data name="LoggerCreationError" UESanitized="true" Visibility="Public">
     <value>MSBUILD : error MSB1021: Cannot create an instance of the logger. {0}</value>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 2ca4792fec9..b1314fc52ef 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -555,6 +555,7 @@ string [] commandLine
                 bool enableNodeReuse = false;
 #endif
                 TextWriter preprocessWriter = null;
+                TextWriter targetsWriter = null;
                 bool detailedSummary = false;
                 ISet<string> warningsAsErrors = null;
                 ISet<string> warningsAsMessages = null;
@@ -588,6 +589,7 @@ string [] commandLine
                         ref cpuCount,
                         ref enableNodeReuse,
                         ref preprocessWriter,
+                        ref targetsWriter,
                         ref detailedSummary,
                         ref warningsAsErrors,
                         ref warningsAsMessages,
@@ -651,6 +653,7 @@ string [] commandLine
                                     cpuCount,
                                     enableNodeReuse,
                                     preprocessWriter,
+                                    targetsWriter,
                                     detailedSummary,
                                     warningsAsErrors,
                                     warningsAsMessages,
@@ -959,6 +962,7 @@ internal static bool BuildProject
             int cpuCount,
             bool enableNodeReuse,
             TextWriter preprocessWriter,
+            TextWriter targetsWriter,
             bool detailedSummary,
             ISet<string> warningsAsErrors,
             ISet<string> warningsAsMessages,
@@ -1056,6 +1060,7 @@ string outputResultsCache
                 ToolsetDefinitionLocations toolsetDefinitionLocations = ToolsetDefinitionLocations.Default;
 
                 bool preprocessOnly = preprocessWriter != null && !FileUtilities.IsSolutionFilename(projectFile);
+                bool targetsOnly = targetsWriter != null && !FileUtilities.IsSolutionFilename(projectFile);
 
                 projectCollection = new ProjectCollection
                 (
@@ -1103,7 +1108,17 @@ string outputResultsCache
                     success = true;
                 }
 
-                if (!preprocessOnly)
+                if (targetsOnly)
+                {
+                    Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
+
+                    project.SaveLogicalProject(targetsWriter);
+
+                    projectCollection.UnloadProject(project);
+                    success = true;
+                }
+
+                if (!preprocessOnly && !targetsOnly)
                 {
                     BuildParameters parameters = new BuildParameters(projectCollection);
 
@@ -2012,6 +2027,7 @@ private static bool ProcessCommandLineSwitches
             ref int cpuCount,
             ref bool enableNodeReuse,
             ref TextWriter preprocessWriter,
+            ref TextWriter targetsWriter,
             ref bool detailedSummary,
             ref ISet<string> warningsAsErrors,
             ref ISet<string> warningsAsMessages,
@@ -2127,6 +2143,7 @@ bool recursing
                                                                ref cpuCount,
                                                                ref enableNodeReuse,
                                                                ref preprocessWriter,
+                                                               ref targetsWriter,
                                                                ref detailedSummary,
                                                                ref warningsAsErrors,
                                                                ref warningsAsMessages,
@@ -2170,6 +2187,13 @@ bool recursing
                         preprocessWriter = ProcessPreprocessSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Preprocess]);
                     }
 
+                    // determine what if any writer to print targets to
+                    targetsWriter = null;
+                    if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Targets))
+                    {
+                        targetsWriter = ProcessTargetsSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Targets]);
+                    }
+
                     detailedSummary = commandLineSwitches.IsParameterlessSwitchSet(CommandLineSwitches.ParameterlessSwitch.DetailedSummary);
 
                     warningsAsErrors = ProcessWarnAsErrorSwitch(commandLineSwitches);
@@ -2333,6 +2357,25 @@ internal static TextWriter ProcessPreprocessSwitch(string[] parameters)
             return writer;
         }
 
+        internal static TextWriter ProcessTargetsSwitch(string[] parameters)
+        {
+            TextWriter writer = Console.Out;
+
+            if (parameters.Length > 0)
+            {
+                try
+                {
+                    writer = FileUtilities.OpenWrite(parameters[parameters.Length - 1], append: false);
+                }
+                catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))
+                {
+                    CommandLineSwitchException.Throw("InvalidTargetsPath", parameters[parameters.Length - 1], ex.Message);
+                }
+            }
+
+            return writer;
+        }
+
         internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches commandLineSwitches)
         {
             // TODO: Parse an environment variable as well?
