diff --git a/src/Build/BackEnd/BuildManager/RequestedProjectState.cs b/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
index 7ea78af65f9..729e8556396 100644
--- a/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
+++ b/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
@@ -1,4 +1,4 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
@@ -75,21 +75,19 @@ internal RequestedProjectState Merge(RequestedProjectState other)
             // Merge property filters
             if (PropertyFilters != null || other.PropertyFilters != null)
             {
-                HashSet<string> mergedProperties = new(StringComparer.OrdinalIgnoreCase);
+                HashSet<string> mergedProperties;
+
                 if (PropertyFilters != null)
                 {
-                    foreach (var prop in PropertyFilters)
+                    mergedProperties = new HashSet<string>(PropertyFilters, StringComparer.OrdinalIgnoreCase);
+                    if (other.PropertyFilters != null)
                     {
-                        mergedProperties.Add(prop);
+                        mergedProperties.UnionWith(other.PropertyFilters);
                     }
                 }
-
-                if (other.PropertyFilters != null)
+                else
                 {
-                    foreach (var prop in other.PropertyFilters)
-                    {
-                        mergedProperties.Add(prop);
-                    }
+                    mergedProperties = new HashSet<string>(other.PropertyFilters, StringComparer.OrdinalIgnoreCase);
                 }
 
                 if (mergedProperties.Count > 0)
@@ -127,15 +125,23 @@ void MergeItemFiltersFrom(Dictionary<string, List<string>> mergedItems, IDiction
                 {
                     if (!mergedItems.TryGetValue(itemType.Key, out List<string> metadataList))
                     {
-                        metadataList = new List<string>();
-                        mergedItems[itemType.Key] = metadataList;
+                        if (itemType.Value != null)
+                        {
+                            metadataList = new List<string>(itemType.Value);
+                            mergedItems[itemType.Key] = metadataList;
+                        }
+                        else
+                        {
+                            metadataList = new List<string>();
+                            mergedItems[itemType.Key] = metadataList;
+                        }
                     }
-
-                    if (itemType.Value != null)
+                    else if (itemType.Value != null)
                     {
+                        HashSet<string> existingMetadata = new HashSet<string>(metadataList, StringComparer.OrdinalIgnoreCase);
                         foreach (var metadata in itemType.Value)
                         {
-                            if (!metadataList.Contains(metadata, StringComparer.OrdinalIgnoreCase))
+                            if (existingMetadata.Add(metadata))
                             {
                                 metadataList.Add(metadata);
                             }
@@ -162,13 +168,12 @@ internal bool IsSubsetOf(RequestedProjectState another)
             }
             else if (another.PropertyFilters is not null)
             {
-                HashSet<string> anotherPropertyFilters = new(another.PropertyFilters);
-                foreach (string propertyFilter in PropertyFilters)
+                HashSet<string> thisPropertyFilters = new HashSet<string>(PropertyFilters, StringComparer.OrdinalIgnoreCase);
+                HashSet<string> anotherPropertyFilters = new HashSet<string>(another.PropertyFilters, StringComparer.OrdinalIgnoreCase);
+
+                if (!thisPropertyFilters.IsSubsetOf(anotherPropertyFilters))
                 {
-                    if (!anotherPropertyFilters.Contains(propertyFilter))
-                    {
-                        return false;
-                    }
+                    return false;
                 }
             }
 
@@ -200,13 +205,12 @@ internal bool IsSubsetOf(RequestedProjectState another)
                     }
                     else if (metadata is not null)
                     {
-                        HashSet<string> anotherMetadata = [.. metadata];
-                        foreach (string metadatum in kvp.Value)
+                        HashSet<string> thisMetadata = new HashSet<string>(kvp.Value, StringComparer.OrdinalIgnoreCase);
+                        HashSet<string> anotherMetadata = new HashSet<string>(metadata, StringComparer.OrdinalIgnoreCase);
+                        
+                        if (!thisMetadata.IsSubsetOf(anotherMetadata))
                         {
-                            if (!anotherMetadata.Contains(metadatum))
-                            {
-                                return false;
-                            }
+                            return false;
                         }
                     }
                 }
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 121d3f08fd3..eb1ba0cb8c5 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -8,6 +8,7 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Linq;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -813,19 +814,20 @@ private BuildRequestDataFlags MergeBuildFlags(BuildRequestDataFlags? newFlags)
 
             // Create a deep copy of the existing ProjectStateAfterBuild
             ProjectInstance mergedInstanceCandidate = _projectStateAfterBuild.DeepCopy(isImmutable: false);
-            MergeProperties(newProjectStateAfterBuild.Properties);
-            MergeItems(newProjectStateAfterBuild.Items);
+            MergeProperties(mergedInstanceCandidate, newProjectStateAfterBuild.Properties);
+            MergeItems(mergedInstanceCandidate, newProjectStateAfterBuild.Items);
 
             // Merge RequestedProjectStateFilter
             var sourceFilter = _projectStateAfterBuild.RequestedProjectStateFilter;
             var newFilter = newProjectStateAfterBuild.RequestedProjectStateFilter;
+
             if (sourceFilter != null || newFilter != null)
             {
                 RequestedProjectState mergedFilter;
 
                 if (sourceFilter == null)
                 {
-                    mergedFilter = newFilter.DeepClone();
+                    mergedFilter = newFilter!.DeepClone();
                 }
                 else if (newFilter == null)
                 {
@@ -840,66 +842,104 @@ private BuildRequestDataFlags MergeBuildFlags(BuildRequestDataFlags? newFlags)
             }
 
             return mergedInstanceCandidate;
+        }
 
-            void MergeProperties(ICollection<ProjectPropertyInstance> newProperties)
+        /// <summary>
+        /// Merges properties from newProperties into the mergedInstance, avoiding duplicates.
+        /// </summary>
+        /// <param name="mergedInstance">The target ProjectInstance to merge properties into.</param>
+        /// <param name="newProperties">The properties to merge in.</param>
+        private static void MergeProperties(ProjectInstance mergedInstance, ICollection<ProjectPropertyInstance> newProperties)
+        {
+            foreach (var property in newProperties)
             {
-                foreach (var property in newProperties)
+                if (mergedInstance.GetProperty(property.Name) == null)
                 {
-                    if (mergedInstanceCandidate.GetProperty(property.Name) == null)
-                    {
-                        mergedInstanceCandidate.SetProperty(property.Name, property.EvaluatedValue);
-                    }
+                    mergedInstance.SetProperty(property.Name, property.EvaluatedValue);
                 }
             }
+        }
 
-            void MergeItems(ICollection<ProjectItemInstance> newItems)
-            {
-                // Maps item types (e.g., "Compile") to a set of includes (e.g., "File1.cs")
-                var existingItemsByType = new Dictionary<string, HashSet<string>>(StringComparer.OrdinalIgnoreCase);
+        /// <summary>
+        /// Merges items from newItems into the mergedInstance, handling metadata merging for existing items
+        /// and avoiding copy-on-write performance issues.
+        /// </summary>
+        /// <param name="mergedInstance">The target ProjectInstance to merge items into.</param>
+        /// <param name="newItems">The items to merge in.</param>
+        private static void MergeItems(ProjectInstance mergedInstance, ICollection<ProjectItemInstance> newItems)
+        {
+            // Maps item types (e.g., "Compile") to a set of includes (e.g., "File1.cs")
+            var existingItemsByType = new Dictionary<string, HashSet<string>>(StringComparer.OrdinalIgnoreCase);
 
-                // Maps a tuple of (item type, include) to the actual item instance
-                var existingItemsLookup = new Dictionary<(string, string), ProjectItemInstance>(ItemIdentityComparer.Instance);
+            // Maps a tuple of (item type, include) to the actual item instance
+            var existingItemsLookup = new Dictionary<(string, string), ProjectItemInstance>(ItemIdentityComparer.Instance);
 
-                foreach (var item in mergedInstanceCandidate.Items)
+            // Build lookup structures for existing items
+            foreach (var item in mergedInstance.Items)
+            {
+                if (!existingItemsByType.TryGetValue(item.ItemType, out var itemSet))
                 {
-                    if (!existingItemsByType.TryGetValue(item.ItemType, out var itemSet))
-                    {
-                        itemSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
-                        existingItemsByType[item.ItemType] = itemSet;
-                    }
-
-                    itemSet.Add(item.EvaluatedInclude);
-                    existingItemsLookup[(item.ItemType, item.EvaluatedInclude)] = item;
+                    itemSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+                    existingItemsByType[item.ItemType] = itemSet;
                 }
 
-                // Add new items that don't already exist and merge metadata for existing ones
-                foreach (var item in newProjectStateAfterBuild.Items)
+                itemSet.Add(item.EvaluatedInclude);
+                existingItemsLookup[(item.ItemType, item.EvaluatedInclude)] = item;
+            }
+
+            // Batch items to add separately to avoid collection modification during enumeration
+            var itemsToAdd = new List<(string itemType, string evaluatedInclude, IEnumerable<KeyValuePair<string, string>> metadata)>();
+
+            // Process new items
+            foreach (var item in newItems)
+            {
+                if (existingItemsByType.TryGetValue(item.ItemType, out var itemsOfType) &&
+                    itemsOfType.Contains(item.EvaluatedInclude))
                 {
-                    if (existingItemsByType.TryGetValue(item.ItemType, out var existingItems) && existingItems.Contains(item.EvaluatedInclude))
-                    {
-                        var existingItem = existingItemsLookup[(item.ItemType, item.EvaluatedInclude)];
+                    var existingItem = existingItemsLookup[(item.ItemType, item.EvaluatedInclude)];
 
-                        // Merge metadata from the new item into the existing one
-                        foreach (var metadata in item.EnumerateMetadata())
+                    // Batch metadata updates to avoid copy-on-write performance issues
+                    var metadataToMerge = item.EnumerateMetadata().ToList();
+
+                    if (metadataToMerge.Count > 0)
+                    {
+                        // Check if we can use batch operations for CopyOnWriteDictionary
+                        if (existingItem.Metadata is CopyOnWriteDictionary<string> cowDict && metadataToMerge.Count > 1)
                         {
-                            existingItem.SetMetadata(metadata.Key, metadata.Value);
+                            // Use batch operation to avoid multiple ImmutableDictionary creations
+                            cowDict.SetItems(metadataToMerge);
                         }
-                    }
-                    // If the item doesn't exist, add it to the merged instance candidate and update the existing items dictionary
-                    else
-                    {
-                        mergedInstanceCandidate.AddItem(item.ItemType, item.EvaluatedInclude, item.EnumerateMetadata());
-
-                        if (existingItems == null)
+                        else
                         {
-                            existingItems = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
-                            existingItemsByType[item.ItemType] = existingItems;
+                            // Fall back to individual updates for single items or non-COW dictionaries
+                            foreach (var metadata in metadataToMerge)
+                            {
+                                existingItem.SetMetadata(metadata.Key, metadata.Value);
+                            }
                         }
+                    }
+                }
+                else
+                {
+                    // Defer adding new items until after enumeration is complete
+                    itemsToAdd.Add((item.ItemType, item.EvaluatedInclude, item.EnumerateMetadata()));
 
-                        existingItems.Add(item.EvaluatedInclude);
+                    // Update tracking structures for future lookups
+                    if (!existingItemsByType.TryGetValue(item.ItemType, out var itemSet))
+                    {
+                        itemSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+                        existingItemsByType[item.ItemType] = itemSet;
                     }
+
+                    itemSet.Add(item.EvaluatedInclude);
                 }
             }
+
+            // Add all new items after enumeration is complete to avoid collection modification issues
+            foreach (var (itemType, evaluatedInclude, metadata) in itemsToAdd)
+            {
+                mergedInstance.AddItem(itemType, evaluatedInclude, metadata);
+            }
         }
 
         /// <summary>
