diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index a2eab07d302..995cfebfbc7 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -116,6 +116,26 @@ public void Translate(ref bool value)
                 value = _reader.ReadBoolean();
             }
 
+            /// <summary>
+            /// Translates an <see langword="bool"/> array.
+            /// </summary>
+            /// <param name="array">The array to be translated.</param>
+            public void Translate(ref bool[] array)
+            {
+                if (!TranslateNullable(array))
+                {
+                    return;
+                }
+
+                int count = _reader.ReadInt32();
+                array = new bool[count];
+
+                for (int i = 0; i < count; i++)
+                {
+                    array[i] = _reader.ReadBoolean();
+                }
+            }
+
             /// <summary>
             /// Translates a byte.
             /// </summary>
@@ -808,6 +828,26 @@ public void Translate(ref bool value)
                 _writer.Write(value);
             }
 
+            /// <summary>
+            /// Translates an <see langword="bool"/> array.
+            /// </summary>
+            /// <param name="array">The array to be translated.</param>
+            public void Translate(ref bool[] array)
+            {
+                if (!TranslateNullable(array))
+                {
+                    return;
+                }
+
+                int count = array.Length;
+                _writer.Write(count);
+
+                for (int i = 0; i < count; i++)
+                {
+                    _writer.Write(array[i]);
+                }
+            }
+
             /// <summary>
             /// Translates a byte.
             /// </summary>
diff --git a/src/Framework/ITranslator.cs b/src/Framework/ITranslator.cs
index abe32f8d96f..930cc45f6b2 100644
--- a/src/Framework/ITranslator.cs
+++ b/src/Framework/ITranslator.cs
@@ -104,6 +104,12 @@ BinaryWriter Writer
         /// <param name="value">The value to be translated.</param>
         void Translate(ref bool value);
 
+        /// <summary>
+        /// Translates an <see langword="bool"/> array.
+        /// </summary>
+        /// <param name="array">The array to be translated.</param>
+        void Translate(ref bool[] array);
+
         /// <summary>
         /// Translates a byte.
         /// </summary>
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 564ce2c4ed6..3cd0950b2d0 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -24,17 +24,17 @@ namespace Microsoft.Build.BackEnd
     internal enum TaskParameterType
     {
         /// <summary>
-        /// Parameter is null
+        /// Parameter is null.
         /// </summary>
         Null,
 
         /// <summary>
-        /// Parameter is a string
+        /// Parameter is a string.
         /// </summary>
         String,
 
         /// <summary>
-        /// Parameter is an array of strings
+        /// Parameter is an array of strings.
         /// </summary>
         StringArray,
 
@@ -43,11 +43,21 @@ internal enum TaskParameterType
         /// </summary>
         Bool,
 
+        /// <summary>
+        /// Parameter is an array of bools.
+        /// </summary>
+        BoolArray,
+
         /// <summary>
         /// Parameter is an <see langword="int"/>.
         /// </summary>
         Int,
 
+        /// <summary>
+        /// Parameter is an array of integers.
+        /// </summary>
+        IntArray,
+
         /// <summary>
         /// Parameter is a value type.  Note:  Must be serializable
         /// </summary>
@@ -145,6 +155,16 @@ public TaskParameter(object wrappedParameter)
 
                     _wrappedParameter = taskItemArrayParameter;
                 }
+                else if (wrappedParameterType == typeof(bool[]))
+                {
+                    _parameterType = TaskParameterType.BoolArray;
+                    _wrappedParameter = wrappedParameter;
+                }
+                else if (wrappedParameterType == typeof(int[]))
+                {
+                    _parameterType = TaskParameterType.IntArray;
+                    _wrappedParameter = wrappedParameter;
+                }
                 else if (wrappedParameterType.GetElementType().GetTypeInfo().IsValueType)
                 {
                     _parameterType = TaskParameterType.ValueTypeArray;
@@ -268,6 +288,11 @@ public void Translate(ITranslator translator)
                     translator.Translate(ref boolParam);
                     _wrappedParameter = boolParam;
                     break;
+                case TaskParameterType.BoolArray:
+                    bool[] boolArrayParam = (bool[])_wrappedParameter;
+                    translator.Translate(ref boolArrayParam);
+                    _wrappedParameter = boolArrayParam;
+                    break;
                 case TaskParameterType.Int:
                     int intParam = _wrappedParameter switch
                     {
@@ -277,6 +302,11 @@ public void Translate(ITranslator translator)
                     translator.Translate(ref intParam);
                     _wrappedParameter = intParam;
                     break;
+                case TaskParameterType.IntArray:
+                    int[] intArrayParam = (int[])_wrappedParameter;
+                    translator.Translate(ref intArrayParam);
+                    _wrappedParameter = intArrayParam;
+                    break;
                 case TaskParameterType.ValueType:
                 case TaskParameterType.ValueTypeArray:
                     translator.TranslateDotNet(ref _wrappedParameter);
diff --git a/src/Shared/UnitTests/TaskParameter_Tests.cs b/src/Shared/UnitTests/TaskParameter_Tests.cs
index a33b226229a..292516e9cfb 100644
--- a/src/Shared/UnitTests/TaskParameter_Tests.cs
+++ b/src/Shared/UnitTests/TaskParameter_Tests.cs
@@ -111,7 +111,7 @@ public void IntArrayParameter()
         {
             TaskParameter t = new TaskParameter(new int[] { 2, 15 });
 
-            Assert.Equal(TaskParameterType.ValueTypeArray, t.ParameterType);
+            Assert.Equal(TaskParameterType.IntArray, t.ParameterType);
 
             int[] wrappedParameter = t.WrappedParameter as int[];
             Assert.NotNull(wrappedParameter);
@@ -122,7 +122,7 @@ public void IntArrayParameter()
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal(TaskParameterType.ValueTypeArray, t2.ParameterType);
+            Assert.Equal(TaskParameterType.IntArray, t2.ParameterType);
 
             int[] wrappedParameter2 = t2.WrappedParameter as int[];
             Assert.NotNull(wrappedParameter2);
@@ -168,14 +168,14 @@ public void BoolParameter()
         }
 
         /// <summary>
-        /// Verifies that construction and serialization with a parameter that is an array of value types (ints) is OK.
+        /// Verifies that construction and serialization with a parameter that is an array of value types (bools) is OK.
         /// </summary>
         [Fact]
         public void BoolArrayParameter()
         {
             TaskParameter t = new TaskParameter(new bool[] { false, true });
 
-            Assert.Equal(TaskParameterType.ValueTypeArray, t.ParameterType);
+            Assert.Equal(TaskParameterType.BoolArray, t.ParameterType);
 
             bool[] wrappedParameter = t.WrappedParameter as bool[];
             Assert.NotNull(wrappedParameter);
@@ -186,7 +186,7 @@ public void BoolArrayParameter()
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal(TaskParameterType.ValueTypeArray, t2.ParameterType);
+            Assert.Equal(TaskParameterType.BoolArray, t2.ParameterType);
 
             bool[] wrappedParameter2 = Assert.IsType<bool[]>(t2.WrappedParameter);
             Assert.Equal(2, wrappedParameter2.Length);
