diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index c5d12c44a04..13f5dc1828d 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -6,7 +6,11 @@
 using System.Collections.Concurrent;
 using System.IO;
 using System.Threading;
+
+#if NET
 using System.Threading.Tasks;
+#endif
+
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
@@ -200,10 +204,15 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
             try
             {
                 byte[] headerByte = new byte[5];
-
+#if FEATURE_APM
+                IAsyncResult result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);
+#else
                 // Use a separate reuseable wait handle to avoid allocating on Task.AsyncWaitHandle.
                 using AutoResetEvent readTaskEvent = new(false);
-                ValueTask<int> readTask = CommunicationsUtilities.ReadExactlyAsync(localStream, headerByte, headerByte.Length, readTaskEvent);
+                ValueTask<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length, readTaskEvent);
+#endif
+
+                bool continueReading = true;
 
                 // Ordering of the wait handles is important. The first signalled wait handle in the array
                 // will be returned by WaitAny if multiple wait handles are signalled. We prefer to have the
@@ -212,10 +221,13 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                 WaitHandle[] handles =
                 [
                     localPacketPumpShutdownEvent,
+#if FEATURE_APM
+                    result.AsyncWaitHandle
+#else
                     readTaskEvent,
+#endif
                 ];
 
-                bool continueReading = true;
                 do
                 {
                     int waitId = WaitHandle.WaitAny(handles);
@@ -231,11 +243,14 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                             {
                                 // Client recieved a packet header. Read the rest of it.
                                 int headerBytesRead = 0;
-
+#if FEATURE_APM
+                                headerBytesRead = localStream.EndRead(result);
+#else
                                 // Avoid allocating an additional task instance when possible.
                                 // However if a ValueTask runs asynchronously, it must be converted to a Task before consuming the result.
                                 // Otherwise, the result will be undefined when not using async/await.
                                 headerBytesRead = readTask.IsCompleted ? readTask.Result : readTask.AsTask().Result;
+#endif
 
                                 if ((headerBytesRead != headerByte.Length) && !localPacketPumpShutdownEvent.WaitOne(0))
                                 {
@@ -256,25 +271,25 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                                     }
                                 }
 
-                                NodePacketType packetType = (NodePacketType)Enum.ToObject(typeof(NodePacketType), headerByte[0]);
+                                NodePacketType packetType = (NodePacketType)headerByte[0];
 
                                 int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(headerByte, 1, 4));
-                                int packetBytesRead = 0;
 
                                 _readBufferMemoryStream.Position = 0;
                                 _readBufferMemoryStream.SetLength(packetLength);
                                 byte[] packetData = _readBufferMemoryStream.GetBuffer();
 
-                                while (packetBytesRead < packetLength)
+#if FEATURE_APM
+                                IAsyncResult packetReadResult = localStream.BeginRead(packetData, 0, packetLength, null, null);
+                                int packetBytesRead = localStream.EndRead(packetReadResult);
+#else
+                                ValueTask<int> packetReadTask = CommunicationsUtilities.ReadAsync(localStream, packetData, packetLength);
+                                int packetBytesRead = packetReadTask.IsCompleted ? packetReadTask.Result : packetReadTask.AsTask().Result;
+#endif
+                                if (packetBytesRead < packetLength)
                                 {
-                                    int bytesRead = localStream.Read(packetData, packetBytesRead, packetLength - packetBytesRead);
-                                    if (bytesRead == 0)
-                                    {
-                                        // Incomplete read.  Abort.
-                                        ErrorUtilities.ThrowInternalError("Incomplete packet read. {0} of {1} bytes read", packetBytesRead, packetLength);
-                                    }
-
-                                    packetBytesRead += bytesRead;
+                                    // Incomplete read.  Abort.
+                                    ErrorUtilities.ThrowInternalError("Incomplete packet read. {0} of {1} bytes read", packetBytesRead, packetLength);
                                 }
 
                                 try
@@ -295,7 +310,11 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                                 else
                                 {
                                     // Start reading the next package header.
-                                    readTask = CommunicationsUtilities.ReadExactlyAsync(localStream, headerByte, headerByte.Length, readTaskEvent);
+#if FEATURE_APM
+                                    result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);
+#else
+                                    readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length, readTaskEvent);
+#endif
                                 }
                             }
                             break;
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 15b7a0a3d14..7d5f18b4233 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -531,7 +531,7 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
         /// <summary>
         /// Class which wraps up the communications infrastructure for a given node.
         /// </summary>
-        internal class NodeContext
+        internal sealed class NodeContext
         {
             private enum ExitPacketState
             {
@@ -634,27 +634,46 @@ public NodeContext(int nodeId, Process process,
             /// </summary>
             public void BeginAsyncPacketRead()
             {
-                ThreadPool.QueueUserWorkItem(delegate
-                {
-                    var ignored = RunPacketReadLoopAsync();
-                });
+#if FEATURE_APM
+                _clientToServerStream.BeginRead(_headerByte, 0, _headerByte.Length, static result =>
+                    ((NodeContext)result.AsyncState).RunPacketReadLoopAsync(result), this);
+#else
+                ThreadPool.QueueUserWorkItem(static async context =>
+                    await context.RunPacketReadLoopAsync(), state: this, preferLocal: false);
+#endif
             }
 
+#if FEATURE_APM
+            public void RunPacketReadLoopAsync(IAsyncResult headerReadResult)
+            {
+#else
             public async Task RunPacketReadLoopAsync()
             {
                 while (true)
+#endif
                 {
                     try
                     {
-                        int bytesRead = await CommunicationsUtilities.ReadExactlyAsync(_clientToServerStream, _headerByte, _headerByte.Length);
+#if FEATURE_APM
+                        int bytesRead = _clientToServerStream.EndRead(headerReadResult);
+#else
+                        int bytesRead = await CommunicationsUtilities.ReadAsync(_clientToServerStream, _headerByte, _headerByte.Length);
+#endif
                         if (!ProcessHeaderBytesRead(bytesRead))
                         {
                             return;
                         }
                     }
+                    catch (ArgumentException)
+                    {
+                        // Workaround for CLR stress bug; it sporadically calls us twice on the same async
+                        // result, and EndRead will throw on the second one. Pretend the second one never happened.
+                        CommunicationsUtilities.Trace(_nodeId, "Hit CLR bug #825607: called back twice on same async result; ignoring");
+                        return;
+                    }
                     catch (IOException e)
                     {
-                        CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in RunPacketReadLoopAsync: {0}", e);
+                        CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in {0}: {1}", nameof(RunPacketReadLoopAsync), e);
                         _packetFactory.RoutePacket(_nodeId, new NodeShutdown(NodeShutdownReason.ConnectionFailed));
                         Close();
                         return;
@@ -662,16 +681,30 @@ public async Task RunPacketReadLoopAsync()
 
                     NodePacketType packetType = (NodePacketType)_headerByte[0];
                     int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(_headerByte, 1, 4));
-#if NETFRAMEWORK
-                    MSBuildEventSource.Log.PacketReadSize(packetLength);
-#endif
 
                     _readBufferMemoryStream.SetLength(packetLength);
                     byte[] packetData = _readBufferMemoryStream.GetBuffer();
 
                     try
                     {
+#if FEATURE_APM
+                        MSBuildEventSource.Log.PacketReadSize(packetLength);
+                        IAsyncResult packetReadResult = _clientToServerStream.BeginRead(packetData, 0, packetLength, null, null);
+                        int bytesRead;
+                        try
+                        {
+                            bytesRead = _clientToServerStream.EndRead(packetReadResult);
+                        }
+                        catch (ArgumentException)
+                        {
+                            // Workaround for CLR stress bug; it sporadically calls us twice on the same async
+                            // result, and EndRead will throw on the second one. Pretend the second one never happened.
+                            CommunicationsUtilities.Trace(_nodeId, "Hit CLR bug #825607: called back twice on same async result; ignoring");
+                            return;
+                        }
+#else
                         int bytesRead = await CommunicationsUtilities.ReadAsync(_clientToServerStream, packetData, packetLength);
+#endif
                         if (!ProcessBodyBytesRead(bytesRead, packetLength, packetType))
                         {
                             return;
@@ -679,7 +712,7 @@ public async Task RunPacketReadLoopAsync()
                     }
                     catch (IOException e)
                     {
-                        CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in RunPacketReadLoopAsync (Reading): {0}", e);
+                        CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in {0} (Reading): {1}", nameof(RunPacketReadLoopAsync), e);
                         _packetFactory.RoutePacket(_nodeId, new NodeShutdown(NodeShutdownReason.ConnectionFailed));
                         Close();
                         return;
@@ -696,6 +729,9 @@ public async Task RunPacketReadLoopAsync()
                         Close();
                         return;
                     }
+#if FEATURE_APM
+                    BeginAsyncPacketRead();
+#endif
                 }
             }
 
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index c228a4095bb..5d6e47b7049 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -23,6 +23,8 @@
 
 #if !CLR2COMPATIBILITY
 using Microsoft.Build.Shared.Debugging;
+#endif
+#if !FEATURE_APM
 using System.Threading.Tasks;
 #endif
 
@@ -586,32 +588,15 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce
         }
 #nullable disable
 
-#if !TASKHOST
+#if NET
         /// <summary>
-        /// This is intended to get around state-machine and wait handle allocations on .NET Framework for async reads.
-        /// Prefer ReadAsync() when the read is expected to complete synchronously, or if the bytes to read are greater
-        /// than the stream's buffer and will require multiple reads (e.g. the packet body).
-        /// By signalling an external reset event, this also allows use of WaitHandle.WaitAny() in non-async/await contexts.
+        /// By signalling an external reset event, this allows allocation-free use of WaitHandle.WaitAny() in non-async/await contexts.
         /// </summary>
-        internal static ValueTask<int> ReadExactlyAsync(Stream stream, byte[] buffer, int bytesToRead, AutoResetEvent autoResetEvent = null)
+        internal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int bytesToRead, AutoResetEvent autoResetEvent)
         {
-            Task<int> readTask = stream.ReadAsync(buffer, 0, bytesToRead);
-
-            // If the task completed synchronously, directly return the result.
-            if (readTask.IsCompleted)
-            {
-                _ = autoResetEvent?.Set();
-                return new ValueTask<int>(readTask.Result);
-            }
-
-            // Otherwise, a Task has been allocated and we'll need to set a callback.
-            readTask = readTask.ContinueWith(static (completedTask, state) =>
-            {
-                _ = ((AutoResetEvent)state)?.Set();
-                return completedTask.Result;
-            }, autoResetEvent, TaskContinuationOptions.ExecuteSynchronously);
-
-            return new ValueTask<int>(readTask);
+            int bytesRead = await ReadAsync(stream, buffer, bytesToRead).ConfigureAwait(false);
+            _ = autoResetEvent.Set();
+            return bytesRead;
         }
 
         internal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int bytesToRead)
@@ -619,11 +604,7 @@ internal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int
             int totalBytesRead = 0;
             while (totalBytesRead < bytesToRead)
             {
-#if NET
                 int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead)).ConfigureAwait(false);
-#else
-                int bytesRead = await stream.ReadAsync(buffer, totalBytesRead, bytesToRead - totalBytesRead).ConfigureAwait(false);
-#endif
                 if (bytesRead == 0)
                 {
                     return totalBytesRead;
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 13843856bae..96cdb6b367a 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -21,9 +21,12 @@
 using System.Security.Principal;
 
 #endif
-#if !TASKHOST
+#if NET
 using System.Threading.Tasks;
 #endif
+#if !TASKHOST
+using System.Buffers.Binary;
+#endif
 
 #nullable disable
 
@@ -103,17 +106,22 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
         private ConcurrentQueue<INodePacket> _packetQueue;
 
         /// <summary>
-        /// Per-node shared read buffer.
+        /// The binary translator for reading packets.
+        /// </summary>
+        private ITranslator _readTranslator;
+
+        /// <summary>
+        /// A way to cache a byte array when reading packets.
         /// </summary>
-        private BinaryReaderFactory _sharedReadBuffer;
+        private MemoryStream _readPacketStream;
 
         /// <summary>
         /// A way to cache a byte array when writing out packets
         /// </summary>
-        private MemoryStream _packetStream;
+        private MemoryStream _writePacketStream;
 
         /// <summary>
-        /// A binary writer to help write into <see cref="_packetStream"/>
+        /// A binary writer to help write into <see cref="_writePacketStream"/>
         /// </summary>
         private BinaryWriter _binaryWriter;
 
@@ -208,10 +216,12 @@ internal void InternalConstruct(string pipeName = null)
         {
             _status = LinkStatus.Inactive;
             _asyncDataMonitor = new object();
-            _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
 
-            _packetStream = new MemoryStream();
-            _binaryWriter = new BinaryWriter(_packetStream);
+            _readPacketStream = new MemoryStream();
+            _readTranslator = BinaryTranslator.GetReadTranslator(_readPacketStream, InterningBinaryReader.CreateSharedBuffer());
+
+            _writePacketStream = new MemoryStream();
+            _binaryWriter = new BinaryWriter(_writePacketStream);
 
             pipeName ??= NamedPipeUtil.GetPlatformSpecificPipeName();
 
@@ -368,7 +378,7 @@ private void PacketPumpProc()
                 try
                 {
                     // Wait for a connection
-#if TASKHOST
+#if FEATURE_APM
                     IAsyncResult resultForConnection = localPipeServer.BeginWaitForConnection(null, null);
                     CommunicationsUtilities.Trace("Waiting for connection {0} ms...", waitTimeRemaining);
                     bool connected = resultForConnection.AsyncWaitHandle.WaitOne(waitTimeRemaining, false);
@@ -385,7 +395,7 @@ private void PacketPumpProc()
                     }
 
                     CommunicationsUtilities.Trace("Parent started connecting. Reading handshake from parent");
-#if TASKHOST
+#if FEATURE_APM
                     localPipeServer.EndWaitForConnection(resultForConnection);
 #endif
 
@@ -521,10 +531,10 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
             // spammed to the endpoint and it never gets an opportunity to shutdown.
             CommunicationsUtilities.Trace("Entering read loop.");
             byte[] headerByte = new byte[5];
-#if !TASKHOST
+#if NET
             // Use a separate reuseable wait handle to avoid allocating on Task.AsyncWaitHandle.
             using AutoResetEvent readTaskEvent = new(false);
-            ValueTask<int> readTask = CommunicationsUtilities.ReadExactlyAsync(localReadPipe, headerByte, headerByte.Length, readTaskEvent);
+            ValueTask<int> readTask = CommunicationsUtilities.ReadAsync(localReadPipe, headerByte, headerByte.Length, readTaskEvent);
 #else
             IAsyncResult result = localReadPipe.BeginRead(headerByte, 0, headerByte.Length, null, null);
 #endif
@@ -533,7 +543,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
             // packets to be sent by other threads which are shutting down, such as the logging thread.
             WaitHandle[] handles = new WaitHandle[]
             {
-#if !TASKHOST
+#if NET
                 readTaskEvent,
 #else
                 result.AsyncWaitHandle,
@@ -553,7 +563,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                             int bytesRead = 0;
                             try
                             {
-#if !TASKHOST
+#if NET
                                 // Avoid allocating an additional task instance when possible.
                                 // However if a ValueTask runs asynchronously, it must be converted to a Task before consuming the result.
                                 // Otherwise, the result will be undefined when not using async/await.
@@ -602,9 +612,25 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
 
                             NodePacketType packetType = (NodePacketType)headerByte[0];
 
+#if TASKHOST
+                            int packetLength = BitConverter.ToInt32(headerByte, 1);
+#else
+                            int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(headerByte, 1, 4));
+#endif
+                            _readPacketStream.Position = 0;
+                            _readPacketStream.SetLength(packetLength);
+                            byte[] packetData = _readPacketStream.GetBuffer();
+
                             try
                             {
-                                _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer));
+#if NET
+                                ValueTask<int> packetReadTask = CommunicationsUtilities.ReadAsync(localReadPipe, packetData, packetLength);
+                                int packetBytesRead = packetReadTask.IsCompleted ? packetReadTask.Result : packetReadTask.AsTask().Result;
+#else
+                                IAsyncResult packetReadResult = localReadPipe.BeginRead(packetData, 0, packetLength, null, null);
+                                int packetBytesRead = localReadPipe.EndRead(packetReadResult);
+#endif
+                                _packetFactory.DeserializeAndRoutePacket(0, packetType, _readTranslator);
                             }
                             catch (Exception e)
                             {
@@ -616,8 +642,8 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                                 break;
                             }
 
-#if !TASKHOST
-                            readTask = CommunicationsUtilities.ReadExactlyAsync(localReadPipe, headerByte, headerByte.Length, readTaskEvent);
+#if NET
+                            readTask = CommunicationsUtilities.ReadAsync(localReadPipe, headerByte, headerByte.Length, readTaskEvent);
 #else
                             result = localReadPipe.BeginRead(headerByte, 0, headerByte.Length, null, null);
                             handles[0] = result.AsyncWaitHandle;
@@ -634,7 +660,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                             INodePacket packet;
                             while (localPacketQueue.TryDequeue(out packet))
                             {
-                                var packetStream = _packetStream;
+                                var packetStream = _writePacketStream;
                                 packetStream.SetLength(0);
 
                                 ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(packetStream);
