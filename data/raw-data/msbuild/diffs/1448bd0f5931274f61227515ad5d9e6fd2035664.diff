diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 37efe9a358c..dfcdfd695d7 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -213,7 +213,7 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     }
     public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
     {
-        event Microsoft.Build.Framework.BuildWarningEventHandler WarningLoggedAsError;
+        System.Collections.Generic.HashSet<string> WarningsLoggedAsErrors { get; }
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 2574fa474e0..8af055d52db 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -213,7 +213,7 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     }
     public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
     {
-        event Microsoft.Build.Framework.BuildWarningEventHandler WarningLoggedAsError;
+        System.Collections.Generic.HashSet<string> WarningsLoggedAsErrors { get; }
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index f8c432309d2..56a49e69207 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -353,6 +353,7 @@ protected Task(System.Resources.ResourceManager taskResources, string helpKeywor
         public Microsoft.Build.Framework.IBuildEngine5 BuildEngine5 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine6 BuildEngine6 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine7 BuildEngine7 { get { throw null; } }
+        public Microsoft.Build.Framework.IBuildEngine8 BuildEngine8 { get { throw null; } }
         protected string HelpKeywordPrefix { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskHost HostObject { get { throw null; } set { } }
         public Microsoft.Build.Utilities.TaskLoggingHelper Log { get { throw null; } }
@@ -391,7 +392,6 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         public string HelpKeywordPrefix { get { throw null; } set { } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
-        public void BuildEngineLoggedWarningAsError(object sender, Microsoft.Build.Framework.BuildWarningEventArgs args) { }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { messageWithoutCodePrefix = default(string); throw null; }
         public virtual string FormatResourceString(string resourceName, params object[] args) { throw null; }
         public virtual string FormatString(string unformatted, params object[] args) { throw null; }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index 9404e96ce96..ae04054e92b 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -198,6 +198,7 @@ protected Task(System.Resources.ResourceManager taskResources, string helpKeywor
         public Microsoft.Build.Framework.IBuildEngine5 BuildEngine5 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine6 BuildEngine6 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine7 BuildEngine7 { get { throw null; } }
+        public Microsoft.Build.Framework.IBuildEngine8 BuildEngine8 { get { throw null; } }
         protected string HelpKeywordPrefix { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskHost HostObject { get { throw null; } set { } }
         public Microsoft.Build.Utilities.TaskLoggingHelper Log { get { throw null; } }
@@ -234,7 +235,6 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         public string HelpKeywordPrefix { get { throw null; } set { } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
-        public void BuildEngineLoggedWarningAsError(object sender, Microsoft.Build.Framework.BuildWarningEventArgs args) { }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { messageWithoutCodePrefix = default(string); throw null; }
         public virtual string FormatResourceString(string resourceName, params object[] args) { throw null; }
         public virtual string FormatString(string unformatted, params object[] args) { throw null; }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 1caea0bee7a..d186680acef 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -352,8 +352,8 @@ bool IncludeTaskInputs
         /// <summary>
         /// Determines if the specified warning code should be treated as an error.
         /// </summary>
-        /// <param name="code">A <see cref="BuildWarningEventArgs"/> that specifies the warning.</param>
-        /// <param name="context">The event context for where the warning occurred</param>
+        /// <param name="code">The warning code to check..</param>
+        /// <param name="context">The event context for where the warning occurred.</param>
         /// <returns><code>true</code> if the warning should be treated as an error, otherwise <code>false</code>.</returns>
         bool ShouldTreatWarningAsError(string code, BuildEventContext context);
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 42f730d80a9..8aa66e3c967 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -487,31 +487,14 @@ public void LogWarningEvent(BuildWarningEventArgs e)
 
                 e.BuildEventContext = _taskLoggingContext.BuildEventContext;
 
+                // If the warning we're about to log will be logged as an error, store it so
+                // the TaskLoggingHelper can determine what was actually logged as an error.
                 if (_taskLoggingContext.LoggingService.ShouldTreatWarningAsError(e.Code, e.BuildEventContext))
                 {
-                    WarningLoggedAsError(null, e);
-
-                    BuildErrorEventArgs errorEvent = new BuildErrorEventArgs
-                            (
-                                e.Subcategory,
-                                e.Code,
-                                e.File,
-                                e.LineNumber,
-                                e.ColumnNumber,
-                                e.EndLineNumber,
-                                e.EndColumnNumber,
-                                e.Message,
-                                e.HelpKeyword,
-                                e.SenderName
-                            );
-                    errorEvent.BuildEventContext = e.BuildEventContext;
-                    _taskLoggingContext.HasLoggedErrors = true;
-                    _taskLoggingContext.LoggingService.LogBuildEvent(errorEvent);
-                }
-                else
-                {
-                    _taskLoggingContext.LoggingService.LogBuildEvent(e);
+                    WarningsLoggedAsErrors.Add(e.Code);
                 }
+
+                _taskLoggingContext.LoggingService.LogBuildEvent(e);
             }
         }
 
@@ -701,8 +684,12 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         public bool AllowFailureWithoutError { get; set; } = false;
         #endregion
 
-
-        public event BuildWarningEventHandler WarningLoggedAsError;
+        #region IBuildEngine8 Members
+        /// <summary>
+        /// Returns a set containing all warnings the build engine converted into errors.
+        /// </summary>
+        public HashSet<string> WarningsLoggedAsErrors { get; } = new HashSet<string>();
+        #endregion
 
         /// <summary>
         /// Called by the internal MSBuild task.
diff --git a/src/Framework/IBuildEngine8.cs b/src/Framework/IBuildEngine8.cs
index a5face30306..d64e856252f 100644
--- a/src/Framework/IBuildEngine8.cs
+++ b/src/Framework/IBuildEngine8.cs
@@ -1,14 +1,19 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System.Collections.Generic;
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    /// This interface extends <see cref="IBuildEngine6" /> to allow tasks to know when the
-    /// warnings they log were actually converted to errors.
+    /// This interface extends <see cref="IBuildEngine7" /> to allow tasks to know what
+    /// warnings they logged were converted to errors.
     /// </summary>
     public interface IBuildEngine8 : IBuildEngine7
     {
-        public event BuildWarningEventHandler WarningLoggedAsError;
+        /// <summary>
+        /// A set containing warning codes that the build engine converted into an error.
+        /// </summary>
+        public HashSet<string> WarningsLoggedAsErrors { get; }
     }
 }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 1eb63cfd6da..09595c1d4e1 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -162,9 +162,9 @@ internal class OutOfProcTaskHostNode :
         /// The task object cache.
         /// </summary>
         private RegisteredTaskObjectCacheBase _registeredTaskObjectCache;
+#endif
 
         public event BuildWarningEventHandler WarningLoggedAsError;
-#endif
 
         /// <summary>
         /// Constructor.
@@ -458,6 +458,14 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         #endregion
 #endif
 
+        #region IBuildEngine8 Implementation
+        /// <summary>
+        /// Returns a set containing all warnings the build engine converted into errors.
+        /// </summary>
+        public HashSet<string> WarningsLoggedAsErrors { get; } = new HashSet<string>();
+        #endregion
+
+
         #region INodePacketFactory Members
 
         /// <summary>
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index f1d2d758250..7ad0feec5c7 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -49,11 +49,6 @@ public TaskLoggingHelper(ITask taskInstance)
             ErrorUtilities.VerifyThrowArgumentNull(taskInstance, nameof(taskInstance));
             _taskInstance = taskInstance;
             TaskName = taskInstance.GetType().Name;
-
-            if(_taskInstance.BuildEngine is IBuildEngine8 engine)
-            {
-                engine.WarningLoggedAsError += BuildEngineLoggedWarningAsError;
-            }
         }
 
         /// <summary>
@@ -65,12 +60,6 @@ public TaskLoggingHelper(IBuildEngine buildEngine, string taskName)
             ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
             TaskName = taskName;
             _buildEngine = buildEngine;
-
-            // Tasks need to know if a warning they logged was actually logged as an error.
-            if(_buildEngine is IBuildEngine8 engine)
-            {
-                engine.WarningLoggedAsError += BuildEngineLoggedWarningAsError;
-            }
         }
 
         #endregion
@@ -129,6 +118,9 @@ private string TaskNameUpperCase
         /// </summary>
         private readonly IBuildEngine _buildEngine;
 
+        /// <summary>
+        /// The set containing all warning codes logged.
+        /// </summary>
         private HashSet<string> _warningCodesLogged = new HashSet<string>();
 
         /// <summary>
@@ -165,9 +157,31 @@ protected IBuildEngine BuildEngine
         public string HelpKeywordPrefix { get; set; }
 
         /// <summary>
-        /// Has the task logged any errors through this logging helper object?
+        /// 
+        /// </summary>
+        private bool _hasLoggedErrors;
+
+        /// <summary>
+        /// Gets whether the task has logged an error or if the build engine
+        /// converted a warning into an error.
         /// </summary>
-        public bool HasLoggedErrors { get; private set; }
+        public bool HasLoggedErrors
+        {
+            get
+            {
+                if(!_hasLoggedErrors)
+                {
+                    // See if a previously logged warning was turned into an error.
+                    _hasLoggedErrors = (BuildEngine as IBuildEngine8).WarningsLoggedAsErrors.Overlaps(_warningCodesLogged);
+                }
+
+                return _hasLoggedErrors;
+            }
+            private set
+            {
+                _hasLoggedErrors = value;
+            }
+        }
 
 #endregion
 
@@ -936,18 +950,6 @@ public void LogErrorFromException(Exception exception, bool showStackTrace, bool
 
 #region Warning logging methods
 
-        public void BuildEngineLoggedWarningAsError(object sender, BuildWarningEventArgs args)
-        {
-            if(args.Code == null)
-            {
-
-            }
-            if(_warningCodesLogged.Contains(args.Code))
-            {
-                HasLoggedErrors = true;
-            }
-        }
-
         /// <summary>
         /// Logs a warning using the specified string.
         /// Thread safe.
@@ -1046,7 +1048,7 @@ params object[] messageArgs
 
             }
 
-            // Keep track of warnings logged, and compare them against when a warning is logged as an error.
+            // Keep track of warnings logged and compare to the what the build engine logged as an error.
             _warningCodesLogged.Add(warningCode);
 
             var e = new BuildWarningEventArgs
diff --git a/src/Utilities/Task.cs b/src/Utilities/Task.cs
index 15d4b72270e..3a695f5af98 100644
--- a/src/Utilities/Task.cs
+++ b/src/Utilities/Task.cs
@@ -105,6 +105,11 @@ public IBuildEngine BuildEngine
         /// </summary>
         public IBuildEngine7 BuildEngine7 => (IBuildEngine7)BuildEngine;
 
+        /// <summary>
+        /// Retrieves the <see cref="IBuildEngine8" /> version of the build engine interface provided by the host.
+        /// </summary>
+        public IBuildEngine8 BuildEngine8 => (IBuildEngine8)BuildEngine;
+
         /// <summary>
         /// The build engine sets this property if the host IDE has associated a host object with this particular task.
         /// </summary>
