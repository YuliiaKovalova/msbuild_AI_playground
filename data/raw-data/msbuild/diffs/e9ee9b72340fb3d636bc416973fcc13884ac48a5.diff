diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..57d18ebbcb9 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -139,7 +139,7 @@
     <Rule Id="CA2231" Action="None" />             <!-- Overload operator equals on overriding value type Equals --> 
     <Rule Id="CA2234" Action="None" />             <!-- Pass system uri objects instead of strings --> 
     <Rule Id="CA2235" Action="None" />             <!-- Mark all non-serializable fields --> 
-    <Rule Id="CA2241" Action="Info" />             <!-- Provide correct arguments to formatting methods --> 
+    <Rule Id="CA2241" Action="Warning" />          <!-- Provide correct arguments to formatting methods --> 
     <Rule Id="CA2242" Action="Warning" />          <!-- Test for NaN correctly --> 
     <Rule Id="CA2243" Action="None" />             <!-- Attribute string literals should parse correctly --> 
     <Rule Id="CA2244" Action="None" />             <!-- Do not duplicate indexed element initializations --> 
diff --git a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
index 5c8489fc7b6..d7d57de9aba 100644
--- a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
+++ b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
@@ -525,64 +525,46 @@ public void MatchLengthStartWithUncPatternNoShare()
         [Fact]
         public void UncPatternEmptyString_LegacyRegex()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            UncPattern.IsMatch(winDirectory).ShouldBe(false);
-            UncPattern.IsMatch(unixDirectory).ShouldBe(false);
+            UncPattern.IsMatch(string.Empty).ShouldBe(false);
+            UncPattern.IsMatch(string.Empty).ShouldBe(false);
         }
 
         [Fact]
         public void UncPatternEmptyString()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.IsUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.IsUncPattern(unixDirectory).ShouldBe(false);
+            FileUtilitiesRegex.IsUncPattern(string.Empty).ShouldBe(false);
+            FileUtilitiesRegex.IsUncPattern(string.Empty).ShouldBe(false);
         }
 
         [Fact]
         public void StartWithUncPatternEmptyString_LegacyRegex()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            StartsWithUncPattern.IsMatch(winDirectory).ShouldBe(false);
-            StartsWithUncPattern.IsMatch(unixDirectory).ShouldBe(false);
+            StartsWithUncPattern.IsMatch(string.Empty).ShouldBe(false);
+            StartsWithUncPattern.IsMatch(string.Empty).ShouldBe(false);
         }
 
         [Fact]
         public void StartsWithUncPatternEmptyString()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.StartsWithUncPattern(unixDirectory).ShouldBe(false);
+            FileUtilitiesRegex.StartsWithUncPattern(string.Empty).ShouldBe(false);
+            FileUtilitiesRegex.StartsWithUncPattern(string.Empty).ShouldBe(false);
         }
 
         [Fact]
         public void MatchLengthStartWithUncPatternEmptyString_LegacyRegex()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            var match = StartsWithUncPattern.Match(winDirectory);
+            var match = StartsWithUncPattern.Match(string.Empty);
             match.Success.ShouldBeFalse();
 
-            match = StartsWithUncPattern.Match(unixDirectory);
+            match = StartsWithUncPattern.Match(string.Empty);
             match.Success.ShouldBeFalse();
         }
 
         [Fact]
         public void MatchLengthStartWithUncPatternEmptyString()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(winDirectory).ShouldBe(-1);
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(unixDirectory).ShouldBe(-1);
+            FileUtilitiesRegex.StartsWithUncPatternMatchLength(string.Empty).ShouldBe(-1);
+            FileUtilitiesRegex.StartsWithUncPatternMatchLength(string.Empty).ShouldBe(-1);
         }
     }
 }
