diff --git a/Directory.Build.props b/Directory.Build.props
index a3b0e8f7199..0df28a5b8b2 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -38,7 +38,7 @@
         SYSLIB0011: Removing binary formatter will happen as part of a larger .NET-wide effort.
     -->
 
-    <NoWarn>$(NoWarn);NU1603;NU5105;1701;1702;SYSLIB0011;CA1416</NoWarn>
+    <NoWarn>$(NoWarn);NU1603;NU5105;1701;1702;SYSLIB0011</NoWarn>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(Configuration)' == 'Debug-MONO'">
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 41434303c83..752771d1f78 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -9,7 +9,9 @@
 using System.IO;
 using System.Reflection;
 using System.Runtime.InteropServices;
+#if RUNTIME_TYPE_NETCORE
 using System.Runtime.Versioning;
+#endif
 using System.Text;
 using System.Threading;
 
@@ -24,7 +26,7 @@
 namespace Microsoft.Build.Framework;
 internal static class NativeMethods
 {
-    #region Constants
+#region Constants
 
     internal const uint ERROR_INSUFFICIENT_BUFFER = 0x8007007A;
     internal const uint STARTUP_LOADER_SAFEMODE = 0x10;
@@ -80,9 +82,9 @@ internal static class NativeMethods
         internal const CharSet AutoOrUnicode = CharSet.Unicode;
 #endif
 
-    #endregion
+#endregion
 
-    #region Enums
+#region Enums
 
     private enum PROCESSINFOCLASS : int
     {
@@ -207,9 +209,9 @@ internal enum ProcessorArchitectures
         Unknown
     }
 
-    #endregion
+#endregion
 
-    #region Structs
+#region Structs
 
     /// <summary>
     /// Structure that contain information about the system on which we are running
@@ -577,9 +579,9 @@ private unsafe static int GetLogicalCoreCountOnWindows()
         return -1;
     }
 
-    #endregion
+#endregion
 
-    #region Member data
+#region Member data
 
     internal static bool HasMaxPath => MaxPath == MAX_PATH;
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 9fe18eaef93..beec4a1d226 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -14,7 +14,6 @@
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 using Xunit.Abstractions;
 using Shouldly;
-using System.Text;
 
 #nullable disable
 
diff --git a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
index 05df35e1389..631db0a0bd9 100644
--- a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
@@ -76,7 +76,7 @@ public class BootstrapperBuilder : IBootstrapperBuilder
         /// </summary>
         public BootstrapperBuilder()
         {
-            _path = Util.DefaultPath;
+            _path = NativeMethodsShared.IsWindows ? Util.DefaultPath : string.Empty;
         }
 
         /// <summary>
@@ -85,7 +85,7 @@ public BootstrapperBuilder()
         /// <param name="visualStudioVersion">The version of Visual Studio that is used to build this bootstrapper.</param>
         public BootstrapperBuilder(string visualStudioVersion)
         {
-            _path = Util.GetDefaultPath(visualStudioVersion);
+            _path = NativeMethodsShared.IsWindows ? Util.GetDefaultPath(visualStudioVersion) : string.Empty;
         }
 
         #region IBootstrapperBuilder Members
@@ -447,7 +447,10 @@ public string[] GetOutputFolders(string[] productCodes, string culture, string f
             BuildPackages(settings, null, null, files, null);
 
             List<string> packagePaths = new List<string>() { invariantPath };
-            packagePaths.AddRange(Util.AdditionalPackagePaths.Select(p => Util.AddTrailingChar(p.ToLowerInvariant(), System.IO.Path.DirectorySeparatorChar)));
+            if (NativeMethodsShared.IsWindows)
+            {
+                packagePaths.AddRange(Util.AdditionalPackagePaths.Select(p => Util.AddTrailingChar(p.ToLowerInvariant(), System.IO.Path.DirectorySeparatorChar)));
+            }
 
             foreach (string file in files)
             {
@@ -591,7 +594,11 @@ private void RefreshProducts()
             XmlElement rootElement = _document.CreateElement("Products", BOOTSTRAPPER_NAMESPACE);
 
             List<string> packagePaths = new List<string>() { PackagePath };
-            packagePaths.AddRange(Util.AdditionalPackagePaths);
+            if (NativeMethodsShared.IsWindows)
+            {
+                packagePaths.AddRange(Util.AdditionalPackagePaths);
+            }
+
             foreach (string packagePath in packagePaths)
             {
                 if (FileSystems.Default.DirectoryExists(packagePath))
diff --git a/src/Tasks/BootstrapperUtil/Util.cs b/src/Tasks/BootstrapperUtil/Util.cs
index 0ed5be1dea0..819f4f53edf 100644
--- a/src/Tasks/BootstrapperUtil/Util.cs
+++ b/src/Tasks/BootstrapperUtil/Util.cs
@@ -5,6 +5,9 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+#if RUNTIME_TYPE_NETCORE
+using System.Runtime.Versioning;
+#endif
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
 
@@ -75,6 +78,9 @@ public static CultureInfo GetCultureInfoFromString(string cultureName)
 
         public static CultureInfo DefaultCultureInfo => System.Threading.Thread.CurrentThread.CurrentUICulture;
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         // This is the 4.0 property and will always point to the Dev10 registry key so that we don't break backwards compatibility.
         // Applications relying on 4.5 will need to use the new method that is introduced in 4.5.
         public static string DefaultPath
@@ -102,6 +108,9 @@ public static string DefaultPath
             }
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         // A new method in 4.5 to get the default path for bootstrapper packages.
         // This method is not going to cache the path as it could be different depending on the Visual Studio version.
         public static string GetDefaultPath(string visualStudioVersion)
@@ -153,6 +162,9 @@ public static string GetDefaultPath(string visualStudioVersion)
             return Directory.GetCurrentDirectory();
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         // Gets the list of additional paths to inspect for packages as defined in the registry
         public static List<string> AdditionalPackagePaths
         {
@@ -202,6 +214,9 @@ public static List<string> AdditionalPackagePaths
             }
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         private static string ReadRegistryString(RegistryKey key, string path, string registryValue)
         {
             RegistryKey subKey = key.OpenSubKey(path, false);
diff --git a/src/Tasks/FormatUrl.cs b/src/Tasks/FormatUrl.cs
index f742f4d238b..4b600c49ef9 100644
--- a/src/Tasks/FormatUrl.cs
+++ b/src/Tasks/FormatUrl.cs
@@ -1,9 +1,11 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if !RUNTIME_TYPE_NETCORE
 using System;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
+#endif
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Tasks/GenerateApplicationManifest.cs b/src/Tasks/GenerateApplicationManifest.cs
index bece4016d94..b90bfe1002c 100644
--- a/src/Tasks/GenerateApplicationManifest.cs
+++ b/src/Tasks/GenerateApplicationManifest.cs
@@ -219,7 +219,7 @@ private bool AddIsolatedComReferences(ApplicationManifest manifest)
                         name = Path.GetFileName(item.ItemSpec);
                     }
                     FileReference file = AddFileFromItem(item);
-                    if (!file.ImportComComponent(item.ItemSpec, manifest.OutputMessages, name))
+                    if (NativeMethodsShared.IsWindows && !file.ImportComComponent(item.ItemSpec, manifest.OutputMessages, name))
                     {
                         success = false;
                     }
@@ -386,7 +386,7 @@ private bool BuildResolvedSettings(ApplicationManifest manifest)
             }
             else if (String.IsNullOrEmpty(manifest.Publisher))
             {
-                string org = Util.GetRegisteredOrganization();
+                string org = NativeMethodsShared.IsWindows ? Util.GetRegisteredOrganization() : string.Empty;
                 if (!String.IsNullOrEmpty(org))
                 {
                     manifest.Publisher = org;
diff --git a/src/Tasks/GenerateDeploymentManifest.cs b/src/Tasks/GenerateDeploymentManifest.cs
index d4ff40421a4..a19de20c07d 100644
--- a/src/Tasks/GenerateDeploymentManifest.cs
+++ b/src/Tasks/GenerateDeploymentManifest.cs
@@ -141,7 +141,11 @@ private bool BuildResolvedSettings(DeployManifest manifest)
             }
             else if (String.IsNullOrEmpty(manifest.Publisher))
             {
-                string org = Util.GetRegisteredOrganization();
+                string org = string.Empty;
+                if (NativeMethodsShared.IsWindows)
+                {
+                    org = Util.GetRegisteredOrganization();
+                }
                 manifest.Publisher = !String.IsNullOrEmpty(org) ? org : manifest.Product;
             }
             Debug.Assert(!String.IsNullOrEmpty(manifest.Publisher));
diff --git a/src/Tasks/GenerateLauncher.cs b/src/Tasks/GenerateLauncher.cs
index 6bedd918410..060f7224791 100644
--- a/src/Tasks/GenerateLauncher.cs
+++ b/src/Tasks/GenerateLauncher.cs
@@ -39,7 +39,7 @@ public sealed class GenerateLauncher : TaskExtension
 
         public override bool Execute()
         {
-            if (LauncherPath == null)
+            if (LauncherPath == null && NativeMethodsShared.IsWindows)
             {
                 // Launcher lives next to ClickOnce bootstrapper.
                 // GetDefaultPath obtains the root ClickOnce boostrapper path.
diff --git a/src/Tasks/ManifestUtil/ComImporter.cs b/src/Tasks/ManifestUtil/ComImporter.cs
index 116439f37de..32c121b9725 100644
--- a/src/Tasks/ManifestUtil/ComImporter.cs
+++ b/src/Tasks/ManifestUtil/ComImporter.cs
@@ -9,12 +9,16 @@
 using System.Runtime.InteropServices;
 #if RUNTIME_TYPE_NETCORE
 using System.Runtime.InteropServices.ComTypes;
+using System.Runtime.Versioning;
 #endif
 
 #nullable disable
 
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
+#if RUNTIME_TYPE_NETCORE
+    [SupportedOSPlatform("windows")]
+#endif
     internal class ComImporter
     {
         private readonly OutputMessageCollection _outputMessages;
diff --git a/src/Tasks/ManifestUtil/FileReference.cs b/src/Tasks/ManifestUtil/FileReference.cs
index e2e0f6b75d8..3f62edaecc5 100644
--- a/src/Tasks/ManifestUtil/FileReference.cs
+++ b/src/Tasks/ManifestUtil/FileReference.cs
@@ -5,6 +5,9 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Runtime.InteropServices;
+#if RUNTIME_TYPE_NETCORE
+using System.Runtime.Versioning;
+#endif
 using System.Text;
 using System.Xml.Serialization;
 
@@ -44,6 +47,9 @@ public FileReference(string path) : base(path)
         [XmlIgnore]
         public ComClass[] ComClasses => _comClasses;
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         internal bool ImportComComponent(string path, OutputMessageCollection outputMessages, string outputDisplayName)
         {
             var importer = new ComImporter(path, outputMessages, outputDisplayName);
@@ -103,7 +109,7 @@ public bool IsDataFile
         [XmlIgnore]
         public TypeLib[] TypeLibs => _typeLibs;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -141,7 +147,7 @@ public string XmlWriteableType
             set => _writeableType = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -181,7 +187,7 @@ internal ComClass(Guid tlbId, Guid clsId, string progId, string threadingModel,
         [XmlIgnore]
         public string TlbId => _tlbid;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -228,7 +234,7 @@ public string XmlTlbId
             set => _tlbid = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -293,7 +299,7 @@ private static string FlagsFromInt(int flags)
         [XmlIgnore]
         public string Version => _version;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -340,7 +346,7 @@ public string XmlVersion
             set => _version = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -380,7 +386,7 @@ public bool Versioned
             }
         }
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -400,7 +406,7 @@ public string XmlVersioned
             set => _versioned = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -427,7 +433,7 @@ public class ProxyStub
         [XmlIgnore]
         public string TlbId => _tlbid;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -474,6 +480,6 @@ public string XmlTlbId
             set => _tlbid = value;
         }
 
-        #endregion
+#endregion
     }
 }
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index 12ba135aa53..20018c9c9f7 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -13,6 +13,9 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+#if RUNTIME_TYPE_NETCORE
+using System.Runtime.Versioning;
+#endif
 using System.Security;
 using System.Security.Cryptography;
 using System.Text;
@@ -250,6 +253,9 @@ private static string GetLogPath()
             return logPath;
         }
 
+#if RUNTIME_TYPE_NETCORE
+        [SupportedOSPlatform("windows")]
+#endif
         public static string GetRegisteredOrganization()
         {
             RegistryKey key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
@@ -515,7 +521,7 @@ public static string WriteTempFile(string s)
             return path;
         }
 
-        #region ItemComparer 
+#region ItemComparer 
         private static readonly ItemComparer s_itemComparer = new ItemComparer();
         private class ItemComparer : IComparer
         {
@@ -541,7 +547,7 @@ int IComparer.Compare(object obj1, object obj2)
                 return String.Compare(item1.ItemSpec, item2.ItemSpec, StringComparison.Ordinal);
             }
         }
-        #endregion
+#endregion
 
         public static Version ConvertFrameworkVersionToString(string version)
         {
