diff --git a/documentation/specs/sdk-resolvers-algorithm.md b/documentation/specs/sdk-resolvers-algorithm.md
index 93408a1b612..07d2e597afa 100644
--- a/documentation/specs/sdk-resolvers-algorithm.md
+++ b/documentation/specs/sdk-resolvers-algorithm.md
@@ -1,11 +1,11 @@
 ## SDK Resolution Algorithm
-Since ChangeWave 17.4 the sdk resolution algorithm is changed.
+In 17.3 under ChangeWave 17.4 the sdk resolution algorithm is changed.
 
 ### Reason for change
-Previously (before ChangeWave 17.4) all SDK resolvers were loaded and then ordered by priority. The resolvers are tried one after one until one of them succeeds. In order to decrease the number of assemblies to be load we change the behavoir since ChangeWave 17.4.
+Previously (before ChangeWave 17.4) all SDK resolvers were loaded and then ordered by priority. The resolvers are tried one after one until one of them succeeds. In order to decrease the number of assemblies to be load we change the behavior in 17.3 under ChangeWave 17.4.
 
 ### New SDK Resolution Algorithm
-Since ChangeWave 17.4 all the resolvers divides into two groups:
+Under ChangeWave 17.4 all the resolvers divides into two groups:
 - Specific resolvers, i.e. resolvers with specified name pattern
 - General resolvers, i.e. resolvers without specified name pattern
 
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
index 56ec8b58bb1..cc713433b42 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
@@ -46,7 +46,7 @@ public void AssertDefaultLoaderReturnsDefaultResolvers()
         {
             var loader = new SdkResolverLoader();
 
-            var resolvers = loader.LoadResolvers(_loggingContext, new MockElementLocation("file"));
+            var resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
 
             resolvers.Select(i => i.GetType().FullName).ShouldBe(new [] { typeof(DefaultSdkResolver).FullName });
             
@@ -106,7 +106,7 @@ public void VerifyThrowsWhenResolverFailsToLoad()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldBe($"The SDK resolver type \"{nameof(MockSdkResolverThatDoesNotLoad)}\" failed to load. A8BB8B3131D3475D881ACD3AF8D75BD6");
@@ -138,7 +138,7 @@ public void VerifyThrowsWhenResolverHasNoPublicConstructor()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldStartWith($"The SDK resolver type \"{nameof(MockSdkResolverNoPublicConstructor)}\" failed to load.");
@@ -169,7 +169,7 @@ public void VerifyWarningLoggedWhenResolverAssemblyCannotBeLoaded()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldBe($"The SDK resolver assembly \"{assemblyPath}\" could not be loaded. {expectedMessage}");
@@ -208,7 +208,7 @@ public void SdkResolverLoaderReadsManifestFile()
         }
 
         [Fact]
-        public void SdkResolverLoaderReadsManifestFileWithNamePattern()
+        public void SdkResolverLoaderReadsManifestFileWithResolvableSdkPattern()
         {
             using (var env = TestEnvironment.Create(_output))
             {
@@ -221,7 +221,7 @@ public void SdkResolverLoaderReadsManifestFileWithNamePattern()
                 Directory.CreateDirectory(resolverPath);
                 File.WriteAllText(resolverManifest, $@"
                     <SdkResolver>
-                      <NamePattern>1&lt;.*</NamePattern>
+                      <ResolvableSdkPattern>1&lt;.*</ResolvableSdkPattern>
                       <Path>{assemblyToLoad}</Path>
                     </SdkResolver>");
 
@@ -230,7 +230,7 @@ public void SdkResolverLoaderReadsManifestFileWithNamePattern()
 
                 resolversManifestsFound.Count.ShouldBe(1);
                 resolversManifestsFound.First().Path.ShouldBe(assemblyToLoad);
-                resolversManifestsFound.First().NamePattern.ShouldBe("1<.*");
+                resolversManifestsFound.First().ResolvableSdkRegex.ToString().ShouldBe("1<.*");
             }
         }
 
@@ -314,7 +314,7 @@ public void SdkResolverLoaderHonorsIncludeDefaultEnvVar()
                             resolvers.Add(new MockSdkResolverWithAssemblyPath(resolverPath));
                         }
                     };
-                    IList<SdkResolverBase> resolvers = loader.LoadResolvers(_loggingContext, new MockElementLocation("file"));
+                    IList<SdkResolverBase> resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
 
                     resolvers.Count.ShouldBe(0);
                 }
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 3013635e969..1e1cc8b7186 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -18,6 +18,7 @@
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 using SdkResultImpl = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 using Microsoft.Build.Shared;
+using System.Text.RegularExpressions;
 
 #nullable disable
 
@@ -58,8 +59,8 @@ public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
 
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver2 running");
-            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithNamePattern1 running");
-            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithNamePattern2 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithResolvableSdkPattern1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern2 running");
             _logger.Errors.Select(i => i.Message).ShouldBe(new [] { "ERROR4", "ERROR1", "ERROR2" });
             _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING4", "WARNING2" });
         }
@@ -105,7 +106,7 @@ public void AssertResolverThrows()
 
 
         [Fact]
-        // Scenario: MockSdkResolverWithNamePattern2 is a specific resolver (i.e. resolver with pattern)
+        // Scenario: MockSdkResolverWithResolvableSdkPattern2 is a specific resolver (i.e. resolver with pattern)
         // and it successfully resolves sdk.
         public void AssertSecondResolverWithPatternCanResolve()
         {
@@ -115,14 +116,14 @@ public void AssertSecondResolverWithPatternCanResolve()
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
 
-            result.Path.ShouldBe("resolverpathwithnamepattern2");
-            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithNamePattern2 running");
+            result.Path.ShouldBe("resolverpathwithresolvablesdkpattern2");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern2 running");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolver1 running");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolver2 running");
         }
 
         [Fact]
-        // Scenario: MockSdkResolverWithNamePattern1 is a specific resolver, it is loaded but did not resolve sdk.
+        // Scenario: MockSdkResolverWithResolvableSdkPattern1 is a specific resolver, it is loaded but did not resolve sdk.
         // MockSdkResolver1 is a general resolver (i.e. resolver without pattern), it resolves sdk on a fallback. 
         public void AssertFirstResolverCanResolve()
         {
@@ -134,11 +135,11 @@ public void AssertFirstResolverCanResolve()
 
             result.Path.ShouldBe("resolverpath1");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
-            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithNamePattern1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithResolvableSdkPattern1 running");
         }
 
         [Fact]
-        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 and resolves sdk.
+        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithResolvableSdkPattern1 and resolves sdk.
         public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
         {
             using (TestEnvironment env = TestEnvironment.Create())
@@ -155,14 +156,14 @@ public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
 
                 result.Path.ShouldBe("resolverpath1");
                 _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
-                _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithNamePattern1 running");
+                _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithResolvableSdkPattern1 running");
                 ChangeWaves.ResetStateForTests();
             }
         }
 
         [Fact]
-        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 but MockSdkResolverWithNamePattern1 resolves sdk,
-        // becuase MockSdkResolver1 is general and MockSdkResolverWithNamePattern1 is specific.
+        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithResolvableSdkPattern1 but MockSdkResolverWithResolvableSdkPattern1 resolves sdk,
+        // becuase MockSdkResolver1 is general and MockSdkResolverWithResolvableSdkPattern1 is specific.
         public void AssertFirstResolverWithPatternCanResolve()
         {
             SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
@@ -171,8 +172,8 @@ public void AssertFirstResolverWithPatternCanResolve()
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
 
-            result.Path.ShouldBe("resolverpathwithnamepattern1");
-            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithNamePattern1 running");
+            result.Path.ShouldBe("resolverpathwithresolvablesdkpattern1");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern1 running");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolver1 running");
         }
 
@@ -604,7 +605,7 @@ public void IsRunningInVisualStudioIsSetForResolverContext()
         private class MockLoaderStrategy : SdkResolverLoader
         {
             private List<SdkResolver> _resolvers;
-            private List<Tuple<string, SdkResolver>> _resolversWithPatterns;
+            private List<(string ResolvableSdkPattern, SdkResolver Resolver)> _resolversWithPatterns;
 
 
             public MockLoaderStrategy(bool includeErrorResolver = false, bool includeResolversWithPatterns = false) : this()
@@ -616,8 +617,8 @@ public MockLoaderStrategy(bool includeErrorResolver = false, bool includeResolve
 
                 if (includeResolversWithPatterns)
                 {
-                    _resolversWithPatterns.Add(new Tuple<string, SdkResolver>("1.*", new MockSdkResolverWithNamePattern1()));
-                    _resolversWithPatterns.Add(new Tuple<string, SdkResolver>(".*", new MockSdkResolverWithNamePattern2()));
+                    _resolversWithPatterns.Add(("1.*", new MockSdkResolverWithResolvableSdkPattern1()));
+                    _resolversWithPatterns.Add((".*", new MockSdkResolverWithResolvableSdkPattern2()));
                 }
             }
 
@@ -631,10 +632,10 @@ private MockLoaderStrategy()
                     new MockSdkResolverWithState()
                 };
 
-                _resolversWithPatterns = new List<Tuple<string, SdkResolver>>();
+                _resolversWithPatterns = new List<(string ResolvableSdkPattern, SdkResolver Resolver)>();
             }
 
-            internal override IList<SdkResolver> LoadResolvers(LoggingContext loggingContext, ElementLocation location)
+            internal override IList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
             {
                 return _resolvers.OrderBy(i => i.Priority).ToList();
             }
@@ -643,20 +644,24 @@ internal override IList<SdkResolverManifest> GetResolversManifests(LoggingContex
             ElementLocation location)
             {
                 var manifests = new List<SdkResolverManifest>();
-                foreach(var resolver in _resolvers)
+                foreach(SdkResolver resolver in _resolvers)
                 {
                     SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(resolver.Name, null, null);
                     manifests.Add(sdkResolverManifest);
                 }
-                foreach (var pair in _resolversWithPatterns)
+                foreach ((string ResolvableSdkPattern, SdkResolver Resolver) pair in _resolversWithPatterns)
                 {
-                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(pair.Item2.Name, null, pair.Item1);
+                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(
+                        pair.Resolver.Name,
+                        null,
+                        new Regex(pair.ResolvableSdkPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant, TimeSpan.FromMilliseconds(500))
+                    );
                     manifests.Add(sdkResolverManifest);
                 }
                 return manifests;
             }
 
-            protected internal override IList<SdkResolver> LoadResolvers(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+            protected internal override IList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
             {
                 var resolvers = new List<SdkResolver>();
                 foreach (var resolver in _resolvers)
@@ -668,9 +673,9 @@ protected internal override IList<SdkResolver> LoadResolvers(SdkResolverManifest
                 }
                 foreach (var pair in _resolversWithPatterns)
                 {
-                    if (pair.Item2.Name == manifest.Name)
+                    if (pair.Resolver.Name == manifest.Name)
                     {
-                        resolvers.Add(pair.Item2);
+                        resolvers.Add(pair.Resolver);
                     }
                 }
                 return resolvers.OrderBy(t => t.Priority).ToList();
@@ -725,35 +730,35 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
             }
         }
 
-        private class MockSdkResolverWithNamePattern1 : SdkResolver
+        private class MockSdkResolverWithResolvableSdkPattern1 : SdkResolver
         {
-            public override string Name => nameof(MockSdkResolverWithNamePattern1);
+            public override string Name => nameof(MockSdkResolverWithResolvableSdkPattern1);
 
             public override int Priority => 2;
 
             public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory)
             {
-                resolverContext.Logger.LogMessage("MockSdkResolverWithNamePattern1 running", MessageImportance.Normal);
+                resolverContext.Logger.LogMessage("MockSdkResolverWithResolvableSdkPattern1 running", MessageImportance.Normal);
 
                 if (sdk.Name.StartsWith("11"))
-                    return factory.IndicateSuccess("resolverpathwithnamepattern1", "version3");
+                    return factory.IndicateSuccess("resolverpathwithresolvablesdkpattern1", "version3");
 
                 return factory.IndicateFailure(new[] { "ERROR3" });
             }
         }
 
-        private class MockSdkResolverWithNamePattern2 : SdkResolver
+        private class MockSdkResolverWithResolvableSdkPattern2 : SdkResolver
         {
-            public override string Name => nameof(MockSdkResolverWithNamePattern2);
+            public override string Name => nameof(MockSdkResolverWithResolvableSdkPattern2);
 
             public override int Priority => 0;
 
             public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory)
             {
-                resolverContext.Logger.LogMessage("MockSdkResolverWithNamePattern2 running", MessageImportance.Normal);
+                resolverContext.Logger.LogMessage("MockSdkResolverWithResolvableSdkPattern2 running", MessageImportance.Normal);
 
                 if (sdk.Name.StartsWith("2"))
-                    return factory.IndicateSuccess("resolverpathwithnamepattern2", "version4", new[] { "WARNING4" });
+                    return factory.IndicateSuccess("resolverpathwithresolvablesdkpattern2", "version4", new[] { "WARNING4" });
 
                 return factory.IndicateFailure(new[] { "ERROR4" }, new[] { "WARNING4" });
             }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index d6a44e870fa..ca1684eedeb 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -43,7 +43,7 @@ internal virtual IList<SdkResolver> LoadDefaultResolvers(LoggingContext loggingC
             return resolvers.OrderBy(t => t.Priority).ToList();
         }
 
-        internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
+        internal virtual IList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext,
             ElementLocation location)
         {
             var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
@@ -165,7 +165,7 @@ private bool TryAddAssemblyManifestFromXml(string pathToManifest, string manifes
             {
                 // <SdkResolver>
                 //   <Path>...</Path>
-                //   <NamePattern>(Optional field)</NamePattern>
+                //   <ResolvableSdkPattern>(Optional field)</ResolvableSdkPattern>
                 // </SdkResolver>
                 manifest = SdkResolverManifest.Load(pathToManifest);
 
@@ -202,7 +202,7 @@ private bool TryAddAssemblyManifestFromDll(string assemblyPath, List<SdkResolver
         {
             if (string.IsNullOrEmpty(assemblyPath) || !FileUtilities.FileExistsNoThrow(assemblyPath)) return false;
 
-            manifestsList.Add(new SdkResolverManifest(null, assemblyPath, null));
+            manifestsList.Add(new SdkResolverManifest(assemblyPath, assemblyPath, null));
             return true;
         }
 
@@ -223,7 +223,7 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingCont
 #endif
         }
 
-        protected internal virtual IList<SdkResolver> LoadResolvers(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+        protected internal virtual IList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
         {
             var resolvers = new List<SdkResolver>();
             LoadResolvers(manifest.Path, loggingContext, location, resolvers);
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index a5b1e86d2f6..6b877f2d93c 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -1,5 +1,7 @@
 ﻿using Microsoft.Build.Shared;
+using System;
 using System.IO;
+using System.Text.RegularExpressions;
 using System.Xml;
 
 #nullable disable
@@ -15,18 +17,36 @@ public SdkResolverManifest()
         {
         }
 
-        public SdkResolverManifest(string name, string path, string namePattern)
+        public SdkResolverManifest(string name, string path, Regex resolvableSdkPattern)
         {
             Name = name;
             Path = path;
-            NamePattern = namePattern;
+            ResolvableSdkRegex = resolvableSdkPattern;
         }
 
-        internal string Name { get; set; }
+        /// <summary>
+        /// Sdk resolver manifest name.
+        /// </summary>
+        public string Name { get; set; }
 
-        internal string Path { get; set; }
+        /// <summary>
+        /// Path for resolvers dll location.
+        /// </summary>
+        public string Path { get; set; }
 
-        internal string NamePattern { get; set; }
+        /// <summary>
+        /// Regex which matches all the sdk names that could be resolved by the resolvers associated with given manifest.  
+        /// </summary>
+        public Regex ResolvableSdkRegex { get; set; }
+
+        /// <summary>
+        /// The time-out interval for the name pattern regex in milliseconds.
+        /// </summary>
+        /// <remarks>
+        /// This number should notify us when the name matching regex executes unreasonable amount of time (for example, have an infinite recursive regex expression).
+        /// One should avoid to put such a regex into a resolver's xml and we want to catch this situation early. Half a second seems to be a reasonable time in which regex should finish.
+        /// </remarks>
+        private const int SdkResolverPatternRegexTimeoutMsc = 500;
 
         /// <summary>
         /// Deserialize the file into an SdkResolverManifest.
@@ -50,7 +70,7 @@ internal static SdkResolverManifest Load(string filePath)
                 {
                     if (reader.NodeType == XmlNodeType.Element && reader.Name == "SdkResolver")
                     {
-                        return ParseSdkResolverElement(reader);
+                        return ParseSdkResolverElement(reader, filePath);
                     }
                     else
                     {
@@ -62,10 +82,11 @@ internal static SdkResolverManifest Load(string filePath)
             return null;
         }
 
-        // This parsing code is very specific and not forward compatible, but it should be all right.
-        private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader)
+        // This parsing code is very specific and not forward compatible, but since resolvers generally ship in the same release vehicle as MSBuild itself, only backward compatibility is required.
+        private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader, string filePath)
         {
             SdkResolverManifest manifest = new SdkResolverManifest();
+            manifest.Name = filePath;
 
             reader.Read();
             while (!reader.EOF)
@@ -79,8 +100,16 @@ private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader)
                                 case "Path":
                                     manifest.Path = reader.ReadElementContentAsString();
                                     break;
-                                case "NamePattern":
-                                    manifest.NamePattern = reader.ReadElementContentAsString();
+                                case "ResolvableSdkPattern":
+                                    string pattern = reader.ReadElementContentAsString();
+                                    try
+                                    {
+                                        manifest.ResolvableSdkRegex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.CultureInvariant, TimeSpan.FromMilliseconds(SdkResolverPatternRegexTimeoutMsc));
+                                    }
+                                    catch (ArgumentException ex)
+                                    {
+                                        ErrorUtilities.ThrowInternalError("A regular expression parsing error occurred while parsing {0}. Error message: {1}", filePath, ex.Message);
+                                    }
                                     break;
                                 default:
                                     throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name));
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 4b975c4e8dd..9b5083d1598 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -54,14 +54,14 @@ internal class SdkResolverService : ISdkResolverService
         private Dictionary<SdkResolverManifest, IList<SdkResolver>> _resolversDict;
 
         /// <summary>
-        /// Stores the list of manifests of SDK resolvers which could be loaded.
+        /// Stores the list of manifests of specific SDK resolvers which could be loaded.
         /// </summary>
-        private IList<SdkResolverManifest> _resolversManifestsRegistry;
+        private IList<SdkResolverManifest> _specificResolversManifestsRegistry;
 
         /// <summary>
-        /// The time-out interval for the name pattern regex in milliseconds.
+        /// Stores the list of manifests of general SDK resolvers which could be loaded.
         /// </summary>
-        private const int ResolverNamePatternRegexTimeoutMsc = 500;
+        private IList<SdkResolverManifest> _generalResolversManifestsRegistry;
 
         /// <summary>
         /// Stores an <see cref="SdkResolverLoader"/> which can load registered SDK resolvers.
@@ -130,17 +130,29 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
         /// </remarks>
         private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            if (_resolversManifestsRegistry == null)
+            if (_specificResolversManifestsRegistry == null || _generalResolversManifestsRegistry == null)
             {
                 RegisterResolversManifests(loggingContext, sdkReferenceLocation);
             }
 
             // Pick up the matching specific resolvers from the list of resolvers.
-            List<SdkResolverManifest> matchingResolversManifests = _resolversManifestsRegistry
-                .Where(r => !string.IsNullOrEmpty(r.NamePattern) && Regex.IsMatch(sdk.Name, r.NamePattern, RegexOptions.None, TimeSpan.FromMilliseconds(ResolverNamePatternRegexTimeoutMsc)))
-                .ToList();
+            List<SdkResolverManifest> matchingResolversManifests = new();
+            foreach (SdkResolverManifest manifest in _specificResolversManifestsRegistry)
+            {
+                try
+                {
+                    if (manifest.ResolvableSdkRegex.IsMatch(sdk.Name))
+                    {
+                        matchingResolversManifests.Add(manifest);
+                    }
+                }
+                catch (RegexMatchTimeoutException ex)
+                {
+                    ErrorUtilities.ThrowInternalError("Regular expression parsing exceeds timeout for manifest {0}. Error message: {1}", manifest.Name, ex.Message);
+                }
+            }
 
-            List<SdkResolver> resolvers = new List<SdkResolver>();
+            List<SdkResolver> resolvers;
             SdkResult sdkResult;
             if (matchingResolversManifests.Count != 0)
             {
@@ -165,7 +177,7 @@ private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, Sd
 
             // Second pass: fallback to general resolvers. 
             resolvers = GetResolvers(
-                _resolversManifestsRegistry.Where(r => string.IsNullOrEmpty(r.NamePattern)).ToList(),
+                _generalResolversManifestsRegistry,
                 loggingContext,
                 sdkReferenceLocation).ToList();
 
@@ -201,8 +213,10 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
                         if (!_resolversDict.ContainsKey(resolverManifest))
                         {
                             // Loading of the needed resolvers.
-                            IList<SdkResolver> newResolvers = _sdkResolverLoader.LoadResolvers(resolverManifest, loggingContext, sdkReferenceLocation);
+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
+                            IList<SdkResolver> newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);
                             _resolversDict[resolverManifest] = newResolvers;
+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(newResolvers.Count);
                         }
                     }
                 }
@@ -332,7 +346,8 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
                 _sdkResolverLoader = resolverLoader;
             }
 
-            _resolversManifestsRegistry = null;
+            _specificResolversManifestsRegistry = null;
+            _generalResolversManifestsRegistry = null;
             _resolversDict = null;
             _resolversList = null;
 
@@ -340,10 +355,12 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
             {
                 if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                 {
-                    _resolversManifestsRegistry = new List<SdkResolverManifest>();
+                    _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
+                    _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
                     _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
-                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("TestResolvers", null, ".*");
-                    _resolversManifestsRegistry.Add(sdkResolverManifest);
+
+                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("TestResolversManifest", null, null);
+                    _generalResolversManifestsRegistry.Add(sdkResolverManifest);
                     _resolversDict[sdkResolverManifest] = resolvers;
                 }
                 else
@@ -397,7 +414,7 @@ private void Initialize(LoggingContext loggingContext, ElementLocation location)
                 }
 
                 MSBuildEventSource.Log.SdkResolverServiceInitializeStart();
-                _resolversList = _sdkResolverLoader.LoadResolvers(loggingContext, location);
+                _resolversList = _sdkResolverLoader.LoadAllResolvers(loggingContext, location);
                 MSBuildEventSource.Log.SdkResolverServiceInitializeStop(_resolversList.Count);
             }
         }
@@ -406,18 +423,34 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
         {
             lock (_lockObject)
             {
-                if (_resolversManifestsRegistry != null)
+                if (_specificResolversManifestsRegistry != null && _generalResolversManifestsRegistry != null)
                 {
                     return;
                 }
 
-                _resolversManifestsRegistry = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
-                _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
-
+                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
+                var allResolversManifests = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
                 IList<SdkResolver> defaultResolvers = _sdkResolverLoader.LoadDefaultResolvers(loggingContext, location);
-                SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("Default Resolvers", null, null);
-                _resolversManifestsRegistry.Add(sdkResolverManifest);
+                SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("DefaultResolversManifest", null, null);
+                allResolversManifests.Add(sdkResolverManifest);
+
+                _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
                 _resolversDict[sdkResolverManifest] = defaultResolvers;
+
+                _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
+                _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
+                foreach (SdkResolverManifest manifest in allResolversManifests)
+                {
+                    if (manifest.ResolvableSdkRegex == null)
+                    {
+                        _generalResolversManifestsRegistry.Add(manifest);
+                    }
+                    else
+                    {
+                        _specificResolversManifestsRegistry.Add(manifest);
+                    }
+                }
+                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStop(allResolversManifests.Count);
             }
         }
 
@@ -430,7 +463,7 @@ private void SetResolverState(int submissionId, SdkResolver resolver, object sta
                     submissionId,
                     _ => new ConcurrentDictionary<SdkResolver, object>(
                         NativeMethodsShared.GetLogicalCoreCount(),
-                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ? _resolversManifestsRegistry.Count : _resolversList.Count));
+                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ? _specificResolversManifestsRegistry.Count + _generalResolversManifestsRegistry.Count : _resolversList.Count));
 
                 resolverState.AddOrUpdate(resolver, state, (sdkResolver, obj) => state);
             }
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index b4e335f7849..51d3b78e9cf 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -599,6 +599,30 @@ public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submis
             WriteEvent(80, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
+        [Event(81, Keywords = Keywords.All)]
+        public void SdkResolverServiceFindResolversManifestsStart()
+        {
+            WriteEvent(81);
+        }
+
+        [Event(82, Keywords = Keywords.All)]
+        public void SdkResolverServiceFindResolversManifestsStop(int resolverManifestCount)
+        {
+            WriteEvent(82, resolverManifestCount);
+        }
+
+        [Event(83, Keywords = Keywords.All)]
+        public void SdkResolverServiceLoadResolversStart()
+        {
+            WriteEvent(83);
+        }
+
+        [Event(84, Keywords = Keywords.All)]
+        public void SdkResolverServiceLoadResolversStop(int resolverCount)
+        {
+            WriteEvent(84, resolverCount);
+        }
+
         #endregion
     }
 }
