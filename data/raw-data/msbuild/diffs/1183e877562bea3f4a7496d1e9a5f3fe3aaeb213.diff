diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index e91106323fa..0f93e233f57 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -128,7 +128,7 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen
             _callbackMonitor = new Object();
 
             // Ensure that we have at least one core to run this task
-            RequestCores(1);
+            RequireCores(1);
         }
 
         /// <summary>
@@ -685,6 +685,15 @@ public int RequestCores(int requestedCores)
             return coresAcquired;
         }
 
+        private void RequireCores(int requestedCores)
+        {
+            var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
+
+            rms.RequireCores(requestedCores);
+
+            runningTotal += 1; // default reservation
+        }
+
         public void ReleaseCores(int coresToRelease)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 28db29bc319..5a4b6bf5118 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -75,5 +75,21 @@ public void ReleaseCores(int coresToRelease)
 
             s.Release(coresToRelease);
         }
+
+        internal void RequireCores(int requestedCores)
+        {
+            if (s is null)
+            {
+                // TODO: ErrorUtilities should be annotated so this can just be `ErrorUtilities.VerifyThrow`
+                // https://github.com/microsoft/msbuild/issues/5163
+                throw new InternalErrorException($"{nameof(ResourceManagerService)} was called while uninitialized");
+            }
+
+            if (!s.WaitOne())
+            {
+                ErrorUtilities.ThrowInternalError("Couldn't get a core to run a task even with infinite timeout");
+
+            }
+        }
     }
 }
