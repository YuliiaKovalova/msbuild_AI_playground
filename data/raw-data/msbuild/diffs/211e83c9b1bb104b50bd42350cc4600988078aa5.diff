diff --git a/Directory.Build.props b/Directory.Build.props
index 6db67e877f6..c02b9d345f2 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -25,7 +25,10 @@
           src/Framework/README.md
           src/Utilities/README.md
      -->
-    <LatestDotNetCoreForMSBuild>$(NetCurrent)</LatestDotNetCoreForMSBuild>
+     <!-- When building in source-only modes, let the TFM float based on what arcade is in use.
+          When building in normal modes (independent build or a dotnet product build), set explicitly. -->
+    <LatestDotNetCoreForMSBuild>net8.0</LatestDotNetCoreForMSBuild>
+    <LatestDotNetCoreForMSBuild Condition="'$(DotNetBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'">$(NetCurrent)</LatestDotNetCoreForMSBuild>
   </PropertyGroup>
 
   <PropertyGroup>
diff --git a/eng/Packages.props b/eng/Packages.props
index d5ec3c0ba01..6f4d99b91a9 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -31,18 +31,5 @@
     <PackageVersion Include="System.Threading.Channels" Version="$(SystemThreadingChannelsVersion)" />
     <PackageVersion Include="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowVersion)" />
     <PackageVersion Include="xunit.console" Version="$(XUnitVersion)" />
-
-  </ItemGroup>
-
-  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
-    <PackageVersion Update="System.Text.Json" Version="$(SystemTextJsonNetFrameworkVersion)" />
-    <PackageVersion Update="System.Collections.Immutable" Version="$(SystemCollectionsImmutableNetFrameworkVersion)" />
-    <PackageVersion Update="System.Configuration.ConfigurationManager" Version="$(SystemConfigurationConfigurationManagerNetFrameworkVersion)" />
-    <PackageVersion Update="System.Reflection.Metadata" Version="$(SystemReflectionMetadataNetFrameworkVersion)" />
-    <PackageVersion Update="System.Reflection.MetadataLoadContext" Version="$(SystemReflectionMetadataLoadContextNetFrameworkVersion)" />
-    <PackageVersion Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsNetFrameworkVersion)" />
-    <PackageVersion Update="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowNetFrameworkVersion)" />
-    <PackageVersion Update="System.Threading.Channels" Version="$(SystemThreadingChannelsNetFrameworkVersion)" />
   </ItemGroup>
 </Project>
diff --git a/eng/SourceBuild.props b/eng/SourceBuild.props
index 4bd830eaad8..d81214ee71d 100644
--- a/eng/SourceBuild.props
+++ b/eng/SourceBuild.props
@@ -8,12 +8,11 @@
   </PropertyGroup>
 
   <Target Name="ConfigureInnerBuildArgs" BeforeTargets="GetSourceBuildCommandConfiguration">
-    <PropertyGroup>
+    <PropertyGroup Condition="'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'">
       <!-- Filter down projects aggressively in source-only modes. -->
-      <InnerBuildArgs Condition="'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'">$(InnerBuildArgs) /p:Projects="$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf"</InnerBuildArgs>
+      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects="$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf"</InnerBuildArgs>
 
-      <!-- Disable package validation as unified build may upgrade the net core target framework or
-           skip building net framework targets in source-only modes. -->
+      <!-- Disable package validation as source build filters out target frameworks. -->
       <InnerBuildArgs>$(InnerBuildArgs) /p:EnablePackageValidation=false</InnerBuildArgs>
     </PropertyGroup>
   </Target>
diff --git a/eng/Versions.props b/eng/Versions.props
index aaff741294b..9f92111ad29 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -25,29 +25,9 @@
     <MicrosoftVSSDKBuildToolsVersion>16.7.13</MicrosoftVSSDKBuildToolsVersion>
   </PropertyGroup>
   <!-- Production Dependencies -->
-  <!-- There is some delicacy and balance between several scenarios here:
-       - MSBuild may build against older packages and run against newer ones within the .NET SDK (build against .NET 8 binaries, run in NET 9 SDK).
-       - MSBuild may build against newer packages and run against newer ones within the .NET SDK when built as part of the product in Unified Build.
-       - MSBuild must build against specific older packages and run against older assemblies in the GAC in VS scenarios.
-       - MSBuild must build against newer packages when it will redistribute those packages in source-only builds for Linux distributions.
-
-       Unified Build (including source only builds) sets package versions by importing a package props file after
-       Versions.props which overrides versions that are mentioned in the Version.Details.xml file. This will upgrade some dependencies
-       that are redistributed by msbuild from the mentioned version to the live version produced by runtime, for instance.
-
-       This is not desired behavior in .NET Framework scenarios, where the version must match what VS will be shipping.
-       To achieve these many behaviors, we specify two version properties for these select packages:
-       - *Version - Set to default value that the repo will use when building in isolation.
-       - *NetFrameworkVersion, set to the corresponding *Version.
-
-       In UB, the *Version property will be overridden with the live built version, but *NetFrameworkVersion will retain the original value.
-       In Packages.props or in specific references, we then conditionalize based on the target framework or potentially build scenario
-       to achieve the desired result. -->
   <PropertyGroup>
     <SystemCollectionsImmutableVersion>8.0.0</SystemCollectionsImmutableVersion>
-    <SystemCollectionsImmutableNetFrameworkVersion>$(SystemCollectionsImmutableVersion)</SystemCollectionsImmutableNetFrameworkVersion>
     <SystemConfigurationConfigurationManagerVersion>8.0.0</SystemConfigurationConfigurationManagerVersion>
-    <SystemConfigurationConfigurationManagerNetFrameworkVersion>$(SystemConfigurationConfigurationManagerVersion)</SystemConfigurationConfigurationManagerNetFrameworkVersion>
     <!--
         Modifying the version of System.Memory is very high impact and causes downstream breaks in third-party tooling that uses the MSBuild API.
         When updating the version of System.Memory file a breaking change here: https://github.com/dotnet/docs/issues/new?assignees=gewarren&labels=breaking-change%2CPri1%2Cdoc-idea&template=breaking-change.yml&title=%5BBreaking+change%5D%3A+
@@ -56,19 +36,13 @@
     <SystemMemoryVersion>4.5.5</SystemMemoryVersion>
     <SystemNetHttpVersion>4.3.4</SystemNetHttpVersion>
     <SystemReflectionMetadataLoadContextVersion>8.0.0</SystemReflectionMetadataLoadContextVersion>
-    <SystemReflectionMetadataLoadContextNetFrameworkVersion>$(SystemReflectionMetadataLoadContextVersion)</SystemReflectionMetadataLoadContextNetFrameworkVersion>
     <SystemReflectionMetadataVersion>8.0.0</SystemReflectionMetadataVersion>
-    <SystemReflectionMetadataNetFrameworkVersion>$(SystemReflectionMetadataVersion)</SystemReflectionMetadataNetFrameworkVersion>
     <SystemResourcesExtensionsVersion>8.0.0</SystemResourcesExtensionsVersion>
-    <SystemResourcesExtensionsNetFrameworkVersion>$(SystemResourcesExtensionsVersion)</SystemResourcesExtensionsNetFrameworkVersion>
     <SystemSecurityPrincipalWindowsVersion>5.0.0</SystemSecurityPrincipalWindowsVersion>
     <SystemTextEncodingCodePagesVersion>7.0.0</SystemTextEncodingCodePagesVersion>
     <SystemTextJsonVersion>8.0.0</SystemTextJsonVersion>
-    <SystemTextJsonNetFrameworkVersion>$(SystemTextJsonVersion)</SystemTextJsonNetFrameworkVersion>
     <SystemThreadingChannelsVersion>8.0.0</SystemThreadingChannelsVersion>
-    <SystemThreadingChannelsNetFrameworkVersion>$(SystemThreadingChannelsVersion)</SystemThreadingChannelsNetFrameworkVersion>
     <SystemThreadingTasksDataflowVersion>8.0.0</SystemThreadingTasksDataflowVersion>
-    <SystemThreadingTasksDataflowNetFrameworkVersion>$(SystemThreadingTasksDataflowVersion)</SystemThreadingTasksDataflowNetFrameworkVersion>
   </PropertyGroup>
   <!-- Toolset Dependencies -->
   <PropertyGroup>
diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index c5d7723f385..704dfa3bacd 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -121,7 +121,7 @@
   <!-- This target creates a type library for the assemblies in a package. It requires desktop msbuild to locate the tooling
        Type libraries are still needed by Visual Studio in some cases, like the legacy C# project system.
        It calls into msbuild via COM, and needs the type library to do so. -->
-  <Target Name="CreateTypeLib" BeforeTargets="AfterBuild" Inputs="$(TargetPath)" Outputs="$(TargetDir)$(TargetName).tlb;$(TargetDir)x64\$(TargetName).tlb" Condition="'$(BuildingInsideVisualStudio)' != 'true' and '$(CreateTlb)' == 'true' and $([MSBuild]::IsOSPlatform('windows')) and '$(TargetFrameworkIdentifier)' == '.NETFramework'">
+  <Target Name="CreateTypeLib" BeforeTargets="AfterBuild" Inputs="$(TargetPath)" Outputs="$(TargetDir)$(TargetName).tlb;$(TargetDir)x64\$(TargetName).tlb" Condition="'$(BuildingInsideVisualStudio)' != 'true' and '$(CreateTlb)' == 'true' and $([MSBuild]::IsOSPlatform('windows')) and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' != 'Core'">
     <PropertyGroup>
       <TlbExpPath>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToDotNetFrameworkSdkFile('tlbexp.exe'))</TlbExpPath>
       <!-- Provide a mechanism for turning on verbose TlbExp output for diagnosing issues -->
