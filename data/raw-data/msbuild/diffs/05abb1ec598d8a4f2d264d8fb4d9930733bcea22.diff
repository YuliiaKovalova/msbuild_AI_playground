diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 0846296982c..0b84f745cb0 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -253,28 +253,6 @@ protected void ChangeLinkStatus(LinkStatus newStatus)
             CommunicationsUtilities.Trace("Changing link status from {0} to {1}", _status.ToString(), newStatus.ToString());
             _status = newStatus;
             RaiseLinkStatusChanged(_status);
-
-            // We can't call KillTree directly on this process because it would start by killing itself before trying to kill
-            // its children, and the former would preempt the latter. This may leave child processes alive if they are added
-            // after it starts killing them, but that is unavoidable unless this process is killed by another.
-            Process thisProcess = Process.GetCurrentProcess();
-            List<KeyValuePair<int, SafeProcessHandle>> children = GetChildProcessIds(thisProcess.Id, thisProcess.StartTime);
-
-            try
-            {
-                foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
-                {
-                    KillTree(childProcessInfo.Key);
-                }
-            }
-            finally
-            {
-                foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
-                {
-                    childProcessInfo.Value.Dispose();
-                }
-            }
-            thisProcess.Kill();
         }
 
         /// <summary>
@@ -379,6 +357,27 @@ private void PacketPumpProc()
                     {
                         CommunicationsUtilities.Trace("Connection timed out waiting a host to contact us.  Exiting comm thread.");
                         ChangeLinkStatus(LinkStatus.ConnectionFailed);
+                        // We can't call KillTree directly on this process because it would start by killing itself before trying to kill
+                        // its children, and the former would preempt the latter. This may leave child processes alive if they are added
+                        // after it starts killing them, but that is unavoidable unless this process is killed by another.
+                        Process thisProcess = Process.GetCurrentProcess();
+                        List<KeyValuePair<int, SafeProcessHandle>> children = GetChildProcessIds(thisProcess.Id, thisProcess.StartTime);
+
+                        try
+                        {
+                            foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
+                            {
+                                KillTree(childProcessInfo.Key);
+                            }
+                        }
+                        finally
+                        {
+                            foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
+                            {
+                                childProcessInfo.Value.Dispose();
+                            }
+                        }
+                        thisProcess.Kill();
                         return;
                     }
 
