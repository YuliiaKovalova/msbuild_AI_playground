diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index b269e54a881..c2eaad8de59 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -910,6 +910,8 @@ public ResolveAssemblyReference() { }
         public Microsoft.Build.Framework.ITaskItem[] InstalledAssemblySubsetTables { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskItem[] InstalledAssemblyTables { get { throw null; } set { } }
         public string[] LatestTargetFrameworkDirectories { get { throw null; } set { } }
+        public string[] PreComputedCacheFileList { get { throw null; } set { } }
+        public string PreComputedCacheOutputPath { get { throw null; } set { } }
         public string ProfileName { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] RelatedFiles { get { throw null; } }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 1babf5ee2d4..60821f9b1db 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -568,6 +568,8 @@ public ResolveAssemblyReference() { }
         public Microsoft.Build.Framework.ITaskItem[] InstalledAssemblySubsetTables { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskItem[] InstalledAssemblyTables { get { throw null; } set { } }
         public string[] LatestTargetFrameworkDirectories { get { throw null; } set { } }
+        public string[] PreComputedCacheFileList { get { throw null; } set { } }
+        public string PreComputedCacheOutputPath { get { throw null; } set { } }
         public string ProfileName { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] RelatedFiles { get { throw null; } }
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index c52420b8e19..b877214bef2 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -441,6 +441,10 @@ public string TargetedRuntimeVersion
             set { _targetedRuntimeVersionRawValue = value; }
         }
 
+        public string PreComputedCacheOutputPath { get; set; }
+
+        public string[] PreComputedCacheFileList { get; set; }
+
         /// <summary>
         /// List of locations to search for assemblyFiles when resolving dependencies.
         /// The following types of things can be passed in here:
@@ -1845,15 +1849,24 @@ private void LogConflict(Reference reference, string fusionName)
         /// <summary>
         /// Reads the state file (if present) into the cache.
         /// </summary>
-        private void ReadStateFile()
+        private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
         {
             _cache = (SystemState)StateFileBase.DeserializeCache(_stateFile, Log, typeof(SystemState));
 
+            if (_cache == null)
+            {
+                _cache = SystemState.DeserializePrecomputedCaches(PreComputedCacheFileList, Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
+                return;
+            }
+
             // Construct the cache if necessary.
             if (_cache == null)
             {
                 _cache = new SystemState();
             }
+
+            _cache.SetGetLastWriteTime(getLastWriteTime);
+            _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
         }
 
         /// <summary>
@@ -1861,7 +1874,11 @@ private void ReadStateFile()
         /// </summary>
         private void WriteStateFile()
         {
-            if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
+            if (!string.IsNullOrEmpty(PreComputedCacheOutputPath))
+            {
+                _cache.SerializePrecomputedCache(PreComputedCacheOutputPath, Log);
+            }
+            else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
                 _cache.SerializeCache(_stateFile, Log);
             }
@@ -2072,9 +2089,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                     }
 
                     // Load any prior saved state.
-                    ReadStateFile();
-                    _cache.SetGetLastWriteTime(getLastWriteTime);
-                    _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
+                    ReadStateFile(getLastWriteTime, installedAssemblyTableInfo);
 
                     // Cache delegates.
                     getAssemblyName = _cache.CacheDelegate(getAssemblyName);
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 10fe9859407..c5f0d90353f 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -8,11 +8,13 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
+using System.Reflection;
 using System.Runtime.Serialization;
 using System.Runtime.Versioning;
 using System.Security.Permissions;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyDependency;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Tasks
 {
@@ -115,7 +117,7 @@ private sealed class FileState : ISerializable
             /// <summary>
             /// The last modified time for this file.
             /// </summary>
-            private DateTime lastModified;
+            internal DateTime lastModified;
 
             /// <summary>
             /// The fusion name of this file.
@@ -201,6 +203,7 @@ public void GetObjectData(SerializationInfo info, StreamingContext context)
             internal DateTime LastModified
             {
                 get { return lastModified; }
+                set { lastModified = value; }
             }
 
             /// <summary>
@@ -232,6 +235,8 @@ internal FrameworkName FrameworkNameAttribute
                 get { return frameworkName; }
                 set { frameworkName = value; }
             }
+
+            internal Guid ModuleVersionID { get; set; }
         }
 
         /// <summary>
@@ -547,13 +552,58 @@ out fileState.frameworkName
             frameworkName = fileState.frameworkName;
         }
 
-        /// <summary>
-        /// Cached implementation of GetDirectories.
-        /// </summary>
-        /// <param name="path"></param>
-        /// <param name="pattern"></param>
-        /// <returns></returns>
-        private string[] GetDirectories(string path, string pattern)
+        internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
+        {
+            SystemState retVal = new SystemState();
+            retVal.SetGetLastWriteTime(getLastWriteTime);
+            retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
+            retVal.isDirty = true;
+
+            foreach (string stateFile in stateFiles)
+            {
+                // Verify that it's a real stateFile; log message but do not error if not
+                SystemState sfBase = (SystemState)DeserializeCache(stateFile, log, requiredReturnType);
+                foreach (string s in sfBase.instanceLocalFileStateCache.Keys)
+                {
+                    if (!retVal.instanceLocalFileStateCache.ContainsKey(s))
+                    {
+                        FileState fileState = (FileState)sfBase.instanceLocalFileStateCache[s];
+                        // Verify that the assembly is correct
+                        if (File.Exists(s) && Assembly.LoadFile(s).ManifestModule.ModuleVersionId.Equals(fileState.ModuleVersionID))
+                        {
+                            // Correct file path and timestamp
+                            string fullPath = Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory(), stateFile));
+                            fileState.LastModified = retVal.getLastWriteTime(fullPath);
+                            retVal.instanceLocalFileStateCache[fullPath] = fileState;
+                        }
+                    }
+                }
+            }
+
+            return retVal;
+        }
+
+        internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
+        {
+            foreach (string path in instanceLocalFileStateCache.Keys)
+            {
+                FileState fileState = (FileState)instanceLocalFileStateCache[path];
+                fileState.ModuleVersionID = Assembly.LoadFrom(path).ManifestModule.ModuleVersionId;
+                instanceLocalFileStateCache.Remove(path);
+                string relativePath = new Uri(Path.GetDirectoryName(stateFile)).MakeRelativeUri(new Uri(path)).ToString();
+                instanceLocalFileStateCache[relativePath] = fileState;
+            }
+
+            SerializeCache(stateFile, log);
+        }
+
+            /// <summary>
+            /// Cached implementation of GetDirectories.
+            /// </summary>
+            /// <param name="path"></param>
+            /// <param name="pattern"></param>
+            /// <returns></returns>
+            private string[] GetDirectories(string path, string pattern)
         {
             // Only cache the *. pattern. This is by far the most common pattern
             // and generalized caching would require a call to Path.Combine which
