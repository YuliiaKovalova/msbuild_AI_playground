diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 22107d15fcc..9c5d4fc2159 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1201,7 +1201,7 @@ private void AddToolsetProperties()
                 // set the property even if there is no matching sub-toolset.  
                 if (!_data.Properties.Contains(Constants.SubToolsetVersionPropertyName))
                 {
-                     _data.SetProperty(Constants.SubToolsetVersionPropertyName, _data.SubToolsetVersion, false /* NOT global property */, false /* may NOT be a reserved name */);
+                    _data.SetProperty(Constants.SubToolsetVersionPropertyName, _data.SubToolsetVersion, false /* NOT global property */, false /* may NOT be a reserved name */);
                 }
 
                 if (_data.Toolset.SubToolsets.TryGetValue(_data.SubToolsetVersion, out SubToolset subToolset))
@@ -1315,6 +1315,13 @@ private void LogPropertyReassignment(P predecessor, P property, string location)
             string newValue = property.EvaluatedValue;
             string oldValue = predecessor?.EvaluatedValue;
 
+            if (string.Equals(property.Name, "MSBuildAllProjects", StringComparison.OrdinalIgnoreCase))
+            {
+                // There's a huge perf cost to logging this and it increases the binlog size significantly.
+                // Meanwhile the usefulness of logging this is very low.
+                return;
+            }
+
             if (newValue != oldValue)
             {
                 _evaluationLoggingContext.LogComment(
@@ -1659,6 +1666,15 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin
             return allProjects;
         }
 
+        private static readonly string CouldNotResolveSdk = ResourceUtilities.GetResourceString("CouldNotResolveSdk");
+        private static readonly string ProjectImported = ResourceUtilities.GetResourceString("ProjectImported");
+        private static readonly string ProjectImportSkippedEmptyFile = ResourceUtilities.GetResourceString("ProjectImportSkippedEmptyFile");
+        private static readonly string ProjectImportSkippedExpressionEvaluatedToEmpty = ResourceUtilities.GetResourceString("ProjectImportSkippedExpressionEvaluatedToEmpty");
+        private static readonly string ProjectImportSkippedFalseCondition = ResourceUtilities.GetResourceString("ProjectImportSkippedFalseCondition");
+        private static readonly string ProjectImportSkippedInvalidFile = ResourceUtilities.GetResourceString("ProjectImportSkippedInvalidFile");
+        private static readonly string ProjectImportSkippedMissingFile = ResourceUtilities.GetResourceString("ProjectImportSkippedMissingFile");
+        private static readonly string ProjectImportSkippedNoMatches = ResourceUtilities.GetResourceString("ProjectImportSkippedNoMatches");
+
         /// <summary>
         /// Load and parse the specified project import, which may have wildcards,
         /// into one or more ProjectRootElements, if it's Condition evaluates to true
@@ -1685,7 +1701,7 @@ private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
                     ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                         importElement.Location.Line,
                         importElement.Location.Column,
-                        ResourceUtilities.GetResourceString("ProjectImportSkippedFalseCondition"),
+                        ProjectImportSkippedFalseCondition,
                         importElement.Project,
                         importElement.ContainingProject.FullPath,
                         importElement.Location.Line,
@@ -1778,7 +1794,7 @@ static string EvaluateProperty(string value, IElementLocation location,
                         ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                             importElement.Location.Line,
                             importElement.Location.Column,
-                            ResourceUtilities.GetResourceString("CouldNotResolveSdk"),
+                            CouldNotResolveSdk,
                             sdkReference.ToString())
                         {
                             BuildEventContext = _evaluationLoggingContext.BuildEventContext,
@@ -1948,7 +1964,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                     ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                         importElement.Location.Line,
                         importElement.Location.Column,
-                        ResourceUtilities.GetResourceString("ProjectImportSkippedExpressionEvaluatedToEmpty"),
+                        ProjectImportSkippedExpressionEvaluatedToEmpty,
                         unescapedExpression,
                         importElement.ContainingProject.FullPath,
                         importElement.Location.Line,
@@ -1971,7 +1987,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
 
             bool atleastOneImportIgnored = false;
             bool atleastOneImportEmpty = false;
-            
+
             foreach (string importExpressionEscapedItem in ExpressionShredder.SplitSemiColonSeparatedList(importExpressionEscaped))
             {
                 string[] importFilesEscaped = null;
@@ -2003,7 +2019,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                         ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                             importElement.Location.Line,
                             importElement.Location.Column,
-                            ResourceUtilities.GetResourceString("ProjectImportSkippedNoMatches"),
+                            ProjectImportSkippedNoMatches,
                             importExpressionEscapedItem,
                             importElement.ContainingProject.FullPath,
                             importElement.Location.Line,
@@ -2151,7 +2167,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                                 ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                                     importElement.Location.Line,
                                     importElement.Location.Column,
-                                    ResourceUtilities.GetResourceString("ProjectImported"),
+                                    ProjectImported,
                                     importedProjectElement.FullPath,
                                     importElement.ContainingProject.FullPath,
                                     importElement.Location.Line,
@@ -2185,7 +2201,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                                     ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                                         importElement.Location.Line,
                                         importElement.Location.Column,
-                                        ResourceUtilities.GetResourceString("ProjectImportSkippedMissingFile"),
+                                        ProjectImportSkippedMissingFile,
                                         importFileUnescaped,
                                         importElement.ContainingProject.FullPath,
                                         importElement.Location.Line,
@@ -2217,14 +2233,14 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                                 // If IgnoreEmptyImports is enabled, check if the file is considered empty
                                 //
                                 ignoreImport = true;
-                                ignoreImportResource = "ProjectImportSkippedEmptyFile";
+                                ignoreImportResource = ProjectImportSkippedEmptyFile;
                             }
                             else if ((_loadSettings & ProjectLoadSettings.IgnoreInvalidImports) != 0)
                             {
                                 // If IgnoreInvalidImports is enabled, log all other non-handled exceptions and continue
                                 //
                                 ignoreImport = true;
-                                ignoreImportResource = "ProjectImportSkippedInvalidFile";
+                                ignoreImportResource = ProjectImportSkippedInvalidFile;
                             }
 
                             if (ignoreImport)
@@ -2235,7 +2251,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                                 ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                                     importElement.Location.Line,
                                     importElement.Location.Column,
-                                    ResourceUtilities.GetResourceString(ignoreImportResource),
+                                    ignoreImportResource,
                                     importFileUnescaped,
                                     importElement.ContainingProject.FullPath,
                                     importElement.Location.Line,
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 0630cd6407b..6e3dc3a3ec7 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -259,18 +259,31 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source)
         /// <param name="location">The location of this property's reassignment.</param>
         private void TrackPropertyReassignment(P predecessor, P property, string location)
         {
-            if ((_settings & PropertyTrackingSetting.PropertyReassignment) != PropertyTrackingSetting.PropertyReassignment) return;
+            if ((_settings & PropertyTrackingSetting.PropertyReassignment) != PropertyTrackingSetting.PropertyReassignment)
+            {
+                return;
+            }
+
+            if (string.Equals(property.Name, "MSBuildAllProjects", StringComparison.OrdinalIgnoreCase))
+            {
+                // There's a huge perf cost to logging this and it increases the binlog size significantly.
+                // Meanwhile the usefulness of logging this is very low.
+                return;
+            }
 
             string newValue = property.EvaluatedValue;
             string oldValue = predecessor.EvaluatedValue;
-            if (newValue == oldValue) return;
+            if (newValue == oldValue)
+            {
+                return;
+            }
 
             var args = new PropertyReassignmentEventArgs(
                 property.Name,
                 oldValue,
                 newValue,
                 location,
-                ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("PropertyReassignment", property.Name, newValue, oldValue, location));
+                message: null);
             args.BuildEventContext = _evaluationLoggingContext.BuildEventContext;
 
             _evaluationLoggingContext.LogBuildEvent(args);
