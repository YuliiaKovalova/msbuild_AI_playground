diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index ed3cd311b76..7a1f6cc9c4f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -820,7 +820,8 @@ private async Task BuildAndReport()
 
                 thrownException = ex;
             }
-            catch (UnbuildableProjectType ex)
+            // This is a workaround for https://github.com/dotnet/msbuild/issues/2064. It catches the exception case and turns it into a more understandable warning.
+            catch (UnbuildableProjectTypeException ex)
             {
                 thrownException = ex;
                 if (_projectLoggingContext is null)
diff --git a/src/Build/Xml/ProjectXmlUtilities.cs b/src/Build/Xml/ProjectXmlUtilities.cs
index c44de46d155..d62259a103f 100644
--- a/src/Build/Xml/ProjectXmlUtilities.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.cs
@@ -12,9 +12,12 @@
 
 namespace Microsoft.Build.Internal
 {
-    internal sealed class UnbuildableProjectType : Exception
+    /// <summary>
+    /// Exception indicating that we tried to build a type of project MSBuild did not recognize.
+    /// </summary>
+    internal sealed class UnbuildableProjectTypeException : Exception
     {
-        internal UnbuildableProjectType(string file)
+        internal UnbuildableProjectTypeException(string file)
             : base(file)
         {
         }
@@ -96,7 +99,7 @@ internal static bool VerifyValidProjectNamespace(XmlElementWithLocation element)
                         if (child.Name.Equals("Database", StringComparison.OrdinalIgnoreCase))
                         {
                             validMSBuildProject = false;
-                            throw new UnbuildableProjectType(element.Location.File);
+                            throw new UnbuildableProjectTypeException(element.Location.File);
                         }
                     }
 
