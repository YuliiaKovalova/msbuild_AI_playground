diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index f43d6e7718c..480753bff33 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -3433,7 +3433,8 @@ public void WarningsAreTreatedAsErrorsButTargetsStillSucceed()
         }
 
         /// <summary>
-        /// Helper for cache tests.  Builds a project and verifies the right cache files are created.
+        /// Helper for memory reduction caching tests (msbuild caches configs and build results when memory usage gets high).
+        /// Builds a project and verifies the right cache files are created.
         /// </summary>
         private static string BuildAndCheckCache(BuildManager localBuildManager, IEnumerable<string> exceptCacheDirectories)
         {
@@ -3459,9 +3460,15 @@ private static string BuildAndCheckCache(BuildManager localBuildManager, IEnumer
             try
             {
                 var services = new HostServices();
-                BuildRequestData data = new BuildRequestData(fileName, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new[] { "One", "Two", "Three" }, services);
+                var data = new BuildRequestData(
+                    projectFullPath: fileName,
+                    globalProperties: new Dictionary<string, string>(),
+                    toolsVersion: MSBuildDefaultToolsVersion,
+                    targetsToBuild: new[] {"One", "Two", "Three"},
+                    hostServices: services);
                 var result = localBuildManager.PendBuildRequest(data).Execute();
-                Assert.Equal(BuildResultCode.Success, result.OverallResult); // "Test project failed to build correctly."
+
+                result.OverallResult.ShouldBe(BuildResultCode.Success);
             }
             finally
             {
@@ -3473,12 +3480,9 @@ private static string BuildAndCheckCache(BuildManager localBuildManager, IEnumer
             string directory = Directory.EnumerateDirectories(cacheDirectory).Except(exceptCacheDirectories).First();
 
             // Within this directory should be a set of target results files, one for each of the targets we invoked.
-            var resultsFiles = Directory.EnumerateFiles(directory).Select(Path.GetFileName);
+            var resultsFiles = Directory.EnumerateFiles(directory).Select(Path.GetFileName).ToArray();
 
-            Assert.Equal(3, resultsFiles.Count());
-            Assert.Contains("One.cache", resultsFiles);
-            Assert.Contains("Two.cache", resultsFiles);
-            Assert.Contains("Three.cache", resultsFiles);
+            resultsFiles.ShouldBeSameIgnoringOrder(new []{"One.cache", "Two.cache", "Three.cache"});
 
             // Return the cache directory created for this build.
             return directory;
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 5a4311dc18d..f7e96e0d262 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -785,7 +785,7 @@ private void EvaluateRequestStates()
                     // own cache.
                     completedEntry.Result.DefaultTargets = configuration.ProjectDefaultTargets;
                     completedEntry.Result.InitialTargets = configuration.ProjectInitialTargets;
-                    completedEntry.Result.Targets = configuration.Project.Targets.Keys.ToHashSet();
+                    completedEntry.Result.Targets = configuration.ProjectTargets;
                 }
 
                 TraceEngine("ERS: Request is now {0}({1}) (nr {2}) has had its builder cleaned up.", completedEntry.Request.GlobalRequestId, completedEntry.Request.ConfigurationId, completedEntry.Request.NodeRequestId);
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index a22c5e63346..9f5607a5443 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -194,10 +194,15 @@ internal static TargetResult FactoryForDeserialization(ITranslator translator)
         /// <summary>
         /// Gets the name of the cache file for this configuration.
         /// </summary>
-        internal static string GetCacheFile(int configId, string targetToCache)
+        private static string GetCacheFile(int configId, string targetToCache)
         {
-            string filename = Path.Combine(FileUtilities.GetCacheDirectory(), String.Format(CultureInfo.InvariantCulture, Path.Combine("Results{0}", "{1}.cache"), configId, targetToCache));
-            return filename;
+            return Path.Combine(
+                FileUtilities.GetCacheDirectory(),
+                string.Format(
+                    CultureInfo.InvariantCulture,
+                    Path.Combine("Results{0}", "{1}.cache"),
+                    configId,
+                    targetToCache));
         }
 
         /// <summary>
