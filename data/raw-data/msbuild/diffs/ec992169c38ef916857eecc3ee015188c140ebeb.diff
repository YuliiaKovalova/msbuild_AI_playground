diff --git a/.editorconfig b/.editorconfig
index 2927cad5369..7925f1576d5 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -1,4 +1,4 @@
-﻿# editorconfig.org
+﻿﻿# editorconfig.org
 
 # top-most EditorConfig file
 root = true
@@ -298,6 +298,12 @@ dotnet_diagnostic.IDE0048.severity = suggestion
 # Member name can be simplified
 dotnet_diagnostic.IDE0049.severity = suggestion
 
+# Remove unused private member
+dotnet_diagnostic.IDE0051.severity = suggestion
+
+# Remove unread private member
+dotnet_diagnostic.IDE0052.severity = suggestion
+
 # Use compound assignment
 dotnet_diagnostic.IDE0054.severity = suggestion
 
@@ -428,6 +434,9 @@ dotnet_diagnostic.IDE0073.severity = error
 # Use 'System.Threading.Lock'
 dotnet_diagnostic.IDE0330.severity = suggestion
 
+# Use implicitly typed lambda
+dotnet_diagnostic.IDE0350.severity = suggestion
+
 # Value types are incompatible with null values. https://xunit.net/xunit.analyzers/rules/xUnit1012
 dotnet_diagnostic.xUnit1012.severity = warning
 
@@ -447,4 +456,4 @@ dotnet_diagnostic.xUnit1031.severity = none
 # However to fix the warning for collections with 1 elements we should use Assert.Single() instead of Assert.Equal(1, collection.Count)
 # The latter brings incosistency in the codebase and some times in one test case.
 # So we are disabling this rule with respect to the above mentioned reasons.
-dotnet_diagnostic.xUnit2013.severity = none
+dotnet_diagnostic.xUnit2013.severity = none
\ No newline at end of file
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 465caedb85a..45d2d0ca347 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -616,6 +616,7 @@ internal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int
                 }
                 totalBytesRead += bytesRead;
             }
+
             return totalBytesRead;
         }
 #endif
diff --git a/src/Shared/NodePipeBase.cs b/src/Shared/NodePipeBase.cs
index 2ee91e536c1..e3a2119267d 100644
--- a/src/Shared/NodePipeBase.cs
+++ b/src/Shared/NodePipeBase.cs
@@ -7,6 +7,7 @@
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
+using System.Collections.Generic;
 
 #if !TASKHOST
 using System.Buffers.Binary;
@@ -81,7 +82,7 @@ protected NodePipeBase(string pipeName, Handshake handshake)
 
         protected string PipeName { get; }
 
-        protected int[] HandshakeComponents { get; }
+        protected KeyValuePair<string, int>[] HandshakeComponents { get; }
 
         public void Dispose()
         {
diff --git a/src/Shared/NodePipeClient.cs b/src/Shared/NodePipeClient.cs
index a521f4f34d2..9474327236d 100644
--- a/src/Shared/NodePipeClient.cs
+++ b/src/Shared/NodePipeClient.cs
@@ -77,7 +77,7 @@ private void PerformHandshake(int timeout)
             for (int i = 0; i < HandshakeComponents.Length; i++)
             {
                 CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", i, HandshakeComponents[i], PipeName);
-                _pipeClient.WriteIntForHandshake(HandshakeComponents[i]);
+                _pipeClient.WriteIntForHandshake(HandshakeComponents[i].Value);
             }
 
             // This indicates that we have finished all the parts of our handshake; hopefully the endpoint has as well.
diff --git a/src/Shared/NodePipeServer.cs b/src/Shared/NodePipeServer.cs
index 0b9855f2a1c..2a94225ef11 100644
--- a/src/Shared/NodePipeServer.cs
+++ b/src/Shared/NodePipeServer.cs
@@ -194,7 +194,7 @@ private bool ValidateHandshake()
                 int handshakePart = _pipeServer.ReadIntForHandshake(byteToAccept: i == 0 ? CommunicationsUtilities.handshakeVersion : null);
 #endif
 
-                if (handshakePart != HandshakeComponents[i])
+                if (handshakePart != HandshakeComponents[i].Value)
                 {
                     CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, HandshakeComponents[i]);
                     _pipeServer.WriteIntForHandshake(i + 1);
@@ -236,4 +236,4 @@ private bool ValidateClientIdentity()
 #endif
 
     }
-}
+}
\ No newline at end of file
