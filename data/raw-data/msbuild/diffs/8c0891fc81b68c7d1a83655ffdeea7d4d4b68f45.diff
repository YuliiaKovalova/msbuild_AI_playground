diff --git a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
index 380d2b73bb6..7ab25d80471 100644
--- a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
+++ b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
@@ -28,7 +29,9 @@ public bool Equals(TaskRegistry x, TaskRegistry y)
                     {
                         Assert.Equal(xp.Key, yp.Key, TaskRegistry.RegisteredTaskIdentity.RegisteredTaskIdentityComparer.Exact);
                         Assert.Equal(xp.Value, yp.Value, new RegisteredTaskRecordComparer());
-                    });
+                    },
+                    TaskRegistry.RegisteredTaskIdentity.RegisteredTaskIdentityComparer.Exact,
+                    true);
 
                 return true;
             }
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 659aea6dab9..e444cab0972 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1259,7 +1259,12 @@ internal static void AssertCollectionsValueEqual<T>(ICollection<T> one, ICollect
             }
         }
 
-        internal static void AssertDictionariesEqual<K, V>(IDictionary<K, V> x, IDictionary<K, V> y, Action<KeyValuePair<K, V>, KeyValuePair<K, V>> assertPairsEqual)
+        internal static void AssertDictionariesEqual<K, V>(
+            IDictionary<K, V> x,
+            IDictionary<K, V> y,
+            Action<KeyValuePair<K, V>, KeyValuePair<K, V>> assertPairsEqual,
+            IEqualityComparer<K>? keysComparer = null,
+            bool ignoreOrder = false)
         {
             if (x == null || y == null)
             {
@@ -1269,12 +1274,32 @@ internal static void AssertDictionariesEqual<K, V>(IDictionary<K, V> x, IDiction
 
             Assert.Equal(x.Count, y.Count);
 
-            for (var i = 0; i < x.Count; i++)
+            if (ignoreOrder)
             {
-                var xPair = x.ElementAt(i);
-                var yPair = y.ElementAt(i);
+                if (keysComparer == null)
+                {
+                    throw new ArgumentNullException(nameof(keysComparer), "keyComparer must be specified when order agnostic dictionaries comparison is requested");
+                }
+                foreach (var xPair in x)
+                {
+                    var yValue = y[xPair.Key];
+                    var yKey = y.Keys.FirstOrDefault(v => keysComparer.Equals(v,xPair.Key));
+                    if (yKey == null)
+                    {
+                        throw new KeyNotFoundException($"Key {xPair.Key} not found in dictionary");
+                    }
+                    assertPairsEqual(xPair, new KeyValuePair<K, V>(yKey, yValue));
+                }
+            }
+            else
+            {
+                for (var i = 0; i < x.Count; i++)
+                {
+                    var xPair = x.ElementAt(i);
+                    var yPair = y.ElementAt(i);
 
-                assertPairsEqual(xPair, yPair);
+                    assertPairsEqual(xPair, yPair);
+                }
             }
         }
 
