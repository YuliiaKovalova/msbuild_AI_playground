diff --git a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
index bf368e49133..f971a7fbeb2 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
@@ -17,63 +17,219 @@ namespace Microsoft.Build.UnitTests.BackEnd
     /// </summary>
     public class TaskBuilderTestTask : IGeneratedTask
     {
+        /// <summary>
+        /// A custom <see cref="IConvertible"/> value type.
+        /// </summary>
+        /// <remarks>
+        /// Types like this one can be used only as Output parameter types because they can be converted to string
+        /// but not from string.
+        /// </remarks>
+        [Serializable]
+        public struct CustomStruct : IConvertible
+        {
+            private readonly IConvertible _value;
+
+            public CustomStruct(IConvertible value)
+            {
+                _value = value;
+            }
+
+            public TypeCode GetTypeCode() => _value.GetTypeCode();
+            public bool ToBoolean(IFormatProvider provider) => _value.ToBoolean(provider);
+            public byte ToByte(IFormatProvider provider) => _value.ToByte(provider);
+            public char ToChar(IFormatProvider provider) => _value.ToChar(provider);
+            public DateTime ToDateTime(IFormatProvider provider) => _value.ToDateTime(provider);
+            public decimal ToDecimal(IFormatProvider provider) => _value.ToDecimal(provider);
+            public double ToDouble(IFormatProvider provider) => _value.ToDouble(provider);
+            public short ToInt16(IFormatProvider provider) => _value.ToInt16(provider);
+            public int ToInt32(IFormatProvider provider) => _value.ToInt32(provider);
+            public long ToInt64(IFormatProvider provider) => _value.ToInt64(provider);
+            public sbyte ToSByte(IFormatProvider provider) => _value.ToSByte(provider);
+            public float ToSingle(IFormatProvider provider) => _value.ToSingle(provider);
+            public string ToString(IFormatProvider provider) => _value.ToString(provider);
+            public object ToType(Type conversionType, IFormatProvider provider) => _value.ToType(conversionType, provider);
+            public ushort ToUInt16(IFormatProvider provider) => _value.ToUInt16(provider);
+            public uint ToUInt32(IFormatProvider provider) => _value.ToUInt32(provider);
+            public ulong ToUInt64(IFormatProvider provider) => _value.ToUInt64(provider);
+        }
+
+        /// <summary>
+        /// The <see cref="CustomStruct"/> value returned from <see cref="CustomStructOutput"/>.
+        /// </summary>
+        internal static readonly CustomStruct s_customStruct = new CustomStruct(42);
+
+        /// <summary>
+        /// The <see cref="CustomStruct[]"/> value returned from <see cref="CustomStructArrayOutput"/>.
+        /// </summary>
+        internal static readonly CustomStruct[] s_customStructArray = new CustomStruct[] { new CustomStruct(43), new CustomStruct(44) };
+
         /// <summary>
         /// The task host.
         /// </summary>
         private ITestTaskHost _testTaskHost;
 
         /// <summary>
-        /// The value to return from Execute
+        /// The value to return from Execute.
         /// </summary>
         private bool _executeReturnValue;
 
         /// <summary>
-        /// The value for the BoolOutput
+        /// The value for the BoolOutput.
         /// </summary>
         private bool _boolOutput;
 
         /// <summary>
-        /// The value for the BoolArrayOutput
+        /// The value for the BoolArrayOutput.
         /// </summary>
         private bool[] _boolArrayOutput;
 
         /// <summary>
-        /// The value for the IntOutput
+        /// The value for the ByteOutput.
+        /// </summary>
+        private byte _byteOutput;
+
+        /// <summary>
+        /// The value for the ByteArrayOutput.
+        /// </summary>
+        private byte[] _byteArrayOutput;
+
+        /// <summary>
+        /// The value for the SByteOutput.
+        /// </summary>
+        private sbyte _sbyteOutput;
+
+        /// <summary>
+        /// The value for the SByteArrayOutput.
+        /// </summary>
+        private sbyte[] _sbyteArrayOutput;
+
+        /// <summary>
+        /// The value for the DoubleOutput.
+        /// </summary>
+        private double _doubleOutput;
+
+        /// <summary>
+        /// The value for the DoubleArrayOutput.
+        /// </summary>
+        private double[] _doubleArrayOutput;
+
+        /// <summary>
+        /// The value for the FloatOutput.
+        /// </summary>
+        private float _floatOutput;
+
+        /// <summary>
+        /// The value for the FloatArrayOutput.
+        /// </summary>
+        private float[] _floatArrayOutput;
+
+        /// <summary>
+        /// The value for the ShortOutput.
+        /// </summary>
+        private short _shortOutput;
+
+        /// <summary>
+        /// The value for the ShortArrayOutput.
+        /// </summary>
+        private short[] _shortArrayOutput;
+
+        /// <summary>
+        /// The value for the UShortOutput.
+        /// </summary>
+        private ushort _ushortOutput;
+
+        /// <summary>
+        /// The value for the UShortArrayOutput.
+        /// </summary>
+        private ushort[] _ushortArrayOutput;
+
+        /// <summary>
+        /// The value for the IntOutput.
         /// </summary>
         private int _intOutput;
 
         /// <summary>
-        /// The value for the IntArrayOutput
+        /// The value for the IntArrayOutput.
         /// </summary>
         private int[] _intArrayOutput;
 
         /// <summary>
-        /// The value for the StringOutput
+        /// The value for the UIntOutput.
+        /// </summary>
+        private uint _uintOutput;
+
+        /// <summary>
+        /// The value for the UIntArrayOutput.
+        /// </summary>
+        private uint[] _uintArrayOutput;
+
+        /// <summary>
+        /// The value for the LongOutput.
+        /// </summary>
+        private long _longOutput;
+
+        /// <summary>
+        /// The value for the LongArrayOutput.
+        /// </summary>
+        private long[] _longArrayOutput;
+
+        /// <summary>
+        /// The value for the ULongOutput.
+        /// </summary>
+        private ulong _ulongOutput;
+
+        /// <summary>
+        /// The value for the ULongArrayOutput.
+        /// </summary>
+        private ulong[] _ulongArrayOutput;
+
+        /// <summary>
+        /// The value for the DecimalOutput.
+        /// </summary>
+        private decimal _decimalOutput;
+
+        /// <summary>
+        /// The value for the DecimalArrayOutput.
+        /// </summary>
+        private decimal[] _decimalArrayOutput;
+
+        /// <summary>
+        /// The value for the CharOutput.
+        /// </summary>
+        private char _charOutput;
+
+        /// <summary>
+        /// The value for the CharArrayOutput.
+        /// </summary>
+        private char[] _charArrayOutput;
+
+        /// <summary>
+        /// The value for the StringOutput.
         /// </summary>
         private string _stringOutput;
 
         /// <summary>
-        /// The value for the StringArrayOutput
+        /// The value for the StringArrayOutput.
         /// </summary>
         private string[] _stringArrayOutput;
 
         /// <summary>
-        /// The value for the DateTimeOutput
+        /// The value for the DateTimeOutput.
         /// </summary>
         private DateTime _dateTimeOutput;
 
         /// <summary>
-        /// The value for the DateTimeArrayOutput
+        /// The value for the DateTimeArrayOutput.
         /// </summary>
         private DateTime[] _dateTimeArrayOutput;
 
         /// <summary>
-        /// The value for the ItemOutput
+        /// The value for the ItemOutput.
         /// </summary>
         private ITaskItem _itemOutput;
 
         /// <summary>
-        /// The value for the ItemArrayOutput
+        /// The value for the ItemArrayOutput.
         /// </summary>
         private ITaskItem[] _itemArrayOutput;
 
@@ -87,7 +243,7 @@ public bool ThrowOnExecute
         }
 
         /// <summary>
-        /// A boolean parameter
+        /// A boolean parameter.
         /// </summary>
         public bool BoolParam
         {
@@ -99,7 +255,7 @@ public bool BoolParam
         }
 
         /// <summary>
-        /// A boolean array parameter
+        /// A boolean array parameter.
         /// </summary>
         public bool[] BoolArrayParam
         {
@@ -111,7 +267,151 @@ public bool[] BoolArrayParam
         }
 
         /// <summary>
-        /// An integer parameter
+        /// A byte parameter.
+        /// </summary>
+        public byte ByteParam
+        {
+            set
+            {
+                _byteOutput = value;
+                _testTaskHost?.ParameterSet("ByteParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A byte array parameter.
+        /// </summary>
+        public byte[] ByteArrayParam
+        {
+            set
+            {
+                _byteArrayOutput = value;
+                _testTaskHost?.ParameterSet("ByteArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// An sbyte parameter.
+        /// </summary>
+        public sbyte SByteParam
+        {
+            set
+            {
+                _sbyteOutput = value;
+                _testTaskHost?.ParameterSet("SByteParam", value);
+            }
+        }
+
+        /// <summary>
+        /// An sbyte array parameter.
+        /// </summary>
+        public sbyte[] SByteArrayParam
+        {
+            set
+            {
+                _sbyteArrayOutput = value;
+                _testTaskHost?.ParameterSet("SByteArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A double parameter.
+        /// </summary>
+        public double DoubleParam
+        {
+            set
+            {
+                _doubleOutput = value;
+                _testTaskHost?.ParameterSet("DoubleParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A double array parameter.
+        /// </summary>
+        public double[] DoubleArrayParam
+        {
+            set
+            {
+                _doubleArrayOutput = value;
+                _testTaskHost?.ParameterSet("DoubleArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A float parameter.
+        /// </summary>
+        public float FloatParam
+        {
+            set
+            {
+                _floatOutput = value;
+                _testTaskHost?.ParameterSet("FloatParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A float array parameter.
+        /// </summary>
+        public float[] FloatArrayParam
+        {
+            set
+            {
+                _floatArrayOutput = value;
+                _testTaskHost?.ParameterSet("FloatArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A short parameter.
+        /// </summary>
+        public short ShortParam
+        {
+            set
+            {
+                _shortOutput = value;
+                _testTaskHost?.ParameterSet("ShortParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A short array parameter.
+        /// </summary>
+        public short[] ShortArrayParam
+        {
+            set
+            {
+                _shortArrayOutput = value;
+                _testTaskHost?.ParameterSet("ShortArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A ushort parameter.
+        /// </summary>
+        public ushort UShortParam
+        {
+            set
+            {
+                _ushortOutput = value;
+                _testTaskHost?.ParameterSet("UShortParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A ushort array parameter.
+        /// </summary>
+        public ushort[] UShortArrayParam
+        {
+            set
+            {
+                _ushortArrayOutput = value;
+                _testTaskHost?.ParameterSet("UShortArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// An integer parameter.
         /// </summary>
         public int IntParam
         {
@@ -134,6 +434,126 @@ public int[] IntArrayParam
             }
         }
 
+        /// <summary>
+        /// A uint parameter.
+        /// </summary>
+        public uint UIntParam
+        {
+            set
+            {
+                _uintOutput = value;
+                _testTaskHost?.ParameterSet("UIntParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A uint array parameter.
+        /// </summary>
+        public uint[] UIntArrayParam
+        {
+            set
+            {
+                _uintArrayOutput = value;
+                _testTaskHost?.ParameterSet("UIntArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A long parameter.
+        /// </summary>
+        public long LongParam
+        {
+            set
+            {
+                _longOutput = value;
+                _testTaskHost?.ParameterSet("LongParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A long array parameter.
+        /// </summary>
+        public long[] LongArrayParam
+        {
+            set
+            {
+                _longArrayOutput = value;
+                _testTaskHost?.ParameterSet("LongArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A ulong parameter.
+        /// </summary>
+        public ulong ULongParam
+        {
+            set
+            {
+                _ulongOutput = value;
+                _testTaskHost?.ParameterSet("ULongParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A ulong array parameter.
+        /// </summary>
+        public ulong[] ULongArrayParam
+        {
+            set
+            {
+                _ulongArrayOutput = value;
+                _testTaskHost?.ParameterSet("ULongArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A decimal parameter.
+        /// </summary>
+        public decimal DecimalParam
+        {
+            set
+            {
+                _decimalOutput = value;
+                _testTaskHost?.ParameterSet("DecimalParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A decimal array parameter.
+        /// </summary>
+        public decimal[] DecimalArrayParam
+        {
+            set
+            {
+                _decimalArrayOutput = value;
+                _testTaskHost?.ParameterSet("DecimalArrayParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A char parameter.
+        /// </summary>
+        public char CharParam
+        {
+            set
+            {
+                _charOutput = value;
+                _testTaskHost?.ParameterSet("CharParam", value);
+            }
+        }
+
+        /// <summary>
+        /// A char array parameter.
+        /// </summary>
+        public char[] CharArrayParam
+        {
+            set
+            {
+                _charArrayOutput = value;
+                _testTaskHost?.ParameterSet("CharArrayParam", value);
+            }
+        }
+
         /// <summary>
         /// A string parameter.
         /// </summary>
@@ -233,7 +653,7 @@ public bool BoolOutput
         }
 
         /// <summary>
-        /// A boolean array output
+        /// A boolean array output.
         /// </summary>
         [Output]
         public bool[] BoolArrayOutput
@@ -246,7 +666,163 @@ public bool[] BoolArrayOutput
         }
 
         /// <summary>
-        /// An integer output
+        /// A byte output.
+        /// </summary>
+        [Output]
+        public byte ByteOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("ByteOutput", _byteOutput);
+                return _byteOutput;
+            }
+        }
+
+        /// <summary>
+        /// A byte array output.
+        /// </summary>
+        [Output]
+        public byte[] ByteArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("ByteArrayOutput", _byteArrayOutput);
+                return _byteArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// An sbyte output.
+        /// </summary>
+        [Output]
+        public sbyte SByteOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("SByteOutput", _sbyteOutput);
+                return _sbyteOutput;
+            }
+        }
+
+        /// <summary>
+        /// An sbyte array output.
+        /// </summary>
+        [Output]
+        public sbyte[] SByteArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("SByteArrayOutput", _sbyteArrayOutput);
+                return _sbyteArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A double output.
+        /// </summary>
+        [Output]
+        public double DoubleOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("DoubleOutput", _doubleOutput);
+                return _doubleOutput;
+            }
+        }
+
+        /// <summary>
+        /// A double array output.
+        /// </summary>
+        [Output]
+        public double[] DoubleArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("DoubleArrayOutput", _doubleArrayOutput);
+                return _doubleArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A float output.
+        /// </summary>
+        [Output]
+        public float FloatOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("FloatOutput", _floatOutput);
+                return _floatOutput;
+            }
+        }
+
+        /// <summary>
+        /// A float array output.
+        /// </summary>
+        [Output]
+        public float[] FloatArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("FloatArrayOutput", _floatArrayOutput);
+                return _floatArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A short output.
+        /// </summary>
+        [Output]
+        public short ShortOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("ShortOutput", _shortOutput);
+                return _shortOutput;
+            }
+        }
+
+        /// <summary>
+        /// A short array output.
+        /// </summary>
+        [Output]
+        public short[] ShortArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("ShortArrayOutput", _shortArrayOutput);
+                return _shortArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A ushort output.
+        /// </summary>
+        [Output]
+        public ushort UShortOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("UShortOutput", _ushortOutput);
+                return _ushortOutput;
+            }
+        }
+
+        /// <summary>
+        /// A ushort array output.
+        /// </summary>
+        [Output]
+        public ushort[] UShortArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("UShortArrayOutput", _ushortArrayOutput);
+                return _ushortArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// An integer output.
         /// </summary>
         [Output]
         public int IntOutput
@@ -259,7 +835,7 @@ public int IntOutput
         }
 
         /// <summary>
-        /// An integer array output
+        /// An integer array output.
         /// </summary>
         [Output]
         public int[] IntArrayOutput
@@ -272,7 +848,137 @@ public int[] IntArrayOutput
         }
 
         /// <summary>
-        /// A string output
+        /// A uint output.
+        /// </summary>
+        [Output]
+        public uint UIntOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("UIntOutput", _uintOutput);
+                return _uintOutput;
+            }
+        }
+
+        /// <summary>
+        /// A uint array output.
+        /// </summary>
+        [Output]
+        public uint[] UIntArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("UIntArrayOutput", _uintArrayOutput);
+                return _uintArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A long output.
+        /// </summary>
+        [Output]
+        public long LongOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("LongOutput", _longOutput);
+                return _longOutput;
+            }
+        }
+
+        /// <summary>
+        /// A long array output.
+        /// </summary>
+        [Output]
+        public long[] LongArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("LongArrayOutput", _longArrayOutput);
+                return _longArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A ulong output.
+        /// </summary>
+        [Output]
+        public ulong ULongOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("ULongOutput", _ulongOutput);
+                return _ulongOutput;
+            }
+        }
+
+        /// <summary>
+        /// A ulong array output.
+        /// </summary>
+        [Output]
+        public ulong[] ULongArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("ULongArrayOutput", _ulongArrayOutput);
+                return _ulongArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A decimal output.
+        /// </summary>
+        [Output]
+        public decimal DecimalOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("DecimalOutput", _decimalOutput);
+                return _decimalOutput;
+            }
+        }
+
+        /// <summary>
+        /// A decimal array output.
+        /// </summary>
+        [Output]
+        public decimal[] DecimalArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("DecimalArrayOutput", _decimalArrayOutput);
+                return _decimalArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A char output.
+        /// </summary>
+        [Output]
+        public char CharOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("CharOutput", _charOutput);
+                return _charOutput;
+            }
+        }
+
+        /// <summary>
+        /// A char array output.
+        /// </summary>
+        [Output]
+        public char[] CharArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("CharArrayOutput", _charArrayOutput);
+                return _charArrayOutput;
+            }
+        }
+
+        /// <summary>
+        /// A string output.
         /// </summary>
         [Output]
         public string StringOutput
@@ -337,7 +1043,7 @@ public DateTime DateTimeOutput
         }
 
         /// <summary>
-        /// A DateTime array output
+        /// A DateTime array output.
         /// </summary>
         [Output]
         public DateTime[] DateTimeArrayOutput
@@ -350,7 +1056,33 @@ public DateTime[] DateTimeArrayOutput
         }
 
         /// <summary>
-        /// A null ITaskItem output
+        /// A CustomStruct output.
+        /// </summary>
+        [Output]
+        public CustomStruct CustomStructOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("CustomStructOutput", s_customStruct);
+                return s_customStruct;
+            }
+        }
+
+        /// <summary>
+        /// A CustomStruct array output.
+        /// </summary>
+        [Output]
+        public CustomStruct[] CustomStructArrayOutput
+        {
+            get
+            {
+                _testTaskHost?.OutputRead("CustomStructArrayOutput", s_customStructArray);
+                return s_customStructArray;
+            }
+        }
+
+        /// <summary>
+        /// A null ITaskItem output.
         /// </summary>
         [Output]
         public ITaskItem NullITaskItemOutput
@@ -363,7 +1095,7 @@ public ITaskItem NullITaskItemOutput
         }
 
         /// <summary>
-        /// A null string array output
+        /// A null string array output.
         /// </summary>
         [Output]
         public string[] NullStringArrayOutput
@@ -376,7 +1108,7 @@ public string[] NullStringArrayOutput
         }
 
         /// <summary>
-        /// A null ITaskItem array output
+        /// A null ITaskItem array output.
         /// </summary>
         [Output]
         public ITaskItem[] NullITaskItemArrayOutput
@@ -389,7 +1121,7 @@ public ITaskItem[] NullITaskItemArrayOutput
         }
 
         /// <summary>
-        /// A string array output
+        /// A string array output.
         /// </summary>
         [Output]
         public string[] StringArrayOutput
@@ -402,7 +1134,7 @@ public string[] StringArrayOutput
         }
 
         /// <summary>
-        /// A task item output
+        /// A task item output.
         /// </summary>
         [Output]
         public ITaskItem ItemOutput
@@ -415,7 +1147,7 @@ public ITaskItem ItemOutput
         }
 
         /// <summary>
-        /// A task item array output
+        /// A task item array output.
         /// </summary>
         [Output]
         public ITaskItem[] ItemArrayOutput
@@ -428,7 +1160,7 @@ public ITaskItem[] ItemArrayOutput
         }
 
         /// <summary>
-        /// A task item array output that is null
+        /// A task item array output that is null.
         /// </summary>
         [Output]
         public ITaskItem[] ItemArrayNullOutput
