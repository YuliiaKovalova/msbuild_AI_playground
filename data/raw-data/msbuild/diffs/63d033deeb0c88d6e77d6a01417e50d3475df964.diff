diff --git a/src/Build.UnitTests/TelemetryTests.cs b/src/Build.UnitTests/TelemetryTests.cs
new file mode 100644
index 00000000000..48fc601e5f3
--- /dev/null
+++ b/src/Build.UnitTests/TelemetryTests.cs
@@ -0,0 +1,167 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Framework;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.Engine.UnitTests
+{
+    public class TelemetryTests
+    {
+        public TelemetryTests()
+        {
+            ProjectBuildStats.DurationThresholdForTopN = TimeSpan.Zero;
+        }
+
+        private sealed class ProjectFinishedCapturingLogger : ILogger
+        {
+            private readonly List<ProjectFinishedEventArgs> _projectFinishedEventArgs = [];
+            public LoggerVerbosity Verbosity { get; set; }
+            public string? Parameters { get; set; }
+
+            public IReadOnlyList<ProjectFinishedEventArgs> ProjectFinishedEventArgsReceived =>
+                _projectFinishedEventArgs;
+
+            public void Initialize(IEventSource eventSource)
+            {
+                eventSource.ProjectFinished += EventSource_ProjectFinished;
+            }
+
+            private void EventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
+            {
+                _projectFinishedEventArgs.Add(e);
+            }
+
+            public void Shutdown()
+            { }
+        }
+
+        [Fact]
+        public void WorkerNodeTelemetryCollection_BasicTarget()
+        {
+            var tstLogger = new ProjectFinishedCapturingLogger();
+            var testProject = """
+                        <Project>
+                            <Target Name="Build">
+                                <Message Text="Hello World"/>
+                                <CreateItem Include="foo.bar">
+                                    <Output TaskParameter="Include" ItemName="I" />
+                                </CreateItem>
+                                <Message Text="Bye World"/>
+                            </Target>
+                        </Project>
+                """;
+            Helpers.BuildProjectContentUsingBuildManager(testProject, tstLogger,
+                new BuildParameters() { IsTelemetryEnabled = true }).OverallResult.ShouldBe(BuildResultCode.Success);
+
+            tstLogger.ProjectFinishedEventArgsReceived.Count.ShouldBe(1);
+            ProjectBuildStats? stats = tstLogger.ProjectFinishedEventArgsReceived[0].ProjectBuildStats;
+            stats.ShouldNotBeNull();
+            ((int)stats.CustomTargetsCount).ShouldBe(1);
+            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(1);
+            ((int)stats.TotalTargetsCount).ShouldBe(1);
+            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(1);
+
+            ((int)stats.TotalTasksCount).ShouldBeGreaterThan(2);
+            ((int)stats.TotalTasksExecutionsCount).ShouldBe(3);
+            ((int)stats.TotalExecutedTasksCount).ShouldBe(2);
+            ((int)stats.CustomTasksCount).ShouldBe(0);
+            ((int)stats.CustomTasksExecutionsCount).ShouldBe(0);
+            ((int)stats.ExecutedCustomTasksCount).ShouldBe(0);
+            stats.TotalTasksExecution.ShouldBeGreaterThan(TimeSpan.Zero);
+            stats.TotalCustomTasksExecution.ShouldBe(TimeSpan.Zero);
+
+            stats.TopTasksByCumulativeExecution.Count.ShouldNotBe(0);
+            foreach (var st in stats.TopTasksByCumulativeExecution)
+            {
+                st.Key.ShouldBeGreaterThan(TimeSpan.Zero);
+                (st.Value.EndsWith("Message") || st.Value.EndsWith("CreateItem")).ShouldBeTrue($"Only specified tasks expected. Encountered: {st.Value}");
+            }
+        }
+
+        [Fact]
+        public void WorkerNodeTelemetryCollection_CustomTargetsAndTasks()
+        {
+            var tstLogger = new ProjectFinishedCapturingLogger();
+            var testProject = """
+                                      <Project>
+                                      <UsingTask
+                                          TaskName="Task01"
+                                          TaskFactory="RoslynCodeTaskFactory"
+                                          AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
+                                          <ParameterGroup />
+                                          <Task>
+                                            <Code Type="Fragment" Language="cs">
+                                              Log.LogMessage(MessageImportance.Low, "Hello, world!");
+                                            </Code>
+                                          </Task>
+                                       </UsingTask>
+                                       
+                                       <UsingTask
+                                         TaskName="Task02"
+                                         TaskFactory="RoslynCodeTaskFactory"
+                                         AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
+                                         <ParameterGroup />
+                                         <Task>
+                                           <Code Type="Fragment" Language="cs">
+                                             Log.LogMessage(MessageImportance.High, "Hello, world!");
+                                           </Code>
+                                         </Task>
+                                      </UsingTask>
+                                      
+                                          <Target Name="Build" DependsOnTargets="BeforeBuild">
+                                              <Message Text="Hello World"/>
+                                              <CreateItem Include="foo.bar">
+                                                  <Output TaskParameter="Include" ItemName="I" />
+                                              </CreateItem>
+                                              <Task01 />
+                                              <Message Text="Bye World"/>
+                                          </Target>
+                                          
+                                          <Target Name="BeforeBuild">
+                                              <Message Text="Hello World"/>
+                                              <Task01 />
+                                          </Target>
+                                          
+                                          <Target Name="NotExecuted">
+                                              <Message Text="Hello World"/>
+                                          </Target>
+                                      </Project>
+                              """;
+            Helpers.BuildProjectContentUsingBuildManager(testProject, tstLogger,
+                new BuildParameters() { IsTelemetryEnabled = true }).OverallResult.ShouldBe(BuildResultCode.Success);
+
+            tstLogger.ProjectFinishedEventArgsReceived.Count.ShouldBe(1);
+            ProjectBuildStats? stats = tstLogger.ProjectFinishedEventArgsReceived[0].ProjectBuildStats;
+            stats.ShouldNotBeNull();
+            ((int)stats.CustomTargetsCount).ShouldBe(3);
+            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(2);
+            ((int)stats.TotalTargetsCount).ShouldBe(3);
+            ((int)stats.ExecutedCustomTargetsCount).ShouldBe(2);
+
+            ((int)stats.TotalTasksCount).ShouldBeGreaterThan(2);
+            ((int)stats.TotalTasksExecutionsCount).ShouldBe(6);
+            ((int)stats.TotalExecutedTasksCount).ShouldBe(3);
+            ((int)stats.CustomTasksCount).ShouldBe(2);
+            ((int)stats.CustomTasksExecutionsCount).ShouldBe(2);
+            ((int)stats.ExecutedCustomTasksCount).ShouldBe(1);
+            stats.TotalTasksExecution.ShouldBeGreaterThan(TimeSpan.Zero);
+            stats.TotalCustomTasksExecution.ShouldBeGreaterThan(TimeSpan.Zero);
+
+            stats.TopTasksByCumulativeExecution.Count.ShouldNotBe(0);
+            foreach (var st in stats.TopTasksByCumulativeExecution)
+            {
+                st.Key.ShouldBeGreaterThan(TimeSpan.Zero);
+                (st.Value.EndsWith("Message") || st.Value.EndsWith("CreateItem") || st.Value.EndsWith("Task01")).ShouldBeTrue($"Only specified tasks expected. Encountered: {st.Value}");
+            }
+            stats.TopTasksByCumulativeExecution.Any(t => t.Value.Equals("Custom:Task01")).ShouldBeTrue($"Expected to encounter custom task. Tasks: {stats.TopTasksByCumulativeExecution.Select(t => t.Value).ToCsvString()}");
+        }
+    }
+}
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index f33174f7afb..c5c50e66afa 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -211,7 +211,7 @@ public class BuildParameters : ITranslatable
 
         private bool _isBuildCheckEnabled;
 
-        private bool _isTelemetryEnabled = true;
+        private bool _isTelemetryEnabled;
 
         /// <summary>
         /// The settings used to load the project under build
@@ -316,6 +316,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             LowPriority = other.LowPriority;
             Question = other.Question;
             IsBuildCheckEnabled = other.IsBuildCheckEnabled;
+            IsTelemetryEnabled = other.IsTelemetryEnabled;
             ProjectCacheDescriptor = other.ProjectCacheDescriptor;
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 193a0a10a4f..cfc289ad30e 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1676,7 +1676,6 @@ private void RouteBuildEvent(object loggingEvent)
 
             if (buildEventArgs is ProjectFinishedEventArgs projectFinishedEvent && projectFinishedEvent.BuildEventContext != null)
             {
-                FlushProjStats(projectFinishedEvent);
                 WarningsConfigKey key = GetWarningsConfigKey(projectFinishedEvent);
                 _warningsAsErrorsByProject?.Remove(key);
                 _warningsNotAsErrorsByProject?.Remove(key);
@@ -1699,47 +1698,6 @@ private void RouteBuildEvent(object loggingEvent)
             }
         }
 
-        private void FlushProjStats(ProjectFinishedEventArgs finsEventArgs)
-        {
-            ProjectBuildStats stats = finsEventArgs.ProjectBuildStats;
-
-            if (stats == null)
-            {
-                return;
-            }
-
-            string suffix = finsEventArgs.BuildEventContext != null
-                ? $"InstId: {finsEventArgs.BuildEventContext.ProjectInstanceId}, CtxId: {finsEventArgs.BuildEventContext.ProjectContextId}"
-                : "No_Context";
-
-            Console.WriteLine("=================================================");
-            Console.WriteLine($"Stats for [{finsEventArgs.ProjectFile}, {suffix}");
-            Console.WriteLine($"Total Defined  Tasks: {stats.TotalTasksCount}");
-            Console.WriteLine($"Total Tasks Executions: {stats.TotalTasksExecutionsCount}");
-            Console.WriteLine($"Total Executed Tasks: {stats.TotalExecutedTasksCount}");
-            Console.WriteLine($"Total task exec time: {stats.TotalTasksExecution:mm\\:ss\\.fff}");
-            Console.WriteLine();
-            Console.WriteLine($"Defined  Custom Tasks: {stats.CustomTasksCount}");
-            Console.WriteLine($"Custom Tasks Executions: {stats.CustomTasksExecutionsCount}");
-            Console.WriteLine($"Executed Custom Tasks: {stats.ExecutedCustomTasksCount}");
-            Console.WriteLine($"Custom task exec time: {stats.TotalCustomTasksExecution:mm\\:ss\\.fff}");
-            Console.WriteLine();
-            Console.WriteLine();
-            Console.WriteLine($"Total Defined  Targets: {stats.TotalTargetsCount}");
-            Console.WriteLine($"Total Targets Executions: {stats.TotalTargetsExecutionsCount}");
-            Console.WriteLine();
-            Console.WriteLine($"Defined  Custom Targets: {stats.CustomTargetsCount}");
-            Console.WriteLine($"Executed Custom Targets: {stats.ExecutedCustomTargetsCount}");
-            Console.WriteLine();
-            Console.WriteLine();
-            Console.WriteLine("Top tasks by cumulative execution time:");
-            foreach (var pair in stats.TopTasksByCumulativeExecution)
-            {
-                Console.WriteLine($"{pair.Value}: {pair.Key}");
-            }
-            Console.WriteLine("=================================================");
-        }
-
         /// <summary>
         /// Route the build event to the correct filter or sink depending on what the sinId is in the build event.
         /// </summary>
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index d65389ebf25..b18876cf590 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1179,7 +1179,7 @@ internal class RegisteredTaskRecord : ITranslatable
             /// </summary>
             internal Stats Statistics { get; private init; } = new Stats();
 
-            internal struct Stats()
+            internal class Stats()
             {
                 public short ExecutedCount { get; private set; } = 0;
                 private readonly Stopwatch _executedSw  = new Stopwatch();
@@ -1254,8 +1254,9 @@ public bool GetIsCustom()
             {
                 return
                     (
-                        // Some taskfactories are used within our common targets - but we should flag it somehow as well
-                        (!string.IsNullOrEmpty(_taskFactory)) ||
+                        // There are occurrences of inline tasks within common targets (VS - SetEnvironmentVariable),
+                        //  so we need to check file as well (the very last condition).
+                        !string.IsNullOrEmpty(_parameterGroupAndTaskBody?.InlineTaskXmlBody) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyName) &&
                          !AssemblyLoadsTracker.IsBuiltinType(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) &&
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index e9de8c53735..5fd568f4762 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -9,9 +9,15 @@
 
 namespace Microsoft.Build.Framework
 {
-    public class ProjectBuildStats
+    /// <summary>
+    /// Holder for project execution stats
+    /// It is not intended to be serialized into binlog nor shared after the build execution is done.
+    /// It is populated only if telemetry collection is active for current build and tasks/targets stats are regarded sampled-in.
+    /// </summary>
+    internal class ProjectBuildStats
     {
-        // TODO: this might be configurable e.g. via telemetry sensitivity level?
+        // Future: These might be configurable e.g. via telemetry sensitivity level?
+        internal static TimeSpan DurationThresholdForTopN { get; set; } = TimeSpan.FromMilliseconds(100);
         private const int TopNTasksToReport = 5;
 
         public ProjectBuildStats(bool isDeserialized)
@@ -26,7 +32,7 @@ public ProjectBuildStats(bool isDeserialized)
 
         public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom)
         {
-            if (TopNTasksToReport > 0 && cumulativeExectionTime > TimeSpan.Zero)
+            if (TopNTasksToReport > 0 && cumulativeExectionTime > DurationThresholdForTopN)
             {
                 if (_topTasksByCumulativeExecution!.Count == 0 ||
                     _topTasksByCumulativeExecution.Last().Key < cumulativeExectionTime)
@@ -60,22 +66,70 @@ public void AddTask(string name, TimeSpan cumulativeExectionTime, short executio
             }
         }
 
+        /// <summary>
+        /// Total number of tasks registered for execution of this project.
+        /// </summary>
         public short TotalTasksCount { get; set; }
+
+        /// <summary>
+        /// Subset of <see cref="TotalTasksCount"/> that were not regarded to be produced by Microsoft.
+        /// </summary>
         public short CustomTasksCount { get; set; }
+
+        /// <summary>
+        /// Total number of time any task was executed. All executions of any task counts (even if executed multiple times).
+        /// </summary>
         public short TotalTasksExecutionsCount { get; set; }
+
+        /// <summary>
+        /// Total number of tasks that were executed. Multiple executions of single task counts just once.
+        /// </summary>
         public short TotalExecutedTasksCount { get; set; }
+
+        /// <summary>
+        /// Subset of <see cref="TotalTasksExecutionsCount"/> that were performed on tasks not regarded to be produced by Microsoft.
+        /// </summary>
         public short CustomTasksExecutionsCount { get; set; }
+
+        /// <summary>
+        /// Subset of <see cref="TotalExecutedTasksCount"/> that were performed on tasks not regarded to be produced by Microsoft.
+        /// </summary>
         public short ExecutedCustomTasksCount { get; set; }
+
+        /// <summary>
+        /// Total cumulative time spent in execution of tasks for this project request.
+        /// </summary>
         public TimeSpan TotalTasksExecution { get; set; }
+
+        /// <summary>
+        /// Subset of <see cref="TotalTasksExecution"/> for executions that were performed on tasks not regarded to be produced by Microsoft.
+        /// </summary>
         public TimeSpan TotalCustomTasksExecution { get; set; }
 
+        /// <summary>
+        /// Total number of targets registered for execution of this project.
+        /// </summary>
         public short TotalTargetsCount { get; set; }
+
+        /// <summary>
+        /// Subset of <see cref="TotalTargetsCount"/> that were not regarded to be produced by Microsoft.
+        /// </summary>
         public short CustomTargetsCount { get; set; }
+
+        /// <summary>
+        /// Total number of time any target was executed. Each target is counted at most once - as multiple executions of single target per project are not allowed.
+        /// </summary>
         public short TotalTargetsExecutionsCount { get; set; }
-        public short ExecutedCustomTargetsCount { get; set; }
 
-        // todo top N tasks - names (unhashed if not custom) and time
+        /// <summary>
+        /// Subset of <see cref="TotalTargetsExecutionsCount"/> for executions that were not regarded to be produced by Microsoft.
+        /// </summary>
+        public short ExecutedCustomTargetsCount { get; set; }
 
+        /// <summary>
+        /// Top N (<see cref="TopNTasksToReport"/>) tasks by cumulative execution time.
+        /// Custom tasks names are prefixed by "Custom:" prefix
+        /// </summary>
         public IReadOnlyCollection<KeyValuePair<TimeSpan, string>> TopTasksByCumulativeExecution =>
             _topTasksByCumulativeExecution ?? _topTasksDeserialized ?? [];
 
@@ -265,8 +319,10 @@ public override string Message
             }
         }
 
-        // public int Foo1 { get; set; }
-
-        public ProjectBuildStats? ProjectBuildStats { get; set; }
+        /// <summary>
+        /// Optional holder of stats for telemetry.
+        /// Not intended to be de/serialized for binlogs.
+        /// </summary>
+        internal ProjectBuildStats? ProjectBuildStats { get; set; }
     }
 }
diff --git a/src/UnitTests.Shared/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
index 99d1e251890..375c84d6779 100644
--- a/src/UnitTests.Shared/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -1394,7 +1394,7 @@ public static MockLogger BuildProjectContentUsingBuildManagerExpectResult([Strin
             return logger;
         }
 
-        public static BuildResult BuildProjectContentUsingBuildManager([StringSyntax(StringSyntaxAttribute.Xml)] string content, MockLogger logger, BuildParameters parameters = null)
+        public static BuildResult BuildProjectContentUsingBuildManager([StringSyntax(StringSyntaxAttribute.Xml)] string content, ILogger logger, BuildParameters parameters = null)
         {
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
@@ -1409,7 +1409,7 @@ public static BuildResult BuildProjectContentUsingBuildManager([StringSyntax(Str
 
         public static BuildResult BuildProjectFileUsingBuildManager(
             string projectFile,
-            MockLogger logger = null,
+            ILogger logger = null,
             BuildParameters parameters = null,
             IList<string> targetsToBuild = null)
         {
