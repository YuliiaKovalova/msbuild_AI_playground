diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 37a38a7ef17..009ef11f62d 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -327,7 +327,7 @@ private void PopulatePropertyInfoCacheIfNecessary()
                             _namesOfPropertiesWithAllowEmptyStringAttribute = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                         }
 
-                        // we have a output attribute defined, keep a record of that
+                        // we have a allowEmptyString attribute defined, keep a record of that
                         _namesOfPropertiesWithAllowEmptyStringAttribute[propertyInfo.Name] = String.Empty;
                     }
                 }
diff --git a/src/Tasks.UnitTests/XmlPoke_Tests.cs b/src/Tasks.UnitTests/XmlPoke_Tests.cs
index b69f5ec9666..965e7195fa4 100644
--- a/src/Tasks.UnitTests/XmlPoke_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPoke_Tests.cs
@@ -86,13 +86,13 @@ public void PokeAttribute()
             XmlDocument xmlDocument = ExecuteXmlPoke(query: query, value: value);
 
             List<XmlAttribute> nodes = xmlDocument.SelectNodes(query)?.Cast<XmlAttribute>().ToList();
-            
+
             nodes.ShouldNotBeNull($"There should be <class /> elements with an AccessModifier attribute {Environment.NewLine}{xmlDocument.OuterXml}");
 
             nodes.Count.ShouldBe(1, $"There should be 1 <class /> element with an AccessModifier attribute {Environment.NewLine}{xmlDocument.OuterXml}");
 
             nodes[0].Value.ShouldBe(value);
-        }   
+        }
 
         [Fact]
         public void PokeChildren()
