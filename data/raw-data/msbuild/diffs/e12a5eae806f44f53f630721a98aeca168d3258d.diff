diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index d687429c221..2b8d80d306c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -41,7 +41,7 @@ internal static class ItemGroupLoggingHelper
         static ItemGroupLoggingHelper()
         {
             TaskParameterEventArgs.MessageGetter = GetTaskParameterText;
-            TaskParameterEventArgs.DictionaryFactory = SmallDictionary<string, string>.Create;
+            TaskParameterEventArgs.DictionaryFactory = ArrayDictionary<string, string>.Create;
         }
 
         /// <summary>
diff --git a/src/Build/Collections/SmallDictionary.cs b/src/Build/Collections/ArrayDictionary.cs
similarity index 90%
rename from src/Build/Collections/SmallDictionary.cs
rename to src/Build/Collections/ArrayDictionary.cs
index 79709cf6333..9cdf1d7a0e1 100644
--- a/src/Build/Collections/SmallDictionary.cs
+++ b/src/Build/Collections/ArrayDictionary.cs
@@ -1,3 +1,6 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
@@ -5,20 +8,21 @@
 namespace Microsoft.Build.Collections
 {
     /// <summary>
-    /// Small, lightweight, read-only IDictionary implementation using two arrays
-    /// and O(n) lookup. Requires specifying capacity at construction and does not
+    /// Lightweight, read-only IDictionary implementation using two arrays
+    /// and O(n) lookup.
+    /// Requires specifying capacity at construction and does not
     /// support reallocation to increase capacity.
     /// </summary>
     /// <typeparam name="TKey">Type of keys</typeparam>
     /// <typeparam name="TValue">Type of values</typeparam>
-    internal class SmallDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary
+    internal class ArrayDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary
     {
         private TKey[] keys;
         private TValue[] values;
 
         private int count;
 
-        public SmallDictionary(int capacity)
+        public ArrayDictionary(int capacity)
         {
             keys = new TKey[capacity];
             values = new TValue[capacity];
@@ -26,7 +30,7 @@ public SmallDictionary(int capacity)
 
         public static IDictionary<TKey, TValue> Create(int capacity)
         {
-            return new SmallDictionary<TKey, TValue>(capacity);
+            return new ArrayDictionary<TKey, TValue>(capacity);
         }
 
         public TValue this[TKey key]
@@ -91,7 +95,7 @@ public void Add(TKey key, TValue value)
             }
             else
             {
-                throw new InvalidOperationException($"SmallDictionary is at capacity {keys.Length}");
+                throw new InvalidOperationException($"ArrayDictionary is at capacity {keys.Length}");
             }
         }
 
@@ -212,11 +216,11 @@ void IDictionary.Remove(object key)
 
         private struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator
         {
-            private readonly SmallDictionary<TKey, TValue> _dictionary;
+            private readonly ArrayDictionary<TKey, TValue> _dictionary;
             private readonly bool _emitDictionaryEntries;
             private int _position;
 
-            public Enumerator(SmallDictionary<TKey, TValue> dictionary, bool emitDictionaryEntries = false)
+            public Enumerator(ArrayDictionary<TKey, TValue> dictionary, bool emitDictionaryEntries = false)
             {
                 this._dictionary = dictionary;
                 this._position = -1;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 30788ca6d8a..f9af8eed299 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -1,4 +1,7 @@
-﻿using System;
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
@@ -226,7 +229,7 @@ private IDictionary<string, string> GetNameValueList(int id)
                 // We can't cache these as they would hold on to strings.
                 // This reader is designed to not hold onto strings,
                 // so that we can fit in a 32-bit process when reading huge binlogs
-                var dictionary = SmallDictionary<string, string>.Create(list.Length);
+                var dictionary = ArrayDictionary<string, string>.Create(list.Length);
                 for (int i = 0; i < list.Length; i++)
                 {
                     string key = GetStringFromRecord(list[i].keyIndex);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index cd59ec1dc4b..5df8c74f964 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -1,3 +1,6 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 75c281d1db6..acf22733730 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -375,7 +375,7 @@
     <Compile Include="Collections\ReadOnlyConvertingDictionary.cs" />
     <!-- ######################## -->
     <Compile Include="Collections\WeakValueDictionary.cs" />
-    <Compile Include="Collections\SmallDictionary.cs" />
+    <Compile Include="Collections\ArrayDictionary.cs" />
     <!-- #### CONSTRUCTION MODEL ### -->
     <Compile Include="Construction\ProjectElement.cs" />
     <Compile Include="Construction\ProjectElementContainer.cs" />
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index 4581c425788..232f39f7b67 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -72,7 +72,7 @@ DateTime eventTimestamp
 
         /// <summary>
         /// Provides a way for Microsoft.Build.dll to provide a more efficient dictionary factory
-        /// (using SmallDictionary`2). Since that is an implementation detail, it is not included
+        /// (using ArrayDictionary`2). Since that is an implementation detail, it is not included
         /// in Microsoft.Build.Framework.dll so we need this extensibility point here.
         /// </summary>
         internal static Func<int, IDictionary<string, string>> DictionaryFactory = capacity => new Dictionary<string, string>(capacity);
