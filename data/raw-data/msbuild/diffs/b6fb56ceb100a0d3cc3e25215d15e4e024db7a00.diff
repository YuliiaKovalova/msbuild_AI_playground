diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index 197e775cecb..1a80a617a7c 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -1106,8 +1106,7 @@ public void RoslynCodeTaskFactory_UsingAPI()
             var logger = project.BuildProjectExpectSuccess();
             var logLines = logger.AllBuildEvents.Select(a => a.Message);
             var log = string.Join("\n", logLines);
-            var messages = logLines.Where(l => l.Contains(dotnetPath)).ToList();
-            messages.Count.ShouldBe(1, log);
+            logLines.Where(l => l.Contains(dotnetPath)).Count().ShouldBe(1, log);
         }
 #endif
 
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
index b13486e975a..2d97134b43c 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Tasks
     internal abstract class RoslynCodeTaskFactoryCompilerBase : ToolTaskExtension
     {
 #if RUNTIME_TYPE_NETCORE
-        private readonly string dotnetCliPath;
+        private readonly string _dotnetCliPath;
 #endif
 
         private readonly Lazy<string> _executablePath;
@@ -48,20 +48,20 @@ protected RoslynCodeTaskFactoryCompilerBase()
 #if RUNTIME_TYPE_NETCORE
             // Tools and MSBuild Tasks within the SDK that invoke binaries via the dotnet host are expected
             // to honor the environment variable DOTNET_HOST_PATH to ensure a consistent experience.
-            dotnetCliPath = Environment.GetEnvironmentVariable("DOTNET_HOST_PATH");
-            if (string.IsNullOrEmpty(dotnetCliPath))
+            _dotnetCliPath = Environment.GetEnvironmentVariable("DOTNET_HOST_PATH");
+            if (string.IsNullOrEmpty(_dotnetCliPath))
             {
                 // Fallback to get dotnet path from current process which might be dotnet executable.
-                dotnetCliPath = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
+                _dotnetCliPath = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
             }
 
             // If dotnet path is not found, rely on dotnet via the system's PATH
             bool runningOnWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
             string exeSuffix = runningOnWindows ? ".exe" : string.Empty;
             var dotnetFileName = $"dotnet{exeSuffix}";
-            if (!dotnetCliPath.EndsWith(dotnetFileName, StringComparison.OrdinalIgnoreCase))
+            if (!_dotnetCliPath.EndsWith(dotnetFileName, StringComparison.OrdinalIgnoreCase))
             {
-                dotnetCliPath = "dotnet";
+                _dotnetCliPath = "dotnet";
             }
 #endif
         }
@@ -120,7 +120,7 @@ protected override string GenerateFullPathToTool()
             }
 
 #if RUNTIME_TYPE_NETCORE
-            return dotnetCliPath;
+            return _dotnetCliPath;
 #else
             return _executablePath.Value;
 #endif
