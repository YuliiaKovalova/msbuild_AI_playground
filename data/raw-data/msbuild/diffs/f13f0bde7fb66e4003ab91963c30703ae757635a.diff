diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index f850148d0bf..03d3c5e61c8 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -592,9 +592,9 @@ public TaskFinishedEventArgs(string message, string helpKeyword, string projectF
     public delegate void TaskFinishedEventHandler(object sender, Microsoft.Build.Framework.TaskFinishedEventArgs e);
     public partial class TaskParameterEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public TaskParameterEventArgs(Microsoft.Build.Framework.TaskParameterMessageKind kind, string itemName, System.Collections.IList items, bool logItemMetadata, System.DateTime eventTimestamp) { }
-        public string ItemName { get { throw null; } }
+        public TaskParameterEventArgs(Microsoft.Build.Framework.TaskParameterMessageKind kind, string itemType, System.Collections.IList items, bool logItemMetadata, System.DateTime eventTimestamp) { }
         public System.Collections.IList Items { get { throw null; } }
+        public string ItemType { get { throw null; } }
         public Microsoft.Build.Framework.TaskParameterMessageKind Kind { get { throw null; } }
         public bool LogItemMetadata { get { throw null; } }
         public override string Message { get { throw null; } }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index a19a70ce45a..31d90e78d65 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -591,9 +591,9 @@ public TaskFinishedEventArgs(string message, string helpKeyword, string projectF
     public delegate void TaskFinishedEventHandler(object sender, Microsoft.Build.Framework.TaskFinishedEventArgs e);
     public partial class TaskParameterEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public TaskParameterEventArgs(Microsoft.Build.Framework.TaskParameterMessageKind kind, string itemName, System.Collections.IList items, bool logItemMetadata, System.DateTime eventTimestamp) { }
-        public string ItemName { get { throw null; } }
+        public TaskParameterEventArgs(Microsoft.Build.Framework.TaskParameterMessageKind kind, string itemType, System.Collections.IList items, bool logItemMetadata, System.DateTime eventTimestamp) { }
         public System.Collections.IList Items { get { throw null; } }
+        public string ItemType { get { throw null; } }
         public Microsoft.Build.Framework.TaskParameterMessageKind Kind { get { throw null; } }
         public bool LogItemMetadata { get { throw null; } }
         public override string Message { get { throw null; } }
diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index b2232cf9167..3e860fc7d5f 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -320,7 +320,7 @@ private void CompareLogMessagePackets(LogMessagePacket left, LogMessagePacket ri
                     Assert.NotNull(leftTaskParameter);
                     Assert.NotNull(rightTaskParameter);
                     Assert.Equal(leftTaskParameter.Kind, rightTaskParameter.Kind);
-                    Assert.Equal(leftTaskParameter.ItemName, rightTaskParameter.ItemName);
+                    Assert.Equal(leftTaskParameter.ItemType, rightTaskParameter.ItemType);
                     Assert.Equal(leftTaskParameter.Items.Count, rightTaskParameter.Items.Count);
                     Assert.Equal(leftTaskParameter.Message, rightTaskParameter.Message);
                     Assert.Equal(leftTaskParameter.BuildEventContext, rightTaskParameter.BuildEventContext);
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index e73ff6a500f..a2874d96c06 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -1,4 +1,4 @@
-﻿using System;
+using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
@@ -340,7 +340,7 @@ public void RoundtripTaskParameterEventArgs()
 
             Roundtrip(args,
                 e => e.Kind.ToString(),
-                e => e.ItemName,
+                e => e.ItemType,
                 e => e.LogItemMetadata.ToString(),
                 e => GetItemsString(e.Items));
         }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index 83aa5564c92..d687429c221 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -220,25 +220,31 @@ private static void AppendStringFromParameterValue(ReuseableStringBuilder sb, ob
         internal static void LogTaskParameter(
             LoggingContext loggingContext,
             TaskParameterMessageKind messageKind,
-            string itemName,
+            string itemType,
             IList items,
             bool logItemMetadata)
         {
-            var args = CreateTaskParameterEventArgs(loggingContext.BuildEventContext, messageKind, itemName, items, logItemMetadata, DateTime.UtcNow);
+            var args = CreateTaskParameterEventArgs(
+                loggingContext.BuildEventContext,
+                messageKind,
+                itemType,
+                items,
+                logItemMetadata,
+                DateTime.UtcNow);
             loggingContext.LogBuildEvent(args);
         }
 
         internal static TaskParameterEventArgs CreateTaskParameterEventArgs(
             BuildEventContext buildEventContext,
             TaskParameterMessageKind messageKind,
-            string itemName,
+            string itemType,
             IList items,
             bool logItemMetadata,
             DateTime timestamp)
         {
             var args = new TaskParameterEventArgs(
                 messageKind,
-                itemName,
+                itemType,
                 items,
                 logItemMetadata,
                 timestamp);
@@ -247,9 +253,9 @@ internal static TaskParameterEventArgs CreateTaskParameterEventArgs(
         }
 
         internal static string GetTaskParameterText(TaskParameterEventArgs args)
-            => GetTaskParameterText(args.Kind, args.ItemName, args.Items, args.LogItemMetadata);
+            => GetTaskParameterText(args.Kind, args.ItemType, args.Items, args.LogItemMetadata);
 
-        internal static string GetTaskParameterText(TaskParameterMessageKind messageKind, string itemName, IList items, bool logItemMetadata)
+        internal static string GetTaskParameterText(TaskParameterMessageKind messageKind, string itemType, IList items, bool logItemMetadata)
         {
             var resourceText = messageKind switch
             {
@@ -262,7 +268,7 @@ internal static string GetTaskParameterText(TaskParameterMessageKind messageKind
 
             var itemGroupText = GetParameterText(
                 resourceText,
-                itemName,
+                itemType,
                 items,
                 logItemMetadata);
             return itemGroupText;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 65b0f3727b6..cd59ec1dc4b 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -1,4 +1,4 @@
-﻿using System;
+using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
@@ -521,7 +521,7 @@ private void Write(TaskParameterEventArgs e)
             Write(BinaryLogRecordKind.TaskParameter);
             WriteMessageFields(e, writeMessage: false);
             Write((int)e.Kind);
-            WriteDeduplicatedString(e.ItemName);
+            WriteDeduplicatedString(e.ItemType);
             WriteTaskItemList(e.Items, e.LogItemMetadata);
         }
 
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index 8f8e484fc38..4581c425788 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -32,7 +32,7 @@ public class TaskParameterEventArgs : BuildMessageEventArgs
         public TaskParameterEventArgs
         (
             TaskParameterMessageKind kind,
-            string itemName,
+            string itemType,
             IList items,
             bool logItemMetadata,
             DateTime eventTimestamp
@@ -40,13 +40,13 @@ DateTime eventTimestamp
             : base(null, null, null, MessageImportance.Low, eventTimestamp)
         {
             Kind = kind;
-            ItemName = itemName;
+            ItemType = itemType;
             Items = items;
             LogItemMetadata = logItemMetadata;
         }
 
         public TaskParameterMessageKind Kind { get; private set; }
-        public string ItemName { get; private set; }
+        public string ItemType { get; private set; }
         public IList Items { get; private set; }
         public bool LogItemMetadata { get; private set; }
 
@@ -61,7 +61,7 @@ DateTime eventTimestamp
         internal static Func<TaskParameterEventArgs, string> MessageGetter = args =>
         {
             var sb = new StringBuilder();
-            sb.AppendLine($"{args.Kind}: {args.ItemName}");
+            sb.AppendLine($"{args.Kind}: {args.ItemType}");
             foreach (var item in args.Items)
             {
                 sb.AppendLine(item.ToString());
@@ -82,7 +82,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             RawTimestamp = reader.ReadTimestamp();
             BuildEventContext = reader.ReadOptionalBuildEventContext();
             Kind = (TaskParameterMessageKind)reader.Read7BitEncodedInt();
-            ItemName = reader.ReadString();
+            ItemType = reader.ReadString();
             Items = ReadItems(reader);
         }
 
@@ -129,7 +129,7 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.WriteTimestamp(RawTimestamp);
             writer.WriteOptionalBuildEventContext(BuildEventContext);
             writer.Write7BitEncodedInt((int)Kind);
-            writer.Write(ItemName);
+            writer.Write(ItemType);
             WriteItems(writer, Items);
         }
 
