diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
index 4ddc0ffb430..b1acc384d75 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
@@ -78,8 +78,8 @@ private enum SkipNonExistentProjectsBehavior
         public ITaskHost HostObject { get; set; }
 
         /// <summary>
-        /// A list of property name/value pairs to apply as global properties to 
-        /// the child project.  
+        /// A list of property name/value pairs to apply as global properties to
+        /// the child project.
         /// A typical input: "propname1=propvalue1", "propname2=propvalue2", "propname3=propvalue3".
         /// </summary>
         /// <remarks>
@@ -87,7 +87,7 @@ private enum SkipNonExistentProjectsBehavior
         ///     <MSBuild
         ///         Properties="TargetPath=@(OutputPathItem)" />
         /// The engine fails on this because it doesn't like item lists being concatenated with string
-        /// constants when the data is being passed into an array parameter.  So the workaround is to 
+        /// constants when the data is being passed into an array parameter.  So the workaround is to
         /// write this in the project file:
         ///     <MSBuild
         ///         Properties="@(OutputPathItem->'TargetPath=%(Identity)')" />
@@ -144,7 +144,7 @@ private enum SkipNonExistentProjectsBehavior
         public string ToolsVersion { get; set; } = null;
 
         /// <summary>
-        /// When this is true we call the engine with all the projects at once instead of 
+        /// When this is true we call the engine with all the projects at once instead of
         /// calling the engine once per project
         /// </summary>
         public bool BuildInParallel { get; set; }
@@ -201,7 +201,7 @@ public string SkipNonexistentProjects
 
         /// <summary>
         /// Un-escape Targets, Properties (including Properties and AdditionalProperties as Project item metadata)
-        /// will be un-escaped before processing. e.g. %3B (an escaped ';') in the string for any of them will 
+        /// will be un-escaped before processing. e.g. %3B (an escaped ';') in the string for any of them will
         /// be treated as if it were an un-escaped ';'
         /// </summary>
         public string[] TargetAndPropertyListSeparators { get; set; } = null;
@@ -211,7 +211,7 @@ public string SkipNonexistentProjects
         /// <see cref="Projects"/> to build. This only applies to this build request (if another target calls the
         /// "missing target" later this will still result in an error).
         /// <remarks>
-        /// This could be useful when implementing a breaking protocol change between projects or stubbing behavior 
+        /// This could be useful when implementing a breaking protocol change between projects or stubbing behavior
         /// which may not make sense in all project types (e.g. Restore).
         /// </remarks>
         /// </summary>
@@ -264,7 +264,7 @@ public async Task<bool> ExecuteInternal()
             }
 
             bool isRunningMultipleNodes = BuildEngine2.IsRunningMultipleNodes;
-            // If we are in single proc mode and stopOnFirstFailure is true, we cannot build in parallel because 
+            // If we are in single proc mode and stopOnFirstFailure is true, we cannot build in parallel because
             // building in parallel sends all of the projects to the engine at once preventing us from not sending
             // any more projects after the first failure. Therefore, to preserve compatibility with whidbey if we are in this situation disable buildInParallel.
             if (!isRunningMultipleNodes && StopOnFirstFailure && BuildInParallel)
@@ -284,8 +284,8 @@ public async Task<bool> ExecuteInternal()
             }
 
             // This is a list of string[].  That is, each element in the list is a string[].  Each
-            // string[] represents a set of target names to build.  Depending on the value 
-            // of the RunEachTargetSeparately parameter, we each just call the engine to run all 
+            // string[] represents a set of target names to build.  Depending on the value
+            // of the RunEachTargetSeparately parameter, we each just call the engine to run all
             // the targets together, or we call the engine separately for each target.
             List<string[]> targetLists = CreateTargetLists(Targets, RunEachTargetSeparately);
 
@@ -314,14 +314,14 @@ public async Task<bool> ExecuteInternal()
             {
                 ITaskItem project = Projects[i];
 
-                string projectPath = FileUtilities.AttemptToShortenPath(project.ItemSpec);
+                string projectPath = FileUtilities.GetFullPathNoThrow(project.ItemSpec);
 
                 if (StopOnFirstFailure && !success)
                 {
                     // Inform the user that we skipped the remaining projects because StopOnFirstFailure=true.
                     Log.LogMessageFromResources(MessageImportance.Low, "MSBuild.SkippingRemainingProjects");
 
-                    // We have encountered a failure.  Caller has requested that we not 
+                    // We have encountered a failure.  Caller has requested that we not
                     // continue with remaining projects.
                     break;
                 }
@@ -495,8 +495,8 @@ internal static List<string[]> CreateTargetLists(
             bool runEachTargetSeparately)
         {
             // This is a list of string[].  That is, each element in the list is a string[].  Each
-            // string[] represents a set of target names to build.  Depending on the value 
-            // of the RunEachTargetSeparately parameter, we each just call the engine to run all 
+            // string[] represents a set of target names to build.  Depending on the value
+            // of the RunEachTargetSeparately parameter, we each just call the engine to run all
             // the targets together, or we call the engine separately for each target.
             var targetLists = new List<string[]>();
             if (runEachTargetSeparately && targets?.Length > 0)
@@ -550,7 +550,7 @@ internal static async Task<bool> ExecuteTargets(
                 if (projects[i] != null)
                 {
                     // Retrieve projectDirectory only the first time.  It never changes anyway.
-                    string projectPath = FileUtilities.AttemptToShortenPath(projects[i].ItemSpec);
+                    string projectPath = FileUtilities.GetFullPathNoThrow(projects[i].ItemSpec);
                     projectDirectory[i] = Path.GetDirectoryName(projectPath);
                     projectNames[i] = projects[i].ItemSpec;
                     toolsVersions[i] = toolsVersion;
@@ -648,12 +648,12 @@ internal static async Task<bool> ExecuteTargets(
                     // Inform the user that we skipped the remaining targets StopOnFirstFailure=true.
                     log.LogMessageFromResources(MessageImportance.Low, "MSBuild.SkippingRemainingTargets");
 
-                    // We have encountered a failure.  Caller has requested that we not 
+                    // We have encountered a failure.  Caller has requested that we not
                     // continue with remaining targets.
                     break;
                 }
 
-                // Send the project off to the build engine.  By passing in null to the 
+                // Send the project off to the build engine.  By passing in null to the
                 // first param, we are indicating that the project to build is the same
                 // as the *calling* project file.
 
@@ -677,7 +677,7 @@ internal static async Task<bool> ExecuteTargets(
                             {
                                 foreach (ITaskItem outputItemFromTarget in outputItemsFromTarget)
                                 {
-                                    // No need to rebase if the calling project is the same as the callee project 
+                                    // No need to rebase if the calling project is the same as the callee project
                                     // (project == null).  Also no point in trying to copy item metadata either,
                                     // because no items were passed into the Projects parameter!
                                     if (projects[i] != null)
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 91df12ffd9b..b1cee220d8b 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -1191,8 +1191,12 @@ internal static string MakeRelative(string basePath, string path)
         /// </summary>
         internal static string AttemptToShortenPath(string path)
         {
-            // Attempt to make it shorter -- perhaps there are some \..\ elements
-            return GetFullPathNoThrow(path);
+            if (IsPathTooLong(path) || IsPathTooLongIfRooted(path))
+            {
+                // Attempt to make it shorter -- perhaps there are some \..\ elements
+                path = GetFullPathNoThrow(path);
+            }
+            return FixFilePath(path);
         }
 
         private static bool IsPathTooLong(string path)
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index b2c28967c6b..0ff3a0bace4 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Tasks
 {
     /// <remarks>
     /// This class implements the "MSBuild" task, which hands off child project files to the MSBuild engine to be built.
-    /// Marked RunInMTA because there is no reason MSBuild tasks should run on a thread other than that of the 
+    /// Marked RunInMTA because there is no reason MSBuild tasks should run on a thread other than that of the
     /// RequestBuilder which spawned them.
     /// </remarks>
     [RunInMTA]
@@ -56,8 +56,8 @@ private enum SkipNonExistentProjectsBehavior
         private SkipNonExistentProjectsBehavior _skipNonExistentProjects = SkipNonExistentProjectsBehavior.Undefined;
 
         /// <summary>
-        /// A list of property name/value pairs to apply as global properties to 
-        /// the child project.  
+        /// A list of property name/value pairs to apply as global properties to
+        /// the child project.
         /// A typical input: "propname1=propvalue1", "propname2=propvalue2", "propname3=propvalue3".
         /// </summary>
         /// <remarks>
@@ -66,7 +66,7 @@ private enum SkipNonExistentProjectsBehavior
         ///     The fact that this is a `string[]` makes the following illegal:
         ///         `<MSBuild Properties="TargetPath=@(OutputPathItem)" />`
         ///     The engine fails on this because it doesn't like item lists being concatenated with string
-        ///     constants when the data is being passed into an array parameter.  So the workaround is to 
+        ///     constants when the data is being passed into an array parameter.  So the workaround is to
         ///     write this in the project file:
         ///         `<MSBuild Properties="@(OutputPathItem-&gt;'TargetPath=%(Identity)')" />`
         ///     ]]>
@@ -124,7 +124,7 @@ private enum SkipNonExistentProjectsBehavior
         public string ToolsVersion { get; set; }
 
         /// <summary>
-        /// When this is true we call the engine with all the projects at once instead of 
+        /// When this is true we call the engine with all the projects at once instead of
         /// calling the engine once per project
         /// </summary>
         public bool BuildInParallel { get; set; }
@@ -182,7 +182,7 @@ public string SkipNonexistentProjects
 
         /// <summary>
         /// Unescape Targets, Properties (including Properties and AdditionalProperties as Project item metadata)
-        /// will be un-escaped before processing. e.g. %3B (an escaped ';') in the string for any of them will 
+        /// will be un-escaped before processing. e.g. %3B (an escaped ';') in the string for any of them will
         /// be treated as if it were an un-escaped ';'
         /// </summary>
         public string[] TargetAndPropertyListSeparators { get; set; }
@@ -229,7 +229,7 @@ public override bool Execute()
             }
 
             bool isRunningMultipleNodes = BuildEngine2.IsRunningMultipleNodes;
-            // If we are in single proc mode and stopOnFirstFailure is true, we cannot build in parallel because 
+            // If we are in single proc mode and stopOnFirstFailure is true, we cannot build in parallel because
             // building in parallel sends all of the projects to the engine at once preventing us from not sending
             // any more projects after the first failure. Therefore, to preserve compatibility with whidbey if we are in this situation disable buildInParallel.
             if (!isRunningMultipleNodes && StopOnFirstFailure && BuildInParallel)
@@ -249,8 +249,8 @@ public override bool Execute()
             }
 
             // This is a list of string[].  That is, each element in the list is a string[].  Each
-            // string[] represents a set of target names to build.  Depending on the value 
-            // of the RunEachTargetSeparately parameter, we each just call the engine to run all 
+            // string[] represents a set of target names to build.  Depending on the value
+            // of the RunEachTargetSeparately parameter, we each just call the engine to run all
             // the targets together, or we call the engine separately for each target.
             List<string[]> targetLists = CreateTargetLists(Targets, RunEachTargetSeparately);
 
@@ -279,14 +279,14 @@ public override bool Execute()
             {
                 ITaskItem project = Projects[i];
 
-                string projectPath = FileUtilities.AttemptToShortenPath(project.ItemSpec);
+                string projectPath = FileUtilities.GetFullPathNoThrow(project.ItemSpec);
 
                 if (StopOnFirstFailure && !success)
                 {
                     // Inform the user that we skipped the remaining projects because StopOnFirstFailure=true.
                     Log.LogMessageFromResources(MessageImportance.Low, "MSBuild.SkippingRemainingProjects");
 
-                    // We have encountered a failure.  Caller has requested that we not 
+                    // We have encountered a failure.  Caller has requested that we not
                     // continue with remaining projects.
                     break;
                 }
@@ -451,8 +451,8 @@ private void ExpandAllTargetsAndProperties()
         internal static List<string[]> CreateTargetLists(string[] targets, bool runEachTargetSeparately)
         {
             // This is a list of string[].  That is, each element in the list is a string[].  Each
-            // string[] represents a set of target names to build.  Depending on the value 
-            // of the RunEachTargetSeparately parameter, we each just call the engine to run all 
+            // string[] represents a set of target names to build.  Depending on the value
+            // of the RunEachTargetSeparately parameter, we each just call the engine to run all
             // the targets together, or we call the engine separately for each target.
             var targetLists = new List<string[]>(runEachTargetSeparately ? targets.Length : 1);
             if (runEachTargetSeparately && targets.Length > 0)
@@ -506,7 +506,7 @@ internal static bool ExecuteTargets(
                 if (projects[i] != null)
                 {
                     // Retrieve projectDirectory only the first time.  It never changes anyway.
-                    string projectPath = FileUtilities.AttemptToShortenPath(projects[i].ItemSpec);
+                    string projectPath = FileUtilities.GetFullPathNoThrow(projects[i].ItemSpec);
                     projectDirectory[i] = Path.GetDirectoryName(projectPath);
                     projectNames[i] = projects[i].ItemSpec;
                     toolsVersions[i] = toolsVersion;
@@ -596,12 +596,12 @@ internal static bool ExecuteTargets(
                     // Inform the user that we skipped the remaining targets StopOnFirstFailure=true.
                     log.LogMessageFromResources(MessageImportance.Low, "MSBuild.SkippingRemainingTargets");
 
-                    // We have encountered a failure.  Caller has requested that we not 
+                    // We have encountered a failure.  Caller has requested that we not
                     // continue with remaining targets.
                     break;
                 }
 
-                // Send the project off to the build engine.  By passing in null to the 
+                // Send the project off to the build engine.  By passing in null to the
                 // first param, we are indicating that the project to build is the same
                 // as the *calling* project file.
 
@@ -625,7 +625,7 @@ internal static bool ExecuteTargets(
                             {
                                 foreach (ITaskItem outputItemFromTarget in outputItemsFromTarget)
                                 {
-                                    // No need to rebase if the calling project is the same as the callee project 
+                                    // No need to rebase if the calling project is the same as the callee project
                                     // (project == null).  Also no point in trying to copy item metadata either,
                                     // because no items were passed into the Projects parameter!
                                     if (projects[i] != null)
