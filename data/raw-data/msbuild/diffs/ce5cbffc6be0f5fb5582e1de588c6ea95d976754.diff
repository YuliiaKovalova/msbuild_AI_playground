diff --git a/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs b/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
new file mode 100644
index 00000000000..3b285db56ba
--- /dev/null
+++ b/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
@@ -0,0 +1,51 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+
+namespace Microsoft.Build.Shared.FileSystem
+{
+    /// <summary>
+    /// Legacy implementation for MSBuildTaskHost which is stuck on net20 APIs
+    /// </summary>
+    internal class MSBuildTaskHostFileSystem : IFileSystem
+    {
+        private static readonly MSBuildTaskHostFileSystem Instance = new MSBuildTaskHostFileSystem();
+
+        public static MSBuildTaskHostFileSystem Singleton() => Instance;
+
+        public bool DirectoryEntryExists(string path)
+        {
+            return NativeMethodsShared.FileOrDirectoryExists(path);
+        }
+
+        public bool DirectoryExists(string path)
+        {
+            return NativeMethodsShared.DirectoryExists(path);
+        }
+
+        public IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+        {
+            return Directory.GetDirectories(path, searchPattern, searchOption);
+        }
+
+        public IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+        {
+            return Directory.GetFiles(path, searchPattern, searchOption);
+        }
+
+        public IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+        {
+            ErrorUtilities.VerifyThrow(searchOption == SearchOption.TopDirectoryOnly, $"In net20 {nameof(Directory.GetFileSystemEntries)} does not take a {nameof(SearchOption)} parameter");
+
+            return Directory.GetFileSystemEntries(path, searchPattern);
+        }
+
+        public bool FileExists(string path)
+        {
+            return NativeMethodsShared.FileExists(path);
+        }
+    }
+}
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 766cb9ddecc..b56126a6738 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -171,14 +171,16 @@
       <Link>OutOfProcTaskHostTaskResult.cs</Link>
     </Compile>
     <Compile Include="..\Shared\TaskLoader.cs" />
-    <Compile Include="..\Shared\LoadedType.cs">
-    </Compile>
-    <Compile Include="..\Shared\AssemblyLoadInfo.cs">
-    </Compile>
+    <Compile Include="..\Shared\LoadedType.cs" />
+    <Compile Include="..\Shared\AssemblyLoadInfo.cs" />
     <Compile Include="..\Shared\TaskHostTaskCancelled.cs" />
     <Compile Include="..\Shared\TaskParameter.cs" />
-    <Compile Include="..\Shared\AssemblyNameExtension.cs">
-    </Compile>
+    <Compile Include="..\Shared\AssemblyNameExtension.cs" />
+
+    <Compile Include="..\Shared\FileSystem\IFileSystem.cs" />
+    <Compile Include="..\Shared\FileSystem\FileSystems.cs" />
+    <Compile Include="FileSystem\MSBuildTaskHostFileSystem.cs" />
+
     <Compile Include="..\MSBuild\NodeEndpointOutOfProcTaskHost.cs" />
     <Compile Include="..\MSBuild\OutOfProcTaskHostNode.cs" />
     <Compile Include="..\MSBuild\OutOfProcTaskAppDomainWrapperBase.cs">
diff --git a/src/Shared/FileSystem/FileSystems.cs b/src/Shared/FileSystem/FileSystems.cs
index 1db7bb16f23..63379a92bbf 100644
--- a/src/Shared/FileSystem/FileSystems.cs
+++ b/src/Shared/FileSystem/FileSystems.cs
@@ -14,6 +14,9 @@ internal static class FileSystems
 
         private static IFileSystem GetFileSystem()
         {
+#if CLR2COMPATIBILITY
+            return MSBuildTaskHostFileSystem.Singleton();
+#else
             if (NativeMethodsShared.IsWindows)
             {
                 return MSBuildOnWindowsFileSystem.Singleton();
@@ -22,6 +25,7 @@ private static IFileSystem GetFileSystem()
             {
                 return ManagedFileSystem.Singleton();
             }
+#endif
         }
     }
 }
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 042da73e364..ac2d3d37588 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -4,7 +4,6 @@
 using System;
 #if !CLR2COMPATIBILITY
 using System.Collections.Concurrent;
-using Microsoft.Build.Shared.FileSystem;
 #endif
 using System.Collections.Generic;
 using System.Diagnostics;
@@ -18,6 +17,7 @@
 using System.Text;
 using System.Threading;
 using Microsoft.Build.Utilities;
+using Microsoft.Build.Shared.FileSystem;
 
 namespace Microsoft.Build.Shared
 {
@@ -87,10 +87,10 @@ internal static void ClearCacheDirectoryPath()
 
 #if !CLR2COMPATIBILITY
         private static readonly ConcurrentDictionary<string, bool> FileExistenceCache = new ConcurrentDictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
-
-        private static readonly IFileSystem DefaultFileSystem = FileSystems.Default;
+#else
+        private static readonly Microsoft.Build.Shared.Concurrent.ConcurrentDictionary<string, bool> FileExistenceCache = new Microsoft.Build.Shared.Concurrent.ConcurrentDictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
 #endif
-
+        private static readonly IFileSystem DefaultFileSystem = FileSystems.Default;
         private enum GetFileAttributesResult
         {
             Directory,
@@ -736,26 +736,19 @@ internal static FileInfo GetFileInfoNoThrow(string filePath)
         /// Returns if the directory exists
         /// </summary>
         /// <param name="fullPath">Full path to the directory in the filesystem</param>
+        /// <param name="fileSystem">The file system</param>
         /// <returns></returns>
-        internal static bool DirectoryExistsNoThrow(string fullPath
-#if !CLR2COMPATIBILITY
-            ,IFileSystem fileSystem = null
-#endif
-            )
+        internal static bool DirectoryExistsNoThrow(string fullPath, IFileSystem fileSystem = null)
         {
             fullPath = AttemptToShortenPath(fullPath);
 
             try
             {
-#if CLR2COMPATIBILITY
-                return NativeMethodsShared.DirectoryExists(fullPath);
-#else
                 fileSystem = fileSystem ?? DefaultFileSystem;
 
                 return Traits.Instance.CacheFileExistence
                     ? FileExistenceCache.GetOrAdd(fullPath, fileSystem.DirectoryExists)
                     : fileSystem.DirectoryExists(fullPath);
-#endif
 
             }
             catch
@@ -768,26 +761,19 @@ internal static bool DirectoryExistsNoThrow(string fullPath
         /// Returns if the directory exists
         /// </summary>
         /// <param name="fullPath">Full path to the file in the filesystem</param>
+        /// <param name="fileSystem">The file system</param>
         /// <returns></returns>
-        internal static bool FileExistsNoThrow(string fullPath
-#if !CLR2COMPATIBILITY
-            ,IFileSystem fileSystem = null
-#endif
-        )
+        internal static bool FileExistsNoThrow(string fullPath, IFileSystem fileSystem = null)
         {
             fullPath = AttemptToShortenPath(fullPath);
 
             try
             {
-#if CLR2COMPATIBILITY
-                return NativeMethodsShared.FileExists(fullPath);
-#else
                 fileSystem = fileSystem ?? DefaultFileSystem;
 
                 return Traits.Instance.CacheFileExistence
                     ? FileExistenceCache.GetOrAdd(fullPath, fileSystem.FileExists)
                     : fileSystem.FileExists(fullPath);
-#endif
 
             }
             catch
@@ -802,26 +788,17 @@ internal static bool FileExistsNoThrow(string fullPath
         /// Does not throw IO exceptions, to match Directory.Exists and File.Exists.
         /// Unlike calling each of those in turn it only accesses the disk once, which is faster.
         /// </summary>
-        internal static bool FileOrDirectoryExistsNoThrow(string fullPath
-#if !CLR2COMPATIBILITY
-        ,IFileSystem fileSystem = null
-#endif
-        )
+        internal static bool FileOrDirectoryExistsNoThrow(string fullPath, IFileSystem fileSystem = null)
         {
             fullPath = AttemptToShortenPath(fullPath);
 
             try
             {
-#if CLR2COMPATIBILITY
-                return NativeMethodsShared.FileOrDirectoryExists(fullPath);
-#else
                 fileSystem = fileSystem ?? DefaultFileSystem;
 
                 return Traits.Instance.CacheFileExistence
                     ? FileExistenceCache.GetOrAdd(fullPath, fileSystem.DirectoryEntryExists)
                     : fileSystem.DirectoryEntryExists(fullPath);
-#endif
-
             }
             catch
             {
