diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 3652cbef271..f0d5ce5a2c8 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -35,12 +35,12 @@ public static int ANSIBreakpoint(string text, int position)
 
         public static List<string> ANSIWrap(string text, int position)
         {
-            // string text = ANSIRemove(text);
+            int breakpoint = ANSIBreakpoint(text, position);
             List<string> result = new();
-            while (text.Length > position)
+            while (text.Length > breakpoint)
             {
-                result.Add(text.Substring(0, position));
-                text = text.Substring(position);
+                result.Add(text.Substring(0, breakpoint));
+                text = text.Substring(breakpoint);
             }
             result.Add(text);
             return result;
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index c8f1d1428ed..e6744a693fc 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -51,11 +51,6 @@ public void Initialize(IEventSource eventSource)
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine("");
-            /*for (int i = 0; i < 200; i++)
-            {
-                FancyLoggerBuffer.WriteNewLine($"{i} ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ");
-                FancyLoggerBuffer.WriteNewLine("===");
-            }*/
         }
 
         // Build
@@ -65,7 +60,6 @@ void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         {
             Succeeded = e.Succeeded;
-            // Console.WriteLine(LoggerFormatting.Bold("[Build]") + "\t Finished");
         }
 
         // Project
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 85bcefae719..43bc950857d 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -15,8 +15,18 @@ namespace Microsoft.Build.Logging.FancyLogger
     public class FancyLoggerBufferLine
     {
         private static int Counter = 0;
+        private string _text = string.Empty;
+        public List<string> WrappedText { get; private set; } = new();
         public int Id;
-        public string Text;
+        public string Text
+        {
+            get => _text;
+            set
+            {
+                _text = value;
+                WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth + 1);
+            }
+        }
 
         public FancyLoggerBufferLine()
         {
@@ -95,9 +105,10 @@ public static void Render()
             );
             // Get lines with wrappings
             List<string> lineContents = new();
-            foreach (var line in Lines)
+            int lineCount = Lines.Count;
+            for (int i = 0; i < lineCount; i++)
             {
-                lineContents.AddRange(ANSIBuilder.ANSIWrap(line.Text, Console.BufferWidth));
+                lineContents.AddRange(Lines[i].WrappedText);
             }
             // Print lines
             for (int i = 0; i < Console.BufferHeight - 3; i++)
@@ -112,18 +123,6 @@ public static void Render()
             Console.Out.FlushAsync();
         }
         #endregion
-
-        /* public static List<string> UpdateLinesWIthWrappings()
-        {
-            List<string> result = new();
-            int lineCount = Lines.Count;
-            for (int i = 0; i < lineCount; i++)
-            {
-                result.AddRange(ANSIBuilder.ANSIWrap(Lines[i].Text, 10));
-            }
-            return result;
-        } */
-
         #region Line identification
         public static int GetLineIndexById(int lineId)
         {
