diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 82497b9932a..ad59f4d890f 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -320,7 +320,6 @@ public Exec() { }
         public bool ConsoleToMSBuild { get { throw null; } set { } }
         public string CustomErrorRegularExpression { get { throw null; } set { } }
         public string CustomWarningRegularExpression { get { throw null; } set { } }
-        public bool EscapeSpecialCharacters { get { throw null; } set { } }
         public bool IgnoreExitCode { get { throw null; } set { } }
         public bool IgnoreStandardErrorWarningFormat { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index be1e1f567cc..14e40af12dd 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -250,7 +250,6 @@ public Exec() { }
         public bool ConsoleToMSBuild { get { throw null; } set { } }
         public string CustomErrorRegularExpression { get { throw null; } set { } }
         public string CustomWarningRegularExpression { get { throw null; } set { } }
-        public bool EscapeSpecialCharacters { get { throw null; } set { } }
         public bool IgnoreExitCode { get { throw null; } set { } }
         public bool IgnoreStandardErrorWarningFormat { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index d7aec598ab6..8d46c57d452 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -63,7 +63,6 @@ public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile()
 
                 // Now run the Exec task on a simple command.
                 Exec exec = PrepareExec("echo Hello World!");
-                exec.EscapeSpecialCharacters = true;
                 exec.Execute().ShouldBeTrue();
             }
         }
@@ -83,11 +82,35 @@ public void EscapeParenthesesInPathToGeneratedBatchFile_DuplicateCharactersToEsc
 
                 // Now run the Exec task on a simple command.
                 Exec exec = PrepareExec("echo Hello World!");
-                exec.EscapeSpecialCharacters = true;
                 exec.Execute().ShouldBeTrue();
             }
         }
 
+        [Fact]
+        [Trait("Category", "mono-osx-failing")]
+        [Trait("Category", "netcore-osx-failing")]
+        [Trait("Category", "netcore-linux-failing")]
+        public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile_DisabledUnderChangeWave16_10()
+        {
+            using (var testEnvironment = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                testEnvironment.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                var newTempPath = testEnvironment.CreateNewTempPathWithSubfolder("hello()w]o(rld)").TempPath;
+
+                string tempPath = Path.GetTempPath();
+                Assert.StartsWith(newTempPath, tempPath);
+
+                // Now run the Exec task on a simple command.
+                Exec exec = PrepareExec("echo Hello World!");
+                exec.Execute().ShouldBeFalse();
+
+                ChangeWaves.ResetStateForTests();
+            }
+        }
+
         /// <summary>
         /// Ensures that calling the Exec task does not leave any extra TEMP files
         /// lying around.
@@ -963,13 +986,13 @@ echo line 3"" />
         [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        public void EndToEndMultilineExec_WithCharactersToEscapeMetadata()
+        public void EndToEndMultilineExec_EscapeSpecialCharacters()
         {
             using (var env = TestEnvironment.Create(_output))
             {
                 var testProject = env.CreateTestProjectWithFiles(@"<Project>
 <Target Name=""ExecCommand"">
-  <Exec EscapeSpecialCharacters=""true"" Command=""echo Hello, World!"" />
+  <Exec Command=""echo Hello, World!"" />
    </Target>
 </Project>");
 
@@ -1011,6 +1034,64 @@ public void EndToEndMultilineExec_WithCharactersToEscapeMetadata()
                 }
             }
         }
+
+        [Fact]
+        [Trait("Category", "mono-osx-failing")]
+        [Trait("Category", "netcore-osx-failing")]
+        [Trait("Category", "netcore-linux-failing")]
+        public void EndToEndMultilineExec_EscapeSpecialCharacters_DisabledUnderChangeWave16_10()
+        {
+            using (var env = TestEnvironment.Create(_output))
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                var testProject = env.CreateTestProjectWithFiles(@"<Project>
+<Target Name=""ExecCommand"">
+  <Exec Command=""echo Hello, World!"" />
+   </Target>
+</Project>");
+
+                // Ensure path has subfolders
+                var newTempPath = env.CreateNewTempPathWithSubfolder("hello()wo(rld)").TempPath;
+                string tempPath = Path.GetTempPath();
+                Assert.StartsWith(newTempPath, tempPath);
+
+                using (var buildManager = new BuildManager())
+                {
+                    MockLogger logger = new MockLogger(_output, profileEvaluation: false, printEventsToStdout: false);
+
+                    var parameters = new BuildParameters()
+                    {
+                        Loggers = new[] { logger },
+                    };
+
+                    var collection = new ProjectCollection(
+                        new Dictionary<string, string>(),
+                        new[] { logger },
+                        remoteLoggers: null,
+                        ToolsetDefinitionLocations.Default,
+                        maxNodeCount: 1,
+                        onlyLogCriticalEvents: false,
+                        loadProjectsReadOnly: true);
+
+                    var project = collection.LoadProject(testProject.ProjectFile).CreateProjectInstance();
+
+                    var request = new BuildRequestData(
+                        project,
+                        targetsToBuild: new[] { "ExecCommand" },
+                        hostServices: null);
+
+                    var result = buildManager.Build(parameters, request);
+
+                    logger.AssertLogContains("Hello, World!");
+
+                    result.OverallResult.ShouldBe(BuildResultCode.Failure);
+                }
+                ChangeWaves.ResetStateForTests();
+            }
+        }
     }
 
     internal class ExecWrapper : Exec
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index da4d46fdbb9..e1cd9b3818d 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -54,9 +54,8 @@ public Exec()
         private Encoding _standardOutputEncoding;
         private string _command;
 
-        // '^' before _any_ character escapes that character. Don't escape '^'.
-        // '&' and ' ' also need to be escaped, but that's handled already.
-        private char[] _charactersToEscape = { '(', ')', '=', ';', '!', ','};
+        // '^' before _any_ character escapes that character, don't escape it.
+        private char[] _charactersToEscape = { '(', ')', '=', ';', '!', ',', '&', ' '};
 
         #endregion
 
@@ -192,8 +191,6 @@ public ITaskItem[] Outputs
         [Output]
         public ITaskItem[] ConsoleOutput => !ConsoleToMSBuild ? Array.Empty<ITaskItem>(): _nonEmptyOutput.ToArray();
 
-        public bool EscapeSpecialCharacters { get; set; } = false;
-
         #endregion
 
         #region Methods
@@ -615,28 +612,34 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
                     }
                     commandLine.AppendSwitch("/C"); // run then terminate
 
-                    // If for some crazy reason the path has a & character and a space in it
-                    // then get the short path of the temp path, which should not have spaces in it
-                    if (batchFileForCommandLine.Contains("&") && !batchFileForCommandLine.Contains("^&"))
+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
                     {
-                        batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
-                    }
+                        StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
 
-                    StringBuilder fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
+                        // Escape special characters that need to be escaped.
+                        for (int i = 0; i < batchFileForCommandLine.Length; i++)
+                        {
+                            char c = batchFileForCommandLine[i];
 
-                    // Escape any '&' or special characters when the user specifies EscapeSpecialCharacters.
-                    for (int i = 0; i < batchFileForCommandLine.Length; i++)
+                            if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
+                            {
+                                fileName.Append('^');
+                            }
+                            fileName.Append(c);
+                        }
+                        batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
+                    }
+                    else
                     {
-                        char c = batchFileForCommandLine[i];
-
-                        if ((c == '&' || ShouldEscapeCharacter(c)) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
+                        // If for some crazy reason the path has a & character and a space in it
+                        // then get the short path of the temp path, which should not have spaces in it
+                        // and then escape the &
+                        if (batchFileForCommandLine.Contains("&") && !batchFileForCommandLine.Contains("^&"))
                         {
-                            fileName.Append('^');
+                            batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
+                            batchFileForCommandLine = batchFileForCommandLine.Replace("&", "^&");
                         }
-                        fileName.Append(c);
                     }
-
-                    batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
                 }
 
                 commandLine.AppendFileNameIfNotNull(batchFileForCommandLine);
@@ -645,11 +648,6 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
 
         private bool ShouldEscapeCharacter(char c)
         {
-            if (!EscapeSpecialCharacters)
-            {
-                return false;
-            }
-
             for (int i = 0; i < _charactersToEscape.Length; i++)
             {
                 if (c == _charactersToEscape[i])
