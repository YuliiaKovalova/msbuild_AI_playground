diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 451210a6a6a..de1f2968390 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -546,6 +546,19 @@ public TelemetryEventArgs() { }
     }
     public delegate void TelemetryEventHandler(object sender, Microsoft.Build.Framework.TelemetryEventArgs e);
 }
+namespace Microsoft.Build.Framework.EvaluationContext
+{
+    public abstract partial class EvaluationContext
+    {
+        protected EvaluationContext() { }
+    }
+    public abstract partial class EvaluationContextFactory
+    {
+        protected EvaluationContextFactory() { }
+        public abstract Microsoft.Build.Framework.EvaluationContext.EvaluationContext CreateContext();
+        public abstract Microsoft.Build.Framework.EvaluationContext.EvaluationContext CreateNullContext();
+    }
+}
 namespace Microsoft.Build.Framework.Profiler
 {
     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index e9ce5e9b222..ef647225b50 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -543,6 +543,19 @@ public TelemetryEventArgs() { }
     }
     public delegate void TelemetryEventHandler(object sender, Microsoft.Build.Framework.TelemetryEventArgs e);
 }
+namespace Microsoft.Build.Framework.EvaluationContext
+{
+    public abstract partial class EvaluationContext
+    {
+        protected EvaluationContext() { }
+    }
+    public abstract partial class EvaluationContextFactory
+    {
+        protected EvaluationContextFactory() { }
+        public abstract Microsoft.Build.Framework.EvaluationContext.EvaluationContext CreateContext();
+        public abstract Microsoft.Build.Framework.EvaluationContext.EvaluationContext CreateNullContext();
+    }
+}
 namespace Microsoft.Build.Framework.Profiler
 {
     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index 4577cb10c3b..677989b4adf 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -497,6 +497,19 @@ internal UsingTaskParameterGroupElement() { }
         protected override Microsoft.Build.Construction.ProjectElement CreateNewInstance(Microsoft.Build.Construction.ProjectRootElement owner) { throw null; }
     }
 }
+namespace Microsoft.Build.Definition
+{
+    public partial class ProjectConstructionInfo
+    {
+        public ProjectConstructionInfo() { }
+        public Microsoft.Build.Framework.EvaluationContext.EvaluationContext EvaluationContext { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public System.Collections.Generic.IDictionary<string, string> GlobalProperties { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public Microsoft.Build.Evaluation.ProjectLoadSettings LoadSettings { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public Microsoft.Build.Evaluation.ProjectCollection ProjectCollection { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public string SubToolsetVersion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public string ToolsVersion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+    }
+}
 namespace Microsoft.Build.Evaluation
 {
     public partial class GlobResult
@@ -554,6 +567,7 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<string>> ConditionedProperties { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public string DirectoryPath { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public bool DisableMarkDirty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public static Microsoft.Build.Framework.EvaluationContext.EvaluationContextFactory EvaluationContextFactory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
         public int EvaluationCounter { get { throw null; } }
         public string FullPath { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } [System.Diagnostics.DebuggerStepThroughAttribute]set { } }
         public System.Collections.Generic.IDictionary<string, string> GlobalProperties { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
@@ -592,6 +606,9 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance() { throw null; }
         public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings settings) { throw null; }
         public string ExpandString(string unexpandedValue) { throw null; }
+        public static Microsoft.Build.Evaluation.Project FromFile(string file, Microsoft.Build.Definition.ProjectConstructionInfo info) { throw null; }
+        public static Microsoft.Build.Evaluation.Project FromProjectRootElement(Microsoft.Build.Construction.ProjectRootElement rootElement, Microsoft.Build.Definition.ProjectConstructionInfo info) { throw null; }
+        public static Microsoft.Build.Evaluation.Project FromXmlReader(System.Xml.XmlReader reader, Microsoft.Build.Definition.ProjectConstructionInfo info) { throw null; }
         public System.Collections.Generic.List<Microsoft.Build.Evaluation.GlobResult> GetAllGlobs() { throw null; }
         public System.Collections.Generic.List<Microsoft.Build.Evaluation.GlobResult> GetAllGlobs(string itemType) { throw null; }
         public static string GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem item) { throw null; }
@@ -612,6 +629,7 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public static string GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty property) { throw null; }
         public void MarkDirty() { }
         public void ReevaluateIfNecessary() { }
+        public void ReevaluateIfNecessary(Microsoft.Build.Framework.EvaluationContext.EvaluationContext evaluationContext) { }
         public bool RemoveGlobalProperty(string name) { throw null; }
         public bool RemoveItem(Microsoft.Build.Evaluation.ProjectItem item) { throw null; }
         public void RemoveItems(System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem> items) { }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index 0771aa35b16..7e476b473b1 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -497,6 +497,19 @@ internal UsingTaskParameterGroupElement() { }
         protected override Microsoft.Build.Construction.ProjectElement CreateNewInstance(Microsoft.Build.Construction.ProjectRootElement owner) { throw null; }
     }
 }
+namespace Microsoft.Build.Definition
+{
+    public partial class ProjectConstructionInfo
+    {
+        public ProjectConstructionInfo() { }
+        public Microsoft.Build.Framework.EvaluationContext.EvaluationContext EvaluationContext { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public System.Collections.Generic.IDictionary<string, string> GlobalProperties { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public Microsoft.Build.Evaluation.ProjectLoadSettings LoadSettings { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public Microsoft.Build.Evaluation.ProjectCollection ProjectCollection { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public string SubToolsetVersion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public string ToolsVersion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+    }
+}
 namespace Microsoft.Build.Evaluation
 {
     public partial class GlobResult
@@ -554,6 +567,7 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<string>> ConditionedProperties { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public string DirectoryPath { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public bool DisableMarkDirty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public static Microsoft.Build.Framework.EvaluationContext.EvaluationContextFactory EvaluationContextFactory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
         public int EvaluationCounter { get { throw null; } }
         public string FullPath { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } [System.Diagnostics.DebuggerStepThroughAttribute]set { } }
         public System.Collections.Generic.IDictionary<string, string> GlobalProperties { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
@@ -592,6 +606,9 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance() { throw null; }
         public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings settings) { throw null; }
         public string ExpandString(string unexpandedValue) { throw null; }
+        public static Microsoft.Build.Evaluation.Project FromFile(string file, Microsoft.Build.Definition.ProjectConstructionInfo info) { throw null; }
+        public static Microsoft.Build.Evaluation.Project FromProjectRootElement(Microsoft.Build.Construction.ProjectRootElement rootElement, Microsoft.Build.Definition.ProjectConstructionInfo info) { throw null; }
+        public static Microsoft.Build.Evaluation.Project FromXmlReader(System.Xml.XmlReader reader, Microsoft.Build.Definition.ProjectConstructionInfo info) { throw null; }
         public System.Collections.Generic.List<Microsoft.Build.Evaluation.GlobResult> GetAllGlobs() { throw null; }
         public System.Collections.Generic.List<Microsoft.Build.Evaluation.GlobResult> GetAllGlobs(string itemType) { throw null; }
         public static string GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem item) { throw null; }
@@ -612,6 +629,7 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public static string GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty property) { throw null; }
         public void MarkDirty() { }
         public void ReevaluateIfNecessary() { }
+        public void ReevaluateIfNecessary(Microsoft.Build.Framework.EvaluationContext.EvaluationContext evaluationContext) { }
         public bool RemoveGlobalProperty(string name) { throw null; }
         public bool RemoveItem(Microsoft.Build.Evaluation.ProjectItem item) { throw null; }
         public void RemoveItems(System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem> items) { }
