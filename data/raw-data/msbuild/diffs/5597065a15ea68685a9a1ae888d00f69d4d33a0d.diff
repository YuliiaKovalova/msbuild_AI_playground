diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 14a6d8b77fa..0ac9bc3c16e 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -20,6 +20,28 @@ internal class LiveLogger : ILogger
         public LoggerVerbosity Verbosity { get; set; }
         public string Parameters { get; set; }
 
+        /// <summary>
+        /// List of events the logger needs as parameters to the <see cref="ConfigurableForwardingLogger"/>.
+        /// </summary>
+        /// <remarks>
+        /// If LiveLogger runs as a distributed logger, MSBuild out-of-proc nodes might filter the events that will go to the main node using an instance of <see cref="ConfigurableForwardingLogger"/> with the following parameters.
+        /// </remarks>
+        public static readonly string[] ConfigurableForwardingLoggerParameters =
+        {
+            "BUILDSTARTEDEVENT",
+            "PROJECTSTARTEDEVENT",
+            "TARGETSTARTEDEVENT",
+            "TASKSTARTEDEVENT",
+            "BUILDFINISHEDEVENT",
+            "PROJECTFINISHEDEVENT",
+            "TARGETFINISHEDEVENT",
+            "HIGHMESSAGEEVENT",
+            "NORMALMESSAGEEVENT",
+            "LOWMESSAGEEVENT",
+            "WARNINGEVENT",
+            "ERROREVENT"
+        };
+
         public LiveLogger()
         {
             Parameters = "";
@@ -27,7 +49,7 @@ public LiveLogger()
 
         public void Initialize(IEventSource eventSource)
         {
-            // Register for different events
+            // Register for different events. Make sure that ConfigurableForwardingLoggerParameters are in sync with them.
             // Started
             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 92d64fc8401..5acb2336125 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -3254,7 +3254,7 @@ private static ILogger[] ProcessLoggingSwitches(
                 (liveLoggerCommandLineOptIn || Environment.GetEnvironmentVariable("MSBUILDFANCYLOGGER") == "true" || Environment.GetEnvironmentVariable("MSBUILDLIVELOGGER") == "true")
                 && DoesEnvironmentSupportLiveLogger())
             {
-                ProcessLiveLogger(noConsoleLogger, loggers);
+                ProcessLiveLogger(noConsoleLogger, distributedLoggerRecords, cpuCount, loggers);
             }
             else
             {
@@ -3456,13 +3456,27 @@ private static bool DoesEnvironmentSupportLiveLogger()
 
         private static void ProcessLiveLogger(
             bool noConsoleLogger,
+            List<DistributedLoggerRecord> distributedLoggerRecords,
+            int cpuCount,
             List<ILogger> loggers)
         {
-            // Check for flags and env variables
             if (!noConsoleLogger)
             {
-                LiveLogger l = new LiveLogger();
-                loggers.Add(l);
+                // A central logger will be created for both single proc and multiproc.
+                LiveLogger logger = new LiveLogger();
+
+                // Check to see if there is a possibility we will be logging from an out-of-proc node.
+                // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
+                if (cpuCount == 1 && !Traits.Instance.InProcNodeDisabled)
+                {
+                    loggers.Add(logger);
+                }
+                else
+                {
+                    // For performance, register this logger using the forwarding logger mechanism.
+                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", LiveLogger.ConfigurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
+                    distributedLoggerRecords.Add(forwardingLoggerRecord);
+                }
             }
         }
 
