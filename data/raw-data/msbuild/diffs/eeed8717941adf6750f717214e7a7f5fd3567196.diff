diff --git a/src/Build/ElementLocation/ElementLocation.cs b/src/Build/ElementLocation/ElementLocation.cs
index 9e698b77abf..7cc973f6f45 100644
--- a/src/Build/ElementLocation/ElementLocation.cs
+++ b/src/Build/ElementLocation/ElementLocation.cs
@@ -160,7 +160,12 @@ internal static ElementLocation Create(string? file)
         private static int s_nextFileIndex;
         private static ImmutableDictionary<string, int> s_indexByFile = ImmutableDictionary<string, int>.Empty.WithComparers(StringComparer.OrdinalIgnoreCase);
 
-        internal static void DangerousInternalResetFileIndex() => s_nextFileIndex = 0;
+        internal static void DangerousInternalResetFileIndex()
+        {
+            s_nextFileIndex = 0;
+            s_fileByIndex = new string[32];
+            s_indexByFile = ImmutableDictionary<string, int>.Empty.WithComparers(StringComparer.OrdinalIgnoreCase);
+        }
 
         /// <summary>
         /// Constructor for the case where we have most or all information.
@@ -192,9 +197,10 @@ internal static ElementLocation Create(string? filePath, int line, int column)
 
 #if DEBUG
             string lookedUpFilePath = LookupFileByIndex(fileIndex);
-            Debug.Assert(
-                StringComparer.OrdinalIgnoreCase.Equals(filePath ?? "", lookedUpFilePath),
-                $"File index {fileIndex} returned for path '{filePath}', but lookup for that index returns '{lookedUpFilePath}'.");
+            if (!StringComparer.OrdinalIgnoreCase.Equals(filePath ?? "", lookedUpFilePath))
+            {
+                Debug.Fail($"File index {fileIndex} returned for path '{filePath}', but lookup for that index returns '{lookedUpFilePath}'.");
+            }
 #endif
 
             // We use multiple packing schemes for this data. TypeSize below excludes the CLR's per-object overhead.
