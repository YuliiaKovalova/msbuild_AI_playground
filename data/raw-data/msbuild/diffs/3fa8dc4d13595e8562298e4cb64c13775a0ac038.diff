diff --git a/src/MSBuild/JsonOutputFormatter.cs b/src/MSBuild/JsonOutputFormatter.cs
index 5a4098cb2cb..0cfa8136c6c 100644
--- a/src/MSBuild/JsonOutputFormatter.cs
+++ b/src/MSBuild/JsonOutputFormatter.cs
@@ -1,20 +1,28 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using System.Text;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
 namespace Microsoft.Build.CommandLine
 {
-    internal static class JsonOutputFormatter
+    internal class JsonOutputFormatter
     {
         private JsonDictionary dictionary = new();
 
-        internal static string ToString()
+        public override string ToString()
         {
             StringBuilder sb = new();
             dictionary.ToString(sb, 0);
             return sb.ToString();
         }
 
-        internal static void AddPropertiesInJsonFormat(string[] propertyNames, Func<string, string> getProperty)
+        internal void AddPropertiesInJsonFormat(string[] propertyNames, Func<string, string> getProperty)
         {
             if (propertyNames.Length == 0)
             {
@@ -30,7 +38,7 @@ internal static void AddPropertiesInJsonFormat(string[] propertyNames, Func<stri
             dictionary.Add("Properties", dict);
         }
 
-        internal static void AddItemInstancesInJsonFormat(string[] itemNames, ProjectInstance project)
+        internal void AddItemInstancesInJsonFormat(string[] itemNames, ProjectInstance project)
         {
             if (itemNames.Length == 0)
             {
@@ -51,7 +59,7 @@ internal static void AddItemInstancesInJsonFormat(string[] itemNames, ProjectIns
 
                     foreach (string metadatumName in FileUtilities.ItemSpecModifiers.All)
                     {
-                        itemDictionary.Add(metadatumName, item.GetMetadataValue(metadatumName));
+                        itemDictionary.Add(metadatumName, new JsonString(item.GetMetadataValue(metadatumName)));
                     }
 
                     itemArray.Add(itemDictionary);
@@ -63,7 +71,7 @@ internal static void AddItemInstancesInJsonFormat(string[] itemNames, ProjectIns
             dictionary.Add("Items", dict);
         }
 
-        internal static void AddItemsInJsonFormat(string[] itemNames, Project project)
+        internal void AddItemsInJsonFormat(string[] itemNames, Project project)
         {
             if (itemNames.Length == 0)
             {
@@ -84,7 +92,7 @@ internal static void AddItemsInJsonFormat(string[] itemNames, Project project)
 
                     foreach (string metadatumName in FileUtilities.ItemSpecModifiers.All)
                     {
-                        itemDictionary.Add(metadatumName, item.GetMetadataValue(metadatumName));
+                        itemDictionary.Add(metadatumName, new JsonString(item.GetMetadataValue(metadatumName)));
                     }
 
                     itemArray.Add(itemDictionary);
@@ -96,7 +104,7 @@ internal static void AddItemsInJsonFormat(string[] itemNames, Project project)
             dictionary.Add("Items", dict);
         }
 
-        internal static void AddTargetResultsInJsonFormat(string[] targetNames, BuildResult result)
+        internal void AddTargetResultsInJsonFormat(string[] targetNames, BuildResult result)
         {
             if (targetNames.Length == 0)
             {
@@ -108,14 +116,14 @@ internal static void AddTargetResultsInJsonFormat(string[] targetNames, BuildRes
             {
                 TargetResult targetResult = result.ResultsByTarget[targetName];
                 JsonDictionary targetResultsDictionary = new();
-                targetResultsDictionary.Add("Result", targetResult.ResultCode);
+                targetResultsDictionary.Add("Result", new JsonString(targetResult.ResultCode.ToString()));
                 JsonArray outputArray = new();
                 foreach (ITaskItem item in targetResult.Items)
                 {
                     JsonDictionary itemDict = new();
                     foreach (KeyValuePair<string, string> metadatum in item.EnumerateMetadata())
                     {
-                        itemDict.Add(metadatum.Key, metadatum.Value);
+                        itemDict.Add(metadatum.Key, new JsonString(metadatum.Value));
                     }
 
                     outputArray.Add(itemDict);
@@ -129,35 +137,35 @@ internal static void AddTargetResultsInJsonFormat(string[] targetNames, BuildRes
         }
     }
 
-    private static interface JsonObject
+    internal interface IJsonObject
     {
-        void ToString(StringBuilder sb, int indent);
+        public void ToString(StringBuilder sb, int indent);
     }
 
-    private static class JsonString : JsonObject
+    internal class JsonString : IJsonObject
     {
         private string str;
 
-        private JsonString(string s)
+        internal JsonString(string s)
         {
             str = s;
         }
 
-        public override void ToString(StringBuilder sb, int indent)
+        public void ToString(StringBuilder sb, int indent)
         {
             sb.AppendLine($"\"{str}\",");
         }
     }
 
-    private static class JsonArray : JsonObject
+    internal class JsonArray : IJsonObject
     {
         private List<JsonDictionary> objects;
-        private JsonArray()
+        internal JsonArray()
         {
             objects = new();
         }
 
-        public override void ToString(StringBuilder sb, int indent)
+        public void ToString(StringBuilder sb, int indent)
         {
             sb.AppendLine();
             sb.AppendLine(new string('\t', indent) + '[');
@@ -169,34 +177,38 @@ public override void ToString(StringBuilder sb, int indent)
             sb.AppendLine(new string('\t', indent) + ']' + ',');
         }
 
-        private void Add(JsonDictionary obj)
+        internal void Add(JsonDictionary obj)
         {
             objects.Add(obj);
         }
     }
 
-    private static class JsonDictionary : JsonObject
+    internal class JsonDictionary : IJsonObject
     {
-        private Dictionary<string, JsonObject> dict;
-        private JsonDictionary()
+        private Dictionary<string, IJsonObject> dict;
+        internal JsonDictionary()
         {
             dict = new();
         }
 
-        public override void ToString(StringBuilder sb, int indent)
+        public void ToString(StringBuilder sb, int indent)
         {
-            sb.AppendLine();
             sb.AppendLine(new string('\t', indent) + '{');
-            foreach (KeyValuePair<string, JsonObject> kvp in dict)
+            foreach (KeyValuePair<string, IJsonObject> kvp in dict)
             {
                 sb.Append(new string('\t', indent + 1) + $"\"{kvp.Key}\": ");
+                if (kvp.Value is JsonDictionary)
+                {
+                    sb.AppendLine();
+                }
+
                 kvp.Value.ToString(sb, indent + 1);
             }
 
             sb.AppendLine(new string('\t', indent) + "},");
         }
 
-        private void Add(string name, JsonObject value)
+        internal void Add(string name, IJsonObject value)
         {
             dict[name] = value;
         }
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 3a7ef2c82c7..b3670166e2b 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -189,7 +189,7 @@
     <Compile Include="OutOfProcTaskAppDomainWrapperBase.cs" />
     <Compile Include="OutOfProcTaskAppDomainWrapper.cs" />
     <Compile Include="PerformanceLogEventListener.cs" />
-    <Compile Include="JsonOutputFormatter" />
+    <Compile Include="JsonOutputFormatter.cs" />
     <Compile Include="XMake.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b58fb932236..551bbd67a1a 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -805,12 +805,10 @@ public static ExitType Execute(
                             ToolsVersion = toolsVersion,
                         });
 
-                        // Console.WriteLine("{");
-                        // PrintPropertiesInJsonFormat(getProperty, property => project.GetPropertyValue(property));
-                        // PrintItemsInJsonFormat(getItem, project);
-                        // Console.WriteLine("},");
-                        JsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => project.GetPropertyValue(property));
-                        JsonOutputFormatter.AddItemsInJsonFormat(getItem, project);
+                        JsonOutputFormatter jsonOutputFormatter = new();
+                        jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => project.GetPropertyValue(property));
+                        jsonOutputFormatter.AddItemsInJsonFormat(getItem, project);
+                        Console.WriteLine(jsonOutputFormatter.ToString());
                     }
                     else // regular build
                     {
@@ -863,11 +861,12 @@ public static ExitType Execute(
                     if ((getProperty.Length > 0 || getItem.Length > 0 || getTargetResult.Length > 0) && targets?.Length > 0 && result is not null)
                     {
                         ProjectInstance builtProject = result.ProjectStateAfterBuild;
-                        Console.WriteLine("{");
-                        PrintPropertiesInJsonFormat(getProperty, property => builtProject.GetPropertyValue(property));
-                        PrintItemInstancesInJsonFormat(getItem, builtProject);
-                        PrintTargetResultsInJsonFormat(getTargetResult, result);
-                        Console.WriteLine("},");
+
+                        JsonOutputFormatter jsonOutputFormatter = new();
+                        jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => builtProject.GetPropertyValue(property));
+                        jsonOutputFormatter.AddItemInstancesInJsonFormat(getItem, builtProject);
+                        jsonOutputFormatter.AddTargetResultsInJsonFormat(getTargetResult, result);
+                        Console.WriteLine(jsonOutputFormatter.ToString());
                     }
 
                     if (!string.IsNullOrEmpty(timerOutputFilename))
@@ -2577,6 +2576,8 @@ internal static bool ProcessCommandLineSwitches(
                         commandLineSwitches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.Verbosity, "q", "q", true, true, true);
                     }
 
+                    targets = targets.Union(getTargetResult).ToArray();
+
                     // figure out which ToolsVersion has been set on the command line
                     toolsVersion = ProcessToolsVersionSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ToolsVersion]);
 
