diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 2a161bd6667..3021dfb0512 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -18,6 +18,20 @@ public static string ANSIRemove(string text)
             return Regex.Replace(text, "\\x1b(?:[@-Z\\-_]|\\[[0-?]*[ -\\/]*[@-~])", "");
         }
 
+        public static int ANSIBreakpoint(string text, int position)
+        {
+            if (position >= text.Length) return text.Length;
+            // Get substring
+            string substring = text.Substring(0, position);
+            string substringWithoutANSI = ANSIRemove(substring);
+            // Get length difference
+            int difference = substring.Length - substringWithoutANSI.Length;
+            int newPosition = position + difference;
+            // If new position is npot inside the string
+            if (newPosition > text.Length) return text.Length;
+            return newPosition;
+        }
+
         public static class Alignment
         {
             public static string Center(string text)
@@ -28,7 +42,7 @@ public static string Center(string text)
                 int space = (Console.BufferWidth - noFormatString.Length) / 2;
                 result += new string(' ', space);
                 result += text;
-                result += new string(' ', space);
+                result += new string(' ', space + 1);
                 return result;
             }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index eb6c16316ba..abaa6418cfc 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -12,21 +12,92 @@
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
+    /*public class FancyLoggerBufferLine
+    {
+        private static int Counter = 0;
+        public int Id;
+        public FancyLoggerBufferLine? NextLine;
+        public string Text = string.Empty;
+        private string _rawText = string.Empty;
+        public string RawText
+        {
+            get => _rawText;
+            set
+            {
+                _rawText = value;
+                if (Text.Length > Console.BufferWidth)
+                {
+                    Text = value.Substring(0, Console.BufferWidth);
+                }
+                else
+                {
+                    Text = value;
+                }
+            }
+        }
+        public FancyLoggerBufferLine()
+        {
+            Id = Counter++;
+            RawText = String.Empty;
+        }
+        public FancyLoggerBufferLine(string text)
+            : this()
+        {
+            RawText = text;
+        }
+    }*/
+
     public class FancyLoggerBufferLine
     {
         private static int Counter = 0;
         public int Id;
         public string Text;
+        public FancyLoggerBufferLine? NextLine;
+
+        private string _fullText;
+        public string FullText
+        {
+            get => _fullText;
+            set
+            {
+                // Assign value
+                _fullText = value;
+                // Delete next line if exists
+                if (NextLine is not null)
+                {
+                    FancyLoggerBuffer.DeleteLine(NextLine.Id);
+                    NextLine = null;
+                }
+                // If text overflows
+                if (value.Length > Console.BufferWidth)
+                {
+                    // Get breakpoints
+                    int breakpoint = ANSIBuilder.ANSIBreakpoint(value, Console.BufferWidth);
+                    // Text
+                    Text = value.Substring(0, breakpoint);
+                    // Next line
+                    if (breakpoint + 1 < value.Length)
+                    {
+                        NextLine = new FancyLoggerBufferLine(value.Substring(breakpoint + 1));
+                    }
+                }
+                else
+                {
+                    Text = value;
+                }
+            }
+        }
 
         public FancyLoggerBufferLine()
         {
             Id = Counter++;
-            Text = String.Empty;
+            Text = string.Empty;
+            _fullText = string.Empty;
         }
         public FancyLoggerBufferLine(string text)
             : this()
         {
-            Text = text;
+            FullText = text;
         }
     }
 
@@ -172,7 +243,7 @@ public static int GetLineIndexById(int lineId)
             // Get line
             FancyLoggerBufferLine? line = GetLineById(lineId);
             if (line == null) return null;
-            line.Text = text;
+            line.FullText = text;
             // Return
             return line;
         }
