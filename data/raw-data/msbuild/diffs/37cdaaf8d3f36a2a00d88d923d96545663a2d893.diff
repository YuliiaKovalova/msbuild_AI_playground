diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 153f02de057..9f43d60c469 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -83,7 +83,7 @@ internal enum HandshakeOptions
 
     internal class Handshake
     {
-        public static int NetTaskHostHandshakeVersion = 99;
+        public const int NetTaskHostHandshakeVersion = 99;
 
         protected readonly int options;
         protected readonly int salt;
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 25bfe18b875..390978c9863 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -274,7 +274,16 @@ internal static class PacketTypeExtensions
         public static byte CreateExtendedHeaderType(NodePacketType type) => (byte)((byte)type | ExtendedHeaderFlag);
 
         // Read extended header (returns version)
-        public static byte ReadVersion(Stream stream) => (byte)stream.ReadByte();
+        public static byte ReadVersion(Stream stream)
+        {
+            int value = stream.ReadByte();
+            if (value == -1)
+            {
+                throw new EndOfStreamException("Unexpected end of stream while reading version");
+            }
+
+            return (byte)value;
+        }
 
         // Write extended header with version
         public static void WriteVersion(Stream stream, byte version) => stream.WriteByte(version);
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index c9464667654..e1e1841a713 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -15,12 +15,17 @@
 using System.IO.Pipes;
 using System.IO;
 
+#if RUNTIME_TYPE_NETCORE
+using System.Collections.Immutable;
+#endif
+
 #if FEATURE_SECURITY_PERMISSIONS || FEATURE_PIPE_SECURITY
 using System.Security.AccessControl;
 #endif
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
 using System.Security.Principal;
 
+
 #endif
 #if NET451_OR_GREATER || NETCOREAPP
 using System.Threading.Tasks;
@@ -118,12 +123,14 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
         /// </summary>
         private BinaryWriter _binaryWriter;
 
+#if RUNTIME_TYPE_NETCORE
         /// <summary>
-        /// The set of property names from handshake responsible for node version./>
+        /// The set of property names from handshake responsible for node version./>.
         /// </summary>
-        private readonly IList<string> _versionHandshakeGroup = ["fileVersionMajor", "fileVersionMinor", "fileVersionBuild", "fileVersionPrivate"];
+        private readonly ImmutableHashSet<string> _versionHandshakeGroup = ["fileVersionMajor", "fileVersionMinor", "fileVersionBuild", "fileVersionPrivate"];
+#endif
 
-        #endregion
+#endregion
 
         #region INodeEndpoint Events
 
@@ -412,7 +419,7 @@ private void PacketPumpProc()
 #endif
                             );
 #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
-
+#if RUNTIME_TYPE_NETCORE
                             if (handshakePart != handshakeComponents[i].Value)
                             {
                                 // NET Task host allows to connect to MSBuild.dll with the different handshake version.
@@ -427,8 +434,9 @@ private void PacketPumpProc()
                                     _pipeServer.WriteIntForHandshake(i + 1);
                                     gotValidConnection = false;
                                     break;
-                                } 
+                                }
                             }
+#endif
                         }
 
                         if (gotValidConnection)
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 048e3a23aed..0257125733c 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -45,7 +45,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <summary>
         /// Task host runtime.
         /// </summary>
-        private string _runtime;
+        private readonly string _runtime;
 
 #if FEATURE_APPDOMAIN
         /// <summary>
@@ -427,10 +427,10 @@ public void Translate(ITranslator translator)
             translator.TranslateCulture(ref _uiCulture);
 #if FEATURE_APPDOMAIN
 
-            // Skip AppDomain configuration when targeting .NET Task Host (Runtime="Net").
+            // Skip AppDomain configuration when targeting .NET Task Host (Runtime="NET").
             // Although MSBuild.exe runs under .NET Framework and has AppDomain support,
             // we don't transmit AppDomain config when communicating with dotnet.exe (it is not supported in .NET 5+).
-            if (!string.Equals(_runtime, "Net", StringComparison.OrdinalIgnoreCase))
+            if (!string.Equals(_runtime, "NET", StringComparison.OrdinalIgnoreCase))
             {
                 byte[] appDomainConfigBytes = null;
 
