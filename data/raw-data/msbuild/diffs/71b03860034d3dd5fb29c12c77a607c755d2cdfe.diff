diff --git a/src/Build/Collections/CopyOnWritePropertyDictionary.cs b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
index 930438e2b47..371e12d9f3d 100644
--- a/src/Build/Collections/CopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
@@ -135,7 +135,8 @@ public void Clear()
 
         /// <summary>
         /// Gets an enumerator over all the properties in the collection
-        /// Enumeration is in undefined order
+        /// Enumeration is in undefined order. This overload exposes the struct enumerator
+        /// directly to avoid an allocation due to boxing.
         /// </summary>
         public ImmutableDictionary<string, T>.Enumerator GetEnumerator() => _backing.GetEnumerator();
 
@@ -388,6 +389,10 @@ public ICopyOnWritePropertyDictionary<T> DeepClone()
             return new CopyOnWritePropertyDictionary<T>(this);
         }
 
+        /// <summary>
+        /// Struct based enumerator to expose the values of the backing collection.
+        /// This avoids the allocation when accessing the Values property directly.
+        /// </summary>
         public struct Enumerator : IEnumerator<T>
         {
             private ImmutableDictionary<string, T>.Enumerator _dictionaryEnumerator;
@@ -402,8 +407,6 @@ public Enumerator(CopyOnWritePropertyDictionary<T> dictionary)
 
             public void Dispose() => _dictionaryEnumerator.Dispose();
 
-            public readonly Enumerator GetEnumerator() => this;
-
             public bool MoveNext()
             {
                 if (_dictionaryEnumerator.MoveNext())
