diff --git a/MSBuild.TaskHost.slnf b/MSBuild.TaskHost.slnf
new file mode 100644
index 00000000000..2003ca95335
--- /dev/null
+++ b/MSBuild.TaskHost.slnf
@@ -0,0 +1,9 @@
+{
+  "solution": {
+    "path": "MSBuild.sln",
+    "projects": [
+      "src\\MSBuildTaskHost\\MSBuildTaskHost.csproj",
+      "src\\StringTools\\StringTools.csproj"
+    ]
+  }
+}
\ No newline at end of file
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index afdeb6b6336..bce1d719cc1 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -110,10 +110,6 @@
     <Compile Include="..\Shared\INodePacket.cs" />
     <Compile Include="..\Shared\INodePacketFactory.cs" />
     <Compile Include="..\Shared\INodePacketHandler.cs" />
-    <Compile Include="..\Shared\ITranslatable.cs" />
-    <Compile Include="..\Shared\ITranslator.cs" />
-    <Compile Include="..\Shared\BinaryTranslator.cs" />
-    <Compile Include="..\Shared\BuildTransferredException.cs" />
     <Compile Include="..\Shared\LogMessagePacketBase.cs" />
     <Compile Include="..\Shared\NodePacketFactory.cs" />
     <Compile Include="..\Shared\NodeBuildComplete.cs" />
@@ -137,7 +133,6 @@
     <Compile Include="..\Shared\TaskParameterTypeVerifier.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
     <Compile Include="..\Shared\CommunicationsUtilities.cs" />
-    <Compile Include="..\Shared\InterningBinaryReader.cs" />
     <Compile Include="..\Shared\TaskEngineAssemblyResolver.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/Shared/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
similarity index 99%
rename from src/Shared/BinaryTranslator.cs
rename to src/Framework/BinaryTranslator.cs
index 2c4f2f20b3d..174b275e358 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -88,7 +88,7 @@ public BinaryWriter Writer
             {
                 get
                 {
-                    ErrorUtilities.ThrowInternalError("Cannot get writer from reader.");
+                    EscapeHatches.ThrowInternalError("Cannot get writer from reader.");
                     return null;
                 }
             }
@@ -772,7 +772,7 @@ public BinaryReader Reader
             {
                 get
                 {
-                    ErrorUtilities.ThrowInternalError("Cannot get reader from writer.");
+                    EscapeHatches.ThrowInternalError("Cannot get reader from writer.");
                     return null;
                 }
             }
diff --git a/src/Shared/BuildTransferredException.cs b/src/Framework/BuildTransferredException.cs
similarity index 68%
rename from src/Shared/BuildTransferredException.cs
rename to src/Framework/BuildTransferredException.cs
index 92b7c7142f4..1b3b7b406fb 100644
--- a/src/Shared/BuildTransferredException.cs
+++ b/src/Framework/BuildTransferredException.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Diagnostics;
 using System.IO;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -37,12 +38,12 @@ internal static Exception ReadExceptionFromTranslator(ITranslator translator)
 
             string message = reader.ReadString();
             string typeName = reader.ReadString();
-            string? deserializedStackTrace = ReadOptionalString(reader);
+            string? deserializedStackTrace = reader.ReadOptionalString();
             BuildTransferredException exception = new(message, innerException, typeName, deserializedStackTrace)
             {
-                Source = ReadOptionalString(reader),
-                HelpLink = ReadOptionalString(reader),
-                HResult = ReadOptionalInt32(reader),
+                Source = reader.ReadOptionalString(),
+                HelpLink = reader.ReadOptionalString(),
+                HResult = reader.ReadOptionalInt32(),
             };
 
             return exception;
@@ -58,9 +59,9 @@ internal static void WriteExceptionToTranslator(ITranslator translator, Exceptio
             }
             writer.Write(exception.Message);
             writer.Write(exception.GetType().FullName ?? exception.GetType().ToString());
-            WriteOptionalString(writer, exception.StackTrace);
-            WriteOptionalString(writer, exception.Source);
-            WriteOptionalString(writer, exception.HelpLink);
+            writer.WriteOptionalString(exception.StackTrace);
+            writer.WriteOptionalString(exception.Source);
+            writer.WriteOptionalString(exception.HelpLink);
             // HResult is completely protected up till net4.5
 #if NET || NET45_OR_GREATER
             writer.Write((byte)1);
@@ -73,27 +74,6 @@ internal static void WriteExceptionToTranslator(ITranslator translator, Exceptio
                 "Exception Data is not supported in BuildTransferredException");
         }
 
-        private static string? ReadOptionalString(BinaryReader reader)
-        {
-            return reader.ReadByte() == 0 ? null : reader.ReadString();
-        }
 
-        private static void WriteOptionalString(BinaryWriter writer, string? value)
-        {
-            if (value == null)
-            {
-                writer.Write((byte)0);
-            }
-            else
-            {
-                writer.Write((byte)1);
-                writer.Write(value);
-            }
-        }
-
-        private static int ReadOptionalInt32(BinaryReader reader)
-        {
-            return reader.ReadByte() == 0 ? 0 : reader.ReadInt32();
-        }
     }
 }
diff --git a/src/Shared/ITranslatable.cs b/src/Framework/ITranslatable.cs
similarity index 100%
rename from src/Shared/ITranslatable.cs
rename to src/Framework/ITranslatable.cs
diff --git a/src/Shared/ITranslator.cs b/src/Framework/ITranslator.cs
similarity index 100%
rename from src/Shared/ITranslator.cs
rename to src/Framework/ITranslator.cs
diff --git a/src/Shared/InterningBinaryReader.cs b/src/Framework/InterningBinaryReader.cs
similarity index 94%
rename from src/Shared/InterningBinaryReader.cs
rename to src/Framework/InterningBinaryReader.cs
index 1fc332a0639..78c9bf427b6 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Framework/InterningBinaryReader.cs
@@ -6,13 +6,12 @@
 using System.IO;
 using System.Diagnostics;
 using System.Threading;
+using Microsoft.Build.Framework;
 
 #if !CLR2COMPATIBILITY
 using System.Buffers;
 #endif
 
-using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
-
 using Microsoft.NET.StringTools;
 
 #nullable disable
@@ -123,7 +122,7 @@ public override String ReadString()
                         // the actual error seems most likely to be occurring. 
                         if (n < 0)
                         {
-                            ErrorUtilities.ThrowInternalError("From calculating based on the memorystream, about to read n = {0}. length = {1}, rawPosition = {2}, readLength = {3}, stringLength = {4}, currPos = {5}.", n, length, rawPosition, readLength, stringLength, currPos);
+                            EscapeHatches.ThrowInternalError("From calculating based on the memorystream, about to read n = {0}. length = {1}, rawPosition = {2}, readLength = {3}, stringLength = {4}, currPos = {5}.", n, length, rawPosition, readLength, stringLength, currPos);
                         }
 
                         memoryStream.Seek(n, SeekOrigin.Current);
@@ -138,7 +137,7 @@ public override String ReadString()
                         // See above explanation -- the OutOfRange exception may also be coming from our setting of n here ...
                         if (n < 0)
                         {
-                            ErrorUtilities.ThrowInternalError("From getting the length out of BaseStream.Read directly, about to read n = {0}. readLength = {1}, stringLength = {2}, currPos = {3}", n, readLength, stringLength, currPos);
+                            EscapeHatches.ThrowInternalError("From getting the length out of BaseStream.Read directly, about to read n = {0}. readLength = {1}, stringLength = {2}, currPos = {3}", n, readLength, stringLength, currPos);
                         }
                     }
 
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index 724e1a38496..f74a7047925 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -11,6 +11,10 @@
     <EnablePackageValidation>true</EnablePackageValidation>
   </PropertyGroup>
 
+  <ItemGroup>
+    <ProjectReference Include="..\StringTools\StringTools.csproj" />
+  </ItemGroup>
+
   <ItemGroup>
     <PackageReference Include="Microsoft.CodeAnalysis.Collections" PrivateAssets="all" />
   </ItemGroup>
@@ -41,6 +45,20 @@
     <Compile Include="..\Shared\BinaryWriterExtensions.cs">
       <Link>Shared\BinaryWriterExtensions.cs</Link>
     </Compile>
+    <!--
+    <Compile Include="..\Shared\ErrorUtilities.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+      <Link>Shared\ErrorUtilities.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\ResourceUtilities.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+      <Link>Shared\ResourceUtilities.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\FileUtilities.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+      <Link>Shared\FileUtilities.cs</Link>
+    </Compile>
+    -->
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 7a4db37105c..871d648e4ea 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Globalization;
 
 #nullable disable
 
@@ -474,7 +475,7 @@ public enum SdkReferencePropertyExpansionMode
         /// then we can give them this undocumented environment variable as an immediate workaround.
         /// </summary>
         /// <remarks>
-        /// Clone from ErrorUtilities which isn't (yet?) available in Framework.
+        /// Clone from ErrorUtilities which isn't available in Framework.
         /// </remarks>
         private static readonly bool s_throwExceptions = String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDDONOTTHROWINTERNAL"));
 
@@ -482,7 +483,7 @@ public enum SdkReferencePropertyExpansionMode
         /// Throws InternalErrorException.
         /// </summary>
         /// <remarks>
-        /// Clone of ErrorUtilities.ThrowInternalError which isn't (yet?) available in Framework.
+        /// Clone of ErrorUtilities.ThrowInternalError which isn't available in Framework.
         /// </remarks>
         internal static void ThrowInternalError(string message)
         {
@@ -491,5 +492,66 @@ internal static void ThrowInternalError(string message)
                 throw new InternalErrorException(message);
             }
         }
+
+        /// <summary>
+        /// Throws InternalErrorException.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// </summary>
+        /// <remarks>
+        /// Clone from ErrorUtilities which isn't available in Framework.
+        /// </remarks>
+        internal static void ThrowInternalError(string message, params object[] args)
+        {
+            if (s_throwExceptions)
+            {
+                throw new InternalErrorException(FormatString(message, args));
+            }
+        }
+
+        /// <summary>
+        /// Formats the given string using the variable arguments passed in.
+        /// 
+        /// PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
+        /// the array of arguments -- do not call this method repeatedly in performance-critical scenarios
+        /// 
+        /// Thread safe.
+        /// </summary>
+        /// <param name="unformatted">The string to format.</param>
+        /// <param name="args">Optional arguments for formatting the given string.</param>
+        /// <returns>The formatted string.</returns>
+        /// <remarks>
+        /// Clone from ResourceUtilities which isn't available in Framework.
+        /// </remarks>
+        internal static string FormatString(string unformatted, params object[] args)
+        {
+            string formatted = unformatted;
+
+            // NOTE: String.Format() does not allow a null arguments array
+            if ((args?.Length > 0))
+            {
+#if DEBUG
+                // If you accidentally pass some random type in that can't be converted to a string, 
+                // FormatResourceString calls ToString() which returns the full name of the type!
+                foreach (object param in args)
+                {
+                    // Check it has a real implementation of ToString() and the type is not actually System.String
+                    if (param != null)
+                    {
+                        if (string.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal) &&
+                            param.GetType() != typeof(string))
+                        {
+                            ThrowInternalError("Invalid resource parameter type, was {0}",
+                                param.GetType().FullName);
+                        }
+                    }
+                }
+#endif
+                // Format the string, using the variable arguments passed in.
+                // NOTE: all String methods are thread-safe
+                formatted = String.Format(CultureInfo.CurrentCulture, unformatted, args);
+            }
+
+            return formatted;
+        }
     }
 }
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 31b289d909c..358b60c5b8a 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -127,13 +127,8 @@
     <Compile Include="..\Shared\INodePacketFactory.cs" />
     <Compile Include="..\Shared\NodePacketFactory.cs" />
     <Compile Include="..\Shared\INodePacketHandler.cs" />
-    <Compile Include="..\Shared\ITranslatable.cs" />
-    <Compile Include="..\Shared\ITranslator.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
-    <Compile Include="..\Shared\BinaryTranslator.cs" />
-    <Compile Include="..\Shared\BuildTransferredException.cs" />
     <Compile Include="..\Shared\CommunicationsUtilities.cs" />
-    <Compile Include="..\Shared\InterningBinaryReader.cs" />
     <Compile Include="..\Shared\TaskHostConfiguration.cs" />
     <Compile Include="..\Shared\TaskHostTaskComplete.cs" />
     <Compile Include="..\Shared\OutOfProcTaskHostTaskResult.cs" />
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index fe81c04952f..b6d7b028e80 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -70,9 +70,12 @@
     </Compile>
     <Compile Include="..\Shared\Constants.cs" />
     <Compile Include="..\Shared\ReadOnlyEmptyDictionary.cs" />
-    <Compile Include="..\Shared\ErrorUtilities.cs">
+    <Compile Include="..\Framework\ErrorUtilities.cs">
       <Link>ErrorUtilities.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\ErrorUtilities.cs">
+      <Link>SharedErrorUtilities.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\EscapingUtilities.cs">
       <Link>EscapingUtilities.cs</Link>
     </Compile>
@@ -97,19 +100,25 @@
     <Compile Include="..\Shared\INodePacketHandler.cs">
       <Link>INodePacketHandler.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ITranslatable.cs">
+    <Compile Include="..\Framework\ITranslatable.cs">
       <Link>ITranslatable.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ITranslator.cs">
+    <Compile Include="..\Framework\ITranslator.cs">
       <Link>ITranslator.cs</Link>
     </Compile>
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
     <Compile Include="..\Framework\InternalErrorException.cs">
       <Link>InternalErrorException.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\InterningBinaryReader.cs">
+    <Compile Include="..\Framework\InterningBinaryReader.cs">
       <Link>InterningBinaryReader.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\BinaryReaderExtensions.cs">
+      <Link>BinaryReaderExtensions.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\BinaryWriterExtensions.cs">
+      <Link>BinaryWriterExtensions.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\LogMessagePacketBase.cs">
       <Link>LogMessagePacketBase.cs</Link>
     </Compile>
@@ -132,10 +141,10 @@
     <Compile Include="..\Shared\NodePacketFactory.cs">
       <Link>NodePacketFactory.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\BinaryTranslator.cs">
+    <Compile Include="..\Framework\BinaryTranslator.cs">
       <Link>BinaryTranslator.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\BuildTransferredException.cs">
+    <Compile Include="..\Framework\BuildTransferredException.cs">
       <Link>BuildTransferredException.cs</Link>
     </Compile>
     <Compile Include="..\Shared\NodeShutdown.cs">
diff --git a/src/Shared/BinaryReaderExtensions.cs b/src/Shared/BinaryReaderExtensions.cs
index cb3857ff100..316a1180878 100644
--- a/src/Shared/BinaryReaderExtensions.cs
+++ b/src/Shared/BinaryReaderExtensions.cs
@@ -10,13 +10,25 @@ namespace Microsoft.Build.Shared
 {
     internal static class BinaryReaderExtensions
     {
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static string? ReadOptionalString(this BinaryReader reader)
         {
             return reader.ReadByte() == 0 ? null : reader.ReadString();
         }
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
+        public static int ReadOptionalInt32(this BinaryReader reader)
+        {
+            return reader.ReadByte() == 0 ? 0 : reader.ReadInt32();
+        }
+
+#if !TASKHOST
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static int Read7BitEncodedInt(this BinaryReader reader)
         {
             // Read out an Int32 7 bits at a time.  The high bit
@@ -41,7 +53,9 @@ public static int Read7BitEncodedInt(this BinaryReader reader)
             return count;
         }
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static DateTime ReadTimestamp(this BinaryReader reader)
         {
             long timestampTicks = reader.ReadInt64();
@@ -50,6 +64,7 @@ public static DateTime ReadTimestamp(this BinaryReader reader)
             return timestamp;
         }
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
         public static BuildEventContext? ReadOptionalBuildEventContext(this BinaryReader reader)
         {
@@ -75,8 +90,11 @@ public static BuildEventContext ReadBuildEventContext(this BinaryReader reader)
             var buildEventContext = new BuildEventContext(submissionId, nodeId, evaluationId, projectInstanceId, projectContextId, targetId, taskId);
             return buildEventContext;
         }
+#endif
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static unsafe Guid ReadGuid(this BinaryReader reader)
         {
             return new Guid(reader.ReadBytes(sizeof(Guid)));
diff --git a/src/Shared/BinaryWriterExtensions.cs b/src/Shared/BinaryWriterExtensions.cs
index 2a221d573a5..ad6b579570c 100644
--- a/src/Shared/BinaryWriterExtensions.cs
+++ b/src/Shared/BinaryWriterExtensions.cs
@@ -10,7 +10,9 @@ namespace Microsoft.Build.Shared
 {
     internal static class BinaryWriterExtensions
     {
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static void WriteOptionalString(this BinaryWriter writer, string? value)
         {
             if (value == null)
@@ -24,14 +26,18 @@ public static void WriteOptionalString(this BinaryWriter writer, string? value)
             }
         }
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static void WriteTimestamp(this BinaryWriter writer, DateTime timestamp)
         {
             writer.Write(timestamp.Ticks);
             writer.Write((Int32)timestamp.Kind);
         }
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static void Write7BitEncodedInt(this BinaryWriter writer, int value)
         {
             // Write out an int 7 bits at a time.  The high bit of the byte,
@@ -46,6 +52,7 @@ public static void Write7BitEncodedInt(this BinaryWriter writer, int value)
             writer.Write((byte)v);
         }
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
         public static void WriteOptionalBuildEventContext(this BinaryWriter writer, BuildEventContext? context)
         {
@@ -71,8 +78,11 @@ public static void WriteBuildEventContext(this BinaryWriter writer, BuildEventCo
             writer.Write(context.ProjectInstanceId);
             writer.Write(context.EvaluationId);
         }
+#endif
 
+#if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
         public static void WriteGuid(this BinaryWriter writer, Guid value)
         {
             Guid val = value;
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 079be509b84..6815acd70c0 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -30,11 +30,6 @@
   </ItemGroup>
   <ItemGroup>
     <!-- Binary serialization by ITranslatable -->
-    <Compile Include="..\Shared\ITranslatable.cs" />
-    <Compile Include="..\Shared\ITranslator.cs" />
-    <Compile Include="..\Shared\BinaryTranslator.cs" />
-    <Compile Include="..\Shared\BuildTransferredException.cs" />
-    <Compile Include="..\Shared\InterningBinaryReader.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
   </ItemGroup>
   <ItemGroup>
