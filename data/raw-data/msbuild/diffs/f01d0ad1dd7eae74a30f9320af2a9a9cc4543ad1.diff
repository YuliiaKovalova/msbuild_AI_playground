diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 550b226edef..087247ade3e 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -114,7 +114,7 @@ public NodeEngineShutdownReason Run(bool enableReuse, bool lowPriority, out Exce
         {
             string msBuildLocation = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
             var handshake = new ServerNodeHandshake(
-                CommunicationsUtilities.GetHandshakeOptions(taskHost: false, nodeReuse: enableReuse, lowPriority: lowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess),
+                CommunicationsUtilities.GetHandshakeOptions(taskHost: false, lowPriority: lowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess),
                 msBuildLocation);
 
             string pipeName = NamedPipeUtil.GetPipeNameOrPath("MSBuildServer-" + handshake.ComputeHash());
@@ -458,8 +458,8 @@ internal static ServerNamedMutex OpenOrCreateMutex(string name, out bool created
 
             public static bool WasOpen(string mutexName)
             {
-                bool result = Mutex.TryOpenExisting(mutexName, out Mutex mutex);
-                mutex.Dispose();
+                bool result = Mutex.TryOpenExisting(mutexName, out Mutex? mutex);
+                mutex?.Dispose();
 
                 return result;
             }
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 543667811bf..df141e46f87 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -9,6 +9,7 @@
 using BaseConsoleLogger = Microsoft.Build.BackEnd.Logging.BaseConsoleLogger;
 using SerialConsoleLogger = Microsoft.Build.BackEnd.Logging.SerialConsoleLogger;
 using ParallelConsoleLogger = Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger;
+using Microsoft.Build.Execution;
 
 #nullable disable
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 3c2cb3ba5e7..008df78e842 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -632,7 +632,7 @@ string[] commandLine
                     // that priority. Idle priority would prevent the build from proceeding as the user does normal actions.
                     try
                     {
-                        if (lowPriority && Process.GetCurrentProcess().PriorityClass != ProcessPriorityClass.Idle)
+                        if (lowPriority && Process.GetCurrentProcess().PriorityClass != ProcessPriorityClass.Idle && !s_isServerNodeHosted)
                         {
                             Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.BelowNormal;
                         }
@@ -1960,6 +1960,11 @@ private static bool IsEnvironmentVariable(string envVar)
         /// </summary>
         internal static bool usingSwitchesFromAutoResponseFile = false;
 
+        /// <summary>
+        /// Indicates that this process is working as a server.
+        /// </summary>
+        private static bool s_isServerNodeHosted;
+
         /// <summary>
         /// Parses the auto-response file (assumes the "/noautoresponse" switch is not specified on the command line), and combines the
         /// switches from the auto-response file with the switches passed in.
@@ -2648,10 +2653,9 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
                         return (exitCode, exitType.ToString());
                     };
 
-                    // commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters]
-
                     OutOfProcServerNode node = new(buildFunction);
 
+                    s_isServerNodeHosted = true;
                     shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
 
                     FileUtilities.ClearCacheDirectory();
@@ -3151,6 +3155,12 @@ List<ILogger> loggers
                     consoleParameters = AggregateParameters(consoleParameters, consoleLoggerParameters);
                 }
 
+                // Always use ANSI escape codes when the build is initiated by server
+                if (s_isServerNodeHosted)
+                {
+                    consoleParameters = AggregateParameters(consoleParameters, new[] { "FORCECONSOLECOLOR" });
+                }
+
                 // Check to see if there is a possibility we will be logging from an out-of-proc node.
                 // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
                 if (cpuCount == 1 && Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") != "1")
