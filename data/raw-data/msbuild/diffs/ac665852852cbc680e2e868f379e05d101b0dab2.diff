diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index bafc8369c4c..813cea3dcf1 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -1040,6 +1040,39 @@ public void GetTargetListsDoesNotUseTargetsMetadataOnInnerBuildsFromRootOuterBui
             }
         }
 
+        [Fact]
+        public void GetTargetFrameworksWithPlatformForSingleTargetFrameworkRemovedIfGetTargetFrameworksRemoved()
+        {
+            string entryProject = CreateProjectFile(
+                _env,
+                1,
+                new int[] { 2 },
+                extraContent: @"
+                <ItemGroup>
+                    <ProjectReferenceTargets Include='A' Targets='C;GetTargetFrameworksWithPlatformForSingleTargetFramework' />
+                    <ProjectReferenceTargets Include='A' Targets='B' OuterBuild='true' />
+                    <ProjectReferenceTargets Include='A' Targets='GetTargetFrameworks' OuterBuild='true' SkipNonexistentTargets='true' />
+                </ItemGroup>").Path;
+            CreateProjectFile(
+                _env,
+                2,
+                extraContent: MultitargetingSpecificationPropertyGroup);
+            var graph = new ProjectGraph(entryProject);
+            graph.ToDot();
+            ProjectGraphNode rootOuterBuild = GetFirstNodeWithProjectNumber(graph, 1);
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(new[] { "A" });
+            targetLists[rootOuterBuild].ShouldBe(new[] { "A" });
+            ProjectGraphNode referencedNode = GetOuterBuild(graph, 2);
+            targetLists[referencedNode].ShouldBe(new[] { "B" });
+
+            // None of the inner builds should have GetTargetFrameworksWithPlatformForSingleTargetFramework
+            // in their target lists.
+            foreach (ProjectGraphNode projectGraphNode in GetInnerBuilds(graph, 2))
+            {
+                targetLists[projectGraphNode].ShouldBe(new[] { "B", "C" });
+            }
+        }
+
         [Fact]
         public void GetTargetListsForComplexMultitargetingGraph()
         {
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index ce60703d15e..56ca3f53f1a 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -469,14 +469,32 @@ public ImmutableList<string> GetApplicableTargetsForReference(ProjectInstance re
             {
                 ImmutableList<string> RemoveNonexistentTargetsIfSkippable(ImmutableList<TargetSpecification> targets)
                 {
-                    // Keep targets that are non-skippable or that exist but are skippable.
-                    return targets
-                        .Where(t => !t.SkipIfNonexistent || reference.Targets.ContainsKey(t.Target))
-                        .Select(t => t.Target)
-                        .ToImmutableList();
+                    var targetsToKeep = new List<string>();
+                    bool getTargetFrameworksRemoved = false;
+                    foreach (TargetSpecification target in targets)
+                    {
+                        // Keep targets that are non-skippable or that exist but are skippable.
+                        if (!target.SkipIfNonexistent || reference.Targets.ContainsKey(target.Target))
+                        {
+                            targetsToKeep.Add(target.Target);
+                        }
+                        else if (target.Target.Equals("GetTargetFrameworks"))
+                        {
+                            getTargetFrameworksRemoved = true;
+                        }
+                    }
+
+                    // If GetTargetFrameworks is removed, also remove GetTargetFrameworksWithPlatformForSingleTargetFramework
+                    // since in the non-graph case it is only called when GetTargetFrameworks is called.
+                    if (getTargetFrameworksRemoved && targetsToKeep.Contains("GetTargetFrameworksWithPlatformForSingleTargetFramework"))
+                    {
+                        targetsToKeep.Remove("GetTargetFrameworksWithPlatformForSingleTargetFramework");
+                    }
+
+                    return targetsToKeep.ToImmutableList();
                 }
 
-                return (GetProjectType(reference)) switch
+                return GetProjectType(reference) switch
                 {
                     ProjectType.InnerBuild => RemoveNonexistentTargetsIfSkippable(_allTargets),
                     ProjectType.OuterBuild => RemoveNonexistentTargetsIfSkippable(_outerBuildTargets),
diff --git a/src/Tasks/Microsoft.Managed.After.targets b/src/Tasks/Microsoft.Managed.After.targets
index 48264892122..7cfc296e530 100644
--- a/src/Tasks/Microsoft.Managed.After.targets
+++ b/src/Tasks/Microsoft.Managed.After.targets
@@ -41,10 +41,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <_MainReferenceTargetForBuild Condition="'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTargetForBuild>
     <_MainReferenceTargetForBuild Condition="'$(_MainReferenceTargetForBuild)' == ''">GetTargetPath</_MainReferenceTargetForBuild>
 
-    <ProjectReferenceTargetsForBuildInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForBuildInOuterBuild)</ProjectReferenceTargetsForBuildInOuterBuild>
+    <ProjectReferenceTargetsForBuildInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild)</ProjectReferenceTargetsForBuildInOuterBuild>
     <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
 
-    <ProjectReferenceTargetsForCleanInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForCleanInOuterBuild)</ProjectReferenceTargetsForCleanInOuterBuild>
+    <ProjectReferenceTargetsForCleanInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild)</ProjectReferenceTargetsForCleanInOuterBuild>
     <ProjectReferenceTargetsForClean>Clean;GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
 
     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>
@@ -59,9 +59,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <ItemGroup Condition="'$(IsGraphBuild)' == 'true'">
     <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuildInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' " OuterBuild="true" />
+    <ProjectReferenceTargets Include="Build" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
     <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuild)" Condition=" '$(ProjectReferenceTargetsForBuild)' != '' " />
-
     <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForCleanInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' " OuterBuild="true" />
+    <ProjectReferenceTargets Include="Clean" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
     <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForClean)" Condition=" '$(ProjectReferenceTargetsForClean)' != '' " />
 
     <ProjectReferenceTargets Include="Rebuild" Targets="$(ProjectReferenceTargetsForRebuild)" Condition=" '$(ProjectReferenceTargetsForRebuild)' != '' " />
