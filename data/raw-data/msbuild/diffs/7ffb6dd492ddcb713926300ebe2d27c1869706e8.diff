diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 0832273c79b..e7c7fc19ff0 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -1156,7 +1156,7 @@ internal sealed class CopyMonitor
             *
             * Don't really copy the file, just count how many times this was called.
             */
-            internal bool? CopyFile(FileState source, FileState destination)
+            internal bool? CopyFile(FileState source, FileState destination, string sourceFileFullPath, string destinationFileFullPath)
             {
                 Interlocked.Increment(ref copyCount);
                 return true;
@@ -1602,7 +1602,7 @@ public void CopyWithDuplicatesUsingFolder()
                 UseSymboliclinksIfPossible = UseSymbolicLinks,
             };
 
-            bool success = t.Execute(delegate (FileState source, FileState dest)
+            bool success = t.Execute(delegate (FileState source, FileState dest, string sourceFileFullPath, string destinationFileFullPath)
             {
                 lock (filesActuallyCopied)
                 {
@@ -1668,7 +1668,7 @@ public void CopyWithDuplicatesUsingFiles()
                 UseSymboliclinksIfPossible = UseSymbolicLinks,
             };
 
-            bool success = t.Execute(delegate (FileState source, FileState dest)
+            bool success = t.Execute(delegate (FileState source, FileState dest, string sourceFileFullPath, string destinationFileFullPath)
             {
                 lock (filesActuallyCopied)
                 {
@@ -2148,7 +2148,7 @@ internal CopyFunctor(int countOfSuccess, bool throwOnFailure)
             /// <summary>
             /// Pretend to be File.Copy.
             /// </summary>
-            internal bool? Copy(FileState source, FileState destination)
+            internal bool? Copy(FileState source, FileState destination, string sourceFileFullPath, string destinationFileFullPath)
             {
                 lock (_lockObj)
                 {
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 979c9652291..98d56fd0b5b 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -226,7 +226,9 @@ private void LogDiagnostic(string message, params object[] messageArgs)
         /// <returns>Return true to indicate success, return false to indicate failure and NO retry, return NULL to indicate retry.</returns>
         private bool? CopyFileWithLogging(
             FileState sourceFileState,      // The source file
-            FileState destinationFileState)  // The destination file
+            FileState destinationFileState,
+            string sourceFileFullPath,
+            string destinationFileFullPath)  // The destination file
         {
             if (destinationFileState.DirectoryExists)
             {
@@ -276,9 +278,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
 
             if (FailIfNotIncremental)
             {
-                string sourceFilePath = FileUtilities.GetFullPathNoThrow(sourceFileState.Name);
-                string destinationFilePath = FileUtilities.GetFullPathNoThrow(destinationFileState.Name);
-                Log.LogError(FileComment, sourceFilePath, destinationFilePath);
+                Log.LogError(FileComment, sourceFileFullPath, destinationFileFullPath);
                 return false;
             }
 
@@ -343,9 +343,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
             if (!hardLinkCreated && !symbolicLinkCreated)
             {
                 // Do not log a fake command line as well, as it's superfluous, and also potentially expensive
-                string sourceFilePath = FileUtilities.GetFullPathNoThrow(sourceFileState.Name);
-                string destinationFilePath = FileUtilities.GetFullPathNoThrow(destinationFileState.Name);
-                Log.LogMessage(MessageImportance.Normal, FileComment, sourceFilePath, destinationFilePath);
+                Log.LogMessage(MessageImportance.Normal, FileComment, sourceFileFullPath, destinationFileFullPath);
 
                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);
 
@@ -751,14 +749,11 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                         "true");
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, true);
                 }
-
-                // We only do the cheap check for identicalness here, we try the more expensive check
-                // of comparing the fullpaths of source and destination to see if they are identical,
-                // in the exception handler lower down.
-                else if (!String.Equals(
+                else if (!PathsAreIdentical(
                              sourceFileState.Name,
                              destinationFileState.Name,
-                             StringComparison.OrdinalIgnoreCase))
+                             out string sourceFileFullPath,
+                             out string destinationFileFullPath))
                 {
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, false);
 
@@ -769,7 +764,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                     }
                     else
                     {
-                        success = DoCopyWithRetries(sourceFileState, destinationFileState, copyFile);
+                        success = DoCopyWithRetries(sourceFileState, destinationFileState, sourceFileFullPath, destinationFileFullPath, copyFile);
                     }
                 }
                 else
@@ -798,7 +793,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
         /// <summary>
         /// Copy one file with the appropriate number of retries if it fails.
         /// </summary>
-        private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationFileState, CopyFileWithState copyFile)
+        private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationFileState, string sourceFileFullPath, string destinationFileFullPath, CopyFileWithState copyFile)
         {
             int retries = 0;
 
@@ -806,7 +801,7 @@ private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationF
             {
                 try
                 {
-                    bool? result = copyFile(sourceFileState, destinationFileState);
+                    bool? result = copyFile(sourceFileState, destinationFileState, sourceFileFullPath, destinationFileFullPath);
                     if (result.HasValue)
                     {
                         return result.Value;
@@ -865,13 +860,6 @@ private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationF
                                 throw;
                             }
 
-                            // if this was just because the source and destination files are the
-                            // same file, that's not a failure.
-                            // Note -- we check this exceptional case here, not before the copy, for perf.
-                            if (PathsAreIdentical(sourceFileState.Name, destinationFileState.Name))
-                            {
-                                return true;
-                            }
                             break;
                     }
 
@@ -969,12 +957,12 @@ public override bool Execute()
         /// Compares two paths to see if they refer to the same file. We can't solve the general
         /// canonicalization problem, so we just compare strings on the full paths.
         /// </summary>
-        private static bool PathsAreIdentical(string source, string destination)
+        private static bool PathsAreIdentical(string source, string destination, out string sourceFileFullPath, out string destinationFileFullPath)
         {
-            string fullSourcePath = Path.GetFullPath(source);
-            string fullDestinationPath = Path.GetFullPath(destination);
+            sourceFileFullPath = Path.GetFullPath(source);
+            destinationFileFullPath = Path.GetFullPath(destination);
             StringComparison filenameComparison = NativeMethodsShared.IsWindows ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal;
-            return String.Equals(fullSourcePath, fullDestinationPath, filenameComparison);
+            return String.Equals(sourceFileFullPath, destinationFileFullPath, filenameComparison);
         }
 
         private static int GetParallelismFromEnvironment()
diff --git a/src/Tasks/FileState.cs b/src/Tasks/FileState.cs
index f992f7bc76b..8b5b7930683 100644
--- a/src/Tasks/FileState.cs
+++ b/src/Tasks/FileState.cs
@@ -17,7 +17,9 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     /// <param name="source">Source file</param>
     /// <param name="destination">Destination file</param>
-    internal delegate bool? CopyFileWithState(FileState source, FileState destination);
+    /// <param name="sourceFileFullPath">Source file's full path</param>
+    /// <param name="destinationFileFullPath">Destination file's full path</param>
+    internal delegate bool? CopyFileWithState(FileState source, FileState destination, string sourceFileFullPath, string destinationFileFullPath);
 
     /// <summary>
     /// Short-term cache saves the result of IO operations on a filename. Should only be
