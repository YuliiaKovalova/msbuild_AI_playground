diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 8557af34c3a..0bf758924cd 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -401,7 +401,7 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
         /// executable (e.g. MSBuild, MSBuildTaskHost or dotnet) and path to MSBuild.dll if we want to use a custom one.
         /// null is returned if executable cannot be resolved.
         /// </summary>
-        internal static (string msbuildExecutable, string msbuildAssemblyPath) GetMSBuildLocationFromHostContext(HandshakeOptions hostContext)
+        internal static (string buildExecutablePath, string msbuildAssemblyPath) GetMSBuildLocationFromHostContext(HandshakeOptions hostContext, IDictionary<string, string> taskHostParameters)
         {
             string toolName = GetTaskHostNameFromHostContext(hostContext);
             string toolPath = null;
@@ -479,8 +479,8 @@ internal static (string msbuildExecutable, string msbuildAssemblyPath) GetMSBuil
             }
 
             return toolName != null && toolPath != null
-                ? (msbuildExecutable: Path.Combine(toolPath, toolName), msbuildAssemblyPath)
-                : (msbuildExecutable: null, null);
+                ? (buildExecutablePath: Path.Combine(toolPath, toolName), msbuildAssemblyPath)
+                : (buildExecutablePath: null, null);
 
             void ValidateNetHostSdkVersion(string path)
             {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index c70d2bdc0af..a6dac53cb8c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -8,7 +8,6 @@
 using System.Diagnostics.CodeAnalysis;
 #endif
 using System.Linq;
-using System.Net.Sockets;
 using System.Reflection;
 #if FEATURE_APARTMENT_STATE
 using System.Runtime.ExceptionServices;
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 65690f45bd8..aef376d5fa2 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -502,19 +502,16 @@ internal static bool DoesTaskHostExist(string runtime, string architecture)
             runtime = XMakeAttributes.GetExplicitMSBuildRuntime(runtime);
             architecture = XMakeAttributes.GetExplicitMSBuildArchitecture(architecture);
 
-            IDictionary<string, string> parameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-            parameters.Add(XMakeAttributes.runtime, runtime);
-            parameters.Add(XMakeAttributes.architecture, architecture);
+            IDictionary<string, string> parameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
+            {
+                { XMakeAttributes.runtime, runtime },
+                { XMakeAttributes.architecture, architecture },
+            };
 
             HandshakeOptions desiredContext = CommunicationsUtilities.GetHandshakeOptions(taskHost: true, taskHostParameters: parameters);
-            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(desiredContext).msbuildExecutable;
+            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(desiredContext, parameters).buildExecutablePath;
 
-            if (taskHostLocation != null && FileUtilities.FileExistsNoThrow(taskHostLocation))
-            {
-                return true;
-            }
-
-            return false;
+            return taskHostLocation != null && FileUtilities.FileExistsNoThrow(taskHostLocation);
         }
 
         /// <summary>
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 528dfa59b71..1a5e51eddf8 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -572,7 +572,7 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
         /// </summary>
         private void LogErrorUnableToCreateTaskHost(HandshakeOptions requiredContext, string runtime, string architecture, NodeFailedToLaunchException e)
         {
-            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(requiredContext).msbuildExecutable ??
+            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(requiredContext, _taskHostParameters).buildExecutablePath ??
                 // We don't know the path -- probably we're trying to get a 64-bit assembly on a
                 // 32-bit machine.  At least give them the exe name to look for, though ...
                 ((requiredContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2 ? "MSBuildTaskHost.exe" : Constants.MSBuildExecutableName);
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 6cc3a790010..25bfe18b875 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -3,7 +3,6 @@
 
 #nullable disable
 
-using System.Collections.Generic;
 using System.IO;
 
 namespace Microsoft.Build.BackEnd
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 83f878707a9..048e3a23aed 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -148,12 +148,12 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
         public TaskHostConfiguration(
-                string runtime,
-                int nodeId,
-                string startupDirectory,
-                IDictionary<string, string> buildProcessEnvironment,
-                CultureInfo culture,
-                CultureInfo uiCulture,
+            string runtime,
+            int nodeId,
+            string startupDirectory,
+            IDictionary<string, string> buildProcessEnvironment,
+            CultureInfo culture,
+            CultureInfo uiCulture,
 #if FEATURE_APPDOMAIN
             AppDomainSetup appDomainSetup,
 #endif
