diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 976969cef86..0c500b571d5 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -2036,15 +2036,21 @@ private void LogConflict(Reference reference, string fusionName, StringBuilder l
         /// </summary>
         internal void ReadStateFile(FileExists fileExists)
         {
-            ResolveAssemblyReferenceCache rarDiskCache = StateFileBase.DeserializeCache<ResolveAssemblyReferenceCache>(_stateFile, Log);
+            ResolveAssemblyReferenceCache diskCache = null;
 
-            // Construct the cache only if we can't find any caches.
-            if (rarDiskCache == null && AssemblyInformationCachePaths != null && AssemblyInformationCachePaths.Length > 0)
-            {
-                rarDiskCache = ResolveAssemblyReferenceCache.DeserializePrecomputedCaches(AssemblyInformationCachePaths, Log, fileExists);
-            }
+            _cache = new SystemState(loadDiskCacheCallback: () =>
+                {
+                    diskCache = StateFileBase.DeserializeCache<ResolveAssemblyReferenceCache>(_stateFile, Log);
+
+                    // Fall back to precomputed caches if we got nothing from the per-project state file.
+                    if (diskCache == null && AssemblyInformationCachePaths != null && AssemblyInformationCachePaths.Length > 0)
+                    {
+                        diskCache = ResolveAssemblyReferenceCache.DeserializePrecomputedCaches(AssemblyInformationCachePaths, Log, fileExists);
+                    }
 
-            _cache = (rarDiskCache != null ? new SystemState(rarDiskCache) : new SystemState());
+                    return diskCache;
+                },
+                loadLazily: ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8));
         }
 
         /// <summary>
diff --git a/src/Tasks/ResolveAssemblyReferenceCache.cs b/src/Tasks/ResolveAssemblyReferenceCache.cs
index b6eb5006417..1d6f34c370c 100644
--- a/src/Tasks/ResolveAssemblyReferenceCache.cs
+++ b/src/Tasks/ResolveAssemblyReferenceCache.cs
@@ -44,8 +44,7 @@ internal bool IsDirty
         /// <summary>
         /// Class that holds the current file state.
         /// </summary>
-        [Serializable]
-        internal sealed class FileState : ITranslatable
+        internal record class FileState : ITranslatable
         {
             /// <summary>
             /// The last modified time for this file.
@@ -265,5 +264,42 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
                 instanceLocalFileStateCache = oldFileStateCache;
             }
         }
+
+        /// <summary>
+        /// Merges the existing data in <paramref name="toCache"/> the data from <paramref name="fromCache"/> and sets <see cref="IsDirty"/>
+        /// on <paramref name="toCache"/> accordingly.
+        /// </summary>
+        /// <param name="fromCache">The cache deserialized from disk.</param>
+        /// <param name="toCache">The cache built so far during the current RAR task execution.</param>
+        internal static void MergeInstanceLocalFileStateCache(ResolveAssemblyReferenceCache fromCache, ResolveAssemblyReferenceCache toCache)
+        {
+            // Special case: toCache is empty.
+            if (toCache.instanceLocalFileStateCache.Count == 0)
+            {
+                toCache.instanceLocalFileStateCache = fromCache.instanceLocalFileStateCache;
+                toCache.IsDirty = false;
+            }
+            else
+            {
+                // If "to" is bigger than "from", then mark it dirty because we will want to save back the extras.
+                bool toIsDirty = toCache.instanceLocalFileStateCache.Count > fromCache.instanceLocalFileStateCache.Count;
+
+                foreach (KeyValuePair<string, FileState> kvp in fromCache.instanceLocalFileStateCache)
+                {
+                    // The "to" FileState is more up-to-date, so we add missing items only. We compare items present in both dictionaries
+                    // to calculate the new value of toCache.IsDirty.
+                    if (toCache.instanceLocalFileStateCache.TryGetValue(kvp.Key, out FileState toFileState))
+                    {
+                        toIsDirty |= !toFileState.Equals(kvp.Value);
+                    }
+                    else
+                    {
+                        toCache.instanceLocalFileStateCache.Add(kvp.Key, kvp.Value);
+                    }
+                }
+
+                toCache.IsDirty = toIsDirty;
+            }
+        }
     }
 }
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 6a29eb48b9f..9a382009786 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -51,6 +51,12 @@ internal sealed class SystemState : ResolveAssemblyReferenceCache
         /// </summary>
         private static ConcurrentDictionary<string, FileState> s_processWideFileStateCache = new ConcurrentDictionary<string, FileState>(StringComparer.OrdinalIgnoreCase);
 
+        /// <summary>
+        /// A callback to invoke to lazily load the serialized <see cref="ResolveAssemblyReferenceCache"/> from disk.
+        /// Null if lazy loading is disabled or if the cache has already been loaded.
+        /// </summary>
+        private Func<ResolveAssemblyReferenceCache> _loadDiskCacheCallback;
+
         /// <summary>
         /// XML tables of installed assemblies.
         /// </summary>
@@ -93,9 +99,13 @@ public SystemState()
         {
         }
 
-        public SystemState(ResolveAssemblyReferenceCache resolveAssemblyReferenceCache)
-            : base(resolveAssemblyReferenceCache)
+        /// <summary>
+        /// Construct.
+        /// </summary>
+        public SystemState(Func<ResolveAssemblyReferenceCache> loadDiskCacheCallback, bool loadLazily)
+            : base(loadLazily ? null : loadDiskCacheCallback())
         {
+            _loadDiskCacheCallback = loadLazily ? loadDiskCacheCallback : null;
         }
 
         /// <summary>
@@ -208,6 +218,16 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
             bool isInstanceFileStateUpToDate = isCachedInInstance && lastModified == cachedInstanceFileState.LastModified;
             bool isProcessFileStateUpToDate = isCachedInProcess && lastModified == cachedProcessFileState.LastModified;
 
+            if (!isProcessFileStateUpToDate && !isInstanceFileStateUpToDate)
+            {
+                // If we haven't loaded the disk cache yet, do it now.
+                if (EnsureResolveAssemblyReferenceCacheLoaded())
+                {
+                    isCachedInInstance = instanceLocalFileStateCache.TryGetValue(path, out cachedInstanceFileState);
+                    isInstanceFileStateUpToDate = isCachedInInstance && lastModified == cachedInstanceFileState.LastModified;
+                }
+            }
+
             // If the process-wide cache contains an up-to-date FileState, always use it
             if (isProcessFileStateUpToDate)
             {
@@ -255,6 +275,32 @@ private FileState InitializeFileState(string path, DateTime lastModified)
             return fileState;
         }
 
+        /// <summary>
+        /// Loads the on-disk cache if it has not been attempted before during the current RAR execution.
+        /// </summary>
+        /// <returns>
+        /// True if this method loaded the cache, false otherwise.
+        /// </returns>
+        private bool EnsureResolveAssemblyReferenceCacheLoaded()
+        {
+            if (_loadDiskCacheCallback == null)
+            {
+                // We've already loaded (or attempted to load) the disk cache, nothing to do.
+                return false;
+            }
+
+            ResolveAssemblyReferenceCache diskCache = _loadDiskCacheCallback();
+            _loadDiskCacheCallback = null;
+
+            if (diskCache != null)
+            {
+                // If we successully loaded the cache from disk, merge it with what we already have.
+                MergeInstanceLocalFileStateCache(diskCache, this);
+                return true;
+            }
+            return false;
+        }
+
         /// <summary>
         /// Cached implementation of GetAssemblyName.
         /// </summary>
