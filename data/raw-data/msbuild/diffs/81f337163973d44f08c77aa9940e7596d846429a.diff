diff --git a/src/Build/Collections/CopyOnWritePropertyDictionary.cs b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
index b20e385b467..6dbb77fc6f8 100644
--- a/src/Build/Collections/CopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
@@ -69,7 +69,16 @@ private CopyOnWritePropertyDictionary(CopyOnWritePropertyDictionary<T> that)
         /// <summary>
         /// Accessor for the list of property names
         /// </summary>
-        ICollection<string> IDictionary<string, T>.Keys => PropertyNames;
+        ICollection<string> IDictionary<string, T>.Keys
+        {
+            get
+            {
+                lock (_properties)
+                {
+                    return _properties.Keys;
+                }
+            }
+        }
 
         /// <summary>
         /// Accessor for the list of properties
@@ -118,20 +127,6 @@ internal int Count
             }
         }
 
-        /// <summary>
-        /// Retrieves a collection containing the names of all the properties present in the dictionary.
-        /// </summary>
-        internal ICollection<string> PropertyNames
-        {
-            get
-            {
-                lock (_properties)
-                {
-                    return _properties.Keys;
-                }
-            }
-        }
-
         /// <summary>
         /// Get the property with the specified name, or null if none exists.
         /// Sets the property with the specified name, overwriting it if already exists.
@@ -180,15 +175,6 @@ internal T this[string name]
             }
         }
 
-        /// <summary>
-        /// Returns an enumerable which clones the properties 
-        /// </summary>
-        /// <returns>Returns a cloning enumerable.</returns>
-        public IEnumerable<T> GetCopyOnReadEnumerable()
-        {
-            return new CopyOnReadEnumerable<T>(this, _properties);
-        }
-
         /// <summary>
         /// Returns true if a property with the specified name is present in the collection,
         /// otherwise false.
@@ -438,38 +424,6 @@ internal void ImportProperties(IEnumerable<T> other)
             }
         }
 
-        /// <summary>
-        /// Removes the specified properties from this dictionary
-        /// </summary>
-        /// <param name="other">An enumerator over the properties to remove.</param>
-        internal void RemoveProperties(IEnumerable<T> other)
-        {
-            // Properties are locked in the remove method
-            foreach (T property in other)
-            {
-                Remove(property.Key);
-            }
-        }
-
-        /// <summary>
-        /// Helper to convert into a read-only dictionary of string, string.
-        /// </summary>
-        internal IDictionary<string, string> ToDictionary()
-        {
-            Dictionary<string, string> dictionary;
-
-            lock (_properties)
-            {
-                dictionary = new Dictionary<string, string>(_properties.Count, StringComparer.OrdinalIgnoreCase);
-                foreach (T property in this)
-                {
-                    dictionary[property.Key] = property.EscapedValue;
-                }
-            }
-
-            return dictionary;
-        }
-
         /// <summary>
         /// Clone. As we're copy on write, this 
         /// should be cheap.
