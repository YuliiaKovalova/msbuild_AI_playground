diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 20bd109a974..00a4e46919f 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -1240,234 +1239,4 @@ private bool ApplyVerbosityParameter(string parameterValue)
 
         #endregion
     }
-
-    /// <summary>
-    /// Console configuration needed for proper Console logging.
-    /// </summary>
-    internal interface IConsoleConfiguration
-    {
-        /// <summary>
-        /// Buffer width of destination Console.
-        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
-        /// -1 console buffer width can't be obtained.
-        /// </summary>
-        int BufferWidth { get; }
-
-        /// <summary>
-        /// True if console output accept ANSI colors codes.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        bool AcceptAnsiColorCodes { get; }
-
-        /// <summary>
-        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        bool OutputIsScreen { get; }
-
-        /// <summary>
-        /// Background color of client console, -1 if not detectable
-        /// Some platforms do not allow getting current background color. There
-        /// is not way to check, but not-supported exception is thrown. Assume
-        /// black, but don't crash.
-        /// </summary>
-        ConsoleColor BackgroundColor { get; }
-    }
-
-    /// <summary>
-    /// Console configuration of target Console at which we will render output.
-    /// It is supposed to be Console from other process to which output from this process will be redirected.
-    /// </summary>
-    internal class TargetConsoleConfiguration : IConsoleConfiguration, ITranslatable
-    {
-        private int _bufferWidth;
-        private bool _acceptAnsiColorCodes;
-        private bool _outputIsScreen;
-        private ConsoleColor _backgroundColor;
-
-        public TargetConsoleConfiguration(int bufferWidth, bool acceptAnsiColorCodes, bool outputIsScreen, ConsoleColor backgroundColor)
-        {
-            _bufferWidth = bufferWidth;
-            _acceptAnsiColorCodes = acceptAnsiColorCodes;
-            _outputIsScreen = outputIsScreen;
-            _backgroundColor = backgroundColor;
-        }
-
-        /// <summary>
-        /// Constructor for deserialization
-        /// </summary>
-        private TargetConsoleConfiguration()
-        {
-        }
-
-        public int BufferWidth => _bufferWidth;
-
-        public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;
-
-        public bool OutputIsScreen => _outputIsScreen;
-
-        public ConsoleColor BackgroundColor => _backgroundColor;
-
-        public void Translate(ITranslator translator)
-        {
-            translator.Translate(ref _bufferWidth);
-            translator.Translate(ref _acceptAnsiColorCodes);
-            translator.Translate(ref _outputIsScreen);
-            translator.TranslateEnum(ref _backgroundColor, (int)_backgroundColor);
-        }
-
-        internal static TargetConsoleConfiguration FactoryForDeserialization(ITranslator translator)
-        {
-            TargetConsoleConfiguration configuration = new();
-            configuration.Translate(translator);
-            return configuration;
-        }
-    }
-
-    /// <summary>
-    /// Console configuration of current process Console.
-    /// </summary>
-    internal class InProcessConsoleConfiguration : IConsoleConfiguration
-    {
-        /// <summary>
-        /// When set, we'll try reading background color.
-        /// </summary>
-        private static bool s_supportReadingBackgroundColor = true;
-
-        public int BufferWidth => Console.BufferWidth;
-
-        public bool AcceptAnsiColorCodes
-        {
-            get
-            {
-                bool acceptAnsiColorCodes = false;
-                if (NativeMethodsShared.IsWindows && !Console.IsOutputRedirected)
-                {
-                    try
-                    {
-                        IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
-                        if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
-                        {
-                            acceptAnsiColorCodes = (consoleMode & NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING) != 0;
-                        }
-                    }
-                    catch (Exception ex)
-                    {
-                        Debug.Assert(false, $"MSBuild client warning: problem during enabling support for VT100: {ex}.");
-                    }
-                }
-                else
-                {
-                    // On posix OSes we expect console always supports VT100 coloring unless it is redirected
-                    acceptAnsiColorCodes = !Console.IsOutputRedirected;
-                }
-
-                return acceptAnsiColorCodes;
-            }
-        }
-
-        public ConsoleColor BackgroundColor
-        {
-            get
-            {
-                if (s_supportReadingBackgroundColor)
-                {
-                    try
-                    {
-                        return Console.BackgroundColor;
-                    }
-                    catch (PlatformNotSupportedException)
-                    {
-                        s_supportReadingBackgroundColor = false;
-                    }
-                }
-
-                return ConsoleColor.Black;
-            }
-        }
-
-        public bool OutputIsScreen
-        {
-            get
-            {
-                bool isScreen = false;
-
-                if (NativeMethodsShared.IsWindows)
-                {
-                    // Get the std out handle
-                    IntPtr stdHandle = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
-
-                    if (stdHandle != NativeMethods.InvalidHandle)
-                    {
-                        uint fileType = NativeMethodsShared.GetFileType(stdHandle);
-
-                        // The std out is a char type(LPT or Console)
-                        isScreen = fileType == NativeMethodsShared.FILE_TYPE_CHAR;
-                    }
-                }
-                else
-                {
-                    isScreen = !Console.IsOutputRedirected;
-                }
-
-                return isScreen;
-            }
-        }
-    }
-
-    /// <summary>
-    /// Target console configuration.
-    /// If console output is redirected to other process console, like for example MSBuild Server does,
-    ///    we need to know property of target/final console at which our output will be rendered.
-    /// If console is rendered at current process Console, we grab properties from Console and/or by WinAPI.
-    /// </summary>
-    internal static class ConsoleConfiguration
-    {
-        /// <summary>
-        /// Get or set current target console configuration provider.
-        /// </summary>
-        public static IConsoleConfiguration Provider
-        {
-            get { return Instance.s_instance; }
-            set { Instance.s_instance = value; }
-        }
-
-        private static class Instance
-        {
-            // Explicit static constructor to tell C# compiler
-            // not to mark type as beforefieldinit
-            static Instance()
-            {
-            }
-
-            internal static IConsoleConfiguration s_instance = new InProcessConsoleConfiguration();
-        }
-
-        /// <summary>
-        /// Buffer width of destination Console.
-        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
-        /// -1 console buffer width can't be obtained.
-        /// </summary>
-        public static int BufferWidth => Provider.BufferWidth;
-
-        /// <summary>
-        /// True if console output accept ANSI colors codes.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        public static bool AcceptAnsiColorCodes => Provider.AcceptAnsiColorCodes;
-
-        /// <summary>
-        /// Background color of client console, -1 if not detectable
-        /// Some platforms do not allow getting current background color. There
-        /// is not way to check, but not-supported exception is thrown. Assume
-        /// black, but don't crash.
-        /// </summary>
-        public static ConsoleColor BackgroundColor => Provider.BackgroundColor;
-
-        /// <summary>
-        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
-        /// False if output is redirected to non screen type such as file or nul.
-        /// </summary>
-        public static bool OutputIsScreen => Provider.OutputIsScreen;
-    }
 }
diff --git a/src/Build/Logging/ConsoleConfiguration.cs b/src/Build/Logging/ConsoleConfiguration.cs
new file mode 100644
index 00000000000..a826d0c24e5
--- /dev/null
+++ b/src/Build/Logging/ConsoleConfiguration.cs
@@ -0,0 +1,63 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable disable
+using System;
+
+namespace Microsoft.Build.BackEnd.Logging;
+
+/// <summary>
+/// Target console configuration.
+/// If console output is redirected to other process console, like for example MSBuild Server does,
+///    we need to know property of target/final console at which our output will be rendered.
+/// If console is rendered at current process Console, we grab properties from Console and/or by WinAPI.
+/// </summary>
+internal static class ConsoleConfiguration
+{
+    /// <summary>
+    /// Get or set current target console configuration provider.
+    /// </summary>
+    public static IConsoleConfiguration Provider
+    {
+        get { return Instance.s_instance; }
+        set { Instance.s_instance = value; }
+    }
+
+    private static class Instance
+    {
+        // Explicit static constructor to tell C# compiler
+        // not to mark type as beforefieldinit
+        static Instance()
+        {
+        }
+
+        internal static IConsoleConfiguration s_instance = new InProcessConsoleConfiguration();
+    }
+
+    /// <summary>
+    /// Buffer width of destination Console.
+    /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
+    /// -1 console buffer width can't be obtained.
+    /// </summary>
+    public static int BufferWidth => Provider.BufferWidth;
+
+    /// <summary>
+    /// True if console output accept ANSI colors codes.
+    /// False if output is redirected to non screen type such as file or nul.
+    /// </summary>
+    public static bool AcceptAnsiColorCodes => Provider.AcceptAnsiColorCodes;
+
+    /// <summary>
+    /// Background color of client console, -1 if not detectable
+    /// Some platforms do not allow getting current background color. There
+    /// is not way to check, but not-supported exception is thrown. Assume
+    /// black, but don't crash.
+    /// </summary>
+    public static ConsoleColor BackgroundColor => Provider.BackgroundColor;
+
+    /// <summary>
+    /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
+    /// False if output is redirected to non screen type such as file or nul.
+    /// </summary>
+    public static bool OutputIsScreen => Provider.OutputIsScreen;
+}
diff --git a/src/Build/Logging/IConsoleConfiguration.cs b/src/Build/Logging/IConsoleConfiguration.cs
new file mode 100644
index 00000000000..86ff9c4ea47
--- /dev/null
+++ b/src/Build/Logging/IConsoleConfiguration.cs
@@ -0,0 +1,40 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable disable
+using System;
+
+namespace Microsoft.Build.BackEnd.Logging;
+
+/// <summary>
+/// Console configuration needed for proper Console logging.
+/// </summary>
+internal interface IConsoleConfiguration
+{
+    /// <summary>
+    /// Buffer width of destination Console.
+    /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
+    /// -1 console buffer width can't be obtained.
+    /// </summary>
+    int BufferWidth { get; }
+
+    /// <summary>
+    /// True if console output accept ANSI colors codes.
+    /// False if output is redirected to non screen type such as file or nul.
+    /// </summary>
+    bool AcceptAnsiColorCodes { get; }
+
+    /// <summary>
+    /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
+    /// False if output is redirected to non screen type such as file or nul.
+    /// </summary>
+    bool OutputIsScreen { get; }
+
+    /// <summary>
+    /// Background color of client console, -1 if not detectable
+    /// Some platforms do not allow getting current background color. There
+    /// is not way to check, but not-supported exception is thrown. Assume
+    /// black, but don't crash.
+    /// </summary>
+    ConsoleColor BackgroundColor { get; }
+}
diff --git a/src/Build/Logging/InProcessConsoleConfiguration.cs b/src/Build/Logging/InProcessConsoleConfiguration.cs
new file mode 100644
index 00000000000..d070e246773
--- /dev/null
+++ b/src/Build/Logging/InProcessConsoleConfiguration.cs
@@ -0,0 +1,99 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable disable
+using System;
+using System.Diagnostics;
+
+namespace Microsoft.Build.BackEnd.Logging;
+
+/// <summary>
+/// Console configuration of current process Console.
+/// </summary>
+internal class InProcessConsoleConfiguration : IConsoleConfiguration
+{
+    /// <summary>
+    /// When set, we'll try reading background color.
+    /// </summary>
+    private static bool s_supportReadingBackgroundColor = true;
+
+    public int BufferWidth => Console.BufferWidth;
+
+    public bool AcceptAnsiColorCodes
+    {
+        get
+        {
+            bool acceptAnsiColorCodes = false;
+            if (NativeMethodsShared.IsWindows && !Console.IsOutputRedirected)
+            {
+                try
+                {
+                    IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+                    if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
+                    {
+                        acceptAnsiColorCodes = (consoleMode & NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING) != 0;
+                    }
+                }
+                catch (Exception ex)
+                {
+                    Debug.Assert(false, $"MSBuild client warning: problem during enabling support for VT100: {ex}.");
+                }
+            }
+            else
+            {
+                // On posix OSes we expect console always supports VT100 coloring unless it is redirected
+                acceptAnsiColorCodes = !Console.IsOutputRedirected;
+            }
+
+            return acceptAnsiColorCodes;
+        }
+    }
+
+    public ConsoleColor BackgroundColor
+    {
+        get
+        {
+            if (s_supportReadingBackgroundColor)
+            {
+                try
+                {
+                    return Console.BackgroundColor;
+                }
+                catch (PlatformNotSupportedException)
+                {
+                    s_supportReadingBackgroundColor = false;
+                }
+            }
+
+            return ConsoleColor.Black;
+        }
+    }
+
+    public bool OutputIsScreen
+    {
+        get
+        {
+            bool isScreen = false;
+
+            if (NativeMethodsShared.IsWindows)
+            {
+                // Get the std out handle
+                IntPtr stdHandle = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+
+                if (stdHandle != NativeMethods.InvalidHandle)
+                {
+                    uint fileType = NativeMethodsShared.GetFileType(stdHandle);
+
+                    // The std out is a char type(LPT or Console)
+                    isScreen = fileType == NativeMethodsShared.FILE_TYPE_CHAR;
+                }
+            }
+            else
+            {
+                isScreen = !Console.IsOutputRedirected;
+            }
+
+            return isScreen;
+        }
+    }
+}
diff --git a/src/Build/Logging/TargetConsoleConfiguration.cs b/src/Build/Logging/TargetConsoleConfiguration.cs
new file mode 100644
index 00000000000..57f92dad1c5
--- /dev/null
+++ b/src/Build/Logging/TargetConsoleConfiguration.cs
@@ -0,0 +1,57 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable disable
+using System;
+
+namespace Microsoft.Build.BackEnd.Logging;
+
+/// <summary>
+/// Console configuration of target Console at which we will render output.
+/// It is supposed to be Console from other process to which output from this process will be redirected.
+/// </summary>
+internal class TargetConsoleConfiguration : IConsoleConfiguration, ITranslatable
+{
+    private int _bufferWidth;
+    private bool _acceptAnsiColorCodes;
+    private bool _outputIsScreen;
+    private ConsoleColor _backgroundColor;
+
+    public TargetConsoleConfiguration(int bufferWidth, bool acceptAnsiColorCodes, bool outputIsScreen, ConsoleColor backgroundColor)
+    {
+        _bufferWidth = bufferWidth;
+        _acceptAnsiColorCodes = acceptAnsiColorCodes;
+        _outputIsScreen = outputIsScreen;
+        _backgroundColor = backgroundColor;
+    }
+
+    /// <summary>
+    /// Constructor for deserialization
+    /// </summary>
+    private TargetConsoleConfiguration()
+    {
+    }
+
+    public int BufferWidth => _bufferWidth;
+
+    public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;
+
+    public bool OutputIsScreen => _outputIsScreen;
+
+    public ConsoleColor BackgroundColor => _backgroundColor;
+
+    public void Translate(ITranslator translator)
+    {
+        translator.Translate(ref _bufferWidth);
+        translator.Translate(ref _acceptAnsiColorCodes);
+        translator.Translate(ref _outputIsScreen);
+        translator.TranslateEnum(ref _backgroundColor, (int)_backgroundColor);
+    }
+
+    internal static TargetConsoleConfiguration FactoryForDeserialization(ITranslator translator)
+    {
+        TargetConsoleConfiguration configuration = new();
+        configuration.Translate(translator);
+        return configuration;
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 8109bfdf69b..926ea75351d 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -167,6 +167,10 @@
     <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildResult.cs" />
     <Compile Include="BackEnd\Node\OutOfProcServerNode.cs" />
+    <Compile Include="Logging\ConsoleConfiguration.cs" />
+    <Compile Include="Logging\IConsoleConfiguration.cs" />
+    <Compile Include="Logging\InProcessConsoleConfiguration.cs" />
+    <Compile Include="Logging\TargetConsoleConfiguration.cs" />
     <Compile Include="Utilities\ImmutableCollectionsExtensions.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskParameterElementLink.cs" />
