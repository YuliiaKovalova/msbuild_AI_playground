diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 71983787418..d633555b2e8 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -144,6 +144,7 @@ public void UnusedEnvironmentVariablesDoNotAppearInBinaryLog()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
+                env.SetEnvironmentVariable("MSBUILDLOGNOENVIRONMENTVARIABLES", "1");
                 env.SetEnvironmentVariable("EnvVar1", "itsValue");
                 env.SetEnvironmentVariable("EnvVar2", "value2");
                 env.SetEnvironmentVariable("EnvVar3", "value3");
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index b9348623878..bec73c4add5 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -388,7 +388,9 @@ public void LogBuildStarted()
                 message = ResourceUtilities.GetResourceString("BuildStarted");
             }
 
-            IDictionary<string, string> environmentProperties = _componentHost?.BuildParameters != null && Traits.Instance.LogAllEnvironmentVariables ?
+            IDictionary<string, string> environmentProperties = _componentHost?.BuildParameters != null &&
+                string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGNOENVIRONMENTVARIABLES")) &&
+                ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ?
                 _componentHost.BuildParameters.BuildProcessEnvironment
                 : null;
 
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index b7f2fcf4bc2..7509ee6d430 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -1,6 +1,7 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
@@ -116,7 +117,7 @@ private ProjectLoggingContext(
                 {
                     properties = Enumerable.Empty<DictionaryEntry>();
                 }
-                else if (Traits.Instance.LogAllEnvironmentVariables)
+                else if (string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGNOENVIRONMENTVARIABLES")) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                 {
                     properties = projectProperties.GetCopyOnReadEnumerable(property => new DictionaryEntry(property.Name, property.EvaluatedValue));
                 }
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index ebce24983ad..b8a01c6e99f 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -812,7 +812,9 @@ private void Evaluate()
             if (this._evaluationLoggingContext.LoggingService.IncludeEvaluationPropertiesAndItems)
             {
                 globalProperties = _data.GlobalPropertiesDictionary;
-                properties = Traits.Instance.LogAllEnvironmentVariables ? _data.Properties : FilterOutEnvironmentDerivedProperties(_data.Properties);
+                properties = string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGNOENVIRONMENTVARIABLES")) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ?
+                    _data.Properties :
+                    FilterOutEnvironmentDerivedProperties(_data.Properties);
                 items = _data.Items;
             }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 1089888ff12..e4879e63aac 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -247,14 +247,7 @@ private void Write(BuildStartedEventArgs e)
         {
             Write(BinaryLogRecordKind.BuildStarted);
             WriteBuildEventArgsFields(e);
-            if (Traits.Instance.LogAllEnvironmentVariables)
-            {
-                Write(e.BuildEnvironment);
-            }
-            else
-            {
-                Write(0);
-            }
+            Write(e.BuildEnvironment);
         }
 
         private void Write(BuildFinishedEventArgs e)
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index e9f5083db68..9957d33cf38 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -91,15 +91,6 @@ public Traits()
         /// </summary>
         public readonly bool LogPropertyFunctionsRequiringReflection = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildLogPropertyFunctionsRequiringReflection"));
 
-        /// <summary>
-        /// Log all environment variables whether or not they are used in a build in the binary log.
-        /// </summary>
-        public readonly bool LogAllEnvironmentVariables = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES"))
-#if !TASKHOST
-            && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4)
-#endif
-            ;
-
         /// <summary>
         /// Log property tracking information.
         /// </summary>
diff --git a/src/Utilities/MuxLogger.cs b/src/Utilities/MuxLogger.cs
index f9532864e15..c6c7e5dd454 100644
--- a/src/Utilities/MuxLogger.cs
+++ b/src/Utilities/MuxLogger.cs
@@ -862,7 +862,12 @@ private void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs bui
                         _firstProjectStartedEventContext = buildEvent.BuildEventContext;
 
                         // We've never seen a project started event, so raise the build started event and save this project started event.
-                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(_buildStartedEvent.Message, _buildStartedEvent.HelpKeyword, Traits.Instance.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : null);
+                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(
+                            _buildStartedEvent.Message,
+                            _buildStartedEvent.HelpKeyword,
+                            string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGNOENVIRONMENTVARIABLES")) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ?
+                            _buildStartedEvent.BuildEnvironment :
+                            null);
                         RaiseBuildStartedEvent(sender, startedEvent);
                     }
 
