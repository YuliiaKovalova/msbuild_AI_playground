diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 5ce09004df7..f8c2bbfe6e6 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1681,10 +1681,7 @@ private void DisplayCancelWaitMessage()
         /// <returns>True if tasks from custom factories should run out of process</returns>
         private bool ShouldUseTaskHostForCustomFactory()
         {
-            // Check the global environment variable that forces all tasks out of process
-            bool forceTaskHostLaunch = (Environment.GetEnvironmentVariable("MSBUILDFORCEALLTASKSOUTOFPROC") == "1");
-
-            if (!forceTaskHostLaunch)
+            if (!Traits.Instance.ForceTaskHostLaunch)
             {
                 return false;
             }
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index c4023835131..2e3433b7ccb 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -60,14 +60,6 @@ internal sealed class TaskRegistry : ITranslatable
         /// </summary>
         private Toolset _toolset;
 
-        /// <summary>
-        /// If true, we will force all tasks to run in the MSBuild task host EXCEPT
-        /// a small well-known set of tasks that are known to depend on IBuildEngine
-        /// callbacks; as forcing those out of proc would be just setting them up for
-        /// known failure.
-        /// </summary>
-        private static readonly bool s_forceTaskHostLaunch = (Environment.GetEnvironmentVariable("MSBUILDFORCEALLTASKSOUTOFPROC") == "1");
-
         /// <summary>
         /// Simple name for the MSBuild tasks (v4), used for shimming in loading
         /// task factory UsingTasks
@@ -1277,7 +1269,7 @@ public bool ComputeIfCustom()
                          !FileClassifier.IsMicrosoftAssembly(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) &&
                          // This condition will as well capture Microsoft tasks pulled from NuGet cache - since we decide based on assembly name.
-                         // Hence we do not have to add the 'IsMicrosoftPackageInNugetCache' call anywhere here 
+                         // Hence we do not have to add the 'IsMicrosoftPackageInNugetCache' call anywhere here
                          !FileClassifier.IsMicrosoftAssembly(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) &&
                          !FileClassifier.Shared.IsBuiltInLogic(_taskFactoryAssemblyLoadInfo.AssemblyFile)))
                     // and let's consider all tasks imported by common targets as non custom logic.
@@ -1477,7 +1469,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                         bool explicitlyLaunchTaskHost =
                             isTaskHostFactory ||
                             (
-                                s_forceTaskHostLaunch &&
+                                Traits.Instance.ForceTaskHostLaunch &&
                                 !TypeLoader.IsPartialTypeNameMatch(RegisteredName, "MSBuild") &&
                                 !TypeLoader.IsPartialTypeNameMatch(RegisteredName, "CallTarget"));
 
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index da8da210b3c..5abfeae8c52 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -139,6 +139,14 @@ public Traits()
 
         public readonly bool InProcNodeDisabled = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
 
+        /// <summary>
+        /// If true, we will force all tasks to run in the MSBuild task host EXCEPT
+        /// a small well-known set of tasks that are known to depend on IBuildEngine
+        /// callbacks; as forcing those out of proc would be just setting them up for
+        /// known failure.
+        /// </summary>
+        public readonly bool ForceTaskHostLaunch = Environment.GetEnvironmentVariable("MSBUILDFORCEALLTASKSOUTOFPROC") == "1";
+
         /// <summary>
         /// Variables controlling opt out at the level of not initializing telemetry infrastructure. Set to "1" or "true" to opt out.
         /// mirroring
