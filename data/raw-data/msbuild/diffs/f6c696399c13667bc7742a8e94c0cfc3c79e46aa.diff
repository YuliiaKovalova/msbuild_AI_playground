diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 5b246b864f0..0f80c152ba5 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1593,9 +1593,12 @@ private void InitializeLogger(ILogger logger, IEventSource sourceForLogger)
         {
             ILogger UnwrapLoggerType(ILogger log)
             {
-                return (log is ProjectCollection.ReusableLogger reusableLogger)
-                    ? reusableLogger.OriginalLogger
-                    : log;
+                while (log is ProjectCollection.ReusableLogger reusableLogger)
+                {
+                    log = reusableLogger.OriginalLogger;
+                }
+
+                return log;
             }
 
             try
diff --git a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
index d90818bd8e5..61f4bcb31fb 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
@@ -90,9 +90,9 @@ private static bool IsBuiltinType(string? typeName)
                 return false;
             }
 
-            return typeName!.StartsWith("Microsoft.Build", StringComparison.OrdinalIgnoreCase) ||
-                   typeName.StartsWith("Microsoft.NET.Build", StringComparison.OrdinalIgnoreCase) ||
-                   typeName.StartsWith("Microsoft.CodeAnalysis.BuildTasks", StringComparison.OrdinalIgnoreCase);
+            return typeName!.StartsWith("Microsoft.Build", StringComparison.Ordinal) ||
+                   typeName.StartsWith("Microsoft.NET.Build", StringComparison.Ordinal) ||
+                   typeName.StartsWith("Microsoft.NET.Sdk", StringComparison.Ordinal);
         }
 
         private static IDisposable StartTracking(
@@ -139,8 +139,6 @@ private static IDisposable StartTracking(
 
         private void StartTracking()
         {
-            // Make multisubscriptions idempotent
-            _appDomain.AssemblyLoad -= CurrentDomainOnAssemblyLoad;
             _appDomain.AssemblyLoad += CurrentDomainOnAssemblyLoad;
         }
 
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 2f129e643f2..15bb1ebc0cc 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -11,7 +11,7 @@
 using Microsoft.Build.BackEnd.Components.RequestBuilder;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
+using System.IO;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 using TaskLoggingContext = Microsoft.Build.BackEnd.Logging.TaskLoggingContext;
@@ -272,7 +272,8 @@ internal LoadedType InitializeFactory(
                 ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
                 _taskName = taskName;
 
-                using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(targetLoggingContext, AssemblyLoadingContext.TaskRun, loadInfo.AssemblyName);
+                string assemblyName = loadInfo.AssemblyName ?? Path.GetFileName(loadInfo.AssemblyFile);
+                using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(targetLoggingContext, AssemblyLoadingContext.TaskRun, assemblyName);
 
                 _loadedType = _typeLoader.Load(taskName, loadInfo, _taskHostFactoryExplicitlyRequested);
                 ProjectErrorUtilities.VerifyThrowInvalidProject(_loadedType != null, elementLocation, "TaskLoadFailure", taskName, loadInfo.AssemblyLocation, String.Empty);
