diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 2d440463e84..2bf0ac9fdc0 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2517,147 +2517,193 @@ private static bool ProcessCommandLineSwitches(
 
         private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches commandLineSwitches, out string aggregatedParameters)
         {
-            string terminalloggerArg;
+            aggregatedParameters = AggregateParameters(commandLineSwitches);
+            string defaultValue = FindDefaultValue(aggregatedParameters);
 
-            string[] terminalLoggerParameters = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.TerminalLoggerParameters];
-            aggregatedParameters = terminalLoggerParameters?.Length > 0 ?
-                AggregateParameters(string.Empty, terminalLoggerParameters) :
-                string.Empty;
+            string terminalLoggerArg = null;
+            if (!TryFromCommandLine(commandLineSwitches) && !TryFromEnvironmentVariables())
+            {
+                ApplyDefault();
+            }
 
-            // Find default configuration so it is part of telemetry even when default is not used.
-            // Default can be stored in /tlp:default=true|false|on|off|auto
-            string defaultValue = null;
-            foreach (string parameter in aggregatedParameters.Split(MSBuildConstants.SemicolonChar))
+            terminalLoggerArg = NormalizeIntoBooleanValues();
+
+            bool useTerminalLogger = false;
+            if (!TrueOrFalse())
             {
-                if (string.IsNullOrWhiteSpace(parameter))
+                ItMustBeAuto();
+            }
+
+            return KnownTelemetry.LoggingConfigurationTelemetry.TerminalLogger = useTerminalLogger;
+
+            static bool DoesEnvironmentSupportTerminalLogger()
+            {
+                (var acceptAnsiColorCodes, var outputIsScreen, s_originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
+
+                if (!outputIsScreen)
                 {
-                    continue;
+                    s_globalMessagesToLogInBuildLoggers.Add(
+                        new BuildManager.DeferredBuildMessage(ResourceUtilities.GetResourceString("TerminalLoggerNotUsedRedirected"), MessageImportance.Low));
+                    return false;
                 }
 
-                string[] parameterAndValue = parameter.Split(MSBuildConstants.EqualsChar);
-                if (parameterAndValue[0].Equals("DEFAULT", StringComparison.InvariantCultureIgnoreCase) && parameterAndValue.Length > 1)
+                // TerminalLogger is not used if the terminal does not support ANSI/VT100 escape sequences.
+                if (!acceptAnsiColorCodes)
                 {
-                    defaultValue = parameterAndValue[1];
+                    s_globalMessagesToLogInBuildLoggers.Add(
+                        new BuildManager.DeferredBuildMessage(ResourceUtilities.GetResourceString("TerminalLoggerNotUsedNotSupported"), MessageImportance.Low));
+                    return false;
                 }
-            }
 
-            if (defaultValue == null)
-            {
-                defaultValue = bool.FalseString;
-                KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefault = bool.FalseString;
-                KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefaultSource = "msbuild";
+                if (Traits.Instance.EscapeHatches.EnsureStdOutForChildNodesIsPrimaryStdout)
+                {
+                    s_globalMessagesToLogInBuildLoggers.Add(
+                        new BuildManager.DeferredBuildMessage(ResourceUtilities.GetResourceString("TerminalLoggerNotUsedDisabled"), MessageImportance.Low));
+                    return false;
+                }
+
+                return true;
             }
-            else
+
+            string FindDefaultValue(string s)
             {
-                // Lets check DOTNET CLI env var
-                string dotnetCliEnvVar = Environment.GetEnvironmentVariable("DOTNET_CLI_BUILD_TERMINAL_LOGGER");
-                KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefault = defaultValue;
-                KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefaultSource = string.IsNullOrEmpty(dotnetCliEnvVar) ? "sdk" : "DOTNET_CLI_BUILD_TERMINAL_LOGGER";
+                // Find default configuration so it is part of telemetry even when default is not used.
+                // Default can be stored in /tlp:default=true|false|on|off|auto
+                string terminalLoggerDefault = null;
+                foreach (string parameter in s.Split(MSBuildConstants.SemicolonChar))
+                {
+                    if (string.IsNullOrWhiteSpace(parameter))
+                    {
+                        continue;
+                    }
+
+                    string[] parameterAndValue = parameter.Split(MSBuildConstants.EqualsChar);
+                    if (parameterAndValue[0].Equals("default", StringComparison.InvariantCultureIgnoreCase) && parameterAndValue.Length > 1)
+                    {
+                        terminalLoggerDefault = parameterAndValue[1];
+                    }
+                }
+
+                if (terminalLoggerDefault == null)
+                {
+                    terminalLoggerDefault = bool.FalseString;
+                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefault = bool.FalseString;
+                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefaultSource = "msbuild";
+                }
+                else
+                {
+                    // Lets check DOTNET CLI env var
+                    string dotnetCliEnvVar = Environment.GetEnvironmentVariable("DOTNET_CLI_BUILD_TERMINAL_LOGGER");
+                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefault = terminalLoggerDefault;
+                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerDefaultSource = string.IsNullOrWhiteSpace(dotnetCliEnvVar) ? "sdk" : "DOTNET_CLI_BUILD_TERMINAL_LOGGER";
+                }
+
+                return terminalLoggerDefault;
             }
 
-            // Command line wins, so check it first
-            if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.TerminalLogger))
+            bool TryFromCommandLine(CommandLineSwitches commandLineSwitches1)
             {
+                if (!commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.TerminalLogger))
+                {
+                    return false;
+                }
+
                 // There's a switch set, but there might be more than one
-                string[] switches = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.TerminalLogger];
+                string[] switches = commandLineSwitches1[CommandLineSwitches.ParameterizedSwitch.TerminalLogger];
 
-                terminalloggerArg = switches[switches.Length - 1];
+                terminalLoggerArg = switches[switches.Length - 1];
 
                 // if the switch was set but not to an explicit value, the value is "auto"
-                if (string.IsNullOrEmpty(terminalloggerArg))
+                if (string.IsNullOrEmpty(terminalLoggerArg))
                 {
-                    terminalloggerArg = "auto";
+                    terminalLoggerArg = "auto";
                 }
 
-                KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntent = terminalloggerArg ?? string.Empty;
+                KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntent = terminalLoggerArg ?? string.Empty;
                 KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntentSource = "arg";
+
+                return true;
             }
-            else
+
+            bool TryFromEnvironmentVariables()
             {
                 // Keep MSBUILDLIVELOGGER supporitng existing use. But MSBUILDTERMINALLOGGER takes precedence.
                 string liveLoggerArg = Environment.GetEnvironmentVariable("MSBUILDLIVELOGGER");
-                terminalloggerArg = Environment.GetEnvironmentVariable("MSBUILDTERMINALLOGGER");
-                if (!string.IsNullOrEmpty(terminalloggerArg))
+                terminalLoggerArg = Environment.GetEnvironmentVariable("MSBUILDTERMINALLOGGER");
+                if (!string.IsNullOrEmpty(terminalLoggerArg))
                 {
                     s_globalMessagesToLogInBuildLoggers.Add(
-                        new BuildManager.DeferredBuildMessage($"The environment variable MSBUILDTERMINALLOGGER was set to {terminalloggerArg}.", MessageImportance.Low));
+                        new BuildManager.DeferredBuildMessage($"The environment variable MSBUILDTERMINALLOGGER was set to {terminalLoggerArg}.", MessageImportance.Low));
 
-                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntent = terminalloggerArg;
+                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntent = terminalLoggerArg;
                     KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntentSource = "MSBUILDTERMINALLOGGER";
                 }
                 else if (!string.IsNullOrEmpty(liveLoggerArg))
                 {
-                    terminalloggerArg = liveLoggerArg;
+                    terminalLoggerArg = liveLoggerArg;
                     s_globalMessagesToLogInBuildLoggers.Add(
                         new BuildManager.DeferredBuildMessage($"The environment variable MSBUILDLIVELOGGER was set to {liveLoggerArg}.", MessageImportance.Low));
 
-                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntent = terminalloggerArg;
+                    KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntent = terminalLoggerArg;
                     KnownTelemetry.LoggingConfigurationTelemetry.TerminalLoggerUserIntentSource = "MSBUILDLIVELOGGER";
                 }
                 else
                 {
-                    // Not from the command line, rps, or environment, so we apply default now.
-                    terminalloggerArg = defaultValue;
+                    return false;
                 }
-            }
 
-            // We now have a string`. It can be "true" or "false" which means just that:
-            if (terminalloggerArg.Equals("on", StringComparison.InvariantCultureIgnoreCase))
-            {
-                terminalloggerArg = bool.TrueString;
-            }
-            else if (terminalloggerArg.Equals("off", StringComparison.InvariantCultureIgnoreCase))
-            {
-                terminalloggerArg = bool.FalseString;
+                return true;
             }
 
-            bool useTerminalLogger;
-            if (bool.TryParse(terminalloggerArg, out bool result))
+            string NormalizeIntoBooleanValues()
             {
-                useTerminalLogger = result;
-            }
-            else
-            {
-                // or it can be "auto", meaning "enable if we can"
-                if (!terminalloggerArg.Equals("auto", StringComparison.OrdinalIgnoreCase))
+                // We now have a string`. It can be "true" or "false" which means just that:
+                if (terminalLoggerArg.Equals("on", StringComparison.InvariantCultureIgnoreCase))
+                {
+                    terminalLoggerArg = bool.TrueString;
+                }
+                else if (terminalLoggerArg.Equals("off", StringComparison.InvariantCultureIgnoreCase))
                 {
-                    CommandLineSwitchException.Throw("InvalidTerminalLoggerValue", terminalloggerArg);
+                    terminalLoggerArg = bool.FalseString;
                 }
 
-                useTerminalLogger = DoesEnvironmentSupportTerminalLogger();
+                return terminalLoggerArg;
             }
 
-            KnownTelemetry.LoggingConfigurationTelemetry.TerminalLogger = useTerminalLogger;
-
-            return useTerminalLogger;
+            void ApplyDefault()
+            {
+                terminalLoggerArg = defaultValue;
+            }
 
-            static bool DoesEnvironmentSupportTerminalLogger()
+            string AggregateParameters(CommandLineSwitches switches)
             {
-                (var acceptAnsiColorCodes, var outputIsScreen, s_originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
+                string[] terminalLoggerParameters = switches[CommandLineSwitches.ParameterizedSwitch.TerminalLoggerParameters];
+                return terminalLoggerParameters?.Length > 0 ? MSBuildApp.AggregateParameters(string.Empty, terminalLoggerParameters) : string.Empty;
+            }
 
-                if (!outputIsScreen)
+            bool TrueOrFalse()
+            {
+                if (bool.TryParse(terminalLoggerArg, out bool result))
                 {
-                    s_globalMessagesToLogInBuildLoggers.Add(
-                        new BuildManager.DeferredBuildMessage(ResourceUtilities.GetResourceString("TerminalLoggerNotUsedRedirected"), MessageImportance.Low));
-                    return false;
-                }
+                    useTerminalLogger = result;
+                    // This needs to be called so Ansi Color Codes are enabled for the terminal logger.
+                    (_, _, s_originalConsoleMode) =  NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();
 
-                // TerminalLogger is not used if the terminal does not support ANSI/VT100 escape sequences.
-                if (!acceptAnsiColorCodes)
-                {
-                    s_globalMessagesToLogInBuildLoggers.Add(
-                        new BuildManager.DeferredBuildMessage(ResourceUtilities.GetResourceString("TerminalLoggerNotUsedNotSupported"), MessageImportance.Low));
-                    return false;
+                    return true;
                 }
 
-                if (Traits.Instance.EscapeHatches.EnsureStdOutForChildNodesIsPrimaryStdout)
+                return false;
+            }
+
+            void ItMustBeAuto()
+            {
+                // or it can be "auto", meaning "enable if we can"
+                if (!terminalLoggerArg.Equals("auto", StringComparison.OrdinalIgnoreCase))
                 {
-                    s_globalMessagesToLogInBuildLoggers.Add(
-                        new BuildManager.DeferredBuildMessage(ResourceUtilities.GetResourceString("TerminalLoggerNotUsedDisabled"), MessageImportance.Low));
-                    return false;
+                    CommandLineSwitchException.Throw("InvalidTerminalLoggerValue", terminalLoggerArg);
                 }
 
-                return true;
+                useTerminalLogger = DoesEnvironmentSupportTerminalLogger();
             }
         }
 
