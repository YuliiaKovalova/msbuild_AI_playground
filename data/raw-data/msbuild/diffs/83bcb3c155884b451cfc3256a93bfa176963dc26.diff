diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index ba6c54c110e..c3cd00d582c 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1590,6 +1590,13 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
         /// <exception cref="Exception">Any exception which is a ExceptionHandling.IsCriticalException will not be wrapped</exception>
         private void InitializeLogger(ILogger logger, IEventSource sourceForLogger)
         {
+            ILogger UnwrapLoggerType(ILogger log)
+            {
+                return (log is ProjectCollection.ReusableLogger reusableLogger)
+                    ? reusableLogger.OriginalLogger
+                    : log;
+            }
+
             IDisposable assemblyLoadTracker = null;
             try
             {
@@ -1598,7 +1605,7 @@ private void InitializeLogger(ILogger logger, IEventSource sourceForLogger)
                     logger.GetType().Assembly != Assembly.GetExecutingAssembly() &&
                     !(logger.GetType().FullName?.StartsWith("Microsoft.Build.Logging", StringComparison.OrdinalIgnoreCase) ?? false))
                 {
-                    assemblyLoadTracker = AssemblyLoadsTracker.StartTracking(this, AssemblyLoadingContext.LoggerInitialization, logger.GetType());
+                    assemblyLoadTracker = AssemblyLoadsTracker.StartTracking(this, AssemblyLoadingContext.LoggerInitialization, UnwrapLoggerType(logger).GetType());
                 }
 
                 INodeLogger nodeLogger = logger as INodeLogger;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
index ae3471ce681..51b9d2d07f5 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
@@ -157,7 +157,7 @@ private void CurrentDomainOnAssemblyLoad(object? sender, AssemblyLoadEventArgs a
 
             AssemblyLoadBuildEventArgs buildArgs = new(_context, _initiator, assemblyName, assemblyPath, mvid, appDomainDescriptor)
             {
-                BuildEventContext = _loggingContext?.BuildEventContext
+                BuildEventContext = _loggingContext?.BuildEventContext ?? BuildEventContext.Invalid
             };
             _loggingContext?.LogBuildEvent(buildArgs);
             _loggingService?.LogBuildEvent(buildArgs);
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index cbfae02ba52..7c41420a170 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -3210,8 +3210,12 @@ private static ILogger[] ProcessLoggingSwitches(
                 originalVerbosity = ProcessVerbositySwitch(verbositySwitchParameters[verbositySwitchParameters.Length - 1]);
                 verbosity = originalVerbosity;
             }
+            var loggers = new List<ILogger>();
+
+            var outVerbosity = verbosity;
+            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref outVerbosity);
 
-            var loggers = ProcessLoggerSwitch(loggerSwitchParameters, verbosity);
+            ProcessLoggerSwitch(loggerSwitchParameters, loggers, verbosity);
 
             // Add any loggers which have been specified on the commandline
             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);
@@ -3232,11 +3236,11 @@ private static ILogger[] ProcessLoggingSwitches(
 
             ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
 
-            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref verbosity);
-
             // TOOD: Review
             // ProcessLiveLogger(noConsoleLogger, loggers);
 
+            verbosity = outVerbosity;
+
             profilerLogger = ProcessProfileEvaluationSwitch(profileEvaluationParameters, loggers, out enableProfiler);
 
             return loggers.ToArray();
@@ -3621,10 +3625,8 @@ internal static LoggerVerbosity ProcessVerbositySwitch(string value)
         /// Figures out which additional loggers are going to listen to build events.
         /// </summary>
         /// <returns>List of loggers.</returns>
-        private static List<ILogger> ProcessLoggerSwitch(string[] parameters, LoggerVerbosity verbosity)
+        private static void ProcessLoggerSwitch(string[] parameters, List<ILogger> loggers, LoggerVerbosity verbosity)
         {
-            var loggers = new List<ILogger>();
-
             foreach (string parameter in parameters)
             {
                 string unquotedParameter = QuotingUtilities.Unquote(parameter);
@@ -3636,8 +3638,6 @@ private static List<ILogger> ProcessLoggerSwitch(string[] parameters, LoggerVerb
                     loggers.Add(logger);
                 }
             }
-
-            return loggers;
         }
 
         /// <summary>
