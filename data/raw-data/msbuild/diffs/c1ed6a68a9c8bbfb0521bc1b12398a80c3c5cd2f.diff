diff --git a/src/Build.UnitTests/BuildEventArgsWriter_Tests.cs b/src/Build.UnitTests/BuildEventArgsWriter_Tests.cs
new file mode 100644
index 00000000000..eb5d5e41656
--- /dev/null
+++ b/src/Build.UnitTests/BuildEventArgsWriter_Tests.cs
@@ -0,0 +1,33 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.IO;
+using Xunit;
+using Microsoft.Build.Logging;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Engine.UnitTests
+{
+    public class BuildEventArgsWriter_Tests
+    {
+        [Fact]
+        public void WriteBlobFromStream()
+        {
+            byte[] bytes = new byte[] { 1, 2, 3, 4, 5 };
+            MemoryStream inputStream = new MemoryStream(bytes);
+
+            MemoryStream outputStream = new MemoryStream();
+            using BinaryWriter binaryWriter = new BinaryWriter(outputStream);
+            BuildEventArgsWriter writer = new BuildEventArgsWriter(binaryWriter);
+            
+            writer.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, inputStream);
+            binaryWriter.Flush();
+
+            outputStream.Position = 0;
+            BinaryReader binaryReader = new BinaryReader(outputStream);
+            Assert.Equal(BinaryLogRecordKind.ProjectImportArchive, (BinaryLogRecordKind)binaryReader.Read7BitEncodedInt());
+            Assert.Equal(bytes.Length, binaryReader.Read7BitEncodedInt());
+            Assert.Equal(bytes, binaryReader.ReadBytes(bytes.Length));
+        }
+    }
+}
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 28a16df7c9c..6dfc5cfb26d 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -239,7 +239,14 @@ public void Shutdown()
                     {
                         using (FileStream fileStream = File.OpenRead(archiveFilePath))
                         {
-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);
+                            if (fileStream.Length > int.MaxValue)
+                            {
+                                LogMessage("Imported files archive exceeded 2GB limit and it's not embedded.");
+                            }
+                            else
+                            {
+                                eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);
+                            }
                         }
 
                         File.Delete(archiveFilePath);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 7b40c84f4be..084c6416564 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -220,12 +220,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)
 
         public void WriteBlob(BinaryLogRecordKind kind, Stream stream)
         {
+            if (stream.Length > int.MaxValue)
+            {
+                throw new ArgumentOutOfRangeException(nameof(stream));
+            }
+
             // write the blob directly to the underlying writer,
             // bypassing the memory stream
             using var redirection = RedirectWritesToOriginalWriter();
 
             Write(kind);
-            Write(stream.Length);
+            Write((int)stream.Length);
             Write(stream);
         }
 
