diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index d290353be2c..a75fe44d23a 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -3,39 +3,53 @@
 //
 
 using System;
-
-// TODO: See https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#viewport-positioning
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
-    public enum ANSIForegroundColor
-    {
-        None = 0,
-        Red = 31,
-        Green = 32,
-        Yellow = 33,
-        Blue = 34,
-        Magenta = 35,
-        Cyan = 36,
-        White = 37
-    }
-
-    public enum ANSIBackgroundColor
-    {
-        None = 0,
-        Red = 41,
-        Green = 42,
-        Yellow = 43,
-        Blue = 44,
-        Magenta = 45,
-        Cyan = 46,
-        White = 47
-    }
-
-    public static class ANSIBuilder
+    internal static class ANSIBuilder
     {
         public static class Formatting
         {
+            public enum ForegroundColor
+            {
+                Black = 30,
+                Red = 31,
+                Green = 32,
+                Yellow = 33,
+                Blue = 34,
+                Magenta = 35,
+                Cyan = 36,
+                White = 37,
+                Default = 39
+            };
+            public enum BackgroundColor
+            {
+                Black = 40,
+                Red = 41,
+                Green = 42,
+                Yellow = 43,
+                Blue = 44,
+                Magenta = 45,
+                Cyan = 46,
+                White = 47,
+                Default = 49
+            }
+            public static string Color(string text, ForegroundColor color)
+            {
+                return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
+            }
+            public static string Color(string text, BackgroundColor color)
+            {
+                return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
+            }
+            public static string Color(string text, BackgroundColor backgrdoundColor, ForegroundColor foregroundColor)
+            {
+                return String.Format("\x1b[{0};{1}m{2}\x1b[0m", (int)backgrdoundColor, (int)foregroundColor, text);
+            }
             public static string Bold(string text)
             {
                 return String.Format("\x1b[1m{0}\x1b[22m", text);
@@ -44,7 +58,7 @@ public static string Dim(string text)
             {
                 return String.Format("\x1b[2m{0}\x1b[22m", text);
             }
-            public static string Italics(string text)
+            public static string Italic(string text)
             {
                 return String.Format("\x1b[3m{0}\x1b[23m", text);
             }
@@ -52,43 +66,191 @@ public static string Underlined(string text)
             {
                 return String.Format("\x1b[4m{0}\x1b[24m", text);
             }
+            public static string DoubleUnderlined(string text)
+            {
+                return String.Format("\x1b[21m{0}\x1b[24m", text);
+            }
             public static string Blinking(string text)
             {
                 return String.Format("\x1b[5m{0}\x1b[25m", text);
             }
-            public static string Strikethrough(string text)
+            public static string Inverse(string text)
+            {
+                return String.Format("\x1b[7m{0}\x1b[27m", text);
+            }
+            public static string Invisible(string text)
+            {
+                return String.Format("\x1b[8m{0}\x1b[28m", text);
+            }
+            public static string CrossedOut(string text)
             {
                 return String.Format("\x1b[9m{0}\x1b[29m", text);
             }
-            public static string Color(string text, ANSIBackgroundColor color) {
-                return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
+            public static string Overlined(string text)
+            {
+                return String.Format("\x1b[53m{0}\x1b[55m", text);
             }
-            public static string Color(string text, ANSIForegroundColor color)
+            // TODO: Review
+            // TODO: Test outside of Windows Terminal (eg, terminal.app)
+            public static string Hyperlink(string text, string url)
             {
-                return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
+                // return String.Format("\x1b[]8;;{0}\x1b\\{1}\x1b[]8;\x1b\\", text, url);
+                return $"\x1b[]8;;{url}\x1b[\\{text}\x1b[]8;;\x1b[\\";
+            }
+            public static string DECLineDrawing(string text)
+            {
+                return String.Format("\x1b(0{0}\x1b(B", text);
             }
         }
+
+
         public static class Cursor
         {
-            public static string GoToHome()
+            public enum CursorStyle
+            {
+                Default = 0,
+                BlockBlinking = 1,
+                BlockSteady = 2,
+                UnderlineBlinking = 3,
+                UnderlineSteady = 4,
+                BarBlinking = 5,
+                BarSteady = 6,
+            }
+
+            public static string Style(CursorStyle style)
+            {
+                return String.Format("\x1b[{0} q", (int)style);
+            }
+
+            public static string Up(int n = 1)
+            {
+                return String.Format("\x1b[{0}A", n);
+            }
+            public static string UpAndScroll(int n)
+            {
+                string result = "";
+                for (int i = 0; i < n; i++) {
+                    result += "\x1bM";
+                }
+                return result;
+            }
+            public static string Down(int n = 1)
             {
-                return "\x1b[H";
+                return String.Format("\x1b[{0}B", n);
             }
-            public static string GoToPosition(int row, int column)
+            public static string Forward(int n = 1)
+            {
+                return String.Format("\x1b[{0}C", n);
+            }
+            public static string Backward(int n = 1)
+            {
+                return String.Format("\x1b[{0}D", n);
+            }
+            public static string Home()
+            {
+                return String.Format("\x1b[H");
+            }
+            public static string Position(int row, int column)
             {
                 return String.Format("\x1b[{0};{1}H", row, column);
             }
+            public static string SavePosition()
+            {
+                return String.Format("\x1b[s");
+            }
+            public static string RestorePosition() {
+                return String.Format("\x1b[u");
+            }
         }
+
+        public static class Tabulator
+        {
+            public static string SetStop()
+            {
+                return String.Format("\x1bH");
+            }
+            public static string ForwardTab(int n)
+            {
+                return String.Format("\x1b[{0}I", n);
+            }
+            public static string BackwardTab(int n)
+            {
+                return String.Format("\x1b[{0}Z", n);
+            }
+            public static string UnsetStop()
+            {
+                return String.Format("\x1b[0g");
+            }
+            public static string UnserAlStops()
+            {
+                return String.Format("\x1b[3g");
+            }
+        }
+
+        public static class Viewport
+        {
+            public static string ScrollDown(int n)
+            {
+                return String.Format("\x1b[{0}T", n);
+            }
+            public static string ScrollUp(int n)
+            {
+                return String.Format("\x1b[{0}S", n);
+            }
+            public static string SetScrollingRegion(int start, int end)
+            {
+                return String.Format("\x1b[{0};{1}r", start, end);
+            }
+            public static string PrependLines(int n)
+            {
+                return String.Format("\x1b[{0}L", n);
+            }
+            public static string DeleteLines(int n)
+            {
+                return String.Format("\x1b[{0}M", n);
+            }
+        }
+
         public static class Eraser
         {
-            public static string EraseCurrentLine()
+            public static string DisplayCursorToEnd()
+            {
+                return String.Format("\x1b[0J");
+            }
+            public static string DisplayStartToCursor()
+            {
+                return String.Format("\x1b[1J");
+            }
+            public static string Display()
+            {
+                return String.Format("\x1b[2J");
+            }
+            public static string LineCursorToEnd()
             {
-                return "\x1b[2K";
+                return String.Format("\x1b[0K");
+            }
+            public static string LineStartToCursor()
+            {
+                return String.Format("\x1b[1K");
+            }
+            public static string Line()
+            {
+                return String.Format("\x1b[2k");
             }
         }
+
         public static class Graphics
         {
-            public static int loadingCounter = 0;
+            private static int spinnerCounter = 0;
+            public static string Spinner()
+            {
+                return Spinner(spinnerCounter++);
+            }
+            public static string Spinner(int n)
+            {
+                char[] chars = { '\\', '|', '/', '-'};
+                return chars[n % (chars.Length - 1)].ToString();
+            }
             public static string ProgressBar(float percentage, int width = 10, char completedChar = '█', char remainingChar = '░')
             {
                 string result = "";
@@ -102,12 +264,25 @@ public static string ProgressBar(float percentage, int width = 10, char complete
                 }
                 return result;
             }
+            public static string Bell()
+            {
+                return String.Format("\x07");
+            }
+        }
 
-            public static string Spinner()
+        public static class Buffer
+        {
+            public static string Fill()
+            {
+                return String.Format("\x1b#8");
+            }
+            public static string UseAlternateBuffer()
+            {
+                return "\x1b[?1049h";
+            }
+            public static string UseMainBuffer()
             {
-                char[] chars = {'\\', '|', '/', '-'};
-                loadingCounter = (loadingCounter+1) % (chars.Length - 1);
-                return chars[loadingCounter].ToString();
+                return "\x1b[?1049l";
             }
         }
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index cc9743f39ac..f17c888437e 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -1,89 +1,15 @@
 ﻿using System;
 using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-using System.Security;
 
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Logging;
+using System.Runtime.InteropServices;
+using System.Threading;
+using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
-    /// <summary>
-    /// Represents an identifiable line within the log
-    /// </summary>
-    public class LogLine
-    {
-        private static int IdCounter = 0;
-        public int Id { get; private set; }
-        public string Text;
-        public LogLine(string text)
-        {
-            Id = IdCounter++;
-            Text = text;
-        }
-        public int LineNumber
-        {
-            get
-            {
-                return Array.IndexOf( Log.LogLines.Keys.ToArray(), Id ) + Log.InitialCursorHeight + 1;
-            }
-        }
-    }
-    /// <summary>
-    /// Utility class for writing identifiable log lines
-    /// </summary>
-    public static class Log
-    {
-        public static int InitialCursorHeight;
-        public static Dictionary<int, LogLine> LogLines = new Dictionary<int, LogLine>();
-
-        public static LogLine WriteNewLine(string text)
-        {
-            // Get starting cursor position
-            int lineNumber = LogLines.Count + InitialCursorHeight + 1;
-            // Create, add and print line
-            LogLine line = new LogLine(text);
-            LogLines.Add(line.Id, line);
-            Console.Write(
-                "\n"
-                + ANSIBuilder.Cursor.GoToPosition(lineNumber, 0)
-                + line.Text
-                + "\x1bS"
-                + "\x1bS"
-                + "\x1bS"
-                + "\x1bS"
-            );
-            // Return line
-            return line;
-        }
-        public static void WriteInLine(string text, int lineId)
-        {
-            // Get Line id
-            LogLine line = Log.LogLines[lineId];
-            if(line != null)
-            {
-                // Replace text on line
-                line.Text = text;
-                // Write it
-                Console.Write(
-                    ANSIBuilder.Cursor.GoToPosition(line.LineNumber, 0)
-                    + ANSIBuilder.Eraser.EraseCurrentLine()
-                    + "\r"
-                    + text
-                );
-            }
-        }
-        public static void DeleteLine(int lineId)
-        {
-            return;
-        }
-    }
-
     public class FancyLogger : ILogger
     {
-        public int i = 0;
         public Dictionary<int, int> projectConsoleLines = new Dictionary<int, int>();
         public Dictionary<int, int> tasksConsoleLines = new Dictionary<int, int>();
         public Dictionary<int, int> targetConsoleLines = new Dictionary<int, int>();
@@ -114,20 +40,16 @@ public void Initialize(IEventSource eventSource)
             eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
+            {
+                FancyLoggerBuffer.Initialize();
 
-            // TODO: Review values
-            // Console.BufferHeight = Int16.MaxValue - 10;
-            Log.InitialCursorHeight = Console.CursorTop;
-
-            Log.WriteNewLine(
-                "MSBuild Fancy Console Logger"
-            );
+                Thread.Sleep(15_000);
+            }
         }
 
         // Build
         void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         {
-            // Console.WriteLine( LoggerFormatting.Bold("[Build]") + "\t Started");
         }
         void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         {
@@ -137,66 +59,21 @@ void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         // Project
         void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
-            Log.WriteNewLine(
-                ANSIBuilder.Formatting.Color(
-                    ANSIBuilder.Formatting.Bold(String.Format("Project {0} started", e.ProjectFile)), ANSIForegroundColor.Yellow
-                )
-            );
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
-            // Console.WriteLine(LoggerFormatting.Bold("[Project]") + "\t Finished");
         }
-
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
-            if (e.BuildEventContext?.TargetId != null)
-            {
-                LogLine line = Log.WriteNewLine(
-                    "  " + e.TargetName 
-                );
-                targetConsoleLines[e.BuildEventContext.TargetId] = line.Id;
-
-                LogLine nextLine = Log.WriteNewLine(
-                    ANSIBuilder.Formatting.Dim("\t~~~") 
-                );
-                // Log.WriteNewLine("");
-            }
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
-            if (e.BuildEventContext?.TargetId != null)
-            {
-                int targetLineId = targetConsoleLines[e.BuildEventContext.TargetId];
-                // If succeeded
-                if (e.Succeeded)
-                {
-                    Log.WriteInLine(
-                        ANSIBuilder.Formatting.Color("✓ " + e.TargetName, ANSIForegroundColor.Green)
-                    , targetLineId);
-                }
-                /*Log.WriteInLine(
-                    ANSIBuilder.Eraser.EraseCurrentLine(), targetLineId+1
-                );*/
-            }
         }
 
         // Task
         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
-            if (e.BuildEventContext?.TargetId != null)
-            {
-                int targetLineId = targetConsoleLines[e.BuildEventContext.TargetId];
-                Log.WriteInLine(
-                    ANSIBuilder.Eraser.EraseCurrentLine() + "\t" +
-                    ANSIBuilder.Graphics.Spinner() + " " +
-                    ANSIBuilder.Graphics.ProgressBar(0.6f, 16) + "\t" +
-                    ANSIBuilder.Formatting.Dim(e.TaskName), 
-                    targetLineId + 1
-                );
-                System.Threading.Thread.Sleep(200);
-            }
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
new file mode 100644
index 00000000000..c1bf7336bf6
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -0,0 +1,70 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    internal static class FancyLoggerBuffer
+    {
+        private static int Height = 0;
+        public static void Initialize()
+        {
+            // Setup event listeners
+            var arrowsPressTask = Task.Run(() =>
+            {
+                while (true)
+                {
+                    switch (Console.ReadKey().Key)
+                    {
+                        case ConsoleKey.UpArrow:
+                            ScrollUp();
+                            break;
+                        case ConsoleKey.DownArrow:
+                            ScrollDown();
+                            break;
+                    }
+                }
+            });
+            // Switch to alternate buffer
+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+            // Update dimensions
+            Height = Console.BufferHeight;
+            // Write body
+            Console.Write(""
+                + ANSIBuilder.Cursor.Position(2, 0)
+                + ANSIBuilder.Formatting.Bold("FancyLogger") + " will be shown here..."
+                + "\n"
+                + ANSIBuilder.Formatting.Dim("5s sleep for demo purposes")
+            );
+            // Write "title"
+            Console.Write(""
+                + ANSIBuilder.Cursor.Home()
+                + ANSIBuilder.Formatting.Inverse("                         MSBuild                         ")
+            );
+
+            // Write "footer"
+            Console.Write(""
+                + ANSIBuilder.Cursor.Position(Height - 1, 0)
+                + "---------------------------------------------------------"
+                + "\n"
+                + "Build: 13%"
+            );
+        }
+
+        private static void ScrollUp()
+        {
+            Console.WriteLine("Scroll up");
+        }
+
+        private static void ScrollDown()
+        {
+            Console.WriteLine("Scroll down");
+        }
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/LogWriterOld.cs b/src/Build/Logging/FancyLogger/LogWriterOld.cs
new file mode 100644
index 00000000000..8d4cb944c78
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/LogWriterOld.cs
@@ -0,0 +1,147 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    internal class LogWriterLine
+    {
+        private static int Counter = 0;
+        public int Id;
+        public string Text = String.Empty;
+
+        public LogWriterLine() {
+            Text = String.Empty;
+            Id = Counter++;
+        }
+        public LogWriterLine(string text) {
+            Text = text;
+            Id = Counter++;
+        }
+
+        public void Update(string text)
+        {
+            LogWriterOld.UpdateLine(Id, text);
+        }
+
+        public void Delete()
+        {
+            LogWriterOld.DeleteLine(Id);
+        }
+    }
+    internal static class LogWriterOld
+    {
+        public static int InitialCursorTop;
+        public static List<LogWriterLine> Lines = new List<LogWriterLine>();
+        public static int LastLineTop
+        {
+            get { return InitialCursorTop + Lines.Count; }
+        }
+
+        static int GetLineIndexById(int lineId)
+        {
+            for (int i = 0; i < Lines.Count; i++)
+            {
+                if (Lines[i].Id == lineId) return i;
+            }
+            return -1;
+        }
+
+
+        public static LogWriterLine WriteNewLine(string text) 
+        {
+            // Get line top
+            int lineTop = LastLineTop + 1;
+            // Create line
+            LogWriterLine line = new LogWriterLine(text);
+            // Append
+            Lines.Add(line);
+            // Print
+            Console.Write(""
+                + ANSIBuilder.Cursor.Position(lineTop, 0)
+                + line.Text
+                + "\n");
+            // Return
+            Console.Out.Flush();
+            return line;
+        }
+        public static LogWriterLine? WriteNewLineAt(int lineId, string text)
+        {
+            int lineIndex = GetLineIndexById(lineId);
+            if(lineIndex == -1) return null;
+            return WriteNewLineAtIndex(lineIndex, text);
+        }
+
+        public static LogWriterLine? WriteNewLineAtIndex(int lineIndex, string text)
+        {
+            // If line index is equal to lines size, just add a new line
+            if (lineIndex >= Lines.Count) return WriteNewLine(text);
+            // Add one line at the end
+            WriteNewLine("");
+            // Shift everything one line down
+            for (int i = Lines.Count - 1; i > lineIndex - 1; i--)
+            {
+                UpdateLineByIndex(i, Lines[i - 1].Text);
+            }
+            UpdateLineByIndex(lineIndex, text);
+            Console.Write(ANSIBuilder.Cursor.Position(LastLineTop, 0) + "\n");
+            Console.Out.Flush();
+            return null;
+        }
+        public static void DeleteLine(int lineId)
+        {
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return;
+            DeleteLineByIndex(lineIndex);
+        }
+        public static void DeleteLineByIndex(int lineIndex)
+        {
+            // Count lines before deleition
+            int currentLinesCount = Lines.Count;
+            // Shift remaining lines up
+            for (int i = lineIndex; i < currentLinesCount - 1; i++)
+            {
+                UpdateLineByIndex(i, Lines[i+1].Text);
+            }
+            // Erase contents from last line
+            UpdateLineByIndex(currentLinesCount - 1, ANSIBuilder.Eraser.LineCursorToEnd());
+            // Remove from memory
+            Lines.RemoveAt(currentLinesCount - 1);
+            // Position cursor
+            Console.Write(ANSIBuilder.Cursor.Position(LastLineTop, 0) + "\n");
+            Console.Out.Flush();
+        }
+
+        public static LogWriterLine? UpdateLine(int lineId, string text)
+        {
+            // Check if line exists
+            int lineIndex = GetLineIndexById(lineId);
+            if(lineIndex == -1) return null;
+            return UpdateLineByIndex(lineIndex, text);
+        }
+
+        public static LogWriterLine? UpdateLineByIndex(int lineIndex, string text)
+        {
+            // Get line position
+            int lineTop = lineIndex + InitialCursorTop + 1;
+            // Update in list
+            Lines[lineIndex].Text = text;
+            // Print
+            Console.Write(""
+                // + ANSIBuilder.Cursor.Position(lineTop, 0)
+                + ANSIBuilder.Cursor.UpAndScroll(LastLineTop - lineTop + 1)
+                + ANSIBuilder.Eraser.LineCursorToEnd()
+                + Lines[lineIndex].Text
+                + ANSIBuilder.Cursor.Position(LastLineTop, 0)
+                + "\n");
+            Console.Out.Flush();
+            return Lines[lineIndex];
+        }
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index f36722eb0b0..3e1356569f1 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -161,6 +161,8 @@
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="Logging\FancyLogger\ANSIBuilder.cs" />
     <Compile Include="Logging\FancyLogger\FancyLogger.cs" />
+    <Compile Include="Logging\FancyLogger\FancyLoggerBuffer.cs" />
+    <Compile Include="Logging\FancyLogger\LogWriterOld.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
