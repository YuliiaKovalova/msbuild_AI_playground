diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index d1c0e24890e..2de52014162 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -138,12 +138,12 @@ public void AssertFirstResolverCanResolve()
 
         [Fact]
         // MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 and resolves sdk.
-        public void AssertFirstResolverWithPatternCantResolveChangeWave17_3()
+        public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
                 ChangeWaves.ResetStateForTests();
-                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_3.ToString());
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_4.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
                 SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeNameSpecificResolvers: true));
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 107cd378880..9c6982b997e 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -14,6 +14,7 @@
 using Microsoft.Build.Eventing;
 using System.Linq;
 using System.Xml.Schema;
+using System.Text.RegularExpressions;
 
 #nullable disable
 
@@ -55,6 +56,11 @@ internal class SdkResolverService : ISdkResolverService
         /// </summary>
         private IList<SdkResolverManifest> _resolversRegistry;
 
+        /// <summary>
+        /// The regex time-out interval for the  name pattern in milliseconds.
+        /// </summary>
+        private const int ResolverNamePatternRegexTimeoutMsc = 500;
+
         /// <summary>
         /// Stores an <see cref="SdkResolverLoader"/> which can load registered SDK resolvers.
         /// </summary>
@@ -104,7 +110,7 @@ public virtual void ClearCaches()
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_3))
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
             {
                 return ResolveSdkUsingMostSpecificResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
             }
@@ -123,7 +129,7 @@ private SdkResult ResolveSdkUsingMostSpecificResolvers(int submissionId, SdkRefe
 
             // Pick up the most specific resolvers (i.e. resolvers with the longest pattern that matches) from the list of resolvers.
             List<SdkResolverManifest> matchingResolversManifests = _resolversRegistry
-                .Where(r => !string.IsNullOrEmpty(r.NamePattern) && System.Text.RegularExpressions.Regex.IsMatch(sdk.Name, r.NamePattern))
+                .Where(r => !string.IsNullOrEmpty(r.NamePattern) && Regex.IsMatch(sdk.Name, r.NamePattern, RegexOptions.None, TimeSpan.FromMilliseconds(ResolverNamePatternRegexTimeoutMsc)))
                 .ToList();
 
             List<SdkResolver> resolvers = new List<SdkResolver>();
@@ -323,7 +329,7 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
 
             if (resolvers != null)
             {
-                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_3))
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                 {
                     _resolversRegistry = new List<SdkResolverManifest>();
                     _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
@@ -415,7 +421,7 @@ private void SetResolverState(int submissionId, SdkResolver resolver, object sta
                     submissionId,
                     _ => new ConcurrentDictionary<SdkResolver, object>(
                         NativeMethodsShared.GetLogicalCoreCount(),
-                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_3) ? _resolversRegistry.Count : _resolversList.Count));
+                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ? _resolversRegistry.Count : _resolversList.Count));
 
                 resolverState.AddOrUpdate(resolver, state, (sdkResolver, obj) => state);
             }
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 2d82f73a62f..7cf3b15987e 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -26,9 +26,8 @@ internal class ChangeWaves
     {
         internal static readonly Version Wave17_0 = new Version(17, 0);
         internal static readonly Version Wave17_2 = new Version(17, 2);
-        internal static readonly Version Wave17_3 = new Version(17, 3);
         internal static readonly Version Wave17_4 = new Version(17, 4);
-        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_3, Wave17_4};
+        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4};
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
