diff --git a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
index 1375fc4c723..cea63de5450 100644
--- a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
+++ b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
@@ -29,7 +29,9 @@ private static void RegisterExceptions()
                 new(typeof(InternalLoggerException), (msg, inner) => new InternalLoggerException(msg, inner)),
                 new(typeof(InvalidProjectFileException), (msg, inner) => new InvalidProjectFileException(msg, inner)),
                 new(typeof(InvalidToolsetDefinitionException), (msg, inner) => new InvalidToolsetDefinitionException(msg, inner)),
+#pragma warning disable CS0618  // this class has to handle the obsolete exception until they're removed from the codebase
                 new(typeof(Experimental.ProjectCache.ProjectCacheException), (msg, inner) => new Experimental.ProjectCache.ProjectCacheException(msg, inner)),
+#pragma warning restore CS0618
                 new(typeof(ProjectCache.ProjectCacheException), (msg, inner) => new ProjectCache.ProjectCacheException(msg, inner)),
                 new(typeof(InternalErrorException), InternalErrorException.CreateFromRemote),
                 new(typeof(LoggerException), (msg, inner) => new LoggerException(msg, inner)),
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs
index 6a5eb2daaa9..559a278767d 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs
@@ -1,6 +1,7 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Graph;
@@ -8,6 +9,7 @@
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     ///     Holds various information about the current msbuild execution that the cache might use.
     ///     The cache may need to know about the top level projects or the entire project graph, so MSBuild
@@ -15,6 +17,7 @@ namespace Microsoft.Build.Experimental.ProjectCache
     ///     and the plugin can construct its own graph based on those.
     ///     So either <see cref="Graph" />is null, or <see cref="GraphEntryPoints" /> is null. But not both.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public class CacheContext
     {
         public IReadOnlyDictionary<string, string> PluginSettings { get; }
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs
index 30b1cca5a46..a7778df310d 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs
@@ -11,9 +11,11 @@
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     /// Result types that a plugin can return for a given build request.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public enum CacheResultType
     {
         /// <summary>
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs
index 5ff62cfb514..21352975a2e 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs
@@ -1,10 +1,13 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public readonly struct FileAccessContext
     {
         public FileAccessContext(
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs
index a6115a12e86..b1b847d58ae 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs
@@ -1,13 +1,16 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     ///     Events logged with this logger will get pushed into MSBuild's logging infrastructure.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public abstract class PluginLoggerBase
     {
         public abstract bool HasLoggedErrors { get; protected set; }
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs
index 50b15018ced..4be60ab24ae 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs
@@ -1,16 +1,19 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     ///     A cache hit can use this to instruct MSBuild to construct a BuildResult with the target result specified in this
     ///     type.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public readonly struct PluginTargetResult
     {
         public string TargetName { get; }
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs
index 52507f3c0ed..658cf6b6775 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs
@@ -1,10 +1,13 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public class ProjectCacheDescriptor
     {
         private ProjectCacheDescriptor(
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs
index d2f76b4c577..3f3f7a21de3 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs
@@ -9,10 +9,12 @@
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     /// This exception is used to wrap an unhandled exception from a project cache plugin. This exception aborts the build, and it can only be
     /// thrown by the MSBuild engine.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public sealed class ProjectCacheException : BuildExceptionBase
     {
         private ProjectCacheException()
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs
index 6c999cfcf53..8170908757a 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs
@@ -9,10 +9,12 @@
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     ///     Only one plugin instance can exist for a given BuildManager BeginBuild / EndBuild session.
     ///     Any exceptions thrown by the plugin will cause MSBuild to fail the build.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public abstract class ProjectCachePluginBase
     {
         /// <summary>
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs
index 85e8f5a4c12..227785691c2 100644
--- a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs
@@ -9,6 +9,7 @@
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
+#pragma warning disable CS0618  // suppress “obsolete” warnings in this file due to this referencing other Experimental.ProjectCache types
     /// <summary>
     ///     A cache hit can use this to instruct MSBuild to build the cheaper version of the targets that the plugin avoided
     ///     running.
@@ -18,6 +19,7 @@ namespace Microsoft.Build.Experimental.ProjectCache
     ///     The proxy targets are left in the build result (i.e., both GetTargetPath and Build will appear in the build result).
     ///     Real targets can be committed in which case msbuild only keeps the proxy target in the build result.
     /// </summary>
+    [Obsolete("This class is moved to Microsoft.Build.ProjectCache namespace.", false)]
     public class ProxyTargets : ITranslatable
     {
         private Dictionary<string, string> _proxyTargetToRealTargetMap = null!;
