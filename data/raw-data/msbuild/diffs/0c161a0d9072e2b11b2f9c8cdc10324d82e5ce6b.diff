diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 277352b56a0..3ec169305a4 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -3,7 +3,7 @@
 
 using System;
 using System.Collections.Generic;
-
+using System.Diagnostics;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -22,9 +22,7 @@ public class ConfigurableForwardingLogger : IForwardingLogger
         /// Default constructor.
         /// </summary>
         public ConfigurableForwardingLogger()
-        {
-            InitializeForwardingTable();
-        }
+        { }
         #endregion
 
         #region Properties
@@ -72,35 +70,10 @@ public int NodeId
 
         #region Methods
 
-        /// <summary>
-        /// Initialize the Forwarding Table with the default values
-        /// </summary>
-        private void InitializeForwardingTable()
-        {
-            _forwardingTable = new Dictionary<string, int>(16, StringComparer.OrdinalIgnoreCase);
-            _forwardingTable[BuildStartedEventDescription] = 0;
-            _forwardingTable[BuildFinishedEventDescription] = 0;
-            _forwardingTable[ProjectStartedEventDescription] = 0;
-            _forwardingTable[ProjectFinishedEventDescription] = 0;
-            _forwardingTable[ProjectEvaluationEventDescription] = 0;
-            _forwardingTable[TargetStartedEventDescription] = 0;
-            _forwardingTable[TargetFinishedEventDescription] = 0;
-            _forwardingTable[TaskStartedEventDescription] = 0;
-            _forwardingTable[TaskFinishedEventDescription] = 0;
-            _forwardingTable[ErrorEventDescription] = 0;
-            _forwardingTable[WarningEventDescription] = 0;
-            _forwardingTable[HighMessageEventDescription] = 0;
-            _forwardingTable[NormalMessageEventDescription] = 0;
-            _forwardingTable[LowMessageEventDescription] = 0;
-            _forwardingTable[CustomEventDescription] = 0;
-            _forwardingTable[CommandLineDescription] = 0;
-            _forwardingSetFromParameters = false;
-        }
-
         /// <summary>
         /// Parses out the logger parameters from the Parameters string.
         /// </summary>
-        private void ParseParameters()
+        private void ParseParameters(IEventSource eventSource)
         {
             if (_loggerParameters != null)
             {
@@ -109,7 +82,7 @@ private void ParseParameters()
                 {
                     if (parameterComponents[param].Length > 0)
                     {
-                        ApplyParameter(parameterComponents[param]);
+                        ApplyParameter(eventSource, parameterComponents[param]);
                     }
                 }
                 // Setting events to forward on the commandline will override the verbosity and other switches such as
@@ -125,8 +98,10 @@ private void ParseParameters()
                     // We can't know whether the project items needed to find ForwardProjectContextDescription
                     // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know
                     // all of the other loggers that will be attached. So turn both on.
-                    _forwardingTable[ProjectStartedEventDescription] = 1;
-                    _forwardingTable[ProjectEvaluationEventDescription] = 1;
+                    eventSource.StatusEventRaised -= BuildStatusHandler;
+                    eventSource.StatusEventRaised += BuildStatusHandler;
+                    eventSource.ProjectStarted -= ForwardEvent;
+                    eventSource.ProjectStarted += ForwardEvent;
                 }
             }
         }
@@ -135,39 +110,108 @@ private void ParseParameters()
         /// Logger parameters can be used to enable and disable specific event types.
         /// Otherwise, the verbosity is used to choose which events to forward.
         /// </summary>
-        private void ApplyParameter(string parameterName)
+        private void ApplyParameter(IEventSource eventSource, string parameterName)
         {
             ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));
 
-            if (_forwardingTable.ContainsKey(parameterName))
+            bool isEventForwardingParameter = true;
+
+            // Careful - we need to brace before double specified parameters - hence the unsubscriptions before subscriptions
+            switch (parameterName.ToUpperInvariant())
+            {
+                case BuildStartedEventDescription:
+                    eventSource.BuildStarted -= ForwardEvent;
+                    eventSource.BuildStarted += ForwardEvent;
+                    break;
+                case BuildFinishedEventDescription:
+                    eventSource.BuildFinished -= ForwardEvent;
+                    eventSource.BuildFinished += ForwardEvent;
+                    break;
+                case ProjectStartedEventDescription:
+                    eventSource.ProjectStarted -= ForwardEvent;
+                    eventSource.ProjectStarted += ForwardEvent;
+                    break;
+                case ProjectFinishedEventDescription:
+                    eventSource.ProjectFinished -= ForwardEvent;
+                    eventSource.ProjectFinished += ForwardEvent;
+                    break;
+                case TargetStartedEventDescription:
+                    eventSource.TargetStarted -= ForwardEvent;
+                    eventSource.TargetStarted += ForwardEvent;
+                    break;
+                case TargetFinishedEventDescription:
+                    eventSource.TargetFinished -= ForwardEvent;
+                    eventSource.TargetFinished += ForwardEvent;
+                    break;
+                case TaskStartedEventDescription:
+                    eventSource.TaskStarted -= ForwardEvent;
+                    eventSource.TaskStarted += ForwardEvent;
+                    break;
+                case TaskFinishedEventDescription:
+                    eventSource.TaskFinished -= ForwardEvent;
+                    eventSource.TaskFinished += ForwardEvent;
+                    break;
+                case ErrorEventDescription:
+                    eventSource.ErrorRaised -= ForwardEvent;
+                    eventSource.ErrorRaised += ForwardEvent;
+                    break;
+                case WarningEventDescription:
+                    eventSource.WarningRaised -= ForwardEvent;
+                    eventSource.WarningRaised += ForwardEvent;
+                    break;
+                case CustomEventDescription:
+                    eventSource.CustomEventRaised -= ForwardEvent;
+                    eventSource.CustomEventRaised += ForwardEvent;
+                    break;
+                case HighMessageEventDescription:
+                    eventSource.MessageRaised -= MessageHandler;
+                    eventSource.MessageRaised += MessageHandler;
+                    _forwardHighImportanceMessages = true;
+                    break;
+                case NormalMessageEventDescription:
+                    eventSource.MessageRaised -= MessageHandler;
+                    eventSource.MessageRaised += MessageHandler;
+                    _forwardNormalImportanceMessages = true;
+                    break;
+                case LowMessageEventDescription:
+                    eventSource.MessageRaised -= MessageHandler;
+                    eventSource.MessageRaised += MessageHandler;
+                    _forwardLowImportanceMessages = true;
+                    break;
+                case CommandLineDescription:
+                    eventSource.MessageRaised -= MessageHandler;
+                    eventSource.MessageRaised += MessageHandler;
+                    _forwardTaskCommandLine = true;
+                    break;
+                case ProjectEvaluationStartedEventDescription:
+                case ProjectEvaluationFinishedEventDescription:
+                    eventSource.StatusEventRaised -= BuildStatusHandler;
+                    eventSource.StatusEventRaised += BuildStatusHandler;
+                    break;
+                case PerformanceSummaryDescription:
+                    _showPerfSummary = true;
+                    isEventForwardingParameter = false;
+                    break;
+                case NoSummaryDescription:
+                    _showSummary = false;
+                    isEventForwardingParameter = false;
+                    break;
+                case ShowCommandLineDescription:
+                    _showCommandLine = true;
+                    isEventForwardingParameter = false;
+                    break;
+                case ForwardProjectContextDescription:
+                    _forwardProjectContext = true;
+                    isEventForwardingParameter = false;
+                    break;
+                default:
+                    isEventForwardingParameter = false;
+                    break;
+            }
+
+            if (isEventForwardingParameter)
             {
                 _forwardingSetFromParameters = true;
-                _forwardingTable[parameterName] = 1;
-            }
-            else if (String.Equals(parameterName, ProjectEvaluationStartedEventDescription, StringComparison.OrdinalIgnoreCase) ||
-                String.Equals(parameterName, ProjectEvaluationFinishedEventDescription, StringComparison.OrdinalIgnoreCase))
-            {
-                _forwardingSetFromParameters = true;
-                _forwardingTable[ProjectEvaluationEventDescription] = 1;
-            }
-
-            // If any of the following parameters are set, we will make sure we forward the events
-            // necessary for the central logger to emit the requested information
-            if (String.Equals(parameterName, PerformanceSummaryDescription, StringComparison.OrdinalIgnoreCase))
-            {
-                _showPerfSummary = true;
-            }
-            else if (String.Equals(parameterName, NoSummaryDescription, StringComparison.OrdinalIgnoreCase))
-            {
-                _showSummary = false;
-            }
-            else if (String.Equals(parameterName, ShowCommandLineDescription, StringComparison.OrdinalIgnoreCase))
-            {
-                _showCommandLine = true;
-            }
-            else if (string.Equals(parameterName, ForwardProjectContextDescription, StringComparison.OrdinalIgnoreCase))
-            {
-                _forwardProjectContext = true;
             }
         }
 
@@ -178,28 +222,14 @@ public virtual void Initialize(IEventSource eventSource)
         {
             ErrorUtilities.VerifyThrowArgumentNull(eventSource, nameof(eventSource));
 
-            ParseParameters();
+            ParseParameters(eventSource);
 
             ResetLoggerState();
 
             if (!_forwardingSetFromParameters)
             {
-                SetForwardingBasedOnVerbosity();
+                SetForwardingBasedOnVerbosity(eventSource);
             }
-
-            eventSource.BuildStarted += BuildStartedHandler;
-            eventSource.BuildFinished += BuildFinishedHandler;
-            eventSource.ProjectStarted += ProjectStartedHandler;
-            eventSource.ProjectFinished += ProjectFinishedHandler;
-            eventSource.TargetStarted += TargetStartedHandler;
-            eventSource.TargetFinished += TargetFinishedHandler;
-            eventSource.TaskStarted += TaskStartedHandler;
-            eventSource.TaskFinished += TaskFinishedHandler;
-            eventSource.ErrorRaised += ErrorHandler;
-            eventSource.WarningRaised += WarningHandler;
-            eventSource.MessageRaised += MessageHandler;
-            eventSource.CustomEventRaised += CustomEventHandler;
-            eventSource.StatusEventRaised += BuildStatusHandler;
         }
 
         /// <summary>
@@ -210,69 +240,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)
             Initialize(eventSource);
         }
 
-        private void SetForwardingBasedOnVerbosity()
+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)
         {
-            _forwardingTable[BuildStartedEventDescription] = 1;
-            _forwardingTable[BuildFinishedEventDescription] = 1;
-
             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))
             {
-                _forwardingTable[ErrorEventDescription] = 1;
-                _forwardingTable[WarningEventDescription] = 1;
+                eventSource.ErrorRaised += ForwardEvent;
+                eventSource.WarningRaised += ForwardEvent;
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))
             {
-                _forwardingTable[HighMessageEventDescription] = 1;
+                eventSource.MessageRaised += MessageHandler;
+                _forwardHighImportanceMessages = true;
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))
             {
-                _forwardingTable[NormalMessageEventDescription] = 1;
-                _forwardingTable[ProjectStartedEventDescription] = 1;
-                _forwardingTable[ProjectFinishedEventDescription] = 1;
-                _forwardingTable[TargetStartedEventDescription] = 1;
-                _forwardingTable[TargetFinishedEventDescription] = 1;
-                _forwardingTable[CommandLineDescription] = 1;
+                // MessageHandler already subscribed
+                _forwardNormalImportanceMessages = true;
+
+                eventSource.ProjectStarted += ForwardEvent;
+                eventSource.ProjectFinished += ForwardEvent;
+                eventSource.TargetStarted += ForwardEvent;
+                eventSource.TargetFinished += ForwardEvent;
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Detailed))
             {
-                _forwardingTable[TargetStartedEventDescription] = 1;
-                _forwardingTable[TargetFinishedEventDescription] = 1;
-                _forwardingTable[TaskStartedEventDescription] = 1;
-                _forwardingTable[TaskFinishedEventDescription] = 1;
-                _forwardingTable[LowMessageEventDescription] = 1;
+                eventSource.TaskStarted += ForwardEvent;
+                eventSource.TaskFinished += ForwardEvent;
+
+                // MessageHandler already subscribed
+                _forwardLowImportanceMessages = true;
+                _forwardTaskCommandLine = true;
             }
 
             if (IsVerbosityAtLeast(LoggerVerbosity.Diagnostic))
             {
-                _forwardingTable[CustomEventDescription] = 1;
-                _forwardingTable[ProjectEvaluationEventDescription] = 1;
+                eventSource.CustomEventRaised += ForwardEvent;
+                eventSource.StatusEventRaised += BuildStatusHandler;
             }
 
             if (_showSummary)
             {
-                _forwardingTable[ErrorEventDescription] = 1;
-                _forwardingTable[WarningEventDescription] = 1;
+                // Prevent double subscribe
+                eventSource.ErrorRaised -= ForwardEvent;
+                eventSource.WarningRaised -= ForwardEvent;
+                eventSource.ErrorRaised += ForwardEvent;
+                eventSource.WarningRaised += ForwardEvent;
             }
 
             if (_showPerfSummary)
             {
-                _forwardingTable[TargetStartedEventDescription] = 1;
-                _forwardingTable[TargetFinishedEventDescription] = 1;
-                _forwardingTable[TaskStartedEventDescription] = 1;
-                _forwardingTable[TaskFinishedEventDescription] = 1;
-                _forwardingTable[TargetStartedEventDescription] = 1;
-                _forwardingTable[TargetFinishedEventDescription] = 1;
-                _forwardingTable[ProjectStartedEventDescription] = 1;
-                _forwardingTable[ProjectFinishedEventDescription] = 1;
-                _forwardingTable[ProjectEvaluationEventDescription] = 1;
+                // Prevent double subscribe
+                eventSource.TaskStarted -= ForwardEvent;
+                eventSource.TaskFinished -= ForwardEvent;
+                eventSource.TargetStarted -= ForwardEvent;
+                eventSource.TargetFinished -= ForwardEvent;
+                eventSource.ProjectStarted -= ForwardEvent;
+                eventSource.ProjectFinished -= ForwardEvent;
+                eventSource.StatusEventRaised -= BuildStatusHandler;
+
+                eventSource.TaskStarted += ForwardEvent;
+                eventSource.TaskFinished += ForwardEvent;
+                eventSource.TargetStarted += ForwardEvent;
+                eventSource.TargetFinished += ForwardEvent;
+                eventSource.ProjectStarted += ForwardEvent;
+                eventSource.ProjectFinished += ForwardEvent;
+                eventSource.StatusEventRaised += BuildStatusHandler;
             }
 
             if (_showCommandLine)
             {
-                _forwardingTable[CommandLineDescription] = 1;
+                // Prevent double subscribe
+                eventSource.MessageRaised -= MessageHandler;
+                eventSource.MessageRaised += MessageHandler;
+
+                _forwardTaskCommandLine = true;
             }
         }
 
@@ -285,20 +329,17 @@ private void SetForwardingBasedOnVerbosity()
         /// </returns>
         internal MessageImportance GetMinimumMessageImportance()
         {
-            if (_forwardingTable[LowMessageEventDescription] == 1)
-            {
-                return MessageImportance.Low;
-            }
-            if (_forwardingTable[NormalMessageEventDescription] == 1)
+            return _verbosity switch
             {
-                return MessageImportance.Normal;
-            }
-            if (_forwardingTable[HighMessageEventDescription] == 1)
-            {
-                return MessageImportance.High;
-            }
-            // The logger does not log messages of any importance.
-            return MessageImportance.High - 1;
+                LoggerVerbosity.Minimal => MessageImportance.High,
+                LoggerVerbosity.Normal => MessageImportance.Normal,
+                LoggerVerbosity.Detailed => MessageImportance.Low,
+                LoggerVerbosity.Diagnostic => MessageImportance.Low,
+
+                // The logger does not log messages of any importance.
+                LoggerVerbosity.Quiet => MessageImportance.High - 1,
+                _ => MessageImportance.High - 1,
+            };
         }
 
         /// <summary>
@@ -319,157 +360,35 @@ public virtual void Shutdown()
         }
 
         /// <summary>
-        /// Handler for build started events
+        /// Handler for build events
         /// </summary>
         /// <param name="sender">sender (should be null)</param>
         /// <param name="e">event arguments</param>
-        private void BuildStartedHandler(object sender, BuildStartedEventArgs e)
+        private void ForwardEvent(object sender, BuildEventArgs e)
         {
-            // This is false by default
-            if (_forwardingTable[BuildStartedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
+            ForwardToCentralLogger(e);
         }
 
-        /// <summary>
-        /// Handler for build finished events
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        private void BuildFinishedHandler(object sender, BuildFinishedEventArgs e)
-        {
-            // This is false by default
-            if (_forwardingTable[BuildFinishedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-            ResetLoggerState();
-        }
-
-        /// <summary>
-        /// Handler for project started events
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        private void ProjectStartedHandler(object sender, ProjectStartedEventArgs e)
-        {
-            if (_forwardingTable[ProjectStartedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Handler for project finished events
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        private void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e)
-        {
-            if (_forwardingTable[ProjectFinishedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Handler for target started events
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        private void TargetStartedHandler(object sender, TargetStartedEventArgs e)
-        {
-            if (_forwardingTable[TargetStartedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Handler for target finished events
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        private void TargetFinishedHandler(object sender, TargetFinishedEventArgs e)
-        {
-            if (_forwardingTable[TargetFinishedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Handler for task started events
-        /// </summary>
-        /// <param name="sender">sender (should be null)</param>
-        /// <param name="e">event arguments</param>
-        private void TaskStartedHandler(object sender, TaskStartedEventArgs e)
+        private void BuildStatusHandler(object sender, BuildStatusEventArgs e)
         {
-            if (_forwardingTable[TaskStartedEventDescription] == 1)
+            if (e is ProjectEvaluationStartedEventArgs || e is ProjectEvaluationFinishedEventArgs)
             {
                 ForwardToCentralLogger(e);
             }
         }
 
         /// <summary>
-        /// Handler for task finished events
+        /// Tailored handler for BuildMessageEventArgs - fine tunes forwarding of messages.
         /// </summary>
         /// <param name="sender">sender (should be null)</param>
         /// <param name="e">event arguments</param>
-        private void TaskFinishedHandler(object sender, TaskFinishedEventArgs e)
-        {
-            if (_forwardingTable[TaskFinishedEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Prints an error event
-        /// </summary>
-        private void ErrorHandler(object sender, BuildErrorEventArgs e)
-        {
-            if (_forwardingTable[ErrorEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Prints a warning event
-        /// </summary>
-        private void WarningHandler(object sender, BuildWarningEventArgs e)
-        {
-            if (_forwardingTable[WarningEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        /// <summary>
-        /// Prints a message event
-        /// </summary>
         private void MessageHandler(object sender, BuildMessageEventArgs e)
         {
-            bool forwardEvent = false;
-
-            if (_forwardingTable[LowMessageEventDescription] == 1 && e.Importance == MessageImportance.Low)
-            {
-                forwardEvent = true;
-            }
-            else if (_forwardingTable[NormalMessageEventDescription] == 1 && e.Importance == MessageImportance.Normal)
-            {
-                forwardEvent = true;
-            }
-            else if (_forwardingTable[HighMessageEventDescription] == 1 && e.Importance == MessageImportance.High)
-            {
-                forwardEvent = true;
-            }
-            else if (_forwardingTable[CommandLineDescription] == 1 && e is TaskCommandLineEventArgs)
-            {
-                forwardEvent = true;
-            }
+            bool forwardEvent =
+                _forwardLowImportanceMessages && e.Importance == MessageImportance.Low ||
+                _forwardNormalImportanceMessages && e.Importance == MessageImportance.Normal ||
+                _forwardHighImportanceMessages && e.Importance == MessageImportance.High ||
+                _forwardTaskCommandLine && e is TaskCommandLineEventArgs;
 
             if (forwardEvent)
             {
@@ -477,25 +396,6 @@ private void MessageHandler(object sender, BuildMessageEventArgs e)
             }
         }
 
-        /// <summary>
-        /// Prints a custom event
-        /// </summary>
-        private void CustomEventHandler(object sender, CustomBuildEventArgs e)
-        {
-            if (_forwardingTable[CustomEventDescription] == 1)
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
-        private void BuildStatusHandler(object sender, BuildStatusEventArgs e)
-        {
-            if (_forwardingTable[ProjectEvaluationEventDescription] == 1 && (e is ProjectEvaluationStartedEventArgs || e is ProjectEvaluationFinishedEventArgs))
-            {
-                ForwardToCentralLogger(e);
-            }
-        }
-
         /// <summary>
         /// Forwards the specified event.
         /// </summary>
@@ -561,13 +461,6 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
 
         #region Per-build Members
 
-        /// <summary>
-        /// A table indicating if a particular event type should be forwarded
-        /// The value is type int rather than bool to avoid the problem of JITting generics.
-        /// <see cref="Dictionary{String, Int}" /> is already compiled into mscorlib.
-        /// </summary>
-        private Dictionary<string, int> _forwardingTable;
-
         /// <summary>
         /// A pointer to the central logger
         /// </summary>
@@ -600,6 +493,11 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// </summary>
         private bool _showCommandLine = false;
 
+        /// <summary>
+        /// Fine tunning of BuildMessageEventArgs forwarding
+        /// </summary>
+        private bool _forwardLowImportanceMessages, _forwardNormalImportanceMessages, _forwardHighImportanceMessages, _forwardTaskCommandLine;
+
         /// <summary>
         /// Id of the node the logger is attached to
         /// </summary>
