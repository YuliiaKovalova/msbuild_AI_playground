diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
index 78c52ebd9ca..e4c22926ee0 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
@@ -340,17 +340,14 @@ public void TestEngineShutdownWhileActive()
             string[] targets = new string[3] { "target1", "target2", "target3" };
             BuildRequest request = CreateNewBuildRequest(1, targets);
 
-            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);
+            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized, true);
             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));
-            // We neeed to get the status changed AutoResetEvent returned to the non-signaled state correctly for verifying the engine status via waiting for a signal next time.
-            // Make sure the status change finishes
+            // We neeed to get the status changed AutoResetEvent returned to the non-signaled state correctly after each status change for verifying the engine status via waiting for a signal next time.
+            // Make sure it returns back to the non-signaled state.
             VerifyEngineStatus(BuildRequestEngineStatus.Idle);
-            // Make sure the status changed AutoResetEvent is reset in case inside VerifyEngineStatus method it doesn't go to call WaitForEvent method.
-            _engineStatusChangedEvent.Reset();
 
             _engine.SubmitBuildRequest(request);
             VerifyEngineStatus(BuildRequestEngineStatus.Active);
-            _engineStatusChangedEvent.Reset();
 
             _engine.CleanupForBuild();
 
@@ -374,14 +371,12 @@ public void TestSimpleBuildScenario()
             string[] targets = new string[3] { "target1", "target2", "target3" };
             BuildRequest request = CreateNewBuildRequest(1, targets);
 
-            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);
+            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized, true);
             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));
             VerifyEngineStatus(BuildRequestEngineStatus.Idle);
-            _engineStatusChangedEvent.Reset();
 
             _engine.SubmitBuildRequest(request);
             VerifyEngineStatus(BuildRequestEngineStatus.Active);
-            _engineStatusChangedEvent.Reset();
 
             WaitForEvent(_requestCompleteEvent, "RequestComplete");
             Assert.Equal(request, _requestComplete_Request);
@@ -410,14 +405,12 @@ public void TestBuildWithChildren()
             BuildRequest request = CreateNewBuildRequest(1, targets);
 
             // Kick it off
-            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);
+            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized, true);
             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));
             VerifyEngineStatus(BuildRequestEngineStatus.Idle);
-            _engineStatusChangedEvent.Reset();
 
             _engine.SubmitBuildRequest(request);
             VerifyEngineStatus(BuildRequestEngineStatus.Active);
-            _engineStatusChangedEvent.Reset();
 
             // Wait for the new requests to be spawned by the builder
             WaitForEvent(_newRequestEvent, "NewRequestEvent");
@@ -426,7 +419,6 @@ public void TestBuildWithChildren()
             Assert.Equal("requiredTarget1", _newRequest_Request.BuildRequests[0].Targets[0]);
 
             VerifyEngineStatus(BuildRequestEngineStatus.Waiting);
-            _engineStatusChangedEvent.Reset();
 
             // Report a result to satisfy the build request
             BuildResult result = new BuildResult(_newRequest_Request.BuildRequests[0]);
@@ -437,7 +429,6 @@ public void TestBuildWithChildren()
             _engine.UnblockBuildRequest(new BuildRequestUnblocker(request.GlobalRequestId));
 
             VerifyEngineStatus(BuildRequestEngineStatus.Active);
-            _engineStatusChangedEvent.Reset();
 
             // Wait for the original request to complete
             WaitForEvent(_requestCompleteEvent, "RequestComplete");
@@ -469,14 +460,12 @@ public void TestBuildWithNewConfiguration()
             BuildRequest request = CreateNewBuildRequest(1, targets);
 
             // Kick it off
-            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);
+            VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized, true);
             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));
             VerifyEngineStatus(BuildRequestEngineStatus.Idle);
-            _engineStatusChangedEvent.Reset();
 
             _engine.SubmitBuildRequest(request);
             VerifyEngineStatus(BuildRequestEngineStatus.Active);
-            _engineStatusChangedEvent.Reset();
 
             // Wait for the request to generate the child request with the unresolved configuration
             WaitForEvent(_newConfigurationEvent, "NewConfigurationEvent");
@@ -484,7 +473,6 @@ public void TestBuildWithNewConfiguration()
             Assert.Equal("TestToolsVersion", _newConfiguration_Config.ToolsVersion);
             Assert.True(_newConfiguration_Config.WasGeneratedByNode);
             VerifyEngineStatus(BuildRequestEngineStatus.Waiting);
-            _engineStatusChangedEvent.Reset();
 
             // Resolve the configuration
             BuildRequestConfigurationResponse response = new BuildRequestConfigurationResponse(_newConfiguration_Config.ConfigurationId, 2, 0);
@@ -506,7 +494,6 @@ public void TestBuildWithNewConfiguration()
             _engine.UnblockBuildRequest(new BuildRequestUnblocker(request.GlobalRequestId));
 
             VerifyEngineStatus(BuildRequestEngineStatus.Active);
-            _engineStatusChangedEvent.Reset();
 
             // Wait for the original request to complete
             WaitForEvent(_requestCompleteEvent, "RequestComplete");
@@ -527,11 +514,11 @@ private BuildRequest CreateNewBuildRequest(int configurationId, string[] targets
             return request;
         }
 
-        private void VerifyEngineStatus(BuildRequestEngineStatus expectedStatus)
+        private void VerifyEngineStatus(BuildRequestEngineStatus expectedStatus, bool isNotKickedOff = false)
         {
             IBuildRequestEngine engine = (IBuildRequestEngine)_host.GetComponent(BuildComponentType.RequestEngine);
 
-            if (engine.Status == expectedStatus)
+            if (isNotKickedOff && engine.Status == expectedStatus)
             {
                 return;
             }
