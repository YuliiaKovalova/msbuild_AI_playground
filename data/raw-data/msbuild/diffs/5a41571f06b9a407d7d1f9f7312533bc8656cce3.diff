diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 6c36c106f07..e5051bc7e38 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -901,7 +901,7 @@ private void TargetFinished(object sender, TargetFinishedEventArgs e)
             {
                 foreach (ITaskItem output in e.TargetOutputs)
                 {
-                    project.OutputPath = output.ItemSpec.AsMemory();
+                    project.OutputPath = new(output.ItemSpec);
                     break;
                 }
             }
@@ -938,6 +938,28 @@ private void TryReadSourceControlInformationForProject(BuildEventContext? contex
         }
     }
 
+    private void TryReadNugetPackageAsProjectOutput(BuildEventContext? context, IEnumerable<ITaskItem>? nugetPackOutputs)
+    {
+        if (context is null || nugetPackOutputs is null)
+        {
+            return;
+        }
+
+        var projectContext = new ProjectContext(context);
+        if (_projects.TryGetValue(projectContext, out Project? project))
+        {
+            var nugetPackOutput = nugetPackOutputs.FirstOrDefault(output => Path.GetExtension(output.ItemSpec).Equals(".nupkg", StringComparison.OrdinalIgnoreCase));
+            if (nugetPackOutput is not null)
+            {
+                try
+                {
+                    project.OutputPath = new(nugetPackOutput.ItemSpec);
+                }
+                catch { } // ignore exceptions from trying to make the OutputPath a FileInfo, if this is invalid then we just won't use it.
+            }
+        }
+    }
+
     /// <summary>
     /// The <see cref="IEventSource.TaskStarted"/> callback.
     /// </summary>
@@ -976,8 +998,13 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
                 {
                     TryReadSourceControlInformationForProject(taskArgs.BuildEventContext, taskArgs.Items as IList<ProjectItemInstance>);
                 }
+                if (taskArgs.ItemType.Equals("NuGetPackOutput", StringComparison.OrdinalIgnoreCase))
+                {
+                    TryReadNugetPackageAsProjectOutput(taskArgs.BuildEventContext, taskArgs.Items as IList<ProjectItemInstance>);
+                }
             }
         }
+
         if (message is not null && e.Importance == MessageImportance.High)
         {
             var hasProject = _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project);
@@ -989,7 +1016,8 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
             {
                 var projectFileName = Path.GetFileName(e.ProjectFile.AsSpan());
                 if (!projectFileName.IsEmpty &&
-                    message.AsSpan().StartsWith(Path.GetFileNameWithoutExtension(projectFileName)) && hasProject)
+                    message.AsSpan().StartsWith(Path.GetFileNameWithoutExtension(projectFileName)) && hasProject
+                    && project!.OutputPath is null)
                 {
                     ReadOnlyMemory<char> outputPath = e.Message.AsMemory().Slice(index + 4);
                     try
