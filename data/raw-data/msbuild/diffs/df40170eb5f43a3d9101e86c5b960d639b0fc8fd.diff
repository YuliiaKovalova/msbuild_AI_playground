diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs b/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
index 590cc2c74a9..2382a4bcc3b 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
@@ -119,6 +119,11 @@ internal class SchedulableRequest
         /// </summary>
         private Dictionary<SchedulableRequestState, ScheduleTimeRecord> _timeRecords;
 
+        /// <summary>
+        /// Number of cores requested as part of running the build request.
+        /// </summary>
+        private int _requestedCores;
+
         /// <summary>
         /// Constructor.
         /// </summary>
@@ -290,6 +295,11 @@ public DateTime EndTime
             }
         }
 
+        public int RequestedCores => _requestedCores;
+
+        public void AddRequestedCores(int cores) => _requestedCores += cores;
+        public int RemoveRequestedCores(int cores) => _requestedCores = Math.Max(0, _requestedCores - cores);
+
         /// <summary>
         /// Gets the amount of time we spent in the specified state.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index b25c0595188..3c98d2fcac5 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -524,18 +524,26 @@ public void WriteDetailedSummary(int submissionId)
         /// <summary>
         /// Requests CPU resources.
         /// </summary>
-        public int? RequestCores(int requestCores)
+        public int? RequestCores(int requestId, int requestedCores)
         {
-            // TODO: ladipro
-            return null;
+            int grantedCores = Math.Min(requestedCores, GetAvailableCores());
+            SchedulableRequest request = _schedulingData.GetExecutingRequest(requestId);
+            request.AddRequestedCores(grantedCores);
+            return grantedCores;
         }
 
         /// <summary>
         /// Returns CPU resources.
         /// </summary>
-        public void ReleaseCores(int coresToRelease)
+        public List<ScheduleResponse> ReleaseCores(int requestId, int coresToRelease)
         {
-            // TODO: ladipro
+            SchedulableRequest request = _schedulingData.GetExecutingRequest(requestId);
+            request.RemoveRequestedCores(coresToRelease);
+
+            // Releasing cores means that we may be able to schedule more work.
+            List<ScheduleResponse> responses = new List<ScheduleResponse>();
+            ScheduleUnassignedRequests(responses);
+            return responses;
         }
 
         #endregion
@@ -1292,14 +1300,11 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node
             request.ResumeExecution(nodeId);
         }
 
-        /// <summary>
-        /// Returns true if we are at the limit of work we can schedule.
-        /// </summary>
-        private bool AtSchedulingLimit()
+        private int GetAvailableCores()
         {
             if (_schedulingUnlimited)
             {
-                return false;
+                return int.MaxValue;
             }
 
             int limit = _componentHost.BuildParameters.MaxNodeCount switch
@@ -1309,11 +1314,24 @@ private bool AtSchedulingLimit()
                 _ => _componentHost.BuildParameters.MaxNodeCount + 2 + _nodeLimitOffset,
             };
 
+            return Math.Max(0, limit - (_schedulingData.ExecutingRequestsCount + _schedulingData.ExplicitlyRequestedCores + _schedulingData.YieldingRequestsCount));
+        }
+
+        /// <summary>
+        /// Returns true if we are at the limit of work we can schedule.
+        /// </summary>
+        private bool AtSchedulingLimit()
+        {
+            if (_schedulingUnlimited)
+            {
+                return false;
+            }
+
             // We're at our limit of schedulable requests if: 
             // (1) MaxNodeCount requests are currently executing
             // (2) Fewer than MaxNodeCount requests are currently executing but the sum of executing 
             //     and yielding requests exceeds the limit set out above.  
-            return _schedulingData.ExecutingRequestsCount + _schedulingData.YieldingRequestsCount >= limit ||
+            return GetAvailableCores() == 0 ||
                    _schedulingData.ExecutingRequestsCount >= _componentHost.BuildParameters.MaxNodeCount;
         }
 
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
index 804ac117b8a..a7b7f200122 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
+using System.Linq;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -152,6 +153,14 @@ public int ReadyRequestsCount
             get { return _readyRequests.Count; }
         }
 
+        /// <summary>
+        /// Gets the total number of cores requested by executing and yielding build requests.
+        /// </summary>
+        public int ExplicitlyRequestedCores
+        {
+            get { return _executingRequests.Sum(kvp => kvp.Value.RequestedCores) + _yieldingRequests.Sum(kvp => kvp.Value.RequestedCores); }
+        }
+
         /// <summary>
         /// Retrieves all of the blocked requests.
         /// </summary>
@@ -492,12 +501,21 @@ public SchedulableRequest GetScheduledRequest(int globalRequestId)
         public bool IsNodeWorking(int nodeId)
         {
             SchedulableRequest request;
-            if (!_executingRequestByNode.TryGetValue(nodeId, out request))
+            if (_executingRequestByNode.TryGetValue(nodeId, out request) && request != null)
             {
-                return false;
+                return true;
             }
 
-            return request != null;
+            foreach (KeyValuePair<int, SchedulableRequest> kvp in _yieldingRequests)
+            {
+                if (kvp.Value.AssignedNode == nodeId && kvp.Value.RequestedCores > 0)
+                {
+                    // This node does not have an executing task on it. However, it does have a yielding task
+                    // that has explicitly asked for cores which makes it "working".
+                    return true;
+                }
+            }
+            return false;
         }
 
         /// <summary>
