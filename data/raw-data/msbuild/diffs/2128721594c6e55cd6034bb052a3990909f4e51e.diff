diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index 24709b9ab30..d8317fe944d 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -30,7 +30,7 @@ private abstract class LazyItemOperation : IItemOperation
             //  This is used only when evaluating an expression, which instantiates
             //  the items and then removes them
             protected readonly IItemFactory<I, I> _itemFactory;
-            internal ItemSpec<P, I> ISpec => _itemSpec;
+            internal ItemSpec<P, I> Spec => _itemSpec;
             protected LazyItemOperation(OperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
             {
                 _itemElement = builder.ItemElement;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index cdeb57f14fa..89d83278474 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -338,7 +338,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
 
                 ImmutableHashSet<string> currentGlobsToIgnore = globsToIgnoreStack == null ? globsToIgnore : globsToIgnoreStack.Peek();
 
-                Dictionary<string, UpdateOperation> itemsWithNoWildcards = new Dictionary<string, UpdateOperation>(FileUtilities.GetIsFileSystemCaseSensitive() ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, UpdateOperation> itemsWithNoWildcards = new Dictionary<string, UpdateOperation>(StringComparer.OrdinalIgnoreCase);
                 bool addedToBatch = false;
 
                 //  Walk back down the stack of item lists applying operations
@@ -350,9 +350,9 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                     {
                         bool addToBatch = true;
                         int i;
-                        for (i = 0; i < op.ISpec.Fragments.Count; i++)
+                        for (i = 0; i < op.Spec.Fragments.Count; i++)
                         {
-                            ItemSpecFragment frag = op.ISpec.Fragments[i];
+                            ItemSpecFragment frag = op.Spec.Fragments[i];
                             if (MSBuildConstants.CharactersForExpansion.Any(frag.TextFragment.Contains))
                             {
                                 // Fragment contains wild cards, items, or properties. Cannot batch over it using a dictionary.
@@ -377,7 +377,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                             // Remove items added before realizing we couldn't skip the item list
                             for (int j = 0; j < i; j++)
                             {
-                                itemsWithNoWildcards.Remove(currentList._memoizedOperation.Operation.ISpec.Fragments[j].TextFragment);
+                                itemsWithNoWildcards.Remove(currentList._memoizedOperation.Operation.Spec.Fragments[j].TextFragment);
                             }
                         }
                         else
