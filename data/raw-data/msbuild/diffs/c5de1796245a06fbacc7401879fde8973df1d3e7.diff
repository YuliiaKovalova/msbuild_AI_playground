diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index 25d9b341e72..c96bce47db0 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -434,6 +434,7 @@ public void LogWarningFromResources(string subcategoryResourceName, string warni
         public void LogWarningWithCodeFromResources(string messageResourceName, params object[] messageArgs) { }
         public void LogWarningWithCodeFromResources(string subcategoryResourceName, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, params object[] messageArgs) { }
         public void MarkAsInactive() { }
+        public bool ShouldLogMessage(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
     }
     public static partial class ToolLocationHelper
     {
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index 3fbc85bcf6e..c8f3d79dba0 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -275,6 +275,7 @@ public void LogWarningFromResources(string messageResourceName, params object[]
         public void LogWarningFromResources(string subcategoryResourceName, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, params object[] messageArgs) { }
         public void LogWarningWithCodeFromResources(string messageResourceName, params object[] messageArgs) { }
         public void LogWarningWithCodeFromResources(string subcategoryResourceName, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, params object[] messageArgs) { }
+        public bool ShouldLogMessage(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
     }
     public static partial class ToolLocationHelper
     {
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 9d9fdc1c1b4..d729c06f139 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -156,9 +156,9 @@ protected IBuildEngine BuildEngine
         /// </summary>
         public bool HasLoggedErrors { get; private set; }
 
-#endregion
+        #endregion
 
-#region Utility methods
+        #region Utility methods
 
         /// <summary>
         /// Extracts the message code (if any) prefixed to the given message string. Message code prefixes must match the
@@ -235,9 +235,19 @@ public virtual string GetResourceMessage(string resourceName)
             string resourceString = FormatResourceString(resourceName, null);
             return resourceString;
         }
-#endregion
+        #endregion
+
+        #region Message logging methods
 
-#region Message logging methods
+        /// <summary>
+        /// Returns true if a message of given importance should be logged because it is possible that a logger consuming it exists.
+        /// </summary>
+        /// <param name="importance">The importance to check.</param>
+        /// <returns>True if messages of the given importance should be logged, false if it's guaranteed that such messages would be ignored.</returns>
+        public bool ShouldLogMessage(MessageImportance importance)
+        {
+            return importance <= ((IBuildEngineInternal)BuildEngine).MinimumRequiredMessageImportance;
+        }
 
         /// <summary>
         /// Logs a message using the specified string.
@@ -279,6 +289,10 @@ public void LogMessage(MessageImportance importance, string message, params obje
                 ResourceUtilities.FormatString(message, messageArgs);
             }
 #endif
+            if (!ShouldLogMessage(importance))
+            {
+                return;
+            }
 
             BuildMessageEventArgs e = new BuildMessageEventArgs
                 (
@@ -343,6 +357,11 @@ params object[] messageArgs
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
 
+            if (!ShouldLogMessage(importance))
+            {
+                return;
+            }
+
             // If BuildEngine is null, task attempted to log before it was set on it,
             // presumably in its constructor. This is not allowed, and all
             // we can do is throw.
@@ -470,6 +489,11 @@ public void LogMessageFromResources(MessageImportance importance, string message
             // global state.
             ErrorUtilities.VerifyThrowArgumentNull(messageResourceName, nameof(messageResourceName));
 
+            if (!ShouldLogMessage(importance))
+            {
+                return;
+            }
+
             LogMessage(importance, GetResourceMessage(messageResourceName), messageArgs);
 #if DEBUG
             // Assert that the message does not contain an error code.  Only errors and warnings
@@ -552,6 +576,11 @@ public void LogCommandLine(MessageImportance importance, string commandLine)
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(commandLine, nameof(commandLine));
 
+            if (!ShouldLogMessage(importance))
+            {
+                return;
+            }
+
             var e = new TaskCommandLineEventArgs(commandLine, TaskName, importance);
 
             // If BuildEngine is null, the task attempted to log before it was set on it,
