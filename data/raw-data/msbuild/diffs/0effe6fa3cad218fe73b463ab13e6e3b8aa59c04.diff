diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index b4c3190f3b4..e24a13ff151 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -25,11 +25,6 @@
     <Reference Include="System.Xaml" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
-    <!-- Need Win32 API on .NET Standard to ping registry for some methods in ToolLocationHelper -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
-
   <ItemGroup>
     <Compile Include="..\Shared\Constants.cs">
       <Link>Shared\Constants.cs</Link>
diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 3b9c3a8a3b1..8b7feae9a83 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -166,6 +166,7 @@ public void BuildsWhileBuildIsRunningOnServer()
             _env.SetEnvironmentVariable("MSBUILDDEBUGPATH", Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder"));
 
             int pidOfServerProcess = -1;
+            Task? t = null;
             try
             {
                 // Start a server node and find its PID.
@@ -178,127 +179,31 @@ public void BuildsWhileBuildIsRunningOnServer()
                     p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
                 }
 
-                var msbuildParameters = sleepProject.Path;
-#if FEATURE_RUN_EXE_IN_TESTS
-                var pathToExecutable = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
-#else
-            var pathToExecutable = ResolveRuntimeExecutableName();
-            msbuildParameters = FileUtilities.EnsureDoubleQuotes(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath) + " " + msbuildParameters;
-#endif
-                var psi = new ProcessStartInfo(pathToExecutable)
-                {
-                    CreateNoWindow = true,
-                    RedirectStandardInput = true,
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    Arguments = msbuildParameters
-                };
-
-                Process pr = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    pr.Start();
-                    pr.BeginOutputReadLine();
-                    pr.BeginErrorReadLine();
-                    pr.StandardInput.Dispose();
-
-                psi = new(pathToExecutable)
+                t = Task.Run(() =>
                 {
-                    CreateNoWindow = true,
-                    RedirectStandardInput = true,
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    Arguments = project.Path
-                };
+                    RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path + " -v:diag", out _, false, _output);
+                });
 
-                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
-                output = String.Empty;
-                Process q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    q.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
+                // The server will soon be in use; make sure we don't try to use it before that happens.
+                Thread.Sleep(1000);
 
-                    q.Start();
-                    q.BeginOutputReadLine();
-                    q.BeginErrorReadLine();
-                    q.StandardInput.Dispose();
+                _output.WriteLine("next batch");
+                foreach (Process p in Process.GetProcesses())
+                {
+                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
+                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
+                }
 
-                q.WaitForExit(30000);
-                q.ExitCode.ShouldBe(0);
-                ParseNumber(output, "Server ID is ").ShouldBe(q.Id, "There should not be a server node for this build.");
+                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
+                success.ShouldBeTrue();
+                ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
 
                 Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-                output = String.Empty;
-                q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    q.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.Start();
-                    q.BeginOutputReadLine();
-                    q.BeginErrorReadLine();
-                    q.StandardInput.Dispose();
-
-                q.WaitForExit(30000);
-                q.ExitCode.ShouldBe(0);
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
+                success.ShouldBeTrue();
                 pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
-                pidOfServerProcess.ShouldNotBe(q.Id, "There should not be a server node for this build.");
-
-                if (pidOfServerProcess > -1)
-                {
-                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
-                }
-                pr.WaitForExit(30000);
-
-                //t = Task.Run(() =>
-                //{
-                //    RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path + " -v:diag", out _, false, _output);
-                //});
-
-                //// The server will soon be in use; make sure we don't try to use it before that happens.
-                //Thread.Sleep(1000);
-
-                //_output.WriteLine("next batch");
-                //foreach (Process p in Process.GetProcesses())
-                //{
-                //    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                //    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
-                //}
-
-                //Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
-                //output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
-                //success.ShouldBeTrue();
-                //ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
-
-                //Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-                //output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
-                //success.ShouldBeTrue();
-                //pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
-                //pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
+                pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
             }
             finally
             {
@@ -311,18 +216,15 @@ public void BuildsWhileBuildIsRunningOnServer()
                     }
                 }
 
-                try
+                if (pidOfServerProcess > -1)
                 {
-                    if (pidOfServerProcess > -1)
-                    {
-                        ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
-                    }
-                } catch (Exception) { }
+                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+                }
 
-                //if (t is not null)
-                //{
-                //    t.Wait();
-                //}
+                if (t is not null)
+                {
+                    t.Wait();
+                }
             }
         }
 
@@ -348,15 +250,6 @@ public void MultiProcBuildOnServer()
             workerPid.ShouldBe(ParseNumber(output, "Server ID is "));
         }
 
-        private static string ResolveRuntimeExecutableName()
-        {
-            // Run the child process with the same host as the currently-running process.
-            using (Process currentProcess = Process.GetCurrentProcess())
-            {
-                return currentProcess.MainModule.FileName;
-            }
-        }
-
         private int ParseNumber(string searchString, string toFind)
         {
             Regex regex = new(@$"{toFind}(\d+)");
