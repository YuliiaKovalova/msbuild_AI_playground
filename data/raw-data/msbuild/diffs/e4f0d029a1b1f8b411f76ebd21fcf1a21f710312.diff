diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index afb8a0f7124..cfab7ee4d59 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -52,6 +52,8 @@ public static string Left(string text)
 
             public static string SpaceBetween(string leftText, string rightText, int width)
             {
+                // Edge case when text doesnt fit
+                if (leftText.Length + rightText.Length > width) return leftText + rightText;
                 string result = String.Empty;
                 string leftNoFormatString = ANSIRemove(leftText);
                 string rightNoFormatString = ANSIRemove(rightText);
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 19238214324..084e2a965c3 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -55,7 +55,6 @@ void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         {
             Succeeded = e.Succeeded;
-            // Console.WriteLine(LoggerFormatting.Bold("[Build]") + "\t Finished");
         }
 
         // Project
@@ -162,12 +161,14 @@ public void Shutdown()
             int warningCount = 0;
             foreach (var project in projects)
             {
+                Console.WriteLine($"[{project.Value.ProjectPath}]");
                 errorCount += project.Value.ErrorCount;
                 warningCount += project.Value.WarningCount;
                 foreach (var message in project.Value.AdditionalDetails)
                 {
                     Console.WriteLine(message.ToANSIString());
                 }
+                Console.WriteLine();
             }
             // Emmpty line
             Console.WriteLine();
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 3fd242849b9..411a617a521 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -3,6 +3,7 @@
 //
 
 using System;
+using System.IO;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -14,7 +15,8 @@ public enum MessageType
         {
             HighPriorityMessage,
             Warning,
-            Error
+            Error,
+            ProjectOutputMessage
         }
         public string Message;
         public FancyLoggerBufferLine? Line;
@@ -24,13 +26,25 @@ public enum MessageType
         public string? FilePath;
         public int? LineNumber;
         public int? ColumnNumber;
+        public string? ProjectOutputExecutablePath;
         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
             // Get type
             switch (args)
             {
                 case BuildMessageEventArgs:
-                    Type = MessageType.HighPriorityMessage;
+                    // Detect output messages
+                    var finalOutputMarker = " -> ";
+                    int i = args.Message!.IndexOf(finalOutputMarker, StringComparison.Ordinal);
+                    if (i > 0)
+                    {
+                        Type = MessageType.ProjectOutputMessage;
+                        ProjectOutputExecutablePath = args.Message!.Substring(i + finalOutputMarker.Length);
+                    }
+                    else
+                    {
+                        Type = MessageType.HighPriorityMessage;
+                    }
                     break;
                 case BuildWarningEventArgs warning:
                     Type = MessageType.Warning;
@@ -75,6 +89,8 @@ public string ToANSIString()
                     return $"❌ {ANSIBuilder.Formatting.Color(
                         $"Error {Code}: {FilePath}({LineNumber},{ColumnNumber}) {Message}",
                         ANSIBuilder.Formatting.ForegroundColor.Red)}";
+                case MessageType.ProjectOutputMessage:
+                    return $"⚙️ {ANSIBuilder.Formatting.Hyperlink(ProjectOutputExecutablePath!, Path.GetDirectoryName(ProjectOutputExecutablePath)!)}";
                 case MessageType.HighPriorityMessage:
                 default:
                     return $"ℹ️ {ANSIBuilder.Formatting.Italic(Message)}";
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 0436ebb063a..8dcea78892d 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -6,7 +6,6 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
-using System.Text.RegularExpressions;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -27,7 +26,7 @@ private static string GetUnambiguousPath(string path)
         public string ProjectPath;
         public string TargetFramework;
         public bool Finished;
-        public string ProjectOutputExecutable;
+        public string? ProjectOutputExecutable;
         // Line to display project info
         public FancyLoggerBufferLine? Line;
         // Targets
@@ -46,7 +45,6 @@ public FancyLoggerProjectNode(ProjectStartedEventArgs args)
             ProjectPath = args.ProjectFile!;
             Finished = false;
             FinishedTargets = 0;
-            ProjectOutputExecutable = string.Empty;
             if (args.GlobalProperties != null && args.GlobalProperties.ContainsKey("TargetFramework"))
             {
                 TargetFramework = args.GlobalProperties["TargetFramework"];
@@ -66,8 +64,9 @@ public void Log()
                 // Project file path with color
                 $" {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}" +
                 // TFM
-                $" {ANSIBuilder.Formatting.Inverse(TargetFramework)} " +
-                (ProjectOutputExecutable.Length > 0 ? $"-> { ANSIBuilder.Formatting.Hyperlink(GetUnambiguousPath(ProjectOutputExecutable), Path.GetDirectoryName(ProjectOutputExecutable)!) }" : string.Empty)
+                $" {ANSIBuilder.Formatting.Inverse(TargetFramework)} "
+                // Show project output executable inline
+                // (ProjectOutputExecutable is not null ? $"-> { ANSIBuilder.Formatting.Hyperlink(ProjectOutputExecutable, Path.GetDirectoryName(ProjectOutputExecutable)!) }" : string.Empty)
                 ,
                 $"({MessageCount} ℹ️, {WarningCount} ⚠️, {ErrorCount} ❌)",
                 // ProjectOutputExecutable, 
@@ -122,13 +121,9 @@ public FancyLoggerTargetNode AddTarget(TargetStartedEventArgs args)
         {
             if (args.Importance != MessageImportance.High) return null;
             MessageCount++;
-            // Detect output messages using regex
-            // var match = Regex.Match(args.Message, $"(?<={args.ProjectFile} -> )(.*)");
-            var match = Regex.Match(args.Message!, $"(?<=.* -> )(.*)");
-            if (match.Success)
-                ProjectOutputExecutable = match.Value;
-
             FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            // Add output executable path
+            if (node.ProjectOutputExecutablePath is not null) ProjectOutputExecutable = node.ProjectOutputExecutablePath;
             AdditionalDetails.Add(node);
             return node;
         }
