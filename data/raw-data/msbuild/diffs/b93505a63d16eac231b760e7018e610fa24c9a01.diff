diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index e435979d2b2..812a14160f3 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -466,8 +466,8 @@ public static void ClearSDKStaticCache() { }
         public static string GetPathToDotNetFrameworkFile(string fileName, Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.DotNetFrameworkArchitecture architecture) { throw null; }
         public static string GetPathToDotNetFrameworkReferenceAssemblies(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version) { throw null; }
         public static string GetPathToDotNetFrameworkSdk() { throw null; }
-        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version) { throw null; }
-        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.VisualStudioVersion visualStudioVersion) { throw null; }
+        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.VisualStudioVersion visualStudioVersion, System.Action<string> output = null) { throw null; }
+        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, System.Action<string> output = null) { throw null; }
         public static string GetPathToDotNetFrameworkSdkFile(string fileName) { throw null; }
         public static string GetPathToDotNetFrameworkSdkFile(string fileName, Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version) { throw null; }
         public static string GetPathToDotNetFrameworkSdkFile(string fileName, Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.DotNetFrameworkArchitecture architecture) { throw null; }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index d77c4295057..82fece040af 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -306,8 +306,8 @@ public static void ClearSDKStaticCache() { }
         public static string GetPathToDotNetFrameworkFile(string fileName, Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.DotNetFrameworkArchitecture architecture) { throw null; }
         public static string GetPathToDotNetFrameworkReferenceAssemblies(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version) { throw null; }
         public static string GetPathToDotNetFrameworkSdk() { throw null; }
-        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version) { throw null; }
-        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.VisualStudioVersion visualStudioVersion) { throw null; }
+        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.VisualStudioVersion visualStudioVersion, System.Action<string> output = null) { throw null; }
+        public static string GetPathToDotNetFrameworkSdk(Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, System.Action<string> output = null) { throw null; }
         public static string GetPathToDotNetFrameworkSdkFile(string fileName) { throw null; }
         public static string GetPathToDotNetFrameworkSdkFile(string fileName, Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version) { throw null; }
         public static string GetPathToDotNetFrameworkSdkFile(string fileName, Microsoft.Build.Utilities.TargetDotNetFrameworkVersion version, Microsoft.Build.Utilities.DotNetFrameworkArchitecture architecture) { throw null; }
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index 006e0587bf1..a2b2cb2ba3d 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -595,24 +595,24 @@ internal static string GetPathToDotNetFrameworkReferenceAssemblies(Version dotNe
             return GetDotNetFrameworkSpec(dotNetFrameworkVersion).GetPathToDotNetFrameworkReferenceAssemblies();
         }
 
-        internal static string GetPathToDotNetFrameworkSdkTools(Version dotNetFrameworkVersion, Version visualStudioVersion)
+        internal static string GetPathToDotNetFrameworkSdkTools(Version dotNetFrameworkVersion, Version visualStudioVersion, Action<string> output = null)
         {
             RedirectVersionsIfNecessary(ref dotNetFrameworkVersion, ref visualStudioVersion);
 
             var dotNetFrameworkSpec = GetDotNetFrameworkSpec(dotNetFrameworkVersion);
             var visualStudioSpec = GetVisualStudioSpec(visualStudioVersion);
             ErrorUtilities.VerifyThrowArgument(visualStudioSpec.SupportedDotNetFrameworkVersions.Contains(dotNetFrameworkVersion), "FrameworkLocationHelper.UnsupportedFrameworkVersion", dotNetFrameworkVersion);
-            return dotNetFrameworkSpec.GetPathToDotNetFrameworkSdkTools(visualStudioSpec);
+            return dotNetFrameworkSpec.GetPathToDotNetFrameworkSdkTools(visualStudioSpec, output);
         }
 
-        internal static string GetPathToDotNetFrameworkSdk(Version dotNetFrameworkVersion, Version visualStudioVersion)
+        internal static string GetPathToDotNetFrameworkSdk(Version dotNetFrameworkVersion, Version visualStudioVersion, Action<string> output = null)
         {
             RedirectVersionsIfNecessary(ref dotNetFrameworkVersion, ref visualStudioVersion);
 
             var dotNetFrameworkSpec = GetDotNetFrameworkSpec(dotNetFrameworkVersion);
             var visualStudioSpec = GetVisualStudioSpec(visualStudioVersion);
             ErrorUtilities.VerifyThrowArgument(visualStudioSpec.SupportedDotNetFrameworkVersions.Contains(dotNetFrameworkVersion), "FrameworkLocationHelper.UnsupportedFrameworkVersion", dotNetFrameworkVersion);
-            return dotNetFrameworkSpec.GetPathToDotNetFrameworkSdk(visualStudioSpec);
+            return dotNetFrameworkSpec.GetPathToDotNetFrameworkSdk(visualStudioSpec, output);
         }
 
         internal static string GetPathToDotNetFrameworkV11(DotNetFrameworkArchitecture architecture)
@@ -1356,7 +1356,7 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi
             /// Gets the full path of .net framework sdk tools for the given visual studio version.
             /// i.e. "C:\Program Files (x86)\Microsoft SDKs\Windows\v8.0A\bin\NETFX 4.0 Tools\" for .net v4.5 on VS11.
             /// </summary>
-            public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualStudioSpec)
+            public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualStudioSpec, Action<string> output = null)
             {
                 string cachedPath;
                 if (this._pathsToDotNetFrameworkSdkTools.TryGetValue(visualStudioSpec.Version, out cachedPath))
@@ -1398,6 +1398,8 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
                         this.DotNetFrameworkSdkRegistryInstallationFolderName,
                         registryView);
 
+                    output?.Invoke($"KIRILL: FrameworkLocationHelper.cs:1401: generatedPathToDotNetFrameworkSdkTools={generatedPathToDotNetFrameworkSdkTools} registryPath={registryPath} DotNetFrameworkSdkRegistryInstallationFolderName={DotNetFrameworkSdkRegistryInstallationFolderName}");
+
                     if (string.IsNullOrEmpty(generatedPathToDotNetFrameworkSdkTools))
                     {
                         // Fallback mechanisms.
@@ -1415,6 +1417,7 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
                                 generatedPathToDotNetFrameworkSdkTools = FallbackToPathToDotNetFrameworkSdkToolsInPreviousVersion(
                                     fallback.Item1,
                                     fallback.Item2);
+                                output?.Invoke($"KIRILL: FrameworkLocationHelper.cs:1420: generatedPathToDotNetFrameworkSdkTools={generatedPathToDotNetFrameworkSdkTools} item1={fallback.Item1} Item2={fallback.Item2}");
                                 break;
                             }
                         }
@@ -1431,6 +1434,7 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
                                 generatedPathToDotNetFrameworkSdkTools = FallbackToPathToDotNetFrameworkSdkToolsInPreviousVersion(
                                     this.Version,
                                     fallbackVisualStudioSpec.Version);
+                                output?.Invoke($"KIRILL: FrameworkLocationHelper.cs:1437: generatedPathToDotNetFrameworkSdkTools={generatedPathToDotNetFrameworkSdkTools} version={Version} fallbackversion={fallbackVisualStudioSpec.Version}");
                             }
                         }
                     }
@@ -1440,6 +1444,7 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
                 {
                     // Fallback to "default" ultimately.
                     generatedPathToDotNetFrameworkSdkTools = FallbackToDefaultPathToDotNetFrameworkSdkTools(this.Version);
+                    output?.Invoke($"KIRILL: FrameworkLocationHelper.cs:1447: generatedPathToDotNetFrameworkSdkTools={generatedPathToDotNetFrameworkSdkTools} version={Version}");
                 }
 
                 if (!string.IsNullOrEmpty(generatedPathToDotNetFrameworkSdkTools))
@@ -1447,6 +1452,7 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
                     this._pathsToDotNetFrameworkSdkTools[visualStudioSpec.Version] = generatedPathToDotNetFrameworkSdkTools;
                 }
 
+                output?.Invoke($"KIRILL: FrameworkLocationHelper.cs:1455: generatedPathToDotNetFrameworkSdkTools={generatedPathToDotNetFrameworkSdkTools}");
                 return generatedPathToDotNetFrameworkSdkTools;
             }
 
@@ -1454,14 +1460,15 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
             /// Gets the full path of .net framework sdk.
             /// i.e. "C:\Program Files (x86)\Microsoft SDKs\Windows\v8.0A\" for .net v4.5 on VS11.
             /// </summary>
-            public virtual string GetPathToDotNetFrameworkSdk(VisualStudioSpec visualStudioSpec)
+            public virtual string GetPathToDotNetFrameworkSdk(VisualStudioSpec visualStudioSpec, Action<string> output = null)
             {
-                string pathToBinRoot = this.GetPathToDotNetFrameworkSdkTools(visualStudioSpec);
+                string pathToBinRoot = this.GetPathToDotNetFrameworkSdkTools(visualStudioSpec, output);
                 if (NativeMethodsShared.IsWindows)
                 {
                     pathToBinRoot = RemoveDirectories(pathToBinRoot, 2);
                 }
 
+                output?.Invoke("KIRILL: FrameworkLocationHelper.cs:1465: pathToBinRoot=" + pathToBinRoot);
                 return pathToBinRoot;
             }
 
@@ -1587,7 +1594,7 @@ public override string GetDotNetFrameworkSdkRootRegistryKey(VisualStudioSpec vis
             /// <summary>
             /// Gets the full path of .net framework sdk tools for the given visual studio version.
             /// </summary>
-            public override string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualStudioSpec)
+            public override string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualStudioSpec, Action<string> output)
             {
 #if FEATURE_WIN32_REGISTRY
                 if (_pathToDotNetFrameworkSdkTools == null)
@@ -1595,6 +1602,7 @@ public override string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualS
                     _pathToDotNetFrameworkSdkTools = FindRegistryValueUnderKey(
                         dotNetFrameworkRegistryPath,
                         this.DotNetFrameworkSdkRegistryInstallationFolderName);
+                    output($"KIRILL: FrameworkLocationHelper.cs:1605: _pathToDotNetFrameworkSdkTools={_pathToDotNetFrameworkSdkTools}");
                 }
 
                 return _pathToDotNetFrameworkSdkTools;
@@ -1606,9 +1614,9 @@ public override string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualS
             /// <summary>
             /// Gets the full path of .net framework sdk, which is the full path of .net framework sdk tools for v1.1 and v2.0.
             /// </summary>
-            public override string GetPathToDotNetFrameworkSdk(VisualStudioSpec visualStudioSpec)
+            public override string GetPathToDotNetFrameworkSdk(VisualStudioSpec visualStudioSpec, Action<string> output = null)
             {
-                return this.GetPathToDotNetFrameworkSdkTools(visualStudioSpec);
+                return this.GetPathToDotNetFrameworkSdkTools(visualStudioSpec, output);
             }
 
             /// <summary>
@@ -1647,9 +1655,9 @@ public DotNetFrameworkSpecV3(
             /// Gets the full path of .net framework sdk.
             /// i.e. "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\" for .net v3.5 on VS11.
             /// </summary>
-            public override string GetPathToDotNetFrameworkSdk(VisualStudioSpec visualStudioSpec)
+            public override string GetPathToDotNetFrameworkSdk(VisualStudioSpec visualStudioSpec, Action<string> output = null)
             {
-                string pathToBinRoot = this.GetPathToDotNetFrameworkSdkTools(visualStudioSpec);
+                string pathToBinRoot = this.GetPathToDotNetFrameworkSdkTools(visualStudioSpec, output);
                 return RemoveDirectories(pathToBinRoot, 1);
             }
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index 3c304324122..6a9e4b14880 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -3015,7 +3015,8 @@ public static GenerateResource CreateTaskOutOfProc(ITestOutputHelper output)
         {
             GenerateResource t = CreateTask(output);
             t.ExecuteAsTool = true;
-            t.SdkToolsPath = ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.VersionLatest);
+            t.SdkToolsPath = ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.VersionLatest, output.WriteLine);
+            output.WriteLine("KIRILL: Tests.cs:3019 " + t.SdkToolsPath);
 
             return t;
         }
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index a878f9603ef..d5fe5edf839 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -47,9 +47,11 @@ public async Task KillTree()
 
         private void Print(Process p)
         {
+#if NET472
             var processes = ProcessInformation.GetProcesses();
             var found = processes.Where(process => process.Id == p.Id).First();
             output.WriteLine(found.ExecutablePath);
+#endif
         }
     }
 
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index d2473b7f3e5..8920c8868a0 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -1712,7 +1712,7 @@ public static string GetPathToDotNetFramework(TargetDotNetFrameworkVersion versi
         /// </summary>
         /// <param name="version">Version of the targeted .NET Framework</param>
         /// <returns>Path string.</returns>
-        public static string GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion version) => GetPathToDotNetFrameworkSdk(version, VisualStudioVersion.VersionLatest);
+        public static string GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion version, Action<string> output = null) => GetPathToDotNetFrameworkSdk(version, VisualStudioVersion.VersionLatest, output);
 
         /// <summary>
         /// Returns the path to the .NET Framework SDK.
@@ -1720,11 +1720,11 @@ public static string GetPathToDotNetFramework(TargetDotNetFrameworkVersion versi
         /// <param name="version">The <see cref="TargetDotNetFrameworkVersion"/> of the .NET Framework.</param>
         /// <param name="visualStudioVersion">The <see cref="VisualStudioVersion"/> of Visual Studio.</param>
         /// <returns></returns>
-        public static string GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion version, VisualStudioVersion visualStudioVersion)
+        public static string GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion version, VisualStudioVersion visualStudioVersion, Action<string> output = null)
         {
             var dotNetFrameworkVersion = TargetDotNetFrameworkVersionToSystemVersion(version);
             var vsVersion = VisualStudioVersionToSystemVersion(visualStudioVersion);
-            return FrameworkLocationHelper.GetPathToDotNetFrameworkSdk(dotNetFrameworkVersion, vsVersion);
+            return FrameworkLocationHelper.GetPathToDotNetFrameworkSdk(dotNetFrameworkVersion, vsVersion, output);
         }
 
         /// <summary>
