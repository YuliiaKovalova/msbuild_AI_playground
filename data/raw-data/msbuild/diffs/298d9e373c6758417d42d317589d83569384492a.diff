diff --git a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
index c8875af7e1b..e0d144f1965 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
@@ -28,13 +28,16 @@ internal sealed class CheckWrapper
     /// </summary>
     private Dictionary<string, int>? _reportsCountPerRule;
 
+    private readonly bool _limitReportsNumber;
+
     public CheckWrapper(Check check)
     {
         Check = check;
+        _limitReportsNumber = !Traits.Instance.EscapeHatches.DoNotLimitBuildCheckResultsNumber;
     }
 
     internal Check Check { get; }
-    private bool _isInitialized = false;
+    private bool _areStatsInitialized = false;
 
     // Let's optimize for the scenario where users have a single .editorconfig file that applies to the whole solution.
     // In such case - configuration will be same for all projects. So we do not need to store it per project in a collection.
@@ -42,7 +45,11 @@ public CheckWrapper(Check check)
 
     internal void Initialize()
     {
-        _reportsCountPerRule = new Dictionary<string, int>();
+        if (_limitReportsNumber)
+        {
+            _reportsCountPerRule = new Dictionary<string, int>();
+        }
+        _areStatsInitialized = false;
     }
 
     // start new project
@@ -50,9 +57,9 @@ internal void StartNewProject(
         string fullProjectPath,
         IReadOnlyList<CheckConfigurationEffective> userConfigs)
     {
-        if (!_isInitialized)
+        if (!_areStatsInitialized)
         {
-            _isInitialized = true;
+            _areStatsInitialized = true;
             CommonConfig = userConfigs[0];
 
             if (userConfigs.Count == 1)
@@ -68,7 +75,7 @@ internal void StartNewProject(
         }
     }
 
-    public void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)
+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)
     {
         if (_reportsCountPerRule is not null)
         {
@@ -96,9 +103,9 @@ public void ReportResult(BuildCheckResult result, ICheckContext checkContext, Ch
     }
 
     // to be used on eval node (BuildCheckDataSource.check)
-    internal void Uninitialize()
+    internal void UninitializeStats()
     {
-        _isInitialized = false;
+        _areStatsInitialized = false;
     }
 
     internal TimeSpan Elapsed => _stopwatch.Elapsed;
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 8b6450817bb..66027237875 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -64,25 +64,44 @@ public void PropertiesUsageAnalyzerTest(bool buildInOutOfProcessNode)
 
 
     [Theory]
-    [InlineData(true)]
-    [InlineData(false)]
-    public void WarningsCountExceedsLimitTest(bool buildInOutOfProcessNode)
+    [InlineData(true, true)]
+    [InlineData(true, false)]
+    [InlineData(false, true)]
+    [InlineData(false, false)]
+    public void WarningsCountExceedsLimitTest(bool buildInOutOfProcessNode, bool limitReportsCount)
     {
         PrepareSampleProjectsAndConfig(
             buildInOutOfProcessNode,
             out TransientTestFile projectFile,
             "PropsCheckTestWithLimit.csproj");
 
+        if (limitReportsCount)
+        {
+            _env.SetEnvironmentVariable("MSBUILDDONOTLIMITBUILDCHECKRESULTSNUMBER", "0");
+        }
+        else
+        {
+            _env.SetEnvironmentVariable("MSBUILDDONOTLIMITBUILDCHECKRESULTSNUMBER", "1");
+        }
+
         string output = RunnerUtilities.ExecBootstrapedMSBuild($"{projectFile.Path} -check", out bool success);
         _env.Output.WriteLine(output);
         _env.Output.WriteLine("=========================");
         success.ShouldBeTrue(output);
 
-        output.ShouldMatch(@"has exceeded the maximum number of results allowed for the rule");
-
+        
         // each finding should be found just once - but reported twice, due to summary
-        Regex.Matches(output, "BC0202: .* Property").Count.ShouldBe(2);
-        Regex.Matches(output, "BC0203: .* Property").Count.ShouldBe(20);
+        if (limitReportsCount)
+        {
+            output.ShouldMatch(@"has exceeded the maximum number of results allowed for the rule");
+            Regex.Matches(output, "BC0202: .* Property").Count.ShouldBe(2);
+            Regex.Matches(output, "BC0203: .* Property").Count.ShouldBe(20);
+        }
+        else
+        {
+            Regex.Matches(output, "BC0202: .* Property").Count.ShouldBe(2);
+            Regex.Matches(output, "BC0203: .* Property").Count.ShouldBe(22);
+        }
     }
 
 
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index cc0ef31eee8..6cf235e8ab1 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -364,6 +364,11 @@ public bool? LogPropertiesAndItemsAfterEvaluation
         /// </remarks>
         public readonly bool DoNotVersionBuildResult = Environment.GetEnvironmentVariable("MSBUILDDONOTVERSIONBUILDRESULT") == "1";
 
+        /// <summary>
+        /// Escape hatch to ensure build check does not limit amount of results.
+        /// </summary>
+        public readonly bool DoNotLimitBuildCheckResultsNumber = Environment.GetEnvironmentVariable("MSBUILDDONOTLIMITBUILDCHECKRESULTSNUMBER") == "1";
+
         private bool _sdkReferencePropertyExpansionInitialized;
         private SdkReferencePropertyExpansionMode? _sdkReferencePropertyExpansionValue;
 
