diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index fd8ed6fa54a..cdba81a5cf3 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -208,7 +208,7 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
 
 #if FEATURE_NODE_REUSE
             // Try to connect to idle nodes if node reuse is enabled.
-            if (_componentHost.BuildParameters.EnableNodeReuse)
+            if (_componentHost.BuildParameters.EnableNodeReuse && ((hostHandshake.RetrieveHandshakeComponents()[0] & 0x01) == 0 || Traits.Instance.EscapeHatches.ReuseTaskHostNodes))
             {
                 (string expectedProcessName, List<Process> processes) runningNodesTuple = GetPossibleRunningNodes(msbuildLocation);
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 90a6f9dc012..17984c78a06 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -3,12 +3,13 @@
 
 using System;
 using System.Collections.Generic;
-using System.IO;
 using System.Diagnostics;
+using System.IO;
 using System.Threading;
 
-using Microsoft.Build.Shared;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -457,26 +458,16 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo
         /// </summary>
         internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)
         {
-            NodeContext context;
-            bool nodeCreationSucceeded;
-            if (!_nodeContexts.TryGetValue(hostContext, out context))
-            {
-                nodeCreationSucceeded = CreateNode(hostContext, factory, handler, configuration);
-            }
-            else
-            {
-                // node already exists, so "creation" automatically succeeded
-                nodeCreationSucceeded = true;
-            }
+            bool nodeCreationSucceeded = (Traits.Instance.EscapeHatches.ReuseTaskHostNodes && _nodeContexts.ContainsKey(hostContext)) // Node already exists, so "creation" automatically succeeded.
+                || CreateNode(hostContext, factory, handler, configuration);
 
             if (nodeCreationSucceeded)
             {
-                context = _nodeContexts[hostContext];
                 _nodeIdToPacketFactory[(int)hostContext] = factory;
                 _nodeIdToPacketHandler[(int)hostContext] = handler;
 
                 // Configure the node.
-                context.SendData(configuration);
+                _nodeContexts[hostContext].SendData(configuration);
                 return true;
             }
 
