diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index dcff99bc056..ef2a25318ab 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -227,7 +227,7 @@ public void AssemblyLoadsDuringTaskRunLogged()
                 RunnerUtilities.ExecMSBuild($"{logger.Parameters} -flp:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic", out success);
                 success.ShouldBeTrue();
                 string text = File.ReadAllText(Path.Combine(logFolder.Path, "logFile.log"));
-                text.ShouldContain("Assembly loaded during TaskRun: System.Diagnostics.Debug");
+                text.ShouldContain("Assembly loaded during TaskRun (InlineCode.HelloWorld): System.Diagnostics.Debug");
             }
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index ba931761f56..5b246b864f0 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1598,16 +1598,9 @@ ILogger UnwrapLoggerType(ILogger log)
                     : log;
             }
 
-            IDisposable assemblyLoadTracker = null;
             try
             {
-                // Is the logger a custom logger?
-                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) &&
-                    logger.GetType().Assembly != Assembly.GetExecutingAssembly() &&
-                    !(logger.GetType().FullName?.StartsWith("Microsoft.Build.Logging", StringComparison.OrdinalIgnoreCase) ?? false))
-                {
-                    assemblyLoadTracker = AssemblyLoadsTracker.StartTracking(this, AssemblyLoadingContext.LoggerInitialization, UnwrapLoggerType(logger).GetType());
-                }
+                using var assemblyLoadTracker = AssemblyLoadsTracker.StartTracking(this, AssemblyLoadingContext.LoggerInitialization, UnwrapLoggerType(logger).GetType());
 
                 INodeLogger nodeLogger = logger as INodeLogger;
                 if (nodeLogger != null)
@@ -1623,10 +1616,6 @@ ILogger UnwrapLoggerType(ILogger log)
             {
                 InternalLoggerException.Throw(e, null, "FatalErrorWhileInitializingLogger", true, logger.GetType().Name);
             }
-            finally
-            {
-                assemblyLoadTracker?.Dispose();
-            }
 
             // Update the minimum guaranteed message importance based on the newly added logger.
             UpdateMinimumMessageImportance(logger);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
index 51b9d2d07f5..d90818bd8e5 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Linq;
 #endif
+using System.Reflection;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 
@@ -36,53 +37,28 @@ private AssemblyLoadsTracker(
             _appDomain = appDomain;
         }
 
-        public static IDisposable StartTracking(
-            LoggingContext loggingContext,
-            AssemblyLoadingContext context)
-            => StartTracking(loggingContext, null, context, null, null);
-
         public static IDisposable StartTracking(
             LoggingContext loggingContext,
             AssemblyLoadingContext context,
-            AppDomain appDomain)
-            => StartTracking(loggingContext, null, context, null, appDomain);
+            Type? initiator,
+            AppDomain? appDomain = null)
+            => StartTracking(loggingContext, null, context, initiator, null, appDomain);
 
         public static IDisposable StartTracking(
             LoggingContext loggingContext,
             AssemblyLoadingContext context,
-            Type initiator)
-            => StartTracking(loggingContext, null, context, initiator, null);
+            string? initiator = null,
+            AppDomain? appDomain = null)
+            => StartTracking(loggingContext, null, context, null, initiator, appDomain);
 
         public static IDisposable StartTracking(
-            LoggingContext loggingContext,
+            LoggingService loggingService,
             AssemblyLoadingContext context,
             Type initiator,
-            AppDomain appDomain)
-            => StartTracking(loggingContext, null, context, initiator, appDomain);
+            AppDomain? appDomain = null)
+            => StartTracking(null, loggingService, context, initiator, null, appDomain);
 
-        public static IDisposable StartTracking(
-            LoggingService loggingService,
-            AssemblyLoadingContext context)
-            => StartTracking(null, loggingService, context, null, null);
 
-        public static IDisposable StartTracking(
-            LoggingService loggingService,
-            AssemblyLoadingContext context,
-            Type initiator)
-            => StartTracking(null, loggingService, context, initiator, null);
-
-        public static IDisposable StartTracking(
-            LoggingService loggingService,
-            AssemblyLoadingContext context,
-            AppDomain appDomain)
-            => StartTracking(null, loggingService, context, null, appDomain);
-
-        public static IDisposable StartTracking(
-            LoggingService loggingService,
-            AssemblyLoadingContext context,
-            Type initiator,
-            AppDomain appDomain)
-            => StartTracking(null, loggingService, context, initiator, appDomain);
 
 #if FEATURE_APPDOMAIN
         public static void StopTracking(AppDomain appDomain)
@@ -107,19 +83,47 @@ public void Dispose()
             StopTracking();
         }
 
+        private static bool IsBuiltinType(string? typeName)
+        {
+            if (string.IsNullOrEmpty(typeName))
+            {
+                return false;
+            }
+
+            return typeName!.StartsWith("Microsoft.Build", StringComparison.OrdinalIgnoreCase) ||
+                   typeName.StartsWith("Microsoft.NET.Build", StringComparison.OrdinalIgnoreCase) ||
+                   typeName.StartsWith("Microsoft.CodeAnalysis.BuildTasks", StringComparison.OrdinalIgnoreCase);
+        }
+
         private static IDisposable StartTracking(
             LoggingContext? loggingContext,
             LoggingService? loggingService,
             AssemblyLoadingContext context,
-            Type? initiator,
+            Type? initiatorType,
+            string? initiatorName,
             AppDomain? appDomain)
         {
-            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6))
+            if (
+                // Feature is not enabled
+                !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) ||
+                (
+                    // We do not want to load all assembly loads (including those triggered by builtin types)
+                    !Traits.Instance.LogAllAssemblyLoads &&
+                    (
+                        // Load will be initiated by internal type - so we are not interested in those
+                        initiatorType?.Assembly == Assembly.GetExecutingAssembly()
+                        ||
+                        IsBuiltinType(initiatorType?.FullName)
+                        ||
+                        IsBuiltinType(initiatorName)
+                    )
+                )
+            )
             {
                 return EmptyDisposable.Instance;
             }
 
-            var tracker = new AssemblyLoadsTracker(loggingContext, loggingService, context, initiator, appDomain ?? AppDomain.CurrentDomain);
+            var tracker = new AssemblyLoadsTracker(loggingContext, loggingService, context, initiatorType, appDomain ?? AppDomain.CurrentDomain);
 #if FEATURE_APPDOMAIN
             if (appDomain != null && !appDomain.IsDefaultAppDomain())
             {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index ea0cc9a6609..8f24be517b3 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -657,12 +657,13 @@ private void ExecuteIntrinsicTask(ItemBucket bucket)
         /// </summary>
         private async Task<WorkUnitResult> InitializeAndExecuteTask(TaskLoggingContext taskLoggingContext, ItemBucket bucket, IDictionary<string, string> taskIdentityParameters, TaskHost taskHost, TaskExecutionMode howToExecuteTask)
         {
-            using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(taskLoggingContext, AssemblyLoadingContext.TaskRun);
             if (!_taskExecutionHost.InitializeForBatch(taskLoggingContext, bucket, taskIdentityParameters))
             {
                 ProjectErrorUtilities.ThrowInvalidProject(_targetChildInstance.Location, "TaskDeclarationOrUsageError", _taskNode.Name);
             }
 
+            using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(taskLoggingContext, AssemblyLoadingContext.TaskRun, (_taskExecutionHost as TaskExecutionHost)?.TaskInstance?.GetType());
+
             try
             {
                 // UNDONE: Move this and the task host.
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index db7333432ec..2f129e643f2 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -6,9 +6,9 @@
 using System.Reflection;
 #if FEATURE_APPDOMAIN
 using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.Components.RequestBuilder;
 #endif
 
+using Microsoft.Build.BackEnd.Components.RequestBuilder;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -271,6 +271,9 @@ internal LoadedType InitializeFactory(
             {
                 ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
                 _taskName = taskName;
+
+                using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(targetLoggingContext, AssemblyLoadingContext.TaskRun, loadInfo.AssemblyName);
+
                 _loadedType = _typeLoader.Load(taskName, loadInfo, _taskHostFactoryExplicitlyRequested);
                 ProjectErrorUtilities.VerifyThrowInvalidProject(_loadedType != null, elementLocation, "TaskLoadFailure", taskName, loadInfo.AssemblyLocation, String.Empty);
             }
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 8b7fce908e4..7a4db37105c 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -101,6 +101,11 @@ public Traits()
         /// </summary>
         public readonly bool LogPropertyFunctionsRequiringReflection = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildLogPropertyFunctionsRequiringReflection"));
 
+        /// <summary>
+        /// Log all environment variables whether or not they are used in a build in the binary log.
+        /// </summary>
+        public readonly bool LogAllAssemblyLoads = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLASSEMBLYLOADS"));
+
         /// <summary>
         /// Log all environment variables whether or not they are used in a build in the binary log.
         /// </summary>
