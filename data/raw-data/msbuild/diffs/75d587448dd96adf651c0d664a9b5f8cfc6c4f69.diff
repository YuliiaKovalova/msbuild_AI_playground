diff --git a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
index 82bfa74f78e..a964b540d51 100644
--- a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
@@ -79,7 +80,7 @@ public void RejectCachesWithMoreConfigEntriesThanResultEntries()
 
             var resultsCache = new ResultsCache();
             var buildResult = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             resultsCache.AddResult(buildResult);
 
             aggregator.Add(configCache, resultsCache);
@@ -100,12 +101,12 @@ public void RejectCachesWithMoreResultEntriesThanConfigEntries()
 
             var resultsCache = new ResultsCache();
             var buildResult = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
 
             resultsCache.AddResult(buildResult);
 
             var buildResult2 = new BuildResult(new BuildRequest(1, 2, configurationId: 2, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult2.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult2.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
 
             resultsCache.AddResult(buildResult2);
 
@@ -129,7 +130,7 @@ public void RejectCachesWithMismatchedIds()
 
             var resultsCache = new ResultsCache();
             var buildResult = new BuildResult(new BuildRequest(1, 2, configurationId: 2, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             resultsCache.AddResult(buildResult);
 
             aggregator.Add(configCache, resultsCache);
@@ -142,75 +143,78 @@ public void RejectCachesWithMismatchedIds()
             }
         }
 
-        [Theory]
-        [InlineData(true, true, null)]
-        [InlineData(true, false, "Input caches should not contain duplicate entries where only some are exempt from isolation constraints")]
-        [InlineData(false, true, "Input caches should not contain duplicate entries where only some are exempt from isolation constraints")]
-        [InlineData(false, false, "Input caches should not contain entries for the same configuration")]
-        public void RejectCollidingConfigurationsFromSeparateCaches(bool config1IsExempt, bool config2IsExempt, string expectedErrorMessage)
+        [Fact]
+        public void CollidingConfigurationsGetMergedViaFirstOneWinsResolution()
         {
             // collides with the config id from configCache2
             var config1 = new BuildRequestConfiguration(1,
                 new BuildRequestData(
                     projectFullPath: "path",
-                    globalProperties: new Dictionary<string, string> {["p"] = "v"},
+                    globalProperties: new Dictionary<string, string> { ["p"] = "v" },
                     toolsVersion: "13",
-                    targetsToBuild: new[] {"foo"},
-                    hostServices: null), "13")
-            {
-                SkippedFromStaticGraphIsolationConstraints = config1IsExempt
-            };
+                    targetsToBuild: new[] { "foo" },
+                    hostServices: null), "13");
 
             var configCache1 = new ConfigCache();
             configCache1.AddConfiguration(config1);
 
             var resultsCache1 = new ResultsCache();
-            var buildResult11 = new BuildResult(new BuildRequest(1, 2, configurationId: 1,
-                new List<string>() {"foo"}, null, BuildEventContext.Invalid, null));
-            buildResult11.AddResultsForTarget("foo", GetNonEmptySucceedingTargetResult());
-            resultsCache1.AddResult(buildResult11);
+            var buildResult1 = new BuildResult(new BuildRequest(1, 2, configurationId: 1,
+                new List<string>() { "foo" }, null, BuildEventContext.Invalid, null));
+
+            // exists only in config1
+            buildResult1.AddResultsForTarget("target1", GetNonEmptySucceedingTargetResult("i1Config1"));
+            // exists in both configs with different values
+            buildResult1.AddResultsForTarget("target3", GetNonEmptySucceedingTargetResult("i3Config1"));
+            // exists in both configs with the same value
+            buildResult1.AddResultsForTarget("target4", GetNonEmptySucceedingTargetResult("v"));
+
+            resultsCache1.AddResult(buildResult1);
 
             var config2 = new BuildRequestConfiguration(1,
                 new BuildRequestData(
                     projectFullPath: "path",
-                    globalProperties: new Dictionary<string, string> {["p"] = "v"},
+                    globalProperties: new Dictionary<string, string> { ["p"] = "v" },
                     toolsVersion: "13",
-                    targetsToBuild: new[] {"bar"},
-                    hostServices: null), "13")
-            {
-                SkippedFromStaticGraphIsolationConstraints = config2IsExempt
-            };
+                    targetsToBuild: new[] { "bar" },
+                    hostServices: null), "13");
 
             var configCache2 = new ConfigCache();
             configCache2.AddConfiguration(config2);
 
             var resultsCache2 = new ResultsCache();
-            var buildResult21 = new BuildResult(new BuildRequest(1, 2, configurationId: 1,
-                new List<string>() {"e", "f"}, null, BuildEventContext.Invalid, null));
-            buildResult21.AddResultsForTarget("bar", GetNonEmptySucceedingTargetResult());
-            resultsCache2.AddResult(buildResult21);
+            var buildResult2 = new BuildResult(new BuildRequest(1, 2, configurationId: 1,
+                new List<string>() { "e", "f" }, null, BuildEventContext.Invalid, null));
 
-            aggregator.Add(configCache1, resultsCache1);
-            aggregator.Add(configCache2, resultsCache2);
+            // exists only in config2
+            buildResult2.AddResultsForTarget("target2", GetNonEmptySucceedingTargetResult("i2Config2"));
+            // exists in both configs with different values
+            buildResult2.AddResultsForTarget("target3", GetNonEmptySucceedingTargetResult("i3Config3"));
+            // exists in both configs with the same value
+            buildResult2.AddResultsForTarget("target4", GetNonEmptySucceedingTargetResult("v"));
 
-            if (expectedErrorMessage == null)
-            {
-                var aggregatedCaches = aggregator.Aggregate();
-                aggregatedCaches.ConfigCache.Count().ShouldBe(1);
-                aggregatedCaches.ResultsCache.Count().ShouldBe(1);
 
-                // In case of accepted duplicate configs, first one wins.
-                aggregatedCaches.ConfigCache.First().TargetNames.ShouldBeEquivalentTo(new []{"foo"});
-                aggregatedCaches.ResultsCache.First().HasResultsForTarget("foo");
-            }
-            else
-            {
-                using var env = TestEnvironment.Create();
+            resultsCache2.AddResult(buildResult2);
 
-                env.SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
-                var e = Should.Throw<InternalErrorException>(() => aggregator.Aggregate());
-                e.Message.ShouldContain(expectedErrorMessage);
-            }
+            aggregator.Add(configCache1, resultsCache1);
+            aggregator.Add(configCache2, resultsCache2);
+
+            var aggregatedCache = aggregator.Aggregate();
+
+            aggregatedCache.ConfigCache.ShouldHaveSingleItem();
+            aggregatedCache.ConfigCache.First().ProjectFullPath.ShouldEndWith("path");
+            aggregatedCache.ConfigCache.First().GlobalProperties.ToDictionary().ShouldBe(new Dictionary<string, string> { ["p"] = "v" });
+            aggregatedCache.ConfigCache.First().ToolsVersion.ShouldBe("13");
+            // first config wins
+            aggregatedCache.ConfigCache.First().TargetNames.ShouldBe(new []{"foo"});
+
+            aggregatedCache.ResultsCache.Count().ShouldBe(1);
+            aggregatedCache.ResultsCache.First().ResultsByTarget.Count.ShouldBe(4);
+            aggregatedCache.ResultsCache.First().ResultsByTarget["target1"].Items.Aggregate(string.Empty, (acc, i) => $"{acc}{i.ItemSpec}").ShouldBe("i1Config1");
+            aggregatedCache.ResultsCache.First().ResultsByTarget["target2"].Items.Aggregate(string.Empty, (acc, i) => $"{acc}{i.ItemSpec}").ShouldBe("i2Config2");
+            // first target result wins
+            aggregatedCache.ResultsCache.First().ResultsByTarget["target3"].Items.Aggregate(string.Empty, (acc, i) => $"{acc}{i.ItemSpec}").ShouldBe("i3Config1");
+            aggregatedCache.ResultsCache.First().ResultsByTarget["target4"].Items.Aggregate(string.Empty, (acc, i) => $"{acc}{i.ItemSpec}").ShouldBe("v");
         }
 
         [Fact]
@@ -235,7 +239,7 @@ public void SingleCacheWithSingleEntry()
 
             var resultsCache = new ResultsCache();
             var buildResult = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             resultsCache.AddResult(buildResult);
 
             aggregator.Add(configCache, resultsCache);
@@ -254,9 +258,9 @@ public void MultipleCachesMultipleEntries()
 
             var resultsCache1 = new ResultsCache();
             var buildResult11 = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult11.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult11.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             var buildResult12 = new BuildResult(new BuildRequest(1, 2, configurationId: 2, new List<string>(){"c", "d"}, null, BuildEventContext.Invalid, null));
-            buildResult12.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult12.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             resultsCache1.AddResult(buildResult11);
             resultsCache1.AddResult(buildResult12);
 
@@ -266,9 +270,9 @@ public void MultipleCachesMultipleEntries()
 
             var resultsCache2 = new ResultsCache();
             var buildResult21 = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"e", "f"}, null, BuildEventContext.Invalid, null));
-            buildResult21.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult21.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             var buildResult22 = new BuildResult(new BuildRequest(1, 2, configurationId: 2, new List<string>(){"g", "h"}, null, BuildEventContext.Invalid, null));
-            buildResult22.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            buildResult22.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult("i", "v"));
             resultsCache2.AddResult(buildResult21);
             resultsCache2.AddResult(buildResult22);
 
diff --git a/src/Build.UnitTests/BuildResultUtilities.cs b/src/Build.UnitTests/BuildResultUtilities.cs
index ab0d27d2f17..9991febfb43 100644
--- a/src/Build.UnitTests/BuildResultUtilities.cs
+++ b/src/Build.UnitTests/BuildResultUtilities.cs
@@ -2,9 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
@@ -25,7 +22,12 @@ public static TargetResult GetEmptySucceedingTargetResult()
 
         public static TargetResult GetNonEmptySucceedingTargetResult()
         {
-            return new TargetResult(new TaskItem[1] { new TaskItem("i", "v")}, BuildResultUtilities.GetSuccessResult());
+            return GetNonEmptySucceedingTargetResult("i", "v");
+        }
+
+        public static TargetResult GetNonEmptySucceedingTargetResult(string itemInclude, string definingFile = "")
+        {
+            return new TargetResult(new TaskItem[1] { new TaskItem(itemInclude, definingFile)}, BuildResultUtilities.GetSuccessResult());
         }
 
         public static WorkUnitResult GetSuccessResult()
diff --git a/src/Build/BackEnd/BuildManager/CacheAggregator.cs b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
index 495bc999f99..a8b9cae69a8 100644
--- a/src/Build/BackEnd/BuildManager/CacheAggregator.cs
+++ b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
@@ -63,30 +63,24 @@ private void InsertCaches(IConfigCache configCache, IResultsCache resultsCache)
                 return;
             }
 
-            var acceptedConfigs = new HashSet<int>();
-            var skipedConfigs = new HashSet<int>();
             var configIdMapping = new Dictionary<int, int>();
 
+            // seen config id -> equivalent config id already existing in the aggregated cache (null if not existing)
+            var seenConfigIds = new Dictionary<int, int?>();
+
             foreach (var config in configs)
             {
                 var existingConfig = _aggregatedConfigCache.GetMatchingConfiguration(config);
 
-                if (existingConfig != null && !(existingConfig.SkippedFromStaticGraphIsolationConstraints && config.SkippedFromStaticGraphIsolationConstraints))
+                if (existingConfig != null)
                 {
-                    throw existingConfig.SkippedFromStaticGraphIsolationConstraints || config.SkippedFromStaticGraphIsolationConstraints
-                        ? new InternalErrorException(
-                            $"Input caches should not contain duplicate entries where only some are exempt from isolation constraints: {existingConfig.ProjectFullPath}")
-                        : new InternalErrorException($"Input caches should not contain entries for the same configuration: {existingConfig.ProjectFullPath}");
-                }
-
-                if (existingConfig != null && (existingConfig.SkippedFromStaticGraphIsolationConstraints && config.SkippedFromStaticGraphIsolationConstraints))
-                {
-                    skipedConfigs.Add(config.ConfigurationId);
-                    // If conflict is allowed, resolve by keeping the existing config.
+                    // This config has been found in a previous cache file. Don't aggregate it.
+                    // => "First config wins" conflict resolution.
+                    seenConfigIds[config.ConfigurationId] = existingConfig.ConfigurationId;
                     continue;
                 }
 
-                acceptedConfigs.Add(config.ConfigurationId);
+                seenConfigIds[config.ConfigurationId] = null;
 
                 _lastConfigurationId = _nextConfigurationId();
                 configIdMapping[config.ConfigurationId] = _lastConfigurationId;
@@ -99,23 +93,38 @@ private void InsertCaches(IConfigCache configCache, IResultsCache resultsCache)
 
             foreach (var result in results)
             {
-                if (skipedConfigs.Contains(result.ConfigurationId))
+                ErrorUtilities.VerifyThrow(seenConfigIds.ContainsKey(result.ConfigurationId), "Each result should have a corresponding configuration. Otherwise the caches are not consistent");
+
+                if (seenConfigIds[result.ConfigurationId] != null)
                 {
-                    // If a config has been skipped, do not add its corresponding result.
-                    continue;
+                    // The config is already present in the aggregated cache. Merge the new build results into the ones already present in the aggregated cache.
+                    MergeBuildResults(result, _aggregatedResultsCache.GetResultsForConfiguration(seenConfigIds[result.ConfigurationId].Value));
                 }
-
-                ErrorUtilities.VerifyThrow(acceptedConfigs.Contains(result.ConfigurationId), "Each result should have a corresponding configuration. Otherwise the caches are not consistent");
-
-                _aggregatedResultsCache.AddResult(
-                    new BuildResult(
-                        result,
-                        BuildEventContext.InvalidSubmissionId,
-                        configIdMapping[result.ConfigurationId],
-                        BuildRequest.InvalidGlobalRequestId,
-                        BuildRequest.InvalidGlobalRequestId,
-                        BuildRequest.InvalidNodeRequestId
+                else
+                {
+                    _aggregatedResultsCache.AddResult(
+                        new BuildResult(
+                            result: result,
+                            submissionId: BuildEventContext.InvalidSubmissionId,
+                            configurationId: configIdMapping[result.ConfigurationId],
+                            requestId: BuildRequest.InvalidGlobalRequestId,
+                            parentRequestId: BuildRequest.InvalidGlobalRequestId,
+                            nodeRequestId: BuildRequest.InvalidNodeRequestId
                         ));
+                }
+            }
+        }
+
+        private void MergeBuildResults(BuildResult newResult, BuildResult existingResult)
+        {
+            foreach (var newTargetResult in newResult.ResultsByTarget)
+            {
+                // "First target result wins" conflict resolution. Seems like a reasonable heuristic, because targets in MSBuild should only run once
+                // for a given config, which means that a target's result should not change if the config does not changes.
+                if (!existingResult.HasResultsForTarget(newTargetResult.Key))
+                {
+                    existingResult.ResultsByTarget[newTargetResult.Key] = newTargetResult.Value;
+                }
             }
         }
     }
