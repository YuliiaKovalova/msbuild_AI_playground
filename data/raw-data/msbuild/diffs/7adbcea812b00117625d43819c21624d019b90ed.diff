diff --git a/documentation/specs/proposed/BuildCheck/Codes.md b/documentation/specs/proposed/BuildCheck/Codes.md
index 329c03563dd..6698d20a2dc 100644
--- a/documentation/specs/proposed/BuildCheck/Codes.md
+++ b/documentation/specs/proposed/BuildCheck/Codes.md
@@ -7,6 +7,7 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are
 | 0 | Success |
 | [BC0101](#BC0101) | Shared output path. |
 | [BC0102](#BC0102) | Double writes. |
+| [BC0103](#BC0103) | Used environment variable. |
 
 
 To enable verbose logging in order to troubleshoot issue(s), enable [binary logging](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#msbuild-binary-log-overview)
@@ -33,7 +34,14 @@ This is a similar problem as ['BC0101 - Shared output path'](#BC0101) - however
 
 If you want multiple tasks to update file in a one-by-one pipeline fashion, it is recommended to give each intermediate output a distinct name - preventing silent mixups if any of the tasks in the chain are skipped or removed.
 
+## <a name="BC0103"></a>BC0103 - Used environment variable.
 
+"Environment variables should not be used as a value source for the properties"
+
+Using environment variables as a data source in MSBuild is problematic and can lead to nondeterministic builds.
+Relying on environment variables introduces variability and unpredictability, as their values can change between builds or environments.
+
+This practice can result in inconsistent build outcomes and makes debugging difficult, since environment variables are external to project files and build scripts. To ensure consistent and reproducible builds, avoid using environment variables. Instead, explicitly pass properties using the /p option, which offers better control and traceability.
 
 <BR/>
 <BR/>
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 47603fcb678..8804918dbc0 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -896,7 +896,7 @@ private void RaiseBuildCheckEvent(object sender, BuildCheckEventArgs buildEvent)
 
             RaiseAnyEvent(sender, buildEvent);
         }
-      
+
         /// <summary>
         /// Raises a catch-all build event to all registered loggers.
         /// </summary>
diff --git a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
index 2c4b495e122..52b6de39113 100644
--- a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
@@ -12,7 +12,7 @@ internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer
     /// <summary>
     /// Contains the list of reported environment variables.
     /// </summary>
-    private readonly IList<EnvironmentVariableIdentityKey> _environmentVariablesReported = new List<EnvironmentVariableIdentityKey>();
+    private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();
 
     public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
         "BC0103",
diff --git a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
index 78fd0d38a42..c1335f3617f 100644
--- a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
@@ -4,24 +4,31 @@
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd.Logging;
 
-namespace Microsoft.Build.Experimental.BuildCheck;
-
-/// <summary>
-/// BuildCheck OM data representing the evaluated properties of a project.
-/// </summary>
-public class EvaluatedPropertiesAnalysisData : AnalysisData
+namespace Microsoft.Build.Experimental.BuildCheck
 {
-    internal EvaluatedPropertiesAnalysisData(
+    /// <summary>
+    /// BuildCheck OM data representing the evaluated properties of a project.
+    /// </summary>
+    public class EvaluatedPropertiesAnalysisData : AnalysisData
+    {
+        internal EvaluatedPropertiesAnalysisData(
             string projectFilePath,
             IReadOnlyDictionary<string, string> evaluatedProperties,
             IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)
             : base(projectFilePath)
-    {
-        EvaluatedProperties = evaluatedProperties;
-        EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
-    }
+        {
+            EvaluatedProperties = evaluatedProperties;
+            EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
+        }
 
-    public IReadOnlyDictionary<string, string> EvaluatedProperties { get; }
+        /// <summary>
+        /// Gets the evaluated properties of the project.
+        /// </summary>
+        public IReadOnlyDictionary<string, string> EvaluatedProperties { get; }
 
-    public IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }
+        /// <summary>
+        /// Gets the evaluated environment variables and their metadata.
+        /// </summary>
+        public IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }
+    }
 }
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 0385e196649..43c7b7a3826 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -33,6 +33,11 @@ public abstract class ProjectProperty : IKeyed, IValued, IProperty, IEquatable<P
         /// </summary>
         private string _evaluatedValueEscaped;
 
+        /// <summary>
+        /// Property location in xml file. Can be empty.
+        /// </summary>
+        private (string File, int Line, int Column) _location;
+
         internal ProjectProperty(Project project)
         {
             ErrorUtilities.VerifyThrowArgumentNull(project, nameof(project));
@@ -111,9 +116,9 @@ string IProperty.EvaluatedValueEscaped
         }
 
         /// <summary>
-        /// Gets or sets object's location in xml file.
+        /// Gets object's location in xml file.
         /// </summary>
-        public (string File, int Line, int Column) Location { get; set; }
+        public (string File, int Line, int Column) Location { get => _location; }
 
         string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
         {
@@ -126,7 +131,7 @@ string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
             }
 
             // the location is handy in BuildCheck messages.
-            Location = (location.File, location.Line, location.Column);
+            _location = (location.File, location.Line, location.Column);
 
             return EvaluatedValueEscapedInternal;
         }
diff --git a/src/Build/Evaluation/IProperty.cs b/src/Build/Evaluation/IProperty.cs
index 4af5dbf25e1..d20249ce349 100644
--- a/src/Build/Evaluation/IProperty.cs
+++ b/src/Build/Evaluation/IProperty.cs
@@ -43,8 +43,11 @@ string EvaluatedValueEscaped
         string GetEvaluatedValueEscaped(IElementLocation location);
 
         /// <summary>
-        /// Property location in xml file. Can be empty.
+        /// Returns property location in xml file. Can be empty.
         /// </summary>
-        (string File, int Line, int Column) Location { get; set; }
+        (string File, int Line, int Column) Location
+        {
+            get;
+        }
     }
 }
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 5177ba79fe3..13b3c076958 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -33,6 +33,11 @@ public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<Pr
         /// </summary>
         private string _escapedValue;
 
+        /// <summary>
+        /// Property location in xml file. Can be empty.
+        /// </summary>
+        private (string File, int Line, int Column) _location;
+
         /// <summary>
         /// Private constructor
         /// </summary>
@@ -83,7 +88,7 @@ public string EvaluatedValue
         /// <summary>
         /// Gets or sets object's location in xml file.
         /// </summary>
-        public (string File, int Line, int Column) Location { get; set; }
+        public (string File, int Line, int Column) Location { get => _location; }
 
         /// <summary>
         /// Evaluated value of the property, escaped as necessary.
@@ -117,7 +122,7 @@ string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
             }
 
             // the location is handy in BuildCheck messages.
-            Location = (location.File, location.Line, location.Column);
+            _location = (location.File, location.Line, location.Column);
 
             return _escapedValue;
         }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index efce34bd6ef..e210e5d535d 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -33,6 +33,8 @@ public EndToEndTests(ITestOutputHelper output)
 
     [Theory]
     [InlineData(true, true)]
+    [InlineData(false, true)]
+    [InlineData(false, false)]
     public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProcessNode, bool analysisRequested)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile);
