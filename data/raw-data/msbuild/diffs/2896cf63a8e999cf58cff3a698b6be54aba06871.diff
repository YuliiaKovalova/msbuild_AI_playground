diff --git a/documentation/solution-parser.md b/documentation/solution-parser.md
index 76d6d944007..7a110785c4e 100644
--- a/documentation/solution-parser.md
+++ b/documentation/solution-parser.md
@@ -2,15 +2,11 @@
 
 ## Expander
 
-`Expander` class is used to expand value from an expression, which can
-be function invocation. These expression (or embedded properties)
-have form - "$(property)".
+The `Expander` class is used to expand a value from an expression, which can be a function invocation. These expressions (or embedded properties) have the form "$(Property)".
 
-`Expander` handles intrinsic functions, which is a list of built-in functions
-(bunch of ifs).
+`Expander` handles intrinsic functions, which is a list of built-in functions.
 
-MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,
-`MSBuildFrameworkToolsPath`, etc.
+MSBuild defines an initial set of properties like `MSBuildFrameworkToolsPath32`, `MSBuildFrameworkToolsPath`, etc.
 
 Tools configuration can come from configuration file, registry and local.
 
@@ -18,74 +14,46 @@ Tools configuration can come from configuration file, registry and local.
 
 Function `BeginBuild` prepares `BuildManager` to receive build requests, which:
 - Attaches debugger;
-- Checks that current build manager's state is idle;
-- Initializes logging service;
+- Checks that the current build manager's state is idle;
+- Initializes the logging service;
 - Initializes caches;
 - Registers packet handlers.
 
-After this setup, `MSBuild` creates build request data from project
-files or project instances. Data for build requests is stored in `BuildRequestData` class.
+After this setup, `MSBuild` creates build request data from project files or project instances. Data for build requests are stored in `BuildRequestData` objects.
 
-After build data for request has been prepared, `MSBuild` executes build (notice that
-it can also execute restore and graphbuild depending on configuration). It executes
-build in `ExecuteBuild` function. This function pends build request, which creates
-an instance of `BuildSubmission` that represent build submission.
+After build data for a request have been prepared, `MSBuild` executes the build. It may execute restore and/or a graph build instead depending on the configuration. It executes the build in the `ExecuteBuild` function, which pends the build request, creating an instance of `BuildSubmission` that represents the build submission.
 
-All build submissions are stored in dictionary in `BuildManager` class. Then
-they are added to the work queue.
+All build submissions are stored in a dictionary in the `BuildManager` class. Then they are added to the work queue.
 
 ## Execution
 
-Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`
-creates `BuildRequestBlocker` (blocker) that’s handled in `HandleNewRequest` function
-that handles new requests coming from nodes.
-This function iterates over all build requests in blocker and, if
-request is building a solution then it loads this solution to configuration.
+The work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`
+creates `BuildRequestBlocker` (blocker) that’s handled in the `HandleNewRequest` function that handles new requests coming from nodes. This function iterates over all build requests in blocker and, for a solution build, loads the solution to the configuration.
 
 ### Solution file parser
 
-Later, it parses solution file to generate solution wrapper using `SolutionFile` class.
-Parser function first parser file header, which should only contain solution
-file format version.
+Later, it parses the solution file to generate a solution wrapper using methods from the `SolutionFile` class. First, the parser parses the file header, which should only contain solution file format version.
 
-After that, it parses all remaining lines. Each such line should start with
-one of the following strings:
+After that, it parses all remaining lines. Each such line should start with one of the following strings:
 - `Project(` - calls `ParseProject`
 - `GlobalSection(NestedProject)` - calls `ParseNestedProjects`
 - `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`
 - `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`
 - `VisualStudioVersion` - calls `ParseVisualStudioVersion`
 
-`ParseProject` parses first line which contains Project Type GUID,
-Project name, Relative Path, Project GUID. Each project type is hardcoded (defined
-in `SolutionFile`). Then it parses all project dependencies. After project has
-been parsed, it’s added to project list.
+`ParseProject` parses the first line containing the Project Type GUID, Project name, Relative Path, and Project GUID. Each project type is hardcoded (as defined in `SolutionFile`). Then it parses all project dependencies. After a project has been parsed, it’s added to the list of parsed projects.
 
-`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,
-such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations
-to solution configuration list.
+`GlobalSection(SolutionConfigurationPlatforms)` parses the global configuration, such as `Debug|Any CPU = Debug|Any CPU`. It adds these configurations to the solution configuration list.
 
-`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as
-previous, but it’s global configuration for projects. It adds these
-configurations to raw project configuration list.
+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as `GlobalSection(ProjectConfigurationPlatforms)`, but it's the global configuration for projects. It adds these configurations to the raw project configuration list.
 
-`GlobalSection(NestedProjects)` finds parent projects to each given project.
-It stores parent GUID in nested projects.
+`GlobalSection(NestedProjects)` finds parent projects for each given project. It stores the parent GUID in nested projects.
 
-After solution file has been parsed, it processes project configuration section.
-It updates project configuration from earlier parsed solution file.
+After parsing the solution file, MSBuild processes the project configuration section, updating the project configuration section parsed from a previous solution file.
 
 ### Solution project generation
 
-Then `MSBuild` generates MSBuild project file from a list of projects
-and dependencies collected from solution file.
+Then `MSBuild` generates an MSBuild project file from the list of projects and dependencies collected from the solution file.
 
-While generating MSBuild wrapper project for solution file, `MSBuild` first
-collects an ordered list of actual projects. Then it creates traversal
-project instance and adds some XML to this instance. Then it emits
-metaproject (if it was specified) from traversal project. Then it builds
-project instance.
-
-`MSBuild` initializes that project instance by setting a bunch of
-fields and then evaluates project data.
+While generating the MSBuild wrapper project for a solution file, `MSBuild` first collects an ordered list of actual projects then creates a traversal project instance and adds some XML to it. Then it emits a solution metaproject (if it was specified) from that traversal project. It does not write this project to disk unless specified. Finally, it builds the metaproject.
 
