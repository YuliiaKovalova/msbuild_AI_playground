diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 7c55e583755..537660af9bf 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -412,16 +412,9 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)
                 switch (currentTargetEntry.State)
                 {
                     case TargetEntryState.Dependencies:
-                        var targetName = currentTargetEntry.Name;
-                        int indexOfSpecialCharacter = targetName.IndexOfAny(XMakeElements.InvalidTargetNameCharacters);
-                        if (indexOfSpecialCharacter >= 0)
-                        {
-                            ProjectErrorUtilities.ThrowInvalidProject(currentTargetEntry.ReferenceLocation, "NameInvalid", targetName, targetName[indexOfSpecialCharacter]);
-                        }
-
-                        // Ensure we are dealing with a target which actually exists
+                        // Ensure we are dealing with a target which actually exists.
                         ProjectErrorUtilities.VerifyThrowInvalidProject(
-                        _requestEntry.RequestConfiguration.Project.Targets.ContainsKey(targetName),
+                        _requestEntry.RequestConfiguration.Project.Targets.ContainsKey(currentTargetEntry.Name),
                         currentTargetEntry.ReferenceLocation,
                         "TargetDoesNotExist",
                         currentTargetEntry.Name);
diff --git a/src/Build/Construction/ProjectTargetElement.cs b/src/Build/Construction/ProjectTargetElement.cs
index 8191297ded0..e9893009031 100644
--- a/src/Build/Construction/ProjectTargetElement.cs
+++ b/src/Build/Construction/ProjectTargetElement.cs
@@ -109,7 +109,7 @@ public string Name
                 int indexOfSpecialCharacter = unescapedValue.IndexOfAny(XMakeElements.InvalidTargetNameCharacters);
                 if (indexOfSpecialCharacter >= 0)
                 {
-                    ProjectErrorUtilities.ThrowInvalidProject(ElementLocation.Create("MSBUILD"), "NameInvalid", unescapedValue, unescapedValue[indexOfSpecialCharacter]);
+                    ErrorUtilities.ThrowArgument("OM_NameInvalid", unescapedValue, unescapedValue[indexOfSpecialCharacter]);
                 }
 
                 SetOrRemoveAttribute(XMakeAttributes.name, unescapedValue, "Set target Name {0}", value);
@@ -171,7 +171,7 @@ public string KeepDuplicateOutputs
                 if (String.IsNullOrEmpty(value) && !BuildParameters.KeepDuplicateOutputs)
                 {
                     // In 4.0, by default we do NOT keep duplicate outputs unless they user has either set the attribute
-                    // explicitly or overridden it globally with MSBUILDKEEPDUPLICATEOUTPUTS set to a non-empty value.
+                    // explicitly or overridden it globally with MSBUILDKEEPDUPLICATEOUTPUTS set to a non-empty value.                    
                     value = "False";
                 }
 
@@ -273,11 +273,11 @@ public string Returns
                         value,
                         true); /* only remove the element if the value is null -- setting to empty string is OK */
 
-                // if this target's Returns attribute is non-null, then there is at least one target in the
-                // parent project that has the returns attribute.
-                // NOTE: As things are currently, if a project is created that has targets with Returns, but then
-                // all of those targets are set to not have Returns anymore, the PRE will still claim that it
-                // contains targets with the Returns attribute.  Do we care?
+                // if this target's Returns attribute is non-null, then there is at least one target in the 
+                // parent project that has the returns attribute.  
+                // NOTE: As things are currently, if a project is created that has targets with Returns, but then 
+                // all of those targets are set to not have Returns anymore, the PRE will still claim that it 
+                // contains targets with the Returns attribute.  Do we care? 
                 if (returnsAttribute != null)
                 {
                     ((ProjectRootElement)Parent).ContainsTargetsWithReturnsAttribute = true;
@@ -313,7 +313,7 @@ public ElementLocation KeepDuplicateOutputsLocation
                 if ((location == null) && !BuildParameters.KeepDuplicateOutputs)
                 {
                     // In 4.0, by default we do NOT keep duplicate outputs unless they user has either set the attribute
-                    // explicitly or overridden it globally with MSBUILDKEEPDUPLICATEOUTPUTS set to a non-empty value.
+                    // explicitly or overridden it globally with MSBUILDKEEPDUPLICATEOUTPUTS set to a non-empty value.                    
                     location = NameLocation;
                 }
 
