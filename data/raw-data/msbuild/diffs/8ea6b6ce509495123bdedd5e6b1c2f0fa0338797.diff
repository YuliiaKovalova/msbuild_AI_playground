diff --git a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
index 95cbd04909a..6fa40a03d33 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
@@ -32,11 +32,6 @@ public class AssemblyTaskFactory_Tests
         /// </summary>
         private AssemblyLoadInfo _loadInfo;
 
-        /// <summary>
-        /// The loaded type from the initialized task factory.
-        /// </summary>
-        private LoadedType _loadedType;
-
         /// <summary>
         /// Initialize a task factory
         /// </summary>
@@ -703,8 +698,7 @@ private void SetupTaskFactory(IDictionary<string, string> factoryParameters, boo
             _loadInfo = AssemblyLoadInfo.Create(typeof(TaskToTestFactories).GetTypeInfo().Assembly.FullName, null);
 #endif
             TypeInformation typeInfo = _taskFactory.InitializeFactory(_loadInfo, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, factoryParameters, explicitlyLaunchTaskHost, null, ElementLocation.Create("NONE"), String.Empty);
-            Assert.True(typeInfo.LoadInfo.Equals(_loadInfo)); // "Expected the AssemblyLoadInfo to be equal"
-            _loadedType = typeInfo.LoadedType;
+            typeInfo.LoadInfo.ShouldBe(_loadInfo, "Expected the AssemblyLoadInfo to be equal");
         }
 
         #endregion
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 8d7d5a29301..1567868e60e 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -1170,7 +1170,7 @@ private void InitializeHost(bool throwOnExecute)
             TaskBuilderTestTask.TaskBuilderTestTaskFactory taskFactory = new TaskBuilderTestTask.TaskBuilderTestTaskFactory();
             taskFactory.ThrowOnExecute = throwOnExecute;
             string taskName = "TaskBuilderTestTask";
-            (_host as TaskExecutionHost)._UNITTESTONLY_TaskFactoryWrapper = new TaskFactoryWrapper(taskFactory, new TypeInformation(loadedType), loadInfo, taskName, null);
+            (_host as TaskExecutionHost)._UNITTESTONLY_TaskFactoryWrapper = new TaskFactoryWrapper(taskFactory, new TypeInformation(loadedType), taskName, null);
             _host.InitializeForTask
                 (
                 this,
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index d899a483393..600eb2a81c5 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -299,7 +299,7 @@ bool ITaskExecutionHost.InitializeForBatch(TaskLoggingContext loggingContext, It
             if (_resolver == null)
             {
                 _resolver = new TaskEngineAssemblyResolver();
-                _resolver.Initialize(_taskFactoryWrapper.TaskFactoryAssemblyLoadInfo.AssemblyFile);
+                _resolver.Initialize(_taskFactoryWrapper.TaskFactoryTypeInformation.LoadInfo.AssemblyFile);
                 _resolver.InstallHandler();
             }
 #endif
@@ -903,12 +903,14 @@ private TaskFactoryWrapper FindTaskInRegistry(IDictionary<string, string> taskId
                 // Map to an intrinsic task, if necessary.
                 if (String.Equals(taskFactoryFullName, "Microsoft.Build.Tasks.MSBuild", StringComparison.OrdinalIgnoreCase))
                 {
-                    returnClass = new TaskFactoryWrapper(new IntrinsicTaskFactory(typeof(MSBuild)), new TypeInformation(new LoadedType(typeof(MSBuild), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null))), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null), _taskName, null);
+                    AssemblyLoadInfo loadInfo = AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null);
+                    returnClass = new TaskFactoryWrapper(new IntrinsicTaskFactory(typeof(MSBuild)), new TypeInformation(new LoadedType(typeof(MSBuild), loadInfo)), _taskName, null);
                     _intrinsicTasks[_taskName] = returnClass;
                 }
                 else if (String.Equals(taskFactoryFullName, "Microsoft.Build.Tasks.CallTarget", StringComparison.OrdinalIgnoreCase))
                 {
-                    returnClass = new TaskFactoryWrapper(new IntrinsicTaskFactory(typeof(CallTarget)), new TypeInformation(new LoadedType(typeof(CallTarget), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null))), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null), _taskName, null);
+                    AssemblyLoadInfo loadInfo = AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null);
+                    returnClass = new TaskFactoryWrapper(new IntrinsicTaskFactory(typeof(CallTarget)), new TypeInformation(new LoadedType(typeof(CallTarget), loadInfo)), _taskName, null);
                     _intrinsicTasks[_taskName] = returnClass;
                 }
             }
@@ -1080,8 +1082,8 @@ out parameterSet
                         "UnexpectedTaskAttribute",
                         parameterName,
                         _taskName,
-                        _taskFactoryWrapper.TaskFactoryAssemblyLoadInfo.AssemblyName,
-                        _taskFactoryWrapper.TaskFactoryAssemblyLoadInfo.AssemblyLocation
+                        _taskFactoryWrapper.TaskFactoryTypeInformation.LoadInfo.AssemblyName,
+                        _taskFactoryWrapper.TaskFactoryTypeInformation.LoadInfo.AssemblyLocation
                         );
                 }
             }
diff --git a/src/Build/Instance/ReflectableTaskPropertyInfo.cs b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
index 2d29e8c5067..6518e901fdd 100644
--- a/src/Build/Instance/ReflectableTaskPropertyInfo.cs
+++ b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
@@ -17,15 +17,19 @@ namespace Microsoft.Build.Execution
     internal class ReflectableTaskPropertyInfo : TaskPropertyInfo
     {
         /// <summary>
-        /// The reflection-produced PropertyInfo.
+        /// The name of the generated tasks.
         /// </summary>
-        private PropertyInfo _propertyInfo;
+        private readonly string taskName;
 
         /// <summary>
-        /// The type of the generated tasks.
+        /// Function for accessing information about a property on a task via its name.
         /// </summary>
         private readonly Func<string, BindingFlags, PropertyInfo> getProperty;
-        private readonly string taskName;
+
+        /// <summary>
+        /// The reflection-produced PropertyInfo.
+        /// </summary>
+        private PropertyInfo _propertyInfo;
 
         /// <summary>
         /// Initializes a new instance of the <see cref="ReflectableTaskPropertyInfo"/> class.
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 99d17ea7bf8..5c3b3406d21 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -84,25 +84,37 @@ public string FactoryName
         {
             get
             {
-                return _typeInformation.LoadInfo.AssemblyLocation ?? _typeInformation.LoadedType.LoadedAssembly.Location;
+                return _typeInformation.LoadInfo.AssemblyLocation;
             }
         }
 
         /// <summary>
         /// Gets the type of task this factory creates.
+        /// This is only actually used in finding the TaskName immediately below this if LoadedType is not null.
+        /// The extra null checks are to avoid throwing, though it will if it cannot find the type.
         /// </summary>
         public Type TaskType
         {
             get { return _typeInformation.LoadedType?.Type ?? Type.GetType(_typeInformation.TypeName, true, true); }
         }
 
+        /// <summary>
+        /// The name of the task.
+        /// </summary>
         public string TaskName
         {
             get { return _typeInformation.LoadedType is null ? $"{_typeInformation.Namespace}.{_typeInformation.TypeName}" : TaskType.FullName; }
         }
 
+        /// <summary>
+        /// All information known about a type. If it's loaded, that information mostly comes from the LoadedType object contained within.
+        /// If not, the information was collected in TypeLoader via System.Reflection.Metadata.
+        /// </summary>
         public TypeInformation TypeInformation { get { return _typeInformation; } }
 
+        /// <summary>
+        /// Indicates whether this task implements IGeneratedTask. IGeneratedTask has useful methods for getting and setting properties.
+        /// </summary>
         public bool ImplementsIGeneratedTask { get { return _typeInformation?.ImplementsIGeneratedTask ?? false; } }
 
         /// <summary>
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 3bb9231d6d7..dea1f5c7cdb 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -64,14 +64,13 @@ internal sealed class TaskFactoryWrapper
         /// <summary>
         /// Creates an instance of this class for the given type.
         /// </summary>
-        internal TaskFactoryWrapper(ITaskFactory taskFactory, TypeInformation taskFactoryLoadInfo, AssemblyLoadInfo taskFactoryAssemblyLoadInfo, string taskName, IDictionary<string, string> factoryIdentityParameters)
+        internal TaskFactoryWrapper(ITaskFactory taskFactory, TypeInformation taskFactoryLoadInfo, string taskName, IDictionary<string, string> factoryIdentityParameters)
         {
             ErrorUtilities.VerifyThrowArgumentNull(taskFactory, nameof(taskFactory));
             ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
             _taskFactory = taskFactory;
             _taskName = taskName;
             TaskFactoryTypeInformation = taskFactoryLoadInfo;
-            TaskFactoryAssemblyLoadInfo = taskFactoryAssemblyLoadInfo;
             _factoryIdentityParameters = factoryIdentityParameters;
         }
 
@@ -82,17 +81,7 @@ internal TaskFactoryWrapper(ITaskFactory taskFactory, TypeInformation taskFactor
         /// <summary>
         /// Load information about the task factory itself
         /// </summary>
-        public TypeInformation TaskFactoryTypeInformation
-        {
-            get;
-            private set;
-        }
-
-        public AssemblyLoadInfo TaskFactoryAssemblyLoadInfo
-        {
-            get;
-            private set;
-        }
+        public TypeInformation TaskFactoryTypeInformation { get; private set; }
 
         /// <summary>
         /// The task factory wrapped by the wrapper
@@ -254,7 +243,9 @@ private void PopulatePropertyInfoCacheIfNecessary()
         {
             if (_propertyInfoCache == null)
             {
-                bool taskTypeImplementsIGeneratedTask = _taskFactory is AssemblyTaskFactory assemblyTaskFactory ? assemblyTaskFactory.ImplementsIGeneratedTask : typeof(IGeneratedTask).IsAssignableFrom(_taskFactory.TaskType);
+                bool taskTypeImplementsIGeneratedTask = _taskFactory is AssemblyTaskFactory assemblyTaskFactory ?
+                    assemblyTaskFactory.ImplementsIGeneratedTask :
+                    typeof(IGeneratedTask).IsAssignableFrom(_taskFactory.TaskType);
                 TaskPropertyInfo[] propertyInfos = _taskFactory.GetTaskParameters();
 
                 for (int i = 0; i < propertyInfos.Length; i++)
@@ -265,7 +256,9 @@ private void PopulatePropertyInfoCacheIfNecessary()
                     TaskPropertyInfo propertyInfo = propertyInfos[i];
                     if (!taskTypeImplementsIGeneratedTask)
                     {
-                        propertyInfo = _taskFactory is AssemblyTaskFactory assemblyTaskFactory2 ? new ReflectableTaskPropertyInfo(propertyInfo, assemblyTaskFactory2.TypeInformation) : new ReflectableTaskPropertyInfo(propertyInfo, _taskFactory.TaskType);
+                        propertyInfo = _taskFactory is AssemblyTaskFactory assemblyTaskFactory2 ?
+                            new ReflectableTaskPropertyInfo(propertyInfo, assemblyTaskFactory2.TypeInformation) :
+                            new ReflectableTaskPropertyInfo(propertyInfo, _taskFactory.TaskType);
                     }
 
                     try
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 8e2e1536319..d12c45e98e6 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1369,7 +1369,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
 #if FEATURE_APPDOMAIN
                                 factory = (ITaskFactory)AppDomain.CurrentDomain.CreateInstanceAndUnwrap(typeInformation.LoadInfo.AssemblyName ?? typeInformation.LoadedType.Type.GetTypeInfo().Assembly.FullName, typeInformation.TypeName);
 #else
-                                factory = (ITaskFactory) Activator.CreateInstance(typeInformation.LoadInfo.AssemblyName ?? typeInformation.LoadedType.LoadedAssembly.FullName, typeInformation.TypeName)?.Unwrap();
+                                factory = (ITaskFactory)Activator.CreateInstance(typeInformation.LoadInfo.AssemblyName ?? typeInformation.LoadedType.LoadedAssembly.FullName, typeInformation.TypeName)?.Unwrap();
 #endif
                                 TaskFactoryLoggingHost taskFactoryLoggingHost = new TaskFactoryLoggingHost(true /*I dont have the data at this point, the safest thing to do is make sure events are serializable*/, elementLocation, targetLoggingContext);
 
@@ -1388,15 +1388,14 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                         // TaskFactoryParameters will always be null unless specifically created to have runtime and architecture parameters.
                                         if (TaskFactoryParameters != null)
                                         {
-                                            targetLoggingContext.LogWarning
-                                                (
+                                            targetLoggingContext.LogWarning(
                                                 null,
-                                                    new BuildEventFileInfo(elementLocation),
-                                                    "TaskFactoryWillIgnoreTaskFactoryParameters",
-                                                    factory.FactoryName,
-                                                    XMakeAttributes.runtime,
-                                                    XMakeAttributes.architecture,
-                                                RegisteredName);
+                                                new BuildEventFileInfo(elementLocation),
+                                                "TaskFactoryWillIgnoreTaskFactoryParameters",
+                                                factory.FactoryName,
+                                                XMakeAttributes.runtime,
+                                                XMakeAttributes.architecture,
+                                            RegisteredName);
                                         }
                                     }
 
@@ -1460,7 +1459,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                         }
                     }
 
-                    _taskFactoryWrapperInstance = new TaskFactoryWrapper(factory, typeInformation, TaskFactoryAssemblyLoadInfo, RegisteredName, TaskFactoryParameters);
+                    _taskFactoryWrapperInstance = new TaskFactoryWrapper(factory, typeInformation, RegisteredName, TaskFactoryParameters);
                 }
 
                 return true;
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index c9eb7ab6e62..82122c476ea 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -1,4 +1,4 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -137,7 +137,7 @@
     <Compile Include="..\Shared\TypeLoader.cs" />
 	<Compile Include="..\Shared\TypeInformation.cs" />
     <Compile Include="..\Shared\LoadedType.cs">
-	   <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+	  <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
     <Compile Include="..\Shared\AssemblyLoadInfo.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index 3db5b41e118..c9ebdbb44fb 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -114,11 +114,11 @@ IDictionary<string, TaskParameter> taskParams
 #endif
             wrappedTask = null;
 
-            LoadedType taskType = null;
+            TypeInformation taskType = null;
             try
             {
                 TypeLoader typeLoader = new TypeLoader(TaskLoader.IsTaskClass);
-                taskType = typeLoader.Load(taskName, Path.IsPathRooted(taskLocation) ? AssemblyLoadInfo.Create(null, taskLocation) : AssemblyLoadInfo.Create(taskLocation, null), false).LoadedType;
+                taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation), false);
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
@@ -136,10 +136,10 @@ IDictionary<string, TaskParameter> taskParams
             }
 
             OutOfProcTaskHostTaskResult taskResult;
-            if (taskType.HasSTAThreadAttribute())
+            if (taskType.HasSTAThreadAttribute)
             {
 #if FEATURE_APARTMENT_STATE
-                taskResult = InstantiateAndExecuteTaskInSTAThread(oopTaskHostNode, taskType, taskName, taskLocation, taskFile, taskLine, taskColumn,
+                taskResult = InstantiateAndExecuteTaskInSTAThread(oopTaskHostNode, taskType.LoadedType, taskName, taskLocation, taskFile, taskLine, taskColumn,
 #if FEATURE_APPDOMAIN
                     appDomainSetup,
 #endif
@@ -156,7 +156,7 @@ IDictionary<string, TaskParameter> taskParams
             }
             else
             {
-                taskResult = InstantiateAndExecuteTask(oopTaskHostNode, taskType, taskName, taskLocation, taskFile, taskLine, taskColumn,
+                taskResult = InstantiateAndExecuteTask(oopTaskHostNode, taskType.LoadedType, taskName, taskLocation, taskFile, taskLine, taskColumn,
 #if FEATURE_APPDOMAIN
                     appDomainSetup,
 #endif
diff --git a/src/MSBuildTaskHost/TypeLoader.cs b/src/MSBuildTaskHost/TypeLoader.cs
index 9105dee319f..00153e95b0a 100644
--- a/src/MSBuildTaskHost/TypeLoader.cs
+++ b/src/MSBuildTaskHost/TypeLoader.cs
@@ -239,7 +239,6 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName)
                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));
 
                 // Only one thread should be doing operations on this instance of the object at a time.
-
                 Type type = _typeNameToType.GetOrAdd(typeName, (key) =>
                 {
                     if ((_assemblyLoadInfo.AssemblyName != null) && (typeName.Length > 0))
@@ -285,7 +284,7 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName)
                     return null;
                 });
 
-                return type != null ? new TypeInformation() { LoadedType = new LoadedType(type, _assemblyLoadInfo, _loadedAssembly) } : null;
+                return type != null ? new TypeInformation(new LoadedType(type, _assemblyLoadInfo, _loadedAssembly)) : null;
             }
 
             /// <summary>
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index fa3ccfef3d9..82e5bcb39b6 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -143,24 +143,23 @@ internal static ITask CreateTask(TypeInformation typeInformation, string taskNam
                     // a task assembly using Load, and loaded a different one. I don't see any other choice than
                     // to fail here.
                     if (((typeInformation.LoadedType is not null) && taskType != typeInformation.LoadedType.Type) ||
-                            ((typeInformation.LoadedType is null) && (!taskType.Assembly.Location.Equals(typeInformation.LoadInfo.AssemblyLocation) || !taskType.Name.Equals(typeInformation.TypeName))))
+                        ((typeInformation.LoadedType is null) &&
+                        (!taskType.Assembly.Location.Equals(typeInformation.LoadInfo.AssemblyLocation) || !taskType.Name.Equals(typeInformation.TypeName))))
                     {
-                        logError
-                        (
-                        taskLocation,
-                        taskLine,
-                        taskColumn,
-                        "ConflictingTaskAssembly",
-                        typeInformation.LoadInfo.AssemblyFile ?? typeInformation.LoadedType.Assembly.AssemblyFile,
-                        typeInformation.LoadInfo.AssemblyLocation ?? typeInformation.LoadedType.Type.GetTypeInfo().Assembly.Location
-                        );
+                        logError(
+                            taskLocation,
+                            taskLine,
+                            taskColumn,
+                            "ConflictingTaskAssembly",
+                            typeInformation.LoadInfo.AssemblyFile ?? typeInformation.LoadedType.Assembly.AssemblyFile,
+                            typeInformation.LoadInfo.AssemblyLocation ?? typeInformation.LoadedType.Type.GetTypeInfo().Assembly.Location);
 
                         taskInstanceInOtherAppDomain = null;
                     }
                 }
                 else
                 {
-                    taskInstanceInOtherAppDomain = (ITask)taskAppDomain.CreateInstanceAndUnwrap(typeInformation.LoadInfo.AssemblyName ?? typeInformation.LoadedType.Type.GetTypeInfo().Assembly.FullName, typeInformation.TypeName);
+                    taskInstanceInOtherAppDomain = (ITask)taskAppDomain.CreateInstanceAndUnwrap(typeInformation.LoadedType.Type.GetTypeInfo().Assembly.FullName, typeInformation.TypeName);
                 }
 
                 return taskInstanceInOtherAppDomain;
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index f433a5afd6e..ea658de4b6d 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -325,6 +325,11 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                 return typeInfo;
             }
 
+            /// <summary>
+            /// The user has not explicitly requested a TaskHost; load the type and use it to find relevant information.
+            /// </summary>
+            /// <param name="typeName">The type to find.</param>
+            /// <returns>A <c ref="TypeInformation"/> with a LoadedType indicating relevant information.</returns>
             private TypeInformation FindTypeInformationUsingLoadedType(string typeName)
             {
                 if ((_assemblyLoadInfo.AssemblyName != null) && (typeName.Length > 0))
@@ -370,13 +375,20 @@ private TypeInformation FindTypeInformationUsingLoadedType(string typeName)
                 return null;
             }
 
+            /// <summary>
+            /// Find type information using System.Reflection.Metadata to avoid loading (and locking) its containing assembly.
+            /// </summary>
+            /// <param name="typeName">The type to find.</param>
+            /// <returns>A <c ref="TypeInformation"/> indicating relevant information about typeName.</returns>
             private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string typeName)
             {
                 string path = _assemblyLoadInfo.AssemblyFile;
                 if (path is null)
                 {
 #if NETFRAMEWORK
-                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, AppDomain.CurrentDomain.SetupInformation);
+                    AppDomainSetup setup = AppDomain.CurrentDomain.SetupInformation;
+                    setup.LoaderOptimization = LoaderOptimization.SingleDomain;
+                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, setup);
                     path = appDomain.Load(new AssemblyName(_assemblyLoadInfo.AssemblyName)).Location;
                     AppDomain.Unload(appDomain);
 #else
@@ -405,6 +417,14 @@ private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string
                 return null;
             }
 
+            /// <summary>
+            /// Tries to find information about the type.
+            /// </summary>
+            /// <param name="metadataReader"><c ref="MetadataReader"/> for the assembly containing the type.</param>
+            /// <param name="typeDef"><c ref="TypeDefinition"/> indicating the type currently under consideration.</param>
+            /// <param name="typeName">The name of the task type to find.</param>
+            /// <param name="typeInformation">The information, if we find it.</param>
+            /// <returns>True if this type or one of its children matches typeName. False otherwise.</returns>
             private bool TryGetTypeInformationFromDefinition(MetadataReader metadataReader, TypeDefinition typeDef, string typeName, out TypeInformation typeInformation)
             {
                 typeInformation = null;
@@ -553,6 +573,9 @@ private bool TryGetTypeInformationFromDefinition(MetadataReader metadataReader,
             private Type StringToType(string s)
             {
                 // return Type.GetType(s, false, true) ?? typeof(object);
+                // would be a much cleaner implementation of StringToType, but it unfortunately
+                // expects not just the type name but also its namespace like "System,Int32"
+                // rather than just "Int32" as we get from decoding the TypeDefinition's signature.
                 return s switch
                 {
                     "String" => typeof(String),
