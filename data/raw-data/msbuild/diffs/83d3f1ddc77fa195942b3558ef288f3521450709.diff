diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 3e69b611fdf..fef623948bf 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -1900,13 +1900,13 @@ public static IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId,
             /// <param name="buildEvent">Build event which was asked to be processed</param>
             internal override void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
             {
-                if (buildEvent is BuildEventArgs)
+                if (buildEvent is BuildEventArgs buildEventArgs)
                 {
-                    _processedBuildEvent = buildEvent as BuildEventArgs;
+                    _processedBuildEvent = buildEventArgs;
                 }
-                else if (buildEvent is KeyValuePair<int, BuildEventArgs>)
+                else if (buildEvent is KeyValuePair<int, BuildEventArgs> kvp)
                 {
-                    _processedBuildEvent = ((KeyValuePair<int, BuildEventArgs>)buildEvent).Value;
+                    _processedBuildEvent = kvp.Value;
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index e72b97ed626..9a372082f1d 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -1433,10 +1433,10 @@ private void WriteAndValidateProperties(BaseConsoleLogger cl, SimulatedConsole s
             string prop1;
             string prop2;
             string prop3;
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                var propertyList = ((SerialConsoleLogger)cl).ExtractPropertyList(properties);
-                ((SerialConsoleLogger)cl).WriteProperties(propertyList);
+                var propertyList = scl.ExtractPropertyList(properties);
+                scl.WriteProperties(propertyList);
                 prop1 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop1", "val1");
                 prop2 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop2", "val2");
                 prop3 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "pro(p3)", "va;%3b;l3");
@@ -1688,10 +1688,10 @@ private void WriteAndValidateItems(BaseConsoleLogger cl, SimulatedConsole sc, bo
             string item3spec;
             string item3metadatum = string.Empty;
 
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                ((SerialConsoleLogger)cl).WriteItems(itemList);
+                SortedList itemList = scl.ExtractItemList(items);
+                scl.WriteItems(itemList);
                 item1spec = "spec" + Environment.NewLine;
                 item2spec = "spec2" + Environment.NewLine;
                 item3spec = "(spec;3" + Environment.NewLine;
@@ -1770,10 +1770,10 @@ public void WriteItemsEmptyList()
                     cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
                 }
 
-                if (cl is SerialConsoleLogger)
+                if (cl is SerialConsoleLogger scl)
                 {
-                    SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                    ((SerialConsoleLogger)cl).WriteItems(itemList);
+                    SortedList itemList = scl.ExtractItemList(items);
+                    scl.WriteItems(itemList);
                 }
                 else
                 {
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 33f623a2965..fd9becd085c 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1407,13 +1407,13 @@ private void RouteBuildEvent(object loggingEvent)
         {
             BuildEventArgs buildEventArgs = null;
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs bea)
             {
-                buildEventArgs = (BuildEventArgs)loggingEvent;
+                buildEventArgs = bea;
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> kvp)
             {
-                buildEventArgs = ((KeyValuePair<int, BuildEventArgs>)loggingEvent).Value;
+                buildEventArgs = kvp.Value;
             }
             else
             {
@@ -1475,13 +1475,13 @@ private void RouteBuildEvent(object loggingEvent)
                 _warningsAsMessagesByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
             }
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs loggingEventBuildArgs)
             {
-                RouteBuildEvent((BuildEventArgs)loggingEvent);
+                RouteBuildEvent(loggingEventBuildArgs);
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> loggingEventKeyValuePair)
             {
-                RouteBuildEvent((KeyValuePair<int, BuildEventArgs>)loggingEvent);
+                RouteBuildEvent(loggingEventKeyValuePair);
             }
         }
 
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 3c4e72efc3e..f15e84aa3b8 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3384,9 +3384,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                         // The object that we're about to call methods on may have escaped characters
                         // in it, we want to operate on the unescaped string in the function, just as we
                         // want to pass arguments that are unescaped (see below)
-                        if (objectInstance is string)
+                        if (objectInstance is string objectInstanceString)
                         {
-                            objectInstance = EscapingUtilities.UnescapeAll((string)objectInstance);
+                            objectInstance = EscapingUtilities.UnescapeAll(objectInstanceString);
                         }
                     }
 
@@ -3510,9 +3510,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                     // If the result of the function call is a string, then we need to escape the result
                     // so that we maintain the "engine contains escaped data" state.
                     // The exception is that the user is explicitly calling MSBuild::Unescape or MSBuild::Escape
-                    if (functionResult is string && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
+                    if (functionResult is string functionResultString && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
                     {
-                        functionResult = EscapingUtilities.Escape((string)functionResult);
+                        functionResult = EscapingUtilities.Escape(functionResultString);
                     }
 
                     // We have nothing left to parse, so we'll return what we have
@@ -3762,9 +3762,8 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                     }
                 }
-                else if (objectInstance is string[])
+                else if (objectInstance is string[] stringArray)
                 {
-                    string[] stringArray = (string[])objectInstance;
                     if (string.Equals(_methodMethodName, "GetValue", StringComparison.OrdinalIgnoreCase))
                     {
                         if (TryGetArg(args, out int index))
diff --git a/src/Build/Instance/ProjectTargetInstance.cs b/src/Build/Instance/ProjectTargetInstance.cs
index d485da28e85..a10cb8456fb 100644
--- a/src/Build/Instance/ProjectTargetInstance.cs
+++ b/src/Build/Instance/ProjectTargetInstance.cs
@@ -493,14 +493,12 @@ internal ProjectTargetElement ToProjectTargetElement(ProjectRootElement rootElem
 
                 foreach (ProjectTaskInstanceChild outputInstance in taskInstance.Outputs)
                 {
-                    if (outputInstance is ProjectTaskOutputItemInstance)
+                    if (outputInstance is ProjectTaskOutputItemInstance outputItemInstance)
                     {
-                        ProjectTaskOutputItemInstance outputItemInstance = outputInstance as ProjectTaskOutputItemInstance;
                         taskElement.AddOutputItem(outputItemInstance.TaskParameter, outputItemInstance.ItemType, outputItemInstance.Condition);
                     }
-                    else if (outputInstance is ProjectTaskOutputPropertyInstance)
+                    else if (outputInstance is ProjectTaskOutputPropertyInstance outputPropertyInstance)
                     {
-                        ProjectTaskOutputPropertyInstance outputPropertyInstance = outputInstance as ProjectTaskOutputPropertyInstance;
                         taskElement.AddOutputItem(outputPropertyInstance.TaskParameter, outputPropertyInstance.PropertyName, outputPropertyInstance.Condition);
                     }
                 }
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index ce29ccbed30..4132f75aa57 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -203,9 +203,9 @@ public object GetPropertyValue(TaskPropertyInfo property)
             {
                 // If we returned an exception, then we want to throw it when we 
                 // do the get.  
-                if (value is Exception)
+                if (value is Exception ex)
                 {
-                    throw (Exception)value;
+                    throw ex;
                 }
 
                 return value;
@@ -520,21 +520,21 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
 
                     // "Custom events" in terms of the communications infrastructure can also be, e.g. custom error events, 
                     // in which case they need to be dealt with in the same way as their base type of event. 
-                    if (buildEvent is BuildErrorEventArgs)
+                    if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        this.BuildEngine.LogErrorEvent((BuildErrorEventArgs)buildEvent);
+                        this.BuildEngine.LogErrorEvent(buildErrorEventArgs);
                     }
-                    else if (buildEvent is BuildWarningEventArgs)
+                    else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        this.BuildEngine.LogWarningEvent((BuildWarningEventArgs)buildEvent);
+                        this.BuildEngine.LogWarningEvent(buildWarningEventArgs);
                     }
-                    else if (buildEvent is BuildMessageEventArgs)
+                    else if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
                     {
-                        this.BuildEngine.LogMessageEvent((BuildMessageEventArgs)buildEvent);
+                        this.BuildEngine.LogMessageEvent(buildMessageEventArgs);
                     }
-                    else if (buildEvent is CustomBuildEventArgs)
+                    else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
                     {
-                        this.BuildEngine.LogCustomEvent((CustomBuildEventArgs)buildEvent);
+                        this.BuildEngine.LogCustomEvent(customBuildEventArgs);
                     }
                     else
                     {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
index 3eb9fc9f65c..bfb588a0275 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
@@ -87,57 +87,57 @@ public class EventArgsDispatcher : IEventSource
         /// </summary>
         public void Dispatch(BuildEventArgs buildEvent)
         {
-            if (buildEvent is BuildMessageEventArgs)
+            if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
-                MessageRaised?.Invoke(null, (BuildMessageEventArgs)buildEvent);
+                MessageRaised?.Invoke(null, buildMessageEventArgs);
             }
-            else if (buildEvent is TaskStartedEventArgs)
+            else if (buildEvent is TaskStartedEventArgs taskStartedEventArgs)
             {
-                TaskStarted?.Invoke(null, (TaskStartedEventArgs)buildEvent);
+                TaskStarted?.Invoke(null, taskStartedEventArgs);
             }
-            else if (buildEvent is TaskFinishedEventArgs)
+            else if (buildEvent is TaskFinishedEventArgs taskFinishedEventArgs)
             {
-                TaskFinished?.Invoke(null, (TaskFinishedEventArgs)buildEvent);
+                TaskFinished?.Invoke(null, taskFinishedEventArgs);
             }
-            else if (buildEvent is TargetStartedEventArgs)
+            else if (buildEvent is TargetStartedEventArgs targetStartedEventArgs)
             {
-                TargetStarted?.Invoke(null, (TargetStartedEventArgs)buildEvent);
+                TargetStarted?.Invoke(null, targetStartedEventArgs);
             }
-            else if (buildEvent is TargetFinishedEventArgs)
+            else if (buildEvent is TargetFinishedEventArgs targetFinishedEventArgs)
             {
-                TargetFinished?.Invoke(null, (TargetFinishedEventArgs)buildEvent);
+                TargetFinished?.Invoke(null, targetFinishedEventArgs);
             }
-            else if (buildEvent is ProjectStartedEventArgs)
+            else if (buildEvent is ProjectStartedEventArgs projectStartedEventArgs)
             {
-                ProjectStarted?.Invoke(null, (ProjectStartedEventArgs)buildEvent);
+                ProjectStarted?.Invoke(null, projectStartedEventArgs);
             }
-            else if (buildEvent is ProjectFinishedEventArgs)
+            else if (buildEvent is ProjectFinishedEventArgs projectFinishedEventArgs)
             {
-                ProjectFinished?.Invoke(null, (ProjectFinishedEventArgs)buildEvent);
+                ProjectFinished?.Invoke(null, projectFinishedEventArgs);
             }
-            else if (buildEvent is BuildStartedEventArgs)
+            else if (buildEvent is BuildStartedEventArgs buildStartedEventArgs)
             {
-                BuildStarted?.Invoke(null, (BuildStartedEventArgs)buildEvent);
+                BuildStarted?.Invoke(null, buildStartedEventArgs);
             }
-            else if (buildEvent is BuildFinishedEventArgs)
+            else if (buildEvent is BuildFinishedEventArgs buildFinishedEventArgs)
             {
-                BuildFinished?.Invoke(null, (BuildFinishedEventArgs)buildEvent);
+                BuildFinished?.Invoke(null, buildFinishedEventArgs);
             }
-            else if (buildEvent is CustomBuildEventArgs)
+            else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
             {
-                CustomEventRaised?.Invoke(null, (CustomBuildEventArgs)buildEvent);
+                CustomEventRaised?.Invoke(null, customBuildEventArgs);
             }
-            else if (buildEvent is BuildStatusEventArgs)
+            else if (buildEvent is BuildStatusEventArgs buildStatusEventArgs)
             {
-                StatusEventRaised?.Invoke(null, (BuildStatusEventArgs)buildEvent);
+                StatusEventRaised?.Invoke(null, buildStatusEventArgs);
             }
-            else if (buildEvent is BuildWarningEventArgs)
+            else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
             {
-                WarningRaised?.Invoke(null, (BuildWarningEventArgs)buildEvent);
+                WarningRaised?.Invoke(null, buildWarningEventArgs);
             }
-            else if (buildEvent is BuildErrorEventArgs)
+            else if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
             {
-                ErrorRaised?.Invoke(null, (BuildErrorEventArgs)buildEvent);
+                ErrorRaised?.Invoke(null, buildErrorEventArgs);
             }
 
             AnyEventRaised?.Invoke(null, buildEvent);
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index e82a335b718..cb37c96596c 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -474,13 +474,13 @@ private void ShowErrorWarningSummary(IEnumerable<BuildEventArgs> listToProcess)
                 // Print out all of the errors under the ProjectEntryPoint / target
                 foreach (BuildEventArgs errorWarningEvent in valuePair.Value)
                 {
-                    if (errorWarningEvent is BuildErrorEventArgs)
+                    if (errorWarningEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
-                    else if (errorWarningEvent is BuildWarningEventArgs)
+                    else if (errorWarningEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
                 }
                 WriteNewLine();
diff --git a/src/Framework/Profiler/EvaluationLocation.cs b/src/Framework/Profiler/EvaluationLocation.cs
index fd5f57114cd..f37093e78a0 100644
--- a/src/Framework/Profiler/EvaluationLocation.cs
+++ b/src/Framework/Profiler/EvaluationLocation.cs
@@ -229,9 +229,8 @@ public EvaluationLocation WithGlob(string globDescription)
         /// <nodoc/>
         public override bool Equals(object obj)
         {
-            if (obj is EvaluationLocation)
+            if (obj is EvaluationLocation other)
             {
-                var other = (EvaluationLocation) obj;
                 return
                     Id == other.Id &&
                     ParentId == other.ParentId &&
diff --git a/src/Framework/Profiler/ProfilerResult.cs b/src/Framework/Profiler/ProfilerResult.cs
index 3e85be55367..2a3a9208372 100644
--- a/src/Framework/Profiler/ProfilerResult.cs
+++ b/src/Framework/Profiler/ProfilerResult.cs
@@ -73,15 +73,14 @@ public ProfiledLocation(TimeSpan inclusiveTime, TimeSpan exclusiveTime, int numb
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfiledLocation))
+            if (obj is ProfiledLocation location)
             {
-                return false;
+                return InclusiveTime.Equals(location.InclusiveTime) &&
+                       ExclusiveTime.Equals(location.ExclusiveTime) &&
+                       NumberOfHits == location.NumberOfHits;
             }
 
-            var location = (ProfiledLocation)obj;
-            return InclusiveTime.Equals(location.InclusiveTime) &&
-                   ExclusiveTime.Equals(location.ExclusiveTime) &&
-                   NumberOfHits == location.NumberOfHits;
+            return false;
         }
 
         /// <inheritdoc />
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 4f79f3ad053..515500a98b0 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -284,11 +284,8 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
                 escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
                 IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();
 
-                if (nonGenericEscapedMetadata is Dictionary<string, string>)
-                {
-                    escapedMetadata = (Dictionary<string, string>)nonGenericEscapedMetadata;
-                }
-                else
+                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;
+                if (escapedMetadata is null)
                 {
                     escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                     foreach (object key in nonGenericEscapedMetadata.Keys)
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index c6733074229..2147af3cf31 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1237,9 +1237,8 @@ quiet at the engine level.
                     // Log general resolution exceptions.
                     foreach (Exception error in generalResolutionExceptions)
                     {
-                        if (error is InvalidReferenceAssemblyNameException)
+                        if (error is InvalidReferenceAssemblyNameException e)
                         {
-                            InvalidReferenceAssemblyNameException e = (InvalidReferenceAssemblyNameException)error;
                             Log.LogWarningWithCodeFromResources("General.MalformedAssemblyName", e.SourceItemSpec);
                         }
                         else
@@ -1257,9 +1256,9 @@ quiet at the engine level.
             {
                 foreach (Resolver r in dependencyTable.Resolvers)
                 {
-                    if (r is AssemblyFoldersExResolver)
+                    if (r is AssemblyFoldersExResolver assemblyFoldersExResolver)
                     {
-                        AssemblyFoldersEx assemblyFoldersEx = ((AssemblyFoldersExResolver)r).AssemblyFoldersExLocations;
+                        AssemblyFoldersEx assemblyFoldersEx = (assemblyFoldersExResolver).AssemblyFoldersExLocations;
 
                         if (assemblyFoldersEx != null && _showAssemblyFoldersExLocations.TryGetValue(r.SearchPath, out messageImportance))
                         {
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index 026cdfb8da1..a211d9e17e9 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -237,9 +237,8 @@ private AssemblyIdentity CreateAssemblyIdentity(AssemblyIdentity baseIdentity, A
             }
 
             // Fixup for non-ClickOnce case...
-            if (_manifest is ApplicationManifest)
+            if (_manifest is ApplicationManifest applicationManifest)
             {
-                var applicationManifest = _manifest as ApplicationManifest;
                 if (!applicationManifest.IsClickOnceManifest)
                 {
                     // Don't need publicKeyToken attribute for non-ClickOnce case
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 1b930d2c177..711fa15ee49 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -552,9 +552,9 @@ static GenerateResource()
             try
             {
                 object allowUntrustedFiles = Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\SDK", "AllowProcessOfUntrustedResourceFiles", null);
-                if (allowUntrustedFiles is String)
+                if (allowUntrustedFiles is String allowUntrustedFilesString)
                 {
-                    allowMOTW = ((string)allowUntrustedFiles).Equals("true", StringComparison.OrdinalIgnoreCase);
+                    allowMOTW = (allowUntrustedFilesString).Equals("true", StringComparison.OrdinalIgnoreCase);
                 }
             }
             catch { }
@@ -894,10 +894,10 @@ public override bool Execute()
                                 {
                                     foreach (ITaskItem item in _remotedTaskItems)
                                     {
-                                        if (item is MarshalByRefObject)
+                                        if (item is MarshalByRefObject marshalByRefObject)
                                         {
                                             // Tell remoting to forget connections to the taskitem
-                                            RemotingServices.Disconnect((MarshalByRefObject)item);
+                                            RemotingServices.Disconnect(marshalByRefObject);
                                         }
                                     }
                                 }
@@ -2610,9 +2610,8 @@ private bool ProcessFile(string inFile, string outFileOrDir)
             }
             catch (ArgumentException ae)
             {
-                if (ae.InnerException is XmlException)
+                if (ae.InnerException is XmlException xe)
                 {
-                    XmlException xe = (XmlException) ae.InnerException;
                     _logger.LogErrorWithCodeFromResources(null, FileUtilities.GetFullPathNoThrow(inFile), xe.LineNumber,
                         xe.LinePosition, 0, 0, "General.InvalidResxFile", xe.Message);
                 }
diff --git a/src/Tasks/ManifestUtil/Manifest.cs b/src/Tasks/ManifestUtil/Manifest.cs
index c60cbd61a32..0d17d52f4e4 100644
--- a/src/Tasks/ManifestUtil/Manifest.cs
+++ b/src/Tasks/ManifestUtil/Manifest.cs
@@ -759,22 +759,20 @@ public int Compare(object x, object y)
                     Debug.Fail("Comparing null objects");
                     return 0;
                 }
-                if (!(x is BaseReference) || !(y is BaseReference))
-                {
-                    Debug.Fail("Comparing objects that are not BaseReferences");
-                    return 0;
-                }
-
-                BaseReference xRef = x as BaseReference;
-                BaseReference yRef = y as BaseReference;
 
-                if (xRef.SortName == null || yRef.SortName == null)
+                if (x is BaseReference xRef && y is BaseReference yRef)
                 {
-                    Debug.Fail("Objects do not have a SortName");
-                    return 0;
+                    if (xRef.SortName == null || yRef.SortName == null)
+                    {
+                        Debug.Fail("Objects do not have a SortName");
+                        return 0;
+                    }
+
+                    return xRef.SortName.CompareTo(yRef.SortName);
                 }
 
-                return xRef.SortName.CompareTo(yRef.SortName);
+                Debug.Fail("Comparing objects that are not BaseReferences");
+                return 0;
             }
         }
 
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index 8016704ee78..d598c7da14e 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -644,9 +644,9 @@ private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, st
                         }
                         var manifest = new SignedCmiManifest2(doc, useSha256);
                         CmiManifestSigner2 signer;
-                        if (useSha256 && rsa is RSACryptoServiceProvider)
+                        if (useSha256 && rsa is RSACryptoServiceProvider rsacsp)
                         {
-                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsa as RSACryptoServiceProvider, useSha256);
+                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
                             signer = new CmiManifestSigner2(csp, cert, useSha256);
                         }
                         else
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 191add569e4..b487a4cfbc3 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -514,8 +514,8 @@ private static void ReplacePublicKeyToken(XmlDocument manifestDom, AsymmetricAlg
 
             byte[] cspPublicKeyBlob;
 
-            if(snKey is RSACryptoServiceProvider){
-                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider((RSACryptoServiceProvider)snKey, useSha256)).ExportCspBlob(false);
+            if(snKey is RSACryptoServiceProvider rsacsp){
+                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider(rsacsp, useSha256)).ExportCspBlob(false);
                 if (cspPublicKeyBlob == null || cspPublicKeyBlob.Length == 0)
                 {
                     throw new CryptographicException(Win32.NTE_BAD_KEY);
@@ -931,9 +931,9 @@ private static void StrongNameSignManifestDom(XmlDocument manifestDom, XmlDocume
 
             // Setup up XMLDSIG engine.
             ManifestSignedXml2 signedXml = new ManifestSignedXml2(signatureParent);
-            if (signer.StrongNameKey is RSACryptoServiceProvider)
+            if (signer.StrongNameKey is RSACryptoServiceProvider rsacsp)
             {
-                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(signer.StrongNameKey as RSACryptoServiceProvider, useSha256);
+                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
             }
             else
             {
