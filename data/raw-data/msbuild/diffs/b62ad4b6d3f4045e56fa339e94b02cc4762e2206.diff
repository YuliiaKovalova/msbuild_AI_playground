diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
new file mode 100644
index 00000000000..6eaf1e1d8d1
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
@@ -0,0 +1,138 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Reflection;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.Shared;
+using Xunit;
+using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
+using static Microsoft.Build.UnitTests.ObjectModelHelpers;
+
+#nullable disable
+
+namespace Microsoft.Build.Engine.UnitTests.BackEnd
+{
+    public class BuildManager_Logging_Tests
+    {
+        /// <summary>
+        /// The mock logger for testing.
+        /// </summary>
+        private readonly MockLogger _logger;
+
+        /// <summary>
+        /// The standard build manager for each test.
+        /// </summary>
+        private readonly BuildManager _buildManager;
+
+        /// <summary>
+        /// The project collection used.
+        /// </summary>
+        private readonly ProjectCollection _projectCollection;
+
+        private readonly TestEnvironment _env;
+        private readonly ITestOutputHelper _output;
+
+        /// <summary>
+        /// SetUp
+        /// </summary>
+        public BuildManager_Logging_Tests(ITestOutputHelper output)
+        {
+            _output = output;
+            // Ensure that any previous tests which may have been using the default BuildManager do not conflict with us.
+            BuildManager.DefaultBuildManager.Dispose();
+
+            _logger = new MockLogger(output);
+            _buildManager = new BuildManager();
+            _projectCollection = new ProjectCollection();
+
+            _env = TestEnvironment.Create(output);
+        }
+
+        [Fact]
+        public void Build_WithCustomBuildArgs_EnvVariableSet()
+        {
+            const string mainProject = @"
+<Project>
+
+  <Target Name=`MainTarget`>
+    <MSBuild Projects=`{0}` Targets=`ChildTarget` />
+  </Target>
+
+</Project>";
+
+            string childProjectWithCustomBuildEvent = $@"
+<Project>
+
+    <UsingTask TaskName=""CustomBuildEventTask"" AssemblyFile=""{Assembly.GetExecutingAssembly().Location}"" />
+    <Target Name=`ChildTarget`>
+        <CustomBuildEventTask />
+    </Target>
+
+</Project>";
+
+            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "child1" }, string.Empty);
+
+            ILoggingService service = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
+            service.RegisterLogger(_logger);
+
+            _env.SetEnvironmentVariable("MSBUILDCUSTOMBUILDEVENTWARNING", "1");
+
+            _buildManager.BeginBuild(BuildParameters);
+
+            try
+            {
+                var child1ProjectPath = testFiles.CreatedFiles[1];
+                var cleanedUpChildContents = CleanupFileContents(childProjectWithCustomBuildEvent);
+                File.WriteAllText(child1ProjectPath, cleanedUpChildContents);
+
+                var mainProjectPath = testFiles.CreatedFiles[0];
+                var cleanedUpMainContents = CleanupFileContents(string.Format(mainProject, child1ProjectPath));
+                File.WriteAllText(mainProjectPath, cleanedUpMainContents);
+
+                var buildRequestData = new BuildRequestData(
+                   mainProjectPath,
+                   new Dictionary<string, string>(),
+                   MSBuildConstants.CurrentToolsVersion,
+                   new[] { "MainTarget" },
+                   null);
+
+                var submission = _buildManager.PendBuildRequest(buildRequestData);
+
+                var result = submission.Execute();
+
+                var e = _logger.AllBuildEvents;
+            }
+            finally
+            {
+                _buildManager.EndBuild();
+                _env.SetEnvironmentVariable("MSBUILDCUSTOMBUILDEVENTWARNING", null);
+            }
+        }
+
+        private BuildParameters BuildParameters => new BuildParameters(_projectCollection)
+        {
+            DisableInProcNode = true,
+            EnableNodeReuse = false,
+            Loggers = new ILogger[] { _logger }
+        };
+
+        /// <summary>
+        /// TearDown
+        /// </summary>
+        private void Dispose()
+        {
+            _buildManager.Dispose();
+            _projectCollection.Dispose();
+            _env.Dispose();
+        }
+    }
+}
diff --git a/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs b/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs
new file mode 100644
index 00000000000..3903c801158
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs
@@ -0,0 +1,25 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+
+#nullable disable
+
+namespace Microsoft.Build.UnitTests
+{
+    public class CustomBuildEventTask : Task
+    {
+        public override bool Execute()
+        {
+            var customBuildEvent = new MyCustomBuildEventArgs();
+            BuildEngine.LogCustomEvent(customBuildEvent);
+
+            return true;
+        }
+
+        [Serializable]
+        public sealed class MyCustomBuildEventArgs : CustomBuildEventArgs { }
+    }
+}
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index d3052a0468f..1596e1c73f7 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -900,8 +900,28 @@ public void PacketReceived(int node, INodePacket packet)
             }
 
             LogMessagePacket loggingPacket = (LogMessagePacket)packet;
-            InjectNonSerializedData(loggingPacket);
-            ProcessLoggingEvent(loggingPacket.NodeBuildEvent);
+
+            if (loggingPacket.EventType == LoggingEventType.CustomEvent
+                && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8)
+                && Traits.Instance.EscapeHatches.EnableWarningOnCustomBuildEvent)
+            {
+                BuildEventArgs buildEvent = loggingPacket.NodeBuildEvent.Value.Value;
+
+                // Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
+                // Since BinaryFormatter is going to be deprecated, log warning so users can use new Extended*EventArgs instead of custom
+                // EventArgs derived from existing EventArgs.
+                LogWarning(
+                    buildEvent?.BuildEventContext ?? BuildEventContext.Invalid,
+                    null,
+                    BuildEventFileInfo.Empty,
+                    "DeprecatedEventSerialization",
+                    buildEvent?.GetType().Name ?? string.Empty);
+            }
+            else
+            {
+                InjectNonSerializedData(loggingPacket);
+                ProcessLoggingEvent(loggingPacket.NodeBuildEvent);
+            }
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 5f03414e707..83a74bee7d6 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -573,23 +573,6 @@ private void SendPacket(INodePacket packet)
             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)
             {
                 _nodeEndpoint.SendData(packet);
-
-                if (packet is LogMessagePacketBase logMessage)
-                {
-                    if (logMessage.EventType == LoggingEventType.CustomEvent
-                        && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8)
-                        && Traits.Instance.EscapeHatches.EnableWarningOnCustomBuildEvent)
-                    {
-                        BuildEventArgs buildEvent = logMessage.NodeBuildEvent.Value.Value;
-
-                        // Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
-                        // Since BinaryFormatter is going to be deprecated, log warning so users can use new Extended*EventArgs instead of custom
-                        // EventArgs derived from existing EventArgs.
-                        _loggingService.LogWarning(buildEvent?.BuildEventContext ?? BuildEventContext.Invalid, null, BuildEventFileInfo.Empty,
-                            "DeprecatedEventSerialization",
-                            buildEvent?.GetType().Name ?? string.Empty);
-                    }
-                }
             }
         }
 
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 36c8adde9ad..bb09f6219f7 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -1158,20 +1158,6 @@ private void SendBuildEvent(BuildEventArgs e)
 
                 LogMessagePacket logMessage = new LogMessagePacket(new KeyValuePair<int, BuildEventArgs>(_currentConfiguration.NodeId, e));
                 _nodeEndpoint.SendData(logMessage);
-
-                if (logMessage.EventType == LoggingEventType.CustomEvent
-                    && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8)
-                    && Traits.Instance.EscapeHatches.EnableWarningOnCustomBuildEvent)
-                {
-                    BuildEventArgs buildEvent = logMessage.NodeBuildEvent.Value.Value;
-
-                    // Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
-                    // Since BinaryFormatter is going to be deprecated, log warning so users can use new Extended*EventArgs instead of custom
-                    // EventArgs derived from existing EventArgs.
-                    LogWarningFromResource(
-                        "DeprecatedEventSerialization",
-                        buildEvent?.GetType().Name ?? string.Empty);
-                }
             }
         }
 
