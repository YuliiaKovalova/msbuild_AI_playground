diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..88f13bb1a08 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -126,7 +126,7 @@
     <Rule Id="CA2119" Action="None" />             <!-- Seal methods that satisfy private interfaces --> 
     <Rule Id="CA2153" Action="None" />             <!-- Do Not Catch Corrupted State Exceptions --> 
     <Rule Id="CA2201" Action="None" />             <!-- Do not raise reserved exception types --> 
-    <Rule Id="CA2208" Action="Info" />             <!-- Instantiate argument exceptions correctly --> 
+    <Rule Id="CA2208" Action="Warning" />          <!-- Instantiate argument exceptions correctly --> 
     <Rule Id="CA2211" Action="None" />             <!-- Non-constant fields should not be visible --> 
     <Rule Id="CA2213" Action="None" />             <!-- Disposable fields should be disposed --> 
     <Rule Id="CA2215" Action="None" />             <!-- Dispose methods should call base class dispose --> 
diff --git a/src/Build.OM.UnitTests/TransientIO.cs b/src/Build.OM.UnitTests/TransientIO.cs
index a4baa8399ca..eb0c7fb970d 100644
--- a/src/Build.OM.UnitTests/TransientIO.cs
+++ b/src/Build.OM.UnitTests/TransientIO.cs
@@ -77,7 +77,7 @@ public string GetAbsolutePath(string relative)
             var absolute = Path.GetFullPath(Path.IsPathRooted(relative) ? relative : Path.Combine(tempRoot, relative));
             if (!IsControled(absolute))
             {
-                throw new ArgumentException(nameof(relative));
+                throw new ArgumentException(null, nameof(relative));
             }
 
             return absolute;
