diff --git a/src/Framework/LogInterpolatedStringHandler.cs b/src/Framework/LogInterpolatedStringHandler.cs
deleted file mode 100644
index 69755075910..00000000000
--- a/src/Framework/LogInterpolatedStringHandler.cs
+++ /dev/null
@@ -1,88 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-#if NET6_0_OR_GREATER
-
-using System;
-using System.Runtime.CompilerServices;
-
-namespace Microsoft.Build.Framework
-{
-    /// <summary>
-    /// Represents interpolation string handler which allows to get string format and parameters
-    /// such like <see cref="FormattableString"/>.
-    /// </summary>
-    [InterpolatedStringHandler]
-    public ref struct LogInterpolatedStringHandler
-    {
-        private readonly char[] buffer;
-        private int position = 0;
-        private int argPosition = 0;
-
-        public readonly object?[] Arguments { get; } = Array.Empty<object?>();
-
-        public LogInterpolatedStringHandler(int literalLength, int formattedCount)
-        {
-            // Buffer size is computed with reserved space for "{x..x}" placeholders
-            int maxNumberOfDigits = GetNumberOfDigits(formattedCount);
-            int bufferSize = literalLength + (formattedCount * (maxNumberOfDigits + 2));
-
-            buffer = new char[bufferSize];
-
-            if (formattedCount > 0)
-            {
-                Arguments = new object[formattedCount];
-            }
-        }
-
-        public void AppendLiteral(string s)
-        {
-            s.AsSpan().CopyTo(buffer.AsSpan().Slice(position));
-            position += s.Length;
-        }
-
-        public void AppendFormatted<T>(T t)
-        {
-            buffer[position++] = '{';
-
-            if (argPosition < 10)
-            {
-                buffer[position++] = (char)('0' + argPosition);
-            }
-            else
-            {
-                string indexString = argPosition.ToString();
-                indexString.AsSpan().CopyTo(buffer.AsSpan().Slice(position));
-                position += indexString.Length;
-            }
-
-            buffer[position++] = '}';
-
-            Arguments[argPosition++] = t;
-        }
-
-        internal string GetFormat()
-        {
-            string result = new string(buffer, 0, position);
-
-            return result;
-        }
-
-        private static int GetNumberOfDigits(int value)
-        {
-            // It's OK to return 0 if the value is 0, because we don't need to reserve
-            // extra space in that case
-            int result = 0;
-
-            while (value > 0)
-            {
-                result++;
-                value /= 10;
-            }
-
-            return result;
-        }
-    }
-}
-
-#endif
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index f1b77f60fe9..e3a4a2b9f7d 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -239,7 +239,7 @@ public virtual string GetResourceMessage(string resourceName)
         }
         #endregion
 
-        #region Message logging method
+        #region Message logging methods
 
         /// <summary>
         /// Returns <see langword="true"/> if the build is configured to log all task inputs.
@@ -258,33 +258,6 @@ public bool LogsMessagesOfImportance(MessageImportance importance)
                 || buildEngine10.EngineServices.LogsMessagesOfImportance(importance);
         }
 
-#if NET6_0_OR_GREATER
-
-        /// <summary>
-        /// Logs a message using the specified interpolated string.
-        /// Thread safe.
-        /// </summary>
-        /// <param name="stringHandler">The message interpolated string.</param>
-        public void LogMessage(LogInterpolatedStringHandler stringHandler)
-        {
-            LogMessage(MessageImportance.Normal, stringHandler);
-        }
-
-        /// <summary>
-        /// Logs a message using the specified interpolated string.
-        /// Thread safe.
-        /// </summary>
-        /// <param name="importance">The importance level of the message.</param>
-        /// <param name="stringHandler">The message interpolated string.</param>
-        public void LogMessage(MessageImportance importance, LogInterpolatedStringHandler stringHandler)
-        {
-            if (LogsMessagesOfImportance(importance))
-            {
-                LogMessage(importance, stringHandler.GetFormat(), stringHandler.Arguments);
-            }
-        }
-#endif
-
         /// <summary>
         /// Logs a message using the specified string.
         /// Thread safe.
@@ -620,19 +593,6 @@ public void LogCommandLine(MessageImportance importance, string commandLine)
 
         #region Error logging methods
 
-#if NET6_0_OR_GREATER
-
-        /// <summary>
-        /// Logs an error message using the specified interpolated string.
-        /// Thread safe.
-        /// </summary>
-        /// <param name="stringHandler">The message interpolated string.</param>
-        public void LogError(LogInterpolatedStringHandler stringHandler)
-        {
-            LogError(stringHandler.GetFormat(), stringHandler.Arguments);
-        }
-#endif
-
         /// <summary>
         /// Logs an error using the specified string.
         /// Thread safe.
@@ -984,19 +944,6 @@ public void LogErrorFromException(Exception exception, bool showStackTrace, bool
 
         #region Warning logging methods
 
-#if NET6_0_OR_GREATER
-
-        /// <summary>
-        /// Logs a warning message using the specified interpolated string.
-        /// Thread safe.
-        /// </summary>
-        /// <param name="stringHandler">The message interpolated string.</param>
-        public void LogWarning(LogInterpolatedStringHandler stringHandler)
-        {
-            LogWarning(stringHandler.GetFormat(), stringHandler.Arguments);
-        }
-#endif
-
         /// <summary>
         /// Logs a warning using the specified string.
         /// Thread safe.
diff --git a/src/Utilities.UnitTests/MockEngine.cs b/src/Utilities.UnitTests/MockEngine.cs
index 5962b8a146d..e5b5986bee8 100644
--- a/src/Utilities.UnitTests/MockEngine.cs
+++ b/src/Utilities.UnitTests/MockEngine.cs
@@ -31,8 +31,6 @@ internal sealed class MockEngine : IBuildEngine3
     {
         private StringBuilder _log = new StringBuilder();
 
-        public List<LazyFormattedBuildEventArgs> BuildEventArgs { get; } = new List<LazyFormattedBuildEventArgs>();
-
         public MessageImportance MinimumMessageImportance { get; set; } = MessageImportance.Low;
 
         internal int Messages { set; get; }
@@ -45,8 +43,6 @@ internal sealed class MockEngine : IBuildEngine3
 
         public void LogErrorEvent(BuildErrorEventArgs eventArgs)
         {
-            BuildEventArgs.Add(eventArgs);
-
             Console.WriteLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             _log.AppendLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             ++Errors;
@@ -54,8 +50,6 @@ public void LogErrorEvent(BuildErrorEventArgs eventArgs)
 
         public void LogWarningEvent(BuildWarningEventArgs eventArgs)
         {
-            BuildEventArgs.Add(eventArgs);
-
             Console.WriteLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             _log.AppendLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             ++Warnings;
@@ -72,8 +66,6 @@ public void LogMessageEvent(BuildMessageEventArgs eventArgs)
             // Only if the message is above the minimum importance should we record the log message
             if (eventArgs.Importance <= MinimumMessageImportance)
             {
-                BuildEventArgs.Add(eventArgs);
-
                 Console.WriteLine(eventArgs.Message);
                 _log.AppendLine(eventArgs.Message);
                 ++Messages;
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index af9d8c29ff4..33c2cab46f3 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -2,11 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.IO;
-using System.Linq;
-using System.Linq.Expressions;
-using System.Reflection;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -314,57 +310,5 @@ public void TestLogFromExceptionWithAggregateException()
             engine.AssertLogContains("The operation was invalid");
             engine.AssertLogContains("An I/O error occurred");
         }
-
-#if NET6_0_OR_GREATER
-
-        public static IEnumerable<object[]> InterpolatedLogTestData()
-        {
-            Action<Task> logMessage = t => t.Log.LogMessage($"echo {0} and {"1"} {2} {3} {4} {5} {6} {7} {8} {9} {10}");
-            Action<Task> logWarning = t => t.Log.LogWarning($"echo {0} and {"1"}");
-            Action<Task> logError = t => t.Log.LogError($"echo {0} and {"1"}");
-
-            yield return new object[] { logMessage, "echo 0 and 1 2 3 4 5 6 7 8 9 10", typeof(BuildMessageEventArgs) };
-            yield return new object[] { logWarning, "echo 0 and 1", typeof(BuildWarningEventArgs) };
-            yield return new object[] { logError, "echo 0 and 1", typeof(BuildErrorEventArgs) };
-        }
-
-        [Theory]
-        [MemberData(nameof(InterpolatedLogTestData))]
-        public void LogWithInterpolatedString(Action<Task> logAction, string expectedResult, Type expectedEventType)
-        {
-            MockEngine mockEngine = new MockEngine();
-            Task t = new MockTask();
-            t.BuildEngine = mockEngine;
-
-            logAction(t);
-
-            mockEngine.BuildEventArgs.Count.ShouldBe(1);
-            mockEngine.BuildEventArgs[0].ShouldBeOfType(expectedEventType);
-            mockEngine.BuildEventArgs[0].Message.ShouldBe(expectedResult);
-
-            MethodBody logActionBody = logAction
-                .GetMethodInfo()
-                .GetMethodBody();
-
-            logActionBody
-                .LocalVariables
-                .Select(lvi => lvi.LocalType)
-                .ShouldContain(typeof(LogInterpolatedStringHandler), "Wrong logging method was bound");
-        }
-
-        [Fact]
-        public void LogMessageWithInterpolatedString_RespectsImportanceLevel()
-        {
-            MockEngine mockEngine = new MockEngine();
-            Task t = new MockTask();
-            t.BuildEngine = mockEngine;
-
-            mockEngine.MinimumMessageImportance = MessageImportance.High;
-            t.Log.LogMessage(MessageImportance.Low, $"echo {0} and {"1"}");
-
-            mockEngine.BuildEventArgs.Count.ShouldBe(0);
-        }
-#endif
-
     }
 }
