diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index ac3004ec265..b29d47adf12 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -34,11 +34,13 @@ internal NodeEndpointOutOfProc(bool enableReuse, bool lowPriority)
         /// </summary>
         protected override Handshake GetHandshake()
         {
+            CommunicationsUtilities.Trace("Creating handshake for endpoint out-of-proc node.");
             HandshakeOptions handshakeOptions = CommunicationsUtilities.GetHandshakeOptions(
                 taskHost: false,
                 architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(),
                 nodeReuse: _enableReuse,
                 lowPriority: LowPriority);
+
             return new Handshake(handshakeOptions);
         }
     }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 235e11bedfe..a6f8011f496 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -534,7 +534,6 @@ internal void DisconnectFromHost(HandshakeOptions hostContext)
         /// </summary>
         internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)
         {
-            //Debugger.Launch();
             ErrorUtilities.VerifyThrowArgumentNull(factory);
             ErrorUtilities.VerifyThrow(!_nodeIdToPacketFactory.ContainsKey((int)hostContext), "We should not already have a factory for this context!  Did we forget to call DisconnectFromHost somewhere?");
 
diff --git a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
index df2f518bc67..a23fea18310 100644
--- a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
+++ b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
@@ -31,6 +31,7 @@ internal NodeEndpointOutOfProcTaskHost()
         /// </summary>
         protected override Handshake GetHandshake()
         {
+            CommunicationsUtilities.Trace("Creating handshake for out-of-proc task host node endpoint");
             return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: true));
         }
     }
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index bfc04fac241..b8b9ef10818 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -648,7 +648,7 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string archi
             }
 
             // if clrVersion is 5 or greater, we will default to .NET runtime
-            if (!string.IsNullOrEmpty(architectureFlagToSet) && clrVersion < 5)
+            if (!string.IsNullOrEmpty(architectureFlagToSet))
             {
                 if (architectureFlagToSet.Equals(XMakeAttributes.MSBuildArchitectureValues.x64, StringComparison.OrdinalIgnoreCase))
                 {
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 99cf24a158b..bac1c374640 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -262,7 +262,7 @@ internal void InternalConstruct(string pipeName = null)
         #endregion
 
         /// <summary>
-        /// Returns the host handshake for this node endpoint
+        /// Returns the host handshake for this node endpoint.
         /// </summary>
         protected abstract Handshake GetHandshake();
 
@@ -395,6 +395,7 @@ private void PacketPumpProc()
                     // verify it. Afterwards, the host sends an "End of Handshake" signal, to which we respond in kind.
                     // Once the handshake is complete, both sides can be assured the other is ready to accept data.
                     Handshake handshake = GetHandshake();
+                    CommunicationsUtilities.Trace($"Child handshake: {handshake}");
                     try
                     {
                         int[] handshakeComponents = handshake.RetrieveHandshakeComponents();
