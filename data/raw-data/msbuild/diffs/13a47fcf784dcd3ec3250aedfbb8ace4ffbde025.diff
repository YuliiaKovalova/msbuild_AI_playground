diff --git a/src/MSBuild/LiveLogger/ITerminal.cs b/src/MSBuild/LiveLogger/ITerminal.cs
index d781972856c..ff7ddabd137 100644
--- a/src/MSBuild/LiveLogger/ITerminal.cs
+++ b/src/MSBuild/LiveLogger/ITerminal.cs
@@ -14,4 +14,21 @@ internal interface ITerminal : IDisposable
     void WriteLine(ReadOnlySpan<char> text);
 
     void WriteLineFitToWidth(ReadOnlySpan<char> input);
+
+    void WriteColor(TerminalColor color, string text);
+
+    void WriteColorLine(TerminalColor color, string text);
+}
+
+internal enum TerminalColor
+{
+    Black = 30,
+    Red = 31,
+    Green = 32,
+    Yellow = 33,
+    Blue = 34,
+    Magenta = 35,
+    Cyan = 36,
+    White = 37,
+    Default = 39
 }
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index b0e4f336ad9..99d90825d27 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -232,9 +232,15 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 // Print diagnostic output under the Project -> Output line.
                 if (project.BuildMessages is not null)
                 {
-                    foreach (string message in project.BuildMessages)
+                    foreach (BuildMessage buildMessage in project.BuildMessages)
                     {
-                        Terminal.WriteLine(message);
+                        TerminalColor color = buildMessage.Severity switch
+                        {
+                            MessageSeverity.Warning => TerminalColor.Yellow,
+                            MessageSeverity.Error => TerminalColor.Red,
+                            _ => TerminalColor.Default,
+                        };
+                        Terminal.WriteColorLine(color, $"  {buildMessage.Message}");
                     }
                 }
 
@@ -362,7 +368,7 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)
         if (buildEventContext is not null && _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
         {
             string message = EventArgsFormatting.FormatEventMessage(e, false);
-            project.AddBuildMessage($"  \x1b[33;1m⚠ {message}\x1b[m");
+            project.AddBuildMessage(MessageSeverity.Warning, $"⚠ {message}");
         }
     }
 
@@ -372,7 +378,7 @@ private void ErrorRaised(object sender, BuildErrorEventArgs e)
         if (buildEventContext is not null && _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
         {
             string message = EventArgsFormatting.FormatEventMessage(e, false);
-            project.AddBuildMessage($"  \x1b[31;1m❌ {message}\x1b[m");
+            project.AddBuildMessage(MessageSeverity.Error, $"❌ {message}");
         }
     }
 
@@ -386,14 +392,14 @@ public void Shutdown()
     }
 }
 
-internal record ProjectContext(int Id)
+internal record struct ProjectContext(int Id)
 {
     public ProjectContext(BuildEventContext context)
         : this(context.ProjectContextId)
     { }
 }
 
-internal record ProjectInstance(int Id)
+internal record struct ProjectInstance(int Id)
 {
     public ProjectInstance(BuildEventContext context)
         : this(context.ProjectInstanceId)
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index c95f45974a0..9fbcbfb7f09 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -22,11 +22,16 @@ internal sealed class Project
     /// <summary>
     /// A lazily initialized list of build messages/warnings/errors raised during the build.
     /// </summary>
-    public List<string>? BuildMessages { get; private set; }
+    public List<BuildMessage>? BuildMessages { get; private set; }
 
-    public void AddBuildMessage(string message)
+    public void AddBuildMessage(MessageSeverity severity, string message)
     {
-        BuildMessages ??= new List<string>();
-        BuildMessages.Add(message);
+        BuildMessages ??= new List<BuildMessage>();
+        BuildMessages.Add(new BuildMessage(severity, message));
     }
 }
+
+internal enum MessageSeverity { Warning, Error }
+
+internal record struct BuildMessage(MessageSeverity Severity, string Message)
+{ }
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
index a17c7712a90..d011cd64aae 100644
--- a/src/MSBuild/LiveLogger/Terminal.cs
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -25,6 +25,16 @@ public void WriteLineFitToWidth(ReadOnlySpan<char> input)
         WriteLine(input.Slice(0, Math.Min(input.Length, Console.BufferWidth - 1)));
     }
 
+    public void WriteColor(TerminalColor color, string text)
+    {
+        Write($"\x1b[{(int)color};1m{text}\x1b[m");
+    }
+
+    public void WriteColorLine(TerminalColor color, string text)
+    {
+        WriteLine($"\x1b[{(int)color};1m{text}\x1b[m");
+    }
+
     public void Dispose()
     {
         Console.OutputEncoding = _originalOutputEncoding;
