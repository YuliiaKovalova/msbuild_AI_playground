diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 410903977ee..97342e66b3f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -202,7 +202,7 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
 
             if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents && itemsToAdd != null && itemsToAdd.Count > 0)
             {
-                var itemGroupText = ItemGroupLoggingHelper.GetParameterText(ResourceUtilities.GetResourceString("ItemGroupIncludeLogMessagePrefix"), child.ItemType, itemsToAdd.ToArray());
+                var itemGroupText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.ItemGroupIncludeLogMessagePrefix, child.ItemType, itemsToAdd.ToArray());
                 LoggingContext.LogCommentFromText(MessageImportance.Low, itemGroupText);
             }
 
@@ -231,7 +231,7 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
             {
                 if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents && itemsToRemove.Count > 0)
                 {
-                    var itemGroupText = ItemGroupLoggingHelper.GetParameterText(ResourceUtilities.GetResourceString("ItemGroupRemoveLogMessage"), child.ItemType, itemsToRemove.ToArray());
+                    var itemGroupText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.ItemGroupRemoveLogMessage, child.ItemType, itemsToRemove.ToArray());
                     LoggingContext.LogCommentFromText(MessageImportance.Low, itemGroupText);
                 }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index 01af3dbef86..90158590181 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -16,6 +16,11 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal static class ItemGroupLoggingHelper
     {
+        internal static string ItemGroupIncludeLogMessagePrefix = ResourceUtilities.GetResourceString("ItemGroupIncludeLogMessagePrefix");
+        internal static string ItemGroupRemoveLogMessage = ResourceUtilities.GetResourceString("ItemGroupRemoveLogMessage");
+        internal static string OutputItemParameterMessagePrefix = ResourceUtilities.GetResourceString("OutputItemParameterMessagePrefix");
+        internal static string TaskParameterPrefix = ResourceUtilities.GetResourceString("TaskParameterPrefix");
+
         /// <summary>
         /// Gets a text serialized value of a parameter for logging.
         /// </summary>
@@ -56,7 +61,8 @@ internal static string GetParameterText(string prefix, string parameterName, ILi
                     sb.Append("\n    ");
                 }
 
-                sb.Append(parameterName + "=");
+                sb.Append(parameterName);
+                sb.Append('=');
 
                 if (!specialTreatmentForSingle)
                 {
@@ -75,7 +81,7 @@ internal static string GetParameterText(string prefix, string parameterName, ILi
                         sb.Append("        ");
                     }
 
-                    sb.Append(GetStringFromParameterValue(parameterValue[i]));
+                    AppendStringFromParameterValue(sb, parameterValue[i]);
 
                     if (!specialTreatmentForSingle && i < parameterValue.Count - 1)
                     {
@@ -95,53 +101,76 @@ internal static string GetParameterText(string prefix, string parameterName, ILi
         /// </summary>
         internal static string GetStringFromParameterValue(object parameterValue)
         {
-            var type = parameterValue.GetType();
-
-            ErrorUtilities.VerifyThrow(!type.IsArray, "scalars only");
-
-            if (type == typeof(string))
+            using (var sb = new ReuseableStringBuilder())
             {
-                return (string)parameterValue;
+                AppendStringFromParameterValue(sb, parameterValue);
+                return sb.ToString();
             }
-            else if (type.GetTypeInfo().IsValueType)
+        }
+
+        // Avoid allocating a temporary list to hold metadata for sorting every time.
+        // Each thread gets its own copy.
+        [ThreadStatic]
+        private static List<KeyValuePair<string, string>> keyValuePairList;
+
+        private static void AppendStringFromParameterValue(ReuseableStringBuilder sb, object parameterValue)
+        {
+            if (parameterValue is string text)
             {
-                return (string)Convert.ChangeType(parameterValue, typeof(string), CultureInfo.CurrentCulture);
+                sb.Append(text);
             }
-            else if (typeof(ITaskItem).GetTypeInfo().IsAssignableFrom(type.GetTypeInfo()))
+            else if (parameterValue is ITaskItem item)
             {
-                var item = ((ITaskItem)parameterValue);
-                string result = item.ItemSpec;
+                sb.Append(item.ItemSpec);
 
                 var customMetadata = item.CloneCustomMetadata();
+                int count = customMetadata.Count;
 
-                if (customMetadata.Count > 0)
+                if (count > 0)
                 {
-                    result += "\n";
-                    var names = new List<string>();
+                    sb.Append('\n');
 
-                    foreach (string name in customMetadata.Keys)
+                    // need to initialize the thread static on each new thread
+                    if (keyValuePairList == null)
                     {
-                        names.Add(name);
+                        keyValuePairList = new List<KeyValuePair<string, string>>(count);
                     }
 
-                    names.Sort();
+                    foreach (KeyValuePair<string, string> kvp in customMetadata)
+                    {
+                        keyValuePairList.Add(kvp);
+                    }
 
-                    for (int i = 0; i < names.Count; i++)
+                    if (count > 1)
                     {
-                        result += "                " + names[i] + "=" + customMetadata[names[i]];
+                        keyValuePairList.Sort((l, r) => StringComparer.OrdinalIgnoreCase.Compare(l.Key, r.Key));
+                    }
+
+                    for (int i = 0; i < count; i++)
+                    {
+                        var kvp = keyValuePairList[i];
+                        sb.Append("                ");
+                        sb.Append(kvp.Key);
+                        sb.Append('=');
+                        sb.Append(kvp.Value);
 
-                        if (i < names.Count - 1)
+                        if (i < count - 1)
                         {
-                            result += "\n";
+                            sb.Append('\n');
                         }
                     }
-                }
 
-                return result;
+                    keyValuePairList.Clear();
+                }
+            }
+            else if (parameterValue.GetType().GetTypeInfo().IsValueType)
+            {
+                sb.Append((string)Convert.ChangeType(parameterValue, typeof(string), CultureInfo.CurrentCulture));
+            }
+            else
+            {
+                ErrorUtilities.ThrowInternalErrorUnreachable();
             }
-
-            ErrorUtilities.ThrowInternalErrorUnreachable();
-            return null;
         }
     }
 }
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index e8c02f80020..688065d29fa 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1285,8 +1285,7 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete
         {
             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents && parameterValue.Count > 0)
             {
-                string parameterText = ResourceUtilities.GetResourceString("TaskParameterPrefix");
-                parameterText = ItemGroupLoggingHelper.GetParameterText(parameterText, parameter.Name, parameterValue);
+                string parameterText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.TaskParameterPrefix, parameter.Name, parameterValue);
                 _taskLoggingContext.LogCommentFromText(MessageImportance.Low, parameterText);
             }
 
@@ -1312,7 +1311,7 @@ object parameterValue
                 {
                     _taskLoggingContext.LogCommentFromText(
                         MessageImportance.Low,
-                        ResourceUtilities.GetResourceString("TaskParameterPrefix") + parameter.Name + "=" + ItemGroupLoggingHelper.GetStringFromParameterValue(parameterValue));
+                        ItemGroupLoggingHelper.TaskParameterPrefix + parameter.Name + "=" + ItemGroupLoggingHelper.GetStringFromParameterValue(parameterValue));
                 }
             }
 
@@ -1426,7 +1425,7 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN
                     if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents && outputs.Length > 0)
                     {
                         string parameterText = ItemGroupLoggingHelper.GetParameterText(
-                            ResourceUtilities.GetResourceString("OutputItemParameterMessagePrefix"),
+                            ItemGroupLoggingHelper.OutputItemParameterMessagePrefix,
                             outputTargetName,
                             outputs);
 
@@ -1501,7 +1500,7 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
 
                     if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents && outputs.Length > 0)
                     {
-                        string parameterText = ItemGroupLoggingHelper.GetParameterText(ResourceUtilities.GetResourceString("OutputItemParameterMessagePrefix"), outputTargetName, outputs);
+                        string parameterText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.OutputItemParameterMessagePrefix, outputTargetName, outputs);
                         _taskLoggingContext.LogCommentFromText(MessageImportance.Low, parameterText);
                     }
                 }
