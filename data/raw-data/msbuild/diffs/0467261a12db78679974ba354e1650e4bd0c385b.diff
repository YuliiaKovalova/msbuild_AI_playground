diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 43683f7e658..952133d7ee2 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -840,7 +840,7 @@ public bool Question
         }
 
         /// <summary>
-        /// Gets or sets a factory for build analysis infrastructure logger
+        /// Gets or sets an indication of build analysis enablement.
         /// </summary>
         public bool IsBuildCopEnabled
         {
diff --git a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
index 16a51cfb086..930225a0c9f 100644
--- a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
+++ b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using System.Diagnostics;
 using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.BuildCop.Infrastructure;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index d1e4318702f..e3bd9f69f58 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1147,11 +1147,6 @@ private async Task<BuildResult> BuildProject()
                         RequestEntry.Request.BuildRequestDataFlags,
                         RequestEntry.Request.SubmissionId,
                         _nodeLoggingContext.BuildEventContext.NodeId);
-
-                    // todo: in a using scope (autocleanup)
-                    buildCopManager.EndProjectEvaluation(
-                        BuildCopDataSource.BuildExecution,
-                        _requestEntry.Request.ParentBuildEventContext);
                 }
             }
             catch
@@ -1165,6 +1160,12 @@ private async Task<BuildResult> BuildProject()
 
                 throw;
             }
+            finally
+            {
+                buildCopManager.EndProjectEvaluation(
+                    BuildCopDataSource.BuildExecution,
+                    _requestEntry.Request.ParentBuildEventContext);
+            }
 
             _projectLoggingContext = _nodeLoggingContext.LogProjectStarted(_requestEntry);
             buildCopManager.StartProjectRequest(
@@ -1222,7 +1223,7 @@ private async Task<BuildResult> BuildProject()
                 MSBuildEventSource.Log.BuildProjectStop(_requestEntry.RequestConfiguration.ProjectFullPath, string.Join(", ", allTargets));
             }
 
-            buildCopManager.EndProjectEvaluation(
+            buildCopManager.EndProjectRequest(
                 BuildCopDataSource.BuildExecution,
                 _requestEntry.Request.ParentBuildEventContext);
 
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index 75abeacda63..d821a43951f 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -476,7 +476,7 @@ internal void LoadProjectIntoConfiguration(
                     projectLoadSettings |= ProjectLoadSettings.FailOnUnresolvedSdk;
                 }
 
-                // Here - is we'll have in-execution analysis and it'll need DOM from Project,
+                // Here - if we'll have in-execution analysis and it'll need DOM from Project,
                 //  this is the place for Project creation.
 
                 return new ProjectInstance(
diff --git a/src/Build/BuildCop/API/BuildAnalyzer.cs b/src/Build/BuildCop/API/BuildAnalyzer.cs
index 1eac8835fa3..261054e14a4 100644
--- a/src/Build/BuildCop/API/BuildAnalyzer.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzer.cs
@@ -8,12 +8,37 @@
 
 namespace Microsoft.Build.Experimental.BuildCop;
 
+/// <summary>
+/// Base class for build analyzers.
+/// Same base will be used for custom and built-in analyzers.
+/// <see cref="BuildAnalyzer"/> is a unit of build analysis execution. But it can contain multiple rules - each representing a distinct violation.
+/// </summary>
 public abstract class BuildAnalyzer : IDisposable
 {
+    /// <summary>
+    /// Friendly name of the analyzer.
+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.
+    /// </summary>
     public abstract string FriendlyName { get; }
+
+    /// <summary>
+    /// Single or multiple rules supported by the analyzer.
+    /// </summary>
     public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }
+
+    /// <summary>
+    /// Optional initialization of the analyzer.
+    /// </summary>
+    /// <param name="configurationContext">
+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig
+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.
+    /// </param>
     public abstract void Initialize(ConfigurationContext configurationContext);
 
+    /// <summary>
+    /// 
+    /// </summary>
+    /// <param name="context"></param>
     public abstract void RegisterActions(IBuildCopContext context);
 
     public virtual void Dispose()
diff --git a/src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs b/src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs
index 345c0bfbcd6..955b91f52ad 100644
--- a/src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs
@@ -3,6 +3,9 @@
 
 namespace Microsoft.Build.Experimental.BuildCop;
 
+/// <summary>
+/// The severity of reported result (or preconfigured or user configured severity for a rule).
+/// </summary>
 public enum BuildAnalyzerResultSeverity
 {
     Info,
diff --git a/src/Build/BuildCop/API/BuildAnalyzerRule.cs b/src/Build/BuildCop/API/BuildAnalyzerRule.cs
index 991bee27edb..25d34e08a6b 100644
--- a/src/Build/BuildCop/API/BuildAnalyzerRule.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzerRule.cs
@@ -3,6 +3,11 @@
 
 namespace Microsoft.Build.Experimental.BuildCop;
 
+/// <summary>
+/// Represents a rule that is a unit of build analysis.
+/// <see cref="BuildAnalyzer"/> is a unit of executing the analysis, but it can be discovering multiple distinct violation types.
+///  for this reason a single <see cref="BuildAnalyzer"/> can expose <see cref="BuildAnalyzerRule"/>s.
+/// </summary>
 public class BuildAnalyzerRule
 {
     public BuildAnalyzerRule(string id, string title, string description, string category, string messageFormat,
@@ -16,12 +21,41 @@ public BuildAnalyzerRule(string id, string title, string description, string cat
         DefaultConfiguration = defaultConfiguration;
     }
 
+    /// <summary>
+    /// The identification of the rule.
+    ///
+    /// Some background on ids:
+    ///  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt
+    ///  * https://github.com/dotnet/roslyn/issues/40351
+    ///
+    /// Quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'
+    ///  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration
+    /// </summary>
     public string Id { get; }
+
+    /// <summary>
+    /// The descriptive short summary of the rule.
+    /// </summary>
     public string Title { get; }
+
+    /// <summary>
+    /// More detailed description of the violation the rule can be reporting (with possible suggestions).
+    /// </summary>
     public string Description { get; }
 
-    // or maybe enum? eval, syntax, etc
+    /// <summary>
+    /// TODO: We might turn this into enum, or just remove this.
+    /// </summary>
     public string Category { get; }
+
+    /// <summary>
+    /// Message format that will be used by the actual findings (<see cref="BuildCopResult"/>) - those will just supply the actual arguments.
+    /// </summary>
     public string MessageFormat { get; }
+
+    /// <summary>
+    /// The default configuration - overridable by the user via .editorconfig.
+    /// If no user specified configuration is provided, this default will be used.
+    /// </summary>
     public BuildAnalyzerConfiguration DefaultConfiguration { get; }
 }
diff --git a/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs
index fcb39a80dfc..59eb865169b 100644
--- a/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs
@@ -12,12 +12,7 @@
 
 namespace Microsoft.Build.BuildCop.Analyzers;
 
-// Some background on ids:
-//  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt
-//  * https://github.com/dotnet/roslyn/issues/40351
-//
-// quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'
-//  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration
+
 
 internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer
 {
