diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index ddcf37f6b30..2bf912f6b1d 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -8,6 +8,7 @@
 using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Logging;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -27,7 +28,7 @@ namespace Microsoft.Build.Evaluation
     /// we do use it for build-time items.
     /// </comment>
     [DebuggerDisplay("{ItemType}={EvaluatedInclude} [{UnevaluatedInclude}] #DirectMetadata={DirectMetadataCount}")]
-    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent
+    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent, IItemData
     {
         /// <summary>
         /// Project that this item lives in.
@@ -143,6 +144,9 @@ internal ProjectItem(
 
         internal virtual ProjectItemLink Link => null;
 
+        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => this.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
+
         /// <summary>
         /// Backing XML item.
         /// Can never be null.
diff --git a/src/Build/Evaluation/IItem.cs b/src/Build/Evaluation/IItem.cs
index 49d897768ee..4483fb437e7 100644
--- a/src/Build/Evaluation/IItem.cs
+++ b/src/Build/Evaluation/IItem.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.Evaluation
     /// <summary>
     /// This interface represents an item without exposing its type.
     /// </summary>
-    public interface IItem : IKeyed
+    internal interface IItem : IKeyed
     {
         /// <summary>
         /// Gets the evaluated include value for this item, unescaped.
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index ec5c67f344e..44f60b2a51b 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -16,6 +16,7 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
@@ -37,7 +38,8 @@ public class ProjectItemInstance :
         IMetadataTable,
         ITranslatable,
         IMetadataContainer,
-        IItemTypeDefinition
+        IItemTypeDefinition,
+        IItemData
     {
         /// <summary>
         /// The project instance to which this item belongs.
@@ -301,6 +303,9 @@ string ITaskItem.ItemSpec
             }
         }
 
+        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => ((IMetadataContainer)this).EnumerateMetadata();
+
         /// <summary>
         /// ITaskItem implementation
         /// </summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
index babeda01644..4643636b031 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -4,8 +4,11 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.IO;
+using System.Linq;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
+using static Microsoft.Build.Internal.Utilities;
 
 namespace Microsoft.Build.Logging;
 
@@ -31,25 +34,24 @@ public static class BuildEventArgsExtensions
 
     /// <summary>
     /// Lazy enumerates and partially strong types items from Items property.
-    /// The actual item value is of nongeneric <see cref="object"/> type.
-    /// The actual type need to be inferred during runtime based on the itemType.
+    /// The actual item value might be wrapped to be able to provide defined interface
     /// </summary>
-    public static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(
+    /// <returns></returns>
+    public static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(
         this ProjectEvaluationFinishedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
     /// <summary>
-    /// Lazy enumerates and partially strong types items from Items property.
-    /// The actual item value is of nongeneric <see cref="object"/> type.
-    /// The actual type need to be inferred during runtime based on the itemType.
+    /// Lazy enumerates and strong types items from Items property.
+    /// The actual item value might be wrapped to be able to provide defined interface
     /// </summary>
-    public static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(
+    public static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(
         this ProjectStartedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
     private static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable? properties)
         => Internal.Utilities.EnumerateProperties(properties);
 
-    private static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(IEnumerable? items)
+    private static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(IEnumerable? items)
         => Internal.Utilities.EnumerateItems(items);
 }
diff --git a/src/Build/Logging/BinaryLogger/IItemData.cs b/src/Build/Logging/BinaryLogger/IItemData.cs
new file mode 100644
index 00000000000..a071e6fdcb3
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/IItemData.cs
@@ -0,0 +1,24 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging;
+
+
+/// <summary>
+/// Represents an item data (per single item type) that van be returned via <see cref="ProjectEvaluationFinishedEventArgs"/> or <see cref="ProjectStartedEventArgs"/>.
+/// </summary>
+public interface IItemData
+{
+    /// <summary>
+    /// The item evaluated include value
+    /// </summary>
+    string EvaluatedInclude { get; }
+
+    /// <summary>
+    /// The item metadata
+    /// </summary>
+    IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 5697c631b25..9b2ef31db17 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -171,6 +171,7 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Logging\BinaryLogger\BuildEventArgsExtensions.cs" />
+    <Compile Include="Logging\BinaryLogger\IItemData.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index b129b1cc6a2..467b7cecd3c 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Toolset = Microsoft.Build.Evaluation.Toolset;
 using XmlElementWithLocation = Microsoft.Build.Construction.XmlElementWithLocation;
@@ -687,8 +689,21 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             }
         }
 
-        public static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(IEnumerable items)
+        /// <summary>
+        /// Enumerates the given nongeneric enumeration and tries to match or wrap appropriate item types
+        /// </summary>
+        public static IEnumerable<(string itemType, IItemData itemValue)> EnumerateItems(IEnumerable items)
         {
+            // The actual type of the item data can be of types:
+            //  * <see cref="ProjectItemInstance"/>
+            //  * <see cref="ProjectItem"/>
+            //  * <see cref="IItem"/>
+            //  * <see cref="ITaskItem"/>
+            //  * possibly others
+
+            // That's why we here wrap with ItemAccessor if needed
+
+
             if (items == null)
             {
                 return [];
@@ -698,14 +713,14 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             {
                 return projectItemInstanceDictionary
                     .EnumerateItemsPerType()
-                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItem)itemValue)))
+                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItemData)itemValue)))
                     .SelectMany(tpl => tpl);
             }
             else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
             {
                 return projectItemDictionary
                     .EnumerateItemsPerType()
-                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItem)itemValue)))
+                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItemData)itemValue)))
                     .SelectMany(tpl => tpl);
             }
             else
@@ -713,12 +728,12 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                 return CastOneByOne(items);
             }
 
-            IEnumerable<(string itemType, IItem itemValue)> CastOneByOne(IEnumerable itms)
+            IEnumerable<(string itemType, IItemData itemValue)> CastOneByOne(IEnumerable itms)
             {
                 foreach (var item in itms)
                 {
                     string itemType = default;
-                    IItem itemValue = null;
+                    object itemValue = null;
 
                     if (item is IItem iitem)
                     {
@@ -728,7 +743,7 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                     else if (item is DictionaryEntry dictionaryEntry)
                     {
                         itemType = dictionaryEntry.Key as string;
-                        itemValue = dictionaryEntry.Value as IItem;
+                        itemValue = dictionaryEntry.Value;
                     }
                     else
                     {
@@ -742,14 +757,34 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                         }
                     }
 
+                    IItemData data = null;
+
+                    if (itemValue != null)
+                    {
+                        if (itemValue is IItemData dt)
+                        {
+                            data = dt;
+                        }
+                        else if (itemValue is ITaskItem taskItem)
+                        {
+                            data = new ItemAccessor(taskItem);
+                        }
+                    }
+
                     if (!String.IsNullOrEmpty(itemType))
                     {
-                        yield return (itemType, itemValue);
+                        yield return (itemType, data);
                     }
                 }
             }
         }
 
+        private class ItemAccessor(ITaskItem item) : IItemData
+        {
+            public string EvaluatedInclude => item.ItemSpec;
+            public IEnumerable<KeyValuePair<string, string>> EnumerateMetadata() => item.EnumerateMetadata();
+        }
+
         public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> callback)
         {
             foreach (var tuple in EnumerateItems(items))
diff --git a/src/Shared/IKeyed.cs b/src/Shared/IKeyed.cs
index 1dc146192c4..2c27ca9dc5d 100644
--- a/src/Shared/IKeyed.cs
+++ b/src/Shared/IKeyed.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Collections
     /// <remarks>
     /// This can be internal as it is a constraint only on internal collections.
     /// </remarks>
-    public interface IKeyed
+    internal interface IKeyed
     {
         /// <summary>
         /// Returns some value useful for a key in a dictionary
