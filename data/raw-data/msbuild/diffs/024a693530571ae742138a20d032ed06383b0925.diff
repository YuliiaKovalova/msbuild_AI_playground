diff --git a/src/Tasks/CreateManifestResourceName.cs b/src/Tasks/CreateManifestResourceName.cs
index 43df6be22d7..13533f04e60 100644
--- a/src/Tasks/CreateManifestResourceName.cs
+++ b/src/Tasks/CreateManifestResourceName.cs
@@ -303,38 +303,37 @@ private static void MakeValidEverettSubFolderIdentifier(StringBuilder builder, s
         {
             ErrorUtilities.VerifyThrowArgumentNull(subName, nameof(subName));
 
-            if (!string.IsNullOrEmpty(subName))
+            if (string.IsNullOrEmpty(subName)) { return; }
+
+            // the first character has stronger restrictions than the rest
+            if (!IsValidEverettIdFirstChar(subName[0]))
             {
-                // the first character has stronger restrictions than the rest
-                if (!IsValidEverettIdFirstChar(subName[0]))
+                // if the first character is not even a valid subsequent character, replace it with an underscore
+                if (!IsValidEverettIdChar(subName[0]))
                 {
-                    // if the first character is not even a valid subsequent character, replace it with an underscore
-                    if (!IsValidEverettIdChar(subName[0]))
-                    {
-                        builder.Append('_');
-                    }
-                    // if it is a valid subsequent character, prepend an underscore to it
-                    else
-                    {
-                        builder.Append('_').Append(subName[0]);
-                    }
+                    builder.Append('_');
                 }
+                // if it is a valid subsequent character, prepend an underscore to it
                 else
                 {
-                    builder.Append(subName[0]);
+                    builder.Append('_').Append(subName[0]);
                 }
+            }
+            else
+            {
+                builder.Append(subName[0]);
+            }
 
-                // process the rest of the subname
-                for (int i = 1; i < subName.Length; i++)
+            // process the rest of the subname
+            for (int i = 1; i < subName.Length; i++)
+            {
+                if (!IsValidEverettIdChar(subName[i]))
                 {
-                    if (!IsValidEverettIdChar(subName[i]))
-                    {
-                        builder.Append('_');
-                    }
-                    else
-                    {
-                        builder.Append(subName[i]);
-                    }
+                    builder.Append('_');
+                }
+                else
+                {
+                    builder.Append(subName[i]);
                 }
             }
         }
@@ -346,29 +345,28 @@ internal static void MakeValidEverettFolderIdentifier(StringBuilder builder, str
         {
             ErrorUtilities.VerifyThrowArgumentNull(name, nameof(name));
 
-            if (!string.IsNullOrEmpty(name))
-            {
-                // give string length to avoid reallocations; +1 since the resulting string may be one char longer than the
-                // original - if the name is a single underscore we add another underscore to it
-                int length = builder.Length;
+            if (string.IsNullOrEmpty(name)) { return; }
 
-                // split folder name into subnames separated by '.', if any
-                string[] subNames = name.Split(MSBuildConstants.DotChar);
+            // give string length to avoid reallocations; +1 since the resulting string may be one char longer than the
+            // original - if the name is a single underscore we add another underscore to it
+            int length = builder.Length;
 
-                // convert each subname separately
-                MakeValidEverettSubFolderIdentifier(builder, subNames[0]);
+            // split folder name into subnames separated by '.', if any
+            string[] subNames = name.Split(MSBuildConstants.DotChar);
 
-                for (int i = 1; i < subNames.Length; i++)
-                {
-                    builder.Append('.');
-                    MakeValidEverettSubFolderIdentifier(builder, subNames[i]);
-                }
+            // convert each subname separately
+            MakeValidEverettSubFolderIdentifier(builder, subNames[0]);
 
-                // folder name cannot be a single underscore - add another underscore to it
-                if ((builder.Length - length) == 1 && builder.ToString(length, builder.Length - length).StartsWith("_"))
-                {
-                    builder.Append('_');
-                }
+            for (int i = 1; i < subNames.Length; i++)
+            {
+                builder.Append('.');
+                MakeValidEverettSubFolderIdentifier(builder, subNames[i]);
+            }
+
+            // folder name cannot be a single underscore - add another underscore to it
+            if ((builder.Length - length) == 1 && builder.ToString(length, builder.Length - length).StartsWith("_"))
+            {
+                builder.Append('_');
             }
         }
 
@@ -379,28 +377,23 @@ internal static void MakeValidEverettFolderIdentifier(StringBuilder builder, str
         public static string MakeValidEverettIdentifier(string name)
         {
             ErrorUtilities.VerifyThrowArgumentNull(name, nameof(name));
-            if (!string.IsNullOrEmpty(name))
-            {
-                var everettId = new StringBuilder(name.Length);
+            if (string.IsNullOrEmpty(name)) { return name; }
 
-                // split the name into folder names
-                string[] subNames = name.Split(MSBuildConstants.ForwardSlashBackslash);
+            var everettId = new StringBuilder(name.Length);
 
-                // convert every folder name
-                MakeValidEverettFolderIdentifier(everettId, subNames[0]);
+            // split the name into folder names
+            string[] subNames = name.Split(MSBuildConstants.ForwardSlashBackslash);
 
-                for (int i = 1; i < subNames.Length; i++)
-                {
-                    everettId.Append('.');
-                    MakeValidEverettFolderIdentifier(everettId, subNames[i]);
-                }
+            // convert every folder name
+            MakeValidEverettFolderIdentifier(everettId, subNames[0]);
 
-                return everettId.ToString();
-            }
-            else
+            for (int i = 1; i < subNames.Length; i++)
             {
-                return name;
+                everettId.Append('.');
+                MakeValidEverettFolderIdentifier(everettId, subNames[i]);
             }
+
+            return everettId.ToString();
         }
 
         #endregion
