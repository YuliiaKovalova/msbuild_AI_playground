diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 9065ea7c22f..a9eabeea1b3 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1863,7 +1863,7 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
 
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCaches(CacheInputPaths ?? new string[0], Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
+                _cache = SystemState.DeserializePrecomputedCaches(CacheInputPaths ?? Array.Empty<string>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
             }
             else
             {
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index 8a5c363976b..5e15108b6c0 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -452,7 +452,7 @@
     <comment>{StrBegin="MSB3101: "}</comment>
   </data>
   <data name="General.StateFileAlreadyPresent">
-    <value>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</value>
+    <value>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</value>
     <comment>{StrBegin="MSB3667: "}</comment>
   </data>
   <data name="General.DuplicateItemsNotSupported">
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index a1798d0b2c0..d7bea347846 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index e1ab948f4a1..f588bd1fb08 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.en.xlf b/src/Tasks/Resources/xlf/Strings.en.xlf
index 76bf8ba1679..f31747656e8 100644
--- a/src/Tasks/Resources/xlf/Strings.en.xlf
+++ b/src/Tasks/Resources/xlf/Strings.en.xlf
@@ -555,8 +555,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index 2dcef957d51..d0355958c68 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index ae2bcb64137..8b444bec28d 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index 6dd8dc13afb..7e27282d990 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index 84d0fd3f898..35d09e9ead6 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index 8226fd59601..62ddad539c5 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 7eb22e26920..f19378eef8b 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index 5b593c3af62..c79b95ef75a 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index 30b2198656b..0c7b99aff32 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 14c98e5c23c..ca978d5d887 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index de2b681c56e..e78f15e2bec 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index e5178f7427d..775c8fa7230 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -510,8 +510,8 @@
         <note />
       </trans-unit>
       <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</source>
-        <target state="new">MSB3101: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "_CacheOutputPath" field of RAR.</target>
+        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
+        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running RAR normally, do not set the "CacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
       <trans-unit id="General.UndefineProperties">
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index d775b5ced7e..408442c2412 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -118,7 +118,7 @@ private sealed class FileState : ISerializable
             /// <summary>
             /// The last modified time for this file.
             /// </summary>
-            internal DateTime lastModified;
+            private DateTime lastModified;
 
             /// <summary>
             /// The fusion name of this file.
@@ -203,7 +203,7 @@ public void GetObjectData(SerializationInfo info, StreamingContext context)
             /// Gets the last modified date.
             /// </summary>
             /// <value></value>
-            public DateTime LastModified
+            internal DateTime LastModified
             {
                 get { return lastModified; }
                 set { lastModified = value; }
@@ -213,7 +213,7 @@ public DateTime LastModified
             /// Get or set the assemblyName.
             /// </summary>
             /// <value></value>
-            public AssemblyNameExtension Assembly
+            internal AssemblyNameExtension Assembly
             {
                 get { return assemblyName; }
                 set { assemblyName = value; }
@@ -223,7 +223,7 @@ public AssemblyNameExtension Assembly
             /// Get or set the runtimeVersion
             /// </summary>
             /// <value></value>
-            public string RuntimeVersion
+            internal string RuntimeVersion
             {
                 get { return runtimeVersion; }
                 set { runtimeVersion = value; }
@@ -233,7 +233,7 @@ public string RuntimeVersion
             /// Get or set the framework name the file was built against
             /// </summary>
             [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Could be used in other assemblies")]
-            public FrameworkName FrameworkNameAttribute
+            internal FrameworkName FrameworkNameAttribute
             {
                 get { return frameworkName; }
                 set { frameworkName = value; }
@@ -242,13 +242,13 @@ public FrameworkName FrameworkNameAttribute
             /// <summary>
             /// Get or set the ID of this assembly. Used to verify it is the same version.
             /// </summary>
-            public Guid ModuleVersionID { get; set; }
+            internal Guid ModuleVersionID { get; set; }
         }
 
         /// <summary>
         /// Construct.
         /// </summary>
-        public SystemState()
+        internal SystemState()
         {
         }
 
@@ -572,12 +572,17 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
             foreach (string stateFile in stateFiles)
             {
                 // Verify that it's a real stateFile; log message but do not error if not
-                SystemState sfBase = (SystemState)DeserializeCache(stateFile, log, requiredReturnType, false);
-                foreach (string relativePath in sfBase.instanceLocalFileStateCache.Keys)
+                SystemState sysState = (SystemState)DeserializeCache(stateFile, log, requiredReturnType, false);
+                if (sysState == null)
                 {
+                    continue;
+                }
+                foreach (DictionaryEntry kvp in sysState.instanceLocalFileStateCache)
+                {
+                    string relativePath = (string)kvp.Key;
                     if (!assembliesFound.Contains(relativePath))
                     {
-                        FileState fileState = (FileState)sfBase.instanceLocalFileStateCache[relativePath];
+                        FileState fileState = (FileState)kvp.Value;
                         // Verify that the assembly is correct
                         Guid mvid;
                         string fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(stateFile), relativePath));
@@ -608,18 +613,19 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
         /// </summary>
         internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         {
-            Hashtable newInstanceLocalFileStateCache = new Hashtable();
-            foreach (string path in instanceLocalFileStateCache.Keys)
+            Hashtable newInstanceLocalFileStateCache = new Hashtable(instanceLocalFileStateCache.Count);
+            foreach (DictionaryEntry kvp in instanceLocalFileStateCache)
             {
                 // Add MVID to allow us to verify that we are using the same assembly later
-                FileState fileState = (FileState)instanceLocalFileStateCache[path];
-                using (var reader = new PEReader(File.OpenRead(path)))
+                string absolutePath = (string)kvp.Key;
+                FileState fileState = (FileState)kvp.Value;
+                using (var reader = new PEReader(File.OpenRead(absolutePath)))
                 {
                     var metadataReader = reader.GetMetadataReader();
                     fileState.ModuleVersionID = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
                 }
 
-                string relativePath = FileUtilities.MakeRelative(Path.GetDirectoryName(stateFile), path);
+                string relativePath = FileUtilities.MakeRelative(Path.GetDirectoryName(stateFile), absolutePath);
                 newInstanceLocalFileStateCache[relativePath] = fileState;
             }
             instanceLocalFileStateCache = newInstanceLocalFileStateCache;
