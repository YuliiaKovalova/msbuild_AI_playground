diff --git a/documentation/specs/proposed/decoupling-vs-sdk.md b/documentation/specs/proposed/decoupling-vs-sdk.md
index 201235fc4be..58b5fe7c321 100644
--- a/documentation/specs/proposed/decoupling-vs-sdk.md
+++ b/documentation/specs/proposed/decoupling-vs-sdk.md
@@ -1,34 +1,37 @@
 # Decoupling VS builds of .NET SDK projects
-The experience of building a .NET SDK project can differ significantly depending if the project was built using Visla Studio / MSBuild or `dotnet build`. The build can produce different diagnostics, use different language rules, etc... and that is because building a .NET SDK project from Visual Studio mixes components from MSBuild and the .NET SDK. This means core tooling, like the compiler, can be substantially different between the two types of build. This leads to customer confusion and hard to diagnose problems, as well as increased code workload. To solve this want to ensure that when building a .NET SDK project we use the components from the .NET SDK to do so.
+The experience of building a .NET SDK project can differ significantly depending if the project was built using Visual Studio / MSBuild or `dotnet build`. The build can produce different diagnostics, use different language rules, etc. This is because building a .NET SDK project from Visual Studio mixes components from Visual Studio and the .NET SDK. This means core tooling, like the compiler, can be substantially different between the two types of build. This leads to customer confusion and hard-to-diagnose problems. To solve this want to ensure that when building a .NET SDK project we use more components from the .NET SDK to do so.
 
 ## Goals and Motivation
 
 We are aiming for:
- - Consistent end-user eperience for build in either DotNet CLI or Visual Studio.
+ - More consistent end-user experience for build between .NET CLI and Visual Studio.
  - Decoupling the .NET SDK experience from Visual Studio 
- - Decoupling the .NET SDK from VS.
 
-The reason we are persuing this is for a better experience when using or writting Roslyn analyzers and MSBuild Tasks. Currently tooling authors need to target NetStandard2.0 for their projects to be recognized by VS. Another options is to multi-target but it takes a lot more effort and time spent on that. Another aspect is the user experience, if the Roslyn version for VS analyzers and generators doesn't match the one in Visual Studio, they do not work.
+There are a few reasons that makes us persue this effort.
+The first, we want a better experience when using or writting Roslyn analyzers and MSBuild Tasks. Currently tooling authors need to target NetStandard2.0 for their projects to be recognized by VS, and doing so blocks out newer features available. 
+
+Second, tasks will not need to be multitargeted to cover both VS and .NET SDK. Right now, a lot of tasks need different versions to cover both of these scenarios, but with the changes in this features, authors will be able to use the same version for both situations.
+
 
 ## Impact
 There are a few area of impact:
  - .NET SDK style project builds will be more stable between VS and CLI builds, as the tooling will not be devided between different versions.
- - Reduced cost of development for external and internal teams that contribute to Roslyn Analyzers, SourceBuild generators, or MSBuild Tasks.
- - End-user will not experience mismatch between analyzer versions, and confirmation that their .NET SDK style builds will behave the same way in VS and in the command line.
+ - Reduced cost of development for external and internal teams that author Roslyn Analyzers, source generators, or MSBuild Tasks.
+ - End-user will not experience mismatch between analyzer versions, and gain higher confidence that their .NET SDK project builds will behave the same way in VS and in the command line.
 
 ## Stakeholders
-For the internal stakeholder, we have the teams that will continue the work to fully complete the VS and .NET SDK decoupling feature after our base work is done. There are two handovers in this project:
+Other teams will need to work to fully complete the VS and .NET SDK decoupling feature after our base work is done. There are two handovers in this project:
 
-1. Enabling the MSBuild.exe execution state to be the same as DotNet command line invocation so the Roslyn team can enable the use of their core compiler in VS.
-2. Tasks and other projects can be written in .NET Core and the .NET SDK projects will build successuflly in VS. This enables other teams to migrate their tasks to .NET Core instead of keeping them targeting .NET Framework.
+1. After providing enough information to do so through MSBuild and the SDK, Roslyn will need to use it to invoke their .NET compiler in VS.
+2. After MSBuild enables tasks to target .NET even for VS use, task-owning teams like the .NET SDK will need to migrate their targets to use .NET Core instead of keeping them targeting .NET Framework.
 
-The handovers should allow other teams to proceed with their work smoothly and no change in build behaviour should be present within MSBuild.
+The handovers should allow other teams to proceed with their work smoothly and no unexpected change in build behavior should be present within MSBuild.
 
 ## Risks
 A few risks associated with this feature:
- - Our work is early in the development effort. If this feature is discovered to have too large of an impact in experience of performance the work might be delayed or discarded.
- - There might be a performance hit on VS once we start running tasks on .NET Core. It would depending on the amount of non-framwork tasks that the project will need to load when opening it in VS. The performance gain from pre-loading will not be available in this scenario.
- - There are no concrete deadlines for our part of the feature, but we are aiming for an early preview cycle, so we have a chance to measure the consequences and fix any issues that arise.
+ - If .NET Core tasks is discovered to have too large of a performance impact (due to IPC overhead to a .NET process), core partner teams may choose to keep multitargeting their tasks for improved user perf.
+ - There is a hard deadline for this feature, VS17.14. As a consequence of how we support versions we would need to get all the work of this feature completed before that release. If we do not reach the deadline for this feature we would need to change policies on SDK level to be able to continue support.
+
 
 ## Plan
  1. Ensure that MSBuild.exe provides the same execution state as the dotnet command line invocation.
@@ -36,5 +39,5 @@ A few risks associated with this feature:
  2. Implement .NET Core task host, tasks can be executed on the .NET Core vresion instead of .NET framework.
     - This should take 1 to 2 dev months to complete, including extensive testing. This would be handed over to internal teams that have custom tasks so they can be updated and tested.
  3. Load common targets from the .NET SDK and not from .NET NetFramework on VS. This work depends on other team's finilizing their part of the feature and might not be in scope for .NET 10.
-    - This should take a dev week, if there are no major bugs or regressions.
+    - This should take a dev week for code changes. For everything else, analysis, testing, etc... the time is very dependent on what happens after the code change, which we can't fully predict at this moment.
 
diff --git a/documentation/specs/proposed/evaluation-perf.md b/documentation/specs/proposed/evaluation-perf.md
index af287dfeead..3a44e42fa53 100644
--- a/documentation/specs/proposed/evaluation-perf.md
+++ b/documentation/specs/proposed/evaluation-perf.md
@@ -1,5 +1,5 @@
 # Evaluation performance investigations
-In the current effort to improve performance of MSBuild, we ideantified the evaluation as one of the focus areas of this effort. Evalution is the ifrst step when building, and it determines references, how projects are connected and what needs to be build. Because of this it runs in every single build, be it Design-time builds in Visual Studio, up-to-date builds or full builds.
+In the current effort to improve performance of MSBuild, we identified evaluation as one of the focus areas of this effort. Evaluation is the first step when loading or building, and it determines references, how projects are connected and what needs to be build. Because of this it runs in every MSBuild scenario, from solution load and design-time builds in Visual Studio, to up-to-date builds or full builds in VS or on the command line.
 
 ## Description
 Current performance state of evaluation is mostly unkown, as it is not measured in any ways by the team. As such, we are unsure which specific areas can be improve. The investigation about this is necessary so we can identify weaknesses, and possible fixes.
@@ -8,7 +8,7 @@ Current performance state of evaluation is mostly unkown, as it is not measured
  - Jit compilation of MSBuild itself. 
  - We could cache at eval
 
- Constraint - needs to work as it does today, but fast. We can break some edge cases.
+Constraint - needs to work as it does today, but faster. We may be able to break some edge cases.
 
 ## Goals and Motivation
 We are trying to make evaluation phase of the build more performant, since it is almost always executed any performance gain becomes noticeable. A performant evaluation phase would decrease build times in general, in CI cases it frees up resources, and in individual cases it can increase dev-loop performance by making up-to-date and incremental builds go faster.
