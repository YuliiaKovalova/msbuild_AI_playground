diff --git a/src/Framework/Telemetry/OpenTelemetryManager.cs b/src/Framework/Telemetry/OpenTelemetryManager.cs
index 4b7813cf70a..0623194a600 100644
--- a/src/Framework/Telemetry/OpenTelemetryManager.cs
+++ b/src/Framework/Telemetry/OpenTelemetryManager.cs
@@ -77,6 +77,8 @@ public void Initialize(bool isStandalone)
                 DefaultActivitySource = new MSBuildActivitySource(TelemetryConstants.DefaultActivitySourceNamespace);
 
 #if NETFRAMEWORK
+                try
+                {
                     InitializeTracerProvider();
 
                     // TODO: Enable commented logic when Collector is present in VS
@@ -84,6 +86,18 @@ public void Initialize(bool isStandalone)
                     InitializeCollector();
 
                     // }
+                }
+                catch (Exception ex)
+                {
+                    // catch exceptions from loading the OTel SDK or Collector to maintain usability of Microsoft.Build.Framework package in our and downstream tests in VS.
+                    if (ex is System.IO.FileNotFoundException or System.IO.FileLoadException)
+                    {
+                        _telemetryState = TelemetryState.Unsampled;
+                        return;
+                    }
+
+                    throw;
+                }
 #endif
             }
         }
@@ -122,13 +136,32 @@ private void InitializeCollector()
             _telemetryState = TelemetryState.CollectorInitialized;
         }
 #endif
+
+        private void ForceFlushInner()
+        {
+#if NETFRAMEWORK
+            _tracerProvider?.ForceFlush();
+#endif
+        }
+
         /// <summary>
         /// Flush the telemetry in TracerProvider/Exporter.
         /// </summary>
         public void ForceFlush()
         {
+            if (ShouldBeCleanedUp())
+            {
+                ForceFlushInner();
+            }
+        }
+
+        // to avoid assembly loading OpenTelemetry in tests
+        private void ShutdownInner()
+        {
 #if NETFRAMEWORK
-            _tracerProvider?.ForceFlush();
+            _tracerProvider?.Shutdown();
+            // Dispose stops the collector, with a default drain timeout of 10s
+            _collector?.Dispose();
 #endif
         }
 
@@ -139,11 +172,11 @@ public void Shutdown()
         {
             lock (_initializeLock)
             {
-#if NETFRAMEWORK
-                _tracerProvider?.Shutdown();
-                // Dispose stops the collector, with a drain timeout of 10s
-                _collector?.Dispose();
-#endif
+                if (ShouldBeCleanedUp())
+                {
+                    ShutdownInner();
+                }
+
                 _telemetryState = TelemetryState.Disposed;
             }
         }
@@ -176,6 +209,11 @@ private bool IsSampled()
             return random.NextDouble() < _sampleRate;
         }
 
+        private bool ShouldBeCleanedUp()
+        {
+            return _telemetryState ==TelemetryState.CollectorInitialized || _telemetryState == TelemetryState.ExporterInitialized;
+        }
+
         /// <summary>
         /// State of the telemetry infrastructure.
         /// </summary>
