diff --git a/documentation/specs/proposed/Cache EVAL.md b/documentation/specs/proposed/Cache EVAL.md
new file mode 100644
index 00000000000..50bbf27c4a3
--- /dev/null
+++ b/documentation/specs/proposed/Cache EVAL.md	
@@ -0,0 +1,46 @@
+# Evaluation goes fast
+*The objective of this one-pager is to provide clear and concise information about a feature or project to foster inclusion and collaboration by enabling anyone who is interested to learn the essential information, such as the project's goals, motivation, impact, and risks. The points and questions in each section are illustrative, they are not intended as a definite list of questions to be answered.*
+
+## Description
+ - Short summary of the feature or effort.
+
+ - We could do profiling
+ - Jit compilation o MSBuild itself. 
+ - We could cache at eval
+
+ Constraint - needs to work as it does today, but fast. We can break some edge cases.
+
+## Goals and Motivation
+ - What are we trying to achieve and why? 
+
+ We evaluate all the time, a lot of times we don't need to be doing that - like up-to-date builds. It would increase the dev loop performance. Evaluate go fast.
+
+## Impact
+Guidance: This document should not be an OKR. Let's keep the impact general here.
+Questions to consider:
+ - What is the impact? 
+ - Who will benefit from the feature?
+ - How does success look like?
+ - Are there any metrics or key results that could be quantified? 
+
+## Stakeholders
+Questions to consider:
+ - Who are the stakeholders? 
+ - For projects with concrete stakeholders, once the project is done how does a successful handover to the stakeholder look like? 
+
+## Risks
+Questions to consider:
+ - Will the effort or feature cause breaking changes for existing consumers? 
+ - Are there any unknowns that might derail the effort? 
+ - Are there any dependencies we don’t have control over? 
+ - Is there a hard deadline that needs to be met? 
+ - What threatens completion of the feature? 
+ - What is the impact of failing to deliver the feature?
+
+## Cost
+Questions to consider:
+ - What is the estimated cost of the end-to-end effort? 
+ - How accurate is the cost? 
+
+## Plan
+ - High-level milestones, with estimate effort for tasks. 
\ No newline at end of file
diff --git a/documentation/specs/proposed/VS-SDK thingy.md b/documentation/specs/proposed/VS-SDK thingy.md
new file mode 100644
index 00000000000..5c3e6a13ad4
--- /dev/null
+++ b/documentation/specs/proposed/VS-SDK thingy.md	
@@ -0,0 +1,62 @@
+# Decoupling VS builds of SDK projects
+*The objective of this one-pager is to provide clear and concise information about a feature or project to foster inclusion and collaboration by enabling anyone who is interested to learn the essential information, such as the project's goals, motivation, impact, and risks. The points and questions in each section are illustrative, they are not intended as a definite list of questions to be answered.*
+
+Ensure that all the logic from a build, from an SDK project comes from the SDK independently of where it is being built.
+
+## Description
+ - Short summary of the feature or effort.
+
+## Goals and Motivation
+ - What are we trying to achieve and why? 
+
+Consistency of end-user build experience
+Decoupling the SDK from VS
+Isolate the SDK builds to use only their components.
+
+Why:
+Experience of tooling authors
+ - Roslyn analyzer authors
+ - MSBuild Task authors
+
+experience of end users
+ - Anyone who uses the analyzers or source egenrators
+
+Tooling authors need to target NetStandard2.0, or multi target and dependencies in multitargets is annoying. If you don't match the roslyn version for VS the analyzers and generators don't work.
+
+## Impact
+Multiple layer of impact:
+ - Project construction
+ - reduce cost of development for internal teams that contribute to Roslyn analyzers / source build generators and MSBuild Tasks.
+
+ End users will not experience mismatch between analyzer versions. And they will be sure that the build will be the same as the command line invocation.
+
+## Stakeholders
+internal folks are the ones that will continue the work to fully complete the feature. 
+ - VS Perf team: 
+ - Project System team:
+ - Roslyn team: Handover - once we're sending the environmental variable, they can enable the use of the core compiler in VS. The second handover is the same as the rest: you can write only .net code tasks and the sdk projects will build successfully.
+
+These are the folks that will benefit of these changes:
+ - Analyzer / source generator author
+ - MSBuild Task authors
+
+## Risks
+ - There might be a performance hit on VS depending on how many non-framework tasks the project needs to load. As we can't do some pre-loading.
+ - There should be no breaking from SDK only users. The IDE tooling might have a different version, which leads to discrepancy on partial builds.
+ - We are early in the development effort, so if later there is a larger impact on perf or other issues, the effort in general might be delayed(?), but our part would already have been completed.
+ - Deadline: no concrete deadline, but early in the preview cycle (preview 4-5) to get a sense of consequences of this change.
+ - If we don't do this: Worse experience for devs that work in the area.
+
+## Cost
+1. Dev week's time
+2. Dev 1-2 months time.
+3. Dev 1 week if things do not go wrong at all.
+
+## Plan
+ 1. Ensure that MSBuild.exe provides the same execution state as the dotnet command line invocation. MSExtensionPath (cant do that), DotNetHostPath, MSSDKsPath (cant do that).
+    -  Low effort, should be done first. 
+ 2. Implement .NET core task host, so we can execute core version of tasks.
+    - Get Rainer feedback, seems like a medium sized.
+ 3. Load common targets from the SDK and not .NetFramework (the VS version of it). This might be out of scope for .NET 10
+    - Medium effort, can have behavioral changes.
+
diff --git a/documentation/specs/proposed/parfStar.md b/documentation/specs/proposed/parfStar.md
new file mode 100644
index 00000000000..72a46e2accb
--- /dev/null
+++ b/documentation/specs/proposed/parfStar.md
@@ -0,0 +1,72 @@
+# One Pager Template
+*The objective of this one-pager is to provide clear and concise information about a feature or project to foster inclusion and collaboration by enabling anyone who is interested to learn the essential information, such as the project's goals, motivation, impact, and risks. The points and questions in each section are illustrative, they are not intended as a definite list of questions to be answered.*
+
+## Description
+ - Short summary of the feature or effort.
+
+New features and fixes for .NET 10 investment.
+ - Running it nicely [1 dev week]
+ - Report is working [2 dev weeks]
+ - Performance tests for new features - making it easier to make these / docs. [3 dev days per feature]
+   - BuildCheck perf tests
+ - Check Stability of perf tests / fixing those - so there is not a lot of noise around tests [2 dev weeks]
+   - Should be done through multiple iterations on a test
+   - Report needs to be reworked
+ - We can maybe have more `msbuild.exe`. but not VS api [1 dev week]
+ - Timeboxed collect and act on feedback from our team. Includes perf investigations that needs to be conducted. [1-2 dev months depending on dev feedback / requests]
+ - Add more tests: check logger performance with different verbosities, buildCheck. [1 dev week]
+
+possible directions for perfStar / next versions:
+ - More measurements. Like, dotnet counters tool. [3 dev weeks]
+ - Trace collection, when something is on automatically turn it on. [2-3 dev weeks]
+ - Report improvements: 
+   - Comparison between different versions that is not main [2 dev weeks]
+   - Automatic detection of perf issues. Don't have someone look at the report to have news about regression. [1 dev month]
+ - Run VS API tests? There are some problems that we would need for VS specific tests [4 dev weeks - optional feature]
+
+## Goals and Motivation
+ - What are we trying to achieve and why? 
+Go fast
+
+## Impact
+Guidance: This document should not be an OKR. Let's keep the impact general here.
+Questions to consider:
+ - What is the impact? 
+ - Who will benefit from the feature?
+ - How does success look like?
+ - Are there any metrics or key results that could be quantified? 
+
+We can be sure to go faster
+Enable MSBuild team to track performance, identify low hanging fruits to improve performance, and watch new feature peformance.
+
+## Stakeholders
+Questions to consider:
+ - Who are the stakeholders? 
+ - For projects with concrete stakeholders, once the project is done how does a successful handover to the stakeholder look like? 
+Us.
+
+
+## Risks
+Questions to consider:
+ - Will the effort or feature cause breaking changes for existing consumers? 
+ - Are there any unknowns that might derail the effort? 
+ - Are there any dependencies we don’t have control over? 
+ - Is there a hard deadline that needs to be met? 
+ - What threatens completion of the feature? 
+ - What is the impact of failing to deliver the feature?
+
+Dependencies: Crank, which is owned by ASP.NET team. This can cause problems with the machine set-up since they are responsible for this. 
+
+Deadlines:No hard deadlines. Just nice to have for the team.
+Threat: Randomization for the team. Security issues that come up.
+
+Impact of delivery failure. Less numbers in performance improvement for MSBuild features.
+
+
+## Cost
+Questions to consider:
+ - What is the estimated cost of the end-to-end effort? 
+ - How accurate is the cost? 
+
+## Plan
+ - High-level milestones, with estimate effort for tasks. 
\ No newline at end of file
