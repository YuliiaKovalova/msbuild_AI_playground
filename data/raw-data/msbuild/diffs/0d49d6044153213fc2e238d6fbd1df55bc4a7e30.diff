diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 97342e66b3f..b550f4aa12f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -154,7 +154,7 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
             bucket.Expander.Metadata = metadataTable;
 
             // Second, expand the item include and exclude, and filter existing metadata as appropriate.
-            IList<ProjectItemInstance> itemsToAdd = ExpandItemIntoItems(child, bucket.Expander, keepMetadata, removeMetadata);
+            List<ProjectItemInstance> itemsToAdd = ExpandItemIntoItems(child, bucket.Expander, keepMetadata, removeMetadata);
 
             // Third, expand the metadata.           
             foreach (ProjectItemGroupTaskMetadataInstance metadataInstance in child.Metadata)
@@ -202,7 +202,11 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
 
             if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents && itemsToAdd != null && itemsToAdd.Count > 0)
             {
-                var itemGroupText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.ItemGroupIncludeLogMessagePrefix, child.ItemType, itemsToAdd.ToArray());
+                var itemGroupText = ItemGroupLoggingHelper.GetParameterText(
+                    ItemGroupLoggingHelper.ItemGroupIncludeLogMessagePrefix,
+                    child.ItemType,
+                    itemsToAdd,
+                    includeMetadata: true);
                 LoggingContext.LogCommentFromText(MessageImportance.Low, itemGroupText);
             }
 
@@ -231,7 +235,11 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
             {
                 if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents && itemsToRemove.Count > 0)
                 {
-                    var itemGroupText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.ItemGroupRemoveLogMessage, child.ItemType, itemsToRemove.ToArray());
+                    var itemGroupText = ItemGroupLoggingHelper.GetParameterText(
+                        ItemGroupLoggingHelper.ItemGroupRemoveLogMessage,
+                        child.ItemType,
+                        itemsToRemove,
+                        includeMetadata: true);
                     LoggingContext.LogCommentFromText(MessageImportance.Low, itemGroupText);
                 }
 
@@ -333,7 +341,7 @@ private void GetBatchableValuesFromBuildItemGroupChild(List<string> parameterVal
         /// been refactored.
         /// </remarks>
         /// <returns>A list of items.</returns>
-        private IList<ProjectItemInstance> ExpandItemIntoItems
+        private List<ProjectItemInstance> ExpandItemIntoItems
         (
             ProjectItemGroupTaskItemInstance originalItem,
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander,
@@ -344,7 +352,7 @@ ISet<string> removeMetadata
             //todo this is duplicated logic with the item computation logic from evaluation (in LazyIncludeOperation.SelectItems)
 
             ProjectErrorUtilities.VerifyThrowInvalidProject(!(keepMetadata != null && removeMetadata != null), originalItem.KeepMetadataLocation, "KeepAndRemoveMetadataMutuallyExclusive");
-            IList<ProjectItemInstance> items = new List<ProjectItemInstance>();
+            List<ProjectItemInstance> items = new List<ProjectItemInstance>();
 
             // Expand properties and metadata in Include
             string evaluatedInclude = expander.ExpandIntoStringLeaveEscaped(originalItem.Include, ExpanderOptions.ExpandPropertiesAndMetadata, originalItem.IncludeLocation);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index 90158590181..4b13b7ac21e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -24,15 +24,7 @@ internal static class ItemGroupLoggingHelper
         /// <summary>
         /// Gets a text serialized value of a parameter for logging.
         /// </summary>
-        internal static string GetParameterText(string prefix, string parameterName, params object[] parameterValues)
-        {
-            return GetParameterText(prefix, parameterName, (IList)parameterValues);
-        }
-
-        /// <summary>
-        /// Gets a text serialized value of a parameter for logging.
-        /// </summary>
-        internal static string GetParameterText(string prefix, string parameterName, IList parameterValue)
+        internal static string GetParameterText(string prefix, string parameterName, IList parameterValue, bool includeMetadata = false)
         {
             if (parameterValue == null || parameterValue.Count == 0)
             {
@@ -81,7 +73,7 @@ internal static string GetParameterText(string prefix, string parameterName, ILi
                         sb.Append("        ");
                     }
 
-                    AppendStringFromParameterValue(sb, parameterValue[i]);
+                    AppendStringFromParameterValue(sb, parameterValue[i], includeMetadata);
 
                     if (!specialTreatmentForSingle && i < parameterValue.Count - 1)
                     {
@@ -99,11 +91,11 @@ internal static string GetParameterText(string prefix, string parameterName, ILi
         /// First line is already indented.
         /// Indent of any subsequent line should be 12 spaces.
         /// </summary>
-        internal static string GetStringFromParameterValue(object parameterValue)
+        internal static string GetStringFromParameterValue(object parameterValue, bool includeMetadata = false)
         {
             using (var sb = new ReuseableStringBuilder())
             {
-                AppendStringFromParameterValue(sb, parameterValue);
+                AppendStringFromParameterValue(sb, parameterValue, includeMetadata);
                 return sb.ToString();
             }
         }
@@ -113,7 +105,7 @@ internal static string GetStringFromParameterValue(object parameterValue)
         [ThreadStatic]
         private static List<KeyValuePair<string, string>> keyValuePairList;
 
-        private static void AppendStringFromParameterValue(ReuseableStringBuilder sb, object parameterValue)
+        private static void AppendStringFromParameterValue(ReuseableStringBuilder sb, object parameterValue, bool includeMetadata = false)
         {
             if (parameterValue is string text)
             {
@@ -123,44 +115,58 @@ private static void AppendStringFromParameterValue(ReuseableStringBuilder sb, ob
             {
                 sb.Append(item.ItemSpec);
 
-                var customMetadata = item.CloneCustomMetadata();
-                int count = customMetadata.Count;
-
-                if (count > 0)
+                if (includeMetadata)
                 {
-                    sb.Append('\n');
+                    var customMetadata = item.CloneCustomMetadata();
+                    int count = customMetadata.Count;
 
-                    // need to initialize the thread static on each new thread
-                    if (keyValuePairList == null)
+                    if (count > 0)
                     {
-                        keyValuePairList = new List<KeyValuePair<string, string>>(count);
-                    }
+                        sb.Append('\n');
 
-                    foreach (KeyValuePair<string, string> kvp in customMetadata)
-                    {
-                        keyValuePairList.Add(kvp);
-                    }
+                        // need to initialize the thread static on each new thread
+                        if (keyValuePairList == null)
+                        {
+                            keyValuePairList = new List<KeyValuePair<string, string>>(count);
+                        }
 
-                    if (count > 1)
-                    {
-                        keyValuePairList.Sort((l, r) => StringComparer.OrdinalIgnoreCase.Compare(l.Key, r.Key));
-                    }
+                        var customMetadataDictionary = customMetadata as IDictionary<string, string>;
+                        if (customMetadataDictionary != null)
+                        {
+                            foreach (KeyValuePair<string, string> kvp in customMetadataDictionary)
+                            {
+                                keyValuePairList.Add(kvp);
+                            }
+                        }
+                        else
+                        {
+                            foreach (DictionaryEntry kvp in customMetadata)
+                            {
+                                keyValuePairList.Add(new KeyValuePair<string, string>((string)kvp.Key, (string)kvp.Value));
+                            }
+                        }
 
-                    for (int i = 0; i < count; i++)
-                    {
-                        var kvp = keyValuePairList[i];
-                        sb.Append("                ");
-                        sb.Append(kvp.Key);
-                        sb.Append('=');
-                        sb.Append(kvp.Value);
+                        if (count > 1)
+                        {
+                            keyValuePairList.Sort((l, r) => StringComparer.OrdinalIgnoreCase.Compare(l.Key, r.Key));
+                        }
 
-                        if (i < count - 1)
+                        for (int i = 0; i < count; i++)
                         {
-                            sb.Append('\n');
+                            var kvp = keyValuePairList[i];
+                            sb.Append("                ");
+                            sb.Append(kvp.Key);
+                            sb.Append('=');
+                            sb.Append(kvp.Value);
+
+                            if (i < count - 1)
+                            {
+                                sb.Append('\n');
+                            }
                         }
-                    }
 
-                    keyValuePairList.Clear();
+                        keyValuePairList.Clear();
+                    }
                 }
             }
             else if (parameterValue.GetType().GetTypeInfo().IsValueType)
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 688065d29fa..e6ec57a066d 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1285,7 +1285,10 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete
         {
             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents && parameterValue.Count > 0)
             {
-                string parameterText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.TaskParameterPrefix, parameter.Name, parameterValue);
+                string parameterText = ItemGroupLoggingHelper.GetParameterText(
+                    ItemGroupLoggingHelper.TaskParameterPrefix,
+                    parameter.Name,
+                    parameterValue);
                 _taskLoggingContext.LogCommentFromText(MessageImportance.Low, parameterText);
             }
 
@@ -1427,7 +1430,8 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN
                         string parameterText = ItemGroupLoggingHelper.GetParameterText(
                             ItemGroupLoggingHelper.OutputItemParameterMessagePrefix,
                             outputTargetName,
-                            outputs);
+                            outputs,
+                            includeMetadata: true);
 
                         _taskLoggingContext.LogCommentFromText(MessageImportance.Low, parameterText);
                     }
@@ -1500,7 +1504,11 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
 
                     if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents && outputs.Length > 0)
                     {
-                        string parameterText = ItemGroupLoggingHelper.GetParameterText(ItemGroupLoggingHelper.OutputItemParameterMessagePrefix, outputTargetName, outputs);
+                        string parameterText = ItemGroupLoggingHelper.GetParameterText(
+                            ItemGroupLoggingHelper.OutputItemParameterMessagePrefix,
+                            outputTargetName,
+                            outputs,
+                            includeMetadata: true);
                         _taskLoggingContext.LogCommentFromText(MessageImportance.Low, parameterText);
                     }
                 }
