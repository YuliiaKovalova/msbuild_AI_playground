diff --git a/eng/Packages.props b/eng/Packages.props
index 07d71a3583c..30ae007906c 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -1,5 +1,6 @@
 <Project>
   <ItemGroup>
+    <PackageReference Update="BenchmarkDotNet" Version="0.12.1" />
     <PackageReference Update="jnm2.ReferenceAssemblies.net35" Version="1.0.1" />
     <PackageReference Update="LargeAddressAware" Version="1.0.3" />
     <PackageReference Update="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
diff --git a/src/StringTools.Benchmark/Program.cs b/src/StringTools.Benchmark/Program.cs
new file mode 100644
index 00000000000..7bdd21ed36a
--- /dev/null
+++ b/src/StringTools.Benchmark/Program.cs
@@ -0,0 +1,15 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using BenchmarkDotNet.Running;
+
+namespace Microsoft.NET.StringTools.Benchmark
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BenchmarkRunner.Run<SpanBasedStringBuilder_Benchmark>();
+        }
+    }
+}
diff --git a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
new file mode 100644
index 00000000000..03fa15ccfc5
--- /dev/null
+++ b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
@@ -0,0 +1,85 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using BenchmarkDotNet.Attributes;
+using System.Text;
+
+namespace Microsoft.NET.StringTools.Benchmark
+{
+    [MemoryDiagnoser]
+    public class SpanBasedStringBuilder_Benchmark
+    {
+        [Params(1, 2, 4, 8, 16, 256)]
+        public int NumSubstrings { get; set; }
+
+        [Params(1, 8, 32, 128, 512)]
+        public int SubstringLengths { get; set; }
+
+        private string[] _subStrings;
+
+        private static SpanBasedStringBuilder _pooledSpanBasedStringBuilder = new SpanBasedStringBuilder();
+        private static StringBuilder _pooledStringBuilder = new StringBuilder();
+
+        private static int _uniqueStringCounter = 0;
+
+        [GlobalSetup]
+        public void GlobalSetup()
+        {
+            _subStrings = new string[NumSubstrings];
+            for (int i = 0; i < _subStrings.Length; i++)
+            {
+                _subStrings[i] = new string('a', SubstringLengths);
+            }
+        }
+
+        [Benchmark]
+        public void SpanBasedOperations_CacheHit()
+        {
+            SpanBasedStringBuilder sbsb = _pooledSpanBasedStringBuilder;
+            sbsb.Clear();
+            foreach (string subString in _subStrings)
+            {
+                sbsb.Append(subString);
+            }
+            sbsb.ToString();
+        }
+
+        [Benchmark]
+        public void RegularOperations_CacheHit()
+        {
+            StringBuilder sb = _pooledStringBuilder;
+            sb.Clear();
+            foreach (string subString in _subStrings)
+            {
+                sb.Append(subString);
+            }
+            Strings.WeakIntern(sb.ToString());
+        }
+
+        [Benchmark]
+        public void SpanBasedOperations_CacheMiss()
+        {
+            SpanBasedStringBuilder sbsb = _pooledSpanBasedStringBuilder;
+            sbsb.Clear();
+            foreach (string subString in _subStrings)
+            {
+                sbsb.Append(subString);
+            }
+            sbsb.Append(_uniqueStringCounter++.ToString("X8"));
+            sbsb.ToString();
+        }
+
+        [Benchmark]
+        public void RegularOperations_CacheMiss()
+        {
+            StringBuilder sb = _pooledStringBuilder;
+            sb.Clear();
+            foreach (string subString in _subStrings)
+            {
+                sb.Append(subString);
+            }
+            sb.Append(_uniqueStringCounter++.ToString("X8"));
+            Strings.WeakIntern(sb.ToString());
+        }
+    }
+}
diff --git a/src/StringTools.Benchmark/StringTools.Benchmark.csproj b/src/StringTools.Benchmark/StringTools.Benchmark.csproj
new file mode 100644
index 00000000000..eb1bf1347f3
--- /dev/null
+++ b/src/StringTools.Benchmark/StringTools.Benchmark.csproj
@@ -0,0 +1,22 @@
+ï»¿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <OutputType>Exe</OutputType>
+    <UseAppHost>false</UseAppHost>
+    <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
+    
+    <IsPackable>false</IsPackable>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
+
+    <AssemblyName>StringTools.Benchmark</AssemblyName>
+    <StartupObject>Microsoft.NET.StringTools.Benchmark.Program</StartupObject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="BenchmarkDotNet" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\StringTools\StringTools.csproj" />
+  </ItemGroup>
+</Project>
