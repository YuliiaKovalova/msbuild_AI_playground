diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index a935708e681..c9f250b7145 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -4,6 +4,7 @@
 using System;
 using System.IO;
 using System.IO.Compression;
+using System.Reflection.Metadata;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Shared;
@@ -102,6 +103,11 @@ public enum ProjectImportsCollectionMode
 
         private string FilePath { get; set; }
 
+        /// <summary>
+        /// Boolean flag identifies if the log file was provided from parameters
+        /// </summary>
+        private bool IsUniqueLogFile { get; set; }
+
         /// <summary> Gets or sets the verbosity level.</summary>
         /// <remarks>
         /// The binary logger Verbosity is always maximum (Diagnostic). It tries to capture as much
@@ -109,11 +115,18 @@ public enum ProjectImportsCollectionMode
         /// </remarks>
         public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Diagnostic;
 
+        /// <summary>
+        /// Gets or sets the parameters
+        /// </summary>
+        public string BLParameters { get; set; }
+
         /// <summary>
         /// Gets or sets the parameters. The only supported parameter is the output log file path (for example, "msbuild.binlog").
         /// </summary>
         public string Parameters { get; set; }
 
+        public string InitProjectFile { get; set; }
+
         /// <summary>
         /// Initializes the logger by subscribing to events of the specified event source.
         /// </summary>
@@ -131,6 +144,7 @@ public void Initialize(IEventSource eventSource)
             bool logPropertiesAndItemsAfterEvaluation = Traits.Instance.EscapeHatches.LogPropertiesAndItemsAfterEvaluation ?? true;
 
             ProcessParameters();
+            UpdateFilePathBaseodOnParameters();
 
             try
             {
@@ -320,6 +334,57 @@ private void CollectImports(BuildEventArgs e)
         /// <exception cref="LoggerException">
         /// </exception>
         private void ProcessParameters()
+        {
+            AttachBLArguments();
+            AttachBLParameters();
+        }
+
+
+        /// <summary>
+        /// Updates the current FilePath value based on instance configuration
+        /// </summary>
+        /// <exception cref="LoggerException"></exception>
+        private void UpdateFilePathBaseodOnParameters()
+        {
+            if (IsUniqueLogFile)
+            {
+                if (FilePath != null)
+                {
+                    throw new LoggerException("Incompatible configuration provided");
+                }
+
+                FilePath = InitProjectFile + "." + DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()  + ".binlog";
+            }
+            else
+            {
+                if (FilePath == null)
+                {
+                    FilePath = "msbuild.binlog";
+                }
+            }
+
+            KnownTelemetry.LoggingConfigurationTelemetry.BinaryLoggerUsedDefaultName = FilePath == "msbuild.binlog";
+
+
+            try
+            {
+                FilePath = Path.GetFullPath(FilePath);
+            }
+            catch (Exception e)
+            {
+                string errorCode;
+                string helpKeyword;
+                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, "InvalidFileLoggerFile", FilePath, e.Message);
+                throw new LoggerException(message, e, errorCode, helpKeyword);
+            }
+        }
+
+        /// <summary>
+        /// Process the arguments provided to the bl flag
+        /// Available arguments: ProjectImports=None, ProjectImports=Embed, ProjectImports=ZipFile,[LogFile=]filename.binlog
+        /// </summary>
+        /// <exception cref="LoggerException"></exception>
+        private void AttachBLArguments()
         {
             if (Parameters == null)
             {
@@ -327,6 +392,7 @@ private void ProcessParameters()
             }
 
             var parameters = Parameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
+
             foreach (var parameter in parameters)
             {
                 if (string.Equals(parameter, "ProjectImports=None", StringComparison.OrdinalIgnoreCase))
@@ -356,23 +422,34 @@ private void ProcessParameters()
                     throw new LoggerException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("InvalidBinaryLoggerParameters", parameter));
                 }
             }
+        }
 
-            if (FilePath == null)
+        /// <summary>
+        /// Process the arguments provided to the blp flag
+        /// Available arguments: uniqueFileName
+        /// </summary>
+        /// <exception cref="LoggerException"></exception>
+        private void AttachBLParameters()
+        {
+            if (BLParameters == null)
             {
-                FilePath = "msbuild.binlog";
+                return;
             }
-            KnownTelemetry.LoggingConfigurationTelemetry.BinaryLoggerUsedDefaultName = FilePath == "msbuild.binlog";
 
-            try
-            {
-                FilePath = Path.GetFullPath(FilePath);
-            }
-            catch (Exception e)
+            var parameters = BLParameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
+            foreach (var parameter in parameters)
             {
-                string errorCode;
-                string helpKeyword;
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, "InvalidFileLoggerFile", FilePath, e.Message);
-                throw new LoggerException(message, e, errorCode, helpKeyword);
+                if (parameter.Length > 0)
+                {
+                    if (parameter.Equals("uniqueFileName", StringComparison.CurrentCultureIgnoreCase))
+                    {
+                        IsUniqueLogFile = true;
+                    }
+                }
+                else
+                {
+                    throw new LoggerException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("InvalidBinaryLoggerParameters", parameter));
+                }
             }
         }
     }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
new file mode 100644
index 00000000000..65bda90e64a
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -0,0 +1,19 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Logging
+{
+    internal class BinaryLoggerParameters
+    {
+        public string[] binaryLoggerArguments;
+
+        public string[] binaryLoggerParameters;
+
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 7248660300c..7692d6d6690 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,6 +160,7 @@
     <Compile Include="FileAccess\ProcessData.cs" />
     <Compile Include="FileAccess\ReportedFileOperation.cs" />
     <Compile Include="FileAccess\RequestedAccess.cs" />
+    <Compile Include="Logging\BinaryLogger\BinaryLoggerParameters.cs" />
     <Compile Include="Logging\BinaryLogger\ExtendedDataFields.cs" />
     <Compile Include="Logging\BinaryLogger\IBuildEventArgsReaderNotifications.cs" />
     <Compile Include="Logging\BinaryLogger\IBuildEventStringsReader.cs" />
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index 6ac15c07dec..be9eb0cad47 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -98,6 +98,7 @@ internal enum ParameterizedSwitch
             WarningsNotAsErrors,
             WarningsAsMessages,
             BinaryLogger,
+            BinaryLoggerParameters,
             Restore,
             ProfileEvaluation,
             RestoreProperty,
@@ -263,6 +264,7 @@ internal ParameterizedSwitchInfo(
             new ParameterizedSwitchInfo(  new string[] { "warnnotaserror", "noerr" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           "MissingWarnNotAsErrorParameterError", true,   false),
             new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "binaryloggerparameters", "blp" },     ParameterizedSwitch.BinaryLoggerParameters,     null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false),
@@ -278,8 +280,8 @@ internal ParameterizedSwitchInfo(
             new ParameterizedSwitchInfo(  new string[] { "question", "q" },                     ParameterizedSwitch.Question,                   null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "detailedsummary", "ds" },             ParameterizedSwitch.DetailedSummary,            null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "getProperty" },                       ParameterizedSwitch.GetProperty,                null,                           true,           "MissingGetPropertyError",             true,   false),
-            new ParameterizedSwitchInfo(  new string[] { "getItem" },                           ParameterizedSwitch.GetItem,                    null,                           true,           "MissingGetItemError",             true,   false),
-            new ParameterizedSwitchInfo(  new string[] { "getTargetResult" },                   ParameterizedSwitch.GetTargetResult,            null,                           true,           "MissingGetTargetResultError",             true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "getItem" },                           ParameterizedSwitch.GetItem,                    null,                           true,           "MissingGetItemError",                 true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "getTargetResult" },                   ParameterizedSwitch.GetTargetResult,            null,                           true,           "MissingGetTargetResultError",         true,   false),
         };
 
         /// <summary>
@@ -301,7 +303,7 @@ internal static bool IsParameterlessSwitch(
             {
                 foreach (string parameterlessSwitchName in switchInfo.switchNames)
                 {
-                    if (String.Equals(switchName, parameterlessSwitchName, StringComparison.OrdinalIgnoreCase))
+                    if (string.Equals(switchName, parameterlessSwitchName, StringComparison.OrdinalIgnoreCase))
                     {
                         parameterlessSwitch = switchInfo.parameterlessSwitch;
                         duplicateSwitchErrorMessage = switchInfo.duplicateSwitchErrorMessage;
@@ -313,17 +315,6 @@ internal static bool IsParameterlessSwitch(
             return false;
         }
 
-        /// <summary>
-        /// Identifies/detects a switch that takes no parameters.
-        /// </summary>
-        internal static bool IsParameterlessSwitch(
-            string switchName)
-        {
-            ParameterlessSwitch parameterlessSwitch;
-            string duplicateSwitchErrorMessage;
-            return CommandLineSwitches.IsParameterlessSwitch(switchName, out parameterlessSwitch, out duplicateSwitchErrorMessage);
-        }
-
         /// <summary>
         /// Identifies/detects a switch that takes parameters.
         /// </summary>
@@ -354,7 +345,7 @@ internal static bool IsParameterizedSwitch(
             {
                 foreach (string parameterizedSwitchName in switchInfo.switchNames)
                 {
-                    if (String.Equals(switchName, parameterizedSwitchName, StringComparison.OrdinalIgnoreCase))
+                    if (string.Equals(switchName, parameterizedSwitchName, StringComparison.OrdinalIgnoreCase))
                     {
                         parameterizedSwitch = switchInfo.parameterizedSwitch;
                         duplicateSwitchErrorMessage = switchInfo.duplicateSwitchErrorMessage;
@@ -480,7 +471,7 @@ internal bool SetParameterizedSwitch(
             // check if the switch has multiple parameters
             if (multipleParametersAllowed)
             {
-                if (String.Empty.Equals(switchParameters) && emptyParametersAllowed)
+                if (string.Empty.Equals(switchParameters) && emptyParametersAllowed)
                 {
                     // Store a null parameter if its allowed
                     _parameterizedSwitches[(int)parameterizedSwitch].parameters.Add(null);
@@ -551,7 +542,7 @@ internal string GetEquivalentCommandLineExceptProjectFile()
             commandLineA.Sort(StringComparer.OrdinalIgnoreCase);
             commandLineB.Sort(StringComparer.OrdinalIgnoreCase);
 
-            return (String.Join(" ", commandLineA).Trim() + " " + String.Join(" ", commandLineB).Trim()).Trim();
+            return (string.Join(" ", commandLineA).Trim() + " " + string.Join(" ", commandLineB).Trim()).Trim();
         }
 
         /// <summary>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 23de6d667de..5d20b948aa0 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1995,20 +1995,12 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
                                 int numberOfCpus = NativeMethodsShared.GetLogicalCoreCount();
                                 switchParameters = $":{numberOfCpus}";
                             }
-                            else if (string.Equals(switchName, "bl", StringComparison.OrdinalIgnoreCase) ||
-                                string.Equals(switchName, "binarylogger", StringComparison.OrdinalIgnoreCase))
-                            {
-                                // we have to specify at least one parameter otherwise it's impossible to distinguish the situation
-                                // where /bl is not specified at all vs. where /bl is specified without the file name.
-                                switchParameters = ":msbuild.binlog";
-                            }
                             else if (string.Equals(switchName, "prof", StringComparison.OrdinalIgnoreCase) ||
                                      string.Equals(switchName, "profileevaluation", StringComparison.OrdinalIgnoreCase))
                             {
                                 switchParameters = ":no-file";
                             }
                         }
-
                         if (CommandLineSwitches.IsParameterlessSwitch(switchName, out var parameterlessSwitch, out var duplicateSwitchErrorMessage))
                         {
                             GatherParameterlessCommandLineSwitch(commandLineSwitches, parameterlessSwitch, switchParameters, duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
@@ -2638,7 +2630,9 @@ private static bool ProcessCommandLineSwitches(
                     // figure out which loggers are going to listen to build events
                     string[][] groupedFileLoggerParameters = commandLineSwitches.GetFileLoggerParameters();
 
+                    // TODO: update to pass a class of binary log parameters aggreated all in one
                     loggers = ProcessLoggingSwitches(
+                        projectFile,
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Logger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.DistributedLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Verbosity],
@@ -2649,6 +2643,8 @@ private static bool ProcessCommandLineSwitches(
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.FileLoggerParameters], // used by DistributedFileLogger
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLoggerParameters],
+                        commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.BinaryLogger),
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation],
                         groupedFileLoggerParameters,
                         getProperty.Length + getItem.Length + getTargetResult.Length > 0,
@@ -3650,6 +3646,7 @@ internal static Dictionary<string, string> ProcessPropertySwitch(string[] parame
         /// </summary>
         /// <returns>List of loggers.</returns>
         private static ILogger[] ProcessLoggingSwitches(
+            string startFile,
             string[] loggerSwitchParameters,
             string[] distributedLoggerSwitchParameters,
             string[] verbositySwitchParameters,
@@ -3659,7 +3656,9 @@ private static ILogger[] ProcessLoggingSwitches(
             string aggregatedTerminalLoggerParameters,
             string[] fileLoggerParameters,
             string[] consoleLoggerParameters,
+            string[] binaryLoggerArguments,
             string[] binaryLoggerParameters,
+            bool isBinaryLoggerWasSet,
             string[] profileEvaluationParameters,
             string[][] groupedFileLoggerParameters,
             bool useSimpleErrorLogger,
@@ -3683,7 +3682,8 @@ private static ILogger[] ProcessLoggingSwitches(
             var loggers = new List<ILogger>();
 
             var outVerbosity = verbosity;
-            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref outVerbosity);
+
+            ProcessBinaryLogger(isBinaryLoggerWasSet, startFile, binaryLoggerArguments, binaryLoggerParameters, loggers, ref outVerbosity);
 
             // When returning the result of evaluation from the command line, do not use custom loggers.
             if (!useSimpleErrorLogger)
@@ -3710,7 +3710,7 @@ private static ILogger[] ProcessLoggingSwitches(
 
             ProcessDistributedFileLogger(distributedFileLogger, fileLoggerParameters, distributedLoggerRecords, loggers, cpuCount);
 
-            ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
+            ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, cpuCount, loggers);
 
             verbosity = outVerbosity;
 
@@ -3752,7 +3752,7 @@ internal static string AggregateParameters(string anyPrefixingParameter, string[
         /// Add a file logger with the appropriate parameters to the loggers list for each
         /// non-empty set of file logger parameters provided.
         /// </summary>
-        private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, List<DistributedLoggerRecord> distributedLoggerRecords, LoggerVerbosity verbosity, int cpuCount, List<ILogger> loggers)
+        private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, List<DistributedLoggerRecord> distributedLoggerRecords, int cpuCount, List<ILogger> loggers)
         {
             for (int i = 0; i < groupedFileLoggerParameters.Length; i++)
             {
@@ -3807,16 +3807,29 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
             }
         }
 
-        private static void ProcessBinaryLogger(string[] binaryLoggerParameters, List<ILogger> loggers, ref LoggerVerbosity verbosity)
+        private static void ProcessBinaryLogger(bool isBinaryLoggerWasSet, string startFile, string[] binaryLoggerArguments, string[] binaryLoggerParameters, List<ILogger> loggers, ref LoggerVerbosity verbosity)
         {
-            if (binaryLoggerParameters == null || binaryLoggerParameters.Length == 0)
+            if (!isBinaryLoggerWasSet)
             {
                 return;
             }
 
-            string arguments = binaryLoggerParameters[binaryLoggerParameters.Length - 1];
+            string arguments = string.Empty;
+            if (binaryLoggerArguments.Length > 0)
+            {
+                arguments = binaryLoggerArguments[binaryLoggerArguments.Length - 1];
+            }
+
+            string parameters = null;
+            if (binaryLoggerParameters != null && binaryLoggerParameters.Length > 0)
+            {
+                parameters = binaryLoggerParameters[binaryLoggerParameters.Length - 1];
+            }
+
+            var filenameExample = Path.GetFileName(startFile);
 
-            BinaryLogger logger = new BinaryLogger { Parameters = arguments };
+            // arguments
+            BinaryLogger logger = new BinaryLogger { Parameters = arguments, BLParameters = parameters, InitProjectFile = filenameExample };
 
             // If we have a binary logger, force verbosity to diagnostic.
             // The only place where verbosity is used downstream is to determine whether to log task inputs.
