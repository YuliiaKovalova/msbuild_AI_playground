diff --git a/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs b/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
index c540a86288e..9c16c9505b6 100644
--- a/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
+++ b/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
@@ -138,6 +138,15 @@ internal ImmutableDictionary<K, V> SetItem(K key, V value)
             return clone;
         }
 
+        internal ImmutableDictionary<K, V> SetItems(IEnumerable<KeyValuePair<K, V>> items)
+        {
+            var clone = new ImmutableDictionary<K, V>(_backing);
+            foreach (KeyValuePair<K, V> item in items)
+            {
+                clone[item.Key] = item.Value;
+            }
+        }
+
         internal ImmutableDictionary<K, V> Remove(K key)
         {
             if (!ContainsKey(key))
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index e106ce51bd9..50f641bbe5b 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -2935,37 +2935,28 @@ IMAGE_FILE_MACHINE_IA64	0x200	Intel Itanium processor family
         /// <summary>
         /// Some metadata should not be forwarded between the parent and child items.
         /// </summary>
+        /// <returns>The metadata that were removed.</returns>
         private static Dictionary<string, string> RemoveNonForwardableMetadata(ITaskItem item)
         {
             Dictionary<string, string> removedMetadata = new Dictionary<string, string>();
-            string meta = item.GetMetadata(ItemMetadataNames.winmdImplmentationFile);
-            if (!String.IsNullOrEmpty(meta))
-            {
-                removedMetadata.Add(ItemMetadataNames.winmdImplmentationFile, meta);
-            }
-            item.RemoveMetadata(ItemMetadataNames.winmdImplmentationFile);
-            meta = item.GetMetadata(ItemMetadataNames.imageRuntime);
-            if (!String.IsNullOrEmpty(meta))
+            RemoveMetadatum(ItemMetadataNames.winmdImplmentationFile, item, removedMetadata);
+            RemoveMetadatum(ItemMetadataNames.imageRuntime, item, removedMetadata);
+            RemoveMetadatum(ItemMetadataNames.winMDFile, item, removedMetadata);
+            if (!Traits.Instance.EscapeHatches.TargetPathForRelatedFiles)
             {
-                removedMetadata.Add(ItemMetadataNames.imageRuntime, meta);
+                RemoveMetadatum(ItemMetadataNames.targetPath, item, removedMetadata);
             }
-            item.RemoveMetadata(ItemMetadataNames.imageRuntime);
-            meta = item.GetMetadata(ItemMetadataNames.winMDFile);
+            return removedMetadata;
+        }
+
+        private static void RemoveMetadatum(string key, ITaskItem item, Dictionary<string, string> removedMetadata)
+        {
+            string meta = item.GetMetadata(key);
             if (!String.IsNullOrEmpty(meta))
             {
-                removedMetadata.Add(ItemMetadataNames.winMDFile, meta);
+                removedMetadata.Add(key, meta);
             }
-            item.RemoveMetadata(ItemMetadataNames.winMDFile);
-            if (!Traits.Instance.EscapeHatches.TargetPathForRelatedFiles)
-            {
-                meta = item.GetMetadata(ItemMetadataNames.targetPath);
-                if (!String.IsNullOrEmpty(meta))
-                {
-                    removedMetadata.Add(ItemMetadataNames.targetPath, meta);
-                }
-                item.RemoveMetadata(ItemMetadataNames.targetPath);
-            }
-            return removedMetadata;
+            item.RemoveMetadata(key);
         }
 
         /// <summary>
diff --git a/src/Utilities/TaskItem.cs b/src/Utilities/TaskItem.cs
index ff5ca50acc6..3ddd3526ced 100644
--- a/src/Utilities/TaskItem.cs
+++ b/src/Utilities/TaskItem.cs
@@ -313,7 +313,7 @@ public void CopyMetadataTo(ITaskItem destinationItem)
                     else
                     {
                         copiedMetadata = destinationAsTaskItem.Metadata.Clone();
-                        copiedMetadata.SetItems(Metadata.Where(entry => !destinationAsTaskItem.Metadata.ContainsKey(entry.Key)));
+                        copiedMetadata.SetItems(Metadata.Where(entry => !destinationAsTaskItem.Metadata.TryGetValue(entry.Key, out string val) || string.IsNullOrEmpty(val)));
                     }
                     destinationAsTaskItem.Metadata = copiedMetadata;
                 }
