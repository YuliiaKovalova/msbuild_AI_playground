diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs
index 6845cd9eb20..4c765982f88 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs
@@ -8,25 +8,61 @@
 
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
-    internal class CachingSdkResolverLoader : SdkResolverLoader
+    /// <summary>
+    /// A subclass of <see cref="SdkResolverLoader"/> which creates resolver manifests and SDK resolvers only once and
+    /// then returns cached results.
+    /// </summary>
+    internal sealed class CachingSdkResolverLoader : SdkResolverLoader
     {
+        /// <summary>
+        /// Cached list of default resolvers. Set eagerly.
+        /// </summary>
         private readonly IReadOnlyList<SdkResolver> _defaultResolvers;
+
+        /// <summary>
+        /// Cached manifest -> resolver dictionary. Populated lazily.
+        /// </summary>
         private readonly ConcurrentDictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>> _resolversByManifest = new();
 
+        /// <summary>
+        /// Cached list of all resolvers. Set lazily.
+        /// </summary>
         private IReadOnlyList<SdkResolver>? _allResolvers;
+
+        /// <summary>
+        /// Cached list of all resolver manifests. Set lazily.
+        /// </summary>
         private IReadOnlyList<SdkResolverManifest>? _resolversManifests;
 
+        /// <summary>
+        /// A lock object protecting <see cref="_allResolvers"/> and <see cref="_resolversManifests"/>.
+        /// </summary>
         private readonly object _lock = new();
 
+        /// <summary>
+        /// A static instance of <see cref="CachingSdkResolverLoader"/>.
+        /// </summary>
+        /// <remarks>
+        /// The set of available SDK resolvers is expected to be fixed for the given MSBuild installation so it should be safe to use
+        /// a static instance as opposed to creating <see cref="CachingSdkResolverLoader"/> or <see cref="SdkResolverLoader"/> for each
+        /// <see cref="SdkResolverService" /> instance.
+        /// </remarks>
         public static CachingSdkResolverLoader Instance = new CachingSdkResolverLoader();
 
+        /// <summary>
+        /// Initializes a new instance by setting <see cref="_defaultResolvers"/>.
+        /// </summary>
         public CachingSdkResolverLoader()
         {
             _defaultResolvers = base.GetDefaultResolvers();
         }
 
+        #region SdkResolverLoader overrides
+
+        /// <inheritdoc />
         internal override IReadOnlyList<SdkResolver> GetDefaultResolvers() => _defaultResolvers;
 
+        /// <inheritdoc />
         internal override IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)
         {
             lock (_lock)
@@ -35,6 +71,7 @@ internal override IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation lo
             }
         }
 
+        /// <inheritdoc />
         internal override IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)
         {
             lock (_lock)
@@ -43,9 +80,12 @@ internal override IReadOnlyList<SdkResolverManifest> GetResolversManifests(Eleme
             }
         }
 
+        /// <inheritdoc />
         protected internal override IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, ElementLocation location)
         {
             return _resolversByManifest.GetOrAdd(manifest, (manifest) => base.LoadResolversFromManifest(manifest, location));
         }
+
+        #endregion
     }
 }
