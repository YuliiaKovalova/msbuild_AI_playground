diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index e891ed223c4..67211078842 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -22,9 +22,10 @@
     <AssemblyName>Microsoft.NET.StringTools.net35</AssemblyName>
   </PropertyGroup>
 
-    <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
-      <PublishWindowsPdb>false</PublishWindowsPdb>
-    </PropertyGroup>
+  <!-- pdb publishing fails builds in the ns2.0 flavor -->
+  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
+    <PublishWindowsPdb>false</PublishWindowsPdb>
+  </PropertyGroup>
 
   <ItemGroup Condition="'$(TargetFramework)' != 'net35'">
     <PackageReference Include="System.Memory" />
diff --git a/src/StringTools/WeakStringCache.Concurrent.cs b/src/StringTools/WeakStringCache.Concurrent.cs
index f99bbf26501..3261141fcbf 100644
--- a/src/StringTools/WeakStringCache.Concurrent.cs
+++ b/src/StringTools/WeakStringCache.Concurrent.cs
@@ -32,12 +32,12 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi
         {
             int hashCode = internable.GetHashCode();
 
-            StringWeakHandle handle;
+            StringWeakHandle? handle;
             string? result;
 
             // Get the existing handle from the cache and lock it while we're dereferencing it to prevent a race with the Scavenge
             // method running on another thread and freeing the handle from underneath us.
-            if (_stringsByHashCode.TryGetValue(hashCode, out handle!))
+            if (_stringsByHashCode.TryGetValue(hashCode, out handle))
             {
                 lock (handle)
                 {
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index 658022ff2dd..01c304b5ca2 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -185,7 +185,7 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                         {
                             Log.LogMessageFromResources(MessageImportance.High, "DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
 
-#if NET5_0_OR_GREATER
+#if RUNTIME_TYPE_NETCORE
                             using (Stream responseStream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false))
 #else
                             using (Stream responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
@@ -242,19 +242,20 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
                 }
 
 #if RUNTIME_TYPE_NETCORE
+                // net5.0 included StatusCode in the HttpRequestException.
                 switch (httpRequestException.StatusCode)
                 {
                     case HttpStatusCode.InternalServerError:
                     case HttpStatusCode.RequestTimeout:
                         return true;
                 }
-#endif
+            }
+#else
             }
 
-#if !RUNTIME_TYPE_NETCORE
+            // framework workaround for HttpRequestException not containing StatusCode
             if (actualException is CustomHttpRequestException customHttpRequestException)
             {
-                // A wrapped CustomHttpRequestException has the status code from the error
                 switch (customHttpRequestException.StatusCode)
                 {
                     case HttpStatusCode.InternalServerError:
@@ -264,6 +265,7 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
             }
 #endif
 
+
             if (actualException is WebException webException)
             {
                 // WebException is thrown when accessing the Content of the response
@@ -312,6 +314,7 @@ private bool TryGetFileName(HttpResponseMessage response, out string filename)
 #if !RUNTIME_TYPE_NETCORE
         /// <summary>
         /// Represents a wrapper around the <see cref="HttpRequestException"/> that also contains the <see cref="HttpStatusCode"/>.
+        /// DEPRECATED as of net5.0, which included the StatusCode in the HttpRequestException class.
         /// </summary>
         private sealed class CustomHttpRequestException : HttpRequestException
         {
@@ -325,7 +328,7 @@ public CustomHttpRequestException(string message, Exception inner, HttpStatusCod
         }
 #endif
 
-private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)
+        private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)
         {
             return SkipUnchangedFiles
                    && destinationFile.Exists
