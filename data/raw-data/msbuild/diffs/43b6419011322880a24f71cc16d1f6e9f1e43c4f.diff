diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index f44763b5d7c..9e0909a1e94 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using System.Reflection;
 using Microsoft.Build.BackEnd.Logging;
@@ -31,7 +32,7 @@ internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule
     /// </summary>
     public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)
     {
-        var analyzersFactories = new List<BuildAnalyzerFactory>();
+        var analyzersFactories = new List<BuildAnalyzerFactory?>();
 
         try
         {
@@ -42,12 +43,13 @@ public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisiti
             assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);
 #endif
 
+            Debugger.Launch();
             IList<Type> availableTypes = assembly.GetExportedTypes();
             IList<Type> analyzerTypes = availableTypes.Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t)).ToArray();
 
             foreach (Type analyzerCandidate in analyzerTypes)
             {
-                analyzersFactories.Add(() => (BuildAnalyzer)Activator.CreateInstance(analyzerCandidate));
+                analyzersFactories.Add(() => (BuildAnalyzer)Activator.CreateInstance(analyzerCandidate)!);
             }
 
             if (availableTypes.Count != analyzerTypes.Count)
