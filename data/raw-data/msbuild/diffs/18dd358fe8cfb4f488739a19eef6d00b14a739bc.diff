diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index e26ef6b8d23..69ce310cc7b 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -40,7 +40,7 @@ public static List<string> ANSIWrap(string text, int position)
                 result.Add(textSpan.Slice(0, breakpoint).ToString());
                 textSpan = textSpan.Slice(breakpoint);
             }
-            result.Add(text);
+            result.Add(textSpan.ToString());
             return result;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 90204d201b1..d5ca972b0fb 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -47,6 +46,10 @@ public void Initialize(IEventSource eventSource)
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine("");
+           /* for (int i = 0; i < 100; i++)
+            {
+                FancyLoggerBuffer.WriteNewLine(new string(Convert.ToString(i, 16)[0], 120));
+            }*/
         }
 
         // Build
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 3cf6b4b2cc4..81faac3ac5f 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -21,7 +21,8 @@ public string Text
             set
             {
                 _text = value;
-                WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth + 1);
+                // TODO: Replace with console.bufferwidth
+                WrappedText = ANSIBuilder.ANSIWrap(value, 80);
             }
         }
 
@@ -52,7 +53,7 @@ public static void Initialize()
             Task.Run(async () => {
                 while (true)
                 {
-                    await Task.Delay(500 / 60);
+                    await Task.Delay((1/60)/1000);
                     Render();
                 }
             });
@@ -87,9 +88,9 @@ public static void Terminate()
         }
 
         #region Rendering
+        // private static List<string> lineContents = new();
         public static void Render()
         {
-            if (Lines.Count == 0) return;
             // Write Header
             Console.Write(
                 // Write header
@@ -100,6 +101,8 @@ public static void Render()
                 // TODO: Remove and replace with actual footer
                 new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
             );
+            if (Lines.Count == 0) return;
+
             // Get lines with wrappings
             List<string> lineContents = new();
             int lineCount = Lines.Count;
@@ -114,10 +117,10 @@ public static void Render()
                 Console.Write(
                     ANSIBuilder.Cursor.Position(i + 2, 0) +
                     ANSIBuilder.Eraser.LineCursorToEnd() + 
-                    (lineIndex < lineContents.Count ? lineContents[lineIndex] : String.Empty)
+                    (lineIndex < Lines.Count ? Lines[lineIndex].Text : String.Empty)
                 );
             }
-            Console.Out.FlushAsync();
+            Console.Out.Flush();
         }
         #endregion
         #region Line identification
