diff --git a/src/Build.UnitTests/Definition/Toolset_Tests.cs b/src/Build.UnitTests/Definition/Toolset_Tests.cs
index 2bf6e660b37..3a5c5a3f0c1 100644
--- a/src/Build.UnitTests/Definition/Toolset_Tests.cs
+++ b/src/Build.UnitTests/Definition/Toolset_Tests.cs
@@ -6,6 +6,7 @@
 using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Internal;
@@ -13,6 +14,7 @@
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
 using Xunit.NetCore.Extensions;
+using static Microsoft.Build.Engine.UnitTests.TestComparers.TaskRegistryComparers;
 
 #nullable disable
 
@@ -123,45 +125,7 @@ public void ValidateToolsetTranslation()
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             Toolset t2 = Toolset.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal(t.ToolsVersion, t2.ToolsVersion);
-            Assert.Equal(t.ToolsPath, t2.ToolsPath);
-            Assert.Equal(t.OverrideTasksPath, t2.OverrideTasksPath);
-            Assert.Equal(t.Properties.Count, t2.Properties.Count);
-
-            foreach (string key in t.Properties.Values.Select(p => p.Name))
-            {
-                Assert.Equal(t.Properties[key].Name, t2.Properties[key].Name);
-                Assert.Equal(t.Properties[key].EvaluatedValue, t2.Properties[key].EvaluatedValue);
-            }
-
-            Assert.Equal(t.SubToolsets.Count, t2.SubToolsets.Count);
-
-            foreach (string key in t.SubToolsets.Keys)
-            {
-                SubToolset subToolset1 = t.SubToolsets[key];
-                SubToolset subToolset2 = null;
-
-                if (t2.SubToolsets.TryGetValue(key, out subToolset2))
-                {
-                    Assert.Equal(subToolset1.SubToolsetVersion, subToolset2.SubToolsetVersion);
-                    Assert.Equal(subToolset1.Properties.Count, subToolset2.Properties.Count);
-
-                    foreach (string subToolsetPropertyKey in subToolset1.Properties.Values.Select(p => p.Name))
-                    {
-                        Assert.Equal(subToolset1.Properties[subToolsetPropertyKey].Name, subToolset2.Properties[subToolsetPropertyKey].Name);
-                        Assert.Equal(subToolset1.Properties[subToolsetPropertyKey].EvaluatedValue, subToolset2.Properties[subToolsetPropertyKey].EvaluatedValue);
-                    }
-                }
-                else
-                {
-                    Assert.True(false, $"Sub-toolset {key} was lost in translation.");
-                }
-            }
-
-            Assert.Equal(t.DefaultOverrideToolsVersion, t2.DefaultOverrideToolsVersion);
-
-            Assert.NotNull(t2.ImportPropertySearchPathsTable);
-            Assert.Single(t2.ImportPropertySearchPathsTable);
+            Assert.Equal(t, t2, new ToolsetComparer());
             Assert.Equal(@"c:\foo", t2.ImportPropertySearchPathsTable["MSBuildExtensionsPath"].SearchPaths[0]);
         }
 
diff --git a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
index 9cbb3ea8b5f..1879f853163 100644
--- a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Definition;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -480,8 +481,8 @@ public void CloneTaskRegistry()
             ProjectInstance first = GetSampleProjectInstance();
             ProjectInstance second = first.DeepCopy();
 
-            // Task registry object should be immutable
-            first.TaskRegistry.ShouldBeSameAs(second.TaskRegistry);
+            // Task registry object should be cloned
+            Assert.Equal(first.TaskRegistry, second.TaskRegistry, new TaskRegistryComparers.TaskRegistryComparer());
         }
 
         /// <summary>
@@ -530,7 +531,7 @@ public void CloneToolsVersion()
             ProjectInstance first = GetSampleProjectInstance();
             ProjectInstance second = first.DeepCopy();
 
-            second.Toolset.ShouldBe(first.Toolset);
+            Assert.Equal(first.Toolset, second.Toolset, new TaskRegistryComparers.ToolsetComparer());
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
index 380d2b73bb6..ca917be30dd 100644
--- a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
+++ b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -137,6 +138,26 @@ public bool Equals(Toolset x, Toolset y)
                         Assert.Equal(xp.Value.EvaluatedValue, yp.Value.EvaluatedValue);
                     });
 
+                Helpers.AssertDictionariesEqual(
+                    x.SubToolsets,
+                    y.SubToolsets,
+                    (xp, yp) =>
+                    {
+                        Assert.Equal(xp.Key, yp.Key);
+                        SubToolset subToolset1 = xp.Value;
+                        SubToolset subToolset2 = yp.Value;
+                        Assert.Equal(subToolset1.SubToolsetVersion, subToolset2.SubToolsetVersion);
+                        Assert.Equal(subToolset1.Properties.Count, subToolset2.Properties.Count);
+
+                        foreach (string subToolsetPropertyKey in subToolset1.Properties.Values.Select(p => p.Name))
+                        {
+                            Assert.Equal(subToolset1.Properties[subToolsetPropertyKey].Name, subToolset2.Properties[subToolsetPropertyKey].Name);
+                            Assert.Equal(subToolset1.Properties[subToolsetPropertyKey].EvaluatedValue, subToolset2.Properties[subToolsetPropertyKey].EvaluatedValue);
+                        }
+                    });
+
+                Assert.Equal(x.DefaultOverrideToolsVersion, y.DefaultOverrideToolsVersion);
+
                 return true;
             }
 
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index cf9cd8647f6..515931abb49 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -760,24 +760,24 @@ internal RegisteredTaskIdentity(string name, IDictionary<string, string> taskIde
                 _name = name;
 
                 // The ReadOnlyDictionary is a *wrapper*, the Dictionary is the copy.
-                _taskIdentityParameters = taskIdentityParameters == null ? null : CreateTaskIdentityParametersDictionary(taskIdentityParameters);
+                _taskIdentityParameters = taskIdentityParameters == null ? null : new ReadOnlyDictionary<string, string>(CreateTaskIdentityParametersDictionary(taskIdentityParameters));
             }
 
-            private static ReadOnlyDictionary<string, string> CreateTaskIdentityParametersDictionary(IDictionary<string, string> initialState = null, int? initialCount = null)
+            private static IDictionary<string, string> CreateTaskIdentityParametersDictionary(IDictionary<string, string> initialState = null, int? initialCount = null)
             {
                 ErrorUtilities.VerifyThrowInvalidOperation(initialState == null || initialCount == null, "at most one can be non-null");
 
                 if (initialState != null)
                 {
-                    return new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(initialState, StringComparer.OrdinalIgnoreCase));
+                    return new Dictionary<string, string>(initialState, StringComparer.OrdinalIgnoreCase);
                 }
 
                 if (initialCount != null)
                 {
-                    return new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(initialCount.Value, StringComparer.OrdinalIgnoreCase));
+                    return new Dictionary<string, string>(initialCount.Value, StringComparer.OrdinalIgnoreCase);
                 }
 
-                return new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));
+                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             }
 
             public RegisteredTaskIdentity()
