diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
index 293c3e3820f..c0b42f373b5 100644
--- a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
@@ -1,7 +1,6 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Diagnostics;
 using System.IO;
 using System.Net.Http;
 using System.Runtime.InteropServices;
@@ -16,7 +15,7 @@ namespace MSBuild.Bootstrap.Utils.Tasks
     /// This task is designed to automate the installation of .NET Core SDK.
     /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.
     /// </summary>
-    public sealed class InstallDotNetCoreTask : Task
+    public sealed class InstallDotNetCoreTask : ToolTask
     {
         private const string ScriptName = "dotnet-install";
 
@@ -55,6 +54,8 @@ public InstallDotNetCoreTask()
 
         private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
 
+        protected override string ToolName => IsWindows ? "powershell.exe" : "/bin/bash";
+
         /// <summary>
         /// Executes the task, downloading and running the .NET Core installation script.
         /// </summary>
@@ -78,6 +79,8 @@ public override bool Execute()
             return RunScript(executionSettings);
         }
 
+        protected override string GenerateFullPathToTool() => ToolName;
+
         /// <summary>
         /// Downloads the .NET Core installation script asynchronously from the specified URL.
         /// </summary>
@@ -109,31 +112,12 @@ private async AsyncTasks.Task DownloadScriptAsync(string scriptName, string scri
         /// <param name="scriptPath">The path of the script to make executable.</param>
         private void MakeScriptExecutable(string scriptPath)
         {
-            if (IsWindows)
-            {
-                return;
-            }
-
-            using (var process = new Process
+            if (!IsWindows)
             {
-                StartInfo = new ProcessStartInfo
+                int exitCode = ExecuteTool("/bin/chmod", string.Empty, $"+x {scriptPath}");
+                if (exitCode != 0)
                 {
-                    FileName = "/bin/chmod",
-                    Arguments = $"+x {scriptPath}",
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    CreateNoWindow = true,
-                },
-            })
-            {
-                _ = process.Start();
-                process.WaitForExit();
-
-                if (process.ExitCode != 0)
-                {
-                    string errors = process.StandardError.ReadToEnd() ?? string.Empty;
-                    Log.LogError($"Install-scripts can not be made executable due to the errors: {errors}.");
+                    Log.LogError($"Install-scripts can not be made executable due to the errors reported above.");
                 }
             }
         }
@@ -145,30 +129,13 @@ private void MakeScriptExecutable(string scriptPath)
         /// <returns>True if the script executed successfully; otherwise, false.</returns>
         private bool RunScript(ScriptExecutionSettings executionSettings)
         {
-            if (Log.HasLoggedErrors)
-            {
-                return false;
-            }
-
-            using (Process process = new Process { StartInfo = executionSettings.StartInfo })
+            if (!Log.HasLoggedErrors)
             {
-                bool started = process.Start();
-                if (started)
-                {
-                    string output = process.StandardOutput.ReadToEnd() ?? string.Empty;
-                    Log.LogMessage($"Install-scripts output logs: {output}");
-
-                    process.WaitForExit();
+                int exitCode = ExecuteTool(ToolName, string.Empty, executionSettings.ExecutableArgs);
 
-                    if (process.ExitCode != 0)
-                    {
-                        string errors = process.StandardError.ReadToEnd() ?? string.Empty;
-                        Log.LogError($"Install-scripts execution errors: {errors}");
-                    }
-                }
-                else
+                if (exitCode != 0)
                 {
-                    Log.LogError("Process for install-scripts execution has not started.");
+                    Log.LogError($"Install-scripts was not executed successfully.");
                 }
             }
 
@@ -187,29 +154,19 @@ private ScriptExecutionSettings SetupScriptsExecutionSettings()
                 ? $"-NoProfile -ExecutionPolicy Bypass -File {scriptPath} -Version {Version} -InstallDir {InstallDir}"
                 : $"{scriptPath} --version {Version} --install-dir {InstallDir}";
 
-            var startInfo = new ProcessStartInfo
-            {
-                FileName = IsWindows ? "powershell.exe" : "/bin/bash",
-                Arguments = scriptArgs,
-                RedirectStandardOutput = true,
-                RedirectStandardError = true,
-                UseShellExecute = false,
-                CreateNoWindow = true,
-            };
-
-            return new ScriptExecutionSettings(startInfo, $"{ScriptName}.{scriptExtension}", scriptPath);
+            return new ScriptExecutionSettings($"{ScriptName}.{scriptExtension}", scriptPath, scriptArgs);
         }
 
         /// <summary>
         /// A private struct to hold settings for script execution.
         /// </summary>
-        private struct ScriptExecutionSettings(ProcessStartInfo startInfo, string scriptName, string scriptsFullPath)
+        private readonly struct ScriptExecutionSettings(string scriptName, string scriptsFullPath, string executableArgs)
         {
-            public ProcessStartInfo StartInfo { get; } = startInfo;
-
             public string ScriptName { get; } = scriptName;
 
             public string ScriptsFullPath { get; } = scriptsFullPath;
+
+            public string ExecutableArgs { get; } = executableArgs;
         }
     }
 }
