diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index c4a4985803f..b4bad9a7cb9 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4420,28 +4420,23 @@ private static bool CreateAndConfigureLogger(
             }
             catch (IOException e) when (!loggerDescription.IsOptional)
             {
-                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerDescription.Name, e.Message));
-                InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
+                ReportOptionalLoggerCreation(loggerDescription.Name, unquotedParameter, e);
             }
             catch (BadImageFormatException e) when (!loggerDescription.IsOptional)
             {
-                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerDescription.Name, e.Message));
-                InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
+                ReportOptionalLoggerCreation(loggerDescription.Name, unquotedParameter, e);
             }
             catch (SecurityException e) when (!loggerDescription.IsOptional)
             {
-                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerDescription.Name, e.Message));
-                InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
+                ReportOptionalLoggerCreation(loggerDescription.Name, unquotedParameter, e);
             }
             catch (ReflectionTypeLoadException e) when (!loggerDescription.IsOptional)
             {
-                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerDescription.Name, e.Message));
-                InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
+                ReportOptionalLoggerCreation(loggerDescription.Name, unquotedParameter, e);
             }
             catch (MemberAccessException e) when (!loggerDescription.IsOptional)
             {
-                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerDescription.Name, e.Message));
-                InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
+                ReportOptionalLoggerCreation(loggerDescription.Name, unquotedParameter, e);
             }
             catch (TargetInvocationException e) when (!loggerDescription.IsOptional)
             {
@@ -4479,6 +4474,12 @@ private static bool CreateAndConfigureLogger(
             return true;
         }
 
+        private static void ReportOptionalLoggerCreation(string loggerName, string unquotedParameter, Exception e)
+        {
+            Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerName, e.Message));
+            InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
+        }
+
         private static void ReplayBinaryLog(
             string binaryLogFilePath,
             ILogger[] loggers,
