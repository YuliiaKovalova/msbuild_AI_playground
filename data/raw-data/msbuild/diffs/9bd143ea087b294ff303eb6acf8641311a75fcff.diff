diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 876604aed05..c475fca14a1 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1264,7 +1264,7 @@ private int AddGlobalProperties()
                     _ = _data.SetProperty(
                             globalProperty.Name,
                             ((IProperty)globalProperty).EvaluatedValueEscaped,
-                            isGlobalProperty: false /* it is a global property, but it comes from command line and is tracked separately */,
+                            isGlobalProperty: true /* it is a global property, but it comes from command line and is tracked separately */,
                             false /* may NOT be a reserved name */,
                             loggingContext: _evaluationLoggingContext,
                             isCommandLineProperty: true /* IS coming from command line argument */);
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 50a20a8907d..e5889735023 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -97,7 +97,7 @@ public P SetProperty(
             bool isCommandLineProperty = false)
         {
             P? originalProperty = _wrapped.GetProperty(name);
-            P newProperty = _wrapped.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, _evaluationLoggingContext, isEnvironmentVariable);
+            P newProperty = _wrapped.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, _evaluationLoggingContext, isEnvironmentVariable, isCommandLineProperty);
 
             this.TrackPropertyWrite(
                 originalProperty,
@@ -292,6 +292,7 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source, IEl
             {
                 return;
             }
+
             var args = new PropertyInitialValueSetEventArgs(
                                     property.Name,
                                     property.EvaluatedValue,
@@ -365,10 +366,10 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
         private PropertySource DeterminePropertySource(bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable, bool isCommandLineProperty) =>
             (isGlobalProperty, mayBeReserved, isEnvironmentVariable, isCommandLineProperty) switch
             {
-                (true, _, _, _) => PropertySource.Global,
+                (true, _, _, false) => PropertySource.Global,
                 (_, true, _, _) => PropertySource.BuiltIn,
                 (_, _, true, _) => PropertySource.EnvironmentVariable,
-                (_, _, _, true) => PropertySource.CommandLine,
+                (true, _, _, true) => PropertySource.CommandLine,
                 _ => PropertySource.Toolset,
             };
 
