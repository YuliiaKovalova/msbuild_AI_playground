diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 4d3ee3c27fe..c304bdbe7e4 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -567,36 +567,20 @@ internal static string GetRuntimeVersion(string path)
 #if FEATURE_MSCOREE
             if (NativeMethodsShared.IsWindows)
             {
-                char[] runtimeVersion;
-                uint hresult;
-                string output = string.Empty;
-#if DEBUG
-                // Just to make sure and exercise the code that doubles the size
-                // every time GetRequestedRuntimeInfo fails due to insufficient buffer size.
-                int bufferLength = 1;
-#else
-                int bufferLength = 11; // 11 is the length of a runtime version and null terminator v2.0.50727/0
-#endif
-                do
+                unsafe
                 {
-                    runtimeVersion = System.Buffers.ArrayPool<char>.Shared.Rent(bufferLength);
-                    try
-                    {
-                        hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out int dwLength);
-                        bufferLength *= 2;
-                        if (hresult == NativeMethodsShared.S_OK)
-                        {
-                            output = new string(runtimeVersion, 0, dwLength - 1);
-                        }
-                    }
-                    finally
-                    {
-                        System.Buffers.ArrayPool<char>.Shared.Return(runtimeVersion);
-                    }
-                }
-                while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
-
-                return output;
+                    // Run the first GetFileVersion to get the required buffer size.
+                    int bufferLength = 1;
+                    uint hresult = NativeMethods.GetFileVersion(path, null, bufferLength, out int dwLength);
+
+                    // Allocate buffer based on the returned length.
+                    bufferLength = dwLength;
+                    char* runtimeVersion = stackalloc char[dwLength];
+
+                    // Get the RuntimeVersion in this second call.
+                    hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out dwLength);
+                    return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
+                }                
             }
             else
             {
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index 5315168e7c9..539356d0861 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1129,7 +1129,7 @@ internal static extern int CreateAssemblyNameObject(
         /// <param name="dwLength">The size, in bytes, of the returned szBuffer.</param>
         /// <returns>HResult.</returns>
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static extern uint GetFileVersion([MarshalAs(UnmanagedType.LPWStr)] string szFileName, [Out] char[] szBuffer, int cchBuffer, out int dwLength);
+        internal static extern unsafe uint GetFileVersion([MarshalAs(UnmanagedType.LPWStr)] string szFileName, [Out] char* szBuffer, int cchBuffer, out int dwLength);
 #endif
         #endregion
 
