diff --git a/src/Framework/LogInterpolatedStringHandler.cs b/src/Framework/LogInterpolatedStringHandler.cs
new file mode 100644
index 00000000000..ce82bf69499
--- /dev/null
+++ b/src/Framework/LogInterpolatedStringHandler.cs
@@ -0,0 +1,63 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+#if NET6_0_OR_GREATER
+
+using System;
+using System.Runtime.CompilerServices;
+
+namespace Microsoft.Build.Framework
+{
+    [InterpolatedStringHandler]
+    public ref struct LogInterpolatedStringHandler
+    {
+        private char[] buffer;
+        private int position = 0;
+        private int argPosition = 0;
+
+        public object[] Arguments { get; } = Array.Empty<object>();
+
+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)
+        {
+            if (formattedCount > 99)
+            {
+                throw new ArgumentOutOfRangeException("Number of formatted arguments must be less than 100.");
+            }
+
+            // Length is computed with reserved space for "{x}" and "{xx}" placeholders 
+            buffer = new char[literalLength + (4 * formattedCount)];
+
+            if (formattedCount > 0)
+            {
+                Arguments = new object[formattedCount];
+            }
+        }
+
+        public void AppendLiteral(string s)
+        {
+            s.AsSpan().CopyTo(buffer.AsSpan().Slice(position));
+            position += s.Length;
+        }
+
+        public void AppendFormatted<T>(T t)
+        {
+            string indexString = argPosition.ToString();
+            buffer[position++] = '{';
+            indexString.AsSpan().CopyTo(buffer.AsSpan().Slice(position));
+            position += indexString.Length;
+            buffer[position++] = '}';
+
+            Arguments[argPosition++] = t;
+        }
+
+        internal string GetFormat()
+        {
+            string result = new string(buffer, 0, position);
+
+            return result;
+        }
+    }
+}
+
+#endif
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index e3a4a2b9f7d..fce62ef398b 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -258,6 +258,33 @@ public bool LogsMessagesOfImportance(MessageImportance importance)
                 || buildEngine10.EngineServices.LogsMessagesOfImportance(importance);
         }
 
+#if NET6_0_OR_GREATER
+
+        /// <summary>
+        /// Logs a message using the specified interpolated string.
+        /// Thread safe.
+        /// </summary>
+        /// <param name="stringHandler">The message interpolated string.</param>
+        public void LogMessage(LogInterpolatedStringHandler stringHandler)
+        {
+            LogMessage(MessageImportance.Normal, stringHandler);
+        }
+
+        /// <summary>
+        /// Logs a message using the specified interpolated string.
+        /// Thread safe.
+        /// </summary>
+        /// <param name="importance">The importance level of the message.</param>
+        /// <param name="stringHandler">The message interpolated string.</param>
+        public void LogMessage(MessageImportance importance, LogInterpolatedStringHandler stringHandler)
+        {
+            if (LogsMessagesOfImportance(importance))
+            {
+                LogMessage(importance, stringHandler.GetFormat(), stringHandler.Arguments);
+            }
+        }
+#endif
+
         /// <summary>
         /// Logs a message using the specified string.
         /// Thread safe.
@@ -593,6 +620,19 @@ public void LogCommandLine(MessageImportance importance, string commandLine)
 
         #region Error logging methods
 
+#if NET6_0_OR_GREATER
+
+        /// <summary>
+        /// Logs an error message using the specified interpolated string.
+        /// Thread safe.
+        /// </summary>
+        /// <param name="stringHandler">The message interpolated string.</param>
+        public void LogError(LogInterpolatedStringHandler stringHandler)
+        {
+            LogError(stringHandler.GetFormat(), stringHandler.Arguments);
+        }
+#endif
+
         /// <summary>
         /// Logs an error using the specified string.
         /// Thread safe.
@@ -944,6 +984,19 @@ public void LogErrorFromException(Exception exception, bool showStackTrace, bool
 
         #region Warning logging methods
 
+#if NET6_0_OR_GREATER
+
+        /// <summary>
+        /// Logs a warning message using the specified interpolated string.
+        /// Thread safe.
+        /// </summary>
+        /// <param name="stringHandler">The message interpolated string.</param>
+        public void LogWarning(LogInterpolatedStringHandler stringHandler)
+        {
+            LogWarning(stringHandler.GetFormat(), stringHandler.Arguments);
+        }
+#endif
+
         /// <summary>
         /// Logs a warning using the specified string.
         /// Thread safe.
diff --git a/src/Utilities.UnitTests/MockEngine.cs b/src/Utilities.UnitTests/MockEngine.cs
index e5b5986bee8..5962b8a146d 100644
--- a/src/Utilities.UnitTests/MockEngine.cs
+++ b/src/Utilities.UnitTests/MockEngine.cs
@@ -31,6 +31,8 @@ internal sealed class MockEngine : IBuildEngine3
     {
         private StringBuilder _log = new StringBuilder();
 
+        public List<LazyFormattedBuildEventArgs> BuildEventArgs { get; } = new List<LazyFormattedBuildEventArgs>();
+
         public MessageImportance MinimumMessageImportance { get; set; } = MessageImportance.Low;
 
         internal int Messages { set; get; }
@@ -43,6 +45,8 @@ internal sealed class MockEngine : IBuildEngine3
 
         public void LogErrorEvent(BuildErrorEventArgs eventArgs)
         {
+            BuildEventArgs.Add(eventArgs);
+
             Console.WriteLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             _log.AppendLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             ++Errors;
@@ -50,6 +54,8 @@ public void LogErrorEvent(BuildErrorEventArgs eventArgs)
 
         public void LogWarningEvent(BuildWarningEventArgs eventArgs)
         {
+            BuildEventArgs.Add(eventArgs);
+
             Console.WriteLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             _log.AppendLine(EventArgsFormatting.FormatEventMessage(eventArgs));
             ++Warnings;
@@ -66,6 +72,8 @@ public void LogMessageEvent(BuildMessageEventArgs eventArgs)
             // Only if the message is above the minimum importance should we record the log message
             if (eventArgs.Importance <= MinimumMessageImportance)
             {
+                BuildEventArgs.Add(eventArgs);
+
                 Console.WriteLine(eventArgs.Message);
                 _log.AppendLine(eventArgs.Message);
                 ++Messages;
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index 33c2cab46f3..8b0c6d1c58e 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -141,6 +140,50 @@ public void LogMessageWithUnmatchedCurly()
             mockEngine.AssertLogContains("{4");
         }
 
+#if NET6_0_OR_GREATER
+        [Fact]
+        public void LogMessageWithInterpolatedString()
+        {
+            MockEngine mockEngine = new MockEngine();
+            Task t = new MockTask();
+            t.BuildEngine = mockEngine;
+
+            t.Log.LogMessage($"echo {0} and {"1"}");
+
+            mockEngine.BuildEventArgs.Count.ShouldBe(1);
+            mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildMessageEventArgs>();
+            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1");
+        }
+
+        [Fact]
+        public void LogWarningWithInterpolatedString()
+        {
+            MockEngine mockEngine = new MockEngine();
+            Task t = new MockTask();
+            t.BuildEngine = mockEngine;
+
+            t.Log.LogWarning($"echo {0} and {"1"}");
+
+            mockEngine.BuildEventArgs.Count.ShouldBe(1);
+            mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildWarningEventArgs>();
+            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1");
+        }
+
+        [Fact]
+        public void LogErrorWithInterpolatedString()
+        {
+            MockEngine mockEngine = new MockEngine();
+            Task t = new MockTask();
+            t.BuildEngine = mockEngine;
+
+            t.Log.LogError($"echo {0} and {"1"}");
+
+            mockEngine.BuildEventArgs.Count.ShouldBe(1);
+            mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildErrorEventArgs>();
+            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1");
+        }
+#endif
+
         [Fact]
         public void LogFromResources()
         {
