diff --git a/src/Build/Globbing/CompositeGlob.cs b/src/Build/Globbing/CompositeGlob.cs
index 09b34cdd77b..4be643c1695 100644
--- a/src/Build/Globbing/CompositeGlob.cs
+++ b/src/Build/Globbing/CompositeGlob.cs
@@ -62,7 +62,7 @@ public bool IsMatch(string stringToMatch)
             // Threadpools are a scarce resource in Visual Studio, do not use them.
             //return Globs.AsParallel().Any(g => g.IsMatch(stringToMatch));
 
-            return _globs.Any(g => g.IsMatch(stringToMatch));
+            return _globs.Any(static (glob, str) => glob.IsMatch(str), stringToMatch);
         }
 
         /// <summary>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index f7540863381..45917ee5012 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -162,6 +162,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="Utilities\ImmutableCollectionsExtensions.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskParameterElementLink.cs" />
     <Compile Include="ObjectModelRemoting\ExternalProjectsProvider.cs" />
diff --git a/src/Build/Utilities/ImmutableCollectionsExtensions.cs b/src/Build/Utilities/ImmutableCollectionsExtensions.cs
new file mode 100644
index 00000000000..242c5248400
--- /dev/null
+++ b/src/Build/Utilities/ImmutableCollectionsExtensions.cs
@@ -0,0 +1,40 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Immutable;
+
+// Added to the System.Linq extension method as these extensions augment those
+// provided by Linq. The immutable collections library includes ImmutableArrayExtensions
+// which is also in this namespace.
+
+namespace System.Linq
+{
+    internal static class ImmutableCollectionsExtensions
+    {
+        /// <summary>
+        /// Gets a value indicating whether any elements are in this collection
+        /// that match a given condition.
+        /// </summary>
+        /// <remarks>
+        /// This extension method accepts an argument which is then passed, on the stack, to the predicate.
+        /// This allows using a static lambda, which can avoid a per-call allocation of a closure object.
+        /// </remarks>
+        /// <typeparam name="TElement">The type of element contained by the collection.</typeparam>
+        /// <typeparam name="TArg">The type of argument passed to <paramref name="predicate"/>.</typeparam>
+        /// <param name="immutableArray">The array to check.</param>
+        /// <param name="predicate">The predicate.</param>
+        /// <param name="arg">The argument to pass to <paramref name="predicate"/>.</param>
+        public static bool Any<TElement, TArg>(this ImmutableArray<TElement> immutableArray, Func<TElement, TArg, bool> predicate, TArg arg)
+        {
+            foreach (TElement element in immutableArray)
+            {
+                if (predicate(element, arg))
+                {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+}
