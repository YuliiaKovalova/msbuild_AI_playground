diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index 07bf48a0cb3..b96ccfd0dde 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -89,9 +89,9 @@ public void CheckMessageCode()
         [Fact]
         public void CheckMessageFromStreamParsesErrorsAndMessagesCorrectly()
         {
-            IBuildEngine2 MockEngine3 = new MockEngine3();
+            IBuildEngine2 mockEngine = new MockEngine3();
             Task t = new MockTask();
-            t.BuildEngine = MockEngine3;
+            t.BuildEngine = mockEngine;
 
             // This should return true since I am passing a canonical error as the stream
             StringReader sr = new StringReader("error MSB4040: There is no target in the project.");
@@ -109,12 +109,12 @@ public void CheckMessageFromStreamParsesErrorsAndMessagesCorrectly()
         [Fact]
         public void LogCommandLine()
         {
-            MockEngine3 MockEngine3 = new MockEngine3();
+            MockEngine3 mockEngine = new MockEngine3();
             Task t = new MockTask();
-            t.BuildEngine = MockEngine3;
+            t.BuildEngine = mockEngine;
 
             t.Log.LogCommandLine("MySuperCommand");
-            MockEngine3.Log.ShouldContain("MySuperCommand");
+            mockEngine.Log.ShouldContain("MySuperCommand");
         }
 
         /// <summary>
@@ -124,9 +124,9 @@ public void LogCommandLine()
         [Fact]
         public void LogMessageWithUnmatchedCurly()
         {
-            MockEngine3 MockEngine3 = new MockEngine3();
+            MockEngine3 mockEngine = new MockEngine3();
             Task t = new MockTask();
-            t.BuildEngine = MockEngine3;
+            t.BuildEngine = mockEngine;
 
             t.Log.LogMessage("echo {");
             t.Log.LogMessageFromText("{1", MessageImportance.High);
@@ -134,19 +134,19 @@ public void LogMessageWithUnmatchedCurly()
             t.Log.LogWarning("{3");
             t.Log.LogError("{4");
 
-            MockEngine3.AssertLogContains("echo {");
-            MockEngine3.AssertLogContains("{1");
-            MockEngine3.AssertLogContains("{2");
-            MockEngine3.AssertLogContains("{3");
-            MockEngine3.AssertLogContains("{4");
+            mockEngine.AssertLogContains("echo {");
+            mockEngine.AssertLogContains("{1");
+            mockEngine.AssertLogContains("{2");
+            mockEngine.AssertLogContains("{3");
+            mockEngine.AssertLogContains("{4");
         }
 
         [Fact]
         public void LogFromResources()
         {
-            MockEngine3 MockEngine3 = new MockEngine3();
+            MockEngine3 mockEngine = new MockEngine3();
             Task t = new MockTask();
-            t.BuildEngine = MockEngine3;
+            t.BuildEngine = mockEngine;
 
             t.Log.LogErrorFromResources("MySubcategoryResource", null,
                 "helpkeyword", "filename", 1, 2, 3, 4, "MyErrorResource", "foo");
@@ -158,10 +158,10 @@ public void LogFromResources()
 
             t.Log.LogWarningFromResources("MyWarningResource", "foo");
 
-            MockEngine3.Log.Contains("filename(1,2,3,4): Romulan error : Oops I wiped your harddrive foo").ShouldBeTrue();
-            MockEngine3.Log.Contains("filename(1,2,3,4): Romulan warning : Be nice or I wipe your harddrive foo").ShouldBeTrue();
-            MockEngine3.Log.Contains("Oops I wiped your harddrive foo").ShouldBeTrue();
-            MockEngine3.Log.Contains("Be nice or I wipe your harddrive foo").ShouldBeTrue();
+            mockEngine.Log.Contains("filename(1,2,3,4): Romulan error : Oops I wiped your harddrive foo").ShouldBeTrue();
+            mockEngine.Log.Contains("filename(1,2,3,4): Romulan warning : Be nice or I wipe your harddrive foo").ShouldBeTrue();
+            mockEngine.Log.Contains("Oops I wiped your harddrive foo").ShouldBeTrue();
+            mockEngine.Log.Contains("Be nice or I wipe your harddrive foo").ShouldBeTrue();
         }
 
         [Fact]
@@ -183,23 +183,23 @@ nor is this
                 // This closes the reader
                 File.WriteAllText(file, contents);
 
-                MockEngine3 MockEngine3 = new MockEngine3();
+                MockEngine3 mockEngine = new MockEngine3();
                 Task t = new MockTask();
-                t.BuildEngine = MockEngine3;
+                t.BuildEngine = mockEngine;
                 t.Log.LogMessagesFromFile(file, MessageImportance.High);
 
-                MockEngine3.Errors.ShouldBe(2);
-                MockEngine3.Warnings.ShouldBe(1);
-                MockEngine3.Messages.ShouldBe(3);
+                mockEngine.Errors.ShouldBe(2);
+                mockEngine.Warnings.ShouldBe(1);
+                mockEngine.Messages.ShouldBe(3);
 
-                MockEngine3 = new MockEngine3();
+                mockEngine = new MockEngine3();
                 t = new MockTask();
-                t.BuildEngine = MockEngine3;
+                t.BuildEngine = mockEngine;
                 t.Log.LogMessagesFromFile(file);
 
-                MockEngine3.Errors.ShouldBe(2);
-                MockEngine3.Warnings.ShouldBe(1);
-                MockEngine3.Messages.ShouldBe(3);
+                mockEngine.Errors.ShouldBe(2);
+                mockEngine.Warnings.ShouldBe(1);
+                mockEngine.Messages.ShouldBe(3);
             }
             finally
             {
