diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 047df320553..3e16b308ede 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.Linq;
 using System.Reflection;
@@ -1159,15 +1160,33 @@ internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottlin
         /// </summary>
         internal void WaitForThreadToProcessEvents()
         {
-            lock (_lockObject)
+            // This method may be called in the shutdown submission callback, this callback may be called after the logging service has 
+            // shutdown and nulled out the events we were going to wait on.
+            if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)
             {
-                // This method may be called in the shutdown submission callback, this callback may be called after the logging service has 
-                // shutdown and nulled out the events we were going to wait on.
-                if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)
+                BufferBlock<object> loggingQueue = null;
+                ActionBlock<object> loggingQueueProcessor = null;
+
+                lock (_lockObject)
                 {
-                    TerminateLoggingEventQueue();
+                    loggingQueue = _loggingQueue;
+                    loggingQueueProcessor = _loggingQueueProcessor;
+
+                    // Replaces _loggingQueue and _loggingQueueProcessor with new one, this will assure that
+                    // no further messages could possibly be trying to be added into queue we are about to drain
                     CreateLoggingEventQueue();
                 }
+
+                // Drain queue.
+                // This shall not be locked to avoid possible deadlock caused by
+                // event handlers to reenter 'this' instance while trying to log something.
+                if (loggingQueue != null)
+                {
+                    Debug.Assert(!Monitor.IsEntered(_lockObject));
+
+                    loggingQueue.Complete();
+                    loggingQueueProcessor.Completion.Wait();
+                }
             }
         }
 
@@ -1228,21 +1247,27 @@ private void CreateLoggingEventQueue()
                 BoundedCapacity = Convert.ToInt32(_queueCapacity)
             };
 
-            _loggingQueue = new BufferBlock<object>(dataBlockOptions);
+            var loggingQueue = new BufferBlock<object>(dataBlockOptions);
 
             var executionDataBlockOptions = new ExecutionDataflowBlockOptions
             {
                 BoundedCapacity = 1
             };
 
-            _loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
+            var loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
 
             var dataLinkOptions = new DataflowLinkOptions
             {
                 PropagateCompletion = true
             };
 
-            _loggingQueue.LinkTo(_loggingQueueProcessor, dataLinkOptions);
+            loggingQueue.LinkTo(loggingQueueProcessor, dataLinkOptions);
+
+            lock (_lockObject)
+            {
+                _loggingQueue = loggingQueue;
+                _loggingQueueProcessor = loggingQueueProcessor;
+            }
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 13e70263473..c5c3555f201 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -450,13 +450,10 @@ public void LogBuildStarted()
 
                 // Raise the event with the filters
                 ProcessLoggingEvent(buildEvent);
-
-                // Make sure we process this event before going any further
-                if (_logMode == LoggerMode.Asynchronous)
-                {
-                    WaitForThreadToProcessEvents();
-                }
             }
+
+            // Make sure we process this event before going any further
+            WaitForThreadToProcessEvents();
         }
 
         /// <summary>
@@ -478,12 +475,10 @@ public void LogBuildFinished(bool success)
                 BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
 
                 ProcessLoggingEvent(buildEvent);
-
-                if (_logMode == LoggerMode.Asynchronous)
-                {
-                    WaitForThreadToProcessEvents();
-                }
             }
+
+            // Make sure we process this event before going any further
+            WaitForThreadToProcessEvents();
         }
 
         /// <inheritdoc />
