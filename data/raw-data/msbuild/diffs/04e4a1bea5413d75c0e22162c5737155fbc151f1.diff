diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index e04ad031845..2ae8399f5f9 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -954,25 +954,28 @@ internal static string GetShortFilePath(string path)
 
         if (path != null)
         {
-            int length = GetShortPathName(path, null, 0);
-            int errorCode = Marshal.GetLastWin32Error();
-
-            if (length > 0)
+            unsafe
             {
-                char[] fullPathBuffer = new char[length];
-                length = GetShortPathName(path, fullPathBuffer, length);
-                errorCode = Marshal.GetLastWin32Error();
+                int length = GetShortPathName(path, null, 0);
+                int errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = new(fullPathBuffer, 0, length);
-                    path = fullPath;
+                    char* fullPathBuffer = stackalloc char[length];
+                    length = GetShortPathName(path, fullPathBuffer, length);
+                    errorCode = Marshal.GetLastWin32Error();
+
+                    if (length > 0)
+                    {
+                        string fullPath = new(fullPathBuffer, 0, length);
+                        path = fullPath;
+                    }
                 }
-            }
 
-            if (length == 0 && errorCode != 0)
-            {
-                ThrowExceptionForErrorCode(errorCode);
+                if (length == 0 && errorCode != 0)
+                {
+                    ThrowExceptionForErrorCode(errorCode);
+                }
             }
         }
 
@@ -993,25 +996,28 @@ internal static string GetLongFilePath(string path)
 
         if (path != null)
         {
-            int length = GetLongPathName(path, null, 0);
-            int errorCode = Marshal.GetLastWin32Error();
-
-            if (length > 0)
+            unsafe
             {
-                char[] fullPathBuffer = new char[length];
-                length = GetLongPathName(path, fullPathBuffer, length);
-                errorCode = Marshal.GetLastWin32Error();
+                int length = GetLongPathName(path, null, 0);
+                int errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = new(fullPathBuffer, 0, length);
-                    path = fullPath;
+                    char* fullPathBuffer = stackalloc char[length];
+                    length = GetLongPathName(path, fullPathBuffer, length);
+                    errorCode = Marshal.GetLastWin32Error();
+
+                    if (length > 0)
+                    {
+                        string fullPath = new(fullPathBuffer, 0, length);
+                        path = fullPath;
+                    }
                 }
-            }
 
-            if (length == 0 && errorCode != 0)
-            {
-                ThrowExceptionForErrorCode(errorCode);
+                if (length == 0 && errorCode != 0)
+                {
+                    ThrowExceptionForErrorCode(errorCode);
+                }
             }
         }
 
@@ -1477,15 +1483,6 @@ internal static void VerifyThrowWin32Result(int result)
     [return: MarshalAs(UnmanagedType.Bool)]
     internal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);
 
-    [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
-    private static extern uint SearchPath(
-        string path,
-        string fileName,
-        string extension,
-        int numBufferChars,
-        [Out] char[] buffer,
-        int[] filePart);
-
     [DllImport("kernel32.dll", PreserveSig = true, SetLastError = true)]
     [return: MarshalAs(UnmanagedType.Bool)]
     internal static extern bool FreeLibrary([In] IntPtr module);
@@ -1496,19 +1493,6 @@ private static extern uint SearchPath(
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true)]
     internal static extern IntPtr LoadLibrary(string fileName);
 
-    [DllImport(mscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-    internal static extern uint GetRequestedRuntimeInfo(String pExe,
-                                            String pwszVersion,
-                                            String pConfigurationFile,
-                                            uint startupFlags,
-                                            uint runtimeInfoFlags,
-                                            [Out] char[] pDirectory,
-                                            int dwDirectory,
-                                            out uint dwDirectoryLength,
-                                            [Out] char[] pVersion,
-                                            int cchBuffer,
-                                            out uint dwlength);
-
     /// <summary>
     /// Gets the fully qualified filename of the currently executing .exe
     /// </summary>
@@ -1568,10 +1552,10 @@ internal static bool SetCurrentDirectory(string path)
     private static extern bool GlobalMemoryStatusEx([In, Out] MemoryStatus lpBuffer);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetShortPathName(string path, [Out] char[] fullpath, [In] int length);
+    internal static extern unsafe int GetShortPathName(string path, [Out] char* fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetLongPathName([In] string path, [Out] char[] fullpath, [In] int length);
+    internal static extern unsafe int GetLongPathName([In] string path, [Out] char* fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
     internal static extern bool CreatePipe(out SafeFileHandle hReadPipe, out SafeFileHandle hWritePipe, SecurityAttributes lpPipeAttributes, int nSize);
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 32129b253a2..dd6e98636f4 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -585,7 +585,7 @@ internal static string GetRuntimeVersion(string path)
                 }
                 while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
 
-                return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength-1) : string.Empty;
+                return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
             }
             else
             {
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index 3a4b583231b..758b928ed37 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -372,11 +372,13 @@ bool specificVersion
         internal static string GetGacPath()
         {
             int gacPathLength = 0;
-            NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
-            char[] gacPath = new char[gacPathLength];
-            NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
-
-            return new string(gacPath, 0, gacPathLength-1);
+            unsafe
+            {
+                NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
+                char* gacPath = stackalloc char[gacPathLength];
+                NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
+                return new string(gacPath, 0, gacPathLength - 1);
+            }
         }
     }
 }
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index d4177c23cd8..964a433c4e5 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -56,10 +56,10 @@ private static extern int RmRegisterResources(uint pSessionHandle,
             string[] rgsServiceNames);
 
         [DllImport(RestartManagerDll, CharSet = CharSet.Unicode)]
-        private static extern int RmStartSession(
+        private static extern unsafe int RmStartSession(
             out uint pSessionHandle,
             int dwSessionFlags,
-            char[] strSessionKey);
+            char* strSessionKey);
 
         [DllImport(RestartManagerDll)]
         private static extern int RmEndSession(uint pSessionHandle);
@@ -211,15 +211,16 @@ internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[]
             }
 
             const int maxRetries = 6;
+            uint handle;
+            int res;
 
-            // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
-            char[] key = new char[CCH_RM_SESSION_KEY + 1];
-            for (int i = 0; i < key.Length; i++)
+            unsafe
             {
-                key[i] = '\0';
+                // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
+                char* key = stackalloc char[CCH_RM_SESSION_KEY + 1];
+                res = RmStartSession(out handle, 0, key);
             }
 
-            int res = RmStartSession(out uint handle, 0, key);
             if (res != 0)
             {
                 throw GetException(res, "RmStartSession", "Failed to begin restart manager session.");
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index 0553eb58d2a..5315168e7c9 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1055,7 +1055,7 @@ internal static extern int CreateAssemblyNameObject(
         /// <param name="pcchPath">The requested maximum length of CachePath, and upon return, the actual length of CachePath.</param>
         /// 
         [DllImport("fusion.dll", CharSet = CharSet.Unicode)]
-        internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, [Out] char[] cachePath, ref int pcchPath);
+        internal static extern unsafe int GetCachePath(AssemblyCacheFlags cacheFlags, [Out] char* cachePath, ref int pcchPath);
 #endif
 
         //------------------------------------------------------------------------------
