diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 50fe2a95302..8db5fafe25b 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -871,7 +871,7 @@ public async Task WaitForExitAsync(ILoggingService loggingService)
                     $"Killing node with pid = {_process.Id}");
                 CommunicationsUtilities.Trace("Killing node with pid = {0}", _process.Id);
 
-                _process.KillTree();
+                _process.KillTree(timeout: 5000);
             }
 
 #if FEATURE_APM
diff --git a/src/Shared/ProcessExtensions.cs b/src/Shared/ProcessExtensions.cs
index 86b84a9a88e..9504440d124 100644
--- a/src/Shared/ProcessExtensions.cs
+++ b/src/Shared/ProcessExtensions.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Shared
 {
     internal static class ProcessExtensions
     {
-        public static void KillTree(this Process process)
+        public static void KillTree(this Process process, int timeout)
         {
             if (NativeMethodsShared.IsWindows)
             {
@@ -41,7 +41,7 @@ public static void KillTree(this Process process)
             // wait until the process finishes exiting/getting killed. 
             // We don't want to wait forever here because the task is already supposed to be dieing, we just want to give it long enough
             // to try and flush what it can and stop. If it cannot do that in a reasonable time frame then we will just ignore it.
-            process.WaitForExit();
+            process.WaitForExit(timeout);
         }
 
         private static void GetAllChildIdsUnix(int parentId, ISet<int> children)
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index d9f1a1e9f47..e24dca74ec4 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -22,7 +22,7 @@ public async Task KillTree()
             p.HasExited.ShouldBe(false);
 
             // Kill the process.
-            p.KillTree();
+            p.KillTree(timeout: 5000);
             p.HasExited.ShouldBe(true);
             p.ExitCode.ShouldNotBe(0);
         }
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index 604f1633c77..5ccd30763e2 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -940,7 +940,16 @@ private void KillToolProcessOnTimeout(Process proc, bool isBeingCancelled)
                     LogShared.LogWarningWithCodeFromResources("Shared.KillingProcessByCancellation", processName);
                 }
 
-                proc.KillTree();
+                int timeout = 5000;
+                string timeoutFromEnvironment = Environment.GetEnvironmentVariable("MSBUILDTOOLTASKCANCELPROCESSWAITTIMEOUT");
+                if (timeoutFromEnvironment != null)
+                {
+                    if (int.TryParse(timeoutFromEnvironment, out int result) && result >= 0)
+                    {
+                        timeout = result;
+                    }
+                }
+                proc.KillTree(timeout);
             }
         }
 
