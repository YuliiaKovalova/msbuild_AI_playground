diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 0903f737d2a..e9274080d7d 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
@@ -238,7 +239,8 @@ public void ConstructWithDifferentGlobalProperties()
                 // Projects 2 and 3 both reference project 4, but with different properties, so they should not point to the same node.
                 GetNodeForProject(graph, 2).ProjectReferences.First().ShouldNotBe(GetNodeForProject(graph, 3).ProjectReferences.First());
                 GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("4.proj");
-                GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties.ShouldBeEmpty();
+                GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties.ShouldHaveSingleItem();
+                GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties.Keys.First().ShouldBe(PropertyNames.IsGraphBuild);
                 GetNodeForProject(graph, 3).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("4.proj");
                 GetNodeForProject(graph, 3).ProjectReferences.First().GlobalProperties.ShouldNotBeEmpty();
             }
@@ -830,7 +832,7 @@ public static IEnumerable<object[]> TopologicalSortShouldTopologicallySortData
                 {
                     new Dictionary<int, int[]>
                     {
-                        {1, new []{5, 4}},
+                        {1, new []{5, 4, 7}},
                         {2, new []{5}},
                         {3, new []{6, 5}},
                         {4, new []{7}},
@@ -864,6 +866,122 @@ public void TopologicalSortShouldTopologicallySort(Dictionary<int, int[]> edges)
             }
         }
 
+        public static IEnumerable<object[]> AllNodesShouldHaveGraphBuildGlobalPropertyData
+        {
+            get
+            {
+                var globalVariablesArray = new[]
+                {
+                    //todo add null
+                    new Dictionary<string, string>(),
+                    new Dictionary<string, string>
+                    {
+                        {"a", "b"},
+                        {"c", "d"}
+                    }
+                };
+
+                var graph1 = new Dictionary<int, int[]>
+                {
+                    {1, new[] {3, 2}},
+                    {2, new[] {3}},
+                    {3, new[] {5, 4}},
+                    {4, new[] {5}}
+                };
+
+                var graph2 = new Dictionary<int, int[]>
+                {
+                    {1, new[] {5, 4, 7}},
+                    {2, new[] {5}},
+                    {3, new[] {6, 5}},
+                    {4, new[] {7}},
+                    {5, new[] {7, 8}},
+                    {6, new[] {7, 9}}
+                };
+
+                foreach (var globalVariables in globalVariablesArray)
+                {
+                    yield return new object[]
+                    {
+                        new Dictionary<int, int[]>(),
+                        new int[] {},
+                        globalVariables
+                    };
+
+                    yield return new object[]
+                    {
+                        new Dictionary<int, int[]>
+                        {
+                            {1, null}
+                        },
+                        new[] {1},
+                        globalVariables
+                    };
+
+                    yield return new object[]
+                    {
+                        graph1,
+                        new[] {1},
+                        globalVariables
+                    };
+
+                    yield return new object[]
+                    {
+                        graph1,
+                        new[] {1, 4, 3},
+                        globalVariables
+                    };
+
+                    yield return new object[]
+                    {
+                        graph2,
+                        new[] {1, 2, 3},
+                        globalVariables
+                    };
+
+                    yield return new object[]
+                    {
+                        graph2,
+                        new[] {1, 2, 6, 4, 3, 7},
+                        globalVariables
+                    };
+                }
+            }
+        }
+
+        [Theory]
+        [MemberData(nameof(AllNodesShouldHaveGraphBuildGlobalPropertyData))]
+        public void AllNodesShouldHaveGraphBuildGlobalProperty(Dictionary<int, int[]> edges, int[] roots, Dictionary<string, string> globalProperties)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var projectGraph = Helpers.CreateProjectGraph(env, edges, null, roots, globalProperties);
+
+                var expectedGlobalProperties = new Dictionary<string, string>(globalProperties) {[PropertyNames.IsGraphBuild] = "true"};
+
+                foreach (var node in projectGraph.ProjectNodes)
+                {
+                    Helpers.AssertDictionariesEqual(expectedGlobalProperties, node.GlobalProperties.ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+                }
+            }
+        }
+
+        [Fact]
+        public void UserValuesForIsGraphBuildGlobalPropertyShouldBePreserved()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var projectGraph = Helpers.CreateProjectGraph(
+                    env,
+                    new Dictionary<int, int[]> {{1, null}},
+                    null,
+                    null,
+                    new Dictionary<string, string> {{PropertyNames.IsGraphBuild, "xyz"}});
+
+                projectGraph.ProjectNodes.First().GlobalProperties[PropertyNames.IsGraphBuild].ShouldBe("xyz");
+            }
+        }
+
         private static ProjectGraphNode GetNodeForProject(ProjectGraph graph, int projectNum) => graph.ProjectNodes.First(node => node.ProjectInstance.FullPath.EndsWith(projectNum + ".proj"));
 
         internal static TransientTestFile CreateProjectFile(
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 3b6f8193a49..d831555ce1e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -995,7 +995,7 @@ private List<string> GetUndeclaredProjects(MSBuild msbuildTask)
                 return null;
             }
 
-            var projectReferenceItems = _taskExecutionHost.ProjectInstance.GetItems(MSBuildConstants.ProjectReferenceItemName);
+            var projectReferenceItems = _taskExecutionHost.ProjectInstance.GetItems(ItemTypeNames.ProjectReferenceItemName);
 
             var declaredProjects = new HashSet<string>(projectReferenceItems.Count);
 
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 59e93108356..1fb15d607d1 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -33,9 +33,6 @@ public sealed class ProjectGraph
         private const string SetPlatformMetadataName = "SetPlatform";
         private const string SetTargetFrameworkMetadataName = "SetTargetFramework";
         private const string GlobalPropertiesToRemoveMetadataName = "GlobalPropertiesToRemove";
-        private const string ProjectReferenceTargetsItemType = "ProjectReferenceTargets";
-        private const string ProjectReferenceTargetsMetadataName = "Targets";
-        private const string DefaultTargetsMarker = ".default";
 
         private static readonly char[] PropertySeparator = MSBuildConstants.SemicolonChar;
 
@@ -211,12 +208,20 @@ public ProjectGraph(
             foreach (var entryPoint in entryPoints)
             {
                 PropertyDictionary<ProjectPropertyInstance> globalPropertyDictionary = CreatePropertyDictionary(entryPoint.GlobalProperties);
+
+                AddGraphBuildGlobalVariable(globalPropertyDictionary);
+
                 var configurationMetadata = new ConfigurationMetadata(FileUtilities.NormalizePath(entryPoint.ProjectFile), globalPropertyDictionary);
                 projectsToEvaluate.Enqueue(configurationMetadata);
                 entryPointConfigurationMetadata.Add(configurationMetadata);
             }
 
-            if (LoadGraph(projectsToEvaluate, projectCollection, tasksInProgress, projectInstanceFactory, out List<Exception> exceptions))
+            if (LoadGraph(
+                projectsToEvaluate,
+                projectCollection,
+                tasksInProgress,
+                projectInstanceFactory,
+                out List<Exception> exceptions))
             {
                 foreach (var configurationMetadata in entryPointConfigurationMetadata)
                 {
@@ -246,6 +251,14 @@ public ProjectGraph(
             {
                 throw new AggregateException(exceptions);
             }
+
+            void AddGraphBuildGlobalVariable(PropertyDictionary<ProjectPropertyInstance> globalPropertyDictionary)
+            {
+                if (globalPropertyDictionary.GetProperty(PropertyNames.IsGraphBuild) == null)
+                {
+                    globalPropertyDictionary[PropertyNames.IsGraphBuild] = ProjectPropertyInstance.Create(PropertyNames.IsGraphBuild, "true");
+                }
+            }
         }
 
         /// <summary>
@@ -354,7 +367,7 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                 {
                     var projectReferenceEdge = new ProjectGraphBuildRequest(
                         projectReference,
-                        ExpandDefaultTargets(projectReference.ProjectInstance, targetsToPropagate));
+                        ExpandDefaultTargets(targetsToPropagate, projectReference.ProjectInstance.DefaultTargets));
                     if (encounteredEdges.Add(projectReferenceEdge))
                     {
                         edgesToVisit.Enqueue(projectReferenceEdge);
@@ -398,6 +411,27 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
             return targetLists;
         }
 
+        private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string> targets, List<string> defaultTargets)
+        {
+            int i = 0;
+            while (i < targets.Count)
+            {
+                if (targets[i].Equals(MSBuildConstants.DefaultTargetsMarker, StringComparison.OrdinalIgnoreCase))
+                {
+                    targets = targets
+                        .RemoveAt(i)
+                        .InsertRange(i, defaultTargets);
+                    i += defaultTargets.Count;
+                }
+                else
+                {
+                    i++;
+                }
+            }
+
+            return targets;
+        }
+
         /// <summary>
         /// A callback used for constructing a <see cref="ProjectInstance"/> for a specific
         /// <see cref="ProjectGraphEntryPoint"/> instance.
@@ -473,6 +507,7 @@ private bool LoadGraph(
         {
             var exceptionsInTasks = new ConcurrentBag<Exception>();
             var evaluationWaitHandle = new AutoResetEvent(false);
+
             while (projectsToEvaluate.Count != 0 || tasksInProgress.Count != 0)
             {
                 ConfigurationMetadata projectToEvaluate;
@@ -482,7 +517,7 @@ private bool LoadGraph(
                     var task = new Task(() =>
                     {
                         ProjectGraphNode parsedProject = CreateNewNode(projectToEvaluate, projectCollection, projectInstanceFactory);
-                        IEnumerable<ProjectItemInstance> projectReferenceItems = parsedProject.ProjectInstance.GetItems(MSBuildConstants.ProjectReferenceItemName);
+                        IEnumerable<ProjectItemInstance> projectReferenceItems = parsedProject.ProjectInstance.GetItems(ItemTypeNames.ProjectReferenceItemName);
                         foreach (var projectReferenceToParse in projectReferenceItems)
                         {
                             if (!string.IsNullOrEmpty(projectReferenceToParse.GetMetadataValue(ToolsVersionMetadataName)))
@@ -562,7 +597,7 @@ private enum NodeState
             PropertyDictionary<ProjectPropertyInstance> globalProperties)
         {
             nodeState[node] = NodeState.InProcess;
-            IEnumerable<ProjectItemInstance> projectReferenceItems = node.ProjectInstance.GetItems(MSBuildConstants.ProjectReferenceItemName);
+            IEnumerable<ProjectItemInstance> projectReferenceItems = node.ProjectInstance.GetItems(ItemTypeNames.ProjectReferenceItemName);
             foreach (var projectReferenceToParse in projectReferenceItems)
             {
                 string projectReferenceFullPath = projectReferenceToParse.GetMetadataValue(FullPathMetadataName);
@@ -649,14 +684,14 @@ internal static string FormatCircularDependencyError(List<string> projectsInCycl
         private static ImmutableList<string> DetermineTargetsToPropagate(ProjectGraphNode node, ImmutableList<string> entryTargets)
         {
             var targetsToPropagate = ImmutableList<string>.Empty;
-            ICollection<ProjectItemInstance> projectReferenceTargets = node.ProjectInstance.GetItems(ProjectReferenceTargetsItemType);
+            ICollection<ProjectItemInstance> projectReferenceTargets = node.ProjectInstance.GetItems(ItemTypeNames.ProjectReferenceTargetsItemType);
             foreach (var entryTarget in entryTargets)
             {
                 foreach (var projectReferenceTarget in projectReferenceTargets)
                 {
                     if (projectReferenceTarget.EvaluatedInclude.Equals(entryTarget, StringComparison.OrdinalIgnoreCase))
                     {
-                        string targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetsMetadataName);
+                        string targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
                         targetsToPropagate = targetsToPropagate.AddRange(ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue));
                     }
                 }
@@ -665,27 +700,6 @@ private static ImmutableList<string> DetermineTargetsToPropagate(ProjectGraphNod
             return targetsToPropagate;
         }
 
-        private static ImmutableList<string> ExpandDefaultTargets(ProjectInstance project, ImmutableList<string> targets)
-        {
-            int i = 0;
-            while (i < targets.Count)
-            {
-                if (targets[i].Equals(DefaultTargetsMarker, StringComparison.OrdinalIgnoreCase))
-                {
-                    targets = targets
-                        .RemoveAt(i)
-                        .InsertRange(i, project.DefaultTargets);
-                    i += project.DefaultTargets.Count;
-                }
-                else
-                {
-                    i++;
-                }
-            }
-
-            return targets;
-        }
-
         /// <summary>
         /// Gets the effective global properties for a project reference.
         /// </summary>
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 8c3a99c1d1d..8f61b03b160 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -40,6 +40,8 @@ internal ProjectGraphNode(
 
         /// <summary>
         /// Gets the global properties which should be used to evaluate and execute this node in the graph.
+        /// <summary>
+        /// The global properties this node was evaluated with. See <see cref="ComputeBuildData"/> for the global properties to use when building this node.
         /// </summary>
         public IReadOnlyDictionary<string, string> GlobalProperties { get; }
 
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 254cd97cb31..1469ef250f1 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.IO;
-using System.Reflection;
 
 // This file is compiled into both Microsoft.Build.Framework and Microsoft.Build.Tasks which can cause collisions.
 #if MICROSOFT_BUILD_TASKS
@@ -81,11 +80,11 @@ internal static class MSBuildConstants
         internal const string CurrentProductVersion = "16.0";
 		
 		/// <summary>
-        /// The name of the item used to specify references to other msbuild projects
+        /// Symbol used in ProjectReferenceTarget items to represent default targets
         /// </summary>
-        internal const string ProjectReferenceItemName = "ProjectReference";
-
-        // One-time allocations to avoid implicit allocations for Split(), Trim().
+        internal const string DefaultTargetsMarker = ".default";
+		
+		// One-time allocations to avoid implicit allocations for Split(), Trim().
         internal static readonly char[] SemicolonChar = { ';' };
         internal static readonly char[] SpaceChar = { ' ' };
         internal static readonly char[] SingleQuoteChar = { '\'' };
@@ -106,6 +105,27 @@ internal static class MSBuildConstants
         internal static readonly char[] PathSeparatorChar = { Path.PathSeparator };
     }
 
+    internal static class PropertyNames
+    {
+        /// <summary>
+        /// Specifies whether the current evaluation / build is happening during a graph build
+        /// </summary>
+        internal const string IsGraphBuild = "IsGraphBuild";
+    }
+
+    internal static class ItemTypeNames
+    {
+        /// <summary>
+        /// The name of the item used to specify references to other msbuild projects
+        /// </summary>
+        internal const string ProjectReferenceItemName = "ProjectReference";
+
+        /// <summary>
+        /// The name of the item used to statically specify what targets a project calls on its references
+        /// </summary>
+        internal const string ProjectReferenceTargetsItemType = "ProjectReferenceTargets";
+    }
+
     /// <summary>
     /// Constants naming well-known item metadata.
     /// </summary>
@@ -147,5 +167,6 @@ internal static class ItemMetadataNames
         internal const string projectReferenceOriginalItemSpec = "ProjectReferenceOriginalItemSpec";
         internal const string IgnoreVersionForFrameworkReference = "IgnoreVersionForFrameworkReference";
         internal const string frameworkFile = "FrameworkFile";
+        internal const string ProjectReferenceTargetsMetadataName = "Targets";
     }
 }
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 25d976af601..554fced43c1 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1571,8 +1571,10 @@ internal static TransientTestFile CreateProjectFile(
         internal static ProjectGraph CreateProjectGraph(
             TestEnvironment env,
             // direct dependencies that the kvp.key node has on the nodes represented by kvp.value
-            Dictionary<int, int[]> dependencyEdges,
-            CreateProjectFileDelegate createProjectFile = null)
+            IDictionary<int, int[]> dependencyEdges,
+            CreateProjectFileDelegate createProjectFile = null,
+            IEnumerable<int> roots = null,
+            IDictionary<string, string> globalProperties = null)
         {
             createProjectFile = createProjectFile ?? CreateProjectFile;
 
@@ -1608,9 +1610,13 @@ internal static ProjectGraph CreateProjectGraph(
                 }
             }
 
+            var entryProjects = roots ?? nodes.Where(nodeEntry => nodeEntry.Value.IsRoot).Select(n => n.Key);
+
+            var entryProjectFiles = nodes.Where(nodeEntry => nodeEntry.Value.IsRoot).Select(nodeEntry => nodeEntry.Value.ProjectPath);
+
             return new ProjectGraph(
-                nodes.Where(nodeEntry => nodeEntry.Value.IsRoot)
-                    .Select(nodeEntry => nodeEntry.Value.ProjectPath));
+                entryProjectFiles,
+                globalProperties ?? new Dictionary<string, string>());
 
             bool IsRoot(int node)
             {
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index d57d2e49367..65a7cf1a687 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -331,6 +331,14 @@ public void WriteLine(string format, params object[] args)
                 Console.WriteLine(format, args);
             }
         }
+
+        /// <summary>
+        /// MSBuild launches the debugger on ErrorUtilities exceptions when in DEBUG. Disable this in tests that assert these exceptions.
+        /// </summary>
+        public void DoNotLaunchDebugger()
+        {
+            SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
+        }
     }
 
     /// <summary>
diff --git a/src/Tasks/Microsoft.CSharp.targets b/src/Tasks/Microsoft.CSharp.targets
index 69994d096bc..dd7149f5a7c 100644
--- a/src/Tasks/Microsoft.CSharp.targets
+++ b/src/Tasks/Microsoft.CSharp.targets
@@ -25,6 +25,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <IsCrossTargetingBuild>true</IsCrossTargetingBuild>
    </PropertyGroup>
 
+   <PropertyGroup Condition="'$(IsGraphBuild)' == 'true'">
+      <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>
+   </PropertyGroup>
+
    <!--
         In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed 
         as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead 
