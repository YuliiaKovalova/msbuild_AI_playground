diff --git a/src/Tasks/ManifestUtil/ManifestReader.cs b/src/Tasks/ManifestUtil/ManifestReader.cs
index 3ae595c0bed..d1a3676cac5 100644
--- a/src/Tasks/ManifestUtil/ManifestReader.cs
+++ b/src/Tasks/ManifestUtil/ManifestReader.cs
@@ -54,7 +54,11 @@ private static XmlDocument GetXmlDocument(string path)
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
                 byte[] buffer = new byte[2];
-                s.Read(buffer, 0, 2);
+#if NET
+                s.ReadExactly(buffer, 0, 2);
+#else
+                ReadExist(s, buffer, 0, 2);
+#endif
                 s.Position = 0;
                 var document = new XmlDocument();
                 var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
@@ -100,6 +104,20 @@ private static Manifest ReadEmbeddedManifest(string path)
             return manifest;
         }
 
+        private static void ReadExist(FileStream stream, byte[] buffer, int offset, int count)
+        {
+            while (count > 0)
+            {
+                int read = stream.Read(buffer, offset, count);
+                if (read <= 0)
+                {
+                    throw new EndOfStreamException();
+                }
+                offset += read;
+                count -= read;
+            }
+        }
+
         /// <summary>
         /// Reads the specified manifest XML and returns an object representation.
         /// </summary>
@@ -138,7 +156,11 @@ public static Manifest ReadManifest(string manifestType, string path, bool prese
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
                 byte[] buffer = new byte[2];
-                s.Read(buffer, 0, 2);
+#if NET
+                s.ReadExactly(buffer, 0, 2);
+#else
+                ReadExist(s, buffer, 0, 2);
+#endif
                 s.Position = 0;
                 // if first two bytes are "MZ" then we're looking at an .exe or a .dll not a .manifest
                 if ((buffer[0] == 0x4D) && (buffer[1] == 0x5A))
diff --git a/src/Tasks/ManifestUtil/PathUtil.cs b/src/Tasks/ManifestUtil/PathUtil.cs
index 9b6ad7ca6b1..017ed281e5e 100644
--- a/src/Tasks/ManifestUtil/PathUtil.cs
+++ b/src/Tasks/ManifestUtil/PathUtil.cs
@@ -163,7 +163,22 @@ public static bool IsPEFile(string path)
             byte[] buffer = new byte[2];
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
-                s.Read(buffer, 0, 2);
+#if NET
+                s.ReadExactly(buffer, 0, 2);
+#else
+                int count = 2;
+                int offset = 0;
+                while (count > 0)
+                {
+                    int read = s.Read(buffer, offset, count);
+                    if (read <= 0)
+                    {
+                        throw new EndOfStreamException();
+                    }
+                    offset += read;
+                    count -= read;
+                }
+#endif
             }
 
             // if first two bytes are "MZ" then we're looking at an .exe or a .dll not a .manifest
diff --git a/src/Tasks/StrongNameUtils.cs b/src/Tasks/StrongNameUtils.cs
index 338f4959327..b24f5353b51 100644
--- a/src/Tasks/StrongNameUtils.cs
+++ b/src/Tasks/StrongNameUtils.cs
@@ -50,7 +50,22 @@ internal static void ReadKeyFile(TaskLoggingHelper log, string keyFile, out Stro
                     keyFileContents = new byte[fileLength];
 
                     // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
-                    fs.Read(keyFileContents, 0, fileLength);
+#if NET
+                    fs.ReadExactly(keyFileContents, 0, fileLength);
+#else
+                    int count = fileLength;
+                    int offset = 0;
+                    while (count > 0)
+                    {
+                        int read = fs.Read(buffer, offset, count);
+                        if (read <= 0)
+                        {
+                            throw new EndOfStreamException();
+                        }
+                        offset += read;
+                        count -= read;
+                    }
+#endif
                 }
             }
             catch (ArgumentException e)
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index 76591ad9516..119dc10cfac 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -1735,7 +1735,22 @@ public void CreateFileDoesntRecordWriteIfNotWrittenTo()
                 var buffer = new byte[10];
                 using (FileStream fs = File.Open(readFile, FileMode.Open, FileAccess.ReadWrite, FileShare.None))
                 {
-                    fs.Read(buffer, 0, 10);
+#if NET
+                    fs.ReadExactly(buffer, 0, 10);
+#else
+                    int count = 10;
+                    int offset = 0;
+                    while (count > 0)
+                    {
+                        int read = fs.Read(buffer, offset, count);
+                        if (read <= 0)
+                        {
+                            throw new EndOfStreamException();
+                        }
+                        offset += read;
+                        count -= read;
+                    }
+#endif
                 }
 
                 FileTracker.WriteContextTLogs(testDir, tlogRootName);
