diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 54d7a8a347d..db6511ed258 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2951,6 +2951,25 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
             });
         }
 
+        public void AttachBuildCheckForBinaryLogReplay(List<ILogger> loggers, EventArgsDispatcher eventDispatcher)
+        {
+            _buildParameters = new BuildParameters
+            {
+                IsBuildCheckEnabled = true,
+            };
+
+            var buildCheckManagerProvider =
+                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;
+
+            buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);
+
+            var buildCheckLogger = new BuildCheckConnectorLogger(
+                new AnalysisDispatchingContextFactory(eventDispatcher),
+                buildCheckManagerProvider.Instance);
+
+            loggers.Add(buildCheckLogger);
+        }
+
         /// <summary>
         /// Creates a logging service around the specified set of loggers.
         /// </summary>
diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
new file mode 100644
index 00000000000..438288ba73c
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
@@ -0,0 +1,97 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal class AnalysisDispatchingContext : IAnalysisContext
+{
+    private readonly EventArgsDispatcher _eventDispatcher;
+    private readonly BuildEventContext _eventContext;
+
+    public AnalysisDispatchingContext(
+        EventArgsDispatcher eventDispatcher,
+        BuildEventContext eventContext)
+    {
+        _eventDispatcher = eventDispatcher;
+        _eventContext = eventContext;
+    }
+
+    public BuildEventContext BuildEventContext => _eventContext;
+
+    public void DispatchBuildEvent(BuildEventArgs buildEvent)
+    {
+        ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
+
+        BuildWarningEventArgs? warningEvent = buildEvent as BuildWarningEventArgs;
+        BuildErrorEventArgs? errorEvent = buildEvent as BuildErrorEventArgs;
+
+        _eventDispatcher.Dispatch(buildEvent);
+    }
+
+    public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)
+    {
+        ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for comment message.");
+
+        DispatchAsCommentFromText(_eventContext, importance, ResourceUtilities.GetResourceString(messageResourceName), messageArgs);
+    }
+
+    public void DispatchAsCommentFromText(MessageImportance importance, string message)
+        => DispatchAsCommentFromText(_eventContext, importance, message, messageArgs: null);
+
+    private void DispatchAsCommentFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object?[]? messageArgs)
+    {
+        ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
+        ErrorUtilities.VerifyThrow(message != null, "message was null");
+
+        BuildMessageEventArgs buildEvent = new BuildMessageEventArgs(
+                message,
+                helpKeyword: null,
+                senderName: "MSBuild",
+                importance,
+                DateTime.UtcNow,
+                messageArgs);
+        buildEvent.BuildEventContext = buildEventContext;
+        _eventDispatcher.Dispatch(buildEvent);
+    }
+
+    public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)
+    {
+        ErrorUtilities.VerifyThrow(_eventContext != null, "Must specify the buildEventContext");
+        ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
+        ErrorUtilities.VerifyThrow(message != null, "Need error message.");
+
+        string? subcategory = null;
+
+        if (subcategoryResourceName != null)
+        {
+            subcategory = AssemblyResources.GetString(subcategoryResourceName);
+        }
+
+        BuildErrorEventArgs buildEvent =
+        new BuildErrorEventArgs(
+            subcategory,
+            errorCode,
+            file!.File,
+            file.Line,
+            file.Column,
+            file.EndLine,
+            file.EndColumn,
+            message,
+            helpKeyword,
+            "MSBuild");
+
+        buildEvent.BuildEventContext = _eventContext;
+
+        _eventDispatcher.Dispatch(buildEvent);
+    }
+}
diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs
new file mode 100644
index 00000000000..2cda8d7480e
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs
@@ -0,0 +1,24 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Concurrent;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal class AnalysisDispatchingContextFactory : IAnalysisContextFactory
+{
+    private readonly EventArgsDispatcher _eventDispatcher;
+
+    public AnalysisDispatchingContextFactory(EventArgsDispatcher eventDispatcher) => _eventDispatcher = eventDispatcher;
+
+    public IAnalysisContext CreateAnalysisContext(BuildEventContext eventContext)
+        => new AnalysisDispatchingContext(_eventDispatcher, eventContext);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
similarity index 100%
rename from src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContext.cs
rename to src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContextFactory.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContextFactory.cs
similarity index 100%
rename from src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContextFactory.cs
rename to src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContextFactory.cs
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContext.cs
similarity index 100%
rename from src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContext.cs
rename to src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContext.cs
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContextFactory.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContextFactory.cs
similarity index 100%
rename from src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContextFactory.cs
rename to src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContextFactory.cs
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index e74fdde5080..ad921af14cb 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,13 +160,15 @@
     <Compile Include="BuildCheck\Acquisition\IBuildCheckAcquisitionModule.cs" />
     <Compile Include="BuildCheck\Analyzers\SharedOutputPathAnalyzer.cs" />
     <Compile Include="BuildCheck\Analyzers\DoubleWritesAnalyzer.cs" />
-    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\AnalysisLoggingContextFactory.cs" />
-    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\IAnalysisContext.cs" />
-    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\AnalysisLoggingContext.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisDispatchingContext.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisDispatchingContextFactory.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContextFactory.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContext.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationException.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
-    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\IAnalysisContextFactory.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManagerProvider.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManager.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManagerProvider.cs" />
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index e5cbf02a97d..a2d6069843c 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -64,7 +64,7 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces
     [InlineData(true, true)]
     [InlineData(false, true)]
     [InlineData(false, false)]
-    public void SampleAnalyzerIntegrationTest_AnalyzeOnBuildReplay(bool buildInOutOfProcessNode, bool analysisRequested)
+    public void SampleAnalyzerIntegrationTest_AnalyzeOnBunaryLogReplay(bool buildInOutOfProcessNode, bool analysisRequested)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile);
 
@@ -77,6 +77,8 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuildReplay(bool buildInOutOf
 
         success.ShouldBeTrue();
 
+        // _env.SetEnvironmentVariable("MSBUILDDEBUGONSTART", "1");
+
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
          $"{logFile} -flp:logfile={Path.Combine(projectDirectory!, "logFile.log")};verbosity=diagnostic {(analysisRequested ? "-analyze" : string.Empty)}",
          out success, false, _env.Output, timeoutMilliseconds: 130_000);
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 088d2c00179..35cc5f7f0e3 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -808,7 +808,7 @@ public static ExitType Execute(
                     // as if a build is happening
                     if (FileUtilities.IsBinaryLogFilename(projectFile))
                     {
-                        ReplayBinaryLog(projectFile, loggers, distributedLoggerRecords, cpuCount);
+                        ReplayBinaryLog(projectFile, loggers.ToList(), distributedLoggerRecords, cpuCount, isBuildCheckEnabled);
                     }
                     else if (outputPropertiesItemsOrTargetResults && FileUtilities.IsSolutionFilename(projectFile))
                     {
@@ -4404,12 +4404,18 @@ private static bool CreateAndConfigureLogger(
 
         private static void ReplayBinaryLog(
             string binaryLogFilePath,
-            ILogger[] loggers,
+            List<ILogger> loggers,
             IEnumerable<DistributedLoggerRecord> distributedLoggerRecords,
-            int cpuCount)
+            int cpuCount,
+            bool isBuildCheckEnabled)
         {
             var replayEventSource = new BinaryLogReplayEventSource();
 
+            if (isBuildCheckEnabled)
+            {
+                BuildManager.DefaultBuildManager.AttachBuildCheckForBinaryLogReplay(loggers, replayEventSource);
+            }
+
             foreach (var distributedLoggerRecord in distributedLoggerRecords)
             {
                 ILogger centralLogger = distributedLoggerRecord.CentralLogger;
