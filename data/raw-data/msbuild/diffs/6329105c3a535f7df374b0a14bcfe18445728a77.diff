diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 1064b2c709a..8acc6ee7306 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -583,13 +583,6 @@ private enum ExitPacketState
             /// </summary>
             private ConcurrentQueue<INodePacket> _packetWriteQueue = new ConcurrentQueue<INodePacket>();
 
-            /// <summary>
-            /// A task representing the last packet write, so we can chain packet writes one after another.
-            /// We want to queue up writing packets on a separate thread asynchronously, but serially.
-            /// Each task drains the <see cref="_packetWriteQueue"/>
-            /// </summary>
-            private Task _packetWriteDrainTask = Task.CompletedTask;
-
             /// <summary>
             /// Delegate called when the context terminates.
             /// </summary>
@@ -605,6 +598,10 @@ private enum ExitPacketState
             /// </summary>
             private BinaryReaderFactory _binaryReaderFactory;
 
+            private AutoResetEvent _packetEnqueued;
+
+            private Thread drainPacketQueueThread;
+
             /// <summary>
             /// Constructor.
             /// </summary>
@@ -622,6 +619,12 @@ public NodeContext(int nodeId, Process process,
                 _writeBufferMemoryStream = new MemoryStream();
                 _terminateDelegate = terminateDelegate;
                 _binaryReaderFactory = InterningBinaryReader.CreateSharedBuffer();
+
+                _packetEnqueued = new AutoResetEvent(false);
+                // specify the smallest stack size - 256kb
+                drainPacketQueueThread = new Thread(DrainPacketQueue, 256 * 1024);
+                drainPacketQueueThread.IsBackground = true;
+                drainPacketQueueThread.Start(this);
             }
 
             /// <summary>
@@ -717,7 +720,7 @@ public void SendData(INodePacket packet)
                     _exitPacketState = ExitPacketState.ExitPacketQueued;
                 }
                 _packetWriteQueue.Enqueue(packet);
-                DrainPacketQueue();
+                _packetEnqueued.Set();
             }
 
             /// <summary>
@@ -731,68 +734,56 @@ public void SendData(INodePacket packet)
             /// will run on an empty queue. I tried to write logic that avoids queueing
             /// a new task if the queue is already being drained, but it didn't show any
             /// improvement and made things more complicated.</remarks>
-            private void DrainPacketQueue()
+            private void DrainPacketQueue(object state)
             {
-                // this lock is only necessary to protect a write to _packetWriteDrainTask field
-                lock (_packetWriteQueue)
+                NodeContext context = (NodeContext)state;
+                while (true)
                 {
-                    // average latency between the moment this runs and when the delegate starts
-                    // running is about 100-200 microseconds (unless there's thread pool saturation)
-                    _packetWriteDrainTask = _packetWriteDrainTask.ContinueWith(
-                        SendDataCoreAsync,
-                        this,
-                        TaskScheduler.Default).Unwrap();
-
-                    static async Task SendDataCoreAsync(Task _, object state)
+                    context._packetEnqueued.WaitOne();
+                    while (context._packetWriteQueue.TryDequeue(out var packet))
                     {
-                        NodeContext context = (NodeContext)state;
-                        while (context._packetWriteQueue.TryDequeue(out var packet))
-                        {
-                            MemoryStream writeStream = context._writeBufferMemoryStream;
-
-                            // clear the buffer but keep the underlying capacity to avoid reallocations
-                            writeStream.SetLength(0);
+                        MemoryStream writeStream = context._writeBufferMemoryStream;
 
-                            ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
-                            try
-                            {
-                                writeStream.WriteByte((byte)packet.Type);
+                        // clear the buffer but keep the underlying capacity to avoid reallocations
+                        writeStream.SetLength(0);
 
-                                // Pad for the packet length
-                                WriteInt32(writeStream, 0);
-                                packet.Translate(writeTranslator);
+                        ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
+                        try
+                        {
+                            writeStream.WriteByte((byte)packet.Type);
 
-                                int writeStreamLength = (int)writeStream.Position;
+                            // Pad for the packet length
+                            WriteInt32(writeStream, 0);
+                            packet.Translate(writeTranslator);
 
-                                // Now plug in the real packet length
-                                writeStream.Position = 1;
-                                WriteInt32(writeStream, writeStreamLength - 5);
+                            int writeStreamLength = (int)writeStream.Position;
 
-                                byte[] writeStreamBuffer = writeStream.GetBuffer();
+                            // Now plug in the real packet length
+                            writeStream.Position = 1;
+                            WriteInt32(writeStream, writeStreamLength - 5);
 
-                                for (int i = 0; i < writeStreamLength; i += MaxPacketWriteSize)
-                                {
-                                    int lengthToWrite = Math.Min(writeStreamLength - i, MaxPacketWriteSize);
-#pragma warning disable CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
-                                    await context._serverToClientStream.WriteAsync(writeStreamBuffer, i, lengthToWrite, CancellationToken.None);
-#pragma warning restore CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
-                                }
+                            byte[] writeStreamBuffer = writeStream.GetBuffer();
 
-                                if (IsExitPacket(packet))
-                                {
-                                    context._exitPacketState = ExitPacketState.ExitPacketSent;
-                                }
-                            }
-                            catch (IOException e)
+                            for (int i = 0; i < writeStreamLength; i += MaxPacketWriteSize)
                             {
-                                // Do nothing here because any exception will be caught by the async read handler
-                                CommunicationsUtilities.Trace(context._nodeId, "EXCEPTION in SendData: {0}", e);
+                                int lengthToWrite = Math.Min(writeStreamLength - i, MaxPacketWriteSize);
+                                context._serverToClientStream.Write(writeStreamBuffer, i, lengthToWrite);
                             }
-                            catch (ObjectDisposedException) // This happens if a child dies unexpectedly
+
+                            if (IsExitPacket(packet))
                             {
-                                // Do nothing here because any exception will be caught by the async read handler
+                                context._exitPacketState = ExitPacketState.ExitPacketSent;
                             }
                         }
+                        catch (IOException e)
+                        {
+                            // Do nothing here because any exception will be caught by the async read handler
+                            CommunicationsUtilities.Trace(context._nodeId, "EXCEPTION in SendData: {0}", e);
+                        }
+                        catch (ObjectDisposedException) // This happens if a child dies unexpectedly
+                        {
+                            // Do nothing here because any exception will be caught by the async read handler
+                        }
                     }
                 }
             }
@@ -836,11 +827,12 @@ public async Task WaitForExitAsync(ILoggingService loggingService)
                     // Wait up to 100ms until all remaining packets are sent.
                     // We don't need to wait long, just long enough for the Task to start running on the ThreadPool.
 #if NET
-                    await _packetWriteDrainTask.WaitAsync(TimeSpan.FromMilliseconds(100)).ConfigureAwait(ConfigureAwaitOptions.SuppressThrowing);
+                    // await _packetWriteDrainTask.WaitAsync(TimeSpan.FromMilliseconds(100)).ConfigureAwait(ConfigureAwaitOptions.SuppressThrowing);
+                    await Task.Delay(100);
 #else
                     using (var cts = new CancellationTokenSource(100))
                     {
-                        await Task.WhenAny(_packetWriteDrainTask, Task.Delay(100, cts.Token));
+                        await Task.Delay(100, cts.Token);
                         cts.Cancel();
                     }
 #endif
