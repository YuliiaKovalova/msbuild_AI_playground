diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
index 65269f0a92f..ca4efcfa87b 100644
--- a/eng/Common.globalconfig
+++ b/eng/Common.globalconfig
@@ -1172,9 +1172,6 @@ dotnet_diagnostic.IDE0037.severity = suggestion
 # Use local function
 dotnet_diagnostic.IDE0039.severity = suggestion
 
-# Accessibility modifiers required
-dotnet_diagnostic.IDE0040.severity = suggestion
-
 # Null check can be simplified
 dotnet_diagnostic.IDE0041.severity = suggestion
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
index b04097bd028..7e565c36f69 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
@@ -351,13 +351,13 @@ public void PreprocessorFormatting()
             VerifyAssertLineByLine(expected, actual);
         }
 
-        void VerifyFormattingPreserved(string projectContents)
+        private void VerifyFormattingPreserved(string projectContents)
         {
             VerifyFormattingPreservedFromString(projectContents);
             VerifyFormattingPreservedFromFile(projectContents);
         }
 
-        void VerifyFormattingPreservedFromString(string projectContents)
+        private void VerifyFormattingPreservedFromString(string projectContents)
         {
             ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(projectContents)),
                 ProjectCollection.GlobalProjectCollection,
@@ -373,7 +373,7 @@ void VerifyFormattingPreservedFromString(string projectContents)
             VerifyAssertLineByLine(expected, actual);
         }
 
-        void VerifyFormattingPreservedFromFile(string projectContents)
+        private void VerifyFormattingPreservedFromFile(string projectContents)
         {
             string directory = null;
 
@@ -403,13 +403,13 @@ void VerifyFormattingPreservedFromFile(string projectContents)
             }
         }
 
-        void VerifyProjectReformatting(string originalContents, string expectedContents)
+        private void VerifyProjectReformatting(string originalContents, string expectedContents)
         {
             VerifyProjectReformattingFromString(originalContents, expectedContents);
             VerifyProjectReformattingFromFile(originalContents, expectedContents);
         }
 
-        void VerifyProjectReformattingFromString(string originalContents, string expectedContents)
+        private void VerifyProjectReformattingFromString(string originalContents, string expectedContents)
         {
             ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(originalContents)),
                 ProjectCollection.GlobalProjectCollection,
@@ -425,7 +425,7 @@ void VerifyProjectReformattingFromString(string originalContents, string expecte
             VerifyAssertLineByLine(expected, actual);
         }
 
-        void VerifyProjectReformattingFromFile(string originalContents, string expectedContents)
+        private void VerifyProjectReformattingFromFile(string originalContents, string expectedContents)
         {
             string directory = null;
 
@@ -455,7 +455,7 @@ void VerifyProjectReformattingFromFile(string originalContents, string expectedC
             }
         }
 
-        void VerifyAssertLineByLine(string expected, string actual)
+        private void VerifyAssertLineByLine(string expected, string actual)
         {
             Helpers.VerifyAssertLineByLine(expected, actual, false, _testOutput);
         }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index fc29f4d87da..bb533e4a521 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -1259,7 +1259,7 @@ private static ProjectMetadataElement GetMetadataXml()
             return metadata;
         }
 
-        void VerifyAssertLineByLine(string expected, string actual)
+        private void VerifyAssertLineByLine(string expected, string actual)
         {
             Helpers.VerifyAssertLineByLine(expected, actual, false, _testOutput);
         }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
index 88cb25fcb41..31170402812 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
@@ -206,7 +206,7 @@ public ElementLinkPair<CT> QuerySingleChildrenWithValidation<CT>(Func<T, IEnumer
 
     internal class ProjectXmlPair : ElementLinkPair<ProjectRootElement>
     {
-        ProjectPair Project { get; }
+        private ProjectPair Project { get; }
         public ProjectXmlPair(ProjectPair pair) : base(null, pair.View.Xml, pair.Real.Xml) { this.Project = pair; this.PRE = this; }
         public ProjectXmlPair(ProjectRootElement viewXml, ProjectRootElement realXml) : base(null, viewXml, realXml) { this.PRE = this; }
 
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
index b4548990b32..be59c2fe7d1 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using System.Collections.Generic;
     using Microsoft.Build.Construction;
 
-    static class CollectionHelpers
+    internal static class CollectionHelpers
     {
         public static IList<A> ConvertCollection<A,B>(this IEnumerable<B> source, Func<B, A> converter)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
index 6b9da4a89be..66ba4062712 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 
     internal class MockProjectRootElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
-        ProjectRootElement ProjectXml => (ProjectRootElement)Source;
+        private ProjectRootElement ProjectXml => (ProjectRootElement)Source;
 
         public override ProjectElement CreateLinkedObject(IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
index 738ae4b419f..4c59d836952 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
@@ -68,7 +68,7 @@ public MockProjectUsingTaskBodyElementLink(MockProjectUsingTaskBodyElementLinkRe
 
 namespace Microsoft.Build.Engine.OM.UnitTests.ObjectModelRemoting.RemoteProjectsProviderMock.ConstructionLinkMocks
 {
-    class MockProjectUsingTaskBodyElementLink
+    internal class MockProjectUsingTaskBodyElementLink
     {
     }
 }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
index 6fba5806135..c2e8df2acad 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     /// </summary>
     internal static class ProjectElemetExportHelper
     {
-        delegate MockProjectElementLinkRemoter ExporterFactory(ProjectCollectionLinker exporter, ProjectElement xml);
+        private delegate MockProjectElementLinkRemoter ExporterFactory(ProjectCollectionLinker exporter, ProjectElement xml);
         private class ElementInfo
         {
             public static ElementInfo New<T, RMock>()
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
index d09294c9ada..a105e75e23c 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
@@ -41,7 +41,7 @@ public RemotedResolvedImport(ResolvedImport resolvedImport, ProjectCollectionLin
 
         public bool IsImported { get; }
 
-        ResolvedImport Import(ProjectCollectionLinker importer)
+        private ResolvedImport Import(ProjectCollectionLinker importer)
         {
             var importElement = (ProjectImportElement)importer.Import<ProjectElement, MockProjectImportElementLinkRemoter>(this.ImportingElement);
             var projectElement = (ProjectRootElement)importer.Import<ProjectElement, MockProjectRootElementLinkRemoter>(this.ImportedProject);
diff --git a/src/Build.UnitTests/BackEnd/IntegrationTests.cs b/src/Build.UnitTests/BackEnd/IntegrationTests.cs
index 9a951727c87..a764a4672f4 100644
--- a/src/Build.UnitTests/BackEnd/IntegrationTests.cs
+++ b/src/Build.UnitTests/BackEnd/IntegrationTests.cs
@@ -2,7 +2,7 @@
 
 namespace Microsoft.Build.Unittest.BackEnd
 {
-    class IntegrationTests
+    internal class IntegrationTests
     {
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index 188556cb714..3c83e4fd004 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -999,7 +999,7 @@ public void NewSymlinkNewDestinationIsNotUpToDate()
         [DllImport("kernel32.dll")]
         [return: MarshalAs(UnmanagedType.Bool)]
         [SupportedOSPlatform("windows")]
-        static extern bool CreateSymbolicLink(string lpSymlinkFileName, string lpTargetFileName, UInt32 dwFlags);
+        private static extern bool CreateSymbolicLink(string lpSymlinkFileName, string lpTargetFileName, UInt32 dwFlags);
 
         [DllImport("kernel32.dll", SetLastError = true)]
         [SupportedOSPlatform("windows")]
diff --git a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
index 69c142d7712..5e5e6724247 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     public sealed class TaskHostFactory_Tests
     {
-        ITestOutputHelper _output;
+        private ITestOutputHelper _output;
 
         public TaskHostFactory_Tests(ITestOutputHelper testOutputHelper)
         {
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index a39e18d8245..55c907b97c3 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.Engine.UnitTests
 {
     public sealed class ChangeWaves_Tests
     {
-        ITestOutputHelper _output;
+        private ITestOutputHelper _output;
         public ChangeWaves_Tests(ITestOutputHelper output)
         {
             _output = output;
diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index 21b48075b58..cd7da119623 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -21,7 +21,7 @@ namespace Microsoft.Build.UnitTests.Evaluation
     /// </summary>
     public class ImportFromMSBuildExtensionsPathTests : IDisposable
     {
-        string toolsVersionToUse = null;
+        private string toolsVersionToUse = null;
 
         public ImportFromMSBuildExtensionsPathTests()
         {
@@ -844,7 +844,7 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
             }
         }
 
-        void CreateAndBuildProjectForImportFromExtensionsPath(string extnPathPropertyName, Action<Project, MockLogger> action)
+        private void CreateAndBuildProjectForImportFromExtensionsPath(string extnPathPropertyName, Action<Project, MockLogger> action)
         {
             string extnDir1 = null, extnDir2 = null, mainProjectPath = null;
             try
@@ -877,7 +877,7 @@ void CreateAndBuildProjectForImportFromExtensionsPath(string extnPathPropertyNam
             }
         }
 
-        void CreateAndBuildProjectForImportFromExtensionsPath(string mainProjectPath, string extnPathPropertyName, string[] extnDirs, Action<string[]> setExtensionsPath,
+        private void CreateAndBuildProjectForImportFromExtensionsPath(string mainProjectPath, string extnPathPropertyName, string[] extnDirs, Action<string[]> setExtensionsPath,
                 Action<Project, MockLogger> action)
         {
             try
@@ -957,7 +957,7 @@ private ProjectCollection GetProjectCollection(IDictionary<string, string> globa
             return projColln;
         }
 
-        string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFilePath, string fileContents)
+        private string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFilePath, string fileContents)
         {
             var extnDir = Path.Combine(ObjectModelHelpers.TempProjectDir, extnDirName);
             Directory.CreateDirectory(Path.Combine(extnDir, Path.GetDirectoryName(relativeFilePath)));
@@ -966,7 +966,7 @@ string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFile
             return extnDir;
         }
 
-        string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExtensionsPath")
+        private string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string mainTargetsFileContent = @"
                 <Project>
@@ -980,7 +980,7 @@ string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExte
             return String.Format(mainTargetsFileContent, extensionsPathPropertyName);
         }
 
-        string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBuildExtensionsPath")
+        private string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent1 = @"
                 <Project>
@@ -998,7 +998,7 @@ string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBu
             return String.Format(extnTargetsFileContent1, extensionsPathPropertyName);
         }
 
-        string GetExtensionTargetsFileContent2(string extensionsPathPropertyName = "MSBuildExtensionsPath")
+        private string GetExtensionTargetsFileContent2(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent2 = @"
                 <Project>
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index ed6ef8fd68a..57d28cb6411 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -15,8 +15,7 @@ public sealed class WarningsAsMessagesAndErrorsTests
     {
         private const string ExpectedEventMessage = "03767942CDB147B98D0ECDBDE1436DA3";
         private const string ExpectedEventCode = "0BF68998";
-
-        ITestOutputHelper _output;
+        private ITestOutputHelper _output;
 
         public WarningsAsMessagesAndErrorsTests(ITestOutputHelper output)
         {
diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index 351f922451c..89066fc9ef4 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -64,7 +64,7 @@ internal sealed class MSBuildClientPacketPump : INodePacketHandler, INodePacketF
         /// <summary>
         /// The binary translator for reading packets.
         /// </summary>
-        readonly ITranslator _binaryReadTranslator;
+        private readonly ITranslator _binaryReadTranslator;
 
         /// <summary>
         /// True if this side is gracefully disconnecting.
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 77741a46412..3511a7ed454 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -519,7 +519,7 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
         /// </summary>
         internal class NodeContext
         {
-            enum ExitPacketState
+            private enum ExitPacketState
             {
                 None,
                 ExitPacketQueued,
diff --git a/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs b/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
index 586db964fec..36a30f8d445 100644
--- a/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
@@ -6,7 +6,7 @@
 
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
-    static class SdkResultTranslationHelpers
+    internal static class SdkResultTranslationHelpers
     {
         public static void Translate(this ITranslator t, ref SdkReference sdkReference)
         {
diff --git a/src/Build/Construction/ProjectUsingTaskParameterElement.cs b/src/Build/Construction/ProjectUsingTaskParameterElement.cs
index 77ff6bc1893..668f40c97c9 100644
--- a/src/Build/Construction/ProjectUsingTaskParameterElement.cs
+++ b/src/Build/Construction/ProjectUsingTaskParameterElement.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Construction
     [DebuggerDisplay("Name={Name} ParameterType={ParameterType} Output={Output} Required={Required}")]
     public class ProjectUsingTaskParameterElement : ProjectElement
     {
-        ProjectUsingTaskParameterElementLink TaskParameterLink => (ProjectUsingTaskParameterElementLink)Link;
+        private ProjectUsingTaskParameterElementLink TaskParameterLink => (ProjectUsingTaskParameterElementLink)Link;
         /// <summary>
         /// External projects support
         /// </summary>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
index ecae588cd20..197c65d7d42 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
@@ -17,10 +17,10 @@ namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
     {
-        class EvaluatorData : IEvaluatorData<P, I, M, D>
+        private class EvaluatorData : IEvaluatorData<P, I, M, D>
         {
-            IEvaluatorData<P, I, M, D> _wrappedData;
-            Func<string, ICollection<I>> _itemGetter;
+            private IEvaluatorData<P, I, M, D> _wrappedData;
+            private Func<string, ICollection<I>> _itemGetter;
 
             public EvaluatorData(IEvaluatorData<P, I, M, D> wrappedData, Func<string, ICollection<I>> itemGetter)
             {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index cbbc06d0cef..f2087a7b9cd 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -18,15 +18,12 @@ namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
     {
-        class IncludeOperation : LazyItemOperation
+        private class IncludeOperation : LazyItemOperation
         {
-            readonly int _elementOrder;
-
-            readonly string _rootDirectory;
-
-            readonly ImmutableSegmentedList<string> _excludes;
-
-            readonly ImmutableList<ProjectMetadataElement> _metadata;
+            private readonly int _elementOrder;
+            private readonly string _rootDirectory;
+            private readonly ImmutableSegmentedList<string> _excludes;
+            private readonly ImmutableList<ProjectMetadataElement> _metadata;
 
             public IncludeOperation(IncludeOperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
                 : base(builder, lazyEvaluator)
@@ -170,7 +167,7 @@ protected override void SaveItems(ImmutableList<I> items, OrderedItemDataCollect
             }
         }
 
-        class IncludeOperationBuilder : OperationBuilderWithMetadata
+        private class IncludeOperationBuilder : OperationBuilderWithMetadata
         {
             public int ElementOrder { get; set; }
             public string RootDirectory { get; set; }
diff --git a/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs b/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs
index 9bda1d32cdf..22331773ce8 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs
@@ -12,10 +12,10 @@ namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
     {
-        class ItemFactoryWrapper : IItemFactory<I, I>
+        private class ItemFactoryWrapper : IItemFactory<I, I>
         {
-            ProjectItemElement _itemElement;
-            IItemFactory<I, I> _wrappedItemFactory;
+            private ProjectItemElement _itemElement;
+            private IItemFactory<I, I> _wrappedItemFactory;
 
             public ItemFactoryWrapper(ProjectItemElement itemElement, IItemFactory<I, I> wrappedItemFactory)
             {
@@ -23,7 +23,7 @@ public ItemFactoryWrapper(ProjectItemElement itemElement, IItemFactory<I, I> wra
                 _wrappedItemFactory = wrappedItemFactory;
             }
 
-            void SetItemElement()
+            private void SetItemElement()
             {
                 _wrappedItemFactory.ItemElement = _itemElement;
             }
diff --git a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
index 9459e49067d..5e345dd0e16 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
@@ -41,7 +41,7 @@ internal Builder(ImmutableList<ItemData>.Builder listBuilder)
 
                 #region IEnumerable implementation
 
-                ImmutableList<ItemData>.Enumerator GetEnumerator() => _listBuilder.GetEnumerator();
+                private ImmutableList<ItemData>.Enumerator GetEnumerator() => _listBuilder.GetEnumerator();
                 IEnumerator<ItemData> IEnumerable<ItemData>.GetEnumerator() => _listBuilder.GetEnumerator();
 
                 System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => _listBuilder.GetEnumerator();
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 8fbcc487daa..ee78d18bafb 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -14,9 +14,9 @@ namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
     {
-        class RemoveOperation : LazyItemOperation
+        private class RemoveOperation : LazyItemOperation
         {
-            readonly ImmutableList<string> _matchOnMetadata;
+            private readonly ImmutableList<string> _matchOnMetadata;
             private MetadataTrie<P, I> _metadataSet;
 
             public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
@@ -109,7 +109,7 @@ public ImmutableHashSet<string>.Builder GetRemovedGlobs()
             }
         }
 
-        class RemoveOperationBuilder : OperationBuilder
+        private class RemoveOperationBuilder : OperationBuilder
         {
             public ImmutableList<string>.Builder MatchOnMetadata { get; } = ImmutableList.CreateBuilder<string>();
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index 88c299dd571..ce7db6202e4 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
     {
-        class UpdateOperation : LazyItemOperation
+        private class UpdateOperation : LazyItemOperation
         {
             private readonly ImmutableList<ProjectMetadataElement> _metadata;
             private ImmutableList<ItemBatchingContext>.Builder _itemsToUpdate = null;
@@ -27,7 +27,7 @@ public UpdateOperation(OperationBuilderWithMetadata builder, LazyItemEvaluator<P
                 _metadata = builder.Metadata.ToImmutable();
             }
 
-            readonly struct MatchResult
+            private readonly struct MatchResult
             {
                 public bool IsMatch { get; }
                 public Dictionary<string, I> CapturedItemsFromReferencedItemTypes { get; }
@@ -39,7 +39,7 @@ public MatchResult(bool isMatch, Dictionary<string, I> capturedItemsFromReferenc
                 }
             }
 
-            delegate MatchResult ItemSpecMatchesItem(ItemSpec<P, I> itemSpec, I itemToMatch);
+            private delegate MatchResult ItemSpecMatchesItem(ItemSpec<P, I> itemSpec, I itemToMatch);
 
             protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index a293483551b..563c9d146b2 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -294,7 +294,7 @@ public GlobalPropertyPartsForMSBuildTask AddPropertyToUndefine(string propertyTo
             }
         }
 
-        delegate GlobalPropertyPartsForMSBuildTask GlobalPropertiesModifier(GlobalPropertyPartsForMSBuildTask defaultParts, ProjectItemInstance projectReference);
+        private delegate GlobalPropertyPartsForMSBuildTask GlobalPropertiesModifier(GlobalPropertyPartsForMSBuildTask defaultParts, ProjectItemInstance projectReference);
 
         /// <summary>
         ///     Gets the effective global properties for an item that will get passed to <see cref="MSBuild.Projects"/>.
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 458c6956422..5fbc2d36765 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -656,7 +656,7 @@ private Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> GetReleva
 
         // Create another set containing architecture-specific task entries.
         // Then when we look for them, check if the name exists in that.
-        Dictionary<string, List<RegisteredTaskRecord>> overriddenTasks = new Dictionary<string, List<RegisteredTaskRecord>>();
+        private Dictionary<string, List<RegisteredTaskRecord>> overriddenTasks = new Dictionary<string, List<RegisteredTaskRecord>>();
 
         /// <summary>
         /// Registers an evaluated using task tag for future
@@ -1838,13 +1838,13 @@ public void Translate(ITranslator translator)
         }
 
         // todo make nested after C# 7
-        void TranslateTaskRegistrationKey(ITranslator translator, ref RegisteredTaskIdentity taskIdentity)
+        private void TranslateTaskRegistrationKey(ITranslator translator, ref RegisteredTaskIdentity taskIdentity)
         {
             translator.Translate(ref taskIdentity);
         }
 
         // todo make nested after C# 7
-        void TranslateTaskRegistrationValue(ITranslator translator, ref List<RegisteredTaskRecord> taskRecords)
+        private void TranslateTaskRegistrationValue(ITranslator translator, ref List<RegisteredTaskRecord> taskRecords)
         {
             translator.Translate(ref taskRecords, RegisteredTaskRecord.FactoryForDeserialization);
         }
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 9aef8862533..8d51e4a8477 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -52,7 +52,7 @@ public void Initialize(IEventSource eventSource)
             });
         }
 
-        void Render()
+        private void Render()
         {
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
@@ -102,17 +102,17 @@ void Render()
         }
 
         // Build
-        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
+        private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         {
         }
 
-        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
+        private void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         {
             Succeeded = e.Succeeded;
         }
 
         // Project
-        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
+        private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -128,7 +128,7 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
+        private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -143,7 +143,7 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         }
 
         // Target
-        void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
+        private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -157,7 +157,7 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
+        private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -172,7 +172,7 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         }
 
         // Task
-        void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
+        private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -187,13 +187,13 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
+        private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
             completedTasks++;
         }
 
         // Raised messages, warnings and errors
-        void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
+        private void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         {
             if (e is TaskCommandLineEventArgs)
             {
@@ -211,7 +211,7 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
+        private void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -224,7 +224,8 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
             // Log
             node.ShouldRerender = true;
         }
-        void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
+
+        private void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
@@ -238,7 +239,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
+        private void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
         {
             // Shutdown logger
             Shutdown();
diff --git a/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs b/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
index 022027b249a..23c9c90e662 100644
--- a/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.Internal
 {
-    partial class ProjectXmlUtilities
+    internal partial class ProjectXmlUtilities
     {
         // Iterating an element's nodes allocates an non-trivial amount of data in certain
         // large solutions with lots of targets, so we have our own struct-based iterator
diff --git a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
index 57fc959a2fc..e700930ad8d 100644
--- a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
+++ b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
@@ -22,7 +22,7 @@ internal sealed class CopyOnWriteHashtable : IDictionary, ICloneable
         private object sharedLock;
 
         // Carry around the StringComparer when possible to make Clear less expensive.
-        StringComparer stringComparer = null;
+        private StringComparer stringComparer = null;
 
 #region Construct
         /// <summary>
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs b/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
index 990267a4730..db90dd74a2a 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
@@ -154,7 +154,7 @@ internal void ReportLoggingFailure(Exception e)
         /// <summary>
         /// The number of events in one array posted to the parent.
         /// </summary>
-        const int eventArrayChunkSize = 100;
+        private const int eventArrayChunkSize = 100;
         #endregion
     }
 }
diff --git a/src/Deprecated/Engine/Engine/ProjectBuildState.cs b/src/Deprecated/Engine/Engine/ProjectBuildState.cs
index 676ba8a9af5..64e6f587499 100644
--- a/src/Deprecated/Engine/Engine/ProjectBuildState.cs
+++ b/src/Deprecated/Engine/Engine/ProjectBuildState.cs
@@ -317,18 +317,23 @@ internal enum BuildContextState
 
         #region Data
         // Stack of targets which need to be completed before the in progress target can continue
-        Stack<string> requiredTargets;
+        private Stack<string> requiredTargets;
+
         // BuildEventContext for the build context
-        BuildEventContext projectBuildEventContext;
+        private BuildEventContext projectBuildEventContext;
+
         // Index of the currently in progress target
-        int indexOfTargetInProgress;
+        private int indexOfTargetInProgress;
+
         // List of targets that need to be completed in order to complete the context
         // UNDONE should do the right thing and fully unescape before generating this list
-        ArrayList targetNamesToBuild;
+        private ArrayList targetNamesToBuild;
+
         // Build request that caused the context to come into existance (either from the host or generated)
-        BuildRequest buildRequest;
+        private BuildRequest buildRequest;
+
         // Current state of the context
-        BuildContextState buildContextState;
+        private BuildContextState buildContextState;
         #endregion
     }
 }
diff --git a/src/Deprecated/Engine/Engine/Router.cs b/src/Deprecated/Engine/Engine/Router.cs
index 52150867a2e..a01ceb26477 100644
--- a/src/Deprecated/Engine/Engine/Router.cs
+++ b/src/Deprecated/Engine/Engine/Router.cs
@@ -187,27 +187,27 @@ internal void PostBuildRequest(BuildRequest currentRequest, int nodeIndex)
         /// <summary>
         /// The node manager is used as a proxy for communication with child nodes
         /// </summary>
-        NodeManager nodeManager;
+        private NodeManager nodeManager;
 
         /// <summary>
         /// The parent engine who instantiated the router
         /// </summary>
-        Engine parentEngine;
+        private Engine parentEngine;
 
         /// <summary>
         /// Scheduler who is responsible for determining which nodes a build request should be sent to.
         /// </summary>
-        Scheduler scheduler;
+        private Scheduler scheduler;
 
         /// <summary>
         /// Is the router instantiated on a child process
         /// </summary>
-        bool childMode;
+        private bool childMode;
 
         /// <summary>
         /// What is the parent Node on which the engine is hosted if we are a child process
         /// </summary>
-        Node parentNode;
+        private Node parentNode;
         #endregion 
     }
 }
diff --git a/src/Deprecated/Engine/Engine/Target.cs b/src/Deprecated/Engine/Engine/Target.cs
index 73cd4911687..18e3a06117f 100644
--- a/src/Deprecated/Engine/Engine/Target.cs
+++ b/src/Deprecated/Engine/Engine/Target.cs
@@ -84,7 +84,7 @@ internal enum BuildState
         private XmlAttribute outputsAttribute = null;
 
         // This contains all of the child task nodes in this <Target> node.
-        ArrayList taskElementList = null;
+        private ArrayList taskElementList = null;
 
         // If this is a persisted <Target> element, this boolean tells us whether
         // it came from the main parentProject.file or an imported parentProject.file.
@@ -103,10 +103,8 @@ internal enum BuildState
 
         // We check the target's condition to ensure it doesn't reference item metadata in an attempt to batch.
         private bool conditionCheckedForInvalidMetadataReferences = false;
-
-        TargetExecutionWrapper executionState = null;
-
-        List<string> batchableTargetParameters = null;
+        private TargetExecutionWrapper executionState = null;
+        private List<string> batchableTargetParameters = null;
         
         // TargetId
         private int id;
diff --git a/src/Deprecated/Engine/Engine/TargetCollection.cs b/src/Deprecated/Engine/Engine/TargetCollection.cs
index 3db0507014b..4b49d144aab 100644
--- a/src/Deprecated/Engine/Engine/TargetCollection.cs
+++ b/src/Deprecated/Engine/Engine/TargetCollection.cs
@@ -22,8 +22,8 @@ public class TargetCollection : IEnumerable, ICollection
         #region Member Data
 
         // This is the hashtable of Targets (indexed by name) contained in this collection.
-        Hashtable       targetTable = null;
-        Project        parentProject = null;
+        private Hashtable       targetTable = null;
+        private Project        parentProject = null;
 
         #endregion
 
diff --git a/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs b/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
index 71fefcb6bb9..e1396dbf361 100644
--- a/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
+++ b/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
@@ -1210,22 +1210,27 @@ private int CompareLastWriteTimes(string path1, string path2, out bool path1Does
         private XmlAttribute targetInputsAttribute;
         // The XmlAttribute for the "Outputs"
         private XmlAttribute targetOutputsAttribute;
+
         // Details of the dependency analysis for logging
-        ArrayList dependencyAnalysisDetail = new ArrayList();
+        private ArrayList dependencyAnalysisDetail = new ArrayList();
+
         // The unique target inputs
-        Hashtable uniqueTargetInputs = new Hashtable(StringComparer.OrdinalIgnoreCase);
+        private Hashtable uniqueTargetInputs = new Hashtable(StringComparer.OrdinalIgnoreCase);
+
         // The unique target outputs;
-        Hashtable uniqueTargetOutputs = new Hashtable(StringComparer.OrdinalIgnoreCase);
+        private Hashtable uniqueTargetOutputs = new Hashtable(StringComparer.OrdinalIgnoreCase);
+
         // Engine logging service which to log message to
-        EngineLoggingServices loggingService;
+        private EngineLoggingServices loggingService;
+
         // Event context information where event is raised from
-        BuildEventContext buildEventContext;
+        private BuildEventContext buildEventContext;
     }
 
     /// <summary>
     /// Why TLDA decided this entry was out of date
     /// </summary>
-    enum OutofdateReason
+    internal enum OutofdateReason
     {
         MissingInput, // The input file was missing
         MissingOutput, // The output file was missing
@@ -1235,7 +1240,7 @@ enum OutofdateReason
     /// <summary>
     /// A logging detail entry. Describes what TLDA decided about inputs / outputs
     /// </summary>
-    class DependencyAnalysisLogDetail
+    internal class DependencyAnalysisLogDetail
     {
         private OutofdateReason reason;
         private string inputItemName;
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionContext.cs b/src/Deprecated/Engine/Engine/TaskExecutionContext.cs
index 9851e8c6df9..a4e3034e6d1 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionContext.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionContext.cs
@@ -165,8 +165,8 @@ long executionTime
         /// <summary>
         /// Task outputs
         /// </summary>
-        bool                taskExecutedSuccessfully; 
-        Exception           thrownException;
+        private bool                taskExecutedSuccessfully;
+        private Exception           thrownException;
 
         #endregion
     }
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
index 2a0be7b9617..4645fa4df44 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
@@ -591,14 +591,16 @@ internal TaskWorkerThread GetWorkerThread()
         /// Callback interface to communicate with the engine
         /// </summary>
         private EngineCallback engineCallback;
+
         /// <summary>
         /// The mode in which the TEM is running
         /// </summary>
-        TaskExecutionModuleMode moduleMode;
+        private TaskExecutionModuleMode moduleMode;
+
         /// <summary>
         /// The class used to execute user tasks.
         /// </summary>
-        TaskWorkerThread workerThread;
+        private TaskWorkerThread workerThread;
 
         // Data shared between all worker threads within the TEM
         /// <summary>
diff --git a/src/Deprecated/Engine/Engine/TaskWorkerThread.cs b/src/Deprecated/Engine/Engine/TaskWorkerThread.cs
index 37efbc5c0c2..44438b6658b 100644
--- a/src/Deprecated/Engine/Engine/TaskWorkerThread.cs
+++ b/src/Deprecated/Engine/Engine/TaskWorkerThread.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.BuildEngine
     /// </summary>
     internal class TaskWorkerThread
     {
-        enum NodeLoopExecutionMode
+        private enum NodeLoopExecutionMode
         {
             /// <summary>
             /// This is a mode of a thread that is not executing a task but is responsible for picking up
diff --git a/src/Deprecated/Engine/Introspector/TargetInProgressState.cs b/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
index 114ac3532b9..6efeab91d85 100644
--- a/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
+++ b/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
@@ -297,21 +297,27 @@ ProjectBuildState projectBuildState
         #region Data
 
         // Unique identifier for the target
-        TargetIdWrapper targetId;
+        private TargetIdWrapper targetId;
+
         // List of targets waiting on the current target
-        List<TargetIdWrapper> parentTargets;
+        private List<TargetIdWrapper> parentTargets;
+
         // List of build requests waiting on the current target
-        List<BuildRequest> parentBuildRequests;
+        private List<BuildRequest> parentBuildRequests;
+
         // List of the build requests the target is waiting on
-        BuildRequest[] outstandingBuildRequests;
+        private BuildRequest[] outstandingBuildRequests;
+
         // Mapping between list of build requests waiting on the current target and targets
         // from which these build reuquests originated
-        TargetIdWrapper [] parentTargetsForBuildRequests;
+        private TargetIdWrapper [] parentTargetsForBuildRequests;
+
         // Name of the project containing the target (only used for logging)
-        string projectName;
+        private string projectName;
+
         // Set to true if the target had a been requested by host (direct requests from host only occur on
         // parent node)
-        bool requestedByHost;
+        private bool requestedByHost;
         #endregion
 
         #region CustomSerializationToStream
diff --git a/src/Deprecated/Engine/Items/BuildItemGroup.cs b/src/Deprecated/Engine/Items/BuildItemGroup.cs
index 82f439c644b..ebb02833a72 100644
--- a/src/Deprecated/Engine/Items/BuildItemGroup.cs
+++ b/src/Deprecated/Engine/Items/BuildItemGroup.cs
@@ -31,7 +31,7 @@ public class BuildItemGroup : IItemPropertyGrouping, IEnumerable
 
         // If this is a persisted <ItemGroup>, this boolean tells us whether
         // it came from the main project file, or an imported project file.
-        bool importedFromAnotherProject = false;
+        private bool importedFromAnotherProject = false;
 
         // These are the loose Items beneath this BuildItemGroup.  This is
         // valid for both persisted and virtual ItemGroups.
diff --git a/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs b/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs
index 87cb6e68e47..5abd5ecd7f6 100644
--- a/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs
+++ b/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs
@@ -21,10 +21,10 @@ internal class ItemDefinitionLibrary
     {
         #region Fields
 
-        Project parentProject;
-        List<ItemDefinitionLibrary.BuildItemDefinitionGroupXml> itemDefinitions;
-        ItemDefinitionsDictionary itemDefinitionsDictionary;
-        bool evaluated;
+        private Project parentProject;
+        private List<ItemDefinitionLibrary.BuildItemDefinitionGroupXml> itemDefinitions;
+        private ItemDefinitionsDictionary itemDefinitionsDictionary;
+        private bool evaluated;
 
         #endregion
 
@@ -176,10 +176,10 @@ private class BuildItemDefinitionGroupXml
         {
             #region Fields
 
-            XmlElement element;
-            Project parentProject;
-            XmlAttribute conditionAttribute;
-            string condition;
+            private XmlElement element;
+            private Project parentProject;
+            private XmlAttribute conditionAttribute;
+            private string condition;
 
             #endregion
 
@@ -317,8 +317,8 @@ private void EvaluateItemDefinitionChildElement(XmlElement itemDefinitionChildEl
     /// </summary>
     internal class SpecificItemDefinitionLibrary
     {
-        string itemType;
-        ItemDefinitionLibrary itemDefinitionLibrary;
+        private string itemType;
+        private ItemDefinitionLibrary itemDefinitionLibrary;
 
         /// <summary>
         /// Constructor
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNode.cs b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
index c883962ece7..5da591534fd 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNode.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
@@ -101,7 +101,7 @@ internal LocalNode(int nodeNumberIn)
         /// <summary>
         /// This method causes the reader and writer threads to start and create the shared memory structures
         /// </summary>
-        void StartCommunicationThreads()
+        private void StartCommunicationThreads()
         {
             // The writer thread should be created before the
             // reader thread because some LocalCallDescriptors
@@ -138,7 +138,7 @@ void StartCommunicationThreads()
         /// <summary>
         /// This method causes the reader and writer threads to exit and dispose of the shared memory structures
         /// </summary>
-        void StopCommunicationThreads()
+        private void StopCommunicationThreads()
         {
             communicationThreadExitEvent.Set();
 
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
index cc192735e22..39cd3d0c0c0 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.BuildEngine
     /// <summary>
     /// This class is shared between LocalNode and LocalNodeProvider and contains all the global name generation logic
     /// </summary>
-    static class LocalNodeProviderGlobalNames
+    internal static class LocalNodeProviderGlobalNames
     {
         #region Methods
 
@@ -160,7 +160,7 @@ private static void InitializeGlobalNamePostFixValues()
         #endregion
 
         #region Data
-        static string nodePostfix = null;
+        private static string nodePostfix = null;
         #endregion
     }
 }
diff --git a/src/Deprecated/Engine/LocalProvider/NativeMethods.cs b/src/Deprecated/Engine/LocalProvider/NativeMethods.cs
index d2be3516f56..5e4c1f071fc 100644
--- a/src/Deprecated/Engine/LocalProvider/NativeMethods.cs
+++ b/src/Deprecated/Engine/LocalProvider/NativeMethods.cs
@@ -201,10 +201,10 @@ internal struct SECURITY_DESCRIPTOR
         [StructLayout(LayoutKind.Sequential)]
         internal struct PROCESS_INFORMATION
         {
-            IntPtr hProcess;
-            IntPtr hThread;
-            int dwProcessId;
-            int dwThreadId;
+            private IntPtr hProcess;
+            private IntPtr hThread;
+            private int dwProcessId;
+            private int dwThreadId;
         }
 
         [StructLayout(LayoutKind.Sequential)]
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
index 5bcd93e943b..2f1f212ab1b 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -194,12 +194,15 @@ public string Parameters
         private FileLogger nodeFileLogger;
         // Reference for the central logger 
         private IEventRedirector buildEventRedirector;
+
         // The Id of the node the forwardingLogger is attached to
-        int nodeId;
+        private int nodeId;
+
         // Directory to place the log files, by default this will be in the current directory when the node is created
-        string logFile = "msbuild.log";
+        private string logFile = "msbuild.log";
+
         // Logger parameters
-        string parameters;
+        private string parameters;
         // File logger parameters delimiters.
         private static readonly char[] fileLoggerParameterDelimiters = { ';' };
         // File logger parameter value split character.
diff --git a/src/Deprecated/Engine/Shared/SolutionParser.cs b/src/Deprecated/Engine/Shared/SolutionParser.cs
index 8db06ef986b..0aa3861f555 100644
--- a/src/Deprecated/Engine/Shared/SolutionParser.cs
+++ b/src/Deprecated/Engine/Shared/SolutionParser.cs
@@ -93,9 +93,8 @@ internal class SolutionParser
 
         // unit-testing only
         private ArrayList solutionParserErrorCodes = null;
-
-        StreamReader reader = null;
-        int currentLineNumber = 0;
+        private StreamReader reader = null;
+        private int currentLineNumber = 0;
 
         #endregion
 
diff --git a/src/Deprecated/Engine/Tasks/IntrinsicTask.cs b/src/Deprecated/Engine/Tasks/IntrinsicTask.cs
index 2633ca633bd..c895729c97a 100644
--- a/src/Deprecated/Engine/Tasks/IntrinsicTask.cs
+++ b/src/Deprecated/Engine/Tasks/IntrinsicTask.cs
@@ -325,16 +325,21 @@ private static void AddIfNotEmptyString(List<string> list, string value)
         private EngineLoggingServices loggingServices;
         // event contextual information where the event is fired from
         private BuildEventContext buildEventContext;
+
         // whether the backing type is a property group, or an item group
-        BackingType backingType;
+        private BackingType backingType;
+
         // backing property group, if any
-        BuildPropertyGroup backingPropertyGroup;
+        private BuildPropertyGroup backingPropertyGroup;
+
         // backing xml for a backing item group, if any
-        BuildItemGroupXml backingItemGroupXml;
+        private BuildItemGroupXml backingItemGroupXml;
+
         // children of the backing item group, if any
-        List<BuildItemGroupChildXml> backingBuildItemGroupChildren = null;
+        private List<BuildItemGroupChildXml> backingBuildItemGroupChildren = null;
+
         // directory in which the project is executing -- the current directory needed to expand wildcards
-        string executionDirectory;
+        private string executionDirectory;
         // the conditional expression that controls task execution
         private XmlAttribute conditionAttribute;
         // the library of default metadata that any new items should inherit
diff --git a/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs b/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
index f3eb19e6dc1..78492147adf 100644
--- a/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
+++ b/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
@@ -8,7 +8,7 @@
 
 namespace System.Collections.Immutable
 {
-    static class ImmutableExtensions
+    internal static class ImmutableExtensions
     {
         public static ImmutableDictionary<K,V> ToImmutableDictionary<K,V>(this IDictionary<K,V> dictionary)
         {
@@ -16,7 +16,7 @@ public static ImmutableDictionary<K,V> ToImmutableDictionary<K,V>(this IDictiona
         }
     }
 
-    static class ImmutableDictionary
+    internal static class ImmutableDictionary
     {
         internal static ImmutableDictionary<K, V> Create<K, V>(IEqualityComparer<K> comparer)
         {
@@ -29,7 +29,7 @@ internal static ImmutableDictionary<K, V> Create<K, V>(IEqualityComparer<K> comp
     /// </summary>
     /// <typeparam name="K"></typeparam>
     /// <typeparam name="V"></typeparam>
-    sealed class ImmutableDictionary<K, V> : IDictionary<K, V>, IDictionary
+    internal sealed class ImmutableDictionary<K, V> : IDictionary<K, V>, IDictionary
     {
         /// <summary>
         /// The underlying dictionary.
diff --git a/src/Package/Microsoft.Build.UnGAC/Program.cs b/src/Package/Microsoft.Build.UnGAC/Program.cs
index 3515f1781a2..6b9c230cace 100644
--- a/src/Package/Microsoft.Build.UnGAC/Program.cs
+++ b/src/Package/Microsoft.Build.UnGAC/Program.cs
@@ -13,9 +13,9 @@ namespace Microsoft.Build.UnGAC
     /// It runs at VS install-time as well as repair-time.
     /// It is intended to run as best effort. Meaning that if it fails, we avoid throwing and instead log it.
     /// </summary>
-    class Program
+    internal class Program
     {
-        static void Main(string[] args)
+        private static void Main(string[] args)
         {
             try
             {
diff --git a/src/Shared/BufferedReadStream.cs b/src/Shared/BufferedReadStream.cs
index 6aaf31e792b..bcdd49bb620 100644
--- a/src/Shared/BufferedReadStream.cs
+++ b/src/Shared/BufferedReadStream.cs
@@ -10,15 +10,13 @@ namespace Microsoft.Build.BackEnd
 {
     internal class BufferedReadStream : Stream
     {
-        const int BUFFER_SIZE = 1024;
-
-        Stream _innerStream;
-        byte[] _buffer;
+        private const int BUFFER_SIZE = 1024;
+        private Stream _innerStream;
+        private byte[] _buffer;
 
         // The number of bytes in the buffer that have been read from the underlying stream but not read by consumers of this stream
-        int _currentlyBufferedByteCount;
-
-        int _currentIndexInBuffer;
+        private int _currentlyBufferedByteCount;
+        private int _currentIndexInBuffer;
 
         public BufferedReadStream(Stream innerStream)
         {
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 89f0375ee55..bb733905b22 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -748,7 +748,7 @@ string projectDirectory
             }
         }
 
-        struct RecursiveStepResult
+        private struct RecursiveStepResult
         {
             public string RemainingWildcardDirectory;
             public bool ConsiderFiles;
@@ -757,7 +757,7 @@ struct RecursiveStepResult
             public bool NeedsDirectoryRecursion;
         }
 
-        class FilesSearchData
+        private class FilesSearchData
         {
             public FilesSearchData(
                 string filespec,                // can be null
@@ -793,7 +793,7 @@ bool needsRecursion
             public bool NeedsRecursion { get; }
         }
 
-        struct RecursionState
+        private struct RecursionState
         {
             /// <summary>
             /// The directory to search in
@@ -1910,7 +1910,7 @@ internal static void GetRegexMatchInfo(
             }
         }
 
-        class TaskOptions
+        private class TaskOptions
         {
             public TaskOptions(int maxTasks)
             {
diff --git a/src/Shared/TranslatorHelpers.cs b/src/Shared/TranslatorHelpers.cs
index 7aab7c41054..aa31b08b5d3 100644
--- a/src/Shared/TranslatorHelpers.cs
+++ b/src/Shared/TranslatorHelpers.cs
@@ -45,7 +45,7 @@ public static void Translate<T>(
             }
         }
 
-        static ObjectTranslator<T> AdaptFactory<T>(NodePacketValueFactory<T> valueFactory) where T : ITranslatable
+        private static ObjectTranslator<T> AdaptFactory<T>(NodePacketValueFactory<T> valueFactory) where T : ITranslatable
         {
             void TranslateUsingValueFactory(ITranslator translator, ref T objectToTranslate)
             {
diff --git a/src/Shared/UnitTests/TaskParameter_Tests.cs b/src/Shared/UnitTests/TaskParameter_Tests.cs
index 9fdb8aa1c8d..056ad387dfe 100644
--- a/src/Shared/UnitTests/TaskParameter_Tests.cs
+++ b/src/Shared/UnitTests/TaskParameter_Tests.cs
@@ -131,7 +131,7 @@ public void IntArrayParameter()
             Assert.Equal(15, wrappedParameter2[1]);
         }
 
-        enum TestEnumForParameter
+        private enum TestEnumForParameter
         {
             Something,
             SomethingElse
diff --git a/src/Shared/UnitTests/TestAssemblyInfo.cs b/src/Shared/UnitTests/TestAssemblyInfo.cs
index ef9c42456db..3daf3d02e0f 100644
--- a/src/Shared/UnitTests/TestAssemblyInfo.cs
+++ b/src/Shared/UnitTests/TestAssemblyInfo.cs
@@ -24,7 +24,7 @@ namespace Microsoft.Build.UnitTests
 {
     public class MSBuildTestAssemblyFixture : IDisposable
     {
-        bool _disposed;
+        private bool _disposed;
         private TestEnvironment _testEnvironment;
 
         public MSBuildTestAssemblyFixture()
@@ -131,7 +131,7 @@ public void Dispose()
 
     public class MSBuildTestEnvironmentFixture : IDisposable
     {
-        bool _disposed;
+        private bool _disposed;
         private TestEnvironment _testEnvironment;
 
         public MSBuildTestEnvironmentFixture()
diff --git a/src/Shared/UnitTests/TestProgram.cs b/src/Shared/UnitTests/TestProgram.cs
index 39524b6054b..437ccf70843 100644
--- a/src/Shared/UnitTests/TestProgram.cs
+++ b/src/Shared/UnitTests/TestProgram.cs
@@ -1,8 +1,7 @@
 ﻿using System;
 using System.Collections.Generic;
 
-
-class Program
+internal class Program
 {
     public static int Main(string[] args)
     {
diff --git a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
index 0d26dd70755..feadb536c4a 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     public class TaskTranslatorHelpers
     {
-        MemoryStream _serializationStream;
+        private MemoryStream _serializationStream;
 
         [Fact]
         public void NullFrameworkName()
diff --git a/src/Tasks.UnitTests/RemoveDir_Tests.cs b/src/Tasks.UnitTests/RemoveDir_Tests.cs
index e34f47cea0c..d736a367bab 100644
--- a/src/Tasks.UnitTests/RemoveDir_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDir_Tests.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.UnitTests
 {
     public sealed class RemoveDir_Tests
     {
-        ITestOutputHelper _output;
+        private ITestOutputHelper _output;
         public RemoveDir_Tests(ITestOutputHelper output)
         {
             _output = output;
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs b/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs
index 67636e61e25..64aacbba504 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs
@@ -5,7 +5,7 @@
 
 namespace Microsoft.Build.Tasks.UnitTests.ResourceHandling
 {
-    static class ResXHelper
+    internal static class ResXHelper
     {
         public static string SurroundWithBoilerplate(string input)
         {
diff --git a/src/Tasks/AssemblyDependency/AssemblyMetadata.cs b/src/Tasks/AssemblyDependency/AssemblyMetadata.cs
index 7144c1d80d9..b76e4afc884 100644
--- a/src/Tasks/AssemblyDependency/AssemblyMetadata.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyMetadata.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Tasks.AssemblyDependency
     /// After initial construction, this object is readonly and data-only,
     /// allowing it to be safely cached.
     /// </remarks>
-    class AssemblyMetadata
+    internal class AssemblyMetadata
     {
         public readonly AssemblyNameExtension[] Dependencies;
         public readonly FrameworkName FrameworkName;
diff --git a/src/Tasks/CultureInfoCache.cs b/src/Tasks/CultureInfoCache.cs
index 0c2a3672ad0..159540d839e 100644
--- a/src/Tasks/CultureInfoCache.cs
+++ b/src/Tasks/CultureInfoCache.cs
@@ -29,9 +29,9 @@ internal static class CultureInfoCache
         // These pseudo-locales are available in versions of Windows from Vista and later.
         // However, from Windows 10, version 1803, they are not returned when enumerating the
         // installed cultures, even if the registry keys are set. Therefore, add them to the list manually.
-        static readonly string[] pseudoLocales = new[] { "qps-ploc", "qps-ploca", "qps-plocm", "qps-Latn-x-sh" };
+        private static readonly string[] pseudoLocales = new[] { "qps-ploc", "qps-ploca", "qps-plocm", "qps-Latn-x-sh" };
 
-        static HashSet<string> InitializeValidCultureNames()
+        private static HashSet<string> InitializeValidCultureNames()
         {
 #if !FEATURE_CULTUREINFO_GETCULTURES
             if (!AssemblyUtilities.CultureInfoHasGetCultures())
diff --git a/src/Tasks/Interop.cs b/src/Tasks/Interop.cs
index 8becf2ba00b..86dd1b52dab 100644
--- a/src/Tasks/Interop.cs
+++ b/src/Tasks/Interop.cs
@@ -9,7 +9,7 @@
 [Guid("79EAC9EE-BAF9-11CE-8C82-00AA004BA90B")]
 [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
 [ComConversionLoss]
-interface IInternetSecurityManager
+internal interface IInternetSecurityManager
 {
 	[MethodImpl(MethodImplOptions.InternalCall)]
 	void SetSecuritySite([In] [MarshalAs(UnmanagedType.Interface)] IInternetSecurityMgrSite pSite);
@@ -41,7 +41,7 @@ interface IInternetSecurityManager
 [ComConversionLoss]
 [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
 [Guid("79EAC9ED-BAF9-11CE-8C82-00AA004BA90B")]
-interface IInternetSecurityMgrSite
+internal interface IInternetSecurityMgrSite
 {
     [MethodImpl(MethodImplOptions.InternalCall)]
     void GetWindow([Out] [ComAliasName("UrlMonTypeLib.wireHWND")] IntPtr phwnd);
@@ -51,7 +51,7 @@ interface IInternetSecurityMgrSite
 }
 
 [StructLayout(LayoutKind.Sequential, Pack = 4)]
-struct GUID
+internal struct GUID
 {
     public int Data1;
 
@@ -66,7 +66,7 @@ struct GUID
 [ComImport]
 [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
 [Guid("00000101-0000-0000-C000-000000000046")]
-interface IEnumString
+internal interface IEnumString
 {
     [MethodImpl(MethodImplOptions.InternalCall)]
     void RemoteNext([In] int celt, [MarshalAs(UnmanagedType.LPWStr)] out string rgelt, out int pceltFetched);
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 8208fd280b1..3d8325f3cc4 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -129,20 +129,19 @@ internal struct RM_UNIQUE_PROCESS
             public FILETIME ProcessStartTime;
         }
 
-        const int CCH_RM_MAX_APP_NAME = 255;
-        const int CCH_RM_MAX_SVC_NAME = 63;
-        const int ERROR_SEM_TIMEOUT = 121;
-        const int ERROR_BAD_ARGUMENTS = 160;
-        const int ERROR_MAX_SESSIONS_REACHED = 353;
-        const int ERROR_WRITE_FAULT = 29;
-        const int ERROR_OUTOFMEMORY = 14;
-        const int ERROR_MORE_DATA = 234;
-        const int ERROR_ACCESS_DENIED = 5;
-        const int ERROR_INVALID_HANDLE = 6;
-        const int ERROR_CANCELLED = 1223;
-
-        static readonly int RM_SESSION_KEY_LEN = Guid.Empty.ToByteArray().Length; // 16-byte
-        static readonly int CCH_RM_SESSION_KEY = RM_SESSION_KEY_LEN * 2;
+        private const int CCH_RM_MAX_APP_NAME = 255;
+        private const int CCH_RM_MAX_SVC_NAME = 63;
+        private const int ERROR_SEM_TIMEOUT = 121;
+        private const int ERROR_BAD_ARGUMENTS = 160;
+        private const int ERROR_MAX_SESSIONS_REACHED = 353;
+        private const int ERROR_WRITE_FAULT = 29;
+        private const int ERROR_OUTOFMEMORY = 14;
+        private const int ERROR_MORE_DATA = 234;
+        private const int ERROR_ACCESS_DENIED = 5;
+        private const int ERROR_INVALID_HANDLE = 6;
+        private const int ERROR_CANCELLED = 1223;
+        private static readonly int RM_SESSION_KEY_LEN = Guid.Empty.ToByteArray().Length; // 16-byte
+        private static readonly int CCH_RM_SESSION_KEY = RM_SESSION_KEY_LEN * 2;
 
         internal enum RM_APP_TYPE
         {
@@ -155,7 +154,7 @@ internal enum RM_APP_TYPE
             RmCritical = 1000
         }
 
-        enum RM_APP_STATUS
+        private enum RM_APP_STATUS
         {
             RmStatusUnknown = 0x0,
             RmStatusRunning = 0x1,
@@ -168,7 +167,7 @@ enum RM_APP_STATUS
             RmStatusRestartMasked = 0x80
         }
 
-        enum RM_REBOOT_REASON
+        private enum RM_REBOOT_REASON
         {
             RmRebootReasonNone = 0x0,
             RmRebootReasonPermissionDenied = 0x1,
diff --git a/src/Tasks/ResourceHandling/NameUtilities.cs b/src/Tasks/ResourceHandling/NameUtilities.cs
index 6b07b11c0c4..4ec58701b99 100644
--- a/src/Tasks/ResourceHandling/NameUtilities.cs
+++ b/src/Tasks/ResourceHandling/NameUtilities.cs
@@ -7,7 +7,7 @@
 
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
-    static class NameUtilities
+    internal static class NameUtilities
     {
         /// <summary>
         /// Extract the full name of a type from an assembly-qualified name string.
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index e2812d295ca..bef36c0e7a9 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -113,11 +113,11 @@ public static class FileTracker
         // Static cache of the path separator character in an array for use in String.Split.
         private static readonly string pathSeparator = Path.PathSeparator.ToString();
 
-#endregion
+        #endregion
 
-#region Static Member Initializers
+        #region Static Member Initializers
 
-        static List<string> InitializeCommonApplicationDataPaths()
+        private static List<string> InitializeCommonApplicationDataPaths()
         {
             List<string> commonApplicationDataPaths = new();
 
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
index 9456ec19cb7..d1bdd305db4 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
@@ -12,8 +12,8 @@ namespace Xunit.NetCore.Extensions
 {
     public class XunitTestAssemblyRunnerWithAssemblyFixture : XunitTestAssemblyRunner
     {
-        readonly Dictionary<Type, object> assemblyFixtureMappings = new Dictionary<Type, object>();
-        List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
+        private readonly Dictionary<Type, object> assemblyFixtureMappings = new Dictionary<Type, object>();
+        private List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
 
         public XunitTestAssemblyRunnerWithAssemblyFixture(ITestAssembly testAssembly,
                                                           IEnumerable<IXunitTestCase> testCases,
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
index 7ca3236a5bd..41c2168c61f 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
@@ -12,8 +12,8 @@ namespace Xunit.NetCore.Extensions
 {
     public class XunitTestClassRunnerWithAssemblyFixture : XunitTestClassRunner
     {
-        readonly Dictionary<Type, object> assemblyFixtureMappings = new Dictionary<Type, object>();
-        readonly List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
+        private readonly Dictionary<Type, object> assemblyFixtureMappings = new Dictionary<Type, object>();
+        private readonly List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
 
         public XunitTestClassRunnerWithAssemblyFixture(
             List<AssemblyFixtureAttribute> assemblyFixtureAttributes,
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs
index 0b5ec858f9d..156dd72386d 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs
@@ -11,9 +11,9 @@ namespace Xunit.NetCore.Extensions
 {
     public class XunitTestCollectionRunnerWithAssemblyFixture : XunitTestCollectionRunner
     {
-        readonly Dictionary<Type, object> assemblyFixtureMappings;
-        readonly IMessageSink diagnosticMessageSink;
-        readonly List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
+        private readonly Dictionary<Type, object> assemblyFixtureMappings;
+        private readonly IMessageSink diagnosticMessageSink;
+        private readonly List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
 
         public XunitTestCollectionRunnerWithAssemblyFixture(Dictionary<Type, object> assemblyFixtureMappings,
                                                             List<AssemblyFixtureAttribute> assemblyFixtureAttributes,
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs
index 29d87c7950b..702623eb3fb 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs
@@ -11,8 +11,8 @@ namespace Xunit.NetCore.Extensions
 {
     public class XunitTestMethodRunnerWithAssemblyFixture : XunitTestMethodRunner
     {
-        readonly Dictionary<Type, object> assemblyFixtureMappings = new Dictionary<Type, object>();
-        readonly List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
+        private readonly Dictionary<Type, object> assemblyFixtureMappings = new Dictionary<Type, object>();
+        private readonly List<AssemblyFixtureAttribute> assemblyFixtureAttributes;
 
         public XunitTestMethodRunnerWithAssemblyFixture(List<AssemblyFixtureAttribute> assemblyFixtureAttributes,
                              ITestMethod testMethod,
