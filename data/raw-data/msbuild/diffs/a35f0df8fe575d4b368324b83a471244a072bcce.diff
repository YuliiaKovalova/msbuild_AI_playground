diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 15985c5f124..c25a7887880 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3593,18 +3593,35 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                             // otherwise there is the potential of running a function twice!
                             try
                             {
-                                // First use InvokeMember using the standard binder - this will match and coerce as needed
-                                for (int i = 0; i < args.Length; i++)
+                                // If there are any out parameters, try to figure out their type and create defaults for them as appropriate before calling the method.
+                                if (args.Any(a => a.Equals("_")))
                                 {
-                                    object s = args[i];
-                                    if (s is not null && s.ToString().StartsWith("outParam", StringComparison.OrdinalIgnoreCase))
+                                    IEnumerable<MethodInfo> methods = _receiverType.GetMethods(_bindingFlags).Where(m => m.Name.Equals(_methodMethodName) && m.GetParameters().Length == args.Length);
+                                    MethodInfo method = methods.SingleOrDefault();
+                                    if (method is not null)
                                     {
-                                        Type t = Type.GetType(s.ToString().Substring("outParam".Length));
-                                        args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;
+                                        for (int i = 0; i < args.Length; i++)
+                                        {
+                                            if (args[i].Equals("_"))
+                                            {
+                                                Type t = method.GetParameters()[i].ParameterType;
+                                                args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;
+                                            }
+                                        }
+
+                                        functionResult = method.Invoke(objectInstance, _bindingFlags, Type.DefaultBinder, args, CultureInfo.InvariantCulture);
+                                    }
+                                    else
+                                    {
+                                        // There were multiple methods that seemed viable. We can't differentiate between them so throw.
+                                        ErrorUtilities.ThrowArgument("foo", _methodMethodName, args.Length);
                                     }
                                 }
-
-                                functionResult = _receiverType.InvokeMember(_methodMethodName, _bindingFlags, Type.DefaultBinder, objectInstance, args, CultureInfo.InvariantCulture);
+                                else
+                                {
+                                    // If there are no out parameters, use InvokeMember using the standard binder - this will match and coerce as needed
+                                    functionResult = _receiverType.InvokeMember(_methodMethodName, _bindingFlags, Type.DefaultBinder, objectInstance, args, CultureInfo.InvariantCulture);
+                                }
                             }
                             // If we're invoking a method, then there are deeper attempts that can be made to invoke the method.
                             // If not, we were asked to get a property or field but found that we cannot locate it. No further argument coercion is possible, so throw.
