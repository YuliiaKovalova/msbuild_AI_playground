diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 9a185d7da13..7520bd02272 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -10,7 +10,8 @@
 using System.IO.Pipes;
 using System.Threading;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.BackEnd.Node;
+using Microsoft.Build.BackEnd.Client;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
@@ -20,29 +21,28 @@ namespace Microsoft.Build.Execution
     /// This class is the public entry point for executing builds in msbuild server.
     /// It processes command-line arguments and invokes the build engine.
     /// </summary>
-    public sealed class MSBuildClient 
+    public sealed class MSBuildClient
     {
         /// <summary>
-        /// The build inherits all the environment variables from the client prosess.
+        /// The build inherits all the environment variables from the client process.
         /// This property allows to add extra environment variables or reset some of the existing ones.
         /// </summary>
-        public Dictionary<string, string> ServerEnvironmentVariables { get; set; }
-
+        private readonly Dictionary<string, string> _serverEnvironmentVariables;
 
         /// <summary>
         /// Location of executable file to launch the server process. That should be either dotnet.exe or MSBuild.exe location.
         /// </summary>
-        private string _exeLocation;
+        private readonly string _exeLocation;
 
         /// <summary>
         /// Location of dll file to launch the server process if needed. Empty if executable is msbuild.exe and not empty if dotnet.exe.
         /// </summary>
-        private string _dllLocation;
+        private readonly string _dllLocation;
 
         /// <summary>
         /// The MSBuild client execution result.
         /// </summary>
-        private MSBuildClientExitResult _exitResult;
+        private readonly MSBuildClientExitResult _exitResult;
 
         /// <summary>
         /// Whether MSBuild server finished the build.
@@ -52,28 +52,27 @@ public sealed class MSBuildClient
         /// <summary>
         /// Handshake between server and client.
         /// </summary>
-        private ServerNodeHandshake _handshake;
+        private readonly ServerNodeHandshake _handshake;
 
         /// <summary>
         /// The named pipe name for client-server communication.
         /// </summary>
-        private string _pipeName;
+        private readonly string _pipeName;
 
         /// <summary>
         /// The named pipe stream for client-server communication.
         /// </summary>
-        private NamedPipeClientStream _nodeStream;
+        private readonly NamedPipeClientStream _nodeStream;
 
         /// <summary>
         /// A way to cache a byte array when writing out packets
         /// </summary>
-        private MemoryStream _packetMemoryStream;
+        private readonly MemoryStream _packetMemoryStream;
 
         /// <summary>
         /// A binary writer to help write into <see cref="_packetMemoryStream"/>
         /// </summary>
-        private BinaryWriter _binaryWriter;
-
+        private readonly BinaryWriter _binaryWriter;
 
         /// <summary>
         /// Public constructor with parameters.
@@ -84,7 +83,7 @@ public sealed class MSBuildClient
         /// Empty if executable is msbuild.exe and not empty if dotnet.exe.</param>
         public MSBuildClient(string exeLocation, string dllLocation)
         {
-            ServerEnvironmentVariables = new();
+            _serverEnvironmentVariables = new();
             _exitResult = new();
 
             // dll & exe locations
@@ -93,7 +92,7 @@ public MSBuildClient(string exeLocation, string dllLocation)
 
             // Client <-> Server communication stream
             _handshake = GetHandshake();
-            _pipeName = NamedPipeUtil.GetPipeNameOrPath("MSBuildServer-" + _handshake.ComputeHash());
+            _pipeName = OutOfProcServerNode.GetPipeName(_handshake);
             _nodeStream = new NamedPipeClientStream(".", _pipeName, PipeDirection.InOut, PipeOptions.Asynchronous
 #if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
                                                                          | PipeOptions.CurrentUserOnly
@@ -111,17 +110,17 @@ public MSBuildClient(string exeLocation, string dllLocation)
         /// <param name="commandLine">The command line to process. The first argument
         /// on the command line is assumed to be the name/path of the executable, and
         /// is ignored.</param>
-        /// <param name="ct">Cancellation token.</param>
+        /// <param name="cancellationToken">Cancellation token.</param>
         /// <returns>A value of type <see cref="MSBuildClientExitResult"/> that indicates whether the build succeeded,
         /// or the manner in which it failed.</returns>
-        public MSBuildClientExitResult Execute(string commandLine, CancellationToken ct)
+        public MSBuildClientExitResult Execute(string commandLine, CancellationToken cancellationToken)
         {
             string serverRunningMutexName = $@"{ServerNamedMutex.RunningServerMutexNamePrefix}{_pipeName}";
             string serverBusyMutexName = $@"{ServerNamedMutex.BusyServerMutexNamePrefix}{_pipeName}";
 
             // Start server it if is not running.
-            bool serverWasAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);
-            if (!serverWasAlreadyRunning && !TryLaunchServer())
+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);
+            if (!serverIsAlreadyRunning && !TryLaunchServer())
             {
                 return _exitResult;
             }
@@ -136,7 +135,7 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken ct)
             }
 
             // Connect to server.
-            if (!TryConnectToServer(serverWasAlreadyRunning && !serverWasBusy ? 1_000 : 20_000))
+            if (!TryConnectToServer(serverIsAlreadyRunning ? 1_000 : 20_000))
             {
                 CommunicationsUtilities.Trace("Failure to connect to a server.");
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.ConnectionError;
@@ -144,29 +143,29 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken ct)
             }
 
             // Send build command.
-            // Let's send it outside the packet pump so that we easier and quicklier deal with possible issues with connection to server.
-            if (!TrySendBuildCommand(commandLine, _nodeStream))
+            // Let's send it outside the packet pump so that we easier and quicker deal with possible issues with connection to server.
+            if (!TrySendBuildCommand(commandLine))
             {
                 CommunicationsUtilities.Trace("Failure to connect to a server.");
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.ConnectionError;
                 return _exitResult;
             }
 
-            MSBuildClientPacketPump? packetPump = null;
-
             try
             {
-
                 // Start packet pump
-                packetPump = new MSBuildClientPacketPump(_nodeStream);
-                (packetPump as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeConsoleWrite, ServerNodeConsoleWrite.FactoryForDeserialization, packetPump);
-                (packetPump as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuildResult, ServerNodeBuildResult.FactoryForDeserialization, packetPump);
+                using MSBuildClientPacketPump packetPump = new(_nodeStream);
+
+                packetPump.RegisterPacketHandler(NodePacketType.ServerNodeConsoleWrite, ServerNodeConsoleWrite.FactoryForDeserialization, packetPump);
+                packetPump.RegisterPacketHandler(NodePacketType.ServerNodeBuildResult, ServerNodeBuildResult.FactoryForDeserialization, packetPump);
                 packetPump.Start();
 
-                var waitHandles = new WaitHandle[] {
-                ct.WaitHandle,
-                packetPump.PacketPumpErrorEvent,
-                packetPump.PacketReceivedEvent };
+                WaitHandle[] waitHandles =
+                {
+                    cancellationToken.WaitHandle,
+                    packetPump.PacketPumpErrorEvent,
+                    packetPump.PacketReceivedEvent
+                };
 
                 while (!_buildFinished)
                 {
@@ -182,9 +181,9 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken ct)
                             break;
 
                         case 2:
-                            while (packetPump.ReceivedPacketsQueue.TryDequeue(out INodePacket? packet)
-                                && !_buildFinished
-                                && !ct.IsCancellationRequested)
+                            while (packetPump.ReceivedPacketsQueue.TryDequeue(out INodePacket? packet) &&
+                                   !_buildFinished &&
+                                   !cancellationToken.IsCancellationRequested)
                             {
                                 if (packet != null)
                                 {
@@ -198,13 +197,9 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken ct)
             }
             catch (Exception ex)
             {
-                CommunicationsUtilities.Trace($"MSBuild client error: problem during packet handling occured: {0}.", ex);
+                CommunicationsUtilities.Trace("MSBuild client error: problem during packet handling occurred: {0}.", ex);
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.Unexpected;
             }
-            finally
-            {
-                packetPump?.Stop();
-            }
 
             CommunicationsUtilities.Trace("Build finished.");
             return _exitResult;
@@ -236,12 +231,12 @@ private bool TryLaunchServer()
 
             try
             {
-                Process msbuildProcess = LaunchNode(_exeLocation, string.Join(" ", msBuildServerOptions),  ServerEnvironmentVariables);
-                CommunicationsUtilities.Trace("Server is launched.");
+                Process msbuildProcess = LaunchNode(_exeLocation, string.Join(" ", msBuildServerOptions),  _serverEnvironmentVariables);
+                CommunicationsUtilities.Trace("Server is launched with PID: {0}", msbuildProcess.Id);
             }
             catch (Exception ex)
             {
-                CommunicationsUtilities.Trace($"Failed to launch the msbuild server: {ex.Message}");
+                CommunicationsUtilities.Trace("Failed to launch the msbuild server: {0}", ex);
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.LaunchError;
                 return false;
             }
@@ -251,7 +246,7 @@ private bool TryLaunchServer()
 
         private Process LaunchNode(string exeLocation, string msBuildServerArguments, Dictionary<string, string> serverEnvironmentVariables)
         { 
-            ProcessStartInfo processStartInfo = new ProcessStartInfo
+            ProcessStartInfo processStartInfo = new() 
             {
                 FileName = exeLocation,
                 Arguments = msBuildServerArguments,
@@ -263,16 +258,16 @@ private Process LaunchNode(string exeLocation, string msBuildServerArguments, Di
                 processStartInfo.Environment[entry.Key] = entry.Value;
             }
 
-            // We remove env USEMSBUILDSERVER that might be equal to 1, so we do not get an infinite recursion here. 
-            processStartInfo.Environment["USEMSBUILDSERVER"] = "0";
+            // We remove env to enable MSBuild Server that might be equal to 1, so we do not get an infinite recursion here.
+            processStartInfo.Environment[Traits.UseMSBuildServerEnvVarName] = "0";
 
             processStartInfo.CreateNoWindow = true;
             processStartInfo.UseShellExecute = false;
 
-            return Process.Start(processStartInfo) ?? throw new InvalidOperationException("MSBuild server node failed to launch");
+            return Process.Start(processStartInfo) ?? throw new InvalidOperationException("MSBuild server node failed to launch.");
         }
 
-        private bool TrySendBuildCommand(string commandLine, NamedPipeClientStream nodeStream)
+        private bool TrySendBuildCommand(string commandLine)
         {
             try
             {
@@ -282,7 +277,7 @@ private bool TrySendBuildCommand(string commandLine, NamedPipeClientStream nodeS
             }
             catch (Exception ex)
             {
-                CommunicationsUtilities.Trace($"Failed to send build command to server: {ex.Message}");
+                CommunicationsUtilities.Trace("Failed to send build command to server: {0}", ex);
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.ConnectionError;
                 return false;
             }
@@ -292,22 +287,20 @@ private bool TrySendBuildCommand(string commandLine, NamedPipeClientStream nodeS
 
         private ServerNodeBuildCommand GetServerNodeBuildCommand(string commandLine)
         {
+            Dictionary<string, string> envVars = new();
 
-            Dictionary<string, string> envVars = new Dictionary<string, string>();
-
-            IDictionary environmentVariables = Environment.GetEnvironmentVariables();
-            foreach (var key in environmentVariables.Keys)
+            foreach (DictionaryEntry envVar in Environment.GetEnvironmentVariables())
             {
-                envVars[(string)key] = (string) (environmentVariables[key] ?? "");
+                envVars[(string)envVar.Key] = (envVar.Value as string) ?? string.Empty;
             }
 
-            foreach (var pair in ServerEnvironmentVariables)
+            foreach (var pair in _serverEnvironmentVariables)
             {
                 envVars[pair.Key] = pair.Value;
             }
 
-            // We remove env MSBUILDRUNSERVERCLIENT that might be equal to 1, so we do not get an infinite recursion here. 
-            envVars["USEMSBUILDSERVER"] = "0";
+            // We remove env variable used to invoke MSBuild server as that might be equal to 1, so we do not get an infinite recursion here. 
+            envVars[Traits.UseMSBuildServerEnvVarName] = "0";
 
             return new ServerNodeBuildCommand(
                         commandLine,
@@ -345,8 +338,8 @@ private void HandleCancellation()
         /// </summary>
         private void HandlePacketPumpError(MSBuildClientPacketPump packetPump)
         {
-            CommunicationsUtilities.Trace("MSBuild client error: packet pump unexpectedly shutted down: {0}", packetPump.PacketPumpException);
-            throw packetPump.PacketPumpException != null ? packetPump.PacketPumpException : new Exception("Packet pump unexpectedly shutted down");
+            CommunicationsUtilities.Trace("MSBuild client error: packet pump unexpectedly shut down: {0}", packetPump.PacketPumpException);
+            throw packetPump.PacketPumpException ?? new Exception("Packet pump unexpectedly shut down");
         }
 
         /// <summary>
@@ -383,13 +376,12 @@ private void HandleServerNodeConsoleWrite(ServerNodeConsoleWrite consoleWrite)
 
         private void HandleServerNodeBuildResult(ServerNodeBuildResult response)
         {
-            CommunicationsUtilities.Trace($"Build response received: exit code {response.ExitCode}, exit type '{response.ExitType}'");
+            CommunicationsUtilities.Trace("Build response received: exit code {0}, exit type '{1}'", response.ExitCode, response.ExitType);
             _exitResult.MSBuildClientExitType = MSBuildClientExitType.Success;
             _exitResult.MSBuildAppExitTypeString = response.ExitType;
             _buildFinished = true;
         }
 
-
         /// <summary>
         /// Connects to MSBuild server.
         /// </summary>
@@ -422,7 +414,7 @@ private bool TryConnectToServer(int timeout)
             }
             catch (Exception ex)
             {
-                CommunicationsUtilities.Trace($"Failed to conect to server: {ex.Message}");
+                CommunicationsUtilities.Trace("Failed to connect to server: {0}", ex);
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.ConnectionError;
                 return false;
             }
@@ -433,7 +425,6 @@ private bool TryConnectToServer(int timeout)
         private void WritePacket(Stream nodeStream, INodePacket packet)
         {
             MemoryStream memoryStream = _packetMemoryStream;
-            _packetMemoryStream.Position = 0;
             memoryStream.SetLength(0);
 
             ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(memoryStream);
diff --git a/src/Build/BackEnd/Client/MSBuildClientExitResult.cs b/src/Build/BackEnd/Client/MSBuildClientExitResult.cs
index bd4b215e802..648e755f002 100644
--- a/src/Build/BackEnd/Client/MSBuildClientExitResult.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientExitResult.cs
@@ -20,7 +20,5 @@ public sealed class MSBuildClientExitResult
         /// This field is null if MSBuild client execution was not successful.
         /// </summary>
         public string? MSBuildAppExitTypeString { get; set; }
-
-        public MSBuildClientExitResult() { }
     }
 }
diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index de86c4fec3e..c2402156971 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -8,14 +8,13 @@
 using System.Threading;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-
 #if !FEATURE_APM
 using System.Threading.Tasks;
 #endif
 
-namespace Microsoft.Build.BackEnd.Node
+namespace Microsoft.Build.BackEnd.Client
 {
-    internal sealed class MSBuildClientPacketPump : INodePacketHandler, INodePacketFactory
+    internal sealed class MSBuildClientPacketPump : INodePacketHandler, INodePacketFactory, IDisposable
     {
         /// <summary>
         /// The queue of packets we have received but which have not yet been processed.
@@ -28,20 +27,19 @@ internal sealed class MSBuildClientPacketPump : INodePacketHandler, INodePacketF
         public AutoResetEvent PacketReceivedEvent { get; }
 
         /// <summary>
-        /// Set when packet pump should shutdown.
-        /// </summary>
-        public ManualResetEvent PacketPumpShutdownEvent { get; }
-
-        /// <summary>
-        /// Set when the packet pump enexpectedly terminates (due to connection problems or becuase of desearilization issues).
+        /// Set when the packet pump unexpectedly terminates (due to connection problems or because of deserialization issues).
         /// </summary>
         public ManualResetEvent PacketPumpErrorEvent { get; }
 
         /// <summary>
-        /// Exception appeared when the packet pump enexpectedly terminates.
+        /// Exception appeared when the packet pump unexpectedly terminates.
         /// </summary>
         public Exception? PacketPumpException { get; set; }
 
+        /// <summary>
+        /// Set when packet pump should shutdown.
+        /// </summary>
+        private readonly ManualResetEvent _packetPumpShutdownEvent;
 
         /// <summary>
         /// The packet factory.
@@ -51,7 +49,7 @@ internal sealed class MSBuildClientPacketPump : INodePacketHandler, INodePacketF
         /// <summary>
         /// The memory stream for a read buffer.
         /// </summary>
-        private MemoryStream _readBufferMemoryStream;
+        private readonly MemoryStream _readBufferMemoryStream;
 
         /// <summary>
         /// The thread which runs the asynchronous packet pump
@@ -61,18 +59,12 @@ internal sealed class MSBuildClientPacketPump : INodePacketHandler, INodePacketF
         /// <summary>
         /// The stream from where to read packets.
         /// </summary>
-        private Stream _stream;
+        private readonly Stream _stream;
 
         /// <summary>
         /// The binary translator for reading packets.
         /// </summary>
-        ITranslator _binaryReadTranslator;
-
-        /// <summary>
-        /// Shared read buffer for binary reader.
-        /// </summary>
-        SharedReadBuffer _sharedReadBuffer;
-
+        readonly ITranslator _binaryReadTranslator;
 
         public MSBuildClientPacketPump(Stream stream)
         {
@@ -81,13 +73,12 @@ public MSBuildClientPacketPump(Stream stream)
 
             ReceivedPacketsQueue = new ConcurrentQueue<INodePacket>();
             PacketReceivedEvent = new AutoResetEvent(false);
-            PacketPumpShutdownEvent = new ManualResetEvent(false);
             PacketPumpErrorEvent = new ManualResetEvent(false);
+            _packetPumpShutdownEvent = new ManualResetEvent(false);
 
             _readBufferMemoryStream = new MemoryStream();
-            _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
-            _binaryReadTranslator = BinaryTranslator.GetReadTranslator(_readBufferMemoryStream, _sharedReadBuffer);
-       }
+            _binaryReadTranslator = BinaryTranslator.GetReadTranslator(_readBufferMemoryStream, InterningBinaryReader.CreateSharedBuffer());
+        }
 
         #region INodePacketFactory Members
 
@@ -155,9 +146,11 @@ public void PacketReceived(int node, INodePacket packet)
         /// </summary>
         public void Start()
         {
-            _packetPumpThread = new Thread(PacketPumpProc);
-            _packetPumpThread.IsBackground = true;
-            _packetPumpThread.Name = "MSBuild Client Packet Pump";
+            _packetPumpThread = new Thread(PacketPumpProc)
+            {
+                IsBackground = true,
+                Name = "MSBuild Client Packet Pump"
+            };
             _packetPumpThread.Start();
         }
 
@@ -166,7 +159,7 @@ public void Start()
         /// </summary>
         public void Stop()
         {
-            PacketPumpShutdownEvent.Set();
+            _packetPumpShutdownEvent.Set();
             _packetPumpThread?.Join();
         }
 
@@ -179,7 +172,7 @@ public void Stop()
         /// </remarks>
         private void PacketPumpProc()
         {
-            RunReadLoop(_stream, PacketPumpShutdownEvent);
+            RunReadLoop(_stream, _packetPumpShutdownEvent);
         }
 
         private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShutdownEvent)
@@ -266,7 +259,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                                 catch
                                 {
                                     // Error while deserializing or handling packet. Logging additional info.
-                                    CommunicationsUtilities.Trace("Packet factory failed to recieve package. Exception while deserializing packet {0}.", packetType);
+                                    CommunicationsUtilities.Trace("Packet factory failed to receive package. Exception while deserializing packet {0}.", packetType);
                                     throw;
                                 }
 
@@ -303,5 +296,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
             CommunicationsUtilities.Trace("Ending read loop.");
         }
         #endregion
+
+        public void Dispose() => Stop();
     }
 }
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index e6889579a10..eb8edeec7dc 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -88,7 +88,7 @@ public NodeEngineShutdownReason Run(out Exception? shutdownException)
             var handshake = new ServerNodeHandshake(
                 CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture()));
 
-            string pipeName = NamedPipeUtil.GetPipeNameOrPath("MSBuildServer-" + handshake.ComputeHash());
+            string pipeName = GetPipeName(handshake);
 
             string serverRunningMutexName = $@"{ServerNamedMutex.RunningServerMutexNamePrefix}{pipeName}";
             _serverBusyMutexName = $@"{ServerNamedMutex.BusyServerMutexNamePrefix}{pipeName}";
@@ -137,6 +137,8 @@ public NodeEngineShutdownReason Run(out Exception? shutdownException)
 
         #endregion
 
+        internal static string GetPipeName(ServerNodeHandshake handshake) => NamedPipeUtil.GetPipeNameOrPath("MSBuildServer-" + handshake.ComputeHash());
+
         #region INodePacketFactory Members
 
         /// <summary>
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index c0e95e8788d..98bf9558a0d 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,5 +1,5 @@
 Microsoft.Build.Execution.MSBuildClient
-Microsoft.Build.Execution.MSBuildClient.Execute(string commandLine, System.Threading.CancellationToken ct) -> Microsoft.Build.Execution.MSBuildClientExitResult
+Microsoft.Build.Execution.MSBuildClient.Execute(string commandLine, System.Threading.CancellationToken cancellationToken) -> Microsoft.Build.Execution.MSBuildClientExitResult
 Microsoft.Build.Execution.MSBuildClient.MSBuildClient(string exeLocation, string dllLocation) -> void
 Microsoft.Build.Execution.MSBuildClient.ServerEnvironmentVariables.get -> System.Collections.Generic.Dictionary<string, string>
 Microsoft.Build.Execution.MSBuildClient.ServerEnvironmentVariables.set -> void
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 4623ba5a739..98bf9558a0d 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,5 +1,5 @@
 Microsoft.Build.Execution.MSBuildClient
-Microsoft.Build.Execution.MSBuildClient.Execute(string commandLine, System.Threading.CancellationToken ct) -> Microsoft.Build.Execution.MSBuildClientExitResult
+Microsoft.Build.Execution.MSBuildClient.Execute(string commandLine, System.Threading.CancellationToken cancellationToken) -> Microsoft.Build.Execution.MSBuildClientExitResult
 Microsoft.Build.Execution.MSBuildClient.MSBuildClient(string exeLocation, string dllLocation) -> void
 Microsoft.Build.Execution.MSBuildClient.ServerEnvironmentVariables.get -> System.Collections.Generic.Dictionary<string, string>
 Microsoft.Build.Execution.MSBuildClient.ServerEnvironmentVariables.set -> void
@@ -18,4 +18,4 @@ Microsoft.Build.Execution.MSBuildClientExitType.Success = 0 -> Microsoft.Build.E
 Microsoft.Build.Execution.MSBuildClientExitType.Unexpected = 4 -> Microsoft.Build.Execution.MSBuildClientExitType
 Microsoft.Build.Execution.OutOfProcServerNode
 Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
-Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
\ No newline at end of file
+Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index cf60eb140c9..eb12d904b42 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -102,6 +102,11 @@ public Traits()
         /// </summary>
         public readonly int DictionaryBasedItemRemoveThreshold = ParseIntFromEnvironmentVariableOrDefault("MSBUILDDICTIONARYBASEDITEMREMOVETHRESHOLD", 100);
 
+        /// <summary>
+        /// Name of environment variables used to enable MSBuild server.
+        /// </summary>
+        public const string UseMSBuildServerEnvVarName = "MSBUILDUSESERVER";
+
         public readonly bool DebugEngine = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugEngine"));
         public readonly bool DebugScheduler;
         public readonly bool DebugNodeCommunication;
diff --git a/src/MSBuild/MSBuildClientApp.cs b/src/MSBuild/MSBuildClientApp.cs
index e47bd970efc..a029b19bc64 100644
--- a/src/MSBuild/MSBuildClientApp.cs
+++ b/src/MSBuild/MSBuildClientApp.cs
@@ -47,7 +47,7 @@ CancellationToken cancellationToken
 
 #if RUNTIME_TYPE_NETCORE || MONO
             // Run the child process with the same host as the currently-running process.
-            // Mono automagically uses the current mono, to execute a managed assembly.
+            // Mono automatically uses the current mono, to execute a managed assembly.
             if (!NativeMethodsShared.IsMono)
             {
                 // _exeFileLocation consists the msbuild dll instead.
@@ -106,18 +106,18 @@ string dllLocation
             MSBuildClient msbuildClient = new MSBuildClient(exeLocation, dllLocation); 
             MSBuildClientExitResult exitResult = msbuildClient.Execute(commandLineString, cancellationToken);
 
-            if (exitResult.MSBuildClientExitType == MSBuildClientExitType.ServerBusy
-                || exitResult.MSBuildClientExitType == MSBuildClientExitType.ConnectionError
-            )
+            if (exitResult.MSBuildClientExitType == MSBuildClientExitType.ServerBusy ||
+                exitResult.MSBuildClientExitType == MSBuildClientExitType.ConnectionError)
             {
                 // Server is busy, fallback to old behavior.
                 return MSBuildApp.Execute(commandLine);
             }
-            else if ((exitResult.MSBuildClientExitType == MSBuildClientExitType.Success)
-                    && Enum.TryParse(exitResult.MSBuildAppExitTypeString, out MSBuildApp.ExitType MSBuildAppExitType))
+
+            if (exitResult.MSBuildClientExitType == MSBuildClientExitType.Success &&
+                Enum.TryParse(exitResult.MSBuildAppExitTypeString, out MSBuildApp.ExitType MSBuildAppExitType))
             {
-                // The client successfully set up a build task for MSBuild server and recieved the result.
-                // (Which could be a failure as well). Return the recieved exit type. 
+                // The client successfully set up a build task for MSBuild server and received the result.
+                // (Which could be a failure as well). Return the received exit type. 
                 return MSBuildAppExitType;
             }
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index e2a797d46f6..129df900912 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -222,7 +222,7 @@ string[] args
             }
 
             int exitCode;
-            if (Environment.GetEnvironmentVariable("MSBUILDUSESERVER") == "1")
+            if (Environment.GetEnvironmentVariable(Traits.UseMSBuildServerEnvVarName) == "1")
             {
                 // Use the client app to execute build in msbuild server. Opt-in feature.
                 exitCode = ((s_initialized && MSBuildClientApp.Execute(
