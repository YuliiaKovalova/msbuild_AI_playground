diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 9c6ff760bec..da1f617beb5 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -210,6 +210,7 @@ public static string SetStop()
             }
             public static string ForwardTab(int n)
             {
+                if (n == 0) return "";
                 return String.Format("\x1b[{0}I", n);
             }
             public static string BackwardTab(int n)
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 5a028da8058..03df3b4648f 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -48,6 +48,8 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             {
                 FancyLoggerBuffer.Initialize();
+                FancyLoggerBufferLine rootLine = FancyLoggerBuffer.WriteNewLine($"This is root --> {ANSIBuilder.Formatting.Bold("Remove after testing")}");
+                root.Line = rootLine;
             }
         }
 
@@ -65,61 +67,56 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
             if (e.BuildEventContext?.ProjectInstanceId == null) return;
             int id = e.BuildEventContext.ProjectInstanceId;
-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(" "
-                + ANSIBuilder.Formatting.Dim("Project: ")
-                + e.ProjectFile
-            );
-            // projectConsoleLines[id] = line;
-            // Node
+            // Create node
             FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Project);
-            node.Line = line;
-            // If has parent project
-            /* if (e.ParentProjectBuildEventContext?.ProjectInstanceId != null)
-            {
-                FancyLoggerNode? parentNode = root.Find($"project-{e.ParentProjectBuildEventContext.ProjectInstanceId}");
-                if (parentNode == null) return;
-                parentNode.Add(node);
-            } else */
-            {
-                root.Add(node);
-            }
+            node.Line = new FancyLoggerBufferLine(" " + ANSIBuilder.Formatting.Dim("Project: ") + e.ProjectFile); ;
+            root.Add(node);
+            node.Write();
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             if (e.BuildEventContext?.ProjectInstanceId == null) return;
-            int lineId = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}")?.Line?.Id ?? -1;
+            FancyLoggerNode? node = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}");
+            if (node == null) return;
+            int lineId = node.Line?.Id ?? -1;
             if(lineId == -1) return;
             FancyLoggerBuffer.UpdateLine(lineId, ""
                 + ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Project: ")
                 + ANSIBuilder.Formatting.Color(e.ProjectFile ?? "", ANSIBuilder.Formatting.ForegroundColor.Green)
             );
+            node.Collapse();
         }
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             if (e.BuildEventContext?.TargetId == null) return;
             int id = e.BuildEventContext.TargetId;
-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine("\t  "
+            // Create node
+            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Target);
+            node.Line = new FancyLoggerBufferLine("  "
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + e.TargetName);
-            // Node
-            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Target);
-            node.Line = line;
+            // Get parent node
             FancyLoggerNode? parentNode = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}");
             if (parentNode == null) return;
+            // Add to parent node
             parentNode.Add(node);
+            node.Write();
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             if (e.BuildEventContext?.TargetId == null) return;
-            int lineId = root.Find($"target-{e.BuildEventContext.TargetId}")?.Line?.Id ?? -1;
+            FancyLoggerNode? node = root.Find($"target-{e.BuildEventContext.TargetId}");
+            if (node == null) return;
+            int lineId = node.Line?.Id ?? -1;
             if(lineId == -1) return;
-            FancyLoggerBuffer.UpdateLine(lineId, "\t"
+            FancyLoggerBuffer.UpdateLine(lineId, ""
                 + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + ANSIBuilder.Formatting.Color(e.TargetName, ANSIBuilder.Formatting.ForegroundColor.Green)
             );
+            node.Collapse();
         }
 
         // Task
@@ -128,31 +125,34 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             existingTasks++;
             if (e.BuildEventContext?.TaskId == null) return;
             int id = e.BuildEventContext.TaskId;
-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine("\t\t  "
-                + ANSIBuilder.Formatting.Dim("Task: ")
-                + e.TaskName
-            );
-            // Node
+            // Create node
             FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Task);
-            node.Line = line;
+            node.Line = new FancyLoggerBufferLine("  " + ANSIBuilder.Formatting.Dim("Task: ") + e.TaskName);
+            // Get parent node
             FancyLoggerNode? parentNode = root.Find($"target-{e.BuildEventContext.TargetId}");
             if (parentNode == null) return;
+            // Add to parent node
             parentNode.Add(node);
+            node.Write();
+            // TODO: Remove
+            Thread.Sleep(500);
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
             completedTasks++;
             if (e.BuildEventContext?.TaskId == null) return;
-            // int lineId = taskConsoleLines[e.BuildEventContext.TaskId].Id;
-            int lineId = root.Find($"task-{e.BuildEventContext.TaskId}")?.Line?.Id ?? -1;
+            FancyLoggerNode? node = root.Find($"task-{e.BuildEventContext.TaskId}");
+            if(node == null) return;
+            int lineId = node.Line?.Id ?? -1;
             if (lineId == -1) return;
-            FancyLoggerBuffer.UpdateLine(lineId, "\t\t"
+            FancyLoggerBuffer.UpdateLine(lineId, ""
                 + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Task: ")
                 + ANSIBuilder.Formatting.Color(e.TaskName, ANSIBuilder.Formatting.ForegroundColor.Green)
             );
-            FancyLoggerBuffer.WriteFooter($"Build: {(completedTasks / existingTasks) * 100}");
+            FancyLoggerBuffer.WriteFooter($"Build: {ANSIBuilder.Graphics.ProgressBar(completedTasks/existingTasks)}  {(completedTasks / existingTasks) * 100}");
+            node.Collapse();
         }
 
         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 5d002e4ed7e..4d690ce928f 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -19,6 +19,7 @@ public class FancyLoggerBufferLine
         public int Id;
         public string Text;
         public bool IsHidden;
+        public int IdentationLevel = -1;
         public FancyLoggerBufferLine()
         {
             Id = counter++;
@@ -29,6 +30,10 @@ public FancyLoggerBufferLine(string text)
             Id = counter++;
             Text = text;
         }
+        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)
+        {
+            IdentationLevel = identationLevel;
+        }
         public void Hide()
         {
             IsHidden = true;
@@ -106,18 +111,18 @@ public static void Terminate()
         #region Scrolling
         private static void ScrollToLine(int firstLineIndex)
         {
-            if (firstLineIndex < 0) return;
-            if (firstLineIndex >= lines.Count) return;
+            if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
             CurrentTopLineIndex = firstLineIndex;
             int i = 0;
             while (i < Height - 4)
             {
                 int lineIndex = i + firstLineIndex;
-                if ( lineIndex < lines.Count && lines[lineIndex].IsHidden) continue;
+                // if (lineIndex < lines.Count && lines[lineIndex].IsHidden) continue;
                 Console.Write(""
                     + ANSIBuilder.Cursor.Position(i + 2, 0)
                     + ANSIBuilder.Eraser.LineCursorToEnd()
-                    + ((lineIndex < lines.Count) ? lines[lineIndex].Text : "")
+                    + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : "")
+                    + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
                 );
                 i++;
             }
@@ -179,10 +184,14 @@ public static FancyLoggerBufferLine WriteNewLine(string text)
         {
             // Create line
             FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
+            return WriteNewLine(line);
+        }
+        public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)
+        {
             // Add line
             lines.Add(line);
             // Update contents
-            if (AutoScrollEnabled) ScrollToEnd();
+            if(AutoScrollEnabled) ScrollToEnd();
             return line;
         }
         public static FancyLoggerBufferLine? WriteNewLineAfter(string text, int lineId)
@@ -192,8 +201,25 @@ public static FancyLoggerBufferLine WriteNewLine(string text)
             if (lineIndex == -1) return null;
 
             FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
+            return WriteNewLineAfterIndex(line, lineIndex);
+        }
+
+        public static FancyLoggerBufferLine? WriteNewLineAfter(FancyLoggerBufferLine line, int lineId)
+        {
+            // get line
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return null;
+
+            return WriteNewLineAfterIndex(line, lineIndex);
+        }
+
+        public static FancyLoggerBufferLine? WriteNewLineAfterIndex(FancyLoggerBufferLine line, int lineIndex)
+        {
+            if (lineIndex == -1) return null;
             lines.Insert(lineIndex + 1, line);
-            ScrollToLine(CurrentTopLineIndex);
+            // Scroll to end if lineIndex >= lines
+            if (lineIndex >= lines.Count -2 && AutoScrollEnabled) ScrollToEnd();
+            else ScrollToLine(CurrentTopLineIndex); 
             return line;
         }
 
@@ -221,7 +247,7 @@ public static void HideLine(int lineId)
             FancyLoggerBufferLine? line = GetLineById(lineId);
             if (line == null) return;
             line.Hide();
-            ScrollToLine(CurrentTopLineIndex);
+            // ScrollToLine(CurrentTopLineIndex);
         }
         public static void UnhideLine(int lineId)
         {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index 8b0a30ce6a1..c29a1b81576 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -28,6 +28,7 @@ public class FancyLoggerNode
     {
         public string Id;
         public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();
+        public FancyLoggerNode? Parent;
         public FancyLoggerBufferLine? Line;
         public int Depth = 0;
         public FancyLoggerNode(string id)
@@ -82,33 +83,68 @@ public void Add(FancyLoggerNode node)
         {
             Children.Add(node.Id, node);
             node.Depth = Depth + 1;
+            node.Parent = this;
         }
 
-        public int GetLastLineId()
+        public int GetLastLineIndex()
         {
-            // If no line
+            // If no line, return -1
             if (Line == null) return -1;
-            // If line and no children
-            if (Children.Count == 0) return FancyLoggerBuffer.GetLineIndexById(Line.Id);
-            // Get from children
-            int lastLineId = -1;
-            int lastLineIndex = -1;
+            // Get line index and id
+            int lastLineIndex = FancyLoggerBuffer.GetLineIndexById(Line.Id);
+            int lastLineId = Line.Id;
+            if (lastLineIndex == -1) return -1;
+            // Get max of children
             foreach (var child in Children)
             {
-                int lineIndex = child.Value.GetLastLineId();
-                if (lineIndex > lastLineIndex)
+                int childLastLineIndex = child.Value.GetLastLineIndex();
+                if (childLastLineIndex > lastLineIndex)
                 {
-                    lastLineIndex = lineIndex;
-                    lastLineId = Line.Id;
+                    lastLineIndex = childLastLineIndex;
+                    lastLineId = child.Value.Line!.Id;
                 }
             }
-            return lastLineId;
+            return lastLineIndex;
         }
 
         public void Write()
         {
-            if (Line == null) return;
-            // Implement logic for printing here...
+            if (Line == null) { return; }
+            // Adjust identation
+            Line.IdentationLevel = Depth - 1;
+            // If line not in the buffer, add
+            if (FancyLoggerBuffer.GetLineIndexById(Line.Id) == -1)
+            {
+                // Get parent last line index
+                if (Parent != null)
+                {
+                    int parentLastLineId = Parent.GetLastLineIndex();
+                    if (parentLastLineId == -1) throw new Exception("Oops something went wrong");
+                    Line.Text += $"  --> {parentLastLineId}";
+                    // FancyLoggerBuffer.WriteNewLineAfter(Line, parentLastLineId);
+                    FancyLoggerBuffer.WriteNewLineAfterIndex(Line, parentLastLineId);
+                }
+            }
+        }
+
+        public void Collapse()
+        {
+            foreach (var child in Children)
+            {
+                if (child.Value.Line == null) continue;
+                FancyLoggerBuffer.HideLine(child.Value.Line.Id);
+                child.Value.Collapse();
+            }
+        }
+
+        public void Expand()
+        {
+            foreach (var child in Children)
+            {
+                if (child.Value.Line == null) continue;
+                FancyLoggerBuffer.UnhideLine(child.Value.Line.Id);
+                child.Value.Expand();
+            }
         }
 
         /*public void Collapse(bool isRoot)
