diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 8a1b8d80f3f..0f019724f28 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -24,7 +24,7 @@ public void ConstructWithSingleNode()
                 TransientTestFile entryProject = CreateProject(env, 1);
                 var projectGraph = new ProjectGraph(entryProject.Path);
                 projectGraph.ProjectNodes.Count.ShouldBe(1);
-                projectGraph.ProjectNodes.First().Project.FullPath.ShouldBe(entryProject.Path);
+                projectGraph.ProjectNodes.First().ProjectInstance.FullPath.ShouldBe(entryProject.Path);
             }
         }
 
@@ -130,9 +130,9 @@ public void ConstructWithDifferentGlobalProperties()
 
                 // Projects 2 and 3 both reference project 4, but with different properties, so they should not point to the same node.
                 GetNodeForProject(graph, 2).ProjectReferences.First().ShouldNotBe(GetNodeForProject(graph, 3).ProjectReferences.First());
-                GetNodeForProject(graph, 2).ProjectReferences.First().Project.FullPath.ShouldEndWith("4.proj");
+                GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("4.proj");
                 GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties.ShouldBeEmpty();
-                GetNodeForProject(graph, 3).ProjectReferences.First().Project.FullPath.ShouldEndWith("4.proj");
+                GetNodeForProject(graph, 3).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("4.proj");
                 GetNodeForProject(graph, 3).ProjectReferences.First().GlobalProperties.ShouldNotBeEmpty();
             }
         }
@@ -240,12 +240,12 @@ public void ConstructWithCaseDifferences()
 
                 // Property names are case-insensitive, so projects 2 and 3 point to the same project 5 node.
                 GetNodeForProject(graph, 2).ProjectReferences.First().ShouldBe(GetNodeForProject(graph, 3).ProjectReferences.First());
-                GetNodeForProject(graph, 2).ProjectReferences.First().Project.FullPath.ShouldEndWith("5.proj");
+                GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("5.proj");
                 GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties["FoO"].ShouldBe("bar");
 
                 // Property values are case-sensitive, so project 4 points to a different project 5 node than proejcts 2 and 3
                 GetNodeForProject(graph, 4).ProjectReferences.First().ShouldNotBe(GetNodeForProject(graph, 2).ProjectReferences.First());
-                GetNodeForProject(graph, 4).ProjectReferences.First().Project.FullPath.ShouldEndWith("5.proj");
+                GetNodeForProject(graph, 4).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("5.proj");
                 GetNodeForProject(graph, 4).ProjectReferences.First().GlobalProperties["FoO"].ShouldBe("BAR");
             }
         }
@@ -473,7 +473,7 @@ private static TransientTestFile CreateProject(
             return env.CreateFile(projectNumber + ".proj", sb.ToString());
         }
 
-        private static ProjectGraphNode GetNodeForProject(ProjectGraph graph, int projectNum) => graph.ProjectNodes.First(node => node.Project.FullPath.EndsWith(projectNum + ".proj"));
+        private static ProjectGraphNode GetNodeForProject(ProjectGraph graph, int projectNum) => graph.ProjectNodes.First(node => node.ProjectInstance.FullPath.EndsWith(projectNum + ".proj"));
     }
 
 }
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 067a79f15ed..8a107a79676 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -121,7 +121,7 @@ public ProjectGraph(
         public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLists(string[] entryProjectTargets)
         {
             ImmutableList<string> entryTargets = entryProjectTargets == null || entryProjectTargets.Length == 0
-                ? ImmutableList.CreateRange(EntryProjectNode.Project.DefaultTargets)
+                ? ImmutableList.CreateRange(EntryProjectNode.ProjectInstance.DefaultTargets)
                 : ImmutableList.CreateRange(entryProjectTargets);
 
             // Seed the dictionary with empty lists for every node. In this particular case though an empty list means "build nothing" rather than "default targets".
@@ -157,7 +157,7 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                 {
                     var projectReferenceEdge = new ProjectGraphBuildRequest(
                         projectReference,
-                        ExpandDefaultTargets(projectReference.Project, targetsToPropagate));
+                        ExpandDefaultTargets(projectReference.ProjectInstance, targetsToPropagate));
                     if (encounteredEdges.Add(projectReferenceEdge))
                     {
                         edgesToVisit.Enqueue(projectReferenceEdge);
@@ -238,7 +238,7 @@ private void LoadGraph(string entryProjectFile, ProjectCollection projectCollect
                 if (!_allParsedProjects.TryGetValue(projectToEvaluate, out ProjectGraphNode parsedProject))
                 {
                     parsedProject = CreateNewNode(projectToEvaluate, projectCollection);
-                    IEnumerable<ProjectItemInstance> projectReferenceItems = parsedProject.Project.GetItems(ProjectReferenceItemName);
+                    IEnumerable<ProjectItemInstance> projectReferenceItems = parsedProject.ProjectInstance.GetItems(ProjectReferenceItemName);
                     foreach (var projectReferenceToParse in projectReferenceItems)
                     {
                         if (!string.IsNullOrEmpty(projectReferenceToParse.GetMetadataValue(ToolsVersionMetadataName)))
@@ -247,7 +247,7 @@ private void LoadGraph(string entryProjectFile, ProjectCollection projectCollect
                                 CultureInfo.InvariantCulture,
                                 ResourceUtilities.GetResourceString("ProjectGraphDoesNotSupportProjectReferenceWithToolset"),
                                 projectReferenceToParse.EvaluatedInclude,
-                                parsedProject.Project.FullPath));
+                                parsedProject.ProjectInstance.FullPath));
                         }
 
                         string projectReferenceFullPath = projectReferenceToParse.GetMetadataValue(FullPathMetadataName);
@@ -265,7 +265,7 @@ private void LoadGraph(string entryProjectFile, ProjectCollection projectCollect
         private static ImmutableList<string> DetermineTargetsToPropagate(ProjectGraphNode node, ImmutableList<string> entryTargets)
         {
             var targetsToPropagate = ImmutableList<string>.Empty;
-            ICollection<ProjectItemInstance> projectReferenceTargets = node.Project.GetItems(ProjectReferenceTargetsItemType);
+            ICollection<ProjectItemInstance> projectReferenceTargets = node.ProjectInstance.GetItems(ProjectReferenceTargetsItemType);
             foreach (var entryTarget in entryTargets)
             {
                 foreach (var projectReferenceTarget in projectReferenceTargets)
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 9195028db01..9493ce5f300 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -15,10 +15,10 @@ public sealed class ProjectGraphNode
 
         // No public creation.
         internal ProjectGraphNode(
-            ProjectInstance project,
+            ProjectInstance projectInstance,
             IReadOnlyDictionary<string, string> globalProperties)
         {
-            Project = project;
+            ProjectInstance = projectInstance;
             GlobalProperties = globalProperties;
         }
 
@@ -30,7 +30,7 @@ internal ProjectGraphNode(
         /// <summary>
         /// Gets the evaluated project represented by this node in the graph.
         /// </summary>
-        public ProjectInstance Project { get; }
+        public ProjectInstance ProjectInstance { get; }
 
         /// <summary>
         /// Gets the global properties which should be used to evaluate and execute this node in the graph.
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index bb96a8c2094..656ae545d0b 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1290,7 +1290,7 @@ private static BuildResult ExecuteGraphBuild(
                             continue;
                         }
 
-                        var request = new BuildRequestData(node.Project, targetList.ToArray());
+                        var request = new BuildRequestData(node.ProjectInstance, targetList.ToArray());
                         var buildSubmission = buildManager.PendBuildRequest(request);
                         buildingNodes.Add(buildSubmission, node);
                         blockedNodes.Remove(node);
