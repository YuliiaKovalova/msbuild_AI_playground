diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index b18876cf590..2da3245876a 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1254,18 +1254,21 @@ public bool GetIsCustom()
             {
                 return
                     (
-                        // There are occurrences of inline tasks within common targets (VS - SetEnvironmentVariable),
+                        // There are occurrences of inline tasks within common targets (Microsoft.CodeAnalysis.Targets - SetEnvironmentVariable),
                         //  so we need to check file as well (the very last condition).
                         !string.IsNullOrEmpty(_parameterGroupAndTaskBody?.InlineTaskXmlBody) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyName) &&
-                         !AssemblyLoadsTracker.IsBuiltinType(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
+                         !IsMicrosoftAssembly(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
                         (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) &&
-                         !AssemblyLoadsTracker.IsBuiltinType(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) &&
+                         !IsMicrosoftAssembly(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) &&
                          !FileClassifier.Shared.IsBuiltInLogic(_taskFactoryAssemblyLoadInfo.AssemblyFile)))
                     // and let's consider all tasks imported by common targets as non custom logic.
                     && !FileClassifier.Shared.IsBuiltInLogic(_definingFileFullPath);
             }
 
+            private static bool IsMicrosoftAssembly(string assemblyName)
+                => assemblyName.StartsWith("Microsoft.", StringComparison.Ordinal);
+
             /// <summary>
             /// Gets the task name this record was registered with.
             /// </summary>
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index 5fd568f4762..96d43bfb46d 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -19,6 +19,9 @@ internal class ProjectBuildStats
         // Future: These might be configurable e.g. via telemetry sensitivity level?
         internal static TimeSpan DurationThresholdForTopN { get; set; } = TimeSpan.FromMilliseconds(100);
         private const int TopNTasksToReport = 5;
+        internal static bool CollectCustomTaskNames { get; set; } = false;
+        private const int MaxCustomTasksCsvLength = 400;
+        private const int MaxSingleTaskNameLength = 40;
 
         public ProjectBuildStats(bool isDeserialized)
         {
@@ -63,6 +66,11 @@ public void AddTask(string name, TimeSpan cumulativeExectionTime, short executio
                 {
                     ExecutedCustomTasksCount++;
                 }
+
+                if (CollectCustomTaskNames && CustomTasksCsv?.Length < MaxCustomTasksCsvLength)
+                {
+                    CustomTasksCsv += "," + name.Substring(Math.Max(0, name.Length - MaxSingleTaskNameLength));
+                }
             }
         }
 
@@ -126,6 +134,11 @@ public void AddTask(string name, TimeSpan cumulativeExectionTime, short executio
         /// </summary>
         public short ExecutedCustomTargetsCount { get; set; }
 
+        /// <summary>
+        /// Csv list of names of custom tasks.
+        /// </summary>
+        public string? CustomTasksCsv { get; set; }
+
         /// <summary>
         /// Top N (<see cref="TopNTasksToReport"/>) tasks by cumulative execution time.
         /// Custom tasks names are prefixed by "Custom:" prefix
@@ -233,6 +246,7 @@ internal override void WriteToStream(BinaryWriter writer)
                 writer.Write7BitEncodedInt(ProjectBuildStats.CustomTargetsCount);
                 writer.Write7BitEncodedInt(ProjectBuildStats.TotalTargetsExecutionsCount);
                 writer.Write7BitEncodedInt(ProjectBuildStats.ExecutedCustomTargetsCount);
+                writer.WriteOptionalString(ProjectBuildStats.CustomTasksCsv);
 
                 writer.Write7BitEncodedInt(ProjectBuildStats.TopTasksByCumulativeExecution.Count);
                 foreach (var pair in ProjectBuildStats.TopTasksByCumulativeExecution)
@@ -276,6 +290,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
                     CustomTargetsCount = (short)reader.Read7BitEncodedInt(),
                     TotalTargetsExecutionsCount = (short)reader.Read7BitEncodedInt(),
                     ExecutedCustomTargetsCount = (short)reader.Read7BitEncodedInt(),
+                    CustomTasksCsv = reader.ReadOptionalString(),
                 };
 
                 ProjectBuildStats.SetDeserializedTopN(ReadTaskStats(reader));
