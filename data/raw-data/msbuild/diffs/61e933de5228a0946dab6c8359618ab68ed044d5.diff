diff --git a/documentation/wiki/Binary-Log.md b/documentation/wiki/Binary-Log.md
index 1252255ea99..d9bb101159f 100644
--- a/documentation/wiki/Binary-Log.md
+++ b/documentation/wiki/Binary-Log.md
@@ -132,11 +132,11 @@ In compatibility mode (default for `BinaryLogReplayEventSource`. Only supported
 
 The unknown events and event parts are regarded as recoverable errors, since the reader is able to continue reading subsequent records in the binlog. However the specific user logic should have the last call in deciding whether errors are really recoverable (e.g. is presence of unrecognized or unparseable event ok? It might be fine when searching only for specific events - e.g. errors but not acceptable when trying to provide definitive overview of the built).
 
-To allow the calling code to decide - based on the type of error, type of events getting the error, or the number of errors - the `OnRecoverableReadError` event is exposed (from both `BinaryLogReplayEventSource` and `BuildEventArgsReader`).
+To allow the calling code to decide - based on the type of error, type of events getting the error, or the number of errors - the `RecoverableReadError` event is exposed (from both `BinaryLogReplayEventSource` and `BuildEventArgsReader`).
 
 ```csharp
 /// <summary>
-/// An event args for <see cref="IBinaryLogReaderErrors.OnRecoverableReadError"/> event.
+/// An event args for <see cref="IBinaryLogReaderErrors.RecoverableReadError"/> event.
 /// </summary>
 public sealed class BinaryLogReaderErrorEventArgs : EventArgs
 {
@@ -164,7 +164,7 @@ public sealed class BinaryLogReaderErrorEventArgs : EventArgs
 /// In case of <see cref="ReaderErrorType.UnknownEventData"/> this is raised before returning the structured representation of a build event
 /// that has some extra unknown data in the binlog. In case of other error types this event is raised and the offending build event is skipped and not returned.
 /// </summary>
-event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
+event Action<BinaryLogReaderErrorEventArgs>? RecoverableReadError;
 ```
 
 Our sample usage of the [Reading API](#reading-api) can be enhanced with recoverable errors handling e.g. as such:
@@ -172,7 +172,7 @@ Our sample usage of the [Reading API](#reading-api) can be enhanced with recover
 ```csharp
 
 // Those can be raised only during forward compatibility reading mode.
-logReader.OnRecoverableReadError += errorEventArgs =>
+logReader.RecoverableReadError += errorEventArgs =>
 {
     // ...
 
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 4147411d105..4b879ecf122 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -939,7 +939,7 @@ public void ForwardCompatibleRead_HandleAppendOnlyChanges()
             };
 
             List<BinaryLogReaderErrorEventArgs> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
+            buildEventArgsReader.RecoverableReadError += readerErrors.Add;
 
             var deserializedError = (BuildErrorEventArgs)buildEventArgsReader.Read();
 
@@ -999,7 +999,7 @@ public void ForwardCompatibleRead_HandleUnknownEvent()
                 SkipUnknownEvents = true
             };
 
-            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
+            buildEventArgsReader.RecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
 
@@ -1050,7 +1050,7 @@ public void ForwardCompatibleRead_HandleMismatchedFormatOfEvent()
             };
 
             List<BinaryLogReaderErrorEventArgs> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
+            buildEventArgsReader.RecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
 
@@ -1106,7 +1106,7 @@ public void ForwardCompatibleRead_HandleRemovalOfDataFromEventDefinition()
             };
 
             List<BinaryLogReaderErrorEventArgs> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
+            buildEventArgsReader.RecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
 
diff --git a/src/Build/CompatibilitySuppressions.xml b/src/Build/CompatibilitySuppressions.xml
index 3772d5ac9f7..302d082368a 100644
--- a/src/Build/CompatibilitySuppressions.xml
+++ b/src/Build/CompatibilitySuppressions.xml
@@ -1,7 +1,34 @@
 ï»¿<?xml version="1.0" encoding="utf-8"?>
 <!-- https://learn.microsoft.com/en-us/dotnet/fundamentals/package-validation/diagnostic-ids -->
 <Suppressions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
-  <!-- Suppressions for api differences between main and vs17.8 when merging vs17.8 into main -->
+  <Suppression>
+    <DiagnosticId>CP0001</DiagnosticId>
+    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0001</DiagnosticId>
+    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0001</DiagnosticId>
+    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0001</DiagnosticId>
+    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.HandleFileAccess(Microsoft.Build.Experimental.ProjectCache.FileAccessContext,Microsoft.Build.Framework.FileAccess.FileAccessData)</Target>
@@ -16,6 +43,34 @@
     <Right>lib/net472/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.add_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.remove_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.add_StringEncountered(System.Action)</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.remove_StringEncountered(System.Action)</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.HandleFileAccess(Microsoft.Build.Experimental.ProjectCache.FileAccessContext,Microsoft.Build.Framework.FileAccess.FileAccessData)</Target>
@@ -30,6 +85,34 @@
     <Right>lib/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.add_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.remove_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.add_StringEncountered(System.Action)</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.remove_StringEncountered(System.Action)</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.HandleFileAccess(Microsoft.Build.Experimental.ProjectCache.FileAccessContext,Microsoft.Build.Framework.FileAccess.FileAccessData)</Target>
@@ -44,6 +127,34 @@
     <Right>ref/net472/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.add_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.remove_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.add_StringEncountered(System.Action)</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.remove_StringEncountered(System.Action)</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.HandleFileAccess(Microsoft.Build.Experimental.ProjectCache.FileAccessContext,Microsoft.Build.Framework.FileAccess.FileAccessData)</Target>
@@ -58,31 +169,30 @@
     <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
-  <!-- Suppressions for api differences introduced in the new binlog reading events -->
   <Suppression>
-    <DiagnosticId>CP0001</DiagnosticId>
-    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
-    <Left>lib/net472/Microsoft.Build.dll</Left>
-    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.add_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
   <Suppression>
-    <DiagnosticId>CP0001</DiagnosticId>
-    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
-    <Left>lib/net8.0/Microsoft.Build.dll</Left>
-    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BinaryLogReplayEventSource.remove_NotificationsSourceCreated(System.Action{Microsoft.Build.Logging.IBuildEventArgsReaderNotifications})</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
   <Suppression>
-    <DiagnosticId>CP0001</DiagnosticId>
-    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
-    <Left>ref/net472/Microsoft.Build.dll</Left>
-    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.add_StringEncountered(System.Action)</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
   <Suppression>
-    <DiagnosticId>CP0001</DiagnosticId>
-    <Target>T:Microsoft.Build.Logging.IBuildEventStringsReader</Target>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Logging.BuildEventArgsReader.remove_StringEncountered(System.Action)</Target>
     <Left>ref/net8.0/Microsoft.Build.dll</Left>
     <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
@@ -96,14 +206,7 @@
   </Suppression>
   <Suppression>
     <DiagnosticId>CP0006</DiagnosticId>
-    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.OnRecoverableReadError</Target>
-    <Left>lib/net472/Microsoft.Build.dll</Left>
-    <Right>lib/net472/Microsoft.Build.dll</Right>
-    <IsBaselineSuppression>true</IsBaselineSuppression>
-  </Suppression>
-  <Suppression>
-    <DiagnosticId>CP0006</DiagnosticId>
-    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.StringEncountered</Target>
+    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.RecoverableReadError</Target>
     <Left>lib/net472/Microsoft.Build.dll</Left>
     <Right>lib/net472/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
@@ -124,14 +227,7 @@
   </Suppression>
   <Suppression>
     <DiagnosticId>CP0006</DiagnosticId>
-    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.OnRecoverableReadError</Target>
-    <Left>lib/net8.0/Microsoft.Build.dll</Left>
-    <Right>lib/net8.0/Microsoft.Build.dll</Right>
-    <IsBaselineSuppression>true</IsBaselineSuppression>
-  </Suppression>
-  <Suppression>
-    <DiagnosticId>CP0006</DiagnosticId>
-    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.StringEncountered</Target>
+    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.RecoverableReadError</Target>
     <Left>lib/net8.0/Microsoft.Build.dll</Left>
     <Right>lib/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
@@ -152,14 +248,7 @@
   </Suppression>
   <Suppression>
     <DiagnosticId>CP0006</DiagnosticId>
-    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.OnRecoverableReadError</Target>
-    <Left>ref/net8.0/Microsoft.Build.dll</Left>
-    <Right>ref/net8.0/Microsoft.Build.dll</Right>
-    <IsBaselineSuppression>true</IsBaselineSuppression>
-  </Suppression>
-  <Suppression>
-    <DiagnosticId>CP0006</DiagnosticId>
-    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.StringEncountered</Target>
+    <Target>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.RecoverableReadError</Target>
     <Left>ref/net8.0/Microsoft.Build.dll</Left>
     <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index bd9ec7d2888..0ea5f88df34 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -63,15 +63,8 @@ static BinaryLogReplayEventSource()
         /// </summary>
         public bool AllowForwardCompatibility { private get; init; }
 
-        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.OnRecoverableReadError"/>
-        public event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
-
-        /// <summary>
-        /// WARNING: This event is under low support and low maintenance - please use events directly exposed by <see cref="BinaryLogReplayEventSource"/> instead. 
-        /// 
-        /// Raised once <see cref="BuildEventArgsReader"/> is created during replaying
-        /// </summary>
-        public event Action<IBuildEventArgsReaderNotifications>? NotificationsSourceCreated;
+        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.RecoverableReadError"/>
+        public event Action<BinaryLogReaderErrorEventArgs>? RecoverableReadError;
 
         /// <summary>
         /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
@@ -205,7 +198,6 @@ public void Replay(BinaryReader binaryReader, CancellationToken cancellationToke
         public void Replay(BinaryReader binaryReader, bool closeInput, CancellationToken cancellationToken)
         {
             using var reader = OpenBuildEventsReader(binaryReader, closeInput, AllowForwardCompatibility);
-            NotificationsSourceCreated?.Invoke(reader);
             Replay(reader, cancellationToken);
         }
 
@@ -231,7 +223,6 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
             reader.EmbeddedContentRead += _embeddedContentRead;
             reader.ArchiveFileEncountered += _archiveFileEncountered;
             reader.StringReadDone += _stringReadDone;
-            reader.StringEncountered += _stringEncountered;
 
             if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
             {
@@ -244,7 +235,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
                 // Forward compatible reading makes sense only for structured events reading.
                 reader.SkipUnknownEvents = supportsForwardCompatibility && AllowForwardCompatibility;
                 reader.SkipUnknownEventParts = supportsForwardCompatibility && AllowForwardCompatibility;
-                reader.OnRecoverableReadError += OnRecoverableReadError;
+                reader.RecoverableReadError += RecoverableReadError;
 
                 while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
                 {
@@ -256,8 +247,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
                 if (this._rawLogRecordReceived == null &&
                     this._embeddedContentRead == null &&
                     this._stringReadDone == null &&
-                    this._archiveFileEncountered == null &&
-                    this._stringEncountered == null)
+                    this._archiveFileEncountered == null)
                 {
                     throw new NotSupportedException(
                         ResourceUtilities.GetResourceString("Binlog_Source_MissingSubscribeError"));
@@ -274,8 +264,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
             reader.EmbeddedContentRead -= _embeddedContentRead;
             reader.ArchiveFileEncountered -= _archiveFileEncountered;
             reader.StringReadDone -= _stringReadDone;
-            reader.StringEncountered -= _stringEncountered;
-            reader.OnRecoverableReadError -= OnRecoverableReadError;
+            reader.RecoverableReadError -= RecoverableReadError;
         }
 
         /// <inheritdoc cref="IRawLogEventsSource.DeferredInitialize"/>
@@ -315,14 +304,6 @@ event Action<ArchiveFileEventArgs>? IBuildEventArgsReaderNotifications.ArchiveFi
             remove => _archiveFileEncountered -= value;
         }
 
-        private Action? _stringEncountered;
-        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringEncountered"/>
-        event Action? IBuildEventArgsReaderNotifications.StringEncountered
-        {
-            add => _stringEncountered += value;
-            remove => _stringEncountered -= value;
-        }
-
         private Action<BinaryLogRecordKind, Stream>? _rawLogRecordReceived;
         /// <inheritdoc cref="IRawLogEventsSource.RawLogRecordReceived"/>
         event Action<BinaryLogRecordKind, Stream>? IRawLogEventsSource.RawLogRecordReceived
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 99b8ff0fb44..04a459b7571 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -125,10 +125,10 @@ private void EnsureForwardCompatibleReadingSupported()
         }
 
         /// <summary>
-        /// Receives recoverable errors during reading. See <see cref="IBuildEventArgsReaderNotifications.OnRecoverableReadError"/> for documentation on arguments.
+        /// Receives recoverable errors during reading. See <see cref="IBuildEventArgsReaderNotifications.RecoverableReadError"/> for documentation on arguments.
         /// Applicable mainly when <see cref="SkipUnknownEvents"/> or <see cref="SkipUnknownEventParts"/> is set to true."/>
         /// </summary>
-        public event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
+        public event Action<BinaryLogReaderErrorEventArgs>? RecoverableReadError;
 
         public void Dispose()
         {
@@ -142,9 +142,6 @@ public void Dispose()
         /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringReadDone"/>
         public event Action<StringReadEventArgs>? StringReadDone;
 
-        /// <inheritdoc cref="IBuildEventArgsReaderNotifications.StringEncountered"/>
-        public event Action? StringEncountered;
-
         internal int FileFormatVersion => _fileFormatVersion;
 
         /// <inheritdoc cref="IEmbeddedContentSource.EmbeddedContentRead"/>
@@ -197,7 +194,7 @@ internal RawRecord ReadRaw()
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
         private void CheckErrorsSubscribed()
         {
-            if ((_skipUnknownEvents || _skipUnknownEventParts) && OnRecoverableReadError == null)
+            if ((_skipUnknownEvents || _skipUnknownEventParts) && RecoverableReadError == null)
             {
                 throw new InvalidOperationException(
                     ResourceUtilities.GetResourceString("Binlog_MissingRecoverableErrorSubscribeError"));
@@ -284,7 +281,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
             {
                 if (noThrow)
                 {
-                    OnRecoverableReadError?.Invoke(new BinaryLogReaderErrorEventArgs(readerErrorType, recordKind, msgFactory));
+                    RecoverableReadError?.Invoke(new BinaryLogReaderErrorEventArgs(readerErrorType, recordKind, msgFactory));
                     SkipBytes(_readStream.BytesCountAllowedToReadRemaining);
                 }
                 else
@@ -1542,7 +1539,6 @@ private ITaskItem ReadTaskItem()
 
         private string ReadString()
         {
-            this.StringEncountered?.Invoke();
             string text = _binaryReader.ReadString();
             if (this.StringReadDone != null)
             {
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs b/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
index f90f7f28636..adad3e7d363 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Logging
     internal delegate string FormatErrorMessage();
 
     /// <summary>
-    /// An event args for <see cref="IBuildEventArgsReaderNotifications.OnRecoverableReadError"/> event.
+    /// An event args for <see cref="IBuildEventArgsReaderNotifications.RecoverableReadError"/> event.
     /// </summary>
     public sealed class BinaryLogReaderErrorEventArgs : EventArgs
     {
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
index 54adc7af29a..aee71562898 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
@@ -15,20 +15,7 @@ public interface IBuildEventArgsReaderNotifications
         /// Subscriber may adjust the string by setting <see cref="StringReadEventArgs.StringToBeUsed"/> property.
         /// The passed event arg can be reused and should not be stored.
         /// </summary>
-        public event Action<StringReadEventArgs>? StringReadDone;
-
-        /// <summary>
-        /// An event that allows the caller to be notified when a string is encountered in the binary log.
-        /// BinaryReader passed in ctor is at the beginning of the string at this point.
-        /// </summary>
-        /// <remarks>
-        ///    <format type="text/markdown"><![CDATA[
-        /// ## Remarks
-        /// > [!CAUTION]
-        /// > Use <see cref="StringReadDone"/> instead of this method.
-        /// ]]></format>
-        /// </remarks>
-        public event Action? StringEncountered;
+        event Action<StringReadEventArgs>? StringReadDone;
 
         /// <summary>
         /// An event that allows the caller to be notified when an embedded file is encountered in the binary log.
@@ -50,7 +37,7 @@ public interface IBuildEventArgsReaderNotifications
         /// }
         /// </code>
         /// </example>
-        public event Action<ArchiveFileEventArgs>? ArchiveFileEncountered;
+        event Action<ArchiveFileEventArgs>? ArchiveFileEncountered;
 
         /// <summary>
         /// Receives recoverable errors during reading.
@@ -58,6 +45,6 @@ public interface IBuildEventArgsReaderNotifications
         /// In case of <see cref="ReaderErrorType.UnknownEventData"/> this is raised before returning the structured representation of a build event
         /// that has some extra unknown data in the binlog. In case of other error types this event is raised and the offending build event is skipped and not returned.
         /// </summary>
-        event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
+        event Action<BinaryLogReaderErrorEventArgs>? RecoverableReadError;
     }
 }
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index d25e6834067..52477838f97 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -2017,7 +2017,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
     <value>No subscribers for any events.</value>
   </data>
   <data name="Binlog_MissingRecoverableErrorSubscribeError" xml:space="preserve">
-    <value>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</value>
+    <value>Subscription to RecoverableReadError is mandatory during forward compatible reading.</value>
   </data>
   <data name="Binlog_ImportFileSizeError" xml:space="preserve">
     <value>Imported files archive exceeded 2GB limit and it's not embedded.</value>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 719da46234f..4eb4f1b3959 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 9bc52d91042..be14de48f54 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 406a8c0111b..098079384e5 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index ce3265990e0..502103dff6c 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index a5e504e2899..fba6fc8ea6e 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index f7512b9f8f9..e87a7fa646d 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 2611f000f2b..541a5d4e662 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index a30ef170aab..18a64eb5d12 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index ab07fc50c27..35a450c1578 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 694907c581d..2c43ea7fa72 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 631652f8609..0102cea8785 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index a65a05957d5..f55ff3cc279 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 13e4e15b3de..51e9939ee21 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -54,8 +54,8 @@
         <note />
       </trans-unit>
       <trans-unit id="Binlog_MissingRecoverableErrorSubscribeError">
-        <source>Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</source>
-        <target state="new">Subscription to OnRecoverableReadError is mandatory during forward compatible reading.</target>
+        <source>Subscription to RecoverableReadError is mandatory during forward compatible reading.</source>
+        <target state="new">Subscription to RecoverableReadError is mandatory during forward compatible reading.</target>
         <note />
       </trans-unit>
       <trans-unit id="Binlog_ReaderMismatchedRead">
