diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index af50e0ca627..09301134140 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -557,7 +557,7 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
             return false;
         }
 
-        public HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context)
+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
         {
             throw new NotImplementedException();
         }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 9c5d5ef8702..60025a4ad32 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -225,7 +225,7 @@ bool IncludeTaskInputs
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
         /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>
-        HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context);
+        HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context);
 
         #region Register
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index d817893eba7..1e8ab55c00e 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -518,10 +518,13 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
         /// <summary>
         /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
         /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.
+        ///
+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise
+        /// all warnings will be treated as errors. <see cref="RequestBuilder.ConfigureWarningsAsErrorsAndMessages()"/>
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>
-        public HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context)
+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>
+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
         {
             if(_warningsAsErrorsByProject == null)
             {
@@ -534,7 +537,13 @@ public HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context)
 
             if(_warningsAsMessagesByProject != null)
             {
-                warningsAsErrorsExcludingMessages.SymmetricExceptWith(_warningsAsMessagesByProject[key]);
+                warningsAsErrorsExcludingMessages.ExceptWith(_warningsAsMessagesByProject[key]);
+
+                // A non-null empty set means all warnings are errors. Avoid this.
+                if (warningsAsErrorsExcludingMessages.Count == 0)
+                {
+                    warningsAsErrorsExcludingMessages = null;
+                }
             }
 
             return warningsAsErrorsExcludingMessages;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index acea9818cb2..8411e8959dc 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -685,7 +685,7 @@ public HashSet<string> WarningsAsErrors
         {
             get
             {
-                return _warningsAsErrors ??= _taskLoggingContext.LoggingService.GetWarningsAsErrorsByProject(_taskLoggingContext.BuildEventContext);
+                return _warningsAsErrors ??= _taskLoggingContext.LoggingService.GetWarningsToBeLoggedAsErrorsByProject(_taskLoggingContext.BuildEventContext);
             }
         }
         #endregion
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index ddce895f1a9..3ce5eb53d1c 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -272,7 +272,7 @@ public bool Execute()
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
-                        _taskLoggingContext.LoggingService.GetWarningsAsErrorsByProject(_taskLoggingContext.BuildEventContext)
+                        _taskLoggingContext.LoggingService.GetWarningsToBeLoggedAsErrorsByProject(_taskLoggingContext.BuildEventContext)
                         
                     );
 
