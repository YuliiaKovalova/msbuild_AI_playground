diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index 54384181025..170b025bbac 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -75,7 +75,7 @@ private BuildAbortedException(string message, Exception innerException, bool cal
             }
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
+        protected internal override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -83,7 +83,7 @@ protected override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected override void InitializeCustomState(IDictionary<string, string> state)
+        protected internal override void InitializeCustomState(IDictionary<string, string> state)
         {
             ErrorCode = state[nameof(ErrorCode)];
         }
diff --git a/src/Build/Errors/InternalLoggerException.cs b/src/Build/Errors/InternalLoggerException.cs
index 89e5139ea48..c174e2e3df3 100644
--- a/src/Build/Errors/InternalLoggerException.cs
+++ b/src/Build/Errors/InternalLoggerException.cs
@@ -136,7 +136,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("initializationException", initializationException);
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
+        protected internal override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -146,7 +146,7 @@ protected override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected override void InitializeCustomState(IDictionary<string, string> state)
+        protected internal override void InitializeCustomState(IDictionary<string, string> state)
         {
             errorCode = state[nameof(errorCode)];
             helpKeyword = state[nameof(helpKeyword)];
diff --git a/src/Build/Errors/InvalidProjectFileException.cs b/src/Build/Errors/InvalidProjectFileException.cs
index 7168cd5fa58..bdda27c2fdd 100644
--- a/src/Build/Errors/InvalidProjectFileException.cs
+++ b/src/Build/Errors/InvalidProjectFileException.cs
@@ -125,7 +125,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("hasBeenLogged", hasBeenLogged);
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
+        protected internal override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -141,7 +141,7 @@ protected override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected override void InitializeCustomState(IDictionary<string, string> state)
+        protected internal override void InitializeCustomState(IDictionary<string, string> state)
         {
             file = state[nameof(file)];
             lineNumber = int.Parse(state[nameof(lineNumber)]);
diff --git a/src/Build/Errors/InvalidToolsetDefinitionException.cs b/src/Build/Errors/InvalidToolsetDefinitionException.cs
index ba704d024da..8154d59ba77 100644
--- a/src/Build/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Build/Errors/InvalidToolsetDefinitionException.cs
@@ -105,7 +105,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("errorCode", errorCode);
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
+        protected internal override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -113,7 +113,7 @@ protected override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected override void InitializeCustomState(IDictionary<string, string> state)
+        protected internal override void InitializeCustomState(IDictionary<string, string> state)
         {
             errorCode = state[nameof(errorCode)];
         }
diff --git a/src/Framework/BuildException/BuildExceptionBase.cs b/src/Framework/BuildException/BuildExceptionBase.cs
index 521914e5d10..9f02ee46c47 100644
--- a/src/Framework/BuildException/BuildExceptionBase.cs
+++ b/src/Framework/BuildException/BuildExceptionBase.cs
@@ -17,22 +17,22 @@ public abstract class BuildExceptionBase : Exception
     private string? _remoteTypeName;
     private string? _remoteStackTrace;
 
-    protected BuildExceptionBase()
+    protected internal BuildExceptionBase()
         : base()
     { }
 
-    protected BuildExceptionBase(string message)
+    protected internal BuildExceptionBase(string message)
         : base(message)
     { }
 
-    protected BuildExceptionBase(
+    protected internal BuildExceptionBase(
         string message,
         Exception? inner)
         : base(message, inner)
     { }
 
     // This is needed as soon as we allow opt out of the non-BinaryFormatter serialization
-    protected BuildExceptionBase(SerializationInfo info, StreamingContext context)
+    protected internal BuildExceptionBase(SerializationInfo info, StreamingContext context)
         : base(info, context)
     { }
 
@@ -40,10 +40,10 @@ protected BuildExceptionBase(SerializationInfo info, StreamingContext context)
 
     public override string ToString() => string.IsNullOrEmpty(_remoteTypeName) ? base.ToString() : $"{_remoteTypeName}->{base.ToString()}";
 
-    protected virtual void InitializeCustomState(IDictionary<string, string?>? customKeyedSerializedData)
+    protected internal virtual void InitializeCustomState(IDictionary<string, string?>? customKeyedSerializedData)
     { /* This is it. Override for exceptions with custom state */ }
 
-    protected virtual IDictionary<string, string?>? FlushCustomState()
+    protected internal virtual IDictionary<string, string?>? FlushCustomState()
     {
         /* This is it. Override for exceptions with custom state */
         return null;
diff --git a/src/Framework/LoggerException.cs b/src/Framework/LoggerException.cs
index 45533829b48..cce14c44139 100644
--- a/src/Framework/LoggerException.cs
+++ b/src/Framework/LoggerException.cs
@@ -106,7 +106,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("helpKeyword", helpKeyword);
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
+        protected internal override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -115,7 +115,7 @@ protected override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected override void InitializeCustomState(IDictionary<string, string> state)
+        protected internal override void InitializeCustomState(IDictionary<string, string> state)
         {
             errorCode = state[nameof(errorCode)];
             helpKeyword = state[nameof(helpKeyword)];
