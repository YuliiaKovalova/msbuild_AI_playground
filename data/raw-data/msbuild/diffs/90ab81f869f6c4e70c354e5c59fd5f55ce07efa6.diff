diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 88e5fea6c1b..d2fcc248d0d 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2769,7 +2769,7 @@ internal static IEnumerable<Pair<string, S>> HasMetadata(Expander<P, I> expander
 
                         // GetMetadataValueEscaped returns empty string for missing metadata,
                         // but IItem specifies it should return null
-                        if (!string.IsNullOrEmpty(metadataValue))
+                        if (metadataValue!=null)
                         {
                             // return a result through the enumerator
                             yield return new Pair<string, S>(item.Key, item.Value);
@@ -2813,6 +2813,43 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
                     }
                 }
 
+                /// <summary>
+                /// Intrinsic function that returns only those items don't have the given metadata value
+                /// Using a case insensitive comparison.
+                /// </summary>
+                /// 
+                internal static IEnumerable<Pair<string, S>> WithOutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)
+                {
+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, "InvalidItemFunctionSyntax", functionName, arguments == null ? 0 : arguments.Length);
+
+                    string metadataName = arguments[0];
+                    string metadataValueToFind = arguments[1];
+
+                    foreach (Pair<string, S> item in itemsOfType)
+                    {
+                        string metadataValue = null;
+
+                        try
+                        {
+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                        }
+                        catch (ArgumentException ex) // Blank metadata name
+                        {
+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotEvaluateItemMetadata", metadataName, ex.Message);
+                        }
+                        catch (InvalidOperationException ex)
+                        {
+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotEvaluateItemMetadata", metadataName, ex.Message);
+                        }
+
+                        if (!String.Equals(metadataValue, metadataValueToFind, StringComparison.OrdinalIgnoreCase))
+                        {
+                            // return a result through the enumerator
+                            yield return new Pair<string, S>(item.Key, item.Value);
+                        }
+                    }
+                }
+
                 /// <summary>
                 /// Intrinsic function that returns a boolean to indicate if any of the items have the given metadata value
                 /// Using a case insensitive comparison.
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 4d5d9804805..c320272f09f 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1295,7 +1295,7 @@ public string GetMetadataEscaped(string metadataName)
 
                 string value = GetBuiltInMetadataEscaped(metadataName);
 
-                return value ?? String.Empty;
+                return value;
             }
 
             /// <summary>
@@ -1819,7 +1819,7 @@ internal TaskItem DeepClone(bool isImmutable)
             /// </summary>
             private string GetBuiltInMetadataEscaped(string name)
             {
-                string value = String.Empty;
+                string value = null;
 
                 if (FileUtilities.ItemSpecModifiers.IsItemSpecModifier(name))
                 {
