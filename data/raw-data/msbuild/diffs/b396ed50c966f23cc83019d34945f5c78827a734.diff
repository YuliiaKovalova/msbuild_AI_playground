diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index dcd2f9f82a9..7c2989b283f 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -273,7 +273,7 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn
         }
 
         [Fact]
-        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()
+        public void TaskLogsWarningAsError_BuildShouldFinishAndFail()
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
@@ -304,7 +304,7 @@ public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()
         /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging an error.
         /// </summary>
         [Fact]
-        public void TaskReturnsTrueButLogsError_BuildShouldContinue()
+        public void TaskReturnsTrueButLogsError_BuildShouldFinishAndPass()
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
@@ -329,6 +329,73 @@ public void TaskReturnsTrueButLogsError_BuildShouldContinue()
             }
         }
 
+        /// <summary>
+        /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging a warning as error.
+        /// This tests MSBuildWarningsAsErrors
+        /// </summary>
+        [Fact]
+        public void TaskReturnsTrueButLogsWarningAsError_BuildShouldFinishAndFail()
+        {
+            using (TestEnvironment env = TestEnvironment.Create(_output))
+            {
+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
+                <Project>
+                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <UsingTask TaskName = ""LogWarningReturnHasLoggedError"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <PropertyGroup>
+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>
+                    </PropertyGroup>
+                    <Target Name='Build'>
+                        <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
+                        <LogWarningReturnHasLoggedError WarningCode=""MSB1235""/>
+                    </Target>
+                </Project>");
+
+                MockLogger logger = proj.BuildProjectExpectFailure();
+
+                logger.WarningCount.ShouldBe(1);
+                logger.ErrorCount.ShouldBe(1);
+
+                // The build will continue so we should see the warning MSB1235
+                logger.AssertLogContains("MSB1235");
+            }
+        }
+
+
+        /// <summary>
+        /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging warning as error.
+        /// This test specifically tests the MSBuildTreatWarningsAsErrors flag as opposed to MSBuildWarningsAsErrors
+        /// </summary>
+        [Fact]
+        public void TaskReturnsTrueButLogsWarning_TreatWarningsAsErrors_BuildShouldFinishAndFail()
+        {
+            using (TestEnvironment env = TestEnvironment.Create(_output))
+            {
+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
+                <Project>
+                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <UsingTask TaskName = ""LogWarningReturnHasLoggedError"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <PropertyGroup>
+                        <MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>
+                    </PropertyGroup>
+                    <Target Name='Build'>
+                        <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
+                        <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1235""/>
+                    </Target>
+                </Project>");
+
+                MockLogger logger = proj.BuildProjectExpectFailure();
+
+                logger.WarningCount.ShouldBe(0);
+                logger.ErrorCount.ShouldBe(2);
+
+                // The build will continue so we should see the error MSB1235
+                logger.AssertLogContains("MSB1235");
+            }
+        }
+
         [Fact]
         public void TaskReturnsFailureButDoesNotLogError_ShouldCauseBuildFailure()
         {
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 4222443443a..804645c242d 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -1016,7 +1016,12 @@ params object[] messageArgs
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
-            if ((BuildEngine as IBuildEngine8)?.WarningsAsErrors?.Contains(warningCode) == true)
+            IBuildEngine8 be8 = (BuildEngine as IBuildEngine8);
+
+            // This warning will be converted to an error if:
+            // 1. Its code exists within WarningsAsErrors
+            // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)
+            if (be8?.WarningsAsErrors?.Contains(warningCode) == true || be8?.WarningsAsErrors?.Count == 0)
             {
                 var err = new BuildErrorEventArgs
                 (
