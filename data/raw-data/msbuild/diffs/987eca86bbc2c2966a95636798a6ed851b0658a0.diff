diff --git a/src/Build.OM.UnitTests/NugetRestoreTests.cs b/src/Build.OM.UnitTests/NugetRestoreTests.cs
index 3c75c36b772..958d0d21bda 100644
--- a/src/Build.OM.UnitTests/NugetRestoreTests.cs
+++ b/src/Build.OM.UnitTests/NugetRestoreTests.cs
@@ -10,8 +10,6 @@
 #endif
 using Xunit.Abstractions;
 
-#nullable disable
-
 namespace Microsoft.Build.Engine.OM.UnitTests
 {
     public sealed class NugetRestoreTests
@@ -29,7 +27,7 @@ public NugetRestoreTests(ITestOutputHelper output)
         [Fact]
         public void TestOldNuget()
         {
-            string msbuildExePath = Path.GetDirectoryName(RunnerUtilities.PathToCurrentlyRunningMsBuildExe);
+            string msbuildExePath = Path.GetDirectoryName(RunnerUtilities.PathToCurrentlyRunningMsBuildExe)!;
             using TestEnvironment testEnvironment = TestEnvironment.Create();
             TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
             // The content of the solution isn't known to matter, but having a custom solution makes it easier to add requirements should they become evident.
@@ -53,7 +51,7 @@ public void TestOldNuget()
 EndGlobalSection
 EndGlobal
 ");
-            RunnerUtilities.RunProcessAndGetOutput(Path.Combine(msbuildExePath, "nuget", "NuGet.exe"), "restore " + sln.Path + " -MSBuildPath \"" + msbuildExePath + "\"", out bool success, outputHelper: _output);
+            RunnerUtilities.RunProcessAndGetOutput(Path.Combine(msbuildExePath, "nuget", "NuGet.exe"), "restore " + sln.Path + " -MSBuildPath \"" + msbuildExePath + "\"", out bool success, out _, outputHelper: _output);
             success.ShouldBeTrue();
         }
 #endif
diff --git a/src/Build.UnitTests/BackEnd/SleepingTask.cs b/src/Build.UnitTests/BackEnd/SleepingTask.cs
new file mode 100644
index 00000000000..d7ed2cbee41
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/SleepingTask.cs
@@ -0,0 +1,24 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Utilities;
+using System.Threading;
+
+namespace Microsoft.Build.UnitTests
+{
+    public class SleepingTask : Task
+    {
+        public int SleepTime { get; set; }
+
+        /// <summary>
+        /// Sleep for SleepTime milliseconds.
+        /// </summary>
+        /// <returns>Success on success.</returns>
+        public override bool Execute()
+        {
+            // Thread.Sleep(SleepTime);
+            System.Threading.Tasks.Task.Delay(SleepTime);
+            return !Log.HasLoggedErrors;
+        }
+    }
+}
diff --git a/src/Build.UnitTests/MSBuildServer_Tests.cs b/src/Build.UnitTests/MSBuildServer_Tests.cs
new file mode 100644
index 00000000000..bc0d32d026a
--- /dev/null
+++ b/src/Build.UnitTests/MSBuildServer_Tests.cs
@@ -0,0 +1,96 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Diagnostics;
+using System.Reflection;
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.Shared;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+
+namespace Microsoft.Build.Engine.UnitTests
+{
+    public class MSBuildServer_Tests : IDisposable
+    {
+        private readonly ITestOutputHelper _output;
+        private readonly TestEnvironment _env;
+
+        public MSBuildServer_Tests(ITestOutputHelper output)
+        {
+            _output = output;
+            _env = TestEnvironment.Create(_output);
+        }
+
+        public void Dispose() => _env.Dispose();
+
+        [Fact]
+        public void MSBuildServerTest()
+        {
+            string contents = @$"
+<Project>
+<UsingTask TaskName=""ProcessIdTask"" AssemblyFile=""{Assembly.GetExecutingAssembly().Location}"" />
+    <Target Name='AccessPID'>
+        <ProcessIdTask>
+            <Output PropertyName=""PID"" TaskParameter=""Pid"" />
+        </ProcessIdTask>
+        <Message Text=""Server ID is $(PID)"" Importance=""High"" />
+    </Target>
+</Project>";
+            TransientTestFile project = _env.CreateFile("testProject.proj", contents);
+            _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+            string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, out bool exitedWithoutTimeout, false, _output);
+            success.ShouldBeTrue();
+            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
+            int indexOfId = output.IndexOf("Process ID is ") + "Process ID is ".Length;
+            int endOfId = output.IndexOf('\r', indexOfId);
+            int pidOfInitialProcess = int.Parse(output.Substring(indexOfId, endOfId - indexOfId));
+            indexOfId = output.IndexOf("Server ID is ") + "Server ID is ".Length;
+            endOfId = output.IndexOf('\n', indexOfId);
+            int pidOfServerProcess = int.Parse(output.Substring(indexOfId, endOfId - indexOfId));
+            pidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
+
+            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+            success.ShouldBeTrue();
+            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
+            indexOfId = output.IndexOf("Process ID is ") + "Process ID is ".Length;
+            endOfId = output.IndexOf('\r', indexOfId);
+            int newPidOfInitialProcess = int.Parse(output.Substring(indexOfId, endOfId - indexOfId));
+            indexOfId = output.IndexOf("Server ID is ") + "Server ID is ".Length;
+            endOfId = output.IndexOf('\n', indexOfId);
+            newPidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
+            newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
+            pidOfServerProcess.ShouldBe(int.Parse(output.Substring(indexOfId, endOfId - indexOfId)), "Node used by both the first and second build should be the same.");
+
+            // Start long-lived task execution
+            contents = @$"
+<Project>
+<UsingTask TaskName=""SleepingTask"" AssemblyFile=""{Assembly.GetExecutingAssembly().Location}"" />
+    <Target Name='Sleep'>
+        <ProcessIdTask SleepTime=""100000"" />
+    </Target>
+</Project>";
+            TransientTestFile sleepProject = _env.CreateFile("napProject.proj", contents);
+            RunnerUtilities.RunProcessAndGetOutput(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path, out _, out _, waitForExit: false);
+
+            // Kill the server
+            Process.GetProcessById(pidOfServerProcess).KillTree(1000);
+
+            // Ensure that a new build can still succeed and that its server node is different.
+            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+            success.ShouldBeTrue();
+            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
+            indexOfId = output.IndexOf("Process ID is ") + "Process ID is ".Length;
+            endOfId = output.IndexOf('\r', indexOfId);
+            newPidOfInitialProcess = int.Parse(output.Substring(indexOfId, endOfId - indexOfId));
+            indexOfId = output.IndexOf("Server ID is ") + "Server ID is ".Length;
+            endOfId = output.IndexOf('\n', indexOfId);
+            newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
+            int newServerProcessId = int.Parse(output.Substring(indexOfId, endOfId - indexOfId));
+            newPidOfInitialProcess.ShouldNotBe(newServerProcessId, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
+            pidOfServerProcess.ShouldNotBe(newServerProcessId, "Node used by both the first and second build should be the same.");
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/PortableTasks_Tests.cs b/src/Tasks.UnitTests/PortableTasks_Tests.cs
index 20353efc583..1ef2ad381c7 100644
--- a/src/Tasks.UnitTests/PortableTasks_Tests.cs
+++ b/src/Tasks.UnitTests/PortableTasks_Tests.cs
@@ -69,7 +69,7 @@ private void RunMSBuildOnProjectWithPortableTaskAndAssertOutput(bool useDesktopM
                 _outputHelper.WriteLine($"Building project {projFile}");
 
                 var executionOutput = useDesktopMSBuild
-                    ? RunnerUtilities.RunProcessAndGetOutput("msbuild", projFile, out successfulExit,
+                    ? RunnerUtilities.RunProcessAndGetOutput("msbuild", projFile, out successfulExit, out _,
                         shellExecute: true, outputHelper: _outputHelper)
                     : RunnerUtilities.ExecMSBuild(projFile, out successfulExit);
 
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 7911ea669d6..e84b849f796 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -18,7 +18,7 @@ public static class RunnerUtilities
         /// </summary>
         public static string ExecMSBuild(string msbuildParameters, out bool successfulExit, ITestOutputHelper outputHelper = null)
         {
-            return ExecMSBuild(PathToCurrentlyRunningMsBuildExe, msbuildParameters, out successfulExit, false, outputHelper);
+            return ExecMSBuild(PathToCurrentlyRunningMsBuildExe, msbuildParameters, out successfulExit, outputHelper: outputHelper);
         }
 
         /// <summary>
@@ -27,6 +27,11 @@ public static string ExecMSBuild(string msbuildParameters, out bool successfulEx
         /// </summary>
         public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
         {
+            return ExecMSBuild(pathToMsBuildExe, msbuildParameters, out successfulExit, out _, shellExecute, outputHelper);
+        }
+
+        public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, out bool exitedWithoutTimeout, bool shellExecute = false, ITestOutputHelper outputHelper = null)
+        {
 #if FEATURE_RUN_EXE_IN_TESTS
             var pathToExecutable = pathToMsBuildExe;
 #else
@@ -34,7 +39,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
-            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, out exitedWithoutTimeout, shellExecute, outputHelper);
         }
 
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
@@ -70,7 +75,7 @@ private static string ResolveRuntimeExecutableName()
         /// <summary>
         /// Run the process and get stdout and stderr
         /// </summary>
-        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
+        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, out bool exitedWithoutTimeout, bool shellExecute = false, ITestOutputHelper outputHelper = null, bool waitForExit = true)
         {
             if (shellExecute)
             {
@@ -114,9 +119,18 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.BeginOutputReadLine();
                 p.BeginErrorReadLine();
                 p.StandardInput.Dispose();
-                p.WaitForExit();
 
-                successfulExit = p.ExitCode == 0;
+                if (waitForExit)
+                {
+                    exitedWithoutTimeout = p.WaitForExit(30000);
+                    output += "Process ID is " + p.Id + "\r\n";
+                    successfulExit = p.ExitCode == 0;
+                }
+                else
+                {
+                    exitedWithoutTimeout = true;
+                    successfulExit = true;
+                }
             }
 
             outputHelper?.WriteLine("==== OUTPUT ====");
