diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/LiveLogger/ANSIBuilder.cs
similarity index 99%
rename from src/Build/Logging/FancyLogger/ANSIBuilder.cs
rename to src/Build/Logging/LiveLogger/ANSIBuilder.cs
index 4bd20820b46..4c667536db1 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/LiveLogger/ANSIBuilder.cs
@@ -6,7 +6,7 @@
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
     internal static class ANSIBuilder
     {
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/LiveLogger/LiveLogger.cs
similarity index 83%
rename from src/Build/Logging/FancyLogger/FancyLogger.cs
rename to src/Build/Logging/LiveLogger/LiveLogger.cs
index a364ee13cb9..d0edcaf333d 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/LiveLogger/LiveLogger.cs
@@ -6,11 +6,11 @@
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
-    public class FancyLogger : ILogger
+    public class LiveLogger : ILogger
     {   
-        private Dictionary<int, FancyLoggerProjectNode> projects = new Dictionary<int, FancyLoggerProjectNode>();
+        private Dictionary<int, LiveLoggerProjectNode> projects = new Dictionary<int, LiveLoggerProjectNode>();
 
         private bool Succeeded;
 
@@ -21,7 +21,7 @@ public class FancyLogger : ILogger
 
         public LoggerVerbosity Verbosity { get; set; }
 
-        public FancyLogger()
+        public LiveLogger()
         {
             Parameters = "";
         }
@@ -54,15 +54,15 @@ public void Initialize(IEventSource eventSource)
 
         void Render()
         {
-            // Initialize FancyLoggerBuffer
-            FancyLoggerBuffer.Initialize();
+            // Initialize
+            LiveLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            FancyLoggerBuffer.WriteNewLine(string.Empty);
+            LiveLoggerBuffer.WriteNewLine(string.Empty);
             // First render
-            FancyLoggerBuffer.Render();
+            LiveLoggerBuffer.Render();
             int i = 0;
             // Rerender periodically
-            while (!FancyLoggerBuffer.IsTerminated)
+            while (!LiveLoggerBuffer.IsTerminated)
             {
                 i++;
                 // Delay by 1/60 seconds
@@ -72,7 +72,7 @@ void Render()
                     // Rerender projects only when needed
                     foreach (var project in projects) project.Value.Log();
                     // Rerender buffer
-                    FancyLoggerBuffer.Render();
+                    LiveLoggerBuffer.Render();
                 });
                 // Handle keyboard input
                 if (Console.KeyAvailable)
@@ -81,12 +81,12 @@ void Render()
                     switch (key)
                     {
                         case ConsoleKey.UpArrow:
-                            if (FancyLoggerBuffer.TopLineIndex > 0) FancyLoggerBuffer.TopLineIndex--;
-                            FancyLoggerBuffer.ShouldRerender = true;
+                            if (LiveLoggerBuffer.TopLineIndex > 0) LiveLoggerBuffer.TopLineIndex--;
+                            LiveLoggerBuffer.ShouldRerender = true;
                             break;
                         case ConsoleKey.DownArrow:
-                            FancyLoggerBuffer.TopLineIndex++;
-                            FancyLoggerBuffer.ShouldRerender = true;
+                            LiveLoggerBuffer.TopLineIndex++;
+                            LiveLoggerBuffer.ShouldRerender = true;
                             break;
                         default:
                             break;
@@ -113,7 +113,7 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             // If id already exists...
             if (projects.ContainsKey(id)) return;
             // Add project
-            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
+            LiveLoggerProjectNode node = new LiveLoggerProjectNode(e);
             projects[id] = node;
             // Log
             node.ShouldRerender = true;
@@ -123,7 +123,7 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update line
             node.Finished = true;
             // Log
@@ -135,7 +135,7 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update
             node.AddTarget(e);
             // Log
@@ -146,7 +146,7 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update
             node.FinishedTargets++;
             // Log
@@ -158,7 +158,7 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update
             node.AddTask(e);
             existingTasks++;
@@ -177,7 +177,7 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             if (e is TaskCommandLineEventArgs) return;
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update
             node.AddMessage(e);
             // Log
@@ -188,7 +188,7 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update
             node.AddWarning(e);
             // Log
@@ -198,7 +198,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
             // Update
             node.AddError(e);
             // Log
@@ -213,7 +213,7 @@ void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
 
         public void Shutdown()
         {
-            FancyLoggerBuffer.Terminate();
+            LiveLoggerBuffer.Terminate();
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
             Console.Clear();
             int errorCount = 0;
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
similarity index 82%
rename from src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
rename to src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
index 04923ba5461..696beaa55fb 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
@@ -7,9 +7,9 @@
 using System.Linq;
 using System.Text;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
-    public class FancyLoggerBufferLine
+    public class LiveLoggerBufferLine
     {
         private static int Counter = 0;
         private string _text = string.Empty;
@@ -26,22 +26,22 @@ public string Text
                 if (ShouldWrapLines) WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
                 else WrappedText = new List<string> { value };
                 // Buffer should rerender
-                FancyLoggerBuffer.ShouldRerender = true;
+                LiveLoggerBuffer.ShouldRerender = true;
             }
         }
 
-        public FancyLoggerBufferLine()
+        public LiveLoggerBufferLine()
         {
             Id = Counter++;
             Text = string.Empty;
             ShouldWrapLines = false;
         }
-        public FancyLoggerBufferLine(string text)
+        public LiveLoggerBufferLine(string text)
             : this()
         {
             Text = text;
         }
-        public FancyLoggerBufferLine(string text, bool shouldWrapLines)
+        public LiveLoggerBufferLine(string text, bool shouldWrapLines)
             : this()
         {
             ShouldWrapLines = shouldWrapLines;
@@ -49,9 +49,9 @@ public FancyLoggerBufferLine(string text, bool shouldWrapLines)
         }
     }
 
-    public class FancyLoggerBuffer
+    public class LiveLoggerBuffer
     {
-        private static List<FancyLoggerBufferLine> Lines = new();
+        private static List<LiveLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
         internal static bool IsTerminated = false;
@@ -103,7 +103,7 @@ public static void Render()
             string contents = string.Empty;
             int accumulatedLineCount = 0;
             int lineIndex = 0;
-            foreach (FancyLoggerBufferLine line in Lines)
+            foreach (LiveLoggerBufferLine line in Lines)
             {
                 // Continue if accum line count + next lines < scrolling area
                 if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) {
@@ -134,7 +134,7 @@ public static int GetLineIndexById(int lineId)
             return Lines.FindIndex(x => x.Id == lineId);
         }
 
-        public static FancyLoggerBufferLine? GetLineById(int lineId)
+        public static LiveLoggerBufferLine? GetLineById(int lineId)
         {
             int index = GetLineIndexById(lineId);
             if (index == -1) return null;
@@ -144,16 +144,16 @@ public static int GetLineIndexById(int lineId)
 
         #region Line create, update and delete
         // Write new line
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text)
+        public static LiveLoggerBufferLine? WriteNewLineAfter(int lineId, string text)
         {
             return WriteNewLineAfter(lineId, text, true);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines)
+        public static LiveLoggerBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
+            LiveLoggerBufferLine line = new LiveLoggerBufferLine(text, shouldWrapLines);
             return WriteNewLineAfter(lineId, line);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)
+        public static LiveLoggerBufferLine? WriteNewLineAfter(int lineId, LiveLoggerBufferLine line)
         {
             if (lineId != -1)
             {
@@ -170,23 +170,23 @@ public static int GetLineIndexById(int lineId)
             return line;
         }
 
-        public static FancyLoggerBufferLine? WriteNewLine(string text)
+        public static LiveLoggerBufferLine? WriteNewLine(string text)
         {
             return WriteNewLine(text, true);
         }
-        public static FancyLoggerBufferLine? WriteNewLine(string text, bool shouldWrapLines)
+        public static LiveLoggerBufferLine? WriteNewLine(string text, bool shouldWrapLines)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
+            LiveLoggerBufferLine line = new LiveLoggerBufferLine(text, shouldWrapLines);
             return WriteNewLine(line);
         }
-        public static FancyLoggerBufferLine? WriteNewLine(FancyLoggerBufferLine line)
+        public static LiveLoggerBufferLine? WriteNewLine(LiveLoggerBufferLine line)
         {
             return WriteNewLineAfter(Lines.Count > 0 ? Lines.Last().Id : -1, line);
         }
 
         // Update line
         // TODO: Remove. Use line.Text instead
-        public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
+        public static LiveLoggerBufferLine? UpdateLine(int lineId, string text)
         {
             return null;
         }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
similarity index 93%
rename from src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
rename to src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
index f31f56d213c..85b3143a0c9 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
@@ -5,10 +5,10 @@
 using System;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 { 
 
-    public class FancyLoggerMessageNode
+    public class LiveLoggerMessageNode
     {
         // Use this to change the max lenngth (relative to screen size) of messages
         private static int MAX_LENGTH = 3 * Console.BufferWidth;
@@ -19,13 +19,13 @@ public enum MessageType
             Error
         }
         public string Message;
-        public FancyLoggerBufferLine? Line;
+        public LiveLoggerBufferLine? Line;
         public MessageType Type;
         public string? Code;
         public string? FilePath;
         public int? LineNumber;
         public int? ColumnNumber;
-        public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
+        public LiveLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
             if (Message.Length > MAX_LENGTH) Message = Message.Substring(0, MAX_LENGTH - 1) + "…";
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
similarity index 68%
rename from src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
rename to src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
index 46553f529f2..1b2289e9f94 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
@@ -8,9 +8,9 @@
 using System.Linq;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 { 
-    internal class FancyLoggerProjectNode
+    internal class LiveLoggerProjectNode
     {
         /// <summary>
         /// Given a list of paths, this method will get the shortest not ambiguous path for a project.
@@ -27,20 +27,20 @@ private static string GetUnambiguousPath(string path)
         public string TargetFramework;
         public bool Finished;
         // Line to display project info
-        public FancyLoggerBufferLine? Line;
+        public LiveLoggerBufferLine? Line;
         // Targets
         public int FinishedTargets;
-        public FancyLoggerBufferLine? CurrentTargetLine;
-        public FancyLoggerTargetNode? CurrentTargetNode;
+        public LiveLoggerBufferLine? CurrentTargetLine;
+        public LiveLoggerTargetNode? CurrentTargetNode;
         // Messages, errors and warnings
-        public List<FancyLoggerMessageNode> AdditionalDetails = new();
+        public List<LiveLoggerMessageNode> AdditionalDetails = new();
         // Count messages, warnings and errors
         public int MessageCount = 0;
         public int WarningCount = 0;
         public int ErrorCount = 0;
         // Bool if node should rerender
         internal bool ShouldRerender = true;
-        public FancyLoggerProjectNode(ProjectStartedEventArgs args)
+        public LiveLoggerProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
             ProjectPath = args.ProjectFile!;
@@ -73,67 +73,67 @@ public void Log()
                 Console.WindowWidth
             );
             // Create or update line
-            if (Line is null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
+            if (Line is null) Line = LiveLoggerBuffer.WriteNewLine(lineContents, false);
             else Line.Text = lineContents;
 
             // For finished projects
             if (Finished)
             {
-                if (CurrentTargetLine is not null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
-                foreach (FancyLoggerMessageNode node in AdditionalDetails.ToList())
+                if (CurrentTargetLine is not null) LiveLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                foreach (LiveLoggerMessageNode node in AdditionalDetails.ToList())
                 {
                     // Only delete high priority messages
-                    if (node.Type != FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                    if (node.Line is not null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
+                    if (node.Type != LiveLoggerMessageNode.MessageType.HighPriorityMessage) continue;
+                    if (node.Line is not null) LiveLoggerBuffer.DeleteLine(node.Line.Id);
                 }
             }
 
             // Current target details
             if (CurrentTargetNode is null) return;
             string currentTargetLineContents = $"    └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
-            if (CurrentTargetLine is null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+            if (CurrentTargetLine is null) CurrentTargetLine = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
             else CurrentTargetLine.Text = currentTargetLineContents;
 
             // Messages, warnings and errors
-            foreach (FancyLoggerMessageNode node in AdditionalDetails)
+            foreach (LiveLoggerMessageNode node in AdditionalDetails)
             {
-                if (Finished && node.Type == FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                if (node.Line is null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                if (Finished && node.Type == LiveLoggerMessageNode.MessageType.HighPriorityMessage) continue;
+                if (node.Line is null) node.Line = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 node.Log();
             }
         }
 
-        public FancyLoggerTargetNode AddTarget(TargetStartedEventArgs args)
+        public LiveLoggerTargetNode AddTarget(TargetStartedEventArgs args)
         {
-            CurrentTargetNode = new FancyLoggerTargetNode(args);
+            CurrentTargetNode = new LiveLoggerTargetNode(args);
             return CurrentTargetNode;
         }
-        public FancyLoggerTaskNode? AddTask(TaskStartedEventArgs args)
+        public LiveLoggerTaskNode? AddTask(TaskStartedEventArgs args)
         {
             // Get target id
             int targetId = args.BuildEventContext!.TargetId;
             if (CurrentTargetNode?.Id == targetId) return CurrentTargetNode.AddTask(args);
             else return null;
         }
-        public FancyLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
+        public LiveLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
         {
             if (args.Importance != MessageImportance.High) return null;
             MessageCount++;
-            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
             AdditionalDetails.Add(node);
             return node;
         }
-        public FancyLoggerMessageNode? AddWarning(BuildWarningEventArgs args)
+        public LiveLoggerMessageNode? AddWarning(BuildWarningEventArgs args)
         {
             WarningCount++;
-            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
             AdditionalDetails.Add(node);
             return node;
         }
-        public FancyLoggerMessageNode? AddError(BuildErrorEventArgs args)
+        public LiveLoggerMessageNode? AddError(BuildErrorEventArgs args)
         {
             ErrorCount++;
-            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
             AdditionalDetails.Add(node);
             return node;
         }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
similarity index 55%
rename from src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
rename to src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
index 0c5ad00ed4f..69665aed9ed 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
@@ -4,22 +4,22 @@
 
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 { 
 
-    public class FancyLoggerTargetNode
+    public class LiveLoggerTargetNode
     {
         public int Id;
         public string TargetName;
-        public FancyLoggerTaskNode? CurrentTaskNode;
-        public FancyLoggerTargetNode(TargetStartedEventArgs args)
+        public LiveLoggerTaskNode? CurrentTaskNode;
+        public LiveLoggerTargetNode(TargetStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TargetId;
             TargetName = args.TargetName;
         }
-        public FancyLoggerTaskNode AddTask(TaskStartedEventArgs args)
+        public LiveLoggerTaskNode AddTask(TaskStartedEventArgs args)
         {
-            CurrentTaskNode = new FancyLoggerTaskNode(args);
+            CurrentTaskNode = new LiveLoggerTaskNode(args);
             return CurrentTaskNode;
         }
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerTaskNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
similarity index 71%
rename from src/Build/Logging/FancyLogger/FancyLoggerTaskNode.cs
rename to src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
index d645a5daedc..28a9ad09d87 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerTaskNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
@@ -4,14 +4,14 @@
 
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 { 
 
-    public class FancyLoggerTaskNode
+    public class LiveLoggerTaskNode
     {
         public int Id;
         public string TaskName;
-        public FancyLoggerTaskNode(TaskStartedEventArgs args)
+        public LiveLoggerTaskNode(TaskStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TaskId;
             TaskName = args.TaskName;
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index a0bc0207854..eec69a986ff 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,7 +160,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
-    <Compile Include="Logging\FancyLogger\*.cs" />
+    <Compile Include="Logging\LiveLogger\*.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index cf6ba40db6a..151bb54ad2a 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -38,7 +38,7 @@
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Logging.FancyLogger;
+using Microsoft.Build.Logging.LiveLogger;
 using System.Runtime.InteropServices;
 
 #nullable disable
@@ -3452,7 +3452,7 @@ List<ILogger> loggers
             // Check for flags and env variables
             if (!noConsoleLogger)
             {
-                FancyLogger l = new FancyLogger();
+                LiveLogger l = new LiveLogger();
                 loggers.Add(l);
             }
         }
