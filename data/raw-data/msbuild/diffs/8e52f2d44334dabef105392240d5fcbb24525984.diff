diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index aec5b9042e5..d695340a179 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -5,6 +5,7 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Collections.Immutable;
+using System.Diagnostics;
 using System.IO;
 using System.Linq;
 using System.Text;
@@ -19,6 +20,7 @@ namespace Microsoft.Build.Experimental.Graph
     /// <summary>
     ///     Represents a graph of evaluated projects.
     /// </summary>
+    [DebuggerDisplay(@"#roots={GraphRoots.Count}, #nodes={ProjectNodes.Count}, #entryPoints={EntryPointNodes.Count}")]
     public sealed class ProjectGraph
     {
         /// <summary>
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index eb5b051e2e8..49514a4db4d 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System.Collections.Generic;
+using System.Diagnostics;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
@@ -10,6 +11,7 @@ namespace Microsoft.Build.Experimental.Graph
     /// <summary>
     /// Represents the node for a particular project in a project graph.
     /// </summary>
+    [DebuggerDisplay(@"{ToString()}")]
     public sealed class ProjectGraphNode
     {
         private readonly HashSet<ProjectGraphNode> _projectReferences = new HashSet<ProjectGraphNode>();
@@ -37,6 +39,14 @@ internal ProjectGraphNode(ProjectInstance projectInstance)
         /// </summary>
         public ProjectInstance ProjectInstance { get; }
 
+        public override string ToString()
+        {
+            var truncatedProjectFile = FileUtilities.TruncatePathToTrailingSegments(ProjectInstance.FullPath, 2);
+
+            return
+                $"{truncatedProjectFile}, #GlobalProps={ProjectInstance.GlobalProperties.Count}, #Props={ProjectInstance.Properties.Count}, #Items={ProjectInstance.Items.Count}, #in={ReferencingProjects.Count}, #out={ProjectReferences.Count}";
+        }
+
         internal void AddProjectReference(ProjectGraphNode reference, ProjectItemInstance projectReferenceItem, GraphBuilder.GraphEdges edges)
         {
             _projectReferences.Add(reference);
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 3d01390a87c..92c330b45e3 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -83,7 +83,9 @@ internal static void ClearCacheDirectoryPath()
             (char)31, ':', '*', '?', '\\', '/'
         };
 
-        private static readonly char[] Slashes = { '/', '\\' };
+        internal static readonly char[] Slashes = { '/', '\\' };
+
+        internal static readonly string DirectorySeparatorString = Path.DirectorySeparatorChar.ToString();
 
 #if !CLR2COMPATIBILITY
         private static readonly ConcurrentDictionary<string, bool> FileExistenceCache = new ConcurrentDictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
@@ -250,6 +252,22 @@ internal static String GetDirectoryNameOfFullPath(String fullPath)
             return null;
         }
 
+        internal static string TruncatePathToTrailingSegments(string path, int trailingSegmentsToKeep)
+        {
+#if !CLR2COMPATIBILITY
+            ErrorUtilities.VerifyThrowInternalLength(path, nameof(path));
+            ErrorUtilities.VerifyThrow(trailingSegmentsToKeep >= 0, "trailing segments must be positive");
+
+            var segments = path.Split(Slashes, StringSplitOptions.RemoveEmptyEntries);
+
+            var headingSegmentsToRemove = Math.Max(0, segments.Length - trailingSegmentsToKeep);
+
+            return string.Join(DirectorySeparatorString, segments.Skip(headingSegmentsToRemove));
+#else
+            return path;
+#endif
+        }
+
         internal static bool ContainsRelativePathSegments(string path)
         {
             for (int i = 0; i < path.Length; i++)
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 9c5931a259e..56ad12fc4a7 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -1034,5 +1034,20 @@ public void ContainsRelativeSegmentsTest(string path, bool expectedResult)
         {
             FileUtilities.ContainsRelativePathSegments(path).ShouldBe(expectedResult);
         }
+
+        [Theory]
+        [InlineData("a/b/c/d", 0, "")]
+        [InlineData("a/b/c/d", 1, "d")]
+        [InlineData("a/b/c/d", 2, "c/d")]
+        [InlineData("a/b/c/d", 3, "b/c/d")]
+        [InlineData("a/b/c/d", 4, "a/b/c/d")]
+        [InlineData("a/b/c/d", 5, "a/b/c/d")]
+        [InlineData(@"a\/\/\//b/\/\/\//c//\/\/\/d/\//\/\/", 2, "c/d")]
+        public static void TestTruncatePathToTrailingSegments(string path, int trailingSegments, string expectedTruncatedPath)
+        {
+            expectedTruncatedPath = expectedTruncatedPath.Replace('/', Path.DirectorySeparatorChar);
+
+            FileUtilities.TruncatePathToTrailingSegments(path, trailingSegments).ShouldBe(expectedTruncatedPath);
+        }
     }
 }
