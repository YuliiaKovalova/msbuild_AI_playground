diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index f99833cdc15..b6dad30d669 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2992,7 +2992,7 @@ private ILoggingService CreateLoggingService(
 
                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]
                 {
-                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance)
+                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance, ((IBuildComponentHost)this).BuildParameters.AreBuildCheckStatsEnabled)
                 });
             }
 
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 7a3e18b7e83..e0899b84ce7 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -210,7 +210,7 @@ public class BuildParameters : ITranslatable
         private bool _question;
 
         private bool _isBuildCheckEnabled;
-        private bool _isBuildCheckEnabled;
+        private bool _areBuildCheckStatsEnabled;
 
         /// <summary>
         /// The settings used to load the project under build
@@ -314,8 +314,8 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             DiscardBuildResults = other.DiscardBuildResults;
             LowPriority = other.LowPriority;
             Question = other.Question;
-            IsBuildCheckEnabled = other.IsBuildCopEnabled;
             IsBuildCheckEnabled = other.IsBuildCheckEnabled;
+            AreBuildCheckStatsEnabled = other.AreBuildCheckStatsEnabled;
             ProjectCacheDescriptor = other.ProjectCacheDescriptor;
         }
 
@@ -853,10 +853,10 @@ public bool IsBuildCheckEnabled
         /// <summary>
         /// Gets or sets an indication of build analysis statistics enablement.
         /// </summary>
-        public bool AreBuildCopStatsEnabled
+        public bool AreBuildCheckStatsEnabled
         {
-            get => _areBuildCopStatsEnabled;
-            set => _areBuildCopStatsEnabled = value;
+            get => _areBuildCheckStatsEnabled;
+            set => _areBuildCheckStatsEnabled = value;
         }
 
         /// <summary>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 027f329c457..f76be164ee9 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -105,8 +105,8 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
 
         if (_areStatsEnabled)
         {
-            _statsAnalyzers.Merge(buildCopManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
-            _statsInfra.Merge(buildCopManager.CreateBuildCopInfraTracingStats(), (span1, span2) => span1 + span2);
+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
+            _statsInfra.Merge(buildCheckManager.CreateBuildCheckInfraTracingStats(), (span1, span2) => span1 + span2);
 
             LogAnalyzerStats(loggingContext);
         }
@@ -114,7 +114,7 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
     
     private void LogAnalyzerStats(LoggingContext loggingContext)
     {
-        loggingContext.LogCommentFromText(MessageImportance.High, $"BuildCop run times{Environment.NewLine}");
+        loggingContext.LogCommentFromText(MessageImportance.High, $"BuildCheck run times{Environment.NewLine}");
         string infraData = buildStatsTable("Infrastructure run times", _statsInfra);
         loggingContext.LogCommentFromText(MessageImportance.High, infraData);
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 2e6042880fe..0d163503de8 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -303,7 +303,7 @@ public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats()
             return _tracingReporter.TracingStats;
         }
 
-        public Dictionary<string, TimeSpan> CreateBuildCopInfraTracingStats()
+        public Dictionary<string, TimeSpan> CreateBuildCheckInfraTracingStats()
         {
             Dictionary<string, TimeSpan> infraTime = new Dictionary<string, TimeSpan>
             {
@@ -323,12 +323,12 @@ public void FinalizeProcessing(LoggingContext loggingContext)
                 return;
             }
 
-            BuildCopTracingEventArgs analyzerEventArg =
+            BuildCheckTracingEventArgs analyzerEventArg =
                 new(CreateAnalyzerTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
             loggingContext.LogBuildEvent(analyzerEventArg);
 
-            BuildCopTracingEventArgs infraEventStats =
-                new(CreateBuildCopInfraTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
+            BuildCheckTracingEventArgs infraEventStats =
+                new(CreateBuildCheckInfraTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
             loggingContext.LogBuildEvent(infraEventStats);
         }
 
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 4ce030e2eb3..36d6ed04813 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -36,7 +36,7 @@ void ProcessEvaluationFinishedEventArgs(
     void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData);
 
     Dictionary<string, TimeSpan> CreateAnalyzerTracingStats();
-    Dictionary<string, TimeSpan> CreateBuildCopInfraTracingStats();
+    Dictionary<string, TimeSpan> CreateBuildCheckInfraTracingStats();
 
     void FinalizeProcessing(LoggingContext loggingContext);
 
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 5faa98914a7..06c113938d8 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -47,5 +47,5 @@ public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventC
     { }
 
     public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => throw new NotImplementedException();
-    public Dictionary<string, TimeSpan> CreateBuildCopInfraTracingStats() => throw new NotImplementedException();
+    public Dictionary<string, TimeSpan> CreateBuildCheckInfraTracingStats() => throw new NotImplementedException();
 }
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index 30866dd1c2d..9bca28027f9 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1186,7 +1186,7 @@ public void InvalidToolsVersionErrors()
                                         lowPriority: false,
                                         question: false,
                                         isBuildCheckEnabled: false,
-                                        isBuildCheckEnabled: false,
+                                        areBuildCheckStatsEnabled: false,
                                         inputResultsCaches: null,
                                         outputResultsCache: null,
                                         saveProjectResult: false,
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 9608c3bc1ca..b6ecf972423 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2571,7 +2571,7 @@ private static bool ProcessCommandLineSwitches(
                                                            ref lowPriority,
                                                            ref question,
                                                            ref isBuildCheckEnabled,
-                                                           ref areBuildCheckStatsEnabled
+                                                           ref areBuildCheckStatsEnabled,
                                                            ref getProperty,
                                                            ref getItem,
                                                            ref getTargetResult,
@@ -2658,7 +2658,7 @@ ref areBuildCheckStatsEnabled
                     question = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Question);
 
                     isBuildCheckEnabled = IsBuildCheckEnabled(commandLineSwitches);
-                    areBuildCopStatsEnabled = AreBuildCheckStatsEnabled(commandLineSwitches);
+                    areBuildCheckStatsEnabled = AreBuildCheckStatsEnabled(commandLineSwitches);
 
                     inputResultsCaches = ProcessInputResultsCaches(commandLineSwitches);
 
@@ -2739,7 +2739,7 @@ private static bool IsBuildCheckEnabled(CommandLineSwitches commandLineSwitches)
             return isAnalysisEnabled;
         }
 
-        private static bool AreBuildCopStatsEnabled(CommandLineSwitches commandLineSwitches)
+        private static bool AreBuildCheckStatsEnabled(CommandLineSwitches commandLineSwitches)
         {
             return commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Analyze) &&
                 commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.AnalyzeStats);
