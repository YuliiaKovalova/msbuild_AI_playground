diff --git a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
index 6fa40a03d33..fa6883c1c34 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
@@ -32,6 +32,8 @@ public class AssemblyTaskFactory_Tests
         /// </summary>
         private AssemblyLoadInfo _loadInfo;
 
+        private Dictionary<string, string> _taskFactoryIdentityParameters = null;
+
         /// <summary>
         /// Initialize a task factory
         /// </summary>
@@ -51,7 +53,7 @@ public void NullLoadInfo()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 AssemblyTaskFactory taskFactory = new();
-                taskFactory.InitializeFactory(null, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
+                taskFactory.InitializeFactory(null, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, ref _taskFactoryIdentityParameters, false, null, ElementLocation.Create("NONE"), String.Empty);
             }
            );
         }
@@ -64,7 +66,7 @@ public void NullTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
-                taskFactory.InitializeFactory(_loadInfo, null, new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
+                taskFactory.InitializeFactory(_loadInfo, null, new Dictionary<string, TaskPropertyInfo>(), string.Empty, ref _taskFactoryIdentityParameters, false, null, ElementLocation.Create("NONE"), String.Empty);
             }
            );
         }
@@ -77,7 +79,7 @@ public void EmptyTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
-                taskFactory.InitializeFactory(_loadInfo, String.Empty, new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
+                taskFactory.InitializeFactory(_loadInfo, String.Empty, new Dictionary<string, TaskPropertyInfo>(), string.Empty, ref _taskFactoryIdentityParameters, false, null, ElementLocation.Create("NONE"), String.Empty);
             }
            );
         }
@@ -90,7 +92,7 @@ public void GoodTaskNameButNotInInfo()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 AssemblyTaskFactory taskFactory = new AssemblyTaskFactory();
-                taskFactory.InitializeFactory(_loadInfo, "RandomTask", new Dictionary<string, TaskPropertyInfo>(), string.Empty, null, false, null, ElementLocation.Create("NONE"), String.Empty);
+                taskFactory.InitializeFactory(_loadInfo, "RandomTask", new Dictionary<string, TaskPropertyInfo>(), string.Empty, ref _taskFactoryIdentityParameters, false, null, ElementLocation.Create("NONE"), String.Empty);
             }
            );
         }
@@ -175,7 +177,7 @@ public void CreatableByTaskFactoryNullTaskName()
         [Fact]
         public void CreatableByTaskFactoryMatchingIdentity()
         {
-            IDictionary<string, string> factoryIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+            Dictionary<string, string> factoryIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             factoryIdentityParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.currentRuntime);
             factoryIdentityParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.currentArchitecture);
 
@@ -195,7 +197,7 @@ public void CreatableByTaskFactoryMatchingIdentity()
         [Fact]
         public void CreatableByTaskFactoryMismatchedIdentity()
         {
-            IDictionary<string, string> factoryIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+            Dictionary<string, string> factoryIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             factoryIdentityParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.clr2);
             factoryIdentityParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.currentArchitecture);
 
@@ -337,7 +339,7 @@ public void VerifyMatchingUsingTaskParametersDontLaunchTaskHost1()
             ITask createdTask = null;
             try
             {
-                IDictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 taskParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.any);
                 taskParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.any);
 
@@ -370,7 +372,7 @@ public void VerifyMatchingUsingTaskParametersDontLaunchTaskHost2()
             ITask createdTask = null;
             try
             {
-                IDictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 taskParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.any);
                 taskParameters.Add(XMakeAttributes.architecture, XMakeAttributes.GetCurrentMSBuildArchitecture());
 
@@ -403,7 +405,7 @@ public void VerifyMatchingParametersDontLaunchTaskHost()
             ITask createdTask = null;
             try
             {
-                IDictionary<string, string> factoryParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, string> factoryParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 factoryParameters.Add(XMakeAttributes.runtime, XMakeAttributes.GetCurrentMSBuildRuntime());
 
                 SetupTaskFactory(factoryParameters, false /* don't want task host */);
@@ -439,7 +441,7 @@ public void VerifyNonmatchingUsingTaskParametersLaunchTaskHost()
             ITask createdTask = null;
             try
             {
-                IDictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 taskParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.clr2);
                 taskParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.any);
 
@@ -505,7 +507,7 @@ public void VerifyNonmatchingParametersLaunchTaskHost()
             ITask createdTask = null;
             try
             {
-                IDictionary<string, string> factoryParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, string> factoryParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 factoryParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.clr2);
 
                 SetupTaskFactory(factoryParameters, false /* don't want task host */);
@@ -570,7 +572,7 @@ public void VerifyExplicitlyLaunchTaskHostEvenIfParametersMatch1()
             ITask createdTask = null;
             try
             {
-                IDictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                Dictionary<string, string> taskParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 taskParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.any);
                 taskParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.any);
 
@@ -636,7 +638,7 @@ public void VerifyExplicitlyLaunchTaskHostEvenIfParametersMatch2()
         public void VerifySameFactoryCanGenerateDifferentTaskInstances()
         {
             ITask createdTask = null;
-            IDictionary<string, string> factoryParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+            Dictionary<string, string> factoryParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             factoryParameters.Add(XMakeAttributes.runtime, XMakeAttributes.MSBuildRuntimeValues.any);
             factoryParameters.Add(XMakeAttributes.architecture, XMakeAttributes.MSBuildArchitectureValues.any);
 
@@ -689,7 +691,7 @@ public void VerifySameFactoryCanGenerateDifferentTaskInstances()
         /// Abstract out the creation of the new AssemblyTaskFactory with default task, and 
         /// with some basic validation.
         /// </summary>
-        private void SetupTaskFactory(IDictionary<string, string> factoryParameters, bool explicitlyLaunchTaskHost)
+        private void SetupTaskFactory(Dictionary<string, string> factoryParameters, bool explicitlyLaunchTaskHost)
         {
             _taskFactory = new AssemblyTaskFactory();
 #if FEATURE_ASSEMBLY_LOCATION
@@ -697,7 +699,7 @@ private void SetupTaskFactory(IDictionary<string, string> factoryParameters, boo
 #else
             _loadInfo = AssemblyLoadInfo.Create(typeof(TaskToTestFactories).GetTypeInfo().Assembly.FullName, null);
 #endif
-            TypeInformation typeInfo = _taskFactory.InitializeFactory(_loadInfo, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, factoryParameters, explicitlyLaunchTaskHost, null, ElementLocation.Create("NONE"), String.Empty);
+            TypeInformation typeInfo = _taskFactory.InitializeFactory(_loadInfo, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, ref factoryParameters, explicitlyLaunchTaskHost, null, ElementLocation.Create("NONE"), String.Empty);
             typeInfo.LoadInfo.ShouldBe(_loadInfo, "Expected the AssemblyLoadInfo to be equal");
         }
 
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 2b53a52e836..081f0030206 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -272,7 +272,7 @@ internal TypeInformation InitializeFactory
                 string taskName,
                 IDictionary<string, TaskPropertyInfo> taskParameters,
                 string taskElementContents,
-                IDictionary<string, string> taskFactoryIdentityParameters,
+                ref Dictionary<string, string> taskFactoryIdentityParameters,
                 bool taskHostFactoryExplicitlyRequested,
                 TargetLoggingContext targetLoggingContext,
                 ElementLocation elementLocation,
@@ -297,7 +297,14 @@ string taskProjectFile
                 // If the user requested a task host but provided us with an assembly name rather than an assembly file, pretend they didn't.
                 // Finding the path to the assembly file the runtime would load without actually loading the assembly would likely be a bug farm.
                 // Also, this should be a very unusual case.
-                _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested && (loadInfo.AssemblyFile is not null || loadInfo.AssemblyName.StartsWith("Microsoft.Build")), out _taskHostFactoryExplicitlyRequested);
+                _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested && (loadInfo.AssemblyFile is not null || loadInfo.AssemblyName.StartsWith("Microsoft.Build")), out TypeLoader.TaskRuntimeInformation runtimeInformation);
+                _taskHostFactoryExplicitlyRequested = runtimeInformation.TaskHostNeeded;
+                if (runtimeInformation.Architecture is not null)
+                {
+                    taskFactoryIdentityParameters ??= new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                    taskFactoryIdentityParameters[XMakeAttributes.architecture] = runtimeInformation.Architecture;
+                    _factoryIdentityParameters = taskFactoryIdentityParameters;
+                }
 
                 // If the user specifically requests a code task factory, and the type wasn't already loaded, we need a way to verify that it really found a matching type. Properties is an array, so it should never be null,
                 // though it could be an empty array.
@@ -603,7 +610,7 @@ private static IDictionary<string, string> MergeTaskFactoryParameterSets(IDictio
 
                 if (!XMakeAttributes.TryMergeArchitectureValues(taskArchitecture, usingTaskArchitecture, out mergedArchitecture))
                 {
-                    ErrorUtilities.ThrowInternalError("How did we get two runtime values that were unmergeable?");
+                    ErrorUtilities.ThrowInternalError("How did we get two architecture values that were unmergeable?");
                 }
                 else
                 {
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 350a9cfa286..5851fe64c08 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -265,9 +265,7 @@ public bool Execute()
                 ErrorUtilities.VerifyThrowInternalNull(_taskHostProvider, "taskHostProvider");
             }
 
-            TaskHostConfiguration hostConfiguration =
-                new TaskHostConfiguration
-                    (
+            TaskHostConfiguration hostConfiguration = new(
                         _buildComponentHost.BuildParameters.NodeId,
                         NativeMethodsShared.GetCurrentDirectory(),
                         CommunicationsUtilities.GetEnvironmentVariables(),
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 45837ed3d9e..53e2516bd53 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -754,6 +754,7 @@ public string Name
             public IDictionary<string, string> TaskIdentityParameters
             {
                 get { return _taskIdentityParameters; }
+                internal set { _taskIdentityParameters = value; }
             }
 
             /// <summary>
@@ -1301,7 +1302,8 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
 
                         // Create an instance of the internal assembly task factory, it has the error handling built into its methods.
                         AssemblyTaskFactory taskFactory = new();
-                        typeInformation = taskFactory.InitializeFactory(taskFactoryLoadInfo, RegisteredName, ParameterGroupAndTaskBody.UsingTaskParameters, ParameterGroupAndTaskBody.InlineTaskXmlBody, TaskFactoryParameters, explicitlyLaunchTaskHost, targetLoggingContext, elementLocation, taskProjectFile);
+                        typeInformation = taskFactory.InitializeFactory(taskFactoryLoadInfo, RegisteredName, ParameterGroupAndTaskBody.UsingTaskParameters, ParameterGroupAndTaskBody.InlineTaskXmlBody, ref _taskFactoryParameters, explicitlyLaunchTaskHost, targetLoggingContext, elementLocation, taskProjectFile);
+                        _taskIdentity.TaskIdentityParameters = _taskFactoryParameters;
                         factory = taskFactory;
                     }
                     else
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 0ba0a534a42..a9e0d7de8ad 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -18,6 +18,7 @@
 using System.Runtime.Loader;
 #endif
 using System.Threading;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 
 #nullable disable
@@ -200,10 +201,10 @@ internal TypeInformation Load
             string typeName,
             AssemblyLoadInfo assembly,
             bool taskHostFactoryExplicitlyRequested,
-            out bool taskHostFactoryNeeded
+            out TaskRuntimeInformation runtimeInformation
         )
         {
-            return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, taskHostFactoryExplicitlyRequested, out taskHostFactoryNeeded);
+            return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, taskHostFactoryExplicitlyRequested, out runtimeInformation);
         }
 
         /// <summary>
@@ -231,7 +232,7 @@ private TypeInformation GetLoadedType(
             string typeName,
             AssemblyLoadInfo assembly,
             bool taskHostFactoryExplicitlyRequested,
-            out bool taskHostFactoryNeeded)
+            out TaskRuntimeInformation runtimeInformation)
         {
             // A given type filter have been used on a number of assemblies, Based on the type filter we will get another dictionary which 
             // will map a specific AssemblyLoadInfo to a AssemblyInfoToLoadedTypes class which knows how to find a typeName in a given assembly.
@@ -242,7 +243,7 @@ private TypeInformation GetLoadedType(
             AssemblyInfoToLoadedTypes typeNameToType =
                 loadInfoToType.GetOrAdd(assembly, (_) => new AssemblyInfoToLoadedTypes(_isDesiredType, _));
 
-            return typeNameToType.GetLoadedTypeByTypeName(typeName, taskHostFactoryExplicitlyRequested, out taskHostFactoryNeeded);
+            return typeNameToType.GetLoadedTypeByTypeName(typeName, taskHostFactoryExplicitlyRequested, out runtimeInformation);
         }
 
         /// <summary>
@@ -315,20 +316,24 @@ internal AssemblyInfoToLoadedTypes(Func<Type, object, bool> typeFilter, Assembly
             /// <summary>
             /// Determine if a given type name is in the assembly or not. Return null if the type is not in the assembly
             /// </summary>
-            internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostFactoryExplicitlyRequested, out bool taskHostFactoryNeeded)
+            internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostFactoryExplicitlyRequested, out TaskRuntimeInformation runtimeInformation)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));
 
-                taskHostFactoryNeeded = taskHostFactoryExplicitlyRequested;
-                if (!taskHostFactoryNeeded && _assemblyLoadInfo.AssemblyFile is not null)
+                runtimeInformation = new() { TaskHostNeeded = taskHostFactoryExplicitlyRequested };
+                if (!taskHostFactoryExplicitlyRequested && _assemblyLoadInfo.AssemblyFile is not null)
                 {
                     ProcessorArchitecture taskArch = AssemblyName.GetAssemblyName(_assemblyLoadInfo.AssemblyFile).ProcessorArchitecture;
                     bool msbuildIs64Bit = RuntimeInformation.ProcessArchitecture == Architecture.X64;
-                    taskHostFactoryNeeded = msbuildIs64Bit ? Required32Bit(taskArch) : Required64Bit(taskArch);
+                    runtimeInformation.TaskHostNeeded = msbuildIs64Bit ? Required32Bit(taskArch) : Required64Bit(taskArch);
+                    if (runtimeInformation.TaskHostNeeded)
+                    {
+                        runtimeInformation.Architecture = msbuildIs64Bit ? "x86" : "x64";
+                    }
                 }
 
                 // Only one thread should be doing operations on this instance of the object at a time.
-                TypeInformation typeInfo = taskHostFactoryNeeded ?
+                TypeInformation typeInfo = runtimeInformation.TaskHostNeeded ?
                     _typeNameToTypeInformationTaskHost.GetOrAdd(typeName, key => FindTypeInformationUsingSystemReflectionMetadata(typeName)) :
                     _typeNameToTypeInformation.GetOrAdd(typeName, key => FindTypeInformationUsingLoadedType(typeName)
                     );
@@ -753,5 +758,11 @@ public string GetTypeFromSpecification(MetadataReader reader, object genericCont
                 return new SignatureDecoder<string, object>(Instance, reader, genericContext).DecodeType(ref sigReader);
             }
         }
+
+        internal struct TaskRuntimeInformation
+        {
+            public string Architecture;
+            public bool TaskHostNeeded;
+        }
     }
 }
