diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 75827457e7f..4b3f4a37ecd 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -563,6 +563,35 @@ public void DoesNotRunOnRestore(bool buildInOutOfProcessNode)
         output.ShouldNotContain("BC0103");
     }
 
+#if NET
+    [Fact]
+    public void TestBuildCheckTemplate()
+    {
+        TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
+        var nugetTemplateName = "nugetTemplate.config";
+        var nugetTemplatePath = Path.Combine(TestAssetsRootPath, "CheckCandidate", nugetTemplateName);
+        File.Copy(nugetTemplatePath, Path.Combine(workFolder.Path, nugetTemplateName));
+        AddCustomDataSourceToNugetConfig(workFolder.Path);
+
+        var ExecuteDotnetCommand = (string parameters) =>
+        {
+            string output = RunnerUtilities.RunProcessAndGetOutput("dotnet", parameters, out bool success);
+            return output;
+        };
+
+        var buildCheckTemplatePath = Path.Combine(BuildCheckUnitTestsConstants.RepoRoot, "template_feed", "content", "Microsoft.CheckTemplate");
+        var templateShortName = "msbuildcheck";
+        var projectName = "BuildCheck";
+        var installLog = ExecuteDotnetCommand($"new install {buildCheckTemplatePath}");
+        installLog.ShouldContain($"Success: {buildCheckTemplatePath} installed the following templates:");
+        var creationLog = ExecuteDotnetCommand($"new {templateShortName} -n {projectName} --MicrosoftBuildVersion {BuildCheckUnitTestsConstants.MicrosoftBuildPackageVersion} -o {workFolder.Path} ");
+        creationLog.ShouldContain("The template \"MSBuild custom check skeleton project.\" was created successfully.");
+        var buildLog = ExecuteDotnetCommand($"build {workFolder.Path}");
+        buildLog.ShouldContain("Build succeeded.");
+        ExecuteDotnetCommand($"new -u {buildCheckTemplatePath}");
+    }
+#endif
+
     private void AddCustomDataSourceToNugetConfig(string checkCandidatePath)
     {
         var nugetTemplatePath = Path.Combine(checkCandidatePath, "nugetTemplate.config");
diff --git a/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj b/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
index 27bf2a1542b..b9ff4f5458b 100644
--- a/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
+++ b/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
@@ -46,4 +46,27 @@
     </None>
   </ItemGroup>
 
+  <Target Name="AddGeneratedFile" BeforeTargets="BeforeCompile;CoreCompile" Inputs="$(MSBuildAllProjects)" Outputs="$(IntermediateOutputPath)BuildCheckUnitTestsConstants.cs">
+    <PropertyGroup>
+      <GeneratedText>
+      <![CDATA[
+namespace Microsoft.Build.BuildCheck.UnitTests
+{
+    internal sealed class BuildCheckUnitTestsConstants
+    {
+        public const string MicrosoftBuildPackageVersion = @"$(Version)"%3B
+        public const string RepoRoot = @"$(RepoRoot)"%3B
+    }
+}
+      ]]>
+      </GeneratedText>
+      <GeneratedFilePath>$(IntermediateOutputPath)BuildCheckUnitTestsConstants.cs</GeneratedFilePath>
+    </PropertyGroup>
+    <ItemGroup>
+      <Compile Include="$(GeneratedFilePath)" />
+      <FileWrites Include="$(GeneratedFilePath)" />
+    </ItemGroup>
+    <WriteLinesToFile Lines="$(GeneratedText)" File="$(GeneratedFilePath)" WriteOnlyWhenDifferent="true" Overwrite="true" />
+  </Target>
+
 </Project>
