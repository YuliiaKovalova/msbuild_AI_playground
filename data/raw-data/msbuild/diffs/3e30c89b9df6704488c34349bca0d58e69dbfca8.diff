diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index db2d9eab3ad..c16a210b227 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -35,6 +35,19 @@ public void TreatAllWarningsAsErrors()
             ObjectModelHelpers.BuildProjectExpectSuccess(GetTestProject(treatAllWarningsAsErrors: false));
         }
 
+        [Fact]
+        public void TreatAllWarningsAsErrorsNoPrefix()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(GetTestProject(customProperties: new Dictionary<string, string>
+            {
+                {"TreatWarningsAsErrors", "true"},
+            }));
+
+            VerifyBuildErrorEvent(logger);
+
+            ObjectModelHelpers.BuildProjectExpectSuccess(GetTestProject(treatAllWarningsAsErrors: false));
+        }
+
         /// <summary>
         /// https://github.com/dotnet/msbuild/issues/2667
         /// </summary>
@@ -91,22 +104,6 @@ public void TreatWarningsAsErrorsWhenSpecifiedIndirectly()
             VerifyBuildErrorEvent(logger);
         }
 
-        [Fact]
-        public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditiveProperty()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(
-                GetTestProject(
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", "123"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", $@"$(MSBuildWarningsAsErrors);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", "$(MSBuildWarningsAsErrors);ABC")
-                    }));
-
-            VerifyBuildErrorEvent(logger);
-        }
-
         [Fact]
         public void NotTreatWarningsAsErrorsWhenCodeNotSpecified()
         {
@@ -193,6 +190,125 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()
             VerifyBuildMessageEvent(logger);
         }
 
+
+        [Fact]
+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
+                GetTestProject(
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("WarningsAsMessages", "123"),
+                        new KeyValuePair<string, string>("WarningsAsMessages", $@"$(WarningsAsMessages);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("WarningsAsMessages", "$(WarningsAsMessages);ABC")
+                    }));
+
+            VerifyBuildMessageEvent(logger);
+        }
+
+        [Fact]
+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyCombination()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
+                GetTestProject(
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "123"),
+                        new KeyValuePair<string, string>("WarningsAsMessages", $@"$(BuildWarningsAsMessages);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(BuildWarningsAsMessages);ABC")
+                    }));
+
+            VerifyBuildMessageEvent(logger);
+        }
+
+        [Fact]
+        public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyx()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
+                GetTestProject(
+                    treatAllWarningsAsErrors: true,
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "123"),
+                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", $@"$(MSBuildWarningsNotAsErrors);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "$(MSBuildWarningsNotAsErrors);ABC")
+                    }));
+
+            VerifyBuildWarningEvent(logger);
+        }
+
+        [Fact]
+        public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyNoPrefix()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
+                GetTestProject(
+                    treatAllWarningsAsErrors: true,
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("WarningsNotAsErrors", "123"),
+                        new KeyValuePair<string, string>("WarningsNotAsErrors", $@"$(WarningsNotAsErrors);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("WarningsNotAsErrors", "$(WarningsNotAsErrors);ABC")
+                    }));
+
+            VerifyBuildWarningEvent(logger);
+        }
+
+        [Fact]
+        public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyCombination()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
+                GetTestProject(
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "123"),
+                        new KeyValuePair<string, string>("WarningsNotAsErrors", $@"$(MSBuildWarningsNotAsErrors);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "$(WarningsNotAsErrors);ABC")
+                    }));
+
+            VerifyBuildWarningEvent(logger);
+        }
+
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditiveProperty(bool MSBuildPrefix)
+        {
+            string prefix = MSBuildPrefix ? "MSBuild" : "";
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(
+                GetTestProject(
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>($@"{prefix}WarningsAsErrors", "123"),
+                        new KeyValuePair<string, string>($@"{prefix}WarningsAsErrors", $@"$({prefix}WarningsAsErrors);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>($@"{prefix}WarningsAsErrors", $@"$({prefix}WarningsAsErrors);ABC")
+                    }));
+
+            VerifyBuildErrorEvent(logger);
+        }
+
+
+        [Fact]
+        public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditivePropertyCombination()
+        {
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectFailure(
+                GetTestProject(
+                    customProperties: new List<KeyValuePair<string, string>>
+                    {
+                        new KeyValuePair<string, string>("WarningsAsErrors", "123"),
+                        new KeyValuePair<string, string>("MSBuildWarningsAsErrors", $@"$(WarningsAsErrors);
+                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
+                        new KeyValuePair<string, string>("WarningsAsErrors", "$(MSBuildWarningsAsErrors);ABC")
+                    }));
+
+            VerifyBuildErrorEvent(logger);
+        }
+
         [Fact]
         public void NotTreatWarningsAsMessagesWhenCodeNotSpecified()
         {
@@ -273,27 +389,33 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn
             </Project>";
         }
 
+
         [Theory]
 
         [InlineData("MSB1235", "MSB1234", "MSB1234", "MSB1234", false)] // Log MSB1234, treat as error via MSBuildWarningsAsErrors
         [InlineData("MSB1235", "", "MSB1234", "MSB1234", true)] // Log MSB1234, expect MSB1234 as error via MSBuildTreatWarningsAsErrors
         [InlineData("MSB1234", "MSB1234", "MSB1234", "MSB4181", true)]// Log MSB1234, MSBuildWarningsAsMessages takes priority
+        [InlineData("MSB1235", "MSB1234", "MSB1234", "MSB1234", false, false)] // Log MSB1234, treat as error via BuildWarningsAsErrors
+        [InlineData("MSB1235", "", "MSB1234", "MSB1234", true, false)] // Log MSB1234, expect MSB1234 as error via BuildTreatWarningsAsErrors
+        [InlineData("MSB1234", "MSB1234", "MSB1234", "MSB4181", true, false)]// Log MSB1234, BuildWarningsAsMessages takes priority
         public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,
                                                       string WarningsAsErrors,
                                                       string WarningToLog,
                                                       string LogShouldContain,
-                                                      bool allWarningsAreErrors = false)
+                                                      bool allWarningsAreErrors = false,
+                                                      bool useMSPrefix = true)
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
+                var prefix = useMSPrefix ? "MSBuild" : "";
                 TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
                 <Project>
                     <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <PropertyGroup>
-                        <MSBuildTreatWarningsAsErrors>{allWarningsAreErrors}</MSBuildTreatWarningsAsErrors>
-                        <MSBuildWarningsAsMessages>{WarningsAsMessages}</MSBuildWarningsAsMessages>
-                        <MSBuildWarningsAsErrors>{WarningsAsErrors}</MSBuildWarningsAsErrors>
+                        <{prefix}TreatWarningsAsErrors>{allWarningsAreErrors}</{prefix}TreatWarningsAsErrors>
+                        <{prefix}WarningsAsMessages>{WarningsAsMessages}</{prefix}WarningsAsMessages>
+                        <{prefix}WarningsAsErrors>{WarningsAsErrors}</{prefix}WarningsAsErrors>
                     </PropertyGroup>
                     <Target Name='Build'>
                         <CustomLogAndReturnTask Return=""true"" ReturnHasLoggedErrors=""true"" WarningCode=""{WarningToLog}""/>
@@ -310,6 +432,36 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,
             }
         }
 
+        [Theory]
+
+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority
+        [InlineData(false)]
+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)
+        {
+            string Warning = "MSB1235";
+            using (TestEnvironment env = TestEnvironment.Create(_output))
+            {
+                string prefix = useMSPrefix ? "MSBuild" : "";
+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
+                <Project>
+                    <PropertyGroup>
+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>
+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>
+                    </PropertyGroup>
+                    <Target Name='Build'>
+                        <Warning Text=""some random text"" Code='{Warning}' />
+                    </Target>
+                </Project>");
+
+                MockLogger logger = proj.BuildProjectExpectSuccess();
+
+                logger.WarningCount.ShouldBe(1);
+                logger.ErrorCount.ShouldBe(0);
+
+                logger.AssertLogContains(Warning);
+            }
+        }
+
         /// <summary>
         /// Item1 and Item2 log warnings and continue, item 3 logs a warn-> error and prevents item 4 from running in the batched build.
         /// </summary>
@@ -371,8 +523,11 @@ public void TaskLogsWarningAsError_BatchedBuild()
         [Theory]
         [InlineData("MSB1234", false, 1, 1)]
         [InlineData("MSB0000", true, 0, 2)]
-        public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarningsAsErrors, int warningCountShouldBe, int errorCountShouldBe)
+        [InlineData("MSB1234", false, 1, 1, false)]
+        [InlineData("MSB0000", true, 0, 2, false)]
+        public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarningsAsErrors, int warningCountShouldBe, int errorCountShouldBe, bool useMSPrefix = true)
         {
+            string prefix = useMSPrefix ? "MSBuild" : "";
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
                 TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
@@ -380,8 +535,8 @@ public void TaskReturnsTrue_Tests(string warningsAsErrors, bool treatAllWarnings
                     <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <PropertyGroup>
-                        <MSBuildTreatWarningsAsErrors>{treatAllWarningsAsErrors}</MSBuildTreatWarningsAsErrors>
-                        <MSBuildWarningsAsErrors>{warningsAsErrors}</MSBuildWarningsAsErrors>
+                        <{prefix}TreatWarningsAsErrors>{treatAllWarningsAsErrors}</{prefix}TreatWarningsAsErrors>
+                        <{prefix}WarningsAsErrors>{warningsAsErrors}</{prefix}WarningsAsErrors>
                     </PropertyGroup>
                     <Target Name='Build'>
                         <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index b1c05600fae..d1667b5184d 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1390,7 +1390,8 @@ private void ConfigureWarningsAsErrorsAndMessages()
             // Ensure everything that is required is available at this time
             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
-                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase))
+                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase) ||
+                    String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrorsNoPrefix)?.Trim(), "true", StringComparison.OrdinalIgnoreCase))
                 {
                     // If <MSBuildTreatWarningsAsErrors was specified then an empty ISet<string> signals the IEventSourceSink to treat all warnings as errors
                     loggingService.AddWarningsAsErrors(buildEventContext, new HashSet<string>());
@@ -1398,6 +1399,20 @@ private void ConfigureWarningsAsErrorsAndMessages()
                 else
                 {
                     ISet<string> warningsAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrors));
+                    var warningsAsErrorsNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrorsNoPrefix));
+                    if (warningsAsErrorsNoPrefix != null)
+                    {
+                        if (warningsAsErrors != null)
+                        {
+                            warningsAsErrors.UnionWith(warningsAsErrorsNoPrefix);
+                        }
+                        else
+                        {
+                            warningsAsErrors = warningsAsErrorsNoPrefix;
+                        }
+                    }
+
+
 
                     if (warningsAsErrors?.Count > 0)
                     {
@@ -1406,6 +1421,20 @@ private void ConfigureWarningsAsErrorsAndMessages()
                 }
 
                 ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrors));
+                var warningsNotAsErrorsNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrorsNoPrefix));
+                if (warningsNotAsErrorsNoPrefix != null)
+                {
+                    if (warningsNotAsErrors != null)
+                    {
+                        warningsNotAsErrors.UnionWith(warningsNotAsErrorsNoPrefix);
+                    }
+                    else
+                    {
+                        warningsNotAsErrors = warningsNotAsErrorsNoPrefix;
+                    }
+                }
+
+
 
                 if (warningsNotAsErrors?.Count > 0)
                 {
@@ -1413,6 +1442,12 @@ private void ConfigureWarningsAsErrorsAndMessages()
                 }
 
                 ISet<string> warningsAsMessages = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessages));
+                var warningsAsMessagesNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessagesNoPrefix));
+                if (warningsAsMessagesNoPrefix != null)
+                {
+                    warningsAsMessages?.UnionWith(warningsAsMessagesNoPrefix);
+                    warningsAsMessages ??= warningsAsMessagesNoPrefix;
+                }
 
                 if (warningsAsMessages?.Count > 0)
                 {
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 1139c492224..c5e104056b0 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -33,21 +33,42 @@ internal static class MSBuildConstants
         /// </summary>
         internal const string TreatWarningsAsErrors = "MSBuildTreatWarningsAsErrors";
 
+        /// <summary>
+        /// Name of the property that indicates that all warnings should be treated as errors.
+        /// </summary>
+        internal const string TreatWarningsAsErrorsNoPrefix = "TreatWarningsAsErrors";
+
         /// <summary>
         /// Name of the property that indicates a list of warnings to treat as errors.
         /// </summary>
         internal const string WarningsAsErrors = "MSBuildWarningsAsErrors";
 
+        /// <summary>
+        /// Name of the property that indicates a list of warnings to treat as errors.
+        /// </summary>
+        internal const string WarningsAsErrorsNoPrefix = "WarningsAsErrors";
+
         /// <summary>
         /// Name of the property that indicates a list of warnings to not treat as errors.
         /// </summary>
         internal const string WarningsNotAsErrors = "MSBuildWarningsNotAsErrors";
 
+        /// <summary>
+        /// Name of the property that indicates a list of warnings to not treat as errors.
+        /// </summary>
+        internal const string WarningsNotAsErrorsNoPrefix = "WarningsNotAsErrors";
+
         /// <summary>
         /// Name of the property that indicates the list of warnings to treat as messages.
         /// </summary>
         internal const string WarningsAsMessages = "MSBuildWarningsAsMessages";
 
+
+        /// <summary>
+        /// Name of the property that indicates the list of warnings to treat as messages.
+        /// </summary>
+        internal const string WarningsAsMessagesNoPrefix = "WarningsAsMessages";
+
         /// <summary>
         /// The name of the environment variable that users can specify to override where NuGet assemblies are loaded from in the NuGetSdkResolver.
         /// </summary>
