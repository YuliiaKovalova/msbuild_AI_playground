diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index c77e44f8d7b..6d2e70800de 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -17,6 +17,7 @@ public static string ANSIRemove(string text)
         {
             return Regex.Replace(text, "\\x1b(?:[@-Z\\-_]|\\[[0-?]*[ -\\/]*[@-~])", "");
         }
+
         public static class Alignment
         {
             public static string Center(string text)
@@ -30,6 +31,7 @@ public static string Center(string text)
                 result += new string(' ', space);
                 return result;
             }
+
             public static string Right(string text)
             {
                 string result = String.Empty;
@@ -40,6 +42,7 @@ public static string Right(string text)
                 result += text;
                 return result;
             }
+
             public static string Left(string text)
             {
                 string result = String.Empty;
@@ -50,6 +53,7 @@ public static string Left(string text)
                 result += new string(' ', space);
                 return result;
             }
+
             public static string SpaceBetween(string leftText, string rightText, int width)
             {
                 string result = String.Empty;
@@ -62,7 +66,9 @@ public static string SpaceBetween(string leftText, string rightText, int width)
                 result += rightText;
                 return result;
             }
+
         }
+
         public static class Formatting
         {
             public enum ForegroundColor
@@ -77,6 +83,7 @@ public enum ForegroundColor
                 White = 37,
                 Default = 39
             };
+
             public enum BackgroundColor
             {
                 Black = 40,
@@ -89,73 +96,85 @@ public enum BackgroundColor
                 White = 47,
                 Default = 49
             }
+
             public static string Color(string text, ForegroundColor color)
             {
                 return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
             }
+
             public static string Color(string text, BackgroundColor color)
             {
                 return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
             }
+
             public static string Color(string text, BackgroundColor backgrdoundColor, ForegroundColor foregroundColor)
             {
                 return String.Format("\x1b[{0};{1}m{2}\x1b[0m", (int)backgrdoundColor, (int)foregroundColor, text);
             }
+
             public static string Bold(string text)
             {
                 return String.Format("\x1b[1m{0}\x1b[22m", text);
             }
+
             public static string Dim(string text)
             {
                 return String.Format("\x1b[2m{0}\x1b[22m", text);
             }
+
             public static string Italic(string text)
             {
                 return String.Format("\x1b[3m{0}\x1b[23m", text);
             }
+
             public static string Underlined(string text)
             {
                 return String.Format("\x1b[4m{0}\x1b[24m", text);
             }
+
             public static string DoubleUnderlined(string text)
             {
                 return String.Format("\x1b[21m{0}\x1b[24m", text);
             }
+
             public static string Blinking(string text)
             {
                 return String.Format("\x1b[5m{0}\x1b[25m", text);
             }
+
             public static string Inverse(string text)
             {
                 return String.Format("\x1b[7m{0}\x1b[27m", text);
             }
+
             public static string Invisible(string text)
             {
                 return String.Format("\x1b[8m{0}\x1b[28m", text);
             }
+
             public static string CrossedOut(string text)
             {
                 return String.Format("\x1b[9m{0}\x1b[29m", text);
             }
+
             public static string Overlined(string text)
             {
                 return String.Format("\x1b[53m{0}\x1b[55m", text);
             }
-            // TODO: Review
-            // TODO: Test outside of Windows Terminal (eg, terminal.app)
+
+            // TODO: Right now only replaces \ with /. Needs review to make sure it works on all or most terminal emulators.
             public static string Hyperlink(string text, string url)
             {
                 // return String.Format("\x1b[]8;;{0}\x1b\\{1}\x1b[]8;\x1b\\", text, url);
-                // return $"\x1b[]8;;{url}\x1b[\\{text}\x1b[]8;;\x1b[\\";
                 return url.Replace("\\", "/");
             }
+
             public static string DECLineDrawing(string text)
             {
                 return String.Format("\x1b(0{0}\x1b(B", text);
             }
         }
 
-
         public static class Cursor
         {
             public enum CursorStyle
@@ -178,6 +197,7 @@ public static string Up(int n = 1)
             {
                 return String.Format("\x1b[{0}A", n);
             }
+
             public static string UpAndScroll(int n)
             {
                 string result = "";
@@ -186,30 +206,37 @@ public static string UpAndScroll(int n)
                 }
                 return result;
             }
+
             public static string Down(int n = 1)
             {
                 return String.Format("\x1b[{0}B", n);
             }
+
             public static string Forward(int n = 1)
             {
                 return String.Format("\x1b[{0}C", n);
             }
+
             public static string Backward(int n = 1)
             {
                 return String.Format("\x1b[{0}D", n);
             }
+
             public static string Home()
             {
                 return String.Format("\x1b[H");
             }
+
             public static string Position(int row, int column)
             {
                 return String.Format("\x1b[{0};{1}H", row, column);
             }
+
             public static string SavePosition()
             {
                 return String.Format("\x1b[s");
             }
+
             public static string RestorePosition() {
                 return String.Format("\x1b[u");
             }
@@ -221,19 +248,23 @@ public static string SetStop()
             {
                 return String.Format("\x1bH");
             }
+
             public static string ForwardTab(int n)
             {
                 if (n == 0) return "";
                 return String.Format("\x1b[{0}I", n);
             }
+
             public static string BackwardTab(int n)
             {
                 return String.Format("\x1b[{0}Z", n);
             }
+
             public static string UnsetStop()
             {
                 return String.Format("\x1b[0g");
             }
+
             public static string UnserAlStops()
             {
                 return String.Format("\x1b[3g");
@@ -246,18 +277,22 @@ public static string ScrollDown(int n)
             {
                 return String.Format("\x1b[{0}T", n);
             }
+
             public static string ScrollUp(int n)
             {
                 return String.Format("\x1b[{0}S", n);
             }
+
             public static string SetScrollingRegion(int start, int end)
             {
                 return String.Format("\x1b[{0};{1}r", start, end);
             }
+
             public static string PrependLines(int n)
             {
                 return String.Format("\x1b[{0}L", n);
             }
+
             public static string DeleteLines(int n)
             {
                 return String.Format("\x1b[{0}M", n);
@@ -270,22 +305,27 @@ public static string DisplayCursorToEnd()
             {
                 return String.Format("\x1b[0J");
             }
+
             public static string DisplayStartToCursor()
             {
                 return String.Format("\x1b[1J");
             }
+
             public static string Display()
             {
                 return String.Format("\x1b[2J");
             }
+
             public static string LineCursorToEnd()
             {
                 return String.Format("\x1b[0K");
             }
+
             public static string LineStartToCursor()
             {
                 return String.Format("\x1b[1K");
             }
+
             public static string Line()
             {
                 return String.Format("\x1b[2k");
@@ -299,14 +339,16 @@ public static string Spinner()
             {
                 return Spinner(spinnerCounter++);
             }
+
             public static string Spinner(int n)
             {
                 char[] chars = { '\\', '|', '/', '-'};
                 return chars[n % (chars.Length - 1)].ToString();
             }
+
             public static string ProgressBar(float percentage, int width = 10, char completedChar = '█', char remainingChar = '░')
             {
-                string result = "";
+                string result = String.Empty;
                 for (int i = 0; i < (int)Math.Floor(width * percentage); i++)
                 {
                     result += completedChar;
@@ -317,6 +359,7 @@ public static string ProgressBar(float percentage, int width = 10, char complete
                 }
                 return result;
             }
+
             public static string Bell()
             {
                 return String.Format("\x07");
@@ -329,10 +372,12 @@ public static string Fill()
             {
                 return String.Format("\x1b#8");
             }
+
             public static string UseAlternateBuffer()
             {
                 return "\x1b[?1049h";
             }
+
             public static string UseMainBuffer()
             {
                 return "\x1b[?1049l";
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 4032abea06f..55774bb54f1 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -21,7 +21,6 @@ public string GetUnambiguousPath(string path)
             return Path.GetFileName(path);
         }
 
-
         public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);
 
         public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
@@ -85,16 +84,12 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             );
 
             projectConsoleLines.Add(id, line);
-            Thread.Sleep(400);
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            // If id does not exist
-            if (!projectConsoleLines.ContainsKey(id)) return;
-            // Get line id
-            FancyLoggerBufferLine line = projectConsoleLines[id];
+            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine line)) return;
             // Update line
             FancyLoggerBuffer.UpdateLine(line.Id,
                 ANSIBuilder.Alignment.SpaceBetween(
@@ -103,15 +98,6 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
                     Console.WindowWidth
                 )
             );
-            /*// TODO
-            int id = e.BuildEventContext!.ProjectInstanceId;
-            var line = projectConsoleLines[id];
-            FancyLoggerBuffer.UpdateLine(line.Id, ""
-                + "D"
-                + " "
-                + ANSIBuilder.Formatting.Dim("Project - ")
-                + GetUnambiguousPath(e.ProjectFile)
-            );*/
         }
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
@@ -137,13 +123,11 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         }
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
-            // Console.WriteLine("Warning raised");
-            FancyLoggerBuffer.WriteNewLine("Warning!");
+            FancyLoggerBuffer.WriteNewLine("Warning");
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // TODO: Try to redirect to stderr
-            // Console.WriteLine("Error raised");
             FancyLoggerBuffer.WriteNewLine("Error");
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 718fb6ca1cb..4989f70ed9d 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -95,7 +95,7 @@ public static void Initialize()
             AutoScrollEnabled = true;
             // Render contents
             WriteTitleBar();
-            WriteFooter("This is an empty footer haha");
+            WriteFooter("~~~~~~~~~~~~~~~~~~~~~~~~~~~");
             ScrollToEnd();
         }
         public static void Terminate()
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index 34ae9b7311a..b3021f042eb 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -147,47 +147,5 @@ public void Expand()
                 child.Value.Expand();
             }
         }
-
-        /*public void Collapse(bool isRoot)
-        {
-            // Children
-            foreach (var child in Children)
-            {
-                child.Value.Collapse(false);
-            }
-            // Self
-            if (!isRoot) Line?.Hide();
-        }
-
-        public void Expand(bool isRoot)
-        {
-            foreach (var child in Children)
-            {
-                child.Value.Expand(false);
-            }
-            if (isRoot) return;
-        }
-        public int GetRootLineId()
-        {
-            if (Line == null) return -1;
-            return FancyLoggerBuffer.GetLineIndexById(Line.Id);
-        }
-        public int GetLastLineId()
-        {
-            if (Line == null) return -1;
-            if (Children.Count == 0) return FancyLoggerBuffer.GetLineIndexById(Line.Id);
-            int lastLineId = -1;
-            int lastLineIndex = -1;
-            foreach (var child in Children)
-            {
-                int lineIndex = child.Value.GetLastLineId();
-                if (lineIndex > lastLineIndex)
-                {
-                    lastLineIndex = lineIndex;
-                    lastLineId = Line.Id;
-                }
-            }
-            return lastLineId;
-        }*/
     }
 }
