diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index e1e53cbb1f5..c663ca99fac 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -438,6 +438,29 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st
         // list of recognized switch parameter separators -- for switches that take multiple parameters
         private static readonly char[] s_parameterSeparators = { ',', ';' };
 
+        /// <summary>
+        /// Called when a recognized switch that takes parameters is detected on the command line,
+        /// but an invalid switch of the same kind was detected first. Here we pretend the first
+        /// switch didn't exist and override it.
+        /// </summary>
+        /// <param name="parameterizedSwitch"></param>
+        /// <param name="switchParameters"></param>
+        /// <param name="multipleParametersAllowed"></param>
+        /// <param name="unquoteParameters"></param>
+        /// <returns>true, if the given parameters were successfully stored</returns>
+        internal bool OverrideParameterizedSwitch(
+            ParameterizedSwitch parameterizedSwitch,
+            string commandLineArg,
+            string switchParameters,
+            bool multipleParametersAllowed,
+            bool unquoteParameters,
+            bool emptyParametersAllowed
+            )
+        {
+            _parameterizedSwitches[(int)parameterizedSwitch].commandLineArg = null;
+            return SetParameterizedSwitch(parameterizedSwitch, commandLineArg, switchParameters, multipleParametersAllowed, unquoteParameters, emptyParametersAllowed);
+        }
+
         /// <summary>
         /// Called when a recognized switch that takes parameters is detected on the command line.
         /// </summary>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index ae95d608193..5320f02f918 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2008,6 +2008,27 @@ bool allowEmptyParameters
                         }
                     }
                 }
+                else if (parameterizedSwitch == CommandLineSwitches.ParameterizedSwitch.Project && switchParameters.Length > 0 &&
+                    (IsEnvironmentVariable(commandLineSwitches.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.Project)) ||
+                    IsEnvironmentVariable(switchParameters.Substring(1))))
+                {
+                    if (IsEnvironmentVariable(commandLineSwitches.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.Project)))
+                    {
+                        if (switchParameters.Length > 0)
+                        {
+                            switchParameters = switchParameters.Substring(1);
+                        }
+
+                        if (!commandLineSwitches.OverrideParameterizedSwitch(parameterizedSwitch, unquotedCommandLineArg, switchParameters, multipleParametersAllowed, unquoteParameters, allowEmptyParameters))
+                        {
+                            // if parsing revealed there were no real parameters, flag an error, unless the parameters are optional
+                            if (missingParametersErrorMessage != null)
+                            {
+                                commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg);
+                            }
+                        }
+                    }
+                }
                 else
                 {
                     commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg);
@@ -2019,6 +2040,11 @@ bool allowEmptyParameters
             }
         }
 
+        private static bool IsEnvironmentVariable(string s)
+        {
+            return s.StartsWith("$") || (s.StartsWith("%") && s.EndsWith("%") && s.Length > 1);
+        }
+
         /// <summary>
         /// The name of the auto-response file.
         /// </summary>
