diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index 31223745d8b..9a4a3f7bd58 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -12,14 +12,14 @@
 namespace Microsoft.Build.BackEnd.Components.Logging
 {
     /// <summary>
-    ///     Logging context and helpers for evaluation logging
+    ///     Logging context and helpers for evaluation logging.
     /// </summary>
     internal class EvaluationLoggingContext : LoggingContext
     {
         private readonly string _projectFile;
 
-        public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContext buildEventContext, string projectFile) :
-            base(
+        public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContext buildEventContext, string projectFile)
+            : base(
                 loggingService,
                 loggingService.CreateEvaluationBuildEventContext(buildEventContext.NodeId, buildEventContext.SubmissionId))
         {
diff --git a/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs b/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
index c71d69d115c..74a8bf6a1ce 100644
--- a/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
+++ b/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
@@ -12,15 +12,15 @@ namespace Microsoft.Build.BuildCheck.Acquisition;
 
 // TODO: Acquisition
 //  define the data that will be passed to the acquisition module (and remoted if needed)
-internal class AnalyzerAcquisitionData(string data)
+internal class AnalyzerAcquisitionData(string assemblyPath)
 {
-    public string Data { get; init; } = data;
+    public string AssemblyPath { get; init; } = assemblyPath;
 }
 
 internal static class AnalyzerAcquisitionDataExtensions
 {
     public static AnalyzerAcquisitionData ToAnalyzerAcquisitionData(this BuildCheckAcquisitionEventArgs eventArgs) =>
-        new(eventArgs.AcquisitionData);
+        new(eventArgs.AcquisitionPath);
 
-    public static BuildCheckAcquisitionEventArgs ToBuildEventArgs(this AnalyzerAcquisitionData data) => new(data.Data);
+    public static BuildCheckAcquisitionEventArgs ToBuildEventArgs(this AnalyzerAcquisitionData data) => new(data.AssemblyPath);
 }
diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index bd7463085a1..aafe4099278 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -3,20 +3,56 @@
 
 using System;
 using System.Collections.Generic;
+using System.Configuration.Assemblies;
 using System.Linq;
+using System.Reflection;
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.BuildCheck.Analyzers;
 using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.BuildCheck.Acquisition;
 
 internal class BuildCheckAcquisitionModule
 {
     private static T Construct<T>() where T : new() => new();
+
     public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)
     {
-        // TODO: Acquisition module
-        return Construct<SharedOutputPathAnalyzer>;
+        try
+        {
+            Assembly? assembly = null;
+#if FEATURE_ASSEMBLYLOADCONTEXT
+            assembly = s_coreClrAssemblyLoader.LoadFromPath(assemblyPath);
+#else
+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);
+#endif
+
+            Type type = assembly.GetTypes().FirstOrDefault();
+
+            if (type != null)
+            {
+                // Check if the type is assignable to T
+                if (!typeof(BuildAnalyzer).IsAssignableFrom(type))
+                {
+                    throw new ArgumentException($"The type is not assignable to {typeof(BuildAnalyzer).FullName}");
+                }
+                else
+                {
+                    // ??? how to instantiate
+                }
+            }
+        }
+        catch (ReflectionTypeLoadException ex)
+        {
+            Console.WriteLine("Failed to load one or more types from the assembly:");
+            foreach (Exception loaderException in ex.LoaderExceptions)
+            {
+                Console.WriteLine(loaderException.Message);
+            }
+        }
+
+        return null;
     }
 }
diff --git a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
index 970b644d495..ff8e78ad5f8 100644
--- a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
@@ -12,8 +12,6 @@
 
 namespace Microsoft.Build.BuildCheck.Analyzers;
 
-
-
 internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer
 {
     public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0101", "ConflictingOutputPath",
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index b860423748e..832a611ad81 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -12,10 +12,12 @@
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
+
 internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCheckManager buildCheckManager)
     : ILogger
 {
     public LoggerVerbosity Verbosity { get; set; }
+
     public string? Parameters { get; set; }
 
     public void Initialize(IEventSource eventSource)
@@ -55,8 +57,7 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
                 return;
             }
 
-            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
-                projectEvaluationStartedEventArgs.ProjectFile!);
+            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!, projectEvaluationStartedEventArgs.ProjectFile!);
         }
         else if (e is ProjectStartedEventArgs projectStartedEvent)
         {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index df5385b08ba..541df4b8fa5 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -160,7 +160,7 @@ internal void RegisterCustomAnalyzer(
 
         /// <summary>
         /// To be used by acquisition module
-        /// Registeres the custom analyzer, the construction of analyzer is needed during registration
+        /// Registeres the custom analyzer, the construction of analyzer is needed during registration.
         /// </summary>
         internal void RegisterCustomAnalyzer(
             BuildCheckDataSource buildCheckDataSource,
@@ -169,7 +169,8 @@ internal void RegisterCustomAnalyzer(
             if (_enabledDataSources[(int)buildCheckDataSource])
             {
                 var instance = factory();
-                _analyzersRegistry.Add(new BuildAnalyzerFactoryContext(factory,
+                _analyzersRegistry.Add(new BuildAnalyzerFactoryContext(
+                    factory,
                     instance.SupportedRules.Select(r => r.Id).ToArray(),
                     instance.SupportedRules.Any(r => r.DefaultConfiguration.IsEnabled == true)));
             }
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index d6685345652..22ae0b70bae 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -15,36 +15,45 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 internal class NullBuildCheckManager : IBuildCheckManager
 {
-    public void Shutdown() { }
+    public void Shutdown()
+    {
+    }
 
-    public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buildAnalysisContext,
-        ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
-    { }
+    public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buildAnalysisContext, ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
+    {
+    }
 
     public void SetDataSource(BuildCheckDataSource buildCheckDataSource) { }
+
     public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData) { }
 
     public Dictionary<string, TimeSpan> CreateTracingStats() => throw new NotImplementedException();
 
     public void FinalizeProcessing(LoggingContext loggingContext)
-    { }
+    {
+    }
 
-    public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext,
-        string fullPath)
-    { }
+    public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string fullPath)
+    {
+    }
 
     public void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
-    { }
+    {
+    }
 
     public void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
-    { }
+    {
+    }
 
     public void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
-    { }
+    {
+    }
 
     public void YieldProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
-    { }
+    {
+    }
 
     public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
-    { }
+    {
+    }
 }
diff --git a/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs b/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
index 8c437f45174..1cd2f468885 100644
--- a/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
+++ b/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
@@ -6,6 +6,7 @@
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.BuildCheck.Logging;
+
 internal class AnalyzerLoggingContextFactory(ILoggingService loggingService) : IBuildAnalysisLoggingContextFactory
 {
     public IBuildAnalysisLoggingContext CreateLoggingContext(BuildEventContext eventContext) =>
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 780d58db6b1..27bcd78bcba 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -163,7 +163,7 @@ internal class Evaluator<P, I, M, D>
         private readonly ProjectRootElementCacheBase _projectRootElementCache;
 
         /// <summary>
-        /// The logging context to be used and piped down throughout evaluation
+        /// The logging context to be used and piped down throughout evaluation.
         /// </summary>
         private EvaluationLoggingContext _evaluationLoggingContext;
 
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 37312b8c83e..77b48115c6d 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -4,11 +4,13 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
 using System.Text;
 using System.Text.RegularExpressions;
-
+using Microsoft.Build.BackEnd.Components.Logging;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
@@ -619,6 +621,52 @@ public static bool IsRunningFromVisualStudio()
             return BuildEnvironmentHelper.Instance.Mode == BuildEnvironmentMode.VisualStudio;
         }
 
+        public static bool RegisterAnalyzer(string pathToAssembly)
+        {
+            pathToAssembly = FileUtilities.GetFullPathNoThrow(pathToAssembly);
+
+            try
+            {
+                if (File.Exists(pathToAssembly))
+                {
+                    Assembly assembly = null;
+#if FEATURE_ASSEMBLYLOADCONTEXT
+                    Console.WriteLine($"Hi from FEATURE_ASSEMBLYLOADCONTEXT.");
+                    assembly = s_coreClrAssemblyLoader.LoadFromPath(pathToAssembly);
+#else
+                    assembly = Assembly.LoadFrom(pathToAssembly);
+#endif
+                    Console.WriteLine($"Loaded assembly: {assembly.FullName}");
+
+                    Type type = assembly.GetTypes()[0];
+                    object instance = Activator.CreateInstance(type);
+
+                    PropertyInfo property = type.GetProperty("Name");
+                    var value = property.GetValue(instance);
+                    Console.WriteLine($"Loaded property analyzer name: {value}");
+
+                    // need to have a logging context here.
+                    new BuildCheckAcquisitionEventArgs(pathToAssembly);
+
+                    return true;
+                }
+            }
+            catch (ReflectionTypeLoadException ex)
+            {
+                Console.WriteLine("Failed to load one or more types from the assembly:");
+                foreach (Exception loaderException in ex.LoaderExceptions)
+                {
+                    Console.WriteLine(loaderException.Message);
+                }
+            }
+            catch (Exception ex)
+            {
+                Console.WriteLine($"Failed to load assembly '{pathToAssembly}': {ex.Message}");
+            }
+
+            return false;
+        }
+
         #region Debug only intrinsics
 
         /// <summary>
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 106754be327..1a415871da0 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -13,12 +13,15 @@
 namespace Microsoft.Build.Experimental.BuildCheck;
 
 public abstract class BuildCheckEventArgs : BuildEventArgs
-{ }
+{
+}
 
 public sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> tracingData) : BuildCheckEventArgs
 {
-    internal BuildCheckTracingEventArgs() : this(new Dictionary<string, TimeSpan>())
-    { }
+    internal BuildCheckTracingEventArgs()
+        : this([])
+    {
+    }
 
     public Dictionary<string, TimeSpan> TracingData { get; private set; } = tracingData;
 
@@ -50,25 +53,38 @@ internal override void CreateFromStream(BinaryReader reader, int version)
     }
 }
 
-public sealed class BuildCheckAcquisitionEventArgs(string acquisitionData) : BuildCheckEventArgs
+public sealed class BuildCheckAcquisitionEventArgs(string acquisitionPath) : BuildCheckEventArgs
 {
-    internal BuildCheckAcquisitionEventArgs() : this(string.Empty)
-    { }
+    internal BuildCheckAcquisitionEventArgs()
+        : this(string.Empty)
+    {
+    }
 
-    public string AcquisitionData { get; private set; } = acquisitionData;
+    /// <summary>
+    /// Gets the path to the analyzer assembly that needs to be loaded into the application context.
+    /// </summary>
+    /// <remarks>
+    /// The <see cref="AcquisitionPath"/> property contains the file system path to the assembly
+    /// that is required to be loaded into the application context. This path is used for loading
+    /// the specified assembly dynamically during runtime.
+    /// </remarks>
+    /// <value>
+    /// A <see cref="System.String"/> representing the file system path to the assembly.
+    /// </value>
+    public string AcquisitionPath { get; private set; } = acquisitionPath;
 
     internal override void WriteToStream(BinaryWriter writer)
     {
         base.WriteToStream(writer);
 
-        writer.Write(AcquisitionData);
+        writer.Write(AcquisitionPath);
     }
 
     internal override void CreateFromStream(BinaryReader reader, int version)
     {
         base.CreateFromStream(reader, version);
 
-        AcquisitionData = reader.ReadString();
+        AcquisitionPath = reader.ReadString();
     }
 }
 public sealed class BuildCheckResultWarning : BuildWarningEventArgs
