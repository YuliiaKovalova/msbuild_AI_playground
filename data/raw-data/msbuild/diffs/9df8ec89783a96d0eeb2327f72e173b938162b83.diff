diff --git a/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
index 3b8bf0326ce..fbafcab1c16 100644
--- a/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
@@ -26,6 +26,7 @@ private record Handlers(Action<BuildRequest, FileAccessData> FileAccessHander, A
 
         private object _handlersWriteLock = new object();
         private Handlers[] _handlers = Array.Empty<Handlers>();
+        private string? _tempDirectory;
 
         // Keyed on global request id
         private readonly ConcurrentDictionary<int, ManualResetEventSlim> _fileAccessCompletionWaitHandles = new();
@@ -40,12 +41,14 @@ public void InitializeComponent(IBuildComponentHost host)
         {
             _scheduler = host.GetComponent(BuildComponentType.Scheduler) as IScheduler;
             _configCache = host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
+            _tempDirectory = FileUtilities.EnsureNoTrailingSlash(FileUtilities.TempFileDirectory);
         }
 
         public void ShutdownComponent()
         {
             _scheduler = null;
             _configCache = null;
+            _tempDirectory = null;
             _fileAccessCompletionWaitHandles.Clear();
         }
 
@@ -62,6 +65,12 @@ public void ReportFileAccess(FileAccessData fileAccessData, int nodeId)
                 ManualResetEventSlim handle = _fileAccessCompletionWaitHandles.GetOrAdd(globalRequestId, static _ => new ManualResetEventSlim());
                 handle.Set();
             }
+            else if (_tempDirectory != null && fileAccessPath.StartsWith(_tempDirectory))
+            {
+                // Ignore the temp directory as these are related to internal MSBuild functionality and not always directly related to the execution of the project itself,
+                // so should not be exposed to handlers.
+                return;
+            }
             else
             {
                 // Forward the file access to handlers.
