diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 9153733537b..8f2de9bfc4e 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -205,6 +205,8 @@ public class BuildParameters : ITranslatable
         /// </summary>
         private bool _logInitialPropertiesAndItems;
 
+        private bool _question;
+
         /// <summary>
         /// The settings used to load the project under build
         /// </summary>
@@ -794,7 +796,11 @@ public string OutputResultsCacheFile
         /// <summary>
         /// Gets or sets a value that will error when the build process fails an incremental check.
         /// </summary>
-        public bool Question { get; set; }
+        public bool Question
+        {
+            get => _question;
+            set => _question = value;
+        } 
 
         /// <summary>
         /// Gets or sets the project cache description to use for all <see cref="BuildSubmission"/> or <see cref="GraphBuildSubmission"/>
@@ -860,6 +866,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.TranslateEnum(ref _projectLoadSettings, (int) _projectLoadSettings);
             translator.Translate(ref _interactive);
             translator.Translate(ref _isolateProjects);
+            translator.Translate(ref _question);
 
             // ProjectRootElementCache is not transmitted.
             // ResetCaches is not transmitted.
diff --git a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
index 1b7826288e8..895d93c223e 100644
--- a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
+++ b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
@@ -295,10 +295,10 @@ public void AppConfigFileNotSavedWhenIdentical()
             // Verify it ran correctly and that it's still old
             redirectResults2.ExecuteResult.ShouldBeTrue();
             redirectResults2.TargetAppConfigContent.ShouldContain("<assemblyIdentity name=\"System\" publicKeyToken=\"b77a5c561934e089\" culture=\"neutral\" />");
-            redirectResults.TargetAppConfigContent.ShouldContain("newVersion=\"40.0.0.0\"");
+            redirectResults2.TargetAppConfigContent.ShouldContain("newVersion=\"40.0.0.0\"");
 
-            File.GetCreationTime(outputAppConfigFile).ShouldBe(oldTimestamp, TimeSpan.FromSeconds(5));
-            File.GetLastWriteTime(outputAppConfigFile).ShouldBe(oldTimestamp, TimeSpan.FromSeconds(5));
+            File.GetCreationTime(outputAppConfigFile).ShouldBe(oldTimestamp);
+            File.GetLastWriteTime(outputAppConfigFile).ShouldBeGreaterThan(oldTimestamp);
         }
 
         private BindingRedirectsExecutionResult GenerateBindingRedirects(string appConfigFile, string targetAppConfigFile,
diff --git a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
index 260a79841b9..5eece60dea6 100644
--- a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
+++ b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.Shared;
 using System.Reflection;
 using Microsoft.Build.Shared.FileSystem;
+using System.IO;
 
 #nullable disable
 
@@ -136,19 +137,19 @@ public override bool Execute()
 
             if (writeOutput)
             {
-                if (question)
+                Log.LogMessageFromResources(MessageImportance.Low, "GenerateBindingRedirects.CreatingBindingRedirectionFile", OutputAppConfigFile.ItemSpec);
+                using (var stream = FileUtilities.OpenWrite(OutputAppConfigFile.ItemSpec, false))
                 {
-                    Log.LogErrorFromResources("GenerateBindingRedirects.CreatingBindingRedirectionFile", OutputAppConfigFile.ItemSpec);
-                }
-                else
-                {
-                    Log.LogMessageFromResources(MessageImportance.Low, "GenerateBindingRedirects.CreatingBindingRedirectionFile", OutputAppConfigFile.ItemSpec);
-                    using (var stream = FileUtilities.OpenWrite(OutputAppConfigFile.ItemSpec, false))
-                    {
-                        doc.Save(stream);
-                    }
+                    doc.Save(stream);
                 }
             }
+            else
+            {
+                // instead of writing, touch the output file
+                var now = DateTime.Now;
+                File.SetLastAccessTime(OutputAppConfigFile.ItemSpec, now);
+                File.SetLastWriteTime(OutputAppConfigFile.ItemSpec, now);
+            }
 
             return !Log.HasLoggedErrors;
         }
diff --git a/src/Tasks/Delegate.cs b/src/Tasks/Delegate.cs
index d8baa8ef059..5bf46370710 100644
--- a/src/Tasks/Delegate.cs
+++ b/src/Tasks/Delegate.cs
@@ -15,13 +15,13 @@
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
-    /// File.GetAttributes delegate
+    /// File.GetAttributes delegate.
     /// </summary>
     /// <param name="path">The path get attributes for.</param>
     internal delegate FileAttributes GetAttributes(string path);
 
     /// <summary>
-    /// File SetAttributes delegate
+    /// File SetAttributes delegate.
     /// </summary>
     /// <param name="path">The path to set attributes for.</param>
     /// <param name="attributes">The actual file attributes.</param>
@@ -46,38 +46,38 @@ namespace Microsoft.Build.Tasks
     internal delegate string[] GetDirectories(string path, string pattern);
 
     /// <summary>
-    /// CopyFile delegate
+    /// CopyFile delegate.
     /// </summary>
-    /// <param name="source">Source file</param>
-    /// <param name="destination">Destination file</param>
+    /// <param name="source">Source file.</param>
+    /// <param name="destination">Destination file.</param>
     internal delegate bool CopyFile(string source, string destination);
 
     /// <summary>
-    /// GetAssemblyName delegate
+    /// GetAssemblyName delegate.
     /// </summary>
-    /// <param name="path">The path to the file</param>
+    /// <param name="path">The path to the file.</param>
     /// <returns>The assembly name.</returns>
     internal delegate AssemblyNameExtension GetAssemblyName(string path);
 
     /// <summary>
     /// GetAssemblyRuntimeVersion delegate to get the clr runtime version of a file.
     /// </summary>
-    /// <param name="path">The path to the file</param>
-    /// <returns>The clr runtime version for the file</returns>
+    /// <param name="path">The path to the file.</param>
+    /// <returns>The clr runtime version for the file.</returns>
     internal delegate string GetAssemblyRuntimeVersion(string path);
 
     /// <summary>
-    /// GetGacEnumerator delegate to get the enumerator which will enumerate over the GAC
+    /// GetGacEnumerator delegate to get the enumerator which will enumerate over the GAC.
     /// </summary>
-    /// <param name="strongName">StrongName to get an enumerator for</param>
+    /// <param name="strongName">StrongName to get an enumerator for.</param>
     /// <returns>The enumerator for the gac</returns>
     internal delegate IEnumerable<AssemblyNameExtension> GetGacEnumerator(string strongName);
 
     /// <summary>
-    /// GetPathFromFusionName delegate to get path to a file based on the fusion name
+    /// GetPathFromFusionName delegate to get path to a file based on the fusion name.
     /// </summary>
-    /// <param name="strongName">StrongName to get a path for</param>
-    /// <returns>The path to the assembly</returns>
+    /// <param name="strongName">StrongName to get a path for.</param>
+    /// <returns>The path to the assembly.</returns>
     internal delegate string GetPathFromFusionName(string strongName);
 
     /// <summary>
@@ -88,7 +88,7 @@ namespace Microsoft.Build.Tasks
     /// <param name="assemblyMetadataCache">Assembly metadata cache.</param>
     /// <param name="dependencies">Receives the list of dependencies.</param>
     /// <param name="scatterFiles">Receives the list of associated scatter files.</param>
-    /// <param name="frameworkNameAttribute">The framework name</param>
+    /// <param name="frameworkNameAttribute">The framework name.</param>
     internal delegate void GetAssemblyMetadata
     (
         string path,
@@ -99,7 +99,7 @@ out FrameworkName frameworkNameAttribute
     );
 
     /// <summary>
-    /// Delegate to take in a dll path and read the machine type from the PEHeader
+    /// Delegate to take in a dll path and read the machine type from the PEHeader.
     /// </summary>
     internal delegate UInt16 ReadMachineTypeFromPEHeader(string dllPath);
 
@@ -109,23 +109,23 @@ out FrameworkName frameworkNameAttribute
     internal delegate string GetAssemblyPathInGac(AssemblyNameExtension assemblyName, System.Reflection.ProcessorArchitecture targetProcessorArchitecture, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVersion, FileExists fileExists, bool fullFusionName, bool specificVersion);
 
     /// <summary>
-    /// Determines if a assembly is an winmd file 
+    /// Determines if a assembly is an winmd file.
     /// </summary>
     internal delegate bool IsWinMDFile(string fullpath, GetAssemblyRuntimeVersion getAssemblyRuntimeVersion, FileExists fileExists, out string imageRuntimeVersion, out bool isManagedWinmd);
 
     /// <summary>
     /// CreateFileString delegate. Creates a stream on top of a file.
     /// </summary>
-    /// <param name="path">Path to the file</param>
-    /// <param name="mode">File mode</param>
-    /// <param name="access">Access type</param>
-    /// <returns>The Stream</returns>
+    /// <param name="path">Path to the file.</param>
+    /// <param name="mode">File mode.</param>
+    /// <param name="access">Access type.</param>
+    /// <returns>The Stream.</returns>
     internal delegate Stream CreateFileStream(string path, FileMode mode, FileAccess access);
 
     /// <summary>
-    /// Delegate for System.IO.File.GetLastWriteTime
+    /// Delegate for System.IO.File.GetLastWriteTime.
     /// </summary>
-    /// <param name="path">The file name</param>
+    /// <param name="path">The file name.</param>
     /// <returns>The last write time.</returns>
     internal delegate DateTime GetLastWriteTime(string path);
 }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 096ded00033..e45fb580541 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -2462,7 +2462,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ====================================================================================================
   -->
   <Target Name="GenerateBindingRedirects"
-    Condition="'$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true'"
+    Inputs="$(MSBuildAllProjects);@(AppConfigFile);$(ResolveAssemblyReferencesStateFile);$(SuggestedBindingRedirectsCacheFile)"
+    Outputs="$(_GenerateBindingRedirectsIntermediateAppConfig)"
+    Condition="'$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and '@(AppConfigWithTargetPath)' != '' and '@(SuggestedBindingRedirects)' != ''"
     DependsOnTargets="_GenerateSuggestedBindingRedirectsCache">
 
     <GenerateBindingRedirects
