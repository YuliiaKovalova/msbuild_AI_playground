diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index aa4bf8ffbce..c4b8c39b01a 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -483,11 +483,9 @@ out bool retrievedFromCache
             {
                 // Does this task have an architecture-specific variation?
                 // Just use that!
-                if (superImportantTasks.TryGetValue(taskIdentity.Name, out List<RegisteredTaskRecord> records))
+                if (superImportantTasks.TryGetValue(taskIdentity.Name, out RegisteredTaskRecord rec))
                 {
-                    // Just take the first for now.
-                    taskRecord = records[0];
-                    return taskRecord;
+                    return rec;
                 }
 
                 if (exactMatchRequired)
@@ -639,7 +637,7 @@ private Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> GetReleva
 
         // Create another set containing architecture-specific task entries.
         // Then when we look for them, check if the name exists in that.
-        Dictionary<string, List<RegisteredTaskRecord>> superImportantTasks = new Dictionary<string, List<RegisteredTaskRecord>>();
+        Dictionary<string, RegisteredTaskRecord> superImportantTasks = new Dictionary<string, RegisteredTaskRecord>();
 
         /// <summary>
         /// Registers an evaluated using task tag for future
@@ -668,23 +666,15 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st
 
             RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);
 
-            if (taskFactoryParameters != null && taskFactoryParameters.ContainsKey("Architecture"))
+            // When Runtime is defined (and Architecture isn't), Architecture will be set to `*` which shouldn't be prioritized.
+            if (taskFactoryParameters != null && taskFactoryParameters.TryGetValue("Architecture", out string s) && s != MSBuildConstants.CharactersForExpansion[0])
             {
-                if (superImportantTasks.ContainsKey(taskName))
+                // First UsingTask wins
+                if (!superImportantTasks.ContainsKey(taskName))
                 {
-                    if (superImportantTasks[taskName] == null)
-                    {
-                        superImportantTasks[taskName] = new();
-                    }
-                }
-                else
-                {
-                    superImportantTasks.Add(taskName, new ());
+                    superImportantTasks[taskName] = newRecord;
                 }
-
-                superImportantTasks[taskName].Add(newRecord);
             }
-            
 
             registeredTaskEntries.Add(newRecord);
         }
