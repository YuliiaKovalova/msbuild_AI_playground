diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 62581e4328c..3581225789d 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -454,18 +454,6 @@ public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)
             WriteEvent(61, fileItemSpec, wasUpToDate);
         }
 
-        [Event(70, Keywords = Keywords.All)]
-        public void GetLastWriteFileUtcTimeStart(string file)
-        {
-            WriteEvent(70, file);
-        }
-
-        [Event(71, Keywords = Keywords.All)]
-        public void GetLastWriteFileUtcTimeStop(string file, bool cacheHit, bool exists)
-        {
-            WriteEvent(71, file, cacheHit, exists);
-        }
-
         #endregion
     }
 }
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 4dca13406d9..ef00d315bcf 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -12,9 +12,6 @@
 using System.Threading;
 using System.Reflection;
 using Microsoft.Build.Framework;
-#if !CLR2COMPATIBILITY //TODO: delete afrer imutable op-to-date checks not user ETLs anymore
-using Microsoft.Build.Eventing;
-#endif
 using Microsoft.Win32;
 using Microsoft.Win32.SafeHandles;
 
@@ -1057,39 +1054,28 @@ internal static MemoryStatus GetMemoryStatus()
         internal static DateTime GetLastWriteFileUtcTime(string fullPath)
         {
 #if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-            MSBuildEventSource.Log.GetLastWriteFileUtcTimeStart(fullPath); //TODO: delete ETLs after measured and tested
-            bool cacheHit = false;
-            DateTime modifiedTime = DateTime.MinValue;
-            try
+            if (Traits.Instance.EscapeHatches.AlwaysDoImmutableFilesUpToDateCheck)
             {
-                if (Traits.Instance.EscapeHatches.AlwaysDoImmutableFilesUpToDateCheck)
-                {
-                    return LastWriteFileUtcTime(fullPath);
-                }
+                return LastWriteFileUtcTime(fullPath);
+            }
 
-                bool isModifiable = !FileClassifier.Shared.IsNonModifiable(fullPath);
-                if (!isModifiable)
+            bool isModifiable = !FileClassifier.Shared.IsNonModifiable(fullPath);
+            if (!isModifiable)
+            {
+                if (ImmutableFilesTimestampCache.Shared.TryGetValue(fullPath, out DateTime modifiedAt))
                 {
-                    if (ImmutableFilesTimestampCache.Shared.TryGetValue(fullPath, out DateTime modifiedAt))
-                    {
-                        cacheHit = true;
-                        return modifiedAt;
-                    }
+                    return modifiedAt;
                 }
+            }
 
-                modifiedTime = LastWriteFileUtcTime(fullPath);
-
-                if (!isModifiable && modifiedTime != DateTime.MinValue)
-                {
-                    ImmutableFilesTimestampCache.Shared.TryAdd(fullPath, modifiedTime);
-                }
+            DateTime modifiedTime = LastWriteFileUtcTime(fullPath);
 
-                return modifiedTime;
-            }
-            finally
+            if (!isModifiable && modifiedTime != DateTime.MinValue)
             {
-               MSBuildEventSource.Log.GetLastWriteFileUtcTimeStop(fullPath, cacheHit, cacheHit || modifiedTime != DateTime.MinValue);
+                ImmutableFilesTimestampCache.Shared.TryAdd(fullPath, modifiedTime);
             }
+
+            return modifiedTime;
 #else
             return LastWriteFileUtcTime(fullPath);
 #endif
