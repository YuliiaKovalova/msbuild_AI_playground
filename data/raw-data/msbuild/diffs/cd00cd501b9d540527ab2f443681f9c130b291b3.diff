diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 878b3ff3931..2475ccefde8 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1040,6 +1040,42 @@ public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
             logger.AssertLogContains("MSB4023");
         }
 
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        public void InvalidPathInDirectMetadata()
+        {
+            var logger = Helpers.BuildProjectUsingBuildManagerExpectResult(
+                @"<Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <ItemGroup>
+                        <x Include=':|?*'>
+                            <m>%(FullPath)</m>
+                        </x>
+                    </ItemGroup>
+                </Project>",
+                BuildResultCode.Failure);
+
+            logger.AssertLogContains("MSB4248");
+        }
+
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        public void PathTooLongInDirectMetadata()
+        {
+            var logger = Helpers.BuildProjectUsingBuildManagerExpectResult(
+                @"<Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <ItemGroup>
+                        <x Include='" + new string('x', 250) + @"'>
+                            <m>%(FullPath)</m>
+                        </x>
+                    </ItemGroup>
+                </Project>",
+                BuildResultCode.Failure);
+
+            logger.AssertLogContains("MSB4248");
+        }
+
         /// <summary>
         /// Asking for blank metadata with ->AnyHaveMetadataValue
         /// </summary>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 91456c8a3c0..426d3d8465c 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -257,7 +257,7 @@ internal string ExpandIntoStringLeaveEscaped(string expression, ExpanderOptions
 
             ErrorUtilities.VerifyThrowInternalNull(elementLocation, "elementLocation");
 
-            string result = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options);
+            string result = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options, elementLocation);
             result = PropertyExpander<P>.ExpandPropertiesLeaveEscaped(result, _properties, options, elementLocation, _usedUninitializedProperties);
             result = ItemExpander.ExpandItemVectorsIntoString<I>(this, result, _items, options, elementLocation);
             result = FileUtilities.MaybeAdjustFilePath(result);
@@ -278,7 +278,7 @@ internal object ExpandPropertiesLeaveTypedAndEscaped(string expression, Expander
 
             ErrorUtilities.VerifyThrowInternalNull(elementLocation, "elementLocation");
 
-            string metaExpanded = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options);
+            string metaExpanded = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options, elementLocation);
             return PropertyExpander<P>.ExpandPropertiesLeaveTypedAndEscaped(metaExpanded, _properties, options, elementLocation, _usedUninitializedProperties);
         }
 
@@ -326,7 +326,7 @@ internal IList<T> ExpandIntoItemsLeaveEscaped<T>(string expression, IItemFactory
 
             ErrorUtilities.VerifyThrowInternalNull(elementLocation, "elementLocation");
 
-            expression = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options);
+            expression = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options, elementLocation);
             expression = PropertyExpander<P>.ExpandPropertiesLeaveEscaped(expression, _properties, options, elementLocation, _usedUninitializedProperties);
             expression = FileUtilities.MaybeAdjustFilePath(expression);
 
@@ -695,107 +695,120 @@ private static class MetadataExpander
             /// <param name="metadata"></param>
             /// <param name="options"></param>
             /// <returns>The string with item metadata expanded in-place, escaped.</returns>
-            internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTable metadata, ExpanderOptions options)
+            internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTable metadata, ExpanderOptions options, IElementLocation elementLocation)
             {
-                if (((options & ExpanderOptions.ExpandMetadata) == 0))
-                {
-                    return expression;
-                }
-
-                if (expression.Length == 0)
-                {
-                    return expression;
-                }
-
-                ErrorUtilities.VerifyThrow(metadata != null, "Cannot expand metadata without providing metadata");
-
-                // PERF NOTE: Regex matching is expensive, so if the string doesn't contain any item metadata references, just bail
-                // out -- pre-scanning the string is actually cheaper than running the Regex, even when there are no matches!
-                if (s_invariantCompareInfo.IndexOf(expression, "%(", CompareOptions.Ordinal) == -1)
+                try
                 {
-                    return expression;
-                }
+                    if (((options & ExpanderOptions.ExpandMetadata) == 0))
+                    {
+                        return expression;
+                    }
 
-                string result = null;
+                    if (expression.Length == 0)
+                    {
+                        return expression;
+                    }
 
-                if (s_invariantCompareInfo.IndexOf(expression, "@(", CompareOptions.Ordinal) == -1)
-                {
-                    // if there are no item vectors in the string
-                    // run a simpler Regex to find item metadata references
-                    MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options);
-                    result = RegularExpressions.ItemMetadataPattern.Value.Replace(expression, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
-                }
-                else
-                {
-                    List<ExpressionShredder.ItemExpressionCapture> itemVectorExpressions = ExpressionShredder.GetReferencedItemExpressions(expression);
+                    ErrorUtilities.VerifyThrow(metadata != null, "Cannot expand metadata without providing metadata");
 
-                    // The most common case is where the transform is the whole expression
-                    // Also if there were no valid item vector expressions found, then go ahead and do the replacement on
-                    // the whole expression (which is what Orcas did).
-                    if (itemVectorExpressions != null && itemVectorExpressions.Count == 1 && itemVectorExpressions[0].Value == expression && itemVectorExpressions[0].Separator == null)
+                    // PERF NOTE: Regex matching is expensive, so if the string doesn't contain any item metadata references, just bail
+                    // out -- pre-scanning the string is actually cheaper than running the Regex, even when there are no matches!
+                    if (s_invariantCompareInfo.IndexOf(expression, "%(", CompareOptions.Ordinal) == -1)
                     {
                         return expression;
                     }
 
-                    // otherwise, run the more complex Regex to find item metadata references not contained in transforms
-                    // With the reuseable string builder, there's no particular need to initialize the length as it will already have grown.
-                    using (var finalResultBuilder = new ReuseableStringBuilder())
+                    string result = null;
+
+                    if (s_invariantCompareInfo.IndexOf(expression, "@(", CompareOptions.Ordinal) == -1)
                     {
-                        int start = 0;
+                        // if there are no item vectors in the string
+                        // run a simpler Regex to find item metadata references
                         MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options);
+                        result = RegularExpressions.ItemMetadataPattern.Value.Replace(expression, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
+                    }
+                    else
+                    {
+                        List<ExpressionShredder.ItemExpressionCapture> itemVectorExpressions = ExpressionShredder.GetReferencedItemExpressions(expression);
 
-                        if (itemVectorExpressions != null)
+                        // The most common case is where the transform is the whole expression
+                        // Also if there were no valid item vector expressions found, then go ahead and do the replacement on
+                        // the whole expression (which is what Orcas did).
+                        if (itemVectorExpressions != null && itemVectorExpressions.Count == 1 && itemVectorExpressions[0].Value == expression && itemVectorExpressions[0].Separator == null)
                         {
-                            // Move over the expression, skipping those that have been recognized as an item vector expression
-                            // Anything other than an item vector expression we want to expand bare metadata in.
-                            for (int n = 0; n < itemVectorExpressions.Count; n++)
+                            return expression;
+                        }
+
+                        // otherwise, run the more complex Regex to find item metadata references not contained in transforms
+                        // With the reuseable string builder, there's no particular need to initialize the length as it will already have grown.
+                        using (var finalResultBuilder = new ReuseableStringBuilder())
+                        {
+                            int start = 0;
+                            MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options);
+
+                            if (itemVectorExpressions != null)
                             {
-                                string vectorExpression = itemVectorExpressions[n].Value;
+                                // Move over the expression, skipping those that have been recognized as an item vector expression
+                                // Anything other than an item vector expression we want to expand bare metadata in.
+                                for (int n = 0; n < itemVectorExpressions.Count; n++)
+                                {
+                                    string vectorExpression = itemVectorExpressions[n].Value;
 
-                                // Extract the part of the expression that appears before the item vector expression
-                                // e.g. the ABC in ABC@(foo->'%(FullPath)')
-                                string subExpressionToReplaceIn = expression.Substring(start, itemVectorExpressions[n].Index - start);
-                                string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
+                                    // Extract the part of the expression that appears before the item vector expression
+                                    // e.g. the ABC in ABC@(foo->'%(FullPath)')
+                                    string subExpressionToReplaceIn = expression.Substring(start, itemVectorExpressions[n].Index - start);
+                                    string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
 
-                                // Append the metadata replacement
-                                finalResultBuilder.Append(replacementResult);
+                                    // Append the metadata replacement
+                                    finalResultBuilder.Append(replacementResult);
 
-                                // Expand any metadata that appears in the item vector expression's separator
-                                if (itemVectorExpressions[n].Separator != null)
-                                {
-                                    vectorExpression = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(itemVectorExpressions[n].Value, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata), -1, itemVectorExpressions[n].SeparatorStart);
-                                }
+                                    // Expand any metadata that appears in the item vector expression's separator
+                                    if (itemVectorExpressions[n].Separator != null)
+                                    {
+                                        vectorExpression = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(itemVectorExpressions[n].Value, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata), -1, itemVectorExpressions[n].SeparatorStart);
+                                    }
 
-                                // Append the item vector expression as is
-                                // e.g. the @(foo->'%(FullPath)') in ABC@(foo->'%(FullPath)')
-                                finalResultBuilder.Append(vectorExpression);
+                                    // Append the item vector expression as is
+                                    // e.g. the @(foo->'%(FullPath)') in ABC@(foo->'%(FullPath)')
+                                    finalResultBuilder.Append(vectorExpression);
 
-                                // Move onto the next part of the expression that isn't an item vector expression
-                                start = (itemVectorExpressions[n].Index + itemVectorExpressions[n].Length);
+                                    // Move onto the next part of the expression that isn't an item vector expression
+                                    start = (itemVectorExpressions[n].Index + itemVectorExpressions[n].Length);
+                                }
                             }
-                        }
 
-                        // If there's anything left after the last item vector expression
-                        // then we need to metadata replace and then append that
-                        if (start < expression.Length)
-                        {
-                            string subExpressionToReplaceIn = expression.Substring(start);
-                            string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
+                            // If there's anything left after the last item vector expression
+                            // then we need to metadata replace and then append that
+                            if (start < expression.Length)
+                            {
+                                string subExpressionToReplaceIn = expression.Substring(start);
+                                string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
+
+                                finalResultBuilder.Append(replacementResult);
+                            }
 
-                            finalResultBuilder.Append(replacementResult);
+                            result = OpportunisticIntern.InternableToString(finalResultBuilder);
                         }
+                    }
 
-                        result = OpportunisticIntern.InternableToString(finalResultBuilder);
+                    // Don't create more strings
+                    if (String.Equals(result, expression, StringComparison.Ordinal))
+                    {
+                        result = expression;
                     }
-                }
 
-                // Don't create more strings
-                if (String.Equals(result, expression, StringComparison.Ordinal))
+                    return result;
+                }
+                catch (ArgumentException ex) // Blank metadata name
+                {
+                    ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotExpandItemMetadata", expression, ex.Message);
+                }
+                catch (InvalidOperationException ex)
                 {
-                    result = expression;
+                    ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotExpandItemMetadata", expression, ex.Message);
                 }
 
-                return result;
+                return null;
             }
 
             /// <summary>
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 84224692511..15b02c8a864 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -146,6 +146,12 @@
     %(RootDir) to an item-spec that's not a valid path, would result in this error.
     LOCALIZATION: "{1}" is a localized message explaining the problem.</comment>
   </data>
+  <data name="CannotExpandItemMetadata" UESanitized="false" Visibility="Public">
+    <value>MSB4248: Cannot expand metadata in expression "{0}". {1}</value>
+    <comment>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</comment>
+  </data>
   <data name="CouldNotFindMSBuildExe">
     <value>MSB4193: MSBuild.exe could not be launched as a child node as it could not be found at the location "{0}". If necessary, specify the correct location in the BuildParameters, or with the MSBUILD_EXE_PATH environment variable.</value>
     <comment>{StrBegin="MSB4193: "}</comment>
@@ -1692,7 +1698,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
         MSB4128 is being used in FileLogger.cs (can't be added here yet as strings are currently frozen)
         MSB4129 is used by Shared\XmlUtilities.cs (can't be added here yet as strings are currently frozen)
 
-        Next message code should be MSB4248.
+        Next message code should be MSB4249.
 
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 0a81964a4ec..843040b029f 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Operaci nebylo možno dokončit, protože sestavení již probíhá.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">Operaci nelze dokončit, protože funkce BeginBuild ještě nebyla zavolána.</target>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 9067cd11475..7d1c0c04813 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Der Vorgang kann nicht abgeschlossen werden, da bereits ein Buildvorgang stattfindet.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">Der Vorgang kann nicht abgeschlossen werden, da BeginBuild noch nicht aufgerufen wurde.</target>
diff --git a/src/Build/Resources/xlf/Strings.en.xlf b/src/Build/Resources/xlf/Strings.en.xlf
index bca8cdccb9a..18a5ca82a2b 100644
--- a/src/Build/Resources/xlf/Strings.en.xlf
+++ b/src/Build/Resources/xlf/Strings.en.xlf
@@ -26,6 +26,13 @@
         <target state="new">The operation cannot be completed because a build is already in progress.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="new">The operation cannot be completed because BeginBuild has not yet been called.</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 422e2aaa27a..0191affddac 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -26,6 +26,13 @@
         <target state="translated">La operación no se puede completar porque ya hay una compilación en curso.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">La operación no se puede completar porque todavía no se llamó a BeginBuild.</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index c1bcc367665..115f8f79731 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Impossible d'effectuer l'opération car une génération est déjà en cours.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">Impossible d'effectuer l'opération car la méthode BeginBuild n'a pas encore été appelée.</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index b32d794dd35..caaa592c5d6 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Non è possibile completare l'operazione perché è già in corso una compilazione.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">Non è possibile completare l'operazione perché BeginBuild non è stato ancora chiamato.</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index f63f1d27740..c2661f2b25d 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -26,6 +26,13 @@
         <target state="translated">ビルドは既に進行中であるため、操作を完了できません。</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">BeginBuild がまだ呼び出されていないため、操作を完了できません。</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index ec74cb58678..0da86917d61 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -26,6 +26,13 @@
         <target state="translated">빌드가 이미 진행되고 있으므로 작업을 완료할 수 없습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">BeginBuild가 아직 호출되지 않았으므로 작업을 완료할 수 없습니다.</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index cb38aa16f2b..eb113b531cd 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Nie można zakończyć tej operacji, ponieważ trwa kompilacja.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">Nie można zakończyć operacji, ponieważ metoda BeginBuild nie została jeszcze wywołana.</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index e99ba00cc39..865586a21a1 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -26,6 +26,13 @@
         <target state="translated">A operação não pode ser concluída porque uma compilação está em andamento.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">A operação não pode ser concluída porque BeginBuild ainda não foi chamado.</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 02ed8540084..89b6303aeed 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Не удалось завершить операцию, так как уже выполняется сборка.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">Не удается завершить операцию, так как ещё не был вызван BeginBuild.</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 203a6837f1d..6053290d831 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -26,6 +26,13 @@
         <target state="translated">Bir oluşturma zaten devam ettiği için işlem tamamlanamıyor.</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">BeginBuild henüz çağrılmadığı için işlem tamamlanamıyor.</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 4c2a7fb46c5..fe979bbe26a 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -26,6 +26,13 @@
         <target state="translated">无法完成此操作，因为已经在进行某个生成。</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">无法完成该操作，因为尚未调用 BeginBuild。</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index b2074a16113..efe41f07101 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -26,6 +26,13 @@
         <target state="translated">無法完成作業，因為建置已經在進行中。</target>
         <note />
       </trans-unit>
+      <trans-unit id="CannotExpandItemMetadata">
+        <source>MSB4248: Cannot expand metadata in expression "{0}". {1}</source>
+        <target state="new">MSB4248: Cannot expand metadata in expression "{0}". {1}</target>
+        <note>{StrBegin="MSB4023: "}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply
+    %(RootDir) to an item-spec that's not a valid path, would result in this error.
+    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
+      </trans-unit>
       <trans-unit id="NoBuildInProgress">
         <source>The operation cannot be completed because BeginBuild has not yet been called.</source>
         <target state="translated">無法完成作業，因為尚未呼叫 BeginBuild。</target>
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index c047caaa6ee..b20f56ec391 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -11,12 +11,14 @@
 using System.Xml;
 
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 
@@ -1310,6 +1312,45 @@ private static void BuildProjectWithNewOM(string content, out MockLogger logger,
             result = project.Build(loggers);
         }
 
+        public static MockLogger BuildProjectUsingBuildManagerExpectResult(string content, BuildResultCode expectedResult)
+        {
+            var logger = new MockLogger();
+
+            var result = BuildProjectUsingBuildManager(content, logger);
+
+            result.OverallResult.ShouldBe(expectedResult);
+
+            return logger;
+        }
+
+        public static BuildResult BuildProjectUsingBuildManager(string content, MockLogger logger)
+        {
+            // Replace the crazy quotes with real ones
+            content = ObjectModelHelpers.CleanupFileContents(content);
+
+            List<ILogger> loggers = new List<ILogger>();
+
+            using (var env = TestEnvironment.Create())
+            using (var buildManager = new BuildManager())
+            {
+                var testProject = env.CreateTestProjectWithFiles(content.Cleanup());
+
+                var result = buildManager.Build(
+                    new BuildParameters()
+                    {
+                        Loggers = new []{logger}
+                    },
+                    new BuildRequestData(
+                        testProject.ProjectFile,
+                        new Dictionary<string, string>(),
+                        MSBuildConstants.CurrentToolsVersion,
+                        new string[] {},
+                        null));
+
+                return result;
+            }
+        }
+
         /// <summary>
         /// Build a project with the provided content in memory.
         /// Assert that it fails, and return the mock logger with the output.
