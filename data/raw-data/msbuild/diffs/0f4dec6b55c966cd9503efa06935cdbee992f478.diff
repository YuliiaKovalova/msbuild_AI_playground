diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index cdb28ee4dc9..71bd0673c4d 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -925,22 +925,9 @@ private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationF
         /// </summary>
         private static string GetLockedFileMessage(string file)
         {
-            string message = string.Empty;
-
-            try
-            {
-                if (NativeMethodsShared.IsWindows && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
-                {
-                    var processes = LockCheck.GetProcessesLockingFile(file);
-                    message = !string.IsNullOrEmpty(processes)
-                        ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("Copy.FileLocked", processes)
-                        : String.Empty;
-                }
-            }
-            catch (Exception)
-            {
-                // Never throw if we can't get the processes locking the file.
-            }
+#pragma warning disable CA1416
+            string message = LockCheck.GetLockedFileMessage(file);
+#pragma warning restore CA1416
 
             return message;
         }
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index 7fdafde410b..453cbe075cc 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -619,7 +619,11 @@ private bool WriteManifest()
             }
             catch (Exception ex)
             {
-                Log.LogErrorWithCodeFromResources("GenerateManifest.WriteOutputManifestFailed", OutputManifest.ItemSpec, ex.Message);
+#pragma warning disable CA1416
+                string lockedFileMessage = LockCheck.GetLockedFileMessage(OutputManifest.ItemSpec);
+#pragma warning restore CA1416
+                Log.LogErrorWithCodeFromResources("GenerateManifest.WriteOutputManifestFailed", OutputManifest.ItemSpec, ex.Message, lockedFileMessage);
+
                 return false;
             }
 
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 3def6381e12..f5b4e237e75 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -7,6 +7,8 @@
 using System.Linq;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -244,6 +246,31 @@ internal static string GetProcessesLockingFile(string filePath)
             return string.Join(", ", GetLockingProcessInfos(filePath).Select(p => $"{p.ApplicationName} ({p.ProcessId})"));
         }
 
+        /// <summary>
+        /// Try to get a message to inform the user which processes have a lock on a given file.
+        /// </summary>
+        internal static string GetLockedFileMessage(string file)
+        {
+            string message = string.Empty;
+
+            try
+            {
+                if (NativeMethodsShared.IsWindows && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+                {
+                    var processes = GetProcessesLockingFile(file);
+                    message = !string.IsNullOrEmpty(processes)
+                        ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("Copy.FileLocked", processes)
+                        : String.Empty;
+                }
+            }
+            catch (Exception)
+            {
+                // Never throw if we can't get the processes locking the file.
+            }
+
+            return message;
+        }
+
         internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[] paths)
         {
             if (paths == null)
