diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index 582ea3dec52..dec22e8c017 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -178,7 +178,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                     if (buildDataFlagsSatisfied)
                     {
                         // Check for targets explicitly specified.
-                        bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, checkTargetsMissingResults: true, skippedResultsDoNotCauseCacheMiss);
+                        bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);
 
                         if (explicitTargetsSatisfied)
                         {
@@ -186,7 +186,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                             response.Type = ResultsCacheResponseType.Satisfied;
 
                             // Check for the initial targets.  If we don't know what the initial targets are, we assume they are not satisfied.
-                            if (configInitialTargets == null || !CheckResults(allResults, configInitialTargets, checkTargetsMissingResults: false, skippedResultsDoNotCauseCacheMiss))
+                            if (configInitialTargets == null || !CheckResults(allResults, configInitialTargets, null, skippedResultsDoNotCauseCacheMiss))
                             {
                                 response.Type = ResultsCacheResponseType.NotSatisfied;
                             }
@@ -196,7 +196,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                             {
                                 // Check for the default target, if necessary.  If we don't know what the default targets are, we
                                 // assume they are not satisfied.
-                                if (configDefaultTargets == null || !CheckResults(allResults, configDefaultTargets, checkTargetsMissingResults: false, skippedResultsDoNotCauseCacheMiss))
+                                if (configDefaultTargets == null || !CheckResults(allResults, configDefaultTargets, null, skippedResultsDoNotCauseCacheMiss))
                                 {
                                     response.Type = ResultsCacheResponseType.NotSatisfied;
                                 }
@@ -308,21 +308,20 @@ internal static IBuildComponent CreateComponent(BuildComponentType componentType
         /// </summary>
         /// <param name="result">The result to examine</param>
         /// <param name="targets">The targets to search for</param>
-        /// <param name="checkTargetsMissingResults">If missing targets will be checked for.</param>
+        /// <param name="targetsMissingResults">An optional list to be populated with missing targets</param>
         /// <param name="skippedResultsAreOK">If true, a status of "skipped" counts as having valid results
         /// for that target.  Otherwise, a skipped target is treated as equivalent to a missing target.</param>
         /// <returns>False if there were missing results, true otherwise.</returns>
-        private static bool CheckResults(BuildResult result, List<string> targets, bool checkTargetsMissingResults, bool skippedResultsAreOK)
+        private static bool CheckResults(BuildResult result, List<string> targets, HashSet<string> targetsMissingResults, bool skippedResultsAreOK)
         {
             bool returnValue = true;
-            bool missingTargetFound = false;
             foreach (string target in targets)
             {
                 if (!result.HasResultsForTarget(target) || (result[target].ResultCode == TargetResultCode.Skipped && !skippedResultsAreOK))
                 {
-                    if (checkTargetsMissingResults)
+                    if (targetsMissingResults != null)
                     {
-                        missingTargetFound = true;
+                        targetsMissingResults.Add(target);
                         returnValue = false;
                     }
                     else
@@ -334,7 +333,7 @@ private static bool CheckResults(BuildResult result, List<string> targets, bool
                 {
                     // If the result was a failure and we have not seen any skipped targets up to this point, then we conclude we do
                     // have results for this request, and they indicate failure.
-                    if (result[target].ResultCode == TargetResultCode.Failure && (!checkTargetsMissingResults || !missingTargetFound))
+                    if (result[target].ResultCode == TargetResultCode.Failure && (targetsMissingResults == null || targetsMissingResults.Count == 0))
                     {
                         return true;
                     }
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs b/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs
index 03e123f9141..0b9971a8b99 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs
@@ -41,6 +41,11 @@ internal struct ResultsCacheResponse
         /// </summary>
         public BuildResult Results;
 
+        /// <summary>
+        /// The subset of explicit targets which must be built because there are no results for them in the cache.
+        /// </summary>
+        public HashSet<string> ExplicitTargetsToBuild;
+
         /// <summary>
         /// Constructor.
         /// </summary>
@@ -49,6 +54,7 @@ public ResultsCacheResponse(ResultsCacheResponseType type)
         {
             Type = type;
             Results = null;
+            ExplicitTargetsToBuild = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
         }
     }
 }
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index f90f99d14d3..7108a74cca6 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -299,11 +299,7 @@ public bool IsTraversal
             {
                 if (!_isTraversalProject.HasValue)
                 {
-#if NET471_OR_GREATER
-                    if (MemoryExtensions.Equals(Microsoft.IO.Path.GetFileName(ProjectFullPath.AsSpan()), "dirs.proj".AsSpan(), StringComparison.OrdinalIgnoreCase))
-#else
-                    if (MemoryExtensions.Equals(Path.GetFileName(ProjectFullPath.AsSpan()), "dirs.proj", StringComparison.OrdinalIgnoreCase))
-#endif
+                    if (String.Equals(Path.GetFileName(ProjectFullPath), "dirs.proj", StringComparison.OrdinalIgnoreCase))
                     {
                         // dirs.proj are assumed to be traversals
                         _isTraversalProject = true;
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 39b1b66ec74..fd780f44a6d 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -10,7 +10,6 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Framework;
-using System.Diagnostics.CodeAnalysis;
 
 namespace Microsoft.Build.Execution
 {
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 74e3ef24cac..071d97154be 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1224,18 +1224,15 @@ private void EnsureParameterInitialized(TaskPropertyInfo parameter, Lookup looku
 
             string taskAndParameterName = _taskName + "_" + parameter.Name;
             string key = "DisableLogTaskParameter_" + taskAndParameterName;
+            string metadataKey = "DisableLogTaskParameterItemMetadata_" + taskAndParameterName;
 
             if (string.Equals(lookup.GetProperty(key)?.EvaluatedValue, "true", StringComparison.OrdinalIgnoreCase))
             {
                 parameter.Log = false;
             }
-            else
+            else if (string.Equals(lookup.GetProperty(metadataKey)?.EvaluatedValue, "true", StringComparison.OrdinalIgnoreCase))
             {
-                string metadataKey = "DisableLogTaskParameterItemMetadata_" + taskAndParameterName;
-                if (string.Equals(lookup.GetProperty(metadataKey)?.EvaluatedValue, "true", StringComparison.OrdinalIgnoreCase))
-                {
-                    parameter.LogItemMetadata = false;
-                }
+                parameter.LogItemMetadata = false;
             }
         }
 
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index e7c55c4e8ce..84b34d5c67a 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -5,7 +5,6 @@
 using System.Collections;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Collections.Immutable;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
@@ -276,6 +275,9 @@ private void FlushFirstValueIfNeeded()
         /// Enabled by ExpanderOptions.Truncate.
         /// </summary>
         private const int ItemLimitPerExpansion = 3;
+        private static readonly char[] s_singleQuoteChar = { '\'' };
+        private static readonly char[] s_backtickChar = { '`' };
+        private static readonly char[] s_doubleQuoteChar = { '"' };
 
         /// <summary>
         /// Those characters which indicate that an expression may contain expandable
@@ -783,43 +785,38 @@ private static void AddArgument(List<string> arguments, SpanBasedStringBuilder a
             // we reached the end of an argument, add the builder's final result
             // to our arguments.
             argumentBuilder.Trim();
+            string argValue = argumentBuilder.ToString();
 
-            if (argumentBuilder.Length > 0)
+            // We support passing of null through the argument constant value null
+            if (String.Equals("null", argValue, StringComparison.OrdinalIgnoreCase))
             {
-                char firstChar = argumentBuilder[0];
-                char lastChar = argumentBuilder[argumentBuilder.Length - 1];
-                if (firstChar == '\'' && lastChar == '\'')
-                {
-                    argumentBuilder.Trim('\'');
-                    arguments.Add(argumentBuilder.ToString());
-                }
-                else if (firstChar == '`' && lastChar == '`')
-                {
-                    argumentBuilder.Trim('`');
-                    arguments.Add(argumentBuilder.ToString());
-                }
-                else if (firstChar == '"' && lastChar == '"')
-                {
-                    argumentBuilder.Trim('"');
-                    arguments.Add(argumentBuilder.ToString());
-                }
-                else
+                arguments.Add(null);
+            }
+            else
+            {
+                if (argValue.Length > 0)
                 {
-                    string argValue = argumentBuilder.ToString();
-                    // We support passing of null through the argument constant value null
-                    if (String.Equals("null", argValue, StringComparison.OrdinalIgnoreCase))
+                    if (argValue[0] == '\'' && argValue[argValue.Length - 1] == '\'')
                     {
-                        arguments.Add(null);
+                        arguments.Add(argValue.Trim(s_singleQuoteChar));
+                    }
+                    else if (argValue[0] == '`' && argValue[argValue.Length - 1] == '`')
+                    {
+                        arguments.Add(argValue.Trim(s_backtickChar));
+                    }
+                    else if (argValue[0] == '"' && argValue[argValue.Length - 1] == '"')
+                    {
+                        arguments.Add(argValue.Trim(s_doubleQuoteChar));
                     }
                     else
                     {
                         arguments.Add(argValue);
                     }
                 }
-            }
-            else
-            {
-                arguments.Add(string.Empty);
+                else
+                {
+                    arguments.Add(argValue);
+                }
             }
         }
 
@@ -975,13 +972,10 @@ internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTa
                         using SpanBasedStringBuilder finalResultBuilder = Strings.GetSpanBasedStringBuilder();
 
                         int start = 0;
-                        MetadataMatchEvaluator matchMetadataEvaluator = null;
-                        MatchEvaluator matchEvaluator = null;
+                        MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options, elementLocation, loggingContext);
 
-                        if (itemVectorExpressions != null && itemVectorExpressions.Count > 0)
+                        if (itemVectorExpressions != null)
                         {
-                            matchMetadataEvaluator ??= new MetadataMatchEvaluator(metadata, options, elementLocation, loggingContext);
-                            matchEvaluator ??= new MatchEvaluator(matchMetadataEvaluator.ExpandSingleMetadata);
                             // Move over the expression, skipping those that have been recognized as an item vector expression
                             // Anything other than an item vector expression we want to expand bare metadata in.
                             for (int n = 0; n < itemVectorExpressions.Count; n++)
@@ -991,7 +985,7 @@ internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTa
                                 // Extract the part of the expression that appears before the item vector expression
                                 // e.g. the ABC in ABC@(foo->'%(FullPath)')
                                 string subExpressionToReplaceIn = expression.Substring(start, itemVectorExpressions[n].Index - start);
-                                string replacementResult = RegularExpressions.NonTransformItemMetadataRegex.Replace(subExpressionToReplaceIn, matchEvaluator);
+                                string replacementResult = RegularExpressions.NonTransformItemMetadataRegex.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
 
                                 // Append the metadata replacement
                                 finalResultBuilder.Append(replacementResult);
@@ -999,7 +993,7 @@ internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTa
                                 // Expand any metadata that appears in the item vector expression's separator
                                 if (itemVectorExpressions[n].Separator != null)
                                 {
-                                    vectorExpression = RegularExpressions.NonTransformItemMetadataRegex.Replace(itemVectorExpressions[n].Value, matchEvaluator, -1, itemVectorExpressions[n].SeparatorStart);
+                                    vectorExpression = RegularExpressions.NonTransformItemMetadataRegex.Replace(itemVectorExpressions[n].Value, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata), -1, itemVectorExpressions[n].SeparatorStart);
                                 }
 
                                 // Append the item vector expression as is
@@ -1015,10 +1009,8 @@ internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTa
                         // then we need to metadata replace and then append that
                         if (start < expression.Length)
                         {
-                            matchMetadataEvaluator ??= new MetadataMatchEvaluator(metadata, options, elementLocation, loggingContext);
-                            matchEvaluator ??= new MatchEvaluator(matchMetadataEvaluator.ExpandSingleMetadata);
                             string subExpressionToReplaceIn = expression.Substring(start);
-                            string replacementResult = RegularExpressions.NonTransformItemMetadataRegex.Replace(subExpressionToReplaceIn, matchEvaluator);
+                            string replacementResult = RegularExpressions.NonTransformItemMetadataRegex.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));
 
                             finalResultBuilder.Append(replacementResult);
                         }
@@ -1118,12 +1110,7 @@ _metadata is IItemTypeDefinition itemMetadata &&
 
                         if (IsTruncationEnabled(_options) && metadataValue.Length > CharacterLimitPerExpansion)
                         {
-                            Span<char> trimmedMetadataSpan = stackalloc char[CharacterLimitPerExpansion];
-                            metadataValue.AsSpan().Slice(0, CharacterLimitPerExpansion - 3).CopyTo(trimmedMetadataSpan);
-                            trimmedMetadataSpan[trimmedMetadataSpan.Length - 3] = '.';
-                            trimmedMetadataSpan[trimmedMetadataSpan.Length - 2] = '.';
-                            trimmedMetadataSpan[trimmedMetadataSpan.Length - 1] = '.';
-                            metadataValue = trimmedMetadataSpan.ToString();
+                            metadataValue = metadataValue.Substring(0, CharacterLimitPerExpansion - 3) + "...";
                         }
                     }
 
@@ -2049,7 +2036,7 @@ internal static bool ExpandExpressionCapture<S>(
                 if (!isTransformExpression)
                 {
                     // No transform: expression is like @(Compile), so include the item spec without a transform base item
-                    foreach (S item in itemsOfType.GetStructEnumerable())
+                    foreach (S item in itemsOfType)
                     {
                         if ((item.EvaluatedIncludeEscaped.Length > 0) && (options & ExpanderOptions.BreakOnNotEmpty) != 0)
                         {
@@ -2441,7 +2428,7 @@ internal static IEnumerable<KeyValuePair<string, S>> Exists(Expander<P, I> expan
                             ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidItemFunctionExpression", functionName, item.Key, e.Message);
                         }
 
-                        if (NativeMethods.FileOrDirectoryExists(rootedPath))
+                        if (File.Exists(rootedPath) || Directory.Exists(rootedPath))
                         {
                             yield return item;
                         }
diff --git a/src/StringTools/SpanBasedStringBuilder.cs b/src/StringTools/SpanBasedStringBuilder.cs
index c969d00cb38..01c9c70c18c 100644
--- a/src/StringTools/SpanBasedStringBuilder.cs
+++ b/src/StringTools/SpanBasedStringBuilder.cs
@@ -77,33 +77,6 @@ public bool MoveNext()
             }
         }
 
-        public char this[int index]
-        {
-            get
-            {
-                if ((uint)index >= (uint)Length)
-                {
-                    throw new IndexOutOfRangeException(nameof(index));
-                }
-
-                int currentIndex = index;
-                for (int spanIdx = 0; spanIdx < _spans.Count; spanIdx++)
-                {
-                    ReadOnlySpan<char> span = _spans[spanIdx].Span;
-                    if (currentIndex < span.Length)
-                    {
-                        return span[currentIndex];
-                    }
-                    else
-                    {
-                        currentIndex -= span.Length;
-                    }
-                }
-
-                throw new IndexOutOfRangeException(nameof(index));
-            }
-        }
-
         /// <summary>
         /// Spans making up the rope.
         /// </summary>
@@ -253,31 +226,6 @@ public void TrimStart()
             }
         }
 
-        /// <summary>
-        /// Removes leading white-space characters from the string.
-        /// </summary>
-        public void TrimStart(char c)
-        {
-            for (int spanIdx = 0; spanIdx < _spans.Count; spanIdx++)
-            {
-                ReadOnlySpan<char> span = _spans[spanIdx].Span;
-                int i = 0;
-                while (i < span.Length && span[i] == c)
-                {
-                    i++;
-                }
-                if (i > 0)
-                {
-                    _spans[spanIdx] = _spans[spanIdx].Slice(i);
-                    Length -= i;
-                }
-                if (!_spans[spanIdx].IsEmpty)
-                {
-                    return;
-                }
-            }
-        }
-
         /// <summary>
         /// Removes trailing white-space characters from the string.
         /// </summary>
@@ -303,31 +251,6 @@ public void TrimEnd()
             }
         }
 
-        /// <summary>
-        /// Removes trailing characters from the string.
-        /// </summary>
-        public void TrimEnd(char c)
-        {
-            for (int spanIdx = _spans.Count - 1; spanIdx >= 0; spanIdx--)
-            {
-                ReadOnlySpan<char> span = _spans[spanIdx].Span;
-                int i = span.Length - 1;
-                while (i >= 0 && span[i] == c)
-                {
-                    i--;
-                }
-                if (i + 1 < span.Length)
-                {
-                    _spans[spanIdx] = _spans[spanIdx].Slice(0, i + 1);
-                    Length -= span.Length - (i + 1);
-                }
-                if (!_spans[spanIdx].IsEmpty)
-                {
-                    return;
-                }
-            }
-        }
-
         /// <summary>
         /// Removes leading and trailing white-space characters from the string.
         /// </summary>
@@ -337,15 +260,6 @@ public void Trim()
             TrimEnd();
         }
 
-        /// <summary>
-        /// Removes leading and trailing characters from the string.
-        /// </summary>
-        public void Trim(char c)
-        {
-            TrimStart(c);
-            TrimEnd(c);
-        }
-
         /// <summary>
         /// Clears this instance making it represent an empty string.
         /// </summary>
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index f85dc93eb7e..cf3ad3dad96 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -456,7 +456,9 @@ private AssemblyNameExtension GetAssemblyName(string path)
             // then we can short-circuit the File IO involved with GetAssemblyName()
             if (redistList != null)
             {
-                if (!string.IsNullOrEmpty(path) && path.EndsWith(".dll", StringComparison.OrdinalIgnoreCase))
+                string extension = Path.GetExtension(path);
+
+                if (string.Equals(extension, ".dll", StringComparison.OrdinalIgnoreCase))
                 {
                     IEnumerable<AssemblyEntry> assemblyNames = redistList.FindAssemblyNameFromSimpleName(
                             Path.GetFileNameWithoutExtension(path));
