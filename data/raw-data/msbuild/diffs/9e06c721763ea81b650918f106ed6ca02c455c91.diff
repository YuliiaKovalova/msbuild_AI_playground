diff --git a/documentation/release-checklist.md b/documentation/release-checklist.md
index bd8edb74895..d59eb78841d 100644
--- a/documentation/release-checklist.md
+++ b/documentation/release-checklist.md
@@ -129,3 +129,9 @@ Timing based on the [(Microsoft-internal) release schedule](https://dev.azure.co
   git push upstream v{{THIS_RELEASE_VERSION}}.3
   ```
   - [ ]  Create Release in Github with `Create Release from Tag` GH option (https://github.com/dotnet/msbuild/releases/new?tag=v17.9.3) - the release notes can be prepopulated (`Generate Release Notes`)
+
+## After release
+
+If v{{NEXT_VERSION}} is a new major version
+
+- [ ] do Major version extra update steps from [release.md](./release.md)
diff --git a/documentation/release.md b/documentation/release.md
index 4ab6769c13a..febe2cc1317 100644
--- a/documentation/release.md
+++ b/documentation/release.md
@@ -18,7 +18,7 @@ As of [#7018](https://github.com/dotnet/msbuild/pull/7018), MSBuild uses a Rosly
 
 That is a new step in our release process for each formal release (including patch releases if they change API surface).
 
-## Major release extra release steps
+## Major version extra update steps
 
 Update major version of VS in
 
diff --git a/measure.ps1 b/measure.ps1
new file mode 100644
index 00000000000..877a067c0cb
--- /dev/null
+++ b/measure.ps1
@@ -0,0 +1,38 @@
+$results = @()
+
+for ($i = 1; $i -le 10; $i++) {
+    $time = Measure-Command {
+        # Place the script or command you want to measure here
+        # For example:
+        dotnet build msbuild.binlog
+    }
+    $results += [pscustomobject]@{
+        Iteration = $i
+        Duration  = $time.TotalMilliseconds
+    }
+}
+
+# Display or export the results
+$results | Format-Table -AutoSize
+$results | Export-Csv -Path "timings.csv" -NoTypeInformation
+
+
+# second
+$results = @()
+
+for ($i = 1; $i -le 100; $i++) {
+    $time = Measure-Command {
+        # Place the script or command you want to measure here
+        # For example:
+        .\artifacts\bin\bootstrap\core\dotnet.exe build msbuild.binlog
+    }
+    $results += [pscustomobject]@{
+        Iteration = $i
+        Duration  = $time.TotalMilliseconds
+    }
+}
+
+# Display or export the results
+$results | Format-Table -AutoSize
+$results | Export-Csv -Path "timings2.csv" -NoTypeInformation
+
diff --git a/src/Build.UnitTests/BackEnd/OpenTelemetryActivities_Tests.cs b/src/Build.UnitTests/BackEnd/OpenTelemetryActivities_Tests.cs
index 49768a3b35d..cd041632de2 100644
--- a/src/Build.UnitTests/BackEnd/OpenTelemetryActivities_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OpenTelemetryActivities_Tests.cs
@@ -22,7 +22,7 @@ public void WithTag_ShouldSetUnhashedValue()
             var telemetryItem = new TelemetryItem(
                 Name: "TestItem",
                 Value: "TestValue",
-                Hashed: false);
+                NeedsHashing: false);
 
             activity.WithTag(telemetryItem);
 
@@ -40,7 +40,7 @@ public void WithTag_ShouldSetHashedValue()
             var telemetryItem = new TelemetryItem(
                 Name: "TestItem",
                 Value: "SensitiveValue",
-                Hashed: true);
+                NeedsHashing: true);
 
             activity.WithTag(telemetryItem);
 
diff --git a/src/Framework/Telemetry/ActivityExtensions.cs b/src/Framework/Telemetry/ActivityExtensions.cs
index b2e0f34a9ca..91648067ae2 100644
--- a/src/Framework/Telemetry/ActivityExtensions.cs
+++ b/src/Framework/Telemetry/ActivityExtensions.cs
@@ -39,7 +39,7 @@ public static Activity WithTags(this Activity activity, IList<TelemetryItem> tag
         /// </summary>
         public static Activity WithTag(this Activity activity, TelemetryItem item)
         {
-            object value = item.Hashed ? GetHashed(item.Value) : item.Value;
+            object value = item.NeedsHashing ? GetHashed(item.Value) : item.Value;
             activity.SetTag($"{TelemetryConstants.PropertyPrefix}{item.Name}", value);
             return activity;
         }
@@ -78,24 +78,24 @@ public static string Hash(string text)
 #if NET9_0_OR_GREATER
                 return Convert.ToHexStringLower(hash);
 #else
-            return Convert.ToHexString(hash).ToLowerInvariant();
+                return Convert.ToHexString(hash).ToLowerInvariant();
 #endif
 
 #else
-            // Create the SHA256 object and compute the hash
-            using (var sha256 = SHA256.Create())
-            {
-                byte[] hash = sha256.ComputeHash(bytes);
-
-                // Convert the hash bytes to a lowercase hex string (manual loop approach)
-                var sb = new StringBuilder(hash.Length * 2);
-                foreach (byte b in hash)
+                // Create the SHA256 object and compute the hash
+                using (var sha256 = SHA256.Create())
                 {
-                    sb.AppendFormat("{0:x2}", b);
-                }
+                    byte[] hash = sha256.ComputeHash(bytes);
 
-                return sb.ToString();
-            }
+                    // Convert the hash bytes to a lowercase hex string (manual loop approach)
+                    var sb = new StringBuilder(hash.Length * 2);
+                    foreach (byte b in hash)
+                    {
+                        sb.AppendFormat("{0:x2}", b);
+                    }
+
+                    return sb.ToString();
+                }
 #endif
             }
 
diff --git a/src/Framework/Telemetry/OpenTelemetryManager.cs b/src/Framework/Telemetry/OpenTelemetryManager.cs
index 5b8edf24d20..aa719dc2c07 100644
--- a/src/Framework/Telemetry/OpenTelemetryManager.cs
+++ b/src/Framework/Telemetry/OpenTelemetryManager.cs
@@ -56,8 +56,15 @@ private OpenTelemetryManager()
         /// <param name="isStandalone">Differentiates between executing as MSBuild.exe or from VS/API.</param>
         public void Initialize(bool isStandalone)
         {
+            // for lock free early exit
+            if (_telemetryState != TelemetryState.Uninitialized)
+            {
+                return;
+            }
+
             lock (_initializeLock)
             {
+                // for correctness
                 if (_telemetryState != TelemetryState.Uninitialized)
                 {
                     return;
@@ -95,16 +102,11 @@ public void Initialize(bool isStandalone)
 
                 // }
             }
-            catch (Exception ex)
+            catch (Exception ex) when (ex is System.IO.FileNotFoundException or System.IO.FileLoadException)
             {
                 // catch exceptions from loading the OTel SDK or Collector to maintain usability of Microsoft.Build.Framework package in our and downstream tests in VS.
-                if (ex is System.IO.FileNotFoundException or System.IO.FileLoadException)
-                {
-                    _telemetryState = TelemetryState.Unsampled;
-                    return;
-                }
-
-                throw;
+                _telemetryState = TelemetryState.Unsampled;
+                return;
             }
 #endif
         }
@@ -129,7 +131,7 @@ private void InitializeTracerProvider()
 
             TracerProviderBuilder tracerProviderBuilder = Sdk
                 .CreateTracerProviderBuilder()
-                // this adds listeners to ActivitySources with the prefix "Microsoft.VisualStudio.OpenTelemetry."
+                                // this adds listeners to ActivitySources with the prefix "Microsoft.VisualStudio.OpenTelemetry."
                                 .AddVisualStudioDefaultTraceExporter(exporterSettings);
 
             _tracerProvider = tracerProviderBuilder.Build();
diff --git a/src/Framework/Telemetry/TelemetryItem.cs b/src/Framework/Telemetry/TelemetryItem.cs
index 94605d8d5a1..f037d7ddbea 100644
--- a/src/Framework/Telemetry/TelemetryItem.cs
+++ b/src/Framework/Telemetry/TelemetryItem.cs
@@ -3,4 +3,4 @@
 
 namespace Microsoft.Build.Framework.Telemetry;
 
-internal record TelemetryItem(string Name, object Value, bool Hashed);
+internal record TelemetryItem(string Name, object Value, bool NeedsHashing);
