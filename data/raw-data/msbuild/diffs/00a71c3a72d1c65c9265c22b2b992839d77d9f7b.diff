diff --git a/documentation/wiki/Logging-Internals.md b/documentation/wiki/Logging-Internals.md
index baf0edd5b7e..d81a36fb5fd 100644
--- a/documentation/wiki/Logging-Internals.md
+++ b/documentation/wiki/Logging-Internals.md
@@ -1,11 +1,11 @@
 # Logging Internals
 
-MSBuild allows to plug inbox and custom loggers - those can be registered via the API or CLI and will be receiving rich tracing information during the build process (here as well referred as `BuildEventArgs`). Detailed article from user point of view can be found on Microsoft Learn: [Build Loggers](https://learn.microsoft.com/en-us/visualstudio/msbuild/build-loggers)
+MSBuild allows plugging in inbox and custom loggers - those can be registered via the API or CLI and will be receiving rich tracing information during the build process (here as well referred to as `BuildEventArgs`). Detailed article from user point of view can be found on Microsoft Learn: [Build Loggers](https://learn.microsoft.com/en-us/visualstudio/msbuild/build-loggers)
 
 
 Logging architecture allows usage in distributed execution nature of MSBuild (as [MSBuild has multi-process execution modes](Nodes-Orchestration.md#need-for-multiple-processes)) while pluggable logger might decide to be aware of the situation (then we speak about so called '*Distributed Loggers*') or they can operate in a mode where the distributed execution is not visible to them (they can be referred to as '*Central Loggers*'). Detailed article from user point of view can be found on Microsoft Learn: [Write multi-processor-aware loggers](https://learn.microsoft.com/en-us/visualstudio/msbuild/writing-multi-processor-aware-loggers) and [Create forwarding loggers](https://learn.microsoft.com/en-us/visualstudio/msbuild/creating-forwarding-loggers)
 
-In this document we'll be describing mainly the internal design and implementation of the Logging infrastructure. We won't be going into actual implementation of individual loggers or a way to author custom one. So this is mainly targeted to MSBuild project developer or a curious user.
+In this document we'll be describing mainly the internal design and implementation of the Logging infrastructure. We won't be going into actual implementation of individual loggers or a way to author custom one. So, this document is mainly targeted to MSBuild project developer or a curious user.
 
 ## Terminology
 
@@ -15,7 +15,7 @@ In this document we'll be describing mainly the internal design and implementati
 * **Logger** - an implementor of `ILogger` (or `INodeLogger`) interface. Such a component then can be registered to receive detailed tracing info from the build process and process the info further. The most common use-case is logging the information into the console, file etc. - hence the name 'Logger', but it can be processed for other purposes (e.g. the [ParallelBuildDebuggingLogger](https://github.com/rainersigwald/parallelbuilddebugginglogger) for debugging purposes, or the BuildCheck for diagnostics).
 * **Central Logger** - a logger that runs in the Central node - as well here referred to as the 'Entrypoint Node'. It receives the information from the whole build regardless of if it's executed within single or multiple processes.
 * **Forwarding Logger** - a logger that has a single instance in each logical executing node and is capable of filtering and/or alter the tracing stream formed of the `BuildEventArg`s before it undergoes serialization and remoting into the Entrypoint node. Main built-in implementations are: `CentralForwardingLogger` and `ConfigurableForwardingLogger`.
-* **Distributed Logger** - It is a pair of Central Logger and a 'Forwarding Logger'
+* **Distributed Logger** - It is a pair of a Central Logger and a Forwarding Logger.
 * <a name="LoggerDescription"></a>**LoggerDescription** - Serializable information describing the Forwarding Logger - so that the forwarding logger can be constructed in the OOP node. It also holds the 'LoggerId' (AKA 'SinkId') - so that the remote data can be properly routed to the Central Logger. Other notable datapoints are `Verbosity` and `LoggerSwitchParameters` - which both serves for proper initialization of the forwarder after it's constructed in OOP node.
 
   ![Distributed Logger](distnode.png)
@@ -49,7 +49,7 @@ There is a single instance in the Entrypoint node, single instance within each o
 <a name="InitializeNodeLoggers"></a>**`InitializeNodeLoggers(ICollection<LoggerDescription> descriptions, IBuildEventSink forwardingLoggerSink, int nodeId)`**
 * Called from OutOfProcNode.HandleNodeConfiguration - which handles NodeConfiguration 'packet' from the node -> node communiction. (This is as well when the environment and various build-wide configurations - like including evaluated properties in EvaluationFinished events - are received and applied, and as well when LoggingService in OOP node is created)
 * `BuildEventArgTransportSink` is passed to the LoggingService - it is attached to each forwarding logger together with the central logger id, within a `EventRedirectorToSink`
-* `BuildEventArgTransportSink` takes care about bundling the build events together with the target logger id (in some contexts referred as sinkId) and sending them through node -> node communication
+* `BuildEventArgTransportSink` takes care about bundling the build events together with the target logger id (in some contexts referred to as sinkId) and sending them through node -> node communication
 	
 <a name="ProcessLoggingEvent"></a>**`ProcessLoggingEvent(object buildEvent)`**
 * Ingestion point of build events
@@ -59,7 +59,7 @@ There is a single instance in the Entrypoint node, single instance within each o
 * The isolated delivery however means that a single slow logger can block all others and that the event consuming time is a sum of all loggers consuming times.
  
  
- ### Delivery of events in a single node build
+ ### Delivery of events in a single-node build
 
 * There is 1 instance of LoggingService per build.
 * It holds 1 instance of EventSourceSink pumping events to forwarders.
@@ -67,7 +67,7 @@ There is a single instance in the Entrypoint node, single instance within each o
 Example of forwarders:
   * `CentralForwardingLogger`
   * `ConfigurableForwardingLogger`
-* Each forwarder process the trace stream and forwards to an `EventRedirectorToSink` (1 redirector per 1 forwarder)
+* Each forwarder process the trace stream and may choose to forward to an `EventRedirectorToSink` (1 redirector per 1 forwarder)
 * `EventRedirectorToSink` forwards to `EventSourceSink` (the instance of `EventSourceSink` was passed to `EventRedirectorToSink` during its construction). There is 1 `EventSourceSink` per each `EventRedirectorToSink`
 * `EventSourceSink` distributes events to registered Loggers. There can be multiple registered Loggers to the single `EventSourceSink` (this is the case when Logger was registered as 'Central Logger' via [`RegisterLogger`](#RegisterLogger)).
 
@@ -92,7 +92,7 @@ The initial part of the workflow of logging is identical to the in-proc delivery
 Example of forwarders:
   * `CentralForwardingLogger`
   * `ConfigurableForwardingLogger`
-* Each forwarder processes the trace stream and forwards to an `EventRedirectorToSink` (1 redirector per 1 forwarder)
+* Each forwarder processes the trace stream and optionally forwards each event to an `EventRedirectorToSink` (1 redirector per 1 forwarder)
 
 Processing from `EventRedirectorToSink` differs. This is given by injection of a single sink `BuildEventArgTransportSink` (injected via [`InitializeNodeLoggers`](#InitializeNodeLoggers)) as a consumer of `EventRedirectorToSink` data:
 
@@ -107,7 +107,7 @@ Illustrative stack of the sequence of the calls:
 
 ![OOP Node Logging - stack](OOPLoggingStack.png)
 
- #### Entrypoint Node
+ #### Scheduler Node
 
  * `LoggingService` recives the remoted data - the instance of `BuildEventArgs` bundled with the SinkId.
  * Based on the SinkId the `LoggingService` routes the received data to the registered `EventSourceSink` (one per registered forwarder).
