diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 8230defe4f0..b070e47ccfb 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -26,7 +26,7 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 ### 17.8
 - [[RAR] Don't do I/O on SDK-provided references](https://github.com/dotnet/msbuild/pull/8688)
 - [Delete destination file before copy](https://github.com/dotnet/msbuild/pull/8685)
-- [Relay remoted exceptions over to single squashed exception type](https://github.com/dotnet/msbuild/pull/8779)
+- [New serialization approach for transferring build exceptions between processes](https://github.com/dotnet/msbuild/pull/8779)
 
 ### 17.6
 - [Parse invalid property under target](https://github.com/dotnet/msbuild/pull/8190)
diff --git a/src/Framework/BuildException/BuildExceptionBase.cs b/src/Framework/BuildException/BuildExceptionBase.cs
index af9cfb9f8e8..6d4fb677759 100644
--- a/src/Framework/BuildException/BuildExceptionBase.cs
+++ b/src/Framework/BuildException/BuildExceptionBase.cs
@@ -29,7 +29,7 @@ private protected BuildExceptionBase(
         : base(message, inner)
     { }
 
-    // This is needed as soon as we allow opt out of the non-BinaryFormatter serialization
+    // This is needed to allow opting back in to BinaryFormatter serialization
     private protected BuildExceptionBase(SerializationInfo info, StreamingContext context)
         : base(info, context)
     { }
@@ -38,12 +38,18 @@ private protected BuildExceptionBase(SerializationInfo info, StreamingContext co
 
     public override string ToString() => string.IsNullOrEmpty(_remoteTypeName) ? base.ToString() : $"{_remoteTypeName}->{base.ToString()}";
 
+    /// <summary>
+    /// Override this method to recover subtype-specific state from the remote exception.
+    /// </summary>
     protected virtual void InitializeCustomState(IDictionary<string, string?>? customKeyedSerializedData)
-    { /* This is it. Override for exceptions with custom state */ }
+    { }
 
+    /// <summary>
+    /// Override this method to provide subtype-specific state to be serialized.
+    /// </summary>
+    /// <returns></returns>
     protected virtual IDictionary<string, string?>? FlushCustomState()
     {
-        /* This is it. Override for exceptions with custom state */
         return null;
     }
 
diff --git a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
index f3532f6756b..e098c5a7b8d 100644
--- a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
+++ b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
@@ -25,7 +25,7 @@ internal static bool IsSupportedExceptionType(Type type)
                    type.IsSubclassOf(typeof(BuildExceptionBase));
         }
 
-        internal static void InitializeSerializationContract(params Type[] exceptionTypesWhitelist)
+        internal static void InitializeSerializationContract(params Type[] exceptionTypesAllowlist)
         {
             InitializeSerializationContract((IEnumerable<Type>)exceptionTypesWhitelist);
         }
