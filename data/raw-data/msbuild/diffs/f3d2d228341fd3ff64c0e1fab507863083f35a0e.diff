diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
index 41bc1a70494..6babb127ce7 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-
 using System.Configuration;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
diff --git a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
index 2e44a4239a9..c90b546da38 100644
--- a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
@@ -3,9 +3,7 @@
 
 using System;
 using System.Collections.Generic;
-#if FEATURE_SYSTEM_CONFIGURATION
 using System.Configuration;
-#endif
 using System.IO;
 
 using Microsoft.Build.Collections;
diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index da2f1fc518e..1781342fefb 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -2,9 +2,12 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 #if FEATURE_SYSTEM_CONFIGURATION
+// NOTE: This test WOULD work in net5.0 after the System.Configuration.ConfigurationManager change. However, it would
+//       only work if ToolsetDefinitionLocations is set to ConfigurationFile and that ReadApplicationConfiguration in
+//       ToolsetConfigurationReader.cs removes the RunningTests condition since ConfigurationManager.OpenExeConfiguration
+//       would try to get testhost.exe.config instead of the actual configuration file. But those changes seems more 
+//       fitting as a different test rather than making all these changes instead.
 
-using System.Configuration;
-using Microsoft.Win32;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
@@ -15,7 +18,6 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using Microsoft.Build.UnitTests;
 
 namespace Microsoft.Build.UnitTests.Evaluation
 {
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 9471945f4e3..a75a28c248a 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1737,6 +1737,7 @@ internal void ResetToolsetsForTests(ToolsetConfigurationReader configurationRead
             InitializeToolsetCollection(configReader:configurationReaderForTestsOnly);
         }
 
+#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Reset the toolsets using the provided toolset reader, used by unit tests
         /// </summary>
@@ -1744,13 +1745,16 @@ internal void ResetToolsetsForTests(ToolsetRegistryReader registryReaderForTests
         {
             InitializeToolsetCollection(registryReader:registryReaderForTestsOnly);
         }
+#endif
 
         /// <summary>
         /// Populate Toolsets with a dictionary of (toolset version, Toolset)
         /// using information from the registry and config file, if any.
         /// </summary>
         private void InitializeToolsetCollection(
+#if FEATURE_WIN32_REGISTRY
                 ToolsetRegistryReader registryReader = null,
+#endif
                 ToolsetConfigurationReader configReader = null
                 )
         {
@@ -1758,7 +1762,9 @@ private void InitializeToolsetCollection(
 
             // We only want our local toolset (as defined in MSBuild.exe.config) when we're operating locally...
             _defaultToolsVersion = ToolsetReader.ReadAllToolsets(_toolsets,
+#if FEATURE_WIN32_REGISTRY
                     registryReader,
+#endif
                     configReader,
                     EnvironmentProperties, _globalProperties, ToolsetLocations);
 
@@ -2026,9 +2032,9 @@ public void IncludeTaskInputs()
 
                 _includeTaskInputs = true;
             }
-            #endregion
+#endregion
 
-            #region ILogger Members
+#region ILogger Members
 
             /// <summary>
             /// The logger verbosity
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index 56591a93104..869b3318ea4 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -84,7 +84,9 @@ protected abstract string DefaultOverrideToolsVersion
         internal static string ReadAllToolsets(Dictionary<string, Toolset> toolsets, PropertyDictionary<ProjectPropertyInstance> environmentProperties, PropertyDictionary<ProjectPropertyInstance> globalProperties, ToolsetDefinitionLocations locations)
         {
             return ReadAllToolsets(toolsets,
+#if FEATURE_WIN32_REGISTRY
                 null,
+#endif
                 null,
                 environmentProperties, globalProperties, locations);
         }
@@ -96,7 +98,9 @@ internal static string ReadAllToolsets(Dictionary<string, Toolset> toolsets, Pro
         internal static string ReadAllToolsets
             (
             Dictionary<string, Toolset> toolsets,
+#if FEATURE_WIN32_REGISTRY
             ToolsetRegistryReader registryReader,
+#endif
             ToolsetConfigurationReader configurationReader,
             PropertyDictionary<ProjectPropertyInstance> environmentProperties,
             PropertyDictionary<ProjectPropertyInstance> globalProperties,
@@ -133,6 +137,7 @@ ToolsetDefinitionLocations locations
 
             if ((locations & ToolsetDefinitionLocations.Registry) == ToolsetDefinitionLocations.Registry)
             {
+#if FEATURE_WIN32_REGISTRY
                 if (NativeMethodsShared.IsWindows || registryReader != null)
                 {
                     // If we haven't been provided a registry reader (i.e. unit tests), create one
@@ -146,6 +151,7 @@ ToolsetDefinitionLocations locations
                         out defaultOverrideToolsVersionFromRegistry);
                 }
                 else
+#endif
                 {
                     var currentDir = BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory.TrimEnd(Path.DirectorySeparatorChar);
                     var props = new PropertyDictionary<ProjectPropertyInstance>();
diff --git a/src/Build/Definition/ToolsetRegistryReader.cs b/src/Build/Definition/ToolsetRegistryReader.cs
index 7b1bfc4dd76..e2081dc5ad7 100644
--- a/src/Build/Definition/ToolsetRegistryReader.cs
+++ b/src/Build/Definition/ToolsetRegistryReader.cs
@@ -1,6 +1,8 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if FEATURE_WIN32_REGISTRY
+
 using System;
 using System.Collections.Generic;
 
@@ -341,3 +343,4 @@ private static string GetValue(RegistryKeyWrapper wrapper, string valueName)
         }
     }
 }
+#endif
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 2295b0d24ad..46b0bb0a1ea 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -24,9 +24,11 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal static class IntrinsicFunctions
     {
+#if FEATURE_WIN32_REGISTRY
         private static readonly object[] DefaultRegistryViews = new object[] { RegistryView.Default };
 
         private static readonly Lazy<Regex> RegistrySdkRegex = new Lazy<Regex>(() => new Regex(@"^HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Microsoft SDKs\\Windows\\v(\d+\.\d+)$", RegexOptions.IgnoreCase));
+#endif // FEATURE_WIN32_REGISTRY
 
         private static readonly Lazy<NuGetFrameworkWrapper> NuGetFramework = new Lazy<NuGetFrameworkWrapper>(() => new NuGetFrameworkWrapper());
 
@@ -158,6 +160,7 @@ internal static int BitwiseNot(int first)
             return ~first;
         }
 
+#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Get the value of the registry key and value, default value is null
         /// </summary>
@@ -256,6 +259,33 @@ internal static object GetRegistryValueFromView(string keyName, string valueName
             return result;
         }
 
+#else // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors	
+
+        /// <summary>	
+        /// Get the value of the registry key and value, default value is null	
+        /// </summary>	
+        internal static object GetRegistryValue(string keyName, string valueName)
+        {
+            return null; // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors	
+        }
+
+        /// <summary>	
+        /// Get the value of the registry key and value	
+        /// </summary>	
+        internal static object GetRegistryValue(string keyName, string valueName, object defaultValue)
+        {
+            return defaultValue; // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors	
+        }
+
+        /// <summary>	
+        /// Get the value of the registry key from one of the RegistryView's specified	
+        /// </summary>	
+        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)
+        {
+            return defaultValue; // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors	
+        }
+#endif
+
         /// <summary>
         /// Given the absolute location of a file, and a disc location, returns relative file path to that disk location.
         /// Throws UriFormatException.
@@ -539,8 +569,9 @@ internal static List<string> __GetListTest()
             return new List<string> { "A", "B", "C", "D" };
         }
 
-#endregion
+        #endregion
 
+#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Following function will parse a keyName and returns the basekey for it.
         /// It will also store the subkey name in the out parameter.
@@ -609,5 +640,6 @@ private static RegistryKey GetBaseKeyFromKeyName(string keyName, RegistryView vi
 
             return basekey;
         }
+#endif
     }
 }
diff --git a/src/Build/Utilities/RegistryKeyWrapper.cs b/src/Build/Utilities/RegistryKeyWrapper.cs
index 8ab3c88e6a9..c1503c698ef 100644
--- a/src/Build/Utilities/RegistryKeyWrapper.cs
+++ b/src/Build/Utilities/RegistryKeyWrapper.cs
@@ -1,5 +1,6 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#if FEATURE_WIN32_REGISTRY
 
 using System;
 
@@ -266,3 +267,4 @@ private void Dispose(bool disposing)
         }
     }
 }
+#endif
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 89b5641c4c4..128b9c9f13d 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4,9 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.ComponentModel;
-#if FEATURE_SYSTEM_CONFIGURATION
 using System.Configuration;
-#endif
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index b3591623fae..6d48ace8c4b 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -2397,9 +2397,9 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
 
             if (NativeMethodsShared.IsWindows)
             {
-#pragma warning disable CA1416
+#pragma warning disable CA1416 // Suppress Warning saying that WindowsPrincipal might not be compatible on Windows (Which shouldn't be an issue...)
                 if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null)))
-#pragma warning restore CA1416
+#pragma warning restore CA1416 // Suppress Warning saying that WindowsPrincipal might not be compatible on Windows (Which shouldn't be an issue...)
                 {
                     isPrivileged = false;
                     Assert.True(true, "It seems that you don't have the permission to create symbolic links. Try to run this test again with higher privileges");
