diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index 1bfa14e0f34..07531f6633b 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -1,7 +1,5 @@
 <Project>
 
-  <Import Project="BootStrapMSBuild.props" />
-  
   <!--
   Copies the binaries of MSBuild to a bootstrap folder so we can rebuild msbuild with itself.
   On netcore it performs a directory copy.
diff --git a/src/Analyzers.UnitTests/AssemblyInfo.cs b/src/Analyzers.UnitTests/AssemblyInfo.cs
index 0f119a6530d..3b5d7bbb185 100644
--- a/src/Analyzers.UnitTests/AssemblyInfo.cs
+++ b/src/Analyzers.UnitTests/AssemblyInfo.cs
@@ -2,13 +2,3 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
-
-namespace Microsoft.Build.Analyzers.UnitTests;
-
-[System.AttributeUsage(System.AttributeTargets.Assembly)]
-internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)
-    : System.Attribute
-{
-    public string BootstrapRoot { get; } = bootstrapRoot;
-    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;
-}
diff --git a/src/Analyzers.UnitTests/BootstrapRunner.cs b/src/Analyzers.UnitTests/BootstrapRunner.cs
deleted file mode 100644
index edd3cbf5467..00000000000
--- a/src/Analyzers.UnitTests/BootstrapRunner.cs
+++ /dev/null
@@ -1,48 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-using System.Reflection;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.UnitTests.Shared;
-using Xunit.Abstractions;
-
-#if FEATURE_MSIOREDIST
-using Path = Microsoft.IO.Path;
-#endif
-
-namespace Microsoft.Build.Analyzers.UnitTests
-{
-    internal static class BootstrapRunner
-    {
-        // This should ideally be part of RunnerUtilities - however then we'd need to enforce
-        //  all test projects to import the BootStrapMSBuild.props file and declare the BootstrapLocationAttribute.
-        // Better solution would be to have a single test utility project - instead of linked code files.
-        public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper? outputHelper = null)
-        {
-            BootstrapLocationAttribute attribute = Assembly.GetExecutingAssembly().GetCustomAttribute<BootstrapLocationAttribute>()
-                ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
-
-            string binaryFolder = attribute.BootstrapMsbuildBinaryLocation;
-            string? bindirOverride = Environment.GetEnvironmentVariable("MSBUILD_BOOTSTRAPPED_BINDIR");
-            if (!string.IsNullOrEmpty(bindirOverride))
-            {
-                // The bootstrap environment has moved to another location. Assume the same relative layout and adjust the path.
-                string relativePath = Path.GetRelativePath(attribute.BootstrapRoot, binaryFolder);
-                binaryFolder = Path.GetFullPath(relativePath, bindirOverride);
-            }
-#if NET
-            string pathToExecutable = EnvironmentProvider.GetDotnetExePath()!;
-            msbuildParameters = Path.Combine(binaryFolder, "MSBuild.dll") + " " + msbuildParameters;
-#else
-            string pathToExecutable =
-                Path.Combine(binaryFolder, "msbuild.exe");
-#endif
-            return RunnerUtilities.RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
-        }
-    }
-}
diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
index 0a4e1b96438..82e01a169fd 100644
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ b/src/Analyzers.UnitTests/EndToEndTests.cs
@@ -108,8 +108,7 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
 
             _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", buildInOutOfProcessNode ? "1" : "0");
             _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "1");
-            // string output = RunnerUtilities.ExecMSBuild($"{projectFile.Path} /m:1 -nr:False", out bool success);
-            string output = BootstrapRunner.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
+            string output = RunnerUtilities.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
             _env.Output.WriteLine(output);
             success.ShouldBeTrue();
             // The conflicting outputs warning appears
diff --git a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
index 97111737da9..5890b8fce94 100644
--- a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
+++ b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
@@ -8,25 +8,16 @@
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
     <IsPackable>false</IsPackable>
     <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
-    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>
-    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>
   </PropertyGroup>
 
   <ItemGroup>
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
-    <ProjectReference Include="..\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj">
-      <Private>false</Private>
-      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
-    </ProjectReference>
   </ItemGroup>
 
   <ItemGroup>
     <PackageReference Include="System.Collections.Immutable" />
-    <PackageReference Include="FluentAssertions" />
-    <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
-    <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" PrivateAssets="all" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
     <PackageReference Include="Shouldly" />
     <PackageReference Include="System.Net.Http" />
   </ItemGroup>
@@ -50,13 +41,4 @@
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
   </ItemGroup>
-
-  <Import Project="..\..\eng\BootStrapMSBuild.props" />
-
-  <ItemGroup>
-    <AssemblyAttribute Include="Microsoft.Build.Analyzers.UnitTests.BootstrapLocationAttribute">
-      <_Parameter1>$(ArtifactsBinDir)</_Parameter1>
-      <_Parameter2>$(BootstrapBinaryDestination)</_Parameter2>
-    </AssemblyAttribute>
-  </ItemGroup>
 </Project>
diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index 4b8f3b07286..649c7488669 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -5,6 +5,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.BuildCop.Infrastructure;
 using Microsoft.Build.Engine.UnitTests.BackEnd;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
@@ -61,6 +62,8 @@ internal sealed class MockHost : MockLoggingService, IBuildComponentHost, IBuild
 
         private ISdkResolverService _sdkResolverService;
 
+        private IBuildCopManagerProvider _buildCopManagerProvider;
+
         #region SystemParameterFields
 
         #endregion;
@@ -126,6 +129,9 @@ public MockHost(BuildParameters buildParameters, ConfigCache overrideConfigCache
 
             _sdkResolverService = new MockSdkResolverService();
             ((IBuildComponent)_sdkResolverService).InitializeComponent(this);
+
+            _buildCopManagerProvider = new NullBuildCopManagerProvider();
+            ((IBuildComponent)_buildCopManagerProvider).InitializeComponent(this);
         }
 
         /// <summary>
@@ -194,6 +200,7 @@ public IBuildComponent GetComponent(BuildComponentType type)
                 BuildComponentType.ResultsCache => (IBuildComponent)_resultsCache,
                 BuildComponentType.RequestBuilder => (IBuildComponent)_requestBuilder,
                 BuildComponentType.SdkResolverService => (IBuildComponent)_sdkResolverService,
+                BuildComponentType.BuildCop => (IBuildComponent)_buildCopManagerProvider,
                 _ => throw new ArgumentException("Unexpected type " + type),
             };
         }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index aa8310d26a7..135e311eb8f 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2975,12 +2975,12 @@ private ILoggingService CreateLoggingService(
             loggingService.WarningsNotAsErrors = warningsNotAsErrors;
             loggingService.WarningsAsMessages = warningsAsMessages;
 
-            var buildCopManagerProvider =
-                ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCop) as BuildCopManagerProvider;
-            buildCopManagerProvider!.Instance.SetDataSource(BuildCopDataSource.EventArgs);
-
             if (((IBuildComponentHost)this).BuildParameters.IsBuildCopEnabled)
             {
+                var buildCopManagerProvider =
+                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCop) as IBuildCopManagerProvider;
+                buildCopManagerProvider!.Instance.SetDataSource(BuildCopDataSource.EventArgs);
+
                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]
                 {
                     new BuildCopConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCopManagerProvider.Instance)
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 6b880af201a..4932f0c2293 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -283,7 +283,7 @@ public void CleanupForBuild()
                         throw new AggregateException(deactivateExceptions);
                     }
 
-                    var buildCopManager = (_componentHost.GetComponent(BuildComponentType.BuildCop) as BuildCopManagerProvider)!.Instance;
+                    var buildCopManager = (_componentHost.GetComponent(BuildComponentType.BuildCop) as IBuildCopManagerProvider)!.Instance;
                     buildCopManager.FinalizeProcessing(_nodeLoggingContext);
                 },
                 isLastTask: true);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index e3bd9f69f58..ce2f4a1e79e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1120,7 +1120,7 @@ private async Task<BuildResult> BuildProject()
         {
             // We consider this the entrypoint for the project build for purposes of BuildCop processing 
 
-            var buildCopManager = (_componentHost.GetComponent(BuildComponentType.BuildCop) as BuildCopManagerProvider)!.Instance;
+            var buildCopManager = (_componentHost.GetComponent(BuildComponentType.BuildCop) as IBuildCopManagerProvider)!.Instance;
             buildCopManager.SetDataSource(BuildCopDataSource.BuildExecution);
 
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs b/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs
index 16bdd714ea2..d3510e8c2df 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs
@@ -11,9 +11,6 @@
 using Microsoft.Build.Experimental.BuildCop;
 using Microsoft.Build.Framework;
 
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
 namespace Microsoft.Build.BuildCop.Infrastructure;
 internal sealed class BuildCopConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCopManager buildCopManager)
     : ILogger
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs b/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
index 41e2c6fa01e..349d2078504 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
@@ -9,6 +9,7 @@
 using System.IO;
 using System.Linq;
 using System.Runtime.ConstrainedExecution;
+using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.Logging;
@@ -27,13 +28,16 @@ namespace Microsoft.Build.BuildCop.Infrastructure;
 internal delegate BuildAnalyzer BuildAnalyzerFactory();
 internal delegate BuildAnalyzerWrapper BuildAnalyzerWrapperFactory(ConfigurationContext configurationContext);
 
-internal sealed class BuildCopManagerProvider : IBuildComponent
+/// <summary>
+/// The central manager for the BuildCop - this is the integration point with MSBuild infrastructure.
+/// </summary>
+internal sealed class BuildCopManagerProvider : IBuildCopManagerProvider
 {
-    private static bool s_isInitialized = false;
+    private static int s_isInitialized = 0;
     private static IBuildCopManager s_globalInstance = new NullBuildCopManager();
-    internal static IBuildCopManager GlobalInstance => s_isInitialized ? s_globalInstance : throw new InvalidOperationException("BuildCopManagerProvider not initialized");
+    internal static IBuildCopManager GlobalInstance => s_isInitialized != 0 ? s_globalInstance : throw new InvalidOperationException("BuildCopManagerProvider not initialized");
 
-    internal IBuildCopManager Instance => GlobalInstance;
+    public IBuildCopManager Instance => GlobalInstance;
 
     internal static IBuildComponent CreateComponent(BuildComponentType type)
     {
@@ -45,11 +49,11 @@ public void InitializeComponent(IBuildComponentHost host)
     {
         ErrorUtilities.VerifyThrow(host != null, "BuildComponentHost was null");
 
-        if (s_isInitialized)
+        if (Interlocked.CompareExchange(ref s_isInitialized, 1, 0) == 1)
         {
-            throw new InvalidOperationException("BuildCopManagerProvider is already initialized");
+            // Already initialized
+            return;
         }
-        s_isInitialized = true;
 
         if (host!.BuildParameters.IsBuildCopEnabled)
         {
diff --git a/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs
index 75834e1305a..f6ecf0b91cf 100644
--- a/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCop/Infrastructure/CustomConfigurationData.cs
@@ -10,13 +10,32 @@
 
 namespace Microsoft.Build.Experimental.BuildCop;
 
+/// <summary>
+/// Holder for the key-value pairs of unstructured data from .editorconfig file,
+///  that were attribute to a particular rule, but were not recognized by the infrastructure.
+/// The configuration data that is recognized by the infrastructure is passed as <see cref="BuildAnalyzerConfiguration"/>.
+/// </summary>
+/// <param name="ruleId"></param>
 public class CustomConfigurationData(string ruleId)
 {
     public static CustomConfigurationData Null { get; } = new(string.Empty);
 
     public static bool NotNull(CustomConfigurationData data) => !Null.Equals(data);
 
+    /// <summary>
+    /// Identifier of the rule that the configuration data is for.
+    /// </summary>
     public string RuleId { get; init; } = ruleId;
+
+    /// <summary>
+    /// Key-value pairs of unstructured data from .editorconfig file.
+    /// E.g. if in editorconfig file we'd have:
+    /// [*.csrpoj]
+    /// build_analyzer.microsoft.BC0101.name_of_targets_to_restrict = "Build,CoreCompile,ResolveAssemblyReferences"
+    ///
+    /// the ConfigurationData would be:
+    /// "name_of_targets_to_restrict" -> "Build,CoreCompile,ResolveAssemblyReferences"
+    /// </summary>
     public IReadOnlyDictionary<string, string>? ConfigurationData { get; init; }
 
     public override bool Equals(object? obj)
diff --git a/src/Build/BuildCop/Infrastructure/IBuildCopManager.cs b/src/Build/BuildCop/Infrastructure/IBuildCopManager.cs
index 9d5d8c89f5a..2082c82f286 100644
--- a/src/Build/BuildCop/Infrastructure/IBuildCopManager.cs
+++ b/src/Build/BuildCop/Infrastructure/IBuildCopManager.cs
@@ -11,7 +11,6 @@
 using Microsoft.Build.BuildCop.Acquisition;
 using Microsoft.Build.BuildCop.Infrastructure;
 using Microsoft.Build.Framework;
-using static Microsoft.Build.BuildCop.Infrastructure.BuildCopManagerProvider;
 
 namespace Microsoft.Build.Experimental.BuildCop;
 
@@ -23,6 +22,9 @@ internal enum BuildCopDataSource
     ValuesCount = BuildExecution + 1
 }
 
+/// <summary>
+/// The central manager for the BuildCop - this is the integration point with MSBuild infrastructure.
+/// </summary>
 internal interface IBuildCopManager
 {
     void ProcessEvaluationFinishedEventArgs(
diff --git a/src/Build/BuildCop/Infrastructure/IBuildCopManagerProvider.cs b/src/Build/BuildCop/Infrastructure/IBuildCopManagerProvider.cs
new file mode 100644
index 00000000000..a58bc5ae321
--- /dev/null
+++ b/src/Build/BuildCop/Infrastructure/IBuildCopManagerProvider.cs
@@ -0,0 +1,17 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Experimental.BuildCop;
+
+namespace Microsoft.Build.BuildCop.Infrastructure;
+
+internal interface IBuildCopManagerProvider : IBuildComponent
+{
+    IBuildCopManager Instance { get; }
+}
diff --git a/src/Build/BuildCop/Infrastructure/NullBuildCopManagerProvider.cs b/src/Build/BuildCop/Infrastructure/NullBuildCopManagerProvider.cs
new file mode 100644
index 00000000000..3aaf8708347
--- /dev/null
+++ b/src/Build/BuildCop/Infrastructure/NullBuildCopManagerProvider.cs
@@ -0,0 +1,20 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Experimental.BuildCop;
+
+namespace Microsoft.Build.BuildCop.Infrastructure;
+
+internal class NullBuildCopManagerProvider : IBuildCopManagerProvider
+{
+    public IBuildCopManager Instance { get; } = new NullBuildCopManager();
+
+    public void InitializeComponent(IBuildComponentHost host) { }
+    public void ShutdownComponent() { }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 79128da19aa..d1ee0799fae 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -120,6 +120,9 @@
     <Compile Include="..\Shared\TaskLoggingHelperExtension.cs">
       <Link>BackEnd\Components\RequestBuilder\IntrinsicTasks\TaskLoggingHelperExtension.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\IsExternalInit.cs">
+      <Link>BuildCop\Utilities\IsExternalInit.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\TaskParameter.cs" />
     <Compile Include="..\Shared\TaskParameterTypeVerifier.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
@@ -158,7 +161,9 @@
     <Compile Include="BuildCop\Analyzers\SharedOutputPathAnalyzer.cs" />
     <Compile Include="BuildCop\Infrastructure\BuildCopConfigurationException.cs" />
     <Compile Include="BuildCop\Infrastructure\BuildEventsProcessor.cs" />
+    <Compile Include="BuildCop\Infrastructure\IBuildCopManagerProvider.cs" />
     <Compile Include="BuildCop\Infrastructure\NullBuildCopManager.cs" />
+    <Compile Include="BuildCop\Infrastructure\NullBuildCopManagerProvider.cs" />
     <Compile Include="BuildCop\Infrastructure\TracingReporter.cs" />
     <Compile Include="BuildCop\OM\BuildAnalysisContext.cs" />
     <Compile Include="BuildCop\API\BuildAnalyzer.cs" />
@@ -187,7 +192,6 @@
     <Compile Include="BuildCop\OM\EvaluatedPropertiesAnalysisData.cs" />
     <Compile Include="BuildCop\OM\ParsedItemsAnalysisData.cs" />
     <Compile Include="BuildCop\Utilities\EnumerableExtensions.cs" />
-    <Compile Include="BuildCop\Utilities\IsExternalInit.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
     <Compile Include="FileAccess\FileAccessData.cs" />
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index d678ab57d35..8e9d1e09d00 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -133,6 +133,7 @@ public Traits()
         public readonly bool DebugEngine = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugEngine"));
         public readonly bool DebugScheduler;
         public readonly bool DebugNodeCommunication;
+        public readonly bool DebugUnitTests = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugUnitTests"));
 
         public readonly bool InProcNodeDisabled = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
 
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index 655ac537189..2ae43884646 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -1,5 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk">
 
+  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.props" />
+
   <PropertyGroup>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
 
diff --git a/src/Build/BuildCop/Utilities/IsExternalInit.cs b/src/Shared/IsExternalInit.cs
similarity index 100%
rename from src/Build/BuildCop/Utilities/IsExternalInit.cs
rename to src/Shared/IsExternalInit.cs
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 38700fed179..bbba6eab034 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using System.Text;
 using Microsoft.Build.Evaluation;
@@ -169,7 +170,10 @@ public void Timeout()
             Assert.False(result);
             Assert.Equal(expectedExitCode, exec.ExitCode);
             ((MockEngine)exec.BuildEngine).AssertLogContains("MSB5002");
-            Assert.Equal(1, ((MockEngine)exec.BuildEngine).Warnings);
+            int warningsCount = ((MockEngine)exec.BuildEngine).Warnings;
+            warningsCount.ShouldBe(1,
+                $"Expected 1 warning, encountered {warningsCount}: " + string.Join(",",
+                    ((MockEngine)exec.BuildEngine).WarningEvents.Select(w => w.Message)));
 
             // ToolTask does not log an error on timeout.
             Assert.Equal(0, ((MockEngine)exec.BuildEngine).Errors);
diff --git a/src/UnitTests.Shared/AssemblyInfo.cs b/src/UnitTests.Shared/AssemblyInfo.cs
index 3b5d7bbb185..5b383e24105 100644
--- a/src/UnitTests.Shared/AssemblyInfo.cs
+++ b/src/UnitTests.Shared/AssemblyInfo.cs
@@ -2,3 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
+
+namespace Microsoft.Build.UnitTests.Shared;
+
+[System.AttributeUsage(System.AttributeTargets.Assembly)]
+internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)
+    : System.Attribute
+{
+    public string BootstrapRoot { get; } = bootstrapRoot;
+    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;
+}
diff --git a/src/UnitTests.Shared/IsExternalInit.cs b/src/UnitTests.Shared/IsExternalInit.cs
deleted file mode 100644
index 92d5c4c320a..00000000000
--- a/src/UnitTests.Shared/IsExternalInit.cs
+++ /dev/null
@@ -1,7 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-namespace System.Runtime.CompilerServices
-{
-    internal static class IsExternalInit { }
-}
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 0bade6a09d5..9a63822e930 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -1,6 +1,6 @@
 <Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
-    <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
+    <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <AssemblyName>Microsoft.Build.UnitTests.Shared</AssemblyName>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <IsShipping>false</IsShipping>
@@ -18,5 +18,22 @@
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj">
+      <Private>false</Private>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+
+  <ItemGroup>
+    <Compile Include="..\Shared\IsExternalInit.cs" />
+  </ItemGroup>
+
+  <Import Project="..\..\eng\BootStrapMSBuild.props" />
+
+  <ItemGroup>
+    <AssemblyAttribute Include="Microsoft.Build.UnitTests.Shared.BootstrapLocationAttribute">
+      <_Parameter1>$(ArtifactsBinDir)</_Parameter1>
+      <_Parameter2>$(BootstrapBinaryDestination)</_Parameter2>
+    </AssemblyAttribute>
   </ItemGroup>
 </Project>
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 3eb1026dfd2..373692d37f5 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -5,7 +5,10 @@
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 using System.IO;
+using System.Reflection;
+using Microsoft.Build.Framework;
 using Xunit.Abstractions;
+using System.Linq;
 
 #nullable disable
 
@@ -49,6 +52,43 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
         }
 
+        public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
+        {
+            BootstrapLocationAttribute attribute = Assembly.GetExecutingAssembly().GetCustomAttribute<BootstrapLocationAttribute>()
+                                                   ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
+
+            string binaryFolder = attribute.BootstrapMsbuildBinaryLocation;
+            string bindirOverride = Environment.GetEnvironmentVariable("MSBUILD_BOOTSTRAPPED_BINDIR");
+            if (!string.IsNullOrEmpty(bindirOverride))
+            {
+                // The bootstrap environment has moved to another location. Assume the same relative layout and adjust the path.
+#if NET
+                string relativePath = Path.GetRelativePath(attribute.BootstrapRoot, binaryFolder);
+                binaryFolder = Path.GetFullPath(relativePath, bindirOverride);
+#else
+                binaryFolder = Path.GetFullPath(binaryFolder);
+                if (binaryFolder.StartsWith(attribute.BootstrapRoot))
+                {
+                    binaryFolder = binaryFolder.Substring(attribute.BootstrapRoot.Length);
+                    if (binaryFolder.StartsWith(Path.DirectorySeparatorChar.ToString()))
+                    {
+                        binaryFolder = binaryFolder.Substring(1);
+                    }
+
+                    binaryFolder = Path.Combine(bindirOverride, binaryFolder);
+                }
+#endif
+            }
+#if NET
+            string pathToExecutable = EnvironmentProvider.GetDotnetExePath()!;
+            msbuildParameters = Path.Combine(binaryFolder, "MSBuild.dll") + " " + msbuildParameters;
+#else
+            string pathToExecutable =
+                Path.Combine(binaryFolder, "msbuild.exe");
+#endif
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
+        }
+
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
         {
             if (NativeMethodsShared.IsWindows)
@@ -109,7 +149,11 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.BeginErrorReadLine();
                 p.StandardInput.Dispose();
 
-                if (!p.WaitForExit(30_000_000))
+                if (Traits.Instance.DebugUnitTests)
+                {
+                    p.WaitForExit();
+                }
+                else if (!p.WaitForExit(30_000))
                 {
                     // Let's not create a unit test for which we need more than 30 sec to execute.
                     // Please consider carefully if you would like to increase the timeout.
