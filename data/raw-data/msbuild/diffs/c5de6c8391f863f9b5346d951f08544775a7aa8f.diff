diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index d645c62fa6a..eabf4affe54 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using System.Linq;
 using System.Text.RegularExpressions;
 using System.Xml;
 using Microsoft.Build.UnitTests;
@@ -27,7 +26,7 @@ public EndToEndTests(ITestOutputHelper output)
         _env.WithEnvironmentInvariant();
     }
 
-    private static string TestAssetsRootPath { get; } = Path.Combine(AppContext.BaseDirectory, "TestAssets");
+    private static string TestAssetsRootPath { get; } = Path.Combine(Path.GetDirectoryName(typeof(EndToEndTests).Assembly.Location) ?? AppContext.BaseDirectory, "TestAssets");
 
     public void Dispose() => _env.Dispose();
 
@@ -138,26 +137,26 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana
 
     [Theory]
     [InlineData(new[] { "CustomAnalyzer" }, "AnalysisCandidate", new[] { "CustomRule1", "CustomRule2" })]
-    [InlineData(new[] { "CustomAnalyzer", "CustomAnalyzer2" }, "AnalysisCandidateWithMultipleRulesInjected", new[] { "CustomRule1", "CustomRule2", "CustomRule3" })]
+    [InlineData(new[] { "CustomAnalyzer", "CustomAnalyzer2" }, "AnalysisCandidateWithMultipleAnalyzersInjected", new[] { "CustomRule1", "CustomRule2", "CustomRule3" })]
     public void CustomAnalyzerTest(string[] customAnalyzerNames, string analysisCandidate, string[] expectedRegisteredRules)
     {
         using (var env = TestEnvironment.Create())
         {
             var candidatesNugetFullPaths = BuildAnalyzerRules(env, customAnalyzerNames);
 
-            if (candidatesNugetFullPaths.Any())
-            {
-                var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);
-                AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidatesNugetFullPaths);
+            candidatesNugetFullPaths.ShouldNotBeEmpty("Nuget package with custom analyzer was not generated or detected.");
 
-                string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                    $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d",
-                    out bool _);
+            var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);
+            AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidatesNugetFullPaths);
 
-                foreach (string expectedRegisteredRule in expectedRegisteredRules)
-                {
-                    projectAnalysisBuildLog.ShouldContain($"Custom analyzer rule: {expectedRegisteredRule} has been registered successfully.");
-                }
+            string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d",
+                out bool successBuild);
+            successBuild.ShouldBeTrue();
+
+            foreach (string expectedRegisteredRule in expectedRegisteredRules)
+            {
+                projectAnalysisBuildLog.ShouldContain($"Custom analyzer rule: {expectedRegisteredRule} has been registered successfully.");
             }
         }
     }
@@ -171,12 +170,10 @@ private IList<string> BuildAnalyzerRules(TestEnvironment env, string[] customAna
             var candidateAnalysisProjectPath = Path.Combine(TestAssetsRootPath, customAnalyzerName, $"{customAnalyzerName}.csproj");
             string candidateAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                  $"{candidateAnalysisProjectPath} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path}", out bool success);
+            success.ShouldBeTrue();
 
-            if (success)
-            {
-                var candidatesNugetPackageFullPath = Regex.Match(candidateAnalysisBuildLog, @"Successfully created package '(.*?)'").Groups[1].Value;
-                candidatesNugetFullPaths.Add(candidatesNugetPackageFullPath);
-            }
+            var candidatesNugetPackageFullPath = Regex.Match(candidateAnalysisBuildLog, @"Successfully created package '(.*?)'").Groups[1].Value;
+            candidatesNugetFullPaths.Add(candidatesNugetPackageFullPath);
         }
 
         return candidatesNugetFullPaths;
@@ -215,11 +212,9 @@ private void AddPackageSource(XmlDocument doc, XmlNode? packageSourcesNode, stri
 
     private void PopulateXmlAttribute(XmlDocument doc, XmlNode node, string attributeName, string attributeValue)
     {
-        if (node != null)
-        {
-            var attribute = doc.CreateAttribute(attributeName);
-            attribute.Value = attributeValue;
-            node.Attributes!.Append(attribute);
-        }
+        node.ShouldNotBeNull($"The attribute {attributeName} can not be populated with {attributeValue}. Xml node is null.");
+        var attribute = doc.CreateAttribute(attributeName);
+        attribute.Value = attributeValue;
+        node.Attributes!.Append(attribute);
     }
 }
diff --git a/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleRulesInjected/AnalysisCandidateWithMultipleRulesInjected.csproj b/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleAnalyzersInjected/AnalysisCandidateWithMultipleAnalyzersInjected.csproj
similarity index 100%
rename from src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleRulesInjected/AnalysisCandidateWithMultipleRulesInjected.csproj
rename to src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleAnalyzersInjected/AnalysisCandidateWithMultipleAnalyzersInjected.csproj
diff --git a/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleRulesInjected/nugetTemplate.config b/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleAnalyzersInjected/nugetTemplate.config
similarity index 100%
rename from src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleRulesInjected/nugetTemplate.config
rename to src/BuildCheck.UnitTests/TestAssets/AnalysisCandidateWithMultipleAnalyzersInjected/nugetTemplate.config
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj
index 557fdd2cbfc..35b1af25347 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj
@@ -13,27 +13,14 @@
   </ItemGroup>
 
   <ItemGroup>
-    <PackageReference Include="Microsoft.Build" PrivateAssets="all" IncludeInPackage="true" Version="17.11.0-preview-24218-01" />
+    <!-- In the real world scenario, the DLLs are added as PackageReference, modified for test purposes only. -->
+    <Reference Include="Microsoft.Build">
+      <HintPath>$(MSBuildProjectDirectory)\..\..\Microsoft.Build.dll</HintPath>
+    </Reference>
   </ItemGroup>
 
   <Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
-    <!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
-       This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
-    <JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*" Right="@(PackageReference)" RightKey="" RightMetadata="*" ItemSpecToUse="Left">
-      <Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
-    </JoinItems>
-
-    <ItemGroup>
-      <!-- Remove NETStandard DLLs -->
-      <_PackagesToPack Remove="@(_PackagesToPack)" />
-    </ItemGroup>
-
-    <Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />
-
     <ItemGroup>
-      <!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
-      <None Include="@(_PackagesToPack)" Pack="true" PackagePath="lib" Visible="false" />
-
       <!-- Add the DLL produced by the current project to the NuGet package -->
       <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="lib" Visible="false" />
     </ItemGroup>
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/nuget.config b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/nuget.config
deleted file mode 100644
index 27a07cc2040..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/nuget.config
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-   <packageSources>
-    <clear />
-
-    <add key="AzureFeed" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json" />
-
-  </packageSources>
-</configuration>
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/CustomAnalyzer2.csproj b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/CustomAnalyzer2.csproj
index 603880ac6f5..5e6271f531a 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/CustomAnalyzer2.csproj
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/CustomAnalyzer2.csproj
@@ -3,7 +3,6 @@
   <PropertyGroup>
     <TargetFramework>netstandard2.0</TargetFramework>
     <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
-    <IncludeBuildOutput>false</IncludeBuildOutput>
     <!-- The output structure was modified for msbuild development needs.-->
     <NoWarn>NU5101;NU5128</NoWarn>
   </PropertyGroup>
@@ -13,27 +12,14 @@
   </ItemGroup>
 
   <ItemGroup>
-    <PackageReference Include="Microsoft.Build" PrivateAssets="all" IncludeInPackage="true" Version="17.11.0-preview-24218-01" />
+    <!-- In the real world scenario, the DLLs are added as PackageReference, modified for test purposes only. -->
+    <Reference Include="Microsoft.Build">
+      <HintPath>$(MSBuildProjectDirectory)\..\..\Microsoft.Build.dll</HintPath>
+    </Reference>
   </ItemGroup>
 
   <Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
-    <!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
-       This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
-    <JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*" Right="@(PackageReference)" RightKey="" RightMetadata="*" ItemSpecToUse="Left">
-      <Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
-    </JoinItems>
-
-    <ItemGroup>
-      <!-- Remove NETStandard DLLs -->
-      <_PackagesToPack Remove="@(_PackagesToPack)" />
-    </ItemGroup>
-
-    <Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />
-
     <ItemGroup>
-      <!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
-      <None Include="@(_PackagesToPack)" Pack="true" PackagePath="lib" Visible="false" />
-
       <!-- Add the DLL produced by the current project to the NuGet package -->
       <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="lib" Visible="false" />
     </ItemGroup>
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/nuget.config b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/nuget.config
deleted file mode 100644
index 27a07cc2040..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/nuget.config
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-   <packageSources>
-    <clear />
-
-    <add key="AzureFeed" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json" />
-
-  </packageSources>
-</configuration>
