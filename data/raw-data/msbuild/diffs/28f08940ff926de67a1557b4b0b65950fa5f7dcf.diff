diff --git a/Directory.Build.targets b/Directory.Build.targets
index 33347b713e1..3a0e383282a 100644
--- a/Directory.Build.targets
+++ b/Directory.Build.targets
@@ -1,13 +1,15 @@
 <Project>
 
   <PropertyGroup>
+    <PackageReadmeFile>README.md</PackageReadmeFile>
     <ThirdPartyNotice Condition=" '$(ThirdPartyNotice)' == '' ">$(RepoRoot)THIRDPARTYNOTICES.txt</ThirdPartyNotice>
     <AssemblyTitle>$(TargetFileName)</AssemblyTitle>
     <Description Condition="'$(Description)' == ''">$(TargetFileName)</Description>
   </PropertyGroup>
 
-  <ItemGroup>
-    <None Include="$(ThirdPartyNotice)" Pack="true" PackagePath="notices" Visible="false" Condition=" '$(IsPackable)' == 'true' " />
+  <ItemGroup Condition=" '$(IsPackable)' == 'true' ">
+    <None Include="$(ThirdPartyNotice)" Pack="true" PackagePath="notices" Visible="false" />
+    <None Include="README.md" Pack="true" PackagePath="\" />
   </ItemGroup>
 
   <!-- Global Analyzer Config -->
@@ -15,13 +17,13 @@
     <!-- Include Common.globalconfig for non-deprecated projects-->
     <EditorConfigFiles Include="$(MSBuildThisFileDirectory)eng/Common.globalconfig" />
   </ItemGroup>
-  
+
   <!-- Test Project Global Analyzer Config -->
   <ItemGroup Condition="'$(IsTestProject)' == 'true'">
     <!-- Include Common.Test.globalconfig for Test projects-->
     <EditorConfigFiles Include="$(MSBuildThisFileDirectory)eng/Common.Test.globalconfig" />
   </ItemGroup>
-  
+
   <PropertyGroup>
     <CentralPackagesFile>$(MSBuildThisFileDirectory)eng/Packages.props</CentralPackagesFile>
   </PropertyGroup>
@@ -31,7 +33,7 @@
   <Target Name="DeleteDevPackage" AfterTargets="GenerateNuspec">
     <!-- If package just built was already in global packages folder, delete it.  This helps support a local dev cycle where you are consuming
          a package from another repo without having to update the package version each time. -->
-    
+
     <PropertyGroup>
       <_PackageFolderInGlobalPackages>$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())\$(PackageVersion)</_PackageFolderInGlobalPackages>
     </PropertyGroup>
diff --git a/MSBuild.sln b/MSBuild.sln
index 74de884bad7..eaedd997db8 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -1,8 +1,8 @@
 ï»¿
 Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio Version 16
-VisualStudioVersion = 16.0.30413.136
-MinimumVisualStudioVersion = 10.0.40219.1
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 17.0.31903.59
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{4900B3B8-4310-4D5B-B1F7-2FDF9199765F}"
 	ProjectSection(SolutionItems) = preProject
 		NuGet.Config = NuGet.Config
@@ -61,8 +61,6 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Localization", "src\Package
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "DevDivPackage", "src\Package\DevDivPackage\DevDivPackage.csproj", "{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}"
 EndProject
-Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuild.Engine.Corext", "src\Package\MSBuild.Engine.Corext\MSBuild.Engine.Corext.csproj", "{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}"
-EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuild.Bootstrap", "src\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj", "{CEAEE4FE-9298-443B-AFC5-0F72472484B6}"
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools", "src\StringTools\StringTools.csproj", "{639C178E-368F-4384-869E-7C6D18B4CC1F}"
@@ -786,36 +784,6 @@ Global
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x64.ActiveCfg = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x64.Build.0 = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x86.Build.0 = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x64.Build.0 = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x86.Build.0 = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|Any CPU.Build.0 = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x64.ActiveCfg = Release|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x64.Build.0 = Release|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x86.ActiveCfg = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x86.Build.0 = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x64.ActiveCfg = Debug|x64
@@ -1041,7 +1009,6 @@ Global
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA} = {0AC7F677-AD87-48C8-A51C-008A68136929}
 		{16DBDF17-3E0E-4140-989A-B42638126A40} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943} = {760FF85D-8BEB-4992-8095-A9678F88FD47}
 	EndGlobalSection
diff --git a/README.md b/README.md
index 8a7dda38314..20d68bf2708 100644
--- a/README.md
+++ b/README.md
@@ -36,20 +36,20 @@ MSBuild 15.9 builds from the branch [`vs15.9`](https://github.com/dotnet/msbuild
 
 ## Building
 
-### Building MSBuild with Visual Studio 2019 on Windows
+### Building MSBuild with Visual Studio 2022 on Windows
 
-For the full supported experience, you will need to have Visual Studio 2019 or higher.
+For the full supported experience, you will need to have Visual Studio 2022 or higher.
 
-To get started on **Visual Studio 2019**:
+To get started on **Visual Studio 2022**:
 
-1. [Install Visual Studio 2019](https://www.visualstudio.com/vs/).  Select the following Workloads:
+1. [Install Visual Studio 2022](https://www.visualstudio.com/vs/).  Select the following Workloads:
   - .NET desktop development
   - .NET Core cross-platform development
-2. Open a `Developer Command Prompt for VS 2019` prompt.
+2. Open a `Developer Command Prompt for VS 2022` prompt.
 3. Clone the source code: `git clone https://github.com/dotnet/msbuild`
   - You may have to [download Git](https://git-scm.com/downloads) first.
 4. Run `.\build.cmd` from the root of the repo to build the code. This also restores packages needed to open the projects in Visual Studio.
-5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2019.
+5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2022.
 
 Note: To create a usable MSBuild with your changes, run `.\build.cmd /p:CreateBootstrap=true`.
 To build release, add `-c Release`: `.\build.cmd -c Release /p:CreateBootstrap=true`.
diff --git a/documentation/consuming-nuget-package.md b/documentation/consuming-nuget-package.md
index e611e2194d6..71712556105 100644
--- a/documentation/consuming-nuget-package.md
+++ b/documentation/consuming-nuget-package.md
@@ -1,8 +1,8 @@
 # Consuming MSBuild NuGet packages
 
-The MSBuild team currently publishes five NuGet packages.  Our packages are published to NuGet.org 
+The MSBuild team currently publishes five NuGet packages.  Our packages are published to NuGet.org
 
-| Package ID    | URL      | Status   |
+| Package ID    | URL      | Latest Version   |
 | ------------- |-------------| -----|
 | Microsoft.Build.Framework      | https://www.nuget.org/Packages/Microsoft.Build.Framework | [![Microsoft.Build.Framework package](https://img.shields.io/nuget/vpre/Microsoft.Build.Framework.svg)](https://www.nuget.org/Packages/Microsoft.Build.Framework) |
 | Microsoft.Build.Utilities.Core      | https://www.nuget.org/Packages/Microsoft.Build.Utilities.Core | [![Microsoft.Build.Utilities.Core package](https://img.shields.io/nuget/vpre/Microsoft.Build.Utilities.Core.svg)](https://www.nuget.org/Packages/Microsoft.Build.Utilities.Core) |
@@ -11,42 +11,42 @@ The MSBuild team currently publishes five NuGet packages.  Our packages are publ
 | Microsoft.Build.Runtime      | https://www.nuget.org/Packages/Microsoft.Build.Runtime | [![Microsoft.Build.Runtime package](https://img.shields.io/nuget/vpre/Microsoft.Build.Runtime.svg)](https://www.nuget.org/Packages/Microsoft.Build.Runtime) |
 
 ## Microsoft.Build.Framework
-This package contains the `Microsoft.Build.Framework.dll` assembly which makes available items in the [Microsoft.Build.Framework](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.aspx) namespace.
-The items in this namespace are primarily base-level classes and interfaces shared across MSBuild's object model.  MSBuild task developers can reference this package to implement interfaces such as
-[ITask](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.itask.aspx), [ILogger](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.ilogger.aspx), and
-[IForwardingLogger](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.iforwardinglogger.aspx).
+
+This package contains `Microsoft.Build.Framework.dll`, which defines [fundamental types](https://docs.microsoft.com/dotnet/api/microsoft.build.framework) used in MSBuild's API and extensibility model.
 
 ## Microsoft.Build.Utilities.Core
-This package contains the `Microsoft.Build.Utilities.Core.dll` assembly which makes available items in the [Microsoft.Build.Utilities](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.aspx) namespace.
-The items in this namespace are used by MSBuild to implement utility classes which do things such as create command lines, implement ILogger, locate tools, and track dependencies.
 
-MSBuild task developers often reference this package to develop tasks that inherit from the base class [Task](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx).  This class is implements [ITask] 
-but also provides a logging helper which can reduce code required to develop an MSBuild task.  It also contains the [ToolTask](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.tooltask.aspx) class which
-should be used by tasks which wrap the execution of another tool.  It provides functionality to capture standard output and standard error as well as the exit code of the process.
+This package contains the `Microsoft.Build.Utilities.Core.dll` assembly which makes available items in the [Microsoft.Build.Utilities](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities) namespace.
 
 ## Microsoft.Build.Tasks.Core
-This package contains the `Microsoft.Build.Tasks.Core.dll` assembly which makes available items in the [Microsoft.Build.Tasks](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.aspx) namespace.
-The items in this namespace are MSBuild tasks that have been developed by the MSBuild team.  This includes [Copy](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.copy.aspx),
-[Csc](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.csc.aspx), and [Exec](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.exec.aspx).
 
-Most developers do not need to reference this package unless they want to extend a stock MSBuild task with custom functionality.  Alternatively, we recommend that MSBuild task developers reference the 
-`Microsoft.Build.Utilities.Core` package and implement the abstract class [Task](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx) or
-[ToolTask](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.tooltask.aspx).
+This package contains implementations of [commonly-used MSBuild
+tasks](https://docs.microsoft.com/visualstudio/msbuild/msbuild-task-reference)
+that ship with MSBuild itself.
+
+Most developers do not need to reference this package. We recommend that MSBuild
+task developers reference the `Microsoft.Build.Utilities.Core` package and
+implement the abstract class
+[`Task`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.task)
+or
+[`ToolTask`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.tooltask).
 
 ## Microsoft.Build
-This package contains the `Microsoft.Build.dll` assembly which makes available items in the [Microsoft.Build.Construction](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.aspx),
-[Microsoft.Build.Evaluation](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.aspx), and [Microsoft.Build.Execution](https://msdn.microsoft.com/en-us/library/microsoft.build.execution.aspx) namespaces.
-Developers should reference this package to create, edit, evaluate, or build MSBuild projects.
 
-To create or edit an MSBuild project, use the [Microsoft.Build.Construction.ProjectRootElement](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.projectrootelement.aspx) class and call the 
-[Create](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.projectrootelement.create.aspx) or
-[Open](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.projectrootelement.open.aspx) method.
+This package contains the `Microsoft.Build.dll` assembly which makes available items in the [Microsoft.Build.Construction](https://msdn.microsoft.com/library/microsoft.build.construction.aspx),
+[Microsoft.Build.Evaluation](https://msdn.microsoft.com/library/microsoft.build.evaluation.aspx), and [Microsoft.Build.Execution](https://msdn.microsoft.com/library/microsoft.build.execution.aspx) namespaces.
 
-To evaluate or build an MSBuild project, use the [Microsoft.Build.Evaluation.Project](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.project.aspx) class by creating an instance of it with the
-appropriate parameters for your project.  To retrieve evaluated items, call methods such as  properties such as [GetItem](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.project.getitems.aspx)
-or [GetPropertyValue](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.project.getpropertyvalue.aspx).
+Developers should reference this package to create, edit, evaluate, or build MSBuild projects.
 
 ## Microsoft.Build.Runtime
-This package contains the standard set of MSBuild projects which are imported by other projects such as CSharp and Visual Basic as well as the MSBuild executable.  Developers should reference this package if they want to
-redistribute the MSBuild runtime to evaluate or build MSBuild projects within their application.  This can be necessary because prior to MSBuild version 15, MSBuild was installed globally on a machine and universally
-available to all applications.  However, in MSBuild version 15 and forward, MSBuild is redistributed by each application that uses it and applications are unable to share other instances.  
+
+This package delivers a complete executable copy of MSBuild. Reference this
+package only if your application needs to load projects or execute in-process
+builds without requiring installation of MSBuild. Successfully evaluating
+projects using this package requires aggregating additional components (like the
+compilers) into an application directory.
+
+ðï¸ NOTE: if you are building an application that wants to use MSBuild to
+evaluate or build projects, you will generally not need this package. Instead,
+use [MSBuildLocator](https://aka.ms/msbuild/locator) to use a complete toolset
+provided by the .NET SDK or Visual Studio.
diff --git a/documentation/specs/event-source.md b/documentation/specs/event-source.md
index ad6429d41ac..812d28fe413 100644
--- a/documentation/specs/event-source.md
+++ b/documentation/specs/event-source.md
@@ -21,7 +21,6 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major
 | GenerateResourceOverall | Uses resource APIs to transform resource files into strongly-typed resource classes. |
 | LoadDocument | Loads an XMLDocumentWithLocation from a path.
 | MSBuildExe | Executes MSBuild from the command line. |
-| OutOfProcSdkResolverServiceRequestSdkPathFromMainNode | An out-of-proc node requests an SDK be resolved from the main node. |
 | PacketReadSize | Reports the size of a packet sent between nodes. Note that this does not include time information. |
 | Parse | Parses an XML document into a ProjectRootElement. |
 | ProjectGraphConstruction | Constructs a dependency graph among projects. |
@@ -33,7 +32,6 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major
 | ReusableStringBuilderFactory | Uses and resizes (if necessary) of ReusableStringBuilders. |
 | ReusableStringBuilderFactoryUnbalanced | Identifies improper usage from multiple threads or buggy code: multiple Gets were called without a Relase. |
 | Save | Saves a project to the file system if dirty, creating directories as necessary. |
-| SdkResolverEvent | An SDK resolver logs an event. |
 | SdkResolverResolveSdk | A single SDK resolver is called. |
 | SdkResolverServiceInitialize | Initializes SDK resolvers. |
 | Target | Executes a target. |
diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
index 741b3aa6b5f..20c962598de 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
@@ -4,7 +4,7 @@ These instructions refer to working with the `master` branch.
 
 ## Required Software
 
-**Latest Microsoft Visual Studio 2019**: You can download the Visual Studio Community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
+**Latest Microsoft Visual Studio 2022**: You can download the Visual Studio Community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
 
 All command lines should be executed from a Visual Studio developer command prompt.
 
diff --git a/documentation/wiki/MSBuild-Tips-&-Tricks.md b/documentation/wiki/MSBuild-Tips-&-Tricks.md
index 925930a747a..a66255a037e 100644
--- a/documentation/wiki/MSBuild-Tips-&-Tricks.md
+++ b/documentation/wiki/MSBuild-Tips-&-Tricks.md
@@ -39,7 +39,7 @@ See the [MSBuild Command-Line Reference](https://docs.microsoft.com/visualstudio
 If MSBuild.exe is passed properties on the command line, such as `/p:Platform=AnyCPU` then this value overrides whatever assignments you have to that property inside property groups. For instance, `<Platform>x86</Platform>` will be ignored. To make sure your local assignment to properties overrides whatever they pass on the command line, add the following at the top of your MSBuild project file:
 
 ```
-<Project TreatAsLocalProperty="Platform" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project TreatAsLocalProperty="Platform" DefaultTargets="Build">
 ```
 
 This will make sure that your local assignments to the `Platform` property are respected. You can specify multiple properties in `TreatAsLocalProperty` separated by semicolon.
@@ -59,11 +59,11 @@ Use this command-line to approximate what the design-time build does:
 See https://www.simple-talk.com/dotnet/.net-tools/extending-msbuild, "Extending all builds" section. Also read about [MSBuildUserExtensionsPath](http://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/Microsoft.Common.props,33), [CustomBeforeMicrosoftCommonProps](http://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/Microsoft.Common.props,68), [CustomBeforeMicrosoftCommonTargets](http://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/bin_/amd64/Microsoft.Common.targets,71), and CustomAfterMicrosoftCommonProps/CustomAfterMicrosoftCommonTargets.
 
 Example:
-Create this file (Custom.props) in `C:\Users\username\AppData\Local\Microsoft\MSBuild\14.0\Microsoft.Common.targets\ImportAfter`:
+Create this file (Custom.props) in `C:\Users\username\AppData\Local\Microsoft\MSBuild\Current\Microsoft.Common.targets\ImportAfter`:
 
 ```
 <?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
   <PropertyGroup>
     <MyCustomProperty>Value!</MyCustomProperty>
   </PropertyGroup>
diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
index cb71d55758c..49de8011d44 100644
--- a/eng/Common.globalconfig
+++ b/eng/Common.globalconfig
@@ -277,7 +277,7 @@ dotnet_diagnostic.CA1821.severity = warning
 dotnet_diagnostic.CA1822.severity = none
 
 # Avoid unused private fields
-dotnet_diagnostic.CA1823.severity = suggestion
+dotnet_diagnostic.CA1823.severity = warning
 
 # Mark assemblies with NeutralResourcesLanguageAttribute
 dotnet_diagnostic.CA1824.severity = warning
@@ -411,7 +411,7 @@ dotnet_diagnostic.CA2234.severity = none
 dotnet_diagnostic.CA2235.severity = none
 
 # Provide correct arguments to formatting methods
-dotnet_diagnostic.CA2241.severity = suggestion
+dotnet_diagnostic.CA2241.severity = warning
 
 # Test for NaN correctly
 dotnet_diagnostic.CA2242.severity = warning
@@ -771,7 +771,7 @@ dotnet_diagnostic.SA1100.severity = suggestion
 
 dotnet_diagnostic.SA1101.severity = none
 
-dotnet_diagnostic.SA1102.severity = suggestion
+dotnet_diagnostic.SA1102.severity = warning
 
 # Code should not contain empty statements
 dotnet_diagnostic.SA1106.severity = suggestion
@@ -901,7 +901,7 @@ dotnet_diagnostic.SA1217.severity = suggestion
 dotnet_diagnostic.SA1300.severity = suggestion
 
 # Interface names should begin with I
-dotnet_diagnostic.SA1302.severity = suggestion
+dotnet_diagnostic.SA1302.severity = warning
 
 # Const field names should begin with upper-case letter
 dotnet_diagnostic.SA1303.severity = suggestion
@@ -981,7 +981,7 @@ dotnet_diagnostic.SA1502.severity = suggestion
 dotnet_diagnostic.SA1503.severity = suggestion
 
 # All accessors should be single-line or multi-line
-dotnet_diagnostic.SA1504.severity = suggestion
+dotnet_diagnostic.SA1504.severity = warning
 
 # An opening brace should not be followed by a blank line
 dotnet_diagnostic.SA1505.severity = suggestion
@@ -996,7 +996,7 @@ dotnet_diagnostic.SA1507.severity = suggestion
 dotnet_diagnostic.SA1508.severity = warning
 
 # Opening braces should not be preceded by blank line
-dotnet_diagnostic.SA1509.severity = suggestion
+dotnet_diagnostic.SA1509.severity = warning
 
 # 'else' statement should not be preceded by a blank line
 dotnet_diagnostic.SA1510.severity = warning
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 6e16dfd6f2a..8ad0442445f 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,22 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22054.3">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22069.6">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>98018d5a808e5167a4ce5e81dc6513382676d4c9</Sha>
+      <Sha>9afb10914952d5c1e1705e74470ea0f0f805011a</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.1.0-preview.1.62">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.1.0-rc.103">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>9187a50daec29061772a2057490697c6c0e4c354</Sha>
+      <Sha>f1906d3d581e0ea0bdd282134208d654f8447880</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.1.0-3.22057.9">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.1.0-3.22071.8">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>a07da6871b3b7f53611b0f95530561286dd1e529</Sha>
+      <Sha>663228dd1656d5e5ca7bd38bd5c95e3d8c2b7b01</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22054.3">
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22069.6">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>98018d5a808e5167a4ce5e81dc6513382676d4c9</Sha>
+      <Sha>9afb10914952d5c1e1705e74470ea0f0f805011a</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index c535136d076..98b9a4aafef 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -32,10 +32,10 @@
     <!-- DotNetCliVersion MUST match the dotnet version in global.json.
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22054.3</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22069.6</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.1.0-3.22057.9</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.1.0-preview.1.62</NuGetBuildTasksVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.1.0-3.22071.8</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.1.0-rc.103</NuGetBuildTasksVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/common/generate-graph-files.ps1 b/eng/common/generate-graph-files.ps1
deleted file mode 100644
index 0728b1a8b57..00000000000
--- a/eng/common/generate-graph-files.ps1
+++ /dev/null
@@ -1,86 +0,0 @@
-Param(
-  [Parameter(Mandatory=$true)][string] $barToken,       # Token generated at https://maestro-prod.westus2.cloudapp.azure.com/Account/Tokens
-  [Parameter(Mandatory=$true)][string] $gitHubPat,      # GitHub personal access token from https://github.com/settings/tokens (no auth scopes needed)
-  [Parameter(Mandatory=$true)][string] $azdoPat,        # Azure Dev Ops tokens from https://dev.azure.com/dnceng/_details/security/tokens (code read scope needed)
-  [Parameter(Mandatory=$true)][string] $outputFolder,   # Where the graphviz.txt file will be created
-  [string] $darcVersion,                                # darc's version
-  [string] $graphvizVersion = '2.38',                   # GraphViz version
-  [switch] $includeToolset                              # Whether the graph should include toolset dependencies or not. i.e. arcade, optimization. For more about
-                                                        # toolset dependencies see https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#toolset-vs-product-dependencies
-)
-
-function CheckExitCode ([string]$stage)
-{
-  $exitCode = $LASTEXITCODE
-  if ($exitCode  -ne 0) {
-    Write-PipelineTelemetryError -Category 'Arcade' -Message "Something failed in stage: '$stage'. Check for errors above. Exiting now..."
-    ExitWithExitCode $exitCode
-  }
-}
-
-try {
-  $ErrorActionPreference = 'Stop'
-  . $PSScriptRoot\tools.ps1
-  
-  Import-Module -Name (Join-Path $PSScriptRoot 'native\CommonLibrary.psm1')
-
-  Push-Location $PSScriptRoot
-
-  Write-Host 'Installing darc...'
-  . .\darc-init.ps1 -darcVersion $darcVersion
-  CheckExitCode 'Running darc-init'
-
-  $engCommonBaseDir = Join-Path $PSScriptRoot 'native\'
-  $graphvizInstallDir = CommonLibrary\Get-NativeInstallDirectory
-  $nativeToolBaseUri = 'https://netcorenativeassets.blob.core.windows.net/resource-packages/external'
-  $installBin = Join-Path $graphvizInstallDir 'bin'
-
-  Write-Host 'Installing dot...'
-  .\native\install-tool.ps1 -ToolName graphviz -InstallPath $installBin -BaseUri $nativeToolBaseUri -CommonLibraryDirectory $engCommonBaseDir -Version $graphvizVersion -Verbose
-
-  $darcExe = "$env:USERPROFILE\.dotnet\tools"
-  $darcExe = Resolve-Path "$darcExe\darc.exe"
-
-  Create-Directory $outputFolder
-
-  # Generate 3 graph descriptions:
-  # 1. Flat with coherency information
-  # 2. Graphviz (dot) file
-  # 3. Standard dependency graph
-  $graphVizFilePath = "$outputFolder\graphviz.txt"
-  $graphVizImageFilePath = "$outputFolder\graph.png"
-  $normalGraphFilePath = "$outputFolder\graph-full.txt"
-  $flatGraphFilePath = "$outputFolder\graph-flat.txt"
-  $baseOptions = @( '--github-pat', "$gitHubPat", '--azdev-pat', "$azdoPat", '--password', "$barToken" )
-
-  if ($includeToolset) {
-    Write-Host 'Toolsets will be included in the graph...'
-    $baseOptions += @( '--include-toolset' )
-  }
-
-  Write-Host 'Generating standard dependency graph...'
-  & "$darcExe" get-dependency-graph @baseOptions --output-file $normalGraphFilePath
-  CheckExitCode 'Generating normal dependency graph'
-
-  Write-Host 'Generating flat dependency graph and graphviz file...'
-  & "$darcExe" get-dependency-graph @baseOptions --flat --coherency --graphviz $graphVizFilePath --output-file $flatGraphFilePath
-  CheckExitCode 'Generating flat and graphviz dependency graph'
-
-  Write-Host "Generating graph image $graphVizFilePath"
-  $dotFilePath = Join-Path $installBin "graphviz\$graphvizVersion\release\bin\dot.exe"
-  & "$dotFilePath" -Tpng -o"$graphVizImageFilePath" "$graphVizFilePath"
-  CheckExitCode 'Generating graphviz image'
-
-  Write-Host "'$graphVizFilePath', '$flatGraphFilePath', '$normalGraphFilePath' and '$graphVizImageFilePath' created!"
-}
-catch {
-  if (!$includeToolset) {
-    Write-Host 'This might be a toolset repo which includes only toolset dependencies. ' -NoNewline -ForegroundColor Yellow
-    Write-Host 'Since -includeToolset is not set there is no graph to create. Include -includeToolset and try again...' -ForegroundColor Yellow
-  }
-  Write-Host $_.ScriptStackTrace
-  Write-PipelineTelemetryError -Category 'Arcade' -Message $_
-  ExitWithExitCode 1
-} finally {
-  Pop-Location
-}
\ No newline at end of file
diff --git a/eng/common/templates/job/generate-graph-files.yml b/eng/common/templates/job/generate-graph-files.yml
deleted file mode 100644
index e54ce956f90..00000000000
--- a/eng/common/templates/job/generate-graph-files.yml
+++ /dev/null
@@ -1,48 +0,0 @@
-parameters:
-  # Optional: dependencies of the job
-  dependsOn: ''
-
-  # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
-  pool: {}
-
-  # Optional: Include toolset dependencies in the generated graph files
-  includeToolset: false
-  
-jobs:
-- job: Generate_Graph_Files
-
-  dependsOn: ${{ parameters.dependsOn }}
-
-  displayName: Generate Graph Files
-
-  pool: ${{ parameters.pool }}
-
-  variables:
-    # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
-    # DotNet-AllOrgs-Darc-Pats provides: dn-bot-devdiv-dnceng-rw-code-pat
-    - group: Publish-Build-Assets
-    - group: DotNet-AllOrgs-Darc-Pats
-    - name: _GraphArguments
-      value: -gitHubPat $(BotAccount-dotnet-maestro-bot-PAT) 
-        -azdoPat $(dn-bot-devdiv-dnceng-rw-code-pat) 
-        -barToken $(MaestroAccessToken) 
-        -outputFolder '$(Build.StagingDirectory)/GraphFiles/'
-    - ${{ if ne(parameters.includeToolset, 'false') }}:
-      - name: _GraphArguments
-        value: ${{ variables._GraphArguments }} -includeToolset
-
-  steps:
-    - task: PowerShell@2
-      displayName: Generate Graph Files
-      inputs:
-        filePath: eng\common\generate-graph-files.ps1 
-        arguments: $(_GraphArguments)
-      continueOnError: true
-    - task: PublishBuildArtifacts@1
-      displayName: Publish Graph to Artifacts
-      inputs:
-        PathtoPublish: '$(Build.StagingDirectory)/GraphFiles'
-        PublishLocation: Container
-        ArtifactName: GraphFiles
-      continueOnError: true
-      condition: always()      
diff --git a/eng/common/templates/jobs/jobs.yml b/eng/common/templates/jobs/jobs.yml
index 90015a7e5ae..2cc0f67e153 100644
--- a/eng/common/templates/jobs/jobs.yml
+++ b/eng/common/templates/jobs/jobs.yml
@@ -87,13 +87,3 @@ jobs:
         runAsPublic: ${{ parameters.runAsPublic }}
         publishUsingPipelines: ${{ parameters.enablePublishUsingPipelines }}
         enablePublishBuildArtifacts: ${{ parameters.enablePublishBuildArtifacts }}
-
-  - ${{ if eq(parameters.graphFileGeneration.enabled, true) }}:
-    - template: ../job/generate-graph-files.yml
-      parameters:
-        continueOnError: ${{ parameters.continueOnError }}
-        includeToolset: ${{ parameters.graphFileGeneration.includeToolset }}
-        dependsOn:
-          - Asset_Registry_Publish
-        pool:
-          vmImage: windows-2019
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index bafefaed906..71c5bcb38cf 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -12,7 +12,7 @@
     <PackageReference Update="LargeAddressAware" Version="1.0.5" />
     <PackageReference Update="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.3" />
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.36" />
-    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.0.4492" />
+    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.0.4496" />
     <PackageReference Update="PdbGit" Version="3.0.41" />
     <PackageReference Update="Shouldly" Version="3.0.0" />
   </ItemGroup>
diff --git a/global.json b/global.json
index 0891b280617..90b26e808c0 100644
--- a/global.json
+++ b/global.json
@@ -5,11 +5,11 @@
   "tools": {
     "dotnet": "6.0.100",
     "vs": {
-      "version": "16.0"
+      "version": "17.0"
     }
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22054.3"
+    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22069.6"
   }
 }
diff --git a/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs b/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
index 779243f3b16..c98ce34d856 100644
--- a/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.UnitTests.Construction
     public class ElementLocationPublic_Tests
     {
         /// <summary>
-        /// Check that we can get the file name off an element and attribute, even if 
+        /// Check that we can get the file name off an element and attribute, even if
         /// it wouldn't normally have got one because the project wasn't
         /// loaded from disk, or has been edited since.
         /// This is really a test of our XmlDocumentWithLocation.
@@ -84,7 +84,7 @@ public void XmlLocationsAreCached()
         public void LocationStringsMedley()
         {
             string content = @"
-            <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+            <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <UsingTask TaskName='t' AssemblyName='a' Condition='true'/>
                     <UsingTask TaskName='t' AssemblyFile='a' Condition='true'/>
                     <ItemDefinitionGroup Condition='true' Label='l'>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
index 159572b1e2f..741534ff364 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
@@ -31,7 +31,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose X='Y'/>
                     </Project>
                 ";
@@ -50,7 +50,7 @@ public void ReadInvalidConditionAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose Condition='true'/>
                     </Project>
                 ";
@@ -68,7 +68,7 @@ public void ReadInvalidChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <X/>
                         </Choose>
@@ -88,7 +88,7 @@ public void ReadInvalidWhen()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When>
                                 <PropertyGroup><x/></PropertyGroup>
@@ -113,7 +113,7 @@ public void ReadInvalidOnlyOtherwise()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <Otherwise/>
                         </Choose>
@@ -133,7 +133,7 @@ public void ReadInvalidTwoOtherwise()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <Otherwise/>
                             <Otherwise/>
@@ -154,7 +154,7 @@ public void ReadInvalidOtherwiseBeforeWhen()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <Otherwise/>
                             <When Condition='c'/>
@@ -178,7 +178,7 @@ public void ReadInvalidEmptyChoose()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose/>
                     </Project>
                 ";
@@ -197,7 +197,7 @@ public void ReadInvalidEmptyChoose()
         public void ReadChooseOnlyWhen()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When Condition='c'/>
                         </Choose>
@@ -218,7 +218,7 @@ public void ReadChooseOnlyWhen()
         public void ReadChooseBothWhenOtherwise()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When Condition='c1'/>
                             <When Condition='c2'/>
@@ -254,7 +254,7 @@ public void ExcessivelyNestedChoose()
                     builder2.Append("</When></Choose>");
                 }
 
-                string content = "<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>";
+                string content = "<Project>";
                 content += builder1.ToString();
                 content += builder2.ToString();
                 content += @"</Project>";
@@ -270,13 +270,13 @@ public void ExcessivelyNestedChoose()
         public void SettingWhenConditionDirties()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When Condition='true'>
                               <PropertyGroup>
                                 <p>v1</p>
-                              </PropertyGroup> 
-                            </When>      
+                              </PropertyGroup>
+                            </When>
                         </Choose>
                     </Project>
                 ";
diff --git a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
index 1791e4a702f..31dd3783930 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
@@ -14,8 +14,7 @@
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
-    // <summary>Tests for the ProjectExtensionsElement class.</summary>
-    /// Tests for the  class
+    /// Tests for the <see cref="ProjectExtensionsElement"/> class.
     /// </summary>
     public class ProjectExtensionsElement_Tests
     {
@@ -26,7 +25,7 @@ public class ProjectExtensionsElement_Tests
         public void Read()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a/>
                    </ProjectExtensions>
@@ -36,7 +35,7 @@ public void Read()
             ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
-            Assert.Equal(@"<a xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" />", extensions.Content);
+            Assert.Equal(@"<a />", extensions.Content);
         }
 
         /// <summary>
@@ -48,7 +47,7 @@ public void ReadInvalidCondition()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions Condition='c'/>
                  </Project>
                 ";
@@ -66,7 +65,7 @@ public void ReadInvalidDuplicate()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions/>
                    <Target Name='t'/>
                    <ProjectExtensions   />
@@ -88,7 +87,7 @@ public void SetValid()
 
             extensions.Content = "a<b/>c";
 
-            Assert.Equal(@"a<b xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" />c", extensions.Content);
+            Assert.Equal(@"a<b />c", extensions.Content);
             Assert.True(extensions.ContainingProject.HasUnsavedChanges);
         }
 
@@ -107,13 +106,13 @@ public void SetInvalidNull()
            );
         }
         /// <summary>
-        /// Delete by ID 
+        /// Delete by ID
         /// </summary>
         [Fact]
         public void DeleteById()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -132,13 +131,13 @@ public void DeleteById()
         }
 
         /// <summary>
-        /// Get by ID 
+        /// Get by ID
         /// </summary>
         [Fact]
         public void GetById()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -163,7 +162,7 @@ public void GetById()
         public void SetById()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -185,7 +184,7 @@ public void SetById()
         public void SetByIdWhereItAlreadyExists()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -206,7 +205,7 @@ public void SetByIdWhereItAlreadyExists()
         private static ProjectExtensionsElement GetEmptyProjectExtensions()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions/>
                  </Project>
                 ";
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index e7febaf5bd1..d4c31dd57ef 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -42,7 +42,7 @@ public void ReadInvalidMissingProject()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import/>
                     </Project>
                 ";
@@ -60,7 +60,7 @@ public void ReadInvalidEmptyProject()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project=''/>
                     </Project>
                 ";
@@ -78,7 +78,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='p' X='Y'/>
                     </Project>
                 ";
@@ -94,7 +94,7 @@ public void ReadInvalidAttribute()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='i1.proj' />
                         <Import Project='i2.proj' Condition='c'/>
                     </Project>
@@ -117,7 +117,7 @@ public void ReadBasic()
         public void SetProjectValid()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='i1.proj' />
                     </Project>
                 ";
@@ -139,7 +139,7 @@ public void SetProjectInvalidEmpty()
             Assert.Throws<ArgumentException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='i1.proj' />
                     </Project>
                 ";
@@ -175,7 +175,7 @@ public void SettingProjectDirties()
 
                 string content = String.Format
                     (
-    @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+    @"<Project>
     <Import Project='{0}'/>
 </Project>",
                     file1
@@ -215,7 +215,7 @@ public void SettingConditionDirties()
 
                 string content = String.Format
                     (
-    @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+    @"<Project>
     <Import Project='{0}'/>
 </Project>",
                     file
@@ -250,14 +250,14 @@ public void ImportWithRelativePath()
             string projectfileContent = String.Format
                 (
                 @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='{0}'/>
                     </Project>
                 ",
                  testTempPath + "\\..\\x.targets"
                  );
             string targetsfileContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                     </Project>
                 ";
             try
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
index aa4e08949ab..3b2b05d094a 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
@@ -27,7 +27,7 @@ public class ProjectImportGroupElement_Tests
         public void AddImportWhenNoImportGroupExists()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                     </Project>
                 ";
@@ -37,7 +37,7 @@ public void AddImportWhenNoImportGroupExists()
             project.AddImport("b.proj");
 
             string expectedContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <Import Project='b.proj' />
                     </Project>
@@ -54,7 +54,7 @@ public void AddImportWhenNoImportGroupExists()
         public void AddImportToLastImportGroupWithNoCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup>
                             <Import Project='b.proj' />
@@ -76,7 +76,7 @@ public void AddImportToLastImportGroupWithNoCondition()
             project.AddImport("e.proj");
 
             string expectedContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup>
                             <Import Project='b.proj' />
@@ -105,7 +105,7 @@ public void AddImportToLastImportGroupWithNoCondition()
         public void AddImportOnlyConditionedImportGroupsExist()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup Condition='c1'>
                             <Import Project='b.proj' />
@@ -121,7 +121,7 @@ public void AddImportOnlyConditionedImportGroupsExist()
             project.AddImport("d.proj");
 
             string expectedContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup Condition='c1'>
                             <Import Project='b.proj' />
@@ -154,7 +154,7 @@ public void ReadNone()
         public void ReadNoChild()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup />
                     </Project>
                 ";
@@ -176,7 +176,7 @@ public void ReadInvalidChildMissingProject()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import/>
                         </ImportGroup>
@@ -197,7 +197,7 @@ public void ReadInvalidChildType()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <PropertyGroup />
                         </ImportGroup>
@@ -218,7 +218,7 @@ public void ReadInvalidParentType()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <ImportGroup />
                         </PropertyGroup>
@@ -238,7 +238,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup X='Y'/>
                     </Project>
                 ";
@@ -254,7 +254,7 @@ public void ReadInvalidAttribute()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                             <Import Project='i2.proj' Condition='c'/>
@@ -282,7 +282,7 @@ public void ReadBasic()
         public void ReadMultipleImportGroups()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                             <Import Project='i2.proj' Condition='c'/>
@@ -317,7 +317,7 @@ public void ReadMultipleImportGroups()
         public void SetProjectValid()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                         </ImportGroup>
@@ -344,7 +344,7 @@ public void SetProjectInvalidEmpty()
             Assert.Throws<ArgumentException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                         </ImportGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
index 25214d33202..a7caaaff7f4 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
@@ -24,7 +24,7 @@ public class ProjectItemDefinitionElement_Tests
         public void ReadNoChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i/>
                         </ItemDefinitionGroup>
@@ -45,7 +45,7 @@ public void ReadNoChildren()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m1>v1</m1>
@@ -75,7 +75,7 @@ public void ReadBasic()
         public void ReadBuiltInElementName()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <PropertyGroup/>
                         </ItemDefinitionGroup>
@@ -92,7 +92,7 @@ public void ReadBuiltInElementName()
         public void ReadMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='v1'>
                                 <m2 Condition='c'>v2</m2>
@@ -124,63 +124,63 @@ public void ReadMetadata()
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Include='inc' />
-                        </ItemDefinitionGroup> 
+                        </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Update='upd' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Remove='rem' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Exclude='excl' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i KeepMetadata='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i RemoveMetadata='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i KeepDuplicates='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i cOndiTion='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i LabeL='text' />
                         </ItemDefinitionGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
index 234aca51ca1..5b081f981f3 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
@@ -38,7 +38,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup X='Y'/>
                     </Project>
                 ";
@@ -54,7 +54,7 @@ public void ReadInvalidAttribute()
         public void ReadNoChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup/>
                     </Project>
                 ";
@@ -72,7 +72,7 @@ public void ReadNoChildren()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup Condition='c'>
                             <i1/>
                         </ItemDefinitionGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
index bb8e40a0027..621f0b367c1 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
@@ -22,7 +22,7 @@ namespace Microsoft.Build.UnitTests.OM.Construction
     public class ProjectItemElement_Tests
     {
         private const string RemoveInTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Remove='i'/>
@@ -32,21 +32,21 @@ public class ProjectItemElement_Tests
                 ";
 
         private const string RemoveOutsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                             <ItemGroup>
                                 <i Remove='i'/>
                             </ItemGroup>
                     </Project>
                 ";
         private const string IncludeOutsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i'/>
                         </ItemGroup>
                     </Project>
                 ";
         private const string IncludeInsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i'/>
@@ -55,14 +55,14 @@ public class ProjectItemElement_Tests
                     </Project>
                 ";
         private const string UpdateOutsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                             <ItemGroup>
                                 <i Update='i'/>
                             </ItemGroup>
                     </Project>
                 ";
         private const string UpdateInTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Update='i'/>
@@ -89,7 +89,7 @@ public void ReadNoChildren(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i/>
                         </ItemGroup>
@@ -97,7 +97,7 @@ public void ReadNoChildren(string project)
                 ")]
         // https://github.com/dotnet/msbuild/issues/900
         // [InlineData(@"
-        //            <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+        //            <Project>
         //                <Target Name='t'>
         //                    <ItemGroup>
         //                        <i/>
@@ -119,14 +119,14 @@ public void ReadInvalidNoInclude(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a'>error text</i>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='a'>error text</i>
@@ -148,14 +148,14 @@ public void ReadInvalidContainsText(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include=''/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include=''/>
@@ -177,14 +177,14 @@ public void ReadInvalidEmptyInclude(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <PropertyGroup Include='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <PropertyGroup Include='i1'/>
@@ -208,7 +208,7 @@ public void ReadInvalidReservedElementName(string project)
         public void ReadInvalidExcludeWithoutInclude()
         {
             var project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Exclude='i1'/>
                         </ItemGroup>
@@ -219,10 +219,10 @@ public void ReadInvalidExcludeWithoutInclude()
                 Assert.Throws<InvalidProjectFileException>(
                     () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); }
                     );
-            
+
             Assert.Contains("Items that are outside Target elements must have one of the following operations: Include, Update, or Remove.", exception.Message);
         }
-        
+
         /// <summary>
         /// Read item with Exclude without Include under a target
         /// </summary>
@@ -230,7 +230,7 @@ public void ReadInvalidExcludeWithoutInclude()
         public void ReadInvalidExcludeWithoutIncludeUnderTarget()
         {
             var project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Exclude='i1'/>
@@ -243,20 +243,20 @@ public void ReadInvalidExcludeWithoutIncludeUnderTarget()
                 Assert.Throws<InvalidProjectFileException>(
                     () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); }
                     );
-            
+
             Assert.Contains("The attribute \"Exclude\" in element <i> is unrecognized.", exception.Message);
         }
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i include='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i include='i1'/>
@@ -265,14 +265,14 @@ public void ReadInvalidExcludeWithoutIncludeUnderTarget()
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' exclude='i2' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' exclude='i2' />
@@ -294,7 +294,7 @@ public void ReadInvalidItemAttributeCasing(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'>
                                 <m1>v1</m1>
@@ -306,7 +306,7 @@ public void ReadInvalidItemAttributeCasing(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i'>
@@ -320,7 +320,7 @@ public void ReadInvalidItemAttributeCasing(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='v1' />
                             <i2 Include='i' Exclude='j' m2='v2' />
@@ -328,7 +328,7 @@ public void ReadInvalidItemAttributeCasing(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='v1' />
@@ -340,7 +340,7 @@ public void ReadInvalidItemAttributeCasing(string project)
         public void ReadBasic(string project)
         {
             ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            ProjectItemGroupElement itemGroup = (ProjectItemGroupElement) projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
+            ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
 
@@ -366,7 +366,7 @@ public void ReadBasic(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'>
                                 <m1>v1</m1>
@@ -377,7 +377,7 @@ public void ReadBasic(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i'>
@@ -408,14 +408,14 @@ public void ReadMetadata(string project)
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Update='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Update='i2'/>
@@ -434,14 +434,14 @@ public void ReadInvalidUpdateWithInclude(string project)
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Exclude='i1' Update='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Exclude='i1' Update='i2'/>
@@ -460,14 +460,14 @@ public void ReadInvalidUpdateWithIncludeAndExclude(string project)
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Exclude='i1' Update='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Exclude='i1' Update='i2'/>
@@ -489,7 +489,7 @@ public void ReadInvalidUpdateWithExclude(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Remove='i1'>
                                     <m> </m>
@@ -498,7 +498,7 @@ public void ReadInvalidUpdateWithExclude(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Remove='i1'>
@@ -522,14 +522,14 @@ public void ReadInvalidRemoveWithMetadata(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Exclude='i1' Remove='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Exclude='i1' Remove='i1'/>
@@ -551,14 +551,14 @@ public void ReadInvalidExcludeAndRemove(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Remove='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Remove='i1'/>
@@ -606,14 +606,14 @@ public void ReadValidUpdate(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Exclude='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Exclude='i2'/>
@@ -831,7 +831,7 @@ public void SetInvalidExcludeWithRemove(string project)
             }
            );
         }
-        
+
         /// <summary>
         /// Set Update when Remove is present
         /// </summary>
@@ -849,7 +849,7 @@ public void SetInvalidUpdateWithRemove(string project)
            );
         }
 
-        /// 
+        ///
         /// <summary>
         /// Set the Update on an item
         /// </summary>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
index 22e5b500162..05fa6347ad6 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
@@ -34,7 +34,7 @@ public void ReadNoItemGroup()
         public void ReadEmptyItemGroup()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup/>
                     </Project>
                 ";
@@ -52,7 +52,7 @@ public void ReadEmptyItemGroup()
         public void ReadItemGroupTwoItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'/>
                             <i Include='i2'/>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index 77402ebc077..fc29f4d87da 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -50,7 +50,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition='c' XX='YY'/>
@@ -72,7 +72,7 @@ public void ReadInvalidName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <" + "\u03A3" + @"/>
@@ -88,14 +88,14 @@ public void ReadInvalidName()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' " + "\u03A3" + @"='v1' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i " + "\u03A3" + @"='v1' />
                         </ItemDefinitionGroup>
@@ -119,7 +119,7 @@ public void ReadInvalidBuiltInName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <Filename/>
@@ -135,14 +135,14 @@ public void ReadInvalidBuiltInName()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Filename='v1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Filename='v1'/>
                         </ItemDefinitionGroup>
@@ -166,7 +166,7 @@ public void ReadInvalidBuiltInElementName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <PropertyGroup/>
@@ -185,14 +185,14 @@ public void ReadInvalidBuiltInElementName()
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' PropertyGroup='v1' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i PropertyGroup='v1' />
                         </ItemDefinitionGroup>
@@ -290,14 +290,14 @@ public void SetExpressedAsAttributeIllegalName()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' />
@@ -326,7 +326,7 @@ public void AddMetadataAsAttributeIllegalName(string project)
         public void AddMetadataAsAttributeToItemDefinitionIllegalName()
         {
             string project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1/>
                         </ItemDefinitionGroup>
@@ -383,7 +383,7 @@ public void ReadInvalidItemExpressionInMetadata()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m1>@(x)</m1>
@@ -403,7 +403,7 @@ public void ReadInvalidItemExpressionInMetadata()
         public void ReadValidItemExpressionInMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>@(x)</m1>
@@ -418,14 +418,14 @@ public void ReadValidItemExpressionInMetadata()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='v1' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='v1' />
@@ -453,7 +453,7 @@ public void ReadMetadataAsAttribute(string project)
         public void ReadMetadataAsAttributeOnItemDefinition()
         {
             string project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='v1' />
                         </ItemDefinitionGroup>
@@ -475,14 +475,14 @@ public void ReadMetadataAsAttributeOnItemDefinition()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='&lt;&amp;>""' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='&lt;&amp;>""' />
@@ -510,7 +510,7 @@ public void ReadMetadataAsAttributeWithSpecialCharacters(string project)
         public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
         {
             var project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='&lt;&amp;>""' />
                         </ItemDefinitionGroup>
@@ -532,19 +532,19 @@ public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v2` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -552,7 +552,7 @@ public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
                         </Target>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v2` />
@@ -598,7 +598,7 @@ public void UpdateMetadataValueAsAttribute(string projectContents, string update
         public void UpdateMetadataValueAsAttributeOnItemDefinition()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -631,7 +631,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v2` />
                         </ItemDefinitionGroup>
@@ -647,19 +647,19 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
         //      &lt;&amp;&gt;&quot;
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`&lt;&amp;&gt;&quot;` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -667,7 +667,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
                         </Target>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`&lt;&amp;&gt;&quot;` />
@@ -713,7 +713,7 @@ public void UpdateMetadataValueAsAttributeWithSpecialCharacters(string projectCo
         public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -746,7 +746,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`&lt;&amp;&gt;&quot;` />
                         </ItemDefinitionGroup>
@@ -758,7 +758,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'>
                               <m1>v1</m1>
@@ -766,25 +766,25 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'><m1>v1</m1></i1>
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i'>
@@ -794,7 +794,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                         </Target>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -837,7 +837,7 @@ public void ChangeMetadataToAttribute(string projectContents, string updatedProj
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1>
                               <m1>v1</m1>
@@ -845,19 +845,19 @@ public void ChangeMetadataToAttribute(string projectContents, string updatedProj
                         </ItemDefinitionGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1><m1>v1</m1></i1>
                         </ItemDefinitionGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -898,13 +898,13 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='v1' />
                         </ItemGroup>
                     </Project>",
                     @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i`>
                               <m1>v1</m1>
@@ -912,7 +912,7 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='v1' />
@@ -920,7 +920,7 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
                         </Target>
                     </Project>",
                     @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i`>
@@ -967,7 +967,7 @@ public void ChangeAttributeToMetadata(string projectContents, string updatedProj
         public void ChangeAttributeToMetadataOnItemDefinition()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='v1'/>
                         </ItemDefinitionGroup>
@@ -999,7 +999,7 @@ public void ChangeAttributeToMetadataOnItemDefinition()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                 ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1>
                               <m1>v1</m1>
@@ -1013,19 +1013,19 @@ public void ChangeAttributeToMetadataOnItemDefinition()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' />
                         </ItemGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' />
@@ -1033,7 +1033,7 @@ public void ChangeAttributeToMetadataOnItemDefinition()
                         </Target>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -1075,7 +1075,7 @@ public void AddMetadataAsAttribute(string projectContents, string updatedProject
         public void AddMetadataAsAttributeToItemDefinition()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1/>
                         </ItemDefinitionGroup>
@@ -1104,7 +1104,7 @@ public void AddMetadataAsAttributeToItemDefinition()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -1116,13 +1116,13 @@ public void AddMetadataAsAttributeToItemDefinition()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' />
                         </ItemGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1`>
                               <m2>v2</m2>
@@ -1130,7 +1130,7 @@ public void AddMetadataAsAttributeToItemDefinition()
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' />
@@ -1138,7 +1138,7 @@ public void AddMetadataAsAttributeToItemDefinition()
                         </Target>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1`>
@@ -1189,7 +1189,7 @@ public void AddMetadataAsAttributeAndAsElement(string projectContents, string up
         public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1/>
                         </ItemDefinitionGroup>
@@ -1225,7 +1225,7 @@ public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1`>
                               <m2>v2</m2>
@@ -1243,7 +1243,7 @@ public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
         private static ProjectMetadataElement GetMetadataXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition='c'>m1</m>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
index e9c9038343f..1edfae8a76d 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
@@ -38,7 +38,7 @@ public void ReadTargetOnlyContainingOnError()
         public void ReadTargetTwoOnErrors()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1/>
                             <t2/>
@@ -71,7 +71,7 @@ public void ReadMissingExecuteTargets()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError/>
                         </Target>
@@ -98,7 +98,7 @@ public void ReadEmptyExecuteTargets()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets=''/>
                         </Target>
@@ -122,7 +122,7 @@ public void ReadInvalidUnexpectedAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t' XX='YY'/>
                         </Target>
@@ -142,7 +142,7 @@ public void ReadInvalidUnexpectedChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'>
                                 <X/>
@@ -164,7 +164,7 @@ public void ReadInvalidBeforeTask()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'/>
                             <t/>
@@ -185,7 +185,7 @@ public void ReadInvalidBeforePropertyGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'/>
                             <PropertyGroup/>
@@ -206,7 +206,7 @@ public void ReadInvalidBeforeItemGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'/>
                             <ItemGroup/>
@@ -301,7 +301,7 @@ public void SetExecuteTargets()
         private static ProjectOnErrorElement GetOnError()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t' Condition='c'/>
                         </Target>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
index a1c2c5403ec..2a3bfb4a6c8 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
@@ -57,7 +57,7 @@ public void ReadInvalidOutputWithoutPropertyOrItem()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p'/>
@@ -80,7 +80,7 @@ public void ReadInvalidReservedOutputPropertyName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' PropertyName='MSBuildProjectFile'/>
@@ -103,7 +103,7 @@ public void ReadInvalidOutputWithoutTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output ItemName='i'/>
@@ -126,7 +126,7 @@ public void ReadInvalidOutputWithEmptyTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskName='' ItemName='i'/>
@@ -149,7 +149,7 @@ public void ReadInvalidOutputWithChildElement()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output ItemName='i' TaskParameter='x'>
@@ -174,7 +174,7 @@ public void ReadInvalidPropertyValueItemBlank()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='t' PropertyName='p' ItemName=''/>
@@ -197,7 +197,7 @@ public void ReadInvalidItemValuePropertyBlank()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='t' ItemName='i' PropertyName=''/>
@@ -287,7 +287,7 @@ public void SetOutputItemPropertyName()
         private static ProjectOutputElement GetOutputItem()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' ItemName='i1' />
@@ -309,7 +309,7 @@ private static ProjectOutputElement GetOutputItem()
         private static ProjectOutputElement GetOutputProperty()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' PropertyName='p1' />
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
index 810e9fd0f0b..8942470692d 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
@@ -38,7 +38,7 @@ public void ReadProperty()
         public void ReadPropertyWithChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p>A<B>C<D/></B>E</p>
                         </PropertyGroup>
@@ -50,7 +50,7 @@ public void ReadPropertyWithChildren()
             ProjectPropertyElement property = Helpers.GetFirst(propertyGroup.Properties);
 
             Assert.Equal("p", property.Name);
-            Assert.Equal(@"A<B xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">C<D /></B>E", property.Value);
+            Assert.Equal(@"A<B>C<D /></B>E", property.Value);
         }
 
         /// <summary>
@@ -62,7 +62,7 @@ public void ReadInvalidName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <" + "\u03A3" + @"/>
                         </PropertyGroup>
@@ -82,7 +82,7 @@ public void ReadInvalidReservedName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <PropertyGroup/>
                         </PropertyGroup>
@@ -102,7 +102,7 @@ public void ReadInvalidBuiltInName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <MSBuildProjectFile/>
                         </PropertyGroup>
@@ -122,7 +122,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p XX='YY'/>
                         </PropertyGroup>
@@ -142,7 +142,7 @@ public void ReadInvalidChildElement()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p>
                                 <X/>
@@ -275,7 +275,7 @@ public void SetCondition()
         private static ProjectPropertyElement GetPropertyXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p Condition='c'>v</p>
                         </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index 13a54b102e4..ba0defea01b 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -216,7 +216,7 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath2()
         [Fact]
         public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath3()
         {
-            string content = "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n</Project>";
+            string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
             ProjectRootElement projectXml1 = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
 
@@ -233,7 +233,7 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath3()
         [Fact]
         public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath4()
         {
-            string content = "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n</Project>";
+            string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
             ProjectRootElement projectXml1 = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
 
@@ -292,7 +292,7 @@ public void InvalidRootTag()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <XXX xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>
+                    <XXX />
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
@@ -308,7 +308,7 @@ public void InvalidChildBelowRoot()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <XXX/>
                     </Project>
                 ";
@@ -394,7 +394,7 @@ public void ValidXmlInvalidSyntaxInChildElement()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                            <XXX YYY='ZZZ'/>
                         </ItemGroup>
@@ -415,7 +415,7 @@ public void ValidXmlInvalidSyntaxOpenFromDiskTwice()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                            <XXX YYY='ZZZ'/>
                         </ItemGroup>
@@ -455,10 +455,7 @@ public void ValidXmlInvalidSyntaxOpenFromDiskTwice()
         [Trait("Category", "netcore-linux-failing")]
         public void ValidXmlXmlTextReaderNotCache()
         {
-            string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
-                    </Project>
-                ";
+            string content = @"<Project />";
 
             string path = null;
 
@@ -493,15 +490,9 @@ public void ValidXmlXmlTextReaderNotCache()
         [Fact]
         public void ValidXmlXmlReaderCache()
         {
-            string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
-                    </Project>
-                ";
+            string content = @"<Project />";
 
-            string content2 = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' DefaultTargets='t'>
-                    </Project>
-                ";
+            string content2 = @"<Project DefaultTargets='t' />";
 
             string path = null;
 
@@ -951,7 +942,7 @@ public void SolutionCanNotBeOpened()
         /// Build a project file that can't be accessed
         /// </summary>
         [Fact]
-        [PlatformSpecific (TestPlatforms.Windows)]
+        [PlatformSpecific(TestPlatforms.Windows)]
         // FileSecurity class is not supported on Unix
         public void ProjectCanNotBeOpened()
         {
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
index 9455e2f0552..eb7d71c2634 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
@@ -48,7 +48,7 @@ public void ReadNoTarget()
         public void ReadEmptyTarget()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -166,7 +166,7 @@ public void ReadInvalidMissingName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target/>
                     </Project>
                 ";
@@ -184,7 +184,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target XX='YY'/>
                     </Project>
                 ";
@@ -310,7 +310,7 @@ public void SetKeepDuplicateOutputs()
 
         /// <summary>
         /// Set return value.  Verify that setting to the empty string and null are
-        /// both allowed and have distinct behaviour. 
+        /// both allowed and have distinct behaviour.
         /// </summary>
         [Fact]
         public void SetReturns()
@@ -345,7 +345,7 @@ public void SetReturns()
         private static ProjectTargetElement GetTargetXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t' Inputs='i' Outputs='o' DependsOnTargets='d' Condition='c'>
                             <t1/>
                             <t2/>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
index 341ddf19a52..d469a8da1f8 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
@@ -25,7 +25,7 @@ public class ProjectTaskElement_Tests
         public void ReadNoParameters()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1/>
                         </Target>
@@ -47,7 +47,7 @@ public void ReadNoParameters()
         public void ReadContinueOnError()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 ContinueOnError='coe'/>
                         </Target>
@@ -66,7 +66,7 @@ public void ReadContinueOnError()
         public void ReadCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 Condition='c'/>
                         </Target>
@@ -87,7 +87,7 @@ public void ReadInvalidChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <X/>
@@ -102,14 +102,14 @@ public void ReadInvalidChild()
         }
         /// <summary>
         /// Read task with empty parameter.
-        /// Although MSBuild does not set these on tasks, they 
+        /// Although MSBuild does not set these on tasks, they
         /// are visible in the XML objects for editing purposes.
         /// </summary>
         [Fact]
         public void ReadEmptyParameter()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 p1='' />
                         </Target>
@@ -130,7 +130,7 @@ public void ReadEmptyParameter()
         public void ReadParameters()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 p1='v1' p2='v2' />
                         </Target>
@@ -316,7 +316,7 @@ private static ProjectTaskElement GetTaskFromContent(string content)
         private static ProjectTaskElement GetBasicTask()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 p1='v1' />
                         </Target>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
index 1dcffc4b6e3..e9305ec49ae 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
@@ -39,7 +39,7 @@ public void ReadInvalidMissingTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask AssemblyFile='af'/>
                     </Project>
                 ";
@@ -57,7 +57,7 @@ public void ReadInvalidEmptyTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='' AssemblyFile='af'/>
                     </Project>
                 ";
@@ -75,7 +75,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyFile='af' X='Y'/>
                     </Project>
                 ";
@@ -93,7 +93,7 @@ public void ReadInvalidMissingAssemblyFileAssemblyName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t'/>
                     </Project>
                 ";
@@ -111,7 +111,7 @@ public void ReadInvalidEmptyAssemblyFile()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyFile=''/>
                     </Project>
                 ";
@@ -129,7 +129,7 @@ public void ReadInvalidEmptyAssemblyFileAndAssemblyNameNotEmpty()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyFile='' AssemblyName='n'/>
                     </Project>
                 ";
@@ -147,7 +147,7 @@ public void ReadInvalidEmptyAssemblyNameAndAssemblyFileNotEmpty()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyName='' AssemblyFile='f'/>
                     </Project>
                 ";
@@ -165,7 +165,7 @@ public void ReadInvalidBothAssemblyFileAssemblyName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyName='an' AssemblyFile='af'/>
                     </Project>
                 ";
@@ -183,7 +183,7 @@ public void ReadInvalidBothEmptyAssemblyFileEmptyAssemblyNameBoth()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyName='' AssemblyFile=''/>
                     </Project>
                 ";
@@ -361,7 +361,7 @@ public void DuplicateParameterGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <ParameterGroup/>
                             <ParameterGroup/>
@@ -382,7 +382,7 @@ public void DuplicateTaskGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <Task/>
                             <Task/>
@@ -403,7 +403,7 @@ public void UnknownChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <IAMUNKNOWN/>
                         </UsingTask>
@@ -421,7 +421,7 @@ public void UnknownChild()
         public void WorksWithChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <ParameterGroup>
                                <MyParameter/>
@@ -448,7 +448,7 @@ public void ExceptionWhenNoTaskFactoryAndHavePG()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'>
                             <ParameterGroup>
                                <MyParameter/>
@@ -472,7 +472,7 @@ public void ExceptionWhenNoTaskFactoryAndHaveTask()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'>
                             <Task/>
                         </UsingTask>
@@ -491,7 +491,7 @@ public void ExceptionWhenNoTaskFactoryAndHaveTask()
         private static ProjectUsingTaskElement GetUsingTaskFactoryRuntimeAndPlatform()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory' />
                     </Project>
                 ";
@@ -507,7 +507,7 @@ private static ProjectUsingTaskElement GetUsingTaskFactoryRuntimeAndPlatform()
         private static ProjectUsingTaskElement GetUsingTaskAssemblyFile()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t1' AssemblyFile='af' />
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'/>
                     </Project>
@@ -524,7 +524,7 @@ private static ProjectUsingTaskElement GetUsingTaskAssemblyFile()
         private static ProjectUsingTaskElement GetUsingTaskAssemblyName()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'/>
                     </Project>
                 ";
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
index 026eea8a288..3396ae04416 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
@@ -39,7 +39,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask AssemblyFile='af' TaskFactory='AssemblyFactory'>
                             <Task NotValidAttribute='OHI'/>
                        </UsingTask>
@@ -60,7 +60,7 @@ public void CreateBodyOutsideUsingTask()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Task>
                             Contents
                         </Task>
@@ -132,7 +132,7 @@ public void SetEvaluateAttributeToNull()
         private static ProjectUsingTaskBodyElement GetBodyXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                             <Task Evaluate='false'>Contents</Task>
                        </UsingTask>
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
index c41979b3033..35b673f7e05 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
@@ -22,7 +22,7 @@ public class UsingTaskParameterElement_Tests
         /// Parameter element with all attributes set
         /// </summary>
         private static string s_contentAllAttributesSet = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter ParameterType='System.String' Output='true' Required='false'/>
@@ -35,7 +35,7 @@ public class UsingTaskParameterElement_Tests
         /// Parameter element with no attributes set
         /// </summary>
         private static string s_contentNoAttributesSet = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter/>
@@ -81,7 +81,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter Invaliid='System.String'/>
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
index c292e82e704..16d94683c80 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
@@ -22,7 +22,7 @@ public class UsingTaskParameterGroup_Tests
         /// ParameterGroup with no parameters inside
         /// </summary>
         private static string s_contentEmptyParameterGroup = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup/>
                        </UsingTask>
@@ -33,7 +33,7 @@ public class UsingTaskParameterGroup_Tests
         /// ParameterGroup with duplicate child parameters
         /// </summary>
         private static string s_contentDuplicateParameters = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter/>
@@ -47,7 +47,7 @@ public class UsingTaskParameterGroup_Tests
         /// ParameterGroup with multiple parameters
         /// </summary>
         private static string s_contentMultipleParameters = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter1 ParameterType='System.String' Output='true' Required='false'/>
@@ -121,7 +121,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup BadAttribute='Hello'/>
                        </UsingTask>
diff --git a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
index a93e541c7e1..ec11160ae1c 100644
--- a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
@@ -25,7 +25,7 @@ public class EditingElementsReferencedByOrReferences_Tests
         public void ChangeItemTypeInReferencedItem()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""@(I);Y"" />
@@ -36,7 +36,7 @@ public void ChangeItemTypeInReferencedItem()
             item.ItemType = "J";
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <J Include=""X"" />
     <I Include=""@(I);Y"" />
@@ -59,7 +59,7 @@ public void ChangeItemTypeInReferencedItem()
         public void RemoveItemInList()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""@(I);Y;Z"" />
@@ -70,7 +70,7 @@ public void RemoveItemInList()
             project.RemoveItem(item);
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""X"" />
@@ -88,7 +88,7 @@ public void RemoveItemInList()
         public void RenameItemInList()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""@(I);Y"" />
@@ -99,7 +99,7 @@ public void RenameItemInList()
             item.Rename("Z");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""X"" />
@@ -117,7 +117,7 @@ public void RenameItemInList()
         public void RemoveMetadata1()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -143,7 +143,7 @@ public void RemoveMetadata1()
             item1.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -168,7 +168,7 @@ public void RemoveMetadata1()
         public void RemoveMetadata2()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -189,7 +189,7 @@ public void RemoveMetadata2()
             item1.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -220,7 +220,7 @@ public void RemoveMetadata2()
         public void RemoveMetadata3()
         {
             Project project = GetProject(
-        @"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+        @"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -245,7 +245,7 @@ public void RemoveMetadata3()
             item2.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -274,7 +274,7 @@ public void RemoveMetadata3()
         public void RemoveReferencedMetadata()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""i"">
       <M>m</M>
@@ -289,7 +289,7 @@ public void RemoveReferencedMetadata()
             item.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""i"">
       <N>%(I.M)</N>
@@ -313,7 +313,7 @@ public void RemoveReferencedMetadata()
         public void RemoveProperty()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <PropertyGroup>
     <P>A</P>
     <P>$(P)B</P>
@@ -324,7 +324,7 @@ public void RemoveProperty()
             project.RemoveProperty(property);
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <PropertyGroup>
     <P>A</P>
   </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index 5f570a4d53b..ae5401cdb00 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -82,7 +82,7 @@ public void AddProjectFromDisk()
         }
 
         /// <summary>
-        /// When an unnamed project is saved, it gets a name, and should be entered into 
+        /// When an unnamed project is saved, it gets a name, and should be entered into
         /// the appropriate project collection.
         /// </summary>
         [Fact]
@@ -111,7 +111,7 @@ public void AddProjectOnSave()
         }
 
         /// <summary>
-        /// When an unnamed project is saved, it gets a name, and should be entered into 
+        /// When an unnamed project is saved, it gets a name, and should be entered into
         /// the appropriate project collection.
         /// </summary>
         [Fact]
@@ -374,21 +374,21 @@ public void ErrorTwoProjectsEquivalentOneCollection()
         }
 
         /// <summary>
-        /// Validates that when loading two projects with nominally different global properties, but that match when we take 
-        /// into account the ProjectCollection's global properties, we get the pre-existing project if one exists. 
+        /// Validates that when loading two projects with nominally different global properties, but that match when we take
+        /// into account the ProjectCollection's global properties, we get the pre-existing project if one exists.
         /// </summary>
         [Fact]
         public void TwoProjectsEquivalentWhenOneInheritsFromProjectCollection()
         {
             var project = new Project { FullPath = "c:\\1" };
 
-            // Set a global property on the project collection -- this should be passed on to all 
-            // loaded projects. 
+            // Set a global property on the project collection -- this should be passed on to all
+            // loaded projects.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug");
 
             Assert.Equal("Debug", project.GlobalProperties["Configuration"]);
 
-            // now create a global properties dictionary to pass to a new project 
+            // now create a global properties dictionary to pass to a new project
             var globals = new Dictionary<string, string> { { "Configuration", "Debug" } };
 
             ProjectCollection.GlobalProjectCollection.LoadProject("c:\\1", globals, null);
@@ -432,15 +432,15 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly()
 
         /// <summary>
         /// Validates that we can correctly load two of the same project file with different global properties, even when
-        /// those global properties are applied to the project by the project collection (and then overridden in one case). 
+        /// those global properties are applied to the project by the project collection (and then overridden in one case).
         /// </summary>
         [Fact]
         public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProjectCollection()
         {
             var project = new Project { FullPath = "c:\\1" };
 
-            // Set a global property on the project collection -- this should be passed on to all 
-            // loaded projects. 
+            // Set a global property on the project collection -- this should be passed on to all
+            // loaded projects.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug");
 
             Assert.Equal("Debug", project.GlobalProperties["Configuration"]);
@@ -448,7 +448,7 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProje
             // Differentiate this project from the one below
             project.SetGlobalProperty("MyProperty", "MyValue");
 
-            // now create a global properties dictionary to pass to a new project 
+            // now create a global properties dictionary to pass to a new project
             var project2Globals =
                 new Dictionary<string, string> { { "Configuration", "Release" }, { "Platform", "Win32" } };
 
@@ -456,8 +456,8 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProje
 
             Assert.Equal("Release", project2.GlobalProperties["Configuration"]);
 
-            // Setting a global property on the project collection overrides all contained projects, 
-            // whether they were initially loaded with the global project collection's value or not. 
+            // Setting a global property on the project collection overrides all contained projects,
+            // whether they were initially loaded with the global project collection's value or not.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Platform", "X64");
             Assert.Equal("X64", project.GlobalProperties["Platform"]);
             Assert.Equal("X64", project2.GlobalProperties["Platform"]);
@@ -466,14 +466,14 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProje
             project2.SetGlobalProperty("Platform", "Itanium");
             Assert.Equal("Itanium", project2.GlobalProperties["Platform"]);
 
-            // Now set global properties such that the two projects have an identical set.  
+            // Now set global properties such that the two projects have an identical set.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug2");
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Platform", "X86");
 
             bool exceptionCaught = false;
             try
             {
-                // This will make it identical, so we should get a throw here. 
+                // This will make it identical, so we should get a throw here.
                 ProjectCollection.GlobalProjectCollection.SetGlobalProperty("MyProperty", "MyValue2");
             }
             catch (InvalidOperationException)
@@ -512,14 +512,14 @@ public void TwoProjectsDistinguishedByToolsVersionOnly()
         }
 
         /// <summary>
-        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully 
-        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project. 
+        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully
+        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project.
         /// </summary>
         [Fact]
         public void ReloadProjectWithInvalidToolsVersionInFile()
         {
             const string content = @"
-                    <Project ToolsVersion='bogus' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project ToolsVersion='bogus'>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -532,14 +532,14 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
         }
 
         /// <summary>
-        /// Make sure we can reload a project that has a ToolsVersion that doesn't match what it ends up getting 
-        /// forced to by default (current). 
+        /// Make sure we can reload a project that has a ToolsVersion that doesn't match what it ends up getting
+        /// forced to by default (current).
         /// </summary>
         [Fact]
         public void ReloadProjectWithProjectToolsVersionDifferentFromEffectiveToolsVersion()
         {
             const string content = @"
-                    <Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project ToolsVersion='4.0'>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -793,15 +793,15 @@ public void RenameProject()
         }
 
         /// <summary>
-        /// Validates that we don't somehow lose the ProjectCollection global properties when renaming the project. 
+        /// Validates that we don't somehow lose the ProjectCollection global properties when renaming the project.
         /// </summary>
         [Fact]
         public void RenameProjectAndVerifyStillContainsProjectCollectionGlobalProperties()
         {
             var project = new Project { FullPath = "c:\\1" };
 
-            // Set a global property on the project collection -- this should be passed on to all 
-            // loaded projects. 
+            // Set a global property on the project collection -- this should be passed on to all
+            // loaded projects.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug");
 
             Assert.Equal("Debug", project.GlobalProperties["Configuration"]);
@@ -1115,7 +1115,7 @@ public void SetDefaultToolsVersionNonexistentToolset()
         }
 
         /// <summary>
-        /// Set default tools version; subsequent projects should use it 
+        /// Set default tools version; subsequent projects should use it
         /// </summary>
         [Fact]
         public void SetDefaultToolsVersion()
@@ -1135,10 +1135,10 @@ public void SetDefaultToolsVersion()
 
             var project = new Project(XmlReader.Create(new StringReader(content)), null, null, collection);
 
-            // ... and after all that, we end up defaulting to the current ToolsVersion instead.  There's a way 
-            // to turn this behavior (new in Dev12) off, but it requires setting an environment variable and 
-            // clearing some internal state to make sure that the update environment variable is picked up, so 
-            // there's not a good way of doing it from these deliberately public OM only tests. 
+            // ... and after all that, we end up defaulting to the current ToolsVersion instead.  There's a way
+            // to turn this behavior (new in Dev12) off, but it requires setting an environment variable and
+            // clearing some internal state to make sure that the update environment variable is picked up, so
+            // there's not a good way of doing it from these deliberately public OM only tests.
             Assert.Equal(project.ToolsVersion, ObjectModelHelpers.MSBuildDefaultToolsVersion);
         }
 
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 4d175d5a424..42ff3d408de 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -25,14 +25,14 @@ namespace Microsoft.Build.UnitTests.OM.Definition
     public class ProjectItem_Tests : IDisposable
     {
         internal const string ItemWithIncludeAndExclude = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='{0}' Exclude='{1}'/>
                         </ItemGroup>
                     </Project>
                 ";
-        internal const string ItemWithIncludeUpdateAndRemove= @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+        internal const string ItemWithIncludeUpdateAndRemove = @"
+                    <Project>
                         <ItemGroup>
                             <i Include='{0}'>
                                <m>contents</m>
@@ -76,7 +76,7 @@ public void ProjectGetter()
         public void SingleItemWithNoMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'/>
                         </ItemGroup>
@@ -99,7 +99,7 @@ public void SingleItemWithNoMetadata()
         public void ReadMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -129,7 +129,7 @@ public void ReadMetadata()
         public void GetMetadataObjectsFromDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m0>v0</m0>
@@ -166,7 +166,7 @@ public void GetMetadataObjectsFromDefinition()
         public void GetMetadataValuesFromDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m0>v0</m0>
@@ -464,7 +464,7 @@ public void Exclude()
         public void ExcludeWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -491,7 +491,7 @@ public void ExcludeWithIncludeVector()
         public void ExcludeVectorWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -592,7 +592,7 @@ public void IncludeExcludeWithEscapedCharacters(string projectContents, string i
             @"a/b/foo::||bar;a/b/foo::||bar/;a/b/foo::||bar\;a/b\foo::||bar",
             @"a/b/foo::||bar",
             new string[0],
-            new [] { "a/b/foo::||bar/", @"a/b/foo::||bar\", @"a/b\foo::||bar" })]
+            new[] { "a/b/foo::||bar/", @"a/b/foo::||bar\", @"a/b\foo::||bar" })]
         public void IncludeExcludeWithNonPathContents(string projectContents, string includeString, string excludeString, string[] inputFiles, string[] expectedInclude)
         {
             TestIncludeExclude(projectContents, inputFiles, expectedInclude, includeString, excludeString, normalizeSlashes: false);
@@ -909,9 +909,9 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
         [InlineData(
             "../a.cs;b.cs", // include string
             "**/*.cs", // exclude string
-            new[] {"a.cs", "ProjectDir/b.cs"}, // files to create relative to the test root dir
+            new[] { "a.cs", "ProjectDir/b.cs" }, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
-            new[] {"../a.cs"} // expected items
+            new[] { "../a.cs" } // expected items
             )]
         // exclude globbing cone below project level;
         [InlineData(
@@ -919,13 +919,13 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
             "a/**/*.cs",
             new[] { "a.cs", "a/b.cs" },
             "",
-            new[] {"a.cs"}
+            new[] { "a.cs" }
             )]
         // exclude globbing above project level;
         [InlineData(
             "a.cs;../b.cs;../../c.cs",
             "../**/*.cs",
-            new[] { "a/ProjectDir/a.cs", "a/b.cs", "c.cs"},
+            new[] { "a/ProjectDir/a.cs", "a/b.cs", "c.cs" },
             "a/ProjectDir",
             new[] { "../../c.cs" }
             )]
@@ -936,7 +936,7 @@ public void ExcludeWithMissmatchingGlobCones(string includeString, string exclud
             using (var env = TestEnvironment.Create())
             using (var projectCollection = new ProjectCollection())
             {
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, files,relativePathFromRootToProject);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, files, relativePathFromRootToProject);
                 ObjectModelHelpers.AssertItems(expectedInclude, new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection).Items.ToList());
             }
         }
@@ -945,9 +945,9 @@ public void ExcludeWithMissmatchingGlobCones(string includeString, string exclud
         [InlineData(
             "../**/*.cs", // include string
             "a.cs", // exclude string
-            new[] {"ProjectDir/a.cs", "b.cs"}, // files to create relative to the test root dir
+            new[] { "ProjectDir/a.cs", "b.cs" }, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
-            new[] {"../b.cs"} // expected items
+            new[] { "../b.cs" } // expected items
             )]
         public void ExcludingRelativeItemToCurrentDirectoryShouldWorkWithAboveTheConeIncludes(string includeString, string excludeString, string[] files, string relativePathFromRootToProject, string[] expectedInclude)
         {
@@ -968,7 +968,7 @@ public void ExcludingRelativeItemToCurrentDirectoryShouldWorkWithAboveTheConeInc
         public void CopyFromWithItemListExpressionClonesMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                           <i Include='i1'>
                             <m>m1</m>
@@ -1005,7 +1005,7 @@ public void CopyFromWithItemListExpressionClonesMetadata()
         public void CopyFromWithItemListExpressionDoesNotCloneDefinitionMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <m>m1</m>
@@ -1056,7 +1056,7 @@ public void CopyFromWithItemListExpressionDoesNotCloneDefinitionMetadata()
         public void CopyFromWithItemListExpressionClonesDefinitionMetadata_Variation()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <m>m1</m>
@@ -1106,7 +1106,7 @@ public void CopyFromWithItemListExpressionClonesDefinitionMetadata_Variation()
         public void CopyWithItemDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <l>l1</l>
@@ -1203,7 +1203,7 @@ public void CopyWithItemDefinition()
         public void CopyWithItemDefinition2()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <l>l1</l>
@@ -1296,7 +1296,7 @@ public void CopyWithItemDefinition2()
         public void MetadataReferringToMetadataAbove()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -1322,7 +1322,7 @@ public void MetadataReferringToMetadataAbove()
         public void BuiltInMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(Identity)</m>
@@ -1343,7 +1343,7 @@ public void BuiltInMetadataExpression()
         public void BuiltInQualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(i.Identity)</m>
@@ -1364,7 +1364,7 @@ public void BuiltInQualifiedMetadataExpression()
         public void BuiltInMisqualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(j.Identity)</m>
@@ -1385,7 +1385,7 @@ public void BuiltInMisqualifiedMetadataExpression()
         public void BuiltInMetadataInMetadataCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition=""'%(Identity)'=='i1'"">m1</m>
@@ -1410,7 +1410,7 @@ public void BuiltInMetadataInItemCondition()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Condition=""'%(Identity)'=='i1'/>
                         </ItemGroup>
@@ -1428,7 +1428,7 @@ public void BuiltInMetadataInItemCondition()
         public void BuiltInMetadataTwoItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1.cpp;" + (NativeMethodsShared.IsWindows ? @"c:\bar\i2.cpp" : "/bar/i2.cpp") + @"'>
                                 <m>%(Filename).obj</m>
@@ -1450,7 +1450,7 @@ public void BuiltInMetadataTwoItems()
         public void DifferentMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'>
                                 <m>m1</m>
@@ -1477,7 +1477,7 @@ public void DifferentMetadataItemsFromOtherList()
         public void DifferentBuiltInMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0.x'/>
                             <h Include='h1.y'/>
@@ -1502,7 +1502,7 @@ public void DifferentBuiltInMetadataItemsFromOtherList()
         public void BuiltInMetadataTransformInInclude()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -1527,7 +1527,7 @@ public void BuiltInMetadataTransformInInclude()
         public void BuiltInMetadataTransformInMetadataValue()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -1552,7 +1552,7 @@ public void BuiltInMetadataTransformInMetadataValue()
         public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -1577,7 +1577,7 @@ public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         public void MetadataValueReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -1600,7 +1600,7 @@ public void MetadataValueReferringToItems()
         public void MetadataConditionReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -1625,7 +1625,7 @@ public void MetadataConditionReferringToItems()
         public void MetadataConditionReferringToMetadataOnSameItem()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m0>0</m0>
@@ -1998,7 +1998,7 @@ public void SetDirectMetadataShouldAffectAllSiblingItems()
 
             using (var env = TestEnvironment.Create())
             {
-                var testProject = env.CreateTestProjectWithFiles(projectContents.Cleanup(), new[] {"a.cs"});
+                var testProject = env.CreateTestProjectWithFiles(projectContents.Cleanup(), new[] { "a.cs" });
 
                 var project = new Project(testProject.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, env.CreateProjectCollection().Collection);
 
@@ -2130,7 +2130,7 @@ public void RemoveGlob()
                 );
 
             Assert.Equal(2, items.Count);
-            Assert.Equal(@"a.txt;b.cs", string.Join(";", items.Select(i => i.EvaluatedInclude))); 
+            Assert.Equal(@"a.txt;b.cs", string.Join(";", items.Select(i => i.EvaluatedInclude)));
         }
 
         [Fact]
@@ -2143,7 +2143,7 @@ public void RemoveItemReference()
                 );
 
             Assert.Equal(2, items.Count);
-            Assert.Equal(@"a;c", string.Join(";", items.Select(i => i.EvaluatedInclude))); 
+            Assert.Equal(@"a;c", string.Join(";", items.Select(i => i.EvaluatedInclude)));
         }
 
         [Theory]
@@ -3270,7 +3270,7 @@ public void UpdateShouldBeAbleToContainItemReferences()
         public void UpdateShouldBeAbleToContainProperties()
         {
             var content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                            <P>a</P>
                         </PropertyGroup>
@@ -3338,7 +3338,6 @@ public void UpdateAndRemoveShouldUseCaseInsensitiveMatching()
         public static IEnumerable<Object[]> UpdateAndRemoveShouldWorkWithEscapedCharactersTestData
         {
             get
-
             {
                 var expectedMetadata = new[]
                 {
@@ -3454,7 +3453,7 @@ public void UpdateAndRemoveShouldNotUseGlobMatchingOnEscapedGlobsFromReferencedI
                     return new Project(p, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, c)
                         .Items
                         .Where(i => i.ItemType.Equals("i"))
-                        .Select(i => (ObjectModelHelpers.TestItem) new ObjectModelHelpers.ProjectItemTestItemAdapter(i))
+                        .Select(i => (ObjectModelHelpers.ITestItem)new ObjectModelHelpers.ProjectItemTestItemAdapter(i))
                         .ToList();
                 },
                 project,
diff --git a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
index 367f6b3f5a2..d2e0899334c 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
@@ -39,7 +39,7 @@ public void ProjectGetter()
         public void NoExpansion()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p>v1</p>
                         </PropertyGroup>
@@ -61,7 +61,7 @@ public void NoExpansion()
         public void ExpandProperty()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <o>v1</o>
                             <p>$(o)</p>
@@ -235,7 +235,7 @@ public void SetPropertyWithPropertyExpression()
         /// <summary>
         /// Verify item expressions are not expanded in new property values.
         /// NOTE: They aren't expanded to "blank". It just seems like that, because
-        /// when you output them, item expansion happens after property expansion, and 
+        /// when you output them, item expansion happens after property expansion, and
         /// they may evaluate to blank then. (Unless items do exist at that point.)
         /// </summary>
         [Fact]
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index 8bcf74cfe06..4d856fb153d 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -3317,7 +3317,7 @@ public void GetItemProvenanceShouldNotFailWithStringsExceedingMaxPath()
             var project =
                 @"<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='msbuildnamespace'>
                   <ItemGroup>
-                    <A Include=`" + longString +  @"`/>
+                    <A Include=`" + longString + @"`/>
                   </ItemGroup>
                 </Project>
                 ";
@@ -3515,7 +3515,7 @@ public void GetItemProvenanceShouldWorkWithUpdateElements()
             AssertProvenanceResult(expected, project, "1.foo");
         }
 
-		[Fact]
+        [Fact]
         public void GetItemProvenanceShouldWorkWithRemoveElements()
         {
             var project =
@@ -3569,7 +3569,7 @@ public void GetItemProvenanceShouldBeSensitiveToGlobbingCone(string includeGlob,
 
                 ProvenanceResultTupleList expectedProvenance = null;
 
-                var provenanceKind = includeGlob.IndexOfAny(new[]{'*', '?'}) != -1  ? Provenance.Glob : Provenance.StringLiteral;
+                var provenanceKind = includeGlob.IndexOfAny(new[] { '*', '?' }) != -1 ? Provenance.Glob : Provenance.StringLiteral;
                 expectedProvenance = provenanceShouldFindAMatch
                     ? new ProvenanceResultTupleList
                     {
@@ -3709,13 +3709,13 @@ public void GetAllGlobsShouldFindAllExcludesAndRemoves()
 <A Include=`a*;b*;c*` Exclude=`@(E)`/>
 <A Remove=`@(R)`/>
 ",
-        new[] {"aa", "bb", "cc"},
-        new[] {"b", "c"}
+        new[] { "aa", "bb", "cc" },
+        new[] { "b", "c" }
         )]
         [InlineData(
             @"<A Include=`ab*;b|c*;de*`/>",
-            new[] {"ab", "de"},
-            new[] {"bc", "b|c", "b", "c"}
+            new[] { "ab", "de" },
+            new[] { "bc", "b|c", "b", "c" }
             )]
         public void GetAllGlobsShouldProduceGlobThatMatches(string itemContents, string[] stringsThatShouldMatch, string[] stringsThatShouldNotMatch)
         {
@@ -4339,7 +4339,7 @@ private ProjectRootElement GetSampleProjectRootElement()
         private string GetSampleProjectContent()
         {
             string projectFileContent = ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='2.0' InitialTargets='it' DefaultTargets='dt'>
+                    <Project ToolsVersion='2.0' InitialTargets='it' DefaultTargets='dt'>
                         <PropertyGroup Condition=""'$(Configuration)'=='Foo'"">
                             <p>v1</p>
                         </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
index 33349cd5465..b5e2c942092 100644
--- a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
@@ -86,7 +86,7 @@ public class ProtectImports_Tests : IDisposable
         public ProtectImports_Tests()
         {
             string importContents =
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project>
                     <PropertyGroup>
                         <$propertyName>OldPropertyValue</$propertyName>
                     </PropertyGroup>
@@ -601,7 +601,7 @@ private ProjectMetadata GetOverridableMetadata(Project project)
         private Project GetProject()
         {
             string projectContents =
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project>
                     <PropertyGroup>
                         <$propertyName>OldPropertyValueInProject</$propertyName>
                     </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index 3f4b4d9ea3b..9b9ea6ff098 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -254,7 +254,7 @@ public void CloneProperties()
         public void ItemEvaluationCopiesMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>m1</m>
@@ -299,7 +299,7 @@ public void WildcardsInsideTargets()
                 string path = Path.Combine(directory, "*.exe");
 
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                           <ItemGroup>
                             <i Include='" + path + @"'/>
@@ -529,8 +529,8 @@ public void DefiningProjectItemBuiltInMetadataFromWildcards()
         }
 
         /// <summary>
-        /// Validate that the DefiningProject* metadata is set to the correct project based on a variety 
-        /// of means of item creation. 
+        /// Validate that the DefiningProject* metadata is set to the correct project based on a variety
+        /// of means of item creation.
         /// </summary>
         [Fact]
         public void TestDefiningProjectMetadata()
@@ -574,7 +574,7 @@ public void TestDefiningProjectMetadata()
   </Target>
 
   <Target Name=`Validate` DependsOnTargets=`AddFromMainProject;AddFromImport`>
-    <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />    
+    <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />
     <Warning Text=`B is wrong: EXPECTED: [a] ACTUAL: [%(B.DefiningProjectName)]` Condition=`'%(B.DefiningProjectName)' != 'a'` />
     <Warning Text=`C is wrong: EXPECTED: [b] ACTUAL: [%(C.DefiningProjectName)]` Condition=`'%(C.DefiningProjectName)' != 'b'` />
     <Warning Text=`D is wrong: EXPECTED: [b] ACTUAL: [%(D.DefiningProjectName)]` Condition=`'%(D.DefiningProjectName)' != 'b'` />
@@ -833,7 +833,7 @@ public void ImmutableProjectInstance_SetEvaluatedValueOnPropertyFromProject()
         }
 
         /// <summary>
-        /// Test operation fails on immutable project instance 
+        /// Test operation fails on immutable project instance
         /// </summary>
         [Fact]
         public void ImmutableProjectInstance_SetNewProperty()
@@ -995,7 +995,7 @@ public void ImmutableProjectInstance_CloneMutableFromMutable2()
         private static ProjectInstance GetSampleProjectInstance(bool isImmutable = false)
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                               <n>n1</n>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index a2c680c51d1..02e91aa5a06 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -148,8 +148,8 @@ public void SetMetadataEmptyString()
         }
 
         /// <summary>
-        /// Set metadata value to null value -- this is allowed, but 
-        /// internally converted to the empty string. 
+        /// Set metadata value to null value -- this is allowed, but
+        /// internally converted to the empty string.
         /// </summary>
         [Fact]
         public void SetNullMetadataValue()
@@ -207,7 +207,7 @@ public void CastToITaskItem()
         /// <summary>
         /// Creates a ProjectItemInstance and casts it to ITaskItem2; makes sure that all escaped information is
         /// maintained correctly.  Also creates a new Microsoft.Build.Utilities.TaskItem from the ProjectItemInstance
-        /// and verifies that none of the information is lost.  
+        /// and verifies that none of the information is lost.
         /// </summary>
         [Fact]
         public void ITaskItem2Operations()
@@ -309,7 +309,7 @@ public void CastToITaskItemNoMetadata()
         public void NoMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'/>
                         </ItemGroup>
@@ -332,7 +332,7 @@ public void NoMetadata()
         public void ReadMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -361,21 +361,21 @@ public void ReadMetadata()
         /// <summary>
         /// Create a new Microsoft.Build.Utilities.TaskItem from the ProjectItemInstance where the ProjectItemInstance
         /// has item definition metadata on it.
-        /// 
+        ///
         /// Verify the Utilities task item gets the expanded metadata from the ItemDefinitionGroup.
         /// </summary>
         [Fact]
         public void InstanceItemToUtilItemIDG()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
-                                <m0>;x86;</m0>                                
+                                <m0>;x86;</m0>
                                 <m1>%(FileName).extension</m1>
                                 <m2>;%(FileName).extension;</m2>
                                 <m3>v1</m3>
-                                <m4>%3bx86%3b</m4> 
+                                <m4>%3bx86%3b</m4>
                             </i>
                         </ItemDefinitionGroup>
                         <ItemGroup>
@@ -402,7 +402,7 @@ public void InstanceItemToUtilItemIDG()
         public void GetMetadataValuesFromDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m0>v0</m0>
@@ -435,7 +435,7 @@ public void GetMetadataValuesFromDefinition()
         public void ExcludeWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -462,7 +462,7 @@ public void ExcludeWithIncludeVector()
         public void ExcludeVectorWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -490,7 +490,7 @@ public void ExcludeVectorWithIncludeVector()
         public void MetadataReferringToMetadataAbove()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -516,7 +516,7 @@ public void MetadataReferringToMetadataAbove()
         public void BuiltInMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(Identity)</m>
@@ -537,7 +537,7 @@ public void BuiltInMetadataExpression()
         public void BuiltInQualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(i.Identity)</m>
@@ -558,7 +558,7 @@ public void BuiltInQualifiedMetadataExpression()
         public void BuiltInMisqualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(j.Identity)</m>
@@ -573,13 +573,13 @@ public void BuiltInMisqualifiedMetadataExpression()
         }
 
         /// <summary>
-        /// Metadata condition should work correctly with built-in metadata 
+        /// Metadata condition should work correctly with built-in metadata
         /// </summary>
         [Fact]
         public void BuiltInMetadataInMetadataCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition=""'%(Identity)'=='i1'"">m1</m>
@@ -604,7 +604,7 @@ public void BuiltInMetadataInItemCondition()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Condition=""'%(Identity)'=='i1'/>
                         </ItemGroup>
@@ -622,7 +622,7 @@ public void BuiltInMetadataInItemCondition()
         public void BuiltInMetadataTwoItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1.cpp;" + (NativeMethodsShared.IsWindows ? @"c:\bar\i2.cpp" : "/bar/i2.cpp") + @"'>
                                 <m>%(Filename).obj</m>
@@ -644,7 +644,7 @@ public void BuiltInMetadataTwoItems()
         public void DifferentMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'>
                                 <m>m1</m>
@@ -671,7 +671,7 @@ public void DifferentMetadataItemsFromOtherList()
         public void DifferentBuiltInMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0.x'/>
                             <h Include='h1.y'/>
@@ -696,7 +696,7 @@ public void DifferentBuiltInMetadataItemsFromOtherList()
         public void BuiltInMetadataTransformInInclude()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -721,7 +721,7 @@ public void BuiltInMetadataTransformInInclude()
         public void BuiltInMetadataTransformInMetadataValue()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -746,7 +746,7 @@ public void BuiltInMetadataTransformInMetadataValue()
         public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -771,7 +771,7 @@ public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         public void MetadataValueReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -794,7 +794,7 @@ public void MetadataValueReferringToItems()
         public void MetadataConditionReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -819,7 +819,7 @@ public void MetadataConditionReferringToItems()
         public void MetadataConditionReferringToMetadataOnSameItem()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m0>0</m0>
@@ -841,7 +841,7 @@ public void MetadataConditionReferringToMetadataOnSameItem()
         public void UpdateShouldRespectConditions()
         {
             string content = @"
-                      <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                      <Project>
                           <ItemGroup>
                               <i Include='a;b'>
                                   <m1>m1_contents</m1>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
index 5c6e3751827..6804c09e7d0 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
@@ -35,7 +35,7 @@ public void Accessors()
         private static ProjectOnErrorInstance GetSampleOnErrorInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                        <Target Name='t'>
                             <OnError ExecuteTargets='et' Condition='c'/>
                         </Target>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
index 4cbb6eb2e7f..02211ee3081 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
@@ -135,7 +135,7 @@ public void FileLocationAvailableEvenAfterEdits()
         private static ProjectTargetInstance GetSampleTargetInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t' Inputs='i' Outputs='o' Condition='c' DependsOnTargets='d' BeforeTargets='b' AfterTargets='a' KeepDuplicateOutputs='k' Returns='r'>
                             <t1/>
                         </Target>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
index 0f50f5d0665..2a7a9f6c73b 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
@@ -65,7 +65,7 @@ private static ProjectTaskInstance GetSampleTaskInstance()
         private static ProjectTaskInstance GetTaskInstance(string taskXmlString)
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             " + taskXmlString + @"
                         </Target>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
index da1dfad9733..5afc11bd1b7 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
@@ -36,7 +36,7 @@ public void Accessors()
         private static ProjectTaskOutputItemInstance GetSampleTaskOutputInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                        <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' Condition='c' ItemName='i'/>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
index 823913f110d..a1f8045d634 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
@@ -36,7 +36,7 @@ public void Accessors()
         private static ProjectTaskOutputPropertyInstance GetSampleTaskOutputInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                        <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' Condition='c' PropertyName='p1'/>
diff --git a/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs b/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs
index 12244b26b57..2940e3df2cf 100644
--- a/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs
+++ b/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs
@@ -21,7 +21,7 @@ public class LazyFormattedEventArgs_Tests
         public void DoNotCrashOnInvalidFormatExpression()
         {
             string content = @"
- <Project DefaultTargets=`t` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+ <Project DefaultTargets=`t` ToolsVersion=`msbuilddefaulttoolsversion`>
    <UsingTask
      TaskName=`Crash`
      TaskFactory=`CodeTaskFactory`
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs
index 1d403b81f7b..d0f1b2125c9 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs
@@ -122,7 +122,7 @@ public void ProjectItemModify()
                 new KeyValuePair<string, string>("b", "bValue"),
             };
 
-            /// test AddItems
+            // test AddItems
             // add a new files in the view, ensure it is added correctly and also the real object will immediately reflect that add as well
             Assert.Null(pair.GetSingleItemWithVerify(ObjectType.View, "foo.cpp"));
             var fooView = pair.AddSingleItemWithVerify(ObjectType.View, "cpp", "foo.cpp");
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
index 57a61cef3b5..ae0dcaa1d05 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
@@ -17,8 +17,7 @@ public override ProjectItemDefinition CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        /// ProjectItemDefinitionLink remoting
+        // ProjectItemDefinitionLink remoting
         public MockProjectLinkRemoter Project => this.OwningCollection.Export<Project, MockProjectLinkRemoter>(this.Source.Project);
         public string ItemType => this.Source.ItemType;
         public ICollection<MockProjectMetadataLinkRemoter> Metadata => this.OwningCollection.ExportCollection<ProjectMetadata, MockProjectMetadataLinkRemoter>(this.Source.Metadata);
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
index e17f305af80..d9fc77084ea 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
@@ -18,8 +18,7 @@ public override ProjectItem CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        /// ProjectItemLink remoting
+        // ProjectItemLink remoting
         public MockProjectLinkRemoter Project => this.OwningCollection.Export<Project, MockProjectLinkRemoter>(this.Source.Project);
         public MockProjectItemElementLinkRemoter Xml => (MockProjectItemElementLinkRemoter)this.OwningCollection.ExportElement(this.Source.Xml);
         public string EvaluatedInclude => this.Source.EvaluatedInclude;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
index 9b178dee6a3..2eaf1a6fa6f 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
@@ -24,8 +24,7 @@ public override Project CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        /// ProjectLink remoting
+        // ProjectLink remoting
         public MockProjectElementLinkRemoter Xml => this.OwningCollection.ExportElement(this.Source.Xml);
 
         public bool ThrowInsteadOfSplittingItemElement { get => this.Source.ThrowInsteadOfSplittingItemElement; set => this.Source.ThrowInsteadOfSplittingItemElement = value; }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
index b662f3e277d..1399fb28746 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
@@ -17,8 +17,7 @@ public override ProjectMetadata CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        /// ProjectMetadataLink remoting
+        // ProjectMetadataLink remoting
         public object Parent
         {
             get
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
index e507f046aad..cea7656b893 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
@@ -17,8 +17,7 @@ public override ProjectProperty CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        /// ProjectPropertyLink remoting
+        // ProjectPropertyLink remoting
         public MockProjectLinkRemoter Project => this.OwningCollection.Export<Project, MockProjectLinkRemoter>(this.Source.Project);
         public MockProjectPropertyElementLinkRemoter Xml => (MockProjectPropertyElementLinkRemoter)this.ExportElement(this.Source.Xml);
         public string Name => this.Source.Name;
diff --git a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
index 7257dd511d2..e2602d1f7bd 100644
--- a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
@@ -225,7 +225,7 @@ public void Regress_Mutation_DuplicateBatchingBucketsAreFoldedTogether()
         public void Simple()
         {
             string content = @"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
                     <ItemGroup>
                         <AToB Include=""a;b""/>
@@ -256,7 +256,7 @@ public void Simple()
         public void Regress72803()
         {
             string content = @"
-                <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" DefaultTargets=""ReleaseBuild"">
+                <Project DefaultTargets=""ReleaseBuild"">
                     <ItemGroup>
                         <Environments Include=""dev"" />
                         <Environments Include=""prod"" />
@@ -297,7 +297,7 @@ public void Regress72803()
         public void BucketsWithEmptyListForBatchedItemList()
         {
             string content = @"
- <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+ <Project ToolsVersion=""msbuilddefaulttoolsversion"">
   <ItemGroup>
     <i Include=""b""/>
     <j Include=""a"">
@@ -326,7 +326,7 @@ public void BucketsWithEmptyListForBatchedItemList()
         public void BucketsWithEmptyListForTargetBatchedItemList()
         {
             string content = @"
-<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project ToolsVersion=""msbuilddefaulttoolsversion"">
     <ItemGroup>
         <a Include=""a1""/>
         <b Include=""b1""/>
@@ -351,7 +351,7 @@ public void BucketsWithEmptyListForTargetBatchedItemList()
         public void BatchOnEmptyOutput()
         {
             string content = @"
-         <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+         <Project ToolsVersion=""msbuilddefaulttoolsversion"">
             <ItemGroup>
               <File Include=""$(foo)"" />
             </ItemGroup>
@@ -377,7 +377,7 @@ public void BatchOnEmptyOutput()
         public void EachBatchGetsASeparateTaskObject()
         {
             string content = @"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include=""i1"">
                       <Code>high</Code>
@@ -406,7 +406,7 @@ public void EachBatchGetsASeparateTaskObject()
         public void BatcherPreservesItemOrderWithinASingleItemList()
         {
             string content = @"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
                     <ItemGroup>
                         <AToZ Include=""a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z""/>
@@ -441,7 +441,7 @@ public void BatcherPreservesItemOrderWithinASingleItemList()
         public void UndefinedAndEmptyMetadataValues()
         {
             string content = @"
-                <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <i Include='i1'/>
                         <i Include='i2'>
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index f02622d1648..eae0afe3751 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -359,7 +359,7 @@ public void ShutdownNodesAfterParallelBuild(int numberOfParallelProjectsToBuild,
                 EnableNodeReuse = true,
                 DisableInProcNode = true,
                 SaveOperatingEnvironment = false,
-                Loggers = new List<ILogger> {new MockLogger(_output)}
+                Loggers = new List<ILogger> { new MockLogger(_output) }
             };
 
             // Tell the build manager to not disturb process wide state
@@ -508,16 +508,16 @@ public void RequestedResultsAreSatisfied()
                     {"AnItem", null},
                     {"ItemWithMetadata", new List<string> {"Metadatum1"}},
                 },
-                PropertyFilters = new List<string> {"NewProperty", "RequestedProperty"},
+                PropertyFilters = new List<string> { "NewProperty", "RequestedProperty" },
             };
 
-            var data = new BuildRequestData(project.CreateProjectInstance(), new [] {"test", "other"},
+            var data = new BuildRequestData(project.CreateProjectInstance(), new[] { "test", "other" },
                 _projectCollection.HostServices, BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild, null,
                 requestedProjectState);
             var customparameters = new BuildParameters
             {
                 EnableNodeReuse = false,
-                Loggers = new ILogger[] {_logger},
+                Loggers = new ILogger[] { _logger },
                 DisableInProcNode = true,
             };
 
@@ -1534,7 +1534,7 @@ public void CancelledBuild()
 </Project>
 ");
 
-            BuildParameters parameters = new ()
+            BuildParameters parameters = new()
             {
                 ShutdownInProcNodeOnBuildFinish = true,
                 Loggers = new ILogger[] { _logger, new MockLogger(printEventsToStdout: true) },
@@ -1727,8 +1727,8 @@ public void SequentialBuildsOfTheSameProjectAllowed()
             Project project = CreateProject(contents, MSBuildDefaultToolsVersion, _projectCollection, true);
             ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
             _buildManager.BeginBuild(_parameters);
-            BuildResult result1 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] {"target1"}));
-            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] {"target2"}));
+            BuildResult result1 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] { "target1" }));
+            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] { "target2" }));
             _buildManager.EndBuild();
 
             Assert.Equal(BuildResultCode.Success, result1.OverallResult);
@@ -1759,9 +1759,9 @@ public void OverlappingBuildsOfTheSameProjectDifferentTargetsAreAllowed()
             ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
             _buildManager.BeginBuild(_parameters);
 
-            BuildSubmission submission =_buildManager.PendBuildRequest(new BuildRequestData(instance, new[] {"target1"}));
+            BuildSubmission submission = _buildManager.PendBuildRequest(new BuildRequestData(instance, new[] { "target1" }));
             submission.ExecuteAsync(null, null);
-            BuildResult result2 =_buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] {"target2"}));
+            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] { "target2" }));
 
             submission.WaitHandle.WaitOne();
             var result1 = submission.BuildResult;
@@ -1794,9 +1794,9 @@ public void OverlappingBuildsOfTheSameProjectSameTargetsAreAllowed()
             ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
             _buildManager.BeginBuild(_parameters);
 
-            BuildSubmission submission = _buildManager.PendBuildRequest(new BuildRequestData(instance, new[] {"target1"}));
+            BuildSubmission submission = _buildManager.PendBuildRequest(new BuildRequestData(instance, new[] { "target1" }));
             submission.ExecuteAsync(null, null);
-            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] {"target1"}));
+            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] { "target1" }));
             submission.WaitHandle.WaitOne();
             var result1 = submission.BuildResult;
 
@@ -2569,7 +2569,7 @@ public void Regress473114()
             var projD = _env.CreateFile(".proj").Path;
 
             string contentsA = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='Build'>
   <ItemGroup>
     <ProjectReference Include='" + projD + @"' />
     <ProjectReference Include='" + projC + @"' />
@@ -2583,7 +2583,7 @@ public void Regress473114()
 ";
 
             string contentsB = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='CallsGenerateImpLib' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='CallsGenerateImpLib'>
   <Target Name='CallsGenerateImpLib'>
     <MSBuild Projects='" + projC + @"' Targets='GenerateImpLib' BuildInParallel='true' />
   </Target>
@@ -2592,7 +2592,7 @@ public void Regress473114()
 ";
 
             string contentsC = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='Default' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='Default'>
   <Target Name='Default' DependsOnTargets='ResolveReferences;BuildCompile'>
     <Message Text='Executed Default' />
   </Target>
@@ -2613,7 +2613,7 @@ public void Regress473114()
 ";
 
             string contentsD = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='Build'>
   <Target Name='Build'>
     <Message Text='In d.proj' />
   </Target>
@@ -2707,7 +2707,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_Simple()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -2808,7 +2808,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_OnErrorChain()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -2912,7 +2912,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_ErrorAndContinue()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -3002,7 +3002,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_AfterTargets()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -3071,7 +3071,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_DifferentEntrypoints()
 
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -3530,7 +3530,7 @@ private static Dictionary<string, string> ExtractProjectStartedPropertyList(IEnu
         {
             // Gather a sorted list of all the properties.
             return properties?.Cast<DictionaryEntry>()
-                .ToDictionary(prop => (string) prop.Key, prop => (string) prop.Value, StringComparer.OrdinalIgnoreCase);
+                .ToDictionary(prop => (string)prop.Key, prop => (string)prop.Value, StringComparer.OrdinalIgnoreCase);
         }
 
         /// <summary>
@@ -3609,7 +3609,7 @@ private static ProjectInstance GenerateDummyProjects(string shutdownProjectDirec
             // causes the projects to be built to be separate configs, which allows us to build the same project
             // a bunch of times in parallel.
             //
-            // <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>
+            // <Project/>
             //   <ItemGroup>
             //     <ProjectReference Include="RootProjectName.proj">
             //       <AdditionalProperties>p={incremented value}</AdditionalProperties>
@@ -3693,7 +3693,7 @@ public void ShouldBuildMutatedProjectInstanceWhoseProjectWasPreviouslyBuiltAsAP2
 
                     Assert.Empty(mainInstance.GlobalProperties);
 
-                    var request = new BuildRequestData(mainInstance, new[] {"BuildOther"});
+                    var request = new BuildRequestData(mainInstance, new[] { "BuildOther" });
 
                     var parameters = new BuildParameters
                     {
@@ -3722,7 +3722,7 @@ public void ShouldBuildMutatedProjectInstanceWhoseProjectWasPreviouslyBuiltAsAP2
 
                         p2pInstance.SetProperty("P", newPropertyValue);
 
-                        request = new BuildRequestData(p2pInstance, new[] {"Foo"});
+                        request = new BuildRequestData(p2pInstance, new[] { "Foo" });
                         submission = manager.PendBuildRequest(request);
                         results = submission.Execute();
 
@@ -3759,13 +3759,13 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
   </Target>
 
 </Project>";
-            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] {"main", "p2p"}, string.Empty);
+            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "p2p" }, string.Empty);
 
             var buildParameters = new BuildParameters(_projectCollection)
             {
                 DisableInProcNode = true,
                 EnableNodeReuse = false,
-                Loggers = new ILogger[] {_logger}
+                Loggers = new ILogger[] { _logger }
             };
 
             _buildManager.BeginBuild(buildParameters);
@@ -3784,7 +3784,7 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
                     mainProjectPath,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    new[] {"MainTarget"},
+                    new[] { "MainTarget" },
                     null
                 );
 
@@ -3802,9 +3802,12 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
             }
         }
 
-        /// When a ProjectInstance based BuildRequestData is built out of proc, the node should
+        /// <summary>
+        /// When a <see cref="ProjectInstance"/> based <see cref="BuildRequestData"/> is built out of proc, the node should
         /// not reload it from disk but instead fully utilize the entire translate project instance state
-        /// to do the build
+        /// to do the build.
+        /// </summary>
+        /// <param name="shouldSerializeEntireState"><see langword="true"/> to serialize the entire project instance state; otherwise, <see langword="false"/>.</param>
         [Theory]
         [InlineData(false)]
         [InlineData(true)]
@@ -3825,7 +3828,7 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
   </Target>
 </Project>";
 
-            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] {"main", "import"}, string.Empty);
+            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "import" }, string.Empty);
 
             var importPath = testFiles.CreatedFiles[1];
             File.WriteAllText(importPath, CleanupFileContents(importProject));
@@ -3843,13 +3846,13 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
 
             instance.TranslateEntireState = shouldSerializeEntireState;
 
-            var request = new BuildRequestData(instance, new[] {"Foo"});
+            var request = new BuildRequestData(instance, new[] { "Foo" });
 
             var parameters = new BuildParameters(_projectCollection)
             {
                 DisableInProcNode = true,
                 EnableNodeReuse = false,
-                Loggers = new ILogger[] {_logger}
+                Loggers = new ILogger[] { _logger }
             };
 
             _buildManager.BeginBuild(parameters);
@@ -3873,7 +3876,7 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
             // Building the stale project instance should still succeed when the entire state is translated: MSBuild should use the
             // in-memory state to build and not reload from disk.
             _buildManager.BeginBuild(parameters);
-            request = new BuildRequestData(instance, new[] {"Foo"}, null,
+            request = new BuildRequestData(instance, new[] { "Foo" }, null,
                 BuildRequestDataFlags.ReplaceExistingProjectInstance);
             submission = _buildManager.PendBuildRequest(request);
 
@@ -4028,7 +4031,7 @@ public void MultiProcReentrantProjectWithCallTargetDoesNotFail()
                     }
                 };
 
-                var buildRequestData = new BuildRequestData(entryFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new[]{ "EntryTarget" }, null);
+                var buildRequestData = new BuildRequestData(entryFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new[] { "EntryTarget" }, null);
 
                 var result = _buildManager.Build(buildParameters, buildRequestData);
 
@@ -4084,8 +4087,8 @@ handoff logging completion to the BuildManager.
                      * the request but does not simulate the ProjectStarted / ProjectEnded events. It also leaves logging completion to the
                      * BuildManager.
                      */
-                    var request1 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] {"Build"}, null);
-                    var request2 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] {"Build"}, null);
+                    var request1 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] { "Build" }, null);
+                    var request2 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] { "Build" }, null);
 
                     /* During builds, msbuild changes the current directory.
                      * When this test fails, the build never finishes so the current directory never gets restored.
@@ -4317,7 +4320,7 @@ public void GraphBuildCircular()
         [Fact]
         public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
         {
-            var graph = Helpers.CreateProjectGraph(env: _env, dependencyEdges: new Dictionary<int, int[]> {{1, new[] {2, 3}}});
+            var graph = Helpers.CreateProjectGraph(env: _env, dependencyEdges: new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } });
 
             MockLogger logger = null;
 
@@ -4325,11 +4328,11 @@ public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
             {
                 var graphResult = buildSession.BuildGraphSubmission(
                     new GraphBuildRequestData(
-                        projectGraphEntryPoints: new[] {new ProjectGraphEntryPoint(graph.GraphRoots.First().ProjectInstance.FullPath)},
+                        projectGraphEntryPoints: new[] { new ProjectGraphEntryPoint(graph.GraphRoots.First().ProjectInstance.FullPath) },
                         targetsToBuild: Array.Empty<string>(),
                         hostServices: null,
                         flags: BuildRequestDataFlags.None,
-                        graphBuildOptions: new GraphBuildOptions {Build = false}));
+                        graphBuildOptions: new GraphBuildOptions { Build = false }));
 
                 graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
                 logger = buildSession.Logger;
diff --git a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
index e7234395cb7..163716cb7fd 100644
--- a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
+++ b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
@@ -26,12 +26,12 @@ public class CustomLogAndReturnTask : Task
         /// </summary>
         public override bool Execute()
         {
-            if(!string.IsNullOrEmpty(WarningCode))
+            if (!string.IsNullOrEmpty(WarningCode))
             {
                 Log.LogWarning(null, WarningCode, null, null, 0, 0, 0, 0, "Warning Logged!", null);
             }
 
-            if(!string.IsNullOrEmpty(ErrorCode))
+            if (!string.IsNullOrEmpty(ErrorCode))
             {
                 Log.LogError(null, ErrorCode, null, null, 0, 0, 0, 0, "Error Logged!", null);
             }
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index 818aea598e1..a22156f33f0 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -3927,7 +3927,7 @@ internal static void AssertItemEvaluationFromTarget(string projectContents, stri
                     var lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(), new PropertyDictionary<ProjectPropertyInstance>());
                     task.ExecuteTask(lookup);
 
-                    return lookup.GetItems(itemType).Select(i => (ObjectModelHelpers.TestItem)new ObjectModelHelpers.ProjectItemInstanceTestItemAdapter(i)).ToList();
+                    return lookup.GetItems(itemType).Select(i => (ObjectModelHelpers.ITestItem)new ObjectModelHelpers.ProjectItemInstanceTestItemAdapter(i)).ToList();
                 },
                 projectContents,
                 inputFiles,
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 3e69b611fdf..1753fc92445 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -459,14 +459,14 @@ public void VerifyErrorPostfixForInvalidProjectFileException()
             string targetsFile = Path.Combine(testTempPath, "x.targets");
             string projectfileContent =
                 @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='x.targets'/>
                     </Project>
                 ";
 
             string targetsfileContent = @"
-                 <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
-                   <UsingTask TaskName='RandomTask' AssemblyName='NotARealTaskLocaiton'/>    
+                 <Project DefaultTargets='Build'>
+                   <UsingTask TaskName='RandomTask' AssemblyName='NotARealTaskLocaiton'/>
                    <Target Name='Build'>
                        <RandomTask/>
                    </Target>
@@ -1900,13 +1900,13 @@ public static IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId,
             /// <param name="buildEvent">Build event which was asked to be processed</param>
             internal override void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
             {
-                if (buildEvent is BuildEventArgs)
+                if (buildEvent is BuildEventArgs buildEventArgs)
                 {
-                    _processedBuildEvent = buildEvent as BuildEventArgs;
+                    _processedBuildEvent = buildEventArgs;
                 }
-                else if (buildEvent is KeyValuePair<int, BuildEventArgs>)
+                else if (buildEvent is KeyValuePair<int, BuildEventArgs> kvp)
                 {
-                    _processedBuildEvent = ((KeyValuePair<int, BuildEventArgs>)buildEvent).Value;
+                    _processedBuildEvent = kvp.Value;
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
index eee00a073fe..2abb906a34c 100644
--- a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
@@ -37,13 +37,13 @@ public class RequestBuilder_Tests : IDisposable
 
         private string _originalWorkingDirectory;
 
-        #pragma warning disable xUnit1013
+#pragma warning disable xUnit1013
 
         public void LoggingException(Exception e)
         {
         }
 
-        #pragma warning restore xUnit1013
+#pragma warning restore xUnit1013
 
         public RequestBuilder_Tests()
         {
@@ -239,7 +239,7 @@ public void TestMissingProjectFile()
         private BuildRequestConfiguration CreateTestProject(int configId)
         {
             string projectFileContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <Compile Include=`b.cs` />
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 6ed301192a3..64682d0e709 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -48,7 +48,7 @@ public class TargetBuilder_Tests : IRequestBuilderCallback, IDisposable
         /// </summary>
         private int _nodeRequestId;
 
-        #pragma warning disable xUnit1013
+#pragma warning disable xUnit1013
 
         /// <summary>
         /// Callback used to receive exceptions from loggers.  Unused here.
@@ -58,7 +58,7 @@ public void LoggingException(Exception e)
         {
         }
 
-        #pragma warning restore xUnit1013
+#pragma warning restore xUnit1013
 
         /// <summary>
         /// Sets up to run tests.  Creates the host object.
@@ -227,7 +227,7 @@ public void TestLoggingForSkippedTargetInputsAndOutputs()
 
                 var expected = @"
 Skipping target ""Build"" because all output files are up-to-date with respect to the input files.
-Input files: 
+Input files:
     a.txt
     b.txt
 Output files: c.txt
@@ -252,7 +252,7 @@ public void SkippedTargetsShouldOnlyInferOutputsOnce()
             string content = String.Format
                 (
 @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion'>
 
   <Target Name='Build' DependsOnTargets='GFA;GFT;DFTA;GAFT'>
         <Message Text='Build: [@(Outs)]' />
@@ -338,7 +338,7 @@ public void TestLegacyCallTarget()
         public void TestBeforeTargetsMissing()
         {
             string content = @"
-<Project DefaultTargets='t' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='t'>
 
     <Target Name='t' BeforeTargets='x'>
         <Message Text='[t]' />
@@ -361,7 +361,7 @@ public void TestBeforeTargetsMissing()
         public void TestBeforeTargetsMissingRunsOthers()
         {
             string content = @"
-<Project DefaultTargets='a;c' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='a;c'>
 
     <Target Name='t' BeforeTargets='a;b;c'>
         <Message Text='[t]' />
@@ -393,7 +393,7 @@ public void TestBeforeTargetsMissingRunsOthers()
         public void TestAfterTargetsMissing()
         {
             string content = @"
-<Project DefaultTargets='t' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='t'>
 
     <Target Name='t' AfterTargets='x'>
         <Message Text='[t]' />
@@ -416,7 +416,7 @@ public void TestAfterTargetsMissing()
         public void TestAfterTargetsMissingRunsOthers()
         {
             string content = @"
-<Project DefaultTargets='a;c' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='a;c'>
 
     <Target Name='t' AfterTargets='a;b'>
         <Message Text='[t]' />
@@ -1273,7 +1273,7 @@ public void TestSkippingBeforeAndAfterTargets()
         public void TestCircularDependencyInCallTarget()
         {
             string projectContents = @"
-<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project>
     <Target Name=""t1"">
         <CallTarget Targets=""t3""/>
     </Target>
@@ -1296,7 +1296,7 @@ public void TestCircularDependencyInCallTarget()
         public void TestCircularDependencyTarget()
         {
             string projectContents = @"
-<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project>
     <Target Name=""TargetA"" AfterTargets=""Build"" DependsOnTargets=""TargetB"">
         <Message Text=""TargetA""></Message>
     </Target>
@@ -1523,7 +1523,7 @@ private ProjectInstance CreateTestProject()
 
                     <ItemGroup>
                         <Reference Include='System' />
-                    </ItemGroup>                    
+                    </ItemGroup>
 
                     <Target Name='Empty' />
 
@@ -1591,7 +1591,7 @@ private ProjectInstance CreateTestProject(string projectBodyContents)
         /// </summary>
         private ProjectInstance CreateTestProject(string projectBodyContents, string initialTargets, string defaultTargets)
         {
-            string projectFileContents = String.Format("<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' InitialTargets='{0}' DefaultTargets='{1}'>{2}</Project>", initialTargets, defaultTargets, projectBodyContents);
+            string projectFileContents = String.Format("<Project ToolsVersion='msbuilddefaulttoolsversion' InitialTargets='{0}' DefaultTargets='{1}'>{2}</Project>", initialTargets, defaultTargets, projectBodyContents);
 
             // retries to deal with occasional locking issues where the file can't be written to initially
             for (int retries = 0; retries < 5; retries++)
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 3af162e85e4..7a1c46263d2 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -40,7 +40,7 @@ public class TargetEntry_Tests : ITargetBuilderCallback, IDisposable
         /// </summary>
         private int _nodeRequestId;
 
-        #pragma warning disable xUnit1013
+#pragma warning disable xUnit1013
 
         /// <summary>
         /// Handles exceptions from the logging system.
@@ -50,7 +50,7 @@ public void LoggingException(Exception e)
         {
         }
 
-        #pragma warning restore xUnit1013
+#pragma warning restore xUnit1013
 
         /// <summary>
         /// Called prior to each test.
@@ -381,8 +381,8 @@ public void TestGatherResults()
 
                 if (returnsEnabledForThisProject)
                 {
-                    // If returns are enabled, since this is a target with "Outputs", they won't 
-                    // be returned. 
+                    // If returns are enabled, since this is a target with "Outputs", they won't
+                    // be returned.
                     Assert.Empty(results.Items);
                 }
                 else
@@ -474,8 +474,8 @@ public void TestMultipleOutputs()
 
                 if (returnsEnabledForThisProject)
                 {
-                    // If returns are enabled, since this is a target with "Outputs", they won't 
-                    // be returned. 
+                    // If returns are enabled, since this is a target with "Outputs", they won't
+                    // be returned.
                     Assert.Empty(results.Items);
                 }
                 else
@@ -636,7 +636,7 @@ public void TestMetadataReferenceInTargetOutputs()
             foreach (bool returnsEnabledForThisProject in returnsEnabled)
             {
                 string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <ItemGroup>
         <SomeItem1 Include=`item1.cs`/>
         <SomeItem2 Include=`item2.cs`/>
@@ -683,7 +683,7 @@ public void TestTargetOutputsOnFinishedEvent()
                 foreach (bool returnsEnabledForThisProject in returnsEnabled)
                 {
                     string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <ItemGroup>
         <SomeItem1 Include=`item1.cs`/>
         <SomeItem2 Include=`item2.cs`/>
@@ -780,7 +780,7 @@ public void TestTargetOutputsOnFinishedEventNoVariableSet()
                 foreach (bool returnsEnabledForThisProject in returnsEnabled)
                 {
                     string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <ItemGroup>
         <SomeItem1 Include=`item1.cs`/>
         <SomeItem2 Include=`item2.cs`/>
@@ -835,13 +835,13 @@ public void TestTargetOutputsOnFinishedEventNoVariableSet()
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
         public void AfterTargetsShouldReportFailedBuild()
         {
-            // Since we're creating our own BuildManager, we need to make sure that the default 
+            // Since we're creating our own BuildManager, we need to make sure that the default
             // one has properly relinquished the inproc node
             NodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
             nodeProviderInProc?.Dispose();
 
             string content = @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build'>
 <Target Name='Build'>
  <Message Text='Hello'/>
 </Target>
@@ -891,7 +891,7 @@ public void AfterTargetsShouldReportFailedBuild()
             }
             finally
             {
-                // and we should clean up after ourselves, too. 
+                // and we should clean up after ourselves, too.
                 if (manager != null)
                 {
                     NodeProviderInProc inProcNodeProvider = ((IBuildComponentHost)manager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
@@ -909,7 +909,7 @@ public void AfterTargetsShouldReportFailedBuild()
         public void TestTargetFinishedRaisedOnInvalidTarget()
         {
             string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <Target Name=`OnlyInputs` Inputs=`foo`>
         <Message Text=`This is an invalid target -- this text should never show.` />
     </Target>
@@ -1059,7 +1059,7 @@ private ProjectInstance CreateTestProject(bool returnsAttributeEnabled)
             string returnsAttributeName = returnsAttributeEnabled ? "Returns" : "Outputs";
 
             string projectFileContents = @"
-                <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
                     <ItemGroup>
                         <Compile Include='b.cs' />
@@ -1111,11 +1111,11 @@ private ProjectInstance CreateTestProject(bool returnsAttributeEnabled)
                     <Target Name='SkipCondition' Condition=""'true' == 'false'"" />
 
                     <Target Name='Error' >
-                        <ErrorTask1 ContinueOnError='True'/>                    
-                        <ErrorTask2 ContinueOnError='False'/>  
-                        <ErrorTask3 /> 
-                        <OnError ExecuteTargets='Foo'/>                  
-                        <OnError ExecuteTargets='Bar'/>                  
+                        <ErrorTask1 ContinueOnError='True'/>
+                        <ErrorTask2 ContinueOnError='False'/>
+                        <ErrorTask3 />
+                        <OnError ExecuteTargets='Foo'/>
+                        <OnError ExecuteTargets='Bar'/>
                     </Target>
 
                     <Target Name='Foo' Inputs='foo.cpp' Outputs='foo.o'>
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index cf38ee562bd..94dd2b13b05 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -56,9 +56,9 @@ public TaskBuilder_Tests(ITestOutputHelper output)
         }
 
         /*********************************************************************************
-         * 
+         *
          *                                  OUTPUT PARAMS
-         * 
+         *
          *********************************************************************************/
 
         /// <summary>
@@ -72,7 +72,7 @@ public void TasksAreDiscoveredWhenTaskConditionTrue()
                 @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Target Name='t'>
                          <NonExistantTask Condition=""'1'=='1'""/>
-                         <Message Text='Made it'/>                    
+                         <Message Text='Made it'/>
                       </Target>
                       </Project>");
 
@@ -98,7 +98,7 @@ public void TasksNotDiscoveredWhenTaskConditionFalse()
                 @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Target Name='t'>
                          <NonExistantTask Condition=""'1'=='2'""/>
-                         <Message Text='Made it'/>                    
+                         <Message Text='Made it'/>
                       </Target>
                       </Project>");
 
@@ -119,7 +119,7 @@ public void CanceledTasksDoNotLogMSB4181()
                 ProjectCollection collection = new ProjectCollection();
 
                 string contents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion ='Current'>
+                    <Project ToolsVersion ='Current'>
                      <Target Name='test'>
                         <Exec Command='" + Helpers.GetSleepCommand(TimeSpan.FromSeconds(10)) + @"'/>
                      </Target>
@@ -192,7 +192,7 @@ public void OverridePropertiesInCreateProperty()
                                          Condition=""'%(LogicalName)' != '' "">
                              <Output TaskParameter=""Value"" PropertyName=""LinkSwitches""/>
                          </CreateProperty>
-                         <Message Text='final:[$(LinkSwitches)]'/>                    
+                         <Message Text='final:[$(LinkSwitches)]'/>
                       </Target>
                       </Project>");
 
@@ -223,7 +223,7 @@ public void OverridePropertiesInInferredCreateProperty()
                     @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <ItemGroup>
                         <i Include='" + files[0] + "'><output>" + files[1] + @"</output></i>
-                      </ItemGroup> 
+                      </ItemGroup>
                       <ItemGroup>
                          <EmbeddedResource Include='a.resx'>
                         <LogicalName>foo</LogicalName>
@@ -236,7 +236,7 @@ public void OverridePropertiesInInferredCreateProperty()
                         </EmbeddedResource>
                         </ItemGroup>
                       <Target Name='t2' DependsOnTargets='t'>
-                        <Message Text='final:[$(LinkSwitches)]'/>   
+                        <Message Text='final:[$(LinkSwitches)]'/>
                       </Target>
                       <Target Name='t' Inputs='%(i.Identity)' Outputs='%(i.Output)'>
                         <Message Text='start:[Hello]'/>
@@ -244,7 +244,7 @@ public void OverridePropertiesInInferredCreateProperty()
                                          Condition=""'%(LogicalName)' != '' "">
                              <Output TaskParameter=""Value"" PropertyName=""LinkSwitches""/>
                         </CreateProperty>
-                        <Message Text='end:[hello]'/>                    
+                        <Message Text='end:[hello]'/>
                     </Target>
                     </Project>");
 
@@ -288,17 +288,17 @@ public void TaskOutputBatching()
                     <Target Name='Build'>
                         <CreateProperty Value=""@(TaskParameterItem)"">
                             <Output TaskParameter=""Value"" PropertyName=""Property1""/>
-                        </CreateProperty> 
+                        </CreateProperty>
                         <Message Text='Property1=[$(Property1)]' />
 
                         <CreateProperty Value=""@(TaskParameterItem)"">
                             <Output TaskParameter=""%(TaskParameterItem.ParameterName)"" PropertyName=""Property2""/>
-                        </CreateProperty> 
+                        </CreateProperty>
                         <Message Text='Property2=[$(Property2)]' />
 
                         <CreateProperty Value=""@(TaskParameterItem)"">
                             <Output TaskParameter=""Value"" PropertyName=""%(TaskParameterItem.PropertyName)""/>
-                        </CreateProperty> 
+                        </CreateProperty>
                         <Message Text='MetadataProperty=[$(MetadataProperty)]' />
 
                         <CreateItem Include=""@(TaskParameterItem)"">
@@ -348,9 +348,9 @@ public void MSBuildLastTaskResult()
         <Copy SourceFiles='|' DestinationFolder='c:\' ContinueOnError='true' />
         <PropertyGroup>
            <p>$(MSBuildLastTaskResult)</p>
-        </PropertyGroup>                 
-        <Message Text='[1:$(MSBuildLastTaskResult)]'/> <!-- Should be false: propertygroup did not reset it -->   
-        <Message Text='[p:$(p)]'/> <!-- Should be false as stored earlier -->   
+        </PropertyGroup>
+        <Message Text='[1:$(MSBuildLastTaskResult)]'/> <!-- Should be false: propertygroup did not reset it -->
+        <Message Text='[p:$(p)]'/> <!-- Should be false as stored earlier -->
         <Message Text='[2:$(MSBuildLastTaskResult)]'/> <!-- Message succeeded, should now be true -->
     </Target>
     <Target Name='t2' DependsOnTargets='t'>
@@ -850,11 +850,11 @@ Task IRequestBuilderCallback.BlockOnTargetInProgress(int blockingRequestId, stri
 
         #endregion
 
-/*********************************************************************************
- * 
- *                                     Helpers
- * 
- *********************************************************************************/
+        /*********************************************************************************
+         *
+         *                                     Helpers
+         *
+         *********************************************************************************/
 
         /// <summary>
         /// Helper method for validating the setting of defining project metadata on items
@@ -871,7 +871,7 @@ private void ValidateDefiningProjectMetadataOnTaskOutputsHelper(string customTas
                     <Import Project=`b.proj` />
 
                     <Target Name=`Run`>
-                      <ItemCreationTask 
+                      <ItemCreationTask
                         InputItemsToPassThrough=`@(PassThrough)`
                         InputItemsToCopy=`@(Copy)`>
                           <Output TaskParameter=`OutputString` ItemName=`A` />
@@ -880,10 +880,10 @@ private void ValidateDefiningProjectMetadataOnTaskOutputsHelper(string customTas
                           <Output TaskParameter=`CopiedOutputItems` ItemName=`D` />
                       </ItemCreationTask>
 
-                      <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />    
-                      <Warning Text=`B is wrong: EXPECTED: [a] ACTUAL: [%(B.DefiningProjectName)]` Condition=`'%(B.DefiningProjectName)' != 'a'` />    
-                      <Warning Text=`C is wrong: EXPECTED: [a] ACTUAL: [%(C.DefiningProjectName)]` Condition=`'%(C.DefiningProjectName)' != 'a'` />    
-                      <Warning Text=`D is wrong: EXPECTED: [a] ACTUAL: [%(D.DefiningProjectName)]` Condition=`'%(D.DefiningProjectName)' != 'a'` />    
+                      <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />
+                      <Warning Text=`B is wrong: EXPECTED: [a] ACTUAL: [%(B.DefiningProjectName)]` Condition=`'%(B.DefiningProjectName)' != 'a'` />
+                      <Warning Text=`C is wrong: EXPECTED: [a] ACTUAL: [%(C.DefiningProjectName)]` Condition=`'%(C.DefiningProjectName)' != 'a'` />
+                      <Warning Text=`D is wrong: EXPECTED: [a] ACTUAL: [%(D.DefiningProjectName)]` Condition=`'%(D.DefiningProjectName)' != 'a'` />
                     </Target>
                 </Project>
 ";
@@ -1092,11 +1092,11 @@ private ProjectInstance CreateTestProject()
                     <Target Name='Skip' Inputs='testProject.proj' Outputs='testProject.proj' />
 
                     <Target Name='Error' >
-                        <ErrorTask1 ContinueOnError='True'/>                    
-                        <ErrorTask2 ContinueOnError='False'/>  
-                        <ErrorTask3 /> 
-                        <OnError ExecuteTargets='Foo'/>                  
-                        <OnError ExecuteTargets='Bar'/>                  
+                        <ErrorTask1 ContinueOnError='True'/>
+                        <ErrorTask2 ContinueOnError='False'/>
+                        <ErrorTask3 />
+                        <OnError ExecuteTargets='Foo'/>
+                        <OnError ExecuteTargets='Bar'/>
                     </Target>
 
                     <Target Name='Foo' Inputs='foo.cpp' Outputs='foo.o'>
@@ -1147,7 +1147,7 @@ private ProjectInstance CreateTestProject()
         /// </summary>
         private class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
         {
-#region IBuildComponentHost Members
+            #region IBuildComponentHost Members
 
             /// <summary>
             /// The config cache
@@ -1285,9 +1285,9 @@ public void RegisterFactory(BuildComponentType type, BuildComponentFactoryDelega
             {
             }
 
-#endregion
+            #endregion
 
-#region IBuildComponent Members
+            #region IBuildComponent Members
 
             /// <summary>
             /// Sets the component host
@@ -1306,7 +1306,7 @@ public void ShutdownComponent()
                 throw new NotImplementedException();
             }
 
-#endregion
+            #endregion
         }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 4482dda9bfa..9f3cd6388b1 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -1137,11 +1137,7 @@ private static bool IsTaskFactoryClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass &&
                 !type.GetTypeInfo().IsAbstract &&
-#if FEATURE_TYPE_GETINTERFACE
                 (type.GetInterface("Microsoft.Build.Framework.ITaskFactory") != null);
-#else
-                type.GetInterfaces().Any(interfaceType => interfaceType.FullName == "Microsoft.Build.Framework.ITaskFactory");
-#endif
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index fe372c03fda..7733f0aac37 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -498,7 +498,7 @@ public void IsRunningMultipleNodes4Nodes()
         public void LogCustomAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -534,7 +534,7 @@ public void LogCustomAfterTaskIsDone()
         public void LogCommentAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -570,7 +570,7 @@ public void LogCommentAfterTaskIsDone()
         public void LogWarningAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -606,7 +606,7 @@ public void LogWarningAfterTaskIsDone()
         public void LogErrorAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 17527ef7440..cb255f7ae9b 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.UnitTests
     public class BinaryLoggerTests : IDisposable
     {
         private const string s_testProject = @"
-         <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+         <Project>
             <PropertyGroup>
                <TestProperty>Test</TestProperty>
             </PropertyGroup>
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index e73b77312b4..ee4e63510e0 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -33,7 +33,7 @@ public class ConsoleLoggerTest
         private Dictionary<string, string> _environment;
 
         private static string s_dummyProjectContents = @"
-         <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+         <Project>
             <Target Name='XXX'>
                <Message Text='[hee haw]'/>
             </Target>
@@ -103,7 +103,7 @@ internal void ResetColor()
                 _simulatedConsole.Append("<reset color>");
             }
 
-            public static implicit operator string (SimulatedConsole sc)
+            public static implicit operator string(SimulatedConsole sc)
             {
                 return sc.ToString();
             }
@@ -289,7 +289,7 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
             <ItemGroup>
                 <P Include='$(MSBuildThisFileFullPath)' AdditionalProperties='Number=1' />
                 <P Include='$(MSBuildThisFileFullPath)' AdditionalProperties='Number=2' />
-    
+
                 <ProjectConfigurationDescription Include='Number=$(Number)' />
                 <ProjectConfigurationDescription Include='TargetFramework=$(TargetFramework)' />
             </ItemGroup>
@@ -1433,10 +1433,10 @@ private void WriteAndValidateProperties(BaseConsoleLogger cl, SimulatedConsole s
             string prop1;
             string prop2;
             string prop3;
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                var propertyList = ((SerialConsoleLogger)cl).ExtractPropertyList(properties);
-                ((SerialConsoleLogger)cl).WriteProperties(propertyList);
+                var propertyList = scl.ExtractPropertyList(properties);
+                scl.WriteProperties(propertyList);
                 prop1 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop1", "val1");
                 prop2 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop2", "val2");
                 prop3 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "pro(p3)", "va;%3b;l3");
@@ -1688,10 +1688,10 @@ private void WriteAndValidateItems(BaseConsoleLogger cl, SimulatedConsole sc, bo
             string item3spec;
             string item3metadatum = string.Empty;
 
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                ((SerialConsoleLogger)cl).WriteItems(itemList);
+                SortedList itemList = scl.ExtractItemList(items);
+                scl.WriteItems(itemList);
                 item1spec = "spec" + Environment.NewLine;
                 item2spec = "spec2" + Environment.NewLine;
                 item3spec = "(spec;3" + Environment.NewLine;
@@ -1770,10 +1770,10 @@ public void WriteItemsEmptyList()
                     cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
                 }
 
-                if (cl is SerialConsoleLogger)
+                if (cl is SerialConsoleLogger scl)
                 {
-                    SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                    ((SerialConsoleLogger)cl).WriteItems(itemList);
+                    SortedList itemList = scl.ExtractItemList(items);
+                    scl.WriteItems(itemList);
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 44a8a18a6a6..2b50c83925d 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -249,8 +249,8 @@ public void EmitToolsVersionAttributeToInMemoryProject10()
         }
 
         /// <summary>
-        /// Test to make sure that if the solution file version doesn't map to a sub-toolset version, we won't try 
-        /// to force it to be used.  
+        /// Test to make sure that if the solution file version doesn't map to a sub-toolset version, we won't try
+        /// to force it to be used.
         /// </summary>
         [Fact(Skip = "Needs investigation")]
         public void DefaultSubToolsetIfSolutionVersionSubToolsetDoesntExist()
@@ -291,8 +291,8 @@ public void DefaultSubToolsetIfSolutionVersionSubToolsetDoesntExist()
         }
 
         /// <summary>
-        /// Test to make sure that if the solution version corresponds to an existing sub-toolset version, 
-        /// barring other factors that might override, the sub-toolset will be based on the solution version. 
+        /// Test to make sure that if the solution version corresponds to an existing sub-toolset version,
+        /// barring other factors that might override, the sub-toolset will be based on the solution version.
         /// </summary>
         [Fact]
         public void SubToolsetSetBySolutionVersion()
@@ -327,7 +327,7 @@ public void SubToolsetSetBySolutionVersion()
         }
 
         /// <summary>
-        /// Test to make sure that even if the solution version corresponds to an existing sub-toolset version, 
+        /// Test to make sure that even if the solution version corresponds to an existing sub-toolset version,
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -503,7 +503,7 @@ public void SolutionPassesSubToolsetToChildProjects2()
 
         /// <summary>
         /// Test to make sure that, when we're not TV 4.0 -- which even for Dev11 solutions we are not by default -- that we
-        /// do not pass VisualStudioVersion down to the child projects.  
+        /// do not pass VisualStudioVersion down to the child projects.
         /// </summary>
         [Fact(Skip = "Needs investigation")]
         public void SolutionDoesntPassSubToolsetToChildProjects()
@@ -512,7 +512,7 @@ public void SolutionDoesntPassSubToolsetToChildProjects()
             {
                 string classLibraryContents =
                     @"
-                        <Project ToolsVersion=""4.0"" DefaultTargets=""Build"" xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                        <Project ToolsVersion=""4.0"" DefaultTargets=""Build"">
                             <Target Name='Build'>
                                 <Message Text='.[$(VisualStudioVersion)].' />
                                 <Message Text='.[[$(MSBuildToolsVersion)]].' />
@@ -568,7 +568,7 @@ public void SolutionDoesntPassSubToolsetToChildProjects()
         }
 
         /// <summary>
-        /// Verify that we throw the appropriate error if the solution declares a dependency 
+        /// Verify that we throw the appropriate error if the solution declares a dependency
         /// on a project that doesn't exist.
         /// </summary>
         [Fact]
@@ -1192,7 +1192,7 @@ public void ToolsVersionOverrideShouldBeSpecifiedOnMSBuildTaskInvocations()
 
 #if FEATURE_MULTIPLE_TOOLSETS
         /// <summary>
-        /// Make sure that whatever the solution ToolsVersion is, it gets mapped to all its metaprojs, too. 
+        /// Make sure that whatever the solution ToolsVersion is, it gets mapped to all its metaprojs, too.
         /// </summary>
         [Fact]
         public void SolutionWithDependenciesHasCorrectToolsVersionInMetaprojs()
@@ -1239,22 +1239,22 @@ public void SolutionWithDependenciesHasCorrectToolsVersionInMetaprojs()
 
                 Assert.Equal(2, instances.Length);
 
-                // Solution metaproj 
+                // Solution metaproj
                 Assert.Equal(solutionToolsVersion, instances[0].ToolsVersion);
 
                 ICollection<ProjectItemInstance> projectReferences = instances[0].GetItems("ProjectReference");
 
                 foreach (ProjectItemInstance projectReference in projectReferences)
                 {
-                    // If this is the reference to the metaproj, its ToolsVersion metadata needs to match 
-                    // the solution ToolsVersion -- that's how the build knows which ToolsVersion to use. 
+                    // If this is the reference to the metaproj, its ToolsVersion metadata needs to match
+                    // the solution ToolsVersion -- that's how the build knows which ToolsVersion to use.
                     if (projectReference.EvaluatedInclude.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase))
                     {
                         Assert.Equal(solutionToolsVersion, projectReference.GetMetadataValue("ToolsVersion"));
                     }
                 }
 
-                // Project metaproj for project with dependencies 
+                // Project metaproj for project with dependencies
                 Assert.Equal(solutionToolsVersion, instances[1].ToolsVersion);
             }
         }
@@ -1293,7 +1293,7 @@ public void ToolsVersionOverrideCausesToolsetRedirect()
 
             try
             {
-                // SolutionProjectGenerator.Generate() is used at build-time, and creates evaluation- and 
+                // SolutionProjectGenerator.Generate() is used at build-time, and creates evaluation- and
                 // execution-model projects; as such it will throw if fed an explicitly invalid toolsversion
                 ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, "invalid", _buildEventContext, CreateMockLoggingService());
             }
@@ -1525,7 +1525,7 @@ public void VenusSolutionDefaultTargetFrameworkVersion()
             msbuildProject = CreateVenusSolutionProject("2.0");
             Assert.Equal("v2.0", msbuildProject.GetPropertyValue("TargetFrameworkVersion"));
 
-            // may be user defined 
+            // may be user defined
             IDictionary<string, string> globalProperties = new Dictionary<string, string>();
             globalProperties.Add("TargetFrameworkVersion", "userdefined");
             msbuildProject = CreateVenusSolutionProject(globalProperties);
@@ -1915,7 +1915,7 @@ public void BadFrameworkMonkierExpectBuildToFail()
 
             try
             {
-                // Since we're creating our own BuildManager, we need to make sure that the default 
+                // Since we're creating our own BuildManager, we need to make sure that the default
                 // one has properly relinquished the inproc node
                 NodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
                 nodeProviderInProc?.Dispose();
@@ -2003,7 +2003,7 @@ public void BadFrameworkMonkierExpectBuildToFail2()
 
             try
             {
-                // Since we're creating our own BuildManager, we need to make sure that the default 
+                // Since we're creating our own BuildManager, we need to make sure that the default
                 // one has properly relinquished the inproc node
                 NodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
                 nodeProviderInProc?.Dispose();
@@ -2448,7 +2448,7 @@ public void DirectorySolutionPropsTest(string projectName, bool enable)
                 var solutionFile = SolutionFile.Parse(solutionFilePath);
 
                 ProjectInstance projectInstance = SolutionProjectGenerator.Generate(solutionFile, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService(), new[] { "Build" }).FirstOrDefault();
-                
+
                 Assert.NotNull(projectInstance);
 
                 Assert.Equal(enable ? expectedPropertyValue : string.Empty, projectInstance.GetPropertyValue("PropertyA"));
@@ -2570,7 +2570,7 @@ private ILoggingService CreateMockLoggingService()
 
         /// <summary>
         /// Checks the provided project for a matching itemtype and include value.  If it
-        /// does not exist, asserts. 
+        /// does not exist, asserts.
         /// </summary>
         private void AssertProjectContainsItem(ProjectInstance msbuildProject, string itemType, string include)
         {
@@ -2589,7 +2589,7 @@ private void AssertProjectContainsItem(ProjectInstance msbuildProject, string it
         }
 
         /// <summary>
-        /// Counts the number of items with a particular itemtype in the provided project, and 
+        /// Counts the number of items with a particular itemtype in the provided project, and
         /// asserts if it doesn't match the provided count.
         /// </summary>
         private void AssertProjectItemNameCount(ProjectInstance msbuildProject, string itemType, int count)
diff --git a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
index b790a35ea3a..703e0a5b7ee 100644
--- a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
@@ -157,7 +157,7 @@ public void CreateProjectWithoutLineInfo()
         {
             XmlReader reader = XmlReader.Create(new StringReader
                 (
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project>
                       <Target Name='foo'/>
                   </Project>"
                 ));
diff --git a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
index a04dbc363b2..94626b132d4 100644
--- a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
+++ b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
@@ -32,7 +32,7 @@ public class ItemDefinitionGroup_Tests
         public void ItemDefinitionGroupExistsInProject()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -53,7 +53,7 @@ public void ItemDefinitionGroupExistsInProject()
         public void MultipleItemDefinitionGroupExistsInProject()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -82,7 +82,7 @@ public void MultipleItemDefinitionGroupExistsInProject()
         public void EmptyItemsInheritValues()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -115,7 +115,7 @@ public void EmptyItemsInheritValues()
         public void ItemMetadataOverridesInheritedValues()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -160,7 +160,7 @@ public void ItemDefinitionDoesntAllowItemExpansion()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Project p = new Project(XmlReader.Create(new StringReader(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <Compile Include='a.cs'>
                             <Foo>Bar</Foo>
@@ -190,7 +190,7 @@ public void ItemDefinitionMetadataConditionDoesntAllowItemExpansion()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Project p = new Project(XmlReader.Create(new StringReader(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <Compile Include='a.cs'>
                             <Foo>Bar</Foo>
@@ -219,7 +219,7 @@ public void ItemDefinitionMetadataDoesntAllowItemExpansion()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Project p = new Project(XmlReader.Create(new StringReader(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <Compile Include='a.cs'>
                             <Foo>Bar</Foo>
@@ -247,7 +247,7 @@ public void ItemDefinitionMetadataDoesntAllowItemExpansion()
         public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -285,7 +285,7 @@ public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
         public void EmptyItemDefinitionGroup()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                     </ItemDefinitionGroup>
                     <ItemGroup>
@@ -302,7 +302,7 @@ public void EmptyItemDefinitionGroup()
         public void EmptyItemDefinitions()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile />
                     </ItemDefinitionGroup>
@@ -323,7 +323,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinition()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+   <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
       <CppCompile>
@@ -352,7 +352,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTarget()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+   <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
       <CppCompile>
@@ -380,7 +380,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+   <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
       <CppCompile>
@@ -413,7 +413,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
         public void ItemDefinitionGroupWithFalseCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup Condition=""'$(Foo)'!=''"">
                         <Compile>
                             <First>1st</First>
@@ -439,7 +439,7 @@ public void ItemDefinitionGroupWithFalseCondition()
         public void ItemDefinitionGroupWithTrueCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup Condition=""'$(Foo)'==''"">
                         <Compile>
                             <First>1st</First>
@@ -465,7 +465,7 @@ public void ItemDefinitionGroupWithTrueCondition()
         public void ItemDefinitionWithFalseCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile  Condition=""'$(Foo)'!=''"">
                             <First>1st</First>
@@ -491,7 +491,7 @@ public void ItemDefinitionWithFalseCondition()
         public void ItemDefinitionWithTrueCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile Condition=""'$(Foo)'==''"">
                             <First>1st</First>
@@ -517,7 +517,7 @@ public void ItemDefinitionWithTrueCondition()
         public void ItemDefinitionMetadataWithFalseCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First Condition=""'$(Foo)'!=''"">1st</First>
@@ -543,7 +543,7 @@ public void ItemDefinitionMetadataWithFalseCondition()
         public void ItemDefinitionMetadataWithTrueCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First Condition=""'$(Foo)'==''"">1st</First>
@@ -569,7 +569,7 @@ public void ItemDefinitionMetadataWithTrueCondition()
         public void ItemDefinitionMetadataCopiedToTaskItem()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
                         <MetaA>M-A(b)</MetaA>
@@ -604,7 +604,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem()
         public void ItemDefinitionMetadataCopiedToTaskItem2()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
                         <MetaA>M-A(b)</MetaA>
@@ -642,7 +642,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem2()
         public void ItemDefinitionMetadataCopiedToTaskItem3()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
                         <MetaA>M-A(b)</MetaA>
@@ -685,7 +685,7 @@ public void BasicItemDefinitionInProject()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'/>
                   </ItemGroup>
@@ -693,7 +693,7 @@ public void BasicItemDefinitionInProject()
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <CppCompile Include='b.cpp'/>
                   </ItemGroup>
@@ -712,7 +712,7 @@ public void EscapingInItemDefinitionInProject()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -720,7 +720,7 @@ public void EscapingInItemDefinitionInProject()
                     <i Condition=""'%24'=='$'"">
                       <m Condition=""'%24'=='$'"">%24(xyz)</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -737,7 +737,7 @@ public void ItemDefinitionForOtherItemType()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -745,7 +745,7 @@ public void ItemDefinitionForOtherItemType()
                     <j>
                       <m>m1</m>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -761,7 +761,7 @@ public void RedefinitionLastOneWins()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -770,13 +770,13 @@ public void RedefinitionLastOneWins()
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i>
                       <m>m2</m>
                       <o>o1</o>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)-%(i.n)-%(i.o)]""/>
                   </Target>
@@ -795,12 +795,12 @@ public void ItemExpressionInDefaultMetadataValueErrors()
                 // We don't allow item expressions on an ItemDefinitionGroup because there are no items when IDG is evaluated.
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>@(x)</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                 </Project>
             ")));
                 p.Build("t", new ILogger[] { logger });
@@ -815,7 +815,7 @@ public void UnqualifiedMetadataConditionOnItemDefinitionGroupErrors()
                 // We don't allow unqualified metadata on an ItemDefinitionGroup because we don't know what item type it refers to.
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup Condition=""'%(m)'=='m1'""/>
                 </Project>
             ")));
@@ -832,7 +832,7 @@ public void QualifiedMetadataConditionOnItemDefinitionGroupErrors()
                 // We don't allow qualified metadata because it's not worth distinguishing from unqualified, when you can just move the condition to the child.
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup Condition=""'%(x.m)'=='m1'""/>
                 </Project>
             ")));
@@ -845,7 +845,7 @@ public void MetadataConditionOnItemDefinition()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                     <j Include='j1'/>
@@ -857,16 +857,16 @@ public void MetadataConditionOnItemDefinition()
                     <j>
                       <n>n1</n>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(m)'=='m1'"">
                       <m>m2</m>
                     </i>
                     <!-- verify j metadata is distinct -->
                     <j Condition=""'%(j.n)'=='n1' and '%(n)'=='n1'"">
-                      <n>n2</n>   
+                      <n>n2</n>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                     <Message Text=""[%(j.n)]""/>
@@ -883,7 +883,7 @@ public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualifie
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -891,12 +891,12 @@ public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualifie
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(i.m)'=='m1' and '%(m)'=='m1'"">
                       <m>m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -912,7 +912,7 @@ public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -920,12 +920,12 @@ public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(m)'=='m2' or '%(i.m)'!='m1'"">
                       <m>m3</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -941,7 +941,7 @@ public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -950,12 +950,12 @@ public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i>
                       <m Condition=""'%(m)'=='m1' and '%(n)'=='n1' and '%(i.m)'=='m1'"">m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -971,7 +971,7 @@ public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualifi
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -980,7 +980,7 @@ public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualifi
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i>
                       <m Condition=""'%(m)'=='m2' or !('%(n)'=='n1') or '%(i.m)' != 'm1'"">m3</m>
@@ -1001,7 +1001,7 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1009,12 +1009,12 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(j.m)'=='' and '%(j.m)'!='x'"">
                       <m Condition=""'%(j.m)'=='' and '%(j.m)'!='x'"">m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -1027,8 +1027,8 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
 
         /// <summary>
         /// Make ItemDefinitionGroup inside a target produce a nice error.
-        /// It will normally produce an error due to the invalid child tag, but 
-        /// we want to error even if there's no child tag. This will make it 
+        /// It will normally produce an error due to the invalid child tag, but
+        /// we want to error even if there's no child tag. This will make it
         /// easier to support it inside targets in a future version.
         /// </summary>
         [Fact]
@@ -1038,7 +1038,7 @@ public void ItemDefinitionInTargetErrors()
             {
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <Target Name=""t"">
                     <ItemDefinitionGroup/>
                   </Target>
@@ -1056,7 +1056,7 @@ public void ItemDefinitionInTargetErrors()
         public void ItemDefinitionGroupTask()
         {
             MockLogger ml = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
-                    <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                    <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                         <UsingTask TaskName=""ItemDefinitionGroup"" AssemblyFile=""{0}""/>
                         <Target Name=""Build"">
                             <Microsoft.Build.UnitTests.Definition.ItemDefinitionGroup/>
@@ -1073,7 +1073,7 @@ public void MetadataOnItemWins()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'>
                       <Defines>RETAIL</Defines>
@@ -1084,7 +1084,7 @@ public void MetadataOnItemWins()
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
@@ -1100,7 +1100,7 @@ public void MixtureOfItemAndDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'>
                       <WarningLevel>4</WarningLevel>
@@ -1110,7 +1110,7 @@ public void MixtureOfItemAndDefaultMetadata()
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.WarningLevel)]""/>
@@ -1127,7 +1127,7 @@ public void IntrinsicTaskModifyingDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1135,7 +1135,7 @@ public void IntrinsicTaskModifyingDefaultMetadata()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <ItemGroup>
                       <i>
@@ -1156,7 +1156,7 @@ public void IntrinsicTaskConsumingDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1164,7 +1164,7 @@ public void IntrinsicTaskConsumingDefaultMetadata()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <ItemGroup>
                       <i Condition=""'%(i.m)'=='m1'"">
@@ -1190,18 +1190,18 @@ public void DefinitionInImportedFile()
             {
                 importedFile = FileUtilities.GetTemporaryFile();
                 File.WriteAllText(importedFile, @"
-                <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project ToolsVersion='msbuilddefaulttoolsversion'>
                   <ItemDefinitionGroup>
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                 </Project>
             ");
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                    <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                    <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                       <ItemGroup>
-                        <CppCompile Include='a.cpp'/>                      
+                        <CppCompile Include='a.cpp'/>
                       </ItemGroup>
                       <Import Project='" + importedFile + @"'/>
                       <Target Name=""t"">
@@ -1227,12 +1227,12 @@ public void DefinitionInImportedFile()
         public void ProjectAddNewItemPicksUpProjectItemDefinitions()
         {
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                 </Project>
                 ")));
 
@@ -1250,12 +1250,12 @@ public void ProjectAddNewItemPicksUpProjectItemDefinitions()
         public void ProjectAddNewItemExistingGroupPicksUpProjectItemDefinitions()
         {
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include='i2'>
                       <m>m2</m>
@@ -1276,13 +1276,13 @@ public void ItemsEmittedByTaskPickUpItemDefinitions()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <CreateItem Include=""i1"" AdditionalMetadata=""n=n2"">
                       <Output ItemName=""i"" TaskParameter=""Include""/>
@@ -1302,13 +1302,13 @@ public void ItemsEmittedByIntrinsicTaskPickUpItemDefinitions()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <ItemGroup>
                       <i Include=""i1"">
@@ -1334,12 +1334,12 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_SourceDefaultMeta
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""i1""/>
                   </ItemGroup>
@@ -1365,12 +1365,12 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationExplic
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""i1""/>
                   </ItemGroup>
@@ -1403,7 +1403,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaul
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
@@ -1411,7 +1411,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaul
                     <j>
                       <m>m2</m>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""n1""/>
                     <j Include=""@(i)""/>
@@ -1443,7 +1443,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Outsi
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>im1</m>
@@ -1461,7 +1461,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Outsi
                       <q>kq4</q>
                       <r>kr4</r>
                     </k>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""1"">
                       <o>io2</o>
@@ -1535,7 +1535,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Insid
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>im1</m>
@@ -1552,7 +1552,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Insid
                       <m>km4</m>
                       <q>kq4</q>
                     </k>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""1"">
                       <o>io2</o>
@@ -1591,16 +1591,16 @@ public void MutualReferenceToDefinition1()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>~%(m)~</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                     <ItemGroup>
                       <i Include=""i1""/>
-                    </ItemGroup>   
+                    </ItemGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
@@ -1617,16 +1617,16 @@ public void MutualReferenceToDefinition2()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>~%(n)~</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                     <ItemGroup>
                       <i Include=""i1""/>
-                    </ItemGroup>   
+                    </ItemGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
@@ -1643,17 +1643,17 @@ public void MutualReferenceToDefinition3()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>%(i.m)</n>
                       <o>%(j.m)</o>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                     <ItemGroup>
                       <i Include=""i1""/>
-                    </ItemGroup>   
+                    </ItemGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)][%(i.n)][%(i.o)]""/>
                   </Target>
@@ -1670,7 +1670,7 @@ public void ProjectReevaluationReevaluatesItemDefinitions()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <PropertyGroup>
                     <Defines>CODEANALYSIS</Defines>
                   </PropertyGroup>
@@ -1682,7 +1682,7 @@ public void ProjectReevaluationReevaluatesItemDefinitions()
                       <Defines Condition=""'$(BuildFlavor)'=='ret'"">$(Defines);RETAIL</Defines>
                       <Defines Condition=""'$(BuildFlavor)'=='chk'"">$(Defines);DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
@@ -1711,7 +1711,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
             try
             {
                 otherProject = FileUtilities.GetTemporaryFile();
-                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1719,7 +1719,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
                     <i>
                       <m>m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[CHILD:%(i.m)]""/>
                   </Target>
@@ -1732,7 +1732,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
 
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1740,7 +1740,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[PARENT-before:%(i.m)]""/>
                     <MSBuild Projects=""" + otherProject + @"""/>
@@ -1767,7 +1767,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
             try
             {
                 otherProject = FileUtilities.GetTemporaryFile();
-                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'>
                        <m>m1</m>
@@ -1777,7 +1777,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
                     <i>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"" Outputs=""@(i)"">
                     <Message Text=""[CHILD:%(i.Identity):m=%(i.m),n=%(i.n)]""/>
                   </Target>
@@ -1790,7 +1790,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
 
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <Target Name=""t"">
                     <MSBuild Projects=""" + otherProject + @""">
                        <Output TaskParameter='TargetOutputs' ItemName='i'/>
diff --git a/src/Build.UnitTests/Definition/ProjectHelpers.cs b/src/Build.UnitTests/Definition/ProjectHelpers.cs
index a7ee529b63d..de7960e5361 100644
--- a/src/Build.UnitTests/Definition/ProjectHelpers.cs
+++ b/src/Build.UnitTests/Definition/ProjectHelpers.cs
@@ -23,7 +23,7 @@ internal static ProjectInstance CreateEmptyProjectInstance()
         {
             XmlReader reader = XmlReader.Create(new StringReader
                 (
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                @"<Project>
                       <Target Name='foo'/>
                   </Project>"
                 ));
diff --git a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
index a2bef1d7c0c..c2a03e57d20 100644
--- a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
+++ b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
@@ -16,12 +16,12 @@
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
-    /// Tests some manipulations of Project and ProjectCollection that require dealing with internal data. 
+    /// Tests some manipulations of Project and ProjectCollection that require dealing with internal data.
     /// </summary>
     public class Project_Internal_Tests
     {
         /// <summary>
-        /// Set default tools version; subsequent projects should use it 
+        /// Set default tools version; subsequent projects should use it
         /// </summary>
         [Fact]
         public void SetDefaultToolsVersion()
@@ -31,8 +31,8 @@ public void SetDefaultToolsVersion()
             try
             {
                 // In the new world of figuring out the ToolsVersion to use, we completely ignore the default
-                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying 
-                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.  
+                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying
+                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -44,7 +44,7 @@ public void SetDefaultToolsVersion()
                 Assert.Equal("x", collection.DefaultToolsVersion);
 
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -61,10 +61,10 @@ public void SetDefaultToolsVersion()
         }
 
         /// <summary>
-        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully 
-        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project. 
-        /// 
-        /// ... Make sure we can do this even if we're not using the "always default everything to current anyway" codepath. 
+        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully
+        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project.
+        ///
+        /// ... Make sure we can do this even if we're not using the "always default everything to current anyway" codepath.
         /// </summary>
         [Fact]
         public void ReloadProjectWithInvalidToolsVersionInFile()
@@ -74,13 +74,13 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
             try
             {
                 // In the new world of figuring out the ToolsVersion to use, we completely ignore the default
-                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying 
-                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.  
+                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying
+                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
                 string content = @"
-                    <Project ToolsVersion='bogus' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project ToolsVersion='bogus'>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -118,10 +118,10 @@ public void ProjectToolsVersion20Present()
 
             try
             {
-                // In the new world of figuring out the ToolsVersion to use, we completely ignore what 
+                // In the new world of figuring out the ToolsVersion to use, we completely ignore what
                 // is written in the project file.  However, this test explicitly depends on effectively
-                // modifying the "project file" (through the construction model OM), so we need to turn 
-                // that behavior off in order to verify that it still works.  
+                // modifying the "project file" (through the construction model OM), so we need to turn
+                // that behavior off in order to verify that it still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -169,10 +169,10 @@ public void MSBuildToolsVersionProperty()
 
             try
             {
-                // In the new world of figuring out the ToolsVersion to use, we completely ignore what 
+                // In the new world of figuring out the ToolsVersion to use, we completely ignore what
                 // is written in the project file.  However, this test explicitly depends on effectively
-                // modifying the "project file" (through the construction model OM), so we need to turn 
-                // that behavior off in order to verify that it still works.  
+                // modifying the "project file" (through the construction model OM), so we need to turn
+                // that behavior off in order to verify that it still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -202,13 +202,13 @@ public void MSBuildToolsVersionProperty()
         public void ProjectEvaluationShouldRespectConditionsIfProjectLoadSettingsSaysSo()
         {
             var projectContents = @"
-<Project>   
+<Project>
    <ItemDefinitionGroup Condition=`1 == 2`>
      <I>
        <m>v</m>
      </I>
    </ItemDefinitionGroup>
-   
+
    <PropertyGroup Condition=`1 == 2`>
      <P1>v</P1>
    </PropertyGroup>
diff --git a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
index 3921c17b9d1..9d292500a86 100644
--- a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
@@ -291,7 +291,7 @@ public void InvalidToolsVersionTooHighMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='98.6' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='98.6'>
                         <Target Name='Foo'>
                         </Target>
                        </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -326,7 +326,7 @@ public void InvalidToolsVersionMissingLowMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='0.1' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='0.1'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -359,7 +359,7 @@ public void InvalidToolsVersionMissingMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -387,7 +387,7 @@ public void InvalidToolsVersion()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, "goober", p);
@@ -418,7 +418,7 @@ public void ToolsVersionMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -446,7 +446,7 @@ public void CustomToolsVersionIsHonored()
             Environment.SetEnvironmentVariable("MSBUILDTREATALLTOOLSVERSIONSASCURRENT", String.Empty);
             try
             {
-                string content = @"<Project ToolsVersion=""14.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                string content = @"<Project ToolsVersion=""14.0"">
     <Target Name=""a"">
         <Message Text=""[$(MSBUILDTOOLSVERSION)]"" />
     </Target>
@@ -487,7 +487,7 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist()
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -522,7 +522,7 @@ public void ToolsVersionFromEnvironmentVariable()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -559,7 +559,7 @@ public void InvalidToolsVersionFromEnvironmentVariable()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -599,7 +599,7 @@ public void ToolsVersionMappedToCurrent_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -632,7 +632,7 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist_CreateProjectI
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -668,7 +668,7 @@ public void ToolsVersionFromEnvironmentVariable_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -708,7 +708,7 @@ public void InvalidToolsVersionFromEnvironmentVariable_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -751,7 +751,7 @@ public void ToolsVersionMappedToCurrent_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -784,7 +784,7 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist_ProjectInstanc
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -819,7 +819,7 @@ public void ToolsVersionFromEnvironmentVariable_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -859,7 +859,7 @@ public void InvalidToolsVersionFromEnvironmentVariable_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -956,7 +956,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\a.tasks"
                                          : "/directory1/directory2/a.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='a1' AssemblyName='a' />
                             <UsingTask TaskName='a2' AssemblyName='a' />
                             <UsingTask TaskName='a3' AssemblyName='a' />
@@ -965,37 +965,37 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\b.tasks"
                                          : "/directory1/directory2/b.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='b1' AssemblyName='b' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\c.tasksfile"
                                          : "/directory1/directory2/c.taskfile",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='c1' AssemblyName='c' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\directory3\\d.tasks"
                                          : "/directory1/directory2/directory3/d.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='d1' AssemblyName='d' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\e.tasks"
                                          : "/directory1/directory2/e.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='e1' AssemblyName='e' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "d:\\directory1\\directory2\\f.tasks"
                                          : "/d/directory1/directory2/f.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='f1' AssemblyName='f' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\g.custom.tasks"
                                          : "/directory1/directory2/g.custom.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='g1' AssemblyName='g' />
                             <UsingTask TaskName='g2' AssemblyName='g' />
                             <UsingTask TaskName='g3' AssemblyName='g' />
@@ -1003,7 +1003,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\somepath\\1.tasks"
                                          : "/somepath/1.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='11' AssemblyName='1' />
                             <UsingTask TaskName='12' AssemblyName='1' />
                             <UsingTask TaskName='13' AssemblyName='1' />
@@ -1011,13 +1011,13 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\somepath\\2.tasks"
                                          : "/somepath/2.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='21' AssemblyName='2' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\inline\\inlinetasks.tasks"
                                          : "/inline/inlinetasks.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='t2' AssemblyName='an' Condition='true' TaskFactory='AssemblyFactory' Runtime='CLR2' Architecture='x86' RequiredRuntime='2.0' RequiredPlatform='x86'>
                                 <ParameterGroup>
                                    <MyParameter ParameterType='System.String' Output='true' Required='false'/>
@@ -1030,7 +1030,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\msbuildoverridetasks\\1.overridetasks"
                                          : "/msbuildoverridetasks/1.overridetasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='a1' AssemblyName='o' />
                             <UsingTask TaskName='oa1' AssemblyName='o' />
                             <UsingTask TaskName='oa2' AssemblyName='o' />
@@ -1039,7 +1039,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\msbuildoverridetasks\\2.overridetasks"
                                          : "/msbuildoverridetasks/2.overridetasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='ooo' AssemblyName='o' />
                         </Project>")
 };
diff --git a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
index 7b1f1f6e36b..57abe763aaf 100644
--- a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
@@ -45,7 +45,7 @@ public class ToolsetReaderTests : IDisposable
         private const string testRegistryPath = @"msbuildUnitTests";
 
         /// <summary>
-        /// Store the value of the "VisualStudioVersion" environment variable here so that 
+        /// Store the value of the "VisualStudioVersion" environment variable here so that
         /// we can unset it for the duration of the test.
         /// </summary>
         private string _oldVisualStudioVersion;
@@ -124,7 +124,7 @@ public void GetToolsetDataFromConfiguration_SectionNotRegisteredInConfigFile()
         }
 #endif
 
-    #region "Reading from application configuration file tests"
+        #region "Reading from application configuration file tests"
 
 #if FEATURE_SYSTEM_CONFIGURATION
 
@@ -669,7 +669,7 @@ public void BlankPropertyNameInRegistry()
            );
         }
         /// <summary>
-        /// Tests the case when a blank property name is specified in the registry in a 
+        /// Tests the case when a blank property name is specified in the registry in a
         /// sub-toolset.
         /// </summary>
         [Fact]
@@ -957,7 +957,7 @@ public void GetToolsetDataFromConfiguration_PropertyValueIsEmptyString2()
 
         /// <summary>
         /// Tests that any escaped xml in config file, is treated well
-        /// Note that this comes for free with the current implementation using the 
+        /// Note that this comes for free with the current implementation using the
         /// framework api to access section in the config file
         /// </summary>
         [Fact]
@@ -988,9 +988,9 @@ public void GetToolsetDataFromConfiguration_XmlEscapedCharacters()
             Assert.Equal(@"some>value", values["2>.0"].Properties["foo"].EvaluatedValue);
         }
 #endif
-    #endregion
+        #endregion
 
-    #region "GetToolsetData tests"
+        #region "GetToolsetData tests"
 
         /// <summary>
         /// Tests the case where registry and config file contains different toolsVersion
@@ -1407,7 +1407,7 @@ public void ToolsPathInRegistryHasInvalidPathChars()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                // should throw... 
+                // should throw...
                 ToolsetReader.ReadAllToolsets
                                                            (
                                                                values,
@@ -2006,9 +2006,9 @@ public void GetToolsetData_ConflictingPropertyValuesSameCase()
         }
 
         /// <summary>
-        /// Tests the case where application configuration file overrides a value already specified in the registry, 
-        /// where that registry value is bogus and would otherwise throw.  However, since the config file also 
-        /// contains an entry for that toolset, the registry toolset never gets read, and thus never throws.  
+        /// Tests the case where application configuration file overrides a value already specified in the registry,
+        /// where that registry value is bogus and would otherwise throw.  However, since the config file also
+        /// contains an entry for that toolset, the registry toolset never gets read, and thus never throws.
         /// </summary>
         [Fact]
         public void GetToolsetData_ConflictingPropertyValuesRegistryThrows()
@@ -2115,8 +2115,8 @@ public void ToolsVersionAttributeNotSpecifiedOnProjectElementAndDefaultVersionSp
             try
             {
                 // In the new world of figuring out the ToolsVersion to use, we completely ignore the default
-                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying 
-                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.  
+                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying
+                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -2126,7 +2126,7 @@ public void ToolsVersionAttributeNotSpecifiedOnProjectElementAndDefaultVersionSp
                 projectCollection.AddToolset(new Toolset("2.0", "20toolsPath", projectCollection, msbuildOverrideTasksPath));
                 projectCollection.AddToolset(new Toolset(ObjectModelHelpers.MSBuildDefaultToolsVersion, "120toolsPath", projectCollection, msbuildOverrideTasksPath));
 
-                string projectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("x.proj", @"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" />");
+                string projectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("x.proj", @"<Project />");
 
                 Project project = projectCollection.LoadProject(projectPath);
 
@@ -2188,8 +2188,8 @@ public void GetToolsetData_RegistryNotPresent()
 
         /// <summary>
         /// Test the case where nothing is specified in the config file
-        /// Note that config file not present is same as config file 
-        /// with no MSBuildToolsets Section 
+        /// Note that config file not present is same as config file
+        /// with no MSBuildToolsets Section
         /// </summary>
         [Fact]
         public void GetToolsetData_ConfigFileNotPresent()
@@ -2324,9 +2324,9 @@ public void GetToolsetData_ReadRegistryOpenSubKeyThrowsException()
             });
         }
 
-    #endregion
+        #endregion
 
-    #region "SetDefaultToolsetVersion tests"
+        #region "SetDefaultToolsetVersion tests"
 
         /// <summary>
         /// Tests that the default ToolsVersion is correctly resolved when specified
@@ -2837,7 +2837,7 @@ public void GlobalPropertiesInToolsetsAreExpandedButAreNotOverwritten()
             Assert.Equal("gv1", values["4.0"].Properties["p2"].EvaluatedValue);
         }
 
-    #endregion
+        #endregion
 
         private ToolsetRegistryReader GetStandardRegistryReader()
         {
diff --git a/src/Build.UnitTests/EscapingInProjects_Tests.cs b/src/Build.UnitTests/EscapingInProjects_Tests.cs
index 952ae4b81cf..5622f9e6bf6 100644
--- a/src/Build.UnitTests/EscapingInProjects_Tests.cs
+++ b/src/Build.UnitTests/EscapingInProjects_Tests.cs
@@ -5,7 +5,9 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+#if FEATURE_COMPILE_IN_TESTS
 using System.Reflection;
+#endif
 
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
@@ -13,16 +15,18 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
-
-
+#if FEATURE_COMPILE_IN_TESTS
 using EscapingUtilities = Microsoft.Build.Shared.EscapingUtilities;
+#endif
 using FileUtilities = Microsoft.Build.Shared.FileUtilities;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using ResourceUtilities = Microsoft.Build.Shared.ResourceUtilities;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+#if FEATURE_COMPILE_IN_TESTS
 using Microsoft.Build.Shared;
-using Shouldly;
+#endif
 
 #nullable disable
 
@@ -85,7 +89,7 @@ public void Dispose()
         public void SemicolonInPropertyPassedIntoStringParam()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <MyPropertyWithSemicolons>abc %3b def %3b ghi</MyPropertyWithSemicolons>
                     </PropertyGroup>
@@ -107,7 +111,7 @@ public void SemicolonInPropertyPassedIntoStringParam()
         public void SemicolonInPropertyPassedIntoStringParam_UsingTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <UsingTask TaskName=`Message` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` TaskFactory=`TaskHostFactory` />
                     <PropertyGroup>
                         <MyPropertyWithSemicolons>abc %3b def %3b ghi</MyPropertyWithSemicolons>
@@ -131,7 +135,7 @@ public void SemicolonInPropertyPassedIntoITaskItemParam()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@$"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <UsingTask TaskName=`Microsoft.Build.UnitTests.EscapingInProjects_Tests.MyTestTask` AssemblyFile=`{new Uri(Assembly.GetExecutingAssembly().EscapedCodeBase).LocalPath}` />
 
@@ -161,7 +165,7 @@ public void SemicolonInPropertyPassedIntoITaskItemParam_UsingTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <UsingTask TaskName=`Microsoft.Build.UnitTests.EscapingInProjects_Tests.MyTestTask` AssemblyFile=`{0}` TaskFactory=`TaskHostFactory` />
 
@@ -194,7 +198,7 @@ public void AddNewItemWithSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                     </ItemGroup>
@@ -206,7 +210,7 @@ public void AddNewItemWithSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                         <MyWildCard Include=`foo;bar.weirdo`/>
@@ -232,7 +236,7 @@ public void AddNewItemWithPropertyContainingSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
                     </PropertyGroup>
@@ -247,7 +251,7 @@ public void AddNewItemWithPropertyContainingSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
                     </PropertyGroup>
@@ -277,7 +281,7 @@ public void ModifyItemIncludeSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
@@ -291,7 +295,7 @@ public void ModifyItemIncludeSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`a.weirdo` />
@@ -330,7 +334,7 @@ public void ModifyItemIncludeEscapedSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
@@ -344,7 +348,7 @@ public void ModifyItemIncludeEscapedSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
@@ -387,7 +391,7 @@ public void ModifyItemAddPropertyContainingSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
@@ -405,7 +409,7 @@ public void ModifyItemAddPropertyContainingSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
@@ -448,7 +452,7 @@ public void AddNewItemThatMatchesWildcard1()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                     </ItemGroup>
@@ -460,7 +464,7 @@ public void AddNewItemThatMatchesWildcard1()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                     </ItemGroup>
@@ -490,7 +494,7 @@ public void AddNewItemThatMatchesWildcard2()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.AAA%253bBBB`/>
                     </ItemGroup>
@@ -502,7 +506,7 @@ public void AddNewItemThatMatchesWildcard2()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.AAA%253bBBB`/>
                     </ItemGroup>
@@ -539,7 +543,7 @@ public void InferEscapedOutputsFromTask()
 
                 MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
 
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <Target Name=`GenerateResources` Inputs=`{0}` Outputs=`{1}`>
                         <NonExistentTask OutputResources=`aaa%253bbbb.resx; ccc%253bddd.resx`>
@@ -574,7 +578,7 @@ public void ItemTransformContainingSemicolon()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <TextFile Include=`X.txt`/>
                         <TextFile Include=`Y.txt`/>
@@ -600,7 +604,7 @@ public void ItemTransformContainingSemicolon_InTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <UsingTask TaskName=`Message` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` TaskFactory=`TaskHostFactory` />
 
                     <ItemGroup>
@@ -661,7 +665,7 @@ public void GlobalPropertyWithEscapedCharacters()
         {
             MockLogger logger = new MockLogger();
             Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Target Name=`Build`>
                         <Message Text=`MyGlobalProperty = '$(MyGlobalProperty)'` />
                     </Target>
@@ -690,7 +694,7 @@ public void EscapedWildcardsShouldNotBeExpanded()
                 // Populate the project directory with three physical files on disk -- a.weirdo, b.weirdo, c.weirdo.
                 EscapingInProjectsHelper.CreateThreeWeirdoFiles();
                 Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Target Name=`t`>
                         <ItemGroup>
                             <type Include=`%2A` Exclude=``/>
@@ -759,7 +763,7 @@ public void TargetNamesAlwaysUnescaped()
             try
             {
                 ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Target Name=`%24` />
                 </Project>
                 ");
@@ -783,7 +787,7 @@ public void TargetNamesAlwaysUnescaped()
         public void TargetNamesAlwaysUnescaped_Override()
         {
             Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-            <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+            <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                 <Target Name=`%3B`>
                     <Message Text=`[WRONG]` />
                 </Target>
@@ -806,7 +810,7 @@ public void TargetNamesAlwaysUnescaped_Override()
         public void SpecialCharactersInMetadataValueConstruction()
         {
             string projectString = @"
-                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"">
                     <ItemGroup>
                         <None Include='MetadataTests'>
                             <EscapedSemicolon>%3B</EscapedSemicolon>
@@ -849,7 +853,7 @@ public void SpecialCharactersInMetadataValueEvaluation()
         public void CanGetCorrectListOfItemsWithSemicolonsInThem()
         {
             string projectString = @"
-                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"">
                     <PropertyGroup>
                         <MyUserMacro>foo%3bbar</MyUserMacro>
                     </PropertyGroup>
@@ -881,7 +885,7 @@ public void CanGetCorrectListOfItemsWithSemicolonsInThem()
         public void CanGetCorrectListOfItemsWithSemicolonsInThem2()
         {
             string projectString = @"
-                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"">
                     <PropertyGroup>
                         <MyUserMacro>foo;bar</MyUserMacro>
                     </PropertyGroup>
@@ -952,7 +956,7 @@ public void SemicolonInConfiguration()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1017,7 +1021,7 @@ public void SemicolonInConfiguration_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1082,7 +1086,7 @@ public void SemicolonInAssemblyName()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1142,7 +1146,7 @@ public void SemicolonInAssemblyName_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1202,7 +1206,7 @@ public void DollarSignInAssemblyName()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1262,7 +1266,7 @@ public void DollarSignInAssemblyName_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1322,7 +1326,7 @@ public void SemicolonInSourceCodeFilename()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1382,7 +1386,7 @@ public void SemicolonInSourceCodeFilename_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1454,7 +1458,7 @@ public void SolutionWithLotsaCrazyCharacters()
                 @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\Cons.ole;!@(foo)'^(Application1.csproj",
 
                 @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1531,7 +1535,7 @@ static void Main(string[] args)
                 @"SLN;!@(foo)'^1\Class;!@(foo)'^(Library1\Class;!@(foo)'^(Library1.csproj",
 
                 @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1625,7 +1629,7 @@ public void SolutionWithLotsaCrazyCharacters_UsingTaskHost()
                     @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\Cons.ole;!@(foo)'^(Application1.csproj",
 
                     @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1702,7 +1706,7 @@ static void Main(string[] args)
                     @"SLN;!@(foo)'^1\Class;!@(foo)'^(Library1\Class;!@(foo)'^(Library1.csproj",
 
                     @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 06c13eae9c6..02d0df21845 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -368,7 +368,7 @@ public void ExpandItemVectorFunctionsChained3()
         public void ExpandItemVectorFunctionsChainedProject1()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
     <ItemGroup>
         <Compile Include=`a.cpp`>
@@ -393,7 +393,7 @@ public void ExpandItemVectorFunctionsChainedProject1()
         </Compile>
     </ItemGroup>
 
-    <Target Name=`Build`>      
+    <Target Name=`Build`>
         <Message Text=`DirChain0: @(Compile->'%(SomeMeta)'->'%(Directory)'->Distinct())`/>
         <Message Text=`DirChain1: @(Compile->'%(SomeMeta)'->'%(Directory)'->Distinct(), '%(A)')`/>
         <Message Text=`DirChain2: @(Compile->'%(SomeMeta)'->'%(Directory)'->Distinct(), '%(A)%(B)')`/>
@@ -416,8 +416,8 @@ public void ExpandItemVectorFunctionsChainedProject1()
         public void ExpandItemVectorFunctionsCount1()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -438,8 +438,8 @@ public void ExpandItemVectorFunctionsCount1()
         public void ExpandItemVectorFunctionsCount2()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -461,8 +461,8 @@ public void ExpandItemVectorFunctionsCount2()
         public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult1()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -483,8 +483,8 @@ public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult1()
         public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult2()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -506,8 +506,8 @@ public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult2()
         public void ExpandItemVectorFunctionsBuiltIn1()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -528,8 +528,8 @@ public void ExpandItemVectorFunctionsBuiltIn1()
         public void ExpandItemVectorFunctionsBuiltIn2()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -550,8 +550,8 @@ public void ExpandItemVectorFunctionsBuiltIn2()
         public void ExpandItemVectorFunctionsBuiltIn3()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar;foo;bar;foo`/>
@@ -572,8 +572,8 @@ public void ExpandItemVectorFunctionsBuiltIn3()
         public void ExpandItemVectorFunctionsBuiltIn4()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar;foo;bar;foo`/>
@@ -595,8 +595,8 @@ public void ExpandItemVectorFunctionsBuiltIn4()
         public void ExpandItemVectorFunctionsBuiltIn_PathTooLongError()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo`/>
@@ -621,8 +621,8 @@ public void ExpandItemVectorFunctionsBuiltIn_InvalidCharsError()
             }
 
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`aaa|||bbb\ccc.txt`/>
@@ -816,7 +816,7 @@ private Expander<ProjectPropertyInstance, ProjectItemInstance> CreateExpander()
         public void ZeroItemsInProjectExpandsToEmpty()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <Target Name=`Build` Condition=`'@(foo)'!=''` >
                         <Message Text=`This target should NOT run.`/>
@@ -828,7 +828,7 @@ public void ZeroItemsInProjectExpandsToEmpty()
             logger.AssertLogDoesntContain("This target should NOT run.");
 
             logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <foo Include=`abc` Condition=` '@(foo)' == '' ` />
@@ -848,7 +848,7 @@ public void ZeroItemsInProjectExpandsToEmpty()
         public void ItemIncludeContainsMultipleItemReferences()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project DefaultTarget=`ShowProps` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" >
+                <Project DefaultTarget=`ShowProps` ToolsVersion=`msbuilddefaulttoolsversion` >
                     <PropertyGroup>
                         <OutputType>Library</OutputType>
                     </PropertyGroup>
@@ -880,7 +880,7 @@ public void ItemIncludeContainsMultipleItemReferences()
         public void InvalidPathAndMetadataItemFunctionPathTooLong()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'/>
                     </ItemGroup>
@@ -902,7 +902,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong()
         public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + ":|?*" + @"'/>
                     </ItemGroup>
@@ -921,7 +921,7 @@ public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars()
         public void InvalidMetadataName()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='x'/>
                     </ItemGroup>
@@ -942,7 +942,7 @@ public void InvalidMetadataName()
         public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'/>
                     </ItemGroup>
@@ -964,7 +964,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + ":|?*" + @"'/>
                     </ItemGroup>
@@ -983,7 +983,7 @@ public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars2()
         public void InvalidMetadataName2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='x'/>
                     </ItemGroup>
@@ -1004,7 +1004,7 @@ public void InvalidMetadataName2()
         public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'/>
                     </ItemGroup>
@@ -1026,7 +1026,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + ":|?*" + @"'/>
                     </ItemGroup>
@@ -1044,7 +1044,7 @@ public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
         public void InvalidPathInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
-                @"<Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include=':|?*'>
                             <m>%(FullPath)</m>
@@ -1062,7 +1062,7 @@ public void InvalidPathInDirectMetadata()
         public void PathTooLongInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
-                @"<Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'>
                             <m>%(FullPath)</m>
@@ -1081,7 +1081,7 @@ public void PathTooLongInDirectMetadata()
         public void InvalidMetadataName3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='x'/>
                     </ItemGroup>
@@ -1100,7 +1100,7 @@ public void InvalidMetadataName3()
         public void HasMetadata()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
   <ItemGroup>
     <_Item Include=""One"">
@@ -1149,7 +1149,7 @@ public void DirectItemMetadataReferenceShouldBeCaseInsensitive()
                   <Target Name=`Build`>
                     <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>
                     <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>
-                    
+
                     <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>
                     <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>
                   </Target>
@@ -1178,7 +1178,7 @@ public void ItemDefinitionGroupMetadataReferenceShouldBeCaseInsensitive()
                   <Target Name=`Build`>
                     <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>
                     <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>
-                    
+
                     <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>
                     <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>
                   </Target>
@@ -1202,7 +1202,7 @@ public void WellKnownMetadataReferenceShouldBeCaseInsensitive()
                   <Target Name=`Build`>
                     <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.Identity)=%(Foo.FILENAME)`/>
                     <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.Identity)=%(Foo.FileName)`/>
-                    
+
                     <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.Identity)=%(FILENAME)`/>
                     <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.Identity)=%(FileName)`/>
                   </Target>
@@ -1224,7 +1224,7 @@ public void StaticMethodErrorMessageHaveMethodName()
             try
             {
                 Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <PropertyGroup>
                         <Function>$([System.IO.Path]::Combine(null,''))</Function>
                     </PropertyGroup>
@@ -1251,7 +1251,7 @@ public void StaticMethodErrorMessageHaveMethodName1()
             try
             {
                 Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <PropertyGroup>
                         <Function>$(System.IO.Path::Combine('a','b'))</Function>
                     </PropertyGroup>
@@ -1515,7 +1515,7 @@ public void ExpandAllIntoStringTruncated()
             }
             var lookup = new Lookup(projectItemGroups, pg);
             lookup.EnterScope("x");
-            lookup.PopulateWithItems("ManySpacesItem", new []
+            lookup.PopulateWithItems("ManySpacesItem", new[]
             {
                 new ProjectItemInstance (project, "ManySpacesItem", "Foo", project.FullPath),
                 new ProjectItemInstance (project, "ManySpacesItem", manySpaces, project.FullPath),
@@ -1850,7 +1850,7 @@ public void RegistryPropertyMultiString()
         public void TestItemSpecModiferEscaping()
         {
             string content = @"
- <Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+ <Project DefaultTargets=""Build"">
 
         <Target Name=""Build"">
             <WriteLinesToFile Overwrite=""true"" File=""unittest.%28msbuild%29.file"" Lines=""Nothing much here""/>
@@ -1884,7 +1884,7 @@ public void TestGetPathToReferenceAssembliesAsFunction()
             }
 
             string content = $@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
                     <PropertyGroup>
                         <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>
@@ -2638,7 +2638,7 @@ public void PropertyFunctionStaticMethodQuoted1Spaces()
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
             string result = expander.ExpandIntoStringLeaveEscaped(@"$([System.IO.Path]::Combine(`" +
-                Path.Combine(s_rootPathPrefix, "foo goo")  + "`, `$(File)`))",
+                Path.Combine(s_rootPathPrefix, "foo goo") + "`, `$(File)`))",
                 ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
 
             Assert.Equal(Path.Combine(s_rootPathPrefix, "foo goo", "foo goo", "file.txt"), result);
@@ -2854,7 +2854,7 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e
         public void StringIndexOfTests(string propertyName, string properyValue, string propertyFunction, string expectedExpansion)
         {
             var pg = new PropertyDictionary<ProjectPropertyInstance>
-                {[propertyName] = ProjectPropertyInstance.Create(propertyName, properyValue)};
+            { [propertyName] = ProjectPropertyInstance.Create(propertyName, properyValue) };
 
             var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
@@ -2916,9 +2916,9 @@ public void PropertyFunctionVersionComparisons(string a, string b, int expectedS
             var pg = new PropertyDictionary<ProjectPropertyInstance>();
             var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
-            AssertSuccess(expander, expectedSign >  0, $"$([MSBuild]::VersionGreaterThan('{a}', '{b}'))");
+            AssertSuccess(expander, expectedSign > 0, $"$([MSBuild]::VersionGreaterThan('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign >= 0, $"$([MSBuild]::VersionGreaterThanOrEquals('{a}', '{b}'))");
-            AssertSuccess(expander, expectedSign <  0, $"$([MSBuild]::VersionLessThan('{a}', '{b}'))");
+            AssertSuccess(expander, expectedSign < 0, $"$([MSBuild]::VersionLessThan('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign <= 0, $"$([MSBuild]::VersionLessThanOrEquals('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign == 0, $"$([MSBuild]::VersionEquals('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign != 0, $"$([MSBuild]::VersionNotEquals('{a}', '{b}'))");
@@ -3740,25 +3740,25 @@ public void Medley()
             "$(listofthings.Split(';')[-1])",
             "$([]::())",
                                                       @"
- 
+
 $(
- 
+
 $(
- 
+
 [System.IO]::Path.GetDirectory('c:\foo\bar\baz.txt')
- 
+
 ).Substring(
- 
+
 '$([System.IO]::Path.GetPathRoot(
- 
+
 '$([System.IO]::Path.GetDirectory('c:\foo\bar\baz.txt'))'
- 
+
 ).Length)'
- 
- 
- 
+
+
+
 )
- 
+
 ",
                 "$([Microsoft.VisualBasic.FileIO.FileSystem]::CurrentDirectory)", // not allowed
                 "$(e.Length..ToString())",
@@ -3876,7 +3876,7 @@ public void Medley()
             {
                 // If no registry or not running on windows, this gets expanded to the empty string
                 // example: xplat build running on OSX
-                validTests.Add(new string[]{"$(Registry:X)", ""});
+                validTests.Add(new string[] { "$(Registry:X)", "" });
             }
 
             string result;
diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index 1993567e97c..df80473fc4e 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -77,7 +77,7 @@ public void ImportFromExtensionsPathNotFound()
         public void ConditionalImportFromExtensionsPathNotFound()
         {
             string extnTargetsFileContentWithCondition = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FooBar</PropertyFromExtn1>
                     </PropertyGroup>
@@ -94,7 +94,8 @@ public void ConditionalImportFromExtensionsPathNotFound()
 
             CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { extnDir1, Path.Combine("tmp", "nonexistent") },
                                                             null,
-                                                            (p, l) => {
+                                                            (p, l) =>
+                                                            {
                                                                 Assert.True(p.Build());
 
                                                                 l.AssertLogContains("Running FromExtn");
@@ -106,7 +107,7 @@ public void ConditionalImportFromExtensionsPathNotFound()
         public void ImportFromExtensionsPathCircularImportError()
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -115,7 +116,7 @@ public void ImportFromExtensionsPathCircularImportError()
                 ";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn2'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -138,7 +139,7 @@ public void ImportFromExtensionsPathCircularImportError()
         public void ExtensionPathFallbackIsCaseInsensitive()
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main'>
                         <Message Text='Running Main'/>
                     </Target>
@@ -147,7 +148,7 @@ public void ExtensionPathFallbackIsCaseInsensitive()
                 </Project>";
 
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running {0}'/>
                     </Target>
@@ -175,7 +176,7 @@ public void ExtensionPathFallbackIsCaseInsensitive()
         public void ImportFromExtensionsPathWithWildCard()
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main'>
                         <Message Text='Running Main'/>
                     </Target>
@@ -184,7 +185,7 @@ public void ImportFromExtensionsPathWithWildCard()
                 </Project>";
 
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='{0}'>
                         <Message Text='Running {0}'/>
                     </Target>
@@ -218,7 +219,7 @@ public void ImportFromExtensionsPathWithWildCard()
         public void ImportFromExtensionsPathWithWildCardAndSelfImport()
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main'>
                         <Message Text='Running Main'/>
                     </Target>
@@ -227,14 +228,14 @@ public void ImportFromExtensionsPathWithWildCardAndSelfImport()
                 </Project>";
 
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='{0}'>
                         <Message Text='Running {0}'/>
                     </Target>
                 </Project>";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Import Project='$(MSBuildExtensionsPath)\circularwildcardtest\*.proj'/>
                     <Target Name='{0}'>
                         <Message Text='Running {0}'/>
@@ -271,7 +272,7 @@ public void ImportFromExtensionsPathWithWildCardAndSelfImport()
         public void ImportFromExtensionsPathWithWildCardNothingFound()
         {
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -289,7 +290,7 @@ public void ImportFromExtensionsPathWithWildCardNothingFound()
         [Fact]
         public void ImportFromExtensionsPathInvalidFile()
         {
-            string extnTargetsFileContent = @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >";
+            string extnTargetsFileContent = @"<Project>";
 
             string extnDir1 = null;
             string mainProjectPath = null;
@@ -325,7 +326,7 @@ public void ImportFromExtensionsPathInvalidFile()
         public void ImportFromExtensionsPathSearchOrder()
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromFirstFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -337,7 +338,7 @@ public void ImportFromExtensionsPathSearchOrder()
                 ";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromSecondFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -357,7 +358,8 @@ public void ImportFromExtensionsPathSearchOrder()
 
             CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { extnDir2, Path.Combine("tmp", "nonexistent"), extnDir1 },
                                                             null,
-                                                            (p, l) => {
+                                                            (p, l) =>
+                                                            {
                                                                 Assert.True(p.Build());
 
                                                                 l.AssertLogContains("Running FromExtn");
@@ -369,7 +371,7 @@ public void ImportFromExtensionsPathSearchOrder()
         public void ImportFromExtensionsPathSearchOrder2()
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromFirstFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -381,7 +383,7 @@ public void ImportFromExtensionsPathSearchOrder2()
                 ";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromSecondFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -448,7 +450,7 @@ public void ImportOrderFromExtensionsPath64()
         public void ImportFromExtensionsPathAnd32And64()
         {
             string extnTargetsFileContentTemplate = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn{0}' DependsOnTargets='{1}'>
                         <Message Text='Running FromExtn{0}'/>
                     </Target>
@@ -531,7 +533,7 @@ public void ImportFromExtensionsPathAnd32And64()
         public void ExpandExtensionsPathFallback()
         {
             string extnTargetsFileContentTemplate = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -592,7 +594,7 @@ public void ExpandExtensionsPathFallback()
         public void ExpandExtensionsPathFallbackInErrorMessage()
         {
             string extnTargetsFileContentTemplate = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -654,7 +656,7 @@ public void ExpandExtensionsPathFallbackInErrorMessage()
         public void FallbackImportWithIndirectReference()
         {
             string mainTargetsFileContent = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <PropertyGroup>
                        <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v99</VSToolsPath>
                    </PropertyGroup>
@@ -663,7 +665,7 @@ public void FallbackImportWithIndirectReference()
                </Project>";
 
             string extnTargetsFileContentTemplate = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Target Name='FromExtn'>
                        <Message Text='Running FromExtn'/>
                    </Target>
@@ -723,13 +725,13 @@ public void FallbackImportWithIndirectReference()
         public void FallbackImportWithUndefinedProperty()
         {
             string mainTargetsFileContent = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Import Project='$(UndefinedProperty)\file.props' Condition=""Exists('$(UndefinedProperty)\file.props')"" />
                    <Target Name='Main' DependsOnTargets='FromExtn' />
                </Project>";
 
             string extnTargetsFileContentTemplate = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Target Name='FromExtn'>
                        <Message Text='Running FromExtn'/>
                    </Target>
@@ -788,7 +790,7 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
         {
             // Import something from $(UndefinedProperty)
             string mainTargetsFileContent = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Import Project='$(UndefinedProperty)\filenotfound.props' />
                    <Target Name='Main' DependsOnTargets='FromExtn' />
                </Project>";
@@ -967,7 +969,7 @@ string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFile
         string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main' DependsOnTargets='FromExtn'>
                         <Message Text='PropertyFromExtn1: $(PropertyFromExtn1)'/>
                     </Target>
@@ -981,7 +983,7 @@ string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExte
         string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FooBar</PropertyFromExtn1>
                     </PropertyGroup>
@@ -999,7 +1001,7 @@ string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBu
         string GetExtensionTargetsFileContent2(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn2>Abc</PropertyFromExtn2>
                     </PropertyGroup>
diff --git a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
index f1ea97e5b0a..463d10fb622 100644
--- a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
+++ b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
@@ -525,66 +525,19 @@ public void MatchLengthStartWithUncPatternNoShare()
         }
 
         [Fact]
-        public void UncPatternEmptyString_LegacyRegex()
+        public void PatternEmptyString_LegacyRegex()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            UncPattern.IsMatch(winDirectory).ShouldBe(false);
-            UncPattern.IsMatch(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void UncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.IsUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.IsUncPattern(unixDirectory).ShouldBe(false);
+            UncPattern.IsMatch(string.Empty).ShouldBeFalse();
+            StartsWithUncPattern.IsMatch(string.Empty).ShouldBeFalse();
+            StartsWithUncPattern.Match(string.Empty).Success.ShouldBeFalse();
         }
 
         [Fact]
-        public void StartWithUncPatternEmptyString_LegacyRegex()
+        public void PatternEmptyString()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            StartsWithUncPattern.IsMatch(winDirectory).ShouldBe(false);
-            StartsWithUncPattern.IsMatch(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void StartsWithUncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.StartsWithUncPattern(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void MatchLengthStartWithUncPatternEmptyString_LegacyRegex()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            var match = StartsWithUncPattern.Match(winDirectory);
-            match.Success.ShouldBeFalse();
-
-            match = StartsWithUncPattern.Match(unixDirectory);
-            match.Success.ShouldBeFalse();
-        }
-
-        [Fact]
-        public void MatchLengthStartWithUncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(winDirectory).ShouldBe(-1);
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(unixDirectory).ShouldBe(-1);
+            FileUtilitiesRegex.IsUncPattern(string.Empty).ShouldBeFalse();
+            FileUtilitiesRegex.StartsWithUncPattern(string.Empty).ShouldBeFalse();
+            FileUtilitiesRegex.StartsWithUncPatternMatchLength(string.Empty).ShouldBe(-1);
         }
     }
 }
diff --git a/src/Build.UnitTests/FixPathOnUnix_Tests.cs b/src/Build.UnitTests/FixPathOnUnix_Tests.cs
index d9f16e556a1..01b2865b81e 100644
--- a/src/Build.UnitTests/FixPathOnUnix_Tests.cs
+++ b/src/Build.UnitTests/FixPathOnUnix_Tests.cs
@@ -9,20 +9,20 @@
 namespace Microsoft.Build.UnitTests
 {
     [PlatformSpecific(TestPlatforms.AnyUnix)]
-    public  class FixPathOnUnixTests
+    public class FixPathOnUnixTests
     {
         [Fact]
         public void TestPathFixupInMetadata()
         {
             string buildProjectContents = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Build'>
                         <MSBuild Projects='projectDirectory/main.proj' />
                     </Target>
                </Project>";
 
             string mainProjectContents = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <UsingTask TaskName='LogTaskPropertiesTask' AssemblyName='Microsoft.Build.Engine.UnitTests' />
                     <ItemGroup>
                         <Item0 Include='xyz'>
@@ -61,10 +61,10 @@ public override bool Execute()
             {
                 foreach (var item in Items)
                 {
-                    Log.LogMessage ($"Item: {item.ItemSpec}");
+                    Log.LogMessage($"Item: {item.ItemSpec}");
                     foreach (string name in item.MetadataNames)
                     {
-                        Log.LogMessage ($"ItemMetadata: {name} = {item.GetMetadata(name)}");
+                        Log.LogMessage($"ItemMetadata: {name} = {item.GetMetadata(name)}");
                     }
                 }
             }
diff --git a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
index b5d79282eae..49c9d3a4db5 100644
--- a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
@@ -44,7 +44,7 @@ public void GetTaskRegistrations()
             try
             {
                 string projectFileContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <UsingTask TaskName='t0' AssemblyFile='af0'/>
                         <UsingTask TaskName='t1' AssemblyFile='af1a'/>
                         <ItemGroup>
@@ -54,7 +54,7 @@ public void GetTaskRegistrations()
                     </Project>";
 
                 string importContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <UsingTask TaskName='t1' AssemblyName='an1' Condition=""'$(p)'=='v'""/>
                         <UsingTask TaskName='t2' AssemblyName='an2' Condition=""'@(i)'=='i0'""/>
                         <UsingTask TaskName='t3' AssemblyFile='af' Condition='false'/>
@@ -91,19 +91,19 @@ public void InitialTargetsDefaultTargets()
             try
             {
                 string projectFileContent = @"
-                    <Project DefaultTargets='d0a;d0b' InitialTargets='i0a;i0b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project DefaultTargets='d0a;d0b' InitialTargets='i0a;i0b'>
                         <Import Project='{0}'/>
                         <Import Project='{1}'/>
                     </Project>";
 
                 string import1Content = @"
-                    <Project DefaultTargets='d1a;d1b' InitialTargets='i1a;i1b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project DefaultTargets='d1a;d1b' InitialTargets='i1a;i1b'>
                         <Import Project='{0}'/>
                     </Project>";
 
-                string import2Content = @"<Project DefaultTargets='d2a;2db' InitialTargets='i2a;i2b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>";
+                string import2Content = @"<Project DefaultTargets='d2a;2db' InitialTargets='i2a;i2b'/>";
 
-                string import3Content = @"<Project DefaultTargets='d3a;d3b' InitialTargets='i3a;i3b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>";
+                string import3Content = @"<Project DefaultTargets='d3a;d3b' InitialTargets='i3a;i3b'/>";
 
                 string import2Path = ObjectModelHelpers.CreateFileInTempProjectDirectory("import2.targets", import2Content);
                 string import3Path = ObjectModelHelpers.CreateFileInTempProjectDirectory("import3.targets", import3Content);
@@ -135,7 +135,7 @@ public void InitialTargetsDefaultTargetsEscaped()
             try
             {
                 string projectFileContent = @"
-                    <Project DefaultTargets='d0a%3bd0b' InitialTargets='i0a%3bi0b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project DefaultTargets='d0a%3bd0b' InitialTargets='i0a%3bi0b'>
                     </Project>";
 
                 ProjectInstance project = new Project(ProjectRootElement.Create(XmlReader.Create(new StringReader(projectFileContent)))).CreateProjectInstance();
@@ -156,7 +156,7 @@ public void InitialTargetsDefaultTargetsEscaped()
         public void GetPropertyGroupUnderTarget()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <PropertyGroup Condition='c1'>
                                 <p1 Condition='c2'>v1</p1>
@@ -188,12 +188,12 @@ public void GetPropertyGroupUnderTarget()
         public void GetItemGroupUnderTarget()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup Condition='c1'>
                                 <i Include='i1' Exclude='e1' Condition='c2'>
-                                    <m Condition='c3'>m1</m>    
-                                    <n>n1</n>                        
+                                    <m Condition='c3'>m1</m>
+                                    <n>n1</n>
                                 </i>
                                 <j Remove='r1'/>
                                 <k>
@@ -337,8 +337,8 @@ public void GetSubToolsetVersion()
         }
 
         /// <summary>
-        /// Test ProjectInstance's surfacing of the sub-toolset version when it is overridden by a value in the 
-        /// environment 
+        /// Test ProjectInstance's surfacing of the sub-toolset version when it is overridden by a value in the
+        /// environment
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -390,8 +390,8 @@ public void GetSubToolsetVersion_FromProjectGlobalProperties()
         }
 
         /// <summary>
-        /// Verify that if a sub-toolset version is passed to the constructor, it all other heuristic methods for 
-        /// getting the sub-toolset version. 
+        /// Verify that if a sub-toolset version is passed to the constructor, it all other heuristic methods for
+        /// getting the sub-toolset version.
         /// </summary>
         [Fact]
         public void GetSubToolsetVersion_FromConstructor()
@@ -402,7 +402,7 @@ public void GetSubToolsetVersion_FromConstructor()
             {
                 Environment.SetEnvironmentVariable("VisualStudioVersion", "ABC");
 
-                string projectContent = @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                string projectContent = @"<Project>
                         <Target Name='t'>
                             <Message Text='Hello'/>
                         </Target>
@@ -532,7 +532,7 @@ public void CloneToolsVersion()
 
             Assert.Equal(first.Toolset, second.Toolset);
         }
-        
+
         /// <summary>
         /// Cloning project copies toolsversion
         /// </summary>
@@ -559,7 +559,7 @@ public void Build()
             Directory.SetCurrentDirectory(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory);
 
             string projectFileContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <UsingTask TaskName='Microsoft.Build.Tasks.Message' AssemblyFile='Microsoft.Build.Tasks.Core.dll'/>
                         <ItemGroup>
                             <i Include='i0'/>
@@ -683,7 +683,7 @@ public void ProjectInstanceCanSerializeEntireStateViaTranslator(string projectCo
 
             original.TranslateEntireState = true;
 
-            ((ITranslatable) original).Translate(TranslationHelpers.GetWriteTranslator());
+            ((ITranslatable)original).Translate(TranslationHelpers.GetWriteTranslator());
             var copy = ProjectInstance.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
             Assert.Equal(original, copy, new ProjectInstanceComparer());
@@ -892,7 +892,7 @@ private static ProjectInstance GetProjectInstance(string content, HostServices h
 
             if (globalProperties == null)
             {
-                // choose some interesting defaults if we weren't explicitly asked to use a set. 
+                // choose some interesting defaults if we weren't explicitly asked to use a set.
                 globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 globalProperties.Add("g1", "v1");
                 globalProperties.Add("g2", "v2");
@@ -928,7 +928,7 @@ private static ProjectInstance GetSampleProjectInstance(HostServices hostService
         {
             string toolsVersionSubstring = toolsVersion != null ? "ToolsVersion=\"" + toolsVersion + "\" " : String.Empty;
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' InitialTargets='it' DefaultTargets='dt' " + toolsVersionSubstring + @">
+                    <Project InitialTargets='it' DefaultTargets='dt' " + toolsVersionSubstring + @">
                         <PropertyGroup>
                             <p1>v1</p1>
                             <p2>v2</p2>
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index eec9427c02a..ed4766f5450 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -480,7 +480,7 @@ public void ProjectCacheByBuildParametersAndGraphBuildWorks(GraphCacheResponse t
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
-            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, graphResult.ResultsByNode);
+            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, graphResult.ResultsByNode, targets: "Build");
         }
 
         [Theory]
@@ -518,7 +518,7 @@ public void ProjectCacheByBuildParametersAndBottomUpBuildWorks(GraphCacheRespons
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
-            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, nodesToBuildResults);
+            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, nodesToBuildResults, targets: null);
         }
 
         [Theory]
@@ -537,7 +537,7 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
 
             graph.ShouldNotBeNull();
 
-            AssertCacheBuild(graph!, testData, null, logger, nodesToBuildResults);
+            AssertCacheBuild(graph!, testData, null, logger, nodesToBuildResults, targets: null);
         }
 
         [Fact]
@@ -659,7 +659,6 @@ public void ProjectCacheByVsWorkaroundShouldNotSupportSolutionOnlyDependencies()
                 if (assertBuildResults)
                 {
                     logger.FullLog.ShouldContain("Visual Studio Workaround based");
-                    logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
 
                     foreach (var node in graph.ProjectNodes)
                     {
@@ -843,7 +842,8 @@ private void AssertCacheBuild(
             GraphCacheResponse testData,
             InstanceMockCache? instanceMockCache,
             MockLogger mockLogger,
-            IReadOnlyDictionary<ProjectGraphNode, BuildResult> projectPathToBuildResults)
+            IReadOnlyDictionary<ProjectGraphNode, BuildResult> projectPathToBuildResults,
+            string? targets)
         {
             if (instanceMockCache != null)
             {
@@ -866,7 +866,14 @@ private void AssertCacheBuild(
             {
                 var expectedCacheResponse = testData.GetExpectedCacheResultForNode(node);
 
-                mockLogger.FullLog.ShouldContain($"====== Querying project cache for project {node.ProjectInstance.FullPath}");
+                if (string.IsNullOrEmpty(targets))
+                {
+                    mockLogger.FullLog.ShouldContain(string.Format(ResourceUtilities.GetResourceString("ProjectCacheQueryStartedWithDefaultTargets"), node.ProjectInstance.FullPath));
+                }
+                else
+                {
+                    mockLogger.FullLog.ShouldContain(string.Format(ResourceUtilities.GetResourceString("ProjectCacheQueryStartedWithTargetNames"), node.ProjectInstance.FullPath, targets));
+                }
 
                 if (instanceMockCache != null)
                 {
@@ -1009,7 +1016,7 @@ public void CacheViaBuildParametersCanDiscoverAndLoadPluginFromAssembly()
 
             buildSession.Logger.FullLog.ShouldContain("Explicit entry-point based");
 
-            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode);
+            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode, targets: "Build");
         }
 
         [Fact]
@@ -1032,7 +1039,7 @@ public void GraphBuildCanDiscoverAndLoadPluginFromAssembly()
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
-            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode);
+            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode, targets: "Build");
         }
 
         [Fact]
@@ -1567,7 +1574,6 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
                 StringShouldContainSubstring(buildSession.Logger.FullLog, $"{AssemblyMockCache}: GetCacheResultAsync for", graph.ProjectNodes.Count);
 
                 buildSession.Logger.FullLog.ShouldContain("Visual Studio Workaround based");
-                buildSession.Logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
             }
             finally
             {
diff --git a/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs b/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
index a61a639da06..7a3b0875d84 100644
--- a/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
+++ b/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.UnitTests
 {
     // Although this tests the ProfilerResult API from Microsoft.Build.Framework, it uses the
     //  construction APIs in Microsoft.Build in the test, so this test is in the Microsoft.Build tests
-    public class ProjectEvaluationFinishedEventArgs_Tests 
+    public class ProjectEvaluationFinishedEventArgs_Tests
     {
         /// <summary>
         /// Roundtrip serialization tests for <see cref="ProfilerResult"/>
@@ -52,7 +52,7 @@ public static IEnumerable<object[]> GetProfilerResults()
 
             var element = new ProjectRootElement(
                 XmlReader.Create(new MemoryStream(Encoding.UTF8.GetBytes(
-                    "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"/>"))),
+                    "<Project />"))),
                 new ProjectRootElementCache(false), false, false);
 
             yield return new object[] { new ProfilerResult(new Dictionary<EvaluationLocation, ProfiledLocation>
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 5773d754834..272f0df9705 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -30,7 +30,6 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
-using Microsoft.Build.Utilities;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 2c286b34b93..3bb58aa36ab 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -14,7 +14,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
-using Microsoft.Build.Utilities;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs
index 6186d6c4dac..fe81fa4298d 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs
@@ -3,11 +3,13 @@
 
 using System;
 using System.Collections.Concurrent;
+#if !FEATURE_THREAD_CULTURE
+using System.Globalization;
+#endif
 using System.Threading;
 using Microsoft.Build.Shared;
 
 using BuildParameters = Microsoft.Build.Execution.BuildParameters;
-using System.Globalization;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 33f623a2965..fd9becd085c 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1407,13 +1407,13 @@ private void RouteBuildEvent(object loggingEvent)
         {
             BuildEventArgs buildEventArgs = null;
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs bea)
             {
-                buildEventArgs = (BuildEventArgs)loggingEvent;
+                buildEventArgs = bea;
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> kvp)
             {
-                buildEventArgs = ((KeyValuePair<int, BuildEventArgs>)loggingEvent).Value;
+                buildEventArgs = kvp.Value;
             }
             else
             {
@@ -1475,13 +1475,13 @@ private void RouteBuildEvent(object loggingEvent)
                 _warningsAsMessagesByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
             }
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs loggingEventBuildArgs)
             {
-                RouteBuildEvent((BuildEventArgs)loggingEvent);
+                RouteBuildEvent(loggingEventBuildArgs);
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> loggingEventKeyValuePair)
             {
-                RouteBuildEvent((KeyValuePair<int, BuildEventArgs>)loggingEvent);
+                RouteBuildEvent(loggingEventKeyValuePair);
             }
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index ad150da3b52..e1906fde381 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 3db0eeb4a3a..3fdbf100f25 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Linq;
 using System.Reflection;
 using System.Threading;
@@ -12,6 +11,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Execution;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
@@ -45,6 +45,7 @@ internal class ProjectCacheService
         private readonly ProjectCacheDescriptor _projectCacheDescriptor;
         private readonly CancellationToken _cancellationToken;
         private readonly ProjectCachePluginBase _projectCachePlugin;
+        private readonly string _projectCachePluginTypeName;
         private ProjectCacheServiceState _serviceState = ProjectCacheServiceState.NotInitialized;
 
         /// <summary>
@@ -62,6 +63,7 @@ private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase { }
 
         private ProjectCacheService(
             ProjectCachePluginBase projectCachePlugin,
+            string pluginTypeName,
             BuildManager buildManager,
             ILoggingService loggingService,
             ProjectCacheDescriptor projectCacheDescriptor,
@@ -69,6 +71,7 @@ CancellationToken cancellationToken
         )
         {
             _projectCachePlugin = projectCachePlugin;
+            _projectCachePluginTypeName = pluginTypeName;
             _buildManager = buildManager;
             _loggingService = loggingService;
             _projectCacheDescriptor = projectCacheDescriptor;
@@ -81,10 +84,10 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
             ILoggingService loggingService,
             CancellationToken cancellationToken)
         {
-            var plugin = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
+            (ProjectCachePluginBase plugin, string pluginTypeName) = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
                 .ConfigureAwait(false);
 
-            var service = new ProjectCacheService(plugin, buildManager, loggingService, pluginDescriptor, cancellationToken);
+            var service = new ProjectCacheService(plugin, pluginTypeName, buildManager, loggingService, pluginDescriptor, cancellationToken);
 
             // TODO: remove the if after we change VS to set the cache descriptor via build parameters and always call BeginBuildAsync in FromDescriptorAsync.
             // When running under VS we can't initialize the plugin until we evaluate a project (any project) and extract
@@ -100,63 +103,63 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.
         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)
         {
-            var logger = new LoggingServiceToPluginLoggerAdapter(
+            BuildEventContext buildEventContext = BuildEventContext.Invalid;
+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;
+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
-                BuildEventContext.Invalid,
-                BuildEventFileInfo.Empty);
+                buildEventContext,
+                buildEventFileInfo);
+            ProjectCacheDescriptor projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;
 
             try
             {
                 SetState(ProjectCacheServiceState.BeginBuildStarted);
+                _loggingService.LogComment(buildEventContext, MessageImportance.Low, "ProjectCacheBeginBuild");
+                MSBuildEventSource.Log.ProjectCacheBeginBuildStart(_projectCachePluginTypeName);
 
-                logger.LogMessage("Initializing project cache plugin", MessageImportance.Low);
-                var timer = Stopwatch.StartNew();
-
-                if (_projectCacheDescriptor.VsWorkaround)
-                {
-                    logger.LogMessage("Running project cache with Visual Studio workaround");
-                }
-
-                var projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;
                 await _projectCachePlugin.BeginBuildAsync(
                     new CacheContext(
                         projectDescriptor.PluginSettings,
                         new DefaultMSBuildFileSystem(),
                         projectDescriptor.ProjectGraph,
                         projectDescriptor.EntryPoints),
-                    logger,
+                    pluginLogger,
                     _cancellationToken);
-
-                timer.Stop();
-                logger.LogMessage($"Finished initializing project cache plugin in {timer.Elapsed.TotalMilliseconds} ms", MessageImportance.Low);
-
-                SetState(ProjectCacheServiceState.BeginBuildFinished);
             }
             catch (Exception e)
             {
                 HandlePluginException(e, nameof(ProjectCachePluginBase.BeginBuildAsync));
             }
+            finally
+            {
+                MSBuildEventSource.Log.ProjectCacheBeginBuildStop(_projectCachePluginTypeName);
+                SetState(ProjectCacheServiceState.BeginBuildFinished);
+            }
 
-            if (logger.HasLoggedErrors)
+            if (pluginLogger.HasLoggedErrors)
             {
                 ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheInitializationFailed");
             }
         }
 
-        private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
+        private static (ProjectCachePluginBase PluginInstance, string PluginTypeName) GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
         {
             if (pluginDescriptor.PluginInstance != null)
             {
-                return pluginDescriptor.PluginInstance;
+                return (pluginDescriptor.PluginInstance, pluginDescriptor.PluginInstance.GetType().Name);
             }
+
             if (pluginDescriptor.PluginAssemblyPath != null)
             {
-                return GetPluginInstanceFromType(GetTypeFromAssemblyPath(pluginDescriptor.PluginAssemblyPath));
+                MSBuildEventSource.Log.ProjectCacheCreatePluginInstanceStart(pluginDescriptor.PluginAssemblyPath);
+                Type pluginType = GetTypeFromAssemblyPath(pluginDescriptor.PluginAssemblyPath);
+                ProjectCachePluginBase pluginInstance = GetPluginInstanceFromType(pluginType);
+                MSBuildEventSource.Log.ProjectCacheCreatePluginInstanceStop(pluginDescriptor.PluginAssemblyPath, pluginType.Name);
+                return (pluginInstance, pluginType.Name);
             }
 
             ErrorUtilities.ThrowInternalErrorUnreachable();
-
-            return null!;
+            return (null!, null!); // Unreachable
         }
 
         private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
@@ -168,9 +171,8 @@ private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
             catch (TargetInvocationException e) when (e.InnerException != null)
             {
                 HandlePluginException(e.InnerException, "Constructor");
+                return null!; // Unreachable
             }
-
-            return null!;
         }
 
         private static Type GetTypeFromAssemblyPath(string pluginAssemblyPath)
@@ -297,7 +299,7 @@ LateInitializationForVSWorkaroundCompleted is null ||
                 CacheResult cacheResult;
                 try
                 {
-                    cacheResult = await GetCacheResultAsync(buildRequest, buildEventContext);
+                    cacheResult = await GetCacheResultAsync(buildRequest, cacheRequest.Configuration, buildEventContext);
                 }
                 catch (Exception ex)
                 {
@@ -464,7 +466,7 @@ static bool MSBuildStringIsTrue(string msbuildString) =>
                 ConversionUtilities.ConvertStringToBool(msbuildString, nullOrWhitespaceIsFalse: true);
         }
 
-        private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest, BuildEventContext buildEventContext)
+        private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest, BuildRequestConfiguration buildRequestConfiguration, BuildEventContext buildEventContext)
         {
             lock (this)
             {
@@ -479,62 +481,104 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
 
             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));
 
-            var queryDescription = $"{buildRequest.ProjectFullPath}" +
-                                   $"\n\tTargets:[{string.Join(", ", buildRequest.TargetNames)}]" +
-                                   $"\n\tGlobal Properties: {{{string.Join(",", buildRequest.GlobalProperties.Select(kvp => $"{kvp.Name}={kvp.EvaluatedValue}"))}}}";
-
             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);
-            var logger = new LoggingServiceToPluginLoggerAdapter(
+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
                 buildEventContext,
                 buildEventFileInfo);
 
-            logger.LogMessage(
-                "\n====== Querying project cache for project " + queryDescription,
-                MessageImportance.High);
+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0
+                ? string.Join(", ", buildRequest.TargetNames)
+                : null;
+            if (string.IsNullOrEmpty(targetNames))
+            {
+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheQueryStartedWithDefaultTargets", buildRequest.ProjectFullPath);
+            }
+            else
+            {
+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheQueryStartedWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+            }
 
-            CacheResult cacheResult = null!;
+            CacheResult? cacheResult = null;
             try
             {
-                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);
+                MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames);
+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, pluginLogger, _cancellationToken);
             }
             catch (Exception e)
             {
                 HandlePluginException(e, nameof(ProjectCachePluginBase.GetCacheResultAsync));
+                return null!; // Unreachable
             }
-
-            if (logger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)
+            finally
             {
-                ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheQueryFailed", queryDescription);
+                if (MSBuildEventSource.Log.IsEnabled())
+                {
+                    string cacheResultType = cacheResult?.ResultType.ToString() ?? nameof(CacheResultType.None);
+                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStop(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames, cacheResultType);
+                }
             }
 
-            var message = $"------  Plugin result: {cacheResult.ResultType}.";
+            if (pluginLogger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)
+            {
+                ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheQueryFailed", buildRequest.ProjectFullPath);
+            }
 
             switch (cacheResult.ResultType)
             {
                 case CacheResultType.CacheHit:
-                    message += " Skipping project.";
+                    if (string.IsNullOrEmpty(targetNames))
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheHitWithDefaultTargets", buildRequest.ProjectFullPath);
+                    }
+                    else
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheHitWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+                    }
+
+                    // Similar to CopyFilesToOutputDirectory from Microsoft.Common.CurrentVersion.targets, so that progress can be seen.
+                    // TODO: This should be indented by the console logger. That requires making these log events structured.
+                    if (!buildRequestConfiguration.IsTraversal)
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.High, "ProjectCacheHitWithOutputs", buildRequest.ProjectInstance.GetPropertyValue(ReservedPropertyNames.projectName));
+                    }
+
                     break;
                 case CacheResultType.CacheMiss:
-                case CacheResultType.CacheNotApplicable:
-                    message += " Building project.";
+                    if (string.IsNullOrEmpty(targetNames))
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheMissWithDefaultTargets", buildRequest.ProjectFullPath);
+                    }
+                    else
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheMissWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+                    }
+
                     break;
-                case CacheResultType.None:
+                case CacheResultType.CacheNotApplicable:
+                    if (string.IsNullOrEmpty(targetNames))
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheNotApplicableWithDefaultTargets", buildRequest.ProjectFullPath);
+                    }
+                    else
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheNotApplicableWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+                    }
+
                     break;
+                case CacheResultType.None: // Should not get here based on the throw above
                 default:
                     throw new ArgumentOutOfRangeException();
             }
 
-            logger.LogMessage(
-                message,
-                MessageImportance.High);
-
             return cacheResult;
         }
 
         public async Task ShutDown()
         {
-            var logger = new LoggingServiceToPluginLoggerAdapter(
+            BuildEventContext buildEventContext = BuildEventContext.Invalid;
+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;
+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
                 BuildEventContext.Invalid,
                 BuildEventFileInfo.Empty);
@@ -542,16 +586,12 @@ public async Task ShutDown()
             try
             {
                 SetState(ProjectCacheServiceState.ShutdownStarted);
+                _loggingService.LogComment(buildEventContext, MessageImportance.Low, "ProjectCacheEndBuild");
+                MSBuildEventSource.Log.ProjectCacheEndBuildStart(_projectCachePluginTypeName);
 
-                logger.LogMessage("Shutting down project cache plugin", MessageImportance.Low);
-                var timer = Stopwatch.StartNew();
+                await _projectCachePlugin.EndBuildAsync(pluginLogger, _cancellationToken);
 
-                await _projectCachePlugin.EndBuildAsync(logger, _cancellationToken);
-
-                timer.Stop();
-                logger.LogMessage($"Finished shutting down project cache plugin in {timer.Elapsed.TotalMilliseconds} ms", MessageImportance.Low);
-
-                if (logger.HasLoggedErrors)
+                if (pluginLogger.HasLoggedErrors)
                 {
                     ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheShutdownFailed");
                 }
@@ -562,6 +602,7 @@ public async Task ShutDown()
             }
             finally
             {
+                MSBuildEventSource.Log.ProjectCacheEndBuildStop(_projectCachePluginTypeName);
                 SetState(ProjectCacheServiceState.ShutdownFinished);
             }
         }
@@ -657,9 +698,9 @@ public override void LogWarning(string warning)
             {
                 _loggingService.LogWarningFromText(
                     _buildEventContext,
-                    null,
-                    null,
-                    null,
+                    subcategoryResourceName: null,
+                    warningCode: null,
+                    helpKeyword: null,
                     _buildEventFileInfo,
                     warning);
             }
@@ -670,10 +711,10 @@ public override void LogError(string error)
 
                 _loggingService.LogErrorFromText(
                     _buildEventContext,
-                    null,
-                    null,
-                    null,
-                    BuildEventFileInfo.Empty,
+                    subcategoryResourceName: null,
+                    errorCode: null,
+                    helpKeyword: null,
+                    _buildEventFileInfo,
                     error);
             }
         }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index 76f4522e9ce..c1679d38212 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -5,12 +5,13 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Globalization;
+#if FEATURE_APPDOMAIN
 using System.Runtime.Remoting;
+#endif
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 67a453d77ca..b5c40b3cc79 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -3,10 +3,14 @@
 
 using System;
 using System.Collections.Generic;
+#if FEATURE_APARTMENT_STATE
 using System.Diagnostics.CodeAnalysis;
+#endif
 using System.Linq;
 using System.Reflection;
+#if FEATURE_APARTMENT_STATE
 using System.Runtime.ExceptionServices;
+#endif
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Collections;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index dcff489cd06..fc7de19ac50 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -22,7 +22,6 @@
 using Microsoft.Build.BackEnd.Components.Caching;
 using System.Reflection;
 using Microsoft.Build.Eventing;
-using Microsoft.Build.Utilities;
 
 #nullable disable
 
@@ -705,7 +704,7 @@ private ICollection<string> WarningsAsErrors
             get
             {
                 // Test compatibility
-                if(_taskLoggingContext == null)
+                if (_taskLoggingContext == null)
                 {
                     return null;
                 }
diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
index 4ec872e6718..87666f95341 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
@@ -38,12 +38,10 @@ public override void ClearCaches()
 
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            SdkResult result;
-
-            bool wasResultCached = true;
-
             MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
 
+            SdkResult result;
+
             if (Traits.Instance.EscapeHatches.DisableSdkResolutionCache)
             {
                 result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
@@ -61,12 +59,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                  */
                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(
                     sdk.Name,
-                    key => new Lazy<SdkResult>(() =>
-                    {
-                        wasResultCached = false;
-
-                        return base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-                    }));
+                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));
 
                 // Get the lazy value which will block all waiting threads until the SDK is resolved at least once while subsequent calls get cached results.
                 result = resultLazy.Value;
@@ -80,7 +73,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, result.Version, result.ElementLocation, sdk.Version);
             }
 
-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success, wasResultCached);
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);
 
             return result;
         }
diff --git a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
index 9db962d2a21..1a449cf0c44 100644
--- a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
@@ -4,7 +4,6 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
@@ -29,7 +28,7 @@ internal sealed class OutOfProcNodeSdkResolverService : HostedSdkResolverService
         /// <summary>
         /// The cache of responses which is cleared between builds.
         /// </summary>
-        private readonly ConcurrentDictionary<string, Lazy<SdkResult>> _responseCache = new ConcurrentDictionary<string, Lazy<SdkResult>>(MSBuildNameIgnoreCaseComparer.Default);
+        private readonly ConcurrentDictionary<string, SdkResult> _responseCache = new ConcurrentDictionary<string, SdkResult>(MSBuildNameIgnoreCaseComparer.Default);
 
         /// <summary>
         /// An event to signal when a response has been received.
@@ -66,21 +65,14 @@ public override void PacketReceived(int node, INodePacket packet)
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            bool wasResultCached = true;
-
-            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);
-
             // Get a cached response if possible, otherwise send the request
-            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(
+            var sdkResult = _responseCache.GetOrAdd(
                 sdk.Name,
-                key => new Lazy<SdkResult>(() =>
+                key =>
                 {
-                    wasResultCached = false;
-
-                    return RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-                }));
-
-            SdkResult sdkResult = sdkResultLazy.Value;
+                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+                    return result;
+                });
 
             if (sdkResult.Version != null && !SdkResolverService.IsReferenceSameVersion(sdk, sdkResult.Version))
             {
@@ -88,8 +80,6 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, sdkResult.Version, sdkResult.ElementLocation, sdk.Version);
             }
 
-            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(submissionId, sdk.Name, solutionPath, projectPath, _lastResponse.Success, wasResultCached);
-
             return sdkResult;
         }
 
diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index cada0e2fcdf..52f8dfc21db 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -1,7 +1,9 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if FEATURE_APPDOMAIN
 using System;
+#endif
 using System.Diagnostics;
 
 using Microsoft.Build.Execution;
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 449303c894d..2eb464830ff 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.Collections.Concurrent;
-using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Globalization;
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index fd733207795..bd3661c89d2 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -20,7 +20,6 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Task = System.Threading.Tasks.Task;
diff --git a/src/Build/Collections/ItemDictionary.cs b/src/Build/Collections/ItemDictionary.cs
index 4f637100890..6f4bd864bda 100644
--- a/src/Build/Collections/ItemDictionary.cs
+++ b/src/Build/Collections/ItemDictionary.cs
@@ -385,7 +385,7 @@ internal bool HasEmptyMarker(string itemType)
         /// All items of a type are returned consecutively in their correct order.
         /// However the order in which item types are returned is not defined.
         /// </summary>
-        private sealed class Enumerator : IEnumerator<T>, IDisposable
+        private sealed class Enumerator : IEnumerator<T>
         {
             /// <summary>
             /// Enumerator over lists
@@ -407,14 +407,6 @@ internal Enumerator(IEnumerable<ICollection<T>> listEnumerable)
                 _itemEnumerator = GetNextItemEnumerator();
             }
 
-            /// <summary>
-            /// Finalizes an instance of the <see cref="Enumerator"/> class.
-            /// </summary>
-            ~Enumerator()
-            {
-                Dispose(false);
-            }
-
             /// <summary>
             /// Get the current item
             /// </summary>
@@ -466,28 +458,16 @@ public void Reset()
             /// </summary>
             public void Dispose()
             {
-                Dispose(true);
-                GC.SuppressFinalize(this);
-            }
-
-            /// <summary>
-            /// The real disposer.
-            /// </summary>
-            private void Dispose(bool disposing)
-            {
-                if (disposing)
+                if (_listEnumerator != null)
                 {
-                    if (_listEnumerator != null)
+                    if (_itemEnumerator != null)
                     {
-                        if (_itemEnumerator != null)
-                        {
-                            _itemEnumerator.Dispose();
-                            _itemEnumerator = null;
-                        }
-
-                        _listEnumerator.Dispose();
-                        _listEnumerator = null;
+                        _itemEnumerator.Dispose();
+                        _itemEnumerator = null;
                     }
+
+                    _listEnumerator.Dispose();
+                    _listEnumerator = null;
                 }
             }
 
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index 7c3efec3bac..50349f0f2e8 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -93,8 +93,10 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
     {
         // store lower 31 bits of hash code
         private const int Lower31BitMask = 0x7FFFFFFF;
+#if NEVER
         // cutoff point, above which we won't do stackallocs. This corresponds to 100 integers.
         private const int StackAllocThreshold = 100;
+#endif
         // when constructing a hashset from an existing collection, it may contain duplicates, 
         // so this is used as the max acceptable excess ratio of capacity to count. Note that
         // this is only used on the ctor and not to automatically shrink if the hashset has, e.g,
@@ -121,7 +123,7 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
         // temporary variable needed during deserialization
         private SerializationInfo _siInfo;
 
-        #region Constructors
+#region Constructors
 
         public RetrievableEntryHashSet(IEqualityComparer<string> comparer)
         {
@@ -204,7 +206,7 @@ protected RetrievableEntryHashSet(SerializationInfo info, StreamingContext conte
             _siInfo = info;
         }
 
-        #endregion
+#endregion
 
         // Convenience to minimise change to callers used to dictionaries
         public ICollection<string> Keys
@@ -230,7 +232,7 @@ public ICollection<T> Values
             get { return this; }
         }
 
-        #region ICollection<T> methods
+#region ICollection<T> methods
 
         // Convenience to minimise change to callers used to dictionaries
         internal T this[string name]
@@ -481,9 +483,9 @@ internal void MakeReadOnly()
             _readOnly = true;
         }
 
-        #endregion
+#endregion
 
-        #region IEnumerable methods
+#region IEnumerable methods
 
         public Enumerator GetEnumerator()
         {
@@ -508,9 +510,9 @@ IEnumerator IEnumerable.GetEnumerator()
             return new Enumerator(this);
         }
 
-        #endregion
+#endregion
 
-        #region ISerializable methods
+#region ISerializable methods
 
         // [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
         [SecurityCritical]
@@ -533,9 +535,9 @@ public virtual void GetObjectData(SerializationInfo info, StreamingContext conte
             }
         }
 
-        #endregion
+#endregion
 
-        #region IDeserializationCallback methods
+#region IDeserializationCallback methods
 
         public virtual void OnDeserialization(Object sender)
         {
@@ -580,9 +582,9 @@ public virtual void OnDeserialization(Object sender)
             _siInfo = null;
         }
 
-        #endregion
+#endregion
 
-        #region HashSet methods
+#region HashSet methods
 
         /// <summary>
         /// Add item to this HashSet. 
@@ -630,7 +632,7 @@ public void UnionWith(IEnumerable<T> other)
             }
         }
 
-#if NEVER 
+#if NEVER
                                                                                                                                                         /// <summary>
                                                                                                                                                         /// Takes the intersection of this set with other. Modifies this set.
                                                                                                                                                         /// 
@@ -1152,9 +1154,9 @@ public static IEqualityComparer<RetrievableEntryHashSet<T>> CreateSetComparer()
 #endif
 #endif
 
-        #endregion
+#endregion
 
-        #region Helper methods
+#region Helper methods
 
         /// <summary>
         /// Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
@@ -1723,7 +1725,7 @@ private int InternalGetHashCode(string item)
             return _comparer.GetHashCode(item) & Lower31BitMask;
         }
 
-        #endregion
+#endregion
 
         // used for set checking operations (using enumerables) that rely on counting
         internal struct ElementCount
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 7d183e2c759..3463e872980 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Build.Construction
     [DebuggerDisplay("{FullPath} #Children={Count} DefaultTargets={DefaultTargets} ToolsVersion={ToolsVersion} InitialTargets={InitialTargets} ExplicitlyLoaded={IsExplicitlyLoaded}")]
     public class ProjectRootElement : ProjectElementContainer
     {
-        /// Constants for default (empty) project file.
+        // Constants for default (empty) project file.
         private const string EmptyProjectFileContent = "{0}<Project{1}{2}>\r\n</Project>";
         private const string EmptyProjectFileXmlDeclaration = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n";
         private const string EmptyProjectFileToolsVersion = " ToolsVersion=\"" + MSBuildConstants.CurrentToolsVersion + "\"";
diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index db4be0d5179..46581a81688 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -150,7 +150,11 @@ internal ProjectInSolution(SolutionFile solution)
         /// </summary>
         public string RelativePath
         {
-            get { return _relativePath; }
+            get
+            {
+                return _relativePath;
+            }
+
             internal set
             {
 #if NETFRAMEWORK && !MONO
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 571674b1ef9..f29666fd7a3 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -2,7 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+#if FEATURE_ASPNET_COMPILER
 using System.Collections;
+#endif
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Collections.ObjectModel;
@@ -24,9 +26,10 @@
 using Constants = Microsoft.Build.Internal.Constants;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 
+#if FEATURE_ASPNET_COMPILER
 using FrameworkName = System.Runtime.Versioning.FrameworkName;
+#endif
 using Microsoft.Build.Execution;
-using Microsoft.Build.Utilities;
 
 using Microsoft.NET.StringTools;
 
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index c54e892a0e6..661397bad26 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -27,8 +27,6 @@
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.ObjectModelRemoting;
-using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 using EvaluationItemSpec = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
 using EvaluationItemExpressionFragment = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>.ItemExpressionFragment;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index a7462d1b226..aad621450df 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -19,7 +19,6 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Utilities;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 592a8a078a1..6dd0d58102c 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -184,8 +184,14 @@ public string UnevaluatedInclude
         {
             [DebuggerStepThrough]
             get
-            { return _xml.Include; }
-            set { Rename(value); }
+            {
+                return _xml.Include;
+            }
+
+            set
+            {
+                Rename(value);
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index 436fa27c97f..acdf7f6caf4 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -17,7 +17,9 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+#if FEATURE_WIN32_REGISTRY
 using Microsoft.Win32;
+#endif
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using ObjectModel = System.Collections.ObjectModel;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 9156fbf5056..19f4c800414 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -25,7 +25,6 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index cb8f2f24220..88d911a7b4a 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -19,8 +19,9 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
+#if FEATURE_WIN32_REGISTRY
 using Microsoft.Win32;
+#endif
 using AvailableStaticMethods = Microsoft.Build.Internal.AvailableStaticMethods;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
@@ -3384,9 +3385,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                         // The object that we're about to call methods on may have escaped characters
                         // in it, we want to operate on the unescaped string in the function, just as we
                         // want to pass arguments that are unescaped (see below)
-                        if (objectInstance is string)
+                        if (objectInstance is string objectInstanceString)
                         {
-                            objectInstance = EscapingUtilities.UnescapeAll((string)objectInstance);
+                            objectInstance = EscapingUtilities.UnescapeAll(objectInstanceString);
                         }
                     }
 
@@ -3510,9 +3511,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                     // If the result of the function call is a string, then we need to escape the result
                     // so that we maintain the "engine contains escaped data" state.
                     // The exception is that the user is explicitly calling MSBuild::Unescape or MSBuild::Escape
-                    if (functionResult is string && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
+                    if (functionResult is string functionResultString && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
                     {
-                        functionResult = EscapingUtilities.Escape((string)functionResult);
+                        functionResult = EscapingUtilities.Escape(functionResultString);
                     }
 
                     // We have nothing left to parse, so we'll return what we have
@@ -3762,9 +3763,8 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                     }
                 }
-                else if (objectInstance is string[])
+                else if (objectInstance is string[] stringArray)
                 {
-                    string[] stringArray = (string[])objectInstance;
                     if (string.Equals(_methodMethodName, "GetValue", StringComparison.OrdinalIgnoreCase))
                     {
                         if (TryGetArg(args, out int index))
diff --git a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
index 5df914d50e8..9459e49067d 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
@@ -52,7 +52,11 @@ internal Builder(ImmutableList<ItemData>.Builder listBuilder)
 
                 public ItemData this[int index]
                 {
-                    get { return _listBuilder[index]; }
+                    get
+                    {
+                        return _listBuilder[index];
+                    }
+
                     set
                     {
                         // Update the dictionary if it exists.
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 3777ecbec35..94978503a36 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -966,8 +966,14 @@ TaskRegistry IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, Projec
         {
             [DebuggerStepThrough]
             get
-            { return TaskRegistry; }
-            set { TaskRegistry = value; }
+            {
+                return TaskRegistry;
+            }
+
+            set
+            {
+                TaskRegistry = value;
+            }
         }
 
         /// <summary>
@@ -1074,8 +1080,14 @@ List<string> IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, Projec
         {
             [DebuggerStepThrough]
             get
-            { return InitialTargets; }
-            set { InitialTargets = value; }
+            {
+                return InitialTargets;
+            }
+
+            set
+            {
+                InitialTargets = value;
+            }
         }
 
         /// <summary>
@@ -1086,8 +1098,14 @@ List<string> IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, Projec
         {
             [DebuggerStepThrough]
             get
-            { return DefaultTargets; }
-            set { DefaultTargets = value; }
+            {
+                return DefaultTargets;
+            }
+
+            set
+            {
+                DefaultTargets = value;
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Instance/ProjectTargetInstance.cs b/src/Build/Instance/ProjectTargetInstance.cs
index d485da28e85..a10cb8456fb 100644
--- a/src/Build/Instance/ProjectTargetInstance.cs
+++ b/src/Build/Instance/ProjectTargetInstance.cs
@@ -493,14 +493,12 @@ internal ProjectTargetElement ToProjectTargetElement(ProjectRootElement rootElem
 
                 foreach (ProjectTaskInstanceChild outputInstance in taskInstance.Outputs)
                 {
-                    if (outputInstance is ProjectTaskOutputItemInstance)
+                    if (outputInstance is ProjectTaskOutputItemInstance outputItemInstance)
                     {
-                        ProjectTaskOutputItemInstance outputItemInstance = outputInstance as ProjectTaskOutputItemInstance;
                         taskElement.AddOutputItem(outputItemInstance.TaskParameter, outputItemInstance.ItemType, outputItemInstance.Condition);
                     }
-                    else if (outputInstance is ProjectTaskOutputPropertyInstance)
+                    else if (outputInstance is ProjectTaskOutputPropertyInstance outputPropertyInstance)
                     {
-                        ProjectTaskOutputPropertyInstance outputPropertyInstance = outputInstance as ProjectTaskOutputPropertyInstance;
                         taskElement.AddOutputItem(outputPropertyInstance.TaskParameter, outputPropertyInstance.PropertyName, outputPropertyInstance.Condition);
                     }
                 }
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 97d721d4352..37433613a00 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -4,7 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Reflection;
+#if FEATURE_APPDOMAIN
 using System.Threading.Tasks;
+#endif
 
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index ce29ccbed30..4132f75aa57 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -203,9 +203,9 @@ public object GetPropertyValue(TaskPropertyInfo property)
             {
                 // If we returned an exception, then we want to throw it when we 
                 // do the get.  
-                if (value is Exception)
+                if (value is Exception ex)
                 {
-                    throw (Exception)value;
+                    throw ex;
                 }
 
                 return value;
@@ -520,21 +520,21 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
 
                     // "Custom events" in terms of the communications infrastructure can also be, e.g. custom error events, 
                     // in which case they need to be dealt with in the same way as their base type of event. 
-                    if (buildEvent is BuildErrorEventArgs)
+                    if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        this.BuildEngine.LogErrorEvent((BuildErrorEventArgs)buildEvent);
+                        this.BuildEngine.LogErrorEvent(buildErrorEventArgs);
                     }
-                    else if (buildEvent is BuildWarningEventArgs)
+                    else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        this.BuildEngine.LogWarningEvent((BuildWarningEventArgs)buildEvent);
+                        this.BuildEngine.LogWarningEvent(buildWarningEventArgs);
                     }
-                    else if (buildEvent is BuildMessageEventArgs)
+                    else if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
                     {
-                        this.BuildEngine.LogMessageEvent((BuildMessageEventArgs)buildEvent);
+                        this.BuildEngine.LogMessageEvent(buildMessageEventArgs);
                     }
-                    else if (buildEvent is CustomBuildEventArgs)
+                    else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
                     {
-                        this.BuildEngine.LogCustomEvent((CustomBuildEventArgs)buildEvent);
+                        this.BuildEngine.LogCustomEvent(customBuildEventArgs);
                     }
                     else
                     {
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 04950aca529..ea87f587b70 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -827,7 +827,11 @@ internal PerformanceCounter(string scopeName)
             /// </summary>
             internal bool InScope
             {
-                get { return inScope; }
+                get
+                {
+                    return inScope;
+                }
+
                 set
                 {
                     if (!reenteredScope)
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
index 3eb9fc9f65c..bfb588a0275 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
@@ -87,57 +87,57 @@ public class EventArgsDispatcher : IEventSource
         /// </summary>
         public void Dispatch(BuildEventArgs buildEvent)
         {
-            if (buildEvent is BuildMessageEventArgs)
+            if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
-                MessageRaised?.Invoke(null, (BuildMessageEventArgs)buildEvent);
+                MessageRaised?.Invoke(null, buildMessageEventArgs);
             }
-            else if (buildEvent is TaskStartedEventArgs)
+            else if (buildEvent is TaskStartedEventArgs taskStartedEventArgs)
             {
-                TaskStarted?.Invoke(null, (TaskStartedEventArgs)buildEvent);
+                TaskStarted?.Invoke(null, taskStartedEventArgs);
             }
-            else if (buildEvent is TaskFinishedEventArgs)
+            else if (buildEvent is TaskFinishedEventArgs taskFinishedEventArgs)
             {
-                TaskFinished?.Invoke(null, (TaskFinishedEventArgs)buildEvent);
+                TaskFinished?.Invoke(null, taskFinishedEventArgs);
             }
-            else if (buildEvent is TargetStartedEventArgs)
+            else if (buildEvent is TargetStartedEventArgs targetStartedEventArgs)
             {
-                TargetStarted?.Invoke(null, (TargetStartedEventArgs)buildEvent);
+                TargetStarted?.Invoke(null, targetStartedEventArgs);
             }
-            else if (buildEvent is TargetFinishedEventArgs)
+            else if (buildEvent is TargetFinishedEventArgs targetFinishedEventArgs)
             {
-                TargetFinished?.Invoke(null, (TargetFinishedEventArgs)buildEvent);
+                TargetFinished?.Invoke(null, targetFinishedEventArgs);
             }
-            else if (buildEvent is ProjectStartedEventArgs)
+            else if (buildEvent is ProjectStartedEventArgs projectStartedEventArgs)
             {
-                ProjectStarted?.Invoke(null, (ProjectStartedEventArgs)buildEvent);
+                ProjectStarted?.Invoke(null, projectStartedEventArgs);
             }
-            else if (buildEvent is ProjectFinishedEventArgs)
+            else if (buildEvent is ProjectFinishedEventArgs projectFinishedEventArgs)
             {
-                ProjectFinished?.Invoke(null, (ProjectFinishedEventArgs)buildEvent);
+                ProjectFinished?.Invoke(null, projectFinishedEventArgs);
             }
-            else if (buildEvent is BuildStartedEventArgs)
+            else if (buildEvent is BuildStartedEventArgs buildStartedEventArgs)
             {
-                BuildStarted?.Invoke(null, (BuildStartedEventArgs)buildEvent);
+                BuildStarted?.Invoke(null, buildStartedEventArgs);
             }
-            else if (buildEvent is BuildFinishedEventArgs)
+            else if (buildEvent is BuildFinishedEventArgs buildFinishedEventArgs)
             {
-                BuildFinished?.Invoke(null, (BuildFinishedEventArgs)buildEvent);
+                BuildFinished?.Invoke(null, buildFinishedEventArgs);
             }
-            else if (buildEvent is CustomBuildEventArgs)
+            else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
             {
-                CustomEventRaised?.Invoke(null, (CustomBuildEventArgs)buildEvent);
+                CustomEventRaised?.Invoke(null, customBuildEventArgs);
             }
-            else if (buildEvent is BuildStatusEventArgs)
+            else if (buildEvent is BuildStatusEventArgs buildStatusEventArgs)
             {
-                StatusEventRaised?.Invoke(null, (BuildStatusEventArgs)buildEvent);
+                StatusEventRaised?.Invoke(null, buildStatusEventArgs);
             }
-            else if (buildEvent is BuildWarningEventArgs)
+            else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
             {
-                WarningRaised?.Invoke(null, (BuildWarningEventArgs)buildEvent);
+                WarningRaised?.Invoke(null, buildWarningEventArgs);
             }
-            else if (buildEvent is BuildErrorEventArgs)
+            else if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
             {
-                ErrorRaised?.Invoke(null, (BuildErrorEventArgs)buildEvent);
+                ErrorRaised?.Invoke(null, buildErrorEventArgs);
             }
 
             AnyEventRaised?.Invoke(null, buildEvent);
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index dc7950123bb..560d96c4c30 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -10,7 +10,6 @@
 using Microsoft.Build.BackEnd;
 
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
-using System.Linq;
 
 #nullable disable
 
@@ -261,11 +260,7 @@ private static bool IsForwardingLoggerClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass &&
                 !type.GetTypeInfo().IsAbstract &&
-#if FEATURE_TYPE_GETINTERFACE
                 (type.GetTypeInfo().GetInterface("IForwardingLogger") != null);
-#else
-                (type.GetInterfaces().Any(interfaceType => interfaceType.Name == "IForwardingLogger"));
-#endif
         }
 
         /// <summary>
@@ -277,11 +272,7 @@ private static bool IsLoggerClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass &&
                 !type.GetTypeInfo().IsAbstract &&
-#if FEATURE_TYPE_GETINTERFACE
                 (type.GetTypeInfo().GetInterface("ILogger") != null);
-#else
-                (type.GetInterfaces().Any(interfaceType => interfaceType.Name == "ILogger"));
-#endif
         }
 
         /// <summary>
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 373a0f364f0..52b0ec75292 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -474,13 +474,13 @@ private void ShowErrorWarningSummary(IEnumerable<BuildEventArgs> listToProcess)
                 // Print out all of the errors under the ProjectEntryPoint / target
                 foreach (BuildEventArgs errorWarningEvent in valuePair.Value)
                 {
-                    if (errorWarningEvent is BuildErrorEventArgs)
+                    if (errorWarningEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
-                    else if (errorWarningEvent is BuildWarningEventArgs)
+                    else if (errorWarningEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
                 }
                 WriteNewLine();
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index cd99bc84721..c25e4dc39fe 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -4,8 +4,7 @@
   <Import Project="..\Shared\DebuggingSources.proj" />
 
   <PropertyGroup>
-    <TargetFrameworks>net6.0</TargetFrameworks>
-    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);net6.0</TargetFrameworks>
+    <TargetFrameworks>$(FullFrameworkTFM);net6.0</TargetFrameworks>
     <TargetFrameworks Condition="'$(MonoBuild)'=='true'">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <RootNamespace>Microsoft.Build</RootNamespace>
     <AssemblyName>Microsoft.Build</AssemblyName>
@@ -40,8 +39,10 @@
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(DotNetBuildFromSource)' != 'true'">
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" />
+  </ItemGroup>
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <Reference Include="System.IO.Compression" />
     <PackageReference Include="System.Memory" />
   </ItemGroup>
diff --git a/src/Build/README.md b/src/Build/README.md
new file mode 100644
index 00000000000..a5cf66a7d77
--- /dev/null
+++ b/src/Build/README.md
@@ -0,0 +1,17 @@
+# Microsoft.Build
+
+This package contains `Microsoft.Build.dll`, which defines MSBuild's API, including
+
+* [`Microsoft.Build.Evaluation`](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation) for evaluating MSBuild projects,
+* [`Microsoft.Build.Construction`](https://docs.microsoft.com/dotnet/api/microsoft.build.construction) for creating new MSBuild projects, and
+* [`Microsoft.Build.Execution`](https://docs.microsoft.com/dotnet/api/microsoft.build.execution) for building MSBuild projects.
+
+Developers should reference this package to write applications that create, edit, evaluate, or build MSBuild projects.
+
+To create or edit an MSBuild project, use the [Microsoft.Build.Construction.ProjectRootElement](https://docs.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement) class and call the
+[Create](https://docs.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement.create) or
+[Open](https://docs.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement.open) method.
+
+To evaluate or build an MSBuild project, use the [Microsoft.Build.Evaluation.Project](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation.project) class by creating an instance of it with the
+appropriate parameters for your project.  To retrieve evaluated items, call methods such as  properties such as [GetItems](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation.project.getitems)
+or [GetPropertyValue](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation.project.getpropertyvalue).
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 240e5e0bf10..129b7311dfc 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1899,4 +1899,64 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <data name="ProxyRequestNotScheduledOnInprocNode" xml:space="preserve">
     <value>MSB4274: Disabling the inproc node leads to performance degradation when using project cache plugins that emit proxy build requests.</value>
   </data>
+  <data name="ProjectCacheBeginBuild" xml:space="preserve">
+    <value>Initializing project cache plugin.</value>
+  </data>
+  <data name="ProjectCacheEndBuild" xml:space="preserve">
+    <value>Shutting down project cache plugin.</value>
+  </data>
+  <data name="ProjectCacheQueryStartedWithDefaultTargets" xml:space="preserve">
+    <value>Querying project cache for "{0}" (default targets):</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheQueryStartedWithTargetNames" xml:space="preserve">
+    <value>Querying project cache for "{0}" (targets: {1}):</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
+  <data name="ProjectCacheHitWithDefaultTargets" xml:space="preserve">
+    <value>Project cache hit for "{0}" (default targets).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheHitWithTargetNames" xml:space="preserve">
+    <value>Project cache hit for "{0}" ({1} target(s)).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
+  <data name="ProjectCacheHitWithOutputs" xml:space="preserve">
+    <value>{0} -> Cache Hit</value>
+    <comment>
+      {StrBegin="{0} -> "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </comment>
+  </data>
+  <data name="ProjectCacheMissWithDefaultTargets" xml:space="preserve">
+    <value>Project cache miss for "{0}" (default targets).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheMissWithTargetNames" xml:space="preserve">
+    <value>Project cache miss for "{0}" ({1} target(s)).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
+  <data name="ProjectCacheNotApplicableWithDefaultTargets" xml:space="preserve">
+    <value>Project cache not applicable for "{0}" (default targets).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheNotApplicableWithTargetNames" xml:space="preserve">
+    <value>Project cache not applicable for "{0}" ({1} target(s)).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
 </root>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index cd731eb2a51..4ffaeac26fa 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: MusÃ­ se zadat jeden modul plug-in mezipamÄti projektu, ale naÅ¡lo se jich vÃ­ce: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: MezipamÄÅ¥ projektu vyvolala neoÅ¡etÅenou vÃ½jimku z metody {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Nepovedlo se inicializovat mezipamÄÅ¥ projektu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: PÅi dotazovÃ¡nÃ­ na nÃ¡sledujÃ­cÃ­ projekt selhala jeho mezipamÄÅ¥: {0}. Na mezipamÄÅ¥ se dotazy posÃ­lajÃ­ paralelnÄ pro nÄkolik projektÅ¯, takÅ¾e tento konkrÃ©tnÃ­ projekt nemusÃ­ bÃ½t pÅÃ­Äinou.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: MezipamÄÅ¥ projektu se nepovedlo sprÃ¡vnÄ vypnout.</target>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 4b581b9580a..551b2239b08 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: Ein einzelnes Projektcache-Plug-In muss angegeben werden, es wurden jedoch mehrere gefunden: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: Der Projektcache hat Ã¼ber die Methode {0} eine unbehandelte Ausnahme ausgelÃ¶st.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Fehler beim Initialisieren des Projektcache.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Fehler beim Abfragen des Projektcache fÃ¼r das folgende Projekt: {0}. Der Cache wird fÃ¼r mehrere Projekte parallel abgefragt, sodass dieses spezifische Projekt mÃ¶glicherweise nicht die Ursache darstellt.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: Der Projektcache konnte nicht ordnungsgemÃ¤Ã heruntergefahren werden.</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 95ee0e4a72c..29a24754e88 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: Debe especificarse un solo complemento de cachÃ© de proyectos, pero se encontraron varios: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: la cachÃ© del proyecto iniciÃ³ una excepciÃ³n no controlada desde el mÃ©todo {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: No se pudo inicializar la cachÃ© de proyectos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Error de la memoria cachÃ© de proyectos al consultar el proyecto siguiente: {0}. La memoria cachÃ© se consulta en paralelo para varios proyectos, por lo que puede que este proyecto especÃ­fico no sea la causa.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: La memoria cachÃ© de proyectos no se cerrÃ³ correctamente.</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index c9ad104ebd1..924210932d9 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: un seul plug-in de cache de projet doit Ãªtre spÃ©cifiÃ©, mais plusieurs plug-ins ont Ã©tÃ© trouvÃ©sÂ : {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: le cache de projet a levÃ© une exception non gÃ©rÃ©e Ã  partir de la mÃ©thode {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Ã©chec de l'initialisation du cache de projet.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Ã©chec du cache de projet au moment oÃ¹ il a Ã©tÃ© interrogÃ© pour le projet suivantÂ : {0}. Dans la mesure oÃ¹ le cache est interrogÃ© en parallÃ¨le pour plusieurs projets, ce projet spÃ©cifique n'est peut-Ãªtre pas Ã  l'origine du problÃ¨me.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: le cache de projet ne s'est pas arrÃªtÃ© correctement.</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 725cbbd4917..fb452d85408 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: Ã¨ necessario specificare un singolo plug-in della cache del progetto, ma ne sono trovati piÃ¹ di uno: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: la cache del progetto ha generato un'eccezione non gestita dal metodo {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: non Ã¨ stato possibile inizializzare la cache del progetto.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: si Ã¨ verificato un errore nella cache del progetto durante l'esecuzione della query relativa al progetto seguente: {0}. La query sulla cache viene eseguita in parallelo per piÃ¹ progetti, di conseguenza l'errore potrebbe non dipendere dal progetto specifico.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: non Ã¨ stato possibile arrestare correttamente la cache del progetto.</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 567f72d2e9b..474c518aeac 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: åä¸ã®ãã­ã¸ã§ã¯ã ã­ã£ãã·ã¥ ãã©ã°ã¤ã³ãæå®ããå¿è¦ãããã¾ãããè¤æ°æå®ããã¦ãã¾ãã{0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: ãã­ã¸ã§ã¯ã ã­ã£ãã·ã¥ã {0} ã¡ã½ããã§å¦çããã¦ããªãä¾å¤ãè¿ããã¾ããã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: ãã­ã¸ã§ã¯ã ã­ã£ãã·ã¥ãåæåã§ãã¾ããã§ããã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: ãã­ã¸ã§ã¯ã ã­ã£ãã·ã¥ã¯ããã­ã¸ã§ã¯ã {0} ã«å¯¾ãã¦ã¯ã¨ãªãå®è¡ãã¦ããã¨ãã«å¤±æãã¾ããããã®ã­ã£ãã·ã¥ã§ã¯è¤æ°ã®ãã­ã¸ã§ã¯ãã«ã¤ãã¦ä¸¦åã§ã¯ã¨ãªãå®è¡ãããããããã®ç¹å®ã®ãã­ã¸ã§ã¯ããåå ã§ã¯ãªãå¯è½æ§ãããã¾ãã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: ãã­ã¸ã§ã¯ã ã­ã£ãã·ã¥ã¯æ­£å¸¸ã«ã·ã£ãããã¦ã³ã§ãã¾ããã§ããã</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 2113f42532f..425bf153ffe 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: ë¨ì¼ íë¡ì í¸ ìºì íë¬ê·¸ ì¸ì´ ì§ì ëì´ì¼ íì§ë§, {0}ìì ì¬ë¬ ê°ë¥¼ ì°¾ììµëë¤.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: íë¡ì í¸ ìºìë {0} ë©ìëìì ì²ë¦¬ëì§ ìì ìì¸ë¥¼ ë°ììì¼°ìµëë¤.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: íë¡ì í¸ ìºìë¥¼ ì´ê¸°ííì§ ëª»íìµëë¤.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: {0} íë¡ì í¸ì ëí´ ì¿¼ë¦¬ëë ëì íë¡ì í¸ ìºìê° ì¤í¨íìµëë¤. ìºìë ì¬ë¬ íë¡ì í¸ì ëí´ ë³ë ¬ë¡ ì¿¼ë¦¬ëë¯ë¡ ì´ í¹ì  íë¡ì í¸ê° ìì¸ì´ ìë ì ììµëë¤.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: íë¡ì í¸ ìºìê° ì ëë¡ ì¢ë£ëì§ ìììµëë¤.</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index d1d82bbf96a..5dd33960a55 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: naleÅ¼y okreÅliÄ jednÄ wtyczkÄ pamiÄci podrÄcznej projektu, ale znaleziono ich wiele: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: pamiÄÄ podrÄczna projektu zgÅosiÅa nieobsÅugiwany wyjÄtek z metody {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: nie moÅ¼na zainicjowaÄ pamiÄci podrÄcznej projektu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: w pamiÄci podrÄcznej projektu wystÄpiÅ bÅÄd podczas wykonywania zapytania dotyczÄcego nastÄpujÄcego projektu: {0}. WzglÄdem pamiÄci podrÄcznej rÃ³wnolegle sÄ wykonywane zapytania o wiele projektÃ³w, dlatego ten konkretny projekt moÅ¼e nie byÄ przyczynÄ.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: nie moÅ¼na poprawnie zamknÄÄ pamiÄci podrÄcznej projektu.</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 566907ee783..0b8f27890c4 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: Ã© necessÃ¡rio especificar sÃ³ um plug-in de cache do projeto, mas foram encontrados vÃ¡rios: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: O cache do projeto lanÃ§ou uma exceÃ§Ã£o sem tratamento do mÃ©todo {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: falha ao inicializar o cache do projeto.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: falha no cache do projeto durante a consulta do seguinte projeto: {0}. O cache Ã© consultado em paralelo quanto a vÃ¡rios projetos, portanto, esse projeto especÃ­fico pode nÃ£o ser a causa.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: falha ao desligar o cache do projeto corretamente.</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index af01c303893..602d7d4ec4b 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÑÑ ÑÐºÐ°Ð·Ð°Ð½ Ð¾Ð´Ð¸Ð½ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ°ÐµÐ¼ÑÐ¹ Ð¼Ð¾Ð´ÑÐ»Ñ ÐºÑÑÐ° Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð², Ð½Ð¾ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¾: {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: Ð² ÐºÑÑÐµ Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð² Ð²Ð¾Ð·Ð½Ð¸ÐºÐ»Ð¾ Ð½ÐµÐ¾Ð±ÑÐ°Ð±Ð¾ÑÐ°Ð½Ð½Ð¾Ðµ Ð¸ÑÐºÐ»ÑÑÐµÐ½Ð¸Ðµ Ð¸Ð· Ð¼ÐµÑÐ¾Ð´Ð° {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ ÐºÑÑ Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð².</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Ð¿ÑÐ¾Ð¸Ð·Ð¾ÑÐµÐ» ÑÐ±Ð¾Ð¹ ÐºÑÑÐ° Ð¿ÑÐ¸ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ð¸ Ð·Ð°Ð¿ÑÐ¾ÑÐ° Ðº ÑÐ»ÐµÐ´ÑÑÑÐµÐ¼Ñ Ð¿ÑÐ¾ÐµÐºÑÑ: {0}. Ð ÐºÑÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ñ Ð¿Ð°ÑÐ°Ð»Ð»ÐµÐ»ÑÐ½ÑÐµ Ð·Ð°Ð¿ÑÐ¾ÑÑ Ðº Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¸Ð¼ Ð¿ÑÐ¾ÐµÐºÑÐ°Ð¼, Ð¿Ð¾ÑÑÐ¾Ð¼Ñ, Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð¿ÑÐ¸ÑÐ¸Ð½Ð° Ð½Ðµ Ð² ÑÐºÐ°Ð·Ð°Ð½Ð½Ð¾Ð¼ Ð¿ÑÐ¾ÐµÐºÑÐµ.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾ Ð·Ð°Ð²ÐµÑÑÐ¸ÑÑ ÑÐ°Ð±Ð¾ÑÑ ÐºÑÑÐ° Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð².</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 8761672c6a1..7a6e5a77c1d 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: Tek bir proje Ã¶nbellek eklentisi belirtilmelidir ancak birden Ã§ok eklenti bulundu: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: Proje Ã¶nbelleÄi {0} yÃ¶nteminden yakalanamayan Ã¶zel durum oluÅturdu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Proje Ã¶nbelleÄi baÅlatÄ±lamadÄ±.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Proje Ã¶nbelleÄi, {0} projesi iÃ§in sorgulanÄ±rken baÅarÄ±sÄ±z oldu. Ãnbellek birden Ã§ok proje iÃ§in paralel olarak sorgulandÄ±ÄÄ±ndan sorunun nedeni bu proje olmayabilir.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: Proje Ã¶nbelleÄi dÃ¼zgÃ¼n bir Åekilde kapatÄ±lamadÄ±.</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index f10c71a7bb1..3ea49f74910 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: å¿é¡»æå®åä¸ªé¡¹ç®ç¼å­æä»¶ï¼ä½æ¾å°å¤ä¸ªä½ç½®: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: é¡¹ç®ç¼å­ä» {0} æ¹æ³å¼åäºæªç»å¤ççå¼å¸¸ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: æªè½åå§åé¡¹ç®ç¼å­ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: æ¥è¯¢ä»¥ä¸é¡¹ç®æ¶ï¼é¡¹ç®ç¼å­å¤±è´¥: {0}ãå¹¶è¡æ¥è¯¢äºå¤ä¸ªé¡¹ç®çç¼å­ï¼å æ­¤è¿ä¸é¡¹ç®å¯è½ä¸æ¯å¯¼è´æ­¤é®é¢çåå ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: é¡¹ç®ç¼å­æªè½æ­£ç¡®å³é­ã</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index ca6824404a6..4ab2b4eecd5 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -219,21 +219,94 @@
         <target state="translated">MSB4265: åªå¯æå®å®ä¸å°æ¡å¿«åå¤æç¨å¼ï¼ä½ç¼ç¾å¤åæå®é ç®: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="new">Initializing project cache plugin.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="new">Shutting down project cache plugin.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: å°æ¡å¿«åå¾ {0} æ¹æ³æ²åæªèççä¾å¤çæ³ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="new">Project cache hit for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="new">{0} -&gt; Cache Hit</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache hit for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: ç¡æ³å°å°æ¡å¿«ååå§åã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="new">Project cache miss for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache miss for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="new">Project cache not applicable for "{0}" (default targets).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="new">Project cache not applicable for "{0}" ({1} target(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: æ¥è©¢ä¸åå°æ¡æï¼å°æ¡å¿«åå¤±æ: {0}ãæ¥è©¢å¤åå°æ¡æï¼æå¹³è¡æ¥è©¢å¿«åï¼å æ­¤éåç¹å®å°æ¡å¯è½ä¸æ¯å¤±æåå ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="new">Querying project cache for "{0}" (default targets):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="new">Querying project cache for "{0}" (targets: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: ç¡æ³æ­£ç¢ºééå°æ¡å¿«åã</target>
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 5ee535bc9b7..2f53f2b6a71 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -53,7 +53,6 @@ internal static string[] GetFileListUnescaped
             string directoryEscaped,
             string filespecEscaped
             )
-
         {
             return GetFileList(directoryEscaped, filespecEscaped, returnEscaped: false, forceEvaluateWildCards: false, excludeSpecsEscaped: null, fileMatcher: FileMatcher.Default);
         }
@@ -227,9 +226,14 @@ private static bool MatchesLazyWildcard(string fileSpec)
             return _regexMatchCache.Value.GetOrAdd(fileSpec, file => s_lazyWildCardExpansionRegexes.Any(regex => regex.IsMatch(fileSpec)));
         }
 
-        /// Returns a Func that will return true IFF its argument matches any of the specified filespecs
-        /// Assumes filespec may be escaped, so it unescapes it
+        /// <summary>
+        /// Returns a Func that will return true IFF its argument matches any of the specified filespecs.
+        /// Assumes filespec may be escaped, so it unescapes it.
         /// The returned function makes no escaping assumptions or escaping operations. Its callers should control escaping.
+        /// </summary>
+        /// <param name="filespecsEscaped"></param>
+        /// <param name="currentDirectory"></param>
+        /// <returns>A Func that will return true IFF its argument matches any of the specified filespecs.</returns>
         internal static Func<string, bool> GetFileSpecMatchTester(IList<string> filespecsEscaped, string currentDirectory)
         {
             var matchers = filespecsEscaped
diff --git a/src/Deprecated/Conversion/README.md b/src/Deprecated/Conversion/README.md
new file mode 100644
index 00000000000..3e39338920b
--- /dev/null
+++ b/src/Deprecated/Conversion/README.md
@@ -0,0 +1,5 @@
+# Microsoft.Build.Conversion.Core
+
+â ï¸ This package is **deprecated** and should not be referenced. It will be removed in a future version of MSBuild.
+
+Contains `Microsoft.Build.Conversion.Core.dll`, which is provided with MSBuild for compatibility purposes.
diff --git a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
index acfe28f7bdc..557447e9cda 100644
--- a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
@@ -401,7 +401,7 @@ public void DistributedFileLoggerParameters()
                 }
                 finally
                 {
-                    if(Directory.Exists(Path.Combine(Environment.CurrentDirectory, "tempura")))
+                    if (Directory.Exists(Path.Combine(Environment.CurrentDirectory, "tempura")))
                     {
                         File.Delete(Path.Combine(Environment.CurrentDirectory, "tempura\\mylogfile1.log"));
                         Directory.Delete(Path.Combine(Environment.CurrentDirectory, "tempura"));
diff --git a/src/Deprecated/Engine.UnitTests/Project_Tests.cs b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
index 1144ce87b6f..ad705831690 100644
--- a/src/Deprecated/Engine.UnitTests/Project_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
@@ -4641,7 +4641,7 @@ public void MSBuildExtensionsPathDefault()
             Project myProject = new Project(myEngine);
 
             string expectedValue = null;
-            if(Environment.Is64BitOperatingSystem)
+            if (Environment.Is64BitOperatingSystem)
             {
                 expectedValue = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
             }
diff --git a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
index 9ca7eca684f..57fc959a2fc 100644
--- a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
+++ b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
@@ -174,7 +174,7 @@ public Object this[Object key]
             {
                 lock (sharedLock)
                 {
-                    if(writeableData != null)
+                    if (writeableData != null)
                     {
                         writeableData[key] = value;
                     }
diff --git a/src/Deprecated/Engine/Engine/Engine.cs b/src/Deprecated/Engine/Engine/Engine.cs
index fa138a85c81..5339a6acfee 100644
--- a/src/Deprecated/Engine/Engine/Engine.cs
+++ b/src/Deprecated/Engine/Engine/Engine.cs
@@ -2503,7 +2503,7 @@ BuildRequest buildRequest
                 ArrayList actuallyBuiltTargets;
 
                 // If the tools version is empty take a quick peek at the project file to determine if it has a tools version defined
-                if(String.IsNullOrEmpty(buildRequest.ToolsetVersion))
+                if (String.IsNullOrEmpty(buildRequest.ToolsetVersion))
                 {
                     buildRequest.ToolsetVersion = XmlUtilities.GetAttributeValueForElementFromFile(buildRequest.ProjectFileName, XMakeAttributes.project, XMakeAttributes.toolsVersion);
                     buildRequest.ToolsVersionPeekedFromProjectFile = true;
diff --git a/src/Deprecated/Engine/Engine/EngineProxy.cs b/src/Deprecated/Engine/Engine/EngineProxy.cs
index 9ce4307122e..afc4259b5be 100644
--- a/src/Deprecated/Engine/Engine/EngineProxy.cs
+++ b/src/Deprecated/Engine/Engine/EngineProxy.cs
@@ -176,7 +176,7 @@ public void LogErrorEvent(BuildErrorEventArgs e)
             }
             else
             {
-                if(e.GetType().Equals(BuildErrorEventArgsType))
+                if (e.GetType().Equals(BuildErrorEventArgsType))
                 {
                     // We'd like to add the project file to the subcategory, but since this property
                     // is read-only on the BuildErrorEventArgs type, this requires creating a new
@@ -264,7 +264,7 @@ private static string GetUpdatedMessage(string file, string message, string pare
             }
 
             // Don't bother adding the project file path if it's already in the file part
-            if(String.Equals(file, parentProjectFullFileName, StringComparison.OrdinalIgnoreCase))
+            if (String.Equals(file, parentProjectFullFileName, StringComparison.OrdinalIgnoreCase))
             {
                 return message;
             }
diff --git a/src/Deprecated/Engine/Engine/ToolsetReader.cs b/src/Deprecated/Engine/Engine/ToolsetReader.cs
index ba52d9732a2..c952cf4bb5c 100644
--- a/src/Deprecated/Engine/Engine/ToolsetReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetReader.cs
@@ -343,7 +343,7 @@ private Toolset ReadToolset(PropertyDefinition toolsVersion,
                         );
                     }
                 }
-                else if(ReservedPropertyNames.IsReservedProperty(property.Name))
+                else if (ReservedPropertyNames.IsReservedProperty(property.Name))
                 {
                     // We don't allow toolsets to define reserved properties
                     string baseMessage = ResourceUtilities.FormatResourceString("CannotModifyReservedProperty", property.Name);
diff --git a/src/Deprecated/Engine/Logging/ConsoleLogger.cs b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
index e772b01690a..c82db95717a 100644
--- a/src/Deprecated/Engine/Logging/ConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
@@ -137,7 +137,7 @@ private void InitializeBaseConsoleLogger()
                     consoleLogger = new ParallelConsoleLogger(verbosity, write, colorSet, colorReset);
                 }
 
-                if(!string.IsNullOrEmpty(parameters))
+                if (!string.IsNullOrEmpty(parameters))
                 {
                     consoleLogger.Parameters = parameters;
                     parameters = null;
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
index 7955a4fed44..5bcd93e943b 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -65,7 +65,7 @@ private void ApplyFileLoggerParameter(string parameterName, string parameterValu
         {
             if (String.Equals("LOGFILE", parameterName, StringComparison.OrdinalIgnoreCase))
             {
-                if(string.IsNullOrEmpty(parameterValue))
+                if (string.IsNullOrEmpty(parameterValue))
                 {
                     string message = ResourceUtilities.FormatResourceString("InvalidFileLoggerFile", string.Empty, ResourceUtilities.FormatResourceString("logfilePathNullOrEmpty"));
                     throw new LoggerException(message);
diff --git a/src/Deprecated/Engine/README.md b/src/Deprecated/Engine/README.md
new file mode 100644
index 00000000000..50dbb26a4cf
--- /dev/null
+++ b/src/Deprecated/Engine/README.md
@@ -0,0 +1,5 @@
+# Microsoft.Build.Engine
+
+â ï¸ This package is **deprecated** and should not be referenced. It will be removed in a future version of MSBuild.
+
+Contains `Microsoft.Build.Engine.dll`, which is provided with MSBuild for compatibility purposes.
diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index 929f6333d22..a86d5e08b5a 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -330,7 +330,7 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS
                 {
                     if (String.Equals(modifier, ItemSpecModifiers.FullPath, StringComparison.OrdinalIgnoreCase))
                     {
-                        if(currentDirectory == null)
+                        if (currentDirectory == null)
                         {
                             currentDirectory = String.Empty;
                         }
diff --git a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
index bf0b4845cec..20c1c45cb27 100644
--- a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
+++ b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
@@ -401,7 +401,7 @@ private static string GenerateReferenceAssemblyDirectory(string versionPrefix)
             string programFilesReferenceAssemblyDirectory = Path.Combine(programFilesReferenceAssemblyLocation, versionPrefix);
             string referenceAssemblyDirectory = null;
 
-            if(Directory.Exists(programFilesReferenceAssemblyDirectory))
+            if (Directory.Exists(programFilesReferenceAssemblyDirectory))
             {
                 referenceAssemblyDirectory = programFilesReferenceAssemblyDirectory;
             }
diff --git a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
index aaa477d46f1..d8345c8d90d 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
@@ -321,7 +321,7 @@ internal void AssertLogContains(string contains)
             // If we do not contain this string than pass it to
             // MockLogger. Since MockLogger is also registered as
             // a logger it may have this string.
-            if(!upperLog.Contains
+            if (!upperLog.Contains
                 (
                     contains.ToUpperInvariant()
                 )
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index cb6fabf4c0d..f5c22d31e89 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -35,7 +35,6 @@
     <DefineConstants>$(DefineConstants);FEATURE_CONSTRAINED_EXECUTION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CHARSET_AUTO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CODETASKFACTORY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_CONSOLE_FALLBACK</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTUREINFO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTURES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_DOTNETVERSION</DefineConstants>
@@ -86,7 +85,6 @@
     <DefineConstants>$(DefineConstants);FEATURE_MULTIPLE_TOOLSETS</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NODE_REUSE</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NET35_TASKHOST</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_TYPE_GETINTERFACE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_USERINTERACTIVE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_USERDOMAINNAME</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_XAML_TYPES</DefineConstants>
@@ -98,7 +96,7 @@
     <DefineConstants>$(DefineConstants);FEATURE_DEBUGGER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_WIN32_REGISTRY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_WORKINGSET</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
+    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5' and '$(DotNetBuildFromSource)' != 'true'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_MSCOREE</DefineConstants>
   </PropertyGroup>
 
diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index 82a6ac1881d..4b67d4133cb 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -1,4 +1,4 @@
-ï»¿<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project DefaultTargets="Build">
   <!-- Import the repo root props -->
   <Import Project="..\Directory.Build.props"/>
 
@@ -34,7 +34,7 @@
 
     <!-- Target frameworks for Exe and unit test projects (ie projects with runtime output) -->
     <RuntimeOutputTargetFrameworks>net6.0</RuntimeOutputTargetFrameworks>
-    <RuntimeOutputTargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows')) and '$(DotNetBuildFromSource)' != 'true'">$(FullFrameworkTFM);$(RuntimeOutputTargetFrameworks)</RuntimeOutputTargetFrameworks>
+    <RuntimeOutputTargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);$(RuntimeOutputTargetFrameworks)</RuntimeOutputTargetFrameworks>
     <RuntimeOutputTargetFrameworks Condition="'$(MonoBuild)' == 'true'">$(FullFrameworkTFM)</RuntimeOutputTargetFrameworks>
 
     <!-- Don't automatically append target framework to output path, since we want to put the Platform Target beforehand, if it's not AnyCPU -->
diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index bff6cc9053f..2dbbe6d8ace 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -1,4 +1,4 @@
-ï»¿<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project DefaultTargets="Build">
 
   <PropertyGroup>
     <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 092b844562f..da912a435c7 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -12,7 +12,22 @@ internal sealed class MSBuildEventSource : EventSource
     {
         public static class Keywords
         {
+            /// <summary>
+            /// Keyword applied to all MSBuild events.
+            /// </summary>
+            /// <remarks>
+            /// Literally every event should define this.
+            /// </remarks>
             public const EventKeywords All = (EventKeywords)0x1;
+
+            /// <summary>
+            /// Keyword for events that should go in the text performance log when turned on.
+            /// </summary>
+            /// <remarks>
+            /// This keyword should be applied only to events that are low-volume
+            /// and likely to be useful to diagnose perf issues using the
+            /// <see href="https://github.com/dotnet/msbuild/pull/5861">text perf log</see>.
+            /// </remarks>
             public const EventKeywords PerformanceLog = (EventKeywords)0x2;
         }
 
@@ -487,9 +502,9 @@ public void CachedSdkResolverServiceResolveSdkStart(string sdkName, string solut
         }
 
         [Event(67, Keywords = Keywords.All)]
-        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
+        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success)
         {
-            WriteEvent(67, sdkName, solutionPath, projectPath, success, wasResultCached);
+            WriteEvent(67, sdkName, solutionPath, projectPath, success);
         }
 
         /// <remarks>
@@ -522,33 +537,51 @@ public void ReusableStringBuilderFactoryUnbalanced(int oldHash, int newHash)
         }
 
         [Event(71, Keywords = Keywords.All)]
-        public void SdkResolverEvent(params object[] args)
+        public void ProjectCacheCreatePluginInstanceStart(string pluginAssemblyPath)
         {
-            WriteEvent(71, args);
+            WriteEvent(71, pluginAssemblyPath);
         }
 
         [Event(72, Keywords = Keywords.All)]
-        public void SdkResolverEventStart(params object[] args)
+        public void ProjectCacheCreatePluginInstanceStop(string pluginAssemblyPath, string pluginTypeName)
         {
-            WriteEvent(72, args);
+            WriteEvent(72, pluginAssemblyPath, pluginTypeName);
         }
 
         [Event(73, Keywords = Keywords.All)]
-        public void SdkResolverEventStop(params object[] args)
+        public void ProjectCacheBeginBuildStart(string pluginTypeName)
         {
-            WriteEvent(73, args);
+            WriteEvent(73, pluginTypeName);
         }
 
         [Event(74, Keywords = Keywords.All)]
-        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(int submissionId, string sdkName, string solutionPath, string projectPath)
+        public void ProjectCacheBeginBuildStop(string pluginTypeName)
         {
-            WriteEvent(74, submissionId, sdkName, solutionPath, projectPath);
+            WriteEvent(74, pluginTypeName);
         }
 
         [Event(75, Keywords = Keywords.All)]
-        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submissionId, string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
+        public void ProjectCacheGetCacheResultStart(string pluginTypeName, string projectPath, string targets)
+        {
+            WriteEvent(75, pluginTypeName, projectPath, targets);
+        }
+
+        [Event(76, Keywords = Keywords.All)]
+        public void ProjectCacheGetCacheResultStop(string pluginTypeName, string projectPath, string targets, string cacheResultType)
+        {
+            WriteEvent(76, pluginTypeName, projectPath, targets, cacheResultType);
+        }
+
+        [Event(77, Keywords = Keywords.All)]
+        public void ProjectCacheEndBuildStart(string pluginTypeName)
+        {
+            WriteEvent(77, pluginTypeName);
+        }
+
+        [Event(78, Keywords = Keywords.All)]
+        public void ProjectCacheEndBuildStop(string pluginTypeName)
         {
-            WriteEvent(75, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
+            WriteEvent(78, pluginTypeName);
         }
 
         #endregion
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index f98d85b85b0..41434303c83 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -7,7 +7,6 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
-using System.Linq;
 using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
diff --git a/src/Framework/Profiler/EvaluationLocation.cs b/src/Framework/Profiler/EvaluationLocation.cs
index fd5f57114cd..f37093e78a0 100644
--- a/src/Framework/Profiler/EvaluationLocation.cs
+++ b/src/Framework/Profiler/EvaluationLocation.cs
@@ -229,9 +229,8 @@ public EvaluationLocation WithGlob(string globDescription)
         /// <nodoc/>
         public override bool Equals(object obj)
         {
-            if (obj is EvaluationLocation)
+            if (obj is EvaluationLocation other)
             {
-                var other = (EvaluationLocation) obj;
                 return
                     Id == other.Id &&
                     ParentId == other.ParentId &&
diff --git a/src/Framework/Profiler/ProfilerResult.cs b/src/Framework/Profiler/ProfilerResult.cs
index 3e85be55367..70bd4ebed95 100644
--- a/src/Framework/Profiler/ProfilerResult.cs
+++ b/src/Framework/Profiler/ProfilerResult.cs
@@ -28,13 +28,11 @@ public ProfilerResult(IDictionary<EvaluationLocation, ProfiledLocation> profiled
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfilerResult))
+            if (!(obj is ProfilerResult result))
             {
                 return false;
             }
 
-            var result = (ProfilerResult)obj;
-
             return (ProfiledLocations == result.ProfiledLocations) ||
                    (ProfiledLocations.Count == result.ProfiledLocations.Count &&
                     !ProfiledLocations.Except(result.ProfiledLocations).Any());
@@ -73,13 +71,8 @@ public ProfiledLocation(TimeSpan inclusiveTime, TimeSpan exclusiveTime, int numb
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfiledLocation))
-            {
-                return false;
-            }
-
-            var location = (ProfiledLocation)obj;
-            return InclusiveTime.Equals(location.InclusiveTime) &&
+            return obj is ProfiledLocation location &&
+                   InclusiveTime.Equals(location.InclusiveTime) &&
                    ExclusiveTime.Equals(location.ExclusiveTime) &&
                    NumberOfHits == location.NumberOfHits;
         }
diff --git a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
index ad0d0a96b42..e69de29bb2d 100644
--- a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,3 +0,0 @@
-virtual Microsoft.Build.Framework.SdkLogger.LogEvent(params object[] args) -> void
-virtual Microsoft.Build.Framework.SdkLogger.LogEventStart(params object[] args) -> void
-virtual Microsoft.Build.Framework.SdkLogger.LogEventStop(params object[] args) -> void
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index ad0d0a96b42..e69de29bb2d 100644
--- a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,3 +0,0 @@
-virtual Microsoft.Build.Framework.SdkLogger.LogEvent(params object[] args) -> void
-virtual Microsoft.Build.Framework.SdkLogger.LogEventStart(params object[] args) -> void
-virtual Microsoft.Build.Framework.SdkLogger.LogEventStop(params object[] args) -> void
\ No newline at end of file
diff --git a/src/Framework/README.md b/src/Framework/README.md
new file mode 100644
index 00000000000..32c4e063b2b
--- /dev/null
+++ b/src/Framework/README.md
@@ -0,0 +1,6 @@
+# Microsoft.Build.Framework
+
+This package contains `Microsoft.Build.Framework.dll`, which defines [fundamental types](https://docs.microsoft.com/dotnet/api/microsoft.build.framework) used in MSBuild's API and extensibility model.
+
+The items in this namespace are primarily base-level classes and interfaces shared across MSBuild's object model.  MSBuild task or extension developers can reference this package to implement interfaces such as
+[`ITask`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.itask), and [`ILogger`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.ilogger).
diff --git a/src/Framework/ReuseableStringBuilder.cs b/src/Framework/ReuseableStringBuilder.cs
index 982f818bae3..924fb0e0071 100644
--- a/src/Framework/ReuseableStringBuilder.cs
+++ b/src/Framework/ReuseableStringBuilder.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
+using System.Globalization;
 using System.Text;
 using System.Threading;
 using Microsoft.Build.Eventing;
@@ -49,7 +50,11 @@ internal sealed class ReuseableStringBuilder : IDisposable
         /// </summary>
         public int Length
         {
-            get { return _borrowedBuilder?.Length ?? 0; }
+            get
+            {
+                return _borrowedBuilder?.Length ?? 0;
+            }
+
             set
             {
                 LazyPrepare();
@@ -113,6 +118,28 @@ internal ReuseableStringBuilder Append(string value, int startIndex, int count)
             return this;
         }
 
+        /// <inheritdoc cref="StringBuilder.AppendFormat(IFormatProvider, string, object[])"/>
+        internal ReuseableStringBuilder AppendFormat(
+            CultureInfo currentCulture,
+            string format,
+            params object[] args)
+        {
+            LazyPrepare();
+            _borrowedBuilder.AppendFormat(
+                currentCulture,
+                format,
+                args);
+            return this;
+        }
+
+        /// <inheritdoc cref="StringBuilder.AppendLine()"/>
+        internal ReuseableStringBuilder AppendLine()
+        {
+            LazyPrepare();
+            _borrowedBuilder.AppendLine();
+            return this;
+        }
+
         public ReuseableStringBuilder AppendSeparated(char separator, ICollection<string> strings)
         {
             LazyPrepare();
diff --git a/src/Framework/Sdk/SdkLogger.cs b/src/Framework/Sdk/SdkLogger.cs
index 0cdb5485797..cbf47f81245 100644
--- a/src/Framework/Sdk/SdkLogger.cs
+++ b/src/Framework/Sdk/SdkLogger.cs
@@ -1,8 +1,6 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using Microsoft.Build.Eventing;
-
 #nullable disable
 
 namespace Microsoft.Build.Framework
@@ -19,32 +17,5 @@ public abstract class SdkLogger
         /// <param name="message">Message string.</param>
         /// <param name="messageImportance">Optional message importances. Default to low.</param>
         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);
-
-        /// <summary>
-        /// Logs that an event.
-        /// </summary>
-        /// <param name="args">An array of arguments to log with the event.</param>
-        public virtual void LogEvent(params object[] args)
-        {
-            MSBuildEventSource.Log.SdkResolverEvent(args);
-        }
-
-        /// <summary>
-        /// Logs that an event when an operation has started.
-        /// </summary>
-        /// <param name="args">An array of arguments to log with the event.</param>
-        public virtual void LogEventStart(params object[] args)
-        {
-            MSBuildEventSource.Log.SdkResolverEventStart(args);
-        }
-
-        /// <summary>
-        /// Logs that an event when an operation has completed.
-        /// </summary>
-        /// <param name="args">An array of arguments to log with the event.</param>
-        public virtual void LogEventStop(params object[] args)
-        {
-            MSBuildEventSource.Log.SdkResolverEventStop(args);
-        }
     }
 }
diff --git a/src/Framework/StringBuilderCache.cs b/src/Framework/StringBuilderCache.cs
index 190e7ed5de9..e8b0ebb30cb 100644
--- a/src/Framework/StringBuilderCache.cs
+++ b/src/Framework/StringBuilderCache.cs
@@ -1,36 +1,6 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-/*============================================================
-**
-**
-** Purpose: provide a cached reusable instance of StringBuilder
-**          per thread  it's an optimization that reduces the
-**          number of instances constructed and collected.
-**
-**  Acquire - is used to get a string builder to use of a
-**            particular size.  It can be called any number of
-**            times, if a StringBuilder is in the cache then
-**            it will be returned and the cache emptied.
-**            subsequent calls will return a new StringBuilder.
-**
-**            A StringBuilder instance is cached in
-**            Thread Local Storage and so there is one per thread
-**
-**  Release - Place the specified builder in the cache if it is
-**            not too big.
-**            The StringBuilder should not be used after it has
-**            been released.
-**            Unbalanced Releases are perfectly acceptable.  It
-**            will merely cause the runtime to create a new
-**            StringBuilder next time Acquire is called.
-**
-**  GetStringAndRelease
-**          - ToString() the StringBuilder, Release it to the
-**            cache and return the resulting string
-**
-===========================================================*/
-
 using System;
 using System.Diagnostics;
 using System.Text;
@@ -42,6 +12,12 @@
 
 namespace Microsoft.Build.Framework
 {
+    /// <summary>
+    /// A cached reusable instance of StringBuilder.
+    /// </summary>
+    /// <remarks>
+    /// An optimization that reduces the number of instances of <see cref="StringBuilder"/> constructed and collected.
+    /// </remarks>
     internal static class StringBuilderCache
     {
         // The value 512 was chosen empirically as 95% percentile of returning string length.
@@ -50,6 +26,17 @@ internal static class StringBuilderCache
         [ThreadStatic]
         private static StringBuilder t_cachedInstance;
 
+        /// <summary>
+        /// Get a <see cref="StringBuilder"/> of at least the specified capacity.
+        /// </summary>
+        /// <param name="capacity">The suggested starting size of this instance.</param>
+        /// <returns>A <see cref="StringBuilder"/> that may or may not be reused.</returns>
+        /// <remarks>
+        /// It can be called any number of times; if a <see cref="StringBuilder"/> is in the cache then
+        /// it will be returned and the cache emptied. Subsequent calls will return a new <see cref="StringBuilder"/>.
+        ///
+        /// <para>The <see cref="StringBuilder"/> instance is cached in Thread Local Storage and so there is one per thread.</para>
+        /// </remarks>
         public static StringBuilder Acquire(int capacity = 16 /*StringBuilder.DefaultCapacity*/)
         {
             if (capacity <= MAX_BUILDER_SIZE)
@@ -78,6 +65,24 @@ public static StringBuilder Acquire(int capacity = 16 /*StringBuilder.DefaultCap
             return stringBuilder;
         }
 
+        /// <summary>
+        /// Place the specified builder in the cache if it is not too big. Unbalanced Releases are acceptable.
+        /// The StringBuilder should not be used after it has
+        ///            been released.
+        ///            Unbalanced Releases are perfectly acceptable.It
+        /// will merely cause the runtime to create a new
+        /// StringBuilder next time Acquire is called.
+        /// </summary>
+        /// <param name="sb">The <see cref="StringBuilder"/> to cache. Likely returned from <see cref="Acquire(int)"/>.</param>
+        /// <remarks>
+        /// The StringBuilder should not be used after it has been released.
+        ///
+        /// <para>
+        /// Unbalanced Releases are perfectly acceptable.It
+        /// will merely cause the runtime to create a new
+        /// StringBuilder next time Acquire is called.
+        /// </para>
+        /// </remarks>
         public static void Release(StringBuilder sb)
         {
             if (sb.Capacity <= MAX_BUILDER_SIZE)
@@ -92,6 +97,14 @@ public static void Release(StringBuilder sb)
 #endif
         }
 
+        /// <summary>
+        /// Get a string and return its builder to the cache.
+        /// </summary>
+        /// <param name="sb">Builder to cache (if it's not too big).</param>
+        /// <returns>The <see langword="string"/> equivalent to <paramref name="sb"/>'s contents.</returns>
+        /// <remarks>
+        /// Convenience method equivalent to calling <see cref="StringBuilder.ToString()"/> followed by <see cref="Release"/>.
+        /// </remarks>
         public static string GetStringAndRelease(StringBuilder sb)
         {
             string result = sb.ToString();
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index 88160c644ab..c4ae14f03ca 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.IO;
 using System.Text;
 using Microsoft.Build.Shared;
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index fb53c311fad..085640af016 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -295,6 +295,22 @@ public void PropertySwitchIdentificationTests(string property)
             unquoteParameters.ShouldBeTrue();
         }
 
+        [Theory]
+        [InlineData("restoreproperty")]
+        [InlineData("RESTOREPROPERTY")]
+        [InlineData("RestoreProperty")]
+        [InlineData("rp")]
+        [InlineData("RP")]
+        public void RestorePropertySwitchIdentificationTests(string property)
+        {
+            CommandLineSwitches.IsParameterizedSwitch(property, out CommandLineSwitches.ParameterizedSwitch parameterizedSwitch, out string duplicateSwitchErrorMessage, out bool multipleParametersAllowed, out string missingParametersErrorMessage, out bool unquoteParameters, out bool emptyParametersAllowed).ShouldBeTrue();
+            parameterizedSwitch.ShouldBe(CommandLineSwitches.ParameterizedSwitch.RestoreProperty);
+            duplicateSwitchErrorMessage.ShouldBeNull();
+            multipleParametersAllowed.ShouldBeTrue();
+            missingParametersErrorMessage.ShouldBe("MissingPropertyError");
+            unquoteParameters.ShouldBeTrue();
+        }
+
         [Theory]
         [InlineData("logger")]
         [InlineData("LOGGER")]
@@ -1005,7 +1021,8 @@ public void InvalidToolsVersionErrors()
                                         graphBuildOptions: null,
                                         lowPriority: false,
                                         inputResultsCaches: null,
-                                        outputResultsCache: null
+                                        outputResultsCache: null,
+                                        commandLine: null
                         );
                 }
                 finally
diff --git a/src/MSBuild.UnitTests/PerfLog_Tests.cs b/src/MSBuild.UnitTests/PerfLog_Tests.cs
index 700671f1a8d..a167de8abad 100644
--- a/src/MSBuild.UnitTests/PerfLog_Tests.cs
+++ b/src/MSBuild.UnitTests/PerfLog_Tests.cs
@@ -1,24 +1,12 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-using System.Collections;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.Globalization;
 using System.IO;
-using System.Linq;
-using System.Threading;
 
-using Microsoft.Build.CommandLine;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.Shared;
 using Xunit;
 using Xunit.Abstractions;
 using Shouldly;
-using System.IO.Compression;
-using System.Reflection;
 
 #nullable disable
 
@@ -26,12 +14,6 @@ namespace Microsoft.Build.UnitTests
 {
     public class PerfLogTests
     {
-#if USE_MSBUILD_DLL_EXTN
-        private const string MSBuildExeName = "MSBuild.dll";
-#else
-        private const string MSBuildExeName = "MSBuild.exe";
-#endif
-
         private readonly ITestOutputHelper _output;
 
         public PerfLogTests(ITestOutputHelper output)
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index f7d6b2d7edd..9339a10d18e 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Globalization;
@@ -451,7 +450,7 @@ public void ExtractSwitchParametersTest()
             MSBuildApp.ExtractSwitchParameters(commandLineArg, unquotedCommandLineArg, doubleQuotesRemovedFromArg, "p", unquotedCommandLineArg.IndexOf(':'), 1).ShouldBe(":\"foo foo\"=\"bar bar\";\"baz=onga\"");
             doubleQuotesRemovedFromArg.ShouldBe(6);
         }
-        
+
         [Fact]
         public void ExtractSwitchParametersTestDoubleDash()
         {
@@ -489,7 +488,7 @@ public void ExtractSwitchParametersTestDoubleDash()
             unquotedCommandLineArg = QuotingUtilities.Unquote(commandLineArg, out doubleQuotesRemovedFromArg);
             MSBuildApp.ExtractSwitchParameters(commandLineArg, unquotedCommandLineArg, doubleQuotesRemovedFromArg, "p", unquotedCommandLineArg.IndexOf(':'), 2).ShouldBe(":\"foo foo\"=\"bar bar\";\"baz=onga\"");
             doubleQuotesRemovedFromArg.ShouldBe(6);
-        }        
+        }
 
         [Fact]
         public void GetLengthOfSwitchIndicatorTest()
@@ -620,7 +619,6 @@ public void InvalidMaxCPUCountSwitch4()
            );
         }
 
-#if FEATURE_CULTUREINFO_CONSOLE_FALLBACK
         /// <summary>
         /// Regression test for bug where the MSBuild.exe command-line app
         /// would sometimes set the UI culture to just "en" which is considered a "neutral" UI
@@ -646,7 +644,6 @@ public void SetConsoleUICulture()
             // Restore the current UI culture back to the way it was at the beginning of this unit test.
             thisThread.CurrentUICulture = originalUICulture;
         }
-#endif
 
 #if FEATURE_SYSTEM_CONFIGURATION
         /// <summary>
@@ -695,7 +692,7 @@ public void ConfigurationInvalid()
                 var pathToProjectFile = Path.Combine(startDirectory, "foo.proj");
                 string projectString =
                    "<?xml version='1.0' encoding='utf-8'?>" +
-                    "<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='X'>" +
+                    "<Project ToolsVersion='X'>" +
                     "<Target Name='t'></Target>" +
                     "</Project>";
                 File.WriteAllText(pathToProjectFile, projectString);
@@ -806,7 +803,7 @@ public void MSBuildEngineLogger()
         {
             string projectString =
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
-                    "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">" +
+                    "<Project ToolsVersion=\"4.0\">" +
                     "<Target Name=\"t\"><Message Text=\"[Hello]\"/></Target>" +
                     "</Project>";
             string tempdir = Path.GetTempPath();
@@ -1278,10 +1275,10 @@ public void NormalPriorityBuild()
 
         private void RunPriorityBuildTest(ProcessPriorityClass expectedPrority, params string[] arguments)
         {
-            string[] aggregateArguments = arguments.Union(new[] { " /nr:false /v:diag "}).ToArray();
+            string[] aggregateArguments = arguments.Union(new[] { " /nr:false /v:diag " }).ToArray();
 
             string contents = ObjectModelHelpers.CleanupFileContents(@"
-<Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets=""Build"">
  <Target Name=""Build"">
     <Message Text=""Task priority is '$([System.Diagnostics.Process]::GetCurrentProcess().PriorityClass)'""/>
  </Target>
@@ -1706,9 +1703,9 @@ public void TestProcessProjectSwitchDirectoryMultipleProjects()
                 RobustDelete(projectDirectory);
             }
         }
-#endregion
+        #endregion
 
-#region ProcessFileLoggerSwitches
+        #region ProcessFileLoggerSwitches
         /// <summary>
         /// Test the case where no file logger switches are given, should be no file loggers attached
         /// </summary>
@@ -1951,9 +1948,9 @@ public void TestProcessFileLoggerSwitch5()
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
         }
-#endregion
+        #endregion
 
-#region ProcessConsoleLoggerSwitches
+        #region ProcessConsoleLoggerSwitches
         [Fact]
         public void ProcessConsoleLoggerSwitches()
         {
@@ -2001,14 +1998,14 @@ public void ProcessConsoleLoggerSwitches()
             distributedLogger.CentralLogger.Parameters.ShouldBe("SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameters passed in"
             distributedLogger.ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe("SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
         }
-#endregion
+        #endregion
 
         [Fact]
         public void RestoreFirstReevaluatesImportGraph()
         {
             string guid = Guid.NewGuid().ToString("N");
 
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
 
   <PropertyGroup>
     <RestoreFirstProps>{Guid.NewGuid():N}.props</RestoreFirstProps>
@@ -2023,7 +2020,7 @@ public void RestoreFirstReevaluatesImportGraph()
 
   <Target Name=""Restore"">
     <ItemGroup>
-      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
+      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
 
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
@@ -2043,7 +2040,7 @@ public void RestoreFirstClearsProjectRootElementCache()
             string guid2 = Guid.NewGuid().ToString("N");
             string restoreFirstProps = $"{Guid.NewGuid():N}.props";
 
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
 
   <PropertyGroup>
     <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>
@@ -2059,7 +2056,7 @@ public void RestoreFirstClearsProjectRootElementCache()
   <Target Name=""Restore"">
     <Message Text=""PropertyA's value is &quot;$(PropertyA)&quot;"" />
     <ItemGroup>
-      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
+      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
 
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
@@ -2069,7 +2066,7 @@ public void RestoreFirstClearsProjectRootElementCache()
 
             IDictionary<string, string> preExistingProps = new Dictionary<string, string>
             {
-                { restoreFirstProps, $@"<Project ToolsVersion=""Current"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                { restoreFirstProps, $@"<Project ToolsVersion=""Current"">
   <PropertyGroup>
     <PropertyA>{guid1}</PropertyA>
   </PropertyGroup>
@@ -2090,7 +2087,7 @@ public void RestoreIgnoresMissingImports()
             string guid2 = Guid.NewGuid().ToString("N");
             string restoreFirstProps = $"{Guid.NewGuid():N}.props";
 
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
 
   <PropertyGroup>
     <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>
@@ -2106,7 +2103,7 @@ public void RestoreIgnoresMissingImports()
   <Target Name=""Restore"">
     <Message Text=""PropertyA's value is &quot;$(PropertyA)&quot;"" />
     <ItemGroup>
-      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
+      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
 
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
@@ -2116,7 +2113,7 @@ public void RestoreIgnoresMissingImports()
 
             IDictionary<string, string> preExistingProps = new Dictionary<string, string>
             {
-                { restoreFirstProps, $@"<Project ToolsVersion=""Current"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                { restoreFirstProps, $@"<Project ToolsVersion=""Current"">
   <PropertyGroup>
     <PropertyA>{guid1}</PropertyA>
   </PropertyGroup>
@@ -2180,7 +2177,7 @@ public void RestoreRunsInitialTargets()
         [Fact]
         public void MultipleTargetsDoesNotCrash()
         {
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
   <Target Name=""Target1"">
     <Message Text=""7514CB1641A948D0A3930C5EC2DC1940"" />
   </Target>
@@ -2225,7 +2222,7 @@ public void MissingOptionalLoggersAreIgnored(string logger)
         [InlineData("/interactive /p:NuGetInteractive=true")]
         public void InteractiveSetsBuiltInProperty(string arguments)
         {
-            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
 
   <Target Name=""Build"">
     <Message Text=""MSBuildInteractive = [$(MSBuildInteractive)]"" />
@@ -2245,7 +2242,7 @@ public void InteractiveSetsBuiltInProperty(string arguments)
         public void BinaryLogContainsImportedFiles()
         {
             var testProject = _env.CreateFile("Importer.proj", ObjectModelHelpers.CleanupFileContents(@"
-            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            <Project>
                 <Import Project=""TestProject.proj"" />
 
                 <Target Name=""Build"">
@@ -2254,7 +2251,7 @@ public void BinaryLogContainsImportedFiles()
             </Project>"));
 
             _env.CreateFile("TestProject.proj", @"
-            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            <Project>
               <Target Name=""Build"">
                 <Message Text=""Hello from TestProject!"" />
               </Target>
@@ -2317,7 +2314,7 @@ public void BuildSlnOutOfProc()
 
             string testMessage = "Hello from TestProject!";
             _env.CreateFile("TestProject.proj", @$"
-            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            <Project>
               <Target Name=""Build"">
                 <Message Text=""{testMessage}"" />
               </Target>
@@ -2466,7 +2463,7 @@ private string CopyMSBuild()
             }
         }
 
-        private string ExecuteMSBuildExeExpectSuccess(string projectContents, IDictionary<string, string> filesToCreate = null,  IDictionary<string, string> envsToCreate = null, params string[] arguments)
+        private string ExecuteMSBuildExeExpectSuccess(string projectContents, IDictionary<string, string> filesToCreate = null, IDictionary<string, string> envsToCreate = null, params string[] arguments)
         {
             (bool result, string output) = ExecuteMSBuildExe(projectContents, filesToCreate, envsToCreate, arguments);
 
diff --git a/src/MSBuild/CommandLineSwitchException.cs b/src/MSBuild/CommandLineSwitchException.cs
index b1ee673c8ee..d5a4b8bb7a6 100644
--- a/src/MSBuild/CommandLineSwitchException.cs
+++ b/src/MSBuild/CommandLineSwitchException.cs
@@ -56,7 +56,6 @@ private CommandLineSwitchException
             StreamingContext context
         ) :
             base(info, context)
-
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
 
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index 07bfbacf461..23a059ab05b 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -267,7 +267,7 @@ bool emptyParametersAllowed
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingRestorePropertyError",         true,   false  ),
+            new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "interactive" },                       ParameterizedSwitch.Interactive,                null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "isolateprojects", "isolate" },        ParameterizedSwitch.IsolateProjects,            null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "graphbuild", "graph" },               ParameterizedSwitch.GraphBuild,                 null,                           true,           null,                                  true,   false  ),
diff --git a/src/MSBuild/InitializationException.cs b/src/MSBuild/InitializationException.cs
index 0461ba155f2..deb2a93f11c 100644
--- a/src/MSBuild/InitializationException.cs
+++ b/src/MSBuild/InitializationException.cs
@@ -61,7 +61,6 @@ private InitializationException
             StreamingContext context
         ) :
             base(info, context)
-
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
 
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index 8405d0474a0..adb4e7931cc 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -3,16 +3,14 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
+#if FEATURE_APPDOMAIN
 using System.Threading;
+#endif
 using System.Reflection;
 
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-#if FEATURE_APPDOMAIN
-using System.Runtime.Remoting;
-#endif
 
 #nullable disable
 
diff --git a/src/MSBuild/README.md b/src/MSBuild/README.md
new file mode 100644
index 00000000000..615053b15e9
--- /dev/null
+++ b/src/MSBuild/README.md
@@ -0,0 +1,12 @@
+ï»¿# Microsoft.Build.Runtime
+
+This package delivers a complete executable copy of MSBuild. Reference this
+package only if your application needs to load projects or execute in-process
+builds without requiring installation of MSBuild. Successfully evaluating
+projects using this package requires aggregating additional components (like the
+compilers) into an application directory.
+
+ðï¸ NOTE: if you are building an application that wants to use MSBuild to
+evaluate or build projects, you will generally not need this package. Instead,
+use [MSBuildLocator](https://aka.ms/msbuild/locator) to use a complete toolset
+provided by the .NET SDK or Visual Studio.
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 05e4e08e912..3ef0dabb711 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4,7 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.ComponentModel;
+#if FEATURE_SYSTEM_CONFIGURATION
 using System.Configuration;
+#endif
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
@@ -26,7 +28,6 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 #if (!STANDALONEBUILD)
 using Microsoft.Internal.Performance;
 #endif
@@ -678,7 +679,9 @@ string[] commandLine
                                     graphBuildOptions,
                                     lowPriority,
                                     inputResultsCaches,
-                                    outputResultsCache))
+                                    outputResultsCache,
+                                    commandLine
+                                    ))
                             {
                                 exitType = ExitType.BuildError;
                             }
@@ -1005,7 +1008,12 @@ internal static bool BuildProject
             GraphBuildOptions graphBuildOptions,
             bool lowPriority,
             string[] inputResultsCaches,
-            string outputResultsCache
+            string outputResultsCache,
+#if FEATURE_GET_COMMANDLINE
+            string commandLine
+#else
+            string[] commandLine
+#endif
         )
         {
             if (FileUtilities.IsVCProjFilename(projectFile) || FileUtilities.IsDspFilename(projectFile))
@@ -1206,9 +1214,17 @@ string outputResultsCache
 #endif
                     BuildResultCode? result = null;
 
-                    var messagesToLogInBuildLoggers = Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager
-                        ? null
-                        : GetMessagesToLogInBuildLoggers();
+                    IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
+                    if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)
+                    {
+                        var commandLineString = 
+#if FEATURE_GET_COMMANDLINE
+                            commandLine;
+#else
+                            string.Join(" ", commandLine);
+#endif
+                        messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);
+                    }
 
                     buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);
 
@@ -1354,7 +1370,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
             }
         }
 
-        private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers()
+        private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers(string commandLineString)
         {
             return new[]
             {
@@ -1371,7 +1387,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                         "CommandLine",
-                        Environment.CommandLine),
+                        commandLineString),
                     MessageImportance.Low),
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
@@ -1558,7 +1574,6 @@ private static void VerifyThrowSupportedOS()
         /// </summary>
         internal static void SetConsoleUI()
         {
-#if FEATURE_CULTUREINFO_CONSOLE_FALLBACK
             Thread thisThread = Thread.CurrentThread;
 
             // Eliminate the complex script cultures from the language selection.
@@ -1589,7 +1604,6 @@ internal static void SetConsoleUI()
                 thisThread.CurrentUICulture = new CultureInfo("en-US");
                 return;
             }
-#endif
 #if RUNTIME_TYPE_NETCORE
             // https://github.com/dotnet/roslyn/issues/10785#issuecomment-238940601
             // by default, .NET Core doesn't have all code pages needed for Console apps.
@@ -2444,7 +2458,7 @@ internal static bool ProcessNodeReuseSwitch(string[] parameters)
             }
 
 #if !FEATURE_NODE_REUSE
-            if(enableNodeReuse) // Only allowed to pass False on the command line for this switch if the feature is disabled for this installation
+            if (enableNodeReuse) // Only allowed to pass False on the command line for this switch if the feature is disabled for this installation
                 CommandLineSwitchException.Throw("InvalidNodeReuseTrueValue", parameters[parameters.Length - 1]);
 #endif
 
diff --git a/src/MSBuild/msbuild.suitebin.config b/src/MSBuild/msbuild.suitebin.config
deleted file mode 100644
index 848032d0dce..00000000000
--- a/src/MSBuild/msbuild.suitebin.config
+++ /dev/null
@@ -1,31 +0,0 @@
-ï»¿<?xml version ="1.0"?>
-<configuration>
-    <configSections>
-        <section name="msbuildToolsets" type="Microsoft.Build.BuildEngine.ToolsetConfigurationSection, Microsoft.Build.Engine, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /> 
-    </configSections>
-    <startup useLegacyV2RuntimeActivationPolicy="true">
-        <supportedRuntime version="v4.0"/>
-    </startup>
-    <runtime>
-        <generatePublisherEvidence enabled="false" />
-        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-            <dependentAssembly>
-                <assemblyIdentity name="Microsoft.Build.Framework" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
-                <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="4.0.0.0"/>
-            </dependentAssembly>
-            <dependentAssembly>
-                <assemblyIdentity name="Microsoft.Build.Engine" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
-                <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="4.0.0.0"/>
-            </dependentAssembly>
-            <dependentAssembly>
-                <assemblyIdentity name="Microsoft.CompactFramework.Build.Tasks" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
-                <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="9.0.0.0"/>
-            </dependentAssembly>
-        </assemblyBinding>
-    </runtime>
-    <msbuildToolsets>
-       <toolset toolsVersion="suitebin_toolset">
-          <property name="MSBuildBinPath" value="."/>
-       </toolset>
-    </msbuildToolsets>
-</configuration>
diff --git a/src/MSBuild/msbuild_rascal.manifest b/src/MSBuild/msbuild_rascal.manifest
deleted file mode 100644
index 64db722f8f4..00000000000
--- a/src/MSBuild/msbuild_rascal.manifest
+++ /dev/null
@@ -1,9 +0,0 @@
-ï»¿<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
-<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
-    <dependency>
-        <dependentAssembly>
-            <assemblyIdentity type="win32" name="mscoree.tlb" processorArchitecture="X86" version="1.0.0.0">
-            </assemblyIdentity>
-        </dependentAssembly>
-    </dependency>
-</assembly>
diff --git a/src/MSBuild/xclpupdate.bat b/src/MSBuild/xclpupdate.bat
deleted file mode 100644
index 512cb096bc6..00000000000
--- a/src/MSBuild/xclpupdate.bat
+++ /dev/null
@@ -1,36 +0,0 @@
-ï»¿@if "%_echo%"=="" echo off
-
-::@echo ... Starting msbuild.exe (only) pupdate ...
-echo Starting msbuild.exe (only) update...
-setlocal
-
-if exist xpupdate.log del xpupdate.log
-
-
-for /f %%i in ('dir /b /ad /on %windir%\microsoft.net\framework\v4.*') do set fxpath=%windir%\microsoft.net\framework\%%i
-
-call :Doit copy %_NTTREE%\bin\i386\msbuild.??? %fxpath% /y
-call :Doit copy %_NTTREE%\bin\i386\msbuild.urt.config %fxpath%\msbuild.exe.config /y
-
-@echo Now kicking off async refresh of native images ...
-
-setlocal
-set complus_installroot=
-set complus_version=
-
- start "update native image for msbuildexe" /low /min %fxpath%\ngen install "%_NTTREE%\bin\i386\msbuild.exe"
-
-endlocal
-
-
-goto :eof
-
-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
-:doit
-echo %* >> xpupdate.log
-%* >> xpupdate.log 2>&1 2>con
-if errorlevel 1 echo Error running command "%*" >> xpupdate.log > con
-goto :eof
-
-
diff --git a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.csproj b/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.csproj
deleted file mode 100644
index 5e0ca03263a..00000000000
--- a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.csproj
+++ /dev/null
@@ -1,34 +0,0 @@
-ï»¿<Project Sdk="Microsoft.NET.Sdk">
-  <!-- Don't try to build this package if building for Mono, using .NET Core, or building on non-Windows -->
-  <PropertyGroup>
-    <DisableProject Condition="'$(MonoBuild)' == 'true'">true</DisableProject>
-    <DisableProject Condition="'$(MSBuildRuntimeType)' == 'Core'">true</DisableProject>
-    <DisableProject Condition="! $([MSBuild]::IsOSPlatform('windows'))">true</DisableProject>
-  </PropertyGroup>
-  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(DisableProject)' == 'true'" />
-
-  <PropertyGroup>
-    <TargetFramework>$(FullFrameworkTFM)</TargetFramework>
-    <NuspecFile>MSBuild.Engine.Corext.nuspec</NuspecFile>
-    <PlatformTarget>x86</PlatformTarget>
-
-    <IsShipping>false</IsShipping>
-    <NoPackageAnalysis>true</NoPackageAnalysis>
-    <NuspecProperties>$(NuspecProperties);repoRoot=$(RepoRoot.TrimEnd('\\/'))</NuspecProperties>
-    <DisableSemVer2>true</DisableSemVer2>
-    <IsVisualStudioInsertionPackage>true</IsVisualStudioInsertionPackage>
-  </PropertyGroup>
-
-  <Import Project="..\NuspecProject.targets"  Condition="'$(DisableProject)' != 'true'" />
-  <Import Project="..\GetBinPaths.targets" Condition="'$(DisableProject)' != 'true'" />
-
-  <Target Name="SetNuspecBinPathProperties" DependsOnTargets="SetBinPaths" BeforeTargets="SetNuspecProperties">
-    <PropertyGroup>
-      <NuspecProperties>$(NuspecProperties);X86BinPath=$(X86BinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);X64BinPath=$(X64BinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);TaskHostBinPath=$(MSBuildTaskHostBinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);TaskHostX64BinPath=$(MSBuildTaskHostX64BinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);MSBuildConversionBinPath=$(MSBuildConversionBinPath.TrimEnd('\\/'))</NuspecProperties>
-    </PropertyGroup>
-  </Target>
-</Project>
diff --git a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.cxspec b/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.cxspec
deleted file mode 100644
index c457e5ab711..00000000000
--- a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.cxspec
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <aggregate id="MsBuild.Corext" version="15.0"/>
-</package>
\ No newline at end of file
diff --git a/src/Package/MSBuild.Engine.Corext/MsBuild.Engine.Corext.nuspec b/src/Package/MSBuild.Engine.Corext/MsBuild.Engine.Corext.nuspec
deleted file mode 100644
index 04a42dbfce4..00000000000
--- a/src/Package/MSBuild.Engine.Corext/MsBuild.Engine.Corext.nuspec
+++ /dev/null
@@ -1,137 +0,0 @@
-ï»¿<?xml version="1.0"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata>
-    <id>MsBuild.Engine.Corext</id>
-    <summary>Aggregate of MsBuild.Corext with the latest MSBuild team deliverables</summary>
-    <description>Use this package to update your existing MsBuild.Corext package to the latest MSBuild binaries and core build files.</description>
-    <projectUrl>$projectUrl$</projectUrl>
-    <license type="expression">$licenseExpression$</license>
-    <requireLicenseAcceptance>false</requireLicenseAcceptance>
-    <authors>Microsoft</authors>
-    <copyright>Â© Microsoft Corporation. All rights reserved.</copyright>
-    <version>$version$</version>
-  </metadata>
-
-  <files>
-    <file src="$repoRoot$\src\Package\MsBuild.Engine.Corext\MsBuild.Engine.Corext.cxspec" target=""/>
-    <file src="$repoRoot$/src/Package/MsBuild.Engine.Corext/README.md" target=""/>
-    <file src="$repoRoot$/THIRDPARTYNOTICES.txt" target="v15.0/bin/THIRDPARTYNOTICES.txt" />
-    <file src="$X86BinPath$/Microsoft.Common.props" target="\Extensions\15.0" />
-    <file src="$X86BinPath$/Microsoft.Common.props" target="\Extensions\Current" />
-    <file src="$X86BinPath$/Microsoft.VisualStudioVersion.v15.Common.props" target="\Extensions\15.0" />
-
-    <!-- x86 -->
-
-    <file src="$X86BinPath$/MSBuild.exe" target="v15.0/bin" />
-    <file src="$TaskHostBinPath$/MSBuildTaskHost.exe" target="v15.0/bin" />
-    <file src="$TaskHostBinPath$/MSBuildTaskHost.exe.config" target="v15.0/bin" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Conversion.Core.dll" target="v15.0/bin" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Engine.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.Framework.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.Tasks.Core.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.Utilities.Core.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.IO.Redist.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Collections.Immutable.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Memory.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Text.Json.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Bcl.AsyncInterfaces.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Buffers.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Text.Encodings.Web.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Extensions.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.ValueTuple.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Numerics.Vectors.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Resources.Extensions.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Runtime.CompilerServices.Unsafe.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Dataflow.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NET.StringTools.dll" target="v15.0/bin" />
-    <file src="$TaskHostBinPath$/Microsoft.NET.StringTools.net35.dll" target="v15.0/bin" />
-
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.Core.xsd" target="v15.0/bin/MSBuild" />
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.CommonTypes.xsd" target="v15.0/bin/MSBuild" />
-    <file src="$X86BinPath$/MSBuild.rsp" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Managed.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Managed.Before.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Managed.After.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.CSharp.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.CrossTargeting.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.overridetasks" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.tasks" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CrossTargeting.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Data.Entity.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.ServiceModel.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CrossTargeting.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.WinFx.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.WorkflowBuildExtensions.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Xaml.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Workflow.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Workflow.VisualBasic.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Net.props" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.props" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.props" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.targets" target="v15.0/bin" />
-
-    <!-- x64 -->
-
-    <file src="$X64BinPath$/MSBuild.exe" target="v15.0/bin/amd64" />
-    <file src="$TaskHostX64BinPath$/MSBuildTaskHost.exe" target="v15.0/bin/amd64" />
-    <file src="$TaskHostX64BinPath$/MSBuildTaskHost.exe.config" target="v15.0/bin/amd64" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Conversion.Core.dll" target="v15.0/bin/amd64" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Engine.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.Framework.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.Tasks.Core.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.Utilities.Core.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.IO.Redist.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Collections.Immutable.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Memory.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Text.Json.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Bcl.AsyncInterfaces.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Buffers.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Text.Encodings.Web.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Extensions.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.ValueTuple.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Numerics.Vectors.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Resources.Extensions.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Runtime.CompilerServices.Unsafe.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Dataflow.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NET.StringTools.dll" target="v15.0/bin/amd64" />
-    <file src="$TaskHostBinPath$/Microsoft.NET.StringTools.net35.dll" target="v15.0/bin/amd64" />
-
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.Core.xsd" target="v15.0/bin/amd64/MSBuild" />
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.CommonTypes.xsd" target="v15.0/bin/amd64/MSBuild" />
-    <file src="$X86BinPath$/MSBuild.rsp" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Managed.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Managed.Before.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Managed.After.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.CSharp.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.CrossTargeting.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.overridetasks" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.tasks" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CrossTargeting.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Data.Entity.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.ServiceModel.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CrossTargeting.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.WinFx.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.WorkflowBuildExtensions.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Xaml.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Workflow.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Workflow.VisualBasic.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Net.props" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.props" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.props" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.targets" target="v15.0/bin/amd64" />
-  </files>
-</package>
diff --git a/src/Package/MSBuild.Engine.Corext/README.md b/src/Package/MSBuild.Engine.Corext/README.md
deleted file mode 100644
index c3d066fc458..00000000000
--- a/src/Package/MSBuild.Engine.Corext/README.md
+++ /dev/null
@@ -1,10 +0,0 @@
-# MSBuild.Engine.Corext
-
-This package is useful only inside Microsoft. It includes the files that MSBuild ships into Visual Studio via its `.vsix` in a different format that is used internally.
-Paths are adjusted to match the preexisting CoreXT package MsBuild.Corext.
-
-Files in the MSBuild VSIX which are not in this package:
-
-- msbuild satellite assemblies (no translation needed for internal developer scenarios)
-- MSBuild.exe.config (MsBuild.Corext has manual edits to this file)
-- *pkgdef (VS specific)
diff --git a/src/Package/MSBuild.Engine.Corext/TestBuild.cmd b/src/Package/MSBuild.Engine.Corext/TestBuild.cmd
deleted file mode 100644
index 3b5562f0424..00000000000
--- a/src/Package/MSBuild.Engine.Corext/TestBuild.cmd
+++ /dev/null
@@ -1,17 +0,0 @@
-
-set repoRoot=%~dp0..\..\
-
-pushd %repoRoot%
-set repoRoot=%CD%
-popd
-
-set X86BinPath=%repoRoot%\bin\Release\x86\Windows_NT\Output
-set X64BinPath=%repoRoot%\bin\Release\x64\Windows_NT\Output
-
-set version=0.0.0.0
-
-if not "%1" == "" (
-    set version=%1
-)
-
-nuget pack -noPackageAnalysis -Properties "version=%version%;repoRoot=%repoRoot%;X86BinPath=%X86BinPath%;X64BinPath=%X64BinPath%"
diff --git a/src/Packages.dgml b/src/Packages.dgml
deleted file mode 100644
index 5a754cb5bb3..00000000000
--- a/src/Packages.dgml
+++ /dev/null
@@ -1,20 +0,0 @@
-ï»¿<?xml version="1.0" encoding="utf-8"?>
-<DirectedGraph GraphDirection="LeftToRight" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
-  <Nodes>
-    <Node Id="Microsoft.Build.Framework" Label="Microsoft.Build.Framework" Category="Project" />
-    <Node Id="Microsoft.Tpl.Dataflow 4.5.24" Label="Microsoft.Tpl.Dataflow 4.5.24" Category="Package" />
-  </Nodes>
-  <Links>
-    <Link Source="Microsoft.Build.Framework" Target="Microsoft.Tpl.Dataflow 4.5.24" Category="Installed Package" />
-  </Links>
-  <Categories>
-    <Category Id="Project" />
-    <Category Id="Package" />
-  </Categories>
-  <Styles>
-    <Style TargetType="Node" GroupLabel="Project" ValueLabel="True">
-      <Condition Expression="HasCategory('Project')" />
-      <Setter Property="Background" Value="Blue" />
-    </Style>
-  </Styles>
-</DirectedGraph>
\ No newline at end of file
diff --git a/src/Samples/Directory.Build.props b/src/Samples/Directory.Build.props
index 6b9d6cd9f29..317ef14a6bb 100644
--- a/src/Samples/Directory.Build.props
+++ b/src/Samples/Directory.Build.props
@@ -8,6 +8,7 @@
     <EnableCentralPackageVersions>false</EnableCentralPackageVersions>
 
     <IsShipping>false</IsShipping>
+    <ExcludeFromSourceBuild>true</ExcludeFromSourceBuild>
   </PropertyGroup>
 
   <!-- Import parent props -->
diff --git a/src/Samples/MultiprocessBuild/1.csproj b/src/Samples/MultiprocessBuild/1.csproj
index 969ebd61564..fbd4c35b5c5 100644
--- a/src/Samples/MultiprocessBuild/1.csproj
+++ b/src/Samples/MultiprocessBuild/1.csproj
@@ -1,4 +1,4 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project>
   <PropertyGroup>
     <AssemblyPath Condition="'$(AssemblyPath)' == ''">PortableTask.dll</AssemblyPath>
   </PropertyGroup>
diff --git a/src/Samples/MultiprocessBuild/2.csproj b/src/Samples/MultiprocessBuild/2.csproj
index 41b58f20011..96117ad4cbc 100644
--- a/src/Samples/MultiprocessBuild/2.csproj
+++ b/src/Samples/MultiprocessBuild/2.csproj
@@ -1,4 +1,4 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project>
   <PropertyGroup>
     <AssemblyPath Condition="'$(AssemblyPath)' == ''">PortableTask.dll</AssemblyPath>
   </PropertyGroup>
@@ -8,4 +8,4 @@
     <Sleep Seconds="3" />
      <Message Importance="high" Text="## finishing 2 ##"/>
   </Target>
-</Project> 
\ No newline at end of file
+</Project>
\ No newline at end of file
diff --git a/src/Samples/MultiprocessBuild/root.proj b/src/Samples/MultiprocessBuild/root.proj
index 0b092a78802..523c4e7109d 100644
--- a/src/Samples/MultiprocessBuild/root.proj
+++ b/src/Samples/MultiprocessBuild/root.proj
@@ -1,4 +1,4 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project>
   <Target Name="t">
     <Message Importance="high" Text="## in root building children ##"/>
     <MSBuild Projects="1.csproj;2.csproj" BuildInParallel="true"/>
diff --git a/src/Samples/PortableTask/portableTaskTest.proj b/src/Samples/PortableTask/portableTaskTest.proj
index 7ba2ebcf48d..e2d00979f2a 100644
--- a/src/Samples/PortableTask/portableTaskTest.proj
+++ b/src/Samples/PortableTask/portableTaskTest.proj
@@ -1,9 +1,9 @@
-<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  
+<Project ToolsVersion="12.0" DefaultTargets="Build">
+
   <PropertyGroup>
     <AssemblyPath Condition="'$(AssemblyPath)' == ''">PortableTask.dll</AssemblyPath>
   </PropertyGroup>
-  
+
   <UsingTask TaskName="ShowItems" AssemblyFile="$(AssemblyPath)"/>
   <ItemGroup>
     <TestItems Include="$(MSBuildBinPath)\**\Microsoft.Build.*.dll"/>
diff --git a/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs b/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs
index df443a76c86..bb50bfa5800 100644
--- a/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs
+++ b/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs
@@ -80,7 +80,6 @@ private static List<AssemblyFolderItem> GatherVersionStrings(string targetRuntim
                 (from folder in collection.AssemblyFolders
                  let targetVersion = VersionUtilities.ConvertToVersion(targetRuntimeVersion)
                  let replacementVersion = GetFrameworkVersion(folder.FrameworkVersion)
-                 
                  where targetVersion != null && targetVersion >= replacementVersion
                  orderby folder.FrameworkVersion descending 
                  select folder).ToList();
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index e4a14d72ef7..d0ad67ed140 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -8,7 +8,6 @@
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
 
-using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Shared/EventArgsFormatting.cs b/src/Shared/EventArgsFormatting.cs
index b6903a50c3c..6fee2e7ba50 100644
--- a/src/Shared/EventArgsFormatting.cs
+++ b/src/Shared/EventArgsFormatting.cs
@@ -219,7 +219,9 @@ internal static string FormatEventMessage
             string logOutputProperties
         )
         {
-            StringBuilder format = new StringBuilder();
+            // capacity is the longest possible path through the below
+            // to avoid reallocating while constructing the string
+            using ReuseableStringBuilder format = new(51);
 
             // Uncomment these lines to show show the processor, if present.
             /*
@@ -328,9 +330,11 @@ string logOutputProperties
 
             string finalFormat = format.ToString();
 
+            // Reuse the string builder to create the final message
+            ReuseableStringBuilder formattedMessage = format.Clear();
+
             // If there are multiple lines, show each line as a separate message.
             string[] lines = SplitStringOnNewLines(message);
-            StringBuilder formattedMessage = new StringBuilder();
 
             for (int i = 0; i < lines.Length; i++)
             {
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index bd5891a0b0a..f4ebaa3bc9c 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -9,7 +9,9 @@ namespace Microsoft.Build.AppxPackage.Shared
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
 using System.Diagnostics.CodeAnalysis;
+#endif
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -21,7 +23,7 @@ namespace Microsoft.Build.AppxPackage.Shared
 using Microsoft.Build.Shared.FileSystem;
 using System.Xml.Schema;
 using System.Runtime.Serialization;
-#if !CLR2COMPATIBILITY
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
 using Microsoft.Build.Shared.Debugging;
 #endif
 using Microsoft.Build.Framework;
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 0cc71e74734..7af174db82b 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -12,7 +12,6 @@
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 6a6bf071998..3d467547ad4 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -1089,27 +1089,6 @@ internal static string MakeRelative(string basePath, string path)
             return StringBuilderCache.GetStringAndRelease(sb);
         }
 
-        /// <summary>
-        /// Helper function to create an Uri object from path.
-        /// </summary>
-        /// <param name="path">path string</param>
-        /// <returns>uri object</returns>
-        private static Uri CreateUriFromPath(string path)
-        {
-            ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));
-
-            Uri pathUri;
-
-            // Try absolute first, then fall back on relative, otherwise it
-            // makes some absolute UNC paths like (\\foo\bar) relative ...
-            if (!Uri.TryCreate(path, UriKind.Absolute, out pathUri))
-            {
-                pathUri = new Uri(path, UriKind.Relative);
-            }
-
-            return pathUri;
-        }
-
         /// <summary>
         /// Normalizes the path if and only if it is longer than max path,
         /// or would be if rooted by the current directory.
diff --git a/src/Shared/FileUtilitiesRegex.cs b/src/Shared/FileUtilitiesRegex.cs
index 0c94e83cd23..de492cc69ac 100644
--- a/src/Shared/FileUtilitiesRegex.cs
+++ b/src/Shared/FileUtilitiesRegex.cs
@@ -124,7 +124,7 @@ internal static int StartsWithUncPatternMatchLength(string pattern)
                         // We get here in the case of an extra slash.
                         return -1;
                     }
-                    else if(hasShare)
+                    else if (hasShare)
                     {
                         return i;
                     }
@@ -138,7 +138,7 @@ internal static int StartsWithUncPatternMatchLength(string pattern)
                 }
             }
 
-            if(!hasShare)
+            if (!hasShare)
             {
                 // no subfolder means no unc pattern. string is something like "\\abc" in this case
                 return -1;
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index d6d09b7f69d..ce66179fa8c 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -2,20 +2,18 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.IO;
-using System.Linq;
 using System.Reflection;
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 
-#if !TASKHOST
-using Microsoft.Build.Evaluation;
+#if !TASKHOST && !MSBUILDENTRYPOINTEXE
+using Microsoft.Build.Collections;
 using Microsoft.Build.Framework.Profiler;
-using Microsoft.Build.Execution;
+using System.Collections;
+using System.Linq;
 #endif
 
 #if FEATURE_APPDOMAIN
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index c553d8e36ac..e49e0d0d041 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Linq;
 using System.Reflection;
 
 using Microsoft.Build.Framework;
@@ -37,11 +36,7 @@ internal static class TaskLoader
         internal static bool IsTaskClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass && !type.GetTypeInfo().IsAbstract && (
-#if FEATURE_TYPE_GETINTERFACE
                 type.GetTypeInfo().GetInterface("Microsoft.Build.Framework.ITask") != null);
-#else
-                type.GetInterfaces().Any(interfaceType => interfaceType.FullName == "Microsoft.Build.Framework.ITask"));
-#endif
         }
 
         /// <summary>
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 4f79f3ad053..515500a98b0 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -284,11 +284,8 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
                 escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
                 IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();
 
-                if (nonGenericEscapedMetadata is Dictionary<string, string>)
-                {
-                    escapedMetadata = (Dictionary<string, string>)nonGenericEscapedMetadata;
-                }
-                else
+                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;
+                if (escapedMetadata is null)
                 {
                     escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                     foreach (object key in nonGenericEscapedMetadata.Keys)
diff --git a/src/Shared/ToolsetElement.cs b/src/Shared/ToolsetElement.cs
index 164ed3ca25b..3e96ab7c6cb 100644
--- a/src/Shared/ToolsetElement.cs
+++ b/src/Shared/ToolsetElement.cs
@@ -8,7 +8,6 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index bc73e420dc1..649d0ff35db 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -6,8 +6,10 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+#if MICROSOFT_BUILD_ENGINE_UNITTESTS
 using System.Text;
 using Microsoft.Build.BackEnd.Logging;
+#endif
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -22,7 +24,9 @@ namespace Microsoft.Build.UnitTests
     public partial class TestEnvironment
     {
         // reset the default build manager and the state it might have accumulated from other tests
+#pragma warning disable CA1823 // Avoid unused private fields
         private object _resetBuildManager = new ResetDefaultBuildManager();
+#pragma warning restore CA1823 // Avoid unused private fields
 
         private class ResetDefaultBuildManager
         {
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index 496525cb47f..bca3773e17a 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -13,7 +13,6 @@
 using Microsoft.Build.Shared.FileSystem;
 using Xunit;
 using Xunit.Abstractions;
-using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 72bdbee3979..d6c10b453e0 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -122,7 +122,7 @@ internal static void AssertItemEvaluationFromProject(string projectContents, str
                 {
                     return new Project(p, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, c)
                         .Items
-                        .Select(i => (TestItem) new ProjectItemTestItemAdapter(i))
+                        .Select(i => (ITestItem)new ProjectItemTestItemAdapter(i))
                         .ToList();
                 },
             projectContents,
@@ -133,7 +133,7 @@ internal static void AssertItemEvaluationFromProject(string projectContents, str
             normalizeSlashes);
         }
 
-        internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, ProjectCollection, IList<TestItem>> itemEvaluator, string projectContents, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false)
+        internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, ProjectCollection, IList<ITestItem>> itemEvaluator, string projectContents, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false)
         {
             using (var env = TestEnvironment.Create())
             using (var collection = new ProjectCollection())
@@ -197,14 +197,14 @@ internal static string NormalizeSlashes(string path)
         }
 
         // todo Make IItem<M> public and add these new members to it.
-        internal interface TestItem
+        internal interface ITestItem
         {
             string EvaluatedInclude { get; }
             int DirectMetadataCount { get; }
             string GetMetadataValue(string key);
         }
 
-        internal class ProjectItemTestItemAdapter : TestItem
+        internal class ProjectItemTestItemAdapter : ITestItem
         {
             private readonly ProjectItem _projectInstance;
 
@@ -223,7 +223,7 @@ public static implicit operator ProjectItemTestItemAdapter(ProjectItem pi)
             }
         }
 
-        internal class ProjectItemInstanceTestItemAdapter : TestItem
+        internal class ProjectItemInstanceTestItemAdapter : ITestItem
         {
             private readonly ProjectItemInstance _projectInstance;
 
@@ -244,14 +244,14 @@ public static implicit operator ProjectItemInstanceTestItemAdapter(ProjectItemIn
 
         internal static void AssertItems(string[] expectedItems, ICollection<ProjectItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
         {
-            var converteditems = items.Select(i => (TestItem) new ProjectItemTestItemAdapter(i)).ToList();
+            var converteditems = items.Select(i => (ITestItem)new ProjectItemTestItemAdapter(i)).ToList();
             AssertItems(expectedItems, converteditems, expectedDirectMetadata, normalizeSlashes);
         }
 
         /// <summary>
         /// Asserts that the list of items has the specified evaluated includes.
         /// </summary>
-        internal static void AssertItems(string[] expectedItems, IList<TestItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
+        internal static void AssertItems(string[] expectedItems, IList<ITestItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
         {
             if (expectedDirectMetadata == null)
             {
@@ -271,11 +271,11 @@ internal static void AssertItems(string[] expectedItems, IList<TestItem> items,
 
         public static void AssertItems(string[] expectedItems, IList<ProjectItem> items, Dictionary<string, string>[] expectedDirectMetadataPerItem, bool normalizeSlashes = false)
         {
-            var convertedItems = items.Select(i => (TestItem) new ProjectItemTestItemAdapter(i)).ToList();
+            var convertedItems = items.Select(i => (ITestItem)new ProjectItemTestItemAdapter(i)).ToList();
             AssertItems(expectedItems, convertedItems, expectedDirectMetadataPerItem, normalizeSlashes);
         }
 
-        public static void AssertItems(string[] expectedItems, IList<TestItem> items, Dictionary<string, string>[] expectedDirectMetadataPerItem, bool normalizeSlashes = false)
+        public static void AssertItems(string[] expectedItems, IList<ITestItem> items, Dictionary<string, string>[] expectedDirectMetadataPerItem, bool normalizeSlashes = false)
         {
             if (items.Count != 0 || expectedDirectMetadataPerItem.Length != 0)
             {
@@ -467,7 +467,7 @@ internal static void AssertItemHasMetadata(string key, string value, ProjectItem
             item.GetMetadataValue(key).ShouldBe(value);
         }
 
-        internal static void AssertItemHasMetadata(Dictionary<string, string> expected, TestItem item)
+        internal static void AssertItemHasMetadata(Dictionary<string, string> expected, ITestItem item)
         {
             expected ??= new Dictionary<string, string>();
 
@@ -716,7 +716,7 @@ internal static Project CreateInMemoryProject
             string toolsVersion /* may be null */
             )
         {
-            XmlReaderSettings readerSettings = new XmlReaderSettings {DtdProcessing = DtdProcessing.Ignore};
+            XmlReaderSettings readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
 
             Project project = new Project
                 (
@@ -1102,7 +1102,7 @@ internal static string FormatProjectContentsWithItemGroupFragment(string fragmen
         {
             return
                 $@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             {fragment}
                         </ItemGroup>
@@ -1384,8 +1384,8 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,
                 if (logger != null)
                 {
                     parameters.Loggers = parameters.Loggers == null
-                        ? new[] {logger}
-                        : parameters.Loggers.Concat(new[] {logger});
+                        ? new[] { logger }
+                        : parameters.Loggers.Concat(new[] { logger });
                 }
 
                 var request = new BuildRequestData(
@@ -1585,7 +1585,7 @@ internal static TransientTestFile CreateProjectFile(
 
             sb.Append("</ItemGroup>");
 
-            
+
             foreach (var defaultTarget in (defaultTargets ?? string.Empty).Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
             {
                 sb.Append("<Target Name='").Append(defaultTarget).Append("'/>");
@@ -1783,7 +1783,7 @@ internal static void VerifyAssertThrowsInvalidOperation(Action method)
         /// </summary>
         internal static void VerifyAssertLineByLine(string expected, string actual, bool ignoreFirstLineOfActual, ITestOutputHelper testOutput = null)
         {
-            Action<string> LogLine = testOutput == null ? (Action<string>) Console.WriteLine : testOutput.WriteLine;
+            Action<string> LogLine = testOutput == null ? (Action<string>)Console.WriteLine : testOutput.WriteLine;
 
             string[] actualLines = SplitIntoLines(actual);
 
@@ -1934,7 +1934,7 @@ public BuildManagerSession(
                 _env = env;
 
                 Logger = new MockLogger(_env.Output);
-                var loggers = new[] {Logger};
+                var loggers = new[] { Logger };
 
                 var actualBuildParameters = buildParameters ?? new BuildParameters();
 
diff --git a/src/StringTools/README.md b/src/StringTools/README.md
new file mode 100644
index 00000000000..76545b3e522
--- /dev/null
+++ b/src/StringTools/README.md
@@ -0,0 +1,5 @@
+# Microsoft.NET.StringTools
+
+This package contains the Microsoft.NET.StringTools assembly which implements common string-related functionality such as weak interning.
+
+At this time, this is primarily an internal implementation detail of MSBuild and Visual Studio and we do not expect other consumers of the package. If you think you might like to use it, please start a discussion at https://github.com/dotnet/msbuild/discussions to let us know your use cases.
diff --git a/src/StringTools/StringTools.cs b/src/StringTools/StringTools.cs
index fbe794342b9..664057961b5 100644
--- a/src/StringTools/StringTools.cs
+++ b/src/StringTools/StringTools.cs
@@ -6,7 +6,6 @@
 namespace Microsoft.NET.StringTools
 {
     public static class Strings
-
     {
         #region Fields
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
index 203d24a251f..e7f155ac3b0 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
@@ -269,7 +269,7 @@ public void ExistsPromotedDependencyInTheBlackList()
         /// In this case,
         /// - A single primary file reference to assembly version 1.0.0.0 was passed in.
         /// - An app.config was passed in that promotes a *different* assembly version name from 
-        // 1.0.0.0 to 2.0.0.0
+        ///   1.0.0.0 to 2.0.0.0
         /// - Version 1.0.0.0 of the file exists.
         /// - Version 2.0.0.0 of the file exists.
         /// Expected:
diff --git a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
index fcb3071ded9..f3eb199906b 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
@@ -87,7 +87,7 @@ public void Exists()
         /// In this case,
         /// - A single primary non-version-strict reference was passed in to assembly version 1.0.0.0
         /// - An app.config was passed in that promotes a *different* assembly version name from 
-        // 1.0.0.0 to 2.0.0.0
+        ///   1.0.0.0 to 2.0.0.0
         /// - Version 1.0.0.0 of the file exists.
         /// - Version 2.0.0.0 of the file exists.
         /// Expected:
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
index 0ff90cdeec1..c4f78439042 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
@@ -169,7 +169,7 @@ public void ExistsPromotedDependencyInTheBlackList()
         /// - A single reference to DependsOnUnified was passed in.
         ///   - This assembly depends on version 1.0.0.0 of UnifyMe.
         /// - An app.config was passed in that promotes a *different* assembly version name from
-        // 1.0.0.0 to 2.0.0.0
+        ///   1.0.0.0 to 2.0.0.0
         /// - Version 1.0.0.0 of the file exists.
         /// - Version 2.0.0.0 of the file exists.
         /// Expected:
diff --git a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
index 7cd55cfd289..a9535bfac91 100644
--- a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
+++ b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
@@ -355,7 +355,7 @@ public void VerifyDefaultValueDefaultToVcxPlatformMappings()
 
             AssignProjectConfiguration assignProjectConfiguration = new AssignProjectConfiguration();
 
-            /// Test defaults with nothing set
+            // Test defaults with nothing set
             string actualDefaultToVcxPlatformMapping = assignProjectConfiguration.DefaultToVcxPlatformMapping;
             Assert.Equal(actualDefaultToVcxPlatformMapping, expectedDefaultToVcxPlatformMapping);
 
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 95fda75c8df..bf6fc63eb77 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -26,9 +26,9 @@ public sealed class CodeTaskFactoryTests
         public void BuildTaskSimpleCodeFactory()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -48,17 +48,17 @@ public void BuildTaskSimpleCodeFactory()
 
         /// <summary>
         /// Test the simple case where we have a string parameter and we want to log that.
-        /// Specifically testing that even when the ToolsVersion is post-4.0, and thus 
-        /// Microsoft.Build.Tasks.v4.0.dll is expected to NOT be in MSBuildToolsPath, that 
+        /// Specifically testing that even when the ToolsVersion is post-4.0, and thus
+        /// Microsoft.Build.Tasks.v4.0.dll is expected to NOT be in MSBuildToolsPath, that
         /// we will redirect under the covers to use the current tasks instead.
         /// </summary>
         [Fact]
         public void BuildTaskSimpleCodeFactory_RedirectFrom4()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -79,17 +79,17 @@ public void BuildTaskSimpleCodeFactory_RedirectFrom4()
 
         /// <summary>
         /// Test the simple case where we have a string parameter and we want to log that.
-        /// Specifically testing that even when the ToolsVersion is post-12.0, and thus 
-        /// Microsoft.Build.Tasks.v12.0.dll is expected to NOT be in MSBuildToolsPath, that 
+        /// Specifically testing that even when the ToolsVersion is post-12.0, and thus
+        /// Microsoft.Build.Tasks.v12.0.dll is expected to NOT be in MSBuildToolsPath, that
         /// we will redirect under the covers to use the current tasks instead.
         /// </summary>
         [Fact]
         public void BuildTaskSimpleCodeFactory_RedirectFrom12()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -111,17 +111,17 @@ public void BuildTaskSimpleCodeFactory_RedirectFrom12()
         /// <summary>
         /// Test the simple case where we have a string parameter and we want to log that.
         /// Specifically testing that even when the ToolsVersion is post-4.0, and we have redirection
-        /// logic in place for the AssemblyFile case to deal with Microsoft.Build.Tasks.v4.0.dll not 
-        /// being in MSBuildToolsPath anymore, that this does NOT affect full fusion AssemblyNames -- 
-        /// it's picked up from the GAC, where it is anyway, so there's no need to redirect. 
+        /// logic in place for the AssemblyFile case to deal with Microsoft.Build.Tasks.v4.0.dll not
+        /// being in MSBuildToolsPath anymore, that this does NOT affect full fusion AssemblyNames --
+        /// it's picked up from the GAC, where it is anyway, so there's no need to redirect.
         /// </summary>
         [Fact]
         public void BuildTaskSimpleCodeFactory_NoAssemblyNameRedirect()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyName=`Microsoft.Build.Tasks.Core, Version=15.1.0.0` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -147,9 +147,9 @@ public void BuildTaskSimpleCodeFactory_NoAssemblyNameRedirect()
         public void VerifyRequiredAttribute()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_VerifyRequiredAttribute` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text Required='true'/>
                           </ParameterGroup>
                             <Task>
@@ -174,9 +174,9 @@ public void VerifyRequiredAttribute()
         public void RuntimeException()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_RuntimeException` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -203,9 +203,9 @@ public void RuntimeException()
         public void EmptyLanguage()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyLanguage` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -232,9 +232,9 @@ public void EmptyLanguage()
         public void EmptyType()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -261,9 +261,9 @@ public void EmptyType()
         public void EmptySource()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptySource` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -290,9 +290,9 @@ public void EmptySource()
         public void EmptyReferenceInclude()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyReferenceInclude` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -320,9 +320,9 @@ public void EmptyReferenceInclude()
         public void EmptyUsingNamespace()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyUsingNamespace` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -349,9 +349,9 @@ public void EmptyUsingNamespace()
         public void ReferenceNotPath()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_ReferenceNotPath` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -378,9 +378,9 @@ public void ReferenceNotPath()
         public void ReferenceInvalidChars()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_ReferenceInvalidChars` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -408,9 +408,9 @@ public void ReferenceInvalidChars()
         public void UsingInvalidChars()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_UsingInvalidChars` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -438,9 +438,9 @@ public void SourcesInvalidFile()
             string tempFileName = "Moose_" + Guid.NewGuid().ToString() + ".cs";
 
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_SourcesInvalidFile` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -466,9 +466,9 @@ public void SourcesInvalidFile()
         public void MissingCodeElement()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_MissingCodeElement` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -490,9 +490,9 @@ public void MissingCodeElement()
         public void BuildTaskSimpleCodeFactoryTestExtraUsing()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestExtraUsing` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -520,7 +520,7 @@ public void BuildTaskSimpleCodeFactoryTestExtraUsing()
         public void BuildTaskDateCodeFactory()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`DateTaskFromCodeFactory_BuildTaskDateCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                             <ParameterGroup>
                                <CurrentDate ParameterType=`System.String` Output=`true` />
@@ -551,7 +551,7 @@ public void BuildTaskDateCodeFactory()
         public void MethodImplmentationVB()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CodeMethod_MethodImplmentationVB` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Text ParameterType='System.String' />
@@ -583,9 +583,9 @@ End Function
         public void BuildTaskSimpleCodeFactoryTestSystemVB()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestSystemVB` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -612,9 +612,9 @@ Dim headerRequest As String
         public void BuildTaskSimpleCodeFactoryTestSystemCS()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestSystemCS` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -634,7 +634,7 @@ public void BuildTaskSimpleCodeFactoryTestSystemCS()
         }
 
         /// <summary>
-        /// Make sure we can pass in extra references than the automatic ones. For example the c# compiler does not pass in 
+        /// Make sure we can pass in extra references than the automatic ones. For example the c# compiler does not pass in
         /// system.dll. So lets test that case
         /// </summary>
         [Fact]
@@ -656,9 +656,9 @@ public void BuildTaskSimpleCodeFactoryTestExtraReferenceCS()
             }
 
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestExtraReferenceCS` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -693,7 +693,7 @@ public void MethodImplementationJScriptNet()
             }
 
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CodeMethod_MethodImplementationJScriptNet` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Text ParameterType='System.String' />
@@ -726,7 +726,7 @@ override function Execute() : System.Boolean
         public void MethodImplementation()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CodeMethod_MethodImplementation` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Text ParameterType='System.String' />
@@ -759,7 +759,7 @@ public override bool Execute()
         public void ClassImplementationTest()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`LogNameValue_ClassImplementationTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Name ParameterType='System.String' />
@@ -825,7 +825,7 @@ public override bool Execute()
         public void ClassImplementationTestDoesNotInheritFromITask()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`ClassImplementationTestDoesNotInheritFromITask` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Name ParameterType='System.String' />
@@ -883,9 +883,9 @@ public bool Execute()
         public void MultipleCodeElements()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -915,9 +915,9 @@ public void MultipleCodeElements()
         public void ReferenceNestedInCode()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -949,9 +949,9 @@ public void ReferenceNestedInCode()
         public void UnknownElementInTask()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1025,7 +1025,7 @@ public override bool Execute()
             try
             {
                 string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`LogNameValue_ClassSourcesTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Name ParameterType='System.String' />
@@ -1061,9 +1061,9 @@ public override bool Execute()
         public void BuildTaskSimpleCodeFactoryTempDirectoryDoesntExist()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1111,9 +1111,9 @@ public void BuildTaskSimpleCodeFactoryTempDirectoryDoesntExist()
         public void RedundantMSBuildReferences()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_RedundantMSBuildReferences` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1141,9 +1141,9 @@ public sealed class CodeTaskFactoryTests
         public void CodeTaskFactoryNotSupported()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
diff --git a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
index 87c624583fc..e8f0784d223 100644
--- a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.UnitTests
     abstract public class DirectoryBuildProjectImportTestBase : IDisposable
     {
         private const string BasicDirectoryBuildProjectContents = @"
-                <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project>
                     <PropertyGroup>
                         <WasDirectoryBuildProjectImported>true</WasDirectoryBuildProjectImported>
                     </PropertyGroup>
@@ -75,7 +75,7 @@ public void DoesNotImportDirectoryBuildProjectIfNotExist()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
@@ -104,7 +104,7 @@ public void DoesNotImportDirectoryBuildProjectWhenDisabled()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{ImportDirectoryBuildProjectPropertyName}>false</{ImportDirectoryBuildProjectPropertyName}>
                     </PropertyGroup>
@@ -135,7 +135,7 @@ public void ImportsDirectoryBuildProjectCustomFile()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{DirectoryBuildProjectPathPropertyName}>{customFilePath}</{DirectoryBuildProjectPathPropertyName}>
                     </PropertyGroup>
@@ -163,7 +163,7 @@ public void ImportsDirectoryBuildProjectIfExists()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
diff --git a/src/Tasks.UnitTests/Hash_Tests.cs b/src/Tasks.UnitTests/Hash_Tests.cs
index d3e831abfe0..23a45580e60 100644
--- a/src/Tasks.UnitTests/Hash_Tests.cs
+++ b/src/Tasks.UnitTests/Hash_Tests.cs
@@ -45,6 +45,78 @@ public void HashTaskEmptyInputTest()
             Assert.Null(zeroLengthItemsHash);
         }
 
+        [Fact]
+        public void HashTaskLargeInputCountTest()
+        {
+            // This hash was pre-computed. If the implementation changes it may need to be adjusted.
+            var expectedHash = "8a996bbcb5e481981c2fba7ac408e20d0b4360a5";
+
+            ITaskItem[] itemsToHash = new ITaskItem[1000];
+            for (int i = 0; i < itemsToHash.Length; i++)
+            {
+                itemsToHash[i] = new TaskItem($"Item{i}");
+            }
+
+            var actualHash = ExecuteHashTask(itemsToHash);
+            Assert.Equal(expectedHash, actualHash);
+        }
+
+        [Fact]
+        public void HashTaskLargeInputSizeTest()
+        {
+            // This hash was pre-computed. If the implementation changes it may need to be adjusted.
+            var expectedHash = "0509142dd3d3a733f30a52a0eec37cd727d46122";
+
+            string[] array = new string[1000];
+            for (int i = 0; i < array.Length; i++)
+            {
+                array[i] = $"Item{i}";
+            }
+            ITaskItem[] itemsToHash = new ITaskItem[] { new TaskItem(string.Join("", array)) };
+
+            var actualHash = ExecuteHashTask(itemsToHash);
+            Assert.Equal(expectedHash, actualHash);
+        }
+
+#pragma warning disable CA5350
+        // This test verifies that hash computes correctly for various numbers of characters.
+        // We would like to process edge of the buffer use cases regardless on the size of the buffer.
+        [Fact]
+        public void HashTaskDifferentInputSizesTest()
+        {
+            int maxInputSize = 2000;
+            string input = "";
+            using (var sha1 = System.Security.Cryptography.SHA1.Create())
+            {
+                var stringBuilder = new System.Text.StringBuilder(sha1.HashSize);
+                MockEngine mockEngine = new();
+                for (int i = 0; i < maxInputSize; i++)
+                {
+                    input += "a";
+
+                    Hash hashTask = new()
+                    {
+                        BuildEngine = mockEngine,
+                        ItemsToHash = new ITaskItem[] { new TaskItem(input) },
+                        IgnoreCase = false
+                    };
+                    Assert.True(hashTask.Execute());
+                    string actualHash = hashTask.HashResult;
+
+                    byte[] hash = sha1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input + '\u2028'));
+                    stringBuilder.Clear();
+                    foreach (var b in hash)
+                    {
+                        stringBuilder.Append(b.ToString("x2"));
+                    }
+                    string expectedHash = stringBuilder.ToString();
+
+                    Assert.Equal(expectedHash, actualHash);
+                }
+            }
+        }
+#pragma warning restore CA5350
+
         [Fact]
         public void HashTaskIgnoreCaseTest()
         {
diff --git a/src/Tasks.UnitTests/NuGetPropsImportTests.cs b/src/Tasks.UnitTests/NuGetPropsImportTests.cs
index 41af54c3103..9dd6200a65d 100644
--- a/src/Tasks.UnitTests/NuGetPropsImportTests.cs
+++ b/src/Tasks.UnitTests/NuGetPropsImportTests.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.UnitTests
     public sealed class NuGetPropsImportTests : IDisposable
     {
         private const string NuGetPropsContent = @"
-                <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project>
                     <PropertyGroup>
                         <NuGetPropsIsImported>true</NuGetPropsIsImported>
                     </PropertyGroup>
@@ -43,7 +43,7 @@ public void ImportNuGetPropsWhenExists()
             // src\Foo\Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory(projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{NuGetPropsPropertyName}>{nugetPropsRelativePath}</{NuGetPropsPropertyName}>
                     </PropertyGroup>
@@ -69,7 +69,7 @@ public void ImportNuGetPropsWhenDoesNotExists()
             // src\Foo\Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory(projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{NuGetPropsPropertyName}>{nugetPropsRelativePath}</{NuGetPropsPropertyName}>
                     </PropertyGroup>
diff --git a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
index 56e2fbf37de..dae84ce4e97 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
@@ -21,7 +21,7 @@ protected ProjectExtensionsImportTestBase()
         }
 
         protected virtual string BasicProjectImportContents => $@"
-            <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+            <Project>
                 <PropertyGroup>
                 <{PropertyNameToSignalImportSucceeded}>true</{PropertyNameToSignalImportSucceeded}>
                 </PropertyGroup>
@@ -52,7 +52,7 @@ public void DoesNotImportProjectIfNotExist()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
@@ -83,7 +83,7 @@ public void DoesNotImportProjectWhenDisabled()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{PropertyNameToEnableImport}>false</{PropertyNameToEnableImport}>
                     </PropertyGroup>
@@ -115,7 +115,7 @@ public void ImportsProjectIfCustomPath()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <MSBuildProjectExtensionsPath>{Path.GetDirectoryName(CustomImportProjectPath)}</MSBuildProjectExtensionsPath>
                     </PropertyGroup>
@@ -142,7 +142,7 @@ public void ImportsProjectIfExists()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
@@ -160,7 +160,7 @@ public void ImportsProjectIfExists()
         public void ErrorIfChangedInBodyOfProject()
         {
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <PropertyGroup>
@@ -173,20 +173,20 @@ public void ErrorIfChangedInBodyOfProject()
 
             MockLogger logger = new MockLogger();
 
-            project.Build("_CheckForInvalidConfigurationAndPlatform", new[] {logger}).ShouldBeFalse();
+            project.Build("_CheckForInvalidConfigurationAndPlatform", new[] { logger }).ShouldBeFalse();
 
             logger.Errors.Select(i => i.Code).FirstOrDefault().ShouldBe("MSB3540");
         }
 
         /// <summary>
-        /// Ensures that an error is logged if BaseIntermediateOutputPath is modified after it was set by Microsoft.Common.props and 
+        /// Ensures that an error is logged if BaseIntermediateOutputPath is modified after it was set by Microsoft.Common.props and
         /// EnableBaseIntermediateOutputPathMismatchWarning is 'true'.
         /// </summary>
         [Fact]
         public void WarningIfBaseIntermediateOutputPathIsChangedInBodyOfProject()
         {
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <PropertyGroup>
diff --git a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
index fd4942c91d1..80b0140226a 100644
--- a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
+++ b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
@@ -89,7 +89,7 @@ public void TestDynamicEnum()
         }
 
         /// <summary>
-        /// Tests the basic string array type 
+        /// Tests the basic string array type
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -104,7 +104,7 @@ public void TestBasicStringArray()
         }
 
         /// <summary>
-        /// Tests the basic string array type, with an array that contains multiple values. 
+        /// Tests the basic string array type, with an array that contains multiple values.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -226,9 +226,9 @@ private void CheckCommandLine(string expected, string actual)
         }
 
         /// <summary>
-        /// XamlTaskFactory does not, in and of itself, support the idea of "always" switches or default values.  At least 
-        /// for Dev10, the workaround is to create a property as usual, and then specify the required values in the .props 
-        /// file.  Since these unit tests are just testing the task itself, this method serves as our ".props file".  
+        /// XamlTaskFactory does not, in and of itself, support the idea of "always" switches or default values.  At least
+        /// for Dev10, the workaround is to create a property as usual, and then specify the required values in the .props
+        /// file.  Since these unit tests are just testing the task itself, this method serves as our ".props file".
         /// </summary>
         public object CreateFakeTask()
         {
@@ -242,19 +242,19 @@ public object CreateFakeTask()
     }
 
     /// <summary>
-    /// Tests for XamlDataDrivenToolTask / XamlTaskFactory in the context of a project file.  
+    /// Tests for XamlDataDrivenToolTask / XamlTaskFactory in the context of a project file.
     /// </summary>
     public class ProjectFileTests
     {
         /// <summary>
-        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message. 
+        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
         {
             string projectFile = @"
-                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
                         <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
@@ -301,14 +301,14 @@ public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
 
 
         /// <summary>
-        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message. 
+        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void CommandLineErrorsReportFullCommandline()
         {
             string projectFile = @"
-                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
                         <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
@@ -338,14 +338,14 @@ public void CommandLineErrorsReportFullCommandline()
         }
 
         /// <summary>
-        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message. 
+        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void SquareBracketEscaping()
         {
             string projectFile = @"
-                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
                         <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
diff --git a/src/Tasks.UnitTests/XmlPeek_Tests.cs b/src/Tasks.UnitTests/XmlPeek_Tests.cs
index cd4fa3977c7..6bb0e046a8f 100644
--- a/src/Tasks.UnitTests/XmlPeek_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPeek_Tests.cs
@@ -36,7 +36,7 @@ sealed public class XmlPeek_Tests
 ";
 
         private string _xmlFileNoNsNoDtd = @"<?xml version='1.0' encoding='utf-8'?>
-        
+
 <class AccessModifier='public' Name='test'>
   <variable Type='String' Name='a'></variable>
   <variable Type='String' Name='b'></variable>
@@ -303,7 +303,7 @@ public void MissingNamespaceParameters()
         public void PeekWithoutUsingTask()
         {
             string projectContents = @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion'>
   <Target Name='x'>
     <XmlPeek Query='abc' ContinueOnError='true' />
   </Target>
diff --git a/src/Tasks.UnitTests/XmlPoke_Tests.cs b/src/Tasks.UnitTests/XmlPoke_Tests.cs
index b532acdc54f..05e3f05860c 100644
--- a/src/Tasks.UnitTests/XmlPoke_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPoke_Tests.cs
@@ -20,7 +20,7 @@ sealed public class XmlPoke_Tests
         private const string XmlNamespaceUsedByTests = "http://nsurl";
 
         private const string _xmlFileWithNs = @"<?xml version='1.0' encoding='utf-8'?>
-        
+
 <class AccessModifier='public' Name='test' xmlns:s='" + XmlNamespaceUsedByTests + @"'>
   <s:variable Type='String' Name='a'></s:variable>
   <s:variable Type='String' Name='b'></s:variable>
@@ -29,7 +29,7 @@ sealed public class XmlPoke_Tests
 </class>";
 
         private const string _xmlFileNoNs = @"<?xml version='1.0' encoding='utf-8'?>
-        
+
 <class AccessModifier='public' Name='test'>
   <variable Type='String' Name='a'></variable>
   <variable Type='String' Name='b'></variable>
@@ -273,16 +273,16 @@ public void PokeElement()
         public void PokeWithoutUsingTask()
         {
             string projectContents = @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion'>
   <Target Name='x'>
     <XmlPoke Value='abc' Query='def' XmlInputPath='ghi.jkl' ContinueOnError='true' />
   </Target>
 </Project>";
 
-            // The task will error, but ContinueOnError means that it will just be a warning.  
+            // The task will error, but ContinueOnError means that it will just be a warning.
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents);
 
-            // Verify that the task was indeed found. 
+            // Verify that the task was indeed found.
             logger.AssertLogDoesntContain("MSB4036");
         }
 
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index 59223662e76..467ebc482cb 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -865,25 +865,25 @@ public void CompiledDllWithTwoTypes()
 
             CompileDoubleType(doubleTypePath);
 
+            XslTransformation t = new()
             {
-                XslTransformation t = new XslTransformation();
-                t.BuildEngine = engine;
-                t.OutputPaths = outputPaths;
-                t.XmlContent = _xmlDocument;
-                t.XslCompiledDllPath = new TaskItem(doubleTypePath);
-                try
-                {
-                    t.Execute();
-                    Console.WriteLine(engine.Log);
-                }
-                catch (Exception e)
-                {
-                    Assert.Contains("error?", e.Message);
-                }
-
-                System.Diagnostics.Debug.WriteLine(engine.Log);
+                BuildEngine = engine,
+                OutputPaths = outputPaths,
+                XmlContent = _xmlDocument,
+                XslCompiledDllPath = new TaskItem(doubleTypePath),
+            };
+            try
+            {
+                t.Execute();
+                Console.WriteLine(engine.Log);
+            }
+            catch (Exception e)
+            {
+                Assert.Contains("error?", e.Message);
             }
 
+            System.Diagnostics.Debug.WriteLine(engine.Log);
+
             CleanUp(dir);
         }
 #endif
@@ -912,7 +912,6 @@ public void MultipleXmlInputs_Matching()
             // outputPaths have one output path, lets duplicate it
             TaskItem[] outputMultiPaths = new TaskItem[] { new TaskItem(outputPaths[0].ItemSpec + ".1.xml"),
                 new TaskItem(outputPaths[0].ItemSpec + ".2.xml"), new TaskItem(outputPaths[0].ItemSpec + ".3.xml"), new TaskItem(outputPaths[0].ItemSpec + ".4.xml") };
-
             {
                 XslTransformation t = new XslTransformation();
                 t.BuildEngine = engine;
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 0073d3d5c7e..574040bdeac 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -6,8 +6,10 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+#if !FEATURE_ASSEMBLYLOADCONTEXT
 using System.Linq;
 using System.Runtime.InteropServices;
+#endif
 using System.Runtime.Versioning;
 using System.Reflection;
 using System.Text;
diff --git a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
index cbfb268bad9..41007129e72 100644
--- a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
+++ b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
@@ -105,12 +105,12 @@ public override bool Execute()
 
             var writeOutput = true;
 
-            if(FileSystems.Default.FileExists(OutputAppConfigFile.ItemSpec))
+            if (FileSystems.Default.FileExists(OutputAppConfigFile.ItemSpec))
             {
                 try
                 {
                     var outputDoc = LoadAppConfig(OutputAppConfigFile);
-                    if(outputDoc.ToString() == doc.ToString())
+                    if (outputDoc.ToString() == doc.ToString())
                     {
                         writeOutput = false;
                     }
@@ -130,7 +130,7 @@ public override bool Execute()
                 OutputAppConfigFile.SetMetadata(ItemMetadataNames.targetPath, TargetName);
             }
 
-            if(writeOutput)
+            if (writeOutput)
             {
                 using (var stream = FileUtilities.OpenWrite(OutputAppConfigFile.ItemSpec, false))
                 {
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index da913266467..242e6a95380 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -484,7 +484,11 @@ internal List<string> GetSerializationAssemblyFiles()
         /// <value>The full path to this assembly.</value>
         internal string FullPath
         {
-            get { return _fullPath; }
+            get
+            {
+                return _fullPath;
+            }
+
             set
             {
                 if (_fullPath != value)
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index c6733074229..85a5643f5c9 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -322,7 +322,11 @@ public bool IgnoreTargetFrameworkAttributeVersionMismatch
         /// </summary>
         public string[] TargetFrameworkSubsets
         {
-            get { return _targetFrameworkSubsets; }
+            get
+            {
+                return _targetFrameworkSubsets;
+            }
+
             set
             {
                 ErrorUtilities.VerifyThrowArgumentNull(value, "TargetFrameworkSubsets");
@@ -450,7 +454,11 @@ public ITaskItem[] InstalledAssemblyTables
         /// </summary>
         public ITaskItem[] InstalledAssemblySubsetTables
         {
-            get { return _installedAssemblySubsetTables; }
+            get
+            {
+                return _installedAssemblySubsetTables;
+            }
+
             set
             {
                 ErrorUtilities.VerifyThrowArgumentNull(value, "InstalledAssemblySubsetTables");
@@ -477,7 +485,11 @@ public ITaskItem[] InstalledAssemblySubsetTables
         /// </summary>
         public ITaskItem[] FullFrameworkAssemblyTables
         {
-            get { return _fullFrameworkAssemblyTables; }
+            get
+            {
+                return _fullFrameworkAssemblyTables;
+            }
+
             set
             {
                 ErrorUtilities.VerifyThrowArgumentNull(value, "FullFrameworkAssemblyTables");
@@ -1237,9 +1249,8 @@ quiet at the engine level.
                     // Log general resolution exceptions.
                     foreach (Exception error in generalResolutionExceptions)
                     {
-                        if (error is InvalidReferenceAssemblyNameException)
+                        if (error is InvalidReferenceAssemblyNameException e)
                         {
-                            InvalidReferenceAssemblyNameException e = (InvalidReferenceAssemblyNameException)error;
                             Log.LogWarningWithCodeFromResources("General.MalformedAssemblyName", e.SourceItemSpec);
                         }
                         else
@@ -1257,9 +1268,9 @@ quiet at the engine level.
             {
                 foreach (Resolver r in dependencyTable.Resolvers)
                 {
-                    if (r is AssemblyFoldersExResolver)
+                    if (r is AssemblyFoldersExResolver assemblyFoldersExResolver)
                     {
-                        AssemblyFoldersEx assemblyFoldersEx = ((AssemblyFoldersExResolver)r).AssemblyFoldersExLocations;
+                        AssemblyFoldersEx assemblyFoldersEx = assemblyFoldersExResolver.AssemblyFoldersExLocations;
 
                         if (assemblyFoldersEx != null && _showAssemblyFoldersExLocations.TryGetValue(r.SearchPath, out messageImportance))
                         {
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index e6921de70e3..d4773311288 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -600,7 +600,7 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
                 if (NativeMethodsShared.IsWindows)
                 {
                     commandLine.AppendSwitch("/Q"); // echo off
-                    if(!Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd)
+                    if (!Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd)
                     {
                         commandLine.AppendSwitch("/D"); // do not load AutoRun configuration from the registry (perf)
                     }
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index d4ca836cf2d..65ea58c62b0 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -248,9 +248,8 @@ private AssemblyIdentity CreateAssemblyIdentity(AssemblyIdentity baseIdentity, A
             }
 
             // Fixup for non-ClickOnce case...
-            if (_manifest is ApplicationManifest)
+            if (_manifest is ApplicationManifest applicationManifest)
             {
-                var applicationManifest = _manifest as ApplicationManifest;
                 if (!applicationManifest.IsClickOnceManifest)
                 {
                     // Don't need publicKeyToken attribute for non-ClickOnce case
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 3defe6023da..e5cb2b89c17 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -9,7 +9,9 @@
 #if FEATURE_RESXREADER_LIVEDESERIALIZATION
 using System.ComponentModel.Design;
 #endif
+#if FEATURE_SYSTEM_CONFIGURATION
 using System.Configuration;
+#endif
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
@@ -24,8 +26,10 @@
 #endif
 using System.Runtime.Serialization;
 using System.Runtime.Serialization.Formatters.Binary;
+#if !FEATURE_ASSEMBLYLOADCONTEXT
 using System.Runtime.Versioning;
 using System.Security;
+#endif
 using System.Text;
 using System.Xml;
 using System.Xml.Linq;
@@ -252,7 +256,7 @@ public ITaskItem[] FilesWritten
         }
 
         /// <summary>
-        /// The language to use when generating the class source for the strongly typed resource.
+        /// Gets or sets the language to use when generating the class source for the strongly typed resource.
         /// This parameter must match exactly one of the languages used by the CodeDomProvider.
         /// </summary>
         public string StronglyTypedLanguage
@@ -263,7 +267,11 @@ public string StronglyTypedLanguage
                 // try to validate it -- that might prevent future expansion of supported languages.
                 _stronglyTypedLanguage = value;
             }
-            get { return _stronglyTypedLanguage; }
+
+            get
+            {
+                return _stronglyTypedLanguage;
+            }
         }
 
         /// <summary>
@@ -552,9 +560,9 @@ static GenerateResource()
             try
             {
                 object allowUntrustedFiles = Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\SDK", "AllowProcessOfUntrustedResourceFiles", null);
-                if (allowUntrustedFiles is String)
+                if (allowUntrustedFiles is string allowUntrustedFilesString)
                 {
-                    allowMOTW = ((string)allowUntrustedFiles).Equals("true", StringComparison.OrdinalIgnoreCase);
+                    allowMOTW = allowUntrustedFilesString.Equals("true", StringComparison.OrdinalIgnoreCase);
                 }
             }
             catch { }
@@ -894,10 +902,10 @@ public override bool Execute()
                                 {
                                     foreach (ITaskItem item in _remotedTaskItems)
                                     {
-                                        if (item is MarshalByRefObject)
+                                        if (item is MarshalByRefObject marshalByRefObject)
                                         {
                                             // Tell remoting to forget connections to the taskitem
-                                            RemotingServices.Disconnect((MarshalByRefObject)item);
+                                            RemotingServices.Disconnect(marshalByRefObject);
                                         }
                                     }
                                 }
@@ -926,17 +934,7 @@ public override bool Execute()
         private static bool allowMOTW;
 
         private const string CLSID_InternetSecurityManager = "7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4";
-
-        private const uint ZoneLocalMachine = 0;
-
-        private const uint ZoneIntranet = 1;
-
-        private const uint ZoneTrusted = 2;
-
         private const uint ZoneInternet = 3;
-
-        private const uint ZoneUntrusted = 4;
-
         private static IInternetSecurityManager internetSecurityManager = null;
 
         // Resources can have arbitrarily serialized objects in them which can execute arbitrary code
@@ -2610,9 +2608,8 @@ private bool ProcessFile(string inFile, string outFileOrDir)
             }
             catch (ArgumentException ae)
             {
-                if (ae.InnerException is XmlException)
+                if (ae.InnerException is XmlException xe)
                 {
-                    XmlException xe = (XmlException) ae.InnerException;
                     _logger.LogErrorWithCodeFromResources(null, FileUtilities.GetFullPathNoThrow(inFile), xe.LineNumber,
                         xe.LinePosition, 0, 0, "General.InvalidResxFile", xe.Message);
                 }
diff --git a/src/Tasks/GetReferenceAssemblyPaths.cs b/src/Tasks/GetReferenceAssemblyPaths.cs
index ccb55fcb851..f0be08e771c 100644
--- a/src/Tasks/GetReferenceAssemblyPaths.cs
+++ b/src/Tasks/GetReferenceAssemblyPaths.cs
@@ -7,7 +7,9 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
+#if FEATURE_GAC
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
+#endif
 
 #nullable disable
 
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index ea6a836d9c1..066c8c23d97 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -5,7 +5,6 @@
 using System.Security.Cryptography;
 using System.Text;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -24,6 +23,16 @@ namespace Microsoft.Build.Tasks
     public class Hash : TaskExtension
     {
         private const char ItemSeparatorCharacter = '\u2028';
+        private static readonly Encoding s_encoding = Encoding.UTF8;
+        private static readonly byte[] s_itemSeparatorCharacterBytes = s_encoding.GetBytes(new char[] { ItemSeparatorCharacter });
+
+        // Size of buffer where bytes of the strings are stored until sha1.TransformBlock is to be run on them.
+        // It is needed to get a balance between amount of costly sha1.TransformBlock calls and amount of allocated memory.
+        private const int Sha1BufferSize = 512;
+
+        // Size of chunks in which ItemSpecs would be cut.
+        // We have chosen this length so itemSpecChunkByteBuffer rented from ArrayPool will be close but not bigger than 512.
+        private const int MaxInputChunkLength = 169;
 
         /// <summary>
         /// Items from which to generate a hash.
@@ -52,52 +61,100 @@ public override bool Execute()
             {
                 using (var sha1 = SHA1.Create())
                 {
-                    var concatenatedItemStringSize = ComputeStringSize(ItemsToHash);
+                    // Buffer in which bytes of the strings are to be stored until their number reaches the limit size.
+                    // Once the limit is reached, the sha1.TransformBlock is to be run on all the bytes of this buffer.
+                    byte[] sha1Buffer = null;
 
-                    var hashStringSize = sha1.HashSize;
+                    // Buffer in which bytes of items' ItemSpec are to be stored.
+                    byte[] itemSpecChunkByteBuffer = null;
 
-                    using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))
+                    try
                     {
-                        foreach (var item in ItemsToHash)
+                        sha1Buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(Sha1BufferSize);
+                        itemSpecChunkByteBuffer = System.Buffers.ArrayPool<byte>.Shared.Rent(s_encoding.GetMaxByteCount(MaxInputChunkLength));
+
+                        int sha1BufferPosition = 0;
+                        for (int i = 0; i < ItemsToHash.Length; i++)
                         {
-                            string itemSpec = item.ItemSpec;
-                            stringBuilder.Append(IgnoreCase ? itemSpec.ToUpperInvariant() : itemSpec);
-                            stringBuilder.Append(ItemSeparatorCharacter);
-                        }
+                            string itemSpec = IgnoreCase ? ItemsToHash[i].ItemSpec.ToUpperInvariant() : ItemsToHash[i].ItemSpec;
 
-                        var hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(stringBuilder.ToString()));
+                            // Slice the itemSpec string into chunks of reasonable size and add them to sha1 buffer.
+                            for (int itemSpecPosition = 0; itemSpecPosition < itemSpec.Length; itemSpecPosition += MaxInputChunkLength)
+                            {
+                                int charsToProcess = Math.Min(itemSpec.Length - itemSpecPosition, MaxInputChunkLength);
+                                int byteCount = s_encoding.GetBytes(itemSpec, itemSpecPosition, charsToProcess, itemSpecChunkByteBuffer, 0);
 
-                        stringBuilder.Clear();
+                                sha1BufferPosition = AddBytesToSha1Buffer(sha1, sha1Buffer, sha1BufferPosition, Sha1BufferSize, itemSpecChunkByteBuffer, byteCount);
+                            }
 
-                        foreach (var b in hash)
-                        {
-                            stringBuilder.Append(b.ToString("x2"));
+                            sha1BufferPosition = AddBytesToSha1Buffer(sha1, sha1Buffer, sha1BufferPosition, Sha1BufferSize, s_itemSeparatorCharacterBytes, s_itemSeparatorCharacterBytes.Length);
                         }
 
-                        HashResult = stringBuilder.ToString();
+                        sha1.TransformFinalBlock(sha1Buffer, 0, sha1BufferPosition);
+
+                        using (var stringBuilder = new ReuseableStringBuilder(sha1.HashSize))
+                        {
+                            foreach (var b in sha1.Hash)
+                            {
+                                stringBuilder.Append(b.ToString("x2"));
+                            }
+                            HashResult = stringBuilder.ToString();
+                        }
+                    }
+                    finally
+                    {
+                        if (sha1Buffer != null)
+                        {
+                            System.Buffers.ArrayPool<byte>.Shared.Return(sha1Buffer);
+                        }
+                        if (itemSpecChunkByteBuffer != null)
+                        {
+                            System.Buffers.ArrayPool<byte>.Shared.Return(itemSpecChunkByteBuffer);
+                        }
                     }
                 }
             }
-
             return true;
         }
 
-        private int ComputeStringSize(ITaskItem[] itemsToHash)
+        /// <summary>
+        /// Add bytes to the sha1 buffer. Once the limit size is reached, sha1.TransformBlock is called and the buffer is flushed.
+        /// </summary>
+        /// <param name="sha1">Hashing algorithm sha1.</param>
+        /// <param name="sha1Buffer">The sha1 buffer which stores bytes of the strings. Bytes should be added to this buffer.</param>
+        /// <param name="sha1BufferPosition">Number of used bytes of the sha1 buffer.</param>
+        /// <param name="sha1BufferSize">The size of sha1 buffer.</param>
+        /// <param name="byteBuffer">Bytes buffer which contains bytes to be written to sha1 buffer.</param>
+        /// <param name="byteCount">Amount of bytes that are to be added to sha1 buffer.</param>
+        /// <returns>Updated sha1BufferPosition.</returns>
+        private int AddBytesToSha1Buffer(SHA1 sha1, byte[] sha1Buffer, int sha1BufferPosition, int sha1BufferSize, byte[] byteBuffer, int byteCount)
         {
-            if (itemsToHash.Length == 0)
+            int bytesProcessed = 0;
+            while (sha1BufferPosition + byteCount >= sha1BufferSize)
             {
-                return 0;
-            }
+                int sha1BufferFreeSpace = sha1BufferSize - sha1BufferPosition;
 
-            var totalItemSize = 0;
+                if (sha1BufferPosition == 0)
+                {
+                    // If sha1 buffer is empty and bytes number is big enough there is no need to copy bytes to sha1 buffer.
+                    // Pass the bytes to TransformBlock right away.
+                    sha1.TransformBlock(byteBuffer, bytesProcessed, sha1BufferSize, null, 0);
+                }
+                else
+                {
+                    Array.Copy(byteBuffer, bytesProcessed, sha1Buffer, sha1BufferPosition, sha1BufferFreeSpace);
+                    sha1.TransformBlock(sha1Buffer, 0, sha1BufferSize, null, 0);
+                    sha1BufferPosition = 0;
+                }
 
-            foreach (var item in itemsToHash)
-            {
-                totalItemSize += item.ItemSpec.Length;
+                bytesProcessed += sha1BufferFreeSpace;
+                byteCount -= sha1BufferFreeSpace;
             }
 
-            // Add one ItemSeparatorCharacter per item
-            return totalItemSize + itemsToHash.Length;
+            Array.Copy(byteBuffer, bytesProcessed, sha1Buffer, sha1BufferPosition, byteCount);
+            sha1BufferPosition += byteCount;
+
+            return sha1BufferPosition;
         }
     }
 }
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 566553eff41..fcd8a41a300 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -83,8 +83,6 @@ internal struct RM_UNIQUE_PROCESS
             public FILETIME ProcessStartTime;
         }
 
-        const int RM_INVALID_SESSION = -1;
-        const int RM_INVALID_PROCESS = -1;
         const int CCH_RM_MAX_APP_NAME = 255;
         const int CCH_RM_MAX_SVC_NAME = 63;
         const int ERROR_SEM_TIMEOUT = 121;
diff --git a/src/Tasks/ManifestUtil/Manifest.cs b/src/Tasks/ManifestUtil/Manifest.cs
index c60cbd61a32..0d17d52f4e4 100644
--- a/src/Tasks/ManifestUtil/Manifest.cs
+++ b/src/Tasks/ManifestUtil/Manifest.cs
@@ -759,22 +759,20 @@ public int Compare(object x, object y)
                     Debug.Fail("Comparing null objects");
                     return 0;
                 }
-                if (!(x is BaseReference) || !(y is BaseReference))
-                {
-                    Debug.Fail("Comparing objects that are not BaseReferences");
-                    return 0;
-                }
-
-                BaseReference xRef = x as BaseReference;
-                BaseReference yRef = y as BaseReference;
 
-                if (xRef.SortName == null || yRef.SortName == null)
+                if (x is BaseReference xRef && y is BaseReference yRef)
                 {
-                    Debug.Fail("Objects do not have a SortName");
-                    return 0;
+                    if (xRef.SortName == null || yRef.SortName == null)
+                    {
+                        Debug.Fail("Objects do not have a SortName");
+                        return 0;
+                    }
+
+                    return xRef.SortName.CompareTo(yRef.SortName);
                 }
 
-                return xRef.SortName.CompareTo(yRef.SortName);
+                Debug.Fail("Comparing objects that are not BaseReferences");
+                return 0;
             }
         }
 
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index e450d95e3af..dc4dec46229 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -1,31 +1,38 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if !RUNTIME_TYPE_NETCORE
+using Microsoft.Build.Framework;
+#endif
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using System;
+#if !RUNTIME_TYPE_NETCORE
+using System.Collections.Generic;
+#endif
 using System.ComponentModel;
 using System.Deployment.Internal.CodeSigning;
 using System.Diagnostics;
+#if !RUNTIME_TYPE_NETCORE
+using System.Diagnostics.CodeAnalysis;
+#endif
 using System.Globalization;
 using System.IO;
+#if !RUNTIME_TYPE_NETCORE
+using System.Reflection;
+#endif
 using System.Runtime.InteropServices;
 using System.Security;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
+#if !RUNTIME_TYPE_NETCORE
+using System.Security.Permissions;
+using System.Security.Policy;
+#endif
 using System.Text;
 using System.Xml;
 using Microsoft.Build.Shared.FileSystem;
-
-#if RUNTIME_TYPE_NETCORE
-using System.Runtime.Versioning;
-#else
-using Microsoft.Build.Framework;
-using System.Collections.Generic;
-using System.Diagnostics.CodeAnalysis;
-using System.Reflection;
-using System.Security.Permissions;
-using System.Security.Policy;
+#if !RUNTIME_TYPE_NETCORE
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 #endif
 
@@ -51,8 +58,8 @@ public static class SecurityUtilities
 #if !RUNTIME_TYPE_NETCORE
         private const int Fx2MajorVersion = 2;
         private const int Fx3MajorVersion = 3;
-#endif
         private static readonly Version s_dotNet40Version = new Version("4.0");
+#endif
         private static readonly Version s_dotNet45Version = new Version("4.5");
 
 #if !RUNTIME_TYPE_NETCORE
@@ -670,9 +677,9 @@ private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, st
                         }
                         var manifest = new SignedCmiManifest2(doc, useSha256);
                         CmiManifestSigner2 signer;
-                        if (useSha256 && rsa is RSACryptoServiceProvider)
+                        if (useSha256 && rsa is RSACryptoServiceProvider rsacsp)
                         {
-                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsa as RSACryptoServiceProvider, useSha256);
+                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
                             signer = new CmiManifestSigner2(csp, cert, useSha256);
                         }
                         else
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index bea7f4b1264..12ba135aa53 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -29,9 +29,10 @@ internal static class Util
         internal static readonly string logPath = GetLogPath();
         private static readonly char[] s_fileNameInvalidChars = { '\\', '/', ':', '*', '?', '"', '<', '>', '|' };
         private static StreamWriter s_logFileWriter;
+#if !RUNTIME_TYPE_NETCORE
         // Major, Minor, Build and Revision of CLR v2.0
         private static readonly int[] s_clrVersion2 = { 2, 0, 50727, 0 };
-#if RUNTIME_TYPE_NETCORE
+#else
         // Major, Minor, Build and Revision of CLR v4.0
         private static readonly int[] s_clrVersion4 = { 4, 0, 30319, 0 };
 #endif
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 5dfb3074534..269c0ba2fa5 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -285,20 +285,6 @@ private void init()
 #endif
         }
 
-        private static XmlElement FindIdElement(XmlElement context, string idValue)
-        {
-            if (context == null)
-                return null;
-
-            XmlElement idReference = context.SelectSingleNode("//*[@Id=\"" + idValue + "\"]") as XmlElement;
-            if (idReference != null)
-                return idReference;
-            idReference = context.SelectSingleNode("//*[@id=\"" + idValue + "\"]") as XmlElement;
-            if (idReference != null)
-                return idReference;
-            return context.SelectSingleNode("//*[@ID=\"" + idValue + "\"]") as XmlElement;
-        }
-
         public override XmlElement GetIdElement(XmlDocument document, string idValue)
         {
             // We only care about Id references inside of the KeyInfo section
@@ -324,9 +310,6 @@ internal class SignedCmiManifest2
         private const string Sha1SignatureMethodUri = @"http://www.w3.org/2000/09/xmldsig#rsa-sha1";
         private const string Sha1DigestMethod = @"http://www.w3.org/2000/09/xmldsig#sha1";
 
-        private const string wintrustPolicyFlagsRegPath = "Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing";
-        private const string wintrustPolicyFlagsRegName = "State";
-
         private SignedCmiManifest2() { }
 
         internal SignedCmiManifest2(XmlDocument manifestDom, bool useSha256)
@@ -529,8 +512,9 @@ private static void ReplacePublicKeyToken(XmlDocument manifestDom, AsymmetricAlg
 
             byte[] cspPublicKeyBlob;
 
-            if(snKey is RSACryptoServiceProvider){
-                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider((RSACryptoServiceProvider)snKey, useSha256)).ExportCspBlob(false);
+            if (snKey is RSACryptoServiceProvider rsacsp)
+            {
+                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider(rsacsp, useSha256)).ExportCspBlob(false);
                 if (cspPublicKeyBlob == null || cspPublicKeyBlob.Length == 0)
                 {
                     throw new CryptographicException(Win32.NTE_BAD_KEY);
@@ -952,9 +936,9 @@ private static void StrongNameSignManifestDom(XmlDocument manifestDom, XmlDocume
 
             // Setup up XMLDSIG engine.
             ManifestSignedXml2 signedXml = new ManifestSignedXml2(signatureParent);
-            if (signer.StrongNameKey is RSACryptoServiceProvider)
+            if (signer.StrongNameKey is RSACryptoServiceProvider rsacsp)
             {
-                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(signer.StrongNameKey as RSACryptoServiceProvider, useSha256);
+                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
             }
             else
             {
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 8771f286d7d..3473d7c2507 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -983,8 +983,10 @@
     <PackageReference Include="Microsoft.Net.Compilers.Toolset" ExcludeAssets="all" Condition="'$(UsingToolMicrosoftNetCompilers)' == 'false'" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(DotNetBuildFromSource)' != 'true'">
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" />
+  </ItemGroup>
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
 
     <Content Include="$(NuGetPackageRoot)microsoft.net.compilers.toolset\$(MicrosoftNetCompilersToolsetVersion)\tasks\net472\**\*" CopyToOutputDirectory="PreserveNewest" LinkBase="Roslyn" />
diff --git a/src/Tasks/Microsoft.CSharp.CrossTargeting.targets b/src/Tasks/Microsoft.CSharp.CrossTargeting.targets
index 26ae23579d9..62d284b87e2 100644
--- a/src/Tasks/Microsoft.CSharp.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.CSharp.CrossTargeting.targets
@@ -10,7 +10,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <!-- Import design time targets for Roslyn Project System. These are only available if Visual Studio is installed. -->
   <!-- Import design time targets before the common crosstargeting targets, which import targets from Nuget. -->
diff --git a/src/Tasks/Microsoft.CSharp.CurrentVersion.targets b/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
index d7bd7923aa7..6e68b0dd542 100644
--- a/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
@@ -15,7 +15,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
     <PropertyGroup>
        <ImportByWildcardBeforeMicrosoftCSharpTargets Condition="'$(ImportByWildcardBeforeMicrosoftCSharpTargets)' == ''">true</ImportByWildcardBeforeMicrosoftCSharpTargets>
diff --git a/src/Tasks/Microsoft.CSharp.targets b/src/Tasks/Microsoft.CSharp.targets
index 55e2a28888d..9aceb4e3813 100644
--- a/src/Tasks/Microsoft.CSharp.targets
+++ b/src/Tasks/Microsoft.CSharp.targets
@@ -15,7 +15,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
    <Choose>
       <When Condition="'$(IsCrossTargetingBuild)' == 'true'">
diff --git a/src/Tasks/Microsoft.Common.CrossTargeting.targets b/src/Tasks/Microsoft.Common.CrossTargeting.targets
index c7d553aecd3..7eb75f9f283 100644
--- a/src/Tasks/Microsoft.Common.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.Common.CrossTargeting.targets
@@ -10,7 +10,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
 
   <PropertyGroup>
     <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 260448aa946..f08909a20f7 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -14,7 +14,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project DefaultTargets="Build" TreatAsLocalProperty="OutDir" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" TreatAsLocalProperty="OutDir">
 
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="'$(MicrosoftCommonPropsHasBeenImported)' != 'true' and Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
 
@@ -1610,8 +1610,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ====================================================================================
                                         _GetProjectReferencePlatformProperties
 
-    If a project is opted in via $(EnableDynamicPlatformResolution), this target calls the 
-    GetCompatiblePlatform task on all ProjectReference items to determine the most compatible 
+    If a project is opted in via $(EnableDynamicPlatformResolution), this target calls the
+    GetCompatiblePlatform task on all ProjectReference items to determine the most compatible
     platform for each project. It then sets SetPlatform metadata on each ProjectReference.
     This prevents overbuilding a project when 'AnyCPU' is available.
 
@@ -1637,7 +1637,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     </ItemGroup>
 
     <ItemGroup>
-      <_ProjectReferencePlatformPossibilities Include="@(_MSBuildProjectReferenceExistent)" 
+      <_ProjectReferencePlatformPossibilities Include="@(_MSBuildProjectReferenceExistent)"
                                               Condition="'%(_MSBuildProjectReferenceExistent.SkipGetPlatformProperties)' != 'true'"/>
     </ItemGroup>
 
@@ -1737,7 +1737,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
    -->
    <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' == '' and ('%(Extension)' == '.vcxproj' or '%(Extension)' == '.nativeproj')">
-        <!-- 
+        <!--
           Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
           Don't skip when opted into the feature.
         -->
@@ -1759,7 +1759,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
     <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' != ''">
-        <!-- 
+        <!--
           Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
           Don't skip when opted into the feature.
         -->
@@ -1828,7 +1828,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
             https://github.com/dotnet/sdk/issues/416
 
         Furthermore, if we're referencing a .vcxproj or .nativeproj, those items won't be populated into `AnnotatedProjects`
-        by `GetReferenceNearestTargetFrameworkTask`, so let them flow when `EnableDynamicPlatformResolution` is set. 
+        by `GetReferenceNearestTargetFrameworkTask`, so let them flow when `EnableDynamicPlatformResolution` is set.
       -->
       <AnnotatedProjects Include="@(_ProjectReferenceTargetFrameworkPossibilities)"
                          Condition="'$(ReferringTargetFrameworkForProjectReferences)' == '' or
@@ -4187,7 +4187,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       use the built DLL as the entry point
     -->
     <ItemGroup Condition="'$(UseAppHost)' == 'true' and '$(_IsExecutable)' == 'true' and exists('$(AppHostIntermediatePath)')">
-      <EntryPointForLauncher Include="$(AppHostIntermediatePath)"/>
+      <EntryPointForLauncher Include="$(AppHostIntermediatePath)" TargetPath="$(AssemblyName).exe"/>
       <ContentWithTargetPath Include="@(EntryPointForLauncher)"/>
     </ItemGroup>
     <ItemGroup Condition="'$(EntryPointForLauncher)'==''">
diff --git a/src/Tasks/Microsoft.Common.overridetasks b/src/Tasks/Microsoft.Common.overridetasks
index f9bc7334290..c63abe19d52 100644
--- a/src/Tasks/Microsoft.Common.overridetasks
+++ b/src/Tasks/Microsoft.Common.overridetasks
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
     <!-- This file lists UsingTask elements that we wish to override
          any other UsingTask elements -->
diff --git a/src/Tasks/Microsoft.Common.props b/src/Tasks/Microsoft.Common.props
index 4b20447abdf..4385c405f61 100644
--- a/src/Tasks/Microsoft.Common.props
+++ b/src/Tasks/Microsoft.Common.props
@@ -10,7 +10,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <PropertyGroup>
     <ImportByWildcardBeforeMicrosoftCommonProps Condition="'$(ImportByWildcardBeforeMicrosoftCommonProps)' == ''">true</ImportByWildcardBeforeMicrosoftCommonProps>
diff --git a/src/Tasks/Microsoft.Common.targets b/src/Tasks/Microsoft.Common.targets
index ff31db3c66e..a2e63d0c48d 100644
--- a/src/Tasks/Microsoft.Common.targets
+++ b/src/Tasks/Microsoft.Common.targets
@@ -14,7 +14,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
 
   <PropertyGroup>
     <CommonTargetsPath>$(MSBuildToolsPath)\Microsoft.Common.CurrentVersion.targets</CommonTargetsPath>
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index ec7d33ea7cf..3be5690920c 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
     <!-- This file lists all the tasks that ship by default with MSBuild -->
 
diff --git a/src/Tasks/Microsoft.Data.Entity.targets b/src/Tasks/Microsoft.Data.Entity.targets
index 534b0e4c192..80d43afd2be 100644
--- a/src/Tasks/Microsoft.Data.Entity.targets
+++ b/src/Tasks/Microsoft.Data.Entity.targets
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/Tasks/Microsoft.NET.props b/src/Tasks/Microsoft.NET.props
index 12ee616dbce..41f25145c5d 100644
--- a/src/Tasks/Microsoft.NET.props
+++ b/src/Tasks/Microsoft.NET.props
@@ -13,7 +13,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <!--
     ============================================================
diff --git a/src/Tasks/Microsoft.NETFramework.CurrentVersion.props b/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
index 10000e46364..2caf4326b7a 100644
--- a/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
+++ b/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
@@ -13,7 +13,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <PropertyGroup>
      <ImportByWildcardBeforeMicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBeforeMicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardBeforeMicrosoftNetFrameworkProps>
diff --git a/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets b/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets
index 5e79387e8cd..6145e82de80 100644
--- a/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets
@@ -13,7 +13,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <PropertyGroup>
      <ImportByWildcardBeforeMicrosoftNetFrameworkTargets Condition="'$(ImportByWildcardBeforeMicrosoftNetFrameworkTargets)' == ''">true</ImportByWildcardBeforeMicrosoftNetFrameworkTargets>
diff --git a/src/Tasks/Microsoft.NETFramework.props b/src/Tasks/Microsoft.NETFramework.props
index 0bcdb236dbe..805a6081510 100644
--- a/src/Tasks/Microsoft.NETFramework.props
+++ b/src/Tasks/Microsoft.NETFramework.props
@@ -13,7 +13,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
 
   <PropertyGroup>
     <NetFrameworkPropsPath>$(MSBuildToolsPath)\Microsoft.NETFramework.CurrentVersion.props</NetFrameworkPropsPath>
diff --git a/src/Tasks/Microsoft.NETFramework.targets b/src/Tasks/Microsoft.NETFramework.targets
index ef06d37bd22..4d17decc15c 100644
--- a/src/Tasks/Microsoft.NETFramework.targets
+++ b/src/Tasks/Microsoft.NETFramework.targets
@@ -13,7 +13,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
 
     <PropertyGroup>
       <NetFrameworkTargetsPath>$(MSBuildToolsPath)\Microsoft.NETFramework.CurrentVersion.targets</NetFrameworkTargetsPath>
diff --git a/src/Tasks/Microsoft.ServiceModel.targets b/src/Tasks/Microsoft.ServiceModel.targets
index 10579ef15e2..41d4b1f3d59 100644
--- a/src/Tasks/Microsoft.ServiceModel.targets
+++ b/src/Tasks/Microsoft.ServiceModel.targets
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets b/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets
index 6d0ca32d78f..d397da71c95 100644
--- a/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets
@@ -10,7 +10,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <!-- Import design time targets for Roslyn Project System. These are only available if Visual Studio is installed. -->
   <!-- Import design time targets before the common crosstargeting targets, which import targets from Nuget. -->
diff --git a/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets b/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets
index 45f937a1389..daebf98475b 100644
--- a/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets
@@ -15,7 +15,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
     <PropertyGroup>
        <ImportByWildcardBeforeMicrosoftVisualBasicTargets Condition="'$(ImportByWildcardBeforeMicrosoftVisualBasicTargets)' == ''">true</ImportByWildcardBeforeMicrosoftVisualBasicTargets>
diff --git a/src/Tasks/Microsoft.VisualBasic.targets b/src/Tasks/Microsoft.VisualBasic.targets
index 666a807bede..3616981103c 100644
--- a/src/Tasks/Microsoft.VisualBasic.targets
+++ b/src/Tasks/Microsoft.VisualBasic.targets
@@ -16,7 +16,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <Choose>
     <When Condition="'$(IsCrossTargetingBuild)' == 'true'">
diff --git a/src/Tasks/Microsoft.WinFx.targets b/src/Tasks/Microsoft.WinFx.targets
index 4cf77fc6f3c..a2e5e8be195 100644
--- a/src/Tasks/Microsoft.WinFx.targets
+++ b/src/Tasks/Microsoft.WinFx.targets
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/Tasks/Microsoft.WorkflowBuildExtensions.targets b/src/Tasks/Microsoft.WorkflowBuildExtensions.targets
index 448174b8eab..64cbed76b63 100644
--- a/src/Tasks/Microsoft.WorkflowBuildExtensions.targets
+++ b/src/Tasks/Microsoft.WorkflowBuildExtensions.targets
@@ -10,7 +10,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/Tasks/Microsoft.Xaml.targets b/src/Tasks/Microsoft.Xaml.targets
index 78f4055b273..c8a743e39e3 100644
--- a/src/Tasks/Microsoft.Xaml.targets
+++ b/src/Tasks/Microsoft.Xaml.targets
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index e2cdca0cc3b..45bc7d9faad 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -57,7 +57,7 @@ public interface IFixedTypeInfo
     [GuidAttribute("00020406-0000-0000-C000-000000000046")]
     [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
     [ComImport]
-    internal interface UCOMICreateITypeLib
+    internal interface ICreateTypeLib
     {
         void CreateTypeInfo();
         void SetName();
@@ -785,7 +785,9 @@ internal struct CRYPTOAPI_BLOB
         #region PInvoke
         private const string Crypt32DLL = "crypt32.dll";
         private const string Advapi32DLL = "advapi32.dll";
+#if !RUNTIME_TYPE_NETCORE
         private const string MscoreeDLL = "mscoree.dll";
+#endif
 
         //------------------------------------------------------------------------------
         // CreateHardLink
@@ -1133,9 +1135,9 @@ internal static extern int CreateAssemblyNameObject(
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
         internal static extern uint GetFileVersion(String szFullPath, StringBuilder szBuffer, int cchBuffer, out uint dwLength);
 #endif
-        #endregion
+#endregion
 
-        #region Methods
+#region Methods
 #if FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS
         /// <summary>
         /// Given a pointer to a metadata blob, read the string parameter from it.  Returns true if
@@ -1256,8 +1258,8 @@ internal static unsafe int CorSigUncompressData(IntPtr data, out int uncompresse
 
             return count;
         }
-        #endregion
-        #region InternalClass
+#endregion
+#region InternalClass
 #if FEATURE_COM_INTEROP
         /// <summary>
         /// This class is a wrapper over the native GAC enumeration API.
@@ -1497,6 +1499,6 @@ public static string AssemblyPathFromStrongName(string strongName)
             }
         }
 #endif
-        #endregion
+#endregion
     }
 }
diff --git a/src/Tasks/README.md b/src/Tasks/README.md
new file mode 100644
index 00000000000..903411a4ede
--- /dev/null
+++ b/src/Tasks/README.md
@@ -0,0 +1,13 @@
+# Microsoft.Build.Tasks
+
+This package contains implementations of [commonly-used MSBuild
+tasks](https://docs.microsoft.com/visualstudio/msbuild/msbuild-task-reference)
+that ship with MSBuild itself.
+
+You do not need to reference this package to use these tasks in a build--they
+are available in any MSBuild environment.
+
+If you are writing a new task, you may wish to reference
+[Microsoft.Build.Utilities.Core](https://www.nuget.org/Packages/Microsoft.Build.Utilities.Core)
+and derive from `Microsoft.Build.Utilities.Task` or
+`Microsoft.Build.Utilities.ToolTask`.
diff --git a/src/Tasks/RegisterAssembly.cs b/src/Tasks/RegisterAssembly.cs
index 0416f291811..a7b6a78edf4 100644
--- a/src/Tasks/RegisterAssembly.cs
+++ b/src/Tasks/RegisterAssembly.cs
@@ -343,7 +343,7 @@ private bool ExportTypeLib(Assembly asm, string typeLibFileName)
                 }
 
                 // Persist the type library
-                UCOMICreateITypeLib createTypeLib = (UCOMICreateITypeLib)convertedTypeLib;
+                ICreateTypeLib createTypeLib = (ICreateTypeLib)convertedTypeLib;
 
                 createTypeLib.SaveAllChanges();
             }
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index 676d5a4d249..95e3a2ecf68 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -24,7 +24,9 @@ namespace Microsoft.Build.Tasks
     public class ResolveKeySource : TaskExtension
     {
         private const string pfxFileExtension = ".pfx";
+#if !RUNTIME_TYPE_NETCORE
         private const string pfxFileContainerPrefix = "VS_KEY_";
+#endif
         
         #region Properties
 
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index 7331980d82e..d479f1e3206 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -661,16 +661,6 @@ internal class SDKReference : IEquatable<SDKReference>
             /// </summary>
             private const string X64Arch = "X64";
 
-            /// <summary>
-            /// X86 architecture name
-            /// </summary>
-            private const string X86Arch = "X86";
-
-            /// <summary>
-            /// ARM architecture name
-            /// </summary>
-            private const string ARMArch = "ARM";
-
             /// <summary>
             /// ANY CPU architecture name
             /// </summary>
diff --git a/src/Tasks/ResourceHandling/MSBuildResXReader.cs b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
index f3f3d5db1ff..86dc5d50311 100644
--- a/src/Tasks/ResourceHandling/MSBuildResXReader.cs
+++ b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
@@ -72,13 +72,8 @@ private static void ParseAssemblyAlias(Dictionary<string,string> aliases, XEleme
         // Consts from https://github.com/dotnet/winforms/blob/16b192389b377c647ab3d280130781ab1a9d3385/src/System.Windows.Forms/src/System/Resources/ResXResourceWriter.cs#L46-L63
         private const string Beta2CompatSerializedObjectMimeType = "text/microsoft-urt/psuedoml-serialized/base64";
         private const string CompatBinSerializedObjectMimeType = "text/microsoft-urt/binary-serialized/base64";
-        private const string CompatSoapSerializedObjectMimeType = "text/microsoft-urt/soap-serialized/base64";
         private const string BinSerializedObjectMimeType = "application/x-microsoft.net.object.binary.base64";
-        private const string SoapSerializedObjectMimeType = "application/x-microsoft.net.object.soap.base64";
-        private const string DefaultSerializedObjectMimeType = BinSerializedObjectMimeType;
         private const string ByteArraySerializedObjectMimeType = "application/x-microsoft.net.object.bytearray.base64";
-        private const string ResMimeType = "text/microsoft-resx";
-
         private const string StringTypeNamePrefix = "System.String, mscorlib,";
         private const string StringTypeName40 = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
         private const string MemoryStreamTypeNamePrefix = "System.IO.MemoryStream, mscorlib,";
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index ec48b416e19..9fa199f380d 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -738,7 +738,7 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
         private static string[] GetMonoLibDirs()
         {
-            if(NativeMethodsShared.IsMono)
+            if (NativeMethodsShared.IsMono)
             {
                 string monoLibDir = Path.GetDirectoryName(typeof(object).Assembly.Location);
                 string monoLibFacadesDir = Path.Combine(monoLibDir, "Facades");
diff --git a/src/Tasks/SGen.cs b/src/Tasks/SGen.cs
index 27c58a1c5bb..3e540d14394 100644
--- a/src/Tasks/SGen.cs
+++ b/src/Tasks/SGen.cs
@@ -1,13 +1,17 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if !RUNTIME_TYPE_NETCORE
 using System;
 using System.IO;
 using System.Diagnostics;
+#endif
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+#if !RUNTIME_TYPE_NETCORE
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
+#endif
 
 #nullable disable
 
diff --git a/src/Tasks/Workflow.VisualBasic.targets b/src/Tasks/Workflow.VisualBasic.targets
index d9ea4e9e3b8..b6212e40864 100644
--- a/src/Tasks/Workflow.VisualBasic.targets
+++ b/src/Tasks/Workflow.VisualBasic.targets
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/Tasks/Workflow.targets b/src/Tasks/Workflow.targets
index 11ca5885ec4..e9eb61cf94e 100644
--- a/src/Tasks/Workflow.targets
+++ b/src/Tasks/Workflow.targets
@@ -1,4 +1,4 @@
-ï»¿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project>
 
    <!--
         With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 5ad6f792355..9221c73a0e0 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -1,5 +1,5 @@
 ï»¿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
   <Import Project="..\dir.props" />
   <PropertyGroup>
     <ProjectGuid>{E1ADB824-2B34-4920-953F-746DFD6DB3C1}</ProjectGuid>
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index 6699bf2f0e4..f549235ca90 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -19,7 +19,7 @@ public async Task KillTree()
         {
             var psi =
                 NativeMethodsShared.IsWindows ?
-                    new ProcessStartInfo("powershell", "-NoLogo -NoProfile -command \"Start-Sleep -Seconds 600\"") :
+                    new ProcessStartInfo("rundll32", "kernel32.dll, Sleep") :
                     new ProcessStartInfo("sleep", "600");
 
             Process p = Process.Start(psi); // sleep 10m.
diff --git a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
index fbafeb6cf97..19501687e94 100644
--- a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
@@ -21,6 +21,7 @@ internal static string ProcessorArchitectureIntToString()
                 NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
                 NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
                 NativeMethodsShared.ProcessorArchitectures.ARM => ProcessorArchitecture.ARM,
+                NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
                 // unknown architecture? return null
                 _ => null,
             };
@@ -35,6 +36,7 @@ public void ValidateProcessorArchitectureStrings()
             ProcessorArchitecture.AMD64.ShouldBe("AMD64"); // "AMD64 ProcessorArchitecture isn't correct"
             ProcessorArchitecture.MSIL.ShouldBe("MSIL"); // "MSIL ProcessorArchitecture isn't correct"
             ProcessorArchitecture.ARM.ShouldBe("ARM"); // "ARM ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.ARM64.ShouldBe("ARM64"); // "ARM ProcessorArchitecture isn't correct"
         }
 
         [Fact]
@@ -55,7 +57,15 @@ public void ValidateConvertDotNetFrameworkArchitectureToProcessorArchitecture()
                     procArchitecture.ShouldBe(ProcessorArchitecture.ARM);
 
                     procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
-                    procArchitecture.ShouldBeNull(); // "We should not have any Bitness64 Processor architecture returned in arm"
+                    procArchitecture.ShouldBeNull();
+                    break;
+
+                case ProcessorArchitecture.ARM64:
+                    procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
+                    procArchitecture.ShouldBe(ProcessorArchitecture.ARM64);
+
+                    procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness32);
+                    procArchitecture.ShouldBe(ProcessorArchitecture.ARM);
                     break;
 
                 case ProcessorArchitecture.X86:
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index 965f5a9e2f8..7a1f034a25c 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -761,13 +761,13 @@ public void TestGetDotNetFrameworkSdkRootRegistryKey()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             // Test out of range visual studio version.
             foreach (var dotNetVersion in EnumDotNetFrameworkVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(dotNetVersion, (VisualStudioVersion)99) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(dotNetVersion, (VisualStudioVersion)99));
             }
 
             foreach (var vsVersion in EnumVisualStudioVersions())
@@ -779,7 +779,7 @@ public void TestGetDotNetFrameworkSdkRootRegistryKey()
                 ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version20, vsVersion).ShouldBe(FrameworkLocationHelper.fullDotNetFrameworkRegistryKey);
 
                 // v3.0
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version30, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version30, vsVersion));
 
                 // v3.5
                 ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version35, vsVersion).ShouldBe(
@@ -810,39 +810,39 @@ public void TestGetDotNetFrameworkSdkRootRegistryKey()
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.5.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version120).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK81A);
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.5.2
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version110));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version120).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK81A);
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.6
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.6.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK461);
 
             // v4.6.2
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version150).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK462);
 
             // v4.7
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version150).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK47);
 
             // v4.7.1
@@ -874,13 +874,13 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             // Test out of range visual studio version.
             foreach (var dotNetVersion in EnumDotNetFrameworkVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(dotNetVersion, (VisualStudioVersion)99) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(dotNetVersion, (VisualStudioVersion)99));
             }
 
             string InstallationFolder = "InstallationFolder";
@@ -894,7 +894,7 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
                 ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version20, vsVersion).ShouldBe(FrameworkLocationHelper.dotNetFrameworkSdkInstallKeyValueV20);
 
                 // v3.0
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version30, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version30, vsVersion));
 
                 // v3.5
                 ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version35, vsVersion).ShouldBe(InstallationFolder);
@@ -907,15 +907,15 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
             }
 
             // v4.5.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110));
             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version120).ShouldBe(InstallationFolder);
             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version140).ShouldBe(InstallationFolder);
 
             // v4.6
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version140).ShouldBe(InstallationFolder);
         }
 
@@ -930,13 +930,13 @@ public void GetPathToDotNetFrameworkSdk()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             // Test out of range visual studio version.
             foreach (var dotNetVersion in EnumDotNetFrameworkVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(dotNetVersion, (VisualStudioVersion)99) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(dotNetVersion, (VisualStudioVersion)99));
             }
 
             string pathToSdk35InstallRoot = Path.Combine(FrameworkLocationHelper.programFiles32, @"Microsoft SDKs\Windows\v7.0A\");
@@ -970,7 +970,7 @@ public void GetPathToDotNetFrameworkSdk()
                 ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version20, vsVersion).ShouldBe(FrameworkLocationHelper.PathToDotNetFrameworkSdkV20);
 
                 // v3.0
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version30, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version30, vsVersion));
 
                 // v3.5
                 ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version35, vsVersion).ShouldBe(pathToSdk35InstallRoot);
@@ -989,15 +989,15 @@ public void GetPathToDotNetFrameworkSdk()
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.Version140).ShouldBe(pathToSdkV4InstallRootOnVS14);
 
             // v4.5.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110));
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version120).ShouldBe(pathToSdkV4InstallRootOnVS12);
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version140).ShouldBe(pathToSdkV4InstallRootOnVS14);
 
             // v4.6
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120));
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version140).ShouldBe(pathToSdkV4InstallRootOnVS14);
         }
 
@@ -1010,7 +1010,7 @@ public void GetPathToWindowsSdk()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToWindowsSdk((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToWindowsSdk((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             string pathToWindowsSdkV80 = GetRegistryValueHelper(RegistryHive.LocalMachine, RegistryView.Registry32, @"SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.0", "InstallationFolder");
@@ -1021,7 +1021,7 @@ public void GetPathToWindowsSdk()
                 // v1.1, v2.0, v3.0, v3.5, v4.0
                 foreach (var dotNetVersion in EnumDotNetFrameworkVersions().Where(v => v <= TargetDotNetFrameworkVersion.Version40))
                 {
-                    Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToWindowsSdk(dotNetVersion, vsVersion) );
+                    Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToWindowsSdk(dotNetVersion, vsVersion));
                 }
 
                 // v4.5
@@ -1098,7 +1098,7 @@ public void VerifyToolsetAndToolLocationHelperAgree()
             string projectContents = ObjectModelHelpers.CleanupFileContents(@"
                     <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1151,9 +1151,9 @@ public void VerifyToolsetAndToolLocationHelperAgree()
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpty()
         {
             string projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                    <Project ToolsVersion='4.0'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyName='Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1193,9 +1193,9 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpt
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
         {
             string projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                    <Project ToolsVersion='4.0'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyName='Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1237,9 +1237,9 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs11()
         {
             string projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                    <Project ToolsVersion='4.0'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyName='Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -2732,7 +2732,7 @@ public void GetPathToReferenceAssembliesWithCustomTargetFrameworkRootInFallbackP
         }
 
         private void CheckGetPathToReferenceAssemblies(TestEnvironment env, string customFrameworkDir, string fallbackSearchPaths, Func<string, string, string, string, string, IList<string>> getPathToReferenceAssemblies)
-         {
+        {
             string frameworkName = "Foo Framework";
             string frameworkVersion = "0.1";
             string frameworkVersionWithV = "v" + frameworkVersion;
@@ -2751,8 +2751,8 @@ private void CheckGetPathToReferenceAssemblies(TestEnvironment env, string custo
             {
                 stdLibPaths.Count.ShouldBe(1);
                 stdLibPaths[0].ShouldBe(Path.Combine(customFrameworkDir, frameworkName, frameworkVersionWithV) + Path.DirectorySeparatorChar, stdLibPaths[0]);
-             }
-         }
+            }
+        }
 
         [Fact]
         public void GetPathToReferenceAssembliesWithNullTargetFrameworkRootPath()
@@ -2935,21 +2935,21 @@ private string GetDotNetFrameworkReferenceAssemblies(TargetDotNetFrameworkVersio
                 switch (version)
                 {
                     case TargetDotNetFrameworkVersion.Version40:
-                    {
-                        return DotNetReferenceAssemblies40Installed ? DotNet40ReferenceAssemblyPath : null;
-                    }
+                        {
+                            return DotNetReferenceAssemblies40Installed ? DotNet40ReferenceAssemblyPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version35:
-                    {
-                        return DotNetReferenceAssemblies35Installed ? DotNet35ReferenceAssemblyPath : null;
-                    }
+                        {
+                            return DotNetReferenceAssemblies35Installed ? DotNet35ReferenceAssemblyPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version30:
-                    {
-                        return DotNetReferenceAssemblies30Installed ? DotNet30ReferenceAssemblyPath : null;
-                    }
+                        {
+                            return DotNetReferenceAssemblies30Installed ? DotNet30ReferenceAssemblyPath : null;
+                        }
                     default:
-                    {
-                        return null;
-                    }
+                        {
+                            return null;
+                        }
                 }
             }
 
@@ -2962,25 +2962,25 @@ private string GetDotNetFramework(TargetDotNetFrameworkVersion version)
                 switch (version)
                 {
                     case TargetDotNetFrameworkVersion.Version20:
-                    {
-                        return DotNet20Installed ? DotNet20FrameworkPath : null;
-                    }
+                        {
+                            return DotNet20Installed ? DotNet20FrameworkPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version30:
-                    {
-                        return DotNet30Installed ? DotNet30FrameworkPath : null;
-                    }
+                        {
+                            return DotNet30Installed ? DotNet30FrameworkPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version35:
-                    {
-                        return DotNet35Installed ? DotNet35FrameworkPath : null;
-                    }
+                        {
+                            return DotNet35Installed ? DotNet35FrameworkPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version40:
-                    {
-                        return DotNet40Installed ? DotNet40FrameworkPath : null;
-                    }
+                        {
+                            return DotNet40Installed ? DotNet40FrameworkPath : null;
+                        }
                     default:
-                    {
-                        return null;
-                    }
+                        {
+                            return null;
+                        }
                 }
             }
         }
@@ -3176,7 +3176,7 @@ public void ResolveFromDirectoryInvalidChar()
 
             // Try a path with invalid chars which does not exist
             string directoryWithInvalidChars = "c:\\<>?";
-            var paths = new List<string> {directoryWithInvalidChars};
+            var paths = new List<string> { directoryWithInvalidChars };
             Should.Throw<ArgumentException>(() => { ToolLocationHelper.GatherSDKListFromDirectory(paths, targetPlatform); });
         }
 
@@ -3709,7 +3709,7 @@ public void VerifyGetInstalledSDKLocations2()
                     <TargetPlatformVersion>8.0</TargetPlatformVersion>" +
                    @"<SDKDirectoryRoot>" + testDirectoryRoot + "</SDKDirectoryRoot>" +
                     @"<SDKLocation1>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation('SDkWithManifest, Version=2.0','MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation1>
-                      <SDKLocation2>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation('SDkWithManifest, Version=V2.0','MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation2>                 
+                      <SDKLocation2>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation('SDkWithManifest, Version=V2.0','MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation2>
                       <SDKLocation3>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation3>
                       <SDKName>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKDisplayName('MyPlatform','8.0', '$(SDKDirectoryRoot)', ''))</SDKName>
                  </PropertyGroup>
@@ -4120,7 +4120,7 @@ public void GetPlatformsForSDKWithInstalledTargetPlatformsNoMatch()
         [Fact]
         public void GetPlatformsForSDKWithMatchingPlatformNotMatchingVersion()
         {
-            ToolLocationHelper.GetPlatformsForSDK("MyPlatform", new Version("0.0.0.0"), new[] {_fakeStructureRoot}, null).Any().ShouldBeFalse();
+            ToolLocationHelper.GetPlatformsForSDK("MyPlatform", new Version("0.0.0.0"), new[] { _fakeStructureRoot }, null).Any().ShouldBeFalse();
         }
 
         /// <summary>
@@ -4130,7 +4130,7 @@ public void GetPlatformsForSDKWithMatchingPlatformNotMatchingVersion()
         [Fact]
         public void GetPlatformsForSDKForLegacyPlatformSDK()
         {
-            ToolLocationHelper.GetPlatformsForSDK("Windows", new Version("8.0"), new[] {_fakeStructureRoot}, null).Any().ShouldBeFalse();
+            ToolLocationHelper.GetPlatformsForSDK("Windows", new Version("8.0"), new[] { _fakeStructureRoot }, null).Any().ShouldBeFalse();
         }
 
         /// <summary>
@@ -4203,13 +4203,13 @@ public void VerifyFindRootFolderWhereAllFilesExist()
 
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "VerifyFindRootFolderWhereAllFilesExist");
             string[] rootDirectories = new string[] { Path.Combine(testDirectoryRoot, "Root1"), Path.Combine(testDirectoryRoot, "Root2") };
-            
-            for(int i = 0; i < rootDirectories.Length; i++)
+
+            for (int i = 0; i < rootDirectories.Length; i++)
             {
                 // create directory
                 string subdir = Path.Combine(rootDirectories[i], "Subdir");
                 Directory.CreateDirectory(subdir);
-                var fileInSubDir = string.Format("file{0}.txt", i+1);
+                var fileInSubDir = string.Format("file{0}.txt", i + 1);
                 File.Create(Path.Combine(rootDirectories[i], "file1.txt")).Close();
                 File.Create(Path.Combine(subdir, fileInSubDir)).Close();
             }
@@ -4846,17 +4846,17 @@ private static RegistryKey GetBaseKey(RegistryHive hive, RegistryView view)
             switch (hive)
             {
                 case RegistryHive.CurrentUser:
-                {
-                    return Registry.CurrentUser;
-                }
+                    {
+                        return Registry.CurrentUser;
+                    }
                 case RegistryHive.LocalMachine:
-                {
-                    return Registry.LocalMachine;
-                }
+                    {
+                        return Registry.LocalMachine;
+                    }
                 default:
-                {
-                    return null;
-                }
+                    {
+                        return null;
+                    }
             }
         }
 #endif
diff --git a/src/Utilities/CommandLineBuilder.cs b/src/Utilities/CommandLineBuilder.cs
index e6825a190d4..4f4cb1ab3bd 100644
--- a/src/Utilities/CommandLineBuilder.cs
+++ b/src/Utilities/CommandLineBuilder.cs
@@ -220,7 +220,7 @@ protected void AppendSpaceIfNotEmpty()
                 {
                     CommandLine.Append(Environment.NewLine);
                 }
-                else if(CommandLine[CommandLine.Length - 1] != ' ')
+                else if (CommandLine[CommandLine.Length - 1] != ' ')
                 {
                     CommandLine.Append(' ');
                 }
diff --git a/src/Utilities/Microsoft.Build.Utilities.csproj b/src/Utilities/Microsoft.Build.Utilities.csproj
index 93c295becb2..0c6b937eb32 100644
--- a/src/Utilities/Microsoft.Build.Utilities.csproj
+++ b/src/Utilities/Microsoft.Build.Utilities.csproj
@@ -30,7 +30,7 @@
     <PackageReference Include="System.Configuration.ConfigurationManager" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETStandard' and '$(DotNetBuildFromSource)' != 'true'">
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" />
   </ItemGroup>
 
diff --git a/src/Utilities/PlatformManifest.cs b/src/Utilities/PlatformManifest.cs
index 50cb5f42e5a..670634b4db3 100644
--- a/src/Utilities/PlatformManifest.cs
+++ b/src/Utilities/PlatformManifest.cs
@@ -135,7 +135,7 @@ private void LoadManifestFile()
                             {
                                 ApiContract.ReadContractsElement(childElement, ApiContracts);
                             }
-                            else if(ApiContract.IsVersionedContentElement(childElement.Name))
+                            else if (ApiContract.IsVersionedContentElement(childElement.Name))
                             {
                                 bool.TryParse(childElement.InnerText, out bool versionedContent);
                                 VersionedContent = versionedContent;
diff --git a/src/Utilities/README.md b/src/Utilities/README.md
new file mode 100644
index 00000000000..16961c90367
--- /dev/null
+++ b/src/Utilities/README.md
@@ -0,0 +1,7 @@
+# Microsoft.Build.Utilities.Core
+
+This package contains `Microsoft.Build.Utilities.Core.dll`, which defines helper functionality for MSBuild extenders, including
+
+* [`Task`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.task), a base class for custom tasks,
+* [`ToolTask`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.tooltask), a base class for tasks that run a command-line tool, and
+* [`Logger`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.logger), a base class for custom logging functionality.
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 875bb79b0ca..f4daea8da3a 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -1513,7 +1513,7 @@ public static string FindRootFolderWhereAllFilesExist(string possibleRoots, stri
                         }
                     }
 
-                    if(allFilesFound)
+                    if (allFilesFound)
                     {
                         return root;
                     }
@@ -3399,7 +3399,8 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
             switch (architecture)
             {
                 case DotNetFrameworkArchitecture.Bitness32:
-                    if (ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM)
+                    if (ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM ||
+                        ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM64)
                     {
                         return ProcessorArchitecture.ARM;
                     }
@@ -3410,6 +3411,7 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
                     {
                         NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
                         NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
+                        NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
                         // Error, OK, we're trying to get the 64-bit path on a 32-bit machine.
                         // That ... doesn't make sense. 
                         NativeMethodsShared.ProcessorArchitectures.X86 => null,
