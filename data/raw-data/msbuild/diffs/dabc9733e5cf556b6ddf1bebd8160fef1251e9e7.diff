diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 77997bc7040..c2131da1cbd 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -855,6 +855,7 @@ public static string GetEvaluatedItemIncludeEscaped(ProjectItemDefinition item)
         /// <example>
         ///
         /// <code>
+        /// <![CDATA[
         /// <P>*.txt</P>
         ///
         /// <Bar Include="bar"/> (both outside and inside project cone)
@@ -865,9 +866,12 @@ public static string GetEvaluatedItemIncludeEscaped(ProjectItemDefinition item)
         /// <Foo Include="$(P)"/>
         /// <Foo Include="*.a;@(Bar);3.a"/> (If Bar has globs, they will have been included when querying Bar ProjectItems for globs)
         /// <Foo Include="*.cs" Exclude="@(Bar)"/>
+        /// ]]>
         /// </code>
         ///
         /// Example result:
+        /// <code>
+        /// <![CDATA[
         /// [
         /// GlobResult(glob: "C:\**\*.foo", exclude: []),
         /// GlobResult(glob: ["*.a", "*.b"], exclude=["3.a"], remove=["2.a"]),
@@ -876,17 +880,23 @@ public static string GetEvaluatedItemIncludeEscaped(ProjectItemDefinition item)
         /// GlobResult(glob: "*.a", exclude=[]),
         /// GlobResult(glob: "*.cs", exclude=["bar"])
         /// ].
+        /// ]]>
+        /// </code>
         /// </example>
         /// <remarks>
+        /// <para>
         /// <see cref="GlobResult.MsBuildGlob"/> is a <see cref="IMSBuildGlob"/> that combines all globs in the include element and ignores
         /// all the fragments in the exclude attribute and all the fragments in all Remove elements that apply to the include element.
+        /// </para>
         ///
         /// Users can construct a composite glob that incorporates all the globs in the Project:
         /// <code>
+        /// <![CDATA[
         /// var uberGlob = new CompositeGlob(project.GetAllGlobs().Select(r => r.MSBuildGlob).ToArray());
         /// uberGlob.IsMatch("foo.cs");
+        /// ]]>
         /// </code>
-        ///
+        /// 
         /// </remarks>
         /// <returns>
         /// List of <see cref="GlobResult"/>.
diff --git a/src/Framework/Sdk/SdkResolver.cs b/src/Framework/Sdk/SdkResolver.cs
index a9da357212d..1bbb23d19f0 100644
--- a/src/Framework/Sdk/SdkResolver.cs
+++ b/src/Framework/Sdk/SdkResolver.cs
@@ -20,21 +20,21 @@ public abstract class SdkResolver
         public abstract int Priority { get; }
 
         /// <summary>
-        ///     Resolves the specified SDK reference.
+        /// Resolves the specified SDK reference.
         /// </summary>
         /// <param name="sdkReference">A <see cref="SdkReference" /> containing the referenced SDKs be resolved.</param>
         /// <param name="resolverContext">Context for resolving the SDK.</param>
         /// <param name="factory">Factory class to create an <see cref="SdkResult" /></param>
         /// <returns>
-        ///     An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
-        ///     the SDK could not be resolved.  Return <code>null</code> if the resolver is not
-        ///     applicable for a particular <see cref="SdkReference"/>.
-        ///  </returns>   
+        /// An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
+        /// the SDK could not be resolved. Return <c>null</c> if the resolver is not
+        /// applicable for a particular <see cref="SdkReference"/>.
+        /// </returns>   
         /// <remarks>
-        ///    Note: You must use <see cref="Microsoft.Build.Framework.SdkResultFactory"/> to return a result.
-        ///  </remarks>
-        /// 
-        public abstract SdkResult Resolve(SdkReference sdkReference, SdkResolverContext resolverContext,
-            SdkResultFactory factory);
+        /// Note: You must use <see cref="SdkResultFactory"/> to return a result.
+        /// </remarks>
+        public abstract SdkResult Resolve(SdkReference sdkReference,
+                                          SdkResolverContext resolverContext,
+                                          SdkResultFactory factory);
     }
 }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index d2c33492cb5..81c8e7be898 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -7739,19 +7739,24 @@ public void Regress397129_HandleInvalidDirectoriesAndFiles_Case2()
             Execute(t);
         }
 
+        /// <summary>
         /// Consider this dependency chain:
         ///
         /// App
+        /// <code>
+        /// <![CDATA[
         /// References - A
-        /// Depends on B
-        /// Will be found by hintpath.
+        ///      Depends on B
+        ///      Will be found by hintpath.
         /// References -B
-        /// No hintpath
-        /// Exists in A.dll's folder.
-        ///
+        ///      No hintpath
+        ///      Exists in A.dll's folder.
+        /// ]]>
+        /// </code>
         /// B.dll should be unresolved even though its in A's folder because primary resolution needs to work
         /// without looking at dependencies because of the load-time perf scenarios don't look at dependencies.
         /// We must be consistent between primaries resolved with FindDependencies=true and FindDependencies=false.
+        /// </summary>
         [Fact]
         public void ByDesignRelatedTo454863_PrimaryReferencesDontResolveToParentFolders()
         {
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
index 58aee27c91f..4e5758bfcc8 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
@@ -78,19 +78,29 @@ public void Exists()
 
         /// <summary>
         /// In this case,
-        /// - A single primary version-strict reference was passed in to assembly version 1.0.0.0
-        /// - An app.config was passed in that promotes a *different* assembly version name from 
-        //    1.0.0.0 to 2.0.0.0
-        /// - Version 1.0.0.0 of the file exists.
-        /// - Version 2.0.0.0 of the file exists.
+        /// <list type="bullet">
+        /// <item>A single primary version-strict reference was passed in to assembly version 1.0.0.0</item>
+        /// <item>
+        /// An app.config was passed in that promotes a *different* assembly version name from 
+        /// 1.0.0.0 to 2.0.0.0
+        /// </item>
+        /// <item>Version 1.0.0.0 of the file exists.</item>
+        /// <item>Version 2.0.0.0 of the file exists.</item>
+        /// </list>
         /// Expected:
-        /// -- The resulting assembly returned should be 1.0.0.0.
+        /// <list type="bullet">
+        /// <item>The resulting assembly returned should be 1.0.0.0.</item>
+        /// </list>
         /// Rationale:
         /// Primary references are never unified. This is because:
-        /// (a) The user expects that a primary reference will be respected.
-        /// (b) When FindDependencies is false and AutoUnify is true, we'd have to find all 
+        /// <list type="number">
+        /// <item>
+        /// The user expects that a primary reference will be respected.</item>
+        /// <item>When FindDependencies is false and AutoUnify is true, we'd have to find all 
         /// dependencies anyway to make things work consistently. This would be a significant
         /// perf hit when loading large solutions.
+        /// </item>
+        /// </list>
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 8ac948b8239..2d8ee1d418b 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -257,26 +257,28 @@ internal static string GetSourceCode(RoslynCodeTaskFactoryTaskInfo taskInfo, ICo
         }
 
         /// <summary>
-        ///  Parses and validates the body of the &lt;UsingTask /&gt;.
-        ///  </summary>
+        /// Parses and validates the body of the &lt;UsingTask /&gt;.
+        /// </summary>
         /// <param name="log">A <see cref="TaskLoggingHelper"/> used to log events during parsing.</param>
         /// <param name="taskName">The name of the task.</param>
         /// <param name="taskBody">The raw inner XML string of the &lt;UsingTask />&gt; to parse and validate.</param>
         /// <param name="parameters">An <see cref="ICollection{TaskPropertyInfo}"/> containing parameters for the task.</param>
         /// <param name="taskInfo">A <see cref="RoslynCodeTaskFactoryTaskInfo"/> object that receives the details of the parsed task.</param>
-        /// <returns><code>true</code> if the task body was successfully parsed, otherwise <code>false</code>.</returns>
+        /// <returns><c>true</c> if the task body was successfully parsed, otherwise <c>false</c>.</returns>
         /// <remarks>
-        ///  The <paramref name="taskBody"/> will look like this:
-        ///  <![CDATA[
+        /// The <paramref name="taskBody"/> will look like this:
+        /// <code>
+        /// <![CDATA[
         ///
-        ///    <Using Namespace="Namespace" />
-        ///    <Reference Include="AssemblyName|AssemblyPath" />
-        ///    <Code Type="Fragment|Method|Class" Language="cs|vb" Source="Path">
-        ///      // Source code
-        ///    </Code>
+        /// <Using Namespace="Namespace" />
+        /// <Reference Include="AssemblyName|AssemblyPath" />
+        /// <Code Type="Fragment|Method|Class" Language="cs|vb" Source="Path">
+        ///   // Source code
+        /// </Code>
         ///
-        ///  ]]>
-        ///  </remarks>
+        /// ]]>
+        /// </code>
+        /// </remarks>
         internal static bool TryLoadTaskBody(TaskLoggingHelper log, string taskName, string taskBody, ICollection<TaskPropertyInfo> parameters, out RoslynCodeTaskFactoryTaskInfo taskInfo)
         {
             taskInfo = new RoslynCodeTaskFactoryTaskInfo
