diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index 2b807b34095..e48fca39e77 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Shared;
-using System;
 using System.Diagnostics;
 using System.IO;
 using System.Text.RegularExpressions;
@@ -43,7 +42,7 @@ public bool IsMatch(string fileToMatch)
                 return _regex.IsMatch(normalizedFileToMatch);
             }
 
-            return FileUtilities.CaseInsensitiveComparePathsNoThrow(_unescapedFileSpec, fileToMatch, _currentDirectory);
+            return FileUtilities.ComparePathsNoThrow(_unescapedFileSpec, fileToMatch, _currentDirectory, alwaysIgnoreCase: true);
         }
 
         // this method parses the glob and extracts the fixed directory part in order to normalize it and make it absolute
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 721bf80f317..8bd1b8ea823 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -736,11 +736,13 @@ internal static string GetFullPathNoThrow(string path)
         /// <param name="first"></param>
         /// <param name="second"></param>
         /// <param name="currentDirectory"></param>
+        /// <param name="alwaysIgnoreCase"></param>
         /// <returns></returns>
-        internal static bool ComparePathsNoThrow(string first, string second, string currentDirectory)
+        internal static bool ComparePathsNoThrow(string first, string second, string currentDirectory, bool alwaysIgnoreCase = false)
         {
+            StringComparison pathComparison = alwaysIgnoreCase ? StringComparison.OrdinalIgnoreCase : PathComparison;
             // perf: try comparing the bare strings first
-            if (string.Equals(first, second, PathComparison))
+            if (string.Equals(first, second, pathComparison))
             {
                 return true;
             }
@@ -748,29 +750,7 @@ internal static bool ComparePathsNoThrow(string first, string second, string cur
             var firstFullPath = NormalizePathForComparisonNoThrow(first, currentDirectory);
             var secondFullPath = NormalizePathForComparisonNoThrow(second, currentDirectory);
 
-            return string.Equals(firstFullPath, secondFullPath, PathComparison);
-        }
-
-        /// <summary>
-        /// Compare if two paths, relative to the given currentDirectory are equal.
-        /// Does not throw IO exceptions. See <see cref="GetFullPathNoThrow(string)"/>
-        /// </summary>
-        /// <param name="first"></param>
-        /// <param name="second"></param>
-        /// <param name="currentDirectory"></param>
-        /// <returns></returns>
-        internal static bool CaseInsensitiveComparePathsNoThrow(string first, string second, string currentDirectory)
-        {
-            // perf: try comparing the bare strings first
-            if (string.Equals(first, second, StringComparison.OrdinalIgnoreCase))
-            {
-                return true;
-            }
-
-            var firstFullPath = NormalizePathForComparisonNoThrow(first, currentDirectory);
-            var secondFullPath = NormalizePathForComparisonNoThrow(second, currentDirectory);
-
-            return string.Equals(firstFullPath, secondFullPath, StringComparison.OrdinalIgnoreCase);
+            return string.Equals(firstFullPath, secondFullPath, pathComparison);
         }
 
         /// <summary>
