diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 3f0a0330b05..856a0acc48e 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -148,7 +148,7 @@ internal ProjectItem(
         string IItemData.ItemSpec => this.EvaluatedInclude;
 
         /// <inheritdoc cref="IItemDataWithMetadata.EnumerateMetadata"/>
-        IEnumerable <KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => this.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
+        IEnumerable<KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => this.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
 
         /// <summary>
         /// Backing XML item.
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index 5a79cab99a6..bd47681f843 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -763,9 +763,13 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                         {
                             data = dt;
                         }
+                        else
+                        {
+                            Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected {nameof(itemValue)} {itemValue} of type {itemValue?.GetType().ToString()}");
+                        }
                     }
 
-                    if (!String.IsNullOrEmpty(itemType))
+                    if (!string.IsNullOrEmpty(itemType))
                     {
                         yield return (itemType, data);
                     }
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
index bcb814769af..4c2ab53196f 100644
--- a/src/Framework/IItemData.cs
+++ b/src/Framework/IItemData.cs
@@ -2,28 +2,20 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Framework;
 
-
 /// <summary>
 /// Represents an item data (per single item type) that might be returned via <see cref="ProjectEvaluationFinishedEventArgs"/> or <see cref="ProjectStartedEventArgs"/>.
 /// </summary>
 public interface IItemData
 {
-    ///// <summary>
-    ///// The item evaluated include value
-    ///// </summary>
-    //string EvaluatedInclude { get; }
-
     /// <summary>
-    /// Gets or sets the item "specification" e.g. for disk-based items this would be the file path.
+    /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
     /// </summary>
     /// <remarks>
-    /// This should be named "EvaluatedInclude" but that would be a breaking change to this interface.
+    /// This should be named "EvaluatedInclude" but that would be a breaking change to the upstream interface.
     /// </remarks>
-    /// <value>The item-spec string.</value>
     string ItemSpec
     {
         get;
