diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index ec977d2f474..57e65280fc0 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -81,16 +81,25 @@ public void BuildGraph()
                 return;
             }
 
-            var allParsedProjects = FindGraphNodes();
+            var gcLatencyMode = System.Runtime.GCSettings.LatencyMode = System.Runtime.GCLatencyMode.SustainedLowLatency;
+            try
+            {
+
+                var allParsedProjects = FindGraphNodes();
 
-            AddEdges(allParsedProjects);
+                AddEdges(allParsedProjects);
 
-            EntryPointNodes = _entryPointConfigurationMetadata.Select(e => allParsedProjects[e].GraphNode).ToList();
+                EntryPointNodes = _entryPointConfigurationMetadata.Select(e => allParsedProjects[e].GraphNode).ToList();
 
-            DetectCycles(EntryPointNodes, _projectInterpretation, allParsedProjects);
+                DetectCycles(EntryPointNodes, _projectInterpretation, allParsedProjects);
 
-            RootNodes = GetGraphRoots(EntryPointNodes);
-            ProjectNodes = allParsedProjects.Values.Select(p => p.GraphNode).ToList();
+                RootNodes = GetGraphRoots(EntryPointNodes);
+                ProjectNodes = allParsedProjects.Values.Select(p => p.GraphNode).ToList();
+            }
+            finally
+            {
+                System.Runtime.GCSettings.LatencyMode = gcLatencyMode;
+            }
         }
 
         private static IReadOnlyCollection<ProjectGraphNode> GetGraphRoots(IReadOnlyCollection<ProjectGraphNode> entryPointNodes)
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index bb14d663c84..c60d10e41aa 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -4,6 +4,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
@@ -38,6 +39,83 @@ internal ProjectGraphNode(ProjectInstance projectInstance)
         /// </summary>
         public IReadOnlyCollection<ProjectGraphNode> ReferencingProjects => _referencingProjects;
 
+        internal class ProjectInstanceSnapshot
+        {
+            public ProjectInstanceSnapshot(ProjectInstance instance)
+            {
+                FullPath = instance.FullPath;
+                DefaultTargets = instance.DefaultTargets;
+                ProjectFileLocation = instance.ProjectFileLocation;
+                GlobalPropertiesDictionary = instance.GlobalPropertiesDictionary;
+
+                var innerBuildPropValue = instance.GetPropertyValue(PropertyNames.InnerBuildProperty);
+                Properties = new()
+                {
+                    { ProjectInterpretation.AddTransitiveProjectReferencesInStaticGraphPropertyName, instance.GetPropertyValue(ProjectInterpretation.AddTransitiveProjectReferencesInStaticGraphPropertyName) },
+                    { ProjectInterpretation.EnableDynamicPlatformResolutionPropertyName, instance.GetPropertyValue(ProjectInterpretation.EnableDynamicPlatformResolutionPropertyName) },
+                    { PropertyNames.InnerBuildProperty, innerBuildPropValue },
+                    { innerBuildPropValue, instance.GetPropertyValue(innerBuildPropValue) },
+                    { "UsingMicrosoftNETSdk", instance.GetPropertyValue("UsingMicrosoftNETSdk") },
+                    { "DisableTransitiveProjectReferences", instance.GetPropertyValue("DisableTransitiveProjectReferences") },
+                    { "UsingMicrosoftNETSdk", instance.GetPropertyValue("UsingMicrosoftNETSdk") },
+                };
+
+                foreach(ProjectItemInstance projectItemInstance in instance.GetItems(ItemTypeNames.ProjectReferenceTargets))
+                {
+                    string targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
+                    bool skipNonexistentTargets = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue("SkipNonexistentTargets"));
+                    bool targetsAreForOuterBuild = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetIsOuterBuildMetadataName));
+                    TargetSpecification[] targets = ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue)
+                        .Select(t => new TargetSpecification(t, skipNonexistentTargets)).ToArray();
+
+                    ProjectReferenceByTargets.Add(item)
+
+                }
+
+                ProjectReferenceByTargets = new()
+                {
+
+                };
+
+                // GetItems + ItemTypeNames.ProjectCachePlugin
+                /*
+                 *             if (string.IsNullOrWhiteSpace(projectInstance.GetPropertyValue(AddTransitiveProjectReferencesInStaticGraphPropertyName)) &&
+                MSBuildStringIsTrue(projectInstance.GetPropertyValue("UsingMicrosoftNETSdk")) &&
+                MSBuildStringIsFalse(projectInstance.GetPropertyValue("DisableTransitiveProjectReferences")))
+            {
+                return true;
+            }
+
+                project.GetItems(ItemTypeNames.ProjectReferenceTargets);
+
+            return MSBuildStringIsTrue(
+                projectInstance.GetPropertyValue(AddTransitiveProjectReferencesInStaticGraphPropertyName));
+
+                requesterInstance.GetItems(ItemTypeNames.ProjectReference);
+                 */
+            }
+
+            public string FullPath;
+            public List<string> DefaultTargets;
+            public Construction.ElementLocation ProjectFileLocation;
+            public Collections.PropertyDictionary<ProjectPropertyInstance> GlobalPropertiesDictionary;
+            public Dictionary<string,string> GlobalProperties;
+            public Dictionary<string, string> Properties;
+            public List<ProjectReferenceItem> ProjectReferenceByTargets;
+
+            public class ProjectReferenceItem
+            {
+                public string Identity;
+                public string Targets;
+                public string 
+            }
+
+            public string GetPropertyValue(string propertyName)
+            {
+                return Properties[propertyName];
+            }
+        }
+
         /// <summary>
         /// Gets the evaluated project instance represented by this node in the graph.
         /// </summary>
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index dd47dbadc85..3173e2e02f6 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -34,7 +34,7 @@ internal sealed class ProjectInterpretation
         private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
         private const string PlatformMetadataName = "Platform";
         private const string PlatformsMetadataName = "Platforms";
-        private const string EnableDynamicPlatformResolutionPropertyName = "EnableDynamicPlatformResolution";
+        internal const string EnableDynamicPlatformResolutionPropertyName = "EnableDynamicPlatformResolution";
         private const string OverridePlatformNegotiationValue = "OverridePlatformNegotiationValue";
         private const string ShouldUnsetParentConfigurationAndPlatformPropertyName = "ShouldUnsetParentConfigurationAndPlatform";
         private const string ProjectMetadataName = "Project";
