diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 886fe7aa982..a30a121ddd1 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -959,7 +959,7 @@ internal static string GetShortFilePath(string path)
 
             if (length > 0)
             {
-                StringBuilder fullPathBuffer = new StringBuilder(length);
+                char[] fullPathBuffer = new char[length];
                 length = GetShortPathName(path, fullPathBuffer, length);
                 errorCode = Marshal.GetLastWin32Error();
 
@@ -998,13 +998,13 @@ internal static string GetLongFilePath(string path)
 
             if (length > 0)
             {
-                StringBuilder fullPathBuffer = new StringBuilder(length);
+                char[] fullPathBuffer = new char[length];
                 length = GetLongPathName(path, fullPathBuffer, length);
                 errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = fullPathBuffer.ToString();
+                    string fullPath = new(fullPathBuffer);
                     path = fullPath;
                 }
             }
@@ -1478,15 +1478,13 @@ internal static void VerifyThrowWin32Result(int result)
     internal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);
 
     [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
-    private static extern uint SearchPath
-    (
+    private static extern uint SearchPath(
         string path,
         string fileName,
         string extension,
         int numBufferChars,
-        [Out] StringBuilder buffer,
-        int[] filePart
-    );
+        [Out] char[] buffer,
+        int[] filePart);
 
     [DllImport("kernel32.dll", PreserveSig = true, SetLastError = true)]
     [return: MarshalAs(UnmanagedType.Bool)]
@@ -1504,10 +1502,10 @@ internal static extern uint GetRequestedRuntimeInfo(String pExe,
                                             String pConfigurationFile,
                                             uint startupFlags,
                                             uint runtimeInfoFlags,
-                                            [Out] StringBuilder pDirectory,
+                                            [Out] char[] pDirectory,
                                             int dwDirectory,
                                             out uint dwDirectoryLength,
-                                            [Out] StringBuilder pVersion,
+                                            [Out] char[] pVersion,
                                             int cchBuffer,
                                             out uint dwlength);
 
@@ -1521,7 +1519,7 @@ internal static extern int GetModuleFileName(
 #else
             IntPtr hModule,
 #endif
-            [Out] StringBuilder buffer, int length);
+            [Out] char[] buffer, int length);
 
     [DllImport("kernel32.dll")]
     internal static extern IntPtr GetStdHandle(int nStdHandle);
@@ -1570,10 +1568,10 @@ internal static bool SetCurrentDirectory(string path)
     private static extern bool GlobalMemoryStatusEx([In, Out] MemoryStatus lpBuffer);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetShortPathName(string path, [Out] StringBuilder fullpath, [In] int length);
+    internal static extern int GetShortPathName(string path, [Out] char[] fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetLongPathName([In] string path, [Out] StringBuilder fullpath, [In] int length);
+    internal static extern int GetLongPathName([In] string path, [Out] char[] fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
     internal static extern bool CreatePipe(out SafeFileHandle hReadPipe, out SafeFileHandle hWritePipe, SecurityAttributes lpPipeAttributes, int nSize);
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 8a6d3f7a516..2c403c8a03a 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -567,7 +567,7 @@ internal static string GetRuntimeVersion(string path)
 #if FEATURE_MSCOREE
             if (NativeMethodsShared.IsWindows)
             {
-                StringBuilder runtimeVersion;
+                char[] runtimeVersion;
                 uint hresult;
 #if DEBUG
                 // Just to make sure and exercise the code that doubles the size
@@ -578,18 +578,19 @@ internal static string GetRuntimeVersion(string path)
 #endif
                 do
                 {
-                    runtimeVersion = new StringBuilder(bufferLength);
+                    runtimeVersion = new char[bufferLength];
                     hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out _);
                     bufferLength *= 2;
-                } while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
+                }
+                while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
 
                 if (hresult == NativeMethodsShared.S_OK)
                 {
-                    return runtimeVersion.ToString();
+                    return new string(runtimeVersion);
                 }
                 else
                 {
-                    return String.Empty;
+                    return string.Empty;
                 }
             }
             else
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index b7df962c76f..07cfc2ea710 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -373,10 +373,10 @@ internal static string GetGacPath()
         {
             int gacPathLength = 0;
             NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
-            StringBuilder gacPath = new StringBuilder(gacPathLength);
+            char[] gacPath = new char[gacPathLength];
             NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
 
-            return gacPath.ToString();
+            return new string(gacPath);
         }
     }
 }
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index cea831d5798..f509ead0aa2 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -407,21 +407,27 @@ internal static string StripTypeLibNumberFromPath(string typeLibPath, FileExists
         private static string GetModuleFileName(IntPtr handle)
         {
             bool success = false;
-            var buffer = new StringBuilder();
+            char[] buffer = null;
 
             // Try increased buffer sizes if on longpath-enabled Windows
             for (int bufferSize = NativeMethodsShared.MAX_PATH; !success && bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
             {
-                buffer.EnsureCapacity(bufferSize);
-
+                buffer = System.Buffers.ArrayPool<char>.Shared.Rent(bufferSize);
+                try
+                {
                 var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
-                int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, buffer.Capacity);
+                int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
 
-                bool isBufferTooSmall = ((uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
+                bool isBufferTooSmall = (uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER;
                 success = pathLength != 0 && !isBufferTooSmall;
+                }
+                finally
+                {
+                    System.Buffers.ArrayPool<char>.Shared.Return(buffer);
+                }
             }
 
-            return success ? buffer.ToString() : string.Empty;
+            return success ? new string(buffer) : string.Empty;
         }
 
         /// <summary>
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 566553eff41..dce6ee7fbbc 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -56,8 +56,10 @@ private static extern int RmRegisterResources(uint pSessionHandle,
             string[] rgsServiceNames);
 
         [DllImport(RestartManagerDll, CharSet = CharSet.Unicode)]
-        private static extern int RmStartSession(out uint pSessionHandle,
-            int dwSessionFlags, StringBuilder strSessionKey);
+        private static extern int RmStartSession(
+            out uint pSessionHandle,
+            int dwSessionFlags,
+            char[] strSessionKey);
 
         [DllImport(RestartManagerDll)]
         private static extern int RmEndSession(uint pSessionHandle);
@@ -211,7 +213,8 @@ internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[]
             const int maxRetries = 6;
 
             // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
-            var key = new StringBuilder(new string('\0', CCH_RM_SESSION_KEY + 1));
+            char[] key = new char[CCH_RM_SESSION_KEY + 1];
+            key[0] = '\0';
 
             int res = RmStartSession(out uint handle, 0, key);
             if (res != 0)
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index f2308684706..fb571105567 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1051,7 +1051,7 @@ internal static extern int CreateAssemblyNameObject(
         /// to allocate a mutable buffer of characters and pass it around.
         /// </summary>
         [DllImport("fusion.dll", CharSet = CharSet.Unicode)]
-        internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, StringBuilder cachePath, ref int pcchPath);
+        internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, char[] cachePath, ref int pcchPath);
 #endif
 
         //------------------------------------------------------------------------------
@@ -1125,7 +1125,7 @@ internal static extern int CreateAssemblyNameObject(
         /// <param name="dwLength">The size, in bytes, of the returned szBuffer.</param>
         /// <returns>HResult</returns>
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static extern uint GetFileVersion(String szFullPath, StringBuilder szBuffer, int cchBuffer, out uint dwLength);
+        internal static extern uint GetFileVersion(string szFullPath, char[] szBuffer, int cchBuffer, out uint dwLength);
 #endif
         #endregion
 
