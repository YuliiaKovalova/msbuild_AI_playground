diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 21a51e94332..142bd50b8ed 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -206,9 +206,10 @@ public void Initialize(IEventSource eventSource)
                     replayEventsSource.EmbeddedContentRead += args =>
                         eventArgsWriter.WriteBlob(args.ContentKind.ToBinaryLogRecordKind(), args.ContentStream);
                 }
-                else if (CollectProjectImports != ProjectImportsCollectionMode.None)
+                else if (CollectProjectImports == ProjectImportsCollectionMode.ZipFile)
                 {
-                    throw new LoggerException($"ProjectImports={CollectProjectImports} not supported in reply mode - only Embed or None are supported.");
+                    replayEventsSource.EmbeddedContentRead += args =>
+                        ProjectImportsCollector.FlushBlobToFile(FilePath, args.ContentStream);
                 }
 
                 // If raw events are provided - let's try to use the advantage.
diff --git a/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs b/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
index 714eb3332e3..a1f37876ca9 100644
--- a/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
+++ b/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
@@ -24,6 +24,7 @@ internal class ProjectImportsCollector
         private ZipArchive? _zipArchive;
         private readonly string _archiveFilePath;
         private readonly bool _runOnBackground;
+        private const string DefaultSourcesArchiveExtension = ".ProjectImports.zip";
 
         /// <summary>
         /// Avoid visiting each file more than once.
@@ -33,16 +34,30 @@ internal class ProjectImportsCollector
         // this will form a chain of file write tasks, running sequentially on a background thread
         private Task _currentTask = Task.CompletedTask;
 
+        internal static void FlushBlobToFile(
+            string logFilePath,
+            Stream contentStream)
+        {
+            string archiveFilePath = GetArchiveFilePath(logFilePath, DefaultSourcesArchiveExtension);
+
+            using var fileStream = new FileStream(archiveFilePath, FileMode.Create, FileAccess.ReadWrite, FileShare.Delete);
+            contentStream.CopyTo(fileStream);
+        }
+
+        // Archive file will be stored alongside the binlog
+        private static string GetArchiveFilePath(string logFilePath, string sourcesArchiveExtension)
+            => Path.ChangeExtension(logFilePath, sourcesArchiveExtension);
+        
+
         public ProjectImportsCollector(
             string logFilePath,
             bool createFile,
-            string sourcesArchiveExtension = ".ProjectImports.zip",
+            string sourcesArchiveExtension = DefaultSourcesArchiveExtension,
             bool runOnBackground = true)
         {
             if (createFile)
             {
-                // Archive file will be stored alongside the binlog
-                _archiveFilePath = Path.ChangeExtension(logFilePath, sourcesArchiveExtension);
+                _archiveFilePath = GetArchiveFilePath(logFilePath, sourcesArchiveExtension);
             }
             else
             {
