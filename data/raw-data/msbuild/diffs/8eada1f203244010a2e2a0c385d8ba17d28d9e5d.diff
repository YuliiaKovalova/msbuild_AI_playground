diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index b4c3190f3b4..e24a13ff151 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -25,11 +25,6 @@
     <Reference Include="System.Xaml" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
-    <!-- Need Win32 API on .NET Standard to ping registry for some methods in ToolLocationHelper -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
-
   <ItemGroup>
     <Compile Include="..\Shared\Constants.cs">
       <Link>Shared\Constants.cs</Link>
diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 5bfd050ac07..f62cb746eec 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -156,146 +156,6 @@ public void VerifyMixedLegacyBehavior()
             pidOfServerProcess.ShouldBe(pidOfNewserverProcess, "Server node should be the same as from earlier.");
         }
 
-        [Fact]
-        public void BuildsWhileBuildIsRunningOnServer()
-        {
-            _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-            TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
-            TransientTestFile sleepProject = _env.CreateFile("napProject.proj", sleepingTaskContents);
-            _env.SetEnvironmentVariable("MSBUILDDEBUGCOMM", "1");
-            _env.SetEnvironmentVariable("MSBUILDDEBUGPATH", Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder"));
-
-            int pidOfServerProcess = -1;
-            try
-            {
-                // Start a server node and find its PID.
-                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
-                pidOfServerProcess = ParseNumber(output, "Server ID is ");
-
-                foreach (Process p in Process.GetProcesses())
-                {
-                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
-                }
-
-                var msbuildParameters = sleepProject.Path;
-#if FEATURE_RUN_EXE_IN_TESTS
-                var pathToExecutable = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
-#else
-            var pathToExecutable = ResolveRuntimeExecutableName()!;
-            msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToExecutable) + " " + msbuildParameters;
-#endif
-                var psi = new ProcessStartInfo(pathToExecutable)
-                {
-                    CreateNoWindow = true,
-                    RedirectStandardInput = true,
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    Arguments = msbuildParameters
-                };
-
-                Process pr = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    pr.Start();
-                    pr.BeginOutputReadLine();
-                    pr.BeginErrorReadLine();
-                    pr.StandardInput.Dispose();
-
-                psi = new(pathToExecutable)
-                {
-                    CreateNoWindow = true,
-                    RedirectStandardInput = true,
-                    RedirectStandardOutput = true,
-                    RedirectStandardError = true,
-                    UseShellExecute = false,
-                    Arguments = project.Path
-                };
-
-                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
-                output = String.Empty;
-                Process q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    q.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.Start();
-                    q.BeginOutputReadLine();
-                    q.BeginErrorReadLine();
-                    q.StandardInput.Dispose();
-
-                q.WaitForExit(30000);
-                q.ExitCode.ShouldBe(0);
-                ParseNumber(output, "Server ID is ").ShouldBe(q.Id, "There should not be a server node for this build.");
-
-                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-                output = String.Empty;
-                q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    q.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.Start();
-                    q.BeginOutputReadLine();
-                    q.BeginErrorReadLine();
-                    q.StandardInput.Dispose();
-
-                q.WaitForExit(30000);
-                q.ExitCode.ShouldBe(0);
-                pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
-                pidOfServerProcess.ShouldNotBe(q.Id, "There should not be a server node for this build.");
-
-                if (pidOfServerProcess > -1)
-                {
-                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
-                }
-                pr.WaitForExit(30000);
-            }
-            finally
-            {
-                foreach (string? file in Directory.GetFiles(Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder")))
-                {
-                    _output.WriteLine($"New file: {file}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                    foreach (string line in File.ReadLines(file!))
-                    {
-                        _output.WriteLine(line + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                    }
-                }
-
-                try
-                {
-                    if (pidOfServerProcess > -1)
-                    {
-                        ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
-                    }
-                }
-                catch (Exception) { }
-            }
-        }
-
         [Fact]
         public void MultiProcBuildOnServer()
         {
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 31b9ed35465..1a25799865b 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -120,17 +120,16 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 successfulExit = p.ExitCode == 0;
             }
 
+            output += "Process ID is " + pid + "\r\n";
+
             outputHelper?.WriteLine("==== OUTPUT ====");
             outputHelper?.WriteLine(output + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-            outputHelper?.WriteLine("Process ID is " + pid + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}" + "\r\n");
             outputHelper?.WriteLine("==============");
 
             Console.WriteLine("==== OUTPUT ====");
             Console.WriteLine(output);
-            Console.WriteLine("Process ID is " + pid + "\r\n");
             Console.WriteLine("==============");
 
-            output += "Process ID is " + pid + "\r\n";
             return output;
         }
     }
