diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index bdff04dab08..14da4986726 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="1.0.0-beta.22507.3">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="1.0.0-beta.22510.3">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>04a9873936e31619e347ed731c91d70a2413d691</Sha>
+      <Sha>b060d20cfdec48c2576334f6009e4c0031560885</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/common/init-tools-native.ps1 b/eng/common/init-tools-native.ps1
index 526711adf94..76de8593974 100644
--- a/eng/common/init-tools-native.ps1
+++ b/eng/common/init-tools-native.ps1
@@ -120,52 +120,61 @@ try {
         $NativeTools.PSObject.Properties | ForEach-Object {
           $ToolName = $_.Name
           $ToolVersion = $_.Value
-          $LocalInstallerArguments =  @{ ToolName = "$ToolName" }
-          $LocalInstallerArguments += @{ InstallPath = "$InstallBin" }
-          $LocalInstallerArguments += @{ BaseUri = "$BaseUri" }
-          $LocalInstallerArguments += @{ CommonLibraryDirectory = "$EngCommonBaseDir" }
-          $LocalInstallerArguments += @{ Version = "$ToolVersion" }
-    
-          if ($Verbose) {
-            $LocalInstallerArguments += @{ Verbose = $True }
-          }
-          if (Get-Variable 'Force' -ErrorAction 'SilentlyContinue') {
-            if($Force) {
-              $LocalInstallerArguments += @{ Force = $True }
-            }
-          }
-          if ($Clean) {
-            $LocalInstallerArguments += @{ Clean = $True }
+
+          if ((Get-Command "$ToolName" -ErrorAction SilentlyContinue) -eq $null) {
+            Write-PipelineTelemetryError -Category 'NativeToolsBootstrap' -Message "$ToolName not found on path. Please install $ToolName $ToolVersion before proceeding."
           }
-    
-          Write-Verbose "Installing $ToolName version $ToolVersion"
-          Write-Verbose "Executing '$InstallerPath $($LocalInstallerArguments.Keys.ForEach({"-$_ '$($LocalInstallerArguments.$_)'"}) -join ' ')'"
-          & $InstallerPath @LocalInstallerArguments
-          if ($LASTEXITCODE -Ne "0") {
-            $errMsg = "$ToolName installation failed"
-            if ((Get-Variable 'DoNotAbortNativeToolsInstallationOnFailure' -ErrorAction 'SilentlyContinue') -and $DoNotAbortNativeToolsInstallationOnFailure) {
-                $showNativeToolsWarning = $true
-                if ((Get-Variable 'DoNotDisplayNativeToolsInstallationWarnings' -ErrorAction 'SilentlyContinue') -and $DoNotDisplayNativeToolsInstallationWarnings) {
-                    $showNativeToolsWarning = $false
-                }
-                if ($showNativeToolsWarning) {
-                    Write-Warning $errMsg
-                }
-                $toolInstallationFailure = $true
-            } else {
-                Write-Error $errMsg
-                exit 1
-            }
+        }
+        exit 0
+      }
+    } else {
+      $NativeTools.PSObject.Properties | ForEach-Object {
+        $ToolName = $_.Name
+        $ToolVersion = $_.Value
+        $LocalInstallerArguments =  @{ ToolName = "$ToolName" }
+        $LocalInstallerArguments += @{ InstallPath = "$InstallBin" }
+        $LocalInstallerArguments += @{ BaseUri = "$BaseUri" }
+        $LocalInstallerArguments += @{ CommonLibraryDirectory = "$EngCommonBaseDir" }
+        $LocalInstallerArguments += @{ Version = "$ToolVersion" }
+  
+        if ($Verbose) {
+          $LocalInstallerArguments += @{ Verbose = $True }
+        }
+        if (Get-Variable 'Force' -ErrorAction 'SilentlyContinue') {
+          if($Force) {
+            $LocalInstallerArguments += @{ Force = $True }
           }
         }
-    
-        if ((Get-Variable 'toolInstallationFailure' -ErrorAction 'SilentlyContinue') -and $toolInstallationFailure) {
-            exit 1
+        if ($Clean) {
+          $LocalInstallerArguments += @{ Clean = $True }
         }
+  
+        Write-Verbose "Installing $ToolName version $ToolVersion"
+        Write-Verbose "Executing '$InstallerPath $($LocalInstallerArguments.Keys.ForEach({"-$_ '$($LocalInstallerArguments.$_)'"}) -join ' ')'"
+        & $InstallerPath @LocalInstallerArguments
+        if ($LASTEXITCODE -Ne "0") {
+          $errMsg = "$ToolName installation failed"
+          if ((Get-Variable 'DoNotAbortNativeToolsInstallationOnFailure' -ErrorAction 'SilentlyContinue') -and $DoNotAbortNativeToolsInstallationOnFailure) {
+              $showNativeToolsWarning = $true
+              if ((Get-Variable 'DoNotDisplayNativeToolsInstallationWarnings' -ErrorAction 'SilentlyContinue') -and $DoNotDisplayNativeToolsInstallationWarnings) {
+                  $showNativeToolsWarning = $false
+              }
+              if ($showNativeToolsWarning) {
+                  Write-Warning $errMsg
+              }
+              $toolInstallationFailure = $true
+          } else {
+              Write-Error $errMsg
+              exit 1
+          }
+        }
+      }
+  
+      if ((Get-Variable 'toolInstallationFailure' -ErrorAction 'SilentlyContinue') -and $toolInstallationFailure) {
+          exit 1
       }
     }
-  }
-  else {
+  } else {
     Write-Host "No native tools defined in global.json"
     exit 0
   }
diff --git a/global.json b/global.json
index 97ece3a27ae..dc390d2b1e4 100644
--- a/global.json
+++ b/global.json
@@ -12,6 +12,6 @@
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "1.0.0-beta.22507.3"
+    "Microsoft.DotNet.Arcade.Sdk": "1.0.0-beta.22510.3"
   }
 }
