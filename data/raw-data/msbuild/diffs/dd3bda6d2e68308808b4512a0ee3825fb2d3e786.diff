diff --git a/src/Build.OM.UnitTests/AssemblyResources.cs b/src/Build.OM.UnitTests/AssemblyResources.cs
deleted file mode 100644
index 311870a9e2b..00000000000
--- a/src/Build.OM.UnitTests/AssemblyResources.cs
+++ /dev/null
@@ -1,23 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-#nullable disable
-
-namespace Microsoft.Build.Shared
-{
-    /// <summary>
-    /// This class provides access to the assembly's resources.
-    /// </summary>
-    internal static class AssemblyResources
-    {
-        /// <summary>
-        /// Dummy
-        /// </summary>
-        internal static string GetString(string name)
-        {
-            return String.Empty;
-        }
-    }
-}
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index df1c15ea5e6..d1aa20c9c76 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -36,9 +36,7 @@
     <Compile Include="..\Shared\EncodingStringWriter.cs">
       <Link>EncodingStringWriter.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ErrorUtilities.cs" />
     <Compile Include="..\Shared\FileDelegates.cs" />
-    <Compile Include="..\Shared\ResourceUtilities.cs" />
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
     </Compile>
diff --git a/src/Build/Globbing/MSBuildGlob.cs b/src/Build/Globbing/MSBuildGlob.cs
index e6cb8ab1ac5..9d2316faf8e 100644
--- a/src/Build/Globbing/MSBuildGlob.cs
+++ b/src/Build/Globbing/MSBuildGlob.cs
@@ -4,6 +4,7 @@
 
 using System;
 using System.IO;
+using System.Reflection.Metadata;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Shared;
@@ -170,7 +171,14 @@ public static MSBuildGlob Parse(string globRoot, string fileSpec)
         {
             ErrorUtilities.VerifyThrowArgumentNull(globRoot);
             ErrorUtilities.VerifyThrowArgumentNull(fileSpec);
-            ErrorUtilities.VerifyThrowArgumentInvalidPath(globRoot, nameof(globRoot));
+
+            // ErrorUtilities.VerifyThrowArgumentInvalidPath was removed to decouple ErrorUtilities and FileUtilities
+            // This was the only call to ErrorUtilities.VerifyThrowArgumentInvalidPath in the entire codebase
+            // Original code: ErrorUtilities.VerifyThrowArgumentInvalidPath(globRoot, nameof(globRoot));
+            if (FileUtilities.PathIsInvalid(globRoot))
+            {
+                ErrorUtilities.ThrowArgument("Shared.ParameterCannotHaveInvalidPathChars", nameof(globRoot), globRoot);
+            }
 
             if (string.IsNullOrEmpty(globRoot))
             {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index abca37075e0..42b9b47ee44 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -584,7 +584,6 @@
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectTargetElementLink.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectTaskElementLink.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskBodyElementLink.cs" />
-    <Compile Include="Resources\AssemblyResources.cs" />
     <Compile Include="Resources\Constants.cs" />
     <Compile Include="Resources\MSBuildAssemblyFileVersion.cs" />
     <!-- ######################## -->
@@ -616,9 +615,6 @@
     <Compile Include="..\Shared\FileDelegates.cs">
       <Link>SharedUtilities\FileDelegates.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ErrorUtilities.cs">
-      <Link>Errors\ErrorUtilities.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\EscapingUtilities.cs">
       <Link>SharedUtilities\EscapingUtilities.cs</Link>
     </Compile>
@@ -663,9 +659,6 @@
     <Compile Include="..\Shared\ProjectWriter.cs">
       <Link>SharedUtilities\ProjectWriter.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ResourceUtilities.cs">
-      <Link>SharedUtilities\ResourceUtilities.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\Tracing.cs" />
     <Compile Include="..\Shared\CoreCLRAssemblyLoader.cs" Condition="'$(TargetFrameworkIdentifier)'!='.NETFramework'" />
     <Compile Include="..\Shared\TypeLoader.cs">
diff --git a/src/Build/Resources/AssemblyResources.cs b/src/Build/Resources/AssemblyResources.cs
deleted file mode 100644
index 0eca428e261..00000000000
--- a/src/Build/Resources/AssemblyResources.cs
+++ /dev/null
@@ -1,122 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System.Globalization;
-using System.Reflection;
-using System.Resources;
-
-#nullable disable
-
-namespace Microsoft.Build.Shared
-{
-    /// <summary>
-    /// This class provides access to the assembly's resources.
-    /// </summary>
-    internal static class AssemblyResources
-    {
-        /// <summary>
-        /// A slot for msbuild.exe to add a resource manager over its own resources, that can also be consulted.
-        /// </summary>
-        private static ResourceManager s_msbuildExeResourceManager;
-
-        /// <summary>
-        /// The internals of the Engine are exposed to MSBuild.exe, so they must share the same AssemblyResources class and
-        /// ResourceUtilities class that uses it. To make this possible, MSBuild.exe registers its resources here and they are
-        /// normally consulted last. This assumes that there are no duplicated resource ID's between the Engine and MSBuild.exe.
-        /// (Actually there are currently two: LoggerCreationError and LoggerNotFoundError.
-        /// We can't change the resource ID's this late in the cycle and we sometimes want to load the MSBuild.exe ones,
-        /// because they're a little different. So for that purpose we call GetStringLookingInMSBuildExeResourcesFirst() )
-        /// </summary>
-        internal static void RegisterMSBuildExeResources(ResourceManager manager)
-        {
-            ErrorUtilities.VerifyThrow(s_msbuildExeResourceManager == null, "Only one extra resource manager");
-
-            s_msbuildExeResourceManager = manager;
-        }
-
-        /// <summary>
-        /// Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
-        /// </summary>
-        /// <remarks>This method is thread-safe.</remarks>
-        /// <param name="name"></param>
-        /// <returns>The resource string, or null if not found.</returns>
-        internal static string GetString(string name)
-        {
-            // NOTE: the ResourceManager.GetString() method is thread-safe
-            string resource = GetStringFromEngineResources(name);
-
-            if (resource == null)
-            {
-                resource = GetStringFromMSBuildExeResources(name);
-            }
-
-            return resource;
-        }
-
-        /// <summary>
-        /// Loads the specified resource string.
-        /// </summary>
-        /// <returns>The resource string, or null if not found.</returns>
-        internal static string GetStringLookingInMSBuildExeResourcesFirst(string name)
-        {
-            string resource = GetStringFromMSBuildExeResources(name);
-
-            if (resource == null)
-            {
-                resource = GetStringFromEngineResources(name);
-            }
-
-            return resource;
-        }
-
-        /// <summary>
-        /// Loads the specified resource string, from the Engine or else Shared resources.
-        /// </summary>
-        /// <returns>The resource string, or null if not found.</returns>
-        private static string GetStringFromEngineResources(string name)
-        {
-            string resource = s_resources.GetString(name, CultureInfo.CurrentUICulture);
-
-            if (resource == null)
-            {
-                resource = s_sharedResources.GetString(name, CultureInfo.CurrentUICulture);
-            }
-
-            ErrorUtilities.VerifyThrow(resource != null, "Missing resource '{0}'", name);
-
-            return resource;
-        }
-
-        /// <summary>
-        /// Loads the specified resource string, from the MSBuild.exe resources.
-        /// </summary>
-        /// <returns>The resource string, or null if not found.</returns>
-        private static string GetStringFromMSBuildExeResources(string name)
-        {
-            string resource = null;
-
-            if (s_msbuildExeResourceManager != null)
-            {
-                // Try MSBuild.exe's resources
-                resource = s_msbuildExeResourceManager.GetString(name, CultureInfo.CurrentUICulture);
-            }
-
-            return resource;
-        }
-
-        internal static ResourceManager PrimaryResources
-        {
-            get { return s_resources; }
-        }
-
-        internal static ResourceManager SharedResources
-        {
-            get { return s_sharedResources; }
-        }
-
-        // assembly resources
-        private static readonly ResourceManager s_resources = new ResourceManager("Microsoft.Build.Strings", typeof(AssemblyResources).GetTypeInfo().Assembly);
-        // shared resources
-        private static readonly ResourceManager s_sharedResources = new ResourceManager("Microsoft.Build.Strings.shared", typeof(AssemblyResources).GetTypeInfo().Assembly);
-    }
-}
diff --git a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
index f5931d3d9af..8ac34c85aa9 100644
--- a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
+++ b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
@@ -29,7 +29,7 @@
   <ItemGroup>
     <Compile Include="..\Shared\EscapingUtilities.cs" />
     <Compile Include="..\Shared\ProcessExtensions.cs" />
-    <Compile Include="..\Shared\ResourceUtilities.cs" />
+    <Compile Include="..\Framework\Resources\ResourceUtilities.cs" />
     <Compile Include="..\Shared\FileUtilitiesRegex.cs" />
   </ItemGroup>
 
diff --git a/src/Framework/ErrorUtilities.cs b/src/Framework/ErrorUtilities.cs
index c430b87dbf1..64e5bcec70c 100644
--- a/src/Framework/ErrorUtilities.cs
+++ b/src/Framework/ErrorUtilities.cs
@@ -2,32 +2,111 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
+using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
+using System.Globalization;
+using System.IO;
 using System.Runtime.CompilerServices;
+using System.Threading;
+using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Framework
+#if BUILDINGAPPXTASKS
+namespace Microsoft.Build.AppxPackage.Shared
+#else
+namespace Microsoft.Build.Shared
+#endif
 {
-    // TODO: this should be unified with Shared\ErrorUtilities.cs, but it is hard to untangle everything
-    //       because some of the errors there will use localized resources from different assemblies,
-    //       which won't be referenceable in Framework.
-
-    internal class FrameworkErrorUtilities
+    /// <summary>
+    /// This class contains methods that are useful for error checking and validation.
+    /// </summary>
+    internal static class ErrorUtilities
     {
+        private static readonly bool s_enableMSBuildDebugTracing = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDENABLEDEBUGTRACING"));
+
+        public static void DebugTraceMessage(string category, string formatstring, params object[]? parameters)
+        {
+            if (s_enableMSBuildDebugTracing)
+            {
+                if (parameters != null)
+                {
+                    Trace.WriteLine(String.Format(CultureInfo.CurrentCulture, formatstring, parameters), category);
+                }
+                else
+                {
+                    Trace.WriteLine(formatstring, category);
+                }
+            }
+        }
+
+#if !BUILDINGAPPXTASKS
+
+        internal static void VerifyThrowInternalError([DoesNotReturnIf(false)] bool condition, string message, params object?[]? args)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(message, args);
+            }
+        }
+
         /// <summary>
-        /// This method should be used in places where one would normally put
-        /// an "assert". It should be used to validate that our assumptions are
-        /// true, where false would indicate that there must be a bug in our
-        /// code somewhere. This should not be used to throw errors based on bad
-        /// user input or anything that the user did wrong.
+        /// Throws InternalErrorException.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
         /// </summary>
-        /// <param name="condition"></param>
-        /// <param name="unformattedMessage"></param>
-        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage)
+        [DoesNotReturn]
+        internal static void ThrowInternalError(string message, params object?[]? args)
+        {
+            throw new InternalErrorException(ResourceUtilities.FormatString(message, args));
+        }
+
+        /// <summary>
+        /// Throws InternalErrorException.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// </summary>
+        [DoesNotReturn]
+        internal static void ThrowInternalError(string message, Exception? innerException, params object?[]? args)
+        {
+            throw new InternalErrorException(ResourceUtilities.FormatString(message, args), innerException);
+        }
+
+        /// <summary>
+        /// Throws InternalErrorException.
+        /// Indicates the code path followed should not have been possible.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// </summary>
+        [DoesNotReturn]
+        internal static void ThrowInternalErrorUnreachable()
+        {
+            throw new InternalErrorException("Unreachable?");
+        }
+
+        /// <summary>
+        /// Throws InternalErrorException.
+        /// Indicates the code path followed should not have been possible.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// </summary>
+        internal static void VerifyThrowInternalErrorUnreachable([DoesNotReturnIf(false)] bool condition)
         {
             if (!condition)
             {
-                ThrowInternalError(unformattedMessage, innerException: null, args: null);
+                ThrowInternalErrorUnreachable();
+            }
+        }
+
+        /// <summary>
+        /// Throws InternalErrorException.
+        /// Indicates the code path followed should not have been possible.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// </summary>
+        internal static void ThrowIfTypeDoesNotImplementToString(object param)
+        {
+#if DEBUG
+            // Check it has a real implementation of ToString()
+            if (String.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal))
+            {
+                ThrowInternalError("This type does not implement ToString() properly {0}", param.GetType().FullName!);
             }
+#endif
         }
 
         /// <summary>
@@ -36,27 +115,501 @@ internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string
         /// anything caused by user action.
         /// </summary>
         /// <param name="parameter">The value of the argument.</param>
-        /// <param name="parameterName">Parameter that should not be null.</param>
+        /// <param name="parameterName">Parameter that should not be null</param>
         internal static void VerifyThrowInternalNull([NotNull] object? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
         {
             if (parameter is null)
             {
-                ThrowInternalError("{0} unexpectedly null", innerException: null, args: parameterName);
+                ThrowInternalError("{0} unexpectedly null", parameterName);
             }
         }
 
         /// <summary>
-        /// Throws InternalErrorException.
-        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// Helper to throw an InternalErrorException when a lock on the specified object is not already held.
+        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
+        /// anything caused by user action.
         /// </summary>
+        /// <param name="locker">The object that should already have been used as a lock.</param>
+        internal static void VerifyThrowInternalLockHeld(object locker)
+        {
+#if !CLR2COMPATIBILITY
+            if (!Monitor.IsEntered(locker))
+            {
+                ThrowInternalError("Lock should already have been taken");
+            }
+#endif
+        }
+
+        /// <summary>
+        /// Helper to throw an InternalErrorException when the specified parameter is null or zero length.
+        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
+        /// anything caused by user action.
+        /// </summary>
+        /// <param name="parameterValue">The value of the argument.</param>
+        /// <param name="parameterName">Parameter that should not be null or zero length</param>
+        internal static void VerifyThrowInternalLength([NotNull] string? parameterValue, [CallerArgumentExpression(nameof(parameterValue))] string? parameterName = null)
+        {
+            VerifyThrowInternalNull(parameterValue, parameterName);
+
+            if (parameterValue.Length == 0)
+            {
+                ThrowInternalError("{0} unexpectedly empty", parameterName);
+            }
+        }
+
+        public static void VerifyThrowInternalLength<T>([NotNull] T[]? parameterValue, [CallerArgumentExpression(nameof(parameterValue))] string? parameterName = null)
+        {
+            VerifyThrowInternalNull(parameterValue, parameterName);
+
+            if (parameterValue.Length == 0)
+            {
+                ThrowInternalError("{0} unexpectedly empty", parameterName);
+            }
+        }
+
+        /// <summary>
+        /// Helper to throw an InternalErrorException when the specified parameter is not a rooted path.
+        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
+        /// anything caused by user action.
+        /// </summary>
+        /// <param name="value">Parameter that should be a rooted path.</param>
+        internal static void VerifyThrowInternalRooted(string value)
+        {
+            if (!Path.IsPathRooted(value))
+            {
+                ThrowInternalError("{0} unexpectedly not a rooted path", value);
+            }
+        }
+
+        /// <summary>
+        /// This method should be used in places where one would normally put
+        /// an "assert". It should be used to validate that our assumptions are
+        /// true, where false would indicate that there must be a bug in our
+        /// code somewhere. This should not be used to throw errors based on bad
+        /// user input or anything that the user did wrong.
+        /// </summary>
+        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(unformattedMessage, null, null);
+            }
+        }
+
+        /// <summary>
+        /// Overload for one string format argument.
+        /// </summary>
+        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(unformattedMessage, arg0);
+            }
+        }
+
+        /// <summary>
+        /// Overload for two string format arguments.
+        /// </summary>
+        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0, object arg1)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(unformattedMessage, arg0, arg1);
+            }
+        }
+
+        /// <summary>
+        /// Overload for three string format arguments.
+        /// </summary>
+        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0, object arg1, object arg2)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(unformattedMessage, arg0, arg1, arg2);
+            }
+        }
+
+        /// <summary>
+        /// Overload for four string format arguments.
+        /// </summary>
+        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0, object arg1, object arg2, object arg3)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(unformattedMessage, arg0, arg1, arg2, arg3);
+            }
+        }
+
+        /// <summary>
+        /// Throws an InvalidOperationException with the specified resource string
+        /// </summary>
+        /// <param name="resourceName">Resource to use in the exception</param>
+        /// <param name="args">Formatting args.</param>
         [DoesNotReturn]
-        internal static void ThrowInternalError(string message, Exception? innerException, params object?[]? args)
+        internal static void ThrowInvalidOperation(string resourceName, params object?[]? args)
+        {
+            throw new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, args));
+        }
+
+        /// <summary>
+        /// Throws an InvalidOperationException if the given condition is false.
+        /// </summary>
+        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+            if (!condition)
+            {
+                ThrowInvalidOperation(resourceName, null);
+            }
+        }
+
+        /// <summary>
+        /// Overload for one string format argument.
+        /// </summary>
+        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+            // PERF NOTE: check the condition here instead of pushing it into
+            // the ThrowInvalidOperation() method, because that method always
+            // allocates memory for its variable array of arguments
+            if (!condition)
+            {
+                ThrowInvalidOperation(resourceName, arg0);
+            }
+        }
+
+        /// <summary>
+        /// Overload for two string format arguments.
+        /// </summary>
+        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+            // PERF NOTE: check the condition here instead of pushing it into
+            // the ThrowInvalidOperation() method, because that method always
+            // allocates memory for its variable array of arguments
+            if (!condition)
+            {
+                ThrowInvalidOperation(resourceName, arg0, arg1);
+            }
+        }
+
+        /// <summary>
+        /// Overload for three string format arguments.
+        /// </summary>
+        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+            // PERF NOTE: check the condition here instead of pushing it into
+            // the ThrowInvalidOperation() method, because that method always
+            // allocates memory for its variable array of arguments
+            if (!condition)
+            {
+                ThrowInvalidOperation(resourceName, arg0, arg1, arg2);
+            }
+        }
+
+        /// <summary>
+        /// Overload for four string format arguments.
+        /// </summary>
+        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2, object arg3)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+
+            // PERF NOTE: check the condition here instead of pushing it into
+            // the ThrowInvalidOperation() method, because that method always
+            // allocates memory for its variable array of arguments
+            if (!condition)
+            {
+                ThrowInvalidOperation(resourceName, arg0, arg1, arg2, arg3);
+            }
+        }
+
+        /// <summary>
+        /// Throws an ArgumentException that can include an inner exception.
+        ///
+        /// PERF WARNING: calling a method that takes a variable number of arguments
+        /// is expensive, because memory is allocated for the array of arguments -- do
+        /// not call this method repeatedly in performance-critical scenarios
+        /// </summary>
+        [DoesNotReturn]
+        internal static void ThrowArgument(string resourceName, params object?[]? args)
+        {
+            ThrowArgument(null, resourceName, args);
+        }
+
+        /// <summary>
+        /// Throws an ArgumentException that can include an inner exception.
+        ///
+        /// PERF WARNING: calling a method that takes a variable number of arguments
+        /// is expensive, because memory is allocated for the array of arguments -- do
+        /// not call this method repeatedly in performance-critical scenarios
+        /// </summary>
+        /// <remarks>
+        /// This method is thread-safe.
+        /// </remarks>
+        /// <param name="innerException">Can be null.</param>
+        /// <param name="resourceName"></param>
+        /// <param name="args"></param>
+        [DoesNotReturn]
+        internal static void ThrowArgument(Exception? innerException, string resourceName, params object?[]? args)
+        {
+            throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, args), innerException);
+        }
+
+        /// <summary>
+        /// Throws an ArgumentException if the given condition is false.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName)
+        {
+            VerifyThrowArgument(condition, null, resourceName);
+        }
+
+        /// <summary>
+        /// Overload for one string format argument.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0)
+        {
+            VerifyThrowArgument(condition, null, resourceName, arg0);
+        }
+
+        /// <summary>
+        /// Overload for two string format arguments.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1)
         {
-            throw new InternalErrorException(
-                args is null ?
-                    message :
-                    string.Format(message, args),
-                innerException);
+            VerifyThrowArgument(condition, null, resourceName, arg0, arg1);
+        }
+
+        /// <summary>
+        /// Overload for three string format arguments.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2)
+        {
+            VerifyThrowArgument(condition, null, resourceName, arg0, arg1, arg2);
+        }
+
+        /// <summary>
+        /// Overload for four string format arguments.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2, object arg3)
+        {
+            VerifyThrowArgument(condition, null, resourceName, arg0, arg1, arg2, arg3);
+        }
+
+        /// <summary>
+        /// Throws an ArgumentException that includes an inner exception, if
+        /// the given condition is false.
+        /// </summary>
+        /// <param name="condition"></param>
+        /// <param name="innerException">Can be null.</param>
+        /// <param name="resourceName"></param>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+            if (!condition)
+            {
+                ThrowArgument(innerException, resourceName, null);
+            }
+        }
+
+        /// <summary>
+        /// Overload for one string format argument.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+
+            if (!condition)
+            {
+                ThrowArgument(innerException, resourceName, arg0);
+            }
+        }
+
+        /// <summary>
+        /// Overload for two string format arguments.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0, object arg1)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+
+            if (!condition)
+            {
+                ThrowArgument(innerException, resourceName, arg0, arg1);
+            }
+        }
+
+        /// <summary>
+        /// Overload for three string format arguments.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0, object arg1, object arg2)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+
+            if (!condition)
+            {
+                ThrowArgument(innerException, resourceName, arg0, arg1, arg2);
+            }
+        }
+
+        /// <summary>
+        /// Overload for four string format arguments.
+        /// </summary>
+        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0, object arg1, object arg2, object arg3)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+
+            if (!condition)
+            {
+                ThrowArgument(innerException, resourceName, arg0, arg1, arg2, arg3);
+            }
+        }
+
+        /// <summary>
+        /// Throws an argument out of range exception.
+        /// </summary>
+        [DoesNotReturn]
+        internal static void ThrowArgumentOutOfRange(string? parameterName)
+        {
+            throw new ArgumentOutOfRangeException(parameterName);
+        }
+
+        /// <summary>
+        /// Throws an ArgumentOutOfRangeException using the given parameter name
+        /// if the condition is false.
+        /// </summary>
+        internal static void VerifyThrowArgumentOutOfRange([DoesNotReturnIf(false)] bool condition, [CallerArgumentExpression(nameof(condition))] string? parameterName = null)
+        {
+            if (!condition)
+            {
+                ThrowArgumentOutOfRange(parameterName);
+            }
+        }
+
+        /// <summary>
+        /// Throws an ArgumentNullException if the given string parameter is null
+        /// and ArgumentException if it has zero length.
+        /// </summary>
+        internal static void VerifyThrowArgumentLength([NotNull] string? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
+        {
+            VerifyThrowArgumentNull(parameter, parameterName);
+
+            if (parameter.Length == 0)
+            {
+                ThrowArgumentLength(parameterName);
+            }
+        }
+
+#if !CLR2COMPATIBILITY
+        /// <summary>
+        /// Throws an ArgumentNullException if the given collection is null
+        /// and ArgumentException if it has zero length.
+        /// </summary>
+        internal static void VerifyThrowArgumentLength<T>([NotNull] IReadOnlyCollection<T> parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
+        {
+            VerifyThrowArgumentNull(parameter, parameterName);
+
+            if (parameter.Count == 0)
+            {
+                ThrowArgumentLength(parameterName);
+            }
+        }
+
+        /// <summary>
+        /// Throws an ArgumentException if the given collection is not null but of zero length.
+        /// </summary>
+        internal static void VerifyThrowArgumentLengthIfNotNull<T>([MaybeNull] IReadOnlyCollection<T>? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
+        {
+            if (parameter?.Count == 0)
+            {
+                ThrowArgumentLength(parameterName);
+            }
+        }
+#endif
+
+        [DoesNotReturn]
+        private static void ThrowArgumentLength(string? parameterName)
+        {
+            throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("Shared.ParameterCannotHaveZeroLength", parameterName));
+        }
+
+        /// <summary>
+        /// Throws an ArgumentException if the string has zero length, unless it is
+        /// null, in which case no exception is thrown.
+        /// </summary>
+        internal static void VerifyThrowArgumentLengthIfNotNull(string? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
+        {
+            if (parameter?.Length == 0)
+            {
+                ThrowArgumentLength(parameterName);
+            }
+        }
+
+        /// <summary>
+        /// Throws an ArgumentNullException if the given parameter is null.
+        /// </summary>
+        internal static void VerifyThrowArgumentNull([NotNull] object? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
+        {
+            VerifyThrowArgumentNull(parameter, parameterName, "Shared.ParameterCannotBeNull");
+        }
+
+        /// <summary>
+        /// Throws an ArgumentNullException if the given parameter is null.
+        /// </summary>
+        internal static void VerifyThrowArgumentNull([NotNull] object? parameter, string? parameterName, string resourceName)
+        {
+            ResourceUtilities.VerifyResourceStringExists(resourceName);
+            if (parameter is null)
+            {
+                ThrowArgumentNull(parameterName, resourceName);
+            }
+        }
+
+        [DoesNotReturn]
+        internal static void ThrowArgumentNull(string? parameterName, string resourceName)
+        {
+            // Most ArgumentNullException overloads append its own rather clunky multi-line message. So use the one overload that doesn't.
+            throw new ArgumentNullException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, parameterName), (Exception?)null);
+        }
+
+        internal static void VerifyThrowObjectDisposed([DoesNotReturnIf(false)] bool condition, string objectName)
+        {
+            if (!condition)
+            {
+                ThrowObjectDisposed(objectName);
+            }
+        }
+
+        [DoesNotReturn]
+        internal static void ThrowObjectDisposed(string objectName)
+        {
+            throw new ObjectDisposedException(objectName);
+        }
+
+        /// <summary>
+        /// A utility that verifies the parameters provided to a standard ICollection<typeparamref name="T"/>.CopyTo call.
+        /// </summary>
+        /// <exception cref="ArgumentNullException">If <paramref name="array"/> is null.</exception>
+        /// <exception cref="ArgumentOutOfRangeException">If <paramref name="arrayIndex"/> falls outside of the bounds <paramref name="array"/>.</exception>
+        /// <exception cref="ArgumentException">If there is insufficient capacity to copy the collection contents into <paramref name="array"/>
+        /// when starting at <paramref name="arrayIndex"/>.</exception>
+        internal static void VerifyCollectionCopyToArguments<T>(
+            [NotNull] T[]? array,
+            string arrayParameterName,
+            int arrayIndex,
+            string arrayIndexParameterName,
+            int requiredCapacity)
+        {
+            VerifyThrowArgumentNull(array, arrayParameterName);
+            VerifyThrowArgumentOutOfRange(arrayIndex >= 0 && arrayIndex < array.Length, arrayIndexParameterName);
+
+            int arrayCapacity = array.Length - arrayIndex;
+            if (requiredCapacity > arrayCapacity)
+            {
+                throw new ArgumentException(
+                    ResourceUtilities.GetResourceString("Shared.CollectionCopyToFailureProvidedArrayIsTooSmall"),
+                    arrayParameterName);
+            }
         }
+#endif
     }
 }
diff --git a/src/Framework/FrameworkErrorUtilities.cs b/src/Framework/FrameworkErrorUtilities.cs
new file mode 100644
index 00000000000..c430b87dbf1
--- /dev/null
+++ b/src/Framework/FrameworkErrorUtilities.cs
@@ -0,0 +1,62 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Diagnostics.CodeAnalysis;
+using System.Runtime.CompilerServices;
+
+namespace Microsoft.Build.Framework
+{
+    // TODO: this should be unified with Shared\ErrorUtilities.cs, but it is hard to untangle everything
+    //       because some of the errors there will use localized resources from different assemblies,
+    //       which won't be referenceable in Framework.
+
+    internal class FrameworkErrorUtilities
+    {
+        /// <summary>
+        /// This method should be used in places where one would normally put
+        /// an "assert". It should be used to validate that our assumptions are
+        /// true, where false would indicate that there must be a bug in our
+        /// code somewhere. This should not be used to throw errors based on bad
+        /// user input or anything that the user did wrong.
+        /// </summary>
+        /// <param name="condition"></param>
+        /// <param name="unformattedMessage"></param>
+        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage)
+        {
+            if (!condition)
+            {
+                ThrowInternalError(unformattedMessage, innerException: null, args: null);
+            }
+        }
+
+        /// <summary>
+        /// Helper to throw an InternalErrorException when the specified parameter is null.
+        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
+        /// anything caused by user action.
+        /// </summary>
+        /// <param name="parameter">The value of the argument.</param>
+        /// <param name="parameterName">Parameter that should not be null.</param>
+        internal static void VerifyThrowInternalNull([NotNull] object? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
+        {
+            if (parameter is null)
+            {
+                ThrowInternalError("{0} unexpectedly null", innerException: null, args: parameterName);
+            }
+        }
+
+        /// <summary>
+        /// Throws InternalErrorException.
+        /// This is only for situations that would mean that there is a bug in MSBuild itself.
+        /// </summary>
+        [DoesNotReturn]
+        internal static void ThrowInternalError(string message, Exception? innerException, params object?[]? args)
+        {
+            throw new InternalErrorException(
+                args is null ?
+                    message :
+                    string.Format(message, args),
+                innerException);
+        }
+    }
+}
diff --git a/src/Framework/Resources/AssemblyResources.cs b/src/Framework/Resources/AssemblyResources.cs
index a49efe1b377..449fd137ae5 100644
--- a/src/Framework/Resources/AssemblyResources.cs
+++ b/src/Framework/Resources/AssemblyResources.cs
@@ -14,6 +14,12 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static class AssemblyResources
     {
+        private static readonly ResourceManager manager = new ResourceManager("Microsoft.Build.Framework.Strings", typeof(AssemblyResources).GetTypeInfo().Assembly);
+
+        public static ResourceManager PrimaryResources => manager;
+
+        public static ResourceManager SharedResources => manager;
+
         /// <summary>
         /// Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
         /// </summary>
@@ -23,14 +29,11 @@ internal static class AssemblyResources
         internal static string GetString(string name)
         {
             // NOTE: the ResourceManager.GetString() method is thread-safe
-            string resource = s_resources.GetString(name, CultureInfo.CurrentUICulture);
+            string resource = manager.GetString(name, CultureInfo.CurrentUICulture);
 
             ErrorUtilities.VerifyThrow(resource != null, "Missing resource '{0}'", name);
 
             return resource;
         }
-
-        // assembly resources
-        private static readonly ResourceManager s_resources = new ResourceManager("Micrisift.Build.Framework.Strings", typeof(AssemblyResources).GetTypeInfo().Assembly);
     }
 }
diff --git a/src/Shared/ResourceUtilities.cs b/src/Framework/Resources/ResourceUtilities.cs
similarity index 100%
rename from src/Shared/ResourceUtilities.cs
rename to src/Framework/Resources/ResourceUtilities.cs
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 7f9939e0ace..03dc1538950 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -83,9 +83,7 @@
     <Compile Include="..\Shared\RegisteredTaskObjectCacheBase.cs">
       <Link>RegisteredTaskObjectCacheBase.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ResourceUtilities.cs" />
     <Compile Include="..\Shared\EscapingUtilities.cs" />
-    <Compile Include="..\Shared\ErrorUtilities.cs" />
     <Compile Include="..\Shared\Modifiers.cs" />
     <Compile Include="..\Shared\XMakeElements.cs" />
     <Compile Include="..\Shared\BufferedReadStream.cs" />
diff --git a/src/MSBuildTaskHost/AssemblyResources.cs b/src/MSBuildTaskHost/AssemblyResources.cs
index 6ee4f10b194..806683ad8d8 100644
--- a/src/MSBuildTaskHost/AssemblyResources.cs
+++ b/src/MSBuildTaskHost/AssemblyResources.cs
@@ -17,7 +17,7 @@ internal static class AssemblyResources
         /// <summary>
         /// Actual source of the resource string we'll be reading.
         /// </summary>
-        private static readonly ResourceManager s_resources = new ResourceManager("MSBuildTaskHost.Strings.Shared", Assembly.GetExecutingAssembly());
+        private static readonly ResourceManager s_resources = new ResourceManager("MSBuildTaskHost.Strings", Assembly.GetExecutingAssembly());
 
         /// <summary>
         /// Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index a189f58567a..2f1ba35fa7a 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -72,12 +72,8 @@
     <Compile Include="..\Shared\Constants.cs" />
     <Compile Include="..\Shared\EnvironmentUtilities.cs" Link="EnvironmentUtilities.cs" />
     <Compile Include="..\Shared\ReadOnlyEmptyDictionary.cs" />
-    <Compile Include="..\Framework\ErrorUtilities.cs">
-      <Link>ErrorUtilities.cs</Link>
-    </Compile>
-    <Compile Include="..\Shared\ErrorUtilities.cs">
-      <Link>SharedErrorUtilities.cs</Link>
-    </Compile>
+    <Compile Include="..\Framework\ErrorUtilities.cs" />
+    <Compile Include="..\Framework\FrameworkErrorUtilities.cs" />
     <Compile Include="..\Shared\EscapingUtilities.cs">
       <Link>EscapingUtilities.cs</Link>
     </Compile>
@@ -170,7 +166,7 @@
     <Compile Include="..\Shared\ReadOnlyEmptyCollection.cs">
       <Link>ReadOnlyEmptyCollection.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ResourceUtilities.cs">
+    <Compile Include="..\Framework\Resources\ResourceUtilities.cs">
       <Link>ResourceUtilities.cs</Link>
     </Compile>
     <Compile Include="..\Framework\StringBuilderCache.cs">
@@ -236,7 +232,7 @@
     <None Include="app.config" />
   </ItemGroup>
   <ItemGroup>
-    <EmbeddedResource Include="..\Shared\Resources\Strings.shared.resx">
+    <EmbeddedResource Include="..\Framework\Resources\Strings.resx">
       <LogicalName>$(AssemblyName).Strings.shared.resources</LogicalName>
       <SubType>Designer</SubType>
     </EmbeddedResource>
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
deleted file mode 100644
index 728445efe07..00000000000
--- a/src/Shared/ErrorUtilities.cs
+++ /dev/null
@@ -1,629 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.Diagnostics.CodeAnalysis;
-using System.Globalization;
-using System.IO;
-using System.Runtime.CompilerServices;
-using System.Threading;
-using Microsoft.Build.Framework;
-
-#if BUILDINGAPPXTASKS
-namespace Microsoft.Build.AppxPackage.Shared
-#else
-namespace Microsoft.Build.Shared
-#endif
-{
-    /// <summary>
-    /// This class contains methods that are useful for error checking and validation.
-    /// </summary>
-    internal static class ErrorUtilities
-    {
-        private static readonly bool s_enableMSBuildDebugTracing = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDENABLEDEBUGTRACING"));
-
-        public static void DebugTraceMessage(string category, string formatstring, params object[]? parameters)
-        {
-            if (s_enableMSBuildDebugTracing)
-            {
-                if (parameters != null)
-                {
-                    Trace.WriteLine(String.Format(CultureInfo.CurrentCulture, formatstring, parameters), category);
-                }
-                else
-                {
-                    Trace.WriteLine(formatstring, category);
-                }
-            }
-        }
-
-#if !BUILDINGAPPXTASKS
-
-        internal static void VerifyThrowInternalError([DoesNotReturnIf(false)] bool condition, string message, params object?[]? args)
-        {
-            if (!condition)
-            {
-                ThrowInternalError(message, args);
-            }
-        }
-
-        /// <summary>
-        /// Throws InternalErrorException.
-        /// This is only for situations that would mean that there is a bug in MSBuild itself.
-        /// </summary>
-        [DoesNotReturn]
-        internal static void ThrowInternalError(string message, params object?[]? args)
-        {
-            throw new InternalErrorException(ResourceUtilities.FormatString(message, args));
-        }
-
-        /// <summary>
-        /// Throws InternalErrorException.
-        /// This is only for situations that would mean that there is a bug in MSBuild itself.
-        /// </summary>
-        [DoesNotReturn]
-        internal static void ThrowInternalError(string message, Exception? innerException, params object?[]? args)
-        {
-            throw new InternalErrorException(ResourceUtilities.FormatString(message, args), innerException);
-        }
-
-        /// <summary>
-        /// Throws InternalErrorException.
-        /// Indicates the code path followed should not have been possible.
-        /// This is only for situations that would mean that there is a bug in MSBuild itself.
-        /// </summary>
-        [DoesNotReturn]
-        internal static void ThrowInternalErrorUnreachable()
-        {
-            throw new InternalErrorException("Unreachable?");
-        }
-
-        /// <summary>
-        /// Throws InternalErrorException.
-        /// Indicates the code path followed should not have been possible.
-        /// This is only for situations that would mean that there is a bug in MSBuild itself.
-        /// </summary>
-        internal static void VerifyThrowInternalErrorUnreachable([DoesNotReturnIf(false)] bool condition)
-        {
-            if (!condition)
-            {
-                ThrowInternalErrorUnreachable();
-            }
-        }
-
-        /// <summary>
-        /// Throws InternalErrorException.
-        /// Indicates the code path followed should not have been possible.
-        /// This is only for situations that would mean that there is a bug in MSBuild itself.
-        /// </summary>
-        internal static void ThrowIfTypeDoesNotImplementToString(object param)
-        {
-#if DEBUG
-            // Check it has a real implementation of ToString()
-            if (String.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal))
-            {
-                ThrowInternalError("This type does not implement ToString() properly {0}", param.GetType().FullName!);
-            }
-#endif
-        }
-
-        /// <summary>
-        /// Helper to throw an InternalErrorException when the specified parameter is null.
-        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
-        /// anything caused by user action.
-        /// </summary>
-        /// <param name="parameter">The value of the argument.</param>
-        /// <param name="parameterName">Parameter that should not be null</param>
-        internal static void VerifyThrowInternalNull([NotNull] object? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            if (parameter is null)
-            {
-                ThrowInternalError("{0} unexpectedly null", parameterName);
-            }
-        }
-
-        /// <summary>
-        /// Helper to throw an InternalErrorException when a lock on the specified object is not already held.
-        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
-        /// anything caused by user action.
-        /// </summary>
-        /// <param name="locker">The object that should already have been used as a lock.</param>
-        internal static void VerifyThrowInternalLockHeld(object locker)
-        {
-#if !CLR2COMPATIBILITY
-            if (!Monitor.IsEntered(locker))
-            {
-                ThrowInternalError("Lock should already have been taken");
-            }
-#endif
-        }
-
-        /// <summary>
-        /// Helper to throw an InternalErrorException when the specified parameter is null or zero length.
-        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
-        /// anything caused by user action.
-        /// </summary>
-        /// <param name="parameterValue">The value of the argument.</param>
-        /// <param name="parameterName">Parameter that should not be null or zero length</param>
-        internal static void VerifyThrowInternalLength([NotNull] string? parameterValue, [CallerArgumentExpression(nameof(parameterValue))] string? parameterName = null)
-        {
-            VerifyThrowInternalNull(parameterValue, parameterName);
-
-            if (parameterValue.Length == 0)
-            {
-                ThrowInternalError("{0} unexpectedly empty", parameterName);
-            }
-        }
-
-        public static void VerifyThrowInternalLength<T>([NotNull] T[]? parameterValue, [CallerArgumentExpression(nameof(parameterValue))] string? parameterName = null)
-        {
-            VerifyThrowInternalNull(parameterValue, parameterName);
-
-            if (parameterValue.Length == 0)
-            {
-                ThrowInternalError("{0} unexpectedly empty", parameterName);
-            }
-        }
-
-        /// <summary>
-        /// Helper to throw an InternalErrorException when the specified parameter is not a rooted path.
-        /// This should be used ONLY if this would indicate a bug in MSBuild rather than
-        /// anything caused by user action.
-        /// </summary>
-        /// <param name="value">Parameter that should be a rooted path.</param>
-        internal static void VerifyThrowInternalRooted(string value)
-        {
-            if (!Path.IsPathRooted(value))
-            {
-                ThrowInternalError("{0} unexpectedly not a rooted path", value);
-            }
-        }
-
-        /// <summary>
-        /// This method should be used in places where one would normally put
-        /// an "assert". It should be used to validate that our assumptions are
-        /// true, where false would indicate that there must be a bug in our
-        /// code somewhere. This should not be used to throw errors based on bad
-        /// user input or anything that the user did wrong.
-        /// </summary>
-        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage)
-        {
-            if (!condition)
-            {
-                ThrowInternalError(unformattedMessage, null, null);
-            }
-        }
-
-        /// <summary>
-        /// Overload for one string format argument.
-        /// </summary>
-        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0)
-        {
-            if (!condition)
-            {
-                ThrowInternalError(unformattedMessage, arg0);
-            }
-        }
-
-        /// <summary>
-        /// Overload for two string format arguments.
-        /// </summary>
-        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0, object arg1)
-        {
-            if (!condition)
-            {
-                ThrowInternalError(unformattedMessage, arg0, arg1);
-            }
-        }
-
-        /// <summary>
-        /// Overload for three string format arguments.
-        /// </summary>
-        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0, object arg1, object arg2)
-        {
-            if (!condition)
-            {
-                ThrowInternalError(unformattedMessage, arg0, arg1, arg2);
-            }
-        }
-
-        /// <summary>
-        /// Overload for four string format arguments.
-        /// </summary>
-        internal static void VerifyThrow([DoesNotReturnIf(false)] bool condition, string unformattedMessage, object arg0, object arg1, object arg2, object arg3)
-        {
-            if (!condition)
-            {
-                ThrowInternalError(unformattedMessage, arg0, arg1, arg2, arg3);
-            }
-        }
-
-        /// <summary>
-        /// Throws an InvalidOperationException with the specified resource string
-        /// </summary>
-        /// <param name="resourceName">Resource to use in the exception</param>
-        /// <param name="args">Formatting args.</param>
-        [DoesNotReturn]
-        internal static void ThrowInvalidOperation(string resourceName, params object?[]? args)
-        {
-            throw new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, args));
-        }
-
-        /// <summary>
-        /// Throws an InvalidOperationException if the given condition is false.
-        /// </summary>
-        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-            if (!condition)
-            {
-                ThrowInvalidOperation(resourceName, null);
-            }
-        }
-
-        /// <summary>
-        /// Overload for one string format argument.
-        /// </summary>
-        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-            // PERF NOTE: check the condition here instead of pushing it into
-            // the ThrowInvalidOperation() method, because that method always
-            // allocates memory for its variable array of arguments
-            if (!condition)
-            {
-                ThrowInvalidOperation(resourceName, arg0);
-            }
-        }
-
-        /// <summary>
-        /// Overload for two string format arguments.
-        /// </summary>
-        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-            // PERF NOTE: check the condition here instead of pushing it into
-            // the ThrowInvalidOperation() method, because that method always
-            // allocates memory for its variable array of arguments
-            if (!condition)
-            {
-                ThrowInvalidOperation(resourceName, arg0, arg1);
-            }
-        }
-
-        /// <summary>
-        /// Overload for three string format arguments.
-        /// </summary>
-        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-            // PERF NOTE: check the condition here instead of pushing it into
-            // the ThrowInvalidOperation() method, because that method always
-            // allocates memory for its variable array of arguments
-            if (!condition)
-            {
-                ThrowInvalidOperation(resourceName, arg0, arg1, arg2);
-            }
-        }
-
-        /// <summary>
-        /// Overload for four string format arguments.
-        /// </summary>
-        internal static void VerifyThrowInvalidOperation([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2, object arg3)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-
-            // PERF NOTE: check the condition here instead of pushing it into
-            // the ThrowInvalidOperation() method, because that method always
-            // allocates memory for its variable array of arguments
-            if (!condition)
-            {
-                ThrowInvalidOperation(resourceName, arg0, arg1, arg2, arg3);
-            }
-        }
-
-        /// <summary>
-        /// Throws an ArgumentException that can include an inner exception.
-        ///
-        /// PERF WARNING: calling a method that takes a variable number of arguments
-        /// is expensive, because memory is allocated for the array of arguments -- do
-        /// not call this method repeatedly in performance-critical scenarios
-        /// </summary>
-        [DoesNotReturn]
-        internal static void ThrowArgument(string resourceName, params object?[]? args)
-        {
-            ThrowArgument(null, resourceName, args);
-        }
-
-        /// <summary>
-        /// Throws an ArgumentException that can include an inner exception.
-        ///
-        /// PERF WARNING: calling a method that takes a variable number of arguments
-        /// is expensive, because memory is allocated for the array of arguments -- do
-        /// not call this method repeatedly in performance-critical scenarios
-        /// </summary>
-        /// <remarks>
-        /// This method is thread-safe.
-        /// </remarks>
-        /// <param name="innerException">Can be null.</param>
-        /// <param name="resourceName"></param>
-        /// <param name="args"></param>
-        [DoesNotReturn]
-        internal static void ThrowArgument(Exception? innerException, string resourceName, params object?[]? args)
-        {
-            throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, args), innerException);
-        }
-
-        /// <summary>
-        /// Throws an ArgumentException if the given condition is false.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName)
-        {
-            VerifyThrowArgument(condition, null, resourceName);
-        }
-
-        /// <summary>
-        /// Overload for one string format argument.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0)
-        {
-            VerifyThrowArgument(condition, null, resourceName, arg0);
-        }
-
-        /// <summary>
-        /// Overload for two string format arguments.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1)
-        {
-            VerifyThrowArgument(condition, null, resourceName, arg0, arg1);
-        }
-
-        /// <summary>
-        /// Overload for three string format arguments.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2)
-        {
-            VerifyThrowArgument(condition, null, resourceName, arg0, arg1, arg2);
-        }
-
-        /// <summary>
-        /// Overload for four string format arguments.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, string resourceName, object arg0, object arg1, object arg2, object arg3)
-        {
-            VerifyThrowArgument(condition, null, resourceName, arg0, arg1, arg2, arg3);
-        }
-
-        /// <summary>
-        /// Throws an ArgumentException that includes an inner exception, if
-        /// the given condition is false.
-        /// </summary>
-        /// <param name="condition"></param>
-        /// <param name="innerException">Can be null.</param>
-        /// <param name="resourceName"></param>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-            if (!condition)
-            {
-                ThrowArgument(innerException, resourceName, null);
-            }
-        }
-
-        /// <summary>
-        /// Overload for one string format argument.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-
-            if (!condition)
-            {
-                ThrowArgument(innerException, resourceName, arg0);
-            }
-        }
-
-        /// <summary>
-        /// Overload for two string format arguments.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0, object arg1)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-
-            if (!condition)
-            {
-                ThrowArgument(innerException, resourceName, arg0, arg1);
-            }
-        }
-
-        /// <summary>
-        /// Overload for three string format arguments.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0, object arg1, object arg2)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-
-            if (!condition)
-            {
-                ThrowArgument(innerException, resourceName, arg0, arg1, arg2);
-            }
-        }
-
-        /// <summary>
-        /// Overload for four string format arguments.
-        /// </summary>
-        internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition, Exception? innerException, string resourceName, object arg0, object arg1, object arg2, object arg3)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-
-            if (!condition)
-            {
-                ThrowArgument(innerException, resourceName, arg0, arg1, arg2, arg3);
-            }
-        }
-
-        /// <summary>
-        /// Throws an argument out of range exception.
-        /// </summary>
-        [DoesNotReturn]
-        internal static void ThrowArgumentOutOfRange(string? parameterName)
-        {
-            throw new ArgumentOutOfRangeException(parameterName);
-        }
-
-        /// <summary>
-        /// Throws an ArgumentOutOfRangeException using the given parameter name
-        /// if the condition is false.
-        /// </summary>
-        internal static void VerifyThrowArgumentOutOfRange([DoesNotReturnIf(false)] bool condition, [CallerArgumentExpression(nameof(condition))] string? parameterName = null)
-        {
-            if (!condition)
-            {
-                ThrowArgumentOutOfRange(parameterName);
-            }
-        }
-
-        /// <summary>
-        /// Throws an ArgumentNullException if the given string parameter is null
-        /// and ArgumentException if it has zero length.
-        /// </summary>
-        internal static void VerifyThrowArgumentLength([NotNull] string? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            VerifyThrowArgumentNull(parameter, parameterName);
-
-            if (parameter.Length == 0)
-            {
-                ThrowArgumentLength(parameterName);
-            }
-        }
-
-#if !CLR2COMPATIBILITY
-        /// <summary>
-        /// Throws an ArgumentNullException if the given collection is null
-        /// and ArgumentException if it has zero length.
-        /// </summary>
-        internal static void VerifyThrowArgumentLength<T>([NotNull] IReadOnlyCollection<T> parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            VerifyThrowArgumentNull(parameter, parameterName);
-
-            if (parameter.Count == 0)
-            {
-                ThrowArgumentLength(parameterName);
-            }
-        }
-
-        /// <summary>
-        /// Throws an ArgumentException if the given collection is not null but of zero length.
-        /// </summary>
-        internal static void VerifyThrowArgumentLengthIfNotNull<T>([MaybeNull] IReadOnlyCollection<T>? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            if (parameter?.Count == 0)
-            {
-                ThrowArgumentLength(parameterName);
-            }
-        }
-#endif
-
-        [DoesNotReturn]
-        private static void ThrowArgumentLength(string? parameterName)
-        {
-            throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("Shared.ParameterCannotHaveZeroLength", parameterName));
-        }
-
-        /// <summary>
-        /// Throws an ArgumentNullException if the given string parameter is null
-        /// and ArgumentException if it has zero length.
-        /// </summary>
-        internal static void VerifyThrowArgumentInvalidPath([NotNull] string parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            VerifyThrowArgumentNull(parameter, parameterName);
-
-            if (FileUtilities.PathIsInvalid(parameter))
-            {
-                ThrowArgument("Shared.ParameterCannotHaveInvalidPathChars", parameterName, parameter);
-            }
-        }
-
-        /// <summary>
-        /// Throws an ArgumentException if the string has zero length, unless it is
-        /// null, in which case no exception is thrown.
-        /// </summary>
-        internal static void VerifyThrowArgumentLengthIfNotNull(string? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            if (parameter?.Length == 0)
-            {
-                ThrowArgumentLength(parameterName);
-            }
-        }
-
-        /// <summary>
-        /// Throws an ArgumentNullException if the given parameter is null.
-        /// </summary>
-        internal static void VerifyThrowArgumentNull([NotNull] object? parameter, [CallerArgumentExpression(nameof(parameter))] string? parameterName = null)
-        {
-            VerifyThrowArgumentNull(parameter, parameterName, "Shared.ParameterCannotBeNull");
-        }
-
-        /// <summary>
-        /// Throws an ArgumentNullException if the given parameter is null.
-        /// </summary>
-        internal static void VerifyThrowArgumentNull([NotNull] object? parameter, string? parameterName, string resourceName)
-        {
-            ResourceUtilities.VerifyResourceStringExists(resourceName);
-            if (parameter is null)
-            {
-                ThrowArgumentNull(parameterName, resourceName);
-            }
-        }
-
-        [DoesNotReturn]
-        internal static void ThrowArgumentNull(string? parameterName, string resourceName)
-        {
-            // Most ArgumentNullException overloads append its own rather clunky multi-line message. So use the one overload that doesn't.
-            throw new ArgumentNullException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(resourceName, parameterName), (Exception?)null);
-        }
-
-        internal static void VerifyThrowObjectDisposed([DoesNotReturnIf(false)] bool condition, string objectName)
-        {
-            if (!condition)
-            {
-                ThrowObjectDisposed(objectName);
-            }
-        }
-
-        [DoesNotReturn]
-        internal static void ThrowObjectDisposed(string objectName)
-        {
-            throw new ObjectDisposedException(objectName);
-        }
-
-        /// <summary>
-        /// A utility that verifies the parameters provided to a standard ICollection<typeparamref name="T"/>.CopyTo call.
-        /// </summary>
-        /// <exception cref="ArgumentNullException">If <paramref name="array"/> is null.</exception>
-        /// <exception cref="ArgumentOutOfRangeException">If <paramref name="arrayIndex"/> falls outside of the bounds <paramref name="array"/>.</exception>
-        /// <exception cref="ArgumentException">If there is insufficient capacity to copy the collection contents into <paramref name="array"/>
-        /// when starting at <paramref name="arrayIndex"/>.</exception>
-        internal static void VerifyCollectionCopyToArguments<T>(
-            [NotNull] T[]? array,
-            string arrayParameterName,
-            int arrayIndex,
-            string arrayIndexParameterName,
-            int requiredCapacity)
-        {
-            VerifyThrowArgumentNull(array, arrayParameterName);
-            VerifyThrowArgumentOutOfRange(arrayIndex >= 0 && arrayIndex < array.Length, arrayIndexParameterName);
-
-            int arrayCapacity = array.Length - arrayIndex;
-            if (requiredCapacity > arrayCapacity)
-            {
-                throw new ArgumentException(
-                    ResourceUtilities.GetResourceString("Shared.CollectionCopyToFailureProvidedArrayIsTooSmall"),
-                    arrayParameterName);
-            }
-        }
-#endif
-    }
-}
diff --git a/src/Tasks/AssemblyResources.cs b/src/Tasks/AssemblyResources.cs
deleted file mode 100644
index 51a9b19d201..00000000000
--- a/src/Tasks/AssemblyResources.cs
+++ /dev/null
@@ -1,49 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System.Globalization;
-using System.Reflection;
-using System.Resources;
-
-#nullable disable
-
-namespace Microsoft.Build.Shared
-{
-    /// <summary>
-    /// This class provides access to the assembly's resources.
-    /// </summary>
-    internal static class AssemblyResources
-    {
-        /// <summary>
-        /// Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
-        /// </summary>
-        /// <remarks>This method is thread-safe.</remarks>
-        /// <returns>The resource string, or null if not found.</returns>
-        internal static string GetString(string name)
-        {
-            // NOTE: the ResourceManager.GetString() method is thread-safe
-            string resource = PrimaryResources.GetString(name, CultureInfo.CurrentUICulture) ?? SharedResources.GetString(name, CultureInfo.CurrentUICulture);
-
-            ErrorUtilities.VerifyThrow(resource != null, "Missing resource '{0}'", name);
-
-            return resource;
-        }
-
-        /// <summary>
-        /// Gets the assembly's primary resources i.e. the resources exclusively owned by this assembly.
-        /// </summary>
-        /// <remarks>This property is thread-safe.</remarks>
-        /// <value>ResourceManager for primary resources.</value>
-        internal static ResourceManager PrimaryResources { get; } = new ResourceManager("Microsoft.Build.Tasks.Core.Strings", typeof(AssemblyResources).GetTypeInfo().Assembly);
-
-        /// <summary>
-        /// Gets the assembly's shared resources i.e. the resources this assembly shares with other assemblies.
-        /// </summary>
-        /// <remarks>This property is thread-safe.</remarks>
-        /// <value>ResourceManager for shared resources.</value>
-        internal static ResourceManager SharedResources { get; } = new ResourceManager("Microsoft.Build.Tasks.Core.Strings.shared", typeof(AssemblyResources).GetTypeInfo().Assembly);
-
-        // assembly resources
-        // shared resources
-    }
-}
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 913ee01516e..9c6c6df4fbd 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -129,10 +129,8 @@
       <Link>VisualStudioConstants.cs</Link>
     </Compile>
     <Compile Include="..\Shared\AssemblyNameExtension.cs" />
-    <Compile Include="..\Shared\ErrorUtilities.cs" />
     <Compile Include="..\Shared\ConversionUtilities.cs" />
     <Compile Include="..\Shared\FileUtilitiesRegex.cs" />
-    <Compile Include="..\Shared\ResourceUtilities.cs" />
     <Compile Include="..\Shared\LanguageParser\token.cs" />
     <Compile Include="..\Shared\LanguageParser\tokenChar.cs" />
     <Compile Include="..\Shared\LanguageParser\tokenCharReader.cs" />
@@ -186,7 +184,6 @@
     <Compile Include="AssemblyFolder.cs" />
     <Compile Include="AssemblyInfo.cs" />
     <Compile Include="AssemblyRemapping.cs" />
-    <Compile Include="AssemblyResources.cs" />
     <Compile Include="AssignLinkMetadata.cs" />
     <Compile Include="AssignProjectConfiguration.cs" />
     <Compile Include="AssignTargetPath.cs" />
diff --git a/src/Utilities/AssemblyResources.cs b/src/Utilities/AssemblyResources.cs
deleted file mode 100644
index 3258aecf36d..00000000000
--- a/src/Utilities/AssemblyResources.cs
+++ /dev/null
@@ -1,83 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System.Globalization;
-using System.Reflection;
-using System.Resources;
-
-#nullable disable
-
-namespace Microsoft.Build.Shared
-{
-    /// <summary>
-    /// This class provides access to the assembly's resources.
-    /// </summary>
-    internal static class AssemblyResources
-    {
-        /// <summary>
-        /// Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
-        /// </summary>
-        /// <remarks>This method is thread-safe.</remarks>
-        /// <param name="name"></param>
-        /// <returns>The resource string, or null if not found.</returns>
-        internal static string GetString(string name)
-        {
-            string resource = PrimaryResources.GetString(name, CultureInfo.CurrentUICulture)
-                ?? SharedResources.GetString(name, CultureInfo.CurrentUICulture);
-
-            ErrorUtilities.VerifyThrow(resource != null, "Missing resource '{0}'", name);
-
-            return resource;
-        }
-
-        /// <summary>
-        /// Gets the assembly's primary resources i.e. the resources exclusively owned by this assembly.
-        /// </summary>
-        /// <remarks>This property is thread-safe.</remarks>
-        /// <value>ResourceManager for primary resources.</value>
-        internal static ResourceManager PrimaryResources { get; } = new ResourceManager("Microsoft.Build.Utilities.Core.Strings", typeof(AssemblyResources).GetTypeInfo().Assembly);
-
-        /// <summary>
-        /// Gets the assembly's shared resources i.e. the resources this assembly shares with other assemblies.
-        /// </summary>
-        /// <remarks>This property is thread-safe.</remarks>
-        /// <value>ResourceManager for shared resources.</value>
-        internal static ResourceManager SharedResources { get; } = new ResourceManager("Microsoft.Build.Utilities.Core.Strings.shared", typeof(AssemblyResources).GetTypeInfo().Assembly);
-
-        /// <summary>
-        /// Formats the given string using the variable arguments passed in. The current thread's culture is used for formatting.
-        /// </summary>
-        /// <remarks>This method is thread-safe.</remarks>
-        /// <param name="unformatted">The string to format.</param>
-        /// <param name="args">Arguments for formatting.</param>
-        /// <returns>The formatted string.</returns>
-        internal static string FormatString(string unformatted, params object[] args)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(unformatted);
-
-            return ResourceUtilities.FormatString(unformatted, args);
-        }
-
-        /// <summary>
-        /// Loads the specified resource string and optionally formats it using the given arguments. The current thread's culture
-        /// is used for formatting.
-        /// </summary>
-        /// <remarks>
-        /// 1) This method requires the owner task to have registered its resources either via the Task (or TaskMarshalByRef) base
-        ///    class constructor, or the Task.TaskResources (or AppDomainIsolatedTask.TaskResources) property.
-        /// 2) This method is thread-safe.
-        /// </remarks>
-        /// <param name="resourceName">The name of the string resource to load.</param>
-        /// <param name="args">Optional arguments for formatting the loaded string.</param>
-        /// <returns>The formatted string.</returns>
-        internal static string FormatResourceString(string resourceName, params object[] args)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(resourceName);
-
-            // NOTE: the ResourceManager.GetString() method is thread-safe
-            string resourceString = GetString(resourceName);
-
-            return FormatString(resourceString, args);
-        }
-    }
-}
diff --git a/src/Utilities/Microsoft.Build.Utilities.csproj b/src/Utilities/Microsoft.Build.Utilities.csproj
index 5b3bb083946..dbf18d892dc 100644
--- a/src/Utilities/Microsoft.Build.Utilities.csproj
+++ b/src/Utilities/Microsoft.Build.Utilities.csproj
@@ -63,9 +63,6 @@
     <Compile Include="..\Shared\CopyOnWriteDictionary.cs">
       <Link>Shared\CopyOnWriteDictionary.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ErrorUtilities.cs">
-      <Link>Shared\ErrorUtilities.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\EscapingUtilities.cs">
       <Link>Shared\EscapingUtilities.cs</Link>
     </Compile>
@@ -117,9 +114,6 @@
     <Compile Include="..\Shared\RegistryHelper.cs">
       <Link>Shared\RegistryHelper.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\ResourceUtilities.cs">
-      <Link>Shared\ResourceUtilities.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\TaskLoggingHelper.cs">
       <Link>Shared\TaskLoggingHelper.cs</Link>
     </Compile>
