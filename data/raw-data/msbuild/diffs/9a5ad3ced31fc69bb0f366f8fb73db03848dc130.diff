diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 5d25dad5d68..2eef5fde018 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -9,7 +9,6 @@
 using System.Linq;
 using System.Text;
 using FluentAssertions;
-using FluentAssertions.Equivalency;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
index 68a82e27491..a5d7ea5622c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
@@ -70,7 +70,7 @@ internal static IntrinsicTask InstantiateTask(ProjectTargetInstanceChild taskIns
         {
             if (taskInstance is ProjectPropertyGroupTaskInstance propertyGroupTaskInstance)
             {
-                return new PropertyGroupIntrinsicTask(propertyGroupTaskInstance, loggingContext, projectInstance, logTaskInputs, Traits.Instance.LogPropertyTracking);
+                return new PropertyGroupIntrinsicTask(propertyGroupTaskInstance, loggingContext, projectInstance, logTaskInputs);
             }
             else if (taskInstance is ProjectItemGroupTaskInstance itemGroupTaskInstance)
             {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index 4a2e3f2078e..89745b5aab9 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -34,12 +34,11 @@ internal class PropertyGroupIntrinsicTask : IntrinsicTask
         /// <param name="loggingContext">The logging context</param>
         /// <param name="projectInstance">The project instance</param>
         /// <param name="logTaskInputs">Flag to determine whether or not to log task inputs.</param>
-        /// <param name="settingValue">Flag to determine whether or not property tracking enabled.</param>
-        public PropertyGroupIntrinsicTask(ProjectPropertyGroupTaskInstance taskInstance, TargetLoggingContext loggingContext, ProjectInstance projectInstance, bool logTaskInputs, int settingValue)
+        public PropertyGroupIntrinsicTask(ProjectPropertyGroupTaskInstance taskInstance, TargetLoggingContext loggingContext, ProjectInstance projectInstance, bool logTaskInputs)
             : base(loggingContext, projectInstance, logTaskInputs)
         {
             _taskInstance = taskInstance;
-            _propertyTrackingSettings = (PropertyTrackingSetting)settingValue;
+            _propertyTrackingSettings = (PropertyTrackingSetting)Traits.Instance.LogPropertyTracking;
         }
 
         /// <summary>
@@ -89,7 +88,7 @@ internal override void ExecuteTask(Lookup lookup)
                             string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(property.Value, ExpanderOptions.ExpandAll, property.Location);
                             bucket.Expander.PropertiesUseTracker.CheckPreexistingUndefinedUsage(property, evaluatedValue, LoggingContext);
 
-                            LogPropertyInTargetAssignment(property, evaluatedValue);
+                            PropertyTrackingUtils.LogPropertyAssignment(_propertyTrackingSettings, property.Name, evaluatedValue, property.Location, Project.GetProperty(property.Name)?.EvaluatedValue ?? null, LoggingContext);
 
                             if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents)
                             {
@@ -117,52 +116,6 @@ internal override void ExecuteTask(Lookup lookup)
             }
         }
 
-        /// <summary>
-        /// Logs property assignment information during target execution, providing detailed tracking of property value changes.
-        /// </summary>
-        /// <param name="property">The property instance being assigned or modified.</param>
-        /// <param name="evaluatedValue">The new evaluated value of the property.</param>
-        private void LogPropertyInTargetAssignment(ProjectPropertyGroupTaskPropertyInstance property, string evaluatedValue)
-        {
-            if (_propertyTrackingSettings == 0)
-            {
-                return;
-            }
-
-            var previousPropertyValue = Project.GetProperty(property.Name)?.EvaluatedValue;
-
-            if (previousPropertyValue == null
-                && (_propertyTrackingSettings & PropertyTrackingSetting.PropertyInitialValueSet) == PropertyTrackingSetting.PropertyInitialValueSet)
-            {
-                var args = new PropertyInitialValueSetEventArgs(
-                    property.Name,
-                    evaluatedValue,
-                    propertySource: string.Empty,
-                    property.Location.File,
-                    property.Location.Line,
-                    property.Location.Column,
-                    message: null)
-                { BuildEventContext = LoggingContext.BuildEventContext };
-
-                LoggingContext.LogBuildEvent(args);
-            }
-            else if ((_propertyTrackingSettings & PropertyTrackingSetting.PropertyReassignment) == PropertyTrackingSetting.PropertyReassignment)
-            {
-                var args = new PropertyReassignmentEventArgs(
-                    property.Name,
-                    previousPropertyValue,
-                    evaluatedValue,
-                    location: null,
-                    property.Location.File,
-                    property.Location.Line,
-                    property.Location.Column,
-                    message: null)
-                { BuildEventContext = LoggingContext.BuildEventContext, };
-
-                LoggingContext.LogBuildEvent(args);
-            }
-        }
-
         /// <summary>
         /// Adds batchable parameters from a property element into the list. If the property element was
         /// a task, these would be its raw parameter values.
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 92e48b19885..8e9ead325fd 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1586,7 +1586,8 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
                             }
                         }
 
-                        LogPropertyInTaskAssignment(outputTargetName, outputString, parameterLocation);
+                        PropertyTrackingUtils.LogPropertyAssignment(_propertyTrackingSettings, outputTargetName, outputString, parameterLocation, _projectInstance.GetProperty(outputTargetName)?.EvaluatedValue ?? null, _targetLoggingContext);
+
                         _batchBucket.Lookup.SetProperty(ProjectPropertyInstance.Create(outputTargetName, outputString, parameterLocation, _projectInstance.IsImmutable));
                     }
                 }
@@ -1601,14 +1602,14 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
         /// <param name="location">The source location where the property assignment occurs.</param>
         private void LogPropertyInTaskAssignment(string propertyName, string propertyValue, IElementLocation location)
         {
-            if (_propertyTrackingSettings == 0)
+            if (_propertyTrackingSettings == PropertyTrackingSetting.None)
             {
                 return;
             }
 
             var previousPropertyValue = _projectInstance.GetProperty(propertyName)?.EvaluatedValue;
 
-            if (previousPropertyValue == null && (_propertyTrackingSettings & PropertyTrackingSetting.PropertyInitialValueSet) == PropertyTrackingSetting.PropertyInitialValueSet)
+            if (previousPropertyValue == null && PropertyTrackingUtils.IsPropertyTrackingEnabled(_propertyTrackingSettings, PropertyTrackingSetting.PropertyInitialValueSet))
             {
                 var args = new PropertyInitialValueSetEventArgs(
                     propertyName,
@@ -1622,7 +1623,7 @@ private void LogPropertyInTaskAssignment(string propertyName, string propertyVal
 
                 _targetLoggingContext.LogBuildEvent(args);
             }
-            else if ((_propertyTrackingSettings & PropertyTrackingSetting.PropertyReassignment) == PropertyTrackingSetting.PropertyReassignment)
+            else if (PropertyTrackingUtils.IsPropertyTrackingEnabled(_propertyTrackingSettings, PropertyTrackingSetting.PropertyReassignment))
             {
                 var args = new PropertyReassignmentEventArgs(
                     propertyName,
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 6b73a927756..4b25d8ded91 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -148,11 +148,6 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable
         /// </summary>
         private readonly PropertyDictionary<ProjectPropertyInstance> _globalProperties;
 
-        /// <summary>
-        /// Properties passed from the command line (e.g. by using /p:).
-        /// </summary>
-        private readonly HashSet<string> _propertiesFromCommandLine;
-
         /// <summary>
         /// The properties representing the environment.
         /// </summary>
@@ -347,7 +342,7 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
                     _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(globalProperties.Count);
 
                     // at this stage globalProperties collection contains entries passed from command line (e.g. /p:foo=bar).
-                    _propertiesFromCommandLine = new HashSet<string>(globalProperties.Keys);
+                    PropertiesFromCommandLine = [.. globalProperties.Keys];
 
                     foreach (KeyValuePair<string, string> pair in globalProperties)
                     {
@@ -508,7 +503,7 @@ public static string DisplayVersion
         /// <summary>
         /// Properties passed from the command line (e.g. by using /p:).
         /// </summary>
-        public HashSet<string> PropertiesFromCommandLine => _propertiesFromCommandLine;
+        public HashSet<string> PropertiesFromCommandLine { get; }
 
         /// <summary>
         /// The default tools version of this project collection. Projects use this tools version if they
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 7e6eddc236e..ceff67c2bc5 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1259,13 +1259,13 @@ private int AddGlobalProperties()
 
             foreach (ProjectPropertyInstance globalProperty in _data.GlobalPropertiesDictionary)
             {
-                  _ = _data.SetProperty(
-                          globalProperty.Name,
-                          ((IProperty)globalProperty).EvaluatedValueEscaped,
-                          isGlobalProperty: true /* it is a global property, but it comes from command line and is tracked separately */,
-                          false /* may NOT be a reserved name */,
-                          loggingContext: _evaluationLoggingContext,
-                          isCommandLineProperty: _propertiesFromCommandLine.Contains(globalProperty.Name) /* IS coming from command line argument */);
+                _ = _data.SetProperty(
+                    globalProperty.Name,
+                    ((IProperty)globalProperty).EvaluatedValueEscaped,
+                    isGlobalProperty: true /* it is a global property, but it comes from command line and is tracked separately */,
+                    false /* may NOT be a reserved name */,
+                    loggingContext: _evaluationLoggingContext,
+                    isCommandLineProperty: _propertiesFromCommandLine.Contains(globalProperty.Name) /* IS coming from command line argument */);
             }
 
             return _data.GlobalPropertiesDictionary.Count;
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index afccc78c9d8..ed5a7130092 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Runtime;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
@@ -175,13 +176,10 @@ public P SetProperty(ProjectPropertyElement propertyElement, string evaluatedVal
         #region Private Methods...
 
         private bool IsPropertyReadTrackingRequested
-            => IsEnvironmentVariableReadTrackingRequested ||
-               (_settings & PropertyTrackingSetting.UninitializedPropertyRead) ==
-               PropertyTrackingSetting.UninitializedPropertyRead;
+            => IsEnvironmentVariableReadTrackingRequested
+            || PropertyTrackingUtils.IsPropertyTrackingEnabled(_settings, PropertyTrackingSetting.UninitializedPropertyRead);
 
-        private bool IsEnvironmentVariableReadTrackingRequested
-            => (_settings & PropertyTrackingSetting.EnvironmentVariableRead) ==
-               PropertyTrackingSetting.EnvironmentVariableRead;
+        private bool IsEnvironmentVariableReadTrackingRequested => PropertyTrackingUtils.IsPropertyTrackingEnabled(_settings, PropertyTrackingSetting.EnvironmentVariableRead);
 
         /// <summary>
         /// Logic containing what to do when a property is read.
@@ -216,7 +214,7 @@ private void TrackPropertyRead(string name, P property)
         /// <param name="name">The name of the environment variable read.</param>
         private void TrackEnvironmentVariableRead(string name)
         {
-            if ((_settings & PropertyTrackingSetting.EnvironmentVariableRead) != PropertyTrackingSetting.EnvironmentVariableRead)
+            if (!IsEnvironmentVariableReadTrackingRequested)
             {
                 return;
             }
@@ -238,7 +236,7 @@ private void TrackEnvironmentVariableRead(string name)
         /// <param name="name">The name of the uninitialized property read.</param>
         private void TrackUninitializedPropertyRead(string name)
         {
-            if ((_settings & PropertyTrackingSetting.UninitializedPropertyRead) != PropertyTrackingSetting.UninitializedPropertyRead)
+            if (!PropertyTrackingUtils.IsPropertyTrackingEnabled(_settings, PropertyTrackingSetting.UninitializedPropertyRead))
             {
                 return;
             }
@@ -288,7 +286,7 @@ private void TrackPropertyWrite(
         /// <param name="location">The exact location of the property. Can be null if comes not form xml.</param>
         private void TrackPropertyInitialValueSet(P property, PropertySource source, IElementLocation? location)
         {
-            if ((_settings & PropertyTrackingSetting.PropertyInitialValueSet) != PropertyTrackingSetting.PropertyInitialValueSet)
+            if (!PropertyTrackingUtils.IsPropertyTrackingEnabled(_settings, PropertyTrackingSetting.PropertyInitialValueSet))
             {
                 return;
             }
@@ -331,8 +329,9 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
             }
 
             // Either we want to specifically track property reassignments
-            // or we do not want to track nothing - in which case the prop reassignment is enabled by default.
-            if (_settings == 0 || (_settings & PropertyTrackingSetting.PropertyReassignment) == PropertyTrackingSetting.PropertyReassignment)
+            // or we do not want to track nothing - in which case the prop reassignment is enabled by default.    
+            if (PropertyTrackingUtils.IsPropertyTrackingEnabled(_settings, PropertyTrackingSetting.PropertyReassignment)
+                || (_settings == PropertyTrackingSetting.None && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
             {
                 var args = new PropertyReassignmentEventArgs(
                     property.Name,
@@ -416,4 +415,73 @@ internal enum PropertyTrackingSetting
 
         All = PropertyReassignment | PropertyInitialValueSet | EnvironmentVariableRead | UninitializedPropertyRead
     }
+
+    internal class PropertyTrackingUtils
+    {
+        /// <summary>
+        /// Determines if a specific property tracking setting is enabled within the provided settings configuration.
+        /// </summary>
+        /// <param name="settings">The combined property tracking settings value to check against.</param>
+        /// <param name="currentTrackingSetting">The specific tracking setting to verify.</param>
+        /// <returns>true if the specified tracking setting is enabled in the settings configuration.</returns>
+        internal static bool IsPropertyTrackingEnabled(PropertyTrackingSetting settings, PropertyTrackingSetting currentTrackingSetting) => (settings & currentTrackingSetting) == currentTrackingSetting;
+
+        /// <summary>
+        /// Logs property assignment information during execution, providing detailed tracking of property value changes.
+        /// This internal method handles two scenarios:
+        /// 1. Initial property value assignment (when previousPropertyValue is null)
+        /// 2. Property value reassignment (when previousPropertyValue has a value)
+        /// If property tracking is disabled (PropertyTrackingSetting.None), no logging occurs.
+        /// </summary>
+        /// <param name="settings">Controls what types of property assignments should be tracked.</param>
+        /// <param name="propertyName">Name of the property being modified.</param>
+        /// <param name="propertyValue">New value being assigned to the property.</param>
+        /// <param name="location">Source location information (file, line, column).</param>
+        /// <param name="previousPropertyValue">Previous value of the property, null if this is initial assignment.</param>
+        /// <param name="loggingContext">Context for logging build events.</param>
+        internal static void LogPropertyAssignment(
+            PropertyTrackingSetting settings,
+            string propertyName,
+            string propertyValue,
+            IElementLocation location,
+            string? previousPropertyValue,
+            LoggingContext loggingContext)
+        {
+            if (settings == PropertyTrackingSetting.None)
+            {
+                return;
+            }
+
+            if (previousPropertyValue == null && IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyInitialValueSet))
+            {
+                var args = new PropertyInitialValueSetEventArgs(
+                    propertyName,
+                    propertyValue,
+                    propertySource: string.Empty,
+                    location.File,
+                    location.Line,
+                    location.Column,
+                    message: null)
+                { BuildEventContext = loggingContext.BuildEventContext };
+
+                loggingContext.LogBuildEvent(args);
+            }
+            else if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyReassignment)
+                || (settings == PropertyTrackingSetting.None && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
+            {
+                var args = new PropertyReassignmentEventArgs(
+                    propertyName,
+                    previousPropertyValue,
+                    propertyValue,
+                    location: null,
+                    location.File,
+                    location.Line,
+                    location.Column,
+                    message: null)
+                { BuildEventContext = loggingContext.BuildEventContext, };
+
+                loggingContext.LogBuildEvent(args);
+            }
+        }
+    }
 }
diff --git a/src/Framework/UninitializedPropertyReadEventArgs.cs b/src/Framework/UninitializedPropertyReadEventArgs.cs
index 3c89e480e78..7980bdb5485 100644
--- a/src/Framework/UninitializedPropertyReadEventArgs.cs
+++ b/src/Framework/UninitializedPropertyReadEventArgs.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.IO;
-using System.Xml.Linq;
 using Microsoft.Build.Shared;
 
 #nullable disable
