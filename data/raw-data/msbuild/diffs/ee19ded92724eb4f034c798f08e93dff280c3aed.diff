diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index f215d86d9ec..2c034bd6e64 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -4473,6 +4473,38 @@ public void ConditionWithShortCircuitAndErrorDoesNotFailBuild(string projectInne
             }
         }
 
+        [Theory]
+        [InlineData("$(Hello)", 0, 8, "Hello")]
+        [InlineData("$(Hello)|$(World)", 9, 8, "World")]
+        [InlineData("$(He()o)", 0, 8, null)]
+        [InlineData("$)Hello(", 0, 8, null)]
+        [InlineData("$(Helloo", 0, 8, null)]
+        [InlineData("$Heello)", 0, 8, null)]
+        [InlineData("$(He$$o)", 0, 8, null)]
+        [InlineData(" $(Helo)", 0, 8, null)]
+        [InlineData("$(Helo) ", 0, 8, null)]
+        [InlineData("$()", 0, 3, "")]
+        [InlineData("$( Hello )", 0, 10, " Hello ")]
+        [InlineData("$(He-ll-o)", 0, 10, "He-ll-o")]
+        [InlineData("$(He ll o)", 0, 10, "He ll o")]
+        [InlineData("aaa$(Hello)", 3, 8, "Hello")]
+        [InlineData("aaa$(Hello)bbb", 3, 8, "Hello")]
+        public void TryGetSingleProperty(string input, int start, int length, string expected)
+        {
+            bool result = ConditionEvaluator.TryGetSingleProperty(input, start, length, out string actual);
+
+            if (expected is null)
+            {
+                Assert.False(result);
+                Assert.Null(actual);
+            }
+            else
+            {
+                Assert.True(result);
+                Assert.Equal(expected, actual);
+            }
+        }
+
         [Fact]
         public void VerifyMSBuildLastModifiedProjectForImport()
         {
diff --git a/src/Build/Evaluation/ConditionEvaluator.cs b/src/Build/Evaluation/ConditionEvaluator.cs
index e333a51a317..82a87f3a841 100644
--- a/src/Build/Evaluation/ConditionEvaluator.cs
+++ b/src/Build/Evaluation/ConditionEvaluator.cs
@@ -4,7 +4,7 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Text.RegularExpressions;
+using System.Diagnostics.CodeAnalysis;
 using System.Threading;
 
 using Microsoft.Build.BackEnd.Logging;
@@ -19,8 +19,7 @@ namespace Microsoft.Build.Evaluation
 {
     internal static class ConditionEvaluator
     {
-        private static readonly Lazy<Regex> s_singlePropertyRegex = new Lazy<Regex>(
-            () => new Regex(@"^\$\(([^\$\(\)]*)\)$", RegexOptions.Compiled));
+        private static readonly char[] InvalidPropertyNameCharacters = { '$', '(', ')' };
 
         /// <summary>
         /// Update our table which keeps track of all the properties that are referenced
@@ -59,9 +58,7 @@ internal static void UpdateConditionedPropertiesTable(
                     var lastPiece = pieceSeparator < 0;
                     var pieceEnd = lastPiece ? leftValue.Length : pieceSeparator;
 
-                    var singlePropertyMatch = s_singlePropertyRegex.Value.Match(leftValue, pieceStart, pieceEnd - pieceStart);
-
-                    if (singlePropertyMatch.Success)
+                    if (TryGetSingleProperty(leftValue, pieceStart, pieceEnd - pieceStart, out string? propertyName))
                     {
                         // Find the first vertical bar on the right-hand-side expression.
                         var indexOfVerticalBar = rightValueExpanded.IndexOf('|');
@@ -86,9 +83,6 @@ internal static void UpdateConditionedPropertiesTable(
                             rightValueExpanded = rightValueExpanded.Substring(indexOfVerticalBar + 1);
                         }
 
-                        // Capture the property name out of the regular expression.
-                        var propertyName = singlePropertyMatch.Groups[1].ToString();
-
                         // Get the string collection for this property name, if one already exists.
                         // If not already in the table, add a new entry for it.
                         if (!conditionedPropertiesTable.TryGetValue(propertyName, out List<string>? conditionedPropertyValues))
@@ -115,6 +109,24 @@ internal static void UpdateConditionedPropertiesTable(
             }
         }
 
+        // Internal for testing purposes
+        internal static bool TryGetSingleProperty(string input, int beginning, int length, [NotNullWhen(returnValue: true)] out string? propertyName)
+        {
+            // This code is simulating the regex pattern: ^\$\(([^\$\(\)]*)\)$
+            if (input.Length < beginning + 3 ||
+                input[beginning] != '$' ||
+                input[beginning + 1] != '(' ||
+                input[beginning + length - 1] != ')' ||
+                input.IndexOfAny(InvalidPropertyNameCharacters, beginning + 2, length - 3) != -1)
+            {
+                propertyName = null;
+                return false;
+            }
+
+            propertyName = input.Substring(beginning + 2, length - 3);
+            return true;
+        }
+
         // Implements a pool of expression trees for each condition.
         // This is because an expression tree is a mutually exclusive resource (has non thread safe state while it evaluates).
         // During high demand when all expression trees are busy evaluating, a new expression tree is created and added to the pool.
