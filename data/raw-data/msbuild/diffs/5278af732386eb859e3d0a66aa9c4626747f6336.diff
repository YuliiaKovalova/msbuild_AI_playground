diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index 4ddff252e78..abf9e4e80c9 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -6,7 +6,6 @@
 using System.IO.Compression;
 using System.Threading;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -66,8 +65,6 @@ public sealed class BinaryLogReplayEventSource : EventArgsDispatcher,
         private int? _fileFormatVersion;
         private int? _minimumReaderVersion;
 
-        private LoggingService? _loggingService;
-
         public int FileFormatVersion => _fileFormatVersion ?? throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_Source_VersionUninitialized"));
         public int MinimumReaderVersion => _minimumReaderVersion ?? throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_Source_VersionUninitialized"));
 
@@ -96,11 +93,6 @@ public void Replay(string sourceFilePath)
             Replay(sourceFilePath, CancellationToken.None);
         }
 
-        internal void AttachLoggingService(LoggingService loggingService)
-        {
-            _loggingService = loggingService;
-        }
-
         /// <summary>
         /// Read the provided binary log file opened as a stream and raise corresponding events for each BuildEventArgs
         /// </summary>
@@ -253,7 +245,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
             reader.ArchiveFileEncountered += _archiveFileEncountered;
             reader.StringReadDone += _stringReadDone;
 
-            if (HasStructuredEventsSubscribers || !supportsForwardCompatibility || _loggingService != null)
+            if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
             {
                 if (this._rawLogRecordReceived != null)
                 {
@@ -266,20 +258,10 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
                 reader.SkipUnknownEventParts = supportsForwardCompatibility && AllowForwardCompatibility;
                 reader.RecoverableReadError += RecoverableReadError;
 
-                if (_loggingService != null)
+                while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
                 {
-                    while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
-                    {
-                        _loggingService.ProcessLoggingEvent(instance);
-                    }
+                    Dispatch(instance);
                 }
-                else
-                {
-                    while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
-                    {
-                        Dispatch(instance);
-                    }
-                }           
             }
             else
             {
