diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 01e3c0b69b2..3ab0db22d57 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -1004,3 +1004,81 @@ private int NodeIndexForContext(BuildEventContext context)
 
     #endregion
 }
+
+internal sealed class TerminalLoggerNodeForwardingLogger : IForwardingLogger
+{
+    public IEventRedirector? BuildEventRedirector { get; set; }
+    public int NodeId { get; set; }
+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Diagnostic; set { return; } }
+    public string? Parameters { get; set; }
+
+    public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);
+    public void Initialize(IEventSource eventSource)
+    {
+        eventSource.BuildStarted += ForwardEventUnconditionally;
+        eventSource.BuildFinished += ForwardEventUnconditionally;
+        eventSource.ProjectStarted += ForwardEventUnconditionally;
+        eventSource.ProjectFinished += ForwardEventUnconditionally;
+        eventSource.TargetStarted += ForwardEventUnconditionally;
+        eventSource.TargetFinished += ForwardEventUnconditionally;
+        eventSource.TaskStarted += TaskStarted;
+
+        eventSource.MessageRaised += MessageRaised;
+        eventSource.WarningRaised += ForwardEventUnconditionally;
+        eventSource.ErrorRaised += ForwardEventUnconditionally;
+
+        if (eventSource is IEventSource3 eventSource3)
+        {
+            eventSource3.IncludeTaskInputs();
+        }
+
+        if (eventSource is IEventSource4 eventSource4)
+        {
+            eventSource4.IncludeEvaluationPropertiesAndItems();
+        }
+    }
+
+    public void ForwardEventUnconditionally(object sender, BuildEventArgs e)
+    {
+        BuildEventRedirector?.ForwardEvent(e);
+    }
+
+    public void TaskStarted(object sender, TaskStartedEventArgs e)
+    {
+        // MSBuild tasks yield the build node, so forward this to the central node so it can update status
+        if (e.TaskName.Equals("MSBuild", StringComparison.OrdinalIgnoreCase))
+        {
+            BuildEventRedirector?.ForwardEvent(e);
+        }
+    }
+
+    public void MessageRaised(object sender, BuildMessageEventArgs e)
+    {
+        if (e.BuildEventContext is null)
+        {
+            return;
+        }
+
+        // SourceRoot additions are used in output reporting, so forward those along
+        if (e is TaskParameterEventArgs taskArgs)
+        {
+            if (taskArgs.Kind == TaskParameterMessageKind.AddItem)
+            {
+                if (taskArgs.ItemType.Equals("SourceRoot", StringComparison.OrdinalIgnoreCase))
+                {
+                    BuildEventRedirector?.ForwardEvent(taskArgs);
+                }
+            }
+        }
+
+        // High-priority messages are rendered for each project, so forward those along
+        if (e.Message is not null && e.Importance == MessageImportance.High)
+        {
+            BuildEventRedirector?.ForwardEvent(e);
+        }
+    }
+
+    public void Shutdown()
+    {
+    }
+}
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 23c3d593e15..0a08f58f87f 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -43,6 +43,7 @@
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using SimpleErrorLogger = Microsoft.Build.Logging.SimpleErrorLogger.SimpleErrorLogger;
 using TerminalLogger = Microsoft.Build.Logging.TerminalLogger.TerminalLogger;
+using TerminalLoggerForwardingLogger = Microsoft.Build.Logging.TerminalLogger.TerminalLoggerNodeForwardingLogger;
 
 #nullable disable
 
@@ -2951,13 +2952,13 @@ private static string GetProjectDirectory(string[] projectSwitchParameters)
 
 
         /// <summary>
-        /// Identifies if there is rsp files near the project file 
+        /// Identifies if there is rsp files near the project file
         /// </summary>
         /// <returns>true if there autoresponse file was found</returns>
         private static bool CheckAndGatherProjectAutoResponseFile(CommandLineSwitches switchesFromAutoResponseFile, CommandLineSwitches commandLineSwitches, bool recursing, string commandLine)
         {
             bool found = false;
-           
+
             var projectDirectory = GetProjectDirectory(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Project]);
 
             if (!recursing && !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoAutoResponse])
@@ -3936,8 +3937,8 @@ private static void ProcessTerminalLogger(bool noConsoleLogger,
                 }
                 else
                 {
-                    // For performance, register this logger using the forwarding logger mechanism.
-                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", TerminalLogger.ConfigurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
+                    LoggerDescription terminalLoggerDescription = new LoggerDescription(typeof(TerminalLoggerForwardingLogger).FullName, typeof(TerminalLoggerForwardingLogger).Assembly.FullName, null, null, LoggerVerbosity.Diagnostic);
+                    DistributedLoggerRecord forwardingLoggerRecord = new DistributedLoggerRecord(logger, terminalLoggerDescription);
                     distributedLoggerRecords.Add(forwardingLoggerRecord);
                 }
             }
