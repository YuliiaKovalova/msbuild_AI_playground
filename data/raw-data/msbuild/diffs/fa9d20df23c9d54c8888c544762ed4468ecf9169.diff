diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 831ec4a4091..20627d8d848 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -281,7 +281,7 @@ public void CachingWrapperShouldWarnWhenMultipleVersionsAreReferenced()
                     "1.0.0",
                     Enumerable.Empty<string>()));
 
-            var service = new CachingSdkResolverService();
+            var service = CachingSdkResolverService.Instance;
             service.InitializeForTests(
                 null,
                 new List<SdkResolver>
@@ -532,7 +532,7 @@ public void CachingWrapperShouldOnlyResolveOnce()
                     "1.0.0",
                     Enumerable.Empty<string>()));
 
-            var service = new CachingSdkResolverService();
+            var service = CachingSdkResolverService.Instance;
             service.InitializeForTests(
                 null,
                 new List<SdkResolver>
@@ -560,7 +560,7 @@ public void InteractiveIsSetForResolverContext()
             // Start with interactive false
             bool interactive = false;
 
-            var service = new CachingSdkResolverService();
+            var service = CachingSdkResolverService.Instance;
 
             service.InitializeForTests(
                 resolvers: new List<SdkResolver>
@@ -593,7 +593,7 @@ public void IsRunningInVisualStudioIsSetForResolverContext()
         {
             bool isRunningInVisualStudio = false;
 
-            var service = new CachingSdkResolverService();
+            var service = CachingSdkResolverService.Instance;
             service.InitializeForTests(
                 resolvers: new List<SdkResolver>
                 {
diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
index 0f79c18d598..6fca75f5444 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
@@ -21,6 +21,20 @@ internal sealed class CachingSdkResolverService : SdkResolverService
         /// </summary>
         private readonly ConcurrentDictionary<int, ConcurrentDictionary<string, Lazy<SdkResult>>> _cache = new ConcurrentDictionary<int, ConcurrentDictionary<string, Lazy<SdkResult>>>();
 
+        /// <summary>
+        /// Stores the singleton instance for a particular process.
+        /// </summary>
+        private static readonly Lazy<CachingSdkResolverService> InstanceLazy = new Lazy<CachingSdkResolverService>(() => new CachingSdkResolverService(), isThreadSafe: true);
+
+        private CachingSdkResolverService()
+        {
+        }
+
+        /// <summary>
+        /// Gets the current instance of <see cref="CachingSdkResolverService"/> for this process.
+        /// </summary>
+        public static new CachingSdkResolverService Instance => InstanceLazy.Value;
+
         public override void ClearCache(int submissionId)
         {
             base.ClearCache(submissionId);
diff --git a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
index b4ddbd55220..90c0d65dc34 100644
--- a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
@@ -26,7 +26,7 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// </summary>
     internal sealed class MainNodeSdkResolverService : HostedSdkResolverServiceBase
     {
-        private readonly ISdkResolverService _cachedSdkResolver = new CachingSdkResolverService();
+        private readonly ISdkResolverService _cachedSdkResolver = CachingSdkResolverService.Instance;
 
         /// <summary>
         /// A factory which is registered to create an instance of this class.
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 79c899b4dc2..e87ff4eff86 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.IO;
 using System.Linq;
 using System.Reflection;
@@ -74,7 +75,7 @@ internal class SdkResolverService : ISdkResolverService
             ? CachingSdkResolverLoader.Instance
             : new SdkResolverLoader();
 
-        public SdkResolverService()
+        protected SdkResolverService()
         {
         }
 
diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 649ae9ac856..864de044120 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -56,7 +56,7 @@ private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ISdkReso
         {
             Policy = policy;
 
-            SdkResolverService = sdkResolverService ?? new CachingSdkResolverService();
+            SdkResolverService = sdkResolverService ?? CachingSdkResolverService.Instance;
             FileEntryExpansionCache = fileEntryExpansionCache ?? new ConcurrentDictionary<string, IReadOnlyList<string>>();
             FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default);
             FileMatcher = new FileMatcher(FileSystem, FileEntryExpansionCache);
