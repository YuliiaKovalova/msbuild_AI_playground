diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 59273724f1d..4d8c466886a 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1888,10 +1888,15 @@ internal void ReadStateFile(FileExists fileExists)
         {
             _cache = SystemState.DeserializeCacheByTranslator(_stateFile, Log);
 
-            // Construct the cache if necessary.
+            // Construct the cache only if we can't find any caches.
+            if (_cache == null && !String.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
+            {
+                _cache = SystemState.DeserializePrecomputedCachesByTranslator(AssemblyInformationCachePaths, Log, fileExists);
+            }
+
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCachesByTranslator(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, fileExists);
+                _cache = new SystemState();
             }
         }
 
@@ -1904,7 +1909,7 @@ internal void WriteStateFile()
             {
                 _cache.SerializePrecomputedCacheByTranslator(AssemblyInformationCacheOutputPath, Log);
             }
-            else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
+            else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
                 _cache.SerializeCacheByTranslator(_stateFile, Log);
             }
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index fa5e8de3517..ede19816c83 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -654,6 +654,9 @@ internal static SystemState DeserializePrecomputedCachesByTranslator(ITaskItem[]
         /// <param name="log">How to log</param>
         internal void SerializePrecomputedCacheByTranslator(string stateFile, TaskLoggingHelper log)
         {
+            // Save a copy of instanceLocalFileStateCache so we can restore it later. SerializeCacheByTranslator serializes
+            // instanceLocalFileStateCache by default, so change that to the relativized form, then change it back.
+            Dictionary<string, FileState> oldFileStateCache = instanceLocalFileStateCache;
             Dictionary<string, FileState> newInstanceLocalFileStateCache = new Dictionary<string, FileState>(instanceLocalFileStateCache.Count);
             foreach (KeyValuePair<string, FileState> kvp in instanceLocalFileStateCache)
             {
@@ -667,6 +670,8 @@ internal void SerializePrecomputedCacheByTranslator(string stateFile, TaskLoggin
                 log.LogWarningWithCodeFromResources("General.StateFileAlreadyPresent", stateFile);
             }
             SerializeCacheByTranslator(stateFile, log);
+
+            instanceLocalFileStateCache = oldFileStateCache;
         }
 
         /// <summary>
