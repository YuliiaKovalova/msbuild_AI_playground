diff --git a/src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs b/src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs
deleted file mode 100644
index 4951fd7e3c6..00000000000
--- a/src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Experimental.BuildCheck;
-
-namespace Microsoft.Build.BuildCheck.Logging;
-
-internal static class BuildAnalysisLoggingContextExtensions
-{
-    public static LoggingContext ToLoggingContext(this IBuildAnalysisLoggingContext loggingContext) =>
-        loggingContext as AnalyzerLoggingContext ??
-        throw new InvalidOperationException("The logging context is not an AnalyzerLoggingContext");
-}
diff --git a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs b/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs
deleted file mode 100644
index c7433a14eb9..00000000000
--- a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs
+++ /dev/null
@@ -1,7 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-namespace Microsoft.Build.Experimental.BuildCheck;
-
-public interface IBuildAnalysisLoggingContext
-{ }
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 4983bc52677..561a10edca0 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -5497,6 +5497,9 @@ internal void TrackRead(string propertyName, int startIndex, int endIndex, IElem
 
             // TODO: This might get executed even before the logging service and BuildComponentCollections
             //  are initialized (for the toolset initialization)
+
+            // We are collecting the read data here - instead of in the PropertyTrackingEvaluatorDataWrapper
+            //  because that one is used only during evaluation, however already not from within Targets
             BuildCheckManagerProvider.GlobalBuildEngineDataConsumer?.ProcessPropertyRead(
                 propertyName, startIndex, endIndex,
                 elementLocation, isUninitialized, GetPropertyReadContext(propertyName, startIndex, endIndex),
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 869d117f1c0..08875c0727a 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -192,7 +192,6 @@
     <Compile Include="BuildCheck\Infrastructure\CustomConfigurationData.cs" />
     <Compile Include="BuildCheck\API\IBuildCheckRegistrationContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManager.cs" />
-    <Compile Include="BuildCheck\Logging\IBuildAnalysisLoggingContext.cs" />
     <Compile Include="BuildCheck\Logging\IBuildAnalysisLoggingContextFactory.cs" />
     <Compile Include="BuildCheck\OM\EvaluatedPropertiesAnalysisData.cs" />
     <Compile Include="BuildCheck\OM\ParsedItemsAnalysisData.cs" />
@@ -207,7 +206,6 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="BuildCheck\Logging\AnalyzerLoggingContext.cs" />
     <Compile Include="BuildCheck\Logging\AnalyzerLoggingContextFactory.cs" />
-    <Compile Include="BuildCheck\Logging\BuildAnalysisLoggingContextExtensions.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
