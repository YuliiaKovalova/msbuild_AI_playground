diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 0ad1c86ea1f..52d8563a655 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -111,12 +111,13 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
             if (node == null) return;
             int lineId = node.Line?.Id ?? -1;
             if(lineId == -1) return;
-            FancyLoggerBuffer.UpdateLine(lineId, ""
+            /*FancyLoggerBuffer.UpdateLine(lineId, ""
                 + ANSIBuilder.Formatting.Color("âœ“ ", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + ANSIBuilder.Formatting.Color(e.TargetName, ANSIBuilder.Formatting.ForegroundColor.Green)
             );
-            node.Collapse();
+            node.Collapse();*/
+            FancyLoggerBuffer.DeleteLine(lineId);
         }
 
         // Task
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index d22c6366740..44686ee05aa 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -57,7 +57,7 @@ internal static class FancyLoggerBuffer
         public static bool AutoScrollEnabled { get; private set; }
         public static bool IsTerminated { get; private set; }
         public static int CurrentTopLineIndex { get; private set; }
-        public static int Height { get { return Console.BufferHeight; } }
+        public static int Height { get { return Console.WindowHeight; } }
         // Lines to be presented by the buffer
         private static List<FancyLoggerBufferLine> lines = new();
         public static void Initialize()
@@ -111,42 +111,8 @@ public static void Terminate()
         #region Scrolling
         private static void ScrollToLine(int firstLineIndex)
         {
-            /* if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
+            if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
             CurrentTopLineIndex = firstLineIndex;
-            int i = 0;
-            while (i < Height - 4)
-            {
-                int lineIndex = i + firstLineIndex;
-
-                if (lineIndex < lines.Count && lines[lineIndex].IsHidden)
-                {
-                    // Go to next line
-                    lineIndex++;
-                } else
-                {
-                    Console.Write(""
-                        + ANSIBuilder.Cursor.Position(i + 2, 0)
-                        + ANSIBuilder.Eraser.LineCursorToEnd()
-                        // + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
-                        + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : "")
-                    );
-                }
-                
-                i++;
-            }
-            */
-            if (firstLineIndex < 0)
-            {
-                ScrollToLine(0);
-                return;
-            }
-            if (firstLineIndex >= lines.Count)
-            {
-                ScrollToLine(lines.Count - 1);
-                return;
-            }
-            CurrentTopLineIndex = firstLineIndex;
-
             int i = 0;
             while (i < Height - 4)
             {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index c29a1b81576..753a201248a 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -81,6 +81,7 @@ public FancyLoggerNode(int id, FancyLoggerNodeType type)
 
         public void Add(FancyLoggerNode node)
         {
+            if (Children.ContainsKey(node.Id)) return;
             Children.Add(node.Id, node);
             node.Depth = Depth + 1;
             node.Parent = this;
