diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 99acd7b5ac8..54d7a8a347d 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2999,7 +2999,7 @@ private ILoggingService CreateLoggingService(
                     verbosity: LoggerVerbosity.Quiet);
 
                 ILogger buildCheckLogger =
-                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService),
+                    new BuildCheckConnectorLogger(new AnalysisLoggingContextFactory(loggingService),
                         buildCheckManagerProvider.Instance);
 
                 ForwardingLoggerRecord[] forwardingLogger = { new ForwardingLoggerRecord(buildCheckLogger, forwardingLoggerDescription) };
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index ebc47bb26db..eb33f28d019 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1124,7 +1124,7 @@ private async Task<BuildResult> BuildProject()
                 {
                     buildCheckManager.StartProjectEvaluation(
                         BuildCheckDataSource.BuildExecution,
-                        new AnalyzerLoggingContext(_nodeLoggingContext.LoggingService, _requestEntry.Request.ParentBuildEventContext),
+                        new AnalysisLoggingContext(_nodeLoggingContext.LoggingService, _requestEntry.Request.ParentBuildEventContext),
                         _requestEntry.RequestConfiguration.ProjectFullPath);
 
                     _requestEntry.RequestConfiguration.LoadProjectIntoConfiguration(
diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index cf5dee4cb6d..973b3f6025e 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -26,7 +26,9 @@ internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule
     /// <summary>
     /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.
     /// </summary>
-    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, AnalyzerLoggingContext loggingContext)
+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(
+        AnalyzerAcquisitionData analyzerAcquisitionData,
+        IAnalysisContext analysisContext)
     {
         var analyzersFactories = new List<BuildAnalyzerFactory>();
 
@@ -49,7 +51,7 @@ public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisiti
 
             if (availableTypes.Count != analyzerTypes.Count)
             {
-                availableTypes.Except(analyzerTypes).ToList().ForEach(t => loggingContext.LogComment(MessageImportance.Normal, "CustomAnalyzerBaseTypeNotAssignable", t.Name, t.Assembly));
+                availableTypes.Except(analyzerTypes).ToList().ForEach(t => analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerBaseTypeNotAssignable", t.Name, t.Assembly));
             }
         }
         catch (ReflectionTypeLoadException ex)
@@ -58,13 +60,13 @@ public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisiti
             {
                 foreach (Exception? loaderException in ex.LoaderExceptions)
                 {
-                    loggingContext.LogComment(MessageImportance.Normal, "CustomAnalyzerFailedRuleLoading", loaderException?.Message);
+                    analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerFailedRuleLoading", loaderException?.Message);
                 }
             }
         }
         catch (Exception ex)
         {
-            loggingContext.LogComment(MessageImportance.Normal, "CustomAnalyzerFailedRuleLoading", ex?.Message);
+            analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerFailedRuleLoading", ex?.Message);
         }
 
         return analyzersFactories;
diff --git a/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
index 6b36835fa6f..99a41e269c8 100644
--- a/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
@@ -13,5 +13,5 @@ internal interface IBuildCheckAcquisitionModule
     /// <summary>
     /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.
     /// </summary>
-    List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, AnalyzerLoggingContext loggingContext);
+    List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, IAnalysisContext analysisContext);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContext.cs
new file mode 100644
index 00000000000..38337ae18a9
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContext.cs
@@ -0,0 +1,43 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal class AnalysisLoggingContext : IAnalysisContext
+{
+    private readonly ILoggingService _loggingService;
+    private readonly BuildEventContext _eventContext;
+
+    public AnalysisLoggingContext(ILoggingService loggingService, BuildEventContext eventContext)
+    {
+        _loggingService = loggingService;
+        _eventContext = eventContext;
+    }
+
+    public BuildEventContext BuildEventContext => _eventContext;
+
+    public void DispatchBuildEvent(BuildEventArgs buildEvent)
+        => _loggingService
+            .LogBuildEvent(buildEvent);
+
+    public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)
+        => _loggingService
+            .LogComment(_eventContext, importance, messageResourceName, messageArgs);
+
+    public void DispatchAsCommentFromText(MessageImportance importance, string message)
+        => _loggingService
+            .LogCommentFromText(_eventContext, importance, message);
+
+    public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)
+        => _loggingService
+            .LogErrorFromText(_eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContextFactory.cs b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContextFactory.cs
new file mode 100644
index 00000000000..b1a716d7b7f
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/AnalysisLoggingContextFactory.cs
@@ -0,0 +1,22 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal class AnalysisLoggingContextFactory : IAnalysisContextFactory
+{
+    private readonly ILoggingService _loggingService;
+
+    public AnalysisLoggingContextFactory(ILoggingService loggingService) => _loggingService = loggingService;
+
+    public IAnalysisContext CreateAnalysisContext(BuildEventContext eventContext)
+        => new AnalysisLoggingContext(_loggingService, eventContext);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContext.cs b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContext.cs
new file mode 100644
index 00000000000..be4cb8c6049
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContext.cs
@@ -0,0 +1,25 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal interface IAnalysisContext
+{
+    BuildEventContext BuildEventContext { get; }
+
+    void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs);
+
+    void DispatchBuildEvent(BuildEventArgs buildEvent);
+
+    void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message);
+
+    void DispatchAsCommentFromText(MessageImportance importance, string message);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContextFactory.cs b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContextFactory.cs
new file mode 100644
index 00000000000..66cc71f507c
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/AnalyzerContext/IAnalysisContextFactory.cs
@@ -0,0 +1,11 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal interface IAnalysisContextFactory
+{
+    IAnalysisContext CreateAnalysisContext(BuildEventContext eventContext);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index 32078038875..c798f0c6152 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -18,9 +18,7 @@ internal sealed class BuildCheckCentralContext
     private readonly ConfigurationProvider _configurationProvider;
 
     internal BuildCheckCentralContext(ConfigurationProvider configurationProvider)
-    {
-        _configurationProvider = configurationProvider;
-    }
+        => _configurationProvider = configurationProvider;
 
     private record CallbackRegistry(
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>>)> EvaluatedPropertiesActions,
@@ -77,33 +75,33 @@ internal void DeregisterAnalyzer(BuildAnalyzerWrapper analyzer)
 
     internal void RunEvaluatedPropertiesActions(
         EvaluatedPropertiesAnalysisData evaluatedPropertiesAnalysisData,
-        LoggingContext loggingContext,
-        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
+        IAnalysisContext analysisContext,
+        Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
             resultHandler)
         => RunRegisteredActions(_globalCallbacks.EvaluatedPropertiesActions, evaluatedPropertiesAnalysisData,
-            loggingContext, resultHandler);
+            analysisContext, resultHandler);
 
     internal void RunParsedItemsActions(
         ParsedItemsAnalysisData parsedItemsAnalysisData,
-        LoggingContext loggingContext,
-        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
+        IAnalysisContext analysisContext,
+        Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
             resultHandler)
         => RunRegisteredActions(_globalCallbacks.ParsedItemsActions, parsedItemsAnalysisData,
-            loggingContext, resultHandler);
+            analysisContext, resultHandler);
 
     internal void RunTaskInvocationActions(
         TaskInvocationAnalysisData taskInvocationAnalysisData,
-        LoggingContext loggingContext,
-        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
+        IAnalysisContext analysisContext,
+        Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
             resultHandler)
         => RunRegisteredActions(_globalCallbacks.TaskInvocationActions, taskInvocationAnalysisData,
-            loggingContext, resultHandler);
+            analysisContext, resultHandler);
 
     private void RunRegisteredActions<T>(
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<T>>)> registeredCallbacks,
         T analysisData,
-        LoggingContext loggingContext,
-        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult> resultHandler)
+        IAnalysisContext analysisContext,
+        Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult> resultHandler)
     where T : AnalysisData
     {
         string projectFullPath = analysisData.ProjectFilePath;
@@ -147,7 +145,7 @@ private void RunRegisteredActions<T>(
 
                 BuildCheckDataContext<T> context = new BuildCheckDataContext<T>(
                     analyzerCallback.Item1,
-                    loggingContext,
+                    analysisContext,
                     configPerRule,
                     resultHandler,
                     analysisData);
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 3563c072073..22f841bab27 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -5,9 +5,9 @@
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.BuildCheck.Acquisition;
 using Microsoft.Build.Experimental.BuildCheck.Utilities;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
@@ -16,14 +16,14 @@ internal sealed class BuildCheckConnectorLogger : ILogger
 {
     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
     private readonly IBuildCheckManager _buildCheckManager;
-    private readonly IBuildAnalysisLoggingContextFactory _loggingContextFactory;
+    private readonly IAnalysisContextFactory _analyzerContextFactory;
 
     internal BuildCheckConnectorLogger(
-        IBuildAnalysisLoggingContextFactory loggingContextFactory,
+        IAnalysisContextFactory analyzerContextFactory,
         IBuildCheckManager buildCheckManager)
     {
         _buildCheckManager = buildCheckManager;
-        _loggingContextFactory = loggingContextFactory;
+        _analyzerContextFactory = analyzerContextFactory;
         _eventHandlers = GetBuildEventHandlers();
     }
 
@@ -40,6 +40,7 @@ public void Initialize(IEventSource eventSource)
         {
             eventSource3.IncludeTaskInputs();
         }
+
         if (eventSource is IEventSource4 eventSource4)
         {
             eventSource4.IncludeEvaluationPropertiesAndItems();
@@ -55,7 +56,7 @@ private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEvent
         if (!IsMetaProjFile(eventArgs.ProjectFile))
         {
             _buildCheckManager.ProcessEvaluationFinishedEventArgs(
-                _loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!),
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
                 eventArgs);
 
             _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);
@@ -68,7 +69,7 @@ private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventAr
         {
             _buildCheckManager.StartProjectEvaluation(
                 BuildCheckDataSource.EventArgs,
-                _loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!),
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
                 eventArgs.ProjectFile!);
         }
     }
@@ -82,31 +83,24 @@ private void HandleBuildCheckTracingEvent(BuildCheckTracingEventArgs eventArgs)
     }
 
     private void HandleTaskStartedEvent(TaskStartedEventArgs eventArgs)
-    {
-        _buildCheckManager.ProcessTaskStartedEventArgs(
-            _loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!),
-            eventArgs);
-    }
+        => _buildCheckManager.ProcessTaskStartedEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
 
     private void HandleTaskFinishedEvent(TaskFinishedEventArgs eventArgs)
-    {
-        _buildCheckManager.ProcessTaskFinishedEventArgs(
-            _loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!),
-            eventArgs);
-    }
+        => _buildCheckManager.ProcessTaskFinishedEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
 
     private void HandleTaskParameterEvent(TaskParameterEventArgs eventArgs)
-    {
-        _buildCheckManager.ProcessTaskParameterEventArgs(
-            _loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!),
-            eventArgs);
-    }
+        => _buildCheckManager.ProcessTaskParameterEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
 
     private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eventArgs)
-        => _buildCheckManager
-            .ProcessAnalyzerAcquisition(
+        => _buildCheckManager.ProcessAnalyzerAcquisition(
                 eventArgs.ToAnalyzerAcquisitionData(),
-                _loggingContextFactory.CreateLoggingContext(GetBuildEventContext(eventArgs)));
+                _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));
 
     private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase);
 
@@ -122,13 +116,12 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
 
     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
     {
-        LoggingContext loggingContext = _loggingContextFactory.CreateLoggingContext(GetBuildEventContext(e));
-
         _stats.Merge(_buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
-        LogAnalyzerStats(loggingContext);
+
+        LogAnalyzerStats(_analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(e)));
     }
 
-    private void LogAnalyzerStats(LoggingContext loggingContext)
+    private void LogAnalyzerStats(IAnalysisContext analysisContext)
     {
         Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();
         Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();
@@ -147,15 +140,15 @@ private void LogAnalyzerStats(LoggingContext loggingContext)
         }
 
         BuildCheckTracingEventArgs statEvent = new BuildCheckTracingEventArgs(_stats, true)
-        { BuildEventContext = loggingContext.BuildEventContext };
+        { BuildEventContext = analysisContext.BuildEventContext };
 
-        loggingContext.LogBuildEvent(statEvent);
+        analysisContext.DispatchBuildEvent(statEvent);
 
-        loggingContext.LogCommentFromText(MessageImportance.Low, $"BuildCheck run times{Environment.NewLine}");
+        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, $"BuildCheck run times{Environment.NewLine}");
         string infraData = BuildCsvString("Infrastructure run times", infraStats);
-        loggingContext.LogCommentFromText(MessageImportance.Low, infraData);
+        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, infraData);
         string analyzerData = BuildCsvString("Analyzer run times", analyzerStats);
-        loggingContext.LogCommentFromText(MessageImportance.Low, analyzerData);
+        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, analyzerData);
     }
 
     private string BuildCsvString(string title, Dictionary<string, TimeSpan> rowData)
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 718ea78d99c..e0afec2b677 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -99,27 +99,29 @@ public void SetDataSource(BuildCheckDataSource buildCheckDataSource)
             _tracingReporter.AddSetDataSourceStats(stopwatch.Elapsed);
         }
 
-        public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, AnalyzerLoggingContext loggingContext)
+        public void ProcessAnalyzerAcquisition(
+            AnalyzerAcquisitionData acquisitionData,
+            IAnalysisContext analysisContext)
         {
             Stopwatch stopwatch = Stopwatch.StartNew();
             if (IsInProcNode)
             {
-                var analyzersFactories = _acquisitionModule.CreateBuildAnalyzerFactories(acquisitionData, loggingContext);
+                var analyzersFactories = _acquisitionModule.CreateBuildAnalyzerFactories(acquisitionData, analysisContext);
                 if (analyzersFactories.Count != 0)
                 {
-                    RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, analyzersFactories, loggingContext);
+                    RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, analyzersFactories, analysisContext);
                 }
                 else
                 {
-                    loggingContext.LogComment(MessageImportance.Normal, "CustomAnalyzerFailedAcquisition", acquisitionData.AssemblyPath);
+                    analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerFailedAcquisition", acquisitionData.AssemblyPath);
                 }
             }
             else
             {
                 BuildCheckAcquisitionEventArgs eventArgs = acquisitionData.ToBuildEventArgs();
-                eventArgs.BuildEventContext = loggingContext.BuildEventContext!;
+                eventArgs.BuildEventContext = analysisContext.BuildEventContext!;
 
-                loggingContext.LogBuildEvent(eventArgs);
+                analysisContext.DispatchBuildEvent(eventArgs);
             }
 
             stopwatch.Stop();
@@ -183,11 +185,11 @@ internal void RegisterCustomAnalyzers(
         /// </summary>
         /// <param name="buildCheckDataSource">Represents different data sources used in build check operations.</param>
         /// <param name="factories">A collection of build analyzer factories for rules instantiation.</param>
-        /// <param name="loggingContext">The logging context of the build event.</param>
+        /// <param name="analysisContext">The logging context of the build event.</param>
         internal void RegisterCustomAnalyzer(
             BuildCheckDataSource buildCheckDataSource,
             IEnumerable<BuildAnalyzerFactory> factories,
-            AnalyzerLoggingContext loggingContext)
+            IAnalysisContext analysisContext)
         {
             if (_enabledDataSources[(int)buildCheckDataSource])
             {
@@ -198,7 +200,7 @@ internal void RegisterCustomAnalyzer(
                         factory,
                         instance.SupportedRules.Select(r => r.Id).ToArray(),
                         instance.SupportedRules.Any(r => r.DefaultConfiguration.IsEnabled == true)));
-                    loggingContext.LogComment(MessageImportance.Normal, "CustomAnalyzerSuccessfulAcquisition", instance.FriendlyName);
+                    analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerSuccessfulAcquisition", instance.FriendlyName);
                 }
             }
         }
@@ -281,7 +283,7 @@ private void SetupSingleAnalyzer(BuildAnalyzerFactoryContext analyzerFactoryCont
             }
         }
 
-        private void SetupAnalyzersForNewProject(string projectFullPath, AnalyzerLoggingContext loggingContext)
+        private void SetupAnalyzersForNewProject(string projectFullPath, IAnalysisContext analysisContext)
         {
             // Only add analyzers here
             // On an execution node - we might remove and dispose the analyzers once project is done
@@ -297,7 +299,7 @@ private void SetupAnalyzersForNewProject(string projectFullPath, AnalyzerLogging
                 }
                 catch (BuildCheckConfigurationException e)
                 {
-                    loggingContext.LogErrorFromText(null, null, null,
+                    analysisContext.DispatchAsErrorFromText(null, null, null,
                         new BuildEventFileInfo(projectFullPath),
                         e.Message);
                     analyzersToRemove.Add(analyzerFactoryContext);
@@ -307,7 +309,7 @@ private void SetupAnalyzersForNewProject(string projectFullPath, AnalyzerLogging
             analyzersToRemove.ForEach(c =>
             {
                 _analyzersRegistry.Remove(c);
-                loggingContext.LogCommentFromText(MessageImportance.High, $"Dismounting analyzer '{c.FriendlyName}'");
+                analysisContext.DispatchAsCommentFromText(MessageImportance.High, $"Dismounting analyzer '{c.FriendlyName}'");
             });
             foreach (var analyzerToRemove in analyzersToRemove.Select(a => a.MaterializedAnalyzer).Where(a => a != null))
             {
@@ -321,28 +323,28 @@ private void SetupAnalyzersForNewProject(string projectFullPath, AnalyzerLogging
         }
 
         public void ProcessEvaluationFinishedEventArgs(
-            AnalyzerLoggingContext buildAnalysisContext,
+            IAnalysisContext analysisContext,
             ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
             => _buildEventsProcessor
-                .ProcessEvaluationFinishedEventArgs(buildAnalysisContext, evaluationFinishedEventArgs);
+                .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs);
 
         public void ProcessTaskStartedEventArgs(
-            AnalyzerLoggingContext buildAnalysisContext,
+            IAnalysisContext analysisContext,
             TaskStartedEventArgs taskStartedEventArgs)
             => _buildEventsProcessor
-                .ProcessTaskStartedEventArgs(buildAnalysisContext, taskStartedEventArgs);
+                .ProcessTaskStartedEventArgs(analysisContext, taskStartedEventArgs);
 
         public void ProcessTaskFinishedEventArgs(
-            AnalyzerLoggingContext buildAnalysisContext,
+            IAnalysisContext analysisContext,
             TaskFinishedEventArgs taskFinishedEventArgs)
             => _buildEventsProcessor
-                .ProcessTaskFinishedEventArgs(buildAnalysisContext, taskFinishedEventArgs);
+                .ProcessTaskFinishedEventArgs(analysisContext, taskFinishedEventArgs);
 
         public void ProcessTaskParameterEventArgs(
-            AnalyzerLoggingContext buildAnalysisContext,
+            IAnalysisContext analysisContext,
             TaskParameterEventArgs taskParameterEventArgs)
             => _buildEventsProcessor
-                .ProcessTaskParameterEventArgs(buildAnalysisContext, taskParameterEventArgs);
+                .ProcessTaskParameterEventArgs(analysisContext, taskParameterEventArgs);
 
         public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats()
         {
@@ -377,7 +379,7 @@ public void FinalizeProcessing(LoggingContext loggingContext)
 
         public void StartProjectEvaluation(
             BuildCheckDataSource buildCheckDataSource,
-            AnalyzerLoggingContext loggingContext,
+            IAnalysisContext analysisContext,
             string fullPath)
         {
             if (buildCheckDataSource == BuildCheckDataSource.EventArgs && IsInProcNode)
@@ -388,7 +390,7 @@ public void StartProjectEvaluation(
                 return;
             }
 
-            SetupAnalyzersForNewProject(fullPath, loggingContext);
+            SetupAnalyzersForNewProject(fullPath, analysisContext);
         }
 
         /*
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index e9a5f9e8aa2..b38a3bd4ace 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -58,7 +58,7 @@ public TaskKey(BuildEventContext context)
 
     // This requires MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION set to 1
     internal void ProcessEvaluationFinishedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
     {
         Dictionary<string, string> propertiesLookup = new Dictionary<string, string>();
@@ -68,7 +68,7 @@ internal void ProcessEvaluationFinishedEventArgs(
         EvaluatedPropertiesAnalysisData analysisData =
             new(evaluationFinishedEventArgs.ProjectFile!, propertiesLookup);
 
-        _buildCheckCentralContext.RunEvaluatedPropertiesActions(analysisData, buildAnalysisContext, ReportResult);
+        _buildCheckCentralContext.RunEvaluatedPropertiesActions(analysisData, analysisContext, ReportResult);
 
         if (_buildCheckCentralContext.HasParsedItemsActions)
         {
@@ -79,12 +79,12 @@ internal void ProcessEvaluationFinishedEventArgs(
             ParsedItemsAnalysisData itemsAnalysisData = new(evaluationFinishedEventArgs.ProjectFile!,
                 new ItemsHolder(xml.Items, xml.ItemGroups));
 
-            _buildCheckCentralContext.RunParsedItemsActions(itemsAnalysisData, buildAnalysisContext, ReportResult);
+            _buildCheckCentralContext.RunParsedItemsActions(itemsAnalysisData, analysisContext, ReportResult);
         }
     }
 
     internal void ProcessTaskStartedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         TaskStartedEventArgs taskStartedEventArgs)
     {
         if (!_buildCheckCentralContext.HasTaskInvocationActions)
@@ -120,7 +120,7 @@ internal void ProcessTaskStartedEventArgs(
     }
 
     internal void ProcessTaskFinishedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         TaskFinishedEventArgs taskFinishedEventArgs)
     {
         if (!_buildCheckCentralContext.HasTaskInvocationActions)
@@ -136,13 +136,13 @@ internal void ProcessTaskFinishedEventArgs(
             {
                 // All task parameters have been recorded by now so remove the task from the dictionary and fire the registered build check actions.
                 _tasksBeingExecuted.Remove(taskKey);
-                _buildCheckCentralContext.RunTaskInvocationActions(taskData.AnalysisData, buildAnalysisContext, ReportResult);
+                _buildCheckCentralContext.RunTaskInvocationActions(taskData.AnalysisData, analysisContext, ReportResult);
             }
         }
     }
 
     internal void ProcessTaskParameterEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         TaskParameterEventArgs taskParameterEventArgs)
     {
         if (!_buildCheckCentralContext.HasTaskInvocationActions)
@@ -177,13 +177,13 @@ internal void ProcessTaskParameterEventArgs(
 
     private static void ReportResult(
         BuildAnalyzerWrapper analyzerWrapper,
-        LoggingContext loggingContext,
+        IAnalysisContext analysisContext,
         BuildAnalyzerConfigurationInternal[] configPerRule,
         BuildCheckResult result)
     {
         if (!analyzerWrapper.BuildAnalyzer.SupportedRules.Contains(result.BuildAnalyzerRule))
         {
-            loggingContext.LogErrorFromText(null, null, null,
+            analysisContext.DispatchAsErrorFromText(null, null, null,
                 BuildEventFileInfo.Empty,
                 $"The analyzer '{analyzerWrapper.BuildAnalyzer.FriendlyName}' reported a result for a rule '{result.BuildAnalyzerRule.Id}' that it does not support.");
             return;
@@ -205,6 +205,6 @@ private static void ReportResult(
         // eventArgs.BuildEventContext = loggingContext.BuildEventContext;
         eventArgs.BuildEventContext = BuildEventContext.Invalid;
 
-        loggingContext.LogBuildEvent(eventArgs);
+        analysisContext.DispatchBuildEvent(eventArgs);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 01864c7f66a..7a4e06c8ef8 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -37,24 +37,24 @@ internal enum BuildCheckDataSource
 internal interface IBuildCheckManager
 {
     void ProcessEvaluationFinishedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
 
     void ProcessTaskStartedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         TaskStartedEventArgs taskStartedEventArgs);
 
     void ProcessTaskFinishedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         TaskFinishedEventArgs taskFinishedEventArgs);
 
     void ProcessTaskParameterEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         TaskParameterEventArgs taskParameterEventArgs);
 
     void SetDataSource(BuildCheckDataSource buildCheckDataSource);
 
-    void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, AnalyzerLoggingContext loggingContext);
+    void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, IAnalysisContext analysisContext);
 
     Dictionary<string, TimeSpan> CreateAnalyzerTracingStats();
 
@@ -64,7 +64,7 @@ void ProcessTaskParameterEventArgs(
     //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
     //  to manager about what analyzers need to be materialized and configuration fetched.
     // No unloading of analyzers is yet considered - once loaded it stays for whole build.
-    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, AnalyzerLoggingContext loggingContext, string fullPath);
+    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string fullPath);
 
     void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index c741591cc9a..b7aee30814e 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -18,7 +18,7 @@ public void Shutdown()
     }
 
     public void ProcessEvaluationFinishedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
+        IAnalysisContext analysisContext,
         ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
     {
     }
@@ -27,22 +27,27 @@ public void SetDataSource(BuildCheckDataSource buildCheckDataSource)
     {
     }
 
-    public void ProcessTaskStartedEventArgs(AnalyzerLoggingContext buildAnalysisContext,
+    public void ProcessTaskStartedEventArgs(
+        IAnalysisContext analysisContext,
         TaskStartedEventArgs taskStartedEventArgs)
     {
     }
 
-    public void ProcessTaskFinishedEventArgs(AnalyzerLoggingContext buildAnalysisContext,
+    public void ProcessTaskFinishedEventArgs(
+        IAnalysisContext analysisContext,
         TaskFinishedEventArgs taskFinishedEventArgs)
     {
     }
 
-    public void ProcessTaskParameterEventArgs(AnalyzerLoggingContext buildAnalysisContext,
+    public void ProcessTaskParameterEventArgs(
+        IAnalysisContext analysisContext,
         TaskParameterEventArgs taskParameterEventArgs)
     {
     }
 
-    public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, AnalyzerLoggingContext loggingContext)
+    public void ProcessAnalyzerAcquisition(
+        AnalyzerAcquisitionData acquisitionData,
+        IAnalysisContext analysisContext)
     {
     }
 
@@ -50,7 +55,7 @@ public void FinalizeProcessing(LoggingContext loggingContext)
     {
     }
 
-    public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, AnalyzerLoggingContext loggingContext, string fullPath)
+    public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string fullPath)
     {
     }
 
diff --git a/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs b/src/Build/BuildCheck/Logging/AnalyzerLoggingContext22.cs
similarity index 64%
rename from src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
rename to src/Build/BuildCheck/Logging/AnalyzerLoggingContext22.cs
index b7e39eaa8b0..c94fb9d8d52 100644
--- a/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
+++ b/src/Build/BuildCheck/Logging/AnalyzerLoggingContext22.cs
@@ -7,15 +7,15 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Logging;
 
-internal class AnalyzerLoggingContext : LoggingContext
+internal class AnalyzerLoggingContext22 : LoggingContext
 {
-    public AnalyzerLoggingContext(ILoggingService loggingService, BuildEventContext eventContext)
+    public AnalyzerLoggingContext22(ILoggingService loggingService, BuildEventContext eventContext)
         : base(loggingService, eventContext)
     {
         IsValid = true;
     }
 
-    public AnalyzerLoggingContext(LoggingContext baseContext) : base(baseContext)
+    public AnalyzerLoggingContext22(LoggingContext baseContext) : base(baseContext)
     {
         IsValid = true;
     }
diff --git a/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs b/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory22.cs
similarity index 53%
rename from src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
rename to src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory22.cs
index 06b7dd6e033..e4e462bbcec 100644
--- a/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
+++ b/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory22.cs
@@ -7,8 +7,8 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Logging;
 
-internal class AnalyzerLoggingContextFactory(ILoggingService loggingService) : IBuildAnalysisLoggingContextFactory
+internal class AnalyzerLoggingContextFactory22(ILoggingService loggingService) : IBuildAnalysisLoggingContextFactory
 {
-    public AnalyzerLoggingContext CreateLoggingContext(BuildEventContext eventContext) =>
-        new AnalyzerLoggingContext(loggingService, eventContext);
+    public AnalyzerLoggingContext22 CreateLoggingContext(BuildEventContext eventContext) =>
+        new AnalyzerLoggingContext22(loggingService, eventContext);
 }
diff --git a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs b/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs
index bbb562c5ec9..3cfac700dc9 100644
--- a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs
+++ b/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs
@@ -8,5 +8,5 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 
 internal interface IBuildAnalysisLoggingContextFactory
 {
-    AnalyzerLoggingContext CreateLoggingContext(BuildEventContext eventContext);
+    AnalyzerLoggingContext22 CreateLoggingContext(BuildEventContext eventContext);
 }
diff --git a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
index b47f510e165..01db72e1db3 100644
--- a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
+++ b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
@@ -41,19 +41,19 @@ public abstract class AnalysisData(string projectFilePath)
 public class BuildCheckDataContext<T> where T : AnalysisData
 {
     private readonly BuildAnalyzerWrapper _analyzerWrapper;
-    private readonly LoggingContext _loggingContext;
+    private readonly IAnalysisContext _analysisContext;
     private readonly BuildAnalyzerConfigurationInternal[] _configPerRule;
-    private readonly Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult> _resultHandler;
+    private readonly Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult> _resultHandler;
 
     internal BuildCheckDataContext(
         BuildAnalyzerWrapper analyzerWrapper,
-        LoggingContext loggingContext,
+        IAnalysisContext loggingContext,
         BuildAnalyzerConfigurationInternal[] configPerRule,
-        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult> resultHandler,
+        Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult> resultHandler,
         T data)
     {
         _analyzerWrapper = analyzerWrapper;
-        _loggingContext = loggingContext;
+        _analysisContext = loggingContext;
         _configPerRule = configPerRule;
         _resultHandler = resultHandler;
         Data = data;
@@ -64,7 +64,7 @@ internal BuildCheckDataContext(
     /// </summary>
     /// <param name="result"></param>
     public void ReportResult(BuildCheckResult result)
-        => _resultHandler(_analyzerWrapper, _loggingContext, _configPerRule, result);
+        => _resultHandler(_analyzerWrapper, _analysisContext, _configPerRule, result);
 
     /// <summary>
     /// Data to be analyzed.
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index c8bdd009a8f..b6e6674cdf1 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -2940,7 +2940,7 @@ private void Initialize(
             _itemDefinitions = new RetrievableEntryHashSet<ProjectItemDefinitionInstance>(MSBuildNameIgnoreCaseComparer.Default);
             _hostServices = buildParameters.HostServices;
             this.ProjectRootElementCache = buildParameters.ProjectRootElementCache;
-            _loggingContext = new AnalyzerLoggingContext(loggingService, buildEventContext);
+            _loggingContext = new AnalyzerLoggingContext22(loggingService, buildEventContext);
             this.EvaluatedItemElements = new List<ProjectItemElement>();
 
             _explicitToolsVersionSpecified = (explicitToolsVersion != null);
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index aeedba3e4c2..e74fdde5080 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,9 +160,13 @@
     <Compile Include="BuildCheck\Acquisition\IBuildCheckAcquisitionModule.cs" />
     <Compile Include="BuildCheck\Analyzers\SharedOutputPathAnalyzer.cs" />
     <Compile Include="BuildCheck\Analyzers\DoubleWritesAnalyzer.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\AnalysisLoggingContextFactory.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\IAnalysisContext.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\AnalysisLoggingContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationException.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
+    <Compile Include="BuildCheck\Infrastructure\AnalyzerContext\IAnalysisContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManagerProvider.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManager.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManagerProvider.cs" />
@@ -202,8 +206,8 @@
     <Compile Include="FileAccess\ProcessData.cs" />
     <Compile Include="FileAccess\ReportedFileOperation.cs" />
     <Compile Include="FileAccess\RequestedAccess.cs" />
-    <Compile Include="BuildCheck\Logging\AnalyzerLoggingContext.cs" />
-    <Compile Include="BuildCheck\Logging\AnalyzerLoggingContextFactory.cs" />
+    <Compile Include="BuildCheck\Logging\AnalyzerLoggingContext22.cs" />
+    <Compile Include="BuildCheck\Logging\AnalyzerLoggingContextFactory22.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index c9eeabed22a..7f8a16b91ca 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -41,7 +41,7 @@ public void ProcessAnalyzerAcquisitionTest(bool isAnalyzerRuleExist, string[] ex
         MockBuildCheckAcquisition(isAnalyzerRuleExist);
         MockEnabledDataSourcesDefinition();
 
-        _testedInstance.ProcessAnalyzerAcquisition(new AnalyzerAcquisitionData("DummyPath"), new AnalyzerLoggingContext(_loggingService, new BuildEventContext(1, 2, 3, 4, 5, 6, 7)));
+        _testedInstance.ProcessAnalyzerAcquisition(new AnalyzerAcquisitionData("DummyPath"), new AnalysisLoggingContext(_loggingService, new BuildEventContext(1, 2, 3, 4, 5, 6, 7)));
 
         _logger.AllBuildEvents.Where(be => be.GetType() == typeof(BuildMessageEventArgs)).Select(be => be.Message).ToArray()
             .ShouldBeEquivalentTo(expectedMessages);
@@ -67,7 +67,7 @@ internal sealed class BuildCheckAcquisitionModuleMock : IBuildCheckAcquisitionMo
 
     internal BuildCheckAcquisitionModuleMock(bool isAnalyzerRuleExistForTest) => _isAnalyzerRuleExistForTest = isAnalyzerRuleExistForTest;
 
-    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, AnalyzerLoggingContext loggingContext)
+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, IAnalysisContext analysisContext)
         => _isAnalyzerRuleExistForTest
         ? new List<BuildAnalyzerFactory>() { () => new BuildAnalyzerRuleMock("Rule1"), () => new BuildAnalyzerRuleMock("Rule2") }
         : new List<BuildAnalyzerFactory>();
diff --git a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
index fd1b601af06..b2d3b7bc543 100644
--- a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
+++ b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
@@ -41,7 +41,7 @@ public void TriggerTaskInvocationAction(TaskInvocationAnalysisData data)
                 }
             }
 
-            private void ResultHandler(BuildAnalyzerWrapper wrapper, LoggingContext context, BuildAnalyzerConfigurationInternal[] configs, BuildCheckResult result)
+            private void ResultHandler(BuildAnalyzerWrapper wrapper, IAnalysisContext context, BuildAnalyzerConfigurationInternal[] configs, BuildCheckResult result)
                 => Results.Add(result);
         }
 
