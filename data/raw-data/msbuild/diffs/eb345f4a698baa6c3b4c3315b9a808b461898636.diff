diff --git a/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs b/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
new file mode 100644
index 00000000000..b0699e3ab43
--- /dev/null
+++ b/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
@@ -0,0 +1,122 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using Microsoft.Build.Evaluation;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests.OM.Definition
+{
+    /// <summary>
+    /// Tests the <see cref="ItemDataCollectionValue{I}"/> data type.
+    /// </summary>
+    public class ItemDataCollectionValue_Tests
+    {
+        private int[] MakeArray(ItemDataCollectionValue<int> value)
+        {
+            List<int> result = new List<int>();
+            foreach (int i in value)
+            {
+                result.Add(i);
+            }
+            return result.ToArray();
+        }
+
+        [Fact]
+        public void RepresentsSingleItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1 });
+        }
+
+        [Fact]
+        public void AddsSecondItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 2 });
+        }
+
+        [Fact]
+        public void DeletesSingleItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Delete(1);
+            value.IsEmpty.ShouldBeTrue();
+            MakeArray(value).ShouldBe(Array.Empty<int>());
+        }
+
+        [Fact]
+        public void DeletesFirstItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Delete(1);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 2 });
+        }
+
+        [Fact]
+        public void DeletesSecondItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Delete(2);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1 });
+        }
+
+        [Fact]
+        public void DeletesNonExistentItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Delete(3);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 2 });
+        }
+
+        [Fact]
+        public void ReplacesSingleItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Replace(1, 11);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 11 });
+        }
+
+        [Fact]
+        public void ReplacesFirstItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Replace(1, 11);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 11, 2 });
+        }
+
+        [Fact]
+        public void ReplacesSecondItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Replace(2, 22);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 22 });
+        }
+
+        [Fact]
+        public void ReplacesNonExistentItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Replace(3, 33);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 2 });
+        }
+    }
+}
diff --git a/src/Build/Evaluation/ItemDataCollectionValue.cs b/src/Build/Evaluation/ItemDataCollectionValue.cs
index 70c1e7f9370..15807cc996d 100644
--- a/src/Build/Evaluation/ItemDataCollectionValue.cs
+++ b/src/Build/Evaluation/ItemDataCollectionValue.cs
@@ -32,8 +32,8 @@ public void Dispose()
 
             public bool MoveNext()
             {
-                // If value is not a list, it is a single item.
-                int count = (_value is IList<I> list) ? list.Count : 1;
+                // If value is not a list, it is either null or a single item.
+                int count = (_value is IList<I> list) ? list.Count : (_value is null ? 0 : 1);
                 if (_index + 1 < count)
                 {
                     _index++;
@@ -62,40 +62,50 @@ public ItemDataCollectionValue(I item)
 
         public void Add(I item)
         {
-            if (_value is not List<I> list)
+            if (_value is null)
             {
-                list = new List<I>();
-                _value = list;
+                _value = item;
+            }
+            else
+            {
+                if (_value is not List<I> list)
+                {
+                    list = new List<I>()
+                    {
+                        (I)_value
+                    };
+                    _value = list;
+                }
+                list.Add(item);
             }
-            list.Add(item);
         }
 
         public void Delete(I item)
         {
-            if (object.ReferenceEquals(_value, item))
+            if (_value is List<I> list)
             {
-                _value = null;
+                list.Remove(item);
             }
-            else if (_value is List<I> list)
+            else if (object.Equals(_value, item))
             {
-                list.Remove(item);
+                _value = null;
             }
         }
 
         public void Replace(I oldItem, I newItem)
         {
-            if (object.ReferenceEquals(_value, oldItem))
-            {
-                _value = newItem;
-            }
-            else if (_value is List<I> list)
+            if (_value is List<I> list)
             {
-                int index = list.FindIndex(item => object.ReferenceEquals(item, oldItem));
+                int index = list.IndexOf(oldItem);
                 if (index >= 0)
                 {
                     list[index] = newItem;
                 }
             }
+            else if (object.Equals(_value, oldItem))
+            {
+                _value = newItem;
+            }
         }
 
         public Enumerator GetEnumerator()
