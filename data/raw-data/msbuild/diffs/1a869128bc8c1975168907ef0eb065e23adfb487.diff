diff --git a/src/Build/BuildCheck/Infrastructure/IBuildEngineDataConsumer.cs b/src/Build/BuildCheck/Infrastructure/IBuildEngineDataConsumer.cs
deleted file mode 100644
index 50faba677e7..00000000000
--- a/src/Build/BuildCheck/Infrastructure/IBuildEngineDataConsumer.cs
+++ /dev/null
@@ -1,66 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
-
-namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-
-internal readonly record struct PropertyReadInfo(
-    string PropertyName,
-    int StartIndex,
-    int EndIndex,
-    IMsBuildElementLocation ElementLocation,
-    bool IsUninitialized,
-    PropertyReadContext PropertyReadContext);
-
-/// <summary>
-/// 
-/// </summary>
-/// <param name="PropertyName">Name of the property.</param>
-/// <param name="IsEmpty">Was any value written? (E.g. if we set propA with value propB, while propB is undefined - the isEmpty will be true)</param>
-/// <param name="ElementLocation">Location of the property write</param>
-internal readonly record struct PropertyWriteInfo(
-    string PropertyName,
-    bool IsEmpty,
-    IMsBuildElementLocation? ElementLocation);
-
-/// <summary>
-/// Consumer of the data from the build engine.
-/// Currently, this is used to send data for analysis to the BuildCheck.
-/// In the future we can multiplex the data to other consumers (e.g. copilot).
-/// </summary>
-internal interface IBuildEngineDataConsumer
-{
-    void ProcessPropertyRead(PropertyReadInfo propertyReadInfo);
-    
-    /// <summary>
-    /// Signals that a property was written to.
-    /// </summary>
-    /// <param name="propertyWriteInfo">Name of the property.</param>
-    void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo);
-
-    // TODO: We might want to move acquisition data processing into this interface as well
-    // void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData);
-}
-
-/// <summary>
-/// The module that routes the data to the final consumer.
-/// Typically, it is the BuildCheck (in case of in-node analysis) or LoggingService
-///  (in case of centralized analysis, where the data will first be wrapped to BuildEventArgs and sent to central node).
-/// </summary>
-internal interface IBuildEngineDataRouter
-{
-    void ProcessPropertyRead(
-        PropertyReadInfo propertyReadInfo,
-        // This is intentionally AnalysisLoggingContext instead of IAnalysisContext - to avoid boxing allocations
-        //  on a hot path of properties reading (same for writing)
-        AnalysisLoggingContext analysisContext);
-
-    /// <summary>
-    /// Signals that a property was written to.
-    /// </summary>
-    void ProcessPropertyWrite(
-        PropertyWriteInfo propertyWriteInfo,
-        AnalysisLoggingContext analysisContext);
-}
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataConsumer.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataConsumer.cs
new file mode 100644
index 00000000000..9331ad4bc38
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataConsumer.cs
@@ -0,0 +1,23 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+/// <summary>
+/// Consumer of the data from the build engine.
+/// Currently, this is used to send data for analysis to the BuildCheck.
+/// In the future we can multiplex the data to other consumers (e.g. copilot).
+/// </summary>
+internal interface IBuildEngineDataConsumer
+{
+    void ProcessPropertyRead(PropertyReadInfo propertyReadInfo);
+    
+    /// <summary>
+    /// Signals that a property was written to.
+    /// </summary>
+    /// <param name="propertyWriteInfo">Name of the property.</param>
+    void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo);
+
+    // TODO: We might want to move acquisition data processing into this interface as well
+    // void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
new file mode 100644
index 00000000000..4aceff798f6
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
@@ -0,0 +1,25 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+/// <summary>
+/// The module that routes the data to the final consumer.
+/// Typically, it is the BuildCheck (in case of in-node analysis) or LoggingService
+///  (in case of centralized analysis, where the data will first be wrapped to BuildEventArgs and sent to central node).
+/// </summary>
+internal interface IBuildEngineDataRouter
+{
+    void ProcessPropertyRead(
+        PropertyReadInfo propertyReadInfo,
+        // This is intentionally AnalysisLoggingContext instead of IAnalysisContext - to avoid boxing allocations
+        //  on a hot path of properties reading (same for writing)
+        AnalysisLoggingContext analysisContext);
+
+    /// <summary>
+    /// Signals that a property was written to.
+    /// </summary>
+    void ProcessPropertyWrite(
+        PropertyWriteInfo propertyWriteInfo,
+        AnalysisLoggingContext analysisContext);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs
new file mode 100644
index 00000000000..723a899a8d6
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs
@@ -0,0 +1,24 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+/// <summary>
+/// Bag of information for a performed property read.
+/// </summary>
+/// <param name="PropertyName"></param>
+/// <param name="StartIndex"></param>
+/// <param name="EndIndex"></param>
+/// <param name="ElementLocation"></param>
+/// <param name="IsUninitialized"></param>
+/// <param name="PropertyReadContext"></param>
+internal readonly record struct PropertyReadInfo(
+    string PropertyName,
+    int StartIndex,
+    int EndIndex,
+    IMsBuildElementLocation ElementLocation,
+    bool IsUninitialized,
+    PropertyReadContext PropertyReadContext);
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyWriteInfo.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyWriteInfo.cs
new file mode 100644
index 00000000000..96046f59eae
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyWriteInfo.cs
@@ -0,0 +1,17 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+/// <summary>
+/// Bag of information for a performed property write.
+/// </summary>
+/// <param name="PropertyName">Name of the property.</param>
+/// <param name="IsEmpty">Was any value written? (E.g. if we set propA with value propB, while propB is undefined - the isEmpty will be true)</param>
+/// <param name="ElementLocation">Location of the property write</param>
+internal readonly record struct PropertyWriteInfo(
+    string PropertyName,
+    bool IsEmpty,
+    IMsBuildElementLocation? ElementLocation);
diff --git a/src/Shared/IElementLocation.cs b/src/Shared/IElementLocation.cs
index f9058dce4db..39f520475ba 100644
--- a/src/Shared/IElementLocation.cs
+++ b/src/Shared/IElementLocation.cs
@@ -16,7 +16,11 @@ internal interface IElementLocation : IMsBuildElementLocation, ITranslatable { }
     /// All implementations should be IMMUTABLE.
     /// Any editing of the project XML through the MSBuild API's will invalidate locations in that XML until the XML is reloaded.
     /// </summary>
-    public interface IMsBuildElementLocation
+    /// <remarks>
+    /// This is currently internal - but it is prepared to be made public once it will be needed by other public BuildCheck OM
+    /// (e.g. by property read/write OM)
+    /// </remarks>
+    internal interface IMsBuildElementLocation
     {
         /// <summary>
         /// The file from which this particular element originated.  It may
