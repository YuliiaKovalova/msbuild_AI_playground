diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 7ece4ee980b..4602e306409 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -192,7 +192,7 @@ char Chr(int projectNumber)
         }
 
         [Flags]
-        public enum ExceptionLocations
+        public enum ErrorLocations
         {
             Constructor = 1 << 0,
             BeginBuildAsync = 1 << 1,
@@ -791,27 +791,27 @@ public static IEnumerable<object[]> CacheExceptionLocationsTestData
         {
             get
             {
-                yield return new object[]{ExceptionLocations.Constructor};
+                yield return new object[]{ErrorLocations.Constructor};
 
-                yield return new object[]{ExceptionLocations.BeginBuildAsync};
-                yield return new object[]{ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync};
-                yield return new object[]{ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync | ExceptionLocations.EndBuildAsync};
-                yield return new object[]{ExceptionLocations.BeginBuildAsync | ExceptionLocations.EndBuildAsync};
+                yield return new object[]{ErrorLocations.BeginBuildAsync};
+                yield return new object[]{ErrorLocations.BeginBuildAsync | ErrorLocations.GetCacheResultAsync};
+                yield return new object[]{ErrorLocations.BeginBuildAsync | ErrorLocations.GetCacheResultAsync | ErrorLocations.EndBuildAsync};
+                yield return new object[]{ErrorLocations.BeginBuildAsync | ErrorLocations.EndBuildAsync};
 
-                yield return new object[]{ExceptionLocations.GetCacheResultAsync};
-                yield return new object[]{ExceptionLocations.GetCacheResultAsync | ExceptionLocations.EndBuildAsync};
+                yield return new object[]{ErrorLocations.GetCacheResultAsync};
+                yield return new object[]{ErrorLocations.GetCacheResultAsync | ErrorLocations.EndBuildAsync};
 
-                yield return new object[]{ExceptionLocations.EndBuildAsync};
+                yield return new object[]{ErrorLocations.EndBuildAsync};
             }
         }
 
         [Theory]
         [MemberData(nameof(CacheExceptionLocationsTestData))]
-        public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ExceptionLocations exceptionLocations)
+        public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ErrorLocations errorLocations)
         {
             _env.DoNotLaunchDebugger();
 
-            SetEnvironmentForExceptionLocations(exceptionLocations);
+            SetEnvironmentForErrorLocations(errorLocations);
 
             var project = _env.CreateFile("1.proj", @$"
                     <Project>
@@ -842,9 +842,9 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
                 // Plugin construction, initialization, and query all end up throwing in BuildManager.ExecuteSubmission and thus
                 // mark the submission as failed with exception.
                 var exceptionsThatEndUpInBuildResult =
-                    ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync;
+                    ErrorLocations.Constructor | ErrorLocations.BeginBuildAsync | ErrorLocations.GetCacheResultAsync;
 
-                if ((exceptionsThatEndUpInBuildResult & exceptionLocations) != 0)
+                if ((exceptionsThatEndUpInBuildResult & errorLocations) != 0)
                 {
                     buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
                     buildResult.Exception.ShouldBeOfType<ProjectCacheException>();
@@ -854,7 +854,7 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
 
                 // BuildManager.EndBuild calls plugin.EndBuild, so if only plugin.EndBuild fails it means everything else passed,
                 // so the build submission should be successful.
-                if (exceptionLocations == ExceptionLocations.EndBuildAsync)
+                if (errorLocations == ErrorLocations.EndBuildAsync)
                 {
                     buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
                 }
@@ -862,15 +862,15 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
             finally
             {
                 // These exceptions prevent the creation of a plugin so there's no plugin to shutdown.
-                var exceptionsThatPreventEndBuildFromThrowing = ExceptionLocations.Constructor |
-                                                                ExceptionLocations.BeginBuildAsync;
+                var exceptionsThatPreventEndBuildFromThrowing = ErrorLocations.Constructor |
+                                                                ErrorLocations.BeginBuildAsync;
 
-                if ((exceptionLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||
-                    !exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))
+                if ((errorLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||
+                    !errorLocations.HasFlag(ErrorLocations.EndBuildAsync))
                 {
                     Should.NotThrow(() => buildSession!.Dispose());
                 }
-                else if (exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))
+                else if (errorLocations.HasFlag(ErrorLocations.EndBuildAsync))
                 {
                     var e = Should.Throw<ProjectCacheException>(() => buildSession!.Dispose());
                     e.InnerException!.ShouldNotBeNull();
@@ -885,9 +885,9 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
             logger.BuildFinishedEvents.First().Succeeded.ShouldBeFalse();
 
             // Plugin query must happen after plugin init. So if plugin init fails, then the plugin should not get queried.
-            var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync;
+            var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ErrorLocations.Constructor | ErrorLocations.BeginBuildAsync;
 
-            if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & exceptionLocations) != 0)
+            if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & errorLocations) != 0)
             {
                 logger.FullLog.ShouldNotContain($"{AssemblyMockCache}: GetCacheResultAsync for");
                 logger.FullLog.ShouldNotContain($"{AssemblyMockCache}: EndBuildAsync");
@@ -898,16 +898,16 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
                 StringShouldContainSubstring(logger.FullLog, $"{AssemblyMockCache}: EndBuildAsync", expectedOccurrences: 1);
             }
 
-            logger.FullLog.ShouldNotContain("Cache plugin exception");
+            logger.FullLog.ShouldNotContain("Cache plugin exception from");
         }
 
         [Theory]
         [MemberData(nameof(CacheExceptionLocationsTestData))]
-        public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ExceptionLocations exceptionLocations)
+        public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ErrorLocations errorLocations)
         {
             _env.DoNotLaunchDebugger();
 
-            SetEnvironmentForExceptionLocations(exceptionLocations);
+            SetEnvironmentForErrorLocations(errorLocations);
 
             var graph = Helpers.CreateProjectGraph(
                 _env,
@@ -961,9 +961,9 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ExceptionLo
 
             logger.BuildFinishedEvents.First().Succeeded.ShouldBeFalse();
 
-            var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync;
+            var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ErrorLocations.Constructor | ErrorLocations.BeginBuildAsync;
 
-            if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & exceptionLocations) != 0)
+            if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & errorLocations) != 0)
             {
                 logger.FullLog.ShouldNotContain($"{AssemblyMockCache}: GetCacheResultAsync for");
                 logger.FullLog.ShouldNotContain($"{AssemblyMockCache}: EndBuildAsync");
@@ -971,7 +971,7 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ExceptionLo
             else
             {
                 // There's two projects, so there should be two cache queries logged ... unless a cache queries throws an exception. That ends the build.
-                var expectedQueryOccurrences = exceptionLocations.HasFlag(ExceptionLocations.GetCacheResultAsync)
+                var expectedQueryOccurrences = errorLocations.HasFlag(ErrorLocations.GetCacheResultAsync)
                     ? 1
                     : 2;
 
@@ -998,7 +998,7 @@ public void EndBuildShouldGetCalledOnceWhenItThrowsExceptionsFromGraphBuilds()
                         </Target>
                     </Project>".Cleanup());
 
-            SetEnvironmentForExceptionLocations(ExceptionLocations.EndBuildAsync);
+            SetEnvironmentForErrorLocations(ErrorLocations.EndBuildAsync);
 
             using var buildSession = new Helpers.BuildManagerSession(
                 _env,
@@ -1031,15 +1031,15 @@ private static void StringShouldContainSubstring(string aString, string substrin
             Regex.Matches(aString, substring).Count.ShouldBe(expectedOccurrences);
         }
 
-        private void SetEnvironmentForExceptionLocations(ExceptionLocations exceptionLocations)
+        private void SetEnvironmentForErrorLocations(ErrorLocations errorLocations)
         {
-            foreach (var enumValue in Enum.GetValues(typeof(ExceptionLocations)))
+            foreach (var enumValue in Enum.GetValues(typeof(ErrorLocations)))
             {
-                var typedValue = (ExceptionLocations) enumValue;
-                if (exceptionLocations.HasFlag(typedValue))
+                var typedValue = (ErrorLocations) enumValue;
+                if (errorLocations.HasFlag(typedValue))
                 {
                     var exceptionLocation = typedValue.ToString();
-                    _env.SetEnvironmentVariable(exceptionLocation, "1");
+                    _env.SetEnvironmentVariable(exceptionLocation, "exception");
                     _output.WriteLine($"Set exception location: {exceptionLocation}");
                 }
             }
diff --git a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index 8b0a83ecc8b..c89e8c9e3c6 100644
--- a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -14,14 +14,14 @@ public class AssemblyMockCache : ProjectCachePluginBase
     {
         public AssemblyMockCache()
         {
-            ThrowFrom("Constructor");
+            ErrorFrom("Constructor", pluginLoggerBase: null);
         }
 
         public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logger, CancellationToken cancellationToken)
         {
             logger.LogMessage($"{nameof(AssemblyMockCache)}: BeginBuildAsync", MessageImportance.High);
 
-            ThrowFrom(nameof(BeginBuildAsync));
+            ErrorFrom(nameof(BeginBuildAsync), logger);
 
             return Task.CompletedTask;
         }
@@ -33,7 +33,7 @@ public override Task<CacheResult> GetCacheResultAsync(
         {
             logger.LogMessage($"{nameof(AssemblyMockCache)}: GetCacheResultAsync for {buildRequest.ProjectFullPath}", MessageImportance.High);
 
-            ThrowFrom(nameof(GetCacheResultAsync));
+            ErrorFrom(nameof(GetCacheResultAsync), logger);
 
             return Task.FromResult(CacheResult.IndicateNonCacheHit(CacheResultType.CacheNotApplicable));
         }
@@ -42,16 +42,22 @@ public override Task EndBuildAsync(PluginLoggerBase logger, CancellationToken ca
         {
             logger.LogMessage($"{nameof(AssemblyMockCache)}: EndBuildAsync", MessageImportance.High);
 
-            ThrowFrom(nameof(EndBuildAsync));
+            ErrorFrom(nameof(EndBuildAsync), logger);
 
             return Task.CompletedTask;
         }
 
-        private static void ThrowFrom(string throwFrom)
+        private static void ErrorFrom(string errorLocation, PluginLoggerBase pluginLoggerBase)
         {
-            if (Environment.GetEnvironmentVariable(throwFrom) != null)
+            var errorKind = Environment.GetEnvironmentVariable(errorLocation);
+
+            switch (errorKind)
             {
-                throw new Exception($"Cache plugin exception from {throwFrom}");
+                case "Exception":
+                    throw new Exception($"Cache plugin exception from {errorLocation}");
+                case "LoggedError":
+                    pluginLoggerBase?.LogError($"Cache plugin logged error from {errorLocation}");
+                    break;
             }
         }
     }
