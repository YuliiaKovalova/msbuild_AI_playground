diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index fee348d4042..d193169b4e7 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -2551,7 +2551,7 @@ public partial interface IResolveAssemblyReferenceTaskHandler : System.IDisposab
         System.Threading.Tasks.Task<Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceResult> ExecuteAsync(Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceRequest input, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken));
     }
     [MessagePack.MessagePackObjectAttribute(false)]
-    public partial class ReadOnlyTaskItem : Microsoft.Build.Framework.ITaskItem, Microsoft.Build.Framework.ITaskItem2
+    public sealed partial class ReadOnlyTaskItem : Microsoft.Build.Framework.ITaskItem, Microsoft.Build.Framework.ITaskItem2
     {
         public ReadOnlyTaskItem(string itemSpec) { }
         [MessagePack.IgnoreMemberAttribute]
@@ -2701,7 +2701,7 @@ namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Server
 {
     public sealed partial class RarController
     {
-        public RarController(string pipeName, System.Func<string, System.Nullable<int>, System.Nullable<int>, int, bool, System.IO.Pipes.NamedPipeServerStream> namedPipeServerFactory, System.Nullable<System.TimeSpan> timeout=default(System.Nullable<System.TimeSpan>)) { }
+        public RarController(string pipeName, System.Func<string, System.Nullable<int>, System.Nullable<int>, int, bool, System.IO.Stream> streamFactory, System.Nullable<System.TimeSpan> timeout=default(System.Nullable<System.TimeSpan>)) { }
         public System.Threading.Tasks.Task<int> StartAsync(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
     }
 }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index eb5a0927dc6..f83e253d02b 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -2173,7 +2173,7 @@ public partial interface IResolveAssemblyReferenceTaskHandler : System.IDisposab
         System.Threading.Tasks.Task<Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceResult> ExecuteAsync(Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceRequest input, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken));
     }
     [MessagePack.MessagePackObjectAttribute(false)]
-    public partial class ReadOnlyTaskItem : Microsoft.Build.Framework.ITaskItem, Microsoft.Build.Framework.ITaskItem2
+    public sealed partial class ReadOnlyTaskItem : Microsoft.Build.Framework.ITaskItem, Microsoft.Build.Framework.ITaskItem2
     {
         public ReadOnlyTaskItem(string itemSpec) { }
         [MessagePack.IgnoreMemberAttribute]
@@ -2323,7 +2323,7 @@ namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Server
 {
     public sealed partial class RarController
     {
-        public RarController(string pipeName, System.Func<string, System.Nullable<int>, System.Nullable<int>, int, bool, System.IO.Pipes.NamedPipeServerStream> namedPipeServerFactory, System.Nullable<System.TimeSpan> timeout=default(System.Nullable<System.TimeSpan>)) { }
+        public RarController(string pipeName, System.Func<string, System.Nullable<int>, System.Nullable<int>, int, bool, System.IO.Stream> streamFactory, System.Nullable<System.TimeSpan> timeout=default(System.Nullable<System.TimeSpan>)) { }
         public System.Threading.Tasks.Task<int> StartAsync(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
index 31055702e4f..275234d4d3b 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
@@ -13,7 +13,7 @@
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract
 {
     [MessagePackObject]
-    public partial class ReadOnlyTaskItem : ITaskItem2
+    public sealed class ReadOnlyTaskItem : ITaskItem2
     {
         [IgnoreMember]
         public ICollection MetadataNames { get; }
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs
index fada41c8f13..092787d2a98 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceRequest.cs
@@ -40,7 +40,7 @@ internal ResolveAssemblyReferenceRequest(ResolveAssemblyReferenceTaskInput input
             ResolvedSDKReferences = ReadOnlyTaskItem.CreateArray(input.ResolvedSDKReferences);
             SearchPaths = input.SearchPaths;
             Silent = input.Silent;
-            StateFile = Path.GetFullPath(input.StateFile);
+            StateFile = input.StateFile == null ? input.StateFile : Path.GetFullPath(input.StateFile);
             SupportsBindingRedirectGeneration = input.SupportsBindingRedirectGeneration;
             TargetedRuntimeVersion = input.TargetedRuntimeVersion;
             TargetFrameworkDirectories = input.TargetFrameworkDirectories;
diff --git a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
index 36907466c8c..95c638c10d4 100644
--- a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
@@ -30,7 +30,7 @@ public sealed class RarController
         /// 4. arg. number of allow clients
         /// 5. arg. add right to CreateNewInstance
         /// </summary>
-        private readonly Func<string, int?, int?, int, bool, NamedPipeServerStream> _namedPipeServerFactory;
+        private readonly Func<string, int?, int?, int, bool, Stream> _streamFactory;
 
         /// <summary>
         /// Handler for all incoming tasks
@@ -46,20 +46,20 @@ public sealed class RarController
         /// Construcotr for <see cref="RarController"/>
         /// </summary>
         /// <param name="pipeName">Name of pipe over which all comunication should go</param>
-        /// <param name="namedPipeServerFactory">Factor for server stream</param>
+        /// <param name="streamFactory">Factor for server stream</param>
         /// <param name="timeout">Timeout which should be used for communication</param>
         public RarController(
             string pipeName,
-            Func<string, int?, int?, int, bool, NamedPipeServerStream> namedPipeServerFactory,
+            Func<string, int?, int?, int, bool, Stream> streamFactory,
             TimeSpan? timeout = null)
-            : this(pipeName, namedPipeServerFactory, timeout: timeout, resolveAssemblyReferenceTaskHandler: new ResolveAssemblyReferenceSerializedTaskHandler())
+            : this(pipeName, streamFactory, timeout: timeout, resolveAssemblyReferenceTaskHandler: new ResolveAssemblyReferenceSerializedTaskHandler())
         {
         }
 
-        internal RarController(string pipeName, Func<string, int?, int?, int, bool, NamedPipeServerStream> namedPipeServerFactory, IResolveAssemblyReferenceTaskHandler resolveAssemblyReferenceTaskHandler, TimeSpan? timeout = null)
+        internal RarController(string pipeName, Func<string, int?, int?, int, bool, Stream> streamFactory, IResolveAssemblyReferenceTaskHandler resolveAssemblyReferenceTaskHandler, TimeSpan? timeout = null)
         {
             _pipeName = pipeName;
-            _namedPipeServerFactory = namedPipeServerFactory;
+            _streamFactory = streamFactory;
             _resolveAssemblyReferenceTaskHandler = resolveAssemblyReferenceTaskHandler;
 
             if (timeout.HasValue)
@@ -83,8 +83,7 @@ public async Task<int> StartAsync(CancellationToken cancellationToken = default)
             while (!token.IsCancellationRequested)
             {
                 // server will dispose stream too.
-                NamedPipeServerStream serverStream = GetStream(_pipeName);
-                await serverStream.WaitForConnectionAsync(token).ConfigureAwait(false);
+                Stream serverStream = await ConnectAsync(token).ConfigureAwait(false);
 
                 // Connected! Refresh timeout for incoming request
                 cancellationTokenSource.CancelAfter(Timeout);
@@ -95,7 +94,20 @@ public async Task<int> StartAsync(CancellationToken cancellationToken = default)
             return 0;
         }
 
-        private async Task HandleClientAsync(Stream serverStream, CancellationToken cancellationToken = default)
+        private async Task<Stream> ConnectAsync(CancellationToken cancellationToken = default)
+        {
+            Stream serverStream = GetStream(_pipeName);
+
+            if (serverStream is NamedPipeServerStream pipeServerStream)
+            {
+                await pipeServerStream.WaitForConnectionAsync(cancellationToken).ConfigureAwait(false);
+                return pipeServerStream;
+            }
+
+            return serverStream;
+        }
+
+        internal async Task HandleClientAsync(Stream serverStream, CancellationToken cancellationToken = default)
         {
             JsonRpc server = GetRpcServer(serverStream, _resolveAssemblyReferenceTaskHandler);
             server.StartListening();
@@ -122,9 +134,9 @@ private JsonRpc GetRpcServer(Stream stream, IResolveAssemblyReferenceTaskHandler
         /// Instantiates an endpoint to act as a client
         /// </summary>
         /// <param name="pipeName">The name of the pipe to which we should connect.</param>
-        private NamedPipeServerStream GetStream(string pipeName)
+        private Stream GetStream(string pipeName)
         {
-            return _namedPipeServerFactory(pipeName,
+            return _streamFactory(pipeName,
                 null, // Use default size
                 null, // Use default size
                 NamedPipeServerStream.MaxAllowedServerInstances,
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
index 5e323567a8d..254aa8ca016 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
@@ -1,16 +1,19 @@
-﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading;
+﻿using System.Threading;
 using System.Threading.Tasks;
 
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
     internal sealed class ResolveAssemblyReferenceTaskHandler : IResolveAssemblyReferenceTaskHandler
     {
         public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
+        {
+            return Task.FromResult(Execute(input));
+
+        }
+
+        internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest input)
         {
             ResolveAssemblyReferenceTaskInput taskInput = new ResolveAssemblyReferenceTaskInput(input);
             ResolveAssemblyReferenceBuildEngine buildEngine = new ResolveAssemblyReferenceBuildEngine();
@@ -21,8 +24,7 @@ public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenc
 
             ResolveAssemblyReferenceResult result = task.Execute(taskInput);
             result.BuildEventArgs = buildEngine.BuildEvent;
-
-            return Task.FromResult(result);
+            return result;
         }
 
         public void Dispose()
