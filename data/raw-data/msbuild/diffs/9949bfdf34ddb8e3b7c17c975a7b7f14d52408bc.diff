diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index b8b34618701..c090c05f83b 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -496,7 +496,7 @@ private List<ProjectItemInstance> ExpandItemIntoItems(
                         metadataToRemove.Clear();
                     }
 
-                    foreach (string metadataName in item.EnumerableMeatadataNames)
+                    foreach (string metadataName in item.EnumerableMetadataNames)
                     {
                         if (!keepMetadata.Contains(metadataName))
                         {
@@ -523,7 +523,7 @@ private List<ProjectItemInstance> ExpandItemIntoItems(
                         metadataToRemove.Clear();
                     }
 
-                    foreach (string metadataName in item.EnumerableMeatadataNames)
+                    foreach (string metadataName in item.EnumerableMetadataNames)
                     {
                         if (removeMetadata.Contains(metadataName))
                         {
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 9a3cbe3de5c..27842451119 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -827,7 +827,7 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject
                                 // any extant metadata.
                                 // UNDONE: This could be achieved at lower GC cost by applying
                                 // the metadata filter at DeepClone time above.
-                                foreach (var metadataName in filteredItem.EnumerableMeatadataNames)
+                                foreach (var metadataName in filteredItem.EnumerableMetadataNames)
                                 {
                                     if (!itemFilter.Value.Contains(metadataName, StringComparer.OrdinalIgnoreCase))
                                     {
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 9fb9a6d68f4..db4b8a2ec9e 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -285,7 +285,7 @@ public ICollection<string> MetadataNames
             get { return new ReadOnlyCollection<string>(_taskItem.MetadataNames.Cast<string>()); }
         }
 
-        internal TaskItem.MetadatanamesEnumerable EnumerableMeatadataNames => _taskItem.EnumerableMetadatNames;
+        internal TaskItem.MetadataNamesEnumerable EnumerableMetadataNames => _taskItem.EnumerableMetadatNames;
 
         /// <summary>
         /// ITaskItem implementation
@@ -959,7 +959,7 @@ public ICollection MetadataNames
                 }
             }
 
-            public MetadatanamesEnumerable EnumerableMetadatNames => new MetadatanamesEnumerable(this);
+            public MetadataNamesEnumerable EnumerableMetadataNames => new MetadataNamesEnumerable(this);
 
             /// <summary>
             /// Gets the number of metadata set on the item.
@@ -1965,11 +1965,11 @@ private ProjectMetadataInstance GetItemDefinitionMetadata(string metadataName)
                 return null;
             }
 
-            internal readonly struct MetadatanamesEnumerable
+            internal readonly struct MetadataNamesEnumerable
             {
                 private readonly TaskItem _item;
 
-                public MetadatanamesEnumerable(TaskItem taskItem) => _item = taskItem;
+                public MetadataNamesEnumerable(TaskItem taskItem) => _item = taskItem;
 
                 public readonly MetadataNamesEnumerator GetEnumerator() => new MetadataNamesEnumerator(_item.MetadataCollection);
             }
