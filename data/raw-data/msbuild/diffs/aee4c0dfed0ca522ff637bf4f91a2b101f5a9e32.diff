diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index e2c330c9887..7b6d8bd1110 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -662,7 +662,7 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, CheckLoggingC
         public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, CheckLoggingContext checkContext)
         { /* Ignore the data */ }
 
-        public void StartProjectEvaluation(IAnalysisContext analysisContext, string projectFullPath)
+        public void StartProjectEvaluation(ICheckContext analysisContext, string projectFullPath)
         { /* Ignore the data */ }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index 8eee64243c5..2a2baa83d38 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -32,7 +32,7 @@ public void LogProjectEvaluationStarted()
         {
             LoggingService.LogProjectEvaluationStarted(BuildEventContext, _projectFile);
             LoggingService.BuildEngineDataRouter.StartProjectEvaluation(
-                new AnalysisLoggingContext(LoggingService, BuildEventContext), _projectFile);
+                new CheckLoggingContext(LoggingService, BuildEventContext), _projectFile);
         }
 
         /// <summary>
diff --git a/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs b/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
index 246ae5e9efb..0ca6d25579b 100644
--- a/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
@@ -1,7 +1,7 @@
 ﻿using System;
 using Microsoft.Build.Experimental.BuildCheck;
 
-namespace Microsoft.Build.BuildCheck.Analyzers;
+namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
 internal interface IInternalBuildCheckRegistrationContext : IBuildCheckRegistrationContext
 {
diff --git a/src/Build/BuildCheck/API/InternalBuildAnalyzer.cs b/src/Build/BuildCheck/API/InternalCheck.cs
similarity index 89%
rename from src/Build/BuildCheck/API/InternalBuildAnalyzer.cs
rename to src/Build/BuildCheck/API/InternalCheck.cs
index fdeb987f347..15f7f61dd1c 100644
--- a/src/Build/BuildCheck/API/InternalBuildAnalyzer.cs
+++ b/src/Build/BuildCheck/API/InternalCheck.cs
@@ -1,9 +1,9 @@
 ﻿using System;
 using Microsoft.Build.Experimental.BuildCheck;
 
-namespace Microsoft.Build.BuildCheck.Analyzers;
+namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
-internal abstract class InternalBuildAnalyzer : BuildAnalyzer
+internal abstract class InternalCheck : Check
 {
     /// <summary>
     /// 
diff --git a/src/Build/BuildCheck/Checks/PropertiesUsageAnalyzer.cs b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
similarity index 79%
rename from src/Build/BuildCheck/Checks/PropertiesUsageAnalyzer.cs
rename to src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
index fa096729e7a..c3f8029df61 100644
--- a/src/Build/BuildCheck/Checks/PropertiesUsageAnalyzer.cs
+++ b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
@@ -12,59 +12,59 @@
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.BuildCheck.Analyzers;
+namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
-internal class PropertiesUsageAnalyzer : InternalBuildAnalyzer
+internal class PropertiesUsageCheck : InternalCheck
 {
-    private static readonly BuildAnalyzerRule _usedBeforeInitializedRule = new BuildAnalyzerRule("BC0201", "PropertyUsedBeforeDeclared",
+    private static readonly CheckRule _usedBeforeInitializedRule = new CheckRule("BC0201", "PropertyUsedBeforeDeclared",
         "A property that is accessed should be declared first.",
         "Property: [{0}] was accessed, but it was never initialized.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning, EvaluationCheckScope = EvaluationCheckScope.ProjectFileOnly });
 
-    private static readonly BuildAnalyzerRule _initializedAfterUsedRule = new BuildAnalyzerRule("BC0202", "PropertyDeclaredAfterUsed",
+    private static readonly CheckRule _initializedAfterUsedRule = new CheckRule("BC0202", "PropertyDeclaredAfterUsed",
         "A property should be declared before it is first used.",
         "Property: [{0}] first declared/initialized at [{1}] used before it was initialized.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning, EvaluationCheckScope = EvaluationCheckScope.ProjectFileOnly });
 
-    private static readonly BuildAnalyzerRule _unusedPropertyRule = new BuildAnalyzerRule("BC0203", "UnusedPropertyDeclared",
+    private static readonly CheckRule _unusedPropertyRule = new CheckRule("BC0203", "UnusedPropertyDeclared",
         "A property that is not used should not be declared.",
         "Property: [{0}] was declared/initialized, but it was never used.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
+        new CheckConfiguration() { Severity = CheckResultSeverity.Suggestion, EvaluationCheckScope = EvaluationCheckScope.ProjectFileOnly });
 
-    internal static readonly IReadOnlyList<BuildAnalyzerRule> SupportedRulesList = [_usedBeforeInitializedRule, _initializedAfterUsedRule, _unusedPropertyRule];
+    internal static readonly IReadOnlyList<CheckRule> SupportedRulesList = [_usedBeforeInitializedRule, _initializedAfterUsedRule, _unusedPropertyRule];
 
     public override string FriendlyName => "MSBuild.PropertiesUsageAnalyzer";
 
-    public override IReadOnlyList<BuildAnalyzerRule> SupportedRules => SupportedRulesList;
+    public override IReadOnlyList<CheckRule> SupportedRules => SupportedRulesList;
 
     private const string _allowUninitPropsInConditionsKey = "AllowUninitializedPropertiesInConditions";
     private bool _allowUninitPropsInConditions = false;
     // Each check can have it's scope and enablement
-    private EvaluationAnalysisScope _uninitializedReadScope;
-    private EvaluationAnalysisScope _unusedPropertyScope;
-    private EvaluationAnalysisScope _initializedAfterUseScope;
+    private EvaluationCheckScope _uninitializedReadScope;
+    private EvaluationCheckScope _unusedPropertyScope;
+    private EvaluationCheckScope _initializedAfterUseScope;
     private bool _uninitializedReadEnabled;
     private bool _unusedPropertyEnabled;
     private bool _initializedAfterUseEnabled;
     public override void Initialize(ConfigurationContext configurationContext)
     {
-        var config = configurationContext.BuildAnalyzerConfig.FirstOrDefault(c => c.RuleId == _usedBeforeInitializedRule.Id)
-                ?? BuildAnalyzerConfigurationEffective.Default;
+        var config = configurationContext.CheckConfig.FirstOrDefault(c => c.RuleId == _usedBeforeInitializedRule.Id)
+                ?? CheckConfigurationEffective.Default;
 
         _uninitializedReadEnabled = config.IsEnabled;
-        _uninitializedReadScope = config.EvaluationAnalysisScope;
+        _uninitializedReadScope = config.EvaluationCheckScope;
 
-        config = configurationContext.BuildAnalyzerConfig.FirstOrDefault(c => c.RuleId == _unusedPropertyRule.Id)
-                 ?? BuildAnalyzerConfigurationEffective.Default;
+        config = configurationContext.CheckConfig.FirstOrDefault(c => c.RuleId == _unusedPropertyRule.Id)
+                 ?? CheckConfigurationEffective.Default;
 
         _unusedPropertyEnabled = config.IsEnabled;
-        _unusedPropertyScope = config.EvaluationAnalysisScope;
+        _unusedPropertyScope = config.EvaluationCheckScope;
 
-        config = configurationContext.BuildAnalyzerConfig.FirstOrDefault(c => c.RuleId == _usedBeforeInitializedRule.Id)
-                 ?? BuildAnalyzerConfigurationEffective.Default;
+        config = configurationContext.CheckConfig.FirstOrDefault(c => c.RuleId == _usedBeforeInitializedRule.Id)
+                 ?? CheckConfigurationEffective.Default;
 
         _initializedAfterUseEnabled = config.IsEnabled;
-        _initializedAfterUseScope = config.EvaluationAnalysisScope;
+        _initializedAfterUseScope = config.EvaluationCheckScope;
 
         bool? allowUninitPropsInConditionsRule1 = null;
         bool? allowUninitPropsInConditionsRule2 = null;
@@ -131,7 +131,7 @@ private void ProcessPropertyWrite(BuildCheckDataContext<PropertyWriteData> conte
         PropertyWriteData writeData = context.Data;
 
         // If we want to track unused properties - store all definitions that are in scope.
-        if (_unusedPropertyEnabled && AnalysisScopeClassifier.IsActionInObservedScope(_unusedPropertyScope,
+        if (_unusedPropertyEnabled && CheckScopeClassifier.IsActionInObservedScope(_unusedPropertyScope,
                 writeData.ElementLocation, writeData.ProjectFilePath))
         {
             _writenProperties[writeData.PropertyName] = writeData.ElementLocation;
@@ -152,7 +152,7 @@ private void ProcessPropertyWrite(BuildCheckDataContext<PropertyWriteData> conte
                     writeData.PropertyName, writeData.ElementLocation?.LocationString ?? string.Empty));
             }
 
-            if (AnalysisScopeClassifier.IsActionInObservedScope(_initializedAfterUseScope,
+            if (CheckScopeClassifier.IsActionInObservedScope(_initializedAfterUseScope,
                     writeData.ElementLocation, writeData.ProjectFilePath) &&
                 _uninitializedReadsOutOfScope.TryGetValue(writeData.PropertyName, out IMsBuildElementLocation? uninitOutScopeReadLocation))
             {
@@ -188,7 +188,7 @@ private void ProcessPropertyRead(BuildCheckDataContext<PropertyReadData> context
             // We want to wait with reporting uninitialized reads until we are sure there wasn't later attempts to initialize them.
             if (_initializedAfterUseEnabled)
             {
-                if (AnalysisScopeClassifier.IsActionInObservedScope(_initializedAfterUseScope,
+                if (CheckScopeClassifier.IsActionInObservedScope(_initializedAfterUseScope,
                         readData.ElementLocation, readData.ProjectFilePath))
                 {
                     _uninitializedReadsInScope[readData.PropertyName] = readData.ElementLocation;
@@ -199,7 +199,7 @@ private void ProcessPropertyRead(BuildCheckDataContext<PropertyReadData> context
                     _uninitializedReadsOutOfScope[readData.PropertyName] = readData.ElementLocation;
                 }
             }
-            else if (AnalysisScopeClassifier.IsActionInObservedScope(_uninitializedReadScope,
+            else if (CheckScopeClassifier.IsActionInObservedScope(_uninitializedReadScope,
                          readData.ElementLocation, readData.ProjectFilePath))
             {
                 // report immediately
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index 4a6aedf1284..fd812421526 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -75,7 +75,7 @@ internal void RegisterPropertyWriteAction(CheckWrapper check, Action<BuildCheckD
         => RegisterAction(check, propertyWriteAction, _globalCallbacks.PropertyWriteActions);
 
     internal void RegisterProjectRequestProcessingDoneAction(CheckWrapper check, Action<BuildCheckDataContext<ProjectRequestProcessingDoneData>> projectDoneAction)
-        => RegisterAction(check, projectDoneAction, _globalCallbacks.ProjectProcessingDoneActions);
+        => RegisterAction(check, projectDoneAction, _globalCallbacks.ProjectRequestProcessingDoneActions);
 
     internal void RegisterBuildFinishedAction(CheckWrapper check, Action<BuildCheckDataContext<BuildFinishedCheckData>> buildFinishedAction)
         => RegisterAction(check, buildFinishedAction, _globalCallbacks.BuildFinishedActions);
@@ -148,7 +148,7 @@ internal void RunProjectProcessingDoneActions(
         ICheckContext checkContext,
         Action<CheckWrapper, ICheckContext, CheckConfigurationEffective[], BuildCheckResult>
             resultHandler)
-        => RunRegisteredActions(_globalCallbacks.ProjectProcessingDoneActions, projectProcessingDoneData,
+        => RunRegisteredActions(_globalCallbacks.ProjectRequestProcessingDoneActions, projectProcessingDoneData,
             checkContext, resultHandler);
 
     internal void RunBuildFinishedActions(
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
index 343a69db881..eadd39ab712 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Threading;
-using Microsoft.Build.BuildCheck.Analyzers;
 using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Experimental.BuildCheck.Checks;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 3306c069703..18fb36db92c 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -9,7 +9,6 @@
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.BuildCheck.Analyzers;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.BuildCheck.Acquisition;
 using Microsoft.Build.Experimental.BuildCheck.Checks;
@@ -149,9 +148,9 @@ private static readonly (string[] ruleIds, bool defaultEnablement, CheckFactory
 
             // BuildCheckDataSource.Execution
             [
-                (PropertiesUsageAnalyzer.SupportedRulesList.Select(r => r.Id).ToArray(),
-                    PropertiesUsageAnalyzer.SupportedRulesList.Any(r => r.DefaultConfiguration.IsEnabled ?? false),
-                    Construct<PropertiesUsageAnalyzer>)
+                (PropertiesUsageCheck.SupportedRulesList.Select(r => r.Id).ToArray(),
+                    PropertiesUsageCheck.SupportedRulesList.Any(r => r.DefaultConfiguration.IsEnabled ?? false),
+                    Construct<PropertiesUsageCheck>)
             ]
         ];
 
@@ -511,7 +510,6 @@ public void EndProjectRequest(
             string projectFullPath)
         {
             _buildEventsProcessor.ProcessProjectDone(checkContext, projectFullPath);
-            _projectsByContextId.TryRemove(checkContext.BuildEventContext.ProjectContextId, out _);
         }
 
         public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, CheckLoggingContext checkContext)
diff --git a/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs b/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs
index 3ab5a72de72..0f857dad631 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs
@@ -23,6 +23,10 @@ public CheckConfigurationEffective(string ruleId, EvaluationCheckScope evaluatio
         Severity = severity;
     }
 
+    internal static CheckConfigurationEffective Default { get; } =
+        new(string.Empty, CheckConfiguration.Default.EvaluationCheckScope!.Value,
+            CheckConfiguration.Default.Severity!.Value);
+
     public string RuleId { get; }
 
     public EvaluationCheckScope EvaluationCheckScope { get; }
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index c0c03583b8e..9472501e57a 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -73,7 +73,7 @@ void ProcessTaskParameterEventArgs(
 	
     // Project might be encountered first time in some node, but be already evaluated in another - so StartProjectEvaluation won't happen
     //  - but we still need to know about it, hence the dedicated event.
-    void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string projectFullPath);
+    void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, ICheckContext analysisContext, string projectFullPath);
 
     void StartProjectEvaluation(ICheckContext checksContext, string projectFullPath);
 
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
index 70c583148f7..e426130f703 100644
--- a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
@@ -28,5 +28,5 @@ void ProcessPropertyWrite(
     /// </summary>
     /// <param name="checkContext"></param>
     /// <param name="projectFullPath"></param>
-    void StartProjectEvaluation(ICheckLoggingContext checkContext, string projectFullPath);
+    void StartProjectEvaluation(ICheckContext checkContext, string projectFullPath);
 }
diff --git a/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
index 101145b355f..3fa36d4cde5 100644
--- a/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
+++ b/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
@@ -12,4 +12,4 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 /// <param name="projectFilePath"></param>
 /// <param name="projectConfigurationId"></param>
-internal class ProjectRequestProcessingDoneData(string projectFilePath, int? projectConfigurationId) : AnalysisData(projectFilePath, projectConfigurationId);
+internal class ProjectRequestProcessingDoneData(string projectFilePath, int? projectConfigurationId) : CheckData(projectFilePath, projectConfigurationId);
diff --git a/src/Build/CompatibilitySuppressions.xml b/src/Build/CompatibilitySuppressions.xml
index 2e51f01cc8c..17d4b54af0f 100644
--- a/src/Build/CompatibilitySuppressions.xml
+++ b/src/Build/CompatibilitySuppressions.xml
@@ -281,6 +281,13 @@
     <Right>lib/net472/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.BuildCheckResult.get_Location</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesAnalysisData}})</Target>
@@ -330,6 +337,13 @@
     <Right>lib/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.BuildCheckResult.get_Location</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesAnalysisData}})</Target>
@@ -379,6 +393,13 @@
     <Right>ref/net472/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.BuildCheckResult.get_Location</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesAnalysisData}})</Target>
@@ -428,6 +449,13 @@
     <Right>ref/net8.0/Microsoft.Build.dll</Right>
     <IsBaselineSuppression>true</IsBaselineSuppression>
   </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>M:Microsoft.Build.Experimental.BuildCheck.BuildCheckResult.get_Location</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
   <Suppression>
     <DiagnosticId>CP0002</DiagnosticId>
     <Target>M:Microsoft.Build.Experimental.BuildCheck.IBuildCheckRegistrationContext.RegisterEvaluatedPropertiesAction(System.Action{Microsoft.Build.Experimental.BuildCheck.BuildCheckDataContext{Microsoft.Build.Experimental.BuildCheck.EvaluatedPropertiesAnalysisData}})</Target>
