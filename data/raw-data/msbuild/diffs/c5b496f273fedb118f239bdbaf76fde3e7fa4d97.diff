diff --git a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
index aa7e986c366..42ace7d27c6 100644
--- a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
+++ b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
@@ -285,10 +285,10 @@ public void BuildProjectGraphUsingCaches(Dictionary<int, int[]> edges)
         {
             var topoSortedNodes =
                 CreateProjectGraph(
-                    _env,
-                    edges,
-                    null,
-                    CreateProjectFileWrapper)
+                    env: _env,
+                    dependencyEdges: edges,
+                    globalProperties: null,
+                    createProjectFile: CreateProjectFileWrapper)
                     .ProjectNodesTopologicallySorted.ToArray();
 
             var expectedOutput = new ExpectedNodeBuildOutput();
@@ -331,9 +331,10 @@ public void OutputCacheShouldNotContainInformationFromInputCaches()
         {
             var topoSortedNodes =
                 CreateProjectGraph(
-                    _env,
-                    new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } },
-                    CreateProjectFileWrapper)
+                    env: _env,
+                    dependencyEdges: new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } },
+                    globalProperties: null,
+                    createProjectFile: CreateProjectFileWrapper)
                     .ProjectNodesTopologicallySorted.ToArray();
 
             var expectedOutput = new ExpectedNodeBuildOutput();
@@ -368,10 +369,10 @@ public void MissingResultFromCacheShouldErrorDueToIsolatedBuildCacheEnforcement(
         {
             var topoSortedNodes =
                 CreateProjectGraph(
-                    _env,
-                    new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } },
-                    null,
-                    CreateProjectFileWrapper)
+                    env: _env,
+                    dependencyEdges: new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } },
+                    globalProperties: null,
+                    createProjectFile: CreateProjectFileWrapper)
                     .ProjectNodesTopologicallySorted.ToArray();
 
             var expectedOutput = new ExpectedNodeBuildOutput();
