diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index dd5d0c8a1fc..fcce7f2a460 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -305,6 +305,14 @@ public void RoundtripBuildMessageEventArgs(bool useArguments)
                 e => string.Join(", ", e.RawArguments ?? Array.Empty<object>()));
         }
 
+        [Fact]
+        public void RoundtripResponseFileUsedEventArgs()
+        {
+            var args = new ResponseFileUsedEventArgs("MSBuild.rsp"); 
+            Roundtrip(args,
+                e => e.Message);
+        }
+         
         [Fact]
         public void RoundtripCriticalBuildMessageEventArgs()
         {
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 5ea0941cde1..336a7af7926 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -29,6 +29,7 @@ internal enum BinaryLogRecordKind
         PropertyInitialValueSet,
         NameValueList,
         String,
-        TaskParameter
+        TaskParameter,
+        ResponseFileUsed
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 64a26269a78..5f55ae02c82 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -176,6 +176,9 @@ public BuildEventArgs Read()
                 case BinaryLogRecordKind.EnvironmentVariableRead:
                     result = ReadEnvironmentVariableReadEventArgs();
                     break;
+                case BinaryLogRecordKind.ResponseFileUsed:
+                    result = ReadResponseFileUsedEventArgs();
+                    break;
                 case BinaryLogRecordKind.PropertyReassignment:
                     result = ReadPropertyReassignmentEventArgs();
                     break;
@@ -727,6 +730,19 @@ private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
             return e;
         }
 
+        private BuildEventArgs ReadResponseFileUsedEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields(readImportance: true);
+
+            var responseFilePathName = ReadDeduplicatedString();
+
+            var e = new ResponseFileUsedEventArgs(responseFilePathName);
+
+            SetCommonFields(e, fields);
+
+            return e;
+        }
+
         private BuildEventArgs ReadPropertyReassignmentEventArgs()
         {
             var fields = ReadBuildEventArgsFields(readImportance: true);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 46f8eb085de..50dc011b060 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -434,6 +434,7 @@ private void Write(BuildMessageEventArgs e)
                 case PropertyReassignmentEventArgs propertyReassignment: Write(propertyReassignment); break;
                 case TaskCommandLineEventArgs taskCommandLine: Write(taskCommandLine); break;
                 case UninitializedPropertyReadEventArgs uninitializedPropertyRead: Write(uninitializedPropertyRead); break;
+                case ResponseFileUsedEventArgs responseFileUsed: Write(responseFileUsed); break;
                 case EnvironmentVariableReadEventArgs environmentVariableRead: Write(environmentVariableRead); break;
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: Write(propertyInitialValueSet); break;
                 case CriticalBuildMessageEventArgs criticalBuildMessage: Write(criticalBuildMessage); break;
@@ -506,7 +507,12 @@ private void Write(EnvironmentVariableReadEventArgs e)
             WriteMessageFields(e, writeImportance: true);
             WriteDeduplicatedString(e.EnvironmentVariableName);
         }
-
+        private void Write(ResponseFileUsedEventArgs e)
+        {
+            Write(BinaryLogRecordKind.ResponseFileUsed);
+            WriteMessageFields(e, writeImportance: true);
+            WriteDeduplicatedString(e.ResponseFilePath);
+        }
         private void Write(TaskCommandLineEventArgs e)
         {
             Write(BinaryLogRecordKind.TaskCommandLine);
diff --git a/src/Framework/ResponseFileUsedEventArgs.cs b/src/Framework/ResponseFileUsedEventArgs.cs
index 37b9b9d3655..218e2f72bc1 100644
--- a/src/Framework/ResponseFileUsedEventArgs.cs
+++ b/src/Framework/ResponseFileUsedEventArgs.cs
@@ -3,21 +3,26 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
     /// Arguments for the response file used event
     /// </summary>
     [Serializable]
-    public class ResponseFileUsedEventArgs : CustomBuildEventArgs
+    public class ResponseFileUsedEventArgs : BuildMessageEventArgs
     {
-        public string ResponseFilePath { private set; get; }
+        public ResponseFileUsedEventArgs()
+        {
+        }
         /// <summary>
         /// Initialize a new instance of the ResponseFileUsedEventArgs class.
         /// </summary>
         public ResponseFileUsedEventArgs(string responseFilePath) : base()
         {
-            ResponseFilePath = responseFilePath;
+            this.ResponseFilePath = responseFilePath;
         }
+        public string ResponseFilePath { set; get; }
     }
 }
