diff --git a/documentation/design/security-metadata.md b/documentation/design/security-metadata.md
index 470c4e2518f..f5319af257f 100644
--- a/documentation/design/security-metadata.md
+++ b/documentation/design/security-metadata.md
@@ -5,11 +5,85 @@ The feature is meant to improve the security of builds executed via MSBuild, by
 
 It builds upon the other efforts reducing the cases accidentaly logging secrets - ['not logging unused environemnt variables'](https://github.com/dotnet/msbuild/pull/7484), 'redacting known secret patterns' (internal). Distinction here is that we want to give users option how to configure their build data so that they can indicate what contains secret/sensitive data and shouldn't get output into logs.
 
-The feature is envisioned to be facilitated via global items and/or properties that will be masking logging of specific types of log entries.
+The feature is envisioned to be delivered in multiple interations, while first itearation will be facilitated via global items and/or properties that will be indicating masking logging of specific types of data in log entries.
 
-Out of scope vision contains categorization of tasks (e.g. 'trustworthy'/'unknown' and 'outputing input data'/'not outputing input data'/'unknown') and passing data marked as sensitive/secrets would not be allowed (would lead to build error) based on specific configurations tunable by user. So e.g. it would not be possible to pass secrets to [`WriteLinesToFile` task](https://learn.microsoft.com/en-us/visualstudio/msbuild/writelinestofile-task).
+# North Star / Longer-term vision
 
-# Scope
+We envision MSBuild to have a first-class-citisen type system for it's data and tasks. 'Secret' would be one of the data types - allowable to be passed only to other variables or task inputs denoted as 'secret' (so e.g. it would not be possible to pass secrets to [`WriteLinesToFile` task](https://learn.microsoft.com/en-us/visualstudio/msbuild/writelinestofile-task)) and vice versa 'secret' task input or data type could be initialized/evaluated only from other 'secrets' or predefined external sources of data - environment variables, commandline arguments, files, apropriately denoted task output parameters.
+
+Such a strong typing would allow to hold to stronger guarantees of not spilling properly denoted sensitive data and redact them with minimal impact on build performance (as opposed to intermediate attempts that will need to perform string inspections).
+
+**Ilustrative sample:**
+
+```xml
+<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Secrets>
+    <!-- initialize from command line -->
+    <GH_token />
+    <!-- initialize from env -->
+    <ACR_login>$(ACR_login)</ACR_login>
+    <!-- initialize by task -->
+    <ACR_password />
+	</Secrets>
+
+  <UsingTask TaskName="ReadCreadentialFromValut" AssemblyFile="$(MSBuildProjectDirectory)/Tasks/ACR-Tasks.dll" />
+  <UsingTask TaskName="PushImageToACR" AssemblyFile="$(MSBuildProjectDirectory)/Tasks/ACR-Tasks.dll" />
+	
+  <Target Name='PushImage'> 
+    <Message Text="Pushin image to ACR" />
+    <ReadCreadentialFromValut 
+      Key="$(ACR_password_key)"
+    >
+      <Output TaskParameter="Value" PropertyName="ACR_password"/>
+    </ReadCreadentialFromValut>
+    <PushImageToACR 
+      Login="$(ACR_login)"
+      Password="$(ACR_password)"
+    />
+  </Target>
+</Project>
+```
+
+```cs
+ReadCreadentialFromValut : Task
+{
+  /// <summary>
+  /// Key to be fetched
+  /// </summary>
+  public string Key { get; set; }
+
+  /// <summary>
+  /// Fetched value
+  /// </summary>
+  [Output]
+  [Secret]
+  public string Value { get; set; }
+
+  // ... Execute() ...
+}
+```
+
+```cs
+PushImageToACR : Task
+{
+  /// <summary>
+  /// Azure Container Registry Login
+  /// </summary>
+  public Secret Login { get; set; }
+
+  /// <summary>
+  /// Azure Container Registry Password
+  /// </summary>
+  public Secret Password { get; set; }
+
+  // ... Execute() ...
+}
+```
+
+An opt-out mechanism would allow usage of properly denoted tasks with plain string input data (and vice versa) - to allow smoother gradual onboarding to the new type system, without the need to rework the entire build script suite at one shot.
+
+
+# Scope of initial iteration
 
 ## In scope
  * Following data can be opted-in for redacting:
@@ -18,45 +92,55 @@ Out of scope vision contains categorization of tasks (e.g. 'trustworthy'/'unknow
     * item metadata values
     * all item metadata
     * any combination of above
-    * task OutputItems (? do we want to support this as additional data type? Can be hand in cases like [`ReadLinesFromFile` task](https://learn.microsoft.com/en-us/visualstudio/msbuild/readlinesfromfile-task))
- * Redacting the above select data from all log events (before they are being sent to loggers). Some examples of additional places where the data can propagate and hence attempted to be logged:   
+    * task input parameters (to denote that task is requiring sensitive data and only such can be passed in)
+    * task OutputItems (? do we want to support this as additional data type? Can be handy in cases like [`ReadLinesFromFile` task](https://learn.microsoft.com/en-us/visualstudio/msbuild/readlinesfromfile-task))
+ * Redacting the above will happen in all log events before they are being sent to subscribed loggers. 
+ * Redacting will apply to data initializations and passing:
     * task input parameters
-    * task OutputItems (? do we want to support this as possible additional 'transformation' of property/item values? Possibly only when output is equal to the sensitive input) 
-    * referenced/evaluated environemnt variables
-    * input command line
-    * properties/items evalution - causing value to be transfered to a new holder (`<MyProp>$(SomeSecret)</MyProp>`)
-
-## Scope to be decided
- * concatentaing property with other values or flattening item values or transforming items and then passing via other property - should such be ignored or redacted as whole, or redacting just the part formed from the sensitive data?
- * values created via [Property functions](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions) or [Item functions](https://learn.microsoft.com/en-us/visualstudio/msbuild/item-functions).
+    * task OutputItems
+    * transfering value to other properties/items via evaluation, transforms, flattening, [Property functions](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions), [Item functions](https://learn.microsoft.com/en-us/visualstudio/msbuild/item-functions)
+    * initialization from environemnt variables or command line
+ * Redacting **will NOT** occure on:
+    * log events emited from tasks (this might be added as extra opt-in option - but would lead to significant build performance degradation).
+    * any other alternative output of tasks (direct writes to file system, network connections etc.)
 
 ## Out of scope
- * spilling sensitive data via other means then logs (e.g. [`WriteLinesToFile` task](https://learn.microsoft.com/en-us/visualstudio/msbuild/writelinestofile-task))
- * passing values to task and explicit being logged there (this might be controversial for built in task - in case any is logging input values). TODO: we might want to consider revision of logging of some common tasks to form a better idea here.
- * passing values to task and there embedding into additional text and passing out
+  * Redacting **will NOT** occure on:
+    * log events emited from tasks (this might be added as extra opt-in option - but would lead to significant build performance degradation).
+    * any other alternative output of tasks (direct writes to file system, network connections etc.)
+    * passing values to task and there embedding into additional text and passing out as output parameter - unless such is explicitly marked as containing sensitive data
  
 
 # User interaction
 
-There needs to be a way how user specifies which data should be redacted from log. We have several options:
+There needs to be a way how user specifies which data should be redacted from logs. We have several options:
 
+ * New data type - this is part of the [North Star vision](#north-star--longer-term-vision), but is out of scope for the initial iteration.
  * [Not recomended] Denoting those via some metadata on a definition of the data to be redacted - this has two main drawbacks - a) For some data types (properties, metadata) we'd need new constructs how to attach additional info (property metadata; item meta-metadata). b) some data can be defined implicitly or dynamicaly
- * Global property - e.g. 
+ * Property with global scope - e.g. 
    ```xml
    <DataToRedactFromLogs>Foo;Bar;Baz->SomeMetadata;MyItem->*</DataToRedactFromLogs>
    ```
    single property might look bit cryptic for denoting different data types
 
- * Global item - e.g. 
+ * Item with global scope - e.g. 
    ```xml
    <ItemGroup>
+     <!-- Redacting property content based on the name of the property (or environment variable) -->
      <DataToRedactFromLogs Include="Foo" Type="Property">
      </DataToRedactFromLogs>
+     <!-- Redacting item content based on the name of the item. Metadat are not redacted -->
      <DataToRedactFromLogs Include="Bar" Type="Item" RedactValue=True>
      </DataToRedactFromLogs>
+     <!-- Redacting item metadata content based on the name. -->
      <DataToRedactFromLogs Include="Baz" Type="Item" RedactValue=False Metadata="SomeMetadata">
      </DataToRedactFromLogs>
-     <DataToRedactFromLogs Include="MyItem" Type="Item" RedactValue=False Metadata="*">
+     <!-- Redacting all metadata content of specific item based on the name of the item. -->
+     <DataToRedactFromLogs Include="MyItem" Type="Item" RedactValue=False Metadata="*" />
+     <!-- Redacting property content passed from the task. At the same time requiring that the data receiving the output of the task are denoted as secret as well. -->
+     <DataToRedactFromLogs Include="OutputA" Type="TaskOutput" TaskName="TaskX" />
+     <!-- Redacting task parameter value. At the same time requiring that the data passed to the parameter of the task are denoted as secret as well. -->
+     <DataToRedactFromLogs Include="ParamA" Type="TaskParameter" TaskName="TaskX" />
      </DataToRedactFromLogs>
    </ItemGroup>
    ```
@@ -93,7 +177,7 @@ There needs to be a way how user specifies which data should be redacted from lo
    The last option can possibly be allowed to be injected via other means, that MSBuild currently uses for injecting pluggable fnctionality (command line argument; environment variable; binary placed in a specific search location)
 
 
-Only the first presented option is definitely not to be used. All the other options might possibly be used (up to a discussions if appropriate and what should be in scope). 
+First two presented option are not to be used. All the other options will likely be supported.
 
 # Special considerations
 
@@ -103,6 +187,7 @@ Only the first presented option is definitely not to be used. All the other opti
 * There are no global items today - this can be simulated by putting those to directory.props
 * Even seemingly innocent tasks with seemingly innocent logging can spill possibly sensitive data (e.g. think the RAR task, logging all the inputs, while those are just reference related info - those can contain paths that might already by itself be sensitive info). Related: [#8493](https://github.com/dotnet/msbuild/issues/8493) 
 * `MSBuild` task can pose a boundary for some context passing (e.g. properties/items).
+* Task authors and consumers are posibly different personas with disconected codebases. For this reason we want to support ability to indicate that task input/output is meant to be a secret. A user of the task should follow the contract and denote the data to be mounted to the task appropriately (otherwise a build warning/error will be issued).
 
 # Suggested Implementation
 
@@ -133,8 +218,8 @@ Only the first presented option is definitely not to be used. All the other opti
 Should we redact all occurences of value of `MySecret` from the task result? We might get a lot of false positives and very confusing results.
 
 # Open questions
- * What to use as a replacement of the data to be redacted? (Randomized hash, fixed token, etc.) 
- * Do we want to allow to supply custom replacement value for injectable redaction functionality? There would need to be very strong compeling reason, as this is easily suspectible to [log forging attack](https://owasp.org/www-community/attacks/Log_Injection)
+ * What to use as a replacement of the data to be redacted? (Randomized hash, fixed token, etc.) - *very likely just a static pattern ('******').*
+ * Do we want to allow to supply custom replacement value for injectable redaction functionality? There would need to be very strong compeling reason, as this is easily suspectible to [log forging attack](https://owasp.org/www-community/attacks/Log_Injection) - *most likely no.*
  * Balancing performance and accuracy - can we afford to not support arbitrary output of tasks? Otherwise we'd need to process all log events (similar experiments indicate 4 times slowdown of the build of mid-size project (Orchard)). On the other with explicit 'secret metadata' feature users might expect 100% correctness. Should we make this configurable as well (input data only vs all log entries)? Plus this might be suspectible to false positives (see above).
 
 
