diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index bb359b50926..b983c636794 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -23,15 +23,15 @@ public GetCompatiblePlatform_Tests(ITestOutputHelper output)
         public void ResolvesViaPlatformLookupTable()
         {
             // PlatformLookupTable always takes priority. It is typically user-defined.
-            TaskItem childProj = new TaskItem("foo.bar");
-            childProj.SetMetadata("PlatformOptions", "x64;x86;AnyCPU");
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x64;x86;AnyCPU");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
                 CurrentProjectPlatform = "win32",
                 PlatformLookupTable = "win32=x64",
-                AnnotatedProjects = new TaskItem[] { childProj }
+                AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
             task.Execute();
@@ -44,18 +44,18 @@ public void ResolvesViaChildsPlatformLookupTable()
         {
             // A child's PlatformLookupTable takes priority over the current project's table.
             // This allows overrides on a per-ProjectItem basis.
-            TaskItem childProj = new TaskItem("foo.bar");
-            childProj.SetMetadata("PlatformOptions", "x64;x86;AnyCPU");
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x64;x86;AnyCPU");
 
             // childproj will be assigned x86 because its table takes priority
-            childProj.SetMetadata("PlatformLookupTable", "win32=x86");
+            projectReference.SetMetadata("PlatformLookupTable", "win32=x86");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
                 CurrentProjectPlatform = "win32",
                 PlatformLookupTable = "win32=x64",
-                AnnotatedProjects = new TaskItem[] { childProj }
+                AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
             task.Execute();
@@ -69,15 +69,15 @@ public void ResolvesViaAnyCPUDefault()
             // No valid mapping via the lookup table, should default to AnyCPU when possible because
             // it is inherently compatible with any platform.
 
-            TaskItem childProj = new TaskItem("foo.bar");
-            childProj.SetMetadata("PlatformOptions", "x86;AnyCPU");
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x86;AnyCPU");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
                 CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=x64", 
-                AnnotatedProjects = new TaskItem[] { childProj }
+                AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
             task.Execute();
@@ -90,15 +90,15 @@ public void ResolvesViaSamePlatform()
         {
             // No valid mapping via the lookup table, child project can't default to AnyCPU,
             // child project can match with parent project so match them.
-            TaskItem childProj = new TaskItem("foo.bar");
-            childProj.SetMetadata("PlatformOptions", "x86;x64");
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x86;x64");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
                 CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=x64",
-                AnnotatedProjects = new TaskItem[] { childProj }
+                AnnotatedProjects = new TaskItem[] { projectReference }
             };
 
             task.Execute();
@@ -109,18 +109,17 @@ public void ResolvesViaSamePlatform()
         [Fact]
         public void FailsToResolve()
         {
-            MockLogger log = new MockLogger(_output);
             // No valid mapping via the lookup table, child project can't default to AnyCPU,
             // child can't match with parent, log a warning.
-            TaskItem childProj = new TaskItem("foo.bar");
-            childProj.SetMetadata("PlatformOptions", "x64");
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x64");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
                 CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=x64",
-                AnnotatedProjects = new TaskItem[] { childProj },
+                AnnotatedProjects = new TaskItem[] { projectReference },
             };
             
             task.Execute();
@@ -134,16 +133,36 @@ public void FailsToResolve()
         [Fact]
         public void FailsOnInvalidFormatLookupTable()
         {
-            MockLogger log = new MockLogger(_output);
-            TaskItem childProj = new TaskItem("foo.bar");
-            childProj.SetMetadata("PlatformOptions", "x64");
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x64");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
                 CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=;A=B", // invalid format
-                AnnotatedProjects = new TaskItem[] { childProj },
+                AnnotatedProjects = new TaskItem[] { projectReference },
+            };
+
+            Should.Throw<InternalErrorException>(() => task.Execute());
+        }
+
+        /// <summary>
+        /// Invalid format on PlatformLookupTable from the projectreference results in an exception being thrown.
+        /// </summary>
+        [Fact]
+        public void FailsOnInvalidFormatProjectReferenceLookupTable()
+        {
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("PlatformOptions", "x64");
+            projectReference.SetMetadata("PlatformLookupTable", "a=;b=d");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "x86",
+                PlatformLookupTable = "AnyCPU=x;A=B", // invalid format
+                AnnotatedProjects = new TaskItem[] { projectReference },
             };
 
             Should.Throw<InternalErrorException>(() => task.Execute());
