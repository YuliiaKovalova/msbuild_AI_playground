diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 1bfab1b0e52..fcadf214d9b 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -901,7 +901,16 @@ public BuildParameters Clone()
 
         internal bool UsesInputCaches() => InputResultsCacheFiles != null;
 
-        internal bool SkippedResultsDoNotCauseCacheMiss() => ProjectIsolationMode == ProjectIsolationMode.True;
+        internal bool SkippedResultsDoNotCauseCacheMiss()
+        {
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))
+            {
+                // By default skipped results should not cause cache miss. See https://github.com/dotnet/msbuild/issues/11753
+                return true;
+            }
+
+            return ProjectIsolationMode == ProjectIsolationMode.True;
+        }
 
         /// <summary>
         /// Implementation of the serialization mechanism.
diff --git a/src/Build/BackEnd/Components/Caching/IResultsCache.cs b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
index b1d70409322..34e55ea49bb 100644
--- a/src/Build/BackEnd/Components/Caching/IResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
@@ -51,8 +51,7 @@ internal interface IResultsCache : IBuildComponent, ITranslatable, IEnumerable<B
         /// <param name="configDefaultTargets">The default targets for the request's configuration.</param>
         /// <param name="skippedResultsDoNotCauseCacheMiss">If false, a cached skipped target will cause this method to return "NotSatisfied".
         /// If true, then as long as there is a result in the cache (regardless of whether it was skipped or not), this method
-        /// will return "Satisfied". In most cases this should be false, but it may be set to true in a situation where there is no
-        /// chance of re-execution (which is the usual response to missing / skipped targets), and the caller just needs the data.</param>
+        /// will return "Satisfied". In most cases this should be true, since conditionally skipped target would not be executed a second time if the configuration remains unchanged.</param>
         /// <returns>A response indicating the results, if any, and the targets needing to be built, if any.</returns>
         ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, bool skippedResultsDoNotCauseCacheMiss);
 
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index 60b8a0dc12c..b9cd2b0d1c0 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -160,8 +160,7 @@ public BuildResult GetResultsForConfiguration(int configurationId)
         /// <param name="configDefaultTargets">The default targets for the request's configuration.</param>
         /// <param name="skippedResultsDoNotCauseCacheMiss">If false, a cached skipped target will cause this method to return "NotSatisfied".
         /// If true, then as long as there is a result in the cache (regardless of whether it was skipped or not), this method
-        /// will return "Satisfied". In most cases this should be false, but it may be set to true in a situation where there is no
-        /// chance of re-execution (which is the usual response to missing / skipped targets), and the caller just needs the data.</param>
+        /// will return "Satisfied". In most cases this should be true, since conditionally skipped target would not be executed a second time if the configuration remains unchanged.</param>
         /// <returns>A response indicating the results, if any, and the targets needing to be built, if any.</returns>
         public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, bool skippedResultsDoNotCauseCacheMiss)
         {
