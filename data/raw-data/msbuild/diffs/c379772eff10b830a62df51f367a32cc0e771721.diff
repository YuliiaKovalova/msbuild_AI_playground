diff --git a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
index fa4146484e9..08b3114b352 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
@@ -27,7 +27,7 @@ public void TaskNodesDieAfterBuild()
     </Target>
 </Project>";
                 TransientTestFile project = env.CreateFile("testProject.csproj", pidTaskProject);
-                ProjectInstance projectInstance = new ProjectInstance(project.Path);
+                ProjectInstance projectInstance = new(project.Path);
                 projectInstance.Build().ShouldBeTrue();
                 string processId = projectInstance.GetPropertyValue("PID");
                 string.IsNullOrEmpty(processId).ShouldBeFalse();
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 4377f3ce0e0..67dfcfec84d 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1447,18 +1447,13 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
 
                                 return false;
                             }
-                            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+                            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e)) // Catching Exception, but rethrowing unless it's a well-known exception.
                             {
-                                if (ExceptionHandling.IsCriticalException(e))
-                                {
-                                    throw;
-                                }
-
-                                string message = String.Empty;
+                                string message =
 #if DEBUG
-                                message += UnhandledFactoryError;
+                                UnhandledFactoryError +
 #endif
-                                message += e.Message;
+                                e.Message;
 
                                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskFactoryLoadFailure", TaskFactoryAttributeName, taskFactoryLoadInfo.AssemblyLocation, message);
                             }
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index dfce31973bf..ef598e68f42 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -167,22 +167,10 @@ internal IForwardingLogger CreateForwardingLogger()
                     InternalLoggerException.Throw(null, null, "LoggerNotFoundError", true, this.Name);
                 }
             }
-            catch (Exception e /* Wrap all other exceptions in a more meaningful exception*/)
+            catch (Exception e) // Wrap other exceptions in a more meaningful exception. LoggerException and InternalLoggerException are already meaningful.
+            when (!(e is LoggerException /* Polite logger Failure*/ || e is InternalLoggerException /* LoggerClass not found*/ || ExceptionHandling.IsCriticalException(e)))
             {
-                // Two of the possible exceptions are already in reasonable exception types
-                if (e is LoggerException /* Polite logger Failure*/ || e is InternalLoggerException /* LoggerClass not found*/)
-                {
-                    throw;
-                }
-                else
-                {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
-                    InternalLoggerException.Throw(e, null, "LoggerCreationError", true, Name);
-                }
+                InternalLoggerException.Throw(e, null, "LoggerCreationError", true, Name);
             }
 
             return forwardingLogger;
diff --git a/src/Shared/TypeInformation.cs b/src/Shared/TypeInformation.cs
index e0e5606fdba..39ea106e68d 100644
--- a/src/Shared/TypeInformation.cs
+++ b/src/Shared/TypeInformation.cs
@@ -44,6 +44,8 @@ internal TypeInformation(LoadedType baseType)
 #endif
             AssemblyName = LoadedType.LoadedAssembly?.GetName();
             Namespace = LoadedType.Type.Namespace;
+            LoadInfo = LoadedType.Assembly;
+            TypeName = LoadedType.Type.FullName;
         }
 
         public PropertyInfo[] GetProperties(BindingFlags flags)
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 11075125241..d775a754597 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -394,7 +394,6 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                                             }
                                         }
 
-#if !TASKHOST
                                         IEnumerable<PropertyDefinition> propertyDefinitions = typeDef.GetProperties().Select(prop => metadataReader.GetPropertyDefinition(prop));
                                         List<TypeInformationPropertyInfo> typePropertyInfos = new();
                                         foreach (PropertyDefinition propertyDefinition in propertyDefinitions)
@@ -420,7 +419,6 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                                             typePropertyInfos.Add(toAdd);
                                         }
                                         typeInformation.Properties = typePropertyInfos.ToArray();
-#endif
 
                                         TypeDefinition parentTypeDefinition = typeDef;
                                         while (true)
diff --git a/src/Tasks.UnitTests/PortableTasks_Tests.cs b/src/Tasks.UnitTests/PortableTasks_Tests.cs
index 037fc932f31..313ef905087 100644
--- a/src/Tasks.UnitTests/PortableTasks_Tests.cs
+++ b/src/Tasks.UnitTests/PortableTasks_Tests.cs
@@ -1,6 +1,7 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
 using System.IO;
 using System.Linq;
 using System.Text.RegularExpressions;
@@ -52,7 +53,7 @@ private void RunMSBuildOnProjectWithPortableTaskAndAssertOutput(bool useDesktopM
 
                 //"Debug", "netstandard1.3"
                 DirectoryInfo ProjectFileFolder =
-                    new DirectoryInfo(PortableTaskFolderPath).EnumerateDirectories().First().EnumerateDirectories().First();
+                    new DirectoryInfo(PortableTaskFolderPath).EnumerateDirectories().First().EnumerateDirectories().First(n => n.Name.Equals("netstandard2.0", StringComparison.OrdinalIgnoreCase));
 
                 foreach (var file in ProjectFileFolder.GetFiles())
                 {
