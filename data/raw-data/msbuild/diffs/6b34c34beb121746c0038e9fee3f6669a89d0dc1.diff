diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 72117637d4a..a6759421bad 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -377,7 +377,7 @@ public void QuestionTouchNonExistingAlwaysCreate()
 
             bool success = Execute(t);
 
-            Assert.False(success);
+            Assert.True(success);
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.CreatingFile"), mynonexisting_txt, "AlwaysCreate"),
@@ -401,7 +401,7 @@ public void QuestionTouchExisting()
 
             bool success = Execute(t);
 
-            Assert.False(success);
+            Assert.True(success);
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.Touching"), myexisting_txt),
diff --git a/src/Tasks/Delete.cs b/src/Tasks/Delete.cs
index 0dbe2f78609..8cf304d4729 100644
--- a/src/Tasks/Delete.cs
+++ b/src/Tasks/Delete.cs
@@ -123,15 +123,13 @@ public override bool Execute()
                         {
                             if (FailIfNotIncremental)
                             {
-                                Log.LogErrorFromResources("Delete.DeletingFile", file.ItemSpec);
+                                Log.LogWarningFromResources("Delete.DeletingFile", file.ItemSpec);
                             }
-                            else
-                            {
-                                // Do not log a fake command line as well, as it's superfluous, and also potentially expensive
-                                Log.LogMessageFromResources(MessageImportance.Normal, "Delete.DeletingFile", file.ItemSpec);
 
-                                File.Delete(file.ItemSpec);
-                            }
+                            // Do not log a fake command line as well, as it's superfluous, and also potentially expensive
+                            Log.LogMessageFromResources(MessageImportance.Normal, "Delete.DeletingFile", file.ItemSpec);
+
+                            File.Delete(file.ItemSpec);
                         }
                         else
                         {
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index 9b94858fc12..53b01688490 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -51,11 +51,10 @@ public class WriteLinesToFile : TaskExtension, IIncrementalTask
         /// <summary>
         /// Question whether this task is incremental.
         /// </summary>
-        /// <remarks>When question is true, then this task would not write to disk.  If CanBeIncremental is true, then error out.</remarks>
+        /// <remarks>When question is true, then error out if WriteOnlyWhenDifferent would have
+        /// written to the file.</remarks>
         public bool FailIfNotIncremental { get; set; }
 
-        public bool CanBeIncremental => WriteOnlyWhenDifferent;
-
         /// <summary>
         /// Execute the task.
         /// </summary>
@@ -69,7 +68,7 @@ public override bool Execute()
                 // do not return if Lines is null, because we may
                 // want to delete the file in that case
                 StringBuilder buffer = new StringBuilder();
-                if (Lines != null && (!FailIfNotIncremental || WriteOnlyWhenDifferent))
+                if (Lines != null)
                 {
                     foreach (ITaskItem line in Lines)
                     {
@@ -131,36 +130,17 @@ public override bool Execute()
                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);
                         }
 
-                        if (FailIfNotIncremental)
-                        {
-                            if (Lines?.Length > 0)
-                            {
-                                Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
-                                return false;
-                            }
-                        }
-                        else
-                        {
-                            System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);
-                        }
+                        System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);
                     }
                     else
                     {
-                        if (FailIfNotIncremental && Lines?.Length > 0)
+                        if (WriteOnlyWhenDifferent)
                         {
-                            Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorOrWarning", File.ItemSpec, string.Empty);
-                            return false;
+                            Log.LogMessageFromResources(MessageImportance.Normal, "WriteLinesToFile.UnusedWriteOnlyWhenDifferent", File.ItemSpec);
                         }
-                        else
-                        {
-                            if (WriteOnlyWhenDifferent)
-                            {
-                                Log.LogMessageFromResources(MessageImportance.Normal, "WriteLinesToFile.UnusedWriteOnlyWhenDifferent", File.ItemSpec);
-                            }
 
-                            Directory.CreateDirectory(directoryPath);
-                            System.IO.File.AppendAllText(File.ItemSpec, buffer.ToString(), encoding);
-                        }
+                        Directory.CreateDirectory(directoryPath);
+                        System.IO.File.AppendAllText(File.ItemSpec, buffer.ToString(), encoding);
                     }
                 }
                 catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index 75d00478679..8f887fe5000 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -202,8 +202,7 @@ private bool TouchFile(
                 {
                     if (FailIfNotIncremental)
                     {
-                        Log.LogErrorFromResources("Touch.CreatingFile", file, "AlwaysCreate");
-                        return false;
+                        Log.LogWarningFromResources("Touch.CreatingFile", file, "AlwaysCreate");
                     }
                     else
                     {
@@ -222,17 +221,13 @@ private bool TouchFile(
                 }
             }
 
-            // Ignore touching the disk when FailIfNotIncremental.
             if (FailIfNotIncremental)
             {
-                Log.LogErrorFromResources("Touch.Touching", file);
-                return false;
-            }
-            else
-            {
-                Log.LogMessageFromResources(messageImportance, "Touch.Touching", file);
+                Log.LogWarningFromResources("Touch.Touching", file);
             }
 
+            Log.LogMessageFromResources(messageImportance, "Touch.Touching", file);
+
             // If the file is read only then we must either issue an error, or, if the user so 
             // specified, make the file temporarily not read only.
             bool needToRestoreAttributes = false;
