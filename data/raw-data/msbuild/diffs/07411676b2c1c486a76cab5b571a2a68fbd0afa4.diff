diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 43924ebf9cf..b45cf895ce5 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -52,11 +52,6 @@ public class BuildEventArgsReader : IBuildEventArgsReaderNotifications, IDisposa
         /// </summary>
         private readonly StringStorage stringStorage = new StringStorage();
 
-        /// <summary>
-        /// Is the enderlying stream seekable?
-        /// </summary>
-        private readonly bool _canSeek;
-
         // reflection is needed to set these three fields because public constructors don't provide
         // a way to set these from the outside
         private static FieldInfo? buildEventArgsFieldThreadId =
@@ -71,9 +66,11 @@ public class BuildEventArgsReader : IBuildEventArgsReaderNotifications, IDisposa
         /// <param name="fileFormatVersion">The file format version of the log file being read.</param>
         public BuildEventArgsReader(BinaryReader binaryReader, int fileFormatVersion)
         {
-            this.binaryReader = binaryReader;
-            this._canSeek = binaryReader.BaseStream.CanSeek;
             this._readStream = TransparentReadStream.EnsureTransparentReadStream(binaryReader.BaseStream);
+            // make sure the reader we're going to use wraps the transparent stream wrapper
+            this.binaryReader = binaryReader.BaseStream == _readStream
+                ? binaryReader
+                : new BinaryReader(_readStream);
             this.fileFormatVersion = fileFormatVersion;
         }
 
@@ -327,14 +324,7 @@ void HandleError(string msg, bool noThrow, ReaderErrorType readerErrorType, Exce
 
         private void SkipBytes(int count)
         {
-            if (_canSeek)
-            {
-                binaryReader.BaseStream.Seek(count, SeekOrigin.Current);
-            }
-            else
-            {
-                binaryReader.BaseStream.SkipBytes(count, true);
-            }
+            binaryReader.BaseStream.Seek(count, SeekOrigin.Current);
         }
 
         private BinaryLogRecordKind PreprocessRecordsTillNextEvent(Func<BinaryLogRecordKind, bool> isPreprocessRecord)
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
index 2083e9e8665..b2104f2dc03 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
@@ -35,19 +35,19 @@ public static int ReadAtLeast(this Stream stream, byte[] buffer, int offset, int
             return totalRead;
         }
 
-        public static int SkipBytes(this Stream stream, int bytesCount, bool throwOnEndOfStream)
+        public static long SkipBytes(this Stream stream, long bytesCount, bool throwOnEndOfStream)
         {
             byte[] buffer = ArrayPool<byte>.Shared.Rent(4096);
             using var _ = new CleanupScope(() => ArrayPool<byte>.Shared.Return(buffer));
             return SkipBytes(stream, bytesCount, throwOnEndOfStream, buffer);
         }
 
-        public static int SkipBytes(this Stream stream, int bytesCount, bool throwOnEndOfStream, byte[] buffer)
+        public static long SkipBytes(this Stream stream, long bytesCount, bool throwOnEndOfStream, byte[] buffer)
         {
-            int totalRead = 0;
+            long totalRead = 0;
             while (totalRead < bytesCount)
             {
-                int read = stream.Read(buffer, 0,  Math.Min(bytesCount - totalRead, buffer.Length));
+                int read = stream.Read(buffer, 0,  (int)Math.Min(bytesCount - totalRead, buffer.Length));
                 if (read == 0)
                 {
                     if (throwOnEndOfStream)
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
index ec327528d13..931a2294197 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
@@ -72,7 +72,7 @@ public int? BytesCountAllowedToRead
         public override long Position
         {
             get => _position;
-            set => SkipBytes(value - _position);
+            set => this.SkipBytes((int)(value - _position), true);
         }
 
         public override void Flush()
@@ -100,7 +100,7 @@ public override long Seek(long offset, SeekOrigin origin)
                 throw new InvalidOperationException("Only seeking from SeekOrigin.Current is supported.");
             }
 
-            SkipBytes(offset);
+            this.SkipBytes((int)offset, true);
 
             return _position;
         }
@@ -115,29 +115,6 @@ public override void Write(byte[] buffer, int offset, int count)
             throw new InvalidOperationException("Writing is not supported.");
         }
 
-        private void SkipBytes(long count)
-        {
-            if(count < 0)
-            {
-                throw new InvalidOperationException("Seeking backwards is not supported.");
-            }
-
-            if(count == 0)
-            {
-                return;
-            }
-
-            byte[] buffer = ArrayPool<byte>.Shared.Rent((int)count);
-            try
-            {
-                _position += _stream.ReadAtLeast(buffer, 0, (int)count, throwOnEndOfStream: true);
-            }
-            finally
-            {
-                ArrayPool<byte>.Shared.Return(buffer);
-            }
-        }
-
         public override void Close() => _stream.Close();
     }
 }
