diff --git a/src/Build/BackEnd/Components/Logging/LoggingContext.cs b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
index f92e4defc43..0bffa1b67af 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
@@ -212,14 +212,6 @@ internal void LogWarning(string subcategoryResourceName, BuildEventFileInfo file
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
 
-            string warningCode = null;
-            ResourceUtilities.ExtractMessageCode(true, ResourceUtilities.GetResourceString(messageResourceName), out warningCode);
-
-            if(_loggingService.ShouldTreatWarningAsError(warningCode, _eventContext))
-            {
-                _loggingService.LogError(_eventContext, file, messageResourceName, messageArgs);
-            }
-            
             _loggingService.LogWarning(_eventContext, subcategoryResourceName, file, messageResourceName, messageArgs);
         }
 
@@ -235,11 +227,6 @@ internal void LogWarningFromText(string subcategoryResourceName, string warningC
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
 
-            if (_loggingService.ShouldTreatWarningAsError(warningCode, _eventContext))
-            {
-                _loggingService.LogErrorFromText(_eventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
-            }
-
             _loggingService.LogWarningFromText(_eventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
         }
 
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 09595c1d4e1..b54e2e53b63 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -164,8 +164,6 @@ internal class OutOfProcTaskHostNode :
         private RegisteredTaskObjectCacheBase _registeredTaskObjectCache;
 #endif
 
-        public event BuildWarningEventHandler WarningLoggedAsError;
-
         /// <summary>
         /// Constructor.
         /// </summary>
@@ -871,10 +869,6 @@ private void RunTask(object state)
                     if (taskResult == null)
                     {
                         taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.Failure);
-                        if(_isTaskExecuting)
-                        {
-                            WarningLoggedAsError(null, null);
-                        }
                     }
 
                     lock (_taskCompleteLock)
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 7ad0feec5c7..d9b96883eda 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -157,7 +157,7 @@ protected IBuildEngine BuildEngine
         public string HelpKeywordPrefix { get; set; }
 
         /// <summary>
-        /// 
+        /// A bool that determines whether or not the task has logged an error.
         /// </summary>
         private bool _hasLoggedErrors;
 
@@ -1043,11 +1043,6 @@ params object[] messageArgs
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
-            if(warningCode == null)
-            {
-
-            }
-
             // Keep track of warnings logged and compare to the what the build engine logged as an error.
             _warningCodesLogged.Add(warningCode);
 
diff --git a/src/Utilities/Task.cs b/src/Utilities/Task.cs
index 3a695f5af98..a9f3de6ff36 100644
--- a/src/Utilities/Task.cs
+++ b/src/Utilities/Task.cs
@@ -50,22 +50,11 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)
 
         #region Properties
 
-        private IBuildEngine _engine;
         /// <summary>
         /// The build engine automatically sets this property to allow tasks to call back into it.
         /// </summary>
         /// <value>The build engine interface available to tasks.</value>
-        public IBuildEngine BuildEngine
-        {
-            get
-            {
-                return _engine;
-            }
-            set
-            {
-                _engine = value;
-            }
-        }
+        public IBuildEngine BuildEngine { get; set; }
 
         // The casts below are always possible because this class is built against the 
         // Orcas Framework assembly or later, so the version of MSBuild that does not
