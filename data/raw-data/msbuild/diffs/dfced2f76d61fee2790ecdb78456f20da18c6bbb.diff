diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index e30f6b12dd1..f34423f982a 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -81,7 +81,7 @@
     <Compile Include="..\Shared\NGen.cs">
       <Link>NGen.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs"/>
+    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs" />
     <Compile Include="..\Shared\IInternable.cs">
       <Link>IInternable.cs</Link>
     </Compile>
@@ -519,7 +519,6 @@
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCodeType.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCompilers.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryTaskInfo.cs" />
-    <Compile Include="SemaphoreCPUTask.cs" />
     <Compile Include="SGen.cs" Condition="'$(MonoBuild)' != 'true'">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index ad52912ef23..9f7f4620cd2 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -135,7 +135,6 @@
     <UsingTask TaskName="Microsoft.Build.Tasks.Move"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.MSBuild"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.ReadLinesFromFile"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.SemaphoreCPUTask"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
 
     <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == ''" />
diff --git a/src/Tasks/SemaphoreCPUTask.cs b/src/Tasks/SemaphoreCPUTask.cs
deleted file mode 100644
index 7bf57804326..00000000000
--- a/src/Tasks/SemaphoreCPUTask.cs
+++ /dev/null
@@ -1,72 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using Microsoft.Build.Utilities;
-using System;
-using System.Diagnostics;
-using System.Threading;
-
-namespace Microsoft.Build.Tasks
-{
-    class SemaphoreCPUTask : Task
-    {
-        private const int Repetitions = 20;
-
-        public override bool Execute()
-        {
-            Log.LogMessageFromText($"Starting in {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
-
-            BuildEngine8.Yield();
-
-            //int initial = BuildEngine7.RequestCores(3123890);
-            //Log.LogMessageFromText($"Got {initial} cores from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
-
-            //if (initial > 0)
-            //{
-            //    while (initial > 0)
-            //    {
-            //        Thread.Sleep(TimeSpan.FromSeconds(1));
-            //        BuildEngine7.ReleaseCores(1);
-            //        initial--;
-            //        Log.LogMessageFromText($"Released 1 core from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
-            //    }
-
-            //    return !Log.HasLoggedErrors;
-            //}
-
-            //for (int i = 0; i < 20; i++)
-            //{
-            //    int v = BuildEngine7.RequestCores(9999);
-            //    Log.LogMessageFromText($"Got {v} cores  from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
-            //    BuildEngine7.ReleaseCores(v + 20);
-            //    Thread.Sleep(TimeSpan.FromSeconds(0.9));
-            //}
-
-            System.Threading.Tasks.Task[] tasks = new System.Threading.Tasks.Task[Repetitions];
-
-            for (int i = 0; i < Repetitions; i++)
-            {
-                int i_local = i;
-                tasks[i] = System.Threading.Tasks.Task.Run(() => LaunchAndComplete(i_local, () => BuildEngine8.ReleaseCores(1)));
-            }
-
-            System.Threading.Tasks.Task.WhenAll(tasks).Wait();
-
-            BuildEngine8.Reacquire();
-
-            return !Log.HasLoggedErrors;
-        }
-
-        void LaunchAndComplete(int i, Action completionCallback)
-        {
-            Stopwatch s = new Stopwatch();
-            s.Start();
-            BuildEngine8.RequestCores(1);
-            Log.LogMessageFromText($"Action {i} started from {System.Diagnostics.Process.GetCurrentProcess().Id}, waited {s.Elapsed}", Framework.MessageImportance.High);
-            Thread.Sleep(2_000);
-            Log.LogMessageFromText($"Action {i} completed from {System.Diagnostics.Process.GetCurrentProcess().Id}, total {s.Elapsed}", Framework.MessageImportance.High);
-
-            completionCallback.Invoke();
-        }
-    }
-}
