diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index 0c24f2cab6c..9dbcf3772bf 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -17,14 +17,11 @@ internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule
 {
     private readonly ILoggingService _loggingService;
 
-    internal BuildCheckAcquisitionModule(ILoggingService loggingService)
-    {
-        _loggingService = loggingService;
-    }
+    internal BuildCheckAcquisitionModule(ILoggingService loggingService) => _loggingService = loggingService;
 
 #if FEATURE_ASSEMBLYLOADCONTEXT
     /// <summary>
-    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory
+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory.
     /// </summary>
     private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();
 #endif
@@ -45,7 +42,7 @@ public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisiti
             assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);
 #endif
 
-            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));
+            IEnumerable<Type> analyzerTypes = assembly.GetExportedTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));
 
             foreach (Type analyzerType in analyzerTypes)
             {
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index d9ddbeff662..eae0683a824 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3919,7 +3919,8 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                     {
                         if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.RegisterAnalyzer), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (_loggingContext != null && TryGetArg(args, out string arg0))
+                            ErrorUtilities.VerifyThrow(_loggingContext != null, $"The logging context is missed. {nameof(IntrinsicFunctions.RegisterAnalyzer)} can not be invoked.");
+                            if (TryGetArg(args, out string arg0))
                             {
                                 returnVal = IntrinsicFunctions.RegisterAnalyzer(arg0, _loggingContext);
                                 return true;
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 9604524cd08..89e516b4489 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -2097,15 +2097,15 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   </data>
   <data name="CustomAnalyzerSuccessfulAcquisition" xml:space="preserve">
     <value>Custom analyzer rule: {0} has been registered successfully.</value>
-    <comment>The message is emitted on successful loading of the custom analyzer rule in app domain.</comment>
+    <comment>The message is emitted on successful loading of the custom analyzer rule in process.</comment>
   </data>
   <data name="CustomAnalyzerFailedAcquisition" xml:space="preserve">
     <value>Failed to register the custom analyzer: {0}.</value>
-    <comment>The message is emitted on failed loading of the custom analyzer in app domain.</comment>
+    <comment>The message is emitted on failed loading of the custom analyzer in process.</comment>
   </data>
   <data name="CustomAnalyzerFailedRuleLoading" xml:space="preserve">
     <value>Failed to instantiate the custom analyzer rule with the following exception: {0}.</value>
-    <comment>The message is emitted on failed loading of the custom analyzer rule in app domain.</comment>
+    <comment>The message is emitted on failed loading of the custom analyzer rule in process.</comment>
   </data>
   <data name="CustomAnalyzerAssemblyNotExist" xml:space="preserve">
     <value>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</value>
