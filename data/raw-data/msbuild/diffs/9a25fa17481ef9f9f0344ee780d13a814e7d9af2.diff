diff --git a/src/Framework/LogInterpolatingHandler.cs b/src/Framework/LogInterpolatedStringHandler.cs
similarity index 80%
rename from src/Framework/LogInterpolatingHandler.cs
rename to src/Framework/LogInterpolatedStringHandler.cs
index d5893cd9682..9edb6f54b19 100644
--- a/src/Framework/LogInterpolatingHandler.cs
+++ b/src/Framework/LogInterpolatedStringHandler.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Framework
     [InterpolatedStringHandler]
     public ref struct LogInterpolatedStringHandler
     {
-        private char[] buffer;
+        private readonly char[] buffer;
         private int position = 0;
         private int argPosition = 0;
 
@@ -24,8 +24,12 @@ public LogInterpolatedStringHandler(int literalLength, int formattedCount)
                 throw new ArgumentOutOfRangeException("Number of formatted arguments must be less than 100.");
             }
 
-            // Length is computed with reserved space for "{x}" and "{xx}" placeholders 
-            buffer = new char[literalLength + (4 * formattedCount)];
+            // Buffer size is computed with reserved space for "{x}" and "{xx}" placeholders
+            int bufferSize = formattedCount < 10 ?
+                literalLength + (3 * formattedCount) :
+                literalLength + 3 * (formattedCount % 10) + 4 * (formattedCount - (formattedCount % 10));
+
+            buffer = new char[bufferSize];
 
             if (formattedCount > 0)
             {
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index d5f862cdc62..64aba184220 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -319,11 +319,11 @@ public void LogMessageWithInterpolatedString()
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
-            t.Log.LogMessage($"echo {0} and {"1"}");
+            t.Log.LogMessage($"echo {0} and {"1"} {2} {3} {4} {5} {6} {7} {8} {9} {10}");
 
             mockEngine.BuildEventArgs.Count.ShouldBe(1);
             mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildMessageEventArgs>();
-            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1");
+            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1 2 3 4 5 6 7 8 9 10");
         }
 
         [Fact]
