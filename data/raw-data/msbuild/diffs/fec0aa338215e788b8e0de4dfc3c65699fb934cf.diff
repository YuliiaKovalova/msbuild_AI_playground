diff --git a/src/Build.OM.UnitTests/NugetRestoreTests.cs b/src/Build.OM.UnitTests/NugetRestoreTests.cs
index e7458cf0a26..c0a00cf572e 100644
--- a/src/Build.OM.UnitTests/NugetRestoreTests.cs
+++ b/src/Build.OM.UnitTests/NugetRestoreTests.cs
@@ -9,6 +9,7 @@
 using Xunit;
 #endif
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 namespace Microsoft.Build.Engine.OM.UnitTests
 {
@@ -23,8 +24,7 @@ public NugetRestoreTests(ITestOutputHelper output)
         // This NuGet version cannot locate other assemblies when parsing solutions at restore time. This includes localized strings required in debug mode.
         // NuGet version 4.1.0 was somewhat arbitrarily chosen. 3.5 breaks with an unrelated error, and 4.8.2 does not fail when a new dependency is introduced. This is a safe middle point.
 #if !DEBUG
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
-        [Fact]
+        [WindowsFullFrameworkOnlyFact]
         public void TestOldNuget()
         {
             string msbuildExePath = Path.GetDirectoryName(RunnerUtilities.PathToCurrentlyRunningMsBuildExe)!;
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 622e8c81c88..25babf37294 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -21,6 +21,7 @@
 using Xunit.Abstractions;
 using Microsoft.Build.Execution;
 using System.Runtime.Versioning;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -321,8 +322,7 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
             output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + "::Number=2 TargetFramework=netcoreapp2.1]");
         }
 
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6518")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Minimal path validation in Core allows expanding path containing quoted slashes.")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Minimal path validation in Core allows expanding path containing quoted slashes.", Skip = "https://github.com/dotnet/msbuild/issues/6518")]
         [SkipOnMono("Minimal path validation in Mono allows expanding path containing quoted slashes.")]
         public void TestItemsWithUnexpandableMetadata()
         {
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index cf2941f2e96..da339128eff 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -591,9 +591,7 @@ public void ExpandItemVectorFunctionsBuiltIn4()
             log.AssertLogContains("[foo;bar]");
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/4363")]
+        [LongPathSupportEnabledFact(fullFrameworkOnly: true, additionalMessage: "https://github.com/dotnet/msbuild/issues/4363")]
         public void ExpandItemVectorFunctionsBuiltIn_PathTooLongError()
         {
             string content = @"
@@ -876,8 +874,7 @@ public void ItemIncludeContainsMultipleItemReferences()
         /// <summary>
         /// Bad path when getting metadata through ->Metadata function
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportEnabledFact]
         public void InvalidPathAndMetadataItemFunctionPathTooLong()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -936,8 +933,7 @@ public void InvalidMetadataName()
         /// <summary>
         /// Bad path when getting metadata through ->WithMetadataValue function
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportEnabledFact]
         public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -996,8 +992,7 @@ public void InvalidMetadataName2()
         /// <summary>
         /// Bad path when getting metadata through ->AnyHaveMetadataValue function
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportEnabledFact]
         public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -1049,9 +1044,7 @@ public void InvalidPathInDirectMetadata()
             logger.AssertLogContains("MSB4248");
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "new enough dotnet.exe transparently opts into long paths")]
+        [LongPathSupportEnabledFact(fullFrameworkOnly: true, additionalMessage: "new enough dotnet.exe transparently opts into long paths")]
         public void PathTooLongInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index d017ffbe1cc..b6b3283cbd5 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -118,6 +118,12 @@
     <Compile Include="..\Shared\UnitTests\ImmutableDictionary_Tests.cs" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' == 'Full' and '$(MonoBuild)' != 'true'">
       <Link>Collections\ImmutableDictionary_Tests.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\UnitTests\CustomXunitAttributesUtilities.cs">
+      <Link>Shared\CustomXunitAttributesUtilities.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\UnitTests\LongPathSupportEnabledFactAttribute.cs">
+      <Link>Shared\LongPathSupportEnabledFactAttribute.cs</Link>
+    </Compile>
 
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
diff --git a/src/Xunit.NetCore.Extensions/Utilities.cs b/src/Shared/UnitTests/CustomXunitAttributesUtilities.cs
similarity index 91%
rename from src/Xunit.NetCore.Extensions/Utilities.cs
rename to src/Shared/UnitTests/CustomXunitAttributesUtilities.cs
index eb6393d6eb0..da7a6d85a62 100644
--- a/src/Xunit.NetCore.Extensions/Utilities.cs
+++ b/src/Shared/UnitTests/CustomXunitAttributesUtilities.cs
@@ -1,9 +1,9 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-namespace Xunit.NetCore.Extensions
+namespace Microsoft.Build.UnitTests
 {
-    internal static class Utilities
+    internal static class CustomXunitAttributesUtilities
     {
 #if NETFRAMEWORK
         public static bool IsRunningOnNet => false;
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 59bfa74eb8f..79b4a485a22 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -422,9 +422,7 @@ public void NormalizePathThatFitsIntoMaxPath()
             Assert.Equal(fullPath, FileUtilities.NormalizePath(Path.Combine(currentDirectory, filePath)));
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/4363")]
+        [LongPathSupportEnabledFact(fullFrameworkOnly: true, additionalMessage: "https://github.com/dotnet/msbuild/issues/4363")]
         public void NormalizePathThatDoesntFitIntoMaxPath()
         {
             Assert.Throws<PathTooLongException>(() =>
diff --git a/src/Shared/UnitTests/LongPathSupportEnabledFactAttribute.cs b/src/Shared/UnitTests/LongPathSupportEnabledFactAttribute.cs
new file mode 100644
index 00000000000..243f9506229
--- /dev/null
+++ b/src/Shared/UnitTests/LongPathSupportEnabledFactAttribute.cs
@@ -0,0 +1,40 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests
+{
+    /// <summary>
+    ///  This test should be run only on Windows, and when long path support is enabled.
+    ///  It is possible to conditionally restrict the fact to be run only on full .NET Framework.
+    /// </summary>
+    public class LongPathSupportEnabledFactAttribute : FactAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="LongPathSupportEnabledFactAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        /// <param name="fullFrameworkOnly"><see langword="true"/> if the test can be run only on full framework. The default value is <see langword="false"/>.</param>
+        public LongPathSupportEnabledFactAttribute(string? additionalMessage = null, bool fullFrameworkOnly = false)
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test only runs on Windows and when long path support is enabled.".AppendAdditionalMessage(additionalMessage);
+                return;
+            }
+
+            if (fullFrameworkOnly && !CustomXunitAttributesUtilities.IsRunningOnNetFramework)
+            {
+                this.Skip = "This test only runs on full .NET Framework and when long path support is enabled.".AppendAdditionalMessage(additionalMessage);
+                return;
+            }
+
+            if (NativeMethodsShared.IsMaxPathLegacyWindows())
+            {
+                this.Skip = "This test only runs when long path support is enabled.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index ef202a94132..7acd0a775fb 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -1931,7 +1931,6 @@ public void TooFewRetriesThrows()
             engine.AssertLogContains("MSB3027");
         }
 
-        [PlatformSpecific(TestPlatforms.Windows)]
         internal virtual void ErrorIfLinkFailedCheck()
         {
             using (var env = TestEnvironment.Create())
@@ -2375,7 +2374,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
             }
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         internal override void ErrorIfLinkFailedCheck()
         {
             base.ErrorIfLinkFailedCheck();
@@ -2456,7 +2455,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
             }
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         internal override void ErrorIfLinkFailedCheck()
         {
             base.ErrorIfLinkFailedCheck();
diff --git a/src/Tasks.UnitTests/FileStateTests.cs b/src/Tasks.UnitTests/FileStateTests.cs
index d3c3e040076..2867c47109e 100644
--- a/src/Tasks.UnitTests/FileStateTests.cs
+++ b/src/Tasks.UnitTests/FileStateTests.cs
@@ -44,8 +44,7 @@ public void BadChars()
             Assert.Throws<ArgumentException>(() => { var time = state.LastWriteTime; });
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportEnabledFact]
         public void BadTooLongLastWriteTime()
         {
             Helpers.VerifyAssertThrowsSameWay(
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 3acd8c56824..caf8c24dbe8 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -59,6 +59,13 @@
     <Compile Include="..\Shared\ProcessExtensions.cs" />
     <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
 
+    <Compile Include="..\Shared\UnitTests\CustomXunitAttributesUtilities.cs">
+      <Link>Shared\CustomXunitAttributesUtilities.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\UnitTests\LongPathSupportEnabledFactAttribute.cs">
+      <Link>Shared\LongPathSupportEnabledFactAttribute.cs</Link>
+    </Compile>
+
     <EmbeddedResource Include="SampleResx" />
     <EmbeddedResource Include="AssemblyDependency\CacheFileSamples\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache" />
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index a31a6128f8f..ea932cd6b4c 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -2975,8 +2975,7 @@ public References(ITestOutputHelper output)
             _output = output;
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
         [SkipOnMono("https://github.com/dotnet/msbuild/issues/677")]
         public void DontLockP2PReferenceWhenResolvingSystemTypes()
         {
@@ -3153,7 +3152,7 @@ public class Class1
         /// which fails (LoadFile requires an absolute path).  The fix was to use
         /// Assembly.LoadFrom instead.
         /// </summary>
-        [Fact]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
         [SkipOnMono("https://github.com/dotnet/msbuild/issues/677")]
         public void ReferencedAssemblySpecifiedUsingRelativePath()
diff --git a/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
index 7d06825d2e9..d17224b80aa 100644
--- a/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
@@ -1,6 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using Microsoft.Build.UnitTests;
+
 namespace Xunit.NetCore.Extensions
 {
     /// <summary>
@@ -14,7 +16,7 @@ public class DotNetOnlyFactAttribute : FactAttribute
         /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
         public DotNetOnlyFactAttribute(string? additionalMessage = null)
         {
-            if (!Utilities.IsRunningOnNet)
+            if (!CustomXunitAttributesUtilities.IsRunningOnNet)
             {
                 this.Skip = "This test only runs on .NET.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
index 63ede80fcc6..b7fbc83d786 100644
--- a/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
@@ -1,6 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using Microsoft.Build.UnitTests;
+
 namespace Xunit.NetCore.Extensions
 {
     /// <summary>
@@ -14,7 +16,7 @@ public class DotNetOnlyTheoryAttribute : TheoryAttribute
         /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
         public DotNetOnlyTheoryAttribute(string? additionalMessage = null)
         {
-            if (!Utilities.IsRunningOnNet)
+            if (!CustomXunitAttributesUtilities.IsRunningOnNet)
             {
                 this.Skip = "This test only runs on .NET.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs
index f3878ef0de3..49fed368f03 100644
--- a/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Runtime.InteropServices;
+using Microsoft.Build.UnitTests;
 
 namespace Xunit.NetCore.Extensions
 {
diff --git a/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs
index f0a1769882e..7ba37f088ee 100644
--- a/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Runtime.InteropServices;
+using Microsoft.Build.UnitTests;
 
 namespace Xunit.NetCore.Extensions
 {
diff --git a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
index b2963401f16..3262a274921 100644
--- a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Runtime.InteropServices;
+using Microsoft.Build.UnitTests;
 
 namespace Xunit.NetCore.Extensions
 {
@@ -21,7 +22,7 @@ public WindowsFullFrameworkOnlyFactAttribute(string? additionalMessage = null)
                 this.Skip = "This test only runs on Windows on full framework.".AppendAdditionalMessage(additionalMessage);
                 return;
             }
-            if (!Utilities.IsRunningOnNetFramework)
+            if (!CustomXunitAttributesUtilities.IsRunningOnNetFramework)
             {
                 this.Skip = "This test only runs on full framework.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
index 47a9ba53a37..02aab14ad65 100644
--- a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Runtime.InteropServices;
+using Microsoft.Build.UnitTests;
 
 namespace Xunit.NetCore.Extensions
 {
@@ -22,7 +23,7 @@ public WindowsFullFrameworkOnlyTheoryAttribute(string? additionalMessage = null)
                 this.Skip = "This test only runs on Windows on full framework.".AppendAdditionalMessage(additionalMessage);
                 return;
             }
-            if (!Utilities.IsRunningOnNetFramework)
+            if (!CustomXunitAttributesUtilities.IsRunningOnNetFramework)
             {
                 this.Skip = "This test only runs on full framework.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs
index 72f2378ad02..054b1f70a48 100644
--- a/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Runtime.InteropServices;
+using Microsoft.Build.UnitTests;
 
 namespace Xunit.NetCore.Extensions
 {
diff --git a/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs
index dfc2be0b220..4ba1b2e62cb 100644
--- a/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Runtime.InteropServices;
+using Microsoft.Build.UnitTests;
 
 namespace Xunit.NetCore.Extensions
 {
diff --git a/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj b/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj
index 6bc9b9cbc4d..3a44e576210 100644
--- a/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj
+++ b/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj
@@ -9,4 +9,7 @@
   <ItemGroup>
     <PackageReference Include="xunit.core" />
   </ItemGroup>
+  <ItemGroup>
+    <Compile Include="..\Shared\UnitTests\CustomXunitAttributesUtilities.cs" />
+  </ItemGroup>
 </Project>
\ No newline at end of file
