diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
index 6eaf1e1d8d1..00ca243d4bf 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
@@ -11,17 +12,16 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
-using Microsoft.Build.UnitTests.Shared;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Xunit.NetCore.Extensions;
 using static Microsoft.Build.UnitTests.ObjectModelHelpers;
 
 #nullable disable
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
-    public class BuildManager_Logging_Tests
+    public class BuildManager_Logging_Tests : IDisposable
     {
         /// <summary>
         /// The mock logger for testing.
@@ -109,12 +109,14 @@ public void Build_WithCustomBuildArgs_EnvVariableSet()
 
                 var result = submission.Execute();
 
-                var e = _logger.AllBuildEvents;
+                var allEvents = _logger.AllBuildEvents;
+
+                allEvents.OfType<BuildWarningEventArgs>().ShouldHaveSingleItem();
+                allEvents.First(x => x is BuildWarningEventArgs).Message.ShouldContain("MyCustomBuildEventArgs");
             }
             finally
             {
                 _buildManager.EndBuild();
-                _env.SetEnvironmentVariable("MSBUILDCUSTOMBUILDEVENTWARNING", null);
             }
         }
 
@@ -128,7 +130,7 @@ public void Build_WithCustomBuildArgs_EnvVariableSet()
         /// <summary>
         /// TearDown
         /// </summary>
-        private void Dispose()
+        public void Dispose()
         {
             _buildManager.Dispose();
             _projectCollection.Dispose();
diff --git a/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs b/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs
index 3903c801158..4309ea61ea6 100644
--- a/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs
+++ b/src/Build.UnitTests/BackEnd/CustomBuildEventTask.cs
@@ -13,7 +13,7 @@ public class CustomBuildEventTask : Task
     {
         public override bool Execute()
         {
-            var customBuildEvent = new MyCustomBuildEventArgs();
+            MyCustomBuildEventArgs customBuildEvent = new() { RawMessage = "A message from MyCustomBuildEventArgs" };
             BuildEngine.LogCustomEvent(customBuildEvent);
 
             return true;
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 1596e1c73f7..c471ae033e2 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -900,27 +900,61 @@ public void PacketReceived(int node, INodePacket packet)
             }
 
             LogMessagePacket loggingPacket = (LogMessagePacket)packet;
+            InjectNonSerializedData(loggingPacket);
 
+            WarnOnDeprecatedCustomArgsSerialization(loggingPacket);
+
+            ProcessLoggingEvent(loggingPacket.NodeBuildEvent);
+        }
+
+        /// <summary>
+        /// Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
+        /// Since BinaryFormatter is going to be deprecated, log warning so users can use new Extended*EventArgs instead of custom
+        /// EventArgs derived from existing EventArgs.
+        /// </summary>
+        private void WarnOnDeprecatedCustomArgsSerialization(LogMessagePacket loggingPacket)
+        {
             if (loggingPacket.EventType == LoggingEventType.CustomEvent
                 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8)
                 && Traits.Instance.EscapeHatches.EnableWarningOnCustomBuildEvent)
             {
                 BuildEventArgs buildEvent = loggingPacket.NodeBuildEvent.Value.Value;
 
-                // Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
-                // Since BinaryFormatter is going to be deprecated, log warning so users can use new Extended*EventArgs instead of custom
-                // EventArgs derived from existing EventArgs.
-                LogWarning(
-                    buildEvent?.BuildEventContext ?? BuildEventContext.Invalid,
-                    null,
-                    BuildEventFileInfo.Empty,
-                    "DeprecatedEventSerialization",
+                BuildEventContext buildEventContext = buildEvent?.BuildEventContext ?? BuildEventContext.Invalid;
+
+                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, "DeprecatedEventSerialization",
                     buildEvent?.GetType().Name ?? string.Empty);
-            }
-            else
-            {
-                InjectNonSerializedData(loggingPacket);
-                ProcessLoggingEvent(loggingPacket.NodeBuildEvent);
+
+                BuildWarningEventArgs warning = new(
+                    null,
+                    warningCode,
+                    BuildEventFileInfo.Empty.File,
+                    BuildEventFileInfo.Empty.Line,
+                    BuildEventFileInfo.Empty.Column,
+                    BuildEventFileInfo.Empty.EndLine,
+                    BuildEventFileInfo.Empty.EndColumn,
+                    message,
+                    helpKeyword,
+                    "MSBuild");
+
+                warning.BuildEventContext = buildEventContext;
+                if (warning.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+                {
+                    if (buildEvent is BuildMessageEventArgs buildMessageEvent)
+                    {
+                        warning.ProjectFile = buildMessageEvent.ProjectFile;
+                    }
+                    else if (buildEvent is BuildErrorEventArgs buildErrorEvent)
+                    {
+                        warning.ProjectFile = buildErrorEvent.ProjectFile;
+                    }
+                    else if (buildEvent is BuildWarningEventArgs buildWarningEvent)
+                    {
+                        warning.ProjectFile = buildWarningEvent.ProjectFile;
+                    }
+                }
+
+                ProcessLoggingEvent(warning);
             }
         }
 
