diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 0d8f2635e4e..23d3cf093e8 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -565,7 +565,6 @@ public ProjectStartedEventArgs CreateProjectStarted(
             int evaluationId = BuildEventContext.InvalidEvaluationId,
             int projectContextId = BuildEventContext.InvalidProjectContextId)
         {
-            var ctx = new BuildEventContext(0, 0, 0, 0);
             return new ProjectStartedEventArgs(
                 configurationId,
                 message: null,
diff --git a/src/Framework/ProjectStartedEventArgs.cs b/src/Framework/ProjectStartedEventArgs.cs
index 0d521c578f4..8dcf4330fb0 100644
--- a/src/Framework/ProjectStartedEventArgs.cs
+++ b/src/Framework/ProjectStartedEventArgs.cs
@@ -399,9 +399,9 @@ internal override void WriteToStream(BinaryWriter writer)
                 }
             }
 
-            WriteSet(writer, WarningsAsErrors);
-            WriteSet(writer, WarningsNotAsErrors);
-            WriteSet(writer, WarningsAsMessages);
+            WriteCollection(writer, WarningsAsErrors);
+            WriteCollection(writer, WarningsNotAsErrors);
+            WriteCollection(writer, WarningsAsMessages);
         }
 
         /// <summary>
@@ -471,29 +471,29 @@ internal override void CreateFromStream(BinaryReader reader, int version)
                 properties = dictionaryList;
             }
 
-            WarningsAsErrors = ReadSet(reader);
-            WarningsNotAsErrors = ReadSet(reader);
-            WarningsAsMessages = ReadSet(reader);
+            WarningsAsErrors = ReadStringSet(reader);
+            WarningsNotAsErrors = ReadStringSet(reader);
+            WarningsAsMessages = ReadStringSet(reader);
         }
 
-        private static void WriteSet(BinaryWriter writer, ICollection<string>? set)
+        private static void WriteCollection(BinaryWriter writer, ICollection<string>? collection)
         {
-            if (set == null)
+            if (collection == null)
             {
                 writer.Write((byte)0);
             }
             else
             {
                 writer.Write((byte)1);
-                writer.Write(set.Count);
-                foreach (string item in set)
+                writer.Write(collection.Count);
+                foreach (string item in collection)
                 {
                     writer.Write(item);
                 }
             }
         }
 
-        private static ISet<string>? ReadSet(BinaryReader reader)
+        private static ISet<string>? ReadStringSet(BinaryReader reader)
         {
             if (reader.ReadByte() == 0)
             {
