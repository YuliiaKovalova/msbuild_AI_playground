diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 360cdcc5169..4e8ceedea73 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -72,7 +72,7 @@ internal class Scheduler : IScheduler
         private int _nodeLimitOffset;
 
         /// <summary>
-        /// NativeMethodsShared.GetLogicalCoreCount() or MSBUILDCORELIMIT if set
+        /// The result of calling NativeMethodsShared.GetLogicalCoreCount() unless overriden with MSBUILDCORELIMIT.
         /// </summary>
         private int _coreLimit;
 
@@ -106,7 +106,7 @@ internal class Scheduler : IScheduler
         private SchedulingData _schedulingData;
 
         /// <summary>
-        /// A queue of RequestCores request waiting for at least one core to become available.
+        /// A queue of RequestCores requests waiting for at least one core to become available.
         /// </summary>
         private Queue<TaskCompletionSource<int>> _pendingRequestCoresCallbacks = new Queue<TaskCompletionSource<int>>();
 
@@ -201,10 +201,6 @@ public Scheduler()
             {
                 _coreLimit = NativeMethodsShared.GetLogicalCoreCount();
             }
-            // Tasks are factoring in the "implicit core" so let's make the maximum return value from
-            // RequestCore exactly the number of cores.
-            _coreLimit = Math.Max(0, _coreLimit - 1);
-
             if (!int.TryParse(Environment.GetEnvironmentVariable("MSBUILDNODECOREALLOCATIONWEIGHT"), out _nodeCoreAllocationWeight)
                 || _nodeCoreAllocationWeight <= 0
                 || _nodeCoreAllocationWeight > 100)
@@ -1367,11 +1363,19 @@ private int GetAvailableCoresForScheduling()
             return Math.Max(0, limit - (_schedulingData.ExecutingRequestsCount + _schedulingData.ExplicitlyGrantedCores + _schedulingData.YieldingRequestsCount));
         }
 
+        /// <summary>
+        /// Returns the maximum number of cores that can be returned from a RequestCores() call at the moment.
+        /// </summary>
         private int GetAvailableCoresForExplicitRequests()
         {
-            int implicitlyAllocatedCores = ((_schedulingData.ExecutingRequestsCount - 1) * _nodeCoreAllocationWeight) / 100;
-            int explicitlyAllocatedCores = _schedulingData.ExplicitlyGrantedCores;
-            return Math.Max(0, _coreLimit - (implicitlyAllocatedCores + explicitlyAllocatedCores));
+            // At least one core is always implicitly granted to the node making the request.
+            // If _nodeCoreAllocationWeight is more than zero, it can increase this value by the specified fraction of executing nodes.
+            int implicitlyGrantedCores = Math.Max(1, ((_schedulingData.ExecutingRequestsCount - 1) * _nodeCoreAllocationWeight) / 100);
+
+            // The number of explicitly granted cores is a sum of everything we've granted via RequestCores() so far across all nodes.
+            int explicitlyGrantedCores = _schedulingData.ExplicitlyGrantedCores;
+
+            return Math.Max(0, _coreLimit - (implicitlyGrantedCores + explicitlyGrantedCores));
         }
 
         /// <summary>
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index f23c02fa72f..7aa78f0bbeb 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -86,12 +86,6 @@ public Traits()
         /// </summary>
         public readonly int LogPropertyTracking = ParseIntFromEnvironmentVariableOrDefault("MsBuildLogPropertyTracking", 0); // Default to logging nothing via the property tracker.
 
-        /// <summary>
-        /// Allow tasks to collect more resources than the default.
-        /// </summary>
-        public readonly int ResourceManagerOversubscription = ParseIntFromEnvironmentVariableOrDefault("MSBUILDRESOURCEMANAGEROVERSUBSCRIPTION", 0); // Default to maxcpucount
-
-
         private static int ParseIntFromEnvironmentVariableOrDefault(string environmentVariable, int defaultValue)
         {
             return int.TryParse(Environment.GetEnvironmentVariable(environmentVariable), out int result)
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index e8a2af31f03..a9ee96a69ea 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -33,7 +33,6 @@ namespace Microsoft.Build.UnitTests
      **************************************************************************/
     internal sealed class MockEngine : IBuildEngine8
     {
-        private readonly string ResourceSemaphoreName = $"MSBuildTestResourceSemaphore{Guid.NewGuid().ToString()}";
         private readonly object _lockObj = new object();  // Protects _log, _output
         private readonly ITestOutputHelper _output;
         private readonly StringBuilder _log = new StringBuilder();
@@ -504,6 +503,5 @@ public bool ShouldTreatWarningAsError(string warningCode)
         {
             return false;
         }
-
     }
 }
