diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 19d7a06857f..2be060e871b 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -225,6 +225,36 @@ public void ExpandItemVectorFunctionsAnyHaveMetadataValue()
             Assert.Equal("false", itemsFalse[0].EvaluatedInclude);
         }
 
+        /// <summary>
+        /// Expand an item vector function ContainsItem
+        /// </summary>
+        [Fact]
+        public void ExpandItemVectorFunctionsContainsItem()
+        {
+            ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
+            var expander = CreateItemFunctionExpander();
+
+            ProjectItemInstanceFactory itemFactory = new ProjectItemInstanceFactory(project, "i");
+
+            var items = expander.ExpandIntoItemsLeaveEscaped("@(i->ContainsItem('i0'))", itemFactory, ExpanderOptions.ExpandItems, MockElementLocation.Instance);
+
+            items.Count.ShouldBe(1);
+            items[0].ItemType.ShouldBe("i");
+            items[0].EvaluatedInclude.ShouldBe("true");
+
+            items = expander.ExpandIntoItemsLeaveEscaped("@(i->ContainsItem('I0'))", itemFactory, ExpanderOptions.ExpandItems, MockElementLocation.Instance);
+
+            items.Count.ShouldBe(1);
+            items[0].ItemType.ShouldBe("i");
+            items[0].EvaluatedInclude.ShouldBe("true");
+
+            items = expander.ExpandIntoItemsLeaveEscaped("@(i->ContainsItem('i20'))", itemFactory, ExpanderOptions.ExpandItems, MockElementLocation.Instance);
+
+            items.Count.ShouldBe(1);
+            items[0].ItemType.ShouldBe("i");
+            items[0].EvaluatedInclude.ShouldBe("false");
+        }
+
         /// <summary>
         /// Expand an item vector function Metadata()->DirectoryName()->Distinct()
         /// </summary>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 71672dbb21d..3da8b908d39 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2553,6 +2553,30 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
                     }
                 }
 
+                /// <summary>
+                /// Intrinsic function that returns a boolean to indicate if any of the items have the given value
+                /// Using a case insensitive comparison
+                /// </summary>
+                internal static IEnumerable<Pair<string, S>> ContainsItem(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)
+                {
+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments != null && arguments.Length == 1, elementLocation, "InvalidItemFunctionSyntax", functionName, (arguments == null ? 0 : arguments.Length));
+
+                    var hasItem = false;
+
+                    var searchedItem = arguments[0];
+
+                    foreach (var item in itemsOfType)
+                    {
+                        if (item.Key.Equals(searchedItem, StringComparison.OrdinalIgnoreCase))
+                        {
+                            hasItem = true;
+                            break;
+                        }
+                    }
+
+                    yield return new Pair<string, S>(hasItem ? "true" : "false", null /* no base item */);
+                }
+
                 /// <summary>
                 /// Intrinsic function that returns a boolean to indicate if any of the items have the given metadata value
                 /// Using a case insensitive comparison
