diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index ca4caa1cb74..e3ba906b7b2 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -150,7 +150,7 @@ public void CanceledTasksDoNotLogMSB4181()
                 BuildResult result = asyncResult.BuildResult;
                 manager.EndBuild();
 
-                // No errors from cancelling a build.
+                // One error from cancelling a build.
                 logger.ErrorCount.ShouldBe(1);
                 // Warn because the task is being cancelled.
                 // NOTE: This assertion will fail when debugging into it because "waiting on exec to cancel" warning will be logged.
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index ff04f0e5845..b6e1928131b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -730,8 +730,8 @@ void Callback(object state)
                     {
                         if (submission.IsStarted)
                         {
-                            submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, new BuildAbortedException()));
                             ((IBuildComponentHost)this).LoggingService.LogError(BuildEventContext.Invalid, new BuildEventFileInfo(ElementLocation.EmptyLocation), "BuildAborted");
+                            submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, new BuildAbortedException()));
                         }
                     }
 
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 0962d3b8dc3..68d34238060 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -156,12 +156,12 @@ internal void CompleteResults(BuildResult result)
             // this one.)
             ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, "BuildResult doesn't match BuildRequest configuration");
 
-            if (BuildResult is null || (BuildResult.OverallResult == BuildResultCode.Success && result is not null))
+            if (BuildResult is null)
             {
                 BuildResult = result;
             }
 
-            CheckForCompletion();
+            CheckForCompletion(result);
         }
 
         /// <summary>
@@ -170,7 +170,7 @@ internal void CompleteResults(BuildResult result)
         internal void CompleteLogging()
         {
             LoggingCompleted = true;
-            CheckForCompletion();
+            CheckForCompletion(BuildResult);
         }
 
         /// <summary>
@@ -188,16 +188,16 @@ private void ExecuteAsync(BuildSubmissionCompleteCallback callback, object conte
         /// <summary>
         /// Determines if we are completely done with this submission and can complete it so the user may access results.
         /// </summary>
-        private void CheckForCompletion()
+        private void CheckForCompletion(BuildResult result)
         {
-            if (BuildResult != null && LoggingCompleted)
+            if (result != null && LoggingCompleted)
             {
                 bool hasCompleted = (Interlocked.Exchange(ref _completionInvoked, 1) == 1);
                 if (!hasCompleted)
                 {
                     // Did this submission have warnings elevated to errors? If so, mark it as
                     // failed even though it succeeded (with warnings--but they're errors).
-                    if (((IBuildComponentHost)BuildManager).LoggingService.HasBuildSubmissionLoggedErrors(BuildResult.SubmissionId))
+                    if (((IBuildComponentHost)BuildManager).LoggingService.HasBuildSubmissionLoggedErrors(result.SubmissionId))
                     {
                         BuildResult.SetOverallResult(overallResult: false);
                     }
diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index 95010f21255..9fe6f73bd55 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -29,9 +29,7 @@ public class BuildAbortedException : Exception
         public BuildAbortedException()
             : base(ResourceUtilities.GetResourceString("BuildAborted"))
         {
-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, "BuildAborted");
-
-            ErrorCode = "MSB4188";
+            ErrorCode = "MSB4188"; // Must match the shared resource "BuildAborted"
         }
 
         /// <summary>
@@ -40,9 +38,7 @@ public BuildAbortedException()
         public BuildAbortedException(string message)
             : base(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("BuildAbortedWithMessage", message))
         {
-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, "BuildAbortedWithMessage", message);
-
-            ErrorCode = errorCode;
+            ErrorCode = "MSB4197"; // Must match the shared resource "BuildAbortedWithMessage"
         }
 
         /// <summary>
@@ -51,9 +47,7 @@ public BuildAbortedException(string message)
         public BuildAbortedException(string message, Exception innerException)
             : base(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("BuildAbortedWithMessage", message), innerException)
         {
-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, "BuildAbortedWithMessage", message);
-
-            ErrorCode = errorCode;
+            ErrorCode = "MSB4197"; // Must match the shared resource "BuildAbortedWithMessage"
         }
 
         /// <summary>
