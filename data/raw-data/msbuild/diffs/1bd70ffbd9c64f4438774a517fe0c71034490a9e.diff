diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 0ad3f852107..40ffdea411a 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -210,7 +210,7 @@ public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logg
 
             public override async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest, PluginLoggerBase logger, CancellationToken cancellationToken)
             {
-                return await _getCacheResultDelegate(buildRequest, logger, cancellationToken).ConfigureAwait(false);
+                return await _getCacheResultDelegate(buildRequest, logger, cancellationToken).ConfigureAwait(true);
             }
 
             public override Task EndBuildAsync(PluginLoggerBase logger, CancellationToken cancellationToken)
@@ -305,7 +305,7 @@ public override async Task<CacheResult> GetCacheResultAsync(
 
                 if (_projectQuerySleepTime is not null)
                 {
-                    await Task.Delay(_projectQuerySleepTime.Value, cancellationToken).ConfigureAwait(false);
+                    await Task.Delay(_projectQuerySleepTime.Value, cancellationToken).ConfigureAwait(true);
                 }
 
                 QueryStartStops.Enqueue(queryId);
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index f61c0966a18..0b8e6e4942f 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -465,7 +465,7 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte
             int totalBytesRead = 0;
             while (totalBytesRead < bytesToRead)
             {
-                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None).ConfigureAwait(false);
+                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None).ConfigureAwait(true);
                 if (bytesRead == 0)
                 {
                     return totalBytesRead;
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 66522ffc321..c3024764eb1 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1976,7 +1976,7 @@ public async Task<BuildResult> BuildProjectFileAsync(
                     completion.SetResult(submission.BuildResult);
                 }, null);
 
-                return await completion.Task.ConfigureAwait(false);
+                return await completion.Task.ConfigureAwait(true);
             }
 
             public GraphBuildResult BuildGraphSubmission(GraphBuildRequestData requestData)
diff --git a/src/Tasks.UnitTests/DownloadFile_Tests.cs b/src/Tasks.UnitTests/DownloadFile_Tests.cs
index 797c94e97e0..d185f0a9f1b 100644
--- a/src/Tasks.UnitTests/DownloadFile_Tests.cs
+++ b/src/Tasks.UnitTests/DownloadFile_Tests.cs
@@ -300,10 +300,10 @@ public async Task NoRunawayLoop()
             };
 
             var runaway = Task.Run(() => downloadFile.Execute());
-            await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);
+            await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(true);
             runaway.IsCompleted.ShouldBeTrue("Task did not cancel");
 
-            var result = await runaway.ConfigureAwait(false);
+            var result = await runaway.ConfigureAwait(true);
             result.ShouldBeFalse(() => _mockEngine.Log);
         }
 
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index 3a0d437edb5..3d1f230b3e7 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -25,7 +25,7 @@ public async Task KillTree()
             Process p = Process.Start(psi); // sleep 10m.
 
             // Verify the process is running.
-            await Task.Delay(500).ConfigureAwait(false);
+            await Task.Delay(500).ConfigureAwait(true);
             p.HasExited.ShouldBe(false);
 
             // Kill the process.
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
index 08052351d5d..5808b19301d 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
@@ -26,7 +26,7 @@ public XunitTestAssemblyRunnerWithAssemblyFixture(ITestAssembly testAssembly,
         protected override async Task AfterTestAssemblyStartingAsync()
         {
             // Let everything initialize
-            await base.AfterTestAssemblyStartingAsync().ConfigureAwait(false);
+            await base.AfterTestAssemblyStartingAsync().ConfigureAwait(true);
 
             // Go find all the AssemblyFixtureAttributes adorned on the test assembly
             Aggregator.Run(() =>
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
index 5366fe96d07..64f7c02789f 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
@@ -27,7 +27,7 @@ public XunitTestClassRunnerWithAssemblyFixture(
 
         protected override async Task AfterTestClassStartingAsync()
         {
-            await base.AfterTestClassStartingAsync().ConfigureAwait(false);
+            await base.AfterTestClassStartingAsync().ConfigureAwait(true);
 
             Aggregator.Run(() =>
             {
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs
index 386008747da..0e1d4f6ceda 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs
@@ -16,7 +16,7 @@ public XunitTestFrameworkExecutorWithAssemblyFixture(AssemblyName assemblyName,
         protected override async void RunTestCases(IEnumerable<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions)
         {
             using (var assemblyRunner = new XunitTestAssemblyRunnerWithAssemblyFixture(TestAssembly, testCases, DiagnosticMessageSink, executionMessageSink, executionOptions))
-                await assemblyRunner.RunAsync().ConfigureAwait(false);
+                await assemblyRunner.RunAsync().ConfigureAwait(true);
         }
     }
 }
