diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 83bae5ca8cb..3d46e345013 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -229,7 +229,8 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
                 CommunicationsUtilities.Trace("Build finished.");
             }
 
-            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode);
+            int STD_OUTPUT_HANDLE = -11;
+            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode, STD_OUTPUT_HANDLE);
 
             return _exitResult;
         }
diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
index e24a67ff937..49598ad41c6 100644
--- a/src/Build/Logging/SimpleErrorLogger.cs
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -22,9 +22,9 @@ public class SimpleErrorLogger : INodeLogger
         public bool hasLoggedErrors = false;
         private bool acceptAnsiColorCodes;
         private uint? originalConsoleMode;
+        private const int STD_ERROR_HANDLE = -12;
         public SimpleErrorLogger()
         {
-            int STD_ERROR_HANDLE = -12;
             (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(STD_ERROR_HANDLE);
         }
 
@@ -82,7 +82,7 @@ public void Initialize(IEventSource eventSource)
 
         public void Shutdown()
         {
-            NativeMethods.RestoreConsoleMode(originalConsoleMode);
+            NativeMethods.RestoreConsoleMode(originalConsoleMode, STD_ERROR_HANDLE);
         }
     }
 }
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 943aad57dd2..811a0211133 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1537,11 +1537,11 @@ internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalC
         return (acceptAnsiColorCodes, outputIsScreen, originalConsoleMode);
     }
 
-    internal static void RestoreConsoleMode(uint? originalConsoleMode)
+    internal static void RestoreConsoleMode(uint? originalConsoleMode, int outputStreamHandle)
     {
         if (IsWindows && originalConsoleMode is not null)
         {
-            IntPtr stdOut = GetStdHandle(STD_OUTPUT_HANDLE);
+            IntPtr stdOut = GetStdHandle(outputStreamHandle);
             _ = SetConsoleMode(stdOut, originalConsoleMode.Value);
         }
     }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 417da66d0fc..f132e9ac512 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1043,7 +1043,8 @@ public static ExitType Execute(
                 // Wait for any pending cancel, so that we get any remaining messages
                 s_cancelComplete.WaitOne();
 
-                NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode);
+                int STD_OUTPUT_HANDLE = -11;
+                NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode, STD_OUTPUT_HANDLE);
 
 #if FEATURE_GET_COMMANDLINE
                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);
