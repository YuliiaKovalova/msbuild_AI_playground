diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index ba2ebaccd13..0fedd0d8bf3 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -808,7 +808,7 @@ public bool Question
         {
             get => _question;
             set => _question = value;
-        } 
+        }
 
         /// <summary>
         /// Gets or sets the project cache description to use for all <see cref="BuildSubmission"/> or <see cref="GraphBuildSubmission"/>
diff --git a/src/Framework/IIncrementalTask.cs b/src/Framework/IIncrementalTask.cs
index c4449ee907a..a7cfa3ba29f 100644
--- a/src/Framework/IIncrementalTask.cs
+++ b/src/Framework/IIncrementalTask.cs
@@ -1,5 +1,5 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
 
 #nullable disable
 
@@ -10,6 +10,6 @@ namespace Microsoft.Build.Framework
     /// </summary>
     public interface IIncrementalTask
     {
-        void  SetQuestion(bool question);
+        void SetQuestion(bool question);
     }
 }
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index 9b85376338c..6547e51cc29 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -193,8 +193,7 @@ public void QuestionCreateNewDirectory()
                 Assert.Single(t.DirectoriesCreated);
                 Assert.Contains(
                     String.Format(AssemblyResources.GetString("MakeDir.Comment"), dir),
-                    engine.Log
-                );
+                    engine.Log);
 
                 // Actually create the directory
                 // Note: Need a new task to reset the Log.HasLoggedErrors
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 77e387fd410..8bd561e9e3f 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -356,8 +356,7 @@ public void QuestionTouchNonExisting()
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.FileDoesNotExist"), mynonexisting_txt),
-                engine.Log
-            );
+                engine.Log);
         }
 
         /// <summary>
@@ -382,8 +381,7 @@ public void QuestionTouchNonExistingAlwaysCreate()
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.CreatingFile"), mynonexisting_txt, "AlwaysCreate"),
-                engine.Log
-            );
+                engine.Log);
         }
 
         /// <summary>
@@ -409,8 +407,7 @@ public void QuestionTouchExisting()
 
             Assert.Contains(
                 String.Format(AssemblyResources.GetString("Touch.Touching"), myexisting_txt),
-                engine.Log
-            );
+                engine.Log);
         }
     }
 }
diff --git a/src/Tasks/Delete.cs b/src/Tasks/Delete.cs
index ae749bec4df..3dcdc6a240d 100644
--- a/src/Tasks/Delete.cs
+++ b/src/Tasks/Delete.cs
@@ -85,7 +85,7 @@ private bool ValidateInputs()
 
             return true;
         }
-        
+
         /// <summary>
         /// Stop and return (in an undefined state) as soon as possible.
         /// </summary>
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 40e47666d34..9e174d054ca 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -365,21 +365,20 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
             bool isInstanceFileStateUpToDate = isCachedInInstance && lastModified == cachedInstanceFileState.LastModified;
             bool isProcessFileStateUpToDate = isCachedInProcess && lastModified == cachedProcessFileState.LastModified;
 
-            // first use the instance local cache
-            if (isInstanceFileStateUpToDate)
+            // If the process-wide cache contains an up-to-date FileState, always use it
+            if (isProcessFileStateUpToDate)
             {
-                // update the process cache if it is missing.
-                if (!isProcessFileStateUpToDate)
+                // For the next build, we may be using a different process. Update the file cache.
+                if (!isInstanceFileStateUpToDate)
                 {
-                    s_processWideFileStateCache[path] = cachedInstanceFileState;
+                    instanceLocalFileStateCache[path] = cachedProcessFileState;
+                    isDirty = true;
                 }
-
-                return cachedInstanceFileState;
+                return cachedProcessFileState;
             }
-            else if (isProcessFileStateUpToDate)
+            if (isInstanceFileStateUpToDate)
             {
-                isDirty = true;
-                return instanceLocalFileStateCache[path] = cachedProcessFileState;
+                return s_processWideFileStateCache[path] = cachedInstanceFileState;
             }
 
             // If no up-to-date FileState exists at this point, create one and take ownership
@@ -472,9 +471,7 @@ private string GetRuntimeVersion(string path)
             if (String.IsNullOrEmpty(fileState.RuntimeVersion))
             {
                 fileState.RuntimeVersion = getAssemblyRuntimeVersion(path);
-
-                if (!String.IsNullOrEmpty(fileState.RuntimeVersion))
-                    isDirty = true;
+                isDirty = true;
             }
 
             return fileState.RuntimeVersion;
@@ -506,11 +503,7 @@ private void GetAssemblyMetadata(
                     out fileState.scatterFiles,
                     out fileState.frameworkName);
 
-                // Don't diry the cache if results are unchanged.
-                if (fileState.dependencies != null)
-                {
-                    isDirty = true;
-                }
+                isDirty = true;
             }
 
             dependencies = fileState.dependencies;
