diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index e68755c2bdf..1eb283b9487 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -193,11 +193,6 @@ private bool TryAddAssemblyFromManifest(string pathToManifest, string manifestFo
                 ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), "SdkResolverDllInManifestMissing", pathToManifest, manifest.Path);
             }
 
-            if (string.IsNullOrEmpty(manifest.NamePattern))
-            {
-                manifest.NamePattern = ".*";
-            }
-
             manifestsList.Add(manifest);
 
             return true;
@@ -207,7 +202,7 @@ private bool TryAddAssembly(string assemblyPath, List<SdkResolverManifest> manif
         {
             if (string.IsNullOrEmpty(assemblyPath) || !FileUtilities.FileExistsNoThrow(assemblyPath)) return false;
 
-            manifestsList.Add(new SdkResolverManifest(null, assemblyPath, ".*"));
+            manifestsList.Add(new SdkResolverManifest(null, assemblyPath, null));
             return true;
         }
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index a82e683c7bd..107cd378880 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -123,21 +123,36 @@ private SdkResult ResolveSdkUsingMostSpecificResolvers(int submissionId, SdkRefe
 
             // Pick up the most specific resolvers (i.e. resolvers with the longest pattern that matches) from the list of resolvers.
             List<SdkResolverManifest> matchingResolversManifests = _resolversRegistry
-                .Where(r => System.Text.RegularExpressions.Regex.IsMatch(sdk.Name, r.NamePattern))
-                .OrderByDescending(r => r.NamePattern.Length)
+                .Where(r => !string.IsNullOrEmpty(r.NamePattern) && System.Text.RegularExpressions.Regex.IsMatch(sdk.Name, r.NamePattern))
                 .ToList();
 
-            if (matchingResolversManifests.Count == 0)
+            List<SdkResolver> resolvers = new List<SdkResolver>();
+            SdkResult sdkResult;
+            if (matchingResolversManifests.Count != 0)
             {
-                // No resolvers apply.
-                throw new NotImplementedException();
-                // return new SdkResult(sdk, null, null);
-            }
+                resolvers = GetResolvers(matchingResolversManifests, loggingContext, sdkReferenceLocation);
 
-            int patternMaxLength = matchingResolversManifests[0].NamePattern.Length;
-            matchingResolversManifests = matchingResolversManifests.Where(r => (r.NamePattern.Length == patternMaxLength)).ToList();
+                if (TryResolveSdkUsingSpecifiedResolvers(
+                    resolvers,
+                    submissionId,
+                    sdk,
+                    loggingContext,
+                    sdkReferenceLocation,
+                    solutionPath,
+                    projectPath,
+                    interactive,
+                    isRunningInVisualStudio,
+                    out sdkResult))
+                {
+                    return sdkResult;
+                }
+            }
 
-            List<SdkResolver> resolvers = GetResolvers(matchingResolversManifests, loggingContext, sdkReferenceLocation);
+            // Fallback to non-specific resolvers. 
+            resolvers = GetResolvers(
+                _resolversRegistry.Where(r => string.IsNullOrEmpty(r.NamePattern)).ToList(),
+                loggingContext,
+                sdkReferenceLocation).ToList();
 
             if (TryResolveSdkUsingSpecifiedResolvers(
                 resolvers,
@@ -149,25 +164,13 @@ private SdkResult ResolveSdkUsingMostSpecificResolvers(int submissionId, SdkRefe
                 projectPath,
                 interactive,
                 isRunningInVisualStudio,
-                out SdkResult sdkResult))
+                out sdkResult))
             {
                 return sdkResult;
             }
 
-            // Fallback. The most specific resolvers should be able to resolve the sdk. If this did not happen, let's use all other resovers.
-            resolvers = GetResolvers(_resolversRegistry, loggingContext, sdkReferenceLocation).ToList().Except(resolvers).ToList();
-            TryResolveSdkUsingSpecifiedResolvers(
-                resolvers,
-                submissionId,
-                sdk,
-                loggingContext,
-                sdkReferenceLocation,
-                solutionPath,
-                projectPath,
-                interactive,
-                isRunningInVisualStudio,
-                out sdkResult);
-            return sdkResult;
+            // No resolvers resolved the sdk.
+            return new SdkResult(sdk, null, null);
         }
 
         private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManifests, LoggingContext loggingContext, ElementLocation sdkReferenceLocation)
@@ -397,7 +400,7 @@ private void RegisterResolvers(LoggingContext loggingContext, ElementLocation lo
                 _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
 
                 IList<SdkResolver> defaultResolvers = _sdkResolverLoader.LoadDefaultResolvers(loggingContext, location);
-                SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("Default Resolvers", null, ".*");
+                SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("Default Resolvers", null, null);
                 _resolversRegistry.Add(sdkResolverManifest);
                 _resolversDict[sdkResolverManifest] = defaultResolvers;
             }
