diff --git a/src/Framework.UnitTests/SystemSetup_Tests.cs b/src/Framework.UnitTests/SystemSetup_Tests.cs
index 132097e243e..12d87e82bcb 100644
--- a/src/Framework.UnitTests/SystemSetup_Tests.cs
+++ b/src/Framework.UnitTests/SystemSetup_Tests.cs
@@ -17,7 +17,6 @@ public void VerifyLongPaths()
             NativeMethodsShared.MaxPath.ShouldBeGreaterThan(10000, "Long paths are not enabled. Enable long paths via the registry.");
         }
 
-#if NETCOREAPP
         [Fact]
         public void VerifySymLinksEnabled()
         {
@@ -26,7 +25,8 @@ public void VerifySymLinksEnabled()
             string path = Path.Combine(Path.GetTempPath(), "symLink");
             try
             {
-                string symLink = File.CreateSymbolicLink(path, file.Path).FullName;
+                string errorMessage = string.Empty;
+                NativeMethods.MakeSymbolicLink(path, file.Path, ref errorMessage).ShouldBeTrue(errorMessage);
                 string contents = File.ReadAllText(path);
                 contents.ShouldBe("fileContents", "You do not have permissions to create symbolic links.");
             }
@@ -38,6 +38,5 @@ public void VerifySymLinksEnabled()
                 }
             }
         }
-#endif
     }
 }
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index daaf0387950..1c2c8978d2f 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -10,7 +10,6 @@
 using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
-using System.Threading;
 
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
@@ -105,6 +104,13 @@ private enum PROCESSINFOCLASS : int
         MaxProcessInfoClass
     };
 
+    internal enum SymbolicLink
+    {
+        File = 0,
+        Directory = 1,
+        AllowUnprivilegedCreate = 2,
+    }
+
     private enum eDesiredAccess : int
     {
         DELETE = 0x00010000,
@@ -1475,6 +1481,40 @@ internal static void VerifyThrowWin32Result(int result)
     [DllImport("libc", SetLastError = true)]
     internal static extern int mkdir(string path, int mode);
 
+    //------------------------------------------------------------------------------
+    // CreateSymbolicLink
+    //------------------------------------------------------------------------------
+    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
+    [return: MarshalAs(UnmanagedType.I1)]
+    private static extern bool CreateSymbolicLink(string symLinkFileName, string targetFileName, SymbolicLink dwFlags);
+
+    [DllImport("libc", SetLastError = true)]
+    private static extern int symlink(string oldpath, string newpath);
+
+    internal static bool MakeSymbolicLink(string newFileName, string exitingFileName, ref string errorMessage)
+    {
+        bool symbolicLinkCreated;
+        if (IsWindows)
+        {
+            Version osVersion = Environment.OSVersion.Version;
+            SymbolicLink flags = SymbolicLink.File;
+            if (osVersion.Major >= 11 || (osVersion.Major == 10 && osVersion.Build >= 14972))
+            {
+                flags |= SymbolicLink.AllowUnprivilegedCreate;
+            }
+
+            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);
+            errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;
+        }
+        else
+        {
+            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;
+            errorMessage = symbolicLinkCreated ? null : "The link() library call failed with the following error code: " + Marshal.GetLastWin32Error();
+        }
+
+        return symbolicLinkCreated;
+    }
+
     /// <summary>
     /// Gets the current OEM code page which is used by console apps
     /// (as opposed to the Windows/ANSI code page)
