diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 81b5048f0f7..723c1932c9f 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -158,5 +158,8 @@
     <None Update="TestResources\mycert.pfx">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
+    <None Update="TestResources\sample.zip">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
   </ItemGroup>
 </Project>
diff --git a/src/Tasks.UnitTests/TestResources/sample.zip b/src/Tasks.UnitTests/TestResources/sample.zip
new file mode 100644
index 00000000000..95ba2b3d3ac
Binary files /dev/null and b/src/Tasks.UnitTests/TestResources/sample.zip differ
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index b53c19047be..bcfe0b54460 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -7,6 +7,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.Shared;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
@@ -449,5 +450,39 @@ public void LogsErrorIfExcludeContainsPropertyReferences()
                 _mockEngine.Log.ShouldContain("MSB3938", customMessage: _mockEngine.Log);
             }
         }
+
+        [UnixOnlyFact]
+        public void CanKeepUnixFilePermissions()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+            TransientTestFolder source = testEnvironment.CreateFolder(createFolder: true);
+            string executableName = "myapp";
+            var sourceFile = testEnvironment.CreateFile(source, executableName, "Dummy executable");
+
+            var ExecuteCommand = (string command, string filePath) =>
+            {
+                string output = RunnerUtilities.RunProcessAndGetOutput($"/bin/sh", $"-c \"{command} {sourceFile.Path}\"", out bool success);
+                return output;
+            };
+            ExecuteCommand("chmod +x", sourceFile.Path);
+            var permissions = ExecuteCommand("ls -l", sourceFile.Path).Substring(0, 10);
+
+            TransientZipArchive zipArchive = TransientZipArchive.Create(source, testEnvironment.CreateFolder(createFolder: true));
+            TransientTestFolder destination = testEnvironment.CreateFolder(createFolder: false);
+            Unzip unzip = new Unzip
+            {
+                BuildEngine = _mockEngine,
+                DestinationFolder = new TaskItem(destination.Path),
+                OverwriteReadOnlyFiles = true,
+                SkipUnchangedFiles = false,
+                SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) },
+            };
+            unzip.Execute().ShouldBeTrue(_mockEngine.Log);
+            string unzippedFilePath = Path.Combine(destination.Path, executableName);
+            _mockEngine.Log.ShouldContain(unzippedFilePath, customMessage: _mockEngine.Log);
+            File.Exists(unzippedFilePath).ShouldBeTrue();
+            var unzippedFilePermissions = ExecuteCommand("ls -l", unzippedFilePath).Substring(0, 10);
+            unzippedFilePermissions.ShouldBe(permissions);
+        }
     }
 }
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index ff6a99fbd48..6039813ba39 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -231,7 +231,33 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector
                 {
                     Log.LogMessageFromResources(MessageImportance.Normal, "Unzip.FileComment", zipArchiveEntry.FullName, destinationPath.FullName);
 
+#if NET
+                    FileStreamOptions fileStreamOptions = new()
+                    {
+                        Access = FileAccess.Write,
+                        Mode = FileMode.Create,
+                        Share = FileShare.None,
+                        BufferSize = 0x1000
+                    };
+
+                    const UnixFileMode OwnershipPermissions =
+                        UnixFileMode.UserRead | UnixFileMode.UserWrite | UnixFileMode.UserExecute |
+                        UnixFileMode.GroupRead | UnixFileMode.GroupWrite | UnixFileMode.GroupExecute |
+                        UnixFileMode.OtherRead | UnixFileMode.OtherWrite | UnixFileMode.OtherExecute;
+
+                    // Restore Unix permissions.
+                    // For security, limit to ownership permissions, and respect umask (through UnixCreateMode).
+                    // We don't apply UnixFileMode.None because .zip files created on Windows and .zip files created
+                    // with previous versions of .NET don't include permissions.
+                    UnixFileMode mode = (UnixFileMode)(zipArchiveEntry.ExternalAttributes >> 16) & OwnershipPermissions;
+                    if (mode != UnixFileMode.None && !NativeMethodsShared.IsWindows)
+                    {
+                        fileStreamOptions.UnixCreateMode = mode;
+                    }
+                    using (FileStream destination = new FileStream(destinationPath.FullName, fileStreamOptions))
+#else
                     using (Stream destination = File.Open(destinationPath.FullName, FileMode.Create, FileAccess.Write, FileShare.None))
+#endif
                     using (Stream stream = zipArchiveEntry.Open())
                     {
                         stream.CopyToAsync(destination, _DefaultCopyBufferSize, _cancellationToken.Token)
