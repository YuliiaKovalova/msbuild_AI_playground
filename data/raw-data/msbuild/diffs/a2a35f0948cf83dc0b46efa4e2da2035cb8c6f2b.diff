diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index f8b86a5a5ad..4b0708f52cf 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -600,7 +600,6 @@ public TaskExecutionContext(string startupDirectory, System.Collections.Generic.
         public System.Globalization.CultureInfo Culture { get { throw null; } }
         public string StartupDirectory { get { throw null; } }
         public System.Globalization.CultureInfo UICulture { get { throw null; } }
-        public string GetFullPath(string path) { throw null; }
     }
     public partial class TaskFinishedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 481d3e8aba1..1febc7776cc 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -599,7 +599,6 @@ public TaskExecutionContext(string startupDirectory, System.Collections.Generic.
         public System.Globalization.CultureInfo Culture { get { throw null; } }
         public string StartupDirectory { get { throw null; } }
         public System.Globalization.CultureInfo UICulture { get { throw null; } }
-        public string GetFullPath(string path) { throw null; }
     }
     public partial class TaskFinishedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index dbda193ec76..fbb7a0e2df4 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -1180,6 +1180,10 @@ public SignFile() { }
         public string TimestampUrl { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public static partial class TaskExecutionContextExtension
+    {
+        public static string GetFullPath(this Microsoft.Build.Framework.TaskExecutionContext taskExecutionContext, string path) { throw null; }
+    }
     public abstract partial class TaskExtension : Microsoft.Build.Utilities.Task
     {
         internal TaskExtension() { }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 6ed70860a5a..a0a0580b65f 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -865,6 +865,10 @@ public SGen() { }
         public override bool Execute() { throw null; }
         protected override string GenerateFullPathToTool() { throw null; }
     }
+    public static partial class TaskExecutionContextExtension
+    {
+        public static string GetFullPath(this Microsoft.Build.Framework.TaskExecutionContext taskExecutionContext, string path) { throw null; }
+    }
     public abstract partial class TaskExtension : Microsoft.Build.Utilities.Task
     {
         internal TaskExtension() { }
diff --git a/src/Framework/TaskExecutionContext.cs b/src/Framework/TaskExecutionContext.cs
index e4530eb994f..4a4436e3b62 100644
--- a/src/Framework/TaskExecutionContext.cs
+++ b/src/Framework/TaskExecutionContext.cs
@@ -30,44 +30,6 @@ public TaskExecutionContext(string startupDirectory, Dictionary<string, string>
             Culture = culture;
             UICulture = uiCulture;
         }
-
-        /// <summary>
-        /// Absolutize the given path with the startup directory.
-        /// </summary>
-        /// <param name="path">Relative or absolute path.</param>
-        /// <returns></returns>
-        public string GetFullPath(string path)
-        {
-            if (String.IsNullOrEmpty(StartupDirectory) || String.IsNullOrEmpty(path))
-            {
-                return path;
-            }
-
-            try
-            {
-                // Path.GetFullPath is using in order to eliminate possible "./" and "../" in the resulted path.
-                // TODO: Check what version of Path.GetFullPath we are using. Does it use IO operations in file system? If yes, consider other options for dealing with "./" and "../".
-                // However, if the combined path consists of different path separators (both windows and unix style),
-                // then the behavior of Path.GetFullPath differs in windows and unix systems. Windows' function eleminates the internal "./" and "../"
-                // and Unix's function does not. We are using FixFilePath to remove windows-style separators when on unix machine.
-                return Path.GetFullPath(Path.Combine(StartupDirectory, FixFilePath(path)));
-            }
-            catch { }
-
-            return path;
-        }
-
-        // This function is a duplicate of FileUtilities.FixFilePath.
-        // The reason for code duplication is that we do not want to bring new dependencies to Microsoft.Build.Framework.
-        /// <summary>
-        /// Replaces Windows-style path separators with Unix-style path separators, when performed on unix.
-        /// </summary>
-        /// <param name="path"></param>
-        /// <returns></returns>
-        private static string FixFilePath(string path)
-        {
-            return string.IsNullOrEmpty(path) || Path.DirectorySeparatorChar == '\\' ? path : path.Replace('\\', '/');//.Replace("//", "/");
-        }
     }
 
     // TODO: move to own file
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 3793d85a877..8ac3c3e6663 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -176,8 +176,6 @@ internal static void ClearCacheDirectory()
             }
         }
 
-        // There is a duplicate for this function in TaskExecutionContext.cs
-        // The reason for code duplication is that we do not want to bring new dependencies to Microsoft.Build.Framework.
         /// <summary>
         /// If the given path doesn't have a trailing slash then add one.
         /// If the path is an empty string, does not modify it.
@@ -447,6 +445,11 @@ From Path.cs in the CLR
         }
 #endif // FEATURE_LEGACY_GETFULLPATH
 
+        /// <summary>
+        /// Replaces Windows-style path separators with Unix-style path separators, when performed on unix.
+        /// </summary>
+        /// <param name="path"></param>
+        /// <returns></returns>
         internal static string FixFilePath(string path)
         {
             return string.IsNullOrEmpty(path) || Path.DirectorySeparatorChar == '\\' ? path : path.Replace('\\', '/');//.Replace("//", "/");
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 8c121a462b6..0d6b1aa03db 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -249,7 +249,7 @@ public string[] TargetFrameworkSubsets
         ///
         ///     System, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
         ///
-        /// or (full ? TODO - check) path to the assembly.
+        /// or path to the assembly.
         ///
         /// These names will be resolved into full paths and all dependencies will be found.
         ///
@@ -3108,8 +3108,8 @@ void AbsolutizePathsInInputs()
 
             for (int i = 0; i < _installedAssemblyTables.Length; i++)
             {
-                // TODO: check if it could be URI.
-                // It is said that it's on disk in docu, but code does not prohibit URI.
+                // Note: it is said that _installedAssemblyTables is a list of XML files. _installedAssemblyTables[i].ItemSpec is passed to XmlReader.
+                // Code itself does not prohibit _installedAssemblyTables[i].ItemSpec to be an URL, however, it does not seem as we need to support the file on web.
                 _installedAssemblyTables[i].ItemSpec = _concurrencyExecutionContext.GetFullPath(_installedAssemblyTables[i].ItemSpec);
             }
 
diff --git a/src/Tasks/AssemblyDependency/TaskExecutionContextExtension.cs b/src/Tasks/AssemblyDependency/TaskExecutionContextExtension.cs
new file mode 100644
index 00000000000..f499f56f263
--- /dev/null
+++ b/src/Tasks/AssemblyDependency/TaskExecutionContextExtension.cs
@@ -0,0 +1,39 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.IO;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Tasks
+{
+    public static class TaskExecutionContextExtension
+    {
+        /// <summary>
+        /// Absolutize the given path with the startup directory.
+        /// </summary>
+        /// <param name="taskExecutionContext"></param>
+        /// <param name="path">Relative or absolute path.</param>
+        /// <returns></returns>
+        public static string GetFullPath(this TaskExecutionContext taskExecutionContext,  string path)
+        {
+            if (String.IsNullOrEmpty(taskExecutionContext.StartupDirectory) || String.IsNullOrEmpty(path))
+            {
+                return path;
+            }
+
+            try
+            {
+                // Path.GetFullPath is using in order to eliminate possible "./" and "../" in the resulted path.
+                // However, if the combined path consists of different path separators (both windows and unix style),
+                // then the behavior of Path.GetFullPath differs in windows and unix systems, as in Windows both Windows and Unix style separators works and in Unix - not.
+                // Windows' function eleminates the internal "./" and "../", Unix's function does not. We are using FixFilePath to remove windows-style separators when on unix machine.
+                return Path.GetFullPath(Path.Combine(taskExecutionContext.StartupDirectory, FileUtilities.FixFilePath(path)));
+            }
+            catch { }
+
+            return path;
+        }
+    }
+}
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 6e05beb2f75..8e5f26ab308 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -302,6 +302,9 @@
     <Compile Include="AssemblyDependency\TaskItemSpecFilenameComparer.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="AssemblyDependency\TaskExecutionContextExtension.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
     <Compile Include="AssemblyDependency\UnificationReason.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
