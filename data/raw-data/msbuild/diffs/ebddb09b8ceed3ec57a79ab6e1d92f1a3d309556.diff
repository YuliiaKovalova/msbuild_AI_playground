diff --git a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
index b54e07f48fe..408eb993433 100644
--- a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
+++ b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
@@ -67,5 +67,18 @@
   <ItemGroup>
     <Service Include="{82a7f48d-3b50-4b1e-b82e-3ada8210c358}" />
   </ItemGroup>
+  
+  <ItemGroup>
+   <Content Include="TestAssets\**" CopyToOutputDirectory="Always" />
+  </ItemGroup>
+  
+  <ItemGroup>
+    <Compile Remove="TestAssets\TargetInvocationException\LoggerProject\FaultyLogger.cs" />
+  </ItemGroup>
+  
+  <ItemGroup>
+    <Folder Include="TestAssets\MemberAccessException\MainProject\" />
+    <Folder Include="TestAssets\TargetInvocationException\MainProject\" />
+  </ItemGroup>
 
 </Project>
diff --git a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLoggerAdapter.cs b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLoggerAdapter.cs
new file mode 100644
index 00000000000..31104ef64bf
--- /dev/null
+++ b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLoggerAdapter.cs
@@ -0,0 +1,26 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+using Newtonsoft.Json.Linq;
+
+namespace Microsoft.Build.CommandLine.UnitTests.TestAssets.MemberAccessException.LoggerProject
+{
+    public class CustomLoggerAdapter : ILogger
+    {
+        private CustomLoggerAdapter()
+        {
+            Console.WriteLine("Private constructor");
+        }
+
+        public string? Parameters { get; set; }
+        public LoggerVerbosity Verbosity { get; set; }
+        public void Initialize(IEventSource eventSource) { }
+        public void Shutdown() { }
+    }
+}
diff --git a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLoggerDescription.csproj b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLoggerDescription.csproj
new file mode 100644
index 00000000000..b528e40d474
--- /dev/null
+++ b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLoggerDescription.csproj
@@ -0,0 +1,14 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netstandard2.0</TargetFramework>
+    <OutputType>Library</OutputType>
+    <AssemblyName>CustomLoggerDescription</AssemblyName>
+    <OutputPath>bin</OutputPath>
+    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
+    <LangVersion>8.0</LangVersion>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.Build.Framework" Version="17.0.0" />
+    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
+  </ItemGroup>
+</Project>
diff --git a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/MainProject/MainProject.csproj b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/MainProject/MainProject.csproj
new file mode 100644
index 00000000000..7c046d5d2b1
--- /dev/null
+++ b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/MainProject/MainProject.csproj
@@ -0,0 +1,7 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netstandard2.0</TargetFramework>
+    <OutputType>Exe</OutputType>
+    <AssemblyName>MainProject</AssemblyName>
+  </PropertyGroup>
+</Project>
diff --git a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs
new file mode 100644
index 00000000000..62fded03c89
--- /dev/null
+++ b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs
@@ -0,0 +1,28 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+using Newtonsoft.Json.Linq;
+
+namespace Microsoft.Build.CommandLine.UnitTests.TestAssets.TargetInvocationException.LoggerProject
+{
+    public class FaultyLogger : ILogger
+    {
+        public FaultyLogger()
+        {
+            throw new Exception("Constructor failed intentionally.");
+        }
+
+        public string Parameters { get; set; }
+        public LoggerVerbosity Verbosity { get; set; }
+
+        public void Initialize(IEventSource eventSource) { }
+
+        public void Shutdown() { }
+    }
+}
diff --git a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj
new file mode 100644
index 00000000000..b528e40d474
--- /dev/null
+++ b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj
@@ -0,0 +1,14 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netstandard2.0</TargetFramework>
+    <OutputType>Library</OutputType>
+    <AssemblyName>CustomLoggerDescription</AssemblyName>
+    <OutputPath>bin</OutputPath>
+    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
+    <LangVersion>8.0</LangVersion>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.Build.Framework" Version="17.0.0" />
+    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
+  </ItemGroup>
+</Project>
diff --git a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/MainProject/MainProject.csproj b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/MainProject/MainProject.csproj
new file mode 100644
index 00000000000..7c046d5d2b1
--- /dev/null
+++ b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/MainProject/MainProject.csproj
@@ -0,0 +1,7 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netstandard2.0</TargetFramework>
+    <OutputType>Exe</OutputType>
+    <AssemblyName>MainProject</AssemblyName>
+  </PropertyGroup>
+</Project>
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 428c7366c6c..b7ef01ebd61 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -38,13 +38,17 @@ public class XMakeAppTests : IDisposable
 
         private readonly ITestOutputHelper _output;
         private readonly TestEnvironment _env;
-
+        
         public XMakeAppTests(ITestOutputHelper output)
         {
             _output = output;
             _env = UnitTests.TestEnvironment.Create(_output);
         }
 
+        private static string AssemblyLocation { get; } = Path.Combine(Path.GetDirectoryName(typeof(XMakeAppTests).Assembly.Location) ?? AppContext.BaseDirectory);
+
+        private static string TestAssetsRootPath { get; } = Path.Combine(AssemblyLocation, "TestAssets");
+
         private const string AutoResponseFileName = "MSBuild.rsp";
 
         [Fact]
@@ -2491,269 +2495,101 @@ public void MissingOptionalLoggersAreIgnored(string logger, string expectedLogge
         }
 
         [Theory]
-        [InlineData("-logger:,{0}\\InvalidPath\\CustomLogger.dll", "{0}\\InvalidPath\\CustomLogger.dll")]
-        [InlineData("-logger:,{0}\\NonExistent\\Logger.dll", "{0}\\NonExistent\\Logger.dll")]
-        [InlineData("-distributedlogger:,{0}\\Fake\\DistLogger.dll", "{0}\\Fake\\DistLogger.dll")]
-        [InlineData("-distributedlogger:,{0}\\Missing\\DistLogger.dll", "{0}\\Missing\\DistLogger.dll")]
+        [InlineData("-logger:,CustomLogger.dll", "CustomLogger.dll")]
+        [InlineData("-logger:,Logger.dll", "Logger.dll")]
         public void LoggerThrowsIOExceptionWhenDllNotFound(string logger, string expectedLoggerName)
         {
-            string projectString =
-                "<Project>" +
-                "<Target Name=\"t\"><Message Text=\"Hello\"/></Target>" +
-                "</Project>";
+            string projectString ="<Project><Target Name=\"t\"><Message Text=\"Hello\"/></Target></Project>";
             var tempDir = _env.CreateFolder();
             var projectFile = tempDir.CreateFile("iologgertest.proj", projectString);
 
             var parametersLogger = $"{logger} -verbosity:diagnostic \"{projectFile.Path}\"";
 
             var output = RunnerUtilities.ExecMSBuild(parametersLogger, out bool successfulExit, _output);
-            successfulExit.ShouldBe(false); // Build should fail due to logger creation error
+            successfulExit.ShouldBe(false); 
 
-            output.ShouldNotContain("Hello", customMessage: output); // Build should fail before reaching the Message task
+            output.ShouldNotContain("Hello", customMessage: output); 
             output.ShouldContain($"The specified logger \"{expectedLoggerName}\" could not be created", customMessage: output);
         }
 
         [Theory]
-        [InlineData("-logger:,{0}\\BadFile1.dll", "{0}\\BadFile1.dll")]
-        [InlineData("-logger:,{0}\\BadFile2.dll", "{0}\\BadFile2.dll")]
-        [InlineData("-distributedlogger:,{0}\\BadFile3.dll", "{0}\\BadFile3.dll")]
-        [InlineData("-distributedlogger:,{0}\\BadFile4.dll", "{0}\\BadFile4.dll")]
-        public void LoggerThrowsBadImageFormatExceptionWhenFileIsInvalid(string loggerTemplate, string expectedLoggerName)
+        [InlineData("-logger:,BadFile.dll", "BadFile.dll")]
+        [InlineData("-distributedlogger:,BadFile.dll", "BadFile.dll")]
+        public void LoggerThrowsBadImageFormatExceptionWhenFileIsInvalid(string logger, string expectedLoggerName)
         {
-            string projectString =
-                "<Project>" +
-                "<Target Name=\"t\"><Message Text=\"Hello\"/></Target>" +
-                "</Project>";
+            string projectString ="<Project><Target Name=\"t\"><Message Text=\"Hello\"/></Target></Project>";
             var tempDir = _env.CreateFolder();
             var projectFile = tempDir.CreateFile("badimagetest.proj", projectString);
 
-            // Create a .txt file with invalid content
-            var dllFileName = loggerTemplate.Split(',')[1].Replace("{0}\\", ""); // Extract file name (e.g., BadFile1.dll)
-            var txtFilePath = Path.Combine(tempDir.Path, dllFileName.Replace(".dll", ".txt")); // e.g., BadFile1.txt
-            var dllFilePath = Path.Combine(tempDir.Path, dllFileName); // e.g., BadFile1.dll
-
-            File.WriteAllText(txtFilePath, "This is invalid content, not a valid .NET assembly.");
-
-            // Rename the .txt file to .dll
-            File.Move(txtFilePath, dllFilePath);
+            var dllFilePath = Path.Combine(tempDir.Path, expectedLoggerName);
+            File.WriteAllText(dllFilePath, "Invalid content, not a valid .NET assembly.");
 
-            // Format the logger parameter with proper escaping
-            var logger = $"-logger:,\"{dllFilePath}\"";
-            var parametersLogger = $"-noautoresponse -nologo {logger} -verbosity:diagnostic \"{projectFile.Path}\"";
+            var loggerParam = $"\"{logger}\"";
+            var parametersLogger = $"{loggerParam} -verbosity:diagnostic \"{projectFile.Path}\"";
 
-            // Standardize path separators in expectedLoggerName
-            expectedLoggerName = string.Format(expectedLoggerName, tempDir.Path.Replace('\\', Path.DirectorySeparatorChar));
-            expectedLoggerName = expectedLoggerName.Replace('\\', Path.DirectorySeparatorChar); // Ensure all separators are correct
-
-            // Execute MSBuild
             var output = RunnerUtilities.ExecMSBuild(parametersLogger, out bool successfulExit, _output);
-            successfulExit.ShouldBe(false); // Build should fail due to logger creation error
+            successfulExit.ShouldBe(false);
 
-            output.ShouldNotContain("Hello", customMessage: output); // Build should fail before reaching the Message task
+            output.ShouldNotContain("Hello", customMessage: output);
             output.ShouldContain($"The specified logger \"{expectedLoggerName}\" could not be created", customMessage: output);
         }
 
         [Theory]
-        [InlineData("-logger:,\"{0}\\LoggerProj\\bin\\Debug\\net472\\CustomLoggerDescription.dll\"", "{0}\\LoggerProj\\bin\\Debug\\net472\\CustomLoggerDescription.dll")]
-        [InlineData("-distributedlogger:,\"{0}\\LoggerProj\\bin\\Debug\\net472\\CustomLoggerDescription.dll\"", "{0}\\LoggerProj\\bin\\Debug\\net472\\CustomLoggerDescription.dll")]
-        public void LoggerThrowsMemberAccessExceptionWhenClassIsInvalid(string loggerTemplate, string expectedLoggerName)
+        [InlineData("MemberAccessException", "-logger:,", "CustomLoggerDescription.dll")]
+        [InlineData("MemberAccessException", "-distributedlogger:,", "CustomLoggerDescription.dll")]
+        public void LoggerThrowsMemberAccessExceptionWhenClassIsInvalid(string memberAccess, string loggerTemplate, string expectedLoggerName)
         {
-            var tempDir = _env.CreateFolder();
-
-            var mainProjDir = Path.Combine(tempDir.Path, "MainProj");
-            var loggerProjDir = Path.Combine(tempDir.Path, "LoggerProj");
-            var loggerBinDir = Path.Combine(loggerProjDir, "bin", "Debug", "net472");
-            var secureLoggerDir = Path.Combine(tempDir.Path, "SecureLoggerProj");
-            Directory.CreateDirectory(mainProjDir);
-            Directory.CreateDirectory(loggerBinDir);
-            Directory.CreateDirectory(secureLoggerDir);
-
-            // Create MainProj.csproj
-            var mainProjPath = Path.Combine(mainProjDir, "MainProj.csproj");
-            File.WriteAllText(mainProjPath,
-                @"<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
-  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
-  <PropertyGroup>
-    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
-    <OutputType>Exe</OutputType>
-    <AssemblyName>MainProj</AssemblyName>
-    <OutputPath>bin\Debug\</OutputPath>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include=""System"" />
-  </ItemGroup>
-</Project>");
-
-            // Create LoggerProj files
-            var loggerCsPath = Path.Combine(loggerProjDir, "CustomLoggerAdapter.cs");
-            File.WriteAllText(loggerCsPath,
-                @"using System;
-using Microsoft.Build.Framework;
-
-namespace CustomLoggerProj
-{
-    public class CustomLoggerAdapter : ILogger
-    {
-        private CustomLoggerAdapter()
-        {
-            Console.WriteLine(""Private constructor"");
-        }
+            using (var env = TestEnvironment.Create())
+            {
+                var memberAccessPath = Path.Combine(TestAssetsRootPath, memberAccess);
+                var mainProjDir = Path.Combine(memberAccessPath, "MainProject");
+                var loggerProjDir = Path.Combine(memberAccessPath, "LoggerProject");
 
-        public string Parameters { get; set; }
-        public LoggerVerbosity Verbosity { get; set; }
-        public void Initialize(IEventSource eventSource) { }
-        public void Shutdown() { }
-    }
-}");
+                var mainProjPath = Path.Combine(mainProjDir, "MainProject.csproj");
 
-            var loggerCsprojPath = Path.Combine(loggerProjDir, "CustomLoggerDescription.csproj");
-            File.WriteAllText(loggerCsprojPath,
-                $@"<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
-  <PropertyGroup>
-    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
-    <TargetFrameworkMoniker>.NETFramework,Version=v4.7.2</TargetFrameworkMoniker>
-    <OutputType>Library</OutputType>
-    <AssemblyName>CustomLoggerDescription</AssemblyName>
-    <OutputPath>bin\Debug\net472\</OutputPath>
-    <NoDefaultExcludes>true</NoDefaultExcludes>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include=""Microsoft.Build.Framework"">
-    </Reference>
-    <Reference Include=""System"" />
-    <Compile Include=""CustomLoggerAdapter.cs"" />
-  </ItemGroup>
-  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
-  <Target Name=""DebugFramework"" BeforeTargets=""CoreCompile"">
-    <Message Text=""TargetFrameworkVersion: $(TargetFrameworkVersion)"" Importance=""High"" />
-    <Message Text=""TargetFrameworkMoniker: $(TargetFrameworkMoniker)"" Importance=""High"" />
-    <Message Text=""OutputType: $(OutputType)"" Importance=""High"" />
-    <Message Text=""OutputPath: $(OutputPath)"" Importance=""High"" />
-  </Target>
-</Project>");
+                string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(loggerProjDir, $"CustomLoggerDescription.csproj")} -restore -verbosity:n", out bool success);
 
-            // Build LoggerProj to generate CustomLoggerDescription.dll
-            var loggerBuildParameters = $"-noautoresponse -nologo \"{loggerCsprojPath}\" -t:Build -p:Configuration=Debug -p:TargetFrameworkVersion=v4.7.2 -verbosity:diagnostic";
-            var loggerBuildOutput = RunnerUtilities.ExecMSBuild(loggerBuildParameters, out bool loggerBuildSuccessful, _output);
+                var loggerDllPath = Path.Combine(loggerProjDir, "bin", "netstandard2.0", expectedLoggerName);
+                var loggerSwitch = $"{loggerTemplate}{loggerDllPath}";
+                var mainBuildParameters = $"{mainProjPath} -restore {loggerSwitch} -verbosity:diagnostic";
 
-            // Format logger parameter to match MSBuild command
-            var loggerSwitch = string.Format(loggerTemplate, tempDir.Path);
-            var mainBuildParameters = $"-noautoresponse -nologo \"{mainProjPath}\" {loggerSwitch} -verbosity:diagnostic";
+                string mainBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                    mainBuildParameters,
+                    out bool successfulExit);
 
-            expectedLoggerName = string.Format(expectedLoggerName, tempDir.Path);
-            // Execute MSBuild on MainProj and redirect output to file
-            var mainBuildOutput = RunnerUtilities.ExecMSBuild(mainBuildParameters, out bool successfulExit, _output);
-            successfulExit.ShouldBe(false);
-
-            mainBuildOutput.ShouldNotContain("Hello", customMessage: mainBuildOutput); // Build should fail before reaching the Message task
-            mainBuildOutput.ShouldContain($"The specified logger \"{expectedLoggerName}\" could not be created and will not be used.", customMessage: mainBuildOutput);
+                successfulExit.ShouldBeFalse(mainBuildLog);
+                mainBuildLog.ShouldContain($"The specified logger \"{loggerDllPath}\" could not be created and will not be used.");
+            }
         }
 
         [Theory]
-        [InlineData("-logger:,\"{0}\\LoggerProj\\bin\\Debug\\net472\\FaultyLogger.dll\"", "{0}\\LoggerProj\\bin\\Debug\\net472\\FaultyLogger.dll")]
-        public void LoggerThrowsTargetInvocationException(string loggerTemplate, string expectedLoggerName)
-        {
-            // Arrange
-            var tempDir = _env.CreateFolder();
-
-            var mainProjDir = Path.Combine(tempDir.Path, "MainProj");
-            var loggerProjDir = Path.Combine(tempDir.Path, "LoggerProj");
-            var loggerBinDir = Path.Combine(loggerProjDir, "bin", "Debug", "net472");
-            Directory.CreateDirectory(mainProjDir);
-            Directory.CreateDirectory(loggerBinDir);
-
-            // Create MainProj.csproj
-            var mainProjPath = Path.Combine(mainProjDir, "MainProj.csproj");
-            File.WriteAllText(mainProjPath,
-                @"<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
-  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
-  <PropertyGroup>
-    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
-    <OutputType>Exe</OutputType>
-    <AssemblyName>MainProj</AssemblyName>
-    <OutputPath>bin\Debug\</OutputPath>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include=""System"" />
-  </ItemGroup>
-  <Target Name=""SayHello"">
-    <Message Text=""Hello"" Importance=""High"" />
-  </Target>
-</Project>");
-
-            // Create LoggerProj files
-            var loggerCsPath = Path.Combine(loggerProjDir, "FaultyLogger.cs");
-            File.WriteAllText(loggerCsPath,
-                @"using Microsoft.Build.Framework;
-using System;
-
-namespace FaultyLoggerProj
-{
-    public class FaultyLogger : ILogger
-    {
-        public FaultyLogger()
-        {
-            throw new Exception(""Constructor failed intentionally."");
-        }
-
-        public string Parameters { get; set; }
-        public LoggerVerbosity Verbosity { get; set; }
-
-        public void Initialize(IEventSource eventSource)
+        [InlineData("TargetInvocationException", "-logger:,", "CustomLoggerDescription.dll")]
+        [InlineData("TargetInvocationException", "-distributedlogger:,", "CustomLoggerDescription.dll")]
+        public void LoggerThrowsTargetInvocationException(string targetInvocation, string loggerTemplate, string expectedLoggerName)
         {
-            
-        }
-
-        public void Shutdown()
-        {
-            
-        }
-    }
-}");
-
-            var loggerCsprojPath = Path.Combine(loggerProjDir, "FaultyLogger.csproj");
-            File.WriteAllText(loggerCsprojPath,
-                $@"<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
-  <PropertyGroup>
-    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
-    <TargetFrameworkMoniker>.NETFramework,Version=v4.7.2</TargetFrameworkMoniker>
-    <OutputType>Library</OutputType>
-    <AssemblyName>FaultyLogger</AssemblyName>
-    <OutputPath>bin\Debug\net472\</OutputPath>
-    <NoDefaultExcludes>true</NoDefaultExcludes>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include=""Microsoft.Build.Framework"">
-      <HintPath>E:\msbuild\artifacts\bin\bootstrap\net472\MSBuild\Current\Bin\Microsoft.Build.Framework.dll</HintPath>
-    </Reference>
-    <Reference Include=""System"" />
-    <Compile Include=""FaultyLogger.cs"" />
-  </ItemGroup>
-  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
-  <Target Name=""DebugFramework"" BeforeTargets=""CoreCompile"">
-    <Message Text=""TargetFrameworkVersion: $(TargetFrameworkVersion)"" Importance=""High"" />
-    <Message Text=""TargetFrameworkMoniker: $(TargetFrameworkMoniker)"" Importance=""High"" />
-    <Message Text=""OutputType: $(OutputType)"" Importance=""High"" />
-    <Message Text=""OutputPath: $(OutputPath)"" Importance=""High"" />
-  </Target>
-</Project>");
+            using (var env = TestEnvironment.Create())
+            {
+                var targetInvocationPath = Path.Combine(TestAssetsRootPath, targetInvocation);
+                var mainProjDir = Path.Combine(targetInvocationPath, "MainProject");
+                var loggerProjDir = Path.Combine(targetInvocationPath, "LoggerProject");
 
-            // Build LoggerProj to generate FaultyLogger.dll
-            var loggerBuildParameters = $"-noautoresponse -nologo \"{loggerCsprojPath}\" -t:Build -p:Configuration=Debug -p:TargetFrameworkVersion=v4.7.2 -verbosity:diagnostic";
+                var mainProjPath = Path.Combine(mainProjDir, "MainProject.csproj");
 
-            // Format logger parameter to match MSBuild command
-            var loggerSwitch = string.Format(loggerTemplate, tempDir.Path);
-            var mainBuildParameters = $"-noautoresponse -nologo \"{mainProjPath}\" {loggerSwitch} -verbosity:diagnostic";
+                string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(loggerProjDir, $"FaultyLogger.csproj")} -restore -verbosity:n", out bool success);
 
-            expectedLoggerName = string.Format(expectedLoggerName, tempDir.Path);
+                var loggerDllPath = Path.Combine(loggerProjDir, "bin", "netstandard2.0", expectedLoggerName);
+                var loggerSwitch = $"{loggerTemplate}{loggerDllPath}";
+                var mainBuildParameters = $"{mainProjPath} -restore {loggerSwitch} -verbosity:diagnostic";
 
-            // Act
-            var mainBuildOutput = RunnerUtilities.ExecMSBuild(mainBuildParameters, out bool successfulExit, _output);
-            successfulExit.ShouldBe(false);
+                string mainBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                    mainBuildParameters,
+                    out bool successfulExit);
 
-            // Assert
-            mainBuildOutput.ShouldNotContain("Hello", customMessage: mainBuildOutput);
-            mainBuildOutput.ShouldContain($"The specified logger \"{expectedLoggerName}\" could not be created and will not be used.", customMessage: mainBuildOutput);
+                successfulExit.ShouldBeFalse(mainBuildLog);
+                mainBuildLog.ShouldContain($"The specified logger \"{loggerDllPath}\" could not be created and will not be used.");
+            }
         }
 
         [Theory]
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 8c77757a7a1..c4a4985803f 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4435,6 +4435,7 @@ private static bool CreateAndConfigureLogger(
             }
             catch (ReflectionTypeLoadException e) when (!loggerDescription.IsOptional)
             {
+                Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OptionalLoggerCreationMessage", loggerDescription.Name, e.Message));
                 InitializationException.Throw("XMake.LoggerCreationError", unquotedParameter, e, false);
             }
             catch (MemberAccessException e) when (!loggerDescription.IsOptional)
