diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 530c0b06d31..9a52d99ef1c 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -32,11 +32,13 @@ public ProjectContext(BuildEventContext context)
     /// <summary>
     /// Encapsulates the per-node data shown in live node output.
     /// </summary>
-    internal record NodeStatus(string Project, string Target, Stopwatch Stopwatch)
+    internal record NodeStatus(string Project, string? TargetFramework, string Target, Stopwatch Stopwatch)
     {
         public override string ToString()
         {
-            return $"{Indentation}{Project} {Target} ({Stopwatch.Elapsed.TotalSeconds:F1}s)";
+            return string.IsNullOrEmpty(TargetFramework)
+                ? $"{Indentation}{Project} {Target} ({Stopwatch.Elapsed.TotalSeconds:F1}s)"
+                : $"{Indentation}{Project} [{TargetFramework}] {Target} ({Stopwatch.Elapsed.TotalSeconds:F1}s)";
         }
     }
 
@@ -217,11 +219,6 @@ private void ThreadProc()
     /// </summary>
     private void BuildStarted(object sender, BuildStartedEventArgs e)
     {
-        _notableProjects.Clear();
-
-        _buildHasErrors = false;
-        _buildHasWarnings = false;
-
         _refresher = new Thread(ThreadProc);
         _refresher.Start();
 
@@ -236,6 +233,9 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
         _cts.Cancel();
         _refresher?.Join();
 
+        _notableProjects.Clear();
+        _usedNodes = 0;
+
         Terminal.BeginUpdate();
         try
         {
@@ -252,6 +252,9 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
         {
             Terminal.EndUpdate();
         }
+
+        _buildHasErrors = false;
+        _buildHasWarnings = false;
     }
 
     /// <summary>
@@ -271,7 +274,11 @@ private void ProjectStarted(object sender, ProjectStartedEventArgs e)
 
         if (notable)
         {
-            _notableProjects[c] = new();
+            if (e.GlobalProperties?.TryGetValue("TargetFramework", out string? targetFramework) != true)
+            {
+                targetFramework = null;
+            }
+            _notableProjects[c] = new(targetFramework);
         }
 
         if (e.TargetNames == "Restore")
@@ -307,8 +314,8 @@ private bool IsNotableProject(ProjectStartedEventArgs e)
     /// Print a build result summary to the output.
     /// </summary>
     /// <param name="succeeded">True if the build completed with success.</param>
-    /// <param name="hadError">True if the build logged at least one error.</param>
-    /// <param name="hadWarning">True if the build logged at least one warning.</param>
+    /// <param name="hasError">True if the build has logged at least one error.</param>
+    /// <param name="hasWarning">True if the build has logged at least one warning.</param>
     private void PrintBuildResult(bool succeeded, bool hasError, bool hasWarning)
     {
         if (!succeeded)
@@ -398,6 +405,10 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                         Terminal.Write(projectFile);
                         Terminal.Write(" ");
                     }
+                    if (!string.IsNullOrEmpty(project.TargetFramework))
+                    {
+                        Terminal.Write($"[{project.TargetFramework}] ");
+                    }
 
                     // Print 'failed', 'succeeded with warnings', or 'succeeded' depending on the build result and diagnostic messages
                     // reported during build.
@@ -533,7 +544,7 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
             project.Stopwatch.Start();
 
             string projectFile = Path.GetFileName(e.ProjectFile) ?? e.ProjectFile;
-            _nodes[NodeIndexForContext(buildEventContext)] = new(projectFile, e.TargetName, project.Stopwatch);
+            _nodes[NodeIndexForContext(buildEventContext)] = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
         }
     }
 
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index a2bbb59d63f..cd892661cc4 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -12,6 +12,15 @@ namespace Microsoft.Build.Logging.LiveLogger;
 /// </summary>
 internal sealed class Project
 {
+    /// <summary>
+    /// Initialized a new <see cref="Project"/> with the given <paramref name="targetFramework"/>.
+    /// </summary>
+    /// <param name="targetFramework">The target framework of the project or null if not multi-targeting.</param>
+    public Project(string? targetFramework)
+    {
+        TargetFramework = targetFramework;
+    }
+
     /// <summary>
     /// A stopwatch to time the build of the project.
     /// </summary>
@@ -22,6 +31,11 @@ internal sealed class Project
     /// </summary>
     public ReadOnlyMemory<char>? OutputPath { get; set; }
 
+    /// <summary>
+    /// The target framework of the project or null if not multi-targeting.
+    /// </summary>
+    public string? TargetFramework { get; }
+
     /// <summary>
     /// A lazily initialized list of build messages/warnings/errors raised during the build.
     /// </summary>
