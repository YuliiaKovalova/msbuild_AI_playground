diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 69392976c03..43340ba2959 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -37,6 +37,8 @@ public class Expander_Tests
         private string _dateToParse = new DateTime(2010, 12, 25).ToString(CultureInfo.CurrentCulture);
         private static readonly string s_rootPathPrefix = NativeMethodsShared.IsWindows ? "C:\\" : Path.VolumeSeparatorChar.ToString();
 
+        private static bool IsIntrinsicFunctionOverloadsEnabled => ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8);
+
         [Fact]
         public void ExpandAllIntoTaskItems0()
         {
@@ -4193,7 +4195,7 @@ public void PropertyFunctionMSBuildAddRealLiteral()
         public void PropertyFunctionMSBuildAddIntegerOverflow()
         {
             // Overflow wrapping - result exceeds size of long
-            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "-9223372036854775808" : (long.MaxValue + 1.0).ToString();
+            string expected = IsIntrinsicFunctionOverloadsEnabled ? "-9223372036854775808" : (long.MaxValue + 1.0).ToString();
             TestPropertyFunction("$([MSBuild]::Add($(X), 1))", "X", long.MaxValue.ToString(), expected);
         }
 
@@ -4228,7 +4230,7 @@ public void PropertyFunctionMSBuildSubtractRealLiteral()
         public void PropertyFunctionMSBuildSubtractIntegerMaxValue()
         {
             // If the double overload is used, there will be a rounding error.
-            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "1" : "0";
+            string expected = IsIntrinsicFunctionOverloadsEnabled ? "1" : "0";
             TestPropertyFunction("$([MSBuild]::Subtract($(X), 9223372036854775806))", "X", long.MaxValue.ToString(), expected);
         }
 
@@ -4248,7 +4250,7 @@ public void PropertyFunctionMSBuildMultiplyRealLiteral()
         public void PropertyFunctionMSBuildMultiplyIntegerOverflow()
         {
             // Overflow - result exceeds size of long
-            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "-2" : (long.MaxValue * 2.0).ToString();
+            string expected = IsIntrinsicFunctionOverloadsEnabled ? "-2" : (long.MaxValue * 2.0).ToString();
             TestPropertyFunction("$([MSBuild]::Multiply($(X), 2))", "X", long.MaxValue.ToString(), expected);
         }
 
@@ -4261,7 +4263,7 @@ public void PropertyFunctionMSBuildMultiplyComplex()
         [Fact]
         public void PropertyFunctionMSBuildDivideIntegerLiteral()
         {
-            string expected = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) ? "6" : "6.5536";
+            string expected = IsIntrinsicFunctionOverloadsEnabled ? "6" : "6.5536";
             TestPropertyFunction("$([MSBuild]::Divide($(X), 10000))", "X", "65536", expected);
         }
 
diff --git a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
index 33fc175f4d6..0256a871a56 100644
--- a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
@@ -23,7 +23,7 @@ public class IntrinsicFunctionOverload_Tests
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
-        public void MSBuildAddInteger(bool enableIntrinsicFunctionOverloads)
+        public void MSBuildAddInteger(bool isIntrinsicFunctionOverloadsEnabled)
         {
             const string projectContent = @"
                     <Project>
@@ -32,12 +32,12 @@ public void MSBuildAddInteger(bool enableIntrinsicFunctionOverloads)
                         </PropertyGroup>
                     </Project>";
 
-            string expected = enableIntrinsicFunctionOverloads ? unchecked(long.MaxValue + 1).ToString() : (long.MaxValue + 1.0).ToString();
+            string expected = isIntrinsicFunctionOverloadsEnabled ? unchecked(long.MaxValue + 1).ToString() : (long.MaxValue + 1.0).ToString();
 
             using TestEnvironment env = TestEnvironment.Create();
 
             ChangeWaves.ResetStateForTests();
-            if (!enableIntrinsicFunctionOverloads)
+            if (!isIntrinsicFunctionOverloadsEnabled)
             {
                 env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
@@ -72,7 +72,7 @@ public void MSBuildAddReal()
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
-        public void MSBuildSubtractInteger(bool enableIntrinsicFunctionOverloads)
+        public void MSBuildSubtractInteger(bool isIntrinsicFunctionOverloadsEnabled)
         {
             const string projectContent = @"
                     <Project>
@@ -81,12 +81,12 @@ public void MSBuildSubtractInteger(bool enableIntrinsicFunctionOverloads)
                         </PropertyGroup>
                     </Project>";
 
-            string expected = enableIntrinsicFunctionOverloads ? 1.ToString() : 0.ToString();
+            string expected = isIntrinsicFunctionOverloadsEnabled ? 1.ToString() : 0.ToString();
 
             using TestEnvironment env = TestEnvironment.Create();
 
             ChangeWaves.ResetStateForTests();
-            if (!enableIntrinsicFunctionOverloads)
+            if (!isIntrinsicFunctionOverloadsEnabled)
             {
                 env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
@@ -121,7 +121,7 @@ public void MSBuildSubtractReal()
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
-        public void MSBuildMultiplyInteger(bool enableIntrinsicFunctionOverloads)
+        public void MSBuildMultiplyInteger(bool isIntrinsicFunctionOverloadsEnabled)
         {
             const string projectContent = @"
                     <Project>
@@ -130,12 +130,12 @@ public void MSBuildMultiplyInteger(bool enableIntrinsicFunctionOverloads)
                         </PropertyGroup>
                     </Project>";
 
-            string expected = enableIntrinsicFunctionOverloads ? unchecked(long.MaxValue * 2).ToString() : (long.MaxValue * 2.0).ToString();
+            string expected = isIntrinsicFunctionOverloadsEnabled ? unchecked(long.MaxValue * 2).ToString() : (long.MaxValue * 2.0).ToString();
 
             using TestEnvironment env = TestEnvironment.Create();
 
             ChangeWaves.ResetStateForTests();
-            if (!enableIntrinsicFunctionOverloads)
+            if (!isIntrinsicFunctionOverloadsEnabled)
             {
                 env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
@@ -170,7 +170,7 @@ public void MSBuildMultiplyReal()
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
-        public void MSBuildDivideInteger(bool enableIntrinsicFunctionOverloads)
+        public void MSBuildDivideInteger(bool isIntrinsicFunctionOverloadsEnabled)
         {
             const string projectContent = @"
                     <Project>
@@ -179,12 +179,12 @@ public void MSBuildDivideInteger(bool enableIntrinsicFunctionOverloads)
                         </PropertyGroup>
                     </Project>";
 
-            string expected = enableIntrinsicFunctionOverloads ? (10 / 3).ToString() : (10.0 / 3.0).ToString();
+            string expected = isIntrinsicFunctionOverloadsEnabled ? (10 / 3).ToString() : (10.0 / 3.0).ToString();
 
             using TestEnvironment env = TestEnvironment.Create();
 
             ChangeWaves.ResetStateForTests();
-            if (!enableIntrinsicFunctionOverloads)
+            if (!isIntrinsicFunctionOverloadsEnabled)
             {
                 env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
@@ -219,7 +219,7 @@ public void MSBuildDivideReal()
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
-        public void MSBuildModuloInteger(bool enableIntrinsicFunctionOverloads)
+        public void MSBuildModuloInteger(bool isIntrinsicFunctionOverloadsEnabled)
         {
             const string projectContent = @"
                     <Project>
@@ -233,7 +233,7 @@ public void MSBuildModuloInteger(bool enableIntrinsicFunctionOverloads)
             using TestEnvironment env = TestEnvironment.Create();
 
             ChangeWaves.ResetStateForTests();
-            if (!enableIntrinsicFunctionOverloads)
+            if (!isIntrinsicFunctionOverloadsEnabled)
             {
                 env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaveForOverloading.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index b5108284b17..b85cee18bb2 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -4710,7 +4710,7 @@ private static bool TryExecuteAdd(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!IsIntrinsicFunctionOverloadsEnabled() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4736,7 +4736,7 @@ private static bool TryExecuteSubtract(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!IsIntrinsicFunctionOverloadsEnabled() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4762,7 +4762,7 @@ private static bool TryExecuteMultiply(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!IsIntrinsicFunctionOverloadsEnabled() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4788,7 +4788,7 @@ private static bool TryExecuteDivide(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!IsIntrinsicFunctionOverloadsEnabled() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4814,7 +4814,7 @@ private static bool TryExecuteModulo(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!IsIntrinsicFunctionOverloadsEnabled() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -5345,7 +5345,7 @@ private static TypeCode SelectTypeOfFirstParameter(MethodBase method)
                     : TypeCode.Empty;
             }
 
-            private static bool EnableIntrinsicFunctionOverloads() => ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8);
+            private static bool IsIntrinsicFunctionOverloadsEnabled() => ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8);
 
             /// <summary>
             /// Construct and instance of objectType based on the constructor or method arguments provided.
@@ -5389,7 +5389,7 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o
                             // Order by the TypeCode of the first parameter.
                             // When change wave is enabled, order long before double.
                             // Otherwise preserve prior behavior of double before long.
-                            IComparer<TypeCode> comparer = EnableIntrinsicFunctionOverloads()
+                            IComparer<TypeCode> comparer = IsIntrinsicFunctionOverloadsEnabled()
                                 ? Comparer<TypeCode>.Create((key0, key1) => key0.CompareTo(key1))
                                 : Comparer<TypeCode>.Create((key0, key1) => key1.CompareTo(key0));
                             members = members.OrderBy(SelectTypeOfFirstParameter, comparer);
