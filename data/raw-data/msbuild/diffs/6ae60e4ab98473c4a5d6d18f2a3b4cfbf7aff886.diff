diff --git a/src/Build/Instance/ImmutableProjectCollections/ImmutableMultiDictionaryConverter.cs b/src/Build/Instance/ImmutableProjectCollections/ImmutableLinkedMultiDictionaryConverter.cs
similarity index 51%
rename from src/Build/Instance/ImmutableProjectCollections/ImmutableMultiDictionaryConverter.cs
rename to src/Build/Instance/ImmutableProjectCollections/ImmutableLinkedMultiDictionaryConverter.cs
index 107f9996cfd..1b11db2341a 100644
--- a/src/Build/Instance/ImmutableProjectCollections/ImmutableMultiDictionaryConverter.cs
+++ b/src/Build/Instance/ImmutableProjectCollections/ImmutableLinkedMultiDictionaryConverter.cs
@@ -7,20 +7,21 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Execution;
 
 namespace Microsoft.Build.Instance.ImmutableProjectCollections
 {
-    internal class ImmutableMultiDictionaryConverter<K, VCached, V> : IMultiDictionary<K, V>
+    internal class ImmutableLinkedMultiDictionaryConverter<K, VCached, V> : IMultiDictionary<K, V>
         where K : class
         where V : class
         where VCached : class
     {
-        private readonly IMultiDictionary<K, VCached> _multiDictionary;
+        private readonly Func<K, IEnumerable<VCached>> _getCachedValues;
         private readonly Func<VCached, V> _getInstance;
 
-        public ImmutableMultiDictionaryConverter(IMultiDictionary<K, VCached> multiDictionary, Func<VCached, V> getInstance)
+        public ImmutableLinkedMultiDictionaryConverter(Func<K, IEnumerable<VCached>> getCachedValues, Func<VCached, V> getInstance)
         {
-            _multiDictionary = multiDictionary;
+            _getCachedValues = getCachedValues;
             _getInstance = getInstance;
         }
 
@@ -28,10 +29,13 @@ public IEnumerable<V> this[K key]
         {
             get
             {
-                IEnumerable<VCached> cachedValues = _multiDictionary[key];
-                foreach (var cachedValue in cachedValues)
+                IEnumerable<VCached> cachedValues = _getCachedValues(key);
+                if (cachedValues != null)
                 {
-                    yield return _getInstance(cachedValue);
+                    foreach (var cachedValue in cachedValues)
+                    {
+                        yield return _getInstance(cachedValue);
+                    }
                 }
             }
         }
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 4b1c8c4d222..91d085c53be 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -424,14 +424,8 @@ private ProjectInstance(Project linkedProject, bool fastItemLookupNeeded)
             // ItemsByEvaluatedInclude
             if (fastItemLookupNeeded)
             {
-                var multiDictionary = new MultiDictionary<string, ProjectItem>(StringComparer.OrdinalIgnoreCase);
-                foreach (var item in linkedProject.Items)
-                {
-                    multiDictionary.Add(item.EvaluatedInclude, item);
-                }
-
-                _itemsByEvaluatedInclude = new ImmutableMultiDictionaryConverter<string, ProjectItem, ProjectItemInstance>(
-                                                multiDictionary,
+                _itemsByEvaluatedInclude = new ImmutableLinkedMultiDictionaryConverter<string, ProjectItem, ProjectItemInstance>(
+                                                linkedProject.GetItemsByEvaluatedInclude,
                                                 item => ConvertCachedProjectItemToInstance(linkedProject, this, item));
             }
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 87077527651..6c513552548 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -167,7 +167,7 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\ImmutableProjectCollections\ImmutableGlobalPropertiesCollectionConverter.cs" />
     <Compile Include="Instance\ImmutableProjectCollections\ImmutableItemDefinitionsListConverter.cs" />
-    <Compile Include="Instance\ImmutableProjectCollections\ImmutableMultiDictionaryConverter.cs" />
+    <Compile Include="Instance\ImmutableProjectCollections\ImmutableLinkedMultiDictionaryConverter.cs" />
     <Compile Include="Instance\ImmutableProjectCollections\ImmutablePropertyCollectionConverter.cs" />
     <Compile Include="Instance\ImmutableProjectCollections\ImmutableValuedElementCollectionConverter.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
