diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index 1bfa14e0f34..07531f6633b 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -1,7 +1,5 @@
 <Project>
 
-  <Import Project="BootStrapMSBuild.props" />
-  
   <!--
   Copies the binaries of MSBuild to a bootstrap folder so we can rebuild msbuild with itself.
   On netcore it performs a directory copy.
diff --git a/src/Analyzers.UnitTests/AssemblyInfo.cs b/src/Analyzers.UnitTests/AssemblyInfo.cs
index 0f119a6530d..3b5d7bbb185 100644
--- a/src/Analyzers.UnitTests/AssemblyInfo.cs
+++ b/src/Analyzers.UnitTests/AssemblyInfo.cs
@@ -2,13 +2,3 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
-
-namespace Microsoft.Build.Analyzers.UnitTests;
-
-[System.AttributeUsage(System.AttributeTargets.Assembly)]
-internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)
-    : System.Attribute
-{
-    public string BootstrapRoot { get; } = bootstrapRoot;
-    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;
-}
diff --git a/src/Analyzers.UnitTests/BootstrapRunner.cs b/src/Analyzers.UnitTests/BootstrapRunner.cs
deleted file mode 100644
index edd3cbf5467..00000000000
--- a/src/Analyzers.UnitTests/BootstrapRunner.cs
+++ /dev/null
@@ -1,48 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-using System.Reflection;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.UnitTests.Shared;
-using Xunit.Abstractions;
-
-#if FEATURE_MSIOREDIST
-using Path = Microsoft.IO.Path;
-#endif
-
-namespace Microsoft.Build.Analyzers.UnitTests
-{
-    internal static class BootstrapRunner
-    {
-        // This should ideally be part of RunnerUtilities - however then we'd need to enforce
-        //  all test projects to import the BootStrapMSBuild.props file and declare the BootstrapLocationAttribute.
-        // Better solution would be to have a single test utility project - instead of linked code files.
-        public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper? outputHelper = null)
-        {
-            BootstrapLocationAttribute attribute = Assembly.GetExecutingAssembly().GetCustomAttribute<BootstrapLocationAttribute>()
-                ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
-
-            string binaryFolder = attribute.BootstrapMsbuildBinaryLocation;
-            string? bindirOverride = Environment.GetEnvironmentVariable("MSBUILD_BOOTSTRAPPED_BINDIR");
-            if (!string.IsNullOrEmpty(bindirOverride))
-            {
-                // The bootstrap environment has moved to another location. Assume the same relative layout and adjust the path.
-                string relativePath = Path.GetRelativePath(attribute.BootstrapRoot, binaryFolder);
-                binaryFolder = Path.GetFullPath(relativePath, bindirOverride);
-            }
-#if NET
-            string pathToExecutable = EnvironmentProvider.GetDotnetExePath()!;
-            msbuildParameters = Path.Combine(binaryFolder, "MSBuild.dll") + " " + msbuildParameters;
-#else
-            string pathToExecutable =
-                Path.Combine(binaryFolder, "msbuild.exe");
-#endif
-            return RunnerUtilities.RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
-        }
-    }
-}
diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
index 7a573b23b3f..dc6bce0563b 100644
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ b/src/Analyzers.UnitTests/EndToEndTests.cs
@@ -118,8 +118,7 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
 
             _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", buildInOutOfProcessNode ? "1" : "0");
             _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "1");
-            // string output = RunnerUtilities.ExecMSBuild($"{projectFile.Path} /m:1 -nr:False", out bool success);
-            string output = BootstrapRunner.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
+            string output = RunnerUtilities.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
             _env.Output.WriteLine(output);
             success.ShouldBeTrue();
             // The conflicting outputs warning appears
diff --git a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
index 876d03d2e07..1768410a565 100644
--- a/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
+++ b/src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj
@@ -11,25 +11,16 @@
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
     <IsPackable>false</IsPackable>
     <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
-    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>
-    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>
   </PropertyGroup>
 
   <ItemGroup>
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
-    <ProjectReference Include="..\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj">
-      <Private>false</Private>
-      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
-    </ProjectReference>
   </ItemGroup>
 
   <ItemGroup>
     <PackageReference Include="System.Collections.Immutable" />
-    <PackageReference Include="FluentAssertions" />
-    <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
-    <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" PrivateAssets="all" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
     <PackageReference Include="Shouldly" />
     <PackageReference Include="System.Net.Http" />
   </ItemGroup>
@@ -80,13 +71,4 @@
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
   </ItemGroup>
-
-  <Import Project="..\..\eng\BootStrapMSBuild.props" />
-
-  <ItemGroup>
-    <AssemblyAttribute Include="Microsoft.Build.Analyzers.UnitTests.BootstrapLocationAttribute">
-      <_Parameter1>$(ArtifactsBinDir)</_Parameter1>
-      <_Parameter2>$(BootstrapBinaryDestination)</_Parameter2>
-    </AssemblyAttribute>
-  </ItemGroup>
 </Project>
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs b/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs
index 16bdd714ea2..d3510e8c2df 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs
@@ -11,9 +11,6 @@
 using Microsoft.Build.Experimental.BuildCop;
 using Microsoft.Build.Framework;
 
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
 namespace Microsoft.Build.BuildCop.Infrastructure;
 internal sealed class BuildCopConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCopManager buildCopManager)
     : ILogger
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 3eb6f37c3a1..7ee66791af4 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -120,6 +120,9 @@
     <Compile Include="..\Shared\TaskLoggingHelperExtension.cs">
       <Link>BackEnd\Components\RequestBuilder\IntrinsicTasks\TaskLoggingHelperExtension.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\IsExternalInit.cs">
+      <Link>BuildCop\Utilities\IsExternalInit.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\TaskParameter.cs" />
     <Compile Include="..\Shared\TaskParameterTypeVerifier.cs" />
     <Compile Include="..\Shared\TranslatorHelpers.cs" />
@@ -185,7 +188,6 @@
     <Compile Include="BuildCop\OM\EvaluatedPropertiesAnalysisData.cs" />
     <Compile Include="BuildCop\OM\ParsedItemsAnalysisData.cs" />
     <Compile Include="BuildCop\Utilities\EnumerableExtensions.cs" />
-    <Compile Include="BuildCop\Utilities\IsExternalInit.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
     <Compile Include="FileAccess\FileAccessData.cs" />
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index d678ab57d35..8e9d1e09d00 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -133,6 +133,7 @@ public Traits()
         public readonly bool DebugEngine = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugEngine"));
         public readonly bool DebugScheduler;
         public readonly bool DebugNodeCommunication;
+        public readonly bool DebugUnitTests = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugUnitTests"));
 
         public readonly bool InProcNodeDisabled = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
 
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index 655ac537189..2ae43884646 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -1,5 +1,7 @@
 ﻿<Project Sdk="Microsoft.NET.Sdk">
 
+  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.props" />
+
   <PropertyGroup>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
 
diff --git a/src/Build/BuildCop/Utilities/IsExternalInit.cs b/src/Shared/IsExternalInit.cs
similarity index 100%
rename from src/Build/BuildCop/Utilities/IsExternalInit.cs
rename to src/Shared/IsExternalInit.cs
diff --git a/src/UnitTests.Shared/AssemblyInfo.cs b/src/UnitTests.Shared/AssemblyInfo.cs
index 3b5d7bbb185..5b383e24105 100644
--- a/src/UnitTests.Shared/AssemblyInfo.cs
+++ b/src/UnitTests.Shared/AssemblyInfo.cs
@@ -2,3 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
+
+namespace Microsoft.Build.UnitTests.Shared;
+
+[System.AttributeUsage(System.AttributeTargets.Assembly)]
+internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)
+    : System.Attribute
+{
+    public string BootstrapRoot { get; } = bootstrapRoot;
+    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;
+}
diff --git a/src/UnitTests.Shared/IsExternalInit.cs b/src/UnitTests.Shared/IsExternalInit.cs
deleted file mode 100644
index 92d5c4c320a..00000000000
--- a/src/UnitTests.Shared/IsExternalInit.cs
+++ /dev/null
@@ -1,7 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-namespace System.Runtime.CompilerServices
-{
-    internal static class IsExternalInit { }
-}
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 0bade6a09d5..22626c9ce89 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -18,5 +18,22 @@
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
+    <ProjectReference Include="..\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj">
+      <Private>false</Private>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+
+  <ItemGroup>
+    <Compile Include="..\Shared\IsExternalInit.cs" />
+  </ItemGroup>
+
+  <Import Project="..\..\eng\BootStrapMSBuild.props" />
+
+  <ItemGroup>
+    <AssemblyAttribute Include="Microsoft.Build.UnitTests.Shared.BootstrapLocationAttribute">
+      <_Parameter1>$(ArtifactsBinDir)</_Parameter1>
+      <_Parameter2>$(BootstrapBinaryDestination)</_Parameter2>
+    </AssemblyAttribute>
   </ItemGroup>
 </Project>
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 3eb1026dfd2..484ce6deacd 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -5,7 +5,10 @@
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 using System.IO;
+using System.Reflection;
+using Microsoft.Build.Framework;
 using Xunit.Abstractions;
+using System.Linq;
 
 #nullable disable
 
@@ -49,6 +52,43 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
         }
 
+        public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper? outputHelper = null)
+        {
+            BootstrapLocationAttribute attribute = Assembly.GetExecutingAssembly().GetCustomAttribute<BootstrapLocationAttribute>()
+                                                   ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
+
+            string binaryFolder = attribute.BootstrapMsbuildBinaryLocation;
+            string? bindirOverride = Environment.GetEnvironmentVariable("MSBUILD_BOOTSTRAPPED_BINDIR");
+            if (!string.IsNullOrEmpty(bindirOverride))
+            {
+                // The bootstrap environment has moved to another location. Assume the same relative layout and adjust the path.
+#if NET
+                string relativePath = Path.GetRelativePath(attribute.BootstrapRoot, binaryFolder);
+                binaryFolder = Path.GetFullPath(relativePath, bindirOverride);
+#else
+                binaryFolder = Path.GetFullPath(binaryFolder);
+                if (binaryFolder.StartsWith(attribute.BootstrapRoot))
+                {
+                    binaryFolder = binaryFolder.Substring(attribute.BootstrapRoot.Length);
+                    if (binaryFolder.StartsWith(Path.DirectorySeparatorChar.ToString()))
+                    {
+                        binaryFolder = binaryFolder.Substring(1);
+                    }
+
+                    binaryFolder = Path.Combine(bindirOverride, binaryFolder);
+                }
+#endif
+            }
+#if NET
+            string pathToExecutable = EnvironmentProvider.GetDotnetExePath()!;
+            msbuildParameters = Path.Combine(binaryFolder, "MSBuild.dll") + " " + msbuildParameters;
+#else
+            string pathToExecutable =
+                Path.Combine(binaryFolder, "msbuild.exe");
+#endif
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
+        }
+
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
         {
             if (NativeMethodsShared.IsWindows)
@@ -109,7 +149,11 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.BeginErrorReadLine();
                 p.StandardInput.Dispose();
 
-                if (!p.WaitForExit(30_000_000))
+                if (Traits.Instance.DebugUnitTests)
+                {
+                    p.WaitForExit();
+                }
+                else if (!p.WaitForExit(30_000))
                 {
                     // Let's not create a unit test for which we need more than 30 sec to execute.
                     // Please consider carefully if you would like to increase the timeout.
