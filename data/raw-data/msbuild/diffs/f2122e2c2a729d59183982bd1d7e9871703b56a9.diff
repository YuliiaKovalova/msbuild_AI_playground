diff --git a/src/MSBuild/LiveLogger/ITerminal.cs b/src/MSBuild/LiveLogger/ITerminal.cs
index 517cd4fea1d..63e310aff72 100644
--- a/src/MSBuild/LiveLogger/ITerminal.cs
+++ b/src/MSBuild/LiveLogger/ITerminal.cs
@@ -5,25 +5,59 @@
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
+/// <summary>
+/// An abstraction of a terminal, built specifically to fit the <see cref="LiveLogger"/> needs.
+/// </summary>
 internal interface ITerminal : IDisposable
 {
+    /// <summary>
+    /// Starts buffering the text passed via the <c>Write*</c> methods.
+    /// </summary>
+    /// <remarks>
+    /// Upon calling this method, the terminal should be buffering all output internally until <see cref="EndUpdate"/> is called.
+    /// </remarks>
     void BeginUpdate();
 
+    /// <summary>
+    /// Flushes the text buffered between <see cref="BeginUpdate"/> was called and now into the output.
+    /// </summary>
     void EndUpdate();
 
+    /// <summary>
+    /// Writes a string to the output. Or buffers it if <see cref="BeginUpdate"/> was called.
+    /// </summary>
     void Write(string text);
 
+    /// <summary>
+    /// Writes a string to the output. Or buffers it if <see cref="BeginUpdate"/> was called.
+    /// </summary>
     void WriteLine(string text);
 
+    /// <summary>
+    /// Writes a string to the output. Or buffers it if <see cref="BeginUpdate"/> was called.
+    /// </summary>
     void WriteLine(ReadOnlySpan<char> text);
 
+    /// <summary>
+    /// Writes a string to the output, truncating it if it wouldn't fit on one screen line.
+    /// Or buffers it if <see cref="BeginUpdate"/> was called.
+    /// </summary>
     void WriteLineFitToWidth(ReadOnlySpan<char> input);
 
+    /// <summary>
+    /// Writes a string to the output using the given color. Or buffers it if <see cref="BeginUpdate"/> was called.
+    /// </summary>
     void WriteColor(TerminalColor color, string text);
 
+    /// <summary>
+    /// Writes a string to the output using the given color. Or buffers it if <see cref="BeginUpdate"/> was called.
+    /// </summary>
     void WriteColorLine(TerminalColor color, string text);
 }
 
+/// <summary>
+/// Enumerates the text colors supported by <see cref="ITerminal"/>.
+/// </summary>
 internal enum TerminalColor
 {
     Black = 30,
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index b4503592e1b..c8b24ef61f7 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -11,41 +11,102 @@
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
+/// <summary>
+/// A logger which updates the console output "live" during the build.
+/// </summary>
+/// <remarks>
+/// Uses ANSI/VT100 control codes to erase and overwrite lines as the build is progressing.
+/// </remarks>
 internal sealed class LiveLogger : INodeLogger
 {
+    /// <summary>
+    /// A wrapper over the project context ID passed to us in <see cref="IEventSource"/> logger events.
+    /// </summary>
+    internal record struct ProjectContext(int Id)
+    {
+        public ProjectContext(BuildEventContext context)
+            : this(context.ProjectContextId)
+        { }
+    }
+
+    /// <summary>
+    /// Encapsulates the per-node data shown in live node output.
+    /// </summary>
+    internal record NodeStatus(string Project, string Target, Stopwatch Stopwatch)
+    {
+        public override string ToString()
+        {
+            return $"{Project} {Target} ({Stopwatch.Elapsed.TotalSeconds:F1}s)";
+        }
+    }
+
+    /// <summary>
+    /// Protects access to state shared between the logger callbacks and the rendering thread.
+    /// </summary>
     private readonly object _lock = new();
 
+    /// <summary>
+    /// A cancellation token to signal the rendering thread that it should exit.
+    /// </summary>
     private readonly CancellationTokenSource _cts = new();
 
+    /// <summary>
+    /// Tracks the work currently being done by build nodes. Null means the node is not doing any work worth reporting.
+    /// </summary>
     private NodeStatus?[] _nodes = Array.Empty<NodeStatus>();
 
-    private readonly Dictionary<ProjectContext, Project> _notableProjects = new();
-
-    private readonly Dictionary<ProjectContext, (bool Notable, string? Path, string? Targets)> _notabilityByContext = new();
-
-    private readonly Dictionary<ProjectInstance, ProjectContext> _relevantContextByInstance = new();
+    /// <summary>
+    /// Strings representing per-node console output. The output is buffered here to make the refresh loop as fast
+    /// as possible and to avoid console I/O if the desired output hasn't changed.
+    /// </summary>
+    /// <remarks>
+    /// Roman, this may need to be rethought.
+    /// </remarks>
+    private readonly List<string> _nodeStringBuffer = new();
 
-    private readonly Dictionary<ProjectContext, Stopwatch> _projectTimeCounter = new();
+    /// <summary>
+    /// Tracks the status of all interesting projects seen so far.
+    /// </summary>
+    /// <remarks>
+    /// Keyed by an ID that gets passed to logger callbacks, this allows us to quickly look up the corresponding project.
+    /// A project build is deemed "notable" if its initial targets don't contain targets usually called for internal
+    /// purposes, <seealso cref="IsNotableProject(ProjectStartedEventArgs)"/>.
+    /// </remarks>
+    private readonly Dictionary<ProjectContext, Project> _notableProjects = new();
 
+    /// <summary>
+    /// Number of live rows currently displaying node status.
+    /// </summary>
     private int _usedNodes = 0;
 
+    /// <summary>
+    /// The project build context corresponding to the <c>Restore</c> initial target, or null if the build is currently
+    /// bot restoring.
+    /// </summary>
     private ProjectContext? _restoreContext;
 
+    /// <summary>
+    /// The thread that performs periodic refresh of the console output.
+    /// </summary>
     private Thread? _refresher;
 
-    private readonly List<string> _nodeStringBuffer = new();
-
-    private ITerminal? _terminal;
-    private ITerminal Terminal => _terminal! ?? throw new InvalidOperationException();
+    /// <summary>
+    /// The <see cref="Terminal"/> to write console output to.
+    /// </summary>
+    private ITerminal Terminal { get; }
 
+    /// <inheritdoc/>
     public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
+
+    /// <inheritdoc/>
     public string Parameters { get => ""; set { } }
 
     /// <summary>
     /// List of events the logger needs as parameters to the <see cref="ConfigurableForwardingLogger"/>.
     /// </summary>
     /// <remarks>
-    /// If LiveLogger runs as a distributed logger, MSBuild out-of-proc nodes might filter the events that will go to the main node using an instance of <see cref="ConfigurableForwardingLogger"/> with the following parameters.
+    /// If LiveLogger runs as a distributed logger, MSBuild out-of-proc nodes might filter the events that will go to the main
+    /// node using an instance of <see cref="ConfigurableForwardingLogger"/> with the following parameters.
     /// </remarks>
     public static readonly string[] ConfigurableForwardingLoggerParameters =
     {
@@ -61,14 +122,23 @@ internal sealed class LiveLogger : INodeLogger
             "ERROREVENT"
     };
 
+    /// <summary>
+    /// Default constructor, used by the MSBuild logger infra.
+    /// </summary>
     public LiveLogger()
-    { }
+    {
+        Terminal = new Terminal();
+    }
 
-    public LiveLogger(ITerminal terminal)
+    /// <summary>
+    /// Internal constructor accepting a custom <see cref="ITerminal"/> for testing.
+    /// </summary>
+    internal LiveLogger(ITerminal terminal)
     {
-        _terminal = terminal;
+        Terminal = terminal;
     }
 
+    /// <inheritdoc/>
     public void Initialize(IEventSource eventSource, int nodeCount)
     {
         _nodes = new NodeStatus[nodeCount];
@@ -76,6 +146,7 @@ public void Initialize(IEventSource eventSource, int nodeCount)
         Initialize(eventSource);
     }
 
+    /// <inheritdoc/>
     public void Initialize(IEventSource eventSource)
     {
         eventSource.BuildStarted += new BuildStartedEventHandler(BuildStarted);
@@ -90,12 +161,13 @@ public void Initialize(IEventSource eventSource)
         eventSource.WarningRaised += new BuildWarningEventHandler(WarningRaised);
         eventSource.ErrorRaised += new BuildErrorEventHandler(ErrorRaised);
 
-        _terminal ??= new Terminal();
-
         _refresher = new Thread(ThreadProc);
         _refresher.Start();
     }
 
+    /// <summary>
+    /// The <see cref="_refresher"/> thread proc.
+    /// </summary>
     private void ThreadProc()
     {
         while (!_cts.IsCancellationRequested)
@@ -123,14 +195,23 @@ private void ThreadProc()
         EraseNodes();
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.BuildStarted"/> callback. Unused.
+    /// </summary>
     private void BuildStarted(object sender, BuildStartedEventArgs e)
     {
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.BuildFinished"/> callback. Unused.
+    /// </summary>
     private void BuildFinished(object sender, BuildFinishedEventArgs e)
     {
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.ProjectStarted"/> callback.
+    /// </summary>
     private void ProjectStarted(object sender, ProjectStartedEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
@@ -148,24 +229,19 @@ private void ProjectStarted(object sender, ProjectStartedEventArgs e)
             _notableProjects[c] = new();
         }
 
-        _projectTimeCounter[c] = Stopwatch.StartNew();
-
         if (e.TargetNames == "Restore")
         {
             _restoreContext = c;
             Terminal.WriteLine("Restoring");
             return;
         }
-
-        _notabilityByContext[c] = (notable, e.ProjectFile, e.TargetNames);
-
-        var key = new ProjectInstance(buildEventContext);
-        if (!_relevantContextByInstance.ContainsKey(key))
-        {
-            _relevantContextByInstance.Add(key, c);
-        }
     }
 
+    /// <summary>
+    /// A helper to determine if a given project build is to be considered notable.
+    /// </summary>
+    /// <param name="e">The <see cref="ProjectStartedEventArgs"/> corresponding to the project.</param>
+    /// <returns>True if the project is notable, false otherwise.</returns>
     private bool IsNotableProject(ProjectStartedEventArgs e)
     {
         if (_restoreContext is not null)
@@ -181,6 +257,9 @@ private bool IsNotableProject(ProjectStartedEventArgs e)
         };
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.ProjectFinished"/> callback.
+    /// </summary>
     private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
@@ -191,13 +270,16 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
         ProjectContext c = new(buildEventContext);
 
+        // First check if we're done restoring.
         if (_restoreContext is ProjectContext restoreContext && c == restoreContext)
         {
             lock (_lock)
             {
                 _restoreContext = null;
 
-                double duration = _notableProjects[restoreContext].Stopwatch.Elapsed.TotalSeconds;
+                Stopwatch projectStopwatch = _notableProjects[restoreContext].Stopwatch;
+                double duration = projectStopwatch.Elapsed.TotalSeconds;
+                projectStopwatch.Stop();
 
                 UpdateNodeStringBuffer();
 
@@ -218,7 +300,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
             }
         }
 
-        if (_notabilityByContext[c].Notable && _relevantContextByInstance[new ProjectInstance(buildEventContext)] == c)
+        // If this was a notable project build, print the output path, time elapsed, and warnings/error.
+        if (_notableProjects.ContainsKey(c))
         {
             lock (_lock)
             {
@@ -282,6 +365,14 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
         }
     }
 
+    /// <summary>
+    /// Update <see cref="_nodeStringBuffer"/> to match the output produced by <see cref="_nodes"/>.
+    /// </summary>
+    /// <returns>True if <see cref="_nodeStringBuffer"/> was actually updated, false if it's already up-to-date.</returns>
+    /// <remarks>
+    /// Callers may use the return value to optimize console output. If the <see cref="_nodeStringBuffer"/> printed last time
+    /// is still valid, there is no need to perform console I/O.
+    /// </remarks>
     private bool UpdateNodeStringBuffer()
     {
         bool stringBufferWasUpdated = false;
@@ -320,6 +411,9 @@ private bool UpdateNodeStringBuffer()
         return stringBufferWasUpdated;
     }
 
+    /// <summary>
+    /// Prints the live node output as contained in <see cref="_nodeStringBuffer"/>.
+    /// </summary>
     private void DisplayNodes()
     {
         foreach (string str in _nodeStringBuffer)
@@ -329,6 +423,9 @@ private void DisplayNodes()
         _usedNodes = _nodeStringBuffer.Count;
     }
 
+    /// <summary>
+    /// Erases the previously printed live node output.
+    /// </summary>
     private void EraseNodes()
     {
         if (_usedNodes == 0)
@@ -339,24 +436,37 @@ private void EraseNodes()
         Terminal.Write($"\x1b[0J");
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.TargetStarted"/> callback.
+    /// </summary>
     private void TargetStarted(object sender, TargetStartedEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
-        if (buildEventContext is not null)
+        if (buildEventContext is not null && _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
         {
-            _nodes[NodeIndexForContext(buildEventContext)] = new(e.ProjectFile, e.TargetName, _projectTimeCounter[new ProjectContext(buildEventContext)]);
+            _nodes[NodeIndexForContext(buildEventContext)] = new(e.ProjectFile, e.TargetName, project.Stopwatch);
         }
     }
 
+    /// <summary>
+    /// Returns the <see cref="_nodes"/> index corresponding to the given <see cref="BuildEventContext"/>.
+    /// </summary>
     private int NodeIndexForContext(BuildEventContext context)
     {
+        // Node IDs reported by the build are 1-based.
         return context.NodeId - 1;
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.TargetFinished"/> callback. Unused.
+    /// </summary>
     private void TargetFinished(object sender, TargetFinishedEventArgs e)
     {
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.TaskStarted"/> callback.
+    /// </summary>
     private void TaskStarted(object sender, TaskStartedEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
@@ -367,6 +477,9 @@ private void TaskStarted(object sender, TaskStartedEventArgs e)
         }
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.MessageRaised"/> callback.
+    /// </summary>
     private void MessageRaised(object sender, BuildMessageEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
@@ -395,6 +508,9 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
         }
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.WarningRaised"/> callback.
+    /// </summary>
     private void WarningRaised(object sender, BuildWarningEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
@@ -405,6 +521,9 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)
         }
     }
 
+    /// <summary>
+    /// The <see cref="IEventSource.ErrorRaised"/> callback.
+    /// </summary>
     private void ErrorRaised(object sender, BuildErrorEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
@@ -415,34 +534,12 @@ private void ErrorRaised(object sender, BuildErrorEventArgs e)
         }
     }
 
+    /// <inheritdoc/>
     public void Shutdown()
     {
         _cts.Cancel();
         _refresher?.Join();
 
-        _terminal?.Dispose();
-        _terminal = null;
-    }
-}
-
-internal record struct ProjectContext(int Id)
-{
-    public ProjectContext(BuildEventContext context)
-        : this(context.ProjectContextId)
-    { }
-}
-
-internal record struct ProjectInstance(int Id)
-{
-    public ProjectInstance(BuildEventContext context)
-        : this(context.ProjectInstanceId)
-    { }
-}
-
-internal record NodeStatus(string Project, string Target, Stopwatch Stopwatch)
-{
-    public override string ToString()
-    {
-        return $"{Project} {Target} ({Stopwatch.Elapsed.TotalSeconds:F1}s)";
+        Terminal.Dispose();
     }
 }
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index 9fbcbfb7f09..a2bbb59d63f 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -7,15 +7,18 @@
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
+/// <summary>
+/// Represents a project being built.
+/// </summary>
 internal sealed class Project
 {
     /// <summary>
-    /// A stopwatch to time the build of this project.
+    /// A stopwatch to time the build of the project.
     /// </summary>
     public Stopwatch Stopwatch { get; } = Stopwatch.StartNew();
 
     /// <summary>
-    /// The full path to the primary output of the project, if known.
+    /// Full path to the primary output of the project, if known.
     /// </summary>
     public ReadOnlyMemory<char>? OutputPath { get; set; }
 
@@ -24,6 +27,9 @@ internal sealed class Project
     /// </summary>
     public List<BuildMessage>? BuildMessages { get; private set; }
 
+    /// <summary>
+    /// Adds a build message of the given severity to <see cref="BuildMessages"/>.
+    /// </summary>
     public void AddBuildMessage(MessageSeverity severity, string message)
     {
         BuildMessages ??= new List<BuildMessage>();
@@ -31,7 +37,13 @@ public void AddBuildMessage(MessageSeverity severity, string message)
     }
 }
 
+/// <summary>
+/// Enumerates the supported message severities.
+/// </summary>
 internal enum MessageSeverity { Warning, Error }
 
+/// <summary>
+/// Represents a piece of diagnostic output (message/warning/error).
+/// </summary>
 internal record struct BuildMessage(MessageSeverity Severity, string Message)
 { }
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
index b2d4ad9215b..05909c5c94f 100644
--- a/src/MSBuild/LiveLogger/Terminal.cs
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -6,12 +6,24 @@
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
+/// <summary>
+/// An <see cref="ITerminal"/> implementation for ANSI/VT100 terminals.
+/// </summary>
 internal sealed class Terminal : ITerminal
 {
-    private Encoding _originalOutputEncoding;
-
-    private StringBuilder _outputBuilder = new();
-
+    /// <summary>
+    /// The encoding read from <see cref="Console.OutputEncoding"/> when the terminal is instantiated.
+    /// </summary>
+    private readonly Encoding _originalOutputEncoding;
+
+    /// <summary>
+    /// A string buffer used with <see cref="BeginUpdate"/>/<see cref="EndUpdate"/>.
+    /// </summary>
+    private readonly StringBuilder _outputBuilder = new();
+
+    /// <summary>
+    /// True if <see cref="BeginUpdate"/> was called and <c>Write*</c> methods are buffering instead of directly printing.
+    /// </summary>
     private bool _isBuffering = false;
 
     public Terminal()
@@ -20,6 +32,7 @@ public Terminal()
         Console.OutputEncoding = Encoding.UTF8;
     }
 
+    /// <inheritdoc/>
     public void BeginUpdate()
     {
         if (_isBuffering)
@@ -29,6 +42,7 @@ public void BeginUpdate()
         _isBuffering = true;
     }
 
+    /// <inheritdoc/>
     public void EndUpdate()
     {
         if (!_isBuffering)
@@ -41,6 +55,7 @@ public void EndUpdate()
         _outputBuilder.Clear();
     }
 
+    /// <inheritdoc/>
     public void Write(string text)
     {
         if (_isBuffering)
@@ -53,6 +68,7 @@ public void Write(string text)
         }
     }
 
+    /// <inheritdoc/>
     public void WriteLine(string text)
     {
         if (_isBuffering)
@@ -65,6 +81,7 @@ public void WriteLine(string text)
         }
     }
 
+    /// <inheritdoc/>
     public void WriteLine(ReadOnlySpan<char> text)
     {
         if (_isBuffering)
@@ -78,11 +95,13 @@ public void WriteLine(ReadOnlySpan<char> text)
         }
     }
 
+    /// <inheritdoc/>
     public void WriteLineFitToWidth(ReadOnlySpan<char> input)
     {
         WriteLine(input.Slice(0, Math.Min(input.Length, Console.BufferWidth - 1)));
     }
 
+    /// <inheritdoc/>
     public void WriteColor(TerminalColor color, string text)
     {
         if (_isBuffering)
@@ -100,6 +119,7 @@ public void WriteColor(TerminalColor color, string text)
         }
     }
 
+    /// <inheritdoc/>
     public void WriteColorLine(TerminalColor color, string text)
     {
         if (_isBuffering)
@@ -113,6 +133,7 @@ public void WriteColorLine(TerminalColor color, string text)
         }
     }
 
+    /// <inheritdoc/>
     public void Dispose()
     {
         Console.OutputEncoding = _originalOutputEncoding;
