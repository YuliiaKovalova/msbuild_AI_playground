diff --git a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
index 0256a871a56..aa43ed04e22 100644
--- a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
@@ -48,6 +48,48 @@ public void MSBuildAddInteger(bool isIntrinsicFunctionOverloadsEnabled)
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
 
+        [Fact]
+        public void MSBuildAddIntegerGreaterThanMax()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Add(9223372036854775808, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MaxValue +1D) + 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildAddIntegerLessThanMin()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Add(-9223372036854775809, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MinValue - 1D) + 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
         [Fact]
         public void MSBuildAddReal()
         {
@@ -97,6 +139,48 @@ public void MSBuildSubtractInteger(bool isIntrinsicFunctionOverloadsEnabled)
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
 
+        [Fact]
+        public void MSBuildSubtractIntegerGreaterThanMax()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Subtract(9223372036854775808, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MaxValue + 1D) - 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildSubtractIntegerLessThanMin()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Subtract(-9223372036854775809, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MinValue - 1D) - 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
         [Fact]
         public void MSBuildSubtractReal()
         {
@@ -146,6 +230,48 @@ public void MSBuildMultiplyInteger(bool isIntrinsicFunctionOverloadsEnabled)
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
 
+        [Fact]
+        public void MSBuildMultiplyIntegerGreaterThanMax()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Multiply(9223372036854775808, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MaxValue + 1D) * 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildMultiplyIntegerLessThanMin()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Multiply(-9223372036854775809, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MinValue - 1D) * 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
         [Fact]
         public void MSBuildMultiplyReal()
         {
@@ -195,6 +321,48 @@ public void MSBuildDivideInteger(bool isIntrinsicFunctionOverloadsEnabled)
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
 
+        [Fact]
+        public void MSBuildDivideIntegerGreaterThanMax()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Divide(9223372036854775808, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MaxValue + 1D) / 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildDivideIntegerLessThanMin()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Divide(-9223372036854775809, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MinValue - 1D) / 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
         [Fact]
         public void MSBuildDivideReal()
         {
@@ -244,6 +412,48 @@ public void MSBuildModuloInteger(bool isIntrinsicFunctionOverloadsEnabled)
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
 
+        [Fact]
+        public void MSBuildModuloIntegerGreaterThanMax()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Modulo(9223372036854775808, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MaxValue + 1D) % 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
+        [Fact]
+        public void MSBuildModuloIntegerLessThanMin()
+        {
+            const string projectContent = @"
+                    <Project>
+                        <PropertyGroup>
+                            <Actual>$([MSBuild]::Modulo(-9223372036854775809, 1))</Actual>
+                        </PropertyGroup>
+                    </Project>";
+
+            string expected = ((long.MinValue - 1D) % 1).ToString();
+
+            using TestEnvironment env = TestEnvironment.Create();
+
+            ChangeWaves.ResetStateForTests();
+
+            var project = new Project(XmlReader.Create(new StringReader(projectContent.Cleanup())));
+            ProjectProperty? actualProperty = project.GetProperty("Actual");
+            actualProperty.EvaluatedValue.ShouldBe(expected);
+        }
+
         [Fact]
         public void MSBuildModuloReal()
         {
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index fa6c71b023a..3a49f199838 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -4538,8 +4538,13 @@ private static bool TryConvertToLong(object value, out long arg0)
                 switch (value)
                 {
                     case double d:
-                        arg0 = Convert.ToInt64(d);
-                        return arg0 == d;
+                        if (d >= long.MinValue && d <= long.MaxValue)
+                        {
+                            arg0 = Convert.ToInt64(d);
+                            return arg0 == d;
+                        }
+
+                        break;
                     case long i:
                         arg0 = i;
                         return true;
