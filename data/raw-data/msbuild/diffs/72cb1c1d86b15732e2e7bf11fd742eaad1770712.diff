diff --git a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
index 60741d818ba..7fc43eccc59 100644
--- a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
@@ -421,6 +421,7 @@ public void TestResultsCacheTranslationAcrossVersions(int envValue1, int envValu
                 resultsCache.Translate(TranslationHelpers.GetWriteTranslator());
 
                 env.SetEnvironmentVariable("MSBUILDDONOTVERSIONBUILDRESULT", $"{envValue2}");
+                Traits.UpdateFromEnvironment();
 
                 var copy = new ResultsCache(TranslationHelpers.GetReadTranslator());
 
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index b64500467ce..b6979377133 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -112,23 +112,10 @@ public class BuildResult : INodePacket, IBuildResults
         /// </summary>
         private Dictionary<string, string> _savedEnvironmentVariables;
 
-        /// <summary>
-        /// Lock object for the dictionary <see cref="_savedEnvironmentVariables"/>.
-        /// </summary>
-        private readonly object _lock = new object();
-
         /// <summary>
         /// When this key is in the dictionary <see cref="_savedEnvironmentVariables"/>, serialize the build result version.
         /// </summary>
-        private const string VersionKeyName = "MSBUILDFEATUREBUILDRESULTHASVERSION=";
-
-        /// <summary>
-        /// Presence of this key is in the dictionary <see cref="_savedEnvironmentVariables"/> indicates that it was null.
-        /// </summary>
-        /// <remarks>
-        /// There is a behavioral difference between dictionary <see cref="_savedEnvironmentVariables"/> being empty and being null. Adding a magic key to distinguish these situations on deserialization. 
-        /// </remarks>
-        private const string SavedEnvironmentVariablesDictionaryWasNull = "MSBUILDSAVEDENVIRONMENTVARIABLESWASNULL=";
+        private const string VersionKeyName = "=MSBUILDFEATUREBUILDRESULTHASVERSION=";
 
         /// <summary>
         /// Snapshot of the current directory from the configuration this result comes from.
@@ -654,57 +641,31 @@ void ITranslatable.Translate(ITranslator translator)
             }
             else
             {
-                lock (_lock)
+                Dictionary<string, string> additionalEntries = new();
+                HashSet<string> additionalEntriesKeys = new HashSet<string>
+                {
+                    VersionKeyName
+                };
+
+                if (translator.Mode == TranslationDirection.WriteToStream)
                 {
-                    if (translator.Mode == TranslationDirection.WriteToStream)
+                    // Add the special key VersionKeyName to additional entries indicating the presence of a version to the _savedEnvironmentVariables dictionary.
+                    additionalEntries.Add(VersionKeyName, String.Empty);
+
+                    translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase, ref additionalEntries, additionalEntriesKeys);
+                    translator.Translate(ref _version);
+                }
+                else if (translator.Mode == TranslationDirection.ReadFromStream)
+                {
+                    // Read the dictionary. If the special key VersionKeyName present there, also read a version and remove the special keys.
+                    translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase, ref additionalEntries, additionalEntriesKeys);
+                    if (additionalEntries is not null && additionalEntries.ContainsKey(VersionKeyName))
                     {
-                        // Add the special key VersionKeyName indicating the presence of a version to the _savedEnvironmentVariables dictionary.
-                        // If the dictionary was null, add another special key SavedEnvironmentVariablesDictionaryWasNull to the dictionary.
-                        if (_savedEnvironmentVariables is null)
-                        {
-                            _savedEnvironmentVariables = new Dictionary<string, string>
-                            {
-                                { SavedEnvironmentVariablesDictionaryWasNull, String.Empty }
-                            };
-                        }
-
-                        _savedEnvironmentVariables.Add(VersionKeyName, String.Empty);
-                        translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase);
                         translator.Translate(ref _version);
-
-                        // Remove the added keys from the dictionary.
-                        if (_savedEnvironmentVariables.ContainsKey(SavedEnvironmentVariablesDictionaryWasNull))
-                        {
-                            _savedEnvironmentVariables = null;
-                        }
-                        else
-                        {
-                            _savedEnvironmentVariables.Remove(VersionKeyName);
-                        }
                     }
-                    else if (translator.Mode == TranslationDirection.ReadFromStream)
+                    else
                     {
-                        // Read the dictionary. If the special key VersionKeyName present there, also read a version and remove the special keys.
-                        // Presence of special key SavedEnvironmentVariablesDictionaryWasNull indicates that the dictionary was null.
-                        translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase);
-
-                        if ((_savedEnvironmentVariables is not null) && _savedEnvironmentVariables.ContainsKey(VersionKeyName))
-                        {
-                            if (_savedEnvironmentVariables.ContainsKey(SavedEnvironmentVariablesDictionaryWasNull))
-                            {
-                                _savedEnvironmentVariables = null;
-                            }
-                            else
-                            {
-                                _savedEnvironmentVariables.Remove(VersionKeyName);
-                            }
-
-                            translator.Translate(ref _version);
-                        }
-                        else
-                        {
-                            _version = 0;
-                        }
+                        _version = 0;
                     }
                 }
             }
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index d3ae3878226..8ecb72e7cd9 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -22,6 +22,14 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal static class BinaryTranslator
     {
+        /// <summary>
+        /// Presence of this key in the dictionary indicates that it was null.
+        /// </summary>
+        /// <remarks>
+        /// This is needed for a workaround.
+        /// </remarks>
+        private const string SpecialKeyForDictionaryBeingNull = "=MSBUILDDICTIONARYWASNULL=";
+
 #nullable enable
         /// <summary>
         /// Returns a read-only serializer.
@@ -590,6 +598,46 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
                 dictionary = (Dictionary<string, string>)copy;
             }
 
+            /// <summary>
+            /// Translates a dictionary of { string, string } adding extra entries.
+            /// </summary>
+            /// <param name="dictionary">The dictionary to be translated.</param>
+            /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
+            /// <param name="additionalEntries">The extra entries to be translated</param>
+            /// <param name="additionalEntriesKeys">The extra entries keys</param>
+            public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer, ref Dictionary<string, string> additionalEntries, HashSet<string> additionalEntriesKeys)
+            {
+                if (!TranslateNullable(dictionary as IDictionary<string, string>))
+                {
+                    return;
+                }
+
+                int count = _reader.ReadInt32();
+                dictionary = new Dictionary<string, string>(count, comparer);
+                additionalEntries = new();
+
+                for (int i = 0; i < count; i++)
+                {
+                    string key = null;
+                    Translate(ref key);
+                    string value = null;
+                    Translate(ref value);
+                    if (additionalEntriesKeys.Contains(key))
+                    {
+                        additionalEntries[key] = value;
+                    }
+                    else if (comparer.Equals(key, SpecialKeyForDictionaryBeingNull))
+                    {
+                        // Presence of special key SpecialKeyForDictionaryBeingNull indicates that the dictionary was null.
+                        dictionary = null;
+                    }
+                    else if (dictionary is not null)
+                    {
+                        dictionary[key] = value;
+                    }
+                }
+            }
+
             public void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> dictionaryCreator)
             {
                 if (!TranslateNullable(dictionary))
@@ -1261,6 +1309,67 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
                 TranslateDictionary(ref copy, (NodePacketCollectionCreator<IDictionary<string, string>>)null);
             }
 
+            /// <summary>
+            /// Translates a dictionary of { string, string } adding extra entries.
+            /// </summary>
+            /// <param name="dictionary">The dictionary to be translated.</param>
+            /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
+            /// <param name="additionalEntries">Additional entries to be translated.</param>
+            /// <param name="additionalEntriesKeys">Additional entries keys.</param>
+            public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer, ref Dictionary<string, string> additionalEntries, HashSet<string> additionalEntriesKeys)
+            {
+                IDictionary<string, string> copy = dictionary;
+
+                // Translate whether object is Null
+                if ((copy is null) && ((additionalEntries is null) || (additionalEntries.Count == 0)))
+                {
+                    _writer.Write(false);
+                    return;
+                }
+                else
+                {
+                    // Translate that object is not null
+                    _writer.Write(true);
+                }
+
+                // Writing dictionary, extra entries and special key if copy dictionary was null
+                int count = (copy is null ? 0 : copy.Count) + (additionalEntries is null ? 0 : additionalEntries.Count) + (copy is null ? 1 : 0);
+                _writer.Write(count);
+
+                // If the dictionary was null, add a special key SpecialKeyForDictionaryBeingNull to the dictionary.
+                if (dictionary is null)
+                {
+                    string key = SpecialKeyForDictionaryBeingNull;
+                    Translate(ref key);
+                    string value = string.Empty;
+                    Translate(ref value);
+                }
+
+                if (additionalEntries is not null)
+                {
+                    // Translate extra entries
+                    foreach (KeyValuePair<string, string> pair in additionalEntries)
+                    {
+                        string key = pair.Key;
+                        Translate(ref key);
+                        string value = pair.Value;
+                        Translate(ref value);
+                    }
+                }
+
+                if (copy is not null)
+                {
+                    // Translate dictionary
+                    foreach (KeyValuePair<string, string> pair in copy)
+                    {
+                        string key = pair.Key;
+                        Translate(ref key);
+                        string value = pair.Value;
+                        Translate(ref value);
+                    }
+                }
+            }
+
             public void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> dictionaryCreator)
             {
                 if (!TranslateNullable(dictionary))
diff --git a/src/Framework/ITranslator.cs b/src/Framework/ITranslator.cs
index edb6e96dfc7..d30e207e19a 100644
--- a/src/Framework/ITranslator.cs
+++ b/src/Framework/ITranslator.cs
@@ -319,6 +319,15 @@ void TranslateArray<T>(ref T[] array)
         /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
         void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer);
 
+        /// <summary>
+        /// Translates a dictionary of { string, string } adding extra entries.
+        /// </summary>
+        /// <param name="dictionary">The dictionary to be translated.</param>
+        /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
+        /// <param name="additionalEntries">The extra entries to be translated</param>
+        /// <param name="additionalEntriesKeys">The extra entries keys</param>
+        void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer, ref Dictionary<string, string> additionalEntries, HashSet<string> additionalEntriesKeys);
+
         void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> collectionCreator);
 
         void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer);
