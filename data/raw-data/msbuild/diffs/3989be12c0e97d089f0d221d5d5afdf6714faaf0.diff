diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index cbf88055ac1..674105fdd7f 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -105,6 +105,36 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu
         }
     }
 
+    [Theory]
+    [InlineData("warning", "warning BC0101")]
+    [InlineData("error", "error BC0101")]
+    [InlineData("suggestion", "BC0101")]
+    [InlineData("default", "warning BC0101")]
+    public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string expectedOutputValues)
+    {
+        PrepareSampleProjectsAndConfig(true, out TransientTestFile projectFile, BC0101Severity);
+
+        string output = RunnerUtilities.ExecBootstrapedMSBuild(
+            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze",
+            out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
+
+        success.ShouldBeTrue();
+        output.ShouldContain(expectedOutputValues);
+    }
+
+    [Fact]
+    public void EditorConfig_SeverityNoneAppliedCorrectly()
+    {
+        PrepareSampleProjectsAndConfig(true, out TransientTestFile projectFile, "none");
+
+        string output = RunnerUtilities.ExecBootstrapedMSBuild(
+            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze",
+            out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
+
+        success.ShouldBeTrue();
+        output.ShouldNotContain("BC0101");
+    }
+
     [Theory]
     [InlineData(true, true)]
     [InlineData(false, true)]
