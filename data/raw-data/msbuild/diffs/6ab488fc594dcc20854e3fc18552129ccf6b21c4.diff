diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index ae1d70e5aa7..e6ac8089ea8 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.BackEnd;
 using System.IO;
 using System.Reflection;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.BackEnd
@@ -448,7 +449,7 @@ public void CultureInfo(string name)
             CultureInfo deserializedValue = null;
             TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
 
-            Assert.Equal(value, deserializedValue);
+            deserializedValue.ShouldBe(value);
         }
 
         [Fact]
@@ -460,7 +461,7 @@ public void CultureInfoAsNull()
             CultureInfo deserializedValue = null;
             TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
 
-            Assert.Null(deserializedValue);
+            deserializedValue.ShouldBeNull();
         }
 
         [Theory]
@@ -475,7 +476,7 @@ public void Version(string version)
             Version deserializedValue = null;
             TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
 
-            Assert.Equal(value, deserializedValue);
+            deserializedValue.ShouldBe(value);
         }
 
         [Fact]
@@ -487,24 +488,24 @@ public void VersionAsNull()
             Version deserializedValue = null;
             TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
 
-            Assert.Null(deserializedValue);
+            deserializedValue.ShouldBeNull();
         }
 
         [Fact]
         public void HashSetOfT()
         {
-            HashSet<BaseClass> value = new()
+            HashSet<BaseClass> values = new()
             {
                 new BaseClass(1),
                 new BaseClass(2),
                 null
             };
-            TranslationHelpers.GetWriteTranslator().TranslateHashSet(ref value, BaseClass.FactoryForDeserialization, capacity => new ());
+            TranslationHelpers.GetWriteTranslator().TranslateHashSet(ref values, BaseClass.FactoryForDeserialization, capacity => new());
 
-            HashSet<BaseClass> deserializedValue = null;
-            TranslationHelpers.GetReadTranslator().TranslateHashSet(ref deserializedValue, BaseClass.FactoryForDeserialization, capacity => new ());
+            HashSet<BaseClass> deserializedValues = null;
+            TranslationHelpers.GetReadTranslator().TranslateHashSet(ref deserializedValues, BaseClass.FactoryForDeserialization, capacity => new());
 
-            Assert.Equal(value, deserializedValue, BaseClass.EqualityComparer);
+            deserializedValues.ShouldBe(values, ignoreOrder: true);
         }
 
         [Fact]
@@ -516,7 +517,7 @@ public void HashSetOfTAsNull()
             HashSet<BaseClass> deserializedValue = null;
             TranslationHelpers.GetReadTranslator().TranslateHashSet(ref deserializedValue, BaseClass.FactoryForDeserialization, capacity => new());
 
-            Assert.Null(deserializedValue);
+            deserializedValue.ShouldBeNull();
         }
 
         [Fact]
@@ -528,7 +529,7 @@ public void AssemblyNameAsNull()
             AssemblyName deserializedValue = null;
             TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
 
-            Assert.Null(deserializedValue);
+            deserializedValue.ShouldBeNull();
         }
 
         [Fact]
@@ -578,17 +579,17 @@ public void AssemblyNameWithMinimalFields()
         /// </summary>
         private static void HelperAssertAssemblyNameEqual(AssemblyName expected, AssemblyName actual)
         {
-            Assert.Equal(expected.Name, actual.Name);
-            Assert.Equal(expected.Version, actual.Version);
-            Assert.Equal(expected.Flags, actual.Flags);
-            Assert.Equal(expected.ProcessorArchitecture, actual.ProcessorArchitecture);
-            Assert.Equal(expected.CultureInfo, actual.CultureInfo);
-            Assert.Equal(expected.HashAlgorithm, actual.HashAlgorithm);
-            Assert.Equal(expected.VersionCompatibility, actual.VersionCompatibility);
-            Assert.Equal(expected.CodeBase, actual.CodeBase);
+            actual.Name.ShouldBe(expected.Name);
+            actual.Version.ShouldBe(expected.Version);
+            actual.Flags.ShouldBe(expected.Flags);
+            actual.ProcessorArchitecture.ShouldBe(expected.ProcessorArchitecture);
+            actual.CultureInfo.ShouldBe(expected.CultureInfo);
+            actual.HashAlgorithm.ShouldBe(expected.HashAlgorithm);
+            actual.VersionCompatibility.ShouldBe(expected.VersionCompatibility);
+            actual.CodeBase.ShouldBe(expected.CodeBase);
 
-            Assert.Equal(expected.GetPublicKey(), actual.GetPublicKey());
-            Assert.Equal(expected.GetPublicKeyToken(), actual.GetPublicKeyToken());
+            actual.GetPublicKey().ShouldBe(expected.GetPublicKey());
+            actual.GetPublicKeyToken().ShouldBe(expected.GetPublicKeyToken());
         }
 
         /// <summary>
@@ -770,6 +771,24 @@ protected BaseClass()
             {
             }
 
+            protected bool Equals(BaseClass other)
+            {
+                return _baseValue == other._baseValue;
+            }
+
+            public override bool Equals(object obj)
+            {
+                if (ReferenceEquals(null, obj)) return false;
+                if (ReferenceEquals(this, obj)) return true;
+                if (obj.GetType() != this.GetType()) return false;
+                return Equals((BaseClass) obj);
+            }
+
+            public override int GetHashCode()
+            {
+                return _baseValue;
+            }
+
             /// <summary>
             /// Gets a comparer.
             /// </summary>
@@ -778,11 +797,6 @@ static public IComparer<BaseClass> Comparer
                 get { return new BaseClassComparer(); }
             }
 
-            static public IEqualityComparer<BaseClass> EqualityComparer
-            {
-                get { return new BaseClassEqualityComparer(); }
-            }
-
             /// <summary>
             /// Gets the value.
             /// </summary>
@@ -841,23 +855,6 @@ public int Compare(BaseClass x, BaseClass y)
                 }
                 #endregion
             }
-
-            private class BaseClassEqualityComparer : IEqualityComparer<BaseClass>
-            {
-                public bool Equals(BaseClass x, BaseClass y)
-                {
-                    if (ReferenceEquals(x, y)) return true;
-                    if (ReferenceEquals(x, null)) return false;
-                    if (ReferenceEquals(y, null)) return false;
-                    if (x.GetType() != y.GetType()) return false;
-                    return x._baseValue == y._baseValue;
-                }
-
-                public int GetHashCode(BaseClass obj)
-                {
-                    return obj._baseValue;
-                }
-            }
         }
 
         /// <summary>
diff --git a/src/Shared/TranslatorHelpers.cs b/src/Shared/TranslatorHelpers.cs
index 1b316dcd564..9cab3485c97 100644
--- a/src/Shared/TranslatorHelpers.cs
+++ b/src/Shared/TranslatorHelpers.cs
@@ -129,7 +129,7 @@ public static void TranslateHashSet<T>(
                 hashSet = collectionFactory(count);
                 for (int i = 0; i < count; i++)
                 {
-                    T value = default(T);
+                    T value = default;
                     translator.Translate(ref value, valueFactory);
                     hashSet.Add(value);
                 }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 6ea128680d9..80c610e5ab7 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -5,6 +5,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
@@ -45,7 +46,7 @@ public void RoundTripEmptyState()
 
             var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
 
-            Assert.NotNull(deserialized);
+            deserialized.ShouldNotBeNull();
         }
 
         [Fact]
@@ -64,7 +65,8 @@ public void WrongFileSignature()
                 }
 
                 var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-                Assert.Null(deserialized);
+
+                deserialized.ShouldBeNull();
             }
         }
 
@@ -82,7 +84,8 @@ public void WrongFileVersion()
             }
 
             var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-            Assert.Null(deserialized);
+
+            deserialized.ShouldBeNull();
         }
 
         [Fact]
@@ -101,7 +104,8 @@ public void CorrectFileSignature()
                 }
 
                 var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-                Assert.NotNull(deserialized);
+
+                deserialized.ShouldNotBeNull();
             }
         }
 
@@ -119,7 +123,8 @@ public void CorrectFileVersion()
             }
 
             var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-            Assert.NotNull(deserialized);
+
+            deserialized.ShouldNotBeNull();
         }
 
         [Fact]
@@ -169,6 +174,7 @@ public void VerifySampleStateDeserialization()
 
             var fileSample = GetTestPayloadFileName($@"AssemblyDependency\CacheFileSamples\{sampleName}");
             var deserializedByTranslator = SystemState.DeserializeCacheByTranslator(fileSample, _taskLoggingHelper);
+            deserializedByTranslator.ShouldNotBeNull();
 
             deserializedByTranslator.SetGetLastWriteTime(path =>
             {
@@ -187,21 +193,13 @@ public void VerifySampleStateDeserialization()
                 out string[] scatterFiles,
                 out FrameworkName frameworkNameAttribute);
 
-            Assert.NotNull(assemblyName);
-            Assert.Equal(
-                new AssemblyNameExtension(expectedAssemblyName, false),
-                assemblyName);
-            Assert.Empty(scatterFiles);
-            Assert.Equal(
-                new FrameworkName(expectedFrameworkName),
-                frameworkNameAttribute);
-
-            Assert.NotNull(dependencies);
-            Assert.Equal(expectedDependencies.Length, dependencies.Length);
-            foreach (var expectedDependency in expectedDependencies)
-            {
-                Assert.Contains(new AssemblyNameExtension(expectedDependency), dependencies);
-            }
+
+            assemblyName.ShouldNotBeNull();
+            assemblyName.ShouldBe(new AssemblyNameExtension(expectedAssemblyName, false));
+            scatterFiles.ShouldBeEmpty();
+            frameworkNameAttribute.ShouldBe(new FrameworkName(expectedFrameworkName));
+            dependencies.ShouldNotBeNull();
+            expectedDependencies.ShouldBe(expectedDependencies, ignoreOrder: true);
         }
 
         private static string GetTestPayloadFileName(string name)
diff --git a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
index 96314391e09..bfb9dd55cb6 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
@@ -4,6 +4,7 @@
 using System.Runtime.Versioning;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Tasks;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
@@ -20,7 +21,7 @@ public void NullFrameworkName()
             GetWriteTranslator().Translate(ref value);
             GetReadTranslator().Translate(ref value);
 
-            Assert.Null(value);
+            value.ShouldBeNull();
         }
 
         [Theory]
@@ -32,8 +33,8 @@ public void ValidFrameworkName(FrameworkName value)
             GetWriteTranslator().Translate(ref value);
             GetReadTranslator().Translate(ref deserialized);
 
-            Assert.NotNull(deserialized);
-            Assert.Equal(value, deserialized);
+            deserialized.ShouldNotBeNull();
+            deserialized.ShouldBe(value);
         }
 
         public static IEnumerable<object[]> SampleFrameworkNames =>
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 3d17a4967a4..cbeac2a38cf 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -68,8 +68,7 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
         {
             StateFileBase retVal = null;
 
-            // First, we read the cache from disk if one exists, or if one does not exist
-            // then we create one.  
+            // First, we read the cache from disk if one exists, or if one does not exist, we create one.
             try
             {
                 if (!string.IsNullOrEmpty(stateFile) && FileSystems.Default.FileExists(stateFile))
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 288947b495a..b4f422959a2 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -264,13 +264,8 @@ internal void SerializeCacheByTranslator(string stateFile, TaskLoggingHelper log
                     isDirty = false;
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.NotExpectedSerializationException(e))
             {
-                // If there was a problem writing the file (like it's read-only or locked on disk, for
-                // example), then eat the exception and log a warning.  Otherwise, rethrow.
-                if (ExceptionHandling.NotExpectedSerializationException(e))
-                    throw;
-
                 // Not being able to serialize the cache is not an error, but we let the user know anyway.
                 // Don't want to hold up processing just because we couldn't read the file.
                 log.LogWarningWithCodeFromResources("General.CouldNotWriteStateFile", stateFile, e.Message);
@@ -279,12 +274,11 @@ internal void SerializeCacheByTranslator(string stateFile, TaskLoggingHelper log
 
         /// <summary>
         /// Read the contents of this object out to the specified file.
-        /// TODO: once all derived classes from StateFileBase adopt new serialization, we shall consider to mode this into base class
+        /// TODO: once all classes derived from StateFileBase adopt the new serialization, we should consider moving this into the base class
         /// </summary>
         internal static SystemState DeserializeCacheByTranslator(string stateFile, TaskLoggingHelper log)
         {
-            // First, we read the cache from disk if one exists, or if one does not exist
-            // then we create one.
+            // First, we read the cache from disk if one exists, or if one does not exist, we create one.
             try
             {
                 if (!string.IsNullOrEmpty(stateFile) && FileSystems.Default.FileExists(stateFile))
@@ -309,19 +303,13 @@ internal static SystemState DeserializeCacheByTranslator(string stateFile, TaskL
                     return systemState;
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 // The deserialization process seems like it can throw just about 
                 // any exception imaginable.  Catch them all here.
                 // Not being able to deserialize the cache is not an error, but we let the user know anyway.
                 // Don't want to hold up processing just because we couldn't read the file.
                 log.LogWarningWithCodeFromResources("General.CouldNotReadStateFile", stateFile, e.Message);
-                return null;
             }
 
             return null;
diff --git a/src/Tasks/TaskTranslatorHelpers.cs b/src/Tasks/TaskTranslatorHelpers.cs
index 1d4b58a7ede..7db48cf61ae 100644
--- a/src/Tasks/TaskTranslatorHelpers.cs
+++ b/src/Tasks/TaskTranslatorHelpers.cs
@@ -1,3 +1,6 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
 using System;
 using System.Runtime.Versioning;
 using Microsoft.Build.BackEnd;
