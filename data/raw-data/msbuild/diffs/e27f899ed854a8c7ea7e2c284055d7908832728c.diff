diff --git a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
index 490ab73ea35..1709fa7d5d7 100644
--- a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -7,8 +7,8 @@
 using System.Reflection.Metadata;
 using System.Text;
 using System.Threading.Tasks;
-using Microsoft.Build.BuildCop.Infrastructure;
-using Microsoft.Build.Experimental.BuildCop;
+using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Experimental.BuildCheck;
 using Shouldly;
 using Xunit;
 
@@ -110,7 +110,7 @@ public void CreateBuildAnalyzerConfiguration_ExceptionOnInvalidInputValue(string
                 { key , value},
             };
 
-            var exception = Should.Throw<BuildCopConfigurationException>(() => {
+            var exception = Should.Throw<BuildCheckConfigurationException>(() => {
                 BuildAnalyzerConfiguration.Create(config);
             });
             exception.Message.ShouldContain($"Incorrect value provided in config for key {key}");
diff --git a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
index 323e58cfafd..a1af515a394 100644
--- a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
@@ -11,7 +11,7 @@
 using System.Threading.Tasks;
 using Microsoft.Build.BuildCop.Infrastructure;
 using Microsoft.Build.BuildCop.Infrastructure.EditorConfig;
-using Microsoft.Build.Experimental.BuildCop;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index 28ec3c01017..a5bd5f0fe5d 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -1,6 +1,10 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using Microsoft.Build.BuildCheck.Infrastructure;
+
 namespace Microsoft.Build.Experimental.BuildCheck;
 
 /// <summary>
@@ -86,9 +90,9 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
 
         if (!isParsed)
         {
-            throw new BuildCopConfigurationException(
+            throw new BuildCheckConfigurationException(
                 $"Incorrect value provided in config for key {key}",
-                buildCopConfigurationErrorScope: BuildCopConfigurationErrorScope.EditorConfigParser);
+                buildCopConfigurationErrorScope: BuildCheckConfigurationErrorScope.EditorConfigParser);
         }
 
         return isParsed;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index b656ee1216f..de862ad51ba 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 internal sealed class BuildCheckCentralContext
 {
     private readonly ConfigurationProvider _configurationProvider;
-    internal BuildCopCentralContext(ConfigurationProvider configurationProvider)
+    internal BuildCheckCentralContext(ConfigurationProvider configurationProvider)
     {
         _configurationProvider = configurationProvider;
     }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCopConfigurationErrorScope.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs
similarity index 75%
rename from src/Build/BuildCheck/Infrastructure/BuildCopConfigurationErrorScope.cs
rename to src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs
index 5836a28f2f9..beb3382152d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCopConfigurationErrorScope.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs
@@ -7,9 +7,9 @@
 using System.Text;
 using System.Threading.Tasks;
 
-namespace Microsoft.Build.BuildCop.Infrastructure
+namespace Microsoft.Build.BuildCheck.Infrastructure
 {
-    internal enum BuildCopConfigurationErrorScope
+    internal enum BuildCheckConfigurationErrorScope
     {
         SingleRule,
         EditorConfigParser
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
index babedcf5a42..c599e436315 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
@@ -16,15 +16,15 @@ internal class BuildCheckConfigurationException : Exception
     /// This exception usually leads to defuncting the particular analyzer for the rest of the build (even if issue occured with a single project).
     /// </summary>
     ///
-    internal BuildCopConfigurationErrorScope buildCopConfigurationErrorScope;
+    internal BuildCheckConfigurationErrorScope buildCheckConfigurationErrorScope;
 
-    public BuildCheckConfigurationException(string message, Exception innerException, BuildCopConfigurationErrorScope buildCopConfigurationErrorScope = BuildCopConfigurationErrorScope.SingleRule) : base(message, innerException)
+    public BuildCheckConfigurationException(string message, Exception innerException, BuildCheckConfigurationErrorScope buildCopConfigurationErrorScope = BuildCheckConfigurationErrorScope.SingleRule) : base(message, innerException)
     {
-        this.buildCopConfigurationErrorScope = buildCopConfigurationErrorScope;
+        this.buildCheckConfigurationErrorScope = buildCopConfigurationErrorScope;
     }
 
-    public BuildCopConfigurationException(string message, BuildCopConfigurationErrorScope buildCopConfigurationErrorScope = BuildCopConfigurationErrorScope.SingleRule) : base(message)
+    public BuildCheckConfigurationException(string message, BuildCheckConfigurationErrorScope buildCopConfigurationErrorScope = BuildCheckConfigurationErrorScope.SingleRule) : base(message)
     {
-        this.buildCopConfigurationErrorScope = buildCopConfigurationErrorScope;
+        this.buildCheckConfigurationErrorScope = buildCopConfigurationErrorScope;
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index f1d8d0e2dd2..96103663f2e 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -72,7 +72,7 @@ private sealed class BuildCheckManager : IBuildCheckManager
     {
         private readonly TracingReporter _tracingReporter = new TracingReporter();
         private readonly ConfigurationProvider _configurationProvider = new ConfigurationProvider();
-        private readonly BuildCopCentralContext _buildCopCentralContext;
+        private readonly BuildCheckCentralContext _buildCheckCentralContext;
         private readonly ILoggingService _loggingService;
         private readonly List<BuildAnalyzerFactoryContext> _analyzersRegistry =[];
         private readonly bool[] _enabledDataSources = new bool[(int)BuildCheckDataSource.ValuesCount];
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index 3b0e59faedb..b6b8ec160d4 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -11,7 +11,7 @@
 using System.Text.Json;
 using Microsoft.Build.Experimental.BuildCheck;
 using System.Configuration;
-using Microsoft.Build.BuildCop.Infrastructure.EditorConfig;
+using Microsoft.Build.BuildCheck.Infrastructure.EditorConfig;
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 
@@ -130,7 +130,7 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
         }
         catch (Exception exception)
         {
-            throw new BuildCopConfigurationException($"Parsing editorConfig data failed", exception, BuildCopConfigurationErrorScope.EditorConfigParser);
+            throw new BuildCheckConfigurationException($"Parsing editorConfig data failed", exception, BuildCheckConfigurationErrorScope.EditorConfigParser);
         }
 
         var keyTosearch = $"msbuild_analyzer.{ruleId}.";
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
index 6ef8cc957a6..faefc2499d9 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
@@ -18,7 +18,7 @@
 using System.Text.RegularExpressions;
 using System.Threading.Tasks;
 
-namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
+namespace Microsoft.Build.BuildCheck.Infrastructure.EditorConfig
 {
     internal partial class EditorConfigFile
     {
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
index 9714a2e9b03..ffeeac4bb68 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
@@ -19,7 +19,7 @@
 using System.Text.RegularExpressions;
 using System.Threading.Tasks;
 
-namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
+namespace Microsoft.Build.BuildCheck.Infrastructure.EditorConfig
 {
     internal class EditorConfigGlobsMatcher
     {
@@ -146,7 +146,7 @@ internal static string UnescapeSectionName(string sectionName)
                 {
                     // We only call this on strings that were already passed through IsAbsoluteEditorConfigPath, so
                     // we shouldn't have any other token kinds here.
-                    throw new BuildCopConfigurationException($"UnexpectedToken: {tokenKind}", BuildCopConfigurationErrorScope.EditorConfigParser);
+                    throw new BuildCheckConfigurationException($"UnexpectedToken: {tokenKind}", BuildCheckConfigurationErrorScope.EditorConfigParser);
                 }
             }
             return sb.ToString();
@@ -310,7 +310,7 @@ private static bool TryCompilePathList(
                         }
                         break;
                     default:
-                        throw new BuildCopConfigurationException($"UnexpectedToken: {tokenKind}", BuildCopConfigurationErrorScope.EditorConfigParser);
+                        throw new BuildCheckConfigurationException($"UnexpectedToken: {tokenKind}", BuildCheckConfigurationErrorScope.EditorConfigParser);
                 }
             }
             // If we're parsing a choice we should not exit without a closing '}'
@@ -408,7 +408,7 @@ private static bool TryCompileChoice(
                 }
                 else
                 {
-                    throw new BuildCopConfigurationException($"UnexpectedValue: {lastChar}", BuildCopConfigurationErrorScope.EditorConfigParser);
+                    throw new BuildCheckConfigurationException($"UnexpectedValue: {lastChar}", BuildCheckConfigurationErrorScope.EditorConfigParser);
                 }
             }
 
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
index 6f8d7e9006b..430b90b9fd5 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -11,9 +11,9 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.Shared;
-using static Microsoft.Build.BuildCop.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
+using static Microsoft.Build.BuildCheck.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
 
-namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
+namespace Microsoft.Build.BuildCheck.Infrastructure.EditorConfig
 {
     internal class EditorConfigParser
     {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 2daff2fe714..ffdb46b168d 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -165,6 +165,10 @@
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManager.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManagerProvider.cs" />
     <Compile Include="BuildCheck\Infrastructure\TracingReporter.cs" />
+    <Compile Include="BuildCheck\Infrastructure\EditorConfig\EditorConfigFile.cs" />
+    <Compile Include="BuildCheck\Infrastructure\EditorConfig\EditorConfigGlobsMatcher.cs" />
+    <Compile Include="BuildCheck\Infrastructure\EditorConfig\EditorConfigParser.cs" />
+    <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationErrorScope.cs" />
     <Compile Include="BuildCheck\OM\BuildCheckDataContext.cs" />
     <Compile Include="BuildCheck\API\BuildAnalyzer.cs" />
     <Compile Include="BuildCheck\API\BuildAnalyzerConfiguration.cs" />
