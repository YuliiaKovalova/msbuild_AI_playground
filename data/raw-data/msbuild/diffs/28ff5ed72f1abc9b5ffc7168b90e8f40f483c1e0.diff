diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 8acc6ee7306..328239d841d 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -600,6 +600,8 @@ private enum ExitPacketState
 
             private AutoResetEvent _packetEnqueued;
 
+            private CancellationTokenSource _packetQueueDrainDelayCancellation;
+
             private Thread drainPacketQueueThread;
 
             /// <summary>
@@ -621,6 +623,8 @@ public NodeContext(int nodeId, Process process,
                 _binaryReaderFactory = InterningBinaryReader.CreateSharedBuffer();
 
                 _packetEnqueued = new AutoResetEvent(false);
+                _packetQueueDrainDelayCancellation = new CancellationTokenSource();
+
                 // specify the smallest stack size - 256kb
                 drainPacketQueueThread = new Thread(DrainPacketQueue, 256 * 1024);
                 drainPacketQueueThread.IsBackground = true;
@@ -773,6 +777,7 @@ private void DrainPacketQueue(object state)
                             if (IsExitPacket(packet))
                             {
                                 context._exitPacketState = ExitPacketState.ExitPacketSent;
+                                context._packetQueueDrainDelayCancellation.Cancel();
                             }
                         }
                         catch (IOException e)
@@ -827,17 +832,14 @@ public async Task WaitForExitAsync(ILoggingService loggingService)
                     // Wait up to 100ms until all remaining packets are sent.
                     // We don't need to wait long, just long enough for the Task to start running on the ThreadPool.
 #if NET
-                    // await _packetWriteDrainTask.WaitAsync(TimeSpan.FromMilliseconds(100)).ConfigureAwait(ConfigureAwaitOptions.SuppressThrowing);
-                    await Task.Delay(100);
+                    await Task.Delay(100, _packetQueueDrainDelayCancellation.Token).ConfigureAwait(ConfigureAwaitOptions.SuppressThrowing);
 #else
-                    using (var cts = new CancellationTokenSource(100))
-                    {
-                        await Task.Delay(100, cts.Token);
-                        cts.Cancel();
-                    }
+                    await Task.WhenAny(Task.Delay(100, _packetQueueDrainDelayCancellation.Token));
 #endif
                 }
 
+                _packetQueueDrainDelayCancellation?.Dispose();
+
                 if (_exitPacketState == ExitPacketState.ExitPacketSent)
                 {
                     CommunicationsUtilities.Trace("Waiting for node with pid = {0} to exit", _process.Id);
