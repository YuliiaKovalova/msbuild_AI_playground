diff --git a/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs b/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs
new file mode 100644
index 00000000000..ef3215863cb
--- /dev/null
+++ b/src/Analyzers.UnitTests/EditorConfigParser_Tests.cs
@@ -0,0 +1,128 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Reflection;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BuildCop.Infrastructure.EditorConfig;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using static Microsoft.Build.BuildCop.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
+
+#nullable disable
+
+namespace Microsoft.Build.Analyzers.UnitTests
+{
+    public class EditorConfigParser_Tests
+    {
+        [Fact]
+        public void NoSectionConfigured_ResultsEmptyResultConfig()
+        {
+            var configs = new List<EditorConfigFile>(){
+                EditorConfigFile.Parse(""""
+                    property1=value1
+""""),
+                EditorConfigFile.Parse(""""
+                    property1=value2
+                    """"),
+                EditorConfigFile.Parse(""""
+                    property1=value3
+                    """"),
+            };
+
+            var parser = new EditorConfigParser();
+            var mergedResult = parser.MergeEditorConfigFiles(configs, "/some/path/to/file");
+            mergedResult.Keys.Count.ShouldBe(0);
+        }
+
+        [Fact]
+        public void ProperOrderOfconfiguration_ClosestToTheFileShouldBeApplied()
+        {
+            var configs = new List<EditorConfigFile>(){
+                EditorConfigFile.Parse(""""
+                    [*]
+                    property1=value1
+""""),
+                EditorConfigFile.Parse(""""
+                    [*]
+                    property1=value2
+                    """"),
+                EditorConfigFile.Parse(""""
+                    [*]
+                    property1=value3
+                    """"),
+            };
+
+            var parser = new EditorConfigParser();
+            var mergedResult = parser.MergeEditorConfigFiles(configs, "/some/path/to/file.proj");
+            mergedResult.Keys.Count.ShouldBe(1);
+            mergedResult["property1"].ShouldBe("value1");
+        }
+
+        [Fact]
+        public void EditorconfigFileDiscovery_RootTrue()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFolder workFolder2 = testEnvironment.CreateFolder(Path.Combine(workFolder1.Path, "subfolder"), createFolder: true);
+
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder2, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            test_key=test_value_updated
+            """);
+
+
+            TransientTestFile config2 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            [*.csproj]
+            test_key=should_not_be_respected_and_parsed
+            """);
+
+            var parser = new EditorConfigParser();
+            var listOfEditorConfigFile = parser.EditorConfigFileDiscovery(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj") ).ToList();
+            // should be one because root=true so we do not need to go further
+            listOfEditorConfigFile.Count.ShouldBe(1);
+            listOfEditorConfigFile[0].IsRoot.ShouldBeTrue();
+            listOfEditorConfigFile[0].NamedSections[0].Name.ShouldBe("*.csproj");
+            listOfEditorConfigFile[0].NamedSections[0].Properties["test_key"].ShouldBe("test_value_updated");
+        }
+
+        [Fact]
+        public void EditorconfigFileDiscovery_RootFalse()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFolder workFolder2 = testEnvironment.CreateFolder(Path.Combine(workFolder1.Path, "subfolder"), createFolder: true);
+
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder2, ".editorconfig",
+            """
+            [*.csproj]
+            test_key=test_value_updated
+            """);
+
+            TransientTestFile config2 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            [*.csproj]
+            test_key=will_be_there
+            """);
+
+            var parser = new EditorConfigParser();
+            var listOfEditorConfigFile = parser.EditorConfigFileDiscovery(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj")).ToList();
+
+            listOfEditorConfigFile.Count.ShouldBe(2);
+            listOfEditorConfigFile[0].IsRoot.ShouldBeFalse();
+            listOfEditorConfigFile[0].NamedSections[0].Name.ShouldBe("*.csproj");
+        }
+    }
+}
diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index 24ed7476d52..64b27ef4951 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -19,7 +19,7 @@ namespace Microsoft.Build.BuildCop.Infrastructure;
 // TODO: https://github.com/dotnet/msbuild/issues/9628
 internal class ConfigurationProvider
 {
-    private IEditorConfigParser s_editorConfigParser = new EditorConfigParser();
+    private EditorConfigParser s_editorConfigParser = new EditorConfigParser();
     // TODO: This module should have a mechanism for removing unneeded configurations
     //  (disabled rules and analyzers that need to run in different node)
     private readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = new Dictionary<string, BuildAnalyzerConfiguration>();
@@ -29,6 +29,7 @@ internal class ConfigurationProvider
         nameof(BuildAnalyzerConfiguration.IsEnabled).ToLower(),
         nameof(BuildAnalyzerConfiguration.Severity).ToLower()
     };
+
     /// <summary>
     /// Gets the user specified unrecognized configuration for the given analyzer rule.
     /// 
@@ -61,7 +62,7 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
     }
 
     /// <summary>
-    /// 
+    /// Verifies if previously fetched custom configurations are equal to current one. 
     /// </summary>
     /// <param name="projectFullPath"></param>
     /// <param name="ruleId"></param>
@@ -69,7 +70,9 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
     /// <returns></returns>
     public void CheckCustomConfigurationDataValidity(string projectFullPath, string ruleId)
     {
-        // TBD
+        // Note: requires another cache layer for custom configuration. 
+        // var prevData = GetCustomConfiguration(projectFullPath, ruleId);
+        // if prevData in cache => raise BuildCopConfigurationException;
     }
 
     public BuildAnalyzerConfigurationInternal[] GetMergedConfigurations(
@@ -126,6 +129,7 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
         {
             // Note: catch any exception, we do not want to break because of the failed operation with parsing the editorconfig.
             Debug.WriteLine(ex);
+            throw new BuildCopConfigurationException($"Fetchin editorConfig data failed: {ex.Message}");
         }
 
         var keyTosearch = $"msbuild_analyzer.{ruleId}.";
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
index f2fff4b9e32..aa19a50acb6 100644
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -15,7 +15,7 @@
 
 namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
 {
-    internal class EditorConfigParser : IEditorConfigParser
+    internal class EditorConfigParser
     {
         private const string EditorconfigFile = ".editorconfig";
         private Dictionary<string, EditorConfigFile> editorConfigFileCache;
@@ -25,32 +25,32 @@ internal EditorConfigParser()
             editorConfigFileCache = new Dictionary<string, EditorConfigFile>();
         }
 
-        public Dictionary<string, string> Parse(string filePath)
+        internal Dictionary<string, string> Parse(string filePath)
         {
             var editorConfigs = EditorConfigFileDiscovery(filePath);
             return MergeEditorConfigFiles(editorConfigs, filePath);
         }
 
-        public IList<EditorConfigFile> EditorConfigFileDiscovery(string filePath)
+        internal IEnumerable<EditorConfigFile> EditorConfigFileDiscovery(string filePath)
         {
             var editorConfigDataFromFilesList = new List<EditorConfigFile>();
 
             var directoryOfTheProject = Path.GetDirectoryName(filePath);
-            var editorConfigFile = FileUtilities.GetPathOfFileAbove(EditorconfigFile, directoryOfTheProject);
+            var editorConfigFilePath = FileUtilities.GetPathOfFileAbove(EditorconfigFile, directoryOfTheProject);
 
-            while (editorConfigFile != string.Empty)
+            while (editorConfigFilePath != string.Empty)
             {
                 EditorConfigFile editorConfig;
 
-                if (editorConfigFileCache.ContainsKey(editorConfigFile))
+                if (editorConfigFileCache.ContainsKey(editorConfigFilePath))
                 {
-                    editorConfig = editorConfigFileCache[editorConfigFile];
+                    editorConfig = editorConfigFileCache[editorConfigFilePath];
                 }
                 else
                 {
-                    var editorConfigfileContent = File.ReadAllText(editorConfigFile);
+                    var editorConfigfileContent = File.ReadAllText(editorConfigFilePath);
                     editorConfig = EditorConfigFile.Parse(editorConfigfileContent);
-                    editorConfigFileCache[editorConfigFile] = editorConfig;
+                    editorConfigFileCache[editorConfigFilePath] = editorConfig;
                 }
 
                 editorConfigDataFromFilesList.Add(editorConfig);
@@ -61,22 +61,20 @@ public IList<EditorConfigFile> EditorConfigFileDiscovery(string filePath)
                 }
                 else
                 {
-                    editorConfigFile = FileUtilities.GetPathOfFileAbove(EditorconfigFile, Path.GetDirectoryName(Path.GetDirectoryName(editorConfigFile)));
+                    editorConfigFilePath = FileUtilities.GetPathOfFileAbove(EditorconfigFile, Path.GetDirectoryName(Path.GetDirectoryName(editorConfigFilePath)));
                 }
             }
 
             return editorConfigDataFromFilesList;
         }
 
-        public Dictionary<string, string> MergeEditorConfigFiles(IEnumerable<EditorConfigFile> editorConfigFiles, string filePath)
+        internal Dictionary<string, string> MergeEditorConfigFiles(IEnumerable<EditorConfigFile> editorConfigFiles, string filePath)
         {
             var resultingDictionary = new Dictionary<string, string>();
 
             if (editorConfigFiles.Any())
             {
-                editorConfigFiles.Reverse();
-
-                foreach (var configData in editorConfigFiles)
+                foreach (var configData in editorConfigFiles.Reverse())
                 {
                     foreach (var section in configData.NamedSections)
                     {
@@ -98,6 +96,6 @@ public Dictionary<string, string> MergeEditorConfigFiles(IEnumerable<EditorConfi
             return resultingDictionary;
         }
 
-        private static string NormalizeWithForwardSlash(string p) => Path.DirectorySeparatorChar == '/' ? p : p.Replace(Path.DirectorySeparatorChar, '/');
+        internal static string NormalizeWithForwardSlash(string p) => Path.DirectorySeparatorChar == '/' ? p : p.Replace(Path.DirectorySeparatorChar, '/');
     }
 }
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs
deleted file mode 100644
index c40685f5524..00000000000
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs
+++ /dev/null
@@ -1,16 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
-{
-    internal interface IEditorConfigParser
-    {
-        public Dictionary<string, string> Parse(string filePath);
-    }
-}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index d1ee0799fae..fcdc6bd4851 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -184,7 +184,6 @@
     <Compile Include="BuildCop\Infrastructure\EditorConfig\EditorConfigFile.cs" />
     <Compile Include="BuildCop\Infrastructure\EditorConfig\EditorConfigGlobsMatcher.cs" />
     <Compile Include="BuildCop\Infrastructure\EditorConfig\EditorConfigParser.cs" />
-    <Compile Include="BuildCop\Infrastructure\EditorConfig\IEditorConfigParser.cs" />
     <Compile Include="BuildCop\Infrastructure\IBuildCopContext.cs" />
     <Compile Include="BuildCop\Infrastructure\IBuildCopManager.cs" />
     <Compile Include="BuildCop\Logging\IBuildAnalysisLoggingContext.cs" />
