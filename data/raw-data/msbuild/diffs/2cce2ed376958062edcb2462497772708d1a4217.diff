diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index c30721a2d59..37971c64355 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1109,7 +1109,77 @@ public void HasMetadata()
 
 </Project>");
 
-            logger.AssertLogContains("[One|Three|Four]");
+            logger.AssertLogContains("[One|Three|Four|Five]");
+        }
+
+        /// <summary>
+        /// Test metadata item functions with empty string metadata and not present metadata
+        /// </summary>
+        [Fact]
+        public void MetadataFuntionTestingWithEmtpyString()
+        {
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess("""
+<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+
+   <ItemGroup>
+    <_Item Include="One">
+      <A>true</A>
+    </_Item>
+    <_Item Include="Two">
+      <A>false</A>
+    </_Item>
+    <_Item Include="Three">
+      <A></A>
+    </_Item>
+    <_Item Include="Four">
+      <B></B>
+    </_Item>
+  </ItemGroup>
+
+  <Target Name="Tests" DependsOnTargets="WithMetadataValueAFalse;WithMetadataValueAEmpty;WithOutMetadataValueAEmtpy;HasMetadataA;WithMetadataValueCEmpty;HasMetadataC;AnyHaveMetadataValueCEmpty;WithOutMetadataValueCEmpty" />
+
+  <Target Name="WithMetadataValueAFalse">
+    <Message Text="WithMetadataValueAFalse: [@(_Item->WithMetadataValue('A', 'false'), '|')]"/>
+  </Target>
+
+  <Target Name="WithMetadataValueAEmpty">
+    <Message Text="WithMetadataValueAEmpty: [@(_Item->WithMetadataValue('A', ''), '|')]"/>
+  </Target>
+
+  <Target Name="WithOutMetadataValueAEmtpy">
+    <Message Text="WithOutMetadataValueAEmpty: [@(_Item->WithOutMetadataValue('A', ''), '|')]"/>
+  </Target>
+
+  <Target Name="HasMetadataA">
+    <Message Text="HasMetadataA: [@(_Item->HasMetadata('A'), '|')]"/>
+  </Target>
+
+  <Target Name="WithMetadataValueCEmpty">
+    <Message Text="WithMetadataValueCEmpty: [@(_Item->WithMetadataValue('C', ''), '|')]"/>
+  </Target>
+
+  <Target Name="HasMetadataC">
+    <Message Text="HasMetadataC: [@(_Item->HasMetadata('C'), '|')]"/>
+  </Target>
+
+  <Target Name="AnyHaveMetadataValueCEmpty">
+    <Message Text="AnyHaveMetadataValueCEmpty: [@(_Item->AnyHaveMetadataValue('C', ''), '|')]"/>
+  </Target>
+
+  <Target Name="WithOutMetadataValueCEmpty">
+    <Message Text="WithOutMetadataValueCEmpty: [@(_Item->WithOutMetadataValue('C', ''), '|')]"/>
+  </Target>
+
+</Project>
+""");
+            logger.AssertLogContains("WithMetadataValueAFalse: [Two]");
+            logger.AssertLogContains("WithMetadataValueAEmpty: [Three]");
+            logger.AssertLogContains("WithOutMetadataValueAEmpty: [One|Two|Four]");
+            logger.AssertLogContains("HasMetadataA: [One|Two|Three]");
+            logger.AssertLogContains("WithMetadataValueCEmpty: []");
+            logger.AssertLogContains("HasMetadataC: []");
+            logger.AssertLogContains("AnyHaveMetadataValueCEmpty: [false]");
+            logger.AssertLogContains("WithOutMetadataValueCEmpty: [One|Two|Three|Four]");
         }
 
         [Fact]
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 3da644eb1b5..7ed20329df0 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2579,7 +2579,7 @@ internal static IEnumerable<Pair<string, S>> Metadata(Expander<P, I> expander, I
                                     yield return new Pair<string, S>(metadataValue, item.Value);
                                 }
                             }
-                            else if (metadataValue != String.Empty && includeNullEntries)
+                            else if (metadataValue != null && includeNullEntries)
                             {
                                 yield return new Pair<string, S>(metadataValue, item.Value);
                             }
@@ -2764,9 +2764,8 @@ internal static IEnumerable<Pair<string, S>> HasMetadata(Expander<P, I> expander
                             ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotEvaluateItemMetadata", metadataName, ex.Message);
                         }
 
-                        // GetMetadataValueEscaped returns empty string for missing metadata,
-                        // but IItem specifies it should return null
-                        if (metadataValue!=null)
+                        // GetMetadataValueEscaped returns null for missing metadata
+                        if (metadataValue != null)
                         {
                             // return a result through the enumerator
                             yield return new Pair<string, S>(item.Key, item.Value);
@@ -2811,7 +2810,7 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
                 }
 
                 /// <summary>
-                /// Intrinsic function that returns only those items don't have the given metadata value
+                /// Intrinsic function that returns those items don't have the given metadata value
                 /// Using a case insensitive comparison.
                 /// </summary>
                 /// 
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index da77bcc1eb2..60bc9672d82 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1258,7 +1258,8 @@ public string GetMetadata(string metadataName)
 
             /// <summary>
             /// Returns the specified metadata value, escaped.
-            /// If metadata is not defined, returns empty string.
+            /// If metadata is not defined, returns null.
+            /// If metadata is defined and value is empty, returns empty.
             /// </summary>
             public string GetMetadataEscaped(string metadataName)
             {
@@ -1810,7 +1811,7 @@ internal TaskItem DeepClone(bool isImmutable)
             /// <summary>
             /// Helper to get the value of a built-in metadatum with
             /// the specified name, if any.
-            /// If value is not available, returns empty string.
+            /// If value is not available, returns null.
             /// </summary>
             private string GetBuiltInMetadataEscaped(string name)
             {
