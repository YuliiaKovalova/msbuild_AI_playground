diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index dab5451a8dc..f2e95abdb58 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -98,19 +98,9 @@ public void Replay(BinaryReader binaryReader, CancellationToken cancellationToke
 
             using var reader = new BuildEventArgsReader(binaryReader, fileFormatVersion);
             NotificationsSourceCreated?.Invoke(reader);
-            while (true)
-            {
-                if (cancellationToken.IsCancellationRequested)
-                {
-                    return;
-                }
-
-                BuildEventArgs? instance = reader.Read();
-                if (instance == null)
-                {
-                    break;
-                }
 
+            while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
+            {
                 Dispatch(instance);
             }
         }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index ccd61e871b9..2b99d966474 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -398,7 +398,8 @@ private BuildEventArgs ReadBuildFinishedEventArgs()
         private BuildEventArgs ReadProjectEvaluationStartedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
-            // Null message arg is not expected
+            // Null message arg is not expected by the ProjectEvaluationStartedEventArgs
+            // Ensuring the non-null value - to avoid a need for public API change
             var projectFile = ReadDeduplicatedString() ?? string.Empty;
 
             var e = new ProjectEvaluationStartedEventArgs(
