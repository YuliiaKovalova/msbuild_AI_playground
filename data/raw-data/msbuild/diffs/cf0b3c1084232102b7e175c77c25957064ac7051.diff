diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 4ef85d8de35..4ee11ed2eea 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -28,6 +28,7 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 - [Eliminate project string cache](https://github.com/dotnet/msbuild/pull/7965)
 - [Log an error when no provided search path for an import exists](https://github.com/dotnet/msbuild/pull/8095)
 - [Log assembly loads](https://github.com/dotnet/msbuild/pull/8316)
+- [Log item self-expansion](https://github.com/dotnet/msbuild/pull/8581)
 
 ### 17.4
 - [Respect deps.json when loading assemblies](https://github.com/dotnet/msbuild/pull/7520)
diff --git a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
index b3c5cfca9d3..182c106df77 100644
--- a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
@@ -779,11 +779,8 @@ public void ItemsIncludeExcludePathsCombinations()
         [Fact]
         public void ItemsRecursionOutsideTarget()
         {
-            string projectFile = null;
-
-            try
-            {
-                projectFile = ObjectModelHelpers.CreateTempFileOnDisk("""
+            using TestEnvironment env = TestEnvironment.Create();
+            string projectContent = """
                     <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                      <ItemGroup>
                         <iout1 Include='a/b.foo' TargetPath='%(Filename)%(Extension)' />
@@ -795,20 +792,16 @@ public void ItemsRecursionOutsideTarget()
                         <Message Text="iout1-target-paths=[@(iout1->'%(TargetPath)')]" Importance='High' />
                       </Target>
                     </Project>
-                """);
+                """;
+            var projectFile = env.CreateFile("test.proj",  ObjectModelHelpers.CleanupFileContents(projectContent));
 
-                MockLogger logger = new MockLogger(_testOutput);
-                ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile, logger);
+            MockLogger logger = new MockLogger(_testOutput);
+            ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile.Path, logger);
 
-                Console.WriteLine(logger.FullLog);
+            _testOutput.WriteLine(logger.FullLog);
 
-                logger.AssertLogContains("iout1=[a/b.foo;c/d.foo;g/h.foo]");
-                logger.AssertLogContains("iout1-target-paths=[b.foo;d.foo;h.foo]");
-            }
-            finally
-            {
-                File.Delete(projectFile);
-            }
+            logger.AssertLogContains("iout1=[a/b.foo;c/d.foo;g/h.foo]");
+            logger.AssertLogContains("iout1-target-paths=[b.foo;d.foo;h.foo]");
         }
 
         /// <summary>
@@ -817,12 +810,8 @@ public void ItemsRecursionOutsideTarget()
         [Fact]
         public void ItemsRecursionWithinTarget()
         {
-            string projectFile = null;
-
-            try
-            {
-                // TargetPath="@(iin1->'%(Filename)')" is intentionally allowed - as it explicitly indicates expansion
-                projectFile = ObjectModelHelpers.CreateTempFileOnDisk("""
+            using TestEnvironment env = TestEnvironment.Create();
+            string projectContent = """
                     <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Target Name='a'>
                         <ItemGroup>
@@ -834,27 +823,24 @@ public void ItemsRecursionWithinTarget()
                         <Message Text="iin1-target-paths=[@(iin1->'%(TargetPath)')]" Importance='High' />
                       </Target>
                     </Project>
-                """);
+                """;
+            var projectFile = env.CreateFile("test.proj", ObjectModelHelpers.CleanupFileContents(projectContent));
 
-                MockLogger logger = new MockLogger(_testOutput);
-                ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile, logger);
+            MockLogger logger = new MockLogger(_testOutput);
+            ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile.Path, logger);
 
-                Console.WriteLine(logger.FullLog);
+            _testOutput.WriteLine(logger.FullLog);
 
-                logger.AssertLogDoesntContain("iin1=[a/b.foo;c/d.foo;g/h.foo]");
-                logger.AssertLogDoesntContain("iin1-target-paths=[b.foo;d.foo;h.foo]");
-                logger.AssertLogContains("iin1=[a/b.foo;c/d.foo;g/h.foo;g/h.foo]");
-                logger.AssertLogContains("iin1-target-paths=[;b.foo;b.foo;d.foo]");
+            logger.AssertLogDoesntContain("iin1=[a/b.foo;c/d.foo;g/h.foo]");
+            logger.AssertLogDoesntContain("iin1-target-paths=[b.foo;d.foo;h.foo]");
+            logger.AssertLogContains("iin1=[a/b.foo;c/d.foo;g/h.foo;g/h.foo]");
+            logger.AssertLogContains("iin1-target-paths=[;b.foo;b.foo;d.foo]");
 
-                logger.AssertLogContains("MSB4120: Item 'iin1' definition within target is referencing self via metadata 'Extension' (qualified or unqualified). This can lead to unintended expansion and cross-applying of pre-existing items");
-                logger.AssertMessageCount("MSB4120", 6);
-                Assert.Equal(0, logger.WarningCount);
-                Assert.Equal(0, logger.ErrorCount);
-            }
-            finally
-            {
-                File.Delete(projectFile);
-            }
+            logger.AssertLogContains(string.Format(ResourceUtilities.GetResourceString("ItemReferencingSelfInTarget"), "iin1", "Filename"));
+            logger.AssertLogContains(string.Format(ResourceUtilities.GetResourceString("ItemReferencingSelfInTarget"), "iin1", "Extension"));
+            logger.AssertMessageCount("MSB4120", 6);
+            Assert.Equal(0, logger.WarningCount);
+            Assert.Equal(0, logger.ErrorCount);
         }
 
         /// <summary>
@@ -863,12 +849,8 @@ public void ItemsRecursionWithinTarget()
         [Fact]
         public void UnrelatedItemsRecursionWithinTarget()
         {
-            string projectFile = null;
-
-            try
-            {
-                // TargetPath="@(iin1->'%(Filename)')" is intentionally allowed - as it explicitly indicates expansion
-                projectFile = ObjectModelHelpers.CreateTempFileOnDisk("""
+            using TestEnvironment env = TestEnvironment.Create();
+            string projectContent = """
                     <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <ItemGroup>
                         <iout1 Include='a/b.foo'/>
@@ -884,24 +866,20 @@ public void UnrelatedItemsRecursionWithinTarget()
                         <Message Text="iin1-target-paths=[@(iin1->'%(TargetPath)')]" Importance='High' />
                       </Target>
                     </Project>
-                """);
+                """;
+            var projectFile = env.CreateFile("test.proj", ObjectModelHelpers.CleanupFileContents(projectContent));
 
-                MockLogger logger = new MockLogger(_testOutput);
-                ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile, logger);
+            MockLogger logger = new MockLogger(_testOutput);
+            ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile.Path, logger);
 
-                Console.WriteLine(logger.FullLog);
+            _testOutput.WriteLine(logger.FullLog);
 
-                logger.AssertLogContains("iin1=[a/b.foo;c/d.foo;g/h.foo]");
-                logger.AssertLogContains("iin1-target-paths=[b.foo;d.foo;h.foo]");
+            logger.AssertLogContains("iin1=[a/b.foo;c/d.foo;g/h.foo]");
+            logger.AssertLogContains("iin1-target-paths=[b.foo;d.foo;h.foo]");
 
-                logger.AssertLogDoesntContain("MSB4120");
-                Assert.Equal(0, logger.WarningCount);
-                Assert.Equal(0, logger.ErrorCount);
-            }
-            finally
-            {
-                File.Delete(projectFile);
-            }
+            logger.AssertLogDoesntContain("MSB4120");
+            Assert.Equal(0, logger.WarningCount);
+            Assert.Equal(0, logger.ErrorCount);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 439ab7db029..4b712fc5da3 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -192,7 +192,7 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
                         // Referring to unqualified metadata of other item (transform) is fine.
                         child.Include.IndexOf("@(", StringComparison.Ordinal) == -1)
                     {
-                        expanderOptions |= ExpanderOptions.WarnOnItemMetadataSelfReference;
+                        expanderOptions |= ExpanderOptions.LogOnItemMetadataSelfReference;
                         // Temporary workaround of unavailability of full Location info on metadata: https://github.com/dotnet/msbuild/issues/8579
                         location = child.Location;
                     }
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index aecd9cefacc..a9ba62f45f8 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -89,11 +89,11 @@ internal enum ExpanderOptions
         Truncate = 0x40,
 
         /// <summary>
-        /// Issues warning if item references unqualified or qualified metadata odf self - as this can lead to unintended expansion and
+        /// Issues build message if item references unqualified or qualified metadata odf self - as this can lead to unintended expansion and
         ///  cross-combination of other items.
         /// More info: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching#item-batching-on-self-referencing-metadata
         /// </summary>
-        WarnOnItemMetadataSelfReference = 0x80,
+        LogOnItemMetadataSelfReference = 0x80,
 
         /// <summary>
         /// Expand only properties and then item lists
@@ -1015,7 +1015,7 @@ internal MetadataMatchEvaluator(
                     LoggingContext loggingContext)
                 {
                     _metadata = metadata;
-                    _options = options & (ExpanderOptions.ExpandMetadata | ExpanderOptions.Truncate | ExpanderOptions.WarnOnItemMetadataSelfReference);
+                    _options = options & (ExpanderOptions.ExpandMetadata | ExpanderOptions.Truncate | ExpanderOptions.LogOnItemMetadataSelfReference);
                     _elementLocation = elementLocation;
                     _loggingContext = loggingContext;
 
@@ -1049,7 +1049,7 @@ internal string ExpandSingleMetadata(Match itemMetadataMatch)
                     {
                         metadataValue = _metadata.GetEscapedValue(itemType, metadataName);
 
-                        if ((_options & ExpanderOptions.WarnOnItemMetadataSelfReference) != 0 &&
+                        if ((_options & ExpanderOptions.LogOnItemMetadataSelfReference) != 0 &&
                             _loggingContext != null &&
                             !string.IsNullOrEmpty(metadataName) &&
                             _metadata is IItemMetadata itemMetadata &&
