diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index 7aee58f9c17..fd7774973bd 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -271,6 +271,11 @@ internal static TaskParameterEventArgs CreateTaskParameterEventArgs(
             bool logItemMetadata,
             DateTime timestamp)
         {
+            // Only run this method if we use AppDomains and not in the default AppDomain
+#if FEATURE_APPDOMAIN
+            CreateItemsSnapshot(ref items);
+#endif
+
             var args = new TaskParameterEventArgs(
                 messageKind,
                 itemType,
@@ -281,6 +286,32 @@ internal static TaskParameterEventArgs CreateTaskParameterEventArgs(
             return args;
         }
 
+        private static void CreateItemsSnapshot(ref IList items)
+        {
+            if (items == null || AppDomain.CurrentDomain.IsDefaultAppDomain())
+            {
+                return;
+            }
+
+            int count = items.Count;
+            var cloned = new object[count];
+
+            for (int i = 0; i < count; i++)
+            {
+                var item = items[i];
+                if (item is ITaskItem taskItem)
+                {
+                    cloned[i] = new TaskItemData(taskItem);
+                }
+                else
+                {
+                    cloned[i] = item;
+                }
+            }
+
+            items = cloned;
+        }
+
         internal static string GetTaskParameterText(TaskParameterEventArgs args)
             => GetTaskParameterText(args.Kind, args.ItemType, args.Items, args.LogItemMetadata);
 
diff --git a/src/Framework/TaskItemData.cs b/src/Framework/TaskItemData.cs
index 8441badb819..e32f20416f5 100644
--- a/src/Framework/TaskItemData.cs
+++ b/src/Framework/TaskItemData.cs
@@ -25,6 +25,26 @@ public TaskItemData(string itemSpec, IDictionary<string, string> metadata)
             Metadata = metadata ?? _emptyMetadata;
         }
 
+        /// <summary>
+        /// Clone the task item and all metadata to create a snapshot
+        /// </summary>
+        /// <param name="original">An <see cref="ITaskItem"/> to clone</param>
+        public TaskItemData(ITaskItem original)
+        {
+            ItemSpec = original.ItemSpec;
+            var metadata = original.EnumerateMetadata();
+
+            // Can't preallocate capacity because we don't know how large it will get
+            // without enumerating the enumerable
+            var dictionary = new Dictionary<string, string>();
+            foreach (var item in metadata)
+            {
+                dictionary.Add(item.Key, item.Value);
+            }
+
+            Metadata = dictionary;
+        }
+
         IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => Metadata;
 
         public int MetadataCount => Metadata.Count;
