diff --git a/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
new file mode 100644
index 00000000000..42aee43c5e0
--- /dev/null
+++ b/src/Analyzers.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -0,0 +1,105 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Experimental.BuildCop;
+using Shouldly;
+using Xunit;
+
+#nullable disable
+
+namespace Microsoft.Build.Analyzers.UnitTests
+{
+    public class BuildAnalyzerConfiguration_Test
+    {
+        [Fact]
+        public void CreateWithNull_ReturnsObjectWithNullValues()
+        {
+            var buildConfig = BuildAnalyzerConfiguration.Create(null);
+            buildConfig.ShouldNotBeNull();
+            buildConfig.Severity.ShouldBeNull();
+            buildConfig.IsEnabled.ShouldBeNull();
+            buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        }
+
+        [Fact]
+        public void CreateWithEmpty_ReturnsObjectWithNullValues()
+        {
+            var buildConfig = BuildAnalyzerConfiguration.Create(new Dictionary<string, string>());
+            buildConfig.ShouldNotBeNull();
+            buildConfig.Severity.ShouldBeNull();
+            buildConfig.IsEnabled.ShouldBeNull();
+            buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        }
+
+        [Theory]
+        [InlineData("error", BuildAnalyzerResultSeverity.Error)]
+        [InlineData("info", BuildAnalyzerResultSeverity.Info)]
+        [InlineData("warning", BuildAnalyzerResultSeverity.Warning)]
+        [InlineData("WARNING", BuildAnalyzerResultSeverity.Warning)]
+        [InlineData("non-existing-option", null)]
+        public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAnalyzerResultSeverity? expected)
+        {
+            var config = new Dictionary<string, string>()
+            {
+                { "severity" , parameter },
+            };
+            var buildConfig = BuildAnalyzerConfiguration.Create(config);
+
+            buildConfig.ShouldNotBeNull();
+            buildConfig.Severity.ShouldBe(expected);
+
+            buildConfig.IsEnabled.ShouldBeNull();
+            buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        }
+
+        [Theory]
+        [InlineData("true", true)]
+        [InlineData("TRUE", true)]
+        [InlineData("false", false)]
+        [InlineData("FALSE", false)]
+        [InlineData("", null)]
+        public void CreateBuildAnalyzerConfiguration_IsEnabled(string parameter, bool? expected)
+        {
+            var config = new Dictionary<string, string>()
+            {
+                { "isenabled" , parameter },
+            };
+
+            var buildConfig = BuildAnalyzerConfiguration.Create(config);
+
+            buildConfig.ShouldNotBeNull();
+            buildConfig.IsEnabled.ShouldBe(expected);
+
+            buildConfig.Severity.ShouldBeNull();
+            buildConfig.EvaluationAnalysisScope.ShouldBeNull();
+        }
+
+        [Theory]
+        [InlineData("AnalyzedProjectOnly", EvaluationAnalysisScope.AnalyzedProjectOnly)]
+        [InlineData("AnalyzedProjectWithImportsFromCurrentWorkTree", EvaluationAnalysisScope.AnalyzedProjectWithImportsFromCurrentWorkTree)]
+        [InlineData("AnalyzedProjectWithImportsWithoutSdks", EvaluationAnalysisScope.AnalyzedProjectWithImportsWithoutSdks)]
+        [InlineData("AnalyzedProjectWithAllImports", EvaluationAnalysisScope.AnalyzedProjectWithAllImports)]
+        [InlineData("analyzedprojectwithallimports", EvaluationAnalysisScope.AnalyzedProjectWithAllImports)]
+        [InlineData("non existing value", null)]
+        public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string parameter, EvaluationAnalysisScope? expected)
+        {
+            var config = new Dictionary<string, string>()
+            {
+                { "evaluationanalysisscope" , parameter },
+            };
+
+            var buildConfig = BuildAnalyzerConfiguration.Create(config);
+
+            buildConfig.ShouldNotBeNull();
+            buildConfig.EvaluationAnalysisScope.ShouldBe(expected);
+
+            buildConfig.IsEnabled.ShouldBeNull();
+            buildConfig.Severity.ShouldBeNull();
+        }
+    }
+}
diff --git a/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
index 589a6305806..136d396218c 100644
--- a/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
@@ -65,7 +65,8 @@ public static BuildAnalyzerConfiguration Create(Dictionary<string, string> confi
     private static bool TryExtractValue<T>(string key, Dictionary<string, string> config, out T value) where T : struct
     {
         value = default;
-        if (!config.ContainsKey(key))
+
+        if (config == null || !config.ContainsKey(key))
         {
             return false;
         }
@@ -82,6 +83,7 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
         {
             return Enum.TryParse(config[key], true, out value);
         }
+
         return false;
     }
 }
diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index 494960d6e5b..24ed7476d52 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -24,6 +24,11 @@ internal class ConfigurationProvider
     //  (disabled rules and analyzers that need to run in different node)
     private readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = new Dictionary<string, BuildAnalyzerConfiguration>();
 
+    private readonly List<string> _infrastructureConfigurationKeys = new List<string>() {
+        nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
+        nameof(BuildAnalyzerConfiguration.IsEnabled).ToLower(),
+        nameof(BuildAnalyzerConfiguration.Severity).ToLower()
+    };
     /// <summary>
     /// Gets the user specified unrecognized configuration for the given analyzer rule.
     /// 
@@ -42,6 +47,16 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
         {
             return CustomConfigurationData.Null;
         }
+
+        // remove the infrastructure owned key names
+        foreach(var infraConfigurationKey in _infrastructureConfigurationKeys)
+        {
+            if (configuration.ContainsKey(infraConfigurationKey))
+            {
+                configuration.Remove(infraConfigurationKey);
+            }
+        }
+
         return new CustomConfigurationData(ruleId, configuration);
     }
 
@@ -109,6 +124,7 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
         }
         catch (Exception ex)
         {
+            // Note: catch any exception, we do not want to break because of the failed operation with parsing the editorconfig.
             Debug.WriteLine(ex);
         }
 
