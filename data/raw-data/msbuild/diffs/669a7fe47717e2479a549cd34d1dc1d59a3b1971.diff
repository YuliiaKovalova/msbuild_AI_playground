diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index ee4dbc07384..431587336d2 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1205,6 +1205,7 @@ public void Reset()
                 {
                     ExecutedCount = 0;
                     _executedSw.Reset();
+                    TotalMemoryConsumption = 0;
                 }
             }
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 4d4bb19627d..e20bb64a52e 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -176,6 +176,7 @@
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Logging\BuildEventArgsExtensions.cs" />
     <Compile Include="Telemetry\ITelemetryCollector.cs" />
+    <Compile Include="Telemetry\TelemetryCollectorProvider.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Telemetry/ITelemetryCollector.cs b/src/Build/Telemetry/ITelemetryCollector.cs
index 7244ecf77a0..dfd8cc62bfc 100644
--- a/src/Build/Telemetry/ITelemetryCollector.cs
+++ b/src/Build/Telemetry/ITelemetryCollector.cs
@@ -2,17 +2,14 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Telemetry;
 
+/// <summary>
+/// A build component responsible for accumulating telemetry data from worker node and then sending it to main node
+/// at the end of the build.
+/// </summary>
 internal interface ITelemetryCollector
 {
     bool IsTelemetryCollected { get; }
@@ -20,101 +17,15 @@ internal interface ITelemetryCollector
     void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom,
         bool isFromNugetCache);
 
-    // wasExecuted - means anytime, not necessarily from the last time target was added to telemetry
+    /// <summary>
+    /// Add info about target execution to the telemetry.
+    /// </summary>
+    /// <param name="name"></param>
+    /// <param name="wasExecuted">Means anytime, not necessarily from the last time target was added to telemetry</param>
+    /// <param name="isCustom"></param>
+    /// <param name="isMetaproj"></param>
+    /// <param name="isFromNugetCache"></param>
     void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache);
 
     void FinalizeProcessing(LoggingContext loggingContext);
 }
-
-internal class TelemetryCollectorProvider : IBuildComponent
-{
-    private ITelemetryCollector? _instance;
-
-    public ITelemetryCollector Instance => _instance ?? new NullTelemetryCollector();
-
-    internal static IBuildComponent CreateComponent(BuildComponentType type)
-    {
-        ErrorUtilities.VerifyThrow(type == BuildComponentType.TelemetryCollector, "Cannot create components of type {0}", type);
-        return new TelemetryCollectorProvider();
-    }
-
-    public void InitializeComponent(IBuildComponentHost host)
-    {
-        ErrorUtilities.VerifyThrow(host != null, "BuildComponentHost was null");
-
-        if (_instance == null)
-        {
-            if (host!.BuildParameters.IsTelemetryEnabled)
-            {
-                _instance = new TelemetryCollector();
-            }
-            else
-            {
-                _instance = new NullTelemetryCollector();
-            }
-        }
-    }
-
-    public void ShutdownComponent()
-    {
-        /* Too late here for any communication to the main node or for logging anything. Just cleanup. */
-        _instance = null;
-    }
-
-    public class TelemetryCollector : ITelemetryCollector
-    {
-        private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
-
-        // in future, this might ber per event type
-        public bool IsTelemetryCollected => true;
-
-        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache)
-        {
-            name = GetName(name, isCustom, false, isFromNugetCache);
-            _workerNodeTelemetryData.AddTask(name, cumulativeExectionTime, executionsCount, totalMemoryConsumed);
-        }
-
-        public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache)
-        {
-            name = GetName(name, isCustom, isMetaproj, isFromNugetCache);
-            _workerNodeTelemetryData.AddTarget(name, wasExecuted);
-        }
-
-        private static string GetName(string name, bool isCustom, bool isMetaproj, bool isFromNugetCache)
-        {
-            if (isMetaproj)
-            {
-                name = WorkerNodeTelemetryData.MetaProjPrefix + name;
-            }
-
-            if (isCustom)
-            {
-                name = WorkerNodeTelemetryData.CustomPrefix + name;
-            }
-
-            if (isFromNugetCache)
-            {
-                name = WorkerNodeTelemetryData.FromNugetPrefix + name;
-            }
-
-            return name;
-        }
-
-        public void FinalizeProcessing(LoggingContext loggingContext)
-        {
-            WorkerNodeTelemetryEventArgs telemetryArgs = new(_workerNodeTelemetryData)
-                { BuildEventContext = loggingContext.BuildEventContext };
-            loggingContext.LogBuildEvent(telemetryArgs);
-        }
-    }
-
-    public class NullTelemetryCollector : ITelemetryCollector
-    {
-        public bool IsTelemetryCollected => false;
-
-        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache) { }
-        public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache) { }
-
-        public void FinalizeProcessing(LoggingContext loggingContext) { }
-    }
-}
diff --git a/src/Build/Telemetry/TelemetryCollectorProvider.cs b/src/Build/Telemetry/TelemetryCollectorProvider.cs
new file mode 100644
index 00000000000..09af8c8cedf
--- /dev/null
+++ b/src/Build/Telemetry/TelemetryCollectorProvider.cs
@@ -0,0 +1,107 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Telemetry;
+
+/// <summary>
+/// A build component responsible for accumulating telemetry data from worker node and then sending it to main node
+/// at the end of the build.
+/// </summary>
+internal class TelemetryCollectorProvider : IBuildComponent
+{
+    private ITelemetryCollector? _instance;
+
+    public ITelemetryCollector Instance => _instance ?? new NullTelemetryCollector();
+
+    internal static IBuildComponent CreateComponent(BuildComponentType type)
+    {
+        ErrorUtilities.VerifyThrow(type == BuildComponentType.TelemetryCollector, "Cannot create components of type {0}", type);
+        return new TelemetryCollectorProvider();
+    }
+
+    public void InitializeComponent(IBuildComponentHost host)
+    {
+        ErrorUtilities.VerifyThrow(host != null, "BuildComponentHost was null");
+
+        if (_instance == null)
+        {
+            if (host!.BuildParameters.IsTelemetryEnabled)
+            {
+                _instance = new TelemetryCollector();
+            }
+            else
+            {
+                _instance = new NullTelemetryCollector();
+            }
+        }
+    }
+
+    public void ShutdownComponent()
+    {
+        /* Too late here for any communication to the main node or for logging anything. Just cleanup. */
+        _instance = null;
+    }
+
+    public class TelemetryCollector : ITelemetryCollector
+    {
+        private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
+
+        // in future, this might be per event type
+        public bool IsTelemetryCollected => true;
+
+        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache)
+        {
+            name = GetName(name, isCustom, false, isFromNugetCache);
+            _workerNodeTelemetryData.AddTask(name, cumulativeExectionTime, executionsCount, totalMemoryConsumed);
+        }
+
+        public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache)
+        {
+            name = GetName(name, isCustom, isMetaproj, isFromNugetCache);
+            _workerNodeTelemetryData.AddTarget(name, wasExecuted);
+        }
+
+        private static string GetName(string name, bool isCustom, bool isMetaproj, bool isFromNugetCache)
+        {
+            if (isMetaproj)
+            {
+                name = WorkerNodeTelemetryData.MetaProjPrefix + name;
+            }
+
+            if (isCustom)
+            {
+                name = WorkerNodeTelemetryData.CustomPrefix + name;
+            }
+
+            if (isFromNugetCache)
+            {
+                name = WorkerNodeTelemetryData.FromNugetPrefix + name;
+            }
+
+            return name;
+        }
+
+        public void FinalizeProcessing(LoggingContext loggingContext)
+        {
+            WorkerNodeTelemetryEventArgs telemetryArgs = new(_workerNodeTelemetryData)
+                { BuildEventContext = loggingContext.BuildEventContext };
+            loggingContext.LogBuildEvent(telemetryArgs);
+        }
+    }
+
+    public class NullTelemetryCollector : ITelemetryCollector
+    {
+        public bool IsTelemetryCollected => false;
+
+        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache) { }
+        public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache) { }
+
+        public void FinalizeProcessing(LoggingContext loggingContext) { }
+    }
+}
diff --git a/src/Framework/Telemetry/IWorkerNodeTelemetryData.cs b/src/Framework/Telemetry/IWorkerNodeTelemetryData.cs
new file mode 100644
index 00000000000..79e5ea0b047
--- /dev/null
+++ b/src/Framework/Telemetry/IWorkerNodeTelemetryData.cs
@@ -0,0 +1,12 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Framework;
+
+internal interface IWorkerNodeTelemetryData
+{
+    Dictionary<string, TaskExecutionStats> TasksExecutionData { get; }
+    Dictionary<string, bool> TargetsExecutionData { get; }
+}
diff --git a/src/Framework/Telemetry/InternalTelemeteryConsumingLogger.cs b/src/Framework/Telemetry/InternalTelemeteryConsumingLogger.cs
new file mode 100644
index 00000000000..2a624708b25
--- /dev/null
+++ b/src/Framework/Telemetry/InternalTelemeteryConsumingLogger.cs
@@ -0,0 +1,80 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Linq;
+
+namespace Microsoft.Build.Framework;
+
+internal sealed class InternalTelemeteryConsumingLogger : ILogger
+{
+    public LoggerVerbosity Verbosity { get; set; }
+    public string? Parameters { get; set; }
+    internal static event Action<WorkerNodeTelemetryData>? TestOnly_InternalTelemetryAggregted; 
+
+    public void Initialize(IEventSource eventSource)
+    {
+        if (eventSource is IEventSource5 eventSource5)
+        {
+            eventSource5.WorkerNodeTelemetryLogged += EventSource5_WorkerNodeTelemetryLogged;
+            eventSource.BuildFinished += EventSourceOnBuildFinished;
+        }
+    }
+
+    private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
+
+    private void EventSource5_WorkerNodeTelemetryLogged(object? sender, WorkerNodeTelemetryEventArgs e)
+    {
+        _workerNodeTelemetryData.Add(e.WorkerNodeTelemetryData);
+    }
+
+    private void EventSourceOnBuildFinished(object sender, BuildFinishedEventArgs e)
+    {
+        TestOnly_InternalTelemetryAggregted?.Invoke(_workerNodeTelemetryData);
+        FlushDataIntoConsoleIfRequested();
+    }
+
+    private void FlushDataIntoConsoleIfRequested()
+    {
+        if (Environment.GetEnvironmentVariable("MSBUILDOUTPUTNODESTELEMETRY") != "1")
+        {
+            return;
+        }
+
+        Console.WriteLine("==========================================");
+        Console.WriteLine($"Targets ({_workerNodeTelemetryData.TargetsExecutionData.Count}):");
+        foreach (var target in _workerNodeTelemetryData.TargetsExecutionData)
+        {
+            Console.WriteLine($"{target.Key} : {target.Value}");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine($"Tasks: ({_workerNodeTelemetryData.TasksExecutionData.Count})");
+        Console.WriteLine("Custom tasks:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.Where(t => t.Key.StartsWith(WorkerNodeTelemetryData.CustomPrefix) || t.Key.StartsWith(WorkerNodeTelemetryData.FromNugetPrefix + WorkerNodeTelemetryData.CustomPrefix)))
+        {
+            Console.WriteLine($"{task.Key}");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine("Tasks by time:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.CumulativeExecutionTime).Take(20))
+        {
+            Console.WriteLine($"{task.Key} - {task.Value.CumulativeExecutionTime}");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine("Tasks by memory consumption:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.TotalMemoryConsumption).Take(20))
+        {
+            Console.WriteLine($"{task.Key} - {task.Value.TotalMemoryConsumption / 1024.0:0.00}kB");
+        }
+        Console.WriteLine("==========================================");
+        Console.WriteLine("Tasks by Executions count:");
+        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.ExecutionsCount))
+        {
+            Console.WriteLine($"{task.Key} - {task.Value.ExecutionsCount}");
+        }
+        Console.WriteLine("==========================================");
+    }
+
+    public void Shutdown()
+    { }
+}
diff --git a/src/Framework/Telemetry/InternalTelemeteryForwardingLogger.cs b/src/Framework/Telemetry/InternalTelemeteryForwardingLogger.cs
new file mode 100644
index 00000000000..b6cd0a21c9b
--- /dev/null
+++ b/src/Framework/Telemetry/InternalTelemeteryForwardingLogger.cs
@@ -0,0 +1,32 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Framework;
+
+/// <remarks>
+/// Ensure that events filtering is in sync with <see cref="InternalTelemeteryConsumingLogger"/>.
+/// </remarks>
+internal class InternalTelemeteryForwardingLogger : IForwardingLogger
+{
+    public IEventRedirector? BuildEventRedirector { get; set; }
+
+    public int NodeId { get; set; }
+
+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }
+
+    public string? Parameters { get; set; }
+
+    public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);
+
+    public void Initialize(IEventSource eventSource)
+    {
+        if (BuildEventRedirector != null && eventSource is IEventSource5 eventSource5)
+        {
+            eventSource5.WorkerNodeTelemetryLogged += (o,e) => BuildEventRedirector.ForwardEvent(e);
+        }
+    }
+
+    public void Shutdown()
+    {
+    }
+}
diff --git a/src/Framework/Telemetry/TaskExecutionStats.cs b/src/Framework/Telemetry/TaskExecutionStats.cs
new file mode 100644
index 00000000000..18707ea0b92
--- /dev/null
+++ b/src/Framework/Telemetry/TaskExecutionStats.cs
@@ -0,0 +1,13 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Framework;
+
+internal class TaskExecutionStats(TimeSpan cumulativeExecutionTime, short executionsCount, long totalMemoryConsumption)
+{
+    public TimeSpan CumulativeExecutionTime { get; set; } = cumulativeExecutionTime;
+    public long TotalMemoryConsumption { get; set; } = totalMemoryConsumption;
+    public short ExecutionsCount { get; set; } = executionsCount;
+}
diff --git a/src/Framework/Telemetry/WorkerNodeTelemetryData.cs b/src/Framework/Telemetry/WorkerNodeTelemetryData.cs
new file mode 100644
index 00000000000..405e3957a20
--- /dev/null
+++ b/src/Framework/Telemetry/WorkerNodeTelemetryData.cs
@@ -0,0 +1,66 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Framework;
+
+internal class WorkerNodeTelemetryData : IWorkerNodeTelemetryData
+{
+    // Indicate custom targets/task - those must be hashed.
+    public const string CustomPrefix = "C:";
+    // Indicate targets/tasks sourced from nuget cache - those can be custom or MSFT provided ones.
+    public const string FromNugetPrefix = "N:";
+    // Indicate targets/tasks generated during build - those must be hashed (as they contain paths).
+    public const string MetaProjPrefix = "M:";
+
+    public WorkerNodeTelemetryData(Dictionary<string, TaskExecutionStats> tasksExecutionData, Dictionary<string, bool> targetsExecutionData)
+    {
+        TasksExecutionData = tasksExecutionData;
+        TargetsExecutionData = targetsExecutionData;
+    }
+
+    public void Add(IWorkerNodeTelemetryData other)
+    {
+        foreach (var task in other.TasksExecutionData)
+        {
+            AddTask(task.Key, task.Value.CumulativeExecutionTime, task.Value.ExecutionsCount, task.Value.TotalMemoryConsumption);
+        }
+
+        foreach (var target in other.TargetsExecutionData)
+        {
+            AddTarget(target.Key, target.Value);
+        }
+    }
+
+    public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumption)
+    {
+        TaskExecutionStats? taskExecutionStats;
+        if (!TasksExecutionData.TryGetValue(name, out taskExecutionStats))
+        {
+            taskExecutionStats = new(cumulativeExectionTime, executionsCount, totalMemoryConsumption);
+            TasksExecutionData[name] = taskExecutionStats;
+        }
+        else
+        {
+            taskExecutionStats.CumulativeExecutionTime += cumulativeExectionTime;
+            taskExecutionStats.ExecutionsCount += executionsCount;
+            taskExecutionStats.TotalMemoryConsumption += totalMemoryConsumption;
+        }
+    }
+
+    public void AddTarget(string name, bool wasExecuted)
+    {
+        TargetsExecutionData[name] =
+            // we just need to store if it was ever executed
+            wasExecuted || (TargetsExecutionData.TryGetValue(name, out bool wasAlreadyExecuted) && wasAlreadyExecuted);
+    }
+
+    public WorkerNodeTelemetryData()
+        : this(new Dictionary<string, TaskExecutionStats>(StringComparer.OrdinalIgnoreCase), new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase))
+    { }
+
+    public Dictionary<string, TaskExecutionStats> TasksExecutionData { get; }
+    public Dictionary<string, bool> TargetsExecutionData { get; }
+}
diff --git a/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs b/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
index ac59a2e83ba..06065be27b4 100644
--- a/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
+++ b/src/Framework/Telemetry/WorkerNodeTelemetryEventArgs.cs
@@ -4,88 +4,10 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using System.Xml.Linq;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Framework;
 
-
-internal class TaskExecutionStats(TimeSpan cumulativeExecutionTime, short executionsCount, long totalMemoryConsumption)
-{
-    public TimeSpan CumulativeExecutionTime { get; set; } = cumulativeExecutionTime;
-    public long TotalMemoryConsumption { get; set; } = totalMemoryConsumption;
-    public short ExecutionsCount { get; set; } = executionsCount;
-}
-
-internal interface IWorkerNodeTelemetryData
-{
-    Dictionary<string, TaskExecutionStats> TasksExecutionData { get; }
-    Dictionary<string, bool> TargetsExecutionData { get; }
-}
-
-internal class WorkerNodeTelemetryData : IWorkerNodeTelemetryData
-{
-    // Indicate custom targets/task - those must be hashed.
-    public const string CustomPrefix = "C:";
-    // Indicate targets/tasks sourced from nuget cache - those can be custom or MSFT provided ones.
-    public const string FromNugetPrefix = "N:";
-    // Indicate targets/tasks generated during build - those must be hashed (as they contain paths).
-    public const string MetaProjPrefix = "M:";
-
-    public WorkerNodeTelemetryData(Dictionary<string, TaskExecutionStats> tasksExecutionData, Dictionary<string, bool> targetsExecutionData)
-    {
-        TasksExecutionData = tasksExecutionData;
-        TargetsExecutionData = targetsExecutionData;
-    }
-
-    public void Add(IWorkerNodeTelemetryData other)
-    {
-        foreach (var task in other.TasksExecutionData)
-        {
-            AddTask(task.Key, task.Value.CumulativeExecutionTime, task.Value.ExecutionsCount, task.Value.TotalMemoryConsumption);
-        }
-
-        foreach (var target in other.TargetsExecutionData)
-        {
-            AddTarget(target.Key, target.Value);
-        }
-    }
-
-    public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumption)
-    {
-        TaskExecutionStats? taskExecutionStats;
-        if (!TasksExecutionData.TryGetValue(name, out taskExecutionStats))
-        {
-            taskExecutionStats = new(cumulativeExectionTime, executionsCount, totalMemoryConsumption);
-            TasksExecutionData[name] = taskExecutionStats;
-        }
-        else
-        {
-            taskExecutionStats.CumulativeExecutionTime += cumulativeExectionTime;
-            taskExecutionStats.ExecutionsCount += executionsCount;
-            taskExecutionStats.TotalMemoryConsumption += totalMemoryConsumption;
-        }
-    }
-
-    public void AddTarget(string name, bool wasExecuted)
-    {
-        TargetsExecutionData[name] =
-            // we just need to store if it was ever executed
-            wasExecuted || (TargetsExecutionData.TryGetValue(name, out bool wasAlreadyExecuted) && wasAlreadyExecuted);
-    }
-
-    public WorkerNodeTelemetryData()
-        : this(new Dictionary<string, TaskExecutionStats>(StringComparer.OrdinalIgnoreCase), new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase))
-    { }
-
-    public Dictionary<string, TaskExecutionStats> TasksExecutionData { get; }
-    public Dictionary<string, bool> TargetsExecutionData { get; }
-}
-
 internal sealed class WorkerNodeTelemetryEventArgs(IWorkerNodeTelemetryData workerNodeTelemetryData) : BuildEventArgs
 {
     public WorkerNodeTelemetryEventArgs()
@@ -133,104 +55,3 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         WorkerNodeTelemetryData = new WorkerNodeTelemetryData(tasksExecutionData, targetsExecutionData);
     }
 }
-
-internal sealed class InternalTelemeteryConsumingLogger : ILogger
-{
-    public LoggerVerbosity Verbosity { get; set; }
-    public string? Parameters { get; set; }
-    internal static event Action<WorkerNodeTelemetryData>? TestOnly_InternalTelemetryAggregted; 
-
-    public void Initialize(IEventSource eventSource)
-    {
-        if (eventSource is IEventSource5 eventSource5)
-        {
-            eventSource5.WorkerNodeTelemetryLogged += EventSource5_WorkerNodeTelemetryLogged;
-            eventSource.BuildFinished += EventSourceOnBuildFinished;
-        }
-    }
-
-    private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
-
-    private void EventSource5_WorkerNodeTelemetryLogged(object? sender, WorkerNodeTelemetryEventArgs e)
-    {
-        _workerNodeTelemetryData.Add(e.WorkerNodeTelemetryData);
-    }
-
-    private void EventSourceOnBuildFinished(object sender, BuildFinishedEventArgs e)
-    {
-        TestOnly_InternalTelemetryAggregted?.Invoke(_workerNodeTelemetryData);
-        FlushDataIntoConsoleIfRequested();
-    }
-
-    private void FlushDataIntoConsoleIfRequested()
-    {
-        if (Environment.GetEnvironmentVariable("MSBUILDOUTPUTNODESTELEMETRY") != "1")
-        {
-            return;
-        }
-
-        Console.WriteLine("==========================================");
-        Console.WriteLine($"Targets ({_workerNodeTelemetryData.TargetsExecutionData.Count}):");
-        foreach (var target in _workerNodeTelemetryData.TargetsExecutionData)
-        {
-            Console.WriteLine($"{target.Key} : {target.Value}");
-        }
-        Console.WriteLine("==========================================");
-        Console.WriteLine($"Tasks: ({_workerNodeTelemetryData.TasksExecutionData.Count})");
-        Console.WriteLine("Custom tasks:");
-        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.Where(t => t.Key.StartsWith(WorkerNodeTelemetryData.CustomPrefix) || t.Key.StartsWith(WorkerNodeTelemetryData.FromNugetPrefix + WorkerNodeTelemetryData.CustomPrefix)))
-        {
-            Console.WriteLine($"{task.Key}");
-        }
-        Console.WriteLine("==========================================");
-        Console.WriteLine("Tasks by time:");
-        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.CumulativeExecutionTime).Take(20))
-        {
-            Console.WriteLine($"{task.Key} - {task.Value.CumulativeExecutionTime}");
-        }
-        Console.WriteLine("==========================================");
-        Console.WriteLine("Tasks by memory consumption:");
-        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.TotalMemoryConsumption).Take(20))
-        {
-            Console.WriteLine($"{task.Key} - {task.Value.TotalMemoryConsumption / 1024.0:0.00}kB");
-        }
-        Console.WriteLine("==========================================");
-        Console.WriteLine("Tasks by Executions count:");
-        foreach (var task in _workerNodeTelemetryData.TasksExecutionData.OrderByDescending(t => t.Value.ExecutionsCount))
-        {
-            Console.WriteLine($"{task.Key} - {task.Value.ExecutionsCount}");
-        }
-        Console.WriteLine("==========================================");
-    }
-
-    public void Shutdown()
-    { }
-}
-
-/// <remarks>
-/// Ensure that events filtering is in sync with <see cref="InternalTelemeteryConsumingLogger"/>.
-/// </remarks>
-internal class InternalTelemeteryForwardingLogger : IForwardingLogger
-{
-    public IEventRedirector? BuildEventRedirector { get; set; }
-
-    public int NodeId { get; set; }
-
-    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }
-
-    public string? Parameters { get; set; }
-
-    public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);
-
-    public void Initialize(IEventSource eventSource)
-    {
-        if (BuildEventRedirector != null && eventSource is IEventSource5 eventSource5)
-        {
-            eventSource5.WorkerNodeTelemetryLogged += (o,e) => BuildEventRedirector.ForwardEvent(e);
-        }
-    }
-
-    public void Shutdown()
-    {
-    }
-}
