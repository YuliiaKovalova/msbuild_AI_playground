diff --git a/src/Shared/TranslatorHelpers.cs b/src/Shared/TranslatorHelpers.cs
index 41fd7f6e057..da0243fe38c 100644
--- a/src/Shared/TranslatorHelpers.cs
+++ b/src/Shared/TranslatorHelpers.cs
@@ -111,23 +111,6 @@ public static void TranslateDictionary<D, T>(
             translator.TranslateDictionary(ref dictionary, AdaptFactory(valueFactory), collectionCreator);
         }
 
-#if NET40_OR_GREATER
-        public static void TranslateConcurrentDictionary<T>(
-            this ITranslator translator,
-            ref ConcurrentDictionary<string, T> dictionary,
-            ObjectTranslator<T> objTranslator)
-        {
-            foreach (KeyValuePair<string, T> kvp in dictionary)
-            {
-                string key = kvp.Key;
-                T value = kvp.Value;
-                translator.Translate(ref key);
-                objTranslator(translator, ref value);
-
-            }
-        }
-#endif
-
         public static void TranslateHashSet<T>(
             this ITranslator translator,
             ref HashSet<T> hashSet,
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index 58f464a5b35..5e7a1627320 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -1272,7 +1272,7 @@ public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMet
 
             public void Translate(ITranslator translator)
             {
-                translator.TranslateConcurrentDictionary<SdkReferenceInfo>(ref pathToReferenceMetadata, (ITranslator t, ref SdkReferenceInfo info) =>
+                TranslateConcurrentDictionary<SdkReferenceInfo>(translator, ref pathToReferenceMetadata, (ITranslator t, ref SdkReferenceInfo info) =>
                 {
                     string fusionName = info.FusionName;
                     string imageRuntime = info.ImageRuntime;
@@ -1284,7 +1284,7 @@ public void Translate(ITranslator translator)
                     t.Translate(ref isWinmd);
                 });
 
-                translator.TranslateConcurrentDictionary<List<string>>(ref directoryToFileList, (ITranslator t, ref List<string> fileList) =>
+                TranslateConcurrentDictionary<List<string>>(translator, ref directoryToFileList, (ITranslator t, ref List<string> fileList) =>
                 {
                     t.Translate(ref fileList, (ITranslator t, ref string str) => { t.Translate(ref str); });
                 });
@@ -1293,6 +1293,17 @@ public void Translate(ITranslator translator)
             }
         }
 
+        private static void TranslateConcurrentDictionary<T>(ITranslator translator, ref ConcurrentDictionary<string, T> dictionary, ObjectTranslator<T> objTranslator)
+        {
+            foreach (KeyValuePair<string, T> kvp in dictionary)
+            {
+                string key = kvp.Key;
+                T value = kvp.Value;
+                translator.Translate(ref key);
+                objTranslator(translator, ref value);
+            }
+        }
+
         /// <summary>
         /// This class represents the context information used by the background cache serialization thread.
         /// </summary>
