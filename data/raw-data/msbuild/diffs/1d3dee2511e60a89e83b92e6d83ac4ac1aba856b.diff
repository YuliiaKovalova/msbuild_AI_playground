diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index 1b73b1fa93e..1d81e8ac1aa 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -8,7 +8,6 @@
 using System.Globalization;
 using System.IO;
 using System.Linq;
-using System.Net.NetworkInformation;
 using System.Reflection;
 using System.Threading;
 using System.Xml;
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index f98dc08dc65..2ed1f77f758 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -102,6 +102,7 @@ public void RoundtripBuildSubmissionStartedEventArgs()
             {
                 {"Variable1", "Value1" },
                 {"Variable2", "" },
+                {"Variable3", null },
             };
             var entryPointProjects = new List<string>()
             {
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 9331fa14664..394d752372b 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -15,7 +15,6 @@ public enum BinaryLogRecordKind
         EndOfFile = 0,
         BuildStarted,
         BuildFinished,
-        BuildSubmissionStarted,
         ProjectStarted,
         ProjectFinished,
         TargetStarted,
@@ -41,5 +40,6 @@ public enum BinaryLogRecordKind
         TaskParameter,
         ResponseFileUsed,
         AssemblyLoad,
+        BuildSubmissionStarted,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index fb21e16522d..5ad623deb77 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -75,13 +75,15 @@ public sealed class BinaryLogger : ILogger
         //   - TaskParameterEventArgs: Added ParameterName and PropertyName properties
         // version 22:
         //    - extend EnvironmentVariableRead with location where environment variable was used.
+        // version 23:
+        //    - new record kind: BuildSubmissionStartedEventArgs
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
         internal const int ForwardCompatibilityMinimalVersion = 18;
 
         // The current version of the binary log representation.
         // Changes with each update of the binary log format.
-        internal const int FileFormatVersion = 22;
+        internal const int FileFormatVersion = 23;
 
         // The minimum version of the binary log reader that can read log of above version.
         // This should be changed only when the binary log format is changed in a way that would prevent it from being
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 6d5f7b215c9..9bbf41c3050 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -625,13 +625,7 @@ private BuildEventArgs ReadBuildSubmissionStartedEventArgs()
             var fields = ReadBuildEventArgsFields();
 
             IDictionary<string, string>? globalProperties = null;
-            // See ReadProjectEvaluationFinishedEventArgs for details on why we always store global properties in newer version.
-            if (_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion ||
-                ReadBoolean())
-            {
-                globalProperties = ReadStringDictionary();
-            }
-            globalProperties = globalProperties ?? new Dictionary<string, string>();
+            globalProperties = ReadStringDictionary() ?? new Dictionary<string, string>();
 
             var entryProjectsFullPath = ReadStringIEnumerable() ?? Enumerable.Empty<string>();
             var targetNames = ReadStringIEnumerable() ?? Enumerable.Empty<string>();
diff --git a/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs b/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
index 195eb903d0a..1db4853b515 100644
--- a/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
@@ -24,13 +24,6 @@ public void SerializationDeserializationTest()
                 {"Variable3", null },
             };
 
-            var globalVariablesResult = new Dictionary<string, string?>
-            {
-                {"Variable1", "Value1" },
-                {"Variable2", "" },
-                {"Variable3", "" },
-            };
-
             var entryPointProjects = new List<string>()
             {
                 "project1",
@@ -63,7 +56,7 @@ public void SerializationDeserializationTest()
             int packetVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
 
             argDeserialized.CreateFromStream(br, packetVersion);
-            argDeserialized.GlobalProperties.ShouldBe(globalVariablesResult);
+            argDeserialized.GlobalProperties.ShouldBe(globalVariables);
             argDeserialized.EntryProjectsFullPath.ShouldBe(entryPointProjects);
             argDeserialized.TargetNames.ShouldBe(targetNames);
             argDeserialized.Flags.ShouldBe(flag);
diff --git a/src/Framework/BuildSubmissionStartedEventArgs.cs b/src/Framework/BuildSubmissionStartedEventArgs.cs
index e706f36d49e..f77fdf8cfd0 100644
--- a/src/Framework/BuildSubmissionStartedEventArgs.cs
+++ b/src/Framework/BuildSubmissionStartedEventArgs.cs
@@ -58,7 +58,7 @@ internal override void WriteToStream(BinaryWriter writer)
             foreach (var entry in GlobalProperties)
             {
                 writer.Write((string)entry.Key);
-                writer.Write((string?)entry.Value ?? "");
+                writer.WriteOptionalString(entry.Value);
             }
 
             writer.Write(EntryProjectsFullPath.Count());
@@ -86,9 +86,9 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             for (int i = 0; i < numberOfProperties; i++)
             {
                 string key = reader.ReadString();
-                string value = reader.ReadString();
+                string? value = reader.ReadOptionalString();
 
-                if (key != null && value != null)
+                if (key != null)
                 {
                     globalProperties[key] = value;
                 }
