diff --git a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
index 4b2255418e0..5e96eef97a4 100644
--- a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
+++ b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
@@ -28,13 +28,12 @@ public class ProjectSchemaValidationHandlerTest
          * 
          **********************************************************************/
         [Fact]
-        public void VerifyInvalidProjectSchema
-            (
-            )
+        public void VerifyInvalidProjectSchema()
         {
             string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             try
             {
                 oldValueForMSBuildOldOM = Environment.GetEnvironmentVariable("MSBuildOldOM");
@@ -60,6 +59,7 @@ public void VerifyInvalidProjectSchema
                 if (projectFilename != null) File.Delete(projectFilename);
                 CleanupSchemaFiles(msbuildTempXsdFilenames);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -68,13 +68,12 @@ public void VerifyInvalidProjectSchema
         /// against is itself invalid
         /// </summary>
         [Fact]
-        public void VerifyInvalidSchemaItself1
-            (
-            )
+        public void VerifyInvalidSchemaItself1()
         {
             string invalidSchemaFile = null;
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             try
             {
                 oldValueForMSBuildOldOM = Environment.GetEnvironmentVariable("MSBuildOldOM");
@@ -99,6 +98,7 @@ public void VerifyInvalidSchemaItself1
                 if (projectFilename != null) File.Delete(projectFilename);
                 if (invalidSchemaFile != null) File.Delete(invalidSchemaFile);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -107,13 +107,12 @@ public void VerifyInvalidSchemaItself1
         /// against is itself invalid
         /// </summary>
         [Fact]
-        public void VerifyInvalidSchemaItself2
-            (
-            )
+        public void VerifyInvalidSchemaItself2()
         {
             string invalidSchemaFile = null;
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
 
             try
             {
@@ -151,6 +150,7 @@ public void VerifyInvalidSchemaItself2
                 if (invalidSchemaFile != null) File.Delete(invalidSchemaFile);
                 if (projectFilename != null) File.Delete(projectFilename);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -163,10 +163,9 @@ public void VerifyInvalidSchemaItself2
          * 
          **********************************************************************/
         [Fact]
-        public void VerifyValidProjectSchema
-            (
-            )
+        public void VerifyValidProjectSchema()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = CreateTempFileOnDisk(@"
                     <Project xmlns=`msbuildnamespace`>
@@ -198,6 +197,7 @@ public void VerifyValidProjectSchema
                 File.Delete(projectFilename);
                 CleanupSchemaFiles(msbuildTempXsdFilenames);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -207,10 +207,9 @@ public void VerifyValidProjectSchema
         /// should not be caught by the schema
         /// </summary>
         [Fact]
-        public void VerifyInvalidImportNotCaughtBySchema
-            (
-            )
+        public void VerifyInvalidImportNotCaughtBySchema()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string[] msbuildTempXsdFilenames = Array.Empty<string>();
 
             string importedProjectFilename = CreateTempFileOnDisk(@"
@@ -252,6 +251,7 @@ public void VerifyInvalidImportNotCaughtBySchema
                 File.Delete(projectFilename);
                 File.Delete(importedProjectFilename);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 0190c5ff9b7..c6d41aa83b7 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -531,6 +531,7 @@ public void Help(string indicator)
         [Fact]
         public void ErrorCommandLine()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
 #if FEATURE_GET_COMMANDLINE
             MSBuildApp.Execute(@"c:\bin\msbuild.exe -junk").ShouldBe(MSBuildApp.ExitType.SwitchError);
 
@@ -544,6 +545,7 @@ public void ErrorCommandLine()
 
             MSBuildApp.Execute(new[] { @"msbuild.exe", "@bogus.rsp" }).ShouldBe(MSBuildApp.ExitType.InitializationError);
 #endif
+            Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
         }
 
         [Fact]
@@ -810,6 +812,7 @@ public void TestEnvironment()
         [Fact]
         public void MSBuildEngineLogger()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string projectString =
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
                     "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">" +
@@ -856,6 +859,7 @@ public void MSBuildEngineLogger()
             {
                 File.Delete(projectFileName);
                 File.Delete(logFile);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 55eba26bf50..70cad5793e6 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -609,7 +609,7 @@ string[] commandLine
 #if FEATURE_GET_COMMANDLINE
                         commandLine
 #else
-                        string.Join(" ", commandLine)
+                        string.Join(' ', commandLine)
 #endif
                         ))
                 {
@@ -1911,7 +1911,7 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
                             }
                         }
 
-                        CommandLineSwitches.SwitchesFromResponseFiles.Add(responseFile, string.Join(" ", argsFromResponseFile));
+                        CommandLineSwitches.SwitchesFromResponseFiles[responseFile] = string.Join(" ", argsFromResponseFile);
 
                         GatherCommandLineSwitches(argsFromResponseFile, commandLineSwitches, commandLine);
                     }
