diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 449bdf1401d..9d74d730923 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -13,7 +13,7 @@
 using Microsoft.Build.CommandLine;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
 using Microsoft.Build.Shared;
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 4dbf79918ac..6120cc78d71 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -27,7 +27,7 @@
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-using Microsoft.Build.Experimental.ProjectCache;
+//using Microsoft.Build.ProjectCache;
 using Microsoft.Build.FileAccesses;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Telemetry;
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 38eca66834b..35619dfd263 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -12,7 +12,7 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.ProjectCache;
+//using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
 using Microsoft.Build.Internal;
diff --git a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
index 107393b4e7d..b8f986f6332 100644
--- a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
+++ b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
@@ -4,7 +4,7 @@
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.BuildException;
 using Microsoft.Build.Internal;
diff --git a/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs b/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
index 5f3ff599c99..8130db1025e 100644
--- a/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
@@ -7,7 +7,7 @@
 using Microsoft.Build.Graph;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     ///     Holds various information about the current msbuild execution that the cache might use.
diff --git a/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs b/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
index 30b1cca5a46..45ffe90629e 100644
--- a/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
@@ -9,7 +9,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     /// Result types that a plugin can return for a given build request.
diff --git a/src/Build/BackEnd/Components/ProjectCache/FileAccessContext.cs b/src/Build/BackEnd/Components/ProjectCache/FileAccessContext.cs
index 5ff62cfb514..eb0bba16f92 100644
--- a/src/Build/BackEnd/Components/ProjectCache/FileAccessContext.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/FileAccessContext.cs
@@ -3,7 +3,7 @@
 
 using System.Collections.Generic;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     public readonly struct FileAccessContext
     {
diff --git a/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs b/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
index a6115a12e86..f6402eb6e98 100644
--- a/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
@@ -3,7 +3,7 @@
 
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     ///     Events logged with this logger will get pushed into MSBuild's logging infrastructure.
diff --git a/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs b/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs
index 50b15018ced..a7e02f85c96 100644
--- a/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs
@@ -5,7 +5,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     ///     A cache hit can use this to instruct MSBuild to construct a BuildResult with the target result specified in this
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
index 52507f3c0ed..f831a166e74 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
@@ -3,7 +3,7 @@
 
 using System.Collections.Generic;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     public class ProjectCacheDescriptor
     {
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptorEqualityComparer.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptorEqualityComparer.cs
index 4406f78498c..43822c47a5a 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptorEqualityComparer.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptorEqualityComparer.cs
@@ -5,7 +5,7 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     internal sealed class ProjectCacheDescriptorEqualityComparer : IEqualityComparer<ProjectCacheDescriptor>
     {
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
index d2f76b4c577..6cba6aead46 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
@@ -7,7 +7,7 @@
 
 #nullable disable
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     /// This exception is used to wrap an unhandled exception from a project cache plugin. This exception aborts the build, and it can only be
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
index 6c999cfcf53..fc1233e8932 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
@@ -7,7 +7,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.FileAccess;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     ///     Only one plugin instance can exist for a given BuildManager BeginBuild / EndBuild session.
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index bd1cb0fd8d7..731ca26e3f9 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -24,7 +24,7 @@
 using Microsoft.Build.Shared;
 using ExceptionHandling = Microsoft.Build.Shared.ExceptionHandling;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     internal record CacheRequest(BuildSubmission Submission, BuildRequestConfiguration Configuration);
 
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
index 85e8f5a4c12..a09514e9007 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
@@ -7,7 +7,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.Experimental.ProjectCache
+namespace Microsoft.Build.ProjectCache
 {
     /// <summary>
     ///     A cache hit can use this to instruct MSBuild to build the cheaper version of the targets that the plugin avoided
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs
new file mode 100644
index 00000000000..5f3ff599c99
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheContext.cs
@@ -0,0 +1,56 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using Microsoft.Build.FileSystem;
+using Microsoft.Build.Graph;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    ///     Holds various information about the current msbuild execution that the cache might use.
+    ///     The cache may need to know about the top level projects or the entire project graph, so MSBuild
+    ///     provides a graph when one is available. When it isn't available, MSBuild provides the top level projects
+    ///     and the plugin can construct its own graph based on those.
+    ///     So either <see cref="Graph" />is null, or <see cref="GraphEntryPoints" /> is null. But not both.
+    /// </summary>
+    public class CacheContext
+    {
+        public IReadOnlyDictionary<string, string> PluginSettings { get; }
+        public ProjectGraph? Graph { get; }
+        public IReadOnlyCollection<ProjectGraphEntryPoint>? GraphEntryPoints { get; }
+        public string? MSBuildExePath { get; }
+        public MSBuildFileSystemBase FileSystem { get; }
+        public IReadOnlyCollection<string> RequestedTargets { get; }
+
+        public CacheContext(
+            IReadOnlyDictionary<string, string> pluginSettings,
+            MSBuildFileSystemBase fileSystem,
+            ProjectGraph? graph = null,
+            IReadOnlyCollection<ProjectGraphEntryPoint>? graphEntryPoints = null)
+            : this(pluginSettings, fileSystem, requestedTargets: [], graph, graphEntryPoints)
+        {
+        }
+
+        public CacheContext(
+            IReadOnlyDictionary<string, string> pluginSettings,
+            MSBuildFileSystemBase fileSystem,
+            IReadOnlyCollection<string> requestedTargets,
+            ProjectGraph? graph = null,
+            IReadOnlyCollection<ProjectGraphEntryPoint>? graphEntryPoints = null)
+        {
+            ErrorUtilities.VerifyThrow(
+                (graph != null) ^ (graphEntryPoints != null),
+                "Either Graph is specified, or GraphEntryPoints is specified. Not both.");
+
+            PluginSettings = pluginSettings;
+            Graph = graph;
+            GraphEntryPoints = graphEntryPoints;
+            MSBuildExePath = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
+            FileSystem = fileSystem;
+            RequestedTargets = requestedTargets;
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs
new file mode 100644
index 00000000000..30b1cca5a46
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/CacheResult.cs
@@ -0,0 +1,138 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    /// Result types that a plugin can return for a given build request.
+    /// </summary>
+    public enum CacheResultType
+    {
+        /// <summary>
+        /// The plugin failed and couldn't return a result. The plugin should log an error detailing the failure. MSBuild will stop the build.
+        /// </summary>
+        None = 0,
+
+        /// <summary>
+        /// The plugin determined that it supports a build request and found that it can be skipped. MSBuild won't build the request.
+        /// </summary>
+        CacheHit,
+
+        /// <summary>
+        /// The plugin determined that it supports a build request and found that it cannot be skipped. MSBuild will build the request.
+        /// </summary>
+        CacheMiss,
+
+        /// <summary>
+        /// The plugin determined that it does not support a certain build request. MSBuild will build the request.
+        /// For example, a plugin may not support projects with a certain extension, certain properties, or certain called targets.
+        /// </summary>
+        CacheNotApplicable
+    }
+
+    /// <summary>
+    ///     Represents the cache result a plugin returns back to MSBuild when queried about a certain project.
+    ///     Results representing cache hits (with <see cref="ResultType"/> == <see cref="CacheResultType.CacheHit"/>)
+    ///     contain information about what <see cref="Execution.BuildResult"/> MSBuild should use for the queried project.
+    ///     It is assumed that all cache hits result in a successful <see cref="Execution.BuildResult"/>.
+    /// </summary>
+    public class CacheResult
+    {
+        public CacheResultType ResultType { get; }
+
+        public BuildResult? BuildResult { get; }
+
+        public ProxyTargets? ProxyTargets { get; }
+
+        internal Exception? Exception { get; }
+
+        private CacheResult(
+            CacheResultType resultType,
+            BuildResult? buildResult = null,
+            ProxyTargets? proxyTargets = null)
+        {
+            if (resultType == CacheResultType.CacheHit)
+            {
+                ErrorUtilities.VerifyThrow(
+                    buildResult != null ^ proxyTargets != null,
+                    "Either buildResult is specified, or proxyTargets is specified. Not both.");
+            }
+
+            ResultType = resultType;
+            BuildResult = buildResult;
+            ProxyTargets = proxyTargets;
+        }
+
+        private CacheResult(Exception exception)
+        {
+            ResultType = CacheResultType.None;
+            Exception = exception;
+        }
+
+        public static CacheResult IndicateCacheHit(BuildResult buildResult)
+        {
+            return new CacheResult(CacheResultType.CacheHit, buildResult);
+        }
+
+        public static CacheResult IndicateCacheHit(ProxyTargets proxyTargets)
+        {
+            return new CacheResult(CacheResultType.CacheHit, proxyTargets: proxyTargets);
+        }
+
+        public static CacheResult IndicateCacheHit(IReadOnlyCollection<PluginTargetResult> targetResults)
+        {
+            ErrorUtilities.VerifyThrowArgumentLength(targetResults);
+
+            return new CacheResult(CacheResultType.CacheHit, ConstructBuildResult(targetResults));
+        }
+
+        public static CacheResult IndicateNonCacheHit(CacheResultType resultType)
+        {
+            ErrorUtilities.VerifyThrow(resultType != CacheResultType.CacheHit, "CantBeCacheHit");
+            return new CacheResult(resultType);
+        }
+
+        internal static CacheResult IndicateException(Exception e)
+        {
+            return new CacheResult(e);
+        }
+
+        private static BuildResult ConstructBuildResult(IReadOnlyCollection<PluginTargetResult> targetResults)
+        {
+            var buildResult = new BuildResult();
+
+            foreach (var pluginTargetResult in targetResults)
+            {
+                buildResult.AddResultsForTarget(
+                    pluginTargetResult.TargetName,
+                    new TargetResult(
+                        pluginTargetResult.TaskItems.Select(ti => CreateTaskItem(ti)).ToArray(),
+                        CreateWorkUnitResult(pluginTargetResult.ResultCode)));
+            }
+
+            return buildResult;
+        }
+
+        private static WorkUnitResult CreateWorkUnitResult(BuildResultCode resultCode)
+        {
+            return resultCode == BuildResultCode.Success
+                ? new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null)
+                : new WorkUnitResult(WorkUnitResultCode.Failed, WorkUnitActionCode.Stop, null);
+        }
+
+        private static ProjectItemInstance.TaskItem CreateTaskItem(ITaskItem2 taskItemInterface)
+        {
+            var taskItem = new ProjectItemInstance.TaskItem(taskItemInterface.EvaluatedIncludeEscaped, definingFileEscaped: null);
+            taskItemInterface.CopyMetadataTo(taskItem);
+            return taskItem;
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs
new file mode 100644
index 00000000000..5ff62cfb514
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/FileAccessContext.cs
@@ -0,0 +1,26 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    public readonly struct FileAccessContext
+    {
+        public FileAccessContext(
+            string projectFullPath,
+            IReadOnlyDictionary<string, string> globalProperties,
+            IReadOnlyList<string> targets)
+        {
+            ProjectFullPath = projectFullPath;
+            GlobalProperties = globalProperties;
+            Targets = targets;
+        }
+
+        public string ProjectFullPath { get; }
+
+        public IReadOnlyDictionary<string, string> GlobalProperties { get; }
+
+        public IReadOnlyList<string> Targets { get; }
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs
new file mode 100644
index 00000000000..a6115a12e86
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginLoggerBase.cs
@@ -0,0 +1,21 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    ///     Events logged with this logger will get pushed into MSBuild's logging infrastructure.
+    /// </summary>
+    public abstract class PluginLoggerBase
+    {
+        public abstract bool HasLoggedErrors { get; protected set; }
+
+        public abstract void LogMessage(string message, MessageImportance? messageImportance = null);
+
+        public abstract void LogWarning(string warning);
+
+        public abstract void LogError(string error);
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs
new file mode 100644
index 00000000000..50b15018ced
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/PluginTargetResult.cs
@@ -0,0 +1,30 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    ///     A cache hit can use this to instruct MSBuild to construct a BuildResult with the target result specified in this
+    ///     type.
+    /// </summary>
+    public readonly struct PluginTargetResult
+    {
+        public string TargetName { get; }
+        public IReadOnlyCollection<ITaskItem2> TaskItems { get; }
+        public BuildResultCode ResultCode { get; }
+
+        public PluginTargetResult(
+            string targetName,
+            IReadOnlyCollection<ITaskItem2> taskItems,
+            BuildResultCode resultCode)
+        {
+            TargetName = targetName;
+            TaskItems = taskItems;
+            ResultCode = resultCode;
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs
new file mode 100644
index 00000000000..52507f3c0ed
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheDescriptor.cs
@@ -0,0 +1,35 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    public class ProjectCacheDescriptor
+    {
+        private ProjectCacheDescriptor(
+            string? pluginAssemblyPath,
+            IReadOnlyDictionary<string, string>? pluginSettings,
+            ProjectCachePluginBase? pluginInstance)
+        {
+            PluginAssemblyPath = pluginAssemblyPath;
+            PluginSettings = pluginSettings ?? new Dictionary<string, string>(0);
+            PluginInstance = pluginInstance;
+        }
+
+        /// <summary>
+        /// Gets the path to the assembly containing the project cache plugin.
+        /// </summary>
+        public string? PluginAssemblyPath { get; }
+
+        public IReadOnlyDictionary<string, string> PluginSettings { get; }
+
+        public ProjectCachePluginBase? PluginInstance { get; }
+
+        public static ProjectCacheDescriptor FromAssemblyPath(string pluginAssemblyPath, IReadOnlyDictionary<string, string>? pluginSettings = null)
+            => new ProjectCacheDescriptor(pluginAssemblyPath, pluginSettings, pluginInstance: null);
+
+        public static ProjectCacheDescriptor FromInstance(ProjectCachePluginBase pluginInstance, IReadOnlyDictionary<string, string>? pluginSettings = null)
+            => new ProjectCacheDescriptor(pluginAssemblyPath: null, pluginSettings, pluginInstance);
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs
new file mode 100644
index 00000000000..d2f76b4c577
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCacheException.cs
@@ -0,0 +1,87 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.Framework.BuildException;
+using Microsoft.Build.Shared;
+
+#nullable disable
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    /// This exception is used to wrap an unhandled exception from a project cache plugin. This exception aborts the build, and it can only be
+    /// thrown by the MSBuild engine.
+    /// </summary>
+    public sealed class ProjectCacheException : BuildExceptionBase
+    {
+        private ProjectCacheException()
+        {
+            ErrorUtilities.ThrowInternalErrorUnreachable();
+        }
+
+        private ProjectCacheException(
+            string message,
+            Exception innerException,
+            bool hasBeenLoggedByProjectCache,
+            string errorCode)
+            : base(message, innerException)
+        {
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(message), "Need error message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(errorCode), "Must specify the error message code.");
+
+            HasBeenLoggedByProjectCache = hasBeenLoggedByProjectCache;
+            ErrorCode = errorCode;
+        }
+
+        internal ProjectCacheException(string message, Exception inner)
+            : base(message, inner)
+        { }
+
+        /// <summary>
+        /// The project cache has already logged this as an error.
+        /// Should not get logged again.
+        /// </summary>
+        public bool HasBeenLoggedByProjectCache { get; }
+
+        /// <summary>
+        /// Gets the error code associated with this exception's message (not the inner exception).
+        /// </summary>
+        /// <value>The error code string.</value>
+        public string ErrorCode { get; }
+
+        internal static void ThrowAsUnhandledException(
+            Exception innerException,
+            string messageResourceName,
+            params string[] messageArgs)
+        {
+            ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
+
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
+
+            throw new ProjectCacheException(message, innerException, hasBeenLoggedByProjectCache: false, errorCode);
+        }
+
+        internal static void ThrowForErrorLoggedInsideTheProjectCache(
+            string messageResourceName,
+            params string[] messageArgs)
+        {
+            ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
+
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
+
+            throw new ProjectCacheException(message: message, innerException: null, hasBeenLoggedByProjectCache: true, errorCode: errorCode);
+        }
+
+        internal static void ThrowForMSBuildIssueWithTheProjectCache(
+            string messageResourceName,
+            params string[] messageArgs)
+        {
+            ErrorUtilities.VerifyThrow(messageResourceName != null, "Need error message.");
+
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
+
+            throw new ProjectCacheException(message: message, innerException: null, hasBeenLoggedByProjectCache: false, errorCode: errorCode);
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs
new file mode 100644
index 00000000000..6c999cfcf53
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProjectCachePluginBase.cs
@@ -0,0 +1,72 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.FileAccess;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    ///     Only one plugin instance can exist for a given BuildManager BeginBuild / EndBuild session.
+    ///     Any exceptions thrown by the plugin will cause MSBuild to fail the build.
+    /// </summary>
+    public abstract class ProjectCachePluginBase
+    {
+        /// <summary>
+        ///     Called once before the build, to have the plugin instantiate its state.
+        ///     Errors are checked via <see cref="PluginLoggerBase.HasLoggedErrors" />.
+        /// </summary>
+        public abstract Task BeginBuildAsync(
+            CacheContext context,
+            PluginLoggerBase logger,
+            CancellationToken cancellationToken);
+
+        /// <summary>
+        ///     Called once for each build request.
+        ///     Operation needs to be atomic. Any side effects (IO, environment variables, etc) need to be reverted upon
+        ///     cancellation.
+        ///     MSBuild may choose to cancel this method and build the project itself.
+        ///     Errors are checked via <see cref="PluginLoggerBase.HasLoggedErrors" />.
+        /// </summary>
+        public abstract Task<CacheResult> GetCacheResultAsync(
+            BuildRequestData buildRequest,
+            PluginLoggerBase logger,
+            CancellationToken cancellationToken);
+
+        /// <summary>
+        ///     Called once after all the build to let the plugin do any post build operations (log metrics, cleanup, etc).
+        ///     Errors are checked via <see cref="PluginLoggerBase.HasLoggedErrors" />.
+        /// </summary>
+        public abstract Task EndBuildAsync(PluginLoggerBase logger, CancellationToken cancellationToken);
+
+        /// <summary>
+        ///     Called for each file access from an MSBuild node or one of its children.
+        /// </summary>
+        [CLSCompliant(false)]
+        public virtual void HandleFileAccess(FileAccessContext fileAccessContext, FileAccessData fileAccessData)
+        {
+        }
+
+        /// <summary>
+        ///     Called for each new child process created by an MSBuild node or one of its children.
+        /// </summary>
+        [CLSCompliant(false)]
+        public virtual void HandleProcess(FileAccessContext fileAccessContext, ProcessData processData)
+        {
+        }
+
+        /// <summary>
+        ///     Called when a build request finishes execution. This provides an opportunity for the plugin to take action on the
+        ///     aggregated file access reports from <see cref="HandleFileAccess(FileAccessContext, FileAccessData)"/>.
+        ///     Errors are checked via <see cref="PluginLoggerBase.HasLoggedErrors" />.
+        /// </summary>
+        public virtual Task HandleProjectFinishedAsync(
+            FileAccessContext fileAccessContext,
+            BuildResult buildResult,
+            PluginLoggerBase logger,
+            CancellationToken cancellationToken) => Task.CompletedTask;
+    }
+}
diff --git a/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs
new file mode 100644
index 00000000000..85e8f5a4c12
--- /dev/null
+++ b/src/Build/BackEnd/Components/ProjectCacheExperimental/ProxyTargets.cs
@@ -0,0 +1,54 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.ProjectCache
+{
+    /// <summary>
+    ///     A cache hit can use this to instruct MSBuild to build the cheaper version of the targets that the plugin avoided
+    ///     running.
+    ///     For example, GetTargetPath is the cheaper version of Build.
+    ///
+    ///     MSBuild will build the proxy targets and assign their target results to the real targets the mapping points to.
+    ///     The proxy targets are left in the build result (i.e., both GetTargetPath and Build will appear in the build result).
+    ///     Real targets can be committed in which case msbuild only keeps the proxy target in the build result.
+    /// </summary>
+    public class ProxyTargets : ITranslatable
+    {
+        private Dictionary<string, string> _proxyTargetToRealTargetMap = null!;
+
+        /// <summary>
+        /// Mapping from proxy targets to real targets. Case insensitive.
+        /// </summary>
+        public IReadOnlyDictionary<string, string> ProxyTargetToRealTargetMap => _proxyTargetToRealTargetMap;
+
+        private ProxyTargets()
+        {
+        }
+
+        public ProxyTargets(IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap)
+        {
+            ErrorUtilities.VerifyThrowArgumentLength(proxyTargetToRealTargetMap);
+
+            _proxyTargetToRealTargetMap = proxyTargetToRealTargetMap.ToDictionary(kvp => kvp.Key, kvp => kvp.Value, StringComparer.OrdinalIgnoreCase);
+        }
+
+        void ITranslatable.Translate(ITranslator translator)
+        {
+            translator.TranslateDictionary(ref _proxyTargetToRealTargetMap, StringComparer.OrdinalIgnoreCase);
+        }
+
+        internal static ProxyTargets FactoryForDeserialization(ITranslator translator)
+        {
+            var instance = new ProxyTargets();
+            ((ITranslatable)instance).Translate(translator);
+
+            return instance;
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 0e8b74863be..8268c65822d 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -11,7 +11,7 @@
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index fa76ba4765c..240b5524e6f 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -5,7 +5,7 @@
 using System.Diagnostics;
 using System.Linq;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index cba4152a3fc..8b2478b5111 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -18,7 +18,7 @@
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.ProjectCache;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index e6fc5f4cccd..c11753db2d3 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -159,6 +159,15 @@
     <Compile Include="BackEnd\Components\FileAccesses\FileAccessReport.cs" />
     <Compile Include="BackEnd\Components\FileAccesses\OutOfProcNodeFileAccessManager.cs" />
     <Compile Include="BackEnd\Components\FileAccesses\ProcessReport.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\CacheContext.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\CacheResult.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\FileAccessContext.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\PluginLoggerBase.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\PluginTargetResult.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\ProjectCacheDescriptor.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\ProjectCacheException.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\ProjectCachePluginBase.cs" />
+    <Compile Include="BackEnd\Components\ProjectCacheExperimental\ProxyTargets.cs" />
     <Compile Include="BackEnd\Shared\EventsCreatorHelper.cs" />
     <Compile Include="BackEnd\Components\RequestBuilder\AssemblyLoadsTracker.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
@@ -705,6 +714,10 @@
     </EmbeddedResource>
   </ItemGroup>
 
+  <ItemGroup>
+    <Folder Include="BackEnd\Components\NewFolder\" />
+  </ItemGroup>
+
   <PropertyGroup>
     <NuGetFrameworkWrapperRedirects_FilePath>$(IntermediateOutputPath)NuGetFrameworkWrapper.redirects.cs</NuGetFrameworkWrapperRedirects_FilePath>
   </PropertyGroup>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 8bf202edc41..56002150a0d 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -26,7 +26,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.ProjectCache;
+//using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Graph;
diff --git a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index fb90a830653..cc5a940cb8c 100644
--- a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -6,7 +6,7 @@
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
 using Shouldly;
