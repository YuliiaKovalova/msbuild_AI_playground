diff --git a/src/Framework/Logging/AnsiCodes.cs b/src/Framework/Logging/AnsiCodes.cs
index 399d7817217..7c8deffcafd 100644
--- a/src/Framework/Logging/AnsiCodes.cs
+++ b/src/Framework/Logging/AnsiCodes.cs
@@ -124,11 +124,6 @@ internal static class AnsiCodes
     /// </remarks>
     public const string RemoveProgress = "\x1b]9;4;0;\x1b\\";
 
-    /// <summary>
-    /// Remove all ANSI escape codes from a string.
-    /// </summary>
-    private static readonly Regex RemoveAnsiRegex = new Regex(@"\x1B\[[^@-~]*[@-~]", RegexOptions.Compiled);
-
     public static string Colorize(string? s, TerminalColor color)
     {
         if (string.IsNullOrWhiteSpace(s))
@@ -157,14 +152,4 @@ public static string MakeBold(string? s)
     /// <param name="column">Column index.</param>
     /// <returns>Control codes to set the desired position.</returns>
     public static string SetCursorHorizontal(int column) => $"{CSI}{column}G";
-
-    /// <summary>
-    /// Removes all ANSI codes from the text.
-    /// </summary>
-    /// <param name="text"></param>
-    /// <returns></returns>
-    public static string RemoveAnsiCodes(string text)
-    {
-        return RemoveAnsiRegex.Replace(text, "");
-    }
 }
diff --git a/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
index bcc3dc607b8..e7cb136a4ca 100644
--- a/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
@@ -10,7 +10,7 @@
 using System.Threading.Tasks;
 
 using Microsoft.Build.Logging.TerminalLogger;
-
+using Shouldly;
 using VerifyTests;
 using VerifyXunit;
 using Xunit;
@@ -28,6 +28,15 @@ public NodeStatus_Transition_Tests()
         UseProjectRelativeDirectory("Snapshots");
     }
 
+    [Fact]
+    public void NodeStatusTargetThrowsForInputWithAnsi()
+    {
+#if DEBUG
+        Func<NodeStatus> newNodeStatus = () => new NodeStatus("project", "tfm", AnsiCodes.Colorize("colorized target", TerminalColor.Green), new MockStopwatch());
+        newNodeStatus.ShouldThrow<Exception>().Message.ShouldContain("Target should not contain any escape codes, if you want to colorize target use the other constructor.");
+#endif
+    }
+
     [Fact]
     public async Task NodeTargetChanges()
     {
@@ -68,7 +77,7 @@ public async Task NodeTargetChangesToColoredTarget()
                 new("Namespace.Project", "TargetFramework", "Testing", new MockStopwatch())
             ],
             [
-               new("Namespace.Project", "TargetFramework", $"{AnsiCodes.Colorize("failed", TerminalColor.Red)} MyTestName1", new MockStopwatch())
+               new("Namespace.Project", "TargetFramework", TerminalColor.Red, "failed", "MyTestName1", new MockStopwatch())
             ]);
 
         await VerifyReplay(rendered);
@@ -80,7 +89,7 @@ public async Task NodeWithColoredTargetUpdatesTime()
         // This test look like there is no change between the frames, but we ask the stopwatch for time they will increase the number.
         // We need this because animations check that NodeStatus reference is the same.
         // And we cannot use MockStopwatch because we don't know when to call Tick on them, and if we do it right away, the time will update in "both" nodes.
-        NodeStatus node = new("Namespace.Project", "TargetFramework", $"{AnsiCodes.Colorize("passed", TerminalColor.Green)} MyTestName1", new TickingStopwatch());
+        NodeStatus node = new("Namespace.Project", "TargetFramework", TerminalColor.Green, "passed", "MyTestName1", new TickingStopwatch());
         var rendered = Animate(
             [
                 node,
diff --git a/src/MSBuild/TerminalLogger/NodeStatus.cs b/src/MSBuild/TerminalLogger/NodeStatus.cs
index d199edc461c..2c3dae9955d 100644
--- a/src/MSBuild/TerminalLogger/NodeStatus.cs
+++ b/src/MSBuild/TerminalLogger/NodeStatus.cs
@@ -13,17 +13,30 @@ internal class NodeStatus
 {
     public string Project { get; }
     public string? TargetFramework { get; }
+    public TerminalColor TargetPrefixColor { get; } = TerminalColor.Default;
+    public string? TargetPrefix { get; }
     public string Target { get; }
     public StopwatchAbstraction Stopwatch { get; }
 
     public NodeStatus(string project, string? targetFramework, string target, StopwatchAbstraction stopwatch)
     {
+        Debug.Assert(!target.Contains("\x1B"), "Target should not contain any escape codes, if you want to colorize target use the other constructor.");
         Project = project;
         TargetFramework = targetFramework;
         Target = target;
         Stopwatch = stopwatch;
     }
 
+    public NodeStatus(string project, string? targetFramework, TerminalColor targetPrefixColor, string targetPrefix, string target, StopwatchAbstraction stopwatch)
+    {
+        Project = project;
+        TargetFramework = targetFramework;
+        TargetPrefixColor = targetPrefixColor;
+        TargetPrefix = targetPrefix;
+        Target = target;
+        Stopwatch = stopwatch;
+    }
+
     /// <summary>
     /// Equality is based on the project, target framework, and target, but NOT the elapsed time.
     /// </summary>
@@ -31,7 +44,9 @@ public override bool Equals(object? obj) =>
         obj is NodeStatus status &&
         Project == status.Project &&
         TargetFramework == status.TargetFramework &&
-        Target == status.Target;
+        Target == status.Target &&
+        TargetPrefixColor == status.TargetPrefixColor &&
+        TargetPrefix == status.TargetPrefix;
 
     public override string ToString()
     {
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
index cdcaef9f7fa..d2498661143 100644
--- a/src/MSBuild/TerminalLogger/NodesFrame.cs
+++ b/src/MSBuild/TerminalLogger/NodesFrame.cs
@@ -53,21 +53,21 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
         string project = status.Project;
         string? targetFramework = status.TargetFramework;
         string target = status.Target;
+        string? targetPrefix = status.TargetPrefix;
+        TerminalColor targetPrefixColor = status.TargetPrefixColor;
 
-        // The target may contain ANSI codes, we need to remove them to get the real
-        // size of the string as it will be printed on the screen, so when we move cursor
-        // backwards we move it by the amount of characters that will be seen by user, and not
-        // by the amount of characters + ANSI codes (that won't be seen).
-        // If we don't remove ANSI codes, the cursor will move too much too the left, and time
-        // time will render before the end of line, instead of at the end of line.
-        var renderedTarget = AnsiCodes.RemoveAnsiCodes(target);
+        var targetWithoutAnsiLength = targetPrefix != null
+            // +1 because we will join them by space in the final output.
+            ? targetPrefix.Length + 1 + target.Length
+            : target.Length;
 
-        int renderedWidth = Length(durationString, project, targetFramework, renderedTarget);
+        int renderedWidth = Length(durationString, project, targetFramework, targetWithoutAnsiLength);
 
         if (renderedWidth > Width)
         {
-            renderedWidth -= renderedTarget.Length;
-            renderedTarget = target = string.Empty;
+            renderedWidth -= targetWithoutAnsiLength;
+            targetPrefix = target = string.Empty;
+            targetWithoutAnsiLength = 0;
 
             if (renderedWidth > Width)
             {
@@ -82,13 +82,14 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
             }
         }
 
-        return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(renderedTarget.Length + durationString.Length + 1)}{target} {durationString}".AsSpan();
+        var renderedTarget = targetPrefix != null ? $"{AnsiCodes.Colorize(targetPrefix, targetPrefixColor)} {target}" : target;
+        return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(targetWithoutAnsiLength + durationString.Length + 1)}{renderedTarget} {durationString}".AsSpan();
 
-        static int Length(string durationString, string project, string? targetFramework, string target) =>
+        static int Length(string durationString, string project, string? targetFramework, int targetWithoutAnsiLength) =>
                 TerminalLogger.Indentation.Length +
                 project.Length + 1 +
                 (targetFramework?.Length ?? -1) + 1 +
-                target.Length + 1 +
+                targetWithoutAnsiLength + 1 +
                 durationString.Length;
     }
 
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index be5876fd34c..313035e428b 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -675,10 +675,9 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
                         case "TLTESTPASSED":
                             {
                                 var indicator = extendedMessage.ExtendedMetadata!["localizedResult"]!;
-                                var displayName = extendedMessage.ExtendedMetadata!["displayName"];
+                                var displayName = extendedMessage.ExtendedMetadata!["displayName"]!;
 
-                                var testResult = $"{AnsiCodes.Colorize(indicator, TerminalColor.Green)} {displayName}";
-                                var status = new NodeStatus(node.Project, node.TargetFramework, testResult, project.Stopwatch);
+                                var status = new NodeStatus(node.Project, node.TargetFramework, TerminalColor.Green, indicator, displayName, project.Stopwatch);
                                 UpdateNodeStatus(buildEventContext, status);
                                 break;
                             }
@@ -686,10 +685,9 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
                         case "TLTESTSKIPPED":
                             {
                                 var indicator = extendedMessage.ExtendedMetadata!["localizedResult"]!;
-                                var displayName = extendedMessage.ExtendedMetadata!["displayName"];
+                                var displayName = extendedMessage.ExtendedMetadata!["displayName"]!;
 
-                                var testResult = $"{AnsiCodes.Colorize(indicator, TerminalColor.Yellow)} {displayName}";
-                                var status = new NodeStatus(node.Project, node.TargetFramework, testResult, project.Stopwatch);
+                                var status = new NodeStatus(node.Project, node.TargetFramework, TerminalColor.Yellow, indicator, displayName, project.Stopwatch);
                                 UpdateNodeStatus(buildEventContext, status);
                                 break;
                             }
