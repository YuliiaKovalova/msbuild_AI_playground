diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index c02d493c324..8f955a1b387 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1134,15 +1134,15 @@ public void MetadataFuntionTestingWithEmtpyString()
       <B></B>
     </_Item>
   </ItemGroup>
-  <Target Name="Tests" DependsOnTargets="WithMetadataValueAFalse;WithMetadataValueAEmpty;WithOutMetadataValueAEmtpy;HasMetadataA;WithMetadataValueCEmpty;HasMetadataC;AnyHaveMetadataValueCEmpty;WithOutMetadataValueCEmpty" />
+  <Target Name="Tests" DependsOnTargets="WithMetadataValueAFalse;WithMetadataValueAEmpty;WithoutMetadataValueAEmtpy;HasMetadataA;WithMetadataValueCEmpty;HasMetadataC;AnyHaveMetadataValueCEmpty;WithoutMetadataValueCEmpty" />
   <Target Name="WithMetadataValueAFalse">
     <Message Text="WithMetadataValueAFalse: [@(_Item->WithMetadataValue('A', 'false'), '|')]"/>
   </Target>
   <Target Name="WithMetadataValueAEmpty">
     <Message Text="WithMetadataValueAEmpty: [@(_Item->WithMetadataValue('A', ''), '|')]"/>
   </Target>
-  <Target Name="WithOutMetadataValueAEmtpy">
-    <Message Text="WithOutMetadataValueAEmpty: [@(_Item->WithOutMetadataValue('A', ''), '|')]"/>
+  <Target Name="WithoutMetadataValueAEmtpy">
+    <Message Text="WithoutMetadataValueAEmpty: [@(_Item->WithoutMetadataValue('A', ''), '|')]"/>
   </Target>
   <Target Name="HasMetadataA">
     <Message Text="HasMetadataA: [@(_Item->HasMetadata('A'), '|')]"/>
@@ -1156,19 +1156,19 @@ public void MetadataFuntionTestingWithEmtpyString()
   <Target Name="AnyHaveMetadataValueCEmpty">
     <Message Text="AnyHaveMetadataValueCEmpty: [@(_Item->AnyHaveMetadataValue('C', ''), '|')]"/>
   </Target>
-  <Target Name="WithOutMetadataValueCEmpty">
-    <Message Text="WithOutMetadataValueCEmpty: [@(_Item->WithOutMetadataValue('C', ''), '|')]"/>
+  <Target Name="WithoutMetadataValueCEmpty">
+    <Message Text="WithoutMetadataValueCEmpty: [@(_Item->WithoutMetadataValue('C', ''), '|')]"/>
   </Target>
 </Project>
 """);
             logger.AssertLogContains("WithMetadataValueAFalse: [Two]");
             logger.AssertLogContains("WithMetadataValueAEmpty: [Three]");
-            logger.AssertLogContains("WithOutMetadataValueAEmpty: [One|Two|Four]");
+            logger.AssertLogContains("WithoutMetadataValueAEmpty: [One|Two|Four]");
             logger.AssertLogContains("HasMetadataA: [One|Two|Three]");
             logger.AssertLogContains("WithMetadataValueCEmpty: []");
             logger.AssertLogContains("HasMetadataC: []");
             logger.AssertLogContains("AnyHaveMetadataValueCEmpty: [false]");
-            logger.AssertLogContains("WithOutMetadataValueCEmpty: [One|Two|Three|Four]");
+            logger.AssertLogContains("WithoutMetadataValueCEmpty: [One|Two|Three|Four]");
         }
 
         [Fact]
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 11e35aa5ece..9fdb08eab0c 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -895,6 +895,8 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)
             return metadataFromDefinition;
         }
 
+        public bool TryGetMetadataValueEscaped(string name, out string value) => throw new NotImplementedException();
+
         /// <summary>
         /// A class factory for ProjectItems.
         /// </summary>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 0c76366fe09..63b85872ae2 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2749,11 +2749,11 @@ internal static IEnumerable<Pair<string, S>> HasMetadata(Expander<P, I> expander
 
                     foreach (Pair<string, S> item in itemsOfType)
                     {
-                        bool hasMetadata = false;
+                        bool metadataFound = false;
 
                         try
                         {
-                            hasMetadata = item.Value.HasMetadata(metadataName);
+                            metadataFound = item.Value.HasMetadata(metadataName);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2764,7 +2764,7 @@ internal static IEnumerable<Pair<string, S>> HasMetadata(Expander<P, I> expander
                             ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotEvaluateItemMetadata", metadataName, ex.Message);
                         }
 
-                        if (hasMetadata)
+                        if (metadataFound)
                         {
                             // return a result through the enumerator
                             yield return new Pair<string, S>(item.Key, item.Value);
@@ -2789,10 +2789,7 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
 
                         try
                         {
-                            if (item.Value.HasMetadata(metadataName))
-                            {
-                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
-                            }
+                            item.Value.TryGetMetadataValueEscaped(metadataName, out metadataValue);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2815,8 +2812,7 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
                 /// Intrinsic function that returns those items don't have the given metadata value
                 /// Using a case insensitive comparison.
                 /// </summary>
-                /// 
-                internal static IEnumerable<Pair<string, S>> WithOutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)
+                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)
                 {
                     ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, "InvalidItemFunctionSyntax", functionName, arguments == null ? 0 : arguments.Length);
 
@@ -2829,10 +2825,7 @@ internal static IEnumerable<Pair<string, S>> WithOutMetadataValue(Expander<P, I>
 
                         try
                         {
-                            if (item.Value.HasMetadata(metadataName))
-                            {
-                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
-                            }
+                            item.Value.TryGetMetadataValueEscaped(metadataName, out metadataValue);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2871,10 +2864,7 @@ internal static IEnumerable<Pair<string, S>> AnyHaveMetadataValue(Expander<P, I>
 
                             try
                             {
-                                if (item.Value.HasMetadata(metadataName))
-                                {
-                                    metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
-                                }
+                                item.Value.TryGetMetadataValueEscaped(metadataName, out metadataValue);
                             }
                             catch (ArgumentException ex) // Blank metadata name
                             {
diff --git a/src/Build/Evaluation/IItem.cs b/src/Build/Evaluation/IItem.cs
index ad6392828fc..a809e32a8bf 100644
--- a/src/Build/Evaluation/IItem.cs
+++ b/src/Build/Evaluation/IItem.cs
@@ -63,5 +63,11 @@ string ProjectDirectory
         /// care where the metadata originated.
         /// </remarks>
         bool HasMetadata(string name);
+
+        /// <summary>
+        /// Get the metadata value with the specified key. 
+        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+        /// </summary>
+        bool TryGetMetadataValueEscaped(string name, out string value);
     }
 }
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index c1edb7d0def..d3840eada19 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -709,6 +709,15 @@ private void CommonConstructor(ProjectInstance projectToUse, string itemTypeToUs
                                         definingFileEscaped);
         }
 
+        /// <summary>
+        /// Get the metadata value with the specified key. 
+        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+        /// </summary>
+        public bool TryGetMetadataValueEscaped(string name, out string value)
+        {
+            return _taskItem.TryGetMetadataEscaped(name, out value);
+        }
+
         /// <summary>
         /// An item without an item type. Cast to an ITaskItem, this is
         /// what is given to tasks. It is also used for target outputs.
@@ -1216,6 +1225,15 @@ string IItem.GetMetadataValueEscaped(string name)
                 return GetMetadataEscaped(name);
             }
 
+            /// <summary>
+            /// Get the metadata value with the specified key. 
+            /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+            /// </summary>
+            bool IItem.TryGetMetadataValueEscaped(string name, out string value)
+            {
+                return TryGetMetadataEscaped(name, out value);
+            }
+
             /// <summary>
             /// Returns the escaped value of the metadata with the specified key.
             /// </summary>
@@ -1296,6 +1314,55 @@ public string GetMetadataEscaped(string metadataName)
                 return value ?? String.Empty;
             }
 
+            /// <summary>
+            /// Get the specified metadata value, escaped.
+            /// If metadata is not defined, value is null, returns false.
+            /// </summary>
+            public bool TryGetMetadataEscaped(string metadataName, out string value)
+            {
+                if (string.IsNullOrEmpty(metadataName))
+                {
+                    ErrorUtilities.VerifyThrowArgumentLength(metadataName, nameof(metadataName));
+                }
+
+                ProjectMetadataInstance metadatum;
+                if (_directMetadata != null)
+                {
+                    metadatum = _directMetadata[metadataName];
+                    if (metadatum != null)
+                    {
+                        value = metadatum.EvaluatedValueEscaped;
+                        return true;
+                    }
+                }
+
+                metadatum = GetItemDefinitionMetadata(metadataName);
+
+                if (metadatum != null && Expander<ProjectProperty, ProjectItem>.ExpressionMayContainExpandableExpressions(metadatum.EvaluatedValueEscaped))
+                {
+                    Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(null, null, new BuiltInMetadataTable(null, this), FileSystems.Default);
+
+                    // We don't have a location to use, but this is very unlikely to error
+                    value = expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, ElementLocation.EmptyLocation);
+                    return true;
+                }
+                else if (metadatum != null)
+                {
+                    value = metadatum.EvaluatedValueEscaped;
+                    return true;
+                }
+
+
+                if (FileUtilities.ItemSpecModifiers.IsItemSpecModifier(metadataName))
+                {
+                    value = BuiltInMetadata.GetMetadataValueEscaped(_projectDirectory, _includeBeforeWildcardExpansionEscaped, _includeEscaped, _definingFileEscaped, metadataName, ref _fullPath);
+                    return true;
+                }
+
+                value = null;
+                return false;
+            }
+
             /// <summary>
             /// ITaskItem implementation which sets metadata.
             /// </summary>
