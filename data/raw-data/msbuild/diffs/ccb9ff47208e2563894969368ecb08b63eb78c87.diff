diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index 8058c780529..e0ddeba1740 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -24,21 +24,8 @@ namespace Microsoft.Build.UnitTests.Construction
     /// <summary>
     /// Tests for the parts of SolutionFile that are surfaced as public API
     /// </summary>
-    public class SolutionFile_Tests : IDisposable
+    public class SolutionFile_Tests
     {
-
-        private readonly TestEnvironment _testEnvironment;
-
-        public SolutionFile_Tests()
-        {
-            _testEnvironment = TestEnvironment.Create();
-        }
-
-        public void Dispose()
-        {
-            _testEnvironment.Dispose();
-        }
-
         /// <summary>
         /// Test that a project with the C++ project guid and an extension of vcproj is seen as invalid.
         /// </summary>
@@ -72,7 +59,7 @@ public void ParseSolution_VC(bool isOptInSlnParsingWithNewParser)
 
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser);
+                ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser);
                 Assert.Fail("Should not get here");
             });
         }
@@ -110,7 +97,7 @@ public void ParseSolution_VC2(bool isOptInSlnParsingWithNewParser, bool convertT
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             string expectedProjectName = convertToSlnx ? "Project name" : "Project name.myvctype";
             Assert.Equal(expectedProjectName, solution.ProjectsInOrder[0].ProjectName);
@@ -159,12 +146,12 @@ public void ParseSolution_EmptyProjectName(bool isOptInSlnParsingWithNewParser)
             {
                 Assert.Throws<InvalidProjectFileException>(() =>
                 {
-                    SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser);
+                    SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser);
                 });
             }
             else
             {
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser);
                 Assert.StartsWith("EmptyProjectName", solution.ProjectsInOrder[0].ProjectName);
                 Assert.Equal("src\\.proj", solution.ProjectsInOrder[0].RelativePath);
                 Assert.Equal("{0ABED153-9451-483C-8140-9E8D7306B216}", solution.ProjectsInOrder[0].ProjectGuid);
@@ -215,7 +202,7 @@ public void BasicSolution(bool isOptInSlnParsingWithNewParser, bool convertToSln
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             Assert.Equal(3, solution.ProjectsInOrder.Count);
 
@@ -300,7 +287,7 @@ public void SolutionFolders(bool convertToSlnx)
                 """;
 
             bool isOptInSlnParsingWithNewParser = !convertToSlnx;
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             Assert.Equal(3, solution.ProjectsInOrder.Count);
 
@@ -387,7 +374,7 @@ public void SolutionDependencies(bool isOptInSlnParsingWithNewParser, bool conve
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             Assert.Equal(3, solution.ProjectsInOrder.Count);
 
@@ -470,7 +457,7 @@ public void ParseSolutionConfigurations(bool isOptInSlnParsingWithNewParser, boo
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             Assert.Equal(7, solution.SolutionConfigurations.Count);
 
@@ -533,7 +520,7 @@ public void ParseSolutionConfigurationsNoMixedPlatform(bool isOptInSlnParsingWit
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             Assert.Equal(6, solution.SolutionConfigurations.Count);
 
@@ -609,7 +596,7 @@ public void ParseProjectConfigurationsInSolutionConfigurations1(bool isOptInSlnP
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             ProjectInSolution csharpProject = solution.ProjectsInOrder.First(p => p.ProjectName == "ClassLibrary1");
             ProjectInSolution vcProject = solution.ProjectsInOrder.First(p => p.ProjectName == "MainApp");
@@ -695,7 +682,7 @@ public void ParseProjectConfigurationsInSolutionConfigurations2(bool isOptInSlnP
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents, isOptInSlnParsingWithNewParser, convertToSlnx);
 
             ProjectInSolution winFormsApp1 = solution.ProjectsInOrder.First(p => p.ProjectName == "WinFormsApp1");
             ProjectInSolution classLibrary1 = solution.ProjectsInOrder.First(p => p.ProjectName == "ClassLibrary1");
@@ -721,16 +708,19 @@ public void ParseProjectConfigurationsInSolutionConfigurations2(bool isOptInSlnP
         /// Helper method to create a SolutionFile object, and call it to parse the SLN file
         /// represented by the string contents passed in. Optionally can convert the SLN to SLNX and then parse the solution.
         /// </summary>
-        private static SolutionFile ParseSolutionHelper(TestEnvironment testEnvironment, string solutionFileContents, bool isOptInSlnParsingWithNewParser, bool convertToSlnx = false)
+        private static SolutionFile ParseSolutionHelper(string solutionFileContents, bool isOptInSlnParsingWithNewParser, bool convertToSlnx = false)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
-            if (isOptInSlnParsingWithNewParser)
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
             {
-                testEnvironment.SetEnvironmentVariable("MSBUILD_SLN_PARSING_SOLUTIONPERSISTENCE_OPTIN", "1");
+                if (isOptInSlnParsingWithNewParser)
+                {
+                    testEnvironment.SetEnvironmentVariable("MSBUILD_SLN_PARSING_SOLUTIONPERSISTENCE_OPTIN", "1");
+                }
+                TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
+                string solutionPath = convertToSlnx ? ConvertToSlnx(sln.Path) : sln.Path;
+                return SolutionFile.Parse(solutionPath);
             }
-            TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
-            string solutionPath = convertToSlnx ? ConvertToSlnx(sln.Path) : sln.Path;
-            return SolutionFile.Parse(solutionPath);
         }
 
         private static string ConvertToSlnx(string slnPath)
diff --git a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
index bf588b40394..2e02a0d3b70 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
@@ -20,21 +20,13 @@
 
 namespace Microsoft.Build.UnitTests.Construction
 {
-    public class SolutionFile_NewParser_Tests : IDisposable
+    public class SolutionFile_NewParser_Tests
     {
         public ITestOutputHelper TestOutputHelper { get; }
 
-        private readonly TestEnvironment _testEnvironment;
-
         public SolutionFile_NewParser_Tests(ITestOutputHelper testOutputHelper)
         {
             TestOutputHelper = testOutputHelper;
-            _testEnvironment = TestEnvironment.Create();
-        }
-
-        public void Dispose()
-        {
-            _testEnvironment.Dispose();
         }
 
         /// <summary>
@@ -88,7 +80,7 @@ public void ProjectWithWebsiteProperties(bool convertToSlnx)
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents.Replace('`', '"'), convertToSlnx);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents.Replace('`', '"'), convertToSlnx);
 
             solution.ProjectsInOrder.ShouldHaveSingleItem();
 
@@ -137,6 +129,15 @@ public void ProjectWithWebsiteProperties(bool convertToSlnx)
         /// Helper method to create a SolutionFile object, and call it to parse the SLN file
         /// represented by the string contents passed in. Optionally can convert the SLN to SLNX and then parse the solution.
         /// </summary>
+        internal static SolutionFile ParseSolutionHelper(string solutionFileContents, bool convertToSlnx = false)
+        {
+            solutionFileContents = solutionFileContents.Replace('\'', '"');
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                return ParseSolutionHelper(testEnvironment, solutionFileContents, convertToSlnx);
+            }
+        }
+
         internal static SolutionFile ParseSolutionHelper(TestEnvironment testEnvironment, string solutionFileContents, bool convertToSlnx = false)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
diff --git a/src/Build.UnitTests/Construction/SolutionFile_OldParser_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_OldParser_Tests.cs
index 708cee21ab9..ab51906b222 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_OldParser_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_OldParser_Tests.cs
@@ -17,21 +17,13 @@
 
 namespace Microsoft.Build.UnitTests.Construction
 {
-    public class SolutionFile_OldParser_Tests : IDisposable
+    public class SolutionFile_OldParser_Tests
     {
         public ITestOutputHelper TestOutputHelper { get; }
 
-        private readonly TestEnvironment _testEnvironment;
-
         public SolutionFile_OldParser_Tests(ITestOutputHelper testOutputHelper)
         {
             TestOutputHelper = testOutputHelper;
-            _testEnvironment = TestEnvironment.Create();
-        }
-
-        public void Dispose()
-        {
-            _testEnvironment.Dispose();
         }
 
         /// <summary>
@@ -142,7 +134,7 @@ public void ParseSolutionWithDifferentSpacing()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             Assert.Equal("Project name", solution.ProjectsInOrder[0].ProjectName);
             Assert.Equal("Relative path to project file", solution.ProjectsInOrder[0].RelativePath);
@@ -208,7 +200,7 @@ public void ParseEtpProject()
                             ProjectSection(ProjectDependencies) = postProject
                             EndProjectSection
                         EndProject";
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents);
                 // Project should get added to the solution
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
                 solution.ProjectsInOrder[1].RelativePath.ShouldBe(@"ClassLibrary2.csproj");
@@ -282,7 +274,7 @@ public void CanBeMSBuildFile()
                         EndProject";
 
 
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents);
                 ProjectInSolution project = solution.ProjectsByGuid["{AD0F3D02-9925-4D57-9DAF-E0A9D936ABDB}"];
                 ProjectInSolution project2 = solution.ProjectsByGuid["{CCCCCCCC-9925-4D57-9DAF-E0A9D936ABDB}"];
                 project.CanBeMSBuildProjectFile(out _).ShouldBeFalse();
@@ -336,7 +328,7 @@ public void CanBeMSBuildFileRejectsMSBuildLikeFiles()
                             EndProjectSection
                         EndProject";
 
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents);
                 ProjectInSolution project1 = solution.ProjectsByGuid["{CCCCCCCC-9925-4D57-9DAF-E0A9D936ABDB}"];
                 ProjectInSolution project2 = solution.ProjectsByGuid["{DEA89696-F42B-4B58-B7EE-017FF40817D1}"];
 
@@ -397,7 +389,7 @@ public void ParseNestedEtpProjectSingleLevel()
                             ProjectSection(ProjectDependencies) = postProject
                             EndProjectSection
                         EndProject";
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
                 // Project should get added to the solution
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
@@ -424,7 +416,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionPriorToDev12 = ParseSolutionHelper(_testEnvironment, solutionFileContentsPriorToDev12);
+            SolutionFile solutionPriorToDev12 = ParseSolutionHelper(solutionFileContentsPriorToDev12);
 
             solutionPriorToDev12.Version.ShouldBe(11);
             solutionPriorToDev12.VisualStudioVersion.ShouldBe(10);
@@ -440,7 +432,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12);
+            SolutionFile solutionDev12 = ParseSolutionHelper(solutionFileContentsDev12);
 
             solutionDev12.Version.ShouldBe(11);
             solutionDev12.VisualStudioVersion.ShouldBe(12);
@@ -458,7 +450,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12Corrupted1 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12Corrupted1);
+            SolutionFile solutionDev12Corrupted1 = ParseSolutionHelper(solutionFileContentsDev12Corrupted1);
             solutionDev12Corrupted1.Version.ShouldBe(11);
             solutionDev12Corrupted1.VisualStudioVersion.ShouldBe(10);
 
@@ -473,7 +465,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12Corrupted2 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12Corrupted2);
+            SolutionFile solutionDev12Corrupted2 = ParseSolutionHelper(solutionFileContentsDev12Corrupted2);
             solutionDev12Corrupted2.Version.ShouldBe(11);
             solutionDev12Corrupted2.VisualStudioVersion.ShouldBe(10);
 
@@ -488,7 +480,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12Corrupted3 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12Corrupted3);
+            SolutionFile solutionDev12Corrupted3 = ParseSolutionHelper(solutionFileContentsDev12Corrupted3);
             solutionDev12Corrupted3.Version.ShouldBe(11);
             solutionDev12Corrupted3.VisualStudioVersion.ShouldBe(10);
 
@@ -503,7 +495,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12Corrupted4 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12Corrupted4);
+            SolutionFile solutionDev12Corrupted4 = ParseSolutionHelper(solutionFileContentsDev12Corrupted4);
             solutionDev12Corrupted4.Version.ShouldBe(11);
             solutionDev12Corrupted4.VisualStudioVersion.ShouldBe(10);
 
@@ -518,7 +510,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12Corrupted5 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12Corrupted5);
+            SolutionFile solutionDev12Corrupted5 = ParseSolutionHelper(solutionFileContentsDev12Corrupted5);
             solutionDev12Corrupted5.Version.ShouldBe(11);
             solutionDev12Corrupted5.VisualStudioVersion.ShouldBe(10);
 
@@ -533,7 +525,7 @@ public void TestVSAndSolutionVersionParsing()
                             EndProjectSection
                         EndProject";
 
-            SolutionFile solutionDev12Corrupted6 = ParseSolutionHelper(_testEnvironment, solutionFileContentsDev12Corrupted6);
+            SolutionFile solutionDev12Corrupted6 = ParseSolutionHelper(solutionFileContentsDev12Corrupted6);
             solutionDev12Corrupted6.Version.ShouldBe(11);
             solutionDev12Corrupted6.VisualStudioVersion.ShouldBe(12);
         }
@@ -612,7 +604,7 @@ public void ParseNestedEtpProjectMultipleLevel()
                             ProjectSection(ProjectDependencies) = postProject
                             EndProjectSection
                         EndProject";
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
                 // Project should get added to the solution
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
@@ -670,7 +662,7 @@ public void MalformedEtpProjFile()
                             ProjectSection(ProjectDependencies) = postProject
                             EndProjectSection
                         EndProject";
-                SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents);
                 string errCode;
                 ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errCode, out _, "Shared.InvalidProjectFile",
                    "someproj.etp", String.Empty);
@@ -705,7 +697,7 @@ public void MissingEtpProjFile()
                     EndProject";
             // Delete the someproj.etp file if it exists
             File.Delete(proj1Path);
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
             string errCode;
             ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errCode, out _, "Shared.ProjectFileCouldNotBeLoaded",
                   "someproj.etp", String.Empty);
@@ -762,7 +754,7 @@ public void ParseSolutionWhereProjectNameHasSpecialCharacters()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             Assert.Equal("MyProject,(=IsGreat)", solution.ProjectsInOrder[0].ProjectName);
             Assert.Equal("Relative path to project file", solution.ProjectsInOrder[0].RelativePath);
@@ -802,13 +794,18 @@ public void ParseFirstProjectLineWhereProjectPathHasBackslash()
         /// </summary>
         /// <param name="solutionFileContents"></param>
         /// <returns></returns>
-        internal static SolutionFile ParseSolutionHelper(TestEnvironment testEnvironment, string solutionFileContents)
+        internal static SolutionFile ParseSolutionHelper(string solutionFileContents)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
-            TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
-            SolutionFile solutionFile = new SolutionFile { FullPath = sln.Path };
-            solutionFile.ParseSolutionFile();
-            return solutionFile;
+            StreamReader sr = StreamHelpers.StringToStreamReader(solutionFileContents);
+
+            SolutionFile sp = new SolutionFile();
+            sp.SolutionFileDirectory = Path.GetTempPath();
+            sp.SolutionReader = sr;
+            sp.FullPath = FileUtilities.GetTemporaryFileName(".sln");
+            sp.ParseSolution();
+            // Clean up the temporary file that got created with this call
+            return sp;
         }
 
         /// <summary>
@@ -826,7 +823,7 @@ public void BadVersionStamp()
                 # Visual Studio 2005
                 ";
 
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             });
         }
         /// <summary>
@@ -843,7 +840,7 @@ public void VersionTooLow()
                 # Visual Studio 2005
                 ";
 
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             });
         }
         /// <summary>
@@ -859,7 +856,7 @@ public void UnsupportedVersion()
                 # Visual Studio 2005
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
             solution.SolutionParserComments.ShouldHaveSingleItem(); // "Expected the solution parser to contain one comment"
             solution.SolutionParserComments[0].ShouldBe(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedSolutionComment", "999"));
         }
@@ -873,7 +870,7 @@ public void Version9()
                 # Visual Studio 2005
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.Version.ShouldBe(9);
         }
@@ -887,7 +884,7 @@ public void Version10()
                 # Visual Studio 2005
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.Version.ShouldBe(10);
         }
@@ -924,7 +921,7 @@ public void ParseSolutionFileWithDescriptionInformation()
                 ";
             try
             {
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             }
             catch (Exception ex)
             {
@@ -979,7 +976,7 @@ public void BasicSolution()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.ProjectsInOrder.Count.ShouldBe(4);
 
@@ -1067,7 +1064,7 @@ public void SolutionFolders()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.ProjectsInOrder.Count.ShouldBe(5);
 
@@ -1165,7 +1162,7 @@ public void ParseSolutionConfigurationWithEmptyLines()
                 EndGlobal
                 ";
 
-            ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            ParseSolutionHelper(solutionFileContents);
         }
 
         /// <summary>
@@ -1214,7 +1211,7 @@ public void MissingNestedProject()
 
             InvalidProjectFileException e = Should.Throw<InvalidProjectFileException>(() =>
             {
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             });
 
             e.ErrorCode.ShouldBe("MSB5023");
@@ -1258,7 +1255,7 @@ public void IncorrectlyNestedProjectErrorContainsProjectNameAndGuid()
                 EndGlobal
                 ";
 
-            InvalidProjectFileException e = Should.Throw<InvalidProjectFileException>(() => ParseSolutionHelper(_testEnvironment, solutionFileContents));
+            InvalidProjectFileException e = Should.Throw<InvalidProjectFileException>(() => ParseSolutionHelper(solutionFileContents));
 
             e.ErrorCode.ShouldBe("MSB5009");
             e.Message.ShouldContain("{1484A47E-F4C5-4700-B13F-A2BDB6ADD35E}");
@@ -1384,7 +1381,7 @@ public void BuildableProjects()
 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.ProjectsInOrder.Count.ShouldBe(6);
 
@@ -1464,7 +1461,7 @@ public void SolutionDependencies()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.ProjectsInOrder.Count.ShouldBe(3);
 
@@ -1539,7 +1536,7 @@ public void VenusProject()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents.Replace('`', '"'));
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents.Replace('`', '"'));
 
             solution.ProjectsInOrder.ShouldHaveSingleItem();
 
@@ -1622,7 +1619,7 @@ public void VenusProjectInASolutionFolder()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.ProjectsInOrder.Count.ShouldBe(3);
 
@@ -1691,7 +1688,7 @@ public void ParseSolutionConfigurations()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.SolutionConfigurations.Count.ShouldBe(7);
 
@@ -1751,7 +1748,7 @@ public void ParseSolutionConfigurationsNoMixedPlatform()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             solution.SolutionConfigurations.Count.ShouldBe(6);
 
@@ -1795,7 +1792,7 @@ public void ParseInvalidSolutionConfigurations1()
                 EndGlobal
                 ";
 
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             });
         }
         /// <summary>
@@ -1821,7 +1818,7 @@ public void ParseInvalidSolutionConfigurations2()
                 EndGlobal
                 ";
 
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             });
         }
         /// <summary>
@@ -1847,7 +1844,7 @@ public void ParseInvalidSolutionConfigurations3()
                 EndGlobal
                 ";
 
-                ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                ParseSolutionHelper(solutionFileContents);
             });
         }
 
@@ -1890,7 +1887,7 @@ public void ParseAllProjectsContainedInInvalidSolutionEvenWhenMissingEndProject(
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             // What is needed to be checked is whether there were still both projects found in the invalid solution file
             ProjectInSolution classLibraryProject = solution.ProjectsByGuid["{6185CC21-BE89-448A-B3C0-D1C27112E595}"];
@@ -1957,7 +1954,7 @@ public void ParseProjectConfigurationsInSolutionConfigurations1()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             ProjectInSolution csProject = solution.ProjectsByGuid["{6185CC21-BE89-448A-B3C0-D1C27112E595}"];
             ProjectInSolution vcProject = solution.ProjectsByGuid["{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}"];
@@ -2042,7 +2039,7 @@ public void ParseProjectConfigurationsInSolutionConfigurations2()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             ProjectInSolution webProject = solution.ProjectsByGuid["{E8E75132-67E4-4D6F-9CAE-8DA4C883F418}"];
             ProjectInSolution exeProject = solution.ProjectsByGuid["{25FD9E7C-F37E-48E0-9A7C-607FE4AACCC0}"];
@@ -2097,7 +2094,7 @@ public void ParseSolutionFileContainingProjectsWithParentSlnFolder()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             ProjectInSolution project1 = solution.ProjectsByGuid["{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}"];
             ProjectInSolution project2 = solution.ProjectsByGuid["{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}"];
@@ -2166,7 +2163,7 @@ public void ParseSolutionFileContainingProjectsWithParentSlnFolder()
                 ")]
         public void ParseSolutionFileContainingProjectsWithSimilarNames_TwoProjects(string solutionFileContents)
         {
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             ProjectInSolution project1 = solution.ProjectsByGuid["{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}"];
             ProjectInSolution project2 = solution.ProjectsByGuid["{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}"];
@@ -2243,7 +2240,7 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_TwoProjects(stri
                 ")]
         public void ParseSolutionFileContainingProjectsWithSimilarNames_ThreeProjects(string solutionFileContents)
         {
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
             ProjectInSolution project1 = solution.ProjectsByGuid["{6185CC21-BE89-448A-B3C0-D1C27112E595}"];
             ProjectInSolution project2 = solution.ProjectsByGuid["{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}"];
@@ -2298,7 +2295,7 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_ThreeProjects_On
                 EndGlobal
                 ";
 
-            Action parseSolution = () => ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            Action parseSolution = () => ParseSolutionHelper(solutionFileContents);
             var exception = Should.Throw<InvalidProjectFileException>(parseSolution);
 
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out _, out _, "SolutionParseDuplicateProject", "Project.Named.With.Dots");
@@ -2342,7 +2339,7 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_ThreeProjects_On
                 EndGlobal
                 ";
 
-            Action parseSolution = () => ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            Action parseSolution = () => ParseSolutionHelper(solutionFileContents);
             var exception = Should.Throw<InvalidProjectFileException>(parseSolution);
 
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out _, out _, "SolutionParseDuplicateProject", "Project_Named_With_Dots");
@@ -2388,7 +2385,7 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One
                 EndGlobal
                 ";
 
-            Action parseSolution = () => ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            Action parseSolution = () => ParseSolutionHelper(solutionFileContents);
             var exception = Should.Throw<InvalidProjectFileException>(parseSolution);
 
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out _, out _, "SolutionParseDuplicateProject", "Project_Named_With_Dots");
@@ -2425,7 +2422,7 @@ public void ParseSolutionWithParentedPaths()
                 EndGlobal
                 ";
 
-            SolutionFile solution = ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);
             string expectedRelativePath = Path.Combine("..", "ProjectA", "ProjectA.csproj");
             solution.ProjectsInOrder[0].ProjectName.ShouldBe("ProjectA");
             solution.ProjectsInOrder[0].RelativePath.ShouldBe(expectedRelativePath);
@@ -2483,7 +2480,7 @@ public void ParseSolutionWithComments()
             }
             stringBuilder.AppendLine(comment);
 
-            Should.NotThrow(() => ParseSolutionHelper(_testEnvironment, stringBuilder.ToString()));
+            Should.NotThrow(() => ParseSolutionHelper(stringBuilder.ToString()));
         }
     }
 }
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index d0c001ec8ee..71bf3491d2b 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -34,8 +34,6 @@ public class SolutionProjectGenerator_Tests : IDisposable
     {
         private readonly ITestOutputHelper output;
 
-        private readonly TestEnvironment _testEnvironment;
-
         private string _originalVisualStudioVersion = null;
 
         private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);
@@ -46,8 +44,6 @@ public SolutionProjectGenerator_Tests(ITestOutputHelper output)
         {
             this.output = output;
 
-            _testEnvironment = TestEnvironment.Create();
-
             // Save off the value for use during cleanup
             _originalVisualStudioVersion = Environment.GetEnvironmentVariable("VisualStudioVersion");
         }
@@ -57,7 +53,6 @@ public void Dispose()
             // Need to make sure the environment is cleared up for later tests
             Environment.SetEnvironmentVariable("VisualStudioVersion", _originalVisualStudioVersion);
             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();
-            _testEnvironment.Dispose();
         }
 
         /// <summary>
@@ -438,7 +433,7 @@ public void DefaultSubToolsetIfSolutionVersionSubToolsetDoesntExist()
                 EndGlobal
                 """;
 
-            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
 
             ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, CreateMockLoggingService());
 
@@ -482,17 +477,21 @@ public void SubToolsetSetBySolutionVersion(bool useNewParser)
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, CreateMockLoggingService());
+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, CreateMockLoggingService());
 
-            Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, instances[0].ToolsVersion);
+                Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, instances[0].ToolsVersion);
 
-            // being cautious -- we can't expect the sub-toolset to be picked if it doesn't exist in the first place
-            if (instances[0].Toolset.SubToolsets.ContainsKey("11.0"))
-            {
-                Assert.Equal("11.0", instances[0].SubToolsetVersion);
-                Assert.Equal("11.0", instances[0].GetPropertyValue("VisualStudioVersion"));
+                // being cautious -- we can't expect the sub-toolset to be picked if it doesn't exist in the first place
+                if (instances[0].Toolset.SubToolsets.ContainsKey("11.0"))
+                {
+                    Assert.Equal("11.0", instances[0].SubToolsetVersion);
+                    Assert.Equal("11.0", instances[0].GetPropertyValue("VisualStudioVersion"));
+                }
             }
         }
 
@@ -519,13 +518,17 @@ public void SolutionBasedSubToolsetVersionOverriddenByEnvironment(bool useNewPar
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, CreateMockLoggingService());
+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, CreateMockLoggingService());
 
-            Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, instances[0].ToolsVersion);
-            Assert.Equal("ABC", instances[0].SubToolsetVersion);
-            Assert.Equal("ABC", instances[0].GetPropertyValue("VisualStudioVersion"));
+                Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, instances[0].ToolsVersion);
+                Assert.Equal("ABC", instances[0].SubToolsetVersion);
+                Assert.Equal("ABC", instances[0].GetPropertyValue("VisualStudioVersion"));
+            }
         }
 
         /// <summary>
@@ -780,7 +783,7 @@ public void SolutionWithMissingDependencies()
                     EndGlobal
                     """;
 
-                SolutionFile sp = SolutionFile_OldParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents);
+                SolutionFile sp = SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
                 ProjectInstance[] instances = SolutionProjectGenerator.Generate(sp, null, null, _buildEventContext, CreateMockLoggingService());
             });
         }
@@ -1341,39 +1344,43 @@ public void ToolsVersionOverrideShouldBeSpecifiedOnMSBuildTaskInvocations(bool u
                 EndGlobal
                 """;
 
-            // We're not passing in a /tv:xx switch, so the solution project will have tools version 2.0
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                // We're not passing in a /tv:xx switch, so the solution project will have tools version 2.0
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, ObjectModelHelpers.MSBuildDefaultToolsVersion, _buildEventContext, CreateMockLoggingService());
+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, ObjectModelHelpers.MSBuildDefaultToolsVersion, _buildEventContext, CreateMockLoggingService());
 
-            int i = 0;
-            foreach (ProjectInstance instance in instances)
-            {
-                if (i == 0)
+                int i = 0;
+                foreach (ProjectInstance instance in instances)
                 {
-                    continue;
-                }
+                    if (i == 0)
+                    {
+                        continue;
+                    }
 
-                foreach (ProjectTargetInstance target in instance.Targets.Values)
-                {
-                    foreach (ProjectTaskInstance childNode in target.Tasks)
+                    foreach (ProjectTargetInstance target in instance.Targets.Values)
                     {
-                        if (String.Equals(childNode.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                        foreach (ProjectTaskInstance childNode in target.Tasks)
                         {
-                            string projectsParameter = childNode.GetParameter("Projects");
-                            if (projectsParameter != "@(ProjectReference)")
+                            if (String.Equals(childNode.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
                             {
-                                // we found an MSBuild task invocation, now let's verify that it has the correct
-                                // ToolsVersion parameter set
-                                string toolsVersionParameter = childNode.GetParameter("ToolsVersion");
-
-                                Assert.Equal(toolsVersionParameter, instances[0].GetPropertyValue("ProjectToolsVersion"));
+                                string projectsParameter = childNode.GetParameter("Projects");
+                                if (projectsParameter != "@(ProjectReference)")
+                                {
+                                    // we found an MSBuild task invocation, now let's verify that it has the correct
+                                    // ToolsVersion parameter set
+                                    string toolsVersionParameter = childNode.GetParameter("ToolsVersion");
+
+                                    Assert.Equal(toolsVersionParameter, instances[0].GetPropertyValue("ProjectToolsVersion"));
+                                }
                             }
                         }
                     }
-                }
 
-                i++;
+                    i++;
+                }
             }
         }
 
@@ -1527,53 +1534,57 @@ public void TestDisambiguateProjectTargetName(bool useNewParser)
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
-
-            ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
-
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Build", StringComparison.OrdinalIgnoreCase)));
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Clean", StringComparison.OrdinalIgnoreCase)));
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Rebuild", StringComparison.OrdinalIgnoreCase)));
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Publish", StringComparison.OrdinalIgnoreCase)));
-
-            ProjectTargetInstance buildTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Build", StringComparison.OrdinalIgnoreCase)).First().Value;
-            ProjectTargetInstance cleanTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Clean", StringComparison.OrdinalIgnoreCase)).First().Value;
-            ProjectTargetInstance rebuildTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Rebuild", StringComparison.OrdinalIgnoreCase)).First().Value;
-            ProjectTargetInstance publishTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Publish", StringComparison.OrdinalIgnoreCase)).First().Value;
-
-            // Check that the appropriate target is being passed to the child projects
-            Assert.Null(buildTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Targets"));
-
-            Assert.Equal("Clean", cleanTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Targets"));
-
-            Assert.Equal("Rebuild", rebuildTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Targets"));
-
-            Assert.Equal("Publish", publishTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Targets"));
-
-            // Check that the child projects in question are the members of the "ProjectReference" item group
-            Assert.Equal("@(ProjectReference)", buildTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Projects"));
-
-            Assert.Equal("@(ProjectReference->Reverse())", cleanTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Projects"));
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            Assert.Equal("@(ProjectReference)", rebuildTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Projects"));
+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
 
-            Assert.Equal("@(ProjectReference)", publishTarget.Tasks.Where(
-                task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
-                .First().GetParameter("Projects"));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Build", StringComparison.OrdinalIgnoreCase)));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Clean", StringComparison.OrdinalIgnoreCase)));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Rebuild", StringComparison.OrdinalIgnoreCase)));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Publish", StringComparison.OrdinalIgnoreCase)));
+
+                ProjectTargetInstance buildTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Build", StringComparison.OrdinalIgnoreCase)).First().Value;
+                ProjectTargetInstance cleanTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Clean", StringComparison.OrdinalIgnoreCase)).First().Value;
+                ProjectTargetInstance rebuildTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Rebuild", StringComparison.OrdinalIgnoreCase)).First().Value;
+                ProjectTargetInstance publishTarget = instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Publish", StringComparison.OrdinalIgnoreCase)).First().Value;
+
+                // Check that the appropriate target is being passed to the child projects
+                Assert.Null(buildTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Targets"));
+
+                Assert.Equal("Clean", cleanTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Targets"));
+
+                Assert.Equal("Rebuild", rebuildTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Targets"));
+
+                Assert.Equal("Publish", publishTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Targets"));
+
+                // Check that the child projects in question are the members of the "ProjectReference" item group
+                Assert.Equal("@(ProjectReference)", buildTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Projects"));
+
+                Assert.Equal("@(ProjectReference->Reverse())", cleanTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Projects"));
+
+                Assert.Equal("@(ProjectReference)", rebuildTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Projects"));
+
+                Assert.Equal("@(ProjectReference)", publishTarget.Tasks.Where(
+                    task => String.Equals(task.Name, "MSBuild", StringComparison.OrdinalIgnoreCase))
+                    .First().GetParameter("Projects"));
+            }
 
             // We should have only the four standard targets plus the two validation targets (ValidateSolutionConfiguration and ValidateToolsVersions).
         }
@@ -1601,7 +1612,7 @@ public void TestConfigurationPlatformDefaults1()
                 EndGlobal
                 """;
 
-            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
 
             // These used to exist on the engine, but now need to be passed in explicitly
             IDictionary<string, string> globalProperties = new Dictionary<string, string>();
@@ -1639,7 +1650,7 @@ public void TestConfigurationPlatformDefaults2()
                 EndGlobal
                 """;
 
-            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
 
             ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
 
@@ -1850,7 +1861,7 @@ public void TestPredictSolutionConfigurationName()
                 EndGlobal
                 """;
 
-            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            SolutionFile solution = SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
 
             IDictionary<string, string> globalProperties = new Dictionary<string, string>();
 
@@ -1897,18 +1908,22 @@ public void SolutionGeneratorEscapingProjectFilePaths(bool useNewParser)
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            // Creating a ProjectRootElement shouldn't affect the ProjectCollection at all
-            Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
+                // Creating a ProjectRootElement shouldn't affect the ProjectCollection at all
+                Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
 
-            ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
 
-            Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
+                Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
 
-            // Ensure that the value has been correctly stored in the ProjectReference item list
-            // Since there is only one project in the solution, there will be only one project reference
-            Assert.Contains("%abtest", instances[0].GetItems("ProjectReference").ElementAt(0).EvaluatedInclude);
+                // Ensure that the value has been correctly stored in the ProjectReference item list
+                // Since there is only one project in the solution, there will be only one project reference
+                Assert.Contains("%abtest", instances[0].GetItems("ProjectReference").ElementAt(0).EvaluatedInclude);
+            }
         }
 
         /// <summary>
@@ -1954,12 +1969,16 @@ public void SolutionGeneratorCanEmitSolutions(bool useNewParser)
             {
                 Environment.SetEnvironmentVariable("MSBuildEmitSolution", "1");
 
-                solution = ParseSolutionHelper(solutionFileContents, useNewParser);
+                // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+                using (TestEnvironment testEnvironment = TestEnvironment.Create())
+                {
+                    solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-                // Creating a ProjectRootElement shouldn't affect the ProjectCollection at all
-                Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
+                    // Creating a ProjectRootElement shouldn't affect the ProjectCollection at all
+                    Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
 
-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
+                    ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService());
+                }
 
                 // Instantiating the
                 Assert.Empty(ProjectCollection.GlobalProjectCollection.LoadedProjects);
@@ -2039,12 +2058,16 @@ public void TestSkipInvalidConfigurationsCase(bool useNewParser)
                 globalProperties["Configuration"] = "Nonexistent";
                 globalProperties["SkipInvalidConfigurations"] = "true";
 
-                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService());
-                ProjectInstance msbuildProject = instances[0];
+                // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+                using (TestEnvironment testEnvironment = TestEnvironment.Create())
+                {
+                    SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
+                    ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService());
+                    ProjectInstance msbuildProject = instances[0];
 
-                // Build should complete successfully even with an invalid solution config if SkipInvalidConfigurations is true
-                Assert.True(msbuildProject.Build(new ILogger[] { logger }));
+                    // Build should complete successfully even with an invalid solution config if SkipInvalidConfigurations is true
+                    Assert.True(msbuildProject.Build(new ILogger[] { logger }));
+                }
 
                 // We should get the invalid solution configuration warning
                 Assert.Single(logger.Warnings);
@@ -2353,30 +2376,34 @@ public void CustomTargetNamesAreInInMetaproj(bool useNewParser)
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
-
-            ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "One" });
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "One", StringComparison.OrdinalIgnoreCase)));
+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "One" });
 
-            instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "Two", "Three", "Four" });
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "One", StringComparison.OrdinalIgnoreCase)));
 
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Two", StringComparison.OrdinalIgnoreCase)));
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Three", StringComparison.OrdinalIgnoreCase)));
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Four", StringComparison.OrdinalIgnoreCase)));
+                instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "Two", "Three", "Four" });
 
-            instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "Build" });
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Two", StringComparison.OrdinalIgnoreCase)));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Three", StringComparison.OrdinalIgnoreCase)));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Four", StringComparison.OrdinalIgnoreCase)));
 
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Build", StringComparison.OrdinalIgnoreCase)));
+                instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "Build" });
 
-            instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "Five", "Rebuild" });
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Build", StringComparison.OrdinalIgnoreCase)));
 
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Five", StringComparison.OrdinalIgnoreCase)));
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Rebuild", StringComparison.OrdinalIgnoreCase)));
+                instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "Five", "Rebuild" });
 
-            instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "My_Project:Six" });
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Five", StringComparison.OrdinalIgnoreCase)));
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Rebuild", StringComparison.OrdinalIgnoreCase)));
 
-            Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Six", StringComparison.OrdinalIgnoreCase)));
+                instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), new List<string> { "My_Project:Six" });
+        
+                Assert.Single(instances[0].Targets.Where(target => String.Equals(target.Value.Name, "Six", StringComparison.OrdinalIgnoreCase)));
+            }
         }
 
         /// <summary>
@@ -2408,21 +2435,25 @@ public void DisambiguatedTargetNamesAreInMetaproj(bool useNewParser)
                     EndGlobal
                     """;
 
-                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
+                // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+                using (TestEnvironment testEnvironment = TestEnvironment.Create())
+                {
+                    SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), null);
+                    ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, BuildEventContext.Invalid, CreateMockLoggingService(), null);
 
-                foreach (string targetName in ProjectInSolution.projectNamesToDisambiguate)
-                {
-                    // The entry point still exists normally.
-                    Assert.True(instances[0].Targets.ContainsKey(targetName));
-
-                    // The traversal target should be disambiguated with a "Solution:" prefix.
-                    // Note: The default targets are used instead of "Build".
-                    string traversalTargetName = targetName.Equals("Build", StringComparison.OrdinalIgnoreCase)
-                        ? $"Solution:{projectName}"
-                        : $"Solution:{projectName}:{targetName}";
-                    Assert.True(instances[0].Targets.ContainsKey(traversalTargetName));
+                    foreach (string targetName in ProjectInSolution.projectNamesToDisambiguate)
+                    {
+                        // The entry point still exists normally.
+                        Assert.True(instances[0].Targets.ContainsKey(targetName));
+
+                        // The traversal target should be disambiguated with a "Solution:" prefix.
+                        // Note: The default targets are used instead of "Build".
+                        string traversalTargetName = targetName.Equals("Build", StringComparison.OrdinalIgnoreCase)
+                            ? $"Solution:{projectName}"
+                            : $"Solution:{projectName}:{targetName}";
+                        Assert.True(instances[0].Targets.ContainsKey(traversalTargetName));
+                    }
                 }
             }
         }
@@ -2457,51 +2488,55 @@ public void IllegalUserTargetNamesDoNotThrow(bool forceCaseDifference, bool useN
                 EndGlobal
                 """;
 
-            SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser);
-
-            ProjectInstance[] instances;
+            // SolutionProjectGenerator.Generate calls SolutionFile.UseNewParser, so we need TestEnvironment with the environment variable available.
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                SolutionFile solution = ParseSolutionHelper(solutionFileContents, useNewParser, testEnvironment);
 
-            // Avoid any unexpected targets getting pulled in
-            var globalProperties = new Dictionary<string, string> { { "ImportByWildcardBeforeSolution", "false" } };
+                ProjectInstance[] instances;
 
-            foreach (string builtInTargetName in new[]
-            {
-                null,
-                "Build",
-                "Rebuild",
-                "Clean",
-                "Publish",
-                "ClassLibrary1",
-                "ClassLibrary1:Clean",
-                "ClassLibrary1:Rebuild",
-                "GetSolutionConfigurationContents",
-                "ValidateProjects",
-            })
-            {
-                string[] targetNames;
+                // Avoid any unexpected targets getting pulled in
+                var globalProperties = new Dictionary<string, string> { { "ImportByWildcardBeforeSolution", "false" } };
 
-                if (builtInTargetName == null)
+                foreach (string builtInTargetName in new[]
                 {
-                    targetNames = null;
-                }
-                else
+                    null,
+                    "Build",
+                    "Rebuild",
+                    "Clean",
+                    "Publish",
+                    "ClassLibrary1",
+                    "ClassLibrary1:Clean",
+                    "ClassLibrary1:Rebuild",
+                    "GetSolutionConfigurationContents",
+                    "ValidateProjects",
+                })
                 {
-                    string targetName = forceCaseDifference ? builtInTargetName.ToUpperInvariant() : builtInTargetName;
-                    targetNames = new[] { targetName };
-                }
+                    string[] targetNames;
 
-                instances = SolutionProjectGenerator.Generate(solution, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService(), targetNames);
+                    if (builtInTargetName == null)
+                    {
+                        targetNames = null;
+                    }
+                    else
+                    {
+                        string targetName = forceCaseDifference ? builtInTargetName.ToUpperInvariant() : builtInTargetName;
+                        targetNames = new[] { targetName };
+                    }
 
-                Assert.Single(instances);
+                    instances = SolutionProjectGenerator.Generate(solution, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService(), targetNames);
 
-                Assert.Equal(12, instances[0].TargetsCount);
-            }
+                    Assert.Single(instances);
 
-            instances = SolutionProjectGenerator.Generate(solution, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService(), new[] { "Foo" });
+                    Assert.Equal(12, instances[0].TargetsCount);
+                }
 
-            Assert.Single(instances);
+                instances = SolutionProjectGenerator.Generate(solution, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService(), new[] { "Foo" });
 
-            Assert.Equal(14, instances[0].TargetsCount);
+                Assert.Single(instances);
+
+                Assert.Equal(14, instances[0].TargetsCount);
+            }
         }
 
         /// <summary>
@@ -2878,10 +2913,13 @@ private void AssertProjectItemNameCount(ProjectInstance msbuildProject, string i
             Assert.Equal(count, itemGroup.Count());
         }
 
-        private SolutionFile ParseSolutionHelper(string solutionFileContents, bool useNewParser)
+        private SolutionFile ParseSolutionHelper(string solutionFileContents, bool useNewParser, TestEnvironment testEnvironment = null)
         {
-            return useNewParser ? SolutionFile_NewParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents) :
-                SolutionFile_OldParser_Tests.ParseSolutionHelper(_testEnvironment, solutionFileContents);
+            return useNewParser ? 
+                testEnvironment is null ?
+                    SolutionFile_NewParser_Tests.ParseSolutionHelper(solutionFileContents) :
+                    SolutionFile_NewParser_Tests.ParseSolutionHelper(testEnvironment, solutionFileContents) :
+                SolutionFile_OldParser_Tests.ParseSolutionHelper(solutionFileContents);
         }
 
         #endregion // Helper Functions
