diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index d9ca747fc60..9dfb5ea3d3a 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
@@ -219,15 +220,26 @@ private void RunRegisteredActions<T>(
             // Here we might want to check the configPerRule[0].EvaluationsCheckScope - if the input data supports that
             // The decision and implementation depends on the outcome of the investigation tracked in:
             // https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57851137
-
-            BuildCheckDataContext<T> context = new BuildCheckDataContext<T>(
-                checkCallback.Item1,
-                checkContext,
-                configPerRule,
-                resultHandler,
-                checkData);
-
-            checkCallback.Item2(context);
+            try
+            {
+                BuildCheckDataContext<T> context = new BuildCheckDataContext<T>(
+                    checkCallback.Item1,
+                    checkContext,
+                    configPerRule,
+                    resultHandler,
+                    checkData);
+
+                checkCallback.Item2(context);
+            }
+            catch (Exception e)
+            {
+                checkContext.DispatchAsWarningFromText(
+                    null,
+                    null,
+                    null,
+                    new BuildEventFileInfo(projectFullPath),
+                    $"The check '{checkCallback.Item1.Check.FriendlyName}' threw an exception while executing a registered action with message: {e.Message}");
+            }
         }
 
         _removeThrottledChecks(checkContext);
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 58891677b6a..6013227a90f 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -514,12 +514,10 @@ public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleI
         }
     }
 
-    [Theory(Skip = "https://github.com/dotnet/msbuild/issues/10702")]
+    [Theory]
     [InlineData("X01236", "Something went wrong initializing")]
-    // These tests are for failure one different points, will be addressed in a different PR
-    // https://github.com/dotnet/msbuild/issues/10522
-    // [InlineData("X01237", "message")]
-    // [InlineData("X01238", "message")]
+    [InlineData("X01237", "something went wrong when executing registered action")]
+    [InlineData("X01238", "something went wrong when registering actions")]
     public void CustomChecksFailGracefully(string ruleId, string expectedMessage)
     {
         using (var env = TestEnvironment.Create())
diff --git a/src/BuildCheck.UnitTests/TestAssets/ErrorCustomCheck/ErrorOnRegisteredAction.cs b/src/BuildCheck.UnitTests/TestAssets/ErrorCustomCheck/ErrorOnRegisteredAction.cs
index 1593dc9b997..42e2217cb87 100644
--- a/src/BuildCheck.UnitTests/TestAssets/ErrorCustomCheck/ErrorOnRegisteredAction.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/ErrorCustomCheck/ErrorOnRegisteredAction.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck;
 
@@ -33,7 +34,7 @@ public override void RegisterActions(IBuildCheckRegistrationContext registration
 
         private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)
         {
-            throw new Exception("something went wrong");
+            throw new Exception("something went wrong when executing registered action");
         }
     }
 }
