diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 1329988f9cb..64d00b85588 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -73,6 +73,9 @@ public sealed class BinaryLogger : ILogger
         private string _initialTargetOutputLogging;
         private bool _initialLogImports;
         private string _initialIsBinaryLoggerEnabled;
+        private BinaryLoggerParameters _binaryLoggerParameters;
+        private string _parameters;
+        private string _filePath;
 
         /// <summary>
         /// Describes whether to collect the project files (including imported project files) used during the build.
@@ -95,15 +98,29 @@ public enum ProjectImportsCollectionMode
             /// </summary>
             ZipFile
         }
-
+            
         /// <summary>
         /// Gets or sets whether to capture and embed project and target source files used during the build.
         /// </summary>
         public ProjectImportsCollectionMode CollectProjectImports { get; set; } = ProjectImportsCollectionMode.Embed;
 
-        private string FilePath { get; set; }
+        public string FilePath
+        {
+            get { return _filePath; }
+            private set { _filePath = value; }
+        }
 
-        public BinaryLoggerParameters BinaryLoggerParameters { private get; set; }
+        public BinaryLoggerParameters BinaryLoggerParameters {
+            get
+            {
+                return _binaryLoggerParameters;
+            }
+            set
+            {
+                _binaryLoggerParameters = value;
+                _parameters = _binaryLoggerParameters.GetStringifiedParameters();
+            }
+        }
 
         /// <summary>
         /// Boolean flag identifies if the log file was provided from parameters
@@ -117,7 +134,17 @@ public enum ProjectImportsCollectionMode
         /// </remarks>
         public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Diagnostic;
 
-        public string Parameters { get; set; }
+        public string Parameters {
+            get
+            {
+                return _parameters;
+            }
+            set
+            {
+                _parameters = value;
+                _binaryLoggerParameters = BinaryLoggerParameters.GenerateInstanceFromParameters(_parameters);
+            }
+        }
 
         /// <summary>
         /// Initializes the logger by subscribing to events of the specified event source.
diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
index b7505945b76..842cfecfcb9 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -39,16 +39,13 @@ public BinaryLoggerParameters(string binaryLoggerArguments)
         /// <returns></returns>
         public string GetStringifiedParameters()
         {
-            // tmp
-            Dictionary<string, string> parameters = new Dictionary<string, string>()
-            {
-                { "initProjectFile", InitProjectFile },
-                { "isBinaryLoggerSet", IsBinaryLoggerSet.ToString() },
-                { "blArguments", binaryLoggerArguments },
-                { "blParameters", binaryLoggerParameters }
-            };
+            var parameters = new StringBuilder();
+            parameters.AppendLine($"initProjectFile={InitProjectFile}");
+            parameters.AppendLine($"isBinaryLoggerSet={IsBinaryLoggerSet}");
+            parameters.AppendLine($"blArguments={binaryLoggerArguments}");
+            parameters.AppendLine($"blParameters={binaryLoggerParameters}");
 
-            return string.Join(Environment.NewLine, parameters);
+            return parameters.ToString();
         }
 
 
@@ -57,14 +54,24 @@ public string GetStringifiedParameters()
         /// </summary>
         /// <param name="parameters"></param>
         /// <returns></returns>
-        public BinaryLoggerParameters? GenerateInstanceFromParameters(string parameters)
+        public static BinaryLoggerParameters? GenerateInstanceFromParameters(string parameters)
         {
             if (string.IsNullOrEmpty(parameters))
             {
                 return null;
             }
             // TODO: parsing logic
-            return new BinaryLoggerParameters(string.Empty, string.Empty);
+            var data = parameters.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
+            var initProjectFile = data[0].Replace("initProjectFile=","");
+            var isBinaryLoggerSet = bool.Parse(data[1].Replace("isBinaryLoggerSet=", ""));
+            var blArguments = data[2].Replace("blArguments=", "");
+            var blParameters = data[3].Replace("blParameters=", "");
+
+            return new BinaryLoggerParameters(blArguments, blParameters)
+            {
+                InitProjectFile = initProjectFile,
+                IsBinaryLoggerSet = isBinaryLoggerSet
+            };
         }
     }
 }
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 5ebfdbf0357..9e83e5ae65c 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -224,7 +224,7 @@ private bool BuildProject(
             {
                 if (binaryLogger != null)
                 {
-                    string binaryLoggerFilePath = binaryLogger.Parameters;
+                    string binaryLoggerFilePath = binaryLogger.FilePath;
 
                     var actualLoggerPairs = GetLoggers().Where(l => l.logger is not BinaryLogger).ToArray();
                     expectedLoggerPairs = expectedLoggerPairs.Where(l => l.logger is not BinaryLogger).ToArray();
