diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs
index 9fa2029535a..ae1b62e7c66 100644
--- a/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/PropertyReadInfo.cs
@@ -21,4 +21,13 @@ internal readonly record struct PropertyReadInfo(
     int EndIndex,
     IMSBuildElementLocation ElementLocation,
     bool IsUninitialized,
-    PropertyReadContext PropertyReadContext);
+    PropertyReadContext PropertyReadContext)
+{
+    internal PropertyReadInfo(
+        string PropertyName,
+        IMSBuildElementLocation ElementLocation,
+        bool IsUninitialized,
+        PropertyReadContext PropertyReadContext)
+        : this(PropertyName, 0, PropertyName.Length - 1, ElementLocation, IsUninitialized, PropertyReadContext)
+    { }
+}
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 001761c4707..a7570f13814 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -19,6 +19,7 @@
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Evaluation.Context;
+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Instance;
@@ -1894,6 +1895,11 @@ public string GetPropertyValue(string name)
             {
                 unescapedValue = String.Empty;
             }
+            else
+            {
+                _loggingContext?.ProcessPropertyRead(
+                    new PropertyReadInfo(name, ElementLocation.EmptyLocation, false, PropertyReadContext.Other));
+            }
 
             return unescapedValue;
         }
@@ -1913,6 +1919,8 @@ public ProjectPropertyInstance SetProperty(string name, string evaluatedValue)
             ProjectPropertyInstance property = ProjectPropertyInstance.Create(name, evaluatedValue, false /* may not be reserved */, _isImmutable);
             _properties.Set(property);
 
+            _loggingContext?.ProcessPropertyWrite(new PropertyWriteInfo(name, false, ElementLocation.EmptyLocation));
+
             return property;
         }
 
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.csproj b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.csproj
index 4e5bb2af0e3..37b8b431f1d 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.csproj
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.csproj
@@ -9,6 +9,7 @@
 
     <PropertyGroup Condition="'$(MyProp12)' == ''">
         <MyProp13>$(MyProp11)</MyProp13>
+        <MSBuildTreatWarningsAsErrors>false</MSBuildTreatWarningsAsErrors>
     </PropertyGroup>
 
     <!--
