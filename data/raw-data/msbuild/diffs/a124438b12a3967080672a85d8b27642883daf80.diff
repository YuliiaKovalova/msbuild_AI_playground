diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 3f9aafe3380..2756ccb9c37 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -49,9 +49,6 @@ public List<ReferencedItem> ReferencedItems
                 }
             }
 
-            // Dictionary of <metadata to match on, values of those metadata>
-            private Dictionary<IEnumerable<string>, HashSet<IEnumerable<string>>> ReferencedItemsByMetadata { get; set; }
-
             protected override IMSBuildGlob MsBuildGlob
             {
                 get
@@ -90,20 +87,8 @@ public override bool IsMatch(string itemToMatch)
 
             public override bool IsMatchOnMetadata(IItem item, IEnumerable<string> metadata, MatchOnMetadataOptions options)
             {
-                IEnumerable<string> metadataValues = metadata.Select(m => item.GetMetadataValue(m));
-                if (ReferencedItemsByMetadata == null)
-                {
-                    ReferencedItemsByMetadata = new Dictionary<IEnumerable<string>, HashSet<IEnumerable<string>>>();
-                }
-                if (!ReferencedItemsByMetadata.TryGetValue(metadata, out HashSet<IEnumerable<string>> metadataMatcher))
-                {
-                    ReferencedItemsByMetadata.Add(metadata, new HashSet<IEnumerable<string>>());
-                    foreach (ReferencedItem i in ReferencedItems)
-                    {
-                        ReferencedItemsByMetadata[metadata].Add(metadata.Select(m => i.Item.GetMetadataValue(m)));
-                    }
-                }
-                return metadataMatcher.Contains(metadataValues);
+                return ReferencedItems.Any(referencedItem =>
+                        metadata.All(m => !item.GetMetadataValue(m).Equals(string.Empty) && MetadataComparer(options, item.GetMetadataValue(m), referencedItem.Item.GetMetadataValue(m))));
             }
 
             private bool MetadataComparer(MatchOnMetadataOptions options, string itemMetadata, string referencedItemMetadata)
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index bcfe47d6c84..d7a8b19e59e 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
+using System;
+using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
 
@@ -14,6 +16,7 @@ class RemoveOperation : LazyItemOperation
         {
             readonly ImmutableList<string> _matchOnMetadata;
             readonly MatchOnMetadataOptions _matchOnMetadataOptions;
+            private MetadataSet metadataSet;
 
             public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
                 : base(builder, lazyEvaluator)
@@ -55,13 +58,30 @@ protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder
                 var items = ImmutableHashSet.CreateBuilder<I>();
                 foreach (ItemData item in listBuilder)
                 {
-                    if (_matchOnMetadata.IsEmpty ? _itemSpec.MatchesItem(item.Item) : _itemSpec.MatchesItemOnMetadata(item.Item, _matchOnMetadata, _matchOnMetadataOptions))
+                    if (_matchOnMetadata.IsEmpty ? _itemSpec.MatchesItem(item.Item) : MatchesItemOnMetadata(item.Item))
                         items.Add(item.Item);
                 }
 
                 return items.ToImmutableList();
             }
 
+            private bool MatchesItemOnMetadata(I item)
+            {
+                if (metadataSet == null)
+                {
+                    metadataSet = new MetadataSet();
+                    foreach (ItemSpec<P, I>.ItemExpressionFragment frag in _itemSpec.Fragments)
+                    {
+                        foreach (ItemSpec<P, I>.ReferencedItem referencedItem in frag.ReferencedItems)
+                        {
+                            metadataSet.Add(_matchOnMetadata.Select(m => (referencedItem.Item.GetMetadata(m) as ProjectMetadata).EvaluatedValue));
+                        }
+                    }
+                }
+
+                return metadataSet.Contains(_matchOnMetadata.Select(m => (item.GetMetadata(m) as ProjectMetadata).EvaluatedValue));
+            }
+
             protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
             {
                 if (!_conditionResult)
@@ -101,6 +121,57 @@ public RemoveOperationBuilder(ProjectItemElement itemElement, bool conditionResu
         }
     }
 
+    internal class MetadataSet
+    {
+        private Dictionary<string, MetadataSet> children;
+
+        internal MetadataSet()
+        {
+            children = new Dictionary<string, MetadataSet>();
+        }
+
+        // Relies on IEnumerable returning the metadata in a reasonable order. Reasonable?
+        internal void Add(IEnumerable<string> metadata)
+        {
+            MetadataSet current = this;
+            foreach (string s in metadata)
+            {
+                if (current.children.TryGetValue(s, out MetadataSet child))
+                {
+                    current = child;
+                }
+                else
+                {
+                    current.children.Add(s, new MetadataSet());
+                    current = current.children[s];
+                }
+            }
+        }
+
+        internal bool Contains(IEnumerable<string> metadata)
+        {
+            List<string> metadataList = metadata.ToList();
+            return this.Contains(metadataList, 0);
+        }
+
+        private bool Contains(List<string> metadata, int index)
+        {
+            if (index == metadata.Count)
+            {
+                return true;
+            }
+            else if (String.IsNullOrEmpty(metadata[index]))
+            {
+                return children.Any(kvp => !String.IsNullOrEmpty(kvp.Key) && kvp.Value.Contains(metadata, index + 1));
+            }
+            else
+            {
+                return (children.TryGetValue(metadata[index], out MetadataSet child) && child.Contains(metadata, index + 1)) ||
+                    (children.TryGetValue(string.Empty, out MetadataSet emptyChild) && emptyChild.Contains(metadata, index + 1));
+            }
+        }
+    }
+
     public enum MatchOnMetadataOptions
     {
         CaseSensitive,
