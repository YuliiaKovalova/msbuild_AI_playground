diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index c8fe5cbfd52..a6dacd119e7 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -612,6 +612,82 @@ public void ProjectExemptFromIsolationOnlyIncludesNewlyBuiltTargetsInOutputCache
             }
         }
 
+        [Fact]
+        public void SelfBuildsAreExemptFromIsolationConstraints()
+        {
+            var projectContents = @"
+<Project>
+    <Target Name=`Build`>
+        <!-- request satisfied from cache -->
+        <MSBuild Projects=`$(MSBuildThisFileFullPath)` Targets=`SelfBuild1` Properties='TargetFramework=foo' />
+
+        <!-- request not satisfied from cache -->
+        <MSBuild Projects=`$(MSBuildThisFileFullPath)` Targets=`SelfBuild2` Properties='TargetFramework=foo' />
+    </Target>
+
+    <Target Name=`SelfBuild1` />
+    <Target Name=`SelfBuild2` />
+</Project>
+";
+            var projectFile = _env.CreateFile("build.proj", projectContents.Cleanup()).Path;
+            var outputCacheFileForRoot = _env.CreateFile().Path;
+            var outputCacheFileForReference = _env.CreateFile().Path;
+
+            using (var buildManagerSession = new BuildManagerSession(
+                _env,
+                new BuildParameters
+                {
+                    OutputResultsCacheFile = outputCacheFileForReference
+                }))
+            {
+                buildManagerSession.BuildProjectFile(projectFile, new[] {"SelfBuild1"}, new Dictionary<string, string>
+                {
+                    {"TargetFramework", "foo"}
+                }).OverallResult.ShouldBe(BuildResultCode.Success);
+            }
+
+            using (var buildManagerSession = new BuildManagerSession(
+                _env,
+                new BuildParameters
+                {
+                    InputResultsCacheFiles = new []{outputCacheFileForReference},
+                    OutputResultsCacheFile = outputCacheFileForRoot
+                }))
+            {
+                buildManagerSession.BuildProjectFile(projectFile, new[] {"Build"}).OverallResult.ShouldBe(BuildResultCode.Success);
+            }
+
+            var referenceCaches = CacheSerialization.DeserializeCaches(outputCacheFileForReference);
+
+            referenceCaches.exception.ShouldBeNull();
+
+            referenceCaches.ConfigCache.ShouldHaveSingleItem();
+            referenceCaches.ConfigCache.First().ProjectFullPath.ShouldBe(projectFile);
+            referenceCaches.ConfigCache.First().GlobalProperties.ToDictionary().Keys.ShouldBe(new[] {"TargetFramework"});
+            referenceCaches.ConfigCache.First().SkippedFromStaticGraphIsolationConstraints.ShouldBeFalse();
+
+            referenceCaches.ResultsCache.ShouldHaveSingleItem();
+            referenceCaches.ResultsCache.First().ResultsByTarget.Keys.ShouldBe(new[] { "SelfBuild1" });
+
+            var rootCaches = CacheSerialization.DeserializeCaches(outputCacheFileForRoot);
+
+            rootCaches.ConfigCache.Count().ShouldBe(2);
+
+            var rootConfig = rootCaches.ConfigCache.FirstOrDefault(c => !c.GlobalProperties.Contains("TargetFramework"));
+            var selfBuildConfig = rootCaches.ConfigCache.FirstOrDefault(c => c.GlobalProperties.Contains("TargetFramework"));
+
+            rootConfig.ShouldNotBeNull();
+            rootConfig.SkippedFromStaticGraphIsolationConstraints.ShouldBeFalse();
+
+            selfBuildConfig.ShouldNotBeNull();
+            // Self builds that are not resolved from the cache are exempt from isolation constraints.
+            selfBuildConfig.SkippedFromStaticGraphIsolationConstraints.ShouldBeTrue();
+
+            rootCaches.ResultsCache.Count().ShouldBe(2);
+            rootCaches.ResultsCache.First(r => r.ConfigurationId == rootConfig.ConfigurationId).ResultsByTarget.Keys.ShouldBe(new []{"Build"});
+            rootCaches.ResultsCache.First(r => r.ConfigurationId == selfBuildConfig.ConfigurationId).ResultsByTarget.Keys.ShouldBe(new []{"SelfBuild2"});
+        }
+
         private static int ProjectNumber(string path) => int.Parse(Path.GetFileNameWithoutExtension(path));
         private static int ProjectNumber(ProjectGraphNode node) => int.Parse(Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath));
 
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index fbe6ab70363..8938db227ce 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1586,10 +1586,7 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
                 {
                     emitNonErrorLogs(_componentHost.LoggingService);
 
-                    if (request.SkipStaticGraphIsolationConstraints)
-                    {
-                        _configCache[request.ConfigurationId].SkippedFromStaticGraphIsolationConstraints = true;
-                    }
+                    MarkConfigAsSkippedFromGraphIsolationConstraints(request);
 
                     // Ensure there is no affinity mismatch between this request and a previous request of the same configuration.
                     NodeAffinity requestAffinity = GetNodeAffinityForRequest(request);
@@ -1673,6 +1670,30 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
             }
         }
 
+        private void MarkConfigAsSkippedFromGraphIsolationConstraints(BuildRequest request)
+        {
+            if (!_componentHost.BuildParameters.IsolateProjects || request.IsRootRequest)
+            {
+                return;
+            }
+
+            if (request.SkipStaticGraphIsolationConstraints
+                ||
+                // Self builds are exempt from isolation constraints.
+                IsSelfBuild(request)
+                )
+            {
+                _configCache[request.ConfigurationId].SkippedFromStaticGraphIsolationConstraints = true;
+            }
+
+            bool IsSelfBuild(BuildRequest buildRequest)
+            {
+                return _configCache[buildRequest.ConfigurationId].ProjectFullPath.Equals(
+                    _configCache[GetParentRequest(buildRequest).ConfigurationId].ProjectFullPath,
+                    FileUtilities.PathComparison);
+            }
+        }
+
         /// <summary>
         /// Resumes executing a request which was in the Ready state for the specified node, if any.
         /// </summary>
@@ -1807,7 +1828,7 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
                 if (isIsolatedBuild && request.SkipStaticGraphIsolationConstraints)
                 {
                     // retrieving the configs is not quite free, so avoid computing them eagerly
-                    var configs = GetConfigurations();
+                    var configs = GetConfigurations(request);
 
                     emitNonErrorLogs = ls => ls.LogComment(
                             NewBuildEventContext(),
@@ -1820,10 +1841,10 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
                 return true;
             }
 
-            var (requestConfig, parentConfig) = GetConfigurations();
+            var (requestConfig, parentConfig) = GetConfigurations(request);
 
             // allow self references (project calling the msbuild task on itself, potentially with different global properties)
-            if (parentConfig.ProjectFullPath.Equals(requestConfig.ProjectFullPath, StringComparison.OrdinalIgnoreCase))
+            if (parentConfig.ProjectFullPath.Equals(requestConfig.ProjectFullPath, FileUtilities.PathComparison))
             {
                 return true;
             }
@@ -1859,20 +1880,12 @@ BuildEventContext NewBuildEventContext()
                     BuildEventContext.InvalidTaskId);
             }
 
-            (BuildRequestConfiguration requestConfig, BuildRequestConfiguration parentConfig) GetConfigurations()
+            (BuildRequestConfiguration requestConfig, BuildRequestConfiguration parentConfig) GetConfigurations(BuildRequest request)
             {
                 var buildRequestConfiguration = configCache[request.ConfigurationId];
 
-                // Need the parent request. It might be blocked or executing; check both.
-                var parentRequest = _schedulingData.BlockedRequests.FirstOrDefault(r => r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId)
-                                    ?? _schedulingData.ExecutingRequests.FirstOrDefault(r => r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId);
+                var parentConfiguration = configCache[GetParentRequest(request).ConfigurationId];
 
-                ErrorUtilities.VerifyThrowInternalNull(parentRequest, nameof(parentRequest));
-                ErrorUtilities.VerifyThrow(
-                    configCache.HasConfiguration(parentRequest.BuildRequest.ConfigurationId),
-                    "All non root requests should have a parent with a loaded configuration");
-
-                var parentConfiguration = configCache[parentRequest.BuildRequest.ConfigurationId];
                 return (buildRequestConfiguration, parentConfiguration);
             }
 
@@ -1882,6 +1895,28 @@ string ConcatenateGlobalProperties(BuildRequestConfiguration configuration)
             }
         }
 
+        private BuildRequest GetParentRequest(BuildRequest request)
+        {
+            if (request.IsRootRequest)
+            {
+                return null;
+            }
+            else
+            {
+                var schedulerRequest = _schedulingData.BlockedRequests.FirstOrDefault(r =>
+                                         r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId)
+                                     ?? _schedulingData.ExecutingRequests.FirstOrDefault(r =>
+                                         r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId);
+
+                ErrorUtilities.VerifyThrowInternalNull(schedulerRequest, nameof(schedulerRequest));
+                ErrorUtilities.VerifyThrow(
+                    _configCache.HasConfiguration(schedulerRequest.BuildRequest.ConfigurationId),
+                    "All non root requests should have a parent with a loaded configuration");
+
+                return schedulerRequest.BuildRequest;
+            }
+        }
+
         /// <summary>
         /// Gets the appropriate ScheduleResponse for a result, either to complete a submission or to report to a node.
         /// </summary>
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 4cba4740f4d..a42fce33e39 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1915,11 +1915,11 @@ public BuildManagerSession(
                 _buildManager.BeginBuild(actualBuildParameters, deferredMessages);
             }
 
-            public BuildResult BuildProjectFile(string projectFile, string[] entryTargets = null)
+            public BuildResult BuildProjectFile(string projectFile, string[] entryTargets = null, Dictionary<string, string> globalProperties = null)
             {
                 var buildResult = _buildManager.BuildRequest(
                     new BuildRequestData(projectFile,
-                        new Dictionary<string, string>(),
+                        globalProperties ?? new Dictionary<string, string>(),
                         MSBuildConstants.CurrentToolsVersion,
                         entryTargets ?? new string[0],
                         null));
