diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 49b35a40b6f..28f7f2326c1 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.IO;
 using System.IO.Compression;
+using System.Linq;
 using System.Reflection;
 using System.Runtime.CompilerServices;
 using System.Text;
@@ -623,11 +624,6 @@ private BuildEventArgs ReadBuildSubmissionStartedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
 
-            var entryProjectsFullPath = ReadPropertyList();
-            var targetNames = ReadStringDictionary();
-            var flags = (BuildRequestDataFlags)ReadInt32();
-            var submissionId = ReadInt32();
-
             IDictionary<string, string>? globalProperties = null;
             // See ReadProjectEvaluationFinishedEventArgs for details on why we always store global properties in newer version.
             if (_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion ||
@@ -635,6 +631,12 @@ private BuildEventArgs ReadBuildSubmissionStartedEventArgs()
             {
                 globalProperties = ReadStringDictionary();
             }
+            globalProperties = globalProperties ?? new Dictionary<string, string>();
+
+            var entryProjectsFullPath = ReadStringIEnumerable() ?? Enumerable.Empty<string>();
+            var targetNames = ReadStringIEnumerable() ?? Enumerable.Empty<string>();
+            var flags = (BuildRequestDataFlags)ReadInt32();
+            var submissionId = ReadInt32();
 
             var e = new BuildSubmissionStartedEventArgs(
                 globalProperties,
@@ -1579,6 +1581,25 @@ private ITaskItem ReadTaskItem()
             return list;
         }
 
+        private IEnumerable<string>? ReadStringIEnumerable()
+        {
+            int count = ReadInt32();
+            if (count == 0)
+            {
+                return null;
+            }
+
+            var list = new string[count];
+
+            for (int i = 0; i < count; i++)
+            {
+                string item = ReadString();
+                list[i] = item;
+            }
+
+            return list;
+        }
+
         private string ReadString()
         {
             string text = _binaryReader.ReadString();
diff --git a/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs b/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
index e01ab9cb8b5..0c1814a3e4a 100644
--- a/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
@@ -3,13 +3,63 @@
 
 using System;
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using Shouldly;
+using Xunit;
 
 namespace Microsoft.Build.Framework.UnitTests
 {
-    internal class BuildSubmissionStartedEventAgs_Tests
+    public class BuildSubmissionStartedEventAgs_Tests
     {
+        [Fact]
+        public void SerializationDeserializationTest()
+        {
+            var globalVariables = new Dictionary<string, string?>
+            {
+                {"Variable1", "Value1" },
+                {"Variable2", "" },
+                {"Variable3", null},
+            };
+            var entryPointProjects = new List<string>()
+            {
+                "project1",
+                "project2",
+                "",
+            };
+            var targetNames = new List<string>()
+            {
+                "target1",
+                "target2",
+                "",
+            };
+            var flag = Execution.BuildRequestDataFlags.FailOnUnresolvedSdk;
+            var submissionId = 1234;
+
+            BuildSubmissionStartedEventArgs args = new(
+                globalVariables,
+                entryPointProjects,
+                targetNames,
+                flag,
+                submissionId);
+
+            using MemoryStream stream = new MemoryStream();
+            using BinaryWriter bw = new BinaryWriter(stream);
+            args.WriteToStream(bw);
+
+            stream.Position = 0;
+            using BinaryReader br = new BinaryReader(stream);
+            BuildSubmissionStartedEventArgs argDeserialized = new();
+            int packetVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
+
+            argDeserialized.CreateFromStream(br, packetVersion);
+            argDeserialized.GlobalProperties.ShouldBe(globalVariables);
+            argDeserialized.EntryProjectsFullPath.ShouldBe(entryPointProjects);
+            argDeserialized.TargetNames.ShouldBe(targetNames);
+            argDeserialized.Flags.ShouldBe(flag);
+            argDeserialized.SubmissionId.ShouldBe(submissionId);
+        }
     }
-}
+} 
diff --git a/src/Framework/BuildSubmissionStartedEventArgs.cs b/src/Framework/BuildSubmissionStartedEventArgs.cs
index 4737d687a07..d397697a740 100644
--- a/src/Framework/BuildSubmissionStartedEventArgs.cs
+++ b/src/Framework/BuildSubmissionStartedEventArgs.cs
@@ -13,13 +13,24 @@ namespace Microsoft.Build.Framework
 {
     public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs
     {
+        /// <summary>
+        /// Constructor with default values.
+        /// </summary>
+        public BuildSubmissionStartedEventArgs()
+        {
+            GlobalProperties = new Dictionary<string, string>();
+            EntryProjectsFullPath = Enumerable.Empty<string>();
+            TargetNames = Enumerable.Empty<string>();
+            Flags = BuildRequestDataFlags.None;
+            SubmissionId = 0;
+        }
 
         public BuildSubmissionStartedEventArgs(
-            IEnumerable? globalProperties,
-            IEnumerable<string>? entryProjectsFullPath,
-            IEnumerable<string>? targetNames,
-            BuildRequestDataFlags? flags,
-            int? submissionId)
+            IDictionary<string, string> globalProperties,
+            IEnumerable<string> entryProjectsFullPath,
+            IEnumerable<string> targetNames,
+            BuildRequestDataFlags flags,
+            int submissionId)
         {
             GlobalProperties = globalProperties;
             EntryProjectsFullPath = entryProjectsFullPath;
@@ -28,26 +39,22 @@ public BuildSubmissionStartedEventArgs(
             SubmissionId = submissionId;
         }
 
-        // Dictionary<string, string?>
-        public IEnumerable? GlobalProperties { get; set; }
+        public IDictionary<string, string> GlobalProperties { get; set; }
 
-        // IEnumerable<string>
-        public IEnumerable<string>? EntryProjectsFullPath { get; set; }
+        public IEnumerable<string> EntryProjectsFullPath { get; set; }
 
-        // ICollection<string>
-        public IEnumerable<string>? TargetNames { get; set; }
+        public IEnumerable<string> TargetNames { get; set; }
 
-        public BuildRequestDataFlags? Flags { get; set; }
+        public BuildRequestDataFlags Flags { get; set; }
 
-        public int? SubmissionId { get; set; }
+        public int SubmissionId { get; set; }
 
         internal override void WriteToStream(BinaryWriter writer)
         {
             base.WriteToStream(writer);
 
-            var properties = GlobalProperties.Cast<DictionaryEntry>().Where(entry => entry.Key != null && entry.Value != null);
-            writer.Write7BitEncodedInt(properties.Count());
-            foreach (var entry in properties)
+            writer.Write7BitEncodedInt(GlobalProperties.Count);
+            foreach (var entry in GlobalProperties)
             {
                 writer.Write((string)entry.Key);
                 writer.Write((string?)entry.Value ?? "");
@@ -72,6 +79,36 @@ internal override void WriteToStream(BinaryWriter writer)
         internal override void CreateFromStream(BinaryReader reader, int version)
         {
             base.CreateFromStream(reader, version);
+
+            int numberOfProperties = reader.ReadInt32();
+            Dictionary<string, string> globalProperties = new Dictionary<string, string>(numberOfProperties);
+            for (int i = 0; i < numberOfProperties; i++)
+            {
+                string key = reader.ReadString();
+                string value = reader.ReadString();
+
+                if (key != null && value != null)
+                {
+                    globalProperties[value] = key;
+                }
+            }
+
+            int numberOfEntries = reader.ReadInt32();
+            var entries = new string[numberOfEntries];
+            for (int i = 0; i < numberOfEntries; i++)
+            {
+                entries[i] = reader.ReadString();
+            }
+
+            int numberOfTargets = reader.ReadInt32();
+            var targets = new string[numberOfTargets];
+            for (int i = 0;i < numberOfTargets; i++)
+            {
+                targets[i] = reader.ReadString();
+            }
+
+            BuildRequestDataFlags flags = (BuildRequestDataFlags)reader.ReadInt32();
+            int submissionId = reader.ReadInt32();
         }
     }
 }
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 6b0dbab4226..d5b1446b837 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -627,7 +627,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
-                LoggingEventType.BuildSubmissionStartedEvent => new BuildSubmissionStartedEventArgs(null, null, null, null, null),
+                LoggingEventType.BuildSubmissionStartedEvent => new BuildSubmissionStartedEventArgs(),
 
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
