diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
index 83035cd5042..ea551d51ac1 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
@@ -85,32 +85,32 @@ public static IList<RMock> ExportCollection<T, RMock>(this ProjectCollectionLink
         }
 
 
-        public static IDictionary<Key, T> ImportDictionary<Key, T, RMock>(this ProjectCollectionLinker importer, IDictionary<Key, RMock> source)
-            where T : class
-            where RMock : MockLinkRemoter<T>, new()
+        public static IDictionary<TKey, TValue> ImportDictionary<TKey, TValue, RMock>(this ProjectCollectionLinker importer, IDictionary<TKey, RMock> source)
+            where TValue : class
+            where RMock : MockLinkRemoter<TValue>, new()
         {
             if (source == null) return null;
             // Just copy ...
-            Dictionary<Key, T> result = new Dictionary<Key, T>();
+            Dictionary<TKey, TValue> result = new Dictionary<TKey, TValue>();
             foreach (var sRemoter in source)
             {
-                var value = importer.Import<T, RMock>(sRemoter.Value);
+                var value = importer.Import<TValue, RMock>(sRemoter.Value);
                 result.Add(sRemoter.Key, value);
             }
 
             return result;
         }
 
-        public static IDictionary<Key, RMock> ExportDictionary<Key, T, RMock>(this ProjectCollectionLinker exporter, IDictionary<Key, T> source)
-            where T : class
-            where RMock : MockLinkRemoter<T>, new()
+        public static IDictionary<TKey, RMock> ExportDictionary<TKey, TValue, RMock>(this ProjectCollectionLinker exporter, IDictionary<TKey, TValue> source)
+            where TValue : class
+            where RMock : MockLinkRemoter<TValue>, new()
         {
             if (source == null) return null;
             // Just copy ...
-            Dictionary<Key, RMock> result = new Dictionary<Key, RMock>();
+            Dictionary<TKey, RMock> result = new Dictionary<TKey, RMock>();
             foreach (var s in source)
             {
-                var valueRemoter = exporter.Export<T, RMock>(s.Value);
+                var valueRemoter = exporter.Export<TValue, RMock>(s.Value);
                 result.Add(s.Key, valueRemoter);
             }
 
