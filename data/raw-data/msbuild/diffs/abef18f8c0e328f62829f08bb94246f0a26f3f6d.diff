diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index f55d5b2427c..6b998cc573a 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -18,11 +18,9 @@ internal sealed class BuildCheckCentralContext
 
     public BuildCheckCentralContext(
         IConfigurationProvider configurationProvider,
-        Action<ICheckContext> removeThrottledChecks,
-        Action<List<CheckWrapper>, ICheckContext> removeCheck)
+        Action<List<CheckWrapper>?, ICheckContext> removeCheck)
     {
         _configurationProvider = configurationProvider;
-        _removeThrottledChecks = removeThrottledChecks;
         _removeChecks = removeCheck;
     }
 
@@ -55,8 +53,7 @@ internal void DeregisterCheck(CheckWrapper check)
 
     // In a future we can have callbacks per project as well
     private readonly CallbackRegistry _globalCallbacks = new();
-    private readonly Action<ICheckContext> _removeThrottledChecks;
-    private readonly Action<List<CheckWrapper>, ICheckContext> _removeChecks;
+    private readonly Action<List<CheckWrapper>?, ICheckContext> _removeChecks;
 
 
     // This we can potentially use to subscribe for receiving evaluated props in the
@@ -196,7 +193,7 @@ private void RunRegisteredActions<T>(
     where T : CheckData
     {
         string projectFullPath = checkData.ProjectFilePath;
-        List<CheckWrapper> checksToRemove = [];
+        List<CheckWrapper> checksToRemove = null;
 
         foreach (var checkCallback in registeredCallbacks)
         {
@@ -246,11 +243,12 @@ private void RunRegisteredActions<T>(
                     null,
                     new BuildEventFileInfo(projectFullPath),
                     $"The check '{checkCallback.Item1.Check.FriendlyName}' threw an exception while executing a registered action with message: {e.Message}");
+
+                checksToRemove = checksToRemove ?? new List<CheckWrapper>();
                 checksToRemove.Add(checkCallback.Item1);
             }
         }
 
         _removeChecks(checksToRemove, checkContext);
-        _removeThrottledChecks(checkContext);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index f3f4c0fae7b..a8c0f3c26da 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -74,7 +74,7 @@ internal BuildCheckManager()
         {
             _checkRegistry = new List<CheckFactoryContext>();
             _acquisitionModule = new BuildCheckAcquisitionModule();
-            _buildCheckCentralContext = new(_configurationProvider, RemoveThrottledChecks, RemoveChecks);
+            _buildCheckCentralContext = new(_configurationProvider, RemoveChecksAfterExecutedActions);
             _buildEventsProcessor = new(_buildCheckCentralContext);
         }
 
@@ -279,14 +279,7 @@ private void SetupSingleCheck(CheckFactoryContext checkFactoryContext, string pr
                 catch (Exception e)
                 {
                     string message = $"The check '{check.FriendlyName}' failed to register actions with the following message: '{e.Message}'";
-                    if (e.InnerException is null)
-                    {
-                        throw new BuildCheckConfigurationException(message);
-                    }
-                    else
-                    {
-                        throw new BuildCheckConfigurationException(message, e.InnerException);
-                    }
+                    throw new BuildCheckConfigurationException(message, e);
                 }
             }
             else
@@ -346,25 +339,25 @@ private void RemoveInvalidChecks(List<CheckFactoryContext> checksToRemove, IChec
             }
         }
 
-        public void RemoveThrottledChecks(ICheckContext checkContext)
+        public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove, ICheckContext checkContext)
         {
-            foreach (var checkToRemove in _checkRegistry.FindAll(c => c.MaterializedCheck?.IsThrottled ?? false))
+            if (checksToRemove is not null)
             {
-                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $"Dismounting check '{checkToRemove.FriendlyName}'. The check has exceeded the maximum number of results allowed. Any additional results will not be displayed.");
-                RemoveCheck(checkToRemove);
+                foreach (CheckWrapper check in checksToRemove)
+                {
+                    var checkFactory = _checkRegistry.Find(c => c.MaterializedCheck == check);
+                    if (checkFactory is not null)
+                    {
+                        checkContext.DispatchAsCommentFromText(MessageImportance.High, $"Dismounting check '{check.Check.FriendlyName}'. The check has thrown an unhandled exception while executing registered actions.");
+                        RemoveCheck(checkFactory);
+                    }
+                }
             }
-        }
 
-        public void RemoveChecks(List<CheckWrapper> checkToRemove, ICheckContext checkContext)
-        {
-            foreach (CheckWrapper check in checkToRemove)
+            foreach (var throttledCheck in _checkRegistry.FindAll(c => c.MaterializedCheck?.IsThrottled ?? false))
             {
-                var checkFactory = _checkRegistry.Find(c => c.MaterializedCheck == check);
-                if (checkFactory is not null)
-                {
-                    checkContext.DispatchAsCommentFromText(MessageImportance.High, $"Dismounting check '{check.Check.FriendlyName}'");
-                    RemoveCheck(checkFactory);
-                }
+                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $"Dismounting check '{throttledCheck.FriendlyName}'. The check has exceeded the maximum number of results allowed. Any additional results will not be displayed.");
+                RemoveCheck(throttledCheck);
             }
         }
 
