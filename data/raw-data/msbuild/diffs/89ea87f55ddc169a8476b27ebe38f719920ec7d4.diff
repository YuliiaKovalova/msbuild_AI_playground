diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index aada425b159..cecd5ae977d 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1375,15 +1375,22 @@ internal void ExecuteSubmission<TRequestData, TResultData>(
             where TRequestData : BuildRequestDataBase
             where TResultData : BuildResultBase
         {
-            // TODO: here we should add BuildRequestStarted https://github.com/dotnet/msbuild/issues/10145
+            // For the current submission we only know the SubmissionId and that it happened on scheduler node - all other BuildEventContext dimensions are unknown now.
+            BuildEventContext buildEventContext = new BuildEventContext(
+                submission.SubmissionId,
+                nodeId: 1,
+                BuildEventContext.InvalidProjectInstanceId,
+                BuildEventContext.InvalidProjectContextId,
+                BuildEventContext.InvalidTargetId,
+                BuildEventContext.InvalidTaskId);
+
             BuildSubmissionStartedEventArgs submissionStartedEvent = new(
                 submission.BuildRequestDataBase.GlobalPropertiesLookup,
                 submission.BuildRequestDataBase.EntryProjectsFullPath,
                 submission.BuildRequestDataBase.TargetNames,
                 submission.BuildRequestDataBase.Flags,
-                submission.BuildResultBase!.SubmissionId);
+                submission.SubmissionId);
 
-            BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
             ((IBuildComponentHost)this).LoggingService.LogBuildEvent(submissionStartedEvent);
 
             if (submission is BuildSubmission buildSubmission)
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 98f67b0783f..8804918dbc0 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -39,11 +39,6 @@ internal sealed class EventSourceSink :
         /// </summary>
         public event BuildWarningEventHandler WarningRaised;
 
-        /// <summary>
-        /// This event is raised to log the start of a build submission.
-        /// </summary>
-        public event BuildSubmissionStartedEventHandler BuildSubmissionStarted;
-
         /// <summary>
         /// this event is raised to log the start of a build
         /// </summary>
@@ -252,9 +247,6 @@ public void Consume(BuildEventArgs buildEvent)
                 case ProjectFinishedEventArgs projectFinishedEvent:
                     RaiseProjectFinishedEvent(null, projectFinishedEvent);
                     break;
-                case BuildSubmissionStartedEventArgs buildSubmissionStartedEvent:
-                    RaiseBuildSubmissionStartedEvent(null, buildSubmissionStartedEvent);
-                    break;
                 case BuildStartedEventArgs buildStartedEvent:
                     HaveLoggedBuildStartedEvent = true;
                     RaiseBuildStartedEvent(null, buildStartedEvent);
@@ -455,40 +447,6 @@ private void RaiseWarningEvent(object sender, BuildWarningEventArgs buildEvent)
             RaiseAnyEvent(sender, buildEvent);
         }
 
-        private void RaiseBuildSubmissionStartedEvent(object sender, BuildSubmissionStartedEventArgs buildEvent)
-        {
-            if (BuildSubmissionStarted != null)
-            {
-                try
-                {
-                    BuildSubmissionStarted(sender, buildEvent);
-                }
-                catch (LoggerException)
-                {
-                    // if a logger has failed politely, abort immediately
-                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
-                    // if a fellow logger is throwing in an event handler.
-                    this.UnregisterAllEventHandlers();
-                    throw;
-                }
-                catch (Exception exception)
-                {
-                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
-                    // if a fellow logger is throwing in an event handler.
-                    this.UnregisterAllEventHandlers();
-
-                    if (ExceptionHandling.IsCriticalException(exception))
-                    {
-                        throw;
-                    }
-
-                    InternalLoggerException.Throw(exception, buildEvent, "FatalErrorWhileLogging", false);
-                }
-            }
-
-            RaiseStatusEvent(sender, buildEvent);
-        }
-
         /// <summary>
         /// Raises a "build started" event to all registered loggers.
         /// </summary>
diff --git a/src/Framework/BuildSubmissionStartedEventArgs.cs b/src/Framework/BuildSubmissionStartedEventArgs.cs
index 920b9088341..7f7226e76e8 100644
--- a/src/Framework/BuildSubmissionStartedEventArgs.cs
+++ b/src/Framework/BuildSubmissionStartedEventArgs.cs
@@ -9,27 +9,17 @@
 
 namespace Microsoft.Build.Framework
 {
-    [Serializable]
-    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs
+    public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs
     {
-        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; protected set; }
+        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; set; }
 
-        public IEnumerable<string>? EntryProjectsFullPath { get; protected set; }
+        public IEnumerable<string>? EntryProjectsFullPath { get; set; }
 
-        public ICollection<string>? TargetNames { get; protected set; }
+        public ICollection<string>? TargetNames { get; set; }
 
-        public BuildRequestDataFlags? Flags { get; protected set; }
+        public BuildRequestDataFlags? Flags { get; set; }
 
-        public int? SubmissionId { get; protected set; }
-
-        /// <summary>
-        /// Default constructor
-        /// </summary>
-        protected BuildSubmissionStartedEventArgs()
-            : base()
-        {
-            // do nothing
-        }
+        public int? SubmissionId { get; set; }
 
         public BuildSubmissionStartedEventArgs(
             IReadOnlyDictionary<string, string?>? globalProperties,
@@ -37,7 +27,6 @@ public BuildSubmissionStartedEventArgs(
             ICollection<string>? targetNames,
             BuildRequestDataFlags? flags,
             int? submissionId)
-            : base()
         {
             GlobalProperties = globalProperties;
             EntryProjectsFullPath = entryProjectsFullPath;
@@ -45,5 +34,15 @@ public BuildSubmissionStartedEventArgs(
             Flags = flags;
             SubmissionId = submissionId;
         }
+
+        internal override void WriteToStream(BinaryWriter writer)
+        {
+            // TODO
+        }
+
+        internal override void CreateFromStream(BinaryReader reader, int version)
+        {
+            // TODO
+        }
     }
 }
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 4ef85f23288..2439db58eea 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -27,11 +27,6 @@ namespace Microsoft.Build.Framework
     /// </summary>
     public delegate void CustomBuildEventHandler(object sender, CustomBuildEventArgs e);
 
-    /// <summary>
-    /// Type of handler for BuildSubmissionStartedEvent events
-    /// </summary>
-    public delegate void BuildSubmissionStartedEventHandler(object sender, BuildSubmissionStartedEventArgs e);
-
     /// <summary>
     /// Type of handler for BuildStartedEvent events
     /// </summary>
