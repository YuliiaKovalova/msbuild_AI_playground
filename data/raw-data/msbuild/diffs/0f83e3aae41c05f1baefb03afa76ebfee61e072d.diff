diff --git a/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs b/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
index 43c261e5676..f32eaf7d8c7 100644
--- a/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpanderFunction_Tests.cs
@@ -162,23 +162,26 @@ public void TryConvertToLongGivenDoubleWithLongMaxValueShouldNotThrow()
             _ = Should.NotThrow(() => Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong((double)long.MaxValue, out _));
         }
 
-        [Fact]
-        public void TryConvertToLongGivenDoubleWithLongMaxValue()
+        [WindowsFullFrameworkOnlyFact]
+        public void TryConvertToLongGivenDoubleWithLongMaxValueFramework()
         {
             const long longMaxValue = long.MaxValue;
             bool result = Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong((double)longMaxValue, out long actual);
-            if (RuntimeInformation.OSArchitecture != Architecture.Arm64)
-            {
-                // Because of loss of precision, long.MaxValue will not 'round trip' from long to double to long.
-                result.ShouldBeFalse();
-                actual.ShouldBe(0);
-            }
-            else
-            {
-                // Testing on macOS 12 on Apple Silicon M1 Pro produces different result.
-                result.ShouldBeTrue();
-                actual.ShouldBe(longMaxValue);
-            }
+            
+            // Because of loss of precision, long.MaxValue will not 'round trip' from long to double to long.
+            result.ShouldBeFalse();
+            actual.ShouldBe(0);
+        }
+
+        [DotNetOnlyFact]
+        public void TryConvertToLongGivenDoubleWithLongMaxValueDotNet()
+        {
+            const long longMaxValue = long.MaxValue;
+            bool result = Expander<IProperty, IItem>.Function<IProperty>.TryConvertToLong((double)longMaxValue, out long actual);
+
+            // Testing on macOS 12 on Apple Silicon M1 Pro produces different result.
+            result.ShouldBeTrue();
+            actual.ShouldBe(longMaxValue);
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index cdd4b7fd0e0..89799ad614d 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -631,7 +631,16 @@ public override string ToString()
         internal void SdkPropertiesAreExpanded(SdkPropertiesAreExpandedCase data)
         {
             _env.SetEnvironmentVariable("MSBuildSDKsPath", _testSdkRoot);
-            _env.SetEnvironmentVariable("MSBUILD_SDKREFERENCE_PROPERTY_EXPANSION_MODE", data.Mode.ToString());
+
+            if (data.Mode.HasValue)
+            {
+                _env.SetEnvironmentVariable("MSBUILD_SDKREFERENCE_PROPERTY_EXPANSION_MODE", data.Mode.ToString());
+            }
+            else
+            {
+                _env.SetEnvironmentVariable("MSBUILD_SDKREFERENCE_PROPERTY_EXPANSION_MODE", null);
+            }
+            
             _env.SetEnvironmentVariable("MSBUILDINCLUDEDEFAULTSDKRESOLVER", "false");
 
             Build.BackEnd.SdkResolution.CachingSdkResolverLoader.ResetStateForTests();
