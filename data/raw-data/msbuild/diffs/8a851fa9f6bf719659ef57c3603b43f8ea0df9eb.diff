diff --git a/.editorconfig b/.editorconfig
index 01161a81aa6..4010977a671 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -413,5 +413,13 @@ dotnet_diagnostic.IDE0300.severity = suggestion
 dotnet_diagnostic.IDE0301.severity = suggestion
 dotnet_diagnostic.IDE0305.severity = suggestion
 
+
+# Remove unnecessary equality operator  IDE0100 (https://learn.microsoft.com/en-gb/dotnet/fundamentals/code-analysis/style-rules/ide0100)
+# Making it a suggestion to have a flexibility for future
+dotnet_diagnostic.IDE0100.severity = suggestion
+
+# File header should match the template, making it error since couple of files met in the code base without any header
+dotnet_diagnostic.IDE0073.severity = error
+
 # Temporarily disable SA1010 "Opening square brackets should not be preceded by a space" until https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/3687 is fixed
 dotnet_diagnostic.SA1010.severity = none
diff --git a/Directory.Build.props b/Directory.Build.props
index a55e6b642b2..b3524ccc277 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -27,7 +27,7 @@
      -->
      <!-- When building in source-only modes, let the TFM float based on what arcade is in use.
           When building in normal modes (independent build or a dotnet product build), set explicitly. -->
-    <LatestDotNetCoreForMSBuild>net8.0</LatestDotNetCoreForMSBuild>
+    <LatestDotNetCoreForMSBuild>net9.0</LatestDotNetCoreForMSBuild>
     <LatestDotNetCoreForMSBuild Condition="'$(DotNetBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'">$(NetCurrent)</LatestDotNetCoreForMSBuild>
   </PropertyGroup>
 
diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index b6e3c089135..a7fe7f63718 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -85,8 +85,8 @@ try {
   else
   {
     $buildToolPath = $dotnetExePath
-    $buildToolCommand = Join-Path $bootstrapRoot "net8.0\MSBuild\MSBuild.dll"
-    $buildToolFramework = "net8.0"
+    $buildToolCommand = Join-Path $bootstrapRoot "net9.0\MSBuild\MSBuild.dll"
+    $buildToolFramework = "net9.0"
   }
 
   # Use separate artifacts folder for stage 2
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index 8edd377ec73..6338632b3cf 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -59,8 +59,8 @@ bootstrapRoot="$Stage1Dir/bin/bootstrap"
 if [ $host_type = "core" ]
 then
   _InitializeBuildTool="$_InitializeDotNetCli/dotnet"
-  _InitializeBuildToolCommand="$bootstrapRoot/net8.0/MSBuild/MSBuild.dll"
-  _InitializeBuildToolFramework="net8.0"
+  _InitializeBuildToolCommand="$bootstrapRoot/net9.0/MSBuild/MSBuild.dll"
+  _InitializeBuildToolFramework="net9.0"
 else
   echo "Unsupported hostType ($host_type)"
   exit 1
diff --git a/global.json b/global.json
index 98c4742d9f5..e43a75d3a37 100644
--- a/global.json
+++ b/global.json
@@ -3,7 +3,7 @@
     "allowPrerelease": true
   },
   "tools": {
-    "dotnet": "8.0.201",
+    "dotnet": "9.0.100-preview.5.24307.3",
     "vs": {
       "version": "17.8.0"
     },
diff --git a/scripts/Deploy-MSBuild.ps1 b/scripts/Deploy-MSBuild.ps1
index 95e2726de9f..b6c0794d2cf 100644
--- a/scripts/Deploy-MSBuild.ps1
+++ b/scripts/Deploy-MSBuild.ps1
@@ -76,7 +76,7 @@ else {
 if ($runtime -eq "Desktop") {
     $targetFramework = "net472"
 } else {
-    $targetFramework = "net8.0"
+    $targetFramework = "net9.0"
 }
 
 # If bootstrap directory is not defined in parameters, use the default location
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs
index 5cd1d3317c0..af307edc6fc 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs
@@ -1,4 +1,7 @@
-﻿using System.Collections.Generic;
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck;
 
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs
index 714a82ae95a..5f6201caea8 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs
@@ -1,4 +1,7 @@
-﻿using System.Collections.Generic;
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck;
 
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs
index c0272937c87..e3f23d5ea68 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs
@@ -1,4 +1,7 @@
-﻿using System.Collections.Generic;
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck;
 
diff --git a/src/BuildCheck.UnitTests/TestAssets/InvalidCustomAnalyzer/InvalidAnalyzer.cs b/src/BuildCheck.UnitTests/TestAssets/InvalidCustomAnalyzer/InvalidAnalyzer.cs
index e5f466ce414..dcdee780a8b 100644
--- a/src/BuildCheck.UnitTests/TestAssets/InvalidCustomAnalyzer/InvalidAnalyzer.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/InvalidCustomAnalyzer/InvalidAnalyzer.cs
@@ -1,4 +1,7 @@
-﻿using System.Collections.Generic;
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
 
 namespace InvalidCustomAnalyzer
 {
diff --git a/src/Framework/README.md b/src/Framework/README.md
index 562f1208165..5b13ad579e1 100644
--- a/src/Framework/README.md
+++ b/src/Framework/README.md
@@ -6,6 +6,6 @@ The items in this namespace are primarily base-level classes and interfaces shar
 [`ITask`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.itask), and [`ILogger`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.ilogger).
 
 ### netstandard2.0 target
-The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net8.0` or `net472`. Please use the `net8.0`-targeted assemblies for .NET 8+ scenarios.
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net9.0` or `net472`. Please use the `net9.0`-targeted assemblies for .NET 9+ scenarios.
 
 For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 479bd5ac67a..d7dcf9357f8 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -1673,7 +1673,7 @@ internal static bool IsMatch(string input, string pattern)
         /// <param name="pattern">Pattern against which string is matched.</param>
         internal static bool IsMatch(ReadOnlySpan<char> input, string pattern)
         {
-            if (input == null)
+            if (input == ReadOnlySpan<char>.Empty) // Comparing ReadOnlySpan with null in this scenario transforms the null to ReadOnlySpan Empty (https://github.com/dotnet/runtime/issues/84265)
             {
                 throw new ArgumentNullException(nameof(input));
             }
diff --git a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
index 7d9c3eee377..809f34999c9 100644
--- a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
+++ b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
@@ -100,7 +100,14 @@ public bool UpdateResources(string filename, BuildResults results)
                                 fileLength = (int)fs.Length;
                                 fileContent = new byte[fileLength];
 
+#if NET7_0_OR_GREATER
+                                fs.ReadExactly(fileContent, 0, fileLength);
+#else
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
+                               // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
                                 fs.Read(fileContent, 0, fileLength);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
+#endif
                             }
 
                             // Update the resources to include this file's data
diff --git a/src/Tasks/ManifestUtil/ManifestReader.cs b/src/Tasks/ManifestUtil/ManifestReader.cs
index 3d6393e6518..1cf9d777cff 100644
--- a/src/Tasks/ManifestUtil/ManifestReader.cs
+++ b/src/Tasks/ManifestUtil/ManifestReader.cs
@@ -54,7 +54,11 @@ private static XmlDocument GetXmlDocument(string path)
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
                 byte[] buffer = new byte[2];
+
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read' The check of bytes happens later in the code. In case of invalid documents the code will throw an exception during xml loading.
                 s.Read(buffer, 0, 2);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
+
                 s.Position = 0;
                 var document = new XmlDocument();
                 var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
@@ -138,7 +142,10 @@ public static Manifest ReadManifest(string manifestType, string path, bool prese
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
                 byte[] buffer = new byte[2];
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read' The check of bytes happens later in the code. In case of invalid document the exception is expected later
                 s.Read(buffer, 0, 2);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
+
                 s.Position = 0;
                 // if first two bytes are "MZ" then we're looking at an .exe or a .dll not a .manifest
                 if ((buffer[0] == 0x4D) && (buffer[1] == 0x5A))
diff --git a/src/Tasks/ManifestUtil/PathUtil.cs b/src/Tasks/ManifestUtil/PathUtil.cs
index c3f0fe20f69..81c678e17cf 100644
--- a/src/Tasks/ManifestUtil/PathUtil.cs
+++ b/src/Tasks/ManifestUtil/PathUtil.cs
@@ -162,7 +162,9 @@ public static bool IsPEFile(string path)
             byte[] buffer = new byte[2];
             using (Stream s = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
             {
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
                 s.Read(buffer, 0, 2);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
             }
 
             // if first two bytes are "MZ" then we're looking at an .exe or a .dll not a .manifest
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index 2fcfbe94245..ff6114d8eed 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -127,7 +127,15 @@ private bool ResolveAssemblyKey()
                             fs = File.OpenRead(KeyFile);
                             int fileLength = (int)fs.Length;
                             var keyBytes = new byte[fileLength];
+#if NET7_0_OR_GREATER
+                            // fail fast in case the file is not read till the end
+                            fs.ReadExactly(keyBytes, 0, fileLength);
+#else
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
+                            // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
                             fs.Read(keyBytes, 0, fileLength);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
+#endif
 
                             UInt64 hash = HashFromBlob(keyBytes);
                             hash ^= HashFromBlob(userNameBytes); // modify it with the username hash, so each user would get different hash for the same key
diff --git a/src/Tasks/StrongNameUtils.cs b/src/Tasks/StrongNameUtils.cs
index 7e615bbe4b7..ca6fb28ce1e 100644
--- a/src/Tasks/StrongNameUtils.cs
+++ b/src/Tasks/StrongNameUtils.cs
@@ -46,8 +46,13 @@ internal static void ReadKeyFile(TaskLoggingHelper log, string keyFile, out Stro
                 // Read the stuff from the file stream
                 using (FileStream fs = new FileStream(keyFile, FileMode.Open, FileAccess.Read, FileShare.Read))
                 {
-                    keyFileContents = new byte[(int)fs.Length];
-                    fs.Read(keyFileContents, 0, (int)fs.Length);
+                    int fileLength = (int)fs.Length;
+                    keyFileContents = new byte[fileLength];
+
+#pragma warning disable CA2022 // Avoid inexact read with 'Stream.Read'
+                    // TODO: Read the count of read bytes and check if it matches the expected length, if not raise an exception
+                    fs.Read(keyFileContents, 0, fileLength);
+#pragma warning restore CA2022 // Avoid inexact read with 'Stream.Read'
                 }
             }
             catch (ArgumentException e)
diff --git a/src/UnitTests.Shared/ProjectFromString.cs b/src/UnitTests.Shared/ProjectFromString.cs
index bd5ecacbed8..0085ebaa514 100644
--- a/src/UnitTests.Shared/ProjectFromString.cs
+++ b/src/UnitTests.Shared/ProjectFromString.cs
@@ -1,3 +1,6 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index 3d09fe07dd1..d491a5a0469 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -1735,7 +1735,9 @@ public void CreateFileDoesntRecordWriteIfNotWrittenTo()
                 var buffer = new byte[10];
                 using (FileStream fs = File.Open(readFile, FileMode.Open, FileAccess.ReadWrite, FileShare.None))
                 {
+#pragma warning disable CA2022
                     fs.Read(buffer, 0, 10);
+#pragma warning restore CA2022
                 }
 
                 FileTracker.WriteContextTLogs(testDir, tlogRootName);
diff --git a/src/Utilities/README.md b/src/Utilities/README.md
index 5bc8460e4c5..f9ff45c330c 100644
--- a/src/Utilities/README.md
+++ b/src/Utilities/README.md
@@ -7,6 +7,6 @@ This package contains `Microsoft.Build.Utilities.Core.dll`, which defines helper
 * [`Logger`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.logger), a base class for custom logging functionality.
 
 ### netstandard2.0 target
-The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net8.0` or `net472`. Please use the `net8.0`-targeted assemblies for .NET 8+ scenarios.
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net9.0` or `net472`. Please use the `net9.0`-targeted assemblies for .NET 8+ scenarios.
 
 For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
