diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index 8496d3518af..d3a925b34a8 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -465,10 +465,10 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re
                         Lookup lookupForExecution;
 
                         // UNDONE: (Refactor) Refactor TargetUpToDateChecker to take a logging context, not a logging service.
+                        MSBuildEventSource.Log.TargetUpToDateStart();
                         TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);
-                        MSBuildEventSource.Log.PerformDependencyAnalysisStart();
                         DependencyAnalysisResult dependencyResult = dependencyAnalyzer.PerformDependencyAnalysis(bucket, out changedTargetInputs, out upToDateTargetInputs);
-                        MSBuildEventSource.Log.PerformDependencyAnalysisStop();
+                        MSBuildEventSource.Log.TargetUpToDateStop((int)dependencyResult);
 
                         switch (dependencyResult)
                         {
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 1dc19ae0d8f..c63c667b24d 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -425,15 +425,27 @@ public void PacketReadSize(int size)
         }
 
         [Event(56, Keywords = Keywords.All)]
-        public void PerformDependencyAnalysisStart()
+        public void TargetUpToDateStart()
         {
             WriteEvent(56);
         }
 
         [Event(57, Keywords = Keywords.All)]
-        public void PerformDependencyAnalysisStop()
+        public void TargetUpToDateStop(int result)
         {
-            WriteEvent(57);
+            WriteEvent(57, result);
+        }
+
+        [Event(58, Keywords = Keywords.All)]
+        public void CopyStart(bool singleThreaded)
+        {
+            WriteEvent(58, singleThreaded);
+        }
+
+        [Event(59, Keywords = Keywords.All)]
+        public void CopyStop(bool singleThreaded)
+        {
+            WriteEvent(59, singleThreaded);
         }
         #endregion
     }
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index ba793b673d6..8bf7869f26d 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -12,6 +12,7 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Eventing;
 
 namespace Microsoft.Build.Tasks
 {
@@ -426,6 +427,8 @@ private bool CopySingleThreaded(
                 DestinationFiles.Length, // Set length to common case of 1:1 source->dest.
                 StringComparer.OrdinalIgnoreCase);
 
+            MSBuildEventSource.Log.CopyStart(true);
+
             // Now that we have a list of destinationFolder files, copy from source to destinationFolder.
             for (int i = 0; i < SourceFiles.Length && !_cancellationTokenSource.IsCancellationRequested; ++i)
             {
@@ -460,6 +463,8 @@ private bool CopySingleThreaded(
                 }
             }
 
+            MSBuildEventSource.Log.CopyStop(true);
+
             return success;
         }
 
@@ -500,6 +505,8 @@ private bool CopyParallel(
                 DestinationFiles.Length, // Set length to common case of 1:1 source->dest.
                 StringComparer.OrdinalIgnoreCase);
 
+            MSBuildEventSource.Log.CopyStart(false);
+
             for (int i = 0; i < SourceFiles.Length && !_cancellationTokenSource.IsCancellationRequested; ++i)
             {
                 ITaskItem destItem = DestinationFiles[i];
@@ -589,6 +596,8 @@ private bool CopyParallel(
                 }
             }
 
+            MSBuildEventSource.Log.CopyStop(false);
+
             return success;
         }
 
