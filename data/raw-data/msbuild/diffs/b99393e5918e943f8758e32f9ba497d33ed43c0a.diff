diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 65e578c93ee..b1e2eae13bf 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -443,6 +443,8 @@ public string GetMetadataValue(string name)
         /// </summary>
         public bool HasMetadata(string name)
         {
+            ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
+
             if (Link != null)
             {
                 return Link.HasMetadata(name);
@@ -473,7 +475,7 @@ public bool HasMetadata(string name)
         /// </summary>
         string IItem.GetMetadataValueEscaped(string name)
         {
-            TryGetMetadataValueEscaped(name, out string value);
+            string value = GetMetadataValueEscaped(name, false);
 
             return value ?? String.Empty;
         }
@@ -864,14 +866,14 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)
         }
 
         /// <summary>
-        /// Get the metadata value with the specified key. 
-        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+        /// Returns the metadata with the specified key.
+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
         /// </summary>
-        public bool TryGetMetadataValueEscaped(string name, out string value)
+        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
         {
             ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
 
-            value = null;
+            string value = null;
 
             if (_directMetadata != null)
             {
@@ -903,8 +905,7 @@ public bool TryGetMetadataValueEscaped(string name, out string value)
                 }
             }
 
-            if (value == null) { return false; }
-            else { return true; }
+            return returnNullIfNotFound ? value : value ?? string.Empty;
         }
 
         /// <summary>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 63b85872ae2..6dde81c87c4 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2789,7 +2789,7 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
 
                         try
                         {
-                            item.Value.TryGetMetadataValueEscaped(metadataName, out metadataValue);
+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName, true);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2825,7 +2825,7 @@ internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I>
 
                         try
                         {
-                            item.Value.TryGetMetadataValueEscaped(metadataName, out metadataValue);
+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName, true);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2864,7 +2864,7 @@ internal static IEnumerable<Pair<string, S>> AnyHaveMetadataValue(Expander<P, I>
 
                             try
                             {
-                                item.Value.TryGetMetadataValueEscaped(metadataName, out metadataValue);
+                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName, true);
                             }
                             catch (ArgumentException ex) // Blank metadata name
                             {
diff --git a/src/Build/Evaluation/IItem.cs b/src/Build/Evaluation/IItem.cs
index a809e32a8bf..8dc99f25679 100644
--- a/src/Build/Evaluation/IItem.cs
+++ b/src/Build/Evaluation/IItem.cs
@@ -65,9 +65,9 @@ string ProjectDirectory
         bool HasMetadata(string name);
 
         /// <summary>
-        /// Get the metadata value with the specified key. 
-        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+        /// Returns the metadata with the specified key.
+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
         /// </summary>
-        bool TryGetMetadataValueEscaped(string name, out string value);
+        string GetMetadataValueEscaped(string name, bool returnNullIfNotFound);
     }
 }
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index dfe63f383fe..aa3a34763ee 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -710,12 +710,12 @@ private void CommonConstructor(ProjectInstance projectToUse, string itemTypeToUs
         }
 
         /// <summary>
-        /// Get the metadata value with the specified key. 
-        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+        /// Returns the metadata with the specified key.
+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
         /// </summary>
-        public bool TryGetMetadataValueEscaped(string name, out string value)
+        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
         {
-            return _taskItem.TryGetMetadataEscaped(name, out value);
+            return _taskItem.GetMetadataEscaped(name, returnNullIfNotFound);
         }
 
         /// <summary>
@@ -1226,12 +1226,12 @@ string IItem.GetMetadataValueEscaped(string name)
             }
 
             /// <summary>
-            /// Get the metadata value with the specified key. 
-            /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.
+            /// Returns the metadata with the specified key.
+            /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
             /// </summary>
-            bool IItem.TryGetMetadataValueEscaped(string name, out string value)
+            string IItem.GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
             {
-                return TryGetMetadataEscaped(name, out value);
+                return GetMetadataEscaped(name, returnNullIfNotFound);
             }
 
             /// <summary>
@@ -1280,15 +1280,15 @@ public string GetMetadata(string metadataName)
             /// </summary>
             public string GetMetadataEscaped(string metadataName)
             {
-                TryGetMetadataEscaped(metadataName, out string value);
+                string value = GetMetadataEscaped(metadataName, false);
                 return value ?? String.Empty;
             }
 
             /// <summary>
-            /// Get the specified metadata value, escaped.
-            /// If metadata is not defined, value is null, returns false.
+            /// Returns the metadata with the specified key.
+            /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
             /// </summary>
-            public bool TryGetMetadataEscaped(string metadataName, out string value)
+            public string GetMetadataEscaped(string metadataName, bool returnNullIfNotFound)
             {
                 if (string.IsNullOrEmpty(metadataName))
                 {
@@ -1296,13 +1296,13 @@ public bool TryGetMetadataEscaped(string metadataName, out string value)
                 }
 
                 ProjectMetadataInstance metadatum;
+                string value = null;
                 if (_directMetadata != null)
                 {
                     metadatum = _directMetadata[metadataName];
                     if (metadatum != null)
                     {
-                        value = metadatum.EvaluatedValueEscaped;
-                        return true;
+                        return metadatum.EvaluatedValueEscaped;
                     }
                 }
 
@@ -1313,24 +1313,20 @@ public bool TryGetMetadataEscaped(string metadataName, out string value)
                     Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(null, null, new BuiltInMetadataTable(null, this), FileSystems.Default);
 
                     // We don't have a location to use, but this is very unlikely to error
-                    value = expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, ElementLocation.EmptyLocation);
-                    return true;
+                    return expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, ElementLocation.EmptyLocation);
                 }
                 else if (metadatum != null)
                 {
-                    value = metadatum.EvaluatedValueEscaped;
-                    return true;
+                    return metadatum.EvaluatedValueEscaped;
                 }
 
 
                 if (FileUtilities.ItemSpecModifiers.IsItemSpecModifier(metadataName))
                 {
                     value = BuiltInMetadata.GetMetadataValueEscaped(_projectDirectory, _includeBeforeWildcardExpansionEscaped, _includeEscaped, _definingFileEscaped, metadataName, ref _fullPath);
-                    return true;
                 }
 
-                value = null;
-                return false;
+                return returnNullIfNotFound ? value : value ?? string.Empty;
             }
 
             /// <summary>
