diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index 0185fbd7911..bfcf5685dc2 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -43,15 +43,13 @@ public void ImportFromExtensionsPathNotFound()
             string extnDir1 = null;
             string mainProjectPath = null;
 
-            try {
+            try
+            {
                 extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"), GetExtensionTargetsFileContent1());
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projColln = new ProjectCollection();
-#else
-                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var projColln = GetProjectCollection();
+
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader("MSBuildExtensionsPath", extnDir1, Path.Combine("tmp", "nonexistent")));
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
@@ -59,7 +57,9 @@ public void ImportFromExtensionsPathNotFound()
                 Assert.Throws<InvalidProjectFileException>(() => projColln.LoadProject(mainProjectPath));
 
                 logger.AssertLogContains("MSB4226");
-            } finally {
+            }
+            finally
+            {
                 if (mainProjectPath != null)
                 {
                     FileUtilities.DeleteNoThrow(mainProjectPath);
@@ -90,7 +90,7 @@ public void ConditionalImportFromExtensionsPathNotFound()
             string extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"), extnTargetsFileContentWithCondition);
             string mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
-            CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] {extnDir1, Path.Combine("tmp", "nonexistent")},
+            CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { extnDir1, Path.Combine("tmp", "nonexistent") },
                                                             null,
                                                             (p, l) => {
                                                                 Assert.True(p.Build());
@@ -127,7 +127,7 @@ public void ImportFromExtensionsPathCircularImportError()
                                                             String.Format(extnTargetsFileContent2, mainProjectPath));
 
             CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath",
-                                                        new string[] {extnDir2, Path.Combine("tmp", "nonexistent"), extnDir1},
+                                                        new string[] { extnDir2, Path.Combine("tmp", "nonexistent"), extnDir1 },
                                                         null,
                                                         (p, l) => l.AssertLogContains("MSB4210"));
         }
@@ -198,7 +198,7 @@ public void ImportFromExtensionsPathWithWildCard()
             string mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", mainTargetsFileContent);
 
             CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath",
-                new[] {extnDir1, Path.Combine("tmp", "nonexistent"), extnDir2},
+                new[] { extnDir1, Path.Combine("tmp", "nonexistent"), extnDir2 },
                 null,
                 (project, logger) =>
                 {
@@ -280,7 +280,7 @@ public void ImportFromExtensionsPathWithWildCardNothingFound()
             string extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"), extnTargetsFileContent);
             string mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
-            CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] {Path.Combine("tmp", "nonexistent"), extnDir1},
+            CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { Path.Combine("tmp", "nonexistent"), extnDir1 },
                                                     null, (p, l) => Assert.True(p.Build()));
         }
 
@@ -292,15 +292,12 @@ public void ImportFromExtensionsPathInvalidFile()
             string extnDir1 = null;
             string mainProjectPath = null;
 
-            try {
+            try
+            {
                 extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"), extnTargetsFileContent);
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projColln = new ProjectCollection();
-#else
-                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var projColln = GetProjectCollection();
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader("MSBuildExtensionsPath", extnDir1,
                                                                                 Path.Combine("tmp", "nonexistent")));
                 var logger = new MockLogger();
@@ -308,7 +305,9 @@ public void ImportFromExtensionsPathInvalidFile()
 
                 Assert.Throws<InvalidProjectFileException>(() => projColln.LoadProject(mainProjectPath));
                 logger.AssertLogContains("MSB4024");
-            } finally {
+            }
+            finally
+            {
                 if (mainProjectPath != null)
                 {
                     FileUtilities.DeleteNoThrow(mainProjectPath);
@@ -354,7 +353,7 @@ public void ImportFromExtensionsPathSearchOrder()
             string extnDir2 = GetNewExtensionsPathAndCreateFile("extensions2", Path.Combine("foo", "extn.proj"), extnTargetsFileContent2);
             string mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
-            CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] {extnDir2, Path.Combine("tmp", "nonexistent"), extnDir1},
+            CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { extnDir2, Path.Combine("tmp", "nonexistent"), extnDir1 },
                                                             null,
                                                             (p, l) => {
                                                                 Assert.True(p.Build());
@@ -398,12 +397,9 @@ public void ImportFromExtensionsPathSearchOrder2()
             string mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
             // MSBuildExtensionsPath* property value has highest priority for the lookups
-            try {
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projColln = new ProjectCollection();
-#else
-                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+            try
+            {
+                var projColln = GetProjectCollection();
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader("MSBuildExtensionsPath", Path.Combine("tmp", "non-existent"), extnDir1));
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
@@ -415,7 +411,9 @@ public void ImportFromExtensionsPathSearchOrder2()
 
                 logger.AssertLogContains("Running FromExtn");
                 logger.AssertLogContains("PropertyFromExtn1: FromSecondFile");
-            } finally {
+            }
+            finally
+            {
                 if (mainProjectPath != null)
                 {
                     FileUtilities.DeleteNoThrow(mainProjectPath);
@@ -479,7 +477,8 @@ public void ImportFromExtensionsPathAnd32And64()
             string extnDir1 = null, extnDir2 = null, extnDir3 = null;
             string mainProjectPath = null;
 
-            try {
+            try
+            {
                 extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"),
                                 String.Format(extnTargetsFileContentTemplate, String.Empty, "FromExtn2", "<Import Project='$(MSBuildExtensionsPath32)\\bar\\extn2.proj' />"));
                 extnDir2 = GetNewExtensionsPathAndCreateFile("extensions2", Path.Combine("bar", "extn2.proj"),
@@ -490,13 +489,9 @@ public void ImportFromExtensionsPathAnd32And64()
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(String.Format(configFileContents, extnDir1, extnDir2, extnDir3));
-                var reader = GetStandardConfigurationReader();
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projColln = new ProjectCollection();
-#else
-                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var reader = GetStandardConfigurationReader();
+                var projColln = GetProjectCollection();
 
                 projColln.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -507,7 +502,9 @@ public void ImportFromExtensionsPathAnd32And64()
                 logger.AssertLogContains("Running FromExtn3");
                 logger.AssertLogContains("Running FromExtn2");
                 logger.AssertLogContains("Running FromExtn");
-            } finally {
+            }
+            finally
+            {
                 if (mainProjectPath != null)
                 {
                     FileUtilities.DeleteNoThrow(mainProjectPath);
@@ -569,13 +566,9 @@ public void ExpandExtensionsPathFallback()
                     GetMainTargetFileContent());
 
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
-                var reader = GetStandardConfigurationReader();
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
-#else
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var reader = GetStandardConfigurationReader();
+                var projectCollection = GetProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -634,13 +627,9 @@ public void ExpandExtensionsPathFallbackInErrorMessage()
                     GetMainTargetFileContent());
 
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
-                var reader = GetStandardConfigurationReader();
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
-#else
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var reader = GetStandardConfigurationReader();
+                var projectCollection = GetProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -708,13 +697,9 @@ public void FallbackImportWithIndirectReference()
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", mainTargetsFileContent);
 
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
-                var reader = GetStandardConfigurationReader();
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
-#else
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var reader = GetStandardConfigurationReader();
+                var projectCollection = GetProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -777,13 +762,9 @@ public void FallbackImportWithUndefinedProperty()
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", mainTargetsFileContent);
 
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
-                var reader = GetStandardConfigurationReader();
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
-#else
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var reader = GetStandardConfigurationReader();
+                var projectCollection = GetProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -840,13 +821,9 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", mainTargetsFileContent);
 
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
-                var reader = GetStandardConfigurationReader();
 
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
-#else
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+                var reader = GetStandardConfigurationReader();
+                var projectCollection = GetProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -866,7 +843,8 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
         void CreateAndBuildProjectForImportFromExtensionsPath(string extnPathPropertyName, Action<Project, MockLogger> action)
         {
             string extnDir1 = null, extnDir2 = null, mainProjectPath = null;
-            try {
+            try
+            {
                 extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"),
                                     GetExtensionTargetsFileContent1(extnPathPropertyName));
                 extnDir2 = GetNewExtensionsPathAndCreateFile("extensions2", Path.Combine("bar", "extn2.proj"),
@@ -874,10 +852,12 @@ void CreateAndBuildProjectForImportFromExtensionsPath(string extnPathPropertyNam
 
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent(extnPathPropertyName));
 
-                CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, extnPathPropertyName, new string[] {extnDir1, extnDir2},
+                CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, extnPathPropertyName, new string[] { extnDir1, extnDir2 },
                                                                 null,
                                                                 action);
-            } finally {
+            }
+            finally
+            {
                 if (extnDir1 != null)
                 {
                     FileUtilities.DeleteDirectoryNoThrow(extnDir1, recursive: true);
@@ -896,19 +876,19 @@ void CreateAndBuildProjectForImportFromExtensionsPath(string extnPathPropertyNam
         void CreateAndBuildProjectForImportFromExtensionsPath(string mainProjectPath, string extnPathPropertyName, string[] extnDirs, Action<string[]> setExtensionsPath,
                 Action<Project, MockLogger> action)
         {
-            try {
-#if FEATURE_SYSTEM_CONFIGURATION
-                var projColln = new ProjectCollection();
-#else
-                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
-#endif
+            try
+            {
+                var projColln = GetProjectCollection();
+
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader(extnPathPropertyName, extnDirs));
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
                 var project = projColln.LoadProject(mainProjectPath);
 
                 action(project, logger);
-            } finally {
+            }
+            finally
+            {
                 if (mainProjectPath != null)
                 {
                     FileUtilities.DeleteNoThrow(mainProjectPath);
@@ -949,6 +929,30 @@ private ToolsetConfigurationReader WriteConfigFileAndGetReader(string extnPathPr
             return GetStandardConfigurationReader();
         }
 
+        private ProjectCollection GetProjectCollection(IDictionary<string, string> globalProperties = null)
+        {
+            ProjectCollection projColln;
+
+            if (globalProperties == null)
+            {
+#if FEATURE_SYSTEM_CONFIGURATION
+                projColln = new ProjectCollection();
+#else
+                projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+#endif
+            }
+            else
+            {
+#if FEATURE_SYSTEM_CONFIGURATION
+                projColln = new ProjectCollection(globalProperties);
+#else
+                projColln = new ProjectCollection(globalProperties, loggers: null, ToolsetDefinitionLocations.ConfigurationFile);
+#endif
+            }
+
+            return projColln;
+        }
+
         string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFilePath, string fileContents)
         {
             var extnDir = Path.Combine(ObjectModelHelpers.TempProjectDir, extnDirName);
@@ -958,7 +962,7 @@ string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFile
             return extnDir;
         }
 
-        string GetMainTargetFileContent(string extensionsPathPropertyName="MSBuildExtensionsPath")
+        string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string mainTargetsFileContent = @"
                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
@@ -972,7 +976,7 @@ string GetMainTargetFileContent(string extensionsPathPropertyName="MSBuildExtens
             return String.Format(mainTargetsFileContent, extensionsPathPropertyName);
         }
 
-        string GetExtensionTargetsFileContent1(string extensionsPathPropertyName="MSBuildExtensionsPath")
+        string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent1 = @"
                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
@@ -990,7 +994,7 @@ string GetExtensionTargetsFileContent1(string extensionsPathPropertyName="MSBuil
             return String.Format(extnTargetsFileContent1, extensionsPathPropertyName);
         }
 
-        string GetExtensionTargetsFileContent2(string extensionsPathPropertyName="MSBuildExtensionsPath")
+        string GetExtensionTargetsFileContent2(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent2 = @"
                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
diff --git a/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs b/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
index 2ea0bfc25f1..298cf5ff37f 100644
--- a/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
@@ -10,6 +10,7 @@
 
 using Xunit;
 using System.Collections.Generic;
+using Shouldly;
 
 namespace Microsoft.Build.UnitTests.Evaluation
 {
@@ -35,14 +36,14 @@ IDictionary<string, string> toolsetProperties
                 }
             }
 
-            Assert.True(toolsetProperties.ContainsKey("MSBuildSDKsPath"));
-            Assert.True(toolsetProperties.ContainsKey("RoslynTargetsPath"));
-            Assert.NotEqual(string.Empty, toolsetProperties["MSBuildSDKsPath"]);
-            Assert.NotEqual(string.Empty, toolsetProperties["RoslynTargetsPath"]);
+            toolsetProperties.ShouldContainKey("MSBuildSDKsPath");
+            toolsetProperties.ShouldContainKey("RoslynTargetsPath");
+            toolsetProperties["MSBuildSDKsPath"].ShouldNotBeNullOrEmpty();
+            toolsetProperties["RoslynTargetsPath"].ShouldNotBeNullOrEmpty();
 
-            Assert.False(toolsetProperties.ContainsKey("VCTargetsPath"));
-            Assert.False(toolsetProperties.ContainsKey("MSBuildToolsRoot"));
-            Assert.False(toolsetProperties.ContainsKey("MSBuildExtensionsPath"));
+            toolsetProperties.ShouldNotContainKey("VCTargetsPath");
+            toolsetProperties.ShouldNotContainKey("MSBuildToolsRoot");
+            toolsetProperties.ShouldNotContainKey("MSBuildExtensionsPath");
         }
 
         [Fact]
@@ -62,17 +63,17 @@ IDictionary<string, string> toolsetProperties
                 }
             }
 
-            Assert.True(toolsetProperties.ContainsKey("MSBuildSDKsPath"));
-            Assert.True(toolsetProperties.ContainsKey("RoslynTargetsPath"));
-            Assert.NotEqual(string.Empty, toolsetProperties["MSBuildSDKsPath"]);
-            Assert.NotEqual(string.Empty, toolsetProperties["RoslynTargetsPath"]);
+            toolsetProperties.ShouldContainKey("MSBuildSDKsPath");
+            toolsetProperties.ShouldContainKey("RoslynTargetsPath");
+            toolsetProperties["MSBuildSDKsPath"].ShouldNotBeNullOrEmpty();
+            toolsetProperties["RoslynTargetsPath"].ShouldNotBeNullOrEmpty();
 
-            Assert.True(toolsetProperties.ContainsKey("VCTargetsPath"));
-            Assert.True(toolsetProperties.ContainsKey("MSBuildToolsRoot"));
-            Assert.True(toolsetProperties.ContainsKey("MSBuildExtensionsPath"));
-            Assert.NotEqual(string.Empty, toolsetProperties["VCTargetsPath"]);
-            Assert.NotEqual(string.Empty, toolsetProperties["MSBuildToolsRoot"]);
-            Assert.NotEqual(string.Empty, toolsetProperties["MSBuildExtensionsPath"]);
+            toolsetProperties.ShouldContainKey("VCTargetsPath");
+            toolsetProperties.ShouldContainKey("MSBuildToolsRoot");
+            toolsetProperties.ShouldContainKey("MSBuildExtensionsPath");
+            toolsetProperties["VCTargetsPath"].ShouldNotBeNullOrEmpty();
+            toolsetProperties["MSBuildToolsRoot"].ShouldNotBeNullOrEmpty();
+            toolsetProperties["MSBuildExtensionsPath"].ShouldNotBeNullOrEmpty();
         }
     }
 }
