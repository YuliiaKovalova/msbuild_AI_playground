diff --git a/src/Build/BuildCheck/API/ConfigurationContext.cs b/src/Build/BuildCheck/API/ConfigurationContext.cs
index 54d62fbfb0d..8f06a14717e 100644
--- a/src/Build/BuildCheck/API/ConfigurationContext.cs
+++ b/src/Build/BuildCheck/API/ConfigurationContext.cs
@@ -13,13 +13,13 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public class ConfigurationContext
 {
-    private ConfigurationContext(CustomConfigurationData[] customConfigurationData, BuildAnalyzerConfiguration[] buildAnalyzerConfig)
+    private ConfigurationContext(CustomConfigurationData[] customConfigurationData, BuildAnalyzerConfigurationEffective[] buildAnalyzerConfig)
     {
         CustomConfigurationData = customConfigurationData;
         BuildAnalyzerConfig = buildAnalyzerConfig;
     }
 
-    internal static ConfigurationContext FromDataEnumeration(CustomConfigurationData[] customConfigurationData, BuildAnalyzerConfiguration[] buildAnalyzerConfig)
+    internal static ConfigurationContext FromDataEnumeration(CustomConfigurationData[] customConfigurationData, BuildAnalyzerConfigurationEffective[] buildAnalyzerConfig)
     {
         return new ConfigurationContext(customConfigurationData, buildAnalyzerConfig);
     }
@@ -32,5 +32,5 @@ internal static ConfigurationContext FromDataEnumeration(CustomConfigurationData
     /// <summary>
     /// Infrastructure configuration data
     /// </summary>
-    public IReadOnlyList<BuildAnalyzerConfiguration> BuildAnalyzerConfig { get; init; }
+    public IReadOnlyList<BuildAnalyzerConfigurationEffective> BuildAnalyzerConfig { get; init; }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs
index 30b47c6fb1c..6068cf23818 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 /// <summary>
 /// Counterpart type for BuildAnalyzerConfiguration - with all properties non-nullable
 /// </summary>
-internal sealed class BuildAnalyzerConfigurationEffective
+public sealed class BuildAnalyzerConfigurationEffective
 {
     public BuildAnalyzerConfigurationEffective(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)
     {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 50312b8b928..105960dc4db 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -226,7 +226,7 @@ private void SetupSingleAnalyzer(BuildAnalyzerFactoryContext analyzerFactoryCont
                 CustomConfigurationData[] customConfigData =
                     _configurationProvider.GetCustomConfigurations(projectFullPath, analyzerFactoryContext.RuleIds);
 
-                ConfigurationContext configurationContext = ConfigurationContext.FromDataEnumeration(customConfigData, userConfigs);
+                ConfigurationContext configurationContext = ConfigurationContext.FromDataEnumeration(customConfigData, configurations);
 
                 wrapper = analyzerFactoryContext.Factory(configurationContext);
                 analyzerFactoryContext.MaterializedAnalyzer = wrapper;
