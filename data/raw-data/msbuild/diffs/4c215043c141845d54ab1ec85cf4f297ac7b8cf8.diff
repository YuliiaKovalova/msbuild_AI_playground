diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 18a97638500..d3543174a82 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -768,6 +768,10 @@ static async Task SendDataCoreAsync(Task _, object state)
                                 writeStream.Position = 1;
                                 WriteInt32(writeStream, writeStreamLength - 5);
 
+                                // Add version byte (new)
+                                byte version = packet.Version; // You'd need to add this property to your packet class
+                                writeStream.WriteByte(version);
+
                                 byte[] writeStreamBuffer = writeStream.GetBuffer();
 
                                 for (int i = 0; i < writeStreamLength; i += MaxPacketWriteSize)
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index fe321a68d25..e88c88fb816 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -42,11 +42,6 @@ internal class NodeProviderOutOfProcTaskHost : NodeProviderOutOfProcBase, INodeP
         /// </summary>
         private static string s_baseTaskHostPathArm64;
 
-        /// <summary>
-        /// Store the NET path for MSBuildTaskHost so that we don't have to keep recalculating it.
-        /// </summary>
-        private static string s_baseTaskHostPathNet;
-
         /// <summary>
         /// Store the path for the 32-bit MSBuildTaskHost so that we don't have to keep re-calculating it.
         /// </summary>
@@ -415,7 +410,6 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuild
             s_baseTaskHostPath = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
             s_baseTaskHostPath64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64;
             s_baseTaskHostPathArm64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryArm64;
-            s_baseTaskHostPathNet = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryNET;
 
             ErrorUtilities.VerifyThrowInternalErrorUnreachable(IsHandshakeOptionEnabled(HandshakeOptions.TaskHost));
 
@@ -465,11 +459,17 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuild
             }
             else if (IsHandshakeOptionEnabled(HandshakeOptions.NET))
             {
-                msbuildAssemblyPath = taskHostParameters.TryGetValue(Constants.MSBuildAssemblyPath, out string resolvedAssemblyPath)
-                    ? Path.Combine(resolvedAssemblyPath, Constants.MSBuildAssemblyName)
-                    : Path.Combine(BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory, Constants.MSBuildAssemblyName);
+                if (!string.IsNullOrEmpty(BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory))
+                {
+                    msbuildAssemblyPath = Path.Combine(BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory, Constants.MSBuildAssemblyName);
+                }
+                else if (taskHostParameters.TryGetValue(Constants.MSBuildAssemblyPath, out string resolvedAssemblyPath))
+                {
+                    msbuildAssemblyPath = Path.Combine(resolvedAssemblyPath, Constants.MSBuildAssemblyName);
+                    ValidateNetHostSdkVersion(msbuildAssemblyPath);
+                }
 
-                toolPath = taskHostParameters.TryGetValue(Constants.DotnetHostPath, out string resolvedHostPath) ? resolvedHostPath : s_baseTaskHostPathNet;
+                toolPath = taskHostParameters.TryGetValue(Constants.DotnetHostPath, out string resolvedHostPath) ? resolvedHostPath : null;
             }
             else
             {
@@ -482,6 +482,31 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuild
                 ? (msbuildExcutable: Path.Combine(toolPath, toolName), msbuildAssemblyPath)
                 : (msbuildExcutable: null, null);
 
+            void ValidateNetHostSdkVersion(string path)
+            {
+                const int minimumSdkVersion = 10;
+                const string errorMessage = $"Net TaskHost is only supported in SDK version 10 or later.";
+
+                if (string.IsNullOrEmpty(path))
+                {
+                    ErrorUtilities.ThrowInternalError("SDK path cannot be null or empty.");
+                    return;
+                }
+
+                string lastDirectoryName = Path.GetFileName(path.TrimEnd(Path.DirectorySeparatorChar));
+                int dotIndex = lastDirectoryName.IndexOf('.');
+                if (dotIndex <= 0)
+                {
+                    ErrorUtilities.ThrowInternalError($"Invalid SDK directory format: '{lastDirectoryName}'. {errorMessage}");
+                }
+
+                if (int.TryParse(lastDirectoryName.Substring(0, dotIndex), out int majorVersion)
+                    && majorVersion < minimumSdkVersion)
+                {
+                    ErrorUtilities.ThrowInternalError($"SDK version {majorVersion} is below the minimum required version. {errorMessage}");
+                }
+            }
+
             bool IsHandshakeOptionEnabled(HandshakeOptions option) => (hostContext & option) == option;
         }
 
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 738c40033c9..ec99d2728b2 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -611,7 +611,6 @@ NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorA
 
                 MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;
                 MSBuildToolsDirectory64 = existsCheck(potentialAmd64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, "amd64") : CurrentMSBuildToolsDirectory;
-                MSBuildToolsDirectoryNET = Environment.GetEnvironmentVariable("MSBuildToolsDirectoryNET") ?? "";
                 MSBuildAssemblyDirectory = Environment.GetEnvironmentVariable("MSBuildAssemblyDirectory") ?? "";
 #if RUNTIME_TYPE_NETCORE
                 // Fall back to "current" for any architecture since .NET SDK doesn't
@@ -665,11 +664,6 @@ NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorA
         /// </summary>
         internal string MSBuildToolsDirectoryArm64 { get; }
 
-        /// <summary>
-        /// Full path to the NET tools directory with executable included.
-        /// </summary>
-        internal string MSBuildToolsDirectoryNET { get; }
-
         /// <summary>
         /// Path to the MSBuild assembly.
         /// </summary>
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 42b6a8d6ab6..f2f8fb4c3d9 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -240,6 +240,7 @@ NodePacketType Type
         {
             get;
         }
+
         #endregion
     }
 }
