diff --git a/src/Build/BackEnd/Components/Communications/CloningExtensions.cs b/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
new file mode 100644
index 00000000000..1d9f55105f8
--- /dev/null
+++ b/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
@@ -0,0 +1,42 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Execution;
+
+namespace Microsoft.Build.BackEnd;
+
+internal static class CloningExtensions
+{
+    public static PropertyDictionary<ProjectPropertyInstance> DeepClone(
+        this PropertyDictionary<ProjectPropertyInstance> properties)
+        => new(properties.Select<ProjectPropertyInstance, ProjectPropertyInstance>(p => p.DeepClone()));
+
+    public static Dictionary<TKey, TValue> DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue> dictionary,
+        Func<TValue, TValue> valueClone,
+        IEqualityComparer<TKey> comparer) where TKey : notnull
+        => dictionary.DeepClone(null, valueClone, comparer);
+
+    public static Dictionary<TKey, TValue> DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue> dictionary,
+        Func<TKey, TKey> keyClone,
+        IEqualityComparer<TKey> comparer) where TKey : notnull
+        => dictionary.DeepClone(keyClone, null, comparer);
+
+    public static Dictionary<TKey, TValue> DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue> dictionary,
+        Func<TKey, TKey>? keyClone,
+        Func<TValue, TValue>? valueClone,
+        IEqualityComparer<TKey> comparer) where TKey : notnull
+        => dictionary.ToDictionary(
+        p => (keyClone ?? Identity)(p.Key),
+        p => (valueClone ?? Identity)(p.Value),
+        comparer);
+
+    private static T Identity<T>(T value) => value;
+}
+
diff --git a/src/Build/Definition/ProjectImportPathMatch.cs b/src/Build/Definition/ProjectImportPathMatch.cs
index 60e07850b99..7e739caa1b8 100644
--- a/src/Build/Definition/ProjectImportPathMatch.cs
+++ b/src/Build/Definition/ProjectImportPathMatch.cs
@@ -14,6 +14,10 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal class ProjectImportPathMatch : ITranslatable
     {
+        private string _propertyName;
+        private string _msBuildPropertyFormat;
+        private List<string> _searchPaths;
+
         /// <summary>
         /// ProjectImportPathMatch instance representing no fall-back
         /// </summary>
@@ -24,9 +28,9 @@ internal ProjectImportPathMatch(string propertyName, List<string> searchPaths)
             ErrorUtilities.VerifyThrowArgumentNull(propertyName, nameof(propertyName));
             ErrorUtilities.VerifyThrowArgumentNull(searchPaths, nameof(searchPaths));
 
-            PropertyName = propertyName;
-            SearchPaths = searchPaths;
-            MsBuildPropertyFormat = $"$({PropertyName})";
+            _propertyName = propertyName;
+            _searchPaths = searchPaths;
+            _msBuildPropertyFormat = $"$({PropertyName})";
         }
 
         public ProjectImportPathMatch(ITranslator translator)
@@ -34,26 +38,29 @@ public ProjectImportPathMatch(ITranslator translator)
             ((ITranslatable)this).Translate(translator);
         }
 
+        internal ProjectImportPathMatch DeepClone()
+            => new ProjectImportPathMatch(_propertyName, new List<string>(_searchPaths));
+
         /// <summary>
         /// String representation of the property reference - eg. "MSBuildExtensionsPath32"
         /// </summary>
-        public string PropertyName;
+        public string PropertyName => _propertyName;
 
         /// <summary>
         /// Returns the corresponding property name - eg. "$(MSBuildExtensionsPath32)"
         /// </summary>
-        public string MsBuildPropertyFormat;
+        public string MsBuildPropertyFormat => _msBuildPropertyFormat;
 
         /// <summary>
         /// Enumeration of the search paths for the property.
         /// </summary>
-        public List<string> SearchPaths;
+        public List<string> SearchPaths => _searchPaths;
 
         public void Translate(ITranslator translator)
         {
-            translator.Translate(ref PropertyName);
-            translator.Translate(ref MsBuildPropertyFormat);
-            translator.Translate(ref SearchPaths);
+            translator.Translate(ref _propertyName);
+            translator.Translate(ref _msBuildPropertyFormat);
+            translator.Translate(ref _searchPaths);
         }
 
         /// <summary>
diff --git a/src/Build/Definition/SubToolset.cs b/src/Build/Definition/SubToolset.cs
index 95cf1aa153e..c74a75fdd13 100644
--- a/src/Build/Definition/SubToolset.cs
+++ b/src/Build/Definition/SubToolset.cs
@@ -50,6 +50,9 @@ private SubToolset(ITranslator translator)
             ((ITranslatable)this).Translate(translator);
         }
 
+        internal SubToolset DeepClone()
+            => new SubToolset(_subToolsetVersion, _properties.DeepClone());
+
         /// <summary>
         /// VisualStudioVersion that corresponds to this subtoolset
         /// </summary>
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index ec59aaff465..28a66373972 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -8,7 +8,6 @@
 using System.IO;
 using System.Linq;
 using System.Xml;
-
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
@@ -190,11 +189,6 @@ public class Toolset : ITranslatable
         /// </summary>
         private Expander<ProjectPropertyInstance, ProjectItemInstance> _expander;
 
-        /// <summary>
-        /// Bag of properties for the expander to expand the properties and items in the using tasks files
-        /// </summary>
-        private PropertyDictionary<ProjectPropertyInstance> _propertyBag;
-
         /// <summary>
         /// SubToolsets that map to this toolset.
         /// </summary>
@@ -370,6 +364,12 @@ private Toolset(ITranslator translator)
             ((ITranslatable)this).Translate(translator);
         }
 
+        /// <summary>
+        ///  Private constructor for cloning.
+        /// </summary>
+        private Toolset()
+        { }
+
         /// <summary>
         /// Returns a ProjectImportPathMatch struct for the first property found in the expression for which
         /// project import search paths is enabled.
@@ -609,6 +609,25 @@ internal Dictionary<MSBuildExtensionsPathReferenceKind, IList<string>> MSBuildEx
             get; set;
         }
 
+        public Toolset DeepClone()
+            => new()
+            {
+                _toolsVersion = _toolsVersion,
+                _toolsPath = _toolsPath,
+                _properties = _properties.DeepClone(),
+                _environmentProperties = _environmentProperties.DeepClone(),
+                _globalProperties = _globalProperties.DeepClone(),
+                _subToolsets = _subToolsets.DeepClone(v => v.DeepClone(), StringComparer.OrdinalIgnoreCase),
+                _overrideTasksPath = _overrideTasksPath,
+                _defaultOverrideToolsVersion = _defaultOverrideToolsVersion,
+                _propertySearchPathsTable =
+                    _propertySearchPathsTable.DeepClone(v => v.DeepClone(), StringComparer.OrdinalIgnoreCase),
+                _defaultTasksRegistrationAttempted = _defaultTasksRegistrationAttempted,
+                _overrideTasksRegistrationAttempted = _overrideTasksRegistrationAttempted,
+                _defaultTaskRegistry = _defaultTaskRegistry?.DeepClone(),
+                _overrideTaskRegistry = _overrideTaskRegistry?.DeepClone()
+            };
+
         /// <summary>
         /// Function for serialization.
         /// </summary>
@@ -901,79 +920,78 @@ private void RegisterDefaultTasks(ILoggingService loggingServices, BuildEventCon
         /// </summary>
         private void InitializeProperties(ILoggingService loggingServices, BuildEventContext buildEventContext)
         {
+            if (_expander != null)
+            {
+                return;
+            }
+
             try
             {
-                if (_propertyBag == null)
-                {
-                    List<ProjectPropertyInstance> reservedProperties = new List<ProjectPropertyInstance>();
+                List<ProjectPropertyInstance> reservedProperties = new List<ProjectPropertyInstance>();
 
-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.binPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));
-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsVersion, ToolsVersion, mayBeReserved: true));
+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.binPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));
+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsVersion, ToolsVersion, mayBeReserved: true));
 
-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));
-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));
-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));
+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));
+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));
+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));
 
-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,
+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,
 #if RUNTIME_TYPE_NETCORE
-                        Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core",
+                    Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core",
 #elif MONO
-                        NativeMethodsShared.IsMono ? "Mono" : "Full");
+                    NativeMethodsShared.IsMono ? "Mono" : "Full");
 #else
-                        "Full",
+                    "Full",
 #endif
-                        mayBeReserved: true));
+                    mayBeReserved: true));
 
 
-                    // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the
-                    // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.
-                    int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;
+                // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the
+                // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.
+                int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;
 
-                    // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the
-                    // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.
-                    string subToolsetVersion = this.GenerateSubToolsetVersion();
-                    SubToolset subToolset;
-                    ICollection<ProjectPropertyInstance> subToolsetProperties = null;
+                // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the
+                // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.
+                string subToolsetVersion = this.GenerateSubToolsetVersion();
+                SubToolset subToolset;
+                ICollection<ProjectPropertyInstance> subToolsetProperties = null;
 
-                    if (subToolsetVersion != null)
+                if (subToolsetVersion != null)
+                {
+                    if (SubToolsets.TryGetValue(subToolsetVersion, out subToolset))
                     {
-                        if (SubToolsets.TryGetValue(subToolsetVersion, out subToolset))
-                        {
-                            subToolsetProperties = subToolset.Properties.Values;
-                            count += subToolsetProperties.Count;
-                        }
+                        subToolsetProperties = subToolset.Properties.Values;
+                        count += subToolsetProperties.Count;
                     }
+                }
 
-                    _propertyBag = new PropertyDictionary<ProjectPropertyInstance>(count);
-
-                    // Should be imported in the same order as in the evaluator:
-                    // - Environment
-                    // - Toolset
-                    // - Subtoolset (if any)
-                    // - Global
-                    _propertyBag.ImportProperties(_environmentProperties);
+                PropertyDictionary<ProjectPropertyInstance> propertyBag = new PropertyDictionary<ProjectPropertyInstance>(count);
 
-                    _propertyBag.ImportProperties(reservedProperties);
+                // Should be imported in the same order as in the evaluator:
+                // - Environment
+                // - Toolset
+                // - Subtoolset (if any)
+                // - Global
+                propertyBag.ImportProperties(_environmentProperties);
 
-                    _propertyBag.ImportProperties(Properties.Values);
+                propertyBag.ImportProperties(reservedProperties);
 
-                    if (subToolsetVersion != null)
-                    {
-                        _propertyBag.Set(ProjectPropertyInstance.Create(Constants.SubToolsetVersionPropertyName, subToolsetVersion));
-                    }
+                propertyBag.ImportProperties(Properties.Values);
 
-                    if (subToolsetProperties != null)
-                    {
-                        _propertyBag.ImportProperties(subToolsetProperties);
-                    }
-
-                    _propertyBag.ImportProperties(_globalProperties);
+                if (subToolsetVersion != null)
+                {
+                    propertyBag.Set(ProjectPropertyInstance.Create(Constants.SubToolsetVersionPropertyName, subToolsetVersion));
                 }
 
-                if (_expander == null)
+                if (subToolsetProperties != null)
                 {
-                    _expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(_propertyBag, FileSystems.Default);
+                    propertyBag.ImportProperties(subToolsetProperties);
                 }
+
+                propertyBag.ImportProperties(_globalProperties);
+
+                _expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(propertyBag, FileSystems.Default);
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 7619850d4a7..1804d2bafa9 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -561,9 +561,12 @@ internal ProjectInstance(Evaluation.Project.Data data, string directory, string
             this.CreateTargetsSnapshot(data.Targets, data.DefaultTargets, data.InitialTargets, data.BeforeTargets, data.AfterTargets);
             this.CreateImportsSnapshot(data.ImportClosure, data.ImportClosureWithDuplicates);
 
-            this.Toolset = data.Toolset; // UNDONE: This isn't immutable, should be cloned or made immutable; it currently has a pointer to project collection
             this.SubToolsetVersion = data.SubToolsetVersion;
-            this.TaskRegistry = data.TaskRegistry;
+            this.TaskRegistry = data.TaskRegistry?.DeepClone();
+            // If the task registry uses toolset identical to the one in data instance - deep clone it just once.
+            this.Toolset = data.TaskRegistry?.Toolset == data.Toolset
+                ? this.TaskRegistry?.Toolset
+                : data.Toolset.DeepClone();
 
             this.ProjectRootElementCache = data.Project.ProjectCollection.ProjectRootElementCache;
 
@@ -641,11 +644,12 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject
                     ProjectItemDefinitionInstance>)this).AfterTargets = CreateCloneDictionary(
                     ((IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance,
                         ProjectItemDefinitionInstance>)that).AfterTargets, StringComparer.OrdinalIgnoreCase);
-                this.TaskRegistry =
-                    that.TaskRegistry; // UNDONE: This isn't immutable, should be cloned or made immutable; it currently has a pointer to project collection
 
-                // These are immutable so we don't need to clone them:
-                this.Toolset = that.Toolset;
+                this.TaskRegistry = that.TaskRegistry.DeepClone();
+                // If the task registry uses toolset identical to the one in project instance - deep clone it just once.
+                this.Toolset = that.TaskRegistry?.Toolset == that.Toolset
+                    ? this.TaskRegistry?.Toolset
+                    : that.Toolset.DeepClone();
                 this.SubToolsetVersion = that.SubToolsetVersion;
                 _targets = that._targets;
                 _itemDefinitions = that._itemDefinitions;
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 33cf3ae1322..ef69ad2dafc 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -6,6 +6,7 @@
 using System.Collections.ObjectModel;
 using System.Diagnostics;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
@@ -742,12 +743,14 @@ private RegisteredTaskRecord GetMatchingRegistration(
         /// <summary>
         /// An object representing the identity of a task -- not just task name, but also
         /// the set of identity parameters
+        /// It is immutable - so it doesn't need a DeepClone method.
         /// </summary>
         [DebuggerDisplay("{Name} ParameterCount = {TaskIdentityParameters.Count}")]
         internal class RegisteredTaskIdentity : ITranslatable
         {
+            // Those are effectively readonly. They cannot be made readonly because of the ITranslatable interface.
             private string _name;
-            private IDictionary<string, string> _taskIdentityParameters;
+            private ReadOnlyDictionary<string, string> _taskIdentityParameters;
 
             /// <summary>
             /// Constructor
@@ -757,24 +760,24 @@ internal RegisteredTaskIdentity(string name, IDictionary<string, string> taskIde
                 _name = name;
 
                 // The ReadOnlyDictionary is a *wrapper*, the Dictionary is the copy.
-                _taskIdentityParameters = taskIdentityParameters == null ? null : new ReadOnlyDictionary<string, string>(CreateTaskIdentityParametersDictionary(taskIdentityParameters));
+                _taskIdentityParameters = taskIdentityParameters == null ? null : CreateTaskIdentityParametersDictionary(taskIdentityParameters);
             }
 
-            private static IDictionary<string, string> CreateTaskIdentityParametersDictionary(IDictionary<string, string> initialState = null, int? initialCount = null)
+            private static ReadOnlyDictionary<string, string> CreateTaskIdentityParametersDictionary(IDictionary<string, string> initialState = null, int? initialCount = null)
             {
                 ErrorUtilities.VerifyThrowInvalidOperation(initialState == null || initialCount == null, "at most one can be non-null");
 
                 if (initialState != null)
                 {
-                    return new Dictionary<string, string>(initialState, StringComparer.OrdinalIgnoreCase);
+                    return new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(initialState, StringComparer.OrdinalIgnoreCase));
                 }
 
                 if (initialCount != null)
                 {
-                    return new Dictionary<string, string>(initialCount.Value, StringComparer.OrdinalIgnoreCase);
+                    return new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(initialCount.Value, StringComparer.OrdinalIgnoreCase));
                 }
 
-                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                return new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));
             }
 
             public RegisteredTaskIdentity()
@@ -792,7 +795,7 @@ public string Name
             /// <summary>
             /// The identity parameters
             /// </summary>
-            public IDictionary<string, string> TaskIdentityParameters
+            public IReadOnlyDictionary<string, string> TaskIdentityParameters
             {
                 get { return _taskIdentityParameters; }
             }
@@ -936,7 +939,7 @@ public int GetHashCode(RegisteredTaskIdentity obj)
                 /// Internal so that RegisteredTaskRecord can use this function in its determination of whether the task factory
                 /// supports a certain task identity.
                 /// </summary>
-                private static bool IdentityParametersMatch(IDictionary<string, string> x, IDictionary<string, string> y, bool exactMatchRequired)
+                private static bool IdentityParametersMatch(IReadOnlyDictionary<string, string> x, IReadOnlyDictionary<string, string> y, bool exactMatchRequired)
                 {
                     if (x == null && y == null)
                     {
@@ -1713,6 +1716,15 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                     }
                 }
 
+                public ParameterGroupAndTaskElementRecord DeepClone()
+                    => new()
+                    {
+                        _inlineTaskXmlBody = _inlineTaskXmlBody,
+                        _taskBodyEvaluated = _taskBodyEvaluated,
+                        _usingTaskParameters = _usingTaskParameters?
+                            .DeepClone(v => v.DeepClone(), StringComparer.OrdinalIgnoreCase)
+                    };
+
                 public void Translate(ITranslator translator)
                 {
                     translator.Translate(ref _inlineTaskXmlBody);
@@ -1758,6 +1770,19 @@ private static void TranslatorForTaskParameterValue(ITranslator translator, ref
                 }
             }
 
+            public RegisteredTaskRecord DeepClone()
+                => new()
+                {
+                    // task identity is immutable, so we can just copy the reference
+                    _taskIdentity = _taskIdentity,
+                    _registeredName = _registeredName,
+                    // AssemblyLoadInfo is immutable, so we can just copy the reference
+                    _taskFactoryAssemblyLoadInfo = _taskFactoryAssemblyLoadInfo,
+                    _taskFactory = _taskFactory,
+                    _parameterGroupAndTaskBody = _parameterGroupAndTaskBody.DeepClone(),
+                    _taskFactoryParameters = new Dictionary<string, string>(_taskFactoryParameters)
+                };
+
             public void Translate(ITranslator translator)
             {
                 translator.Translate(ref _taskIdentity);
@@ -1784,6 +1809,15 @@ internal static RegisteredTaskRecord FactoryForDeserialization(ITranslator trans
             }
         }
 
+        public TaskRegistry DeepClone()
+            => new()
+            {
+                _toolset = _toolset.DeepClone(),
+                _taskRegistrations = this._taskRegistrations?.DeepClone(
+                    v => v.Select(i => i.DeepClone()).ToList(),
+                    RegisteredTaskIdentity.RegisteredTaskIdentityComparer.Exact)
+            };
+
         public void Translate(ITranslator translator)
         {
             translator.Translate(ref _toolset, Toolset.FactoryForDeserialization);
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 1bc5e67a847..7a98a8c530f 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -151,6 +151,7 @@
     <Compile Include="BackEnd\Components\Caching\ConfigCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\Caching\ResultsCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\ProjectCache\*.cs" />
+    <Compile Include="BackEnd\Components\Communications\CloningExtensions.cs" />
     <Compile Include="BackEnd\Components\Communications\CurrentHost.cs" />
     <Compile Include="BackEnd\Components\Communications\SerializationContractInitializer.cs" />
     <Compile Include="BackEnd\Components\Communications\ServerNodeEndpointOutOfProc.cs" />
diff --git a/src/Framework/TaskPropertyInfo.cs b/src/Framework/TaskPropertyInfo.cs
index 73e1f817e22..7d9e57b8b19 100644
--- a/src/Framework/TaskPropertyInfo.cs
+++ b/src/Framework/TaskPropertyInfo.cs
@@ -32,25 +32,34 @@ public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool req
             IsAssignableToITask = typeof(ITaskItem).IsAssignableFrom(elementType);
         }
 
+        internal TaskPropertyInfo DeepClone()
+        {
+            return new TaskPropertyInfo(Name, PropertyType, Output, Required)
+            {
+                IsAssignableToITask = IsAssignableToITask,
+                // do not set Initialized - so that Log and LogItemMetadata can be initialized as appropriate
+            };
+        }
+
         /// <summary>
         /// The type of the property
         /// </summary>
-        public Type PropertyType { get; private set; }
+        public Type PropertyType { get; private init; }
 
         /// <summary>
         /// Name of the property
         /// </summary>
-        public string Name { get; private set; }
+        public string Name { get; private init; }
 
         /// <summary>
         /// This task parameter is an output parameter (analogous to [Output] attribute)
         /// </summary>
-        public bool Output { get; private set; }
+        public bool Output { get; private init; }
 
         /// <summary>
         /// This task parameter is required (analogous to the [Required] attribute)
         /// </summary>
-        public bool Required { get; private set; }
+        public bool Required { get; private init; }
 
         /// <summary>
         /// This task parameter should be logged when LogTaskInputs is set. Defaults to true.
@@ -67,7 +76,7 @@ public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool req
         /// </summary>
         internal bool Initialized = false;
 
-        internal bool IsValueTypeOutputParameter { get; private set; }
-        internal bool IsAssignableToITask { get; set; }
+        internal bool IsValueTypeOutputParameter { get; private init; }
+        protected internal bool IsAssignableToITask { get; protected init; }
     }
 }
