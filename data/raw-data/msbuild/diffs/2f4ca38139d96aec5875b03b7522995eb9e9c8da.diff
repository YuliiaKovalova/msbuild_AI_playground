diff --git a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
index 237fcf00856..e46a84eb0e4 100644
--- a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
diff --git a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
index 791db350934..738978a9e07 100644
--- a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Unittest;
 using Shouldly;
 using Xunit;
 using static Microsoft.Build.Unittest.BuildResultUtilities;
@@ -279,25 +280,7 @@ private void AssertBuildResultsEquivalent(BuildResult inputResult, BuildResult a
             aggregatedBuildResult.NodeRequestId.ShouldBe(BuildRequest.InvalidNodeRequestId);
             aggregatedBuildResult.SubmissionId.ShouldBe(BuildEventContext.InvalidSubmissionId);
 
-            inputResult.InitialTargets.ShouldBe(aggregatedBuildResult.InitialTargets);
-            inputResult.DefaultTargets.ShouldBe(aggregatedBuildResult.DefaultTargets);
-            inputResult.CircularDependency.ShouldBe(aggregatedBuildResult.CircularDependency);
-            inputResult.Exception.ShouldBe(aggregatedBuildResult.Exception);
-            inputResult.OverallResult.ShouldBe(aggregatedBuildResult.OverallResult);
-            inputResult.ProjectStateAfterBuild.ShouldBe(aggregatedBuildResult.ProjectStateAfterBuild);
-
-            Helpers.AssertDictionariesEqual(inputResult.ResultsByTarget, aggregatedBuildResult.ResultsByTarget, (a, b) =>
-            {
-                a.Key.ShouldBe(b.Key);
-
-                a.Value.Exception.ShouldBe(b.Value.Exception);
-                a.Value.Items.ShouldBe(b.Value.Items);
-                a.Value.ResultCode.ShouldBe(b.Value.ResultCode);
-
-                a.Value.WorkUnitResult.ActionCode.ShouldBe(b.Value.WorkUnitResult.ActionCode);
-                a.Value.WorkUnitResult.Exception.ShouldBe(b.Value.WorkUnitResult.Exception);
-                a.Value.WorkUnitResult.ResultCode.ShouldBe(b.Value.WorkUnitResult.ResultCode);
-            });
+            SdkUtilities.EngineHelpers.AssertBuildResultsEqual(inputResult, aggregatedBuildResult);
         }
 
         private void AssertConfigurationsEquivalent(BuildRequestConfiguration inputConfiguration, BuildRequestConfiguration aggregatedConfig)
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index 9cd1fe75b02..346da6846b9 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Execution;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 8660f8d86fc..93abec24663 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -20,6 +20,7 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
diff --git a/src/Build.UnitTests/InternalEngineHelpers.cs b/src/Build.UnitTests/InternalEngineHelpers.cs
index 2a4de9d485d..aa0ae0c34be 100644
--- a/src/Build.UnitTests/InternalEngineHelpers.cs
+++ b/src/Build.UnitTests/InternalEngineHelpers.cs
@@ -7,8 +7,13 @@
 using System.Linq;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Definition;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 using Microsoft.Build.Evaluation.Context;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.BackEnd;
+using Shouldly;
 using SdkResolverContext = Microsoft.Build.Framework.SdkResolverContext;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 using SdkResultFactory = Microsoft.Build.Framework.SdkResultFactory;
@@ -143,5 +148,40 @@ public override Framework.SdkResult Resolve(SdkReference sdkReference, SdkResolv
                     : factory.IndicateFailure(new[] { $"Not in {nameof(_mapping)}" });
             }
         }
+
+        internal static class EngineHelpers
+        {
+            internal static void AssertBuildResultsEqual(BuildResult actualBuildResult, BuildResult expectedBuildResult)
+            {
+                actualBuildResult.InitialTargets.ShouldBe(expectedBuildResult.InitialTargets);
+                actualBuildResult.DefaultTargets.ShouldBe(expectedBuildResult.DefaultTargets);
+                actualBuildResult.CircularDependency.ShouldBe(expectedBuildResult.CircularDependency);
+                actualBuildResult.Exception.ShouldBe(expectedBuildResult.Exception);
+                actualBuildResult.OverallResult.ShouldBe(expectedBuildResult.OverallResult);
+                actualBuildResult.ProjectStateAfterBuild.ShouldBe(expectedBuildResult.ProjectStateAfterBuild);
+
+                Helpers.AssertDictionariesEqual(
+                    actualBuildResult.ResultsByTarget,
+                    expectedBuildResult.ResultsByTarget,
+                    (a, b) =>
+                    {
+                        a.Key.ShouldBe(b.Key);
+
+                        AssertTargetResultsEqual(a.Value, b.Value);
+                    });
+            }
+
+            internal static void AssertTargetResultsEqual(TargetResult a, TargetResult b)
+            {
+                TranslationHelpers.CompareExceptions(a.Exception, b.Exception).ShouldBeTrue();
+                TranslationHelpers.CompareCollections(a.Items, b.Items, TaskItemComparer.Instance).ShouldBeTrue();
+
+                a.ResultCode.ShouldBe(b.ResultCode);
+
+                a.WorkUnitResult.ActionCode.ShouldBe(b.WorkUnitResult.ActionCode);
+                a.WorkUnitResult.Exception.ShouldBe(b.WorkUnitResult.Exception);
+                a.WorkUnitResult.ResultCode.ShouldBe(b.WorkUnitResult.ResultCode);
+            }
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TaskItemComparer.cs b/src/Build.UnitTests/TestComparers/TaskItemComparer.cs
similarity index 97%
rename from src/Build.UnitTests/BackEnd/TaskItemComparer.cs
rename to src/Build.UnitTests/TestComparers/TaskItemComparer.cs
index 61e423692eb..cc089195da3 100644
--- a/src/Build.UnitTests/BackEnd/TaskItemComparer.cs
+++ b/src/Build.UnitTests/TestComparers/TaskItemComparer.cs
@@ -5,7 +5,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.UnitTests.BackEnd
+namespace Microsoft.Build.Engine.UnitTests.TestComparers
 {
     /// <summary>
     /// Implementation of IComparer on ITaskItems used for testing.
