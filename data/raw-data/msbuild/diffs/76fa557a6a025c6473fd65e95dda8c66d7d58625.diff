diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index e8d6a3610dc..99aadd558eb 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -77,7 +77,7 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string>? c
 
         if (!isParsed)
         {
-            ThrowIncorectValueException(key, stringValue);
+            ThrowIncorrectValueException(key, stringValue);
         }
 
         return isParsed;
@@ -102,13 +102,13 @@ private static bool TryExtractValue(string key, Dictionary<string, string>? conf
         
         if (!isParsed)
         {
-            ThrowIncorectValueException(key, stringValue);
+            ThrowIncorrectValueException(key, stringValue);
         }
 
         return isParsed;
     }
 
-    private static void ThrowIncorectValueException(string key, string value)
+    private static void ThrowIncorrectValueException(string key, string value)
     {
         throw new BuildCheckConfigurationException(
                 $"Incorrect value provided in config for key {key}: '{value}'",
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index b71b9f73d6a..d56f0c7834e 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -125,7 +125,7 @@ internal BuildAnalyzerConfiguration[] GetUserConfigurations(
     /// <param name="projectFullPath"></param>
     /// <param name="ruleIds"></param>
     /// <returns></returns>
-    public  CustomConfigurationData[] GetCustomConfigurations(
+    public CustomConfigurationData[] GetCustomConfigurations(
         string projectFullPath,
         IReadOnlyList<string> ruleIds)
         => FillConfiguration(projectFullPath, ruleIds, GetCustomConfiguration);
@@ -215,9 +215,9 @@ private Dictionary<string, string> FetchEditorConfigRules(string projectFullPath
 
         // clear the dictionary from the key-value pairs not BuildCheck related and
         // store the data so there is no need to parse the .editorconfigs all over again
-        _editorConfigData[projectFullPath] = FilterDictionaryByKeys($"{BuildCheck_ConfigurationKey}.", config);
-
-        return _editorConfigData[projectFullPath];
+        Dictionary<string, string> result = FilterDictionaryByKeys($"{BuildCheck_ConfigurationKey}.", config);
+        _editorConfigData[projectFullPath] = result;
+        return result;
     }
 
     internal Dictionary<string, string> GetConfiguration(string projectFullPath, string ruleId)
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
index 029918bf122..a154d52033b 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -15,18 +15,18 @@
 
 namespace Microsoft.Build.BuildCheck.Infrastructure.EditorConfig
 {
-    internal class EditorConfigParser
+    internal sealed class EditorConfigParser
     {
         private const string EditorconfigFile = ".editorconfig";
 
         /// <summary>
         /// Cache layer of the parsed editor configs the key is the path to the .editorconfig file.
         /// </summary>
-        private Dictionary<string, EditorConfigFile> _editorConfigFileCache = new Dictionary<string, EditorConfigFile>(StringComparer.InvariantCultureIgnoreCase);
+        private readonly Dictionary<string, EditorConfigFile> _editorConfigFileCache = new Dictionary<string, EditorConfigFile>(StringComparer.InvariantCultureIgnoreCase);
 
         internal Dictionary<string, string> Parse(string filePath)
         {
-            var editorConfigs = EditorConfigFileDiscovery(filePath);
+            var editorConfigs = DiscoverEditorConfigFiles(filePath);
             return MergeEditorConfigFiles(editorConfigs, filePath);
         }
 
@@ -34,7 +34,7 @@ internal Dictionary<string, string> Parse(string filePath)
         /// Fetches the list of EditorconfigFile ordered from the nearest to the filePath.
         /// </summary>
         /// <param name="filePath"></param>
-        internal IEnumerable<EditorConfigFile> EditorConfigFileDiscovery(string filePath)
+        internal List<EditorConfigFile> DiscoverEditorConfigFiles(string filePath)
         {
             var editorConfigDataFromFilesList = new List<EditorConfigFile>();
 
@@ -43,17 +43,15 @@ internal IEnumerable<EditorConfigFile> EditorConfigFileDiscovery(string filePath
 
             while (editorConfigFilePath != string.Empty)
             {
-                EditorConfigFile editorConfig;
-
-                if (_editorConfigFileCache.ContainsKey(editorConfigFilePath))
-                {
-                    editorConfig = _editorConfigFileCache[editorConfigFilePath];
-                }
-                else
+                if (!_editorConfigFileCache.TryGetValue(editorConfigFilePath, out var editorConfig))
                 {
-                    var editorConfigfileContent = File.ReadAllText(editorConfigFilePath);
-                    editorConfig = EditorConfigFile.Parse(editorConfigfileContent);
-                    _editorConfigFileCache[editorConfigFilePath] = editorConfig;
+                    using (FileStream stream = new FileStream(editorConfigFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))
+                    {
+                        using StreamReader sr = new StreamReader(editorConfigFilePath);
+                        var editorConfigfileContent = sr.ReadToEnd();
+                        editorConfig = EditorConfigFile.Parse(editorConfigfileContent);
+                        _editorConfigFileCache[editorConfigFilePath] = editorConfig;
+                    }
                 }
 
                 editorConfigDataFromFilesList.Add(editorConfig);
@@ -77,31 +75,29 @@ internal IEnumerable<EditorConfigFile> EditorConfigFileDiscovery(string filePath
         /// </summary>
         /// <param name="editorConfigFiles"></param>
         /// <param name="filePath"></param>
-        internal Dictionary<string, string> MergeEditorConfigFiles(IEnumerable<EditorConfigFile> editorConfigFiles, string filePath)
+        internal Dictionary<string, string> MergeEditorConfigFiles(List<EditorConfigFile> editorConfigFiles, string filePath)
         {
             var resultingDictionary = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
+            editorConfigFiles.Reverse();
 
-            if (editorConfigFiles.Any())
+            foreach (var configData in editorConfigFiles)
             {
-                foreach (var configData in editorConfigFiles.Reverse())
+                foreach (var section in configData.NamedSections)
                 {
-                    foreach (var section in configData.NamedSections)
+                    SectionNameMatcher? sectionNameMatcher = TryCreateSectionNameMatcher(section.Name);
+                    if (sectionNameMatcher != null)
                     {
-                        SectionNameMatcher? sectionNameMatcher = TryCreateSectionNameMatcher(section.Name);
-                        if (sectionNameMatcher != null)
+                        if (sectionNameMatcher.Value.IsMatch(NormalizeWithForwardSlash(filePath)))
                         {
-                            if (sectionNameMatcher.Value.IsMatch(NormalizeWithForwardSlash(filePath)))
+                            foreach (var property in section.Properties)
                             {
-                                foreach (var property in section.Properties)
-                                {
-                                    resultingDictionary[property.Key] = property.Value;
-                                }
+                                resultingDictionary[property.Key] = property.Value;
                             }
                         }
                     }
                 }
             }
-
+            
             return resultingDictionary;
         }
 
diff --git a/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs b/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs
index 2c1a65018a2..968ca624408 100644
--- a/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs
+++ b/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs
@@ -87,7 +87,7 @@ public void EditorconfigFileDiscovery_RootTrue()
         """);
 
         var parser = new EditorConfigParser();
-        var listOfEditorConfigFile = parser.EditorConfigFileDiscovery(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj") ).ToList();
+        var listOfEditorConfigFile = parser.DiscoverEditorConfigFiles(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj") ).ToList();
         // should be one because root=true so we do not need to go further
         listOfEditorConfigFile.Count.ShouldBe(1);
         listOfEditorConfigFile[0].IsRoot.ShouldBeTrue();
@@ -116,7 +116,7 @@ public void EditorconfigFileDiscovery_RootFalse()
         """);
 
         var parser = new EditorConfigParser();
-        var listOfEditorConfigFile = parser.EditorConfigFileDiscovery(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj")).ToList();
+        var listOfEditorConfigFile = parser.DiscoverEditorConfigFiles(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj")).ToList();
 
         listOfEditorConfigFile.Count.ShouldBe(2);
         listOfEditorConfigFile[0].IsRoot.ShouldBeFalse();
