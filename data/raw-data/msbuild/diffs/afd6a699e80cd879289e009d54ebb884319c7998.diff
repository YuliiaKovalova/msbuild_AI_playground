diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index fb60b70e1e1..5423bcf0286 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -65,6 +65,11 @@ protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, I
                 DecorateItemsWithMetadata(_itemsToUpdate.ToImmutableList(), _metadata, _needToExpandMetadataForEachItem);
             }
 
+            /// <summary>
+            /// Apply the Update operation to the item if it matches.
+            /// </summary>
+            /// <param name="item">The item to check for a match.</param>
+            /// <returns>The updated item.</returns>
             internal ItemData UpdateItem(ItemData item)
             {
                 if (_conditionResult)
@@ -93,6 +98,9 @@ private ItemData UpdateItem(ItemData item, Dictionary<string, I> capturedItemsFr
                 return clonedData;
             }
 
+            /// <summary>
+            /// This sets the function used to determine whether an item matches an item spec.
+            /// </summary>
             private void SetMatchItemSpec()
             {
                 if (ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType))
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 89d83278474..e451f9f2b99 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -291,6 +291,9 @@ public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> glob
                 }
             }
 
+            /// <summary>
+            /// Applies uncached item operations (include, remove, update) in order.
+            /// </summary>
             private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyItemList, ImmutableHashSet<string> globsToIgnore)
             {
                 // Stack of operations up to the first one that's cached (exclusive)
@@ -374,7 +377,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                         }
                         if (!addToBatch)
                         {
-                            // Remove items added before realizing we couldn't skip the item list
+                            // Remove items added before realizing we couldn't skip the current item list
                             for (int j = 0; j < i; j++)
                             {
                                 itemsWithNoWildcards.Remove(currentList._memoizedOperation.Operation.Spec.Fragments[j].TextFragment);
@@ -411,6 +414,9 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
 
             private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOperation> itemsWithNoWildcards, ImmutableList<ItemData>.Builder items)
             {
+#if DEBUG
+                ErrorUtilities.VerifyThrow(itemsWithNoWildcards.All(fragment => !MSBuildConstants.CharactersForExpansion.Any(fragment.Key.Contains)), $"{nameof(itemsWithNoWildcards)} should not contain any text fragments with wildcards.");
+#endif
                 if (itemsWithNoWildcards.Count > 0)
                 {
                     for (int i = 0; i < items.Count; i++)
