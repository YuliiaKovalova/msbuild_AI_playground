diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 460f70e9f5f..1deaf2d2230 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -5,8 +5,10 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
+using System.Text;
 using System.Threading;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
@@ -34,6 +36,8 @@ internal sealed class LiveLogger : INodeLogger
 
     private readonly List<string> _nodeStringBuffer = new();
 
+    private Encoding? _originalOutputEncoding;
+
     public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
     public string Parameters { get => ""; set { } }
 
@@ -78,6 +82,9 @@ public void Initialize(IEventSource eventSource)
         eventSource.WarningRaised += new BuildWarningEventHandler(WarningRaised);
         eventSource.ErrorRaised += new BuildErrorEventHandler(ErrorRaised);
 
+        _originalOutputEncoding = Console.OutputEncoding;
+        Console.OutputEncoding = Encoding.UTF8;
+
         _refresher = new Thread(ThreadProc);
         _refresher.Start();
     }
@@ -216,12 +223,11 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 }
 
                 // Print diagnostic output under the Project -> Output line.
-                foreach ((BuildMessageSeverity severity, string message) in project.EnumerateBuildMessages())
+                if (project.BuildMessages is not null)
                 {
-                    switch (severity)
+                    foreach (string message in project.BuildMessages)
                     {
-                        case BuildMessageSeverity.Warning: Console.WriteLine($"\x1b[33;1m  \x26A0 {message}\x1b[m"); break;
-                        case BuildMessageSeverity.Error: Console.WriteLine($"\x1b[31;1m  \x26A0 {message}\x1b[m"); break;
+                        Console.WriteLine(message);
                     }
                 }
 
@@ -338,10 +344,11 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
             {
                 var projectFileName = Path.GetFileName(e.ProjectFile.AsSpan());
                 if (!projectFileName.IsEmpty &&
-                    message.AsSpan().StartsWith(Path.GetFileNameWithoutExtension(projectFileName)))
+                    message.AsSpan().StartsWith(Path.GetFileNameWithoutExtension(projectFileName)) &&
+                    _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
                 {
-                    var outputPath = e.Message.AsMemory().Slice(index + 4);
-                    _notableProjects[new ProjectContext(buildEventContext)].OutputPath = outputPath;
+                    ReadOnlyMemory<char> outputPath = e.Message.AsMemory().Slice(index + 4);
+                    project.OutputPath = outputPath;
                 }
             }
         }
@@ -350,18 +357,20 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
     private void WarningRaised(object sender, BuildWarningEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
-        if (buildEventContext is not null)
+        if (buildEventContext is not null && _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
         {
-            _notableProjects[new ProjectContext(buildEventContext)].AddBuildMessage(e);
+            string message = EventArgsFormatting.FormatEventMessage(e, false);
+            project.AddBuildMessage($"  \x1b[33;1m⚠ {message}\x1b[m");
         }
     }
 
     private void ErrorRaised(object sender, BuildErrorEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
-        if (buildEventContext is not null)
+        if (buildEventContext is not null && _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
         {
-            _notableProjects[new ProjectContext(buildEventContext)].AddBuildMessage(e);
+            string message = EventArgsFormatting.FormatEventMessage(e, false);
+            project.AddBuildMessage($"  \x1b[31;1m❌ {message}\x1b[m");
         }
     }
 
@@ -369,6 +378,11 @@ public void Shutdown()
     {
         _cts.Cancel();
         _refresher?.Join();
+
+        if (_originalOutputEncoding is not null)
+        {
+            Console.OutputEncoding = _originalOutputEncoding;
+        }
     }
 }
 
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index 9ab46487ca7..3e630d41a06 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -5,8 +5,6 @@
 using System.CodeDom;
 using System.Collections.Generic;
 using System.Diagnostics;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
@@ -25,32 +23,11 @@ internal sealed class Project
     /// <summary>
     /// A lazily initialized list of build messages/warnings/errors raised during the build.
     /// </summary>
-    private List<LazyFormattedBuildEventArgs>? BuildMessages { get; set; }
+    public List<string>? BuildMessages { get; private set; }
 
-    public void AddBuildMessage(LazyFormattedBuildEventArgs eventArgs)
+    public void AddBuildMessage(string message)
     {
-        BuildMessages ??= new List<LazyFormattedBuildEventArgs>();
-        BuildMessages.Add(eventArgs);
-    }
-
-    public IEnumerable<(BuildMessageSeverity, string)> EnumerateBuildMessages()
-    {
-        if (BuildMessages is not null)
-        {
-            foreach (LazyFormattedBuildEventArgs eventArgs in BuildMessages)
-            {
-                if (eventArgs.Message is not null)
-                {
-                    if (eventArgs is BuildWarningEventArgs warningEventArgs)
-                    {
-                        yield return (BuildMessageSeverity.Warning, EventArgsFormatting.FormatEventMessage(warningEventArgs, false));
-                    }
-                    else if (eventArgs is BuildErrorEventArgs errorEventArgs)
-                    {
-                        yield return (BuildMessageSeverity.Error, EventArgsFormatting.FormatEventMessage(errorEventArgs, false));
-                    }
-                }
-            }
-        }
+        BuildMessages ??= new List<string>();
+        BuildMessages.Add(message);
     }
 }
