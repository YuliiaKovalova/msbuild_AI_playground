diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 096dff8e870..5e5f39a1656 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -580,24 +580,24 @@ internal static string GetRuntimeVersion(string path)
                 unsafe
                 {
                     // Allocate an initial buffer 
-                    char* runtimeVersionInitial = stackalloc char[bufferLength];
+                    char* runtimeVersion = stackalloc char[bufferLength];
 
                     // Run GetFileVersion, this should succeed using the initial buffer.
                     // It also returns the dwLength which is used if there is insufficient buffer.
-                    uint hresult = NativeMethods.GetFileVersion(path, runtimeVersionInitial, bufferLength, out int dwLength);
+                    uint hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out int dwLength);
 
                     if (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER)
                     {
                         // Allocate new buffer based on the returned length.
-                        char* runtimeVersion = stackalloc char[dwLength];
+                        char* runtimeVersion2 = stackalloc char[dwLength];
+                        runtimeVersion = runtimeVersion2;
 
                         // Get the RuntimeVersion in this second call.
                         bufferLength = dwLength;
                         hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out dwLength);
-                        return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
                     }
 
-                    return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersionInitial, 0, dwLength - 1) : string.Empty;
+                    return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
                 }                
             }
             else
@@ -607,14 +607,13 @@ internal static string GetRuntimeVersion(string path)
 #else
                 return ManagedRuntimeVersionReader.GetRuntimeVersion(path);
 #endif
-                }
-
+        }
 
-                /// <summary>
-                /// Import assembly dependencies.
-                /// </summary>
-                /// <returns>The array of assembly dependencies.</returns>
-                private AssemblyNameExtension[] ImportAssemblyDependencies()
+        /// <summary>
+        /// Import assembly dependencies.
+        /// </summary>
+        /// <returns>The array of assembly dependencies.</returns>
+        private AssemblyNameExtension[] ImportAssemblyDependencies()
         {
 #if !FEATURE_ASSEMBLYLOADCONTEXT
             var asmRefs = new List<AssemblyNameExtension>();
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index 758b928ed37..7611767ca12 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -31,6 +31,16 @@ internal static class GlobalAssemblyCache
         /// </summary>
         internal static readonly GetGacEnumerator gacEnumerator = GetGacNativeEnumerator;
 
+        /// <summary>
+        /// Lazy loaded cached root path of the GAC.
+        /// </summary>
+        private static readonly Lazy<string> _gacPath = new(() => GetGacPath());
+
+        /// <summary>
+        /// Gets the root path of the GAC.
+        /// </summary>
+        internal static string GacPath => _gacPath.Value;
+
         /// <summary>
         /// Given a strong name, find its path in the GAC.
         /// </summary>
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index e480cff968e..383c8614b86 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -408,7 +408,6 @@ private static string GetModuleFileName(IntPtr handle)
         {
             bool success = false;
             char[] buffer = null;
-            string output = string.Empty;
 
             // Try increased buffer sizes if on longpath-enabled Windows
             for (int bufferSize = NativeMethodsShared.MAX_PATH; !success && bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
@@ -423,7 +422,7 @@ private static string GetModuleFileName(IntPtr handle)
                     success = pathLength != 0 && !isBufferTooSmall;
                     if (success)
                     {
-                        output = new string(buffer, 0, pathLength);
+                        return new string(buffer, 0, pathLength);
                     }
                 }
                 finally
@@ -432,7 +431,7 @@ private static string GetModuleFileName(IntPtr handle)
                 }
             }
 
-            return output;
+            return string.Empty;
         }
 
         /// <summary>
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index a0d3403ca0b..54b21a7a904 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1053,10 +1053,8 @@ internal static extern int CreateAssemblyNameObject(
 
         /// <summary>
         /// GetCachePath from fusion.dll.
-        /// Using StringBuilder here is a way to pass a preallocated buffer of characters to (native) functions that require it.
         /// A common design pattern in unmanaged C++ is calling a function twice, once to determine the length of the string
-        /// and then again to pass the client-allocated character buffer. StringBuilder is the most straightforward way
-        /// to allocate a mutable buffer of characters and pass it around.
+        /// and then again to pass the client-allocated character buffer.
         /// </summary>
         /// <param name="cacheFlags">Value that indicates the source of the cached assembly.</param>
         /// <param name="cachePath">The returned pointer to the path.</param>
diff --git a/src/Tasks/ResolveComReference.cs b/src/Tasks/ResolveComReference.cs
index afa2a75cb88..911d84afb0b 100644
--- a/src/Tasks/ResolveComReference.cs
+++ b/src/Tasks/ResolveComReference.cs
@@ -432,7 +432,7 @@ public override bool Execute()
                     }
                 }
 
-                SetCopyLocalToFalseOnGacOrNoPIAAssemblies(resolvedReferenceList, GlobalAssemblyCache.GetGacPath());
+                SetCopyLocalToFalseOnGacOrNoPIAAssemblies(resolvedReferenceList, GlobalAssemblyCache.GacPath);
 
                 ResolvedModules = moduleList.ToArray();
                 ResolvedFiles = resolvedReferenceList.ToArray();
