diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index c9515e817f5..cdc0c927a09 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -160,6 +160,7 @@ public void Initialize(IEventSource eventSource)
             stream = new BufferedStream(stream, bufferSize: 32768);
             binaryWriter = new BinaryWriter(stream);
             eventArgsWriter = new BuildEventArgsWriter(binaryWriter);
+            eventArgsWriter.EmbedFile += EventArgsWriter_EmbedFile;
 
             binaryWriter.Write(FileFormatVersion);
 
@@ -168,6 +169,14 @@ public void Initialize(IEventSource eventSource)
             eventSource.AnyEventRaised += EventSource_AnyEventRaised;
         }
 
+        private void EventArgsWriter_EmbedFile(string filePath)
+        {
+            if (projectImportsCollector != null)
+            {
+                projectImportsCollector.AddFile(filePath);
+            }
+        }
+
         private void LogInitialInfo()
         {
             LogMessage("BinLogFilePath=" + FilePath);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 5774a80a27f..af87af9cb50 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -104,6 +104,11 @@ internal class BuildEventArgsWriter
         /// </summary>
         private readonly List<KeyValuePair<int, int>> nameValueIndexListBuffer = new List<KeyValuePair<int, int>>(1024);
 
+        /// <summary>
+        /// Raised when an item is encountered with a hint to embed a file into the binlog.
+        /// </summary>
+        public event Action<string> EmbedFile;
+
         /// <summary>
         /// Initializes a new instance of BuildEventArgsWriter with a BinaryWriter
         /// </summary>
@@ -764,6 +769,7 @@ private void WriteProjectItems(IEnumerable items)
                 {
                     WriteDeduplicatedString(itemType);
                     WriteTaskItemList(itemList);
+                    CheckForFilesToEmbed(itemType, itemList);
                 });
 
                 // signal the end
@@ -776,6 +782,7 @@ private void WriteProjectItems(IEnumerable items)
                 {
                     WriteDeduplicatedString(itemType);
                     WriteTaskItemList(itemList);
+                    CheckForFilesToEmbed(itemType, itemList);
                 });
 
                 // signal the end
@@ -803,6 +810,7 @@ private void WriteProjectItems(IEnumerable items)
                     {
                         WriteDeduplicatedString(currentItemType);
                         WriteTaskItemList(reusableProjectItemList);
+                        CheckForFilesToEmbed(currentItemType, reusableProjectItemList);
                         reusableProjectItemList.Clear();
                     }
 
@@ -815,6 +823,7 @@ private void WriteProjectItems(IEnumerable items)
                 {
                     WriteDeduplicatedString(currentItemType);
                     WriteTaskItemList(reusableProjectItemList);
+                    CheckForFilesToEmbed(currentItemType, reusableProjectItemList);
                     reusableProjectItemList.Clear();
                 }
 
@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)
             }
         }
 
+        private const string EmbedInBinlogItemType = "EmbedInBinlog";
+
+        private void CheckForFilesToEmbed(string itemType, object itemList)
+        {
+            if (!string.Equals(itemType, EmbedInBinlogItemType, StringComparison.OrdinalIgnoreCase) || itemList is not IEnumerable list)
+            {
+                return;
+            }
+
+            foreach (var item in list)
+            {
+                if (item is ITaskItem taskItem && !string.IsNullOrEmpty(taskItem.ItemSpec))
+                {
+                    EmbedFile?.Invoke(taskItem.ItemSpec);
+                }
+                else if (item is string itemSpec && !string.IsNullOrEmpty(itemSpec))
+                {
+                    EmbedFile?.Invoke(itemSpec);
+                }
+            }
+        }
+
         private void Write(ITaskItem item, bool writeMetadata = true)
         {
             WriteDeduplicatedString(item.ItemSpec);
