diff --git a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
index 8a4d127ef46..0226f87e7a7 100644
--- a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
@@ -314,7 +314,6 @@ public void SkipNonexistentProjectsBuildingInParallel()
             Assert.DoesNotContain(error, logger.FullLog);
         }
 
-
         /// <summary>
         /// Verifies that nonexistent projects are skipped when requested when building in parallel.
         /// DDB # 125831
@@ -328,9 +327,11 @@ public void SkipNonexistentProjectsAsMetadataBuildingInParallel()
                 @"<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
                     <Target Name=`t` >
                         <ItemGroup>
-                            <ProjectReference Include=`this_project_does_not_exist.csproj` >
+                            <ProjectReference Include=`this_project_does_not_exist_warn.csproj` >
                                 <SkipNonexistentProjects>true</SkipNonexistentProjects>
                             </ProjectReference>
+                            <ProjectReference Include=`this_project_does_not_exist_error.csproj` >
+                            </ProjectReference>
                             <ProjectReference Include=`foo.csproj` >
                                 <SkipNonexistentProjects>false</SkipNonexistentProjects>
                             </ProjectReference>
@@ -350,14 +351,16 @@ public void SkipNonexistentProjectsAsMetadataBuildingInParallel()
                 ");
 
             MockLogger logger = new MockLogger(_testOutput);
-            ObjectModelHelpers.BuildTempProjectFileExpectSuccess(@"SkipNonexistentProjectsMain.csproj", logger);
+            ObjectModelHelpers.BuildTempProjectFileExpectFailure(@"SkipNonexistentProjectsMain.csproj", logger);
 
             logger.AssertLogContains("Hello from foo.csproj");
-            string message = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFoundMessage"), "this_project_does_not_exist.csproj");
-            string error = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFound"), "this_project_does_not_exist.csproj");
+            string message = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFoundMessage"), "this_project_does_not_exist_warn.csproj");
+            string error = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFound"), "this_project_does_not_exist_warn.csproj");
+            string error2 = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFound"), "this_project_does_not_exist_error.csproj");
             Assert.Equal(0, logger.WarningCount);
-            Assert.Equal(0, logger.ErrorCount);
+            Assert.Equal(1, logger.ErrorCount);
             Assert.Contains(message, logger.FullLog); // for the missing project
+            Assert.Contains(error2, logger.FullLog);
             Assert.DoesNotContain(error, logger.FullLog);
         }
 
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 6872c61ce0a..780b83ffa0b 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -187,12 +187,12 @@ public void BuildProjectWithMultipleTargets()
 
                 string output = RunnerUtilities.ExecMSBuild(solutionFile.Path + " /t:Clean;Build;Custom", out bool success);
                 success.ShouldBeTrue();
-                output.IndexOf("classlib.Build").ShouldBeGreaterThan(-1);
-                output.IndexOf("classlib.Clean").ShouldBeGreaterThan(-1);
-                output.IndexOf("classlib.Custom").ShouldBeGreaterThan(-1);
-                output.IndexOf("simpleProject.Build").ShouldBeGreaterThan(-1);
-                output.IndexOf("simpleProject.Clean").ShouldBeGreaterThan(-1);
-                output.IndexOf("simpleProject.Custom").ShouldBeGreaterThan(-1);
+                output.ShouldContain("classlib.Build");
+                output.ShouldContain("classlib.Clean");
+                output.ShouldContain("classlib.Custom");
+                output.ShouldContain("simpleProject.Build");
+                output.ShouldContain("simpleProject.Clean");
+                output.ShouldContain("simpleProject.Custom");
             }
         }
 
@@ -259,17 +259,22 @@ public void BuildProjectWithMultipleTargetsInParallel()
 EndGlobal
                 ");
 
-                Environment.SetEnvironmentVariable("MSBUILD_BATCHPROJECTTARGETS", "1");
-                var output = RunnerUtilities.ExecMSBuild(solutionFile.Path + " /m /t:Clean;Build;Custom", out bool success);
-                Environment.SetEnvironmentVariable("MSBUILD_BATCHPROJECTTARGETS", "");
-
-                output.IndexOf("classlib.Build").ShouldBeGreaterThan(-1);
-                output.IndexOf("classlib.Clean").ShouldBeGreaterThan(-1);
-                output.IndexOf("classlib.Custom").ShouldBeGreaterThan(-1);
-                output.IndexOf("simpleProject.Build").ShouldBeGreaterThan(-1);
-                output.IndexOf("simpleProject.Clean").ShouldBeGreaterThan(-1);
-                output.IndexOf("simpleProject.Custom").ShouldBeGreaterThan(-1);
-                success.ShouldBeTrue();
+                try
+                {
+                    Environment.SetEnvironmentVariable("MSBuildSolutionBatchTargets", "1");
+                    var output = RunnerUtilities.ExecMSBuild(solutionFile.Path + " /m /t:Clean;Build;Custom", out bool success);
+                    success.ShouldBeTrue();
+                    output.ShouldContain("classlib.Build");
+                    output.ShouldContain("classlib.Clean");
+                    output.ShouldContain("classlib.Custom");
+                    output.ShouldContain("simpleProject.Build");
+                    output.ShouldContain("simpleProject.Clean");
+                    output.ShouldContain("simpleProject.Custom");
+                }
+                finally
+                {
+                    Environment.SetEnvironmentVariable("MSBuildSolutionBatchTargets", "");
+                }
             }
         }
 
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 18db7d33057..6cfa66bba0d 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -186,7 +186,7 @@ private SolutionProjectGenerator(
             _loggingService = loggingService;
             _sdkResolverService = sdkResolverService ?? SdkResolverService.Instance;
             _submissionId = submissionId;
-            _batchProjectTargets = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILD_BATCHPROJECTTARGETS"));
+            _batchProjectTargets = Traits.Instance.SolutionBatchTargets;
 
             if (targetNames != null)
             {
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index cf60eb140c9..de4906adc2e 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -87,6 +87,16 @@ public Traits()
         /// </summary>
         public readonly bool EmitSolutionMetaproj = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildEmitSolution"));
 
+        /// <summary>
+        /// Modifies Solution Generator to generate a metaproj that batches multiple Targets into one MSBuild task invoke.
+        /// </summary>
+        /// <remarks>
+        /// For example, a run of Clean;Build target will first run Clean on all projects,
+        /// then run Build on all projects.  When enabled, it will run Clean;Build on all
+        /// Projects at the back to back.  Allowing the second target to start sooner than before.
+        /// </remarks>
+        public readonly bool SolutionBatchTargets = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildSolutionBatchTargets"));
+
         /// <summary>
         /// Log statistics about property functions which require reflection
         /// </summary>
diff --git a/src/Tasks.UnitTests/MSBuild_Tests.cs b/src/Tasks.UnitTests/MSBuild_Tests.cs
index adccd42620d..96bad83b931 100644
--- a/src/Tasks.UnitTests/MSBuild_Tests.cs
+++ b/src/Tasks.UnitTests/MSBuild_Tests.cs
@@ -302,9 +302,11 @@ public void SkipNonexistentProjectsAsMetadataBuildingInParallel()
                 @"<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
                     <Target Name=`t` >
                         <ItemGroup>
-                            <ProjectReference Include=`this_project_does_not_exist.csproj` >
+                            <ProjectReference Include=`this_project_does_not_exist_warn.csproj` >
                                 <SkipNonexistentProjects>true</SkipNonexistentProjects>
                             </ProjectReference>
+                            <ProjectReference Include=`this_project_does_not_exist_error.csproj` >
+                            </ProjectReference>
                             <ProjectReference Include=`foo.csproj` >
                                 <SkipNonexistentProjects>false</SkipNonexistentProjects>
                             </ProjectReference>
@@ -324,14 +326,16 @@ public void SkipNonexistentProjectsAsMetadataBuildingInParallel()
                 ");
 
             MockLogger logger = new MockLogger(_testOutput);
-            ObjectModelHelpers.BuildTempProjectFileExpectSuccess(@"SkipNonexistentProjectsMain.csproj", logger);
+            ObjectModelHelpers.BuildTempProjectFileExpectFailure(@"SkipNonexistentProjectsMain.csproj", logger);
 
             logger.AssertLogContains("Hello from foo.csproj");
-            string message = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFoundMessage"), "this_project_does_not_exist.csproj");
-            string error = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFound"), "this_project_does_not_exist.csproj");
+            string message = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFoundMessage"), "this_project_does_not_exist_warn.csproj");
+            string error = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFound"), "this_project_does_not_exist_warn.csproj");
+            string error2 = String.Format(AssemblyResources.GetString("MSBuild.ProjectFileNotFound"), "this_project_does_not_exist_error.csproj");
             Assert.Equal(0, logger.WarningCount);
-            Assert.Equal(0, logger.ErrorCount);
+            Assert.Equal(1, logger.ErrorCount);
             Assert.Contains(message, logger.FullLog); // for the missing project
+            Assert.Contains(error2, logger.FullLog);
             Assert.DoesNotContain(error, logger.FullLog);
         }
 
