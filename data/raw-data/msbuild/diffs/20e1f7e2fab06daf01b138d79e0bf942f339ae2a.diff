diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 477a949b607..cc67b3b1417 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -171,7 +171,7 @@ private void RegisterBuiltInAnalyzers(BuildCheckDataSource buildCheckDataSource)
         /// To be used by acquisition module
         /// Registers the custom analyzer, the construction of analyzer is needed during registration.
         /// </summary>
-        /// <param name="projectPath">The project path is used for the correct .editorconfig resolution</param>
+        /// <param name="projectPath">The project path is used for the correct .editorconfig resolution.</param>
         /// <param name="buildCheckDataSource">Represents different data sources used in build check operations.</param>
         /// <param name="factories">A collection of build analyzer factories for rules instantiation.</param>
         /// <param name="analysisContext">The logging context of the build event.</param>
@@ -183,6 +183,7 @@ internal void RegisterCustomAnalyzer(
         {
             if (_enabledDataSources[(int)buildCheckDataSource])
             {
+                Debugger.Launch();
                 foreach (var factory in factories)
                 {
                     var instance = factory();
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index da51c287da7..999bda273c8 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3575,8 +3575,7 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                             if (!wellKnownFunctionSuccess)
                             {
                                 // Some well-known functions need evaluated value from properties.
-                                string projectPath = properties.GetProperty("MSBuildProjectFullPath")?.EvaluatedValue ?? string.Empty;
-                                wellKnownFunctionSuccess = TryExecuteWellKnownFunctionWithPropertiesParam(projectPath, out functionResult, objectInstance, args);
+                                wellKnownFunctionSuccess = TryExecuteWellKnownFunctionWithPropertiesParam(properties, out functionResult, objectInstance, args);
                             }
                         }
                         // we need to preserve the same behavior on exceptions as the actual binder
@@ -3674,7 +3673,7 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                 }
             }
 
-            private bool TryExecuteWellKnownFunctionWithPropertiesParam(string projectPath, out object returnVal, object objectInstance, object[] args)
+            private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T> properties, out object returnVal, object objectInstance, object[] args)
             {
                 returnVal = null;
 
@@ -3682,6 +3681,7 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(string projectPath,
                 {
                     if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.RegisterBuildCheck), StringComparison.OrdinalIgnoreCase))
                     {
+                        string projectPath = properties.GetProperty("MSBuildProjectFullPath")?.EvaluatedValue ?? string.Empty;
                         ErrorUtilities.VerifyThrow(_loggingContext != null, $"The logging context is missed. {nameof(IntrinsicFunctions.RegisterBuildCheck)} can not be invoked.");
                         if (TryGetArg(args, out string arg0))
                         {
