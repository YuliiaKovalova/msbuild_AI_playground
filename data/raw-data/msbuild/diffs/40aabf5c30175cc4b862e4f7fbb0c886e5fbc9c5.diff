diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index da1f617beb5..c77e44f8d7b 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -50,6 +50,18 @@ public static string Left(string text)
                 result += new string(' ', space);
                 return result;
             }
+            public static string SpaceBetween(string leftText, string rightText, int width)
+            {
+                string result = String.Empty;
+                string leftNoFormatString = ANSIRemove(leftText);
+                string rightNoFormatString = ANSIRemove(rightText);
+                if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth) return leftText + rightText;
+                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length) - 1;
+                result += leftText;
+                result += new string(' ', space);
+                result += rightText;
+                return result;
+            }
         }
         public static class Formatting
         {
@@ -134,7 +146,8 @@ public static string Overlined(string text)
             public static string Hyperlink(string text, string url)
             {
                 // return String.Format("\x1b[]8;;{0}\x1b\\{1}\x1b[]8;\x1b\\", text, url);
-                return $"\x1b[]8;;{url}\x1b[\\{text}\x1b[]8;;\x1b[\\";
+                // return $"\x1b[]8;;{url}\x1b[\\{text}\x1b[]8;;\x1b[\\";
+                return url.Replace("\\", "/");
             }
             public static string DECLineDrawing(string text)
             {
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 52d8563a655..a2ec24c5927 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -5,17 +5,23 @@
 using System.Runtime.InteropServices;
 using System.Threading;
 using System.Threading.Tasks;
+using System.IO;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
     public class FancyLogger : ILogger
     {
+        // TODO: Move somewhere else
+        public string GetUnambiguousPath(string path)
+        {
+            // Get last part of path
+            return Path.GetFileName(path);
+        }
+
 
         public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);
 
         public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
-        public Dictionary<int, FancyLoggerBufferLine> targetConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
-        public Dictionary<int, FancyLoggerBufferLine> taskConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
 
         private float existingTasks = 1;
         private float completedTasks = 0;
@@ -35,22 +41,19 @@ public void Initialize(IEventSource eventSource)
             // Started
             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
-            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
-            eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
+            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
             // Finished
             eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);
             eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);
-            eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
-            eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
+            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
+            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
             // Raised
             eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
-            {
-                FancyLoggerBuffer.Initialize();
-                FancyLoggerBufferLine rootLine = FancyLoggerBuffer.WriteNewLine("");
-                root.Line = rootLine;
-            }
+            // Initialize FancyLoggerBuffer
+            FancyLoggerBuffer.Initialize();
         }
 
         // Build
@@ -65,111 +68,69 @@ void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         // Project
         void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
-            if (e.BuildEventContext?.ProjectInstanceId == null) return;
-            int id = e.BuildEventContext.ProjectInstanceId;
-            // Create node
-            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Project);
-            node.Line = new FancyLoggerBufferLine(" " + ANSIBuilder.Formatting.Dim("Project: ") + e.ProjectFile); ;
-            root.Add(node);
-            node.Write();
+            // Get project id
+            int id = e.BuildEventContext!.ProjectInstanceId;
+            // If id already exists...
+            if (projectConsoleLines.ContainsKey(id)) return;
+            // Create line
+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(
+                ANSIBuilder.Alignment.SpaceBetween(
+                    $"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim("Project - ")} {GetUnambiguousPath(e.ProjectFile!)}",
+                    "(5 targets completed)",
+                    Console.WindowWidth
+                )
+            );
+
+            projectConsoleLines.Add(id, line);
+            Thread.Sleep(400);
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
-            if (e.BuildEventContext?.ProjectInstanceId == null) return;
-            FancyLoggerNode? node = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}");
-            if (node == null) return;
-            int lineId = node.Line?.Id ?? -1;
-            if(lineId == -1) return;
-            FancyLoggerBuffer.UpdateLine(lineId, ""
-                + ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green)
-                + ANSIBuilder.Formatting.Dim("Project: ")
-                + ANSIBuilder.Formatting.Color(e.ProjectFile ?? "", ANSIBuilder.Formatting.ForegroundColor.Green)
+            // Get project id
+            int id = e.BuildEventContext!.ProjectInstanceId;
+            // If id does not exist
+            if (!projectConsoleLines.ContainsKey(id)) return;
+            // Get line id
+            FancyLoggerBufferLine line = projectConsoleLines[id];
+            // Update line
+            FancyLoggerBuffer.UpdateLine(line.Id,
+                ANSIBuilder.Alignment.SpaceBetween(
+                    $"{ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim("Project - ")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}",
+                    "(5 targets completed)",
+                    Console.WindowWidth
+                )
             );
-            node.Collapse();
+            /*// TODO
+            int id = e.BuildEventContext!.ProjectInstanceId;
+            var line = projectConsoleLines[id];
+            FancyLoggerBuffer.UpdateLine(line.Id, ""
+                + "D"
+                + " "
+                + ANSIBuilder.Formatting.Dim("Project - ")
+                + GetUnambiguousPath(e.ProjectFile)
+            );*/
         }
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
-            if (e.BuildEventContext?.TargetId == null) return;
-            int id = e.BuildEventContext.TargetId;
-            // Create node
-            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Target);
-            node.Line = new FancyLoggerBufferLine("  "
-                + ANSIBuilder.Formatting.Dim("Target: ")
-                + e.TargetName);
-            // Get parent node
-            FancyLoggerNode? parentNode = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}");
-            if (parentNode == null) return;
-            // Add to parent node
-            parentNode.Add(node);
-            node.Write();
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
-            if (e.BuildEventContext?.TargetId == null) return;
-            FancyLoggerNode? node = root.Find($"target-{e.BuildEventContext.TargetId}");
-            if (node == null) return;
-            int lineId = node.Line?.Id ?? -1;
-            if(lineId == -1) return;
-            /*FancyLoggerBuffer.UpdateLine(lineId, ""
-                + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
-                + ANSIBuilder.Formatting.Dim("Target: ")
-                + ANSIBuilder.Formatting.Color(e.TargetName, ANSIBuilder.Formatting.ForegroundColor.Green)
-            );
-            node.Collapse();*/
-            FancyLoggerBuffer.DeleteLine(lineId);
         }
 
         // Task
         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             existingTasks++;
-            if (e.BuildEventContext?.TaskId == null) return;
-            int id = e.BuildEventContext.TaskId;
-            // Create node
-            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Task);
-            node.Line = new FancyLoggerBufferLine("  " + ANSIBuilder.Formatting.Dim("Task: ") + e.TaskName);
-            // Get parent node
-            FancyLoggerNode? parentNode = root.Find($"target-{e.BuildEventContext.TargetId}");
-            if (parentNode == null) return;
-            // Add to parent node
-            parentNode.Add(node);
-            node.Write();
-            // TODO: Remove
-            Thread.Sleep(400);
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
             completedTasks++;
-            if (e.BuildEventContext?.TaskId == null) return;
-            FancyLoggerNode? node = root.Find($"task-{e.BuildEventContext.TaskId}");
-            if(node == null) return;
-            int lineId = node.Line?.Id ?? -1;
-            if (lineId == -1) return;
-            FancyLoggerBuffer.UpdateLine(lineId, ""
-                + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
-                + ANSIBuilder.Formatting.Dim("Task: ")
-                + ANSIBuilder.Formatting.Color(e.TaskName, ANSIBuilder.Formatting.ForegroundColor.Green)
-            );
-            FancyLoggerBuffer.WriteFooter($"Build: {ANSIBuilder.Graphics.ProgressBar(completedTasks/existingTasks)}  {(completedTasks / existingTasks) * 100} \t {completedTasks}/{existingTasks}");
-            node.Collapse();
         }
 
         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         {
-            // Only output high importance messages
-            // if (e.Importance != MessageImportance.High) return;
-            /* if (e.BuildEventContext?.TaskId == null) return;
-            int id = e.BuildEventContext.GetHashCode();
-            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Message);
-            node.Line = new FancyLoggerBufferLine("--Message");
-
-            FancyLoggerNode? parentNode = root.Find($"task-{e.BuildEventContext.TaskId}");
-            if (parentNode == null) return;
-
-            parentNode.Add(node);
-            node.Write(); */
         }
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 44686ee05aa..05a97c5f3dd 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -89,7 +89,8 @@ public static void Initialize()
                     }
                 }
             });
-            // Switch to alternate buffer
+            // Switch to alternate
+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
             // Settings
             AutoScrollEnabled = true;
@@ -191,7 +192,8 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)
             // Add line
             lines.Add(line);
             // Update contents
-            if(AutoScrollEnabled) ScrollToEnd();
+            if (AutoScrollEnabled) ScrollToEnd();
+            else ScrollToLine(CurrentTopLineIndex);
             return line;
         }
         public static FancyLoggerBufferLine? WriteNewLineAfter(string text, int lineId)
@@ -218,8 +220,9 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)
             if (lineIndex == -1) return null;
             lines.Insert(lineIndex + 1, line);
             // Scroll to end if lineIndex >= lines
-            if (lineIndex >= lines.Count -2 && AutoScrollEnabled) ScrollToEnd();
-            else ScrollToLine(CurrentTopLineIndex); 
+            // if (lineIndex >= lines.Count -2 && AutoScrollEnabled) ScrollToEnd();
+            // else ScrollToLine(CurrentTopLineIndex);
+            ScrollToEnd();
             return line;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index 753a201248a..34ae9b7311a 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -10,7 +10,7 @@
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
-{
+{ 
     // TODO: Maybe remove
     public enum FancyLoggerNodeType
     {
@@ -120,8 +120,8 @@ public void Write()
                 if (Parent != null)
                 {
                     int parentLastLineId = Parent.GetLastLineIndex();
-                    if (parentLastLineId == -1) throw new Exception("Oops something went wrong");
-                    Line.Text += $"  --> {parentLastLineId}";
+                    // if (parentLastLineId == -1) throw new Exception("Oops something went wrong");
+                    if (parentLastLineId == -1) return;
                     // FancyLoggerBuffer.WriteNewLineAfter(Line, parentLastLineId);
                     FancyLoggerBuffer.WriteNewLineAfterIndex(Line, parentLastLineId);
                 }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 83dbaab2a2b..f6ab7f55d29 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -159,10 +159,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
-    <Compile Include="Logging\FancyLogger\ANSIBuilder.cs" />
-    <Compile Include="Logging\FancyLogger\FancyLogger.cs" />
-    <Compile Include="Logging\FancyLogger\FancyLoggerBuffer.cs" />
-    <Compile Include="Logging\FancyLogger\FancyLoggerNode.cs" />
+    <Compile Include="Logging\FancyLogger\*.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 0936140328f..97b7cadfece 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -3192,7 +3192,7 @@ private static ILogger[] ProcessLoggingSwitches
             string[] verbositySwitchParameters,
             bool noConsoleLogger,
             bool distributedFileLogger,
-            bool shouldUseFancyLogger, 
+            bool fancyLoggerCommandLineOptIn, 
             string[] fileLoggerParameters,
             string[] consoleLoggerParameters,
             string[] binaryLoggerParameters,
@@ -3223,14 +3223,7 @@ out bool enableProfiler
             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);
 
             // Choose default console logger
-            bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file
-                ( RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable("WT_SESSION") != "" ) && // Avoid when NOT using Windows Terminal
-                Environment.GetEnvironmentVariable("TERM") != "dumb"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities
-            if (shouldUseFancyLogger && !outputSupportsFancyLogger)
-            {
-                // Add to deferredbuildmessages
-            }
-            else if (shouldUseFancyLogger && outputSupportsFancyLogger)
+            if ((fancyLoggerCommandLineOptIn || Environment.GetEnvironmentVariable("MSBUILDFANCYLOGGER") == "true") && DoesEnvironmentSupportFancyLogger())
             {
                 ProcessFancyLogger(noConsoleLogger, loggers);
             }
@@ -3410,13 +3403,33 @@ List<ILogger> loggers
             }
         }
 
+        private static bool DoesEnvironmentSupportFancyLogger()
+        {
+            // If output is redirected
+            if (Console.IsOutputRedirected)
+            {
+                // Add to deferred build messages
+                return false;
+            }
+            // If terminal is dumb
+            if (
+                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable("WT_SESSION") == "")
+                || Environment.GetEnvironmentVariable("TERM") == "dumb"
+            )
+            {
+                // Add to deferred build messages
+                return false;
+            }
+            return true;
+        }
+
         private static void ProcessFancyLogger(
             bool noConsoleLogger,
             List<ILogger> loggers
         )
         {
             // Check for flags and env variables
-            if (true && !noConsoleLogger)
+            if (!noConsoleLogger)
             {
                 FancyLogger l = new FancyLogger();
                 loggers.Add(l);
