diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index a30a121ddd1..310cdfd322c 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -965,7 +965,7 @@ internal static string GetShortFilePath(string path)
 
                 if (length > 0)
                 {
-                    string fullPath = fullPathBuffer.ToString();
+                    string fullPath = new(fullPathBuffer);
                     path = fullPath;
                 }
             }
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 2c403c8a03a..8df16fe9312 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -569,6 +569,7 @@ internal static string GetRuntimeVersion(string path)
             {
                 char[] runtimeVersion;
                 uint hresult;
+                int dwLength;
 #if DEBUG
                 // Just to make sure and exercise the code that doubles the size
                 // every time GetRequestedRuntimeInfo fails due to insufficient buffer size.
@@ -579,19 +580,12 @@ internal static string GetRuntimeVersion(string path)
                 do
                 {
                     runtimeVersion = new char[bufferLength];
-                    hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out _);
+                    hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out dwLength);
                     bufferLength *= 2;
                 }
                 while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
 
-                if (hresult == NativeMethodsShared.S_OK)
-                {
-                    return new string(runtimeVersion);
-                }
-                else
-                {
-                    return string.Empty;
-                }
+                return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength) : string.Empty;
             }
             else
             {
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index d5844863917..8b4042a5c23 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -373,10 +373,10 @@ internal static string GetGacPath()
         {
             int gacPathLength = 0;
             NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
-            char[] gacPath = new char[gacPathLength + 1];
+            char[] gacPath = new char[gacPathLength];
             NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
 
-            return new string(gacPath);
+            return new string(gacPath,0, gacPathLength);
         }
     }
 }
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index f509ead0aa2..b2ca45bb4e7 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -408,6 +408,7 @@ private static string GetModuleFileName(IntPtr handle)
         {
             bool success = false;
             char[] buffer = null;
+            int pathLength = 0;
 
             // Try increased buffer sizes if on longpath-enabled Windows
             for (int bufferSize = NativeMethodsShared.MAX_PATH; !success && bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
@@ -415,11 +416,11 @@ private static string GetModuleFileName(IntPtr handle)
                 buffer = System.Buffers.ArrayPool<char>.Shared.Rent(bufferSize);
                 try
                 {
-                var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
-                int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
+                    var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
+                    pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
 
-                bool isBufferTooSmall = (uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER;
-                success = pathLength != 0 && !isBufferTooSmall;
+                    bool isBufferTooSmall = (uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER;
+                    success = pathLength != 0 && !isBufferTooSmall;
                 }
                 finally
                 {
@@ -427,7 +428,7 @@ private static string GetModuleFileName(IntPtr handle)
                 }
             }
 
-            return success ? new string(buffer) : string.Empty;
+            return success ? new string(buffer, 0, pathLength) : string.Empty;
         }
 
         /// <summary>
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index dce6ee7fbbc..d4177c23cd8 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -214,7 +214,10 @@ internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[]
 
             // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
             char[] key = new char[CCH_RM_SESSION_KEY + 1];
-            key[0] = '\0';
+            for (int i = 0; i < key.Length; i++)
+            {
+                key[i] = '\0';
+            }
 
             int res = RmStartSession(out uint handle, 0, key);
             if (res != 0)
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index a0b076cd0fd..0553eb58d2a 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1055,7 +1055,7 @@ internal static extern int CreateAssemblyNameObject(
         /// <param name="pcchPath">The requested maximum length of CachePath, and upon return, the actual length of CachePath.</param>
         /// 
         [DllImport("fusion.dll", CharSet = CharSet.Unicode)]
-        internal static extern int GetCachePath([In] AssemblyCacheFlags cacheFlags, char[] cachePath, ref int pcchPath);
+        internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, [Out] char[] cachePath, ref int pcchPath);
 #endif
 
         //------------------------------------------------------------------------------
@@ -1129,7 +1129,7 @@ internal static extern int CreateAssemblyNameObject(
         /// <param name="dwLength">The size, in bytes, of the returned szBuffer.</param>
         /// <returns>HResult.</returns>
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static extern uint GetFileVersion([MarshalAs(UnmanagedType.LPWStr)] string szFileName, char[] szBuffer, int cchBuffer, out int dwLength);
+        internal static extern uint GetFileVersion([MarshalAs(UnmanagedType.LPWStr)] string szFileName, [Out] char[] szBuffer, int cchBuffer, out int dwLength);
 #endif
         #endregion
 
