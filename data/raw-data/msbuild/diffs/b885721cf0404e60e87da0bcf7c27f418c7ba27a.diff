diff --git a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
index dee09e33afe..f6b67eccb65 100644
--- a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
@@ -5,6 +5,9 @@
 using System.Reflection;
 using Xunit;
 using Shouldly;
+using Xunit.Abstractions;
+using Microsoft.Build.UnitTests.Shared;
+using Microsoft.Build.UnitTests;
 
 namespace Microsoft.Build.Framework.Telemetry.Tests
 {
@@ -14,34 +17,30 @@ namespace Microsoft.Build.Framework.Telemetry.Tests
     [Collection("OpenTelemetryManagerTests")]
     public class OpenTelemetryManagerTests : IDisposable
     {
-        // Store original environment variables so we can restore after each test
-        private readonly string? _originalDotnetOptOut;
-        private readonly string? _originalMsBuildTelemetryOptOut;
-        private readonly string? _originalSampleRateOverride;
+        private readonly ITestOutputHelper _output;
+
+        // TestEnvironment automatically restores environment variables on Dispose
+        private readonly TestEnvironment _env;
 
         private const string TelemetryFxOptoutEnvVarName = "MSBUILD_TELEMETRY_OPTOUT";
         private const string DotnetOptOut = "DOTNET_CLI_TELEMETRY_OPTOUT";
         private const string TelemetrySampleRateOverrideEnvVarName = "MSBUILD_TELEMETRY_SAMPLE_RATE";
 
-        public OpenTelemetryManagerTests()
+        public OpenTelemetryManagerTests(ITestOutputHelper output)
         {
-            // Capture existing env vars
-            _originalDotnetOptOut = Environment.GetEnvironmentVariable(DotnetOptOut);
-            _originalMsBuildTelemetryOptOut = Environment.GetEnvironmentVariable(TelemetryFxOptoutEnvVarName);
-            _originalSampleRateOverride = Environment.GetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName);
+            _output = output;
+            _env = TestEnvironment.Create(_output);
 
-            // Ensure a clean manager state before each test
+            // Reset the manager state at the start of each test.
             ResetManagerState();
         }
 
         public void Dispose()
         {
-            // Restore environment variables
-            Environment.SetEnvironmentVariable(DotnetOptOut, _originalDotnetOptOut);
-            Environment.SetEnvironmentVariable(TelemetryFxOptoutEnvVarName, _originalMsBuildTelemetryOptOut);
-            Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, _originalSampleRateOverride);
+            // Dispose TestEnvironment to restore any environment variables, etc.
+            _env.Dispose();
 
-            // Ensure manager is reset after each test
+            // Reset again in case the test created new references or manipulated the singleton after environment cleanup.
             ResetManagerState();
         }
 
@@ -50,93 +49,61 @@ public void Dispose()
         [InlineData(TelemetryFxOptoutEnvVarName, "true")]
         [InlineData(DotnetOptOut, "1")]
         [InlineData(TelemetryFxOptoutEnvVarName, "1")]
-        public void Initialize_ShouldSetStateToOptOut_WhenOptOutEnvVarIsTrue(string optoutvar, string value)
+        public void Initialize_ShouldSetStateToOptOut_WhenOptOutEnvVarIsTrue(string optoutVar, string value)
         {
             // Arrange
-            Environment.SetEnvironmentVariable(optoutvar, value);
+            _env.SetEnvironmentVariable(optoutVar, value);
 
             // Act
             OpenTelemetryManager.Instance.Initialize(isStandalone: false);
 
             // Assert
-            var state = GetTelemetryState(OpenTelemetryManager.Instance);
-            state.ShouldBe(OpenTelemetryManager.TelemetryState.OptOut);
-            OpenTelemetryManager.Instance.DefaultActivitySource.ShouldBeNull();
+            OpenTelemetryManager.Instance.IsActive().ShouldBeFalse();
         }
+
 #if NET
         [Fact]
         public void Initialize_ShouldSetStateToUnsampled_WhenNoOverrideOnNetCore()
         {
-
-            // Clear any override that might have existed
-            Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, null);
+            _env.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, null);
 
             OpenTelemetryManager.Instance.Initialize(isStandalone: false);
 
-            var state = GetTelemetryState(OpenTelemetryManager.Instance);
-            state.ShouldBe(OpenTelemetryManager.TelemetryState.Unsampled);
+            // If no override on .NET, we expect no Active ActivitySource
             OpenTelemetryManager.Instance.DefaultActivitySource.ShouldBeNull();
         }
 #endif
+
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
         public void Initialize_ShouldSetSampleRateOverride_AndCreateActivitySource_WhenRandomBelowOverride(bool standalone)
         {
-
             // Arrange
-            Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, "1.0");
+            _env.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, "1.0");
 
             // Act
             OpenTelemetryManager.Instance.Initialize(isStandalone: standalone);
 
             // Assert
-            var state = GetTelemetryState(OpenTelemetryManager.Instance);
-            // On .NET Framework, we expect TelemetryState.ExporterInitialized
-            // On .NET / .NET Standard, the code doesn't explicitly set TelemetryState
-            // => it remains TelemetryState.Uninitialized if not net48 or netframework.
-            // So we can do a check to see if it is either ExporterInitialized or left at Uninitialized.
-            // If your code has changed to set a different state, adapt accordingly.
-
-#if NETFRAMEWORK
-            if (standalone)
-            {
-                state.ShouldBe(OpenTelemetryManager.TelemetryState.CollectorInitialized);
-            }
-            else
-            {
-                // TODO: collector in VS
-                // state.ShouldBe(TelemetryState.ExporterInitialized);
-                state.ShouldBe(OpenTelemetryManager.TelemetryState.CollectorInitialized);
-            }
-#else
-            state.ShouldBe(OpenTelemetryManager.TelemetryState.TracerInitialized);
-#endif
-            // In either scenario, we expect a non-null DefaultActivitySource
+            OpenTelemetryManager.Instance.IsActive().ShouldBeTrue();
             OpenTelemetryManager.Instance.DefaultActivitySource.ShouldNotBeNull();
         }
 
         [Fact]
         public void Initialize_ShouldNoOp_WhenCalledMultipleTimes()
         {
-            // Arrange
-            Environment.SetEnvironmentVariable(DotnetOptOut, "true");
-
-            // Act #1
+            _env.SetEnvironmentVariable(DotnetOptOut, "true");
             OpenTelemetryManager.Instance.Initialize(isStandalone: true);
-            var firstState = GetTelemetryState(OpenTelemetryManager.Instance);
+            var state1 = OpenTelemetryManager.Instance.IsActive();
 
-            // Act #2
-            // Try to re-initialize with different env var settings
-            Environment.SetEnvironmentVariable(DotnetOptOut, null);
+            _env.SetEnvironmentVariable(DotnetOptOut, null);
             OpenTelemetryManager.Instance.Initialize(isStandalone: true);
-            var secondState = GetTelemetryState(OpenTelemetryManager.Instance);
+            var state2 = OpenTelemetryManager.Instance.IsActive();
 
-            // Assert
-            // Because the manager was already set to "OptOut" on the first call,
-            // the second call is a no-op (the state remains the same).
-            firstState.ShouldBe(OpenTelemetryManager.TelemetryState.OptOut);
-            secondState.ShouldBe(OpenTelemetryManager.TelemetryState.OptOut);
+            // Because the manager is already initialized, second call is a no-op
+            state1.ShouldBe(false);
+            state2.ShouldBe(false);
         }
 
         /* Helper methods */
@@ -146,35 +113,18 @@ public void Initialize_ShouldNoOp_WhenCalledMultipleTimes()
         /// </summary>
         private void ResetManagerState()
         {
-            // The manager is a private static Lazy<OpenTelemetryManager>. We can forcibly
-            // set the instance's internal fields to revert it to Uninitialized.
-            // Another approach is to forcibly re-create the Lazy<T>, but that's more complicated.
-            //
-            // For demonstration, we do minimal reflection to set:
-            //    _telemetryState = TelemetryState.Uninitialized
-            //    DefaultActivitySource = null
-
             var instance = OpenTelemetryManager.Instance;
-            // 1. telemetryState
+
+            // 1. Reset the private _telemetryState field
             var telemetryStateField = typeof(OpenTelemetryManager)
                 .GetField("_telemetryState", BindingFlags.NonPublic | BindingFlags.Instance);
             telemetryStateField?.SetValue(instance, OpenTelemetryManager.TelemetryState.Uninitialized);
 
-            // 2. DefaultActivitySource
+            // 2. Null out the DefaultActivitySource property
             var defaultSourceProp = typeof(OpenTelemetryManager)
                 .GetProperty(nameof(OpenTelemetryManager.DefaultActivitySource),
                     BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
             defaultSourceProp?.SetValue(instance, null);
         }
-
-        /// <summary>
-        /// Reads the private _telemetryState field from the given manager instance using reflection.
-        /// </summary>
-        private OpenTelemetryManager.TelemetryState GetTelemetryState(OpenTelemetryManager manager)
-        {
-            var field = typeof(OpenTelemetryManager)
-                .GetField("_telemetryState", BindingFlags.NonPublic | BindingFlags.Instance);
-            return (OpenTelemetryManager.TelemetryState)field?.GetValue(manager)!;
-        }
     }
 }
