diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 3a9f26d93f2..1e865754039 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1725,7 +1725,7 @@ internal static void GatherCommandLineSwitches(ArrayList commandLineArgs, Comman
                                 String.Equals(switchName, "maxcpucount", StringComparison.OrdinalIgnoreCase))
                             {
                                 int numberOfCpus = Environment.ProcessorCount;
-                                if (numberOfCpus == 32 && NativeMethodsShared.IsWindows) // 32-bit process, 32-bit Windows had a 32-core limit
+                                if (IntPtr.Size == 4 && NativeMethodsShared.IsWindows) // 32-bit process, 32-bit Windows had a 32-core limit
                                 {
                                     var result = NativeMethodsShared.GetPhysicalCoreCount();
                                     if(result != -1)
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 21c155f7aa2..e1d766cbe05 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -136,32 +136,29 @@ private enum eDesiredAccess : int
             PROCESS_QUERY_INFORMATION = 0x0400,
             PROCESS_ALL_ACCESS = SYNCHRONIZE | 0xFFF
         }
-
+#pragma warning disable 0649, 0169
         internal enum LOGICAL_PROCESSOR_RELATIONSHIP
-		{
-			RelationProcessorCore,
-			RelationNumaNode,
-			RelationCache,
-			RelationProcessorPackage,
-			RelationGroup,
-			RelationAll = 0xffff
-		}
-
+        {
+            RelationProcessorCore,
+            RelationNumaNode,
+            RelationCache,
+            RelationProcessorPackage,
+            RelationGroup,
+            RelationAll = 0xffff
+        }
         internal struct SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
         {
             public LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
             public uint Size;
             public GROUP_RELATIONSHIP Group;
         }
-
         internal unsafe struct GROUP_RELATIONSHIP
         {
-            private byte MaximumGroupCount;
+            private ushort MaximumGroupCount;
             public ushort ActiveGroupCount;
             private fixed byte Reserved[20];
             public PROCESSOR_GROUP_INFO GroupInfo;
         }
-
         internal unsafe struct PROCESSOR_GROUP_INFO
         {
             public byte MaximumProcessorCount;
@@ -169,6 +166,7 @@ internal unsafe struct PROCESSOR_GROUP_INFO
             public fixed byte Reserved[38];
             public IntPtr ActiveProcessorMask;
         }
+#pragma warning restore 0169, 0149
 
         /// <summary>
         /// Flags for CoWaitForMultipleHandles
@@ -503,6 +501,11 @@ public SystemInformationData()
             }
         }
 
+        /// <summary>
+        /// Get the exact physical core count on Windows
+        /// Useful for getting the exact core count in 32 bits processes,
+        /// as Environment.ProcessorCount has a 32-core limit in that case. 
+        /// </summary>
         public unsafe static int GetPhysicalCoreCount()
         {
             uint len = 0;
