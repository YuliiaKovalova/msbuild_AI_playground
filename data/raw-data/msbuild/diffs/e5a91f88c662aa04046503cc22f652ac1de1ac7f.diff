diff --git a/src/Build/Collections/RetrievableEntryHashSet/IRetrievableEntryHashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/IRetrievableEntryHashSet.cs
index 3100e7914a8..4d271575848 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/IRetrievableEntryHashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/IRetrievableEntryHashSet.cs
@@ -8,6 +8,12 @@
 
 namespace Microsoft.Build.Collections
 {
+    /// <summary>
+    /// Represents a hash set mapping string to <typeparamref name="T"/>, with the specialization that
+    /// value lookup supports using substrings of a provided key without requiring instantiating the substring
+    /// (in order to avoid the memory usage of string allocation).
+    /// </summary>
+    /// <typeparam name="T">The type of data the hash set contains (which must be <see cref="IKeyed"/>).</typeparam>
     internal interface IRetrievableEntryHashSet<T> :
         ICollection<T>,
         ISerializable,
diff --git a/src/Build/Collections/RetrievableEntryHashSet/IRetrievableValuedEntryHashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/IRetrievableValuedEntryHashSet.cs
index 8ed84e6a538..e3b10556772 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/IRetrievableValuedEntryHashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/IRetrievableValuedEntryHashSet.cs
@@ -8,6 +8,18 @@
 
 namespace Microsoft.Build.Collections
 {
+    /// <summary>
+    /// Like <see cref="IRetrievableEntryHashSet{T}"/>, this represents a hash set mapping string to <typeparamref name="T"/>
+    /// with the specialization that value lookup supports using substrings of a provided key without requiring instantiating
+    /// the substring (in order to avoid the memory usage of string allocation).
+    ///
+    /// This interface extends the functionality of <see cref="IRetrievableEntryHashSet{T}"/> by introducing the ability
+    /// to directly retrieve the Value of an instance of T instead of retrieving the instance of T itself. Implementations of
+    /// this interface can avoid the cost of allocating an instance of <typeparamref name="T"/> when the caller requests only
+    /// the Value.
+    /// </summary>
+    /// <typeparam name="T">The type of data the hash set contains (which must be
+    /// <see cref="IKeyed"/> and also <see cref="IValued"/>).</typeparam>
     internal interface IRetrievableValuedEntryHashSet<T> : IRetrievableEntryHashSet<T>
         where T : class, IKeyed, IValued
     {
diff --git a/src/Build/Collections/RetrievableEntryHashSet/RetrievableValuedEntryHashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/RetrievableValuedEntryHashSet.cs
index 218dc4ffdeb..c45da4e12b6 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/RetrievableValuedEntryHashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/RetrievableValuedEntryHashSet.cs
@@ -12,7 +12,6 @@ namespace Microsoft.Build.Collections
     /// <inheritdoc />
     [DebuggerTypeProxy(typeof(HashSetDebugView<>))]
     [DebuggerDisplay("Count = {Count}")]
-    [Serializable()]
 #if FEATURE_SECURITY_PERMISSIONS
     [System.Security.Permissions.HostProtection(MayLeakOnAbort = true)]
 #endif
diff --git a/src/Build/Instance/ImmutableProjectCollections/ImmutableGlobalPropertiesCollectionConverter.cs b/src/Build/Instance/ImmutableProjectCollections/ImmutableGlobalPropertiesCollectionConverter.cs
index 05e783506b9..b5579adf088 100644
--- a/src/Build/Instance/ImmutableProjectCollections/ImmutableGlobalPropertiesCollectionConverter.cs
+++ b/src/Build/Instance/ImmutableProjectCollections/ImmutableGlobalPropertiesCollectionConverter.cs
@@ -17,11 +17,22 @@
 
 namespace Microsoft.Build.Instance.ImmutableProjectCollections
 {
+    /// <summary>
+    /// A collection representing the set of Global ProjectPropertyInstance objects.
+    /// </summary>
+    /// <remarks>This class is used only when the containing ProjectInstance originates from an
+    /// immutable linked project source. It's specialized in order to reduce required allocations
+    /// by instead relying on the linked project source's collection of global properties
+    /// (the IDictionary _globalProperties) and the ProjectInstance's collection of all
+    /// properties (the PropertyDictionary _allProperties). When a property is requested,
+    /// _globalProperties is checked to determine whether the named property is actually
+    /// a global property and, if it is, then instance is retrieved from _allProperties.
+    /// </remarks>
     internal class ImmutableGlobalPropertiesCollectionConverter : IRetrievableEntryHashSet<ProjectPropertyInstance>
     {
-        private IDictionary<string, string> _globalProperties;
-        private PropertyDictionary<ProjectPropertyInstance> _allProperties;
-        private ValuesCollection _values;
+        private readonly IDictionary<string, string> _globalProperties;
+        private readonly PropertyDictionary<ProjectPropertyInstance> _allProperties;
+        private readonly ValuesCollection _values;
 
         public ImmutableGlobalPropertiesCollectionConverter(
             IDictionary<string, string> globalProperties,
@@ -92,12 +103,7 @@ public void CopyTo(KeyValuePair<string, ProjectPropertyInstance>[] array, int ar
 
         public ProjectPropertyInstance Get(string key)
         {
-            if (_globalProperties.ContainsKey(key))
-            {
-                return null;
-            }
-
-            return _allProperties[key];
+            return this[key];
         }
 
         public ProjectPropertyInstance Get(string key, int index, int length)
diff --git a/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDefinitionsListConverter.cs b/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDefinitionsListConverter.cs
index db8b19be7e9..1a1d499b0aa 100644
--- a/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDefinitionsListConverter.cs
+++ b/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDefinitionsListConverter.cs
@@ -92,12 +92,8 @@ public void CopyTo(T[] array, int arrayIndex)
             int currentIndex = arrayIndex;
             void PutItemIntoArray(TCached item)
             {
-                T? instance = _getInstance(item);
-                if (instance != null)
-                {
-                    array[currentIndex] = instance;
-                    ++currentIndex;
-                }
+                array[currentIndex] = _getInstance(item);
+                ++currentIndex;
             }
 
             if (_itemList != null)
diff --git a/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDictionary.cs b/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDictionary.cs
index c5b57a5a7fd..de2d06522ae 100644
--- a/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDictionary.cs
+++ b/src/Build/Instance/ImmutableProjectCollections/ImmutableItemDictionary.cs
@@ -24,8 +24,13 @@ internal sealed class ImmutableItemDictionary<TCached, T> : IItemDictionary<T>
         private readonly IDictionary<string, ICollection<TCached>> _itemsByType;
         private readonly ICollection<TCached> _allCachedItems;
         private readonly Func<TCached, T?> _getInstance;
+        private readonly Func<T, string?> _getItemType;
 
-        public ImmutableItemDictionary(ICollection<TCached> allItems, IDictionary<string, ICollection<TCached>> itemsByType, Func<TCached, T?> getInstance)
+        public ImmutableItemDictionary(
+            ICollection<TCached> allItems,
+            IDictionary<string, ICollection<TCached>> itemsByType,
+            Func<TCached, T?> getInstance,
+            Func<T, string?> getItemType)
         {
             if (allItems == null)
             {
@@ -35,6 +40,7 @@ public ImmutableItemDictionary(ICollection<TCached> allItems, IDictionary<string
             _allCachedItems = allItems;
             _itemsByType = itemsByType ?? throw new ArgumentNullException(nameof(itemsByType));
             _getInstance = getInstance;
+            _getItemType = getItemType;
         }
 
         /// <inheritdoc />
@@ -72,20 +78,19 @@ public ICollection<T> this[string itemType]
         /// <inheritdoc />
         public bool Contains(T projectItem)
         {
-            return _allCachedItems.Any(
-                    cachedItem =>
-                    {
-                        if (MSBuildNameIgnoreCaseComparer.Default.Equals(cachedItem.EvaluatedIncludeEscaped, projectItem.EvaluatedIncludeEscaped))
-                        {
-                            T? foundItem = _getInstance(cachedItem);
-                            if (foundItem is not null && foundItem.Equals(projectItem))
-                            {
-                                return true;
-                            }
-                        }
+            if (projectItem == null)
+            {
+                return false;
+            }
 
-                        return false;
-                    });
+            string? itemType = _getItemType(projectItem);
+            if (itemType == null)
+            {
+                return false;
+            }
+
+            ICollection<T> items = GetItems(itemType);
+            return items.Contains(projectItem);
         }
 
         /// <inheritdoc />
diff --git a/src/Build/Instance/ImmutableProjectCollections/ImmutableStringValuedListConverter.cs b/src/Build/Instance/ImmutableProjectCollections/ImmutableStringValuedListConverter.cs
index 7b6d921b318..89e12f7c0a1 100644
--- a/src/Build/Instance/ImmutableProjectCollections/ImmutableStringValuedListConverter.cs
+++ b/src/Build/Instance/ImmutableProjectCollections/ImmutableStringValuedListConverter.cs
@@ -52,12 +52,8 @@ public void CopyTo(string[] array, int arrayIndex)
             int currentIndex = arrayIndex;
             foreach (var item in _itemList)
             {
-                string? stringValue = _getStringValue(item);
-                if (stringValue != null)
-                {
-                    array[currentIndex] = stringValue;
-                    ++currentIndex;
-                }
+                array[currentIndex] = _getStringValue(item);
+                ++currentIndex;
             }
         }
 
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 91d085c53be..6b4ecede907 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -10,7 +10,6 @@
 using System.IO;
 using System.Linq;
 using System.Runtime.CompilerServices;
-using System.Threading;
 using System.Xml;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
@@ -908,7 +907,8 @@ private static ImmutableItemDictionary<ProjectItem, ProjectItemInstance> GetImmu
             var itemDictionary = new ImmutableItemDictionary<ProjectItem, ProjectItemInstance>(
                 linkedProject.Items,
                 itemsByType,
-                convertCachedItemToInstance);
+                convertCachedItemToInstance,
+                projectItemInstance => projectItemInstance.ItemType);
 
             return itemDictionary;
         }
