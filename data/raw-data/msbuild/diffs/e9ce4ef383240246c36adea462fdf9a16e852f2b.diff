diff --git a/documentation/release-checklist.md b/documentation/release-checklist.md
index 4f00f360e55..3ae646c436c 100644
--- a/documentation/release-checklist.md
+++ b/documentation/release-checklist.md
@@ -56,6 +56,7 @@ https://ceapex.visualstudio.com/CEINTL/_workitems/edit/957875 (DONE)
 - [ ] Get M2 or QB approval as necessary per the VS schedule
 - [ ]  Merge to VS (babysit the automatically generated VS insertion PR https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequests for the MSBuild commit noted in above step): {{URL_OF_VS_INSERTION}}
 - [ ] Update the PackageValidationBaselineVersion to the latest released version ({{THIS_RELEASE_VERSION}}.0) - this might require temporary addition of the [build artifacts feed](https://github.com/dotnet/msbuild/blob/29397b577e3ec0fe0c7650c3ab0400909655dc88/NuGet.config#L9) as the new version is not yet added to the official feeds (this is post release). This can trigger a high severity CG error (https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/how-to-securely-configure-package-source-files) - however it should be fine to keep this temporary feed untill the release.
+- [ ] Update the requested SDK version for bootstrap folder if a fresh sdk was released in [NetVersion](https://github.com/dotnet/msbuild/blob/main/eng/BootStrapMsBuild.props).
 
 ## ASAP On/After GA:
 
diff --git a/documentation/wiki/Bootstrap.md b/documentation/wiki/Bootstrap.md
index 059131f99a5..e33007c0f73 100644
--- a/documentation/wiki/Bootstrap.md
+++ b/documentation/wiki/Bootstrap.md
@@ -16,7 +16,7 @@ Fresh MSBuild bits are then copied to this folder.
 The constructed SDK is used for both local end-to-end tests and CI runs.
 
 ## Potential Cons
-The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.
+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. For subsequent runs, the SDK in bootstrap will be downloaded again only **if the requested version was changed**.
 
 ## Pros
 This approach simplifies testing MSBuild as part of dotnet by providing a ready and reliable environment without needing to patch anything into a globally installed SDK, as was previously required.
\ No newline at end of file
diff --git a/eng/BootStrapMsBuild.targets b/eng/BootStrapMsBuild.targets
index 6f84e7eb3a5..a33110623e1 100644
--- a/eng/BootStrapMsBuild.targets
+++ b/eng/BootStrapMsBuild.targets
@@ -204,13 +204,13 @@
 
   <!-- The task allow to download sdk bits for the specified version. It will be used later to bootstrap the runnable MSBuild. -->
   <UsingTask TaskName="MSBuild.Bootstrap.Utils.Tasks.InstallDotNetCoreTask" AssemblyFile="$(ArtifactsBinDir)MSBuild.Bootstrap.Utils\$(Configuration)\netstandard2.0\MSBuild.Bootstrap.Utils.dll" TaskFactory="TaskHostFactory" />
-  <Target Name="BootstrapNetCore" DependsOnTargets="CleanBootstrapFolder">
+  <Target Name="BootstrapNetCore">
 
     <PropertyGroup>
-      <InstallDir>$(ArtifactsBinDir)bootstrap\$(TargetFramework)\</InstallDir>
+      <InstallDir>$(ArtifactsBinDir)bootstrap\core\</InstallDir>
     </PropertyGroup>
 
-    <InstallDotNetCoreTask DotNetInstallScriptRootPath="$(DotNetRoot)" InstallDir="$(InstallDir)" Version="$(NetVersion)" DotNetInstallBaseUrl="https://raw.githubusercontent.com/dotnet/install-scripts/main/src/"/>
+    <InstallDotNetCoreTask DotNetInstallScriptRootPath="$(DotNetRoot)" InstallDir="$(InstallDir)" Version="$(NetVersion)"/>
   </Target>
 
   <Target Name="BootstrapNetCorePatch" AfterTargets="BootstrapNetCore">
diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 35ea847118c..22bbf5dd3f1 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -84,11 +84,8 @@ try {
   }
   else
   {
-    $buildToolPath = Join-Path $bootstrapRoot "net8.0\dotnet.exe"
-
-    # Must be consistent with the version in BootStrapMsBuild.props
-    $buildToolCommand = Join-Path $bootstrapRoot "net8.0\sdk\8.0.302\MSBuild.dll";
-
+    $buildToolPath = Join-Path $bootstrapRoot "core\dotnet.exe"
+    $buildToolCommand = "msbuild";
     $buildToolFramework = "net8.0"
   }
 
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index d97ba471e7e..2539d025c26 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -58,10 +58,8 @@ bootstrapRoot="$Stage1Dir/bin/bootstrap"
 
 if [ $host_type = "core" ]
 then
-  _InitializeBuildTool="$bootstrapRoot/net8.0/dotnet"
-
-  # Must be consistent with the version in BootStrapMsBuild.props
-  _InitializeBuildToolCommand="$bootstrapRoot/net8.0/sdk/8.0.302/MSBuild.dll"
+  _InitializeBuildTool="$bootstrapRoot/core/dotnet"
+  _InitializeBuildToolCommand="build"
   _InitializeBuildToolFramework="net8.0"
 else
   echo "Unsupported hostType ($host_type)"
diff --git a/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj b/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
index 179595c2350..7539d0dcedb 100644
--- a/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
+++ b/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
@@ -7,4 +7,4 @@
     <PackageReference Include="Microsoft.Build.Utilities.Core" VersionOverride="15.5.180" ExcludeAssets="runtime" PrivateAssets="all" />
   </ItemGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
index c5a8f2f1472..409d213f7e2 100644
--- a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
@@ -1,8 +1,6 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-#if RUNTIME_TYPE_NETCORE
-
 using System.Diagnostics;
 using System.IO;
 using System.Net.Http;
@@ -18,7 +16,7 @@ namespace MSBuild.Bootstrap.Utils.Tasks
     /// This task is designed to automate the installation of .NET Core SDK.
     /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.
     /// </summary>
-    public sealed class InstallDotNetCoreTask : Task
+    public sealed class InstallDotNetCoreTask : ToolTask
     {
         private const string ScriptName = "dotnet-install";
 
@@ -57,12 +55,20 @@ public InstallDotNetCoreTask()
 
         private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
 
+        protected override string ToolName => IsWindows ? "powershell.exe" : "/bin/bash";
+
         /// <summary>
         /// Executes the task, downloading and running the .NET Core installation script.
         /// </summary>
         /// <returns>True if the task succeeded; otherwise, false.</returns>
         public override bool Execute()
         {
+            if (Directory.Exists(InstallDir) || Directory.Exists(Path.Combine(InstallDir, "sdk", Version)))
+            {
+                // no need to download sdk again, it exists locally
+                return true;
+            }
+
             ScriptExecutionSettings executionSettings = SetupScriptsExecutionSettings();
             if (!File.Exists(executionSettings.ScriptsFullPath))
             {
@@ -74,6 +80,8 @@ public override bool Execute()
             return RunScript(executionSettings);
         }
 
+        protected override string GenerateFullPathToTool() => ToolName;
+
         /// <summary>
         /// Downloads the .NET Core installation script asynchronously from the specified URL.
         /// </summary>
@@ -178,7 +186,6 @@ private bool RunScript(ScriptExecutionSettings executionSettings)
         private ScriptExecutionSettings SetupScriptsExecutionSettings()
         {
             string scriptExtension = IsWindows ? "ps1" : "sh";
-            string executableName = IsWindows ? "powershell.exe" : "/bin/bash";
             string scriptPath = Path.Combine(DotNetInstallScriptRootPath, $"{ScriptName}.{scriptExtension}");
             string scriptArgs = IsWindows
                 ? $"-NoProfile -ExecutionPolicy Bypass -File {scriptPath} -Version {Version} -InstallDir {InstallDir}"
@@ -186,7 +193,7 @@ private ScriptExecutionSettings SetupScriptsExecutionSettings()
 
             var startInfo = new ProcessStartInfo
             {
-                FileName = executableName,
+                FileName = ToolName,
                 Arguments = scriptArgs,
                 RedirectStandardOutput = true,
                 RedirectStandardError = true,
@@ -194,20 +201,19 @@ private ScriptExecutionSettings SetupScriptsExecutionSettings()
                 CreateNoWindow = true,
             };
 
-            return new ScriptExecutionSettings(executableName, startInfo, $"{ScriptName}.{scriptExtension}", scriptPath);
+            return new ScriptExecutionSettings(startInfo, $"{ScriptName}.{scriptExtension}", scriptPath);
         }
 
         /// <summary>
         /// A private struct to hold settings for script execution.
         /// </summary>
-        private struct ScriptExecutionSettings(string executableName, ProcessStartInfo startInfo, string scriptName, string scriptsFullPath)
+        private struct ScriptExecutionSettings(ProcessStartInfo startInfo, string scriptName, string scriptsFullPath)
         {
-            public string ExecutableName { get; } = executableName;
             public ProcessStartInfo StartInfo { get; } = startInfo;
+
             public string ScriptName { get; } = scriptName;
+
             public string ScriptsFullPath { get; } = scriptsFullPath;
         }
     }
 }
-
-#endif
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index d83b9a6b34b..381cffe049f 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -48,7 +48,6 @@
 
   <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))" />
   <Import Project="..\Package\GetBinPaths.Arm64.targets" Condition="$(TargetFramework.StartsWith('net4'))" />
-  
   <Import Project="$(RepoRoot)eng\BootStrapMsBuild.targets" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 5bdaff55739..76c117cf103 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -433,12 +433,6 @@
     <Content Include="Microsoft.Common.props">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </Content>
-    <!-- For .NET Core, Microsoft.Common.props needs to be in version subfolder for bootstrap build, but in MSBuild exe
-         path for some tests.  So include it twice. -->
-    <Content Include="Microsoft.Common.props" Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
-      <Link>Current\Microsoft.Common.props</Link>
-    </Content>
     <Content Include="Microsoft.Common.tasks">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </Content>
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 4a254efc218..dafe0d10bcf 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -35,7 +35,7 @@
   </PropertyGroup>
 
   <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
-    <TestBootstrapBinaryDestination>$(ArtifactsBinDir)bootstrap\$(TargetFramework.ToLowerInvariant())</TestBootstrapBinaryDestination>
+    <TestBootstrapBinaryDestination>$(ArtifactsBinDir)bootstrap\core</TestBootstrapBinaryDestination>
   </PropertyGroup>
 
   <ItemGroup>
