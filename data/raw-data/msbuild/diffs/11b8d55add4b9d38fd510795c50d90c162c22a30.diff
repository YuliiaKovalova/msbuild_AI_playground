diff --git a/src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs
index 238ba625ae3..ba6e2f50ecd 100644
--- a/src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_SizeChange_Tests.cs
@@ -3,10 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using System.IO;
 using System.Linq;
 using System.Text;
-using System.Text.RegularExpressions;
 using System.Threading.Tasks;
 
 using Microsoft.Build.Logging.TerminalLogger;
diff --git a/src/MSBuild/TerminalLogger/NodeStatus.cs b/src/MSBuild/TerminalLogger/NodeStatus.cs
index 021f506b061..3b3de635dee 100644
--- a/src/MSBuild/TerminalLogger/NodeStatus.cs
+++ b/src/MSBuild/TerminalLogger/NodeStatus.cs
@@ -50,13 +50,10 @@ public NodeStatus(string project, string? targetFramework, string target, Stopwa
     /// <param name="target">The currently running work, usually the currently runnig target. Written on right.</param>
     /// <param name="stopwatch">Duration of the current step. Written on right after target.</param>
     public NodeStatus(string project, string? targetFramework, TerminalColor targetPrefixColor, string targetPrefix, string target, StopwatchAbstraction stopwatch)
+        : this(project, targetFramework, target, stopwatch)
     {
-        Project = project;
-        TargetFramework = targetFramework;
         TargetPrefixColor = targetPrefixColor;
         TargetPrefix = targetPrefix;
-        Target = target;
-        Stopwatch = stopwatch;
     }
 
     /// <summary>
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 313035e428b..195ebb95789 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -9,7 +9,6 @@
 using Microsoft.Build.Shared;
 using System.Text.RegularExpressions;
 using System.Diagnostics;
-using System.Collections.Concurrent;
 
 #if NET7_0_OR_GREATER
 using System.Diagnostics.CodeAnalysis;
@@ -177,7 +176,7 @@ public ProjectContext(BuildEventContext context)
     /// <summary>
     /// One summary per finished project test run.
     /// </summary>
-    private ConcurrentBag<TestSummary> _testRunSummaries = new();
+    private List<TestSummary> _testRunSummaries = new();
 
     /// <summary>
     /// Name of target that identifies a project that has tests, and that they just started.
@@ -294,9 +293,6 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
 
         _projects.Clear();
 
-        var testRunSummaries = _testRunSummaries.ToList();
-        _testRunSummaries = new ConcurrentBag<TestSummary>();
-
         Terminal.BeginUpdate();
         try
         {
@@ -317,15 +313,15 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
                     duration));
             }
 
-            if (testRunSummaries.Any())
+            if (_testRunSummaries.Any())
             {
-                var total = testRunSummaries.Sum(t => t.Total);
-                var failed = testRunSummaries.Sum(t => t.Failed);
-                var passed = testRunSummaries.Sum(t => t.Passed);
-                var skipped = testRunSummaries.Sum(t => t.Skipped);
+                var total = _testRunSummaries.Sum(t => t.Total);
+                var failed = _testRunSummaries.Sum(t => t.Failed);
+                var passed = _testRunSummaries.Sum(t => t.Passed);
+                var skipped = _testRunSummaries.Sum(t => t.Skipped);
                 var testDuration = (_testStartTime != null && _testEndTime != null ? (_testEndTime - _testStartTime).Value.TotalSeconds : 0).ToString("F1");
 
-                var colorizedResult = testRunSummaries.Any(t => t.Failed > 0) || _buildHasErrors
+                var colorizedResult = _testRunSummaries.Any(t => t.Failed > 0) || _buildHasErrors
                     ? AnsiCodes.Colorize(ResourceUtilities.GetResourceString("BuildResult_Failed"), TerminalColor.Red)
                     : AnsiCodes.Colorize(ResourceUtilities.GetResourceString("BuildResult_Succeeded"), TerminalColor.Green);
 
@@ -348,6 +344,7 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
             Terminal.EndUpdate();
         }
 
+        _testRunSummaries.Clear();
         _buildHasErrors = false;
         _buildHasWarnings = false;
         _restoreFailed = false;
@@ -699,13 +696,7 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
                                 _ = int.TryParse(extendedMessage.ExtendedMetadata!["skipped"]!, out int skipped);
                                 _ = int.TryParse(extendedMessage.ExtendedMetadata!["failed"]!, out int failed);
 
-                                _testRunSummaries.Add(new TestSummary
-                                {
-                                    Total = total,
-                                    Passed = passed,
-                                    Skipped = skipped,
-                                    Failed = failed,
-                                });
+                                _testRunSummaries.Add(new TestSummary(total, passed, skipped, failed));
 
                                 _testEndTime = _testEndTime == null
                                         ? e.Timestamp
diff --git a/src/MSBuild/TerminalLogger/TestSummary.cs b/src/MSBuild/TerminalLogger/TestSummary.cs
index c7a800d4ad8..dff316e37b8 100644
--- a/src/MSBuild/TerminalLogger/TestSummary.cs
+++ b/src/MSBuild/TerminalLogger/TestSummary.cs
@@ -5,11 +5,5 @@
 
 namespace Microsoft.Build.Logging.TerminalLogger
 {
-    internal class TestSummary
-    {
-        public int Total { get; set; }
-        public int Passed { get; set; }
-        public int Skipped { get; set; }
-        public int Failed { get; set; }
-    }
+    internal readonly record struct TestSummary(int Total, int Passed, int Skipped, int Failed);
 }
