diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
index d8eca6c3848..8a0cc2ed489 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
@@ -59,30 +59,28 @@ public static long SkipBytes(this Stream stream, long bytesCount, byte[] buffer)
 
         public static byte[] ReadToEnd(this Stream stream)
         {
-            if (stream.TryGetLength(out long length))
-            {
-                using BinaryReader reader = new(stream, Encoding.UTF8, leaveOpen: true);
-
-                return reader.ReadBytes((int)length);
-            }
-
-            using var ms = new MemoryStream();
+            MemoryStream ms = stream.TryGetLength(out long length) && length <= int.MaxValue ? new((int)length) : new();
             stream.CopyTo(ms);
-            return ms.ToArray();
+            byte[] buffer = ms.GetBuffer();
+            return buffer.Length == ms.Length ? buffer : ms.ToArray();
         }
 
         public static bool TryGetLength(this Stream stream, out long length)
         {
             try
             {
-                length = stream.Length;
-                return true;
+                if (stream.CanSeek)
+                {
+                    length = stream.Length;
+                    return true;
+                }
             }
             catch (NotSupportedException)
             {
-                length = 0;
-                return false;
             }
+
+            length = 0;
+            return false;
         }
 
         public static Stream ToReadableSeekableStream(this Stream stream)
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/SubStream.cs b/src/Build/Logging/BinaryLogger/Postprocessing/SubStream.cs
index ff5caf9bfdf..8c6e0c6e2b8 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/SubStream.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/SubStream.cs
@@ -3,6 +3,8 @@
 
 using System;
 using System.IO;
+using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Logging
@@ -40,7 +42,8 @@ public SubStream(Stream stream, long length)
 
         public override long Position { get => _position; set => throw new NotImplementedException(); }
 
-        public override void Flush() { }
+        public override void Flush() => _stream.Flush();
+        public override Task FlushAsync(CancellationToken cancellationToken) => _stream.FlushAsync(cancellationToken);
         public override int Read(byte[] buffer, int offset, int count)
         {
             count = Math.Min((int)Math.Max(Length - _position, 0), count);
@@ -48,6 +51,50 @@ public override int Read(byte[] buffer, int offset, int count)
             _position += read;
             return read;
         }
+
+        public override int ReadByte()
+        {
+            if (Length - _position > 0)
+            {
+                int value = _stream.ReadByte();
+                if (value >= 0)
+                {
+                    _position++;
+                    return value;
+                }
+            }
+
+            return -1;
+        }
+
+        public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
+        {
+            count = Math.Min((int)Math.Max(Length - _position, 0), count);
+#pragma warning disable CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
+            int read = await _stream.ReadAsync(buffer, offset, count, cancellationToken).ConfigureAwait(false);
+#pragma warning restore CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
+            _position += read;
+            return read;
+        }
+
+#if NET
+        public override int Read(Span<byte> buffer)
+        {
+            buffer = buffer.Slice(0, Math.Min((int)Math.Max(Length - _position, 0), buffer.Length));
+            int read = _stream.Read(buffer);
+            _position += read;
+            return read;
+        }
+
+        public override async ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default)
+        {
+            buffer = buffer.Slice(0, Math.Min((int)Math.Max(Length - _position, 0), buffer.Length));
+            int read = await _stream.ReadAsync(buffer, cancellationToken).ConfigureAwait(false);
+            _position += read;
+            return read;
+        }
+#endif
+
         public override long Seek(long offset, SeekOrigin origin) => throw new NotImplementedException();
         public override void SetLength(long value) => throw new NotImplementedException();
         public override void Write(byte[] buffer, int offset, int count) => throw new NotImplementedException();
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
index 4dd9afa0300..ea3fcb3c9c7 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
@@ -3,6 +3,8 @@
 
 using System;
 using System.IO;
+using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Logging
@@ -75,6 +77,11 @@ public override void Flush()
             _stream.Flush();
         }
 
+        public override Task FlushAsync(CancellationToken cancellationToken)
+        {
+            return _stream.FlushAsync(cancellationToken);
+        }
+
         public override int Read(byte[] buffer, int offset, int count)
         {
             if (_position + count > _maxAllowedPosition)
@@ -87,6 +94,61 @@ public override int Read(byte[] buffer, int offset, int count)
             return cnt;
         }
 
+        public override int ReadByte()
+        {
+            if (_position + 1 <= _maxAllowedPosition)
+            {
+                int value = _stream.ReadByte();
+                if (value >= 0)
+                {
+                    _position++;
+                    return value;
+                }
+            }
+
+            return -1;
+        }
+
+        public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
+        {
+            if (_position + count > _maxAllowedPosition)
+            {
+                count = (int)(_maxAllowedPosition - _position);
+            }
+
+#pragma warning disable CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
+            int cnt = await _stream.ReadAsync(buffer, offset, count, cancellationToken).ConfigureAwait(false);
+#pragma warning restore CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
+            _position += cnt;
+            return cnt;
+        }
+
+#if NET
+        public override int Read(Span<byte> buffer)
+        {
+            if (_position + buffer.Length > _maxAllowedPosition)
+            {
+                buffer = buffer.Slice(0, (int)(_maxAllowedPosition - _position));
+            }
+
+            int cnt = _stream.Read(buffer);
+            _position += cnt;
+            return cnt;
+        }
+
+        public override async ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default)
+        {
+            if (_position + buffer.Length > _maxAllowedPosition)
+            {
+                buffer = buffer.Slice(0, (int)(_maxAllowedPosition - _position));
+            }
+
+            int cnt = await _stream.ReadAsync(buffer, cancellationToken).ConfigureAwait(false);
+            _position += cnt;
+            return cnt;
+        }
+#endif
+
         public override long Seek(long offset, SeekOrigin origin)
         {
             if (origin != SeekOrigin.Current)
