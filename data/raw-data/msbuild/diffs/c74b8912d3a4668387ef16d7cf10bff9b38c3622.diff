diff --git a/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs b/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs
index 5123d3c0bfe..ce3e4fb6ee3 100644
--- a/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs
+++ b/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs
@@ -4,16 +4,27 @@
 #if NETFRAMEWORK
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
+using System.Configuration.Assemblies;
+using System.Data;
+using System.Data.SqlTypes;
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading.Tasks;
 using System.Xml;
+using System.Xml.Linq;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
+using Microsoft.Build.Utilities;
 using Shouldly;
+using VerifyTests;
 using Xunit;
 using Xunit.Abstractions;
 using Xunit.Sdk;
@@ -34,6 +45,7 @@ public class PopulateSupportedArchitectures_Tests
         [Theory]
         [InlineData("testManifestWithInvalidSupportedArchs.manifest", false)]
         [InlineData("testManifestWithApplicationDefined.manifest", true)]
+        [InlineData("testManifestWithValidSupportedArchs.manifest", true)]
         [InlineData(null, true)]
         public void ManifestPopulationCheck(string manifestName, bool expectedResult)
         {
@@ -45,7 +57,7 @@ public void ManifestPopulationCheck(string manifestName, bool expectedResult)
             using (TestEnvironment env = TestEnvironment.Create())
             {
                 var tempOutput = env.CreateFolder().Path;
-                task.OutputPath = tempOutput;
+                task.OutputDirectory = tempOutput;
                 if (!string.IsNullOrEmpty(manifestName))
                 {
                     task.ApplicationManifestPath = Path.Combine(TestAssetsRootPath, manifestName);
@@ -57,8 +69,8 @@ public void ManifestPopulationCheck(string manifestName, bool expectedResult)
 
                 if (result)
                 {
-                    var generatedManifest = task.ManifestPath;
-                    var expectedManifest = Path.Combine(TestAssetsRootPath, $"{manifestName ?? "default.win32manifest"}_expected");
+                    string generatedManifest = task.ManifestPath;
+                    string expectedManifest = Path.Combine(TestAssetsRootPath, $"{manifestName ?? "default.win32manifest"}_expected");
 
                     XmlDocument expectedDoc = new XmlDocument();
                     XmlDocument actualDoc = new XmlDocument();
@@ -68,9 +80,120 @@ public void ManifestPopulationCheck(string manifestName, bool expectedResult)
 
                     expectedDoc.OuterXml.ShouldBe(actualDoc.OuterXml);
                     expectedDoc.InnerXml.ShouldBe(actualDoc.InnerXml);
+
+                    task.ManifestPath.ShouldNotBeEmpty();
+                }
+            }
+        }
+
+        [Theory]
+        [InlineData(null, true)]
+        [InlineData("buildIn.manifest", true)]
+        public void E2EScenarioTests(string manifestName, bool expectedResult)
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                var outputPath = env.CreateFolder().Path;
+                string projectContent = @$"
+                <Project DefaultTargets=""Build"">
+                    <Import Project=""$(MSBuildBinPath)\Microsoft.Common.props"" />
+
+                    <PropertyGroup>
+                        <Platform>AnyCPU</Platform>
+                        <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
+                        <OutputType>Library</OutputType>
+                        <PreferNativeArm64>true</PreferNativeArm64>
+                        <Prefer32Bit>false</Prefer32Bit>
+                        {(!string.IsNullOrEmpty(manifestName) ? $"<ApplicationManifest>{manifestName}</ApplicationManifest>" : "")}
+                        <IntermediateOutputPath>{outputPath}</IntermediateOutputPath>
+                    </PropertyGroup>
+
+                    <Target Name=""Build""/>
+                    <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
+
+                </Project>
+                ";
+
+                var projectFolder = env.CreateFolder();
+                var projectFile = env.CreateFile(projectFolder, "test.csproj", projectContent).Path;
+
+                // copy application manifest
+                if (!string.IsNullOrEmpty(manifestName))
+                {
+                    File.Copy(Path.Combine(TestAssetsRootPath, manifestName), Path.Combine(projectFolder.Path, manifestName));
+                }
+
+                Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(projectFile, touchProject: false);
+
+                bool result = project.Build(new MockLogger(_testOutput));
+                result.ShouldBe(expectedResult);
+
+                // #2 - represents the name for native resource (Win 32 resource), #24 - the type (Manifest) 
+                byte[]? actualManifestBytes = AssemblyNativeResourceManager.GetResourceFromExecutable(Path.Combine(outputPath, "test.dll"), "#2", "#24");
+
+                // check manifest content
+                if (actualManifestBytes != null)
+                {
+                    string expectedManifest = Path.Combine(TestAssetsRootPath, $"{manifestName ?? "default.win32manifest"}_expected");
+
+                    XmlDocument expectedDoc = new XmlDocument();
+                    XmlDocument actualDoc = new XmlDocument();
+
+                    expectedDoc.Load(expectedManifest);
+                    using (MemoryStream stream = new MemoryStream(actualManifestBytes))
+                    {
+                        actualDoc.Load(stream);
+                    }
+
+                    expectedDoc.OuterXml.ShouldBe(actualDoc.OuterXml);
+                    expectedDoc.InnerXml.ShouldBe(actualDoc.InnerXml);
                 }
             }
         }
+
+        internal class AssemblyNativeResourceManager
+        {
+            public enum LoadLibraryFlags : uint { LOAD_LIBRARY_AS_DATAFILE = 2 };
+
+            [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
+            public static extern IntPtr LoadLibrary(string lpFileName, IntPtr hReservedNull, LoadLibraryFlags dwFlags);
+
+            [DllImport("kernel32.dll", SetLastError = true)]
+            public static extern IntPtr FindResource(IntPtr hModule, string lpName, string lpType);
+
+            [DllImport("kernel32.dll", SetLastError = true)]
+            public static extern IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);
+
+            [DllImport("kernel32.dll", SetLastError = true)]
+            public static extern IntPtr LockResource(IntPtr hResData);
+
+            [DllImport("kernel32.dll", SetLastError = true)]
+            public static extern uint SizeofResource(IntPtr hModule, IntPtr hResInfo);
+
+            public static byte[]? GetResourceFromExecutable(string assembly, string lpName, string lpType)
+            {
+                IntPtr hModule = LoadLibrary(assembly, IntPtr.Zero, LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE);
+                if (hModule != IntPtr.Zero)
+                {
+                    IntPtr hResource = FindResource(hModule, "#2", "#24");
+                    if (hResource != IntPtr.Zero)
+                    {
+                        uint resSize = SizeofResource(hModule, hResource);
+                        IntPtr resData = LoadResource(hModule, hResource);
+                        if (resData != IntPtr.Zero)
+                        {
+                            byte[] uiBytes = new byte[resSize];
+                            IntPtr ipMemorySource = LockResource(resData);
+                            Marshal.Copy(ipMemorySource, uiBytes, 0, (int)resSize);
+
+                            return uiBytes;
+                        }
+                    }
+                }
+
+                return null;
+            }
+        }
     }
 }
 #endif
diff --git a/src/Tasks.UnitTests/TestResources/Manifests/buildIn.manifest b/src/Tasks.UnitTests/TestResources/Manifests/buildIn.manifest
new file mode 100644
index 00000000000..9ce67d2b1a2
--- /dev/null
+++ b/src/Tasks.UnitTests/TestResources/Manifests/buildIn.manifest
@@ -0,0 +1,79 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
+  <assemblyIdentity version="1.0.0.0" name="MyApplication.app"/>
+  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
+    <security>
+      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
+        <!-- UAC Manifest Options
+             If you want to change the Windows User Account Control level replace the 
+             requestedExecutionLevel node with one of the following.
+
+        <requestedExecutionLevel  level="asInvoker" uiAccess="false" />
+        <requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />
+        <requestedExecutionLevel  level="highestAvailable" uiAccess="false" />
+
+            Specifying requestedExecutionLevel element will disable file and registry virtualization. 
+            Remove this element if your application requires this virtualization for backwards
+            compatibility.
+        -->
+        <requestedExecutionLevel level="asInvoker" uiAccess="false" />
+      </requestedPrivileges>
+    </security>
+  </trustInfo>
+
+  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
+    <application>
+      <!-- A list of the Windows versions that this application has been tested on
+           and is designed to work with. Uncomment the appropriate elements
+           and Windows will automatically select the most compatible environment. -->
+
+      <!-- Windows Vista -->
+      <!--<supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}" />-->
+
+      <!-- Windows 7 -->
+      <!--<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}" />-->
+
+      <!-- Windows 8 -->
+      <!--<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}" />-->
+
+      <!-- Windows 8.1 -->
+      <!--<supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}" />-->
+
+      <!-- Windows 10 -->
+      <!--<supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}" />-->
+
+    </application>
+  </compatibility>
+
+  <!-- Indicates that the application is DPI-aware and will not be automatically scaled by Windows at higher
+       DPIs. Windows Presentation Foundation (WPF) applications are automatically DPI-aware and do not need 
+       to opt in. Windows Forms applications targeting .NET Framework 4.6 that opt into this setting, should 
+       also set the 'EnableWindowsFormsHighDpiAutoResizing' setting to 'true' in their app.config. 
+       
+       Makes the application long-path aware. See https://docs.microsoft.com/windows/win32/fileio/maximum-file-path-limitation -->
+  <!--
+  <application xmlns="urn:schemas-microsoft-com:asm.v3">
+    <windowsSettings>
+      <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true</dpiAware>
+      <longPathAware xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">true</longPathAware>
+    </windowsSettings>
+  </application>
+  -->
+
+  <!-- Enable themes for Windows common controls and dialogs (Windows XP and later) -->
+  <!--
+  <dependency>
+    <dependentAssembly>
+      <assemblyIdentity
+          type="win32"
+          name="Microsoft.Windows.Common-Controls"
+          version="6.0.0.0"
+          processorArchitecture="*"
+          publicKeyToken="6595b64144ccf1df"
+          language="*"
+        />
+    </dependentAssembly>
+  </dependency>
+  -->
+
+</assembly>
diff --git a/src/Tasks.UnitTests/TestResources/Manifests/buildIn.manifest_expected b/src/Tasks.UnitTests/TestResources/Manifests/buildIn.manifest_expected
new file mode 100644
index 00000000000..71bd3f99e5b
--- /dev/null
+++ b/src/Tasks.UnitTests/TestResources/Manifests/buildIn.manifest_expected
@@ -0,0 +1,74 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
+  <assemblyIdentity version="1.0.0.0" name="MyApplication.app" />
+  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
+    <security>
+      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
+        <!-- UAC Manifest Options
+             If you want to change the Windows User Account Control level replace the 
+             requestedExecutionLevel node with one of the following.
+
+        <requestedExecutionLevel  level="asInvoker" uiAccess="false" />
+        <requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />
+        <requestedExecutionLevel  level="highestAvailable" uiAccess="false" />
+
+            Specifying requestedExecutionLevel element will disable file and registry virtualization. 
+            Remove this element if your application requires this virtualization for backwards
+            compatibility.
+        -->
+        <requestedExecutionLevel level="asInvoker" uiAccess="false" />
+      </requestedPrivileges>
+    </security>
+  </trustInfo>
+  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
+    <application>
+      <!-- A list of the Windows versions that this application has been tested on
+           and is designed to work with. Uncomment the appropriate elements
+           and Windows will automatically select the most compatible environment. -->
+      <!-- Windows Vista -->
+      <!--<supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}" />-->
+      <!-- Windows 7 -->
+      <!--<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}" />-->
+      <!-- Windows 8 -->
+      <!--<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}" />-->
+      <!-- Windows 8.1 -->
+      <!--<supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}" />-->
+      <!-- Windows 10 -->
+      <!--<supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}" />-->
+    </application>
+  </compatibility>
+  <!-- Indicates that the application is DPI-aware and will not be automatically scaled by Windows at higher
+       DPIs. Windows Presentation Foundation (WPF) applications are automatically DPI-aware and do not need 
+       to opt in. Windows Forms applications targeting .NET Framework 4.6 that opt into this setting, should 
+       also set the 'EnableWindowsFormsHighDpiAutoResizing' setting to 'true' in their app.config. 
+       
+       Makes the application long-path aware. See https://docs.microsoft.com/windows/win32/fileio/maximum-file-path-limitation -->
+  <!--
+  <application xmlns="urn:schemas-microsoft-com:asm.v3">
+    <windowsSettings>
+      <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true</dpiAware>
+      <longPathAware xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">true</longPathAware>
+    </windowsSettings>
+  </application>
+  -->
+  <!-- Enable themes for Windows common controls and dialogs (Windows XP and later) -->
+  <!--
+  <dependency>
+    <dependentAssembly>
+      <assemblyIdentity
+          type="win32"
+          name="Microsoft.Windows.Common-Controls"
+          version="6.0.0.0"
+          processorArchitecture="*"
+          publicKeyToken="6595b64144ccf1df"
+          language="*"
+        />
+    </dependentAssembly>
+  </dependency>
+  -->
+  <asmv3:application xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
+    <asmv3:windowsSettings xmlns="http://schemas.microsoft.com/SMI/2024/WindowsSettings">
+      <supportedArchitectures>amd64 arm64</supportedArchitectures>
+    </asmv3:windowsSettings>
+  </asmv3:application>
+</assembly>
diff --git a/src/Tasks.UnitTests/TestResources/Manifests/testManifestWithValidSupportedArchs.manifest b/src/Tasks.UnitTests/TestResources/Manifests/testManifestWithValidSupportedArchs.manifest
new file mode 100644
index 00000000000..97516d5c2a4
--- /dev/null
+++ b/src/Tasks.UnitTests/TestResources/Manifests/testManifestWithValidSupportedArchs.manifest
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8" standalone="yes"?>
+<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
+  <asmv3:application xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
+    <asmv3:windowsSettings xmlns="http://schemas.microsoft.com/SMI/2024/WindowsSettings">
+      <supportedArchitectures>amd64 arm64</supportedArchitectures>
+    </asmv3:windowsSettings>
+  </asmv3:application>
+</assembly>
diff --git a/src/Tasks.UnitTests/TestResources/Manifests/testManifestWithValidSupportedArchs.manifest_expected b/src/Tasks.UnitTests/TestResources/Manifests/testManifestWithValidSupportedArchs.manifest_expected
new file mode 100644
index 00000000000..97516d5c2a4
--- /dev/null
+++ b/src/Tasks.UnitTests/TestResources/Manifests/testManifestWithValidSupportedArchs.manifest_expected
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8" standalone="yes"?>
+<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
+  <asmv3:application xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
+    <asmv3:windowsSettings xmlns="http://schemas.microsoft.com/SMI/2024/WindowsSettings">
+      <supportedArchitectures>amd64 arm64</supportedArchitectures>
+    </asmv3:windowsSettings>
+  </asmv3:application>
+</assembly>
diff --git a/src/Tasks/Al.cs b/src/Tasks/Al.cs
index 72982d5dafc..0b587df5b74 100644
--- a/src/Tasks/Al.cs
+++ b/src/Tasks/Al.cs
@@ -199,12 +199,6 @@ public bool Prefer32Bit
             get => GetBoolParameterWithDefault(nameof(Prefer32Bit), false);
         }
 
-        public bool PreferNativeArm64
-        {
-            set => Bag[nameof(PreferNativeArm64)] = value;
-            get => GetBoolParameterWithDefault(nameof(PreferNativeArm64), false);
-        }
-
         public string ProductName
         {
             set => Bag[nameof(ProductName)] = value;
@@ -452,8 +446,6 @@ public AL()
 
         public bool Prefer32Bit { get; set; }
 
-        public bool PreferNativeArm64 { get; set; }
-
         public string ProductName { get; set; }
 
         public string ProductVersion { get; set; }
@@ -509,7 +501,6 @@ internal interface IALTaskContract
         ITaskItem OutputAssembly { get; set; }
         string Platform { get; set; }
         bool Prefer32Bit { get; set; }
-        bool PreferNativeArm64 { get; set; }
         string ProductName { get; set; }
         string ProductVersion { get; set; }
         string[] ResponseFiles { get; set; }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 4c990ff473e..92d77374e3e 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -4121,7 +4121,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Target
       Name="SetWin32ManifestProperties"
       Condition="'$(Win32Manifest)'==''"
-      DependsOnTargets="ResolveComReferences;ResolveNativeReferences;_SetExternalWin32ManifestProperties;_SetPreferNativeArm64Win32ManifestProperties" />
+      DependsOnTargets="ResolveComReferences;ResolveNativeReferences;_SetExternalWin32ManifestProperties;_SetEmbeddedWin32ManifestProperties;_SetPreferNativeArm64Win32ManifestProperties" />
 
   <Target
       Name="_SetExternalWin32ManifestProperties"
@@ -4146,11 +4146,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Target
     Name="_SetPreferNativeArm64Win32ManifestProperties"
-    Condition=" '$(PreferNativeArm64)'=='true' and '$(Platform)'=='AnyCPU' and '$(Prefer32Bit)'!='true' and '$(NoWin32Manifest)'!='true' ">
+    Condition=" '$(PreferNativeArm64)'=='true' ">
 
+    <PropertyGroup>
+      <SupportedArchitectures>amd64 arm64</SupportedArchitectures>
+    </PropertyGroup>
     <PopulateSupportedArchitectures
         ApplicationManifestPath="$(ApplicationManifest)"
-        OutputPath="$(IntermediateOutputPath)">
+        OutputDirectory="$(IntermediateOutputPath)"
+        SupportedArchitectures="$(SupportedArchitectures)">
 
         <Output TaskParameter="ManifestPath" PropertyName="Win32Manifest"/>
     </PopulateSupportedArchitectures>
diff --git a/src/Tasks/PopulateSupportedArchitectures.cs b/src/Tasks/PopulateSupportedArchitectures.cs
index e710d1d8e9a..e87017cf413 100644
--- a/src/Tasks/PopulateSupportedArchitectures.cs
+++ b/src/Tasks/PopulateSupportedArchitectures.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.IO;
-using System.Runtime.Versioning;
 using System.Text;
 using System.Xml;
 
@@ -19,32 +18,62 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// Generates an application manifest or adds an entry to the existing one when PreferNativeArm64 property is true.
     /// </summary>
-    [SupportedOSPlatform("windows")]
     public sealed class PopulateSupportedArchitectures : TaskExtension
     {
         private const string supportedArchitectures = "supportedArchitectures";
         private const string windowsSettings = "windowsSettings";
-        private const string SupportedArchitecturesValue = "amd64 arm64";
         private const string asmv3Prefix = "asmv3";
         private const string DefaultManifestName = "default.win32manifest";
         private const string WindowsSettingsNamespace = "http://schemas.microsoft.com/SMI/2024/WindowsSettings";
 
-        private string _outputPath = string.Empty;
+        private string _outputDirectory = string.Empty;
+        private string _supportedArchitectures = string.Empty;
         private string _generatedManifestFullPath = string.Empty;
 
+        /// <summary>
+        /// Represents the result of validating an application manifest.
+        /// </summary>
+        private enum ManifestValidationResult
+        {
+            /// <summary>
+            /// The manifest validation was successful.
+            /// </summary>
+            Success = 1,
+
+            /// <summary>
+            /// The manifest validation failed.
+            /// </summary>
+            Failure,
+
+            /// <summary>
+            /// The supported architectures exist in the manifest with the expected value.
+            /// </summary>
+            SupportedArchitecturesExists,
+        }
+
         /// <summary>
         /// Path to the existing application manifest.
         /// </summary>
         public string? ApplicationManifestPath { get; set; }
 
         /// <summary>
-        /// Intermediate output path.
+        /// Intermediate output directory.
+        /// </summary>
+        [Required]
+        public string OutputDirectory
+        {
+            get => _outputDirectory;
+            set => _outputDirectory = value ?? throw new ArgumentNullException(nameof(OutputDirectory));
+        }
+
+        /// <summary>
+        /// Value for supportedArchitectures node.
         /// </summary>
         [Required]
-        public string OutputPath
+        public string SupportedArchitectures
         {
-            get => _outputPath;
-            set => _outputPath = value ?? throw new ArgumentNullException(nameof(OutputPath));
+            get => _supportedArchitectures;
+            set => _supportedArchitectures = value ?? throw new ArgumentNullException(nameof(SupportedArchitectures));
         }
 
         /// <summary>
@@ -57,6 +86,10 @@ public string ManifestPath
             private set => _generatedManifestFullPath = value;
         }
 
+        private string PathToManifest => string.IsNullOrEmpty(ApplicationManifestPath) || !File.Exists(ApplicationManifestPath)
+            ? ToolLocationHelper.GetPathToDotNetFrameworkFile(DefaultManifestName, TargetDotNetFrameworkVersion.Latest)
+            : ApplicationManifestPath ?? string.Empty;
+
         public override bool Execute()
         {
             if (!string.IsNullOrEmpty(PathToManifest))
@@ -66,6 +99,7 @@ public override bool Execute()
 
                 ManifestValidationResult validationResult = ValidateManifest(document, xmlNamespaceManager);
 
+                ManifestPath = Path.Combine(OutputDirectory, Path.GetFileName(PathToManifest));
                 switch (validationResult)
                 {
                     case ManifestValidationResult.Success:
@@ -96,8 +130,6 @@ private XmlDocument LoadManifest(string path)
 
         private void SaveManifest(XmlDocument document)
         {
-            ManifestPath = Path.Combine(OutputPath, Path.GetFileName(PathToManifest));
-
             using (XmlWriter xmlWriter = XmlWriter.Create(ManifestPath, new XmlWriterSettings { Indent = true, Encoding = Encoding.UTF8 }))
             {
                 document.Save(xmlWriter);
@@ -117,7 +149,7 @@ private ManifestValidationResult ValidateManifest(XmlDocument document, XmlNames
                 XmlNode? supportedArchitecturesNode = assemblyNode.SelectSingleNode($"//*[local-name()='{supportedArchitectures}']", xmlNamespaceManager);
                 if (supportedArchitecturesNode != null)
                 {
-                    if (!string.Equals(supportedArchitecturesNode.InnerText.Trim(), SupportedArchitecturesValue, StringComparison.OrdinalIgnoreCase))
+                    if (!string.Equals(supportedArchitecturesNode.InnerText.Trim(), SupportedArchitectures, StringComparison.OrdinalIgnoreCase))
                     {
                         Log.LogErrorWithCodeFromResources("PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures", supportedArchitecturesNode.InnerText);
 
@@ -133,10 +165,6 @@ private ManifestValidationResult ValidateManifest(XmlDocument document, XmlNames
             return ManifestValidationResult.Failure;
         }
 
-        private string PathToManifest => string.IsNullOrEmpty(ApplicationManifestPath) || !File.Exists(ApplicationManifestPath)
-                ? ToolLocationHelper.GetPathToDotNetFrameworkFile(DefaultManifestName, TargetDotNetFrameworkVersion.Latest)
-                : ApplicationManifestPath ?? string.Empty;
-
         private void PopulateSupportedArchitecturesElement(XmlDocument document, XmlNamespaceManager xmlNamespaceManager)
         {
             XmlNode assemblyNode = document.SelectSingleNode(XPaths.assemblyElement, xmlNamespaceManager)
@@ -150,7 +178,7 @@ private void PopulateSupportedArchitecturesElement(XmlDocument document, XmlName
             }
 
             XmlElement supportedArchitecturesNode = GetOrCreateXmlElement(document, xmlNamespaceManager, supportedArchitectures, namespaceURI: WindowsSettingsNamespace);
-            supportedArchitecturesNode.InnerText = SupportedArchitecturesValue;
+            supportedArchitecturesNode.InnerText = SupportedArchitectures;
             winSettingsNode.AppendChild(supportedArchitecturesNode);
             appNode.AppendChild(winSettingsNode);
             assemblyNode.AppendChild(appNode);
@@ -173,26 +201,5 @@ private XmlElement GetOrCreateXmlElement(XmlDocument document, XmlNamespaceManag
                 ? document.CreateElement(prefix, localName, namespaceURI)
                 : document.CreateElement(localName, namespaceURI);
         }
-
-        /// <summary>
-        /// Represents the result of validating an application manifest.
-        /// </summary>
-        private enum ManifestValidationResult
-        {
-            /// <summary>
-            /// The manifest validation was successful.
-            /// </summary>
-            Success = 1,
-
-            /// <summary>
-            /// The manifest validation failed.
-            /// </summary>
-            Failure,
-
-            /// <summary>
-            /// The supported architectures exist in the manifest with the expected value.
-            /// </summary>
-            SupportedArchitecturesExists,
-        }
     }
 }
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index 9dbff7437cb..0e458a48807 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -237,11 +237,6 @@ public string TargetPlatformVersion
         /// </summary>
         public bool Prefer32Bit { get; set; }
 
-        /// <summary>
-        /// The preferNativeArm64 flag used during the build
-        /// </summary>
-        public bool PreferNativeArm64 { get; set; }
-
         /// <summary>
         /// Resolved SDK References
         /// </summary>
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index 00e3a8f0af6..989cafdbaab 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -3015,11 +3015,11 @@
   </data>
 
   <!--
-        MSB9911 - MSB9920   Task: PopulateSupportedArchitectures
+        MSB4300 - MSB4310   Task: PopulateSupportedArchitectures
   -->
   <data name="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-    <value>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</value>
-    <comment>{StrBegin="MSB3991: "}</comment>
+    <value>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</value>
+    <comment>{StrBegin="MSB4300: "}</comment>
   </data>
   <data name="PopulateSupportedArchitectures.AssemblyNodeIsMissed">
     <value>The assembly node is missing from the manifest. Check your ApplicationManifest file.</value>
@@ -3111,7 +3111,7 @@
             MSB3971 - MSB3980   Task: GetReferenceAssemblyPaths overflow
             MSB3981 - MSB3990   Task: GetCompatiblePlatform
             MSB3991 - MSB3999   Task: CombineTargetFrameworkInfoProperties
-            MSB9911 - MSB9920   Task: PopulateSupportedArchitectures
+            MSB4300 - MSB4310   Task: PopulateSupportedArchitectures
 
             MSB4000 - MSB4200   Portable targets & tasks (vsproject\flavors\portable\msbuild)
             MSB9000 - MSB9900   MSBuild targets files (C++)
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index d5ce963f170..634b9b10c56 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index 0cfcfba742f..678ec5572a7 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index 7dea1de3bb0..51ed9bccac4 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index a8864d262c4..c347b865402 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index 74438c55e2f..38a95dcdea7 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index 25b21675370..aae15f97f2a 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index c34c7f7f58d..204b225ef1e 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 14084119c72..b7503982219 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index 5fb09819701..56ccc1591f3 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index ea7bbf0a0b8..cdb9b2e2d1e 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 276fcc7cf60..683f5d02e7a 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index e04936d2709..549c90b8882 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index eb9b2ef2b2f..5657d190092 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -1570,9 +1570,9 @@
         <note />
       </trans-unit>
       <trans-unit id="PopulateSupportedArchitectures.InvalidValueInSupportedArchitectures">
-        <source>MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
-        <target state="new">MSB9911: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
-        <note>{StrBegin="MSB3991: "}</note>
+        <source>MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</source>
+        <target state="new">MSB4300: The specified value: '{0}' for supportedArchitectures element is invalid. Either remove it from manifest or set as 'amd64 arm64'.</target>
+        <note>{StrBegin="MSB4300: "}</note>
       </trans-unit>
       <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
         <source>MSB3501: Could not read lines from file "{0}". {1}</source>
