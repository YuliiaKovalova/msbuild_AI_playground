diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index ccd837ef921..843e39a9d1b 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -108,11 +108,11 @@ public void TestBinaryLoggerRoundtrip(string projectText, BinlogRoundtripTestRep
             var mockLogFromBuild = new MockLogger();
 
             var serialFromBuildText = new StringBuilder();
-            var serialFromBuild = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromBuildText.Append(t), colorSet: null, colorReset: null);
+            var serialFromBuild = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromBuildText.Append(t), colorSet: null, colorReset: null, encoding: null);
             serialFromBuild.Parameters = "NOPERFORMANCESUMMARY";
 
             var parallelFromBuildText = new StringBuilder();
-            var parallelFromBuild = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromBuildText.Append(t), colorSet: null, colorReset: null);
+            var parallelFromBuild = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromBuildText.Append(t), colorSet: null, colorReset: null, encoding: null);
             parallelFromBuild.Parameters = "NOPERFORMANCESUMMARY";
 
             // build and log into binary logger, mock logger, serial and parallel console loggers
@@ -156,11 +156,11 @@ public void TestBinaryLoggerRoundtrip(string projectText, BinlogRoundtripTestRep
             var mockLogFromPlayback = new MockLogger();
 
             var serialFromPlaybackText = new StringBuilder();
-            var serialFromPlayback = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromPlaybackText.Append(t), colorSet: null, colorReset: null);
+            var serialFromPlayback = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromPlaybackText.Append(t), colorSet: null, colorReset: null, encoding: null);
             serialFromPlayback.Parameters = "NOPERFORMANCESUMMARY";
 
             var parallelFromPlaybackText = new StringBuilder();
-            var parallelFromPlayback = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromPlaybackText.Append(t), colorSet: null, colorReset: null);
+            var parallelFromPlayback = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromPlaybackText.Append(t), colorSet: null, colorReset: null, encoding: null);
             parallelFromPlayback.Parameters = "NOPERFORMANCESUMMARY";
 
             var binaryLogReader = new BinaryLogReplayEventSource();
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 10859bb9ce5..4a320cb9ecf 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -1470,12 +1470,12 @@ private void WriteAndValidateProperties(BaseConsoleLogger cl, SimulatedConsole s
         public void DisplayPropertiesList()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
 
             WriteAndValidateProperties(cl, sc, true);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             EventSourceSink es = new EventSourceSink();
             cl2.Initialize(es);
 
@@ -1489,12 +1489,12 @@ public void DisplayPropertiesList()
         public void DoNotDisplayPropertiesListInDetailed()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
 
             WriteAndValidateProperties(cl, sc, false);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
 
             WriteAndValidateProperties(cl2, sc, false);
         }
@@ -1507,12 +1507,12 @@ public void DoNotDisplayPropertiesListInDetailed()
         public void DoNotDisplayEnvironmentInDetailed()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
 
             WriteEnvironment(cl, sc, false);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
 
             WriteEnvironment(cl2, sc, false);
         }
@@ -1526,13 +1526,13 @@ public void DoNotDisplayEnvironmentInDetailed()
         public void DisplayEnvironmentInDetailed()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
             cl.Parameters = "ShowEnvironment";
             cl.ParseParameters();
             WriteEnvironment(cl, sc, true);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
             EventSourceSink es = new EventSourceSink();
             cl2.Initialize(es);
             cl2.Parameters = "ShowEnvironment";
@@ -1548,11 +1548,11 @@ public void DisplayEnvironmentInDetailed()
         public void DisplayEnvironmentInDiagnostic()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             WriteEnvironment(cl, sc, true);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             EventSourceSink es = new EventSourceSink();
             cl2.Initialize(es);
             WriteEnvironment(cl2, sc, true);
@@ -1565,12 +1565,12 @@ public void DisplayEnvironmentInDiagnostic()
         public void DoNotDisplayEnvironmentInMinimal()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null, null);
 
             WriteEnvironment(cl, sc, false);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null, null);
 
             WriteEnvironment(cl2, sc, false);
         }
@@ -1584,13 +1584,13 @@ public void DoNotDisplayEnvironmentInMinimal()
         public void DisplayEnvironmentInMinimal()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null, null);
             cl.Parameters = "ShowEnvironment";
             cl.ParseParameters();
             WriteEnvironment(cl, sc, true);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Minimal, sc.Write, null, null, null);
             EventSourceSink es = new EventSourceSink();
             cl2.Initialize(es);
             cl2.Parameters = "ShowEnvironment";
@@ -1606,14 +1606,14 @@ public void DisplayEnvironmentInMinimal()
         public void DoNotDisplayPropertiesListIfDisabled()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             cl.Parameters = "noitemandpropertylist";
             cl.ParseParameters();
 
             WriteAndValidateProperties(cl, sc, false);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             cl2.Parameters = "noitemandpropertylist";
             cl2.ParseParameters();
 
@@ -1757,11 +1757,11 @@ public void WriteItemsEmptyList()
                 SimulatedConsole sc = new SimulatedConsole();
                 if (i == 0)
                 {
-                    cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+                    cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
                 }
                 else
                 {
-                    cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+                    cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
                 }
 
                 if (cl is SerialConsoleLogger scl)
@@ -1798,13 +1798,13 @@ public void WritePropertiesEmptyList()
                 SimulatedConsole sc = new SimulatedConsole();
                 if (i == 0)
                 {
-                    var cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+                    var cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
                     var propertyList = cl.ExtractPropertyList(properties);
                     cl.WriteProperties(propertyList);
                 }
                 else
                 {
-                    var cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+                    var cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
                     BuildEventArgs buildEvent = new BuildErrorEventArgs("", "", "", 0, 0, 0, 0, "", "", "");
                     buildEvent.BuildEventContext = new BuildEventContext(1, 2, 3, 4);
                     cl.WriteProperties(buildEvent, properties);
@@ -1825,12 +1825,12 @@ public void WritePropertiesEmptyList()
         public void DisplayItemsList()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
 
             WriteAndValidateItems(cl, sc, true);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             EventSourceSink es = new EventSourceSink();
             cl2.Initialize(es);
 
@@ -1844,12 +1844,12 @@ public void DisplayItemsList()
         public void DoNotDisplayItemListInDetailed()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
 
             WriteAndValidateItems(cl, sc, false);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Detailed, sc.Write, null, null, null);
 
             WriteAndValidateItems(cl2, sc, false);
         }
@@ -1861,14 +1861,14 @@ public void DoNotDisplayItemListInDetailed()
         public void DoNotDisplayItemListIfDisabled()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            SerialConsoleLogger cl = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             cl.Parameters = "noitemandpropertylist";
             cl.ParseParameters();
 
             WriteAndValidateItems(cl, sc, false);
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             cl2.Parameters = "noitemandpropertylist";
             cl2.ParseParameters();
 
@@ -1879,7 +1879,7 @@ public void DoNotDisplayItemListIfDisabled()
         public void ParametersEmptyTests()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger L = new SerialConsoleLogger(LoggerVerbosity.Normal, sc.Write, null, null);
+            SerialConsoleLogger L = new SerialConsoleLogger(LoggerVerbosity.Normal, sc.Write, null, null, null);
 
             L.Parameters = "";
             L.ParseParameters();
@@ -1890,7 +1890,7 @@ public void ParametersEmptyTests()
             L.ShowSummary.ShouldBeNull();
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
+            ParallelConsoleLogger cl2 = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null, null);
             cl2.Parameters = "noitemandpropertylist";
             cl2.ParseParameters();
 
@@ -1901,7 +1901,7 @@ public void ParametersEmptyTests()
         public void ParametersParsingTests()
         {
             SimulatedConsole sc = new SimulatedConsole();
-            SerialConsoleLogger L = new SerialConsoleLogger(LoggerVerbosity.Normal, sc.Write, null, null);
+            SerialConsoleLogger L = new SerialConsoleLogger(LoggerVerbosity.Normal, sc.Write, null, null, null);
 
             L.Parameters = "NoSuMmaRy";
             L.ParseParameters();
@@ -1914,7 +1914,7 @@ public void ParametersParsingTests()
             ((bool)L.ShowSummary).ShouldBeFalse();
 
             sc = new SimulatedConsole();
-            ParallelConsoleLogger L2 = new ParallelConsoleLogger(LoggerVerbosity.Normal, sc.Write, null, null);
+            ParallelConsoleLogger L2 = new ParallelConsoleLogger(LoggerVerbosity.Normal, sc.Write, null, null, null);
 
             L2.Parameters = "NoSuMmaRy";
             L2.ParseParameters();
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 96942d03d55..95f62475744 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -416,11 +416,15 @@ internal static void DontResetColor()
             // do nothing...
         }
 
-        internal void InitializeConsoleMethods(LoggerVerbosity logverbosity, WriteHandler logwriter, ColorSetter colorSet, ColorResetter colorReset)
+        internal void InitializeConsoleMethods(LoggerVerbosity logverbosity, WriteHandler logwriter, ColorSetter colorSet, ColorResetter colorReset, Encoding encoding)
         {
             Verbosity = logverbosity;
             WriteHandler = logwriter;
             IsRunningWithCharacterFileType();
+            if (encoding != null)
+            {
+                Console.OutputEncoding = encoding;
+            }
             // This is a workaround, because the Console class provides no way to check that a color
             // can actually be set or not. Color cannot be set if the console has been redirected
             // in certain ways (e.g. how BUILD.EXE does it)
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 35886babcca..b7c4a40fe3f 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Text;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Telemetry;
@@ -54,6 +55,7 @@ public class ConsoleLogger : INodeLogger
         private string _parameters;
         private bool _skipProjectStartedText = false;
         private bool? _showSummary;
+        private Encoding _encoding = Encoding.UTF8;
 
         #region Constructors
 
@@ -72,7 +74,7 @@ public ConsoleLogger()
         /// </summary>
         /// <param name="verbosity">Verbosity level.</param>
         public ConsoleLogger(LoggerVerbosity verbosity) :
-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)
+            this(verbosity, Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)
         {
             // do nothing
         }
@@ -94,6 +96,20 @@ public ConsoleLogger(
             _write = write;
             _colorSet = colorSet;
             _colorReset = colorReset;
+
+            if (EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding() != null)
+            {
+                _encoding = Encoding.UTF8;
+            }
+        }
+
+        /// <summary>
+        /// Write the text to the log.
+        /// </summary>
+        /// <param name="text">The text to write to the log</param>
+        private static void Write(string text)
+        {
+            Console.Out.Write(text);
         }
 
         /// <summary>
@@ -142,6 +158,20 @@ private void InitializeBaseConsoleLogger()
                         // Use ansi color codes if current target console do support it
                         preferConsoleColor = ConsoleConfiguration.AcceptAnsiColorCodes;
                     }
+                    if (string.Equals(param, "ENCODING", StringComparison.OrdinalIgnoreCase))
+                    {
+                        try
+                        {
+                            _encoding = Encoding.GetEncoding(param);
+                        }
+                        catch (ArgumentException ex)
+                        {
+                            // Can't change strings at this point, so for now we are using the exception string
+                            // verbatim, and supplying a error code directly.
+                            // This should move into the .resx later.
+                            throw new LoggerException(ex.Message, ex.InnerException, "MSB4128", null);
+                        }
+                    }
                 }
             }
 
@@ -158,7 +188,7 @@ private void InitializeBaseConsoleLogger()
 
             if (_numberOfProcessors == 1 && !useMPLogger)
             {
-                _consoleLogger = new SerialConsoleLogger(_verbosity, _write, _colorSet, _colorReset);
+                _consoleLogger = new SerialConsoleLogger(_verbosity, _write, _colorSet, _colorReset, _encoding);
                 if (this is FileLogger)
                 {
                     KnownTelemetry.LoggingConfigurationTelemetry.FileLoggerType = "serial";
@@ -170,7 +200,7 @@ private void InitializeBaseConsoleLogger()
             }
             else
             {
-                _consoleLogger = new ParallelConsoleLogger(_verbosity, _write, _colorSet, _colorReset);
+                _consoleLogger = new ParallelConsoleLogger(_verbosity, _write, _colorSet, _colorReset, _encoding);
                 if (this is FileLogger)
                 {
                     KnownTelemetry.LoggingConfigurationTelemetry.FileLoggerType = "parallel";
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 280d61a3bad..6327340cad5 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.Linq;
+using System.Text;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -50,7 +51,8 @@ public ParallelConsoleLogger(LoggerVerbosity verbosity)
                 verbosity,
                 new WriteHandler(Console.Out.Write),
                 new ColorSetter(SetColor),
-                new ColorResetter(ResetColor))
+                new ColorResetter(ResetColor),
+                Encoding.UTF8)
         {
             // do nothing
         }
@@ -62,9 +64,10 @@ public ParallelConsoleLogger(
             LoggerVerbosity verbosity,
             WriteHandler write,
             ColorSetter colorSet,
-            ColorResetter colorReset)
+            ColorResetter colorReset,
+            Encoding encoding)
         {
-            InitializeConsoleMethods(verbosity, write, colorSet, colorReset);
+            InitializeConsoleMethods(verbosity, write, colorSet, colorReset, encoding);
             _deferredMessages = new Dictionary<BuildEventContext, List<BuildMessageEventArgs>>(s_compareContextNodeId);
             _buildEventManager = new BuildEventManager();
         }
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index 61f750ff472..3367a847c81 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -5,6 +5,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
+using System.Text;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
@@ -40,7 +41,8 @@ public SerialConsoleLogger(LoggerVerbosity verbosity)
                 verbosity,
                 new WriteHandler(Console.Out.Write),
                 new ColorSetter(SetColor),
-                new ColorResetter(ResetColor))
+                new ColorResetter(ResetColor),
+                Encoding.UTF8)
         {
             // do nothing
         }
@@ -56,9 +58,10 @@ public SerialConsoleLogger(
             LoggerVerbosity verbosity,
             WriteHandler write,
             ColorSetter colorSet,
-            ColorResetter colorReset)
+            ColorResetter colorReset,
+            Encoding encoding)
         {
-            InitializeConsoleMethods(verbosity, write, colorSet, colorReset);
+            InitializeConsoleMethods(verbosity, write, colorSet, colorReset, encoding);
         }
 
         #endregion
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 87be4933bc4..04ab49d7655 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -176,7 +176,7 @@ public override void Revert()
         private (ILogger, Func<string>) GetSerialLogger()
         {
             var sb = new StringBuilder();
-            var serialFromBuild = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, t => sb.Append(t), colorSet: null, colorReset: null);
+            var serialFromBuild = new SerialConsoleLogger(LoggerVerbosity.Diagnostic, t => sb.Append(t), colorSet: null, colorReset: null, encoding: null);
             serialFromBuild.Parameters = "NOPERFORMANCESUMMARY";
             return (serialFromBuild, () => sb.ToString());
         }
@@ -184,7 +184,7 @@ public override void Revert()
         private (ILogger, Func<string>) GetParallelLogger()
         {
             var sb = new StringBuilder();
-            var parallelFromBuild = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, t => sb.Append(t), colorSet: null, colorReset: null);
+            var parallelFromBuild = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, t => sb.Append(t), colorSet: null, colorReset: null, encoding: null);
             parallelFromBuild.Parameters = "NOPERFORMANCESUMMARY";
             return (parallelFromBuild, () => sb.ToString());
         }
