diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index f4f899607cb..a29a4d0992e 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -1,4 +1,7 @@
-﻿using Microsoft.Build.Framework;
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.Utilities;
 using Shouldly;
diff --git a/src/Tasks.UnitTests/ZipDirectory_Tests.cs b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
new file mode 100644
index 00000000000..b72c62db214
--- /dev/null
+++ b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
@@ -0,0 +1,95 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.IO.Compression;
+using System.Linq;
+using Xunit;
+
+namespace Microsoft.Build.Tasks.UnitTests
+{
+    public class ZipDirectory_Tests
+    {
+        private readonly MockEngine _mockEngine = new MockEngine();
+
+        [Fact]
+        public void CanZipDirectory()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder sourceFolder = testEnvironment.CreateFolder(createFolder: true);
+
+                testEnvironment.CreateFile(sourceFolder, "6DE6060259C44DB6B145159376751C22.txt", "6DE6060259C44DB6B145159376751C22");
+                testEnvironment.CreateFile(sourceFolder, "CDA3DD8C25A54A7CAC638A444CB1EAD0.txt", "CDA3DD8C25A54A7CAC638A444CB1EAD0");
+
+                string zipFilePath = Path.Combine(testEnvironment.CreateFolder(createFolder: true).FolderPath, "test.zip");
+
+                ZipDirectory zipDirectory = new ZipDirectory
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFile = new TaskItem(zipFilePath),
+                    SourceDirectory = new TaskItem(sourceFolder.FolderPath)
+                };
+
+                zipDirectory.Execute().ShouldBeTrue(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain(sourceFolder.FolderPath, () => _mockEngine.Log);
+                _mockEngine.Log.ShouldContain(zipFilePath, () => _mockEngine.Log);
+
+                using (FileStream stream = new FileStream(zipFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))
+                using (ZipArchive archive = new ZipArchive(stream, ZipArchiveMode.Read))
+                {
+                    archive.Entries
+                        .Select(i => i.FullName)
+                        .ToList()
+                        .ShouldBe(new List<string>
+                        {
+                            "6DE6060259C44DB6B145159376751C22.txt",
+                            "CDA3DD8C25A54A7CAC638A444CB1EAD0.txt"
+                        });
+                }
+            }
+        }
+
+        [Fact]
+        public void LogsErrorIfDestinationExists()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
+
+                TransientTestFile file = testEnvironment.CreateFile("foo.zip", "foo");
+
+                ZipDirectory zipDirectory = new ZipDirectory
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFile = new TaskItem(file.Path),
+                    SourceDirectory = new TaskItem(folder.FolderPath)
+                };
+
+                zipDirectory.Execute().ShouldBeFalse(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain("MSB3942", () => _mockEngine.Log);
+            }
+        }
+
+        [Fact]
+        public void LogsErrorIfDirectoryDoesNotExist()
+        {
+            ZipDirectory zipDirectory = new ZipDirectory
+            {
+                BuildEngine = _mockEngine,
+                SourceDirectory = new TaskItem(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString("N")))
+            };
+
+            zipDirectory.Execute().ShouldBeFalse(() => _mockEngine.Log);
+
+            _mockEngine.Log.ShouldContain("MSB3941", () => _mockEngine.Log);
+        }
+    }
+}
