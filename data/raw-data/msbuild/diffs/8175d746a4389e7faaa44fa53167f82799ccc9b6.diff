diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index d76e7dcac87..3652cbef271 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -18,6 +18,7 @@ public static string ANSIRemove(string text)
             return Regex.Replace(text, "\\x1b(?:[@-Z\\-_]|\\[[0-?]*[ -\\/]*[@-~])", "");
         }
 
+        // TODO: Refine
         public static int ANSIBreakpoint(string text, int position)
         {
             if (position >= text.Length) return text.Length;
@@ -32,6 +33,19 @@ public static int ANSIBreakpoint(string text, int position)
             return newPosition;
         }
 
+        public static List<string> ANSIWrap(string text, int position)
+        {
+            // string text = ANSIRemove(text);
+            List<string> result = new();
+            while (text.Length > position)
+            {
+                result.Add(text.Substring(0, position));
+                text = text.Substring(position);
+            }
+            result.Add(text);
+            return result;
+        }
+
         public static class Alignment
         {
             public static string Center(string text)
@@ -42,7 +56,7 @@ public static string Center(string text)
                 int space = (Console.BufferWidth - noFormatString.Length) / 2;
                 result += new string(' ', space);
                 result += text;
-                result += new string(' ', space + 1);
+                result += new string(' ', space);
                 return result;
             }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 32bcc6d30de..c8f1d1428ed 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -51,6 +51,11 @@ public void Initialize(IEventSource eventSource)
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine("");
+            /*for (int i = 0; i < 200; i++)
+            {
+                FancyLoggerBuffer.WriteNewLine($"{i} ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ");
+                FancyLoggerBuffer.WriteNewLine("===");
+            }*/
         }
 
         // Build
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 49e9b4d27c6..85bcefae719 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -17,63 +17,16 @@ public class FancyLoggerBufferLine
         private static int Counter = 0;
         public int Id;
         public string Text;
-        public FancyLoggerBufferLine? NextLine;
-
-        private string _fullText;
-        public string FullText
-        {
-            get => _fullText;
-            set
-            {
-                // Assign value
-                _fullText = value;
-                // Delete next line if exists
-                if (NextLine is not null)
-                {
-                    FancyLoggerBuffer.DeleteLine(NextLine.Id);
-                    NextLine = null;
-                }
-                // If text overflows
-                if (value.Length > Console.BufferWidth)
-                {
-                    // Get breakpoints
-                    int breakpoint = ANSIBuilder.ANSIBreakpoint(value, Console.BufferWidth);
-                    // Text
-                    Text = value.Substring(0, breakpoint);
-                    // Next line
-                    if (breakpoint + 1 < value.Length)
-                    {
-                        NextLine = new FancyLoggerBufferLine(value.Substring(breakpoint));
-                    }
-                }
-                else
-                {
-                    Text = value;
-                }
-            }
-        }
 
         public FancyLoggerBufferLine()
         {
             Id = Counter++;
             Text = string.Empty;
-            _fullText = string.Empty;
         }
         public FancyLoggerBufferLine(string text)
             : this()
         {
-            FullText = text;
-        }
-
-        public List<FancyLoggerBufferLine> NextLines()
-        {
-            List<FancyLoggerBufferLine> results = new();
-            if (NextLine is not null)
-            {
-                results.Add(NextLine);
-                results.AddRange(NextLine.NextLines());
-            }
-            return results;
+            Text = text;
         }
     }
 
@@ -107,7 +60,7 @@ public static void Initialize()
                             if (TopLineIndex > 0) TopLineIndex--;
                             break;
                         case ConsoleKey.DownArrow:
-                            if (TopLineIndex < Console.BufferHeight - 3) TopLineIndex++;
+                            TopLineIndex++;
                             break;
                         case ConsoleKey.Spacebar:
                         case ConsoleKey.Escape:
@@ -140,31 +93,36 @@ public static void Render()
                 // TODO: Remove and replace with actual footer
                 new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
             );
-            // Write lines
-            // TODO: Update to make more efficient (store nextlines as lists instead of nested, add cache, etc)
-            List<FancyLoggerBufferLine> linesWithWrappings = GetLinesWithWrappings();
+            // Get lines with wrappings
+            List<string> lineContents = new();
+            foreach (var line in Lines)
+            {
+                lineContents.AddRange(ANSIBuilder.ANSIWrap(line.Text, Console.BufferWidth));
+            }
+            // Print lines
             for (int i = 0; i < Console.BufferHeight - 3; i++)
             {
                 int lineIndex = i + TopLineIndex;
                 Console.Write(
                     ANSIBuilder.Cursor.Position(i + 2, 0) +
                     ANSIBuilder.Eraser.LineCursorToEnd() + 
-                    (lineIndex < linesWithWrappings.Count ? linesWithWrappings[lineIndex].Text : String.Empty)
+                    (lineIndex < lineContents.Count ? lineContents[lineIndex] : String.Empty)
                 );
             }
+            Console.Out.FlushAsync();
         }
         #endregion
 
-        public static List<FancyLoggerBufferLine> GetLinesWithWrappings()
+        /* public static List<string> UpdateLinesWIthWrappings()
         {
-            List<FancyLoggerBufferLine> result = new();
-            foreach (FancyLoggerBufferLine line in Lines)
+            List<string> result = new();
+            int lineCount = Lines.Count;
+            for (int i = 0; i < lineCount; i++)
             {
-                result.Add(line);
-                result.AddRange(line.NextLines());
+                result.AddRange(ANSIBuilder.ANSIWrap(Lines[i].Text, 10));
             }
             return result;
-        }
+        } */
 
         #region Line identification
         public static int GetLineIndexById(int lineId)
@@ -194,7 +152,7 @@ public static int GetLineIndexById(int lineId)
         public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line, bool overrideOverflowLines = false)
         {
             // Save top line (current if no lines)
-            int topLineId = Lines.Count > 0 ? Lines[TopLineIndex].Id : line.Id;
+            // int topLineId = Lines.Count > 0 ? Lines[TopLineIndex].Id : line.Id;
             if (lineId != -1)
             {
                 // Get line index
@@ -208,7 +166,7 @@ public static int GetLineIndexById(int lineId)
                 Lines.Add(line);
             }
             // Get updated top line index
-            TopLineIndex = GetLineIndexById(topLineId);
+            // TopLineIndex = GetLineIndexById(topLineId);
             // Return
             return line;
         }
@@ -229,7 +187,7 @@ public static int GetLineIndexById(int lineId)
             // Get line
             FancyLoggerBufferLine? line = GetLineById(lineId);
             if (line == null) return null;
-            line.FullText = text;
+            line.Text = text;
             // Return
             return line;
         }
@@ -248,7 +206,7 @@ public static void DeleteLine(int lineId)
             // Get updated top line index
             if (topLineId != lineId)
             {
-                TopLineIndex = GetLineIndexById(topLineId);
+                // TopLineIndex = GetLineIndexById(topLineId);
             }
         }
         #endregion
