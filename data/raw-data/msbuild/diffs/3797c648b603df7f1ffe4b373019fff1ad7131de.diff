diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index 468e81171ba..89f0b331489 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -615,6 +615,7 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public string GetPropertyValue(string name) { throw null; }
         public static string GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty property) { throw null; }
         public void MarkDirty() { }
+        public void PrintTargets(System.IO.TextWriter writer) { }
         public void ReevaluateIfNecessary() { }
         public void ReevaluateIfNecessary(Microsoft.Build.Evaluation.Context.EvaluationContext evaluationContext) { }
         public bool RemoveGlobalProperty(string name) { throw null; }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index 2c95428417c..4c99d69334e 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -615,6 +615,7 @@ public Project(System.Xml.XmlReader xmlReader, System.Collections.Generic.IDicti
         public string GetPropertyValue(string name) { throw null; }
         public static string GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty property) { throw null; }
         public void MarkDirty() { }
+        public void PrintTargets(System.IO.TextWriter writer) { }
         public void ReevaluateIfNecessary() { }
         public void ReevaluateIfNecessary(Microsoft.Build.Evaluation.Context.EvaluationContext evaluationContext) { }
         public bool RemoveGlobalProperty(string name) { throw null; }
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index c78efde3e19..c3964994753 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -1417,6 +1417,11 @@ public void SaveLogicalProject(TextWriter writer)
             implementation.SaveLogicalProject(writer);
         }
 
+        public void PrintTargets(TextWriter writer)
+        {
+            writer.WriteLine(string.Join(Environment.NewLine, Targets.Keys));
+        }
+
         /// <summary>
         /// Starts a build using this project, building the default targets.
         /// Returns true on success, false on failure.
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b1314fc52ef..5985974b13a 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1112,7 +1112,7 @@ string outputResultsCache
                 {
                     Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
 
-                    project.SaveLogicalProject(targetsWriter);
+                    project.PrintTargets(targetsWriter);
 
                     projectCollection.UnloadProject(project);
                     success = true;
