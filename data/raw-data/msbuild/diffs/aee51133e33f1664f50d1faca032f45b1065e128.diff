diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index eed54284cea..aee140330af 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -8607,7 +8607,7 @@ public void SDKReferencesAreResolvedWithoutIO()
                 getRegistrySubKeyDefaultValue,
 #endif
                 _ => throw new ShouldAssertException("Unexpected GetLastWriteTime callback"),
-                getRuntimeVersion,
+                _ => throw new ShouldAssertException("Unexpected GetAssemblyRuntimeVersion callback"),
 #if FEATURE_WIN32_REGISTRY
                 openBaseKey,
 #endif
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index fe3d4d1ddc4..8e265e6e0c4 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -41,6 +41,11 @@ public class ResolveAssemblyReference : TaskExtension, IIncrementalTask
         /// </summary>
         private const string NETStandardAssemblyName = "netstandard";
 
+        /// <summary>
+        /// The well-known CLR 4.0 metadata version used in all managed assemblies.
+        /// </summary>
+        private const string DotNetAssemblyRuntimeVersion = "v4.0.30319";
+
         /// <summary>
         /// Delegate to a method that takes a targetFrameworkDirectory and returns an array of redist or subset list paths
         /// </summary>
@@ -1963,7 +1968,7 @@ private void LogImageRuntime(Reference reference, MessageImportance importance)
             if (!reference.IsUnresolvable && !reference.IsBadImage)
             {
                 // Don't log the overwhelming default as it just pollutes the logs.
-                if (reference.ImageRuntime != "v4.0.30319")
+                if (reference.ImageRuntime != DotNetAssemblyRuntimeVersion)
                 {
                     Log.LogMessage(importance, Strings.ImageRuntimeVersion, reference.ImageRuntime);
                 }
@@ -2298,7 +2303,6 @@ internal bool Execute(
                     fileExists = _cache.CacheDelegate();
                     directoryExists = _cache.CacheDelegate(directoryExists);
                     getDirectories = _cache.CacheDelegate(getDirectories);
-                    getRuntimeVersion = _cache.CacheDelegate(getRuntimeVersion);
 
                     ReferenceTable dependencyTable = null;
 
@@ -2314,7 +2318,7 @@ internal bool Execute(
                         return getLastWriteTime(path);
                     });
 
-                    // Wrap the GetAssemblyName callback with a check for SDK/immutable files.
+                    // Wrap the GetAssemblyName and GetRuntimeVersion callbacks with a check for SDK/immutable files.
                     GetAssemblyName originalGetAssemblyName = getAssemblyName;
                     getAssemblyName = _cache.CacheDelegate(path =>
                     {
@@ -2322,6 +2326,17 @@ internal bool Execute(
                         return assemblyName ?? originalGetAssemblyName(path);
                     });
 
+                    GetAssemblyRuntimeVersion originalGetRuntimeVersion = getRuntimeVersion;
+                    getRuntimeVersion = _cache.CacheDelegate(path =>
+                    {
+                        if (dependencyTable?.IsImmutableFile(path) == true)
+                        {
+                            // There are no WinRT assemblies in the SDK, everything has the .NET metadata version.
+                            return DotNetAssemblyRuntimeVersion;
+                        }
+                        return originalGetRuntimeVersion(path);
+                    });
+
                     _projectTargetFramework = FrameworkVersionFromString(_projectTargetFrameworkAsString);
 
                     // Filter out all Assemblies that have SubType!='', or higher framework
