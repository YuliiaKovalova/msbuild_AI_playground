diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index 4e1377c535d..64588c540b4 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -1220,33 +1220,24 @@ public void ParseSolutionWithComments()
         private static SolutionFile ParseSolutionHelper(string solutionFileContents, bool convertToSlnx = false)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
-            string solutionPath = FileUtilities.GetTemporaryFileName(".sln");
-            string slnxPath = solutionPath + "x";
-            try
-            {
-                File.WriteAllText(solutionPath, solutionFileContents);
-                if (convertToSlnx)
-                {
-                    ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(solutionPath);
-                    SolutionModel solutionModel = serializer.OpenAsync(solutionPath, CancellationToken.None).Result;
-                    SolutionSerializers.SlnXml.SaveAsync(slnxPath, solutionModel, CancellationToken.None).Wait();
-
-                    SolutionFile slnx = SolutionFile.Parse(slnxPath);
-                    return slnx;
-                }
-
-                SolutionFile sln = SolutionFile.Parse(solutionPath);
-                return sln;
-            }
-            finally
+
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
             {
-                File.Delete(solutionPath);
+                TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
 
-                if (convertToSlnx)
-                {
-                    File.Delete(slnxPath);
-                }
+                string solutionPath = convertToSlnx ? ConvertToSlnx(sln.Path) : sln.Path;
+
+                return SolutionFile.Parse(solutionPath);
             }
         }
+
+        private static string ConvertToSlnx(string slnPath)
+        {
+            string slnxPath = slnPath + "x";
+            ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(slnPath).ShouldNotBeNull();
+            SolutionModel solutionModel = serializer.OpenAsync(slnPath, CancellationToken.None).Result;
+            SolutionSerializers.SlnXml.SaveAsync(slnxPath, solutionModel, CancellationToken.None).Wait();
+            return slnxPath;
+        }
     }
 }
diff --git a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
index 1aa7ab49834..6db6e939e56 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
@@ -132,34 +132,26 @@ public void ProjectWithWebsiteProperties(bool convertToSlnx)
         internal static SolutionFile ParseSolutionHelper(string solutionFileContents, bool convertToSlnx = false)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
-            string solutionPath = FileUtilities.GetTemporaryFileName(".sln");
-            string slnxPath = solutionPath + "x";
-            try
-            {
-                File.WriteAllText(solutionPath, solutionFileContents);
-                if (convertToSlnx)
-                {
-                    ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(solutionPath);
-                    SolutionModel solutionModel = serializer.OpenAsync(solutionPath, CancellationToken.None).Result;
-                    SolutionSerializers.SlnXml.SaveAsync(slnxPath, solutionModel, CancellationToken.None).Wait();
-
-                    SolutionFile slnx = new SolutionFile { FullPath = slnxPath };
-                    slnx.ParseUsingNewParser();
-                    return slnx;
-                }
-
-                SolutionFile sln = SolutionFile.Parse(solutionPath);
-                return sln;
-            }
-            finally
+
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
             {
-                File.Delete(solutionPath);
+                TransientTestFile sln = testEnvironment.CreateFile(FileUtilities.GetTemporaryFileName(".sln"), solutionFileContents);
+
+                string solutionPath = convertToSlnx ? ConvertToSlnx(sln.Path) : sln.Path;
 
-                if (convertToSlnx)
-                {
-                    File.Delete(slnxPath);
-                }
+                SolutionFile solutionFile = new SolutionFile { FullPath = solutionPath };
+                solutionFile.ParseUsingNewParser();
+                return solutionFile;
             }
         }
+
+        private static string ConvertToSlnx(string slnPath)
+        {
+            string slnxPath = slnPath + "x";
+            ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(slnPath).ShouldNotBeNull();
+            SolutionModel solutionModel = serializer.OpenAsync(slnPath, CancellationToken.None).Result;
+            SolutionSerializers.SlnXml.SaveAsync(slnxPath, solutionModel, CancellationToken.None).Wait();
+            return slnxPath;
+        }
     }
 }
