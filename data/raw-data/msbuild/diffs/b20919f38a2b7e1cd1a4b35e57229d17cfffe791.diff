diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index dcb3bfb7ac7..c2757e1ff4d 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -162,7 +162,6 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
-    <Compile Include="Utilities\AutomaticEncodingRestorer.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Utilities/AutomaticEncodingRestorer.cs b/src/Build/Utilities/AutomaticEncodingRestorer.cs
deleted file mode 100644
index ed22352cff3..00000000000
--- a/src/Build/Utilities/AutomaticEncodingRestorer.cs
+++ /dev/null
@@ -1,75 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.IO;
-using System.Security;
-using System.Text;
-
-namespace Microsoft.Build.Utilities
-{
-    /// <summary>
-    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.
-    /// A program can change the encoding of the console which would affect other programs.
-    /// We would prefer to have a pattern where the program does not affect encoding of other programs.
-    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.
-    /// </summary>
-    public class AutomaticEncodingRestorer : IDisposable
-    {
-        private Encoding? _originalOutputEncoding = null;
-        private Encoding? _originalInputEncoding = null;
-
-        private bool outputEncodingAccessible = false;
-        private bool inputEncodingAccessible = false;
-
-        public AutomaticEncodingRestorer()
-        {
-            try
-            {
-                if (
-#if NET7_0_OR_GREATER
-                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.
-#else
-                        RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default.
-#endif
-                {
-                    _originalOutputEncoding = Console.OutputEncoding;
-                    outputEncodingAccessible = true;
-                    if (
-#if NET7_0_OR_GREATER
-                        !OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform.
-#else
-                        RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
-#endif
-                    {
-                        _originalInputEncoding = Console.InputEncoding;
-                        inputEncodingAccessible = true;
-                    }
-                }
-            }
-            catch (Exception ex) when (ex is IOException || ex is SecurityException)
-            {
-                // The encoding is unavailable. Do nothing.
-            }
-        }
-
-        public void Dispose()
-        {
-            try
-            {
-                if (outputEncodingAccessible && _originalOutputEncoding != null)
-                {
-                    Console.OutputEncoding = _originalOutputEncoding;
-                }
-                if (inputEncodingAccessible && _originalInputEncoding != null)
-                {
-                    Console.InputEncoding = _originalInputEncoding;
-                }
-            }
-            catch (Exception ex) when (ex is IOException || ex is SecurityException)
-            {
-                // The encoding is unavailable. Do nothing.
-            }
-        }
-    }
-}
diff --git a/src/MSBuild/AutomaticEncodingRestorer.cs b/src/MSBuild/AutomaticEncodingRestorer.cs
index ed4e58df54d..ba4acfda90b 100644
--- a/src/MSBuild/AutomaticEncodingRestorer.cs
+++ b/src/MSBuild/AutomaticEncodingRestorer.cs
@@ -31,7 +31,7 @@ public AutomaticEncodingRestorer()
 #if NET7_0_OR_GREATER
                         !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.
 #else
-                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default.
+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.
 #endif
                 {
                     _originalOutputEncoding = Console.OutputEncoding;
@@ -74,18 +74,14 @@ public void Dispose()
         }
 
         /// <summary>
+        /// Return whether the running OS is windows for net472.
         /// RuntimeInformation.IsOSPlatform(OSPlatform.Windows) is supposed to be available in net472 but apparently it isnt part of full framework so we can't use it.
         /// </summary>
         /// <returns></returns>
         private bool IsWindowsOS()
         {
-            string windir = Environment.GetEnvironmentVariable("windir");
-            if (!string.IsNullOrEmpty(windir) && windir.Contains(@"\") && Directory.Exists(windir))
-            {
-                return true;
-            }
-            return false;
+            string? windir = Environment.GetEnvironmentVariable("windir");
+            return !string.IsNullOrEmpty(windir) && windir.Contains(@"\") && Directory.Exists(windir);
         }
-
     }
 }
