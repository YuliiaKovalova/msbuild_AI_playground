diff --git a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
new file mode 100644
index 00000000000..a2025d2185d
--- /dev/null
+++ b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
@@ -0,0 +1,143 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
+using Microsoft.Build.Shared;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests
+{
+    public class BuildEventArgsDataEnumeration
+    {
+        [Fact]
+        public void SamplePropertiesEnumeration()
+        {
+            var projectFile = @"C:\foo\bar.proj";
+            var args = new ProjectEvaluationFinishedEventArgs(
+                ResourceUtilities.GetResourceString("EvaluationFinished"),
+                projectFile)
+            {
+                BuildEventContext = BuildEventContext.Invalid,
+                ProjectFile = @"C:\foo\bar.proj",
+                GlobalProperties = new Dictionary<string, string>() { { "GlobalKey", "GlobalValue" } },
+                Properties = new List<object>()
+                {
+                    new DictionaryEntry("Key", "Value"),
+                    ProjectPropertyInstance.Create("prop", "val"),
+                    new KeyValuePair<string, string>("foo","bar")
+                },
+                Items = null
+            };
+
+            List<PropertyData> results = args.EnumerateProperties().ToList();
+            results.Count.ShouldBe(3);
+            results[0].ShouldBe(new("Key", "Value"));
+            results[1].ShouldBe(new("prop", "val"));
+            results[2].ShouldBe(new("foo", "bar"));
+        }
+
+        [Fact]
+        public void SampleItemsEnumeration()
+        {
+            string projectFile = @"C:\foo\bar.proj";
+            ProjectEvaluationFinishedEventArgs args = new ProjectEvaluationFinishedEventArgs(
+                ResourceUtilities.GetResourceString("EvaluationFinished"),
+                projectFile)
+            {
+                BuildEventContext = BuildEventContext.Invalid,
+                ProjectFile = @"C:\foo\bar.proj",
+                GlobalProperties = new Dictionary<string, string>() { { "GlobalKey", "GlobalValue" } },
+                Properties = null,
+                Items = new List<DictionaryEntry>()
+                {
+                    new DictionaryEntry("Key", new MyTaskItem() { ItemSpec = "TestItemSpec" }),
+                    new DictionaryEntry("Key2",
+                        new TaskItemData("spec",
+                            new Dictionary<string, string>() { { "metadat1", "val1" }, { "metadat2", "val2" } })),
+                }
+            };
+
+            List<ItemData> results = args.EnumerateItems().ToList();
+
+            results.Count.ShouldBe(2);
+            results[0].Type.ShouldBe("Key");
+            results[0].EvaluatedInclude.ShouldBe("TestItemSpec");
+            results[0].EnumerateMetadata().ShouldBeEmpty();
+
+            results[1].Type.ShouldBe("Key2");
+            results[1].EvaluatedInclude.ShouldBe("spec");
+            List<KeyValuePair<string, string>> metadata = results[1].EnumerateMetadata().ToList();
+            metadata.Count.ShouldBe(2);
+            metadata[0].Key.ShouldBe("metadat1");
+            metadata[0].Value.ShouldBe("val1");
+            metadata[1].Key.ShouldBe("metadat2");
+            metadata[1].Value.ShouldBe("val2");
+        }
+
+        [Fact]
+        public void SampleFilteredItemsEnumeration()
+        {
+            string projectFile = @"C:\foo\bar.proj";
+            ProjectEvaluationFinishedEventArgs args = new ProjectEvaluationFinishedEventArgs(
+                ResourceUtilities.GetResourceString("EvaluationFinished"),
+                projectFile)
+            {
+                BuildEventContext = BuildEventContext.Invalid,
+                ProjectFile = @"C:\foo\bar.proj",
+                GlobalProperties = new Dictionary<string, string>() { { "GlobalKey", "GlobalValue" } },
+                Properties = null,
+                Items = new List<DictionaryEntry>()
+                {
+                    new DictionaryEntry("Key", new MyTaskItem() { ItemSpec = "TestItemSpec" }),
+                    new DictionaryEntry("Key2",
+                        new TaskItemData("spec",
+                            new Dictionary<string, string>() { { "metadat1", "val1" }, { "metadat2", "val2" } })),
+                    new DictionaryEntry("Key2", new MyTaskItem() { ItemSpec = "TestItemSpec3" }),
+                    new DictionaryEntry("Key",
+                        new TaskItemData("spec4",
+                            new Dictionary<string, string>() { { "metadat41", "val41" }, { "metadat42", "val42" } })),
+                }
+            };
+
+            List<ItemData> results = args.EnumerateItemsOfType("Key").ToList();
+
+            results.Count.ShouldBe(2);
+            results[0].Type.ShouldBe("Key");
+            results[0].EvaluatedInclude.ShouldBe("TestItemSpec");
+            results[0].EnumerateMetadata().ShouldBeEmpty();
+
+            results[1].Type.ShouldBe("Key");
+            results[1].EvaluatedInclude.ShouldBe("spec4");
+            List<KeyValuePair<string, string>> metadata = results[1].EnumerateMetadata().ToList();
+            metadata.Count.ShouldBe(2);
+            metadata[0].Key.ShouldBe("metadat41");
+            metadata[0].Value.ShouldBe("val41");
+            metadata[1].Key.ShouldBe("metadat42");
+            metadata[1].Value.ShouldBe("val42");
+
+            results = args.EnumerateItemsOfType("Key2").ToList();
+
+            results.Count.ShouldBe(2);
+            
+            results[0].Type.ShouldBe("Key2");
+            results[0].EvaluatedInclude.ShouldBe("spec");
+            metadata = results[0].EnumerateMetadata().ToList();
+            metadata.Count.ShouldBe(2);
+            metadata[0].Key.ShouldBe("metadat1");
+            metadata[0].Value.ShouldBe("val1");
+            metadata[1].Key.ShouldBe("metadat2");
+            metadata[1].Value.ShouldBe("val2");
+
+            results[1].Type.ShouldBe("Key2");
+            results[1].EvaluatedInclude.ShouldBe("TestItemSpec3");
+            results[1].EnumerateMetadata().ShouldBeEmpty();
+        }
+    }
+}
diff --git a/src/Build.UnitTests/MockTask.cs b/src/Build.UnitTests/MockTask.cs
index f1a646fdd8a..2252c3f3e52 100644
--- a/src/Build.UnitTests/MockTask.cs
+++ b/src/Build.UnitTests/MockTask.cs
@@ -425,17 +425,7 @@ internal sealed class MyTaskItem : ITaskItem
     {
         #region ITaskItem Members
 
-        public string ItemSpec
-        {
-            get
-            {
-                return "foo";
-            }
-            set
-            {
-                // do nothing
-            }
-        }
+        public string ItemSpec { get; set; }
 
         public ICollection MetadataNames
         {
diff --git a/src/Build/Collections/ItemDictionary.cs b/src/Build/Collections/ItemDictionary.cs
index 128ef852825..39834b4dafa 100644
--- a/src/Build/Collections/ItemDictionary.cs
+++ b/src/Build/Collections/ItemDictionary.cs
@@ -172,11 +172,7 @@ IEnumerator IEnumerable.GetEnumerator()
         /// <summary>
         /// Enumerates item lists per each item type under the lock.
         /// </summary>
-        /// <param name="itemTypeCallback">
-        /// A delegate that accepts the item type string and a list of items of that type.
-        /// Will be called for each item type in the list.
-        /// </param>
-        public void EnumerateItemsPerType(Action<string, IEnumerable<T>> itemTypeCallback)
+        public IEnumerable<(string itemType, IEnumerable<T> itemValue)> EnumerateItemsPerType()
         {
             lock (_itemLists)
             {
@@ -188,11 +184,26 @@ public void EnumerateItemsPerType(Action<string, IEnumerable<T>> itemTypeCallbac
                         continue;
                     }
 
-                    itemTypeCallback(itemTypeBucket.Key, itemTypeBucket.Value);
+                    yield return (itemTypeBucket.Key, itemTypeBucket.Value);
                 }
             }
         }
 
+        /// <summary>
+        /// Enumerates item lists per each item type under the lock.
+        /// </summary>
+        /// <param name="itemTypeCallback">
+        /// A delegate that accepts the item type string and a list of items of that type.
+        /// Will be called for each item type in the list.
+        /// </param>
+        public void EnumerateItemsPerType(Action<string, IEnumerable<T>> itemTypeCallback)
+        {
+            foreach (var tuple in EnumerateItemsPerType())
+            {
+                itemTypeCallback(tuple.itemType, tuple.itemValue);
+            }
+        }
+
         #region ItemDictionary<T> Members
 
         /// <summary>
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index c105e12083b..be89342c791 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
@@ -529,17 +530,25 @@ internal Dictionary<string, string> ToDictionary()
             }
         }
 
-        internal void Enumerate(Action<string, string> keyValueCallback)
+        internal IEnumerable<PropertyData> Enumerate()
         {
             lock (_properties)
             {
                 foreach (var kvp in (ICollection<T>)_properties)
                 {
-                    keyValueCallback(kvp.Key, EscapingUtilities.UnescapeAll(kvp.EscapedValue));
+                    yield return new(kvp.Key, EscapingUtilities.UnescapeAll(kvp.EscapedValue));
                 }
             }
         }
 
+        internal void Enumerate(Action<string, string> keyValueCallback)
+        {
+            foreach (var property in Enumerate())
+            {
+                keyValueCallback(property.Name, property.Value);
+            }
+        }
+
         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)
         {
             List<TResult> result = new();
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index ddcf37f6b30..1a822781a41 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -8,6 +8,7 @@
 using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Framework;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -27,7 +28,7 @@ namespace Microsoft.Build.Evaluation
     /// we do use it for build-time items.
     /// </comment>
     [DebuggerDisplay("{ItemType}={EvaluatedInclude} [{UnevaluatedInclude}] #DirectMetadata={DirectMetadataCount}")]
-    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent
+    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent, IItemData
     {
         /// <summary>
         /// Project that this item lives in.
@@ -143,6 +144,9 @@ internal ProjectItem(
 
         internal virtual ProjectItemLink Link => null;
 
+        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
+
         /// <summary>
         /// Backing XML item.
         /// Can never be null.
@@ -193,9 +197,10 @@ public string UnevaluatedInclude
             }
         }
 
-        /// <summary>
+        /// <inheritdoc cref="IItemData.EvaluatedInclude"/>
+        /// <remarks>
         /// Gets the evaluated value of the include, unescaped.
-        /// </summary>
+        /// </remarks>
         public string EvaluatedInclude
         {
             [DebuggerStepThrough]
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index ec5c67f344e..e0af54e5480 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -37,7 +37,8 @@ public class ProjectItemInstance :
         IMetadataTable,
         ITranslatable,
         IMetadataContainer,
-        IItemTypeDefinition
+        IItemTypeDefinition,
+        IItemData
     {
         /// <summary>
         /// The project instance to which this item belongs.
@@ -184,10 +185,11 @@ public string ItemType
             { return _itemType; }
         }
 
-        /// <summary>
+        /// <inheritdoc cref="IItemData.EvaluatedInclude"/>
+        /// <remarks>
         /// Evaluated include value.
         /// May be empty string.
-        /// </summary>
+        /// </remarks>
         public string EvaluatedInclude
         {
             [DebuggerStepThrough]
@@ -301,6 +303,9 @@ string ITaskItem.ItemSpec
             }
         }
 
+        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => ((IMetadataContainer)this).EnumerateMetadata();
+
         /// <summary>
         /// ITaskItem implementation
         /// </summary>
diff --git a/src/Build/Logging/BuildEventArgsExtensions.cs b/src/Build/Logging/BuildEventArgsExtensions.cs
new file mode 100644
index 00000000000..e65ffcd7902
--- /dev/null
+++ b/src/Build/Logging/BuildEventArgsExtensions.cs
@@ -0,0 +1,73 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections;
+using System.Collections.Generic;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging;
+
+/// <summary>
+/// Helper extension methods for working with data passed via
+/// <see cref="ProjectEvaluationFinishedEventArgs"/> and <see cref="ProjectStartedEventArgs"/>
+/// </summary>
+public static class BuildEventArgsExtensions
+{
+    /// <summary>
+    /// Lazy enumerates and strong types properties from Properties property.
+    /// </summary>
+    public static IEnumerable<PropertyData> EnumerateProperties(
+        this ProjectEvaluationFinishedEventArgs eventArgs)
+        => EnumerateProperties(eventArgs.Properties);
+
+    /// <summary>
+    /// Lazy enumerates and strong types properties from Properties property.
+    /// </summary>
+    public static IEnumerable<PropertyData> EnumerateProperties(
+        this ProjectStartedEventArgs eventArgs)
+        => EnumerateProperties(eventArgs.Properties);
+
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property.
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
+    /// </summary>
+    /// <returns></returns>
+    public static IEnumerable<ItemData> EnumerateItems(
+        this ProjectEvaluationFinishedEventArgs eventArgs)
+        => EnumerateItems(eventArgs.Items);
+
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property. Only items with matching type will be returned (case-insensitive, MSBuild valid names only).
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
+    /// </summary>
+    /// <returns></returns>
+    public static IEnumerable<ItemData> EnumerateItemsOfType(
+        this ProjectEvaluationFinishedEventArgs eventArgs, string typeName)
+        => EnumerateItemsOfType(eventArgs.Items, typeName);
+
+    /// <summary>
+    /// Lazy enumerates and strong types items from Items property.
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
+    /// </summary>
+    public static IEnumerable<ItemData> EnumerateItems(
+        this ProjectStartedEventArgs eventArgs)
+        => EnumerateItems(eventArgs.Items);
+
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property. Only items with matching type will be returned (case-insensitive, MSBuild valid names only).
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
+    /// </summary>
+    /// <returns></returns>
+    public static IEnumerable<ItemData> EnumerateItemsOfType(
+        this ProjectStartedEventArgs eventArgs, string typeName)
+        => EnumerateItemsOfType(eventArgs.Items, typeName);
+
+    private static IEnumerable<PropertyData> EnumerateProperties(IEnumerable? properties)
+        => Internal.Utilities.EnumerateProperties(properties);
+
+    private static IEnumerable<ItemData> EnumerateItems(IEnumerable? items)
+        => Internal.Utilities.EnumerateItems(items);
+
+    private static IEnumerable<ItemData> EnumerateItemsOfType(IEnumerable? items, string typeName)
+        => Internal.Utilities.EnumerateItemsOfType(items, typeName);
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 9a39ec6bad7..7b95b38a8af 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -171,6 +171,7 @@
     <Compile Include="FileAccess\ReportedFileOperation.cs" />
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
+    <Compile Include="Logging\BuildEventArgsExtensions.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index a4859ae234a..6811def46cd 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -9,9 +9,12 @@
 using System.Linq;
 using System.Text.RegularExpressions;
 using System.Xml;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Toolset = Microsoft.Build.Evaluation.Toolset;
 using XmlElementWithLocation = Microsoft.Build.Construction.XmlElementWithLocation;
@@ -623,46 +626,48 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)
             return enumerator.ToEnumerable().ToArray();
         }
 
-        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)
+        /// <summary>
+        /// Iterates through the nongeneric enumeration and provides generic strong-typed enumeration of properties.
+        /// </summary>
+        public static IEnumerable<PropertyData> EnumerateProperties(IEnumerable properties)
         {
             if (properties == null)
             {
-                return;
+                return [];
             }
 
             if (properties is PropertyDictionary<ProjectPropertyInstance> propertyInstanceDictionary)
             {
-                propertyInstanceDictionary.Enumerate((key, value) =>
-                {
-                    callback(arg, new KeyValuePair<string, string>(key, value));
-                });
+                return propertyInstanceDictionary.Enumerate();
             }
             else if (properties is PropertyDictionary<ProjectProperty> propertyDictionary)
             {
-                propertyDictionary.Enumerate((key, value) =>
-                {
-                    callback(arg, new KeyValuePair<string, string>(key, value));
-                });
+                return propertyDictionary.Enumerate();
             }
             else
             {
-                foreach (var item in properties)
+                return CastOneByOne(properties);
+            }
+
+            IEnumerable<PropertyData> CastOneByOne(IEnumerable props)
+            {
+                foreach (var item in props)
                 {
                     if (item is IProperty property && !string.IsNullOrEmpty(property.Name))
                     {
-                        callback(arg, new KeyValuePair<string, string>(property.Name, property.EvaluatedValue ?? string.Empty));
+                        yield return new(property.Name, property.EvaluatedValue ?? string.Empty);
                     }
                     else if (item is DictionaryEntry dictionaryEntry && dictionaryEntry.Key is string key && !string.IsNullOrEmpty(key))
                     {
-                        callback(arg, new KeyValuePair<string, string>(key, dictionaryEntry.Value as string ?? string.Empty));
+                        yield return new(key, dictionaryEntry.Value as string ?? string.Empty);
                     }
                     else if (item is KeyValuePair<string, string> kvp)
                     {
-                        callback(arg, kvp);
+                        yield return new(kvp.Key, kvp.Value);
                     }
                     else if (item is KeyValuePair<string, TimeSpan> keyTimeSpanValue)
                     {
-                        callback(arg, new KeyValuePair<string, string>(keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString()));
+                        yield return new(keyTimeSpanValue.Key, keyTimeSpanValue.Value.Ticks.ToString());
                     }
                     else
                     {
@@ -679,61 +684,138 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             }
         }
 
-        public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> callback)
+        /// <summary>
+        /// Iterates through the nongeneric enumeration and provides generic strong-typed callback to handle the properties.
+        /// </summary>
+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)
+        {
+            foreach (var tuple in EnumerateProperties(properties))
+            {
+                callback(arg, new KeyValuePair<string, string>(tuple.Name, tuple.Value));
+            }
+        }
+
+        /// <summary>
+        /// Enumerates the given nongeneric enumeration and tries to match or wrap appropriate item types.
+        /// </summary>
+        public static IEnumerable<ItemData> EnumerateItems(IEnumerable items)
         {
+            // The actual type of the item data can be of types:
+            //  * <see cref="ProjectItemInstance"/>
+            //  * <see cref="ProjectItem"/>
+            //  * <see cref="IItem"/>
+            //  * <see cref="ITaskItem"/>
+            //  * possibly others
+            // That's why we here wrap with ItemAccessor if needed
+
+            if (items == null)
+            {
+                return [];
+            }
+
             if (items is ItemDictionary<ProjectItemInstance> projectItemInstanceDictionary)
             {
-                projectItemInstanceDictionary.EnumerateItemsPerType((itemType, itemList) =>
-                {
-                    foreach (var item in itemList)
-                    {
-                        callback(new DictionaryEntry(itemType, item));
-                    }
-                });
+                return projectItemInstanceDictionary
+                    .EnumerateItemsPerType()
+                    .Select(t => t.itemValue.Select(itemValue => new ItemData(t.itemType, (IItemData)itemValue)))
+                    .SelectMany(tpl => tpl);
             }
             else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
             {
-                projectItemDictionary.EnumerateItemsPerType((itemType, itemList) =>
-                {
-                    foreach (var item in itemList)
-                    {
-                        callback(new DictionaryEntry(itemType, item));
-                    }
-                });
+                return projectItemDictionary
+                    .EnumerateItemsPerType()
+                    .Select(t => t.itemValue.Select(itemValue => new ItemData(t.itemType, (IItemData)itemValue)))
+                    .SelectMany(tpl => tpl);
             }
             else
             {
-                foreach (var item in items)
-                {
-                    string itemType = default;
-                    object itemValue = null;
+                return CastItemsOneByOne(items, null);
+            }
+        }
 
-                    if (item is IItem iitem)
-                    {
-                        itemType = iitem.Key;
-                        itemValue = iitem;
-                    }
-                    else if (item is DictionaryEntry dictionaryEntry)
+        /// <summary>
+        /// Enumerates the given nongeneric enumeration and tries to match or wrap appropriate item types.
+        /// Only items with matching type (case insensitive, MSBuild valid names only) will be returned.
+        /// </summary>
+        public static IEnumerable<ItemData> EnumerateItemsOfType(IEnumerable items, string typeName)
+        {
+            if (items == null)
+            {
+                return [];
+            }
+
+            if (items is ItemDictionary<ProjectItemInstance> projectItemInstanceDictionary)
+            {
+                return
+                    projectItemInstanceDictionary[typeName]
+                        .Select(i => new ItemData(i.ItemType, (IItemData)i));
+            }
+            else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
+            {
+                return
+                    projectItemDictionary[typeName]
+                        .Select(i => new ItemData(i.ItemType, (IItemData)i));
+            }
+            else
+            {
+                return CastItemsOneByOne(items, typeName);
+            }
+        }
+
+        /// <summary>
+        /// Iterates through the nongeneric enumeration of items and provides generic strong-typed callback to handle the items.
+        /// </summary>
+        public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> callback)
+        {
+            foreach (var tuple in EnumerateItems(items))
+            {
+                callback(new DictionaryEntry(tuple.Type, tuple.Value));
+            }
+        }
+
+        /// <summary>
+        /// Enumerates the nongeneric items and attempts to cast them.
+        /// </summary>
+        /// <param name="items">Nongeneric list of items.</param>
+        /// <param name="itemTypeNameToFetch">If not null, only the items with matching type (case insensitive, MSBuild valid names only) will be returned.</param>
+        /// <returns></returns>
+        private static IEnumerable<ItemData> CastItemsOneByOne(IEnumerable items, string itemTypeNameToFetch)
+        {
+            foreach (var item in items)
+            {
+                string itemType = default;
+                object itemValue = null;
+
+                if (item is IItem iitem)
+                {
+                    itemType = iitem.Key;
+                    itemValue = iitem;
+                }
+                else if (item is DictionaryEntry dictionaryEntry)
+                {
+                    itemType = dictionaryEntry.Key as string;
+                    itemValue = dictionaryEntry.Value;
+                }
+                else
+                {
+                    if (item == null)
                     {
-                        itemType = dictionaryEntry.Key as string;
-                        itemValue = dictionaryEntry.Value;
+                        Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected: {nameof(item)} is null");
                     }
                     else
                     {
-                        if (item == null)
-                        {
-                            Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected: {nameof(item)} is null");
-                        }
-                        else
-                        {
-                            Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected {nameof(item)} {item} of type {item?.GetType().ToString()}");
-                        }
+                        Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected {nameof(item)} {item} of type {item?.GetType().ToString()}");
                     }
+                }
 
-                    if (!String.IsNullOrEmpty(itemType))
-                    {
-                        callback(new DictionaryEntry(itemType, itemValue));
-                    }
+                // if itemTypeNameToFetch was not set - then return all items
+                if (itemValue != null && (itemTypeNameToFetch == null || MSBuildNameIgnoreCaseComparer.Default.Equals(itemType, itemTypeNameToFetch)))
+                {
+                    // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
+                    //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
+                    // However! NodePacketTranslator and BuildEventArgsReader might deserialize those as TaskItemData
+                    //  (see xml comments of TaskItemData for details)
+                    yield return new ItemData(itemType!, itemValue);
                 }
             }
         }
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
new file mode 100644
index 00000000000..55d323474b0
--- /dev/null
+++ b/src/Framework/IItemData.cs
@@ -0,0 +1,95 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Framework;
+
+/// <summary>
+/// Represents a metadata that can natively provide it's metadata.
+/// </summary>
+public interface IItemData
+{
+    /// <summary>
+    /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
+    /// </summary>
+    string EvaluatedInclude
+    {
+        get;
+    }
+
+    /// <summary>
+    /// The item metadata
+    /// </summary>
+    IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();
+}
+
+
+/// <summary>
+/// Structure defining single MSBuild property instance.
+/// </summary>
+/// <param name="Name">The name of property - e.g. 'TargetFramework'.</param>
+/// <param name="Value">The actual value of property - e.g. 'net9'.</param>
+public readonly record struct PropertyData(string Name, string Value);
+
+/// <summary>
+/// Structure defining single MSBuild item instance.
+/// </summary>
+/// <remarks>
+/// The underlying data can be of various distinct types - so it needs to be accessed via provided accessor methods
+/// </remarks>
+public readonly struct ItemData
+{
+    private readonly Func<IEnumerable<KeyValuePair<string, string>>> _enumerateMetadata;
+
+    public ItemData(string type, object value)
+    {
+        
+        Type = type;
+        Value = value;
+
+        // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
+        //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
+        // However! NodePacketTranslator and BuildEventArgsReader might deserialize those as TaskItemData
+        //  (see xml comments of TaskItemData for details)
+        if (value is IItemData dt)
+        {
+            EvaluatedInclude = dt.EvaluatedInclude;
+            _enumerateMetadata = dt.EnumerateMetadata;
+        }
+        else if (value is ITaskItem ti)
+        {
+            EvaluatedInclude = ti.ItemSpec;
+            _enumerateMetadata = ti.EnumerateMetadata;
+        }
+        else
+        {
+            EvaluatedInclude = value.ToString() ?? string.Empty;
+            _enumerateMetadata = () => [];
+        }
+    }
+
+    /// <summary>
+    /// The type of property - e.g. 'PackageReference'.
+    /// </summary>
+    public string Type { get; private init; }
+
+    /// <summary>
+    /// The actual value of item - e.g. 'System.Text.Json'.
+    /// This can be of a distinct types, hence the helper methods <see cref="EvaluatedInclude"/> and <see cref="EnumerateMetadata"/>
+    ///  are recommended for accessing the data
+    /// </summary>
+    internal object? Value { get; private init; }
+
+    /// <summary>
+    /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
+    /// </summary>
+    public string EvaluatedInclude { get; private init; }
+
+    /// <summary>
+    /// The item metadata
+    /// </summary>
+    public IEnumerable<KeyValuePair<string, string>> EnumerateMetadata()
+        => _enumerateMetadata();
+}
