diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 1b8b9da0374..c2be62a39f4 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -176,12 +176,12 @@ internal ProjectRootElement(XmlReader xmlReader, ProjectRootElementCacheBase pro
             ProjectParser.Parse(document, this);
         }
 
-        private readonly bool _cannotBeDirtied = false;
+        private readonly bool _canBeDirty = false;
 
         private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache, NewProjectFileOptions projectFileOptions, bool canBeDirty)
             : this(projectRootElementCache, projectFileOptions)
         {
-            _cannotBeDirtied = canBeDirty;
+            _canBeDirty = canBeDirty;
         }
 
         /// <summary>
@@ -721,7 +721,7 @@ internal string LastDirtyReason
             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);
 
         /// <summary>
-        /// Initialize an in-memory, empty ProjectRootElement instance that CANNOT be saved later.
+        /// Initialize an in-memory empty ProjectRootElement instance that CANNOT be saved later.
         /// The ProjectRootElement will not be marked dirty.
         /// Uses the global project collection.
         /// </summary>
@@ -729,7 +729,7 @@ internal static ProjectRootElement CreateNotDirty(ProjectRootElementCacheBase pr
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectRootElementCache);
 
-            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, true);
+            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, false);
         }
 
         /// <summary>
@@ -1837,7 +1837,7 @@ internal override void VerifyThrowInvalidOperationAcceptableLocation(ProjectElem
         /// </remarks>
         internal sealed override void MarkDirty(string reason, string param)
         {
-            if (_cannotBeDirtied)
+            if (!_canBeDirty)
             {
                 return;
             }
