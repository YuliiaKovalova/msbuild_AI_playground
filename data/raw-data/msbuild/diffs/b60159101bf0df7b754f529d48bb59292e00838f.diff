diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 9840778dc67..254d11158b4 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -600,10 +600,19 @@ private enum BuildEnabledSetting
         /// </remarks>
         public IDictionary<string, string> GlobalProperties => implementation.GlobalProperties;
 
+        /// <summary>
+        /// Indicates whether the global properties dictionary contains the specified key.
+        /// </summary>
         internal bool GlobalPropertiesContains(string key) => implementation.GlobalPropertiesContains(key);
 
+        /// <summary>
+        /// Indicates how many elements are in the global properties dictionary.
+        /// </summary>
         internal int GlobalPropertiesCount => implementation.GlobalPropertiesCount();
 
+        /// <summary>
+        /// Enumerates the values in the global properties dictionary.
+        /// </summary>
         internal IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable => implementation.GlobalPropertiesEnumerable();
 
         /// <summary>
@@ -2093,16 +2102,29 @@ public override bool IsDirty
                 }
             }
 
+            /// <summary>
+            /// See <see cref="ProjectLink.GlobalPropertiesContains(string)"/>.
+            /// </summary>
+            /// <param name="key">The key to check for its value.</param>
+            /// <returns>Whether the key is in the global properties dictionary.</returns>
             public override bool GlobalPropertiesContains(string key)
             {
                 return _data.GlobalPropertiesDictionary.Contains(key);
             }
 
+            /// <summary>
+            /// See <see cref="ProjectLink.GlobalPropertiesCount()"/>.
+            /// </summary>
+            /// <returns>The number of properties in the global properties dictionary</returns>
             public override int GlobalPropertiesCount()
             {
                 return _data.GlobalPropertiesDictionary.Count;
             }
 
+            /// <summary>
+            /// See <see cref="ProjectLink.GlobalPropertiesEnumerable()"/>.
+            /// </summary>
+            /// <returns>An IEnumerable of the keys and values of the global properties dictionary</returns>
             public override IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()
             {
                 foreach (ProjectPropertyInstance property in _data.GlobalPropertiesDictionary)
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
index 5cfeb0c336e..03f7a8795a5 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
@@ -260,10 +260,26 @@ public abstract class ProjectLink
         /// </summary>
         public abstract void Unload();
 
+        /// <summary>
+        /// Indicates whether a specified key is in the global properties dictionary. This provides a default implementation
+        /// to avoid a breaking change, but it is often overriden for performance.
+        /// </summary>
+        /// <param name="key">The key to check for in the dictionary</param>
+        /// <returns>True if the key is in the global properties; false otherwise</returns>
         public virtual bool GlobalPropertiesContains(string key) => GlobalProperties.ContainsKey(key);
 
+        /// <summary>
+        /// Indicates how many properties are in the global properties dictionary. This provides a default implementation to
+        /// avoid a breaking change, but it is often overriden for performance.
+        /// </summary>
+        /// <returns>The number of properties in the global properties dictionary</returns>
         public virtual int GlobalPropertiesCount() => GlobalProperties.Count;
 
+        /// <summary>
+        /// Allows enumeration over the keys and values in the global properties dictionary. This provides a default
+        /// implementation to avoid a breaking change, but it can be overriden for performance.
+        /// </summary>
+        /// <returns>An enumerable of the keys and values in the global properties dictionary</returns>
         public virtual IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable() => GlobalProperties;
     }
 }
