diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index f9c3476649c..af50e0ca627 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -557,7 +557,7 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
             return false;
         }
 
-        public HashSet<string> GetWarningsAsErrors(BuildEventContext context)
+        public HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context)
         {
             throw new NotImplementedException();
         }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 6d7d2e2241f..9c5d5ef8702 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -219,7 +219,13 @@ bool IncludeTaskInputs
         /// <returns><code>true</code> if the build submission logged an errors, otherwise <code>false</code>.</returns>
         bool HasBuildSubmissionLoggedErrors(int submissionId);
 
-        HashSet<string> GetWarningsAsErrors(BuildEventContext context);
+        /// <summary>
+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be logged as errors.</param>
+        /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>
+        HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context);
 
         #region Register
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index d15465780cd..d817893eba7 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -516,15 +516,28 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
         }
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as errors.
+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns></returns>
-        public HashSet<string> GetWarningsAsErrors(BuildEventContext context)
+        /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>
+        public HashSet<string> GetWarningsAsErrorsByProject(BuildEventContext context)
         {
+            if(_warningsAsErrorsByProject == null)
+            {
+                return null;
+            }
+
             int key = GetWarningsAsErrorOrMessageKey(context);
 
-            return _warningsAsErrorsByProject?[key] as HashSet<string>;
+            HashSet<string> warningsAsErrorsExcludingMessages = new HashSet<string>(_warningsAsErrorsByProject?[key]);
+
+            if(_warningsAsMessagesByProject != null)
+            {
+                warningsAsErrorsExcludingMessages.SymmetricExceptWith(_warningsAsMessagesByProject[key]);
+            }
+
+            return warningsAsErrorsExcludingMessages;
         }
 
         public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 50fac0b1e9b..acea9818cb2 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -677,10 +677,17 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         #endregion
 
         #region IBuildEngine8 Members
+        private HashSet<string> _warningsAsErrors;
         /// <summary>
         /// Contains all warnings that should be logged as errors.
         /// </summary>
-        public HashSet<string> WarningsAsErrors { get => _taskLoggingContext.LoggingService.GetWarningsAsErrors(_taskLoggingContext.BuildEventContext); }
+        public HashSet<string> WarningsAsErrors
+        {
+            get
+            {
+                return _warningsAsErrors ??= _taskLoggingContext.LoggingService.GetWarningsAsErrorsByProject(_taskLoggingContext.BuildEventContext);
+            }
+        }
         #endregion
 
         /// <summary>
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index e7223806ec0..ddce895f1a9 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -272,7 +272,7 @@ public bool Execute()
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
-                        _taskLoggingContext.LoggingService.GetWarningsAsErrors(_taskLoggingContext.BuildEventContext)
+                        _taskLoggingContext.LoggingService.GetWarningsAsErrorsByProject(_taskLoggingContext.BuildEventContext)
                         
                     );
 
