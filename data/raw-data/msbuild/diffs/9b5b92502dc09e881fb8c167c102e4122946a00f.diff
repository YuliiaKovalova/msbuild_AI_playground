diff --git a/eng/BootStrapMSBuild.props b/eng/BootStrapMSBuild.props
index e70bcb3489d..858cf76ac54 100644
--- a/eng/BootStrapMSBuild.props
+++ b/eng/BootStrapMSBuild.props
@@ -12,7 +12,7 @@
   </PropertyGroup>
   
   <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
-	<BootstrapBinaryDestination>$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin</BootstrapBinaryDestination>
+    <BootstrapBinaryDestination>$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin</BootstrapBinaryDestination>
   </PropertyGroup>
   
   <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
index dc6bce0563b..6a90e2734bb 100644
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ b/src/Analyzers.UnitTests/EndToEndTests.cs
@@ -113,7 +113,7 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
 
             // OSX links /var into /private, which makes Path.GetTempPath() return "/var..." but Directory.GetCurrentDirectory return "/private/var...".
             // This discrepancy breaks path equality checks in analyzers if we pass to MSBuild full path to the initial project.
-            // TODO: See if there is a way of fixing it in the engine.
+            // See if there is a way of fixing it in the engine - tracked: https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=55702688.
             _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));
 
             _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", buildInOutOfProcessNode ? "1" : "0");
diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index a5df5d99cfa..920e49b51e1 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -200,7 +200,7 @@ public IBuildComponent GetComponent(BuildComponentType type)
                 BuildComponentType.ResultsCache => (IBuildComponent)_resultsCache,
                 BuildComponentType.RequestBuilder => (IBuildComponent)_requestBuilder,
                 BuildComponentType.SdkResolverService => (IBuildComponent)_sdkResolverService,
-                BuildComponentType.BuildCheck => (IBuildComponent)_buildCheckManagerProvider,
+                BuildComponentType.BuildCheckManagerProvider => (IBuildComponent)_buildCheckManagerProvider,
                 _ => throw new ArgumentException("Unexpected type " + type),
             };
         }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index f99833cdc15..25bcabbeed3 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2984,10 +2984,10 @@ private ILoggingService CreateLoggingService(
             loggingService.WarningsNotAsErrors = warningsNotAsErrors;
             loggingService.WarningsAsMessages = warningsAsMessages;
 
-            if (((IBuildComponentHost)this).BuildParameters.IsBuildCheckEnabled)
+            if (_buildParameters.IsBuildCheckEnabled)
             {
                 var buildCheckManagerProvider =
-                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider;
+                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;
                 buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);
 
                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]
diff --git a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
index 865d1da9149..abcb6c22fb0 100644
--- a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
+++ b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
@@ -78,7 +78,7 @@ public void RegisterDefaultFactories()
             _componentEntriesByType[BuildComponentType.LoggingService] = new BuildComponentEntry(BuildComponentType.LoggingService, null);
             _componentEntriesByType[BuildComponentType.RequestBuilder] = new BuildComponentEntry(BuildComponentType.RequestBuilder, RequestBuilder.CreateComponent, CreationPattern.CreateAlways);
             // This conditionally registers real or no-op implementation based on BuildParameters
-            _componentEntriesByType[BuildComponentType.BuildCheck] = new BuildComponentEntry(BuildComponentType.BuildCheck, BuildCheckManagerProvider.CreateComponent, CreationPattern.Singleton);
+            _componentEntriesByType[BuildComponentType.BuildCheckManagerProvider] = new BuildComponentEntry(BuildComponentType.BuildCheckManagerProvider, BuildCheckManagerProvider.CreateComponent, CreationPattern.Singleton);
             _componentEntriesByType[BuildComponentType.TargetBuilder] = new BuildComponentEntry(BuildComponentType.TargetBuilder, TargetBuilder.CreateComponent, CreationPattern.CreateAlways);
             _componentEntriesByType[BuildComponentType.TaskBuilder] = new BuildComponentEntry(BuildComponentType.TaskBuilder, TaskBuilder.CreateComponent, CreationPattern.CreateAlways);
             _componentEntriesByType[BuildComponentType.RegisteredTaskObjectCache] = new BuildComponentEntry(BuildComponentType.RegisteredTaskObjectCache, RegisteredTaskObjectCache.CreateComponent, CreationPattern.Singleton);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 05d11dc38cb..7e72bd3a159 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -283,7 +283,7 @@ public void CleanupForBuild()
                         throw new AggregateException(deactivateExceptions);
                     }
 
-                    var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;
+                    var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
                     buildCheckManager.FinalizeProcessing(_nodeLoggingContext);
                 },
                 isLastTask: true);
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index 2ebea5a290a..8b2ded4d251 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -146,7 +146,7 @@ internal enum BuildComponentType
         /// <summary>
         /// The Build Analyzer Manager.
         /// </summary>
-        BuildCheck,
+        BuildCheckManagerProvider,
     }
 
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 5c58d92561e..1a16e9f2190 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -102,9 +102,9 @@ internal sealed class EventSourceSink :
         public event TelemetryEventHandler TelemetryLogged;
 
         /// <summary>
-        /// This event is raised to log build cop events.
+        /// This event is raised to log BuildCheck events.
         /// </summary>
-        public event BuildCheckEventHandler BuildCheckEventRaised;
+        internal event BuildCheckEventHandler BuildCheckEventRaised;
         #endregion
 
         #region Properties
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 5d4938c7b7b..b5b3454e36f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1120,7 +1120,7 @@ private async Task<BuildResult> BuildProject()
         {
             // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
 
-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;
+            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
             buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);
 
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index d821a43951f..27e1b307aab 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -476,9 +476,6 @@ internal void LoadProjectIntoConfiguration(
                     projectLoadSettings |= ProjectLoadSettings.FailOnUnresolvedSdk;
                 }
 
-                // Here - if we'll have in-execution analysis and it'll need DOM from Project,
-                //  this is the place for Project creation.
-
                 return new ProjectInstance(
                     ProjectFullPath,
                     globalProperties,
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerRule.cs b/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
index 9e610834691..30b34dfa65f 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerRule.cs
@@ -10,13 +10,12 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public class BuildAnalyzerRule
 {
-    public BuildAnalyzerRule(string id, string title, string description, string category, string messageFormat,
+    public BuildAnalyzerRule(string id, string title, string description, string messageFormat,
         BuildAnalyzerConfiguration defaultConfiguration)
     {
         Id = id;
         Title = title;
         Description = description;
-        Category = category;
         MessageFormat = messageFormat;
         DefaultConfiguration = defaultConfiguration;
     }
@@ -43,11 +42,6 @@ public BuildAnalyzerRule(string id, string title, string description, string cat
     /// </summary>
     public string Description { get; }
 
-    /// <summary>
-    /// TODO: We might turn this into enum, or just remove this.
-    /// </summary>
-    public string Category { get; }
-
     /// <summary>
     /// Message format that will be used by the actual reports (<see cref="BuildCheckResult"/>) - those will just supply the actual arguments.
     /// </summary>
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index 97975cf7051..03a69e02939 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -38,6 +38,10 @@ internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)
         };
 
     public BuildAnalyzerRule BuildAnalyzerRule { get; }
+
+    /// <summary>
+    /// Optional location of the finding (in near future we might need to support multiple locations).
+    /// </summary>
     public ElementLocation Location { get; }
 
     public string LocationString => Location.LocationString;
diff --git a/src/Build/BuildCheck/API/ConfigurationContext.cs b/src/Build/BuildCheck/API/ConfigurationContext.cs
index 4ea815eb2b8..49dcdcfafec 100644
--- a/src/Build/BuildCheck/API/ConfigurationContext.cs
+++ b/src/Build/BuildCheck/API/ConfigurationContext.cs
@@ -36,5 +36,5 @@ internal static ConfigurationContext FromDataEnumeration(CustomConfigurationData
     /// <summary>
     /// Custom configuration data - per each rule that has some specified.
     /// </summary>
-    public CustomConfigurationData[] CustomConfigurationData { get; init; }
+    public IReadOnlyList<CustomConfigurationData> CustomConfigurationData { get; init; }
 }
diff --git a/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs b/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
index c71d69d115c..872aba3440f 100644
--- a/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
+++ b/src/Build/BuildCheck/Acquisition/AnalyzerAcquisitionData.cs
@@ -10,7 +10,8 @@
 
 namespace Microsoft.Build.BuildCheck.Acquisition;
 
-// TODO: Acquisition
+// https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=52643036
+// Acquisition
 //  define the data that will be passed to the acquisition module (and remoted if needed)
 internal class AnalyzerAcquisitionData(string data)
 {
diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index bd7463085a1..60744d8aa38 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -16,7 +16,7 @@ internal class BuildCheckAcquisitionModule
     private static T Construct<T>() where T : new() => new();
     public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)
     {
-        // TODO: Acquisition module
+        // Acquisition module - https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=52643036
         return Construct<SharedOutputPathAnalyzer>;
     }
 }
diff --git a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
index 970b644d495..174fb305b83 100644
--- a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
@@ -12,12 +12,10 @@
 
 namespace Microsoft.Build.BuildCheck.Analyzers;
 
-
-
 internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer
 {
     public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0101", "ConflictingOutputPath",
-        "Two projects should not share their OutputPath nor IntermediateOutputPath locations", "Configuration",
+        "Two projects should not share their OutputPath nor IntermediateOutputPath locations",
         "Projects {0} and {1} have conflicting output paths: {2}.",
         new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
 
@@ -79,7 +77,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
         {
             context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
-                // TODO: let's support transmitting locations of specific properties
+                // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732
                 ElementLocation.EmptyLocation,
                 Path.GetFileName(projectPath),
                 Path.GetFileName(conflictingProject),
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
index d46e013da46..c2c36c813f9 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
@@ -26,7 +26,7 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope
     // Intentionally not checking the RuleId
     //  as for analyzers with multiple rules, we can squash config to a single one,
     //  if the ruleId is the only thing differing.
-    public bool IsEqual(BuildAnalyzerConfigurationInternal? other) =>
+    public bool IsSameConfigurationAs(BuildAnalyzerConfigurationInternal? other) =>
         other != null &&
         Severity == other.Severity &&
         IsEnabled == other.IsEnabled &&
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs
index 22d116d95a1..92673cf7f79 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerWrapper.cs
@@ -43,7 +43,7 @@ internal void StartNewProject(
             }
         }
 
-        if (CommonConfig == null || !userConfigs.All(t => t.IsEqual(CommonConfig)))
+        if (CommonConfig == null || !userConfigs.All(t => t.IsSameConfigurationAs(CommonConfig)))
         {
             CommonConfig = null;
         }
@@ -59,7 +59,7 @@ internal void Uninitialize()
 
     internal void ClearStats() => _stopwatch.Reset();
 
-    internal IDisposable StartSpan()
+    internal CleanupScope StartSpan()
     {
         _stopwatch.Start();
         return new CleanupScope(_stopwatch.Stop);
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index 55b70993bb5..9995aef71b3 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -94,7 +94,7 @@ private void RunRegisteredActions<T>(
             /* (BuildAnalyzerWrapper2, Action<BuildAnalysisContext<T>>) */
             analyzerCallback =>
             {
-                // TODO: tracing - we might want tp account this entire block
+                // Tracing - https://github.com/dotnet/msbuild/issues/9629 - we might want to account this entire block
                 //  to the relevant analyzer (with only the currently accounted part as being the 'core-execution' subspan)
 
                 BuildAnalyzerConfigurationInternal? commonConfig = analyzerCallback.Item1.CommonConfig;
@@ -120,7 +120,9 @@ private void RunRegisteredActions<T>(
                     }
                 }
 
-                // TODO: if the input data supports that - check the configPerRule[0].EvaluationAnalysisScope
+                // Here we might want to check the configPerRule[0].EvaluationAnalysisScope - if the input data supports that
+                // The decision and implementation depends on the outcome of the investigation tracked in:
+                // https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57851137
 
                 BuildCheckDataContext<T> context = new BuildCheckDataContext<T>(
                     analyzerCallback.Item1,
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
index a87f8939229..29a0a8acf50 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 
-internal class BuildCheckConfigurationException : Exception
+internal sealed class BuildCheckConfigurationException : Exception
 {
     /// <summary>
     /// Exception to communicate issues with user specified configuration - unsupported scenarios, malformations, etc.
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index b860423748e..20d095fc889 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -91,9 +91,9 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,
             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
 
-        LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();
+        LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext);
 
-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
+        // Tracing: https://github.com/dotnet/msbuild/issues/9629
         loggingContext.LogCommentFromText(MessageImportance.High, msg);
     }
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index df5385b08ba..9cc89118eef 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -41,7 +41,7 @@ internal sealed class BuildCheckManagerProvider : IBuildCheckManagerProvider
 
     internal static IBuildComponent CreateComponent(BuildComponentType type)
     {
-        ErrorUtilities.VerifyThrow(type == BuildComponentType.BuildCheck, "Cannot create components of type {0}", type);
+        ErrorUtilities.VerifyThrow(type == BuildComponentType.BuildCheckManagerProvider, "Cannot create components of type {0}", type);
         return new BuildCheckManagerProvider();
     }
 
@@ -51,7 +51,7 @@ public void InitializeComponent(IBuildComponentHost host)
 
         if (Interlocked.CompareExchange(ref s_isInitialized, 1, 0) == 1)
         {
-            // Already initialized
+            // Initialization code already run(ing)
             return;
         }
 
@@ -106,7 +106,7 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData)
             {
                 BuildCheckAcquisitionEventArgs eventArgs = acquisitionData.ToBuildEventArgs();
 
-                // TODO: We may want to pass the real context here (from evaluation)
+                // We may want to pass the real context here (from evaluation)
                 eventArgs.BuildEventContext = new BuildEventContext(
                     BuildEventContext.InvalidNodeId,
                     BuildEventContext.InvalidProjectInstanceId,
@@ -177,7 +177,8 @@ internal void RegisterCustomAnalyzer(
 
         private void SetupSingleAnalyzer(BuildAnalyzerFactoryContext analyzerFactoryContext, string projectFullPath, BuildEventContext buildEventContext)
         {
-            // TODO: For user analyzers - it should run only on projects where referenced
+            // For custom analyzers - it should run only on projects where referenced
+            //  (otherwise error out - https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57849480)
             //  on others it should work similarly as disabling them.
             // Disabled analyzer should not only post-filter results - it shouldn't even see the data 
 
@@ -282,12 +283,12 @@ private void SetupAnalyzersForNewProject(string projectFullPath, BuildEventConte
 
 
         public void ProcessEvaluationFinishedEventArgs(
-            IBuildAnalysisLoggingContext buildAnalysisContext,
+            AnalyzerLoggingContext buildAnalysisContext,
             ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
             => _buildEventsProcessor
                 .ProcessEvaluationFinishedEventArgs(buildAnalysisContext, evaluationFinishedEventArgs);
 
-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
+        // Tracing: https://github.com/dotnet/msbuild/issues/9629
         public Dictionary<string, TimeSpan> CreateTracingStats()
         {
             foreach (BuildAnalyzerFactoryContext analyzerFactoryContext in _analyzersRegistry)
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 723e0430636..9514f0a7ca0 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -29,12 +29,10 @@ internal class BuildEventsProcessor(BuildCheckCentralContext buildCheckCentralCo
     private readonly BuildCheckCentralContext _buildCheckCentralContext = buildCheckCentralContext;
 
     // This requires MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION set to 1
-    public void ProcessEvaluationFinishedEventArgs(
-        IBuildAnalysisLoggingContext buildAnalysisContext,
+    internal void ProcessEvaluationFinishedEventArgs(
+        AnalyzerLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
     {
-        LoggingContext loggingContext = buildAnalysisContext.ToLoggingContext();
-
         Dictionary<string, string> propertiesLookup = new Dictionary<string, string>();
         Internal.Utilities.EnumerateProperties(evaluationFinishedEventArgs.Properties, propertiesLookup,
             static (dict, kvp) => dict.Add(kvp.Key, kvp.Value));
@@ -42,7 +40,7 @@ public void ProcessEvaluationFinishedEventArgs(
         EvaluatedPropertiesAnalysisData analysisData =
             new(evaluationFinishedEventArgs.ProjectFile!, propertiesLookup);
 
-        _buildCheckCentralContext.RunEvaluatedPropertiesActions(analysisData, loggingContext, ReportResult);
+        _buildCheckCentralContext.RunEvaluatedPropertiesActions(analysisData, buildAnalysisContext, ReportResult);
 
         if (_buildCheckCentralContext.HasParsedItemsActions)
         {
@@ -53,7 +51,7 @@ public void ProcessEvaluationFinishedEventArgs(
             ParsedItemsAnalysisData itemsAnalysisData = new(evaluationFinishedEventArgs.ProjectFile!,
                 new ItemsHolder(xml.Items, xml.ItemGroups));
 
-            _buildCheckCentralContext.RunParsedItemsActions(itemsAnalysisData, loggingContext, ReportResult);
+            _buildCheckCentralContext.RunParsedItemsActions(itemsAnalysisData, buildAnalysisContext, ReportResult);
         }
     }
 
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index d77f5c2ce16..67c2155500e 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -15,11 +15,11 @@
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 
-// TODO: https://github.com/dotnet/msbuild/issues/9628
-//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)
+// Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)
+// Tracked via: https://github.com/dotnet/msbuild/issues/9828
 internal static class ConfigurationProvider
 {
-    // TODO: This module should have a mechanism for removing unneeded configurations
+    // We might want to have a mechanism for removing unneeded configurations
     //  (disabled rules and analyzers that need to run in different node)
     private static readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = LoadConfiguration();
 
@@ -54,7 +54,7 @@ private static Dictionary<string, BuildAnalyzerConfiguration> LoadConfiguration(
 
         if (!File.Exists(configPath))
         {
-            // TODO: pass the current project path
+            // This is just a dummy implementation for testing purposes
             var dir = Environment.CurrentDirectory;
             configPath = Path.Combine(dir, configFileName);
 
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 703d0b6bfa9..ca91897ad44 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Acquisition;
 using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
@@ -28,7 +29,7 @@ internal enum BuildCheckDataSource
 internal interface IBuildCheckManager
 {
     void ProcessEvaluationFinishedEventArgs(
-        IBuildAnalysisLoggingContext buildAnalysisContext,
+        AnalyzerLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
 
     void SetDataSource(BuildCheckDataSource buildCheckDataSource);
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index d6685345652..00ed2266d09 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -8,6 +8,7 @@
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Acquisition;
+using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 
@@ -17,7 +18,7 @@ internal class NullBuildCheckManager : IBuildCheckManager
 {
     public void Shutdown() { }
 
-    public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buildAnalysisContext,
+    public void ProcessEvaluationFinishedEventArgs(AnalyzerLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
     { }
 
diff --git a/src/Build/BuildCheck/Infrastructure/TracingReporter.cs b/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
index 614a1711a77..2d6d850737b 100644
--- a/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
+++ b/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
@@ -11,7 +11,6 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 internal class TracingReporter
 {
-    internal const string INFRA_STAT_NAME = "Infrastructure";
     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();
 
     public void AddStats(string name, TimeSpan subtotal)
diff --git a/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs b/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
index 7d1d5badc92..1b3eb9cb4bb 100644
--- a/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
+++ b/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
@@ -7,7 +7,7 @@
 
 namespace Microsoft.Build.BuildCheck.Logging;
 
-internal class AnalyzerLoggingContext : LoggingContext, IBuildAnalysisLoggingContext
+internal class AnalyzerLoggingContext : LoggingContext
 {
     public AnalyzerLoggingContext(ILoggingService loggingService, BuildEventContext eventContext)
         : base(loggingService, eventContext)
diff --git a/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs b/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
index 8c437f45174..baee4b681be 100644
--- a/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
+++ b/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs
@@ -8,6 +8,6 @@
 namespace Microsoft.Build.BuildCheck.Logging;
 internal class AnalyzerLoggingContextFactory(ILoggingService loggingService) : IBuildAnalysisLoggingContextFactory
 {
-    public IBuildAnalysisLoggingContext CreateLoggingContext(BuildEventContext eventContext) =>
+    public AnalyzerLoggingContext CreateLoggingContext(BuildEventContext eventContext) =>
         new AnalyzerLoggingContext(loggingService, eventContext);
 }
diff --git a/src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs b/src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs
deleted file mode 100644
index 4951fd7e3c6..00000000000
--- a/src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Experimental.BuildCheck;
-
-namespace Microsoft.Build.BuildCheck.Logging;
-
-internal static class BuildAnalysisLoggingContextExtensions
-{
-    public static LoggingContext ToLoggingContext(this IBuildAnalysisLoggingContext loggingContext) =>
-        loggingContext as AnalyzerLoggingContext ??
-        throw new InvalidOperationException("The logging context is not an AnalyzerLoggingContext");
-}
diff --git a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs b/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs
deleted file mode 100644
index c7433a14eb9..00000000000
--- a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs
+++ /dev/null
@@ -1,7 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-namespace Microsoft.Build.Experimental.BuildCheck;
-
-public interface IBuildAnalysisLoggingContext
-{ }
diff --git a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs b/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs
index e239c8dc73d..e5188703ff7 100644
--- a/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs
+++ b/src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContextFactory.cs
@@ -1,11 +1,12 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
-public interface IBuildAnalysisLoggingContextFactory
+internal interface IBuildAnalysisLoggingContextFactory
 {
-    IBuildAnalysisLoggingContext CreateLoggingContext(BuildEventContext eventContext);
+    AnalyzerLoggingContext CreateLoggingContext(BuildEventContext eventContext);
 }
diff --git a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
index d9a560c7e60..d0738fe6b71 100644
--- a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
+++ b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
@@ -25,6 +25,10 @@ public abstract class AnalysisData(string projectFilePath)
     public string ProjectFilePath { get; } = projectFilePath;
 }
 
+/// <summary>
+/// Data passed from infrastructure to build analyzers.
+/// </summary>
+/// <typeparam name="T">The type of the actual data for analysis.</typeparam>
 public class BuildCheckDataContext<T> where T : AnalysisData
 {
     private readonly BuildAnalyzerWrapper _analyzerWrapper;
diff --git a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
index 0a31bdf675a..f3a336a41ec 100644
--- a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
@@ -5,6 +5,10 @@
 using Microsoft.Build.BackEnd.Logging;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
+
+/// <summary>
+/// BuildCheck OM data representing the evaluated properties of a project.
+/// </summary>
 public class EvaluatedPropertiesAnalysisData : AnalysisData
 {
     internal EvaluatedPropertiesAnalysisData(
diff --git a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
index 62a0e588ae3..a6b34446258 100644
--- a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
@@ -7,20 +7,29 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
+/// <summary>
+/// Extension methods for <see cref="ProjectItemElement"/>.
+/// </summary>
 public static class ItemTypeExtensions
 {
     public static IEnumerable<ProjectItemElement> GetItemsOfType(this IEnumerable<ProjectItemElement> items,
         string itemType)
     {
         return items.Where(i =>
-            i.ItemType.Equals(itemType, StringComparison.CurrentCultureIgnoreCase));
+            MSBuildNameIgnoreCaseComparer.Default.Equals(i.ItemType, itemType));
     }
 }
 
+/// <summary>
+/// Holder for evaluated items and item groups.
+/// </summary>
+/// <param name="items"></param>
+/// <param name="itemGroups"></param>
 public class ItemsHolder(IEnumerable<ProjectItemElement> items, IEnumerable<ProjectItemGroupElement> itemGroups)
 {
     public IEnumerable<ProjectItemElement> Items { get; } = items;
@@ -32,6 +41,9 @@ public IEnumerable<ProjectItemElement> GetItemsOfType(string itemType)
     }
 }
 
+/// <summary>
+/// BuildCheck OM data representing the evaluated items of a project.
+/// </summary>
 public class ParsedItemsAnalysisData : AnalysisData
 {
     internal ParsedItemsAnalysisData(
diff --git a/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs b/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs
index 1a978642eb8..7ca6aeb69f9 100644
--- a/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs
+++ b/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs
@@ -16,25 +16,11 @@ internal static class EnumerableExtensions
     /// </summary>
     /// <typeparam name="T"></typeparam>
     /// <param name="source">Sequence to be turned into csv string.</param>
-    /// <param name="useSpace">Indicates whether space should be inserted between comas and following items.</param>
+    /// <param name="useSpace">Indicates whether space should be inserted between commas and following items.</param>
     /// <returns>Csv string.</returns>
     public static string ToCsvString<T>(this IEnumerable<T>? source, bool useSpace = true)
     {
-        return source == null ? "<NULL>" : string.Join("," + (useSpace ? " " : string.Empty), source);
-    }
-
-    /// <summary>
-    /// Performs an action for each element in given sequence.
-    /// </summary>
-    /// <param name="sequence"></param>
-    /// <param name="action"></param>
-    /// <typeparam name="T"></typeparam>
-    public static void ForEach<T>(this IEnumerable<T> sequence, Action<T> action)
-    {
-        foreach (T element in sequence)
-        {
-            action(element);
-        }
+        return source == null ? "<NULL>" : string.Join(useSpace ? ", " : ",", source);
     }
 
     /// <summary>
@@ -52,13 +38,13 @@ public static void Merge<TKey, TValue>(
     {
         foreach (var pair in another)
         {
-            if (!dict.ContainsKey(pair.Key))
+            if (!dict.TryGetValue(pair.Key, out TValue value))
             {
                 dict[pair.Key] = pair.Value;
             }
             else
             {
-                dict[pair.Key] = mergeValues(dict[pair.Key], pair.Value);
+                dict[pair.Key] = mergeValues(value, pair.Value);
             }
         }
     }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 2daff2fe714..dc2d2ed13ca 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -183,7 +183,6 @@
     <Compile Include="BuildCheck\Infrastructure\CustomConfigurationData.cs" />
     <Compile Include="BuildCheck\API\IBuildCheckRegistrationContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManager.cs" />
-    <Compile Include="BuildCheck\Logging\IBuildAnalysisLoggingContext.cs" />
     <Compile Include="BuildCheck\Logging\IBuildAnalysisLoggingContextFactory.cs" />
     <Compile Include="BuildCheck\OM\EvaluatedPropertiesAnalysisData.cs" />
     <Compile Include="BuildCheck\OM\ParsedItemsAnalysisData.cs" />
@@ -197,7 +196,6 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="BuildCheck\Logging\AnalyzerLoggingContext.cs" />
     <Compile Include="BuildCheck\Logging\AnalyzerLoggingContextFactory.cs" />
-    <Compile Include="BuildCheck\Logging\BuildAnalysisLoggingContextExtensions.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 106754be327..8a6faa13fb4 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -12,10 +12,18 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
-public abstract class BuildCheckEventArgs : BuildEventArgs
+/// <summary>
+/// Base class for all build check event args.
+/// Not intended to be extended by external code.
+/// </summary>
+internal abstract class BuildCheckEventArgs : BuildEventArgs
 { }
 
-public sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> tracingData) : BuildCheckEventArgs
+/// <summary>
+/// Transport mean for the BuildCheck tracing data from additional nodes.
+/// </summary>
+/// <param name="tracingData"></param>
+internal sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> tracingData) : BuildCheckEventArgs
 {
     internal BuildCheckTracingEventArgs() : this(new Dictionary<string, TimeSpan>())
     { }
@@ -50,7 +58,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
     }
 }
 
-public sealed class BuildCheckAcquisitionEventArgs(string acquisitionData) : BuildCheckEventArgs
+internal sealed class BuildCheckAcquisitionEventArgs(string acquisitionData) : BuildCheckEventArgs
 {
     internal BuildCheckAcquisitionEventArgs() : this(string.Empty)
     { }
@@ -71,7 +79,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         AcquisitionData = reader.ReadString();
     }
 }
-public sealed class BuildCheckResultWarning : BuildWarningEventArgs
+internal sealed class BuildCheckResultWarning : BuildWarningEventArgs
 {
     public BuildCheckResultWarning(IBuildCheckResult result)
     {
@@ -97,7 +105,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
     public override string? Message { get; protected set; }
 }
 
-public sealed class BuildCheckResultError : BuildErrorEventArgs
+internal sealed class BuildCheckResultError : BuildErrorEventArgs
 {
     public BuildCheckResultError(IBuildCheckResult result)
     {
@@ -123,7 +131,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
     public override string? Message { get; protected set; }
 }
 
-public sealed class BuildCheckResultMessage : BuildMessageEventArgs
+internal sealed class BuildCheckResultMessage : BuildMessageEventArgs
 {
     public BuildCheckResultMessage(IBuildCheckResult result)
     {
diff --git a/src/Framework/BuildCheck/IBuildCheckResult.cs b/src/Framework/BuildCheck/IBuildCheckResult.cs
index e6f04518305..1d471e6c9bc 100644
--- a/src/Framework/BuildCheck/IBuildCheckResult.cs
+++ b/src/Framework/BuildCheck/IBuildCheckResult.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// <summary>
 /// Holder for the reported result of a build cop rule.
 /// </summary>
-public interface IBuildCheckResult
+internal interface IBuildCheckResult
 {
     /// <summary>
     /// Optional location of the finding (in near future we might need to support multiple locations).
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 146142b488a..8e5402b6fd3 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -80,7 +80,7 @@ namespace Microsoft.Build.Framework
     /// <summary>
     /// Type of handler for BuildCheckEventRaised events
     /// </summary>
-    public delegate void BuildCheckEventHandler(object sender, BuildCheckEventArgs e);
+    internal delegate void BuildCheckEventHandler(object sender, BuildCheckEventArgs e);
 
     /// <summary>
     /// This interface defines the events raised by the build engine.
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index 2ae43884646..8a2a558e452 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -1,6 +1,6 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
 
-  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.props" />
+  <Import Project="$(RepoRoot)eng\BootStrapMsBuild.props" />
 
   <PropertyGroup>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
@@ -48,6 +48,6 @@
   <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))" />
   <Import Project="..\Package\GetBinPaths.Arm64.targets" Condition="$(TargetFramework.StartsWith('net4'))" />
 
-  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.targets" />
+  <Import Project="$(RepoRoot)eng\BootStrapMsBuild.targets" />
 
 </Project>
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index d85b33302ed..e7800bdf4ca 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -268,7 +268,7 @@ internal ParameterizedSwitchInfo(
             new ParameterizedSwitchInfo(  new string[] { "warnnotaserror", "noerr" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           "MissingWarnNotAsErrorParameterError", true,   false),
             new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),
-            new ParameterizedSwitchInfo(  new string[] { "analyze", "al" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "analyze", },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false),
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index d2849ba5f45..52dfa6daf87 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2745,7 +2745,7 @@ private static bool ProcessCommandLineSwitches(
 
         private static bool IsBuildCheckEnabled(CommandLineSwitches commandLineSwitches)
         {
-            // todo: opt-in behavior: https://github.com/dotnet/msbuild/issues/9723
+            // Opt-in behavior to be determined by: https://github.com/dotnet/msbuild/issues/9723
             bool isAnalysisEnabled = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Analyze);
             return isAnalysisEnabled;
         }
diff --git a/src/Shared/IsExternalInit.cs b/src/Shared/IsExternalInit.cs
index 92d5c4c320a..ae2ffb321cd 100644
--- a/src/Shared/IsExternalInit.cs
+++ b/src/Shared/IsExternalInit.cs
@@ -3,5 +3,7 @@
 
 namespace System.Runtime.CompilerServices
 {
+    // Needed so we can use init setters in full fw or netstandard
+    //  (details: https://developercommunity.visualstudio.com/t/error-cs0518-predefined-type-systemruntimecompiler/1244809)
     internal static class IsExternalInit { }
 }
diff --git a/src/UnitTests.Shared/AssemblyInfo.cs b/src/UnitTests.Shared/BootstrapLocationAttribute.cs
similarity index 82%
rename from src/UnitTests.Shared/AssemblyInfo.cs
rename to src/UnitTests.Shared/BootstrapLocationAttribute.cs
index 5b383e24105..7f8627a69b3 100644
--- a/src/UnitTests.Shared/AssemblyInfo.cs
+++ b/src/UnitTests.Shared/BootstrapLocationAttribute.cs
@@ -6,9 +6,8 @@
 namespace Microsoft.Build.UnitTests.Shared;
 
 [System.AttributeUsage(System.AttributeTargets.Assembly)]
-internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)
+internal sealed class BootstrapLocationAttribute(string bootstrapMsbuildBinaryLocation)
     : System.Attribute
 {
-    public string BootstrapRoot { get; } = bootstrapRoot;
     public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;
 }
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 9a63822e930..fee3abf670f 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -28,12 +28,11 @@
     <Compile Include="..\Shared\IsExternalInit.cs" />
   </ItemGroup>
 
-  <Import Project="..\..\eng\BootStrapMSBuild.props" />
+  <Import Project="..\..\eng\BootStrapMsBuild.props" />
 
   <ItemGroup>
     <AssemblyAttribute Include="Microsoft.Build.UnitTests.Shared.BootstrapLocationAttribute">
-      <_Parameter1>$(ArtifactsBinDir)</_Parameter1>
-      <_Parameter2>$(BootstrapBinaryDestination)</_Parameter2>
+      <_Parameter1>$(BootstrapBinaryDestination)</_Parameter1>
     </AssemblyAttribute>
   </ItemGroup>
 </Project>
diff --git a/template_feed/Microsoft.AnalyzerTemplate/.template.config/template.json b/template_feed/Microsoft.AnalyzerTemplate/.template.config/template.json
index 071723c97cc..52c4467e930 100644
--- a/template_feed/Microsoft.AnalyzerTemplate/.template.config/template.json
+++ b/template_feed/Microsoft.AnalyzerTemplate/.template.config/template.json
@@ -27,7 +27,7 @@
       "type": "parameter",
       "description": "Overrides the default Microsoft.Build version where analyzer's interfaces are placed",
       "datatype": "text",
-      "defaultValue": "17.9.5",
+      "defaultValue": "17.11.0",
       "replaces": "1.0.0-MicrosoftBuildPackageVersion",
       "displayName": "Microsoft.Build default package version override"
     }
diff --git a/template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj b/template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj
index 6de9fb1f434..b18c65a87dd 100644
--- a/template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj
+++ b/template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj
@@ -1,17 +1,17 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-	  <TargetFramework>netstandard2.0</TargetFramework>
-	  <DevelopmentDependency>true</DevelopmentDependency>
-	  <IncludeBuildOutput>false</IncludeBuildOutput>
-	  <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
-	  <!-- The output structure was modified for msbuild develomplent needs.-->
+    <TargetFramework>netstandard2.0</TargetFramework>
+    <DevelopmentDependency>true</DevelopmentDependency>
+    <IncludeBuildOutput>false</IncludeBuildOutput>
+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
+    <!-- The output structure was modified for msbuild development needs.-->
     <NoWarn>NU5101;NU5128</NoWarn>
   </PropertyGroup>
 
   <ItemGroup>
-	  <None Include="Directory.Build.props" Pack="true" PackagePath="build\Directory.Build.props" />
-	  <Content Include="README.md" />
+    <None Include="Directory.Build.props" Pack="true" PackagePath="build\Directory.Build.props" />
+    <Content Include="README.md" />
   </ItemGroup>
 
   <ItemGroup>
@@ -20,26 +20,26 @@
   </ItemGroup>
 
   <Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
-	<!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
+    <!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
        This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
-	<JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*" Right="@(PackageReference)" RightKey="" RightMetadata="*" ItemSpecToUse="Left">
-		<Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
-	</JoinItems>
-
-	<ItemGroup>
-		<!-- Remove NETStandard DLLs -->
-		<_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(NuGetPackageId) == 'NETStandard.Library'" />
-		<_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(_PackagesToPack.IncludeInPackage) != 'true'" />
-	</ItemGroup>
-
-	<Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />
-
-	<ItemGroup>
-		<!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
-		<None Include="@(_PackagesToPack)" Pack="true" PackagePath="lib" Visible="false" />
-
-		<!-- Add the DLL produced by the current project to the NuGet package -->
-		<None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="lib" Visible="false" />
-	</ItemGroup>
-</Target>
+    <JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*" Right="@(PackageReference)" RightKey="" RightMetadata="*" ItemSpecToUse="Left">
+    <Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
+    </JoinItems>
+
+    <ItemGroup>
+    <!-- Remove NETStandard DLLs -->
+    <_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(NuGetPackageId) == 'NETStandard.Library'" />
+    <_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(_PackagesToPack.IncludeInPackage) != 'true'" />
+    </ItemGroup>
+
+    <Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />
+
+    <ItemGroup>
+    <!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
+    <None Include="@(_PackagesToPack)" Pack="true" PackagePath="lib" Visible="false" />
+
+    <!-- Add the DLL produced by the current project to the NuGet package -->
+    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="lib" Visible="false" />
+    </ItemGroup>
+  </Target>
 </Project>
diff --git a/template_feed/Microsoft.AnalyzerTemplate/Directory.Build.props b/template_feed/Microsoft.AnalyzerTemplate/Directory.Build.props
index 8de4380640c..3b752b831cc 100644
--- a/template_feed/Microsoft.AnalyzerTemplate/Directory.Build.props
+++ b/template_feed/Microsoft.AnalyzerTemplate/Directory.Build.props
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
   <PropertyGroup>
 	  <MSBuildAnalyzer>$([MSBuild]::RegisterAnalyzer($(MSBuildThisFileDirectory)..\lib\Company.AnalyzerTemplate.dll))</MSBuildAnalyzer>
   </PropertyGroup>
