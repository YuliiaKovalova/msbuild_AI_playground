diff --git a/eng/Versions.props b/eng/Versions.props
index 02f13c5392d..f3f9f16254c 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -15,7 +15,7 @@
     <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
   </PropertyGroup>
   <PropertyGroup>
-    <VersionPrefix>16.7.2</VersionPrefix>
+    <VersionPrefix>16.7.3</VersionPrefix>
     <DotNetFinalVersionKind>release</DotNetFinalVersionKind>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index f85190f0854..16eb37f0682 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -654,9 +654,7 @@ public void TransformsUseCorrectDirectory_Basic()
                 project.ReevaluateIfNecessary();
 
                 Assert.Equal(
-                    NativeMethodsShared.IsWindows
-                        ? Path.Combine(Path.GetTempPath(), @"obj\i386\foo.dll")
-                        : Path.Combine(Path.GetTempPath(), @"obj/i386/foo.dll"),
+                        Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386", "foo.dll"),
                     project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
             }
             finally
@@ -731,10 +729,10 @@ public void TransformsUseCorrectDirectory_DirectoryTransform()
                 ProjectInstance projectInstance = new ProjectInstance(xml);
 
                 Assert.Equal(
-                        Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
+                        Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
                         project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
                 Assert.Equal(
-                        Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
+                        Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
                         projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
             }
             finally
@@ -770,10 +768,10 @@ public void TransformsUseCorrectDirectory_DirectoryItemFunction()
                 ProjectInstance projectInstance = new ProjectInstance(xml);
 
                 Assert.Equal(
-                        Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
+                        Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
                         project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
                 Assert.Equal(
-                        Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
+                        Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar,
                         projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
             }
             finally
@@ -812,10 +810,10 @@ public void TransformsUseCorrectDirectory_DirectoryNameItemFunction()
 
                 // Should be the full path to the directory
                 Assert.Equal(
-                    Path.Combine(Path.GetTempPath() /* remove c:\ */, "obj" + Path.DirectorySeparatorChar + "i386"),
+                    Path.Combine(FileUtilities.TempFileDirectory /* remove c:\ */, "obj", "i386"),
                     project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
                 Assert.Equal(
-                    Path.Combine(Path.GetTempPath() /* remove c:\ */, "obj" + Path.DirectorySeparatorChar + "i386"),
+                    Path.Combine(FileUtilities.TempFileDirectory /* remove c:\ */, "obj", "i386"),
                     projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude);
             }
             finally
diff --git a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
index 17b67ec8cb1..165a616b806 100644
--- a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
@@ -127,7 +127,7 @@ void TransportDelegate(INodePacket packet)
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/Microsoft/msbuild/issues/282")]
         public void TestShutDown()
         {
-            SendDataDelegate transportDelegate = PacketProcessor;
+            SendDataDelegate transportDelegate = new SendDataDelegate(PacketProcessor);
             var weakTransportDelegateReference = new WeakReference(transportDelegate);
             var transportSink = new BuildEventArgTransportSink(transportDelegate);
 
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index c9e4fdd7302..d788345d9ba 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -434,6 +434,7 @@ public void TestCache2()
                 Environment.SetEnvironmentVariable("TEMP", problematicTmpPath);
 
                 FileUtilities.ClearCacheDirectoryPath();
+                FileUtilities.ClearTempFileDirectory();
                 string cacheFilePath = configuration.GetCacheFile();
                 Assert.StartsWith(problematicTmpPath, cacheFilePath);
             }
@@ -442,6 +443,7 @@ public void TestCache2()
                 Environment.SetEnvironmentVariable("TMP", originalTmp);
                 Environment.SetEnvironmentVariable("TEMP", originalTemp);
                 FileUtilities.ClearCacheDirectoryPath();
+                FileUtilities.ClearTempFileDirectory();
             }
         }
 
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index 6a9e26fbc0e..48936ec1858 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -980,7 +980,7 @@ private void SimpleSymlinkInputCheck(DateTime symlinkWriteTime, DateTime targetW
                 _testOutputHelper.WriteLine($"Created input file {inputTarget}");
                 File.SetLastWriteTime(inputTarget, targetWriteTime);
 
-                inputSymlink = FileUtilities.GetTemporaryFile(null, ".linkin", createFile: false);
+                inputSymlink = FileUtilities.GetTemporaryFile(null, null, ".linkin", createFile: false);
 
                 if (!CreateSymbolicLink(inputSymlink, inputTarget, 0))
                 {
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 2009a9b3f55..154f7e29bc6 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -2933,7 +2933,7 @@ public void PropertyFunctionStaticMethodEnumArgument()
         [Fact]
         public void PropertyFunctionStaticMethodDirectoryNameOfFileAbove()
         {
-            string tempPath = Path.GetTempPath();
+            string tempPath = FileUtilities.TempFileDirectory;
             string tempFile = Path.GetFileName(FileUtilities.GetTemporaryFile());
 
             try
@@ -2971,7 +2971,7 @@ public void PropertyFunctionStaticMethodGetPathOfFileAbove()
             //
             MockElementLocation mockElementLocation = new MockElementLocation(Path.Combine(ObjectModelHelpers.TempProjectDir, "one", "two", "three", "four", "five", Path.GetRandomFileName()));
 
-            string fileToFind = FileUtilities.GetTemporaryFile(ObjectModelHelpers.TempProjectDir, ".tmp");
+            string fileToFind = FileUtilities.GetTemporaryFile(ObjectModelHelpers.TempProjectDir, null, ".tmp");
 
             try
             {
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 144ded7db93..0becd486c67 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -383,6 +383,14 @@ public DeferredBuildMessage(string text, MessageImportance importance)
         /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
         public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMessage> deferredBuildMessages)
         {
+            // TEMP can be modified from the environment. Most of Traits is lasts for the duration of the process (with a manual reset for tests)
+            // and environment variables we use as properties are stored in a dictionary at the beginning of the build, so they also cannot be
+            // changed during a build. Some of our older stuff uses live environment variable checks. The TEMP directory previously used a live
+            // environment variable check, but it now uses a cached value. Nevertheless, we should support changing it between builds, so reset
+            // it here in case the user is using Visual Studio or the MSBuild server, as those each last for multiple builds without changing
+            // BuildManager.
+            FileUtilities.ClearTempFileDirectory();
+
             // deferredBuildMessages cannot be an optional parameter on a single BeginBuild method because it would break binary compatibility.
             _deferredBuildMessages = deferredBuildMessages;
             BeginBuild(parameters);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 2cf6ea5f8ed..bd1eddec946 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -121,7 +121,7 @@ internal BuildRequestEngine()
 
             if (String.IsNullOrEmpty(_debugDumpPath))
             {
-                _debugDumpPath = Path.GetTempPath();
+                _debugDumpPath = FileUtilities.TempFileDirectory;
             }
 
             _status = BuildRequestEngineStatus.Uninitialized;
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index d34a2df0426..0c03137a569 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -189,7 +189,7 @@ public Scheduler()
 
             if (String.IsNullOrEmpty(_debugDumpPath))
             {
-                _debugDumpPath = Path.GetTempPath();
+                _debugDumpPath = FileUtilities.TempFileDirectory;
             }
 
             Reset();
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 6c5df31215f..b797f36dc9d 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -569,7 +569,16 @@ internal static void Trace(int nodeId, string format, params object[] args)
 
                     if (String.IsNullOrEmpty(s_debugDumpPath))
                     {
-                        s_debugDumpPath = Path.GetTempPath();
+                        // These debug files can be seen by other users on linux, hence putting them in a special directory.
+                        // Task hosts are only on windows, so no need to worry about the security concern for them. It's a
+                        // bit more annoying to use FileUtilities.TempFileDirectory, so ifdeffing around that here unless we
+                        // decide it's necessary.
+                        s_debugDumpPath =
+#if CLR2COMPATIBILITY
+                            Path.GetTempPath();
+#else
+                            FileUtilities.TempFileDirectory;
+#endif
                     }
                     else
                     {
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index ae0dac9bfe3..3bd2bed2acb 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -42,9 +42,18 @@ static ExceptionHandling()
         private static string GetDebugDumpPath()
         {
             string debugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+
+            // These debug files can be seen by other users on linux, hence putting them in a special directory.
+            // Task hosts are only on windows, so no need to worry about the security concern for them. It's a
+            // bit more annoying to use FileUtilities.TempFileDirectory, so ifdeffing around that here unless we
+            // decide it's necessary.
             return !string.IsNullOrEmpty(debugPath)
-                    ? debugPath
-                    : Path.GetTempPath();
+                    ? debugPath :
+#if CLR2COMPATIBILITY
+                    Path.GetTempPath();
+#else
+                    FileUtilities.TempFileDirectory;
+#endif
         }
 
         /// <summary>
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index a02cf5c4582..13faade62d0 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -124,7 +124,13 @@ internal static string GetCacheDirectory()
         {
             if (cacheDirectory == null)
             {
-                cacheDirectory = Path.Combine(Path.GetTempPath(), String.Format(CultureInfo.CurrentUICulture, "MSBuild{0}-{1}", Process.GetCurrentProcess().Id, AppDomain.CurrentDomain.Id));
+                cacheDirectory = Path.Combine(
+#if CLR2COMPATIBILITY
+                    Path.GetTempPath()
+#else
+                    TempFileDirectory
+#endif
+                    , String.Format(CultureInfo.CurrentUICulture, "MSBuild{0}-{1}", Process.GetCurrentProcess().Id, AppDomain.CurrentDomain.Id));
             }
 
             return cacheDirectory;
diff --git a/src/Shared/NamedPipeUtil.cs b/src/Shared/NamedPipeUtil.cs
index a7f8913e7d7..e7451f51b7c 100644
--- a/src/Shared/NamedPipeUtil.cs
+++ b/src/Shared/NamedPipeUtil.cs
@@ -18,7 +18,7 @@ internal static string GetPipeNameOrPath(string pipeName)
                 // can be quite long, leaving very little room for the actual pipe name. Fortunately,
                 // '/tmp' is mandated by POSIX to always be a valid temp directory, so we can use that
                 // instead.
-                return Path.Combine("/tmp", pipeName);
+                return FileUtilities.GetTemporaryFile(null, pipeName, null, createFile: false);
             }
             else
             {
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 6bc94246966..fb2c6ebee27 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -1351,9 +1351,14 @@ internal static void VerifyThrowWin32Result(int result)
             }
         }
 
-#endregion
+        #endregion
+
+        #region PInvoke
+        [DllImport("libc", SetLastError = true)]
+        internal static extern int chmod(string pathname, int mode);
 
-#region PInvoke
+        [DllImport("libc", SetLastError = true)]
+        internal static extern int mkdir(string path, int mode);
 
         /// <summary>
         /// Gets the current OEM code page which is used by console apps
diff --git a/src/Shared/TempFileUtilities.cs b/src/Shared/TempFileUtilities.cs
index 8948d8dde99..fb80ce2fe49 100644
--- a/src/Shared/TempFileUtilities.cs
+++ b/src/Shared/TempFileUtilities.cs
@@ -14,6 +14,56 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static partial class FileUtilities
     {
+        // For the current user, these correspond to read, write, and execute permissions.
+        // Lower order bits correspond to the same for "group" or "other" users.
+        private const int userRWX = 0x100 | 0x80 | 0x40;
+        private static string tempFileDirectory = null;
+        internal static string TempFileDirectory
+        {
+            get
+            {
+                return tempFileDirectory ??= CreateFolderUnderTemp();
+            }
+        }
+
+        internal static void ClearTempFileDirectory()
+        {
+            tempFileDirectory = null;
+        }
+
+        // For all native calls, directly check their return values to prevent bad actors from getting in between checking if a directory exists and returning it.
+        private static string CreateFolderUnderTemp()
+        {
+            string basePath = Path.Combine(Path.GetTempPath(), $"MSBuildTemp{Environment.UserName}");
+
+            if (NativeMethodsShared.IsLinux && NativeMethodsShared.mkdir(basePath, userRWX) != 0)
+            {
+                if (NativeMethodsShared.chmod(basePath, userRWX) == 0)
+                {
+                    // Current user owns this file; we can read and write to it. It is reasonable here to assume it was created properly by MSBuild and can be used
+                    // for temporary files.
+                    return basePath;
+                }
+                else
+                {
+                    // Another user created a folder pretending to be us! Find a folder we can actually use.
+                    int extraBits = 0;
+                    string pathToCheck = basePath + extraBits;
+                    while (NativeMethodsShared.mkdir(pathToCheck, userRWX) != 0 && NativeMethodsShared.chmod(pathToCheck, userRWX) != 0)
+                    {
+                        extraBits++;
+                        pathToCheck = basePath + extraBits;
+                    }
+
+                    return pathToCheck;
+                }
+            }
+            else
+            {
+                return basePath;
+            }
+        }
+
         /// <summary>
         /// Generates a unique directory name in the temporary folder.  
         /// Caller must delete when finished. 
@@ -21,7 +71,7 @@ internal static partial class FileUtilities
         /// <param name="createDirectory"></param>
         internal static string GetTemporaryDirectory(bool createDirectory = true)
         {
-            string temporaryDirectory = Path.Combine(Path.GetTempPath(), "Temporary" + Guid.NewGuid().ToString("N"));
+            string temporaryDirectory = Path.Combine(TempFileDirectory, "Temporary" + Guid.NewGuid().ToString("N"));
 
             if (createDirectory)
             {
@@ -40,7 +90,7 @@ internal static string GetTemporaryDirectory(bool createDirectory = true)
         /// </summary>
         internal static string GetTemporaryFileName(string extension)
         {
-            return GetTemporaryFile(null, extension, false);
+            return GetTemporaryFile(null, null, extension, false);
         }
 
         /// <summary>
@@ -63,7 +113,7 @@ internal static string GetTemporaryFile()
         /// </summary>
         internal static string GetTemporaryFile(string extension)
         {
-            return GetTemporaryFile(null, extension);
+            return GetTemporaryFile(null, null, extension);
         }
 
         /// <summary>
@@ -74,23 +124,33 @@ internal static string GetTemporaryFile(string extension)
         /// Caller must delete it when finished.
         /// May throw IOException.
         /// </summary>
-        internal static string GetTemporaryFile(string directory, string extension, bool createFile = true)
+        internal static string GetTemporaryFile(string directory, string fileName, string extension, bool createFile = true)
         {
             ErrorUtilities.VerifyThrowArgumentLengthIfNotNull(directory, nameof(directory));
-            ErrorUtilities.VerifyThrowArgumentLength(extension, nameof(extension));
-
-            if (extension[0] != '.')
-            {
-                extension = '.' + extension;
-            }
 
             try
             {
-                directory = directory ?? Path.GetTempPath();
+                directory ??= TempFileDirectory;
+
+                // If the extension needs a dot prepended, do so.
+                if (extension is null)
+                {
+                    extension = string.Empty;
+                }
+                else if (extension.Length > 0 && extension[0] != '.')
+                {
+                    extension = '.' + extension;
+                }
+
+                // If the fileName is null, use tmp{Guid}; otherwise use fileName.
+                if (string.IsNullOrEmpty(fileName))
+                {
+                    fileName = $"tmp{Guid.NewGuid():N}";
+                }
 
                 Directory.CreateDirectory(directory);
 
-                string file = Path.Combine(directory, $"tmp{Guid.NewGuid():N}{extension}");
+                string file = Path.Combine(directory, $"{fileName}{extension}");
 
                 ErrorUtilities.VerifyThrow(!FileSystems.Default.FileExists(file), "Guid should be unique");
 
@@ -132,7 +192,7 @@ public TempWorkingDirectory(string sourcePath, [CallerMemberName] string name =
             {
                 Path = name == null
                     ? GetTemporaryDirectory()
-                    : System.IO.Path.Combine(System.IO.Path.GetTempPath(), name);
+                    : System.IO.Path.Combine(TempFileDirectory, name);
 
                 if (FileSystems.Default.DirectoryExists(Path))
                 {
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index b9b730401aa..4d9cd9f1551 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -824,7 +824,7 @@ public void GenerateTempFileNameWithDirectoryAndExtension()
 
             try
             {
-                path = FileUtilities.GetTemporaryFile(directory, ".bat");
+                path = FileUtilities.GetTemporaryFile(directory, null, ".bat");
 
                 Assert.EndsWith(".bat", path);
                 Assert.True(File.Exists(path));
@@ -874,18 +874,7 @@ public void GenerateTempBatchFileWithBadExtension()
             }
            );
         }
-        /// <summary>
-        /// No extension is given
-        /// </summary>
-        [Fact]
-        public void GenerateTempBatchFileWithEmptyExtension()
-        {
-            Assert.Throws<ArgumentException>(() =>
-            {
-                FileUtilities.GetTemporaryFile(String.Empty);
-            }
-           );
-        }
+
         /// <summary>
         /// Directory is invalid
         /// </summary>
@@ -897,7 +886,7 @@ public void GenerateTempBatchFileWithBadDirectory()
         {
             Assert.Throws<IOException>(() =>
             {
-                FileUtilities.GetTemporaryFile("|", ".tmp");
+                FileUtilities.GetTemporaryFile("|", null, ".tmp");
             }
            );
         }
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index ff87775797e..c169e7647d7 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -544,14 +544,14 @@ public TransientTestFile(string extension, bool createFile, bool expectedAsOutpu
         {
             _createFile = createFile;
             _expectedAsOutput = expectedAsOutput;
-            Path = FileUtilities.GetTemporaryFile(null, extension, createFile);
+            Path = FileUtilities.GetTemporaryFile(null, null, extension, createFile);
         }
 
         public TransientTestFile(string rootPath, string extension, bool createFile, bool expectedAsOutput)
         {
             _createFile = createFile;
             _expectedAsOutput = expectedAsOutput;
-            Path = FileUtilities.GetTemporaryFile(rootPath, extension, createFile);
+            Path = FileUtilities.GetTemporaryFile(rootPath, null, extension, createFile);
         }
 
         public TransientTestFile(string rootPath, string fileName, string contents = null)
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 69c943c4551..2af05ab3a2e 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -535,8 +535,8 @@ public void DoCopyOverCopiedFile(bool skipUnchangedFiles)
         {
             using (var env = TestEnvironment.Create())
             {
-                var sourceFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, "src", false);
-                var destinationFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, "dst", false);
+                var sourceFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, null, "src", false);
+                var destinationFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, null, "dst", false);
 
                 File.WriteAllText(sourceFile, "This is a source temp file.");
 
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index 322979edfbb..180cd2ba4fa 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -809,17 +809,17 @@ private Assembly CompileInMemoryAssembly()
                 {
                     // Invokes compilation. 
 
-                    // Note: CompileAssemblyFromSource uses Path.GetTempPath() directory, but will not create it. In some cases 
+                    // Note: CompileAssemblyFromSource uses FileUtilities.TempFileDirectory directory, but will not create it. In some cases 
                     // this will throw inside CompileAssemblyFromSource. To work around this, ensure the temp directory exists. 
                     // See: https://github.com/Microsoft/msbuild/issues/328
-                    Directory.CreateDirectory(Path.GetTempPath());
+                    Directory.CreateDirectory(FileUtilities.TempFileDirectory);
 
                     CompilerResults compilerResults = provider.CompileAssemblyFromSource(compilerParameters, fullCode);
 
                     string outputPath = null;
                     if (compilerResults.Errors.Count > 0 || Environment.GetEnvironmentVariable("MSBUILDLOGCODETASKFACTORYOUTPUT") != null)
                     {
-                        string tempDirectory = Path.GetTempPath();
+                        string tempDirectory = FileUtilities.TempFileDirectory;
                         string fileName = Guid.NewGuid().ToString() + ".txt";
                         outputPath = Path.Combine(tempDirectory, fileName);
                         File.WriteAllText(outputPath, fullCode);
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index 4393c520267..f69887d1869 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -77,7 +77,7 @@ public class GetSDKReferenceFiles : TaskExtension
         /// <summary>
         /// Folder where the cache files are written to
         /// </summary>
-        private string _cacheFilePath = Path.GetTempPath();
+        private string _cacheFilePath = FileUtilities.TempFileDirectory;
 
         #region Properties
 
diff --git a/src/Tasks/ManifestUtil/XmlUtil.cs b/src/Tasks/ManifestUtil/XmlUtil.cs
index 9f9c37c532b..a49f50ca8b4 100644
--- a/src/Tasks/ManifestUtil/XmlUtil.cs
+++ b/src/Tasks/ManifestUtil/XmlUtil.cs
@@ -1,6 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Shared;
 using System;
 using System.Collections;
 using System.Diagnostics;
@@ -135,7 +136,7 @@ public override Object GetEntity(Uri uri, string role, Type t)
                 Stream s = null;
 
                 // If path is in temp then we immediately know we can skip the first two checks...
-                if (!uri.LocalPath.StartsWith(Path.GetTempPath(), StringComparison.Ordinal))
+                if (!uri.LocalPath.StartsWith(FileUtilities.TempFileDirectory, StringComparison.Ordinal))
                 {
                     // First look in assembly resources...
                     Assembly a = Assembly.GetExecutingAssembly();
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index f4649bab663..ecb03898830 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -634,7 +634,7 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
             // The source code cannot actually be compiled "in memory" so instead the source code is written to disk in
             // the temp folder as well as the assembly.  After compilation, the source code and assembly are deleted.
             string sourceCodePath = Path.GetTempFileName();
-            string assemblyPath = Path.Combine(Path.GetTempPath(), $"{Path.GetRandomFileName()}.dll");
+            string assemblyPath = Path.Combine(FileUtilities.TempFileDirectory, $"{Path.GetRandomFileName()}.dll");
 
             // Delete the code file unless compilation failed or the environment variable MSBUILDLOGCODETASKFACTORYOUTPUT
             // is set (which allows for debugging problems)
diff --git a/src/Tasks/TlbReference.cs b/src/Tasks/TlbReference.cs
index 5cf76a06636..a4d097bb2fd 100644
--- a/src/Tasks/TlbReference.cs
+++ b/src/Tasks/TlbReference.cs
@@ -66,7 +66,7 @@ internal TlbReference(TaskLoggingHelper taskLoggingHelper, bool silent, IComRefe
         /// <summary>
         /// directory we should write the wrapper to
         /// </summary>
-        protected override string OutputDirectory => (HasTemporaryWrapper) ? Path.GetTempPath() : base.OutputDirectory;
+        protected override string OutputDirectory => (HasTemporaryWrapper) ? FileUtilities.TempFileDirectory : base.OutputDirectory;
 
         private readonly bool _noClassMembers;
         private readonly string _targetProcessorArchitecture;
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index acaa9cb6dd3..d02f1e94135 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -102,7 +102,7 @@ public override bool Execute()
                     OutputFile = new TaskItem(Path.Combine(OutputDirectory.ItemSpec, OutputFile.ItemSpec));
                 }
 
-                OutputFile = OutputFile ?? new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, extension));
+                OutputFile = OutputFile ?? new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));
 
                 File.WriteAllText(OutputFile.ItemSpec, code); // Overwrites file if it already exists (and can be overwritten)
             }
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 6d20cad9feb..21896057cb0 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -61,7 +61,7 @@ public static class FileTracker
         #region Static Member Data
 
         // The default path to temp, used to create explicitly short and long paths
-        private static readonly string s_tempPath = Path.GetTempPath();
+        private static readonly string s_tempPath = FileUtilities.TempFileDirectory;
 
         // The short path to temp
         private static readonly string s_tempShortPath = FileUtilities.EnsureTrailingSlash(NativeMethodsShared.GetShortFilePath(s_tempPath).ToUpperInvariant());
