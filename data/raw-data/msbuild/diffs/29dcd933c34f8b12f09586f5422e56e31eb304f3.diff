diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 8d07f3b98fb..b5c738c8aaf 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Text;
 using Microsoft.Build.Evaluation;
@@ -30,11 +31,12 @@ namespace Microsoft.Build.UnitTests
      **************************************************************************/
     internal sealed class MockEngine : IBuildEngine5
     {
+        private readonly object _lockObj = new object();  // Protects _log, _output
         private readonly ITestOutputHelper _output;
         private readonly StringBuilder _log = new StringBuilder();
         private readonly ProjectCollection _projectCollection = new ProjectCollection();
         private readonly bool _logToConsole;
-        private readonly Dictionary<object, object> _objectCashe = new Dictionary<object, object>();
+        private readonly ConcurrentDictionary<object, object> _objectCache = new ConcurrentDictionary<object, object>();
 
         internal MockEngine() : this(false)
         {
@@ -75,55 +77,71 @@ public void LogErrorEvent(BuildErrorEventArgs eventArgs)
 
             message += eventArgs.Message;
 
-            if (_logToConsole)
+            lock (_lockObj)
             {
-                Console.WriteLine(message);
+                if (_logToConsole)
+                {
+                    Console.WriteLine(message);
+                }
+
+                _output?.WriteLine(message);
+                _log.AppendLine(message);
             }
-            _output?.WriteLine(message);
-            _log.AppendLine(message);
         }
 
         public void LogWarningEvent(BuildWarningEventArgs eventArgs)
         {
-            string message = string.Empty;
-
-            if (!string.IsNullOrEmpty(eventArgs.File))
+            lock (_lockObj)
             {
-                message += $"{eventArgs.File}({eventArgs.LineNumber},{eventArgs.ColumnNumber}): ";
-            }
+                string message = string.Empty;
+
+                if (!string.IsNullOrEmpty(eventArgs.File))
+                {
+                    message += $"{eventArgs.File}({eventArgs.LineNumber},{eventArgs.ColumnNumber}): ";
+                }
 
-            message += "WARNING " + eventArgs.Code + ": ";
-            ++Warnings;
+                message += "WARNING " + eventArgs.Code + ": ";
+                ++Warnings;
 
-            message += eventArgs.Message;
+                message += eventArgs.Message;
 
-            if (_logToConsole)
-            {
-                Console.WriteLine(message);
+                if (_logToConsole)
+                {
+                    Console.WriteLine(message);
+                }
+
+                _output?.WriteLine(message);
+                _log.AppendLine(message);
             }
-            _output?.WriteLine(message);
-            _log.AppendLine(message);
         }
 
         public void LogCustomEvent(CustomBuildEventArgs eventArgs)
         {
-            if (_logToConsole)
+            lock (_lockObj)
             {
-                Console.WriteLine(eventArgs.Message);
+                if (_logToConsole)
+                {
+                    Console.WriteLine(eventArgs.Message);
+                }
+
+                _output?.WriteLine(eventArgs.Message);
+                _log.AppendLine(eventArgs.Message);
             }
-            _output?.WriteLine(eventArgs.Message);
-            _log.AppendLine(eventArgs.Message);
         }
 
         public void LogMessageEvent(BuildMessageEventArgs eventArgs)
         {
-            if (_logToConsole)
+            lock (_lockObj)
             {
-                Console.WriteLine(eventArgs.Message);
+                if (_logToConsole)
+                {
+                    Console.WriteLine(eventArgs.Message);
+                }
+
+                _output?.WriteLine(eventArgs.Message);
+                _log.AppendLine(eventArgs.Message);
+                ++Messages;
             }
-            _output?.WriteLine(eventArgs.Message);
-            _log.AppendLine(eventArgs.Message);
-            ++Messages;
         }
 
         public void LogTelemetry(string eventName, IDictionary<string, string> properties)
@@ -134,12 +152,16 @@ public void LogTelemetry(string eventName, IDictionary<string, string> propertie
                 message += $"  Property '{key}' = '{properties[key]}'{Environment.NewLine}";
             }
 
-            if (_logToConsole)
+            lock (_lockObj)
             {
-                Console.WriteLine(message);
+                if (_logToConsole)
+                {
+                    Console.WriteLine(message);
+                }
+
+                _output?.WriteLine(message);
+                _log.AppendLine(message);
             }
-            _output?.WriteLine(message);
-            _log.AppendLine(message);
         }
 
         public bool ContinueOnError => false;
@@ -152,7 +174,13 @@ public void LogTelemetry(string eventName, IDictionary<string, string> propertie
 
         internal string Log
         {
-            get => _log.ToString();
+            get
+            {
+                lock (_lockObj)
+                {
+                    return _log.ToString();
+                }
+            }
             set
             {
                 if (!string.IsNullOrEmpty(value))
@@ -160,7 +188,10 @@ internal string Log
                     throw new ArgumentException("Expected log setter to be used only to reset the log to empty.");
                 }
 
-                _log.Clear();
+                lock (_lockObj)
+                {
+                    _log.Clear();
+                }
             }
         }
 
@@ -270,7 +301,7 @@ bool returnTargetOutputs
                     }
                 }
 
-                ProjectInstance instance = _projectCollection.LoadProject((string)projectFileNames[i], finalGlobalProperties, null).CreateProjectInstance();
+                ProjectInstance instance = _projectCollection.LoadProject(projectFileNames[i], finalGlobalProperties, null).CreateProjectInstance();
 
                 bool success = instance.Build(targetNames, loggers, out IDictionary<string, TargetResult> targetOutputs);
 
@@ -370,7 +401,11 @@ internal void AssertLogContains(string contains)
             // If we do not contain this string than pass it to
             // MockLogger. Since MockLogger is also registered as
             // a logger it may have this string.
-            var logText = _log.ToString();
+            string logText;
+            lock (_lockObj)
+            {
+                logText = _log.ToString();
+            }
             if (logText.IndexOf(contains, StringComparison.OrdinalIgnoreCase) == -1)
             {
                 if (_output == null)
@@ -393,8 +428,12 @@ internal void AssertLogContains(string contains)
         /// </summary>
         internal void AssertLogDoesntContain(string contains)
         {
-            var logText = _log.ToString();
-            
+            string logText;
+            lock (_lockObj)
+            {
+                logText = _log.ToString();
+            }
+
             if (_output == null)
             {
                 Console.WriteLine(logText);
@@ -419,19 +458,18 @@ internal void AssertLogDoesntContain(string contains)
 
         public object GetRegisteredTaskObject(object key, RegisteredTaskObjectLifetime lifetime)
         {
-            _objectCashe.TryGetValue(key, out object obj);
+            _objectCache.TryGetValue(key, out object obj);
             return obj;
         }
 
         public void RegisterTaskObject(object key, object obj, RegisteredTaskObjectLifetime lifetime, bool allowEarlyCollection)
         {
-            _objectCashe[key] = obj;
+            _objectCache[key] = obj;
         }
 
         public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime lifetime)
         {
-            var obj = _objectCashe[key];
-            _objectCashe.Remove(key);
+            _objectCache.TryRemove(key, out object obj);
             return obj;
         }
     }
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index 0fac1343344..165bdb0d167 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -2,14 +2,12 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
 using System.Reflection;
 using System.Resources;
 using System.Text;
-using System.Xml;
 
 using Microsoft.Build.Framework;
 
@@ -17,7 +15,6 @@
 using Xunit;
 using Xunit.Abstractions;
 
-
 namespace Microsoft.Build.UnitTests
 {
     /*
@@ -25,14 +22,15 @@ namespace Microsoft.Build.UnitTests
      *
      * Mock logger class. Keeps track of errors and warnings and also builds
      * up a raw string (fullLog) that contains all messages, warnings, errors.
-     *
+     * Thread-safe.
      */
     internal sealed class MockLogger : ILogger
     {
         #region Properties
 
+        private readonly object _lockObj = new object();  // Protects _fullLog, _testOutputHelper, lists, counts
         private StringBuilder _fullLog = new StringBuilder();
-        private ITestOutputHelper _testOutputHelper;
+        private readonly ITestOutputHelper _testOutputHelper;
 
         /// <summary>
         /// Should the build finished event be logged in the log file. This is to work around the fact we have different
@@ -46,7 +44,7 @@ internal sealed class MockLogger : ILogger
          * The count of all errors seen so far.
          *
          */
-        internal int ErrorCount { get; private set; } = 0;
+        internal int ErrorCount { get; private set; }
 
         /*
          * Method:  WarningCount
@@ -54,7 +52,7 @@ internal sealed class MockLogger : ILogger
          * The count of all warnings seen so far.
          *
          */
-        internal int WarningCount { get; private set; } = 0;
+        internal int WarningCount { get; private set; }
 
         /// <summary>
         /// Return the list of logged errors
@@ -140,8 +138,15 @@ internal bool AllowTaskCrashes
          */
         internal string FullLog
         {
-            get { return _fullLog.ToString(); }
+            get
+            {
+                lock (_lockObj)
+                {
+                    return _fullLog.ToString();
+                }
+            }
         }
+
         #endregion
 
         #region Minimal ILogger implementation
@@ -193,7 +198,10 @@ public void Initialize(IEventSource eventSource)
         /// </summary>
         public void ClearLog()
         {
-            _fullLog = new StringBuilder();
+            lock (_lockObj)
+            {
+                _fullLog = new StringBuilder();
+            }
         }
 
         /*
@@ -228,129 +236,132 @@ public MockLogger(ITestOutputHelper testOutputHelper)
          */
         internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
         {
-            AllBuildEvents.Add(eventArgs);
-
-            foreach (var handler in AdditionalHandlers)
+            lock (_lockObj)
             {
-                handler(sender, eventArgs);
-            }
-
-            if (eventArgs is BuildWarningEventArgs)
-            {
-                BuildWarningEventArgs w = (BuildWarningEventArgs) eventArgs;
+                AllBuildEvents.Add(eventArgs);
 
-                // hack: disregard the MTA warning.
-                // need the second condition to pass on ploc builds
-                if (w.Code != "MSB4056" && !w.Message.Contains("MSB4056"))
+                foreach (var handler in AdditionalHandlers)
                 {
-                    string logMessage = string.Format("{0}({1},{2}): {3} warning {4}: {5}",
-                        w.File,
-                        w.LineNumber,
-                        w.ColumnNumber,
-                        w.Subcategory,
-                        w.Code,
-                        w.Message);
+                    handler(sender, eventArgs);
+                }
 
+                if (eventArgs is BuildWarningEventArgs w)
+                {
+                    // hack: disregard the MTA warning.
+                    // need the second condition to pass on ploc builds
+                    if (w.Code != "MSB4056" && !w.Message.Contains("MSB4056"))
+                    {
+                        string logMessage = string.Format(
+                            "{0}({1},{2}): {3} warning {4}: {5}",
+                            w.File,
+                            w.LineNumber,
+                            w.ColumnNumber,
+                            w.Subcategory,
+                            w.Code,
+                            w.Message);
+
+                        _fullLog.AppendLine(logMessage);
+                        _testOutputHelper?.WriteLine(logMessage);
+
+                        ++WarningCount;
+                        Warnings.Add(w);
+                    }
+                }
+                else if (eventArgs is BuildErrorEventArgs)
+                {
+                    BuildErrorEventArgs e = (BuildErrorEventArgs) eventArgs;
+
+                    string logMessage = string.Format(
+                        "{0}({1},{2}): {3} error {4}: {5}",
+                        e.File,
+                        e.LineNumber,
+                        e.ColumnNumber,
+                        e.Subcategory,
+                        e.Code,
+                        e.Message);
                     _fullLog.AppendLine(logMessage);
                     _testOutputHelper?.WriteLine(logMessage);
 
-                    ++WarningCount;
-                    Warnings.Add(w);
+                    ++ErrorCount;
+                    Errors.Add(e);
                 }
-            }
-            else if (eventArgs is BuildErrorEventArgs)
-            {
-                BuildErrorEventArgs e = (BuildErrorEventArgs) eventArgs;
-
-                string logMessage = string.Format("{0}({1},{2}): {3} error {4}: {5}",
-                    e.File,
-                    e.LineNumber,
-                    e.ColumnNumber,
-                    e.Subcategory,
-                    e.Code,
-                    e.Message);
-                _fullLog.AppendLine(logMessage);
-                _testOutputHelper?.WriteLine(logMessage);
-
-                ++ErrorCount;
-                Errors.Add(e);
-            }
-            else
-            {
-                // Log the message unless we are a build finished event and logBuildFinished is set to false.
-                bool logMessage = !(eventArgs is BuildFinishedEventArgs) ||
-                                  (eventArgs is BuildFinishedEventArgs && LogBuildFinished);
-                if (logMessage)
+                else
                 {
-                    _fullLog.AppendLine(eventArgs.Message);
-                    _testOutputHelper?.WriteLine(eventArgs.Message);
+                    // Log the message unless we are a build finished event and logBuildFinished is set to false.
+                    bool logMessage = !(eventArgs is BuildFinishedEventArgs) ||
+                                      (eventArgs is BuildFinishedEventArgs && LogBuildFinished);
+                    if (logMessage)
+                    {
+                        _fullLog.AppendLine(eventArgs.Message);
+                        _testOutputHelper?.WriteLine(eventArgs.Message);
+                    }
                 }
-            }
 
-            if (eventArgs is ExternalProjectStartedEventArgs)
-            {
-                this.ExternalProjectStartedEvents.Add((ExternalProjectStartedEventArgs)eventArgs);
-            }
-            else if (eventArgs is ExternalProjectFinishedEventArgs)
-            {
-                this.ExternalProjectFinishedEvents.Add((ExternalProjectFinishedEventArgs)eventArgs);
-            }
-
-            if (eventArgs is ProjectStartedEventArgs)
-            {
-                this.ProjectStartedEvents.Add((ProjectStartedEventArgs)eventArgs);
-            }
-            else if (eventArgs is ProjectFinishedEventArgs)
-            {
-                this.ProjectFinishedEvents.Add((ProjectFinishedEventArgs)eventArgs);
-            }
-            else if (eventArgs is TargetStartedEventArgs)
-            {
-                this.TargetStartedEvents.Add((TargetStartedEventArgs)eventArgs);
-            }
-            else if (eventArgs is TargetFinishedEventArgs)
-            {
-                this.TargetFinishedEvents.Add((TargetFinishedEventArgs)eventArgs);
-            }
-            else if (eventArgs is TaskStartedEventArgs)
-            {
-                this.TaskStartedEvents.Add((TaskStartedEventArgs)eventArgs);
-            }
-            else if (eventArgs is TaskFinishedEventArgs)
-            {
-                this.TaskFinishedEvents.Add((TaskFinishedEventArgs)eventArgs);
-            }
-            else if (eventArgs is BuildMessageEventArgs)
-            {
-                this.BuildMessageEvents.Add((BuildMessageEventArgs)eventArgs);
-            }
-            else if (eventArgs is BuildStartedEventArgs)
-            {
-                this.BuildStartedEvents.Add((BuildStartedEventArgs)eventArgs);
-            }
-            else if (eventArgs is BuildFinishedEventArgs)
-            {
-                this.BuildFinishedEvents.Add((BuildFinishedEventArgs)eventArgs);
-
-                if (!AllowTaskCrashes)
+                if (eventArgs is ExternalProjectStartedEventArgs)
                 {
-                    // We should not have any task crashes. Sometimes a test will validate that their expected error
-                    // code appeared, but not realize it then crashed.
-                    AssertLogDoesntContain("MSB4018");
+                    this.ExternalProjectStartedEvents.Add((ExternalProjectStartedEventArgs) eventArgs);
+                }
+                else if (eventArgs is ExternalProjectFinishedEventArgs)
+                {
+                    this.ExternalProjectFinishedEvents.Add((ExternalProjectFinishedEventArgs) eventArgs);
                 }
 
-                // We should not have any Engine crashes.
-                AssertLogDoesntContain("MSB0001");
-
-                // Console.Write in the context of a unit test is very expensive.  A hundred
-                // calls to Console.Write can easily take two seconds on a fast machine.  Therefore, only
-                // do the Console.Write once at the end of the build.
-                Console.Write(FullLog);
+                if (eventArgs is ProjectStartedEventArgs)
+                {
+                    this.ProjectStartedEvents.Add((ProjectStartedEventArgs) eventArgs);
+                }
+                else if (eventArgs is ProjectFinishedEventArgs)
+                {
+                    this.ProjectFinishedEvents.Add((ProjectFinishedEventArgs) eventArgs);
+                }
+                else if (eventArgs is TargetStartedEventArgs)
+                {
+                    this.TargetStartedEvents.Add((TargetStartedEventArgs) eventArgs);
+                }
+                else if (eventArgs is TargetFinishedEventArgs)
+                {
+                    this.TargetFinishedEvents.Add((TargetFinishedEventArgs) eventArgs);
+                }
+                else if (eventArgs is TaskStartedEventArgs)
+                {
+                    this.TaskStartedEvents.Add((TaskStartedEventArgs) eventArgs);
+                }
+                else if (eventArgs is TaskFinishedEventArgs)
+                {
+                    this.TaskFinishedEvents.Add((TaskFinishedEventArgs) eventArgs);
+                }
+                else if (eventArgs is BuildMessageEventArgs)
+                {
+                    this.BuildMessageEvents.Add((BuildMessageEventArgs) eventArgs);
+                }
+                else if (eventArgs is BuildStartedEventArgs)
+                {
+                    this.BuildStartedEvents.Add((BuildStartedEventArgs) eventArgs);
+                }
+                else if (eventArgs is BuildFinishedEventArgs)
+                {
+                    this.BuildFinishedEvents.Add((BuildFinishedEventArgs) eventArgs);
+
+                    if (!AllowTaskCrashes)
+                    {
+                        // We should not have any task crashes. Sometimes a test will validate that their expected error
+                        // code appeared, but not realize it then crashed.
+                        AssertLogDoesntContain("MSB4018");
+                    }
+
+                    // We should not have any Engine crashes.
+                    AssertLogDoesntContain("MSB0001");
+
+                    // Console.Write in the context of a unit test is very expensive.  A hundred
+                    // calls to Console.Write can easily take two seconds on a fast machine.  Therefore, only
+                    // do the Console.Write once at the end of the build.
+                    Console.Write(FullLog);
+                }
             }
         }
 
         // Lazy-init property returning the MSBuild engine resource manager
-        static private ResourceManager EngineResourceManager
+        private static ResourceManager EngineResourceManager
         {
             get
             {
@@ -363,10 +374,10 @@ static private ResourceManager EngineResourceManager
             }
         }
 
-        static private ResourceManager s_engineResourceManager = null;
+        private static ResourceManager s_engineResourceManager;
 
         // Gets the resource string given the resource ID
-        static public string GetString(string stringId)
+        public static string GetString(string stringId)
         {
             return EngineResourceManager.GetString(stringId, CultureInfo.CurrentUICulture);
         }
@@ -387,46 +398,53 @@ internal void AssertLogContains(params string[] contains)
         /// <param name="contains"></param>
         internal void AssertLogContains(bool isCaseSensitive, params string[] contains)
         {
-            StringReader reader = new StringReader(FullLog);
-            int index = 0;
-
-            string currentLine = reader.ReadLine();
-            if (!isCaseSensitive)
+            lock (_lockObj)
             {
-                currentLine = currentLine.ToUpper();
-            }
+                StringReader reader = new StringReader(FullLog);
+                int index = 0;
 
-            while (currentLine != null)
-            {
-                string comparer = contains[index];
+                string currentLine = reader.ReadLine();
                 if (!isCaseSensitive)
                 {
-                    comparer = comparer.ToUpper();
+                    currentLine = currentLine.ToUpper();
                 }
 
-                if (currentLine.Contains(comparer))
+                while (currentLine != null)
                 {
-                    index++;
-                    if (index == contains.Length) break;
+                    string comparer = contains[index];
+                    if (!isCaseSensitive)
+                    {
+                        comparer = comparer.ToUpper();
+                    }
+
+                    if (currentLine.Contains(comparer))
+                    {
+                        index++;
+                        if (index == contains.Length) break;
+                    }
+
+                    currentLine = reader.ReadLine();
+                    if (!isCaseSensitive && currentLine != null)
+                    {
+                        currentLine = currentLine.ToUpper();
+                    }
                 }
 
-                currentLine = reader.ReadLine();
-                if (!isCaseSensitive && currentLine != null)
-                {
-                    currentLine = currentLine.ToUpper();
-                }
-            }
-            if (index != contains.Length)
-            {
-                if (_testOutputHelper != null)
-                {
-                    _testOutputHelper.WriteLine(FullLog);
-                }
-                else
+                if (index != contains.Length)
                 {
-                    Console.WriteLine(FullLog);
+                    if (_testOutputHelper != null)
+                    {
+                        _testOutputHelper.WriteLine(FullLog);
+                    }
+                    else
+                    {
+                        Console.WriteLine(FullLog);
+                    }
+
+                    Assert.True(
+                        false,
+                        $"Log was expected to contain '{contains[index]}', but did not. Full log:\n=======\n{FullLog}\n=======");
                 }
-                Assert.True(false, String.Format(CultureInfo.CurrentCulture, "Log was expected to contain '{0}', but did not.\n=======\n{1}\n=======", contains[index], FullLog));
             }
         }
 
@@ -436,17 +454,21 @@ internal void AssertLogContains(bool isCaseSensitive, params string[] contains)
         /// <param name="contains"></param>
         internal void AssertLogDoesntContain(string contains)
         {
-            if (FullLog.Contains(contains))
+            lock (_lockObj)
             {
-                if (_testOutputHelper != null)
-                {
-                    _testOutputHelper.WriteLine(FullLog);
-                }
-                else
+                if (FullLog.Contains(contains))
                 {
-                    Console.WriteLine(FullLog);
+                    if (_testOutputHelper != null)
+                    {
+                        _testOutputHelper.WriteLine(FullLog);
+                    }
+                    else
+                    {
+                        Console.WriteLine(FullLog);
+                    }
+
+                    Assert.True(false, $"Log was not expected to contain '{contains}', but did.");
                 }
-                Assert.True(false, String.Format("Log was not expected to contain '{0}', but did.", contains));
             }
         }
 
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 53d96f3d8e8..6a072e2050f 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -2118,10 +2118,12 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
             int errorCode = Marshal.GetHRForLastWin32Error();
             Marshal.GetExceptionForHR(errorCode);
 
-            string sourceFile = FileUtilities.GetTemporaryFile();
+            string sourceFile1 = FileUtilities.GetTemporaryFile();
+            string sourceFile2 = FileUtilities.GetTemporaryFile();
             const string temp = @"\\localhost\c$\temp";
             string destFolder = Path.Combine(temp, "2A333ED756AF4dc392E728D0F864A398");
-            string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));
+            string destFile1 = Path.Combine(destFolder, Path.GetFileName(sourceFile1));
+            string destFile2 = Path.Combine(destFolder, Path.GetFileName(sourceFile2));
 
             try
             {
@@ -2132,16 +2134,22 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
             }
             catch (Exception)
             {
-                Console.WriteLine("CopyToDestinationFolderWithHardLinkFallbackNetwork test could not access the network.");
+                Console.WriteLine("CopyToDestinationFolderWithHardLinkFallbackNetwork test could not access the network as expected.");
                 // Something caused us to not be able to access our "network" share, don't fail.
                 return;
             }
 
             try
             {
-                File.WriteAllText(sourceFile, "This is a source temp file."); // HIGHCHAR: Test writes in UTF8 without preamble.
+                // Create 2 files to ensure we test with parallel copy.
+                File.WriteAllText(sourceFile1, "This is source temp file 1."); // HIGHCHAR: Test writes in UTF8 without preamble.
+                File.WriteAllText(sourceFile2, "This is source temp file 2.");
 
-                ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };
+                ITaskItem[] sourceFiles =
+                {
+                    new TaskItem(sourceFile1),
+                    new TaskItem(sourceFile2)
+                };
 
                 var me = new MockEngine(true);
                 var t = new Copy
@@ -2157,40 +2165,47 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
                 bool success = t.Execute();
 
                 Assert.True(success); // "success"
-                Assert.True(File.Exists(destFile)); // "destination exists"
+                Assert.True(File.Exists(destFile1)); // "destination exists"
+                Assert.True(File.Exists(destFile2)); // "destination exists"
                 MockEngine.GetStringDelegate resourceDelegate = AssemblyResources.GetString;
 
-                me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.HardLinkComment", sourceFile, destFile);
+                me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.HardLinkComment", sourceFile1, destFile1);
 
                 // Can't do this below, because the real message doesn't end with String.Empty, it ends with a CLR exception string, and so matching breaks in PLOC.
-                // Instead look for the HRESULT that CLR unfortunately puts inside its exception string. Something like this
-                // The system cannot move the file to a different disk drive. (Exception from HRESULT: 0x80070011)
+                // Instead look for the HRESULT that CLR unfortunately puts inside its exception string. Something like this:
+                //   The system cannot move the file to a different disk drive. (Exception from HRESULT: 0x80070011)
                 // me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.RetryingAsFileCopy", sourceFile, destFile, String.Empty);
                 me.AssertLogContains("0x80070011");
 
-                string destinationFileContents = File.ReadAllText(destFile);
-                Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
+                string destinationFileContents = File.ReadAllText(destFile1);
+                Assert.Equal("This is source temp file 1.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
+                destinationFileContents = File.ReadAllText(destFile2);
+                Assert.Equal("This is source temp file 2.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
 
-                Assert.Equal(1, t.DestinationFiles.Length);
-                Assert.Equal(1, t.CopiedFiles.Length);
-                Assert.Equal(destFile, t.DestinationFiles[0].ItemSpec);
-                Assert.Equal(destFile, t.CopiedFiles[0].ItemSpec);
+                Assert.Equal(2, t.DestinationFiles.Length);
+                Assert.Equal(2, t.CopiedFiles.Length);
+                Assert.Equal(destFile1, t.DestinationFiles[0].ItemSpec);
+                Assert.Equal(destFile2, t.DestinationFiles[1].ItemSpec);
+                Assert.Equal(destFile1, t.CopiedFiles[0].ItemSpec);
+                Assert.Equal(destFile2, t.CopiedFiles[1].ItemSpec);
 
-                // Now we will write new content to the source file
+                // Now we will write new content to a source file
                 // we'll then check that the destination file automatically
                 // has the same content (i.e. it's been hard linked)
-                File.WriteAllText(sourceFile, "This is another source temp file.");  // HIGHCHAR: Test writes in UTF8 without preamble.
+                File.WriteAllText(sourceFile1, "This is another source temp file.");  // HIGHCHAR: Test writes in UTF8 without preamble.
 
                 // Read the destination file (it should have the same modified content as the source)
-                destinationFileContents = File.ReadAllText(destFile);
-                Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination copied file to contain the contents of original source file only."
+                destinationFileContents = File.ReadAllText(destFile1);
+                Assert.Equal("This is source temp file 1.", destinationFileContents); //"Expected the destination copied file to contain the contents of original source file only."
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
             }
             finally
             {
-                File.Delete(sourceFile);
-                File.Delete(destFile);
+                File.Delete(sourceFile1);
+                File.Delete(sourceFile2);
+                File.Delete(destFile1);
+                File.Delete(destFile2);
                 FileUtilities.DeleteWithoutTrailingBackslash(destFolder, true);
             }
         }
diff --git a/src/Utilities.UnitTests/Logger_Tests.cs b/src/Utilities.UnitTests/Logger_Tests.cs
index 183ef1f3f99..b08ff81e885 100644
--- a/src/Utilities.UnitTests/Logger_Tests.cs
+++ b/src/Utilities.UnitTests/Logger_Tests.cs
@@ -2,13 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.IO;
-using System.Resources;
-using System.Reflection;
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 
diff --git a/src/Utilities/Logger.cs b/src/Utilities/Logger.cs
index b9b603ff145..30082c53432 100644
--- a/src/Utilities/Logger.cs
+++ b/src/Utilities/Logger.cs
@@ -1,9 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-using System.Runtime.InteropServices;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
