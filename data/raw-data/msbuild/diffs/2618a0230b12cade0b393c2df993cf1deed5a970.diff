diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 99474115048..98239d12bcf 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -547,6 +547,15 @@ public void RoundtripResponseFileUsedEventArgs()
                 e => e.ResponseFilePath);
         }
 
+        [Fact]
+        public void RoundtripResponseGeneratedFileUsedEventArgs()
+        {
+            var args = new ResponseGeneratedFileUsedEventArgs("MSBuild.rsp", "");
+            Roundtrip(args,
+                e => e.ResponseFilePath,
+                e => e.ResponseFileContent);
+        }
+
         [Fact]
         public void RoundtripCriticalBuildMessageEventArgs()
         {
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 22921695dea..f2cc8c05e6e 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -39,6 +39,7 @@ public enum BinaryLogRecordKind
         String,
         TaskParameter,
         ResponseFileUsed,
+        ResponseGeneratedFileUsed,
         AssemblyLoad,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index ece72396fac..ba46f727431 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -67,6 +67,8 @@ public sealed class BinaryLogger : ILogger
         //   - Making ProjectStartedEventArgs, ProjectEvaluationFinishedEventArgs, AssemblyLoadBuildEventArgs equal
         //     between de/serialization roundtrips.
         //   - Adding serialized events lengths - to support forward compatible reading
+        // version 19:
+        //   - new record kind: ResponseGeneratedFileUsedEventArgs
 
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
@@ -364,11 +366,9 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
             }
-            else if (e is ExtendedBuildMessageEventArgs extendedArgs && extendedArgs.ExtendedType == "RESPONSEGENERATEDFILE" &&
-                extendedArgs.ExtendedMetadata.TryGetValue("FILEPATH", out string filepath) &&
-                extendedArgs.ExtendedMetadata.TryGetValue("CONTENT", out string content))
+            else if (e is ResponseGeneratedFileUsedEventArgs responseGeneratedFileUsedEventArgs)
             {
-                projectImportsCollector.AddFileFromMemory(filepath, content);
+                projectImportsCollector.AddFileFromMemory(responseGeneratedFileUsedEventArgs.ResponseFilePath, responseGeneratedFileUsedEventArgs.ResponseFileContent);
             }
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 2c49c17c8a7..2125e80e114 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -315,6 +315,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.TargetSkipped => ReadTargetSkippedEventArgs(),
                 BinaryLogRecordKind.EnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
                 BinaryLogRecordKind.ResponseFileUsed => ReadResponseFileUsedEventArgs(),
+                BinaryLogRecordKind.ResponseGeneratedFileUsed => ReadResponseGeneratedFileUsedEventArgs(),
                 BinaryLogRecordKind.PropertyReassignment => ReadPropertyReassignmentEventArgs(),
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
                 BinaryLogRecordKind.PropertyInitialValueSet => ReadPropertyInitialValueSetEventArgs(),
@@ -1112,6 +1113,23 @@ private BuildEventArgs ReadResponseFileUsedEventArgs()
             return e;
         }
 
+        private BuildEventArgs ReadResponseGeneratedFileUsedEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields();
+
+            string? responseFilePath = ReadDeduplicatedString();
+            string? responseFileContent = ReadDeduplicatedString();
+
+            if (responseFilePath != null && responseFileContent != null)
+            {
+                var e = new ResponseGeneratedFileUsedEventArgs(responseFilePath, responseFileContent);
+                SetCommonFields(e, fields);
+                return e;
+            }
+
+            return new ResponseGeneratedFileUsedEventArgs();
+        }
+
         private BuildEventArgs ReadPropertyReassignmentEventArgs()
         {
             var fields = ReadBuildEventArgsFields(readImportance: true);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 8a8311e1fd6..34896e6039f 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -458,6 +458,7 @@ private BinaryLogRecordKind Write(BuildMessageEventArgs e)
             switch (e)
             {
                 case ResponseFileUsedEventArgs responseFileUsed: return Write(responseFileUsed);
+                case ResponseGeneratedFileUsedEventArgs responseGeneratedFileUsed: return Write(responseGeneratedFileUsed);
                 case TaskParameterEventArgs taskParameter: return Write(taskParameter);
                 case ProjectImportedEventArgs projectImported: return Write(projectImported);
                 case TargetSkippedEventArgs targetSkipped: return Write(targetSkipped);
@@ -554,6 +555,13 @@ private BinaryLogRecordKind Write(ResponseFileUsedEventArgs e)
             WriteDeduplicatedString(e.ResponseFilePath);
             return BinaryLogRecordKind.ResponseFileUsed;
         }
+        private BinaryLogRecordKind Write(ResponseGeneratedFileUsedEventArgs e)
+        {
+            WriteMessageFields(e);
+            WriteDeduplicatedString(e.ResponseFilePath);
+            WriteDeduplicatedString(e.ResponseFileContent);
+            return BinaryLogRecordKind.ResponseGeneratedFileUsed;
+        }
         private BinaryLogRecordKind Write(TaskCommandLineEventArgs e)
         {
             WriteMessageFields(e, writeMessage: false, writeImportance: true);
diff --git a/src/Framework/ResponseGeneratedFileUsedEventArgs.cs b/src/Framework/ResponseGeneratedFileUsedEventArgs.cs
new file mode 100644
index 00000000000..c5758fb818f
--- /dev/null
+++ b/src/Framework/ResponseGeneratedFileUsedEventArgs.cs
@@ -0,0 +1,33 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// Arguments for the response file used event
+    /// </summary>
+    [Serializable]
+    public class ResponseGeneratedFileUsedEventArgs : BuildMessageEventArgs
+    {
+        public ResponseGeneratedFileUsedEventArgs()
+        {
+        }
+
+        /// <summary>
+        /// Initializes a new instance of the <see cref="ResponseGeneratedFileUsedEventArgs"/> class.
+        /// </summary>
+        /// 
+        public ResponseGeneratedFileUsedEventArgs(string filePath, string content)
+            : base("", null, null, MessageImportance.Low)
+        {
+            ResponseFilePath = filePath;
+            ResponseFileContent = content;
+        }
+
+        public string? ResponseFilePath { set; get; }
+
+        public string? ResponseFileContent { set; get; }
+    }
+}
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 26ad0cf2151..fced677c736 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -67,6 +67,7 @@
     </Compile>
     <Compile Include="..\Framework\AssemblyUtilities.cs" />
     <Compile Include="..\Framework\ResponseFileUsedEventArgs.cs" />
+    <Compile Include="..\Framework\ResponseGeneratedFileUsedEventArgs.cs" />
     <Compile Include="..\Shared\BufferedReadStream.cs" />
     <Compile Include="..\Shared\CollectionHelpers.cs" />
     <Compile Include="..\Shared\CopyOnWriteDictionary.cs">
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 92cc46106f0..f0888a8c935 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -205,6 +205,11 @@ internal enum LoggingEventType : int
         /// Event is <see cref="ExtendedCriticalBuildMessageEventArgs"/>
         /// </summary>
         ExtendedCriticalBuildMessageEvent = 33,
+
+        /// <summary>
+        /// Event is a ResponseGeneratedFileUsedEventArgs
+        /// </summary>
+        ResponseGeneratedFileUsedEvent = 34,
     }
     #endregion
 
@@ -590,6 +595,8 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
                 LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
+                LoggingEventType.ResponseGeneratedFileUsedEvent => new ResponseGeneratedFileUsedEventArgs(),
+
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
                 LoggingEventType.TaskParameterEvent => new TaskParameterEventArgs(0, null, null, true, default),
@@ -762,6 +769,10 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.ResponseFileUsedEvent;
             }
+            else if (eventType == typeof(ResponseGeneratedFileUsedEventArgs))
+            {
+                return LoggingEventType.ResponseGeneratedFileUsedEvent;
+            }
             else
             {
                 return LoggingEventType.CustomEvent;
@@ -804,6 +815,9 @@ private void WriteEventToStream(BuildEventArgs buildEvent, LoggingEventType even
                 case LoggingEventType.ResponseFileUsedEvent:
                     WriteResponseFileUsedEventToStream((ResponseFileUsedEventArgs)buildEvent, translator);
                     break;
+                case LoggingEventType.ResponseGeneratedFileUsedEvent:
+                    WriteResponseGeneratedFileUsedEventToStream((ResponseGeneratedFileUsedEventArgs)buildEvent, translator);
+                    break;
                 case LoggingEventType.TaskCommandLineEvent:
                     WriteTaskCommandLineEventToStream((TaskCommandLineEventArgs)buildEvent, translator);
                     break;
@@ -938,6 +952,23 @@ private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs respon
 #endif
         }
 
+        /// <summary>
+        /// Write a response generated file used log message into the translator
+        /// </summary>
+        private void WriteResponseGeneratedFileUsedEventToStream(ResponseGeneratedFileUsedEventArgs responseGeneratedFileUsedEventArgs, ITranslator translator)
+        {
+            string filePath = responseGeneratedFileUsedEventArgs.ResponseFilePath;
+            string content = responseGeneratedFileUsedEventArgs.ResponseFileContent;
+
+            translator.Translate(ref filePath);
+            translator.Translate(ref content);
+
+#if !CLR2COMPATIBILITY
+            DateTime timestamp = responseGeneratedFileUsedEventArgs.RawTimestamp;
+            translator.Translate(ref timestamp);
+#endif
+        }
+
 #if !TASKHOST && !MSBUILDENTRYPOINTEXE
         private void WriteProjectEvaluationStartedEventToStream(ProjectEvaluationStartedEventArgs args, ITranslator translator)
         {
@@ -1174,6 +1205,7 @@ private BuildEventArgs ReadEventFromStream(LoggingEventType eventType, ITranslat
                 LoggingEventType.BuildErrorEvent => ReadTaskBuildErrorEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildMessageEvent => ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.ResponseFileUsedEvent => ReadResponseFileUsedEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.ResponseGeneratedFileUsedEvent => ReadResponseGeneratedFileUsedEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildWarningEvent => ReadBuildWarningEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.EnvironmentVariableReadEvent => ReadEnvironmentVariableReadEventFromStream(translator, message, helpKeyword, senderName),
                 _ => null,
@@ -1335,6 +1367,23 @@ private ResponseFileUsedEventArgs ReadResponseFileUsedEventFromStream(ITranslato
             return buildEvent;
         }
 
+        private ResponseGeneratedFileUsedEventArgs ReadResponseGeneratedFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
+        {
+            string responseFilePath = String.Empty;
+            string responseFileContent = String.Empty;
+            translator.Translate(ref responseFilePath);
+            translator.Translate(ref responseFileContent);
+            ResponseGeneratedFileUsedEventArgs buildEvent = new ResponseGeneratedFileUsedEventArgs(responseFilePath, responseFileContent);
+
+#if !CLR2COMPATIBILITY
+            DateTime timestamp = default;
+            translator.Translate(ref timestamp);
+            buildEvent.RawTimestamp = timestamp;
+#endif
+
+            return buildEvent;
+        }
+
 #if !TASKHOST && !MSBUILDENTRYPOINTEXE
         private ProjectEvaluationStartedEventArgs ReadProjectEvaluationStartedEventFromStream(ITranslator translator)
         {
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 4b379809ff6..a7c949d129a 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -513,14 +513,7 @@ public void LogIncludeGeneratedFile(string filePath, string content)
             ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));
             ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));
 
-            var e = new ExtendedBuildMessageEventArgs("RESPONSEGENERATEDFILE", "", null, null, MessageImportance.Low)
-            {
-                ExtendedMetadata = new Dictionary<string, string>
-                {
-                    { "FILEPATH", filePath },
-                    { "CONTENT", content },
-                }
-            };
+            var e = new ResponseGeneratedFileUsedEventArgs(filePath, content);
 
             BuildEngine.LogMessageEvent(e);
         }
