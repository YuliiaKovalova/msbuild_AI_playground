diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 3c513ab2627..27abb8b6c9c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -252,7 +252,7 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
                 ImmutableList<string> metadataList = matchOnMetadata.ToImmutableList();
                 MetadataSet<ProjectPropertyInstance, ProjectItemInstance> metadataSet = new(matchingOptions, metadataList,
                     new ItemSpec<ProjectPropertyInstance, ProjectItemInstance>(child.Remove, bucket.Expander, child.RemoveLocation, Project.Directory, true));
-                itemsToRemove = group.Where(item => metadataSet.Contains(metadataList.Select(m => item.GetMetadata(m).EvaluatedValue))).ToList();
+                itemsToRemove = group.Where(item => metadataSet.Contains(metadataList.Select(m => item.GetMetadataValue(m)))).ToList();
             }
 
             if (itemsToRemove != null)
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 4a71ec2c804..2bfa85e9778 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -463,13 +463,13 @@ public GlobFragment(string textFragment, string projectDirectory)
     internal class MetadataSet<P, I> where P : class, IProperty where I : class, IItem, IMetadataTable
     {
         private Dictionary<string, MetadataSet<P, I>> children;
-        MatchOnMetadataOptions options;
+        Func<string, string> normalize;
 
         internal MetadataSet(MatchOnMetadataOptions options, ImmutableList<string> metadata, ItemSpec<P, I> itemSpec)
         {
             StringComparer comparer = options == MatchOnMetadataOptions.CaseInsensitive ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal;
             children = new Dictionary<string, MetadataSet<P, I>>(comparer);
-            this.options = options;
+            normalize = options == MatchOnMetadataOptions.PathLike ? FileUtilities.NormalizeForPathComparison : s => s;
             foreach (ItemSpec<P, I>.ItemExpressionFragment frag in itemSpec.Fragments)
             {
                 foreach (ItemSpec<P, I>.ReferencedItem referencedItem in frag.ReferencedItems)
@@ -487,7 +487,6 @@ private MetadataSet(StringComparer comparer)
         // Relies on IEnumerable returning the metadata in a reasonable order. Reasonable?
         private void Add(IEnumerable<string> metadata, StringComparer comparer)
         {
-            Func<string, string> normalize = options == MatchOnMetadataOptions.PathLike ? FileUtilities.NormalizeForPathComparison : s => s;
             MetadataSet<P, I> current = this;
             foreach (string s in metadata)
             {
@@ -506,25 +505,20 @@ private void Add(IEnumerable<string> metadata, StringComparer comparer)
 
         internal bool Contains(IEnumerable<string> metadata)
         {
-            List<string> metadataList = metadata.ToList();
-            return this.Contains(metadataList, 0);
-        }
-
-        private bool Contains(List<string> metadata, int index)
-        {
-            if (index == metadata.Count)
+            bool nonEmptyFound = false;
+            MetadataSet<P, I> curr = this;
+            foreach (string m in metadata)
             {
-                return true;
-            }
-            else if (String.IsNullOrEmpty(metadata[index]))
-            {
-                return children.Any(kvp => !String.IsNullOrEmpty(kvp.Key) && kvp.Value.Contains(metadata, index + 1));
-            }
-            else
-            {
-                return (children.TryGetValue(FileUtilities.NormalizeForPathComparison(metadata[index]), out MetadataSet<P, I> child) && child.Contains(metadata, index + 1)) ||
-                    (children.TryGetValue(string.Empty, out MetadataSet<P, I> emptyChild) && emptyChild.Contains(metadata, index + 1));
+                if (!String.IsNullOrEmpty(m))
+                {
+                    nonEmptyFound = true;
+                }
+                if (!curr.children.TryGetValue(normalize(m), out curr))
+                {
+                    return false;
+                }
             }
+            return nonEmptyFound;
         }
     }
 
