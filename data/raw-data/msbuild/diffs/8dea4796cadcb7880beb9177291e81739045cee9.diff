diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index ce93330897a..ea3d239ae77 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -622,7 +622,7 @@ internal class NodeContext
             /// <summary>
             /// A BinaryWriter to assist writing bytes to the buffer.
             /// </summary>
-            private BinaryWriter _writeBufferStreamWriter;
+            private BinaryWriter _writeBufferBinaryWriter;
 
             /// <summary>
             /// Event indicating the node has terminated.
@@ -654,9 +654,9 @@ public NodeContext(int nodeId, int processId,
                 _headerByte = new byte[5]; // 1 for the packet type, 4 for the body length
 
                 // packets get this large so avoid reallocations
-                _readBufferMemoryStream = new MemoryStream(MaxPacketWriteSize);
-                _writeBufferMemoryStream = new MemoryStream(MaxPacketWriteSize);
-                _writeBufferStreamWriter = new BinaryWriter(_writeBufferMemoryStream);
+                _readBufferMemoryStream = new MemoryStream();
+                _writeBufferMemoryStream = new MemoryStream();
+                _writeBufferBinaryWriter = new BinaryWriter(_writeBufferMemoryStream);
                 _nodeTerminated = new ManualResetEvent(false);
                 _terminateDelegate = terminateDelegate;
                 _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
@@ -750,14 +750,14 @@ public void SendData(INodePacket packet)
                     _writeBufferMemoryStream.WriteByte((byte)packet.Type);
 
                     // Pad for the packet length
-                    _writeBufferStreamWriter.Write(0);
+                    _writeBufferBinaryWriter.Write(0);
                     packet.Translate(writeTranslator);
 
                     int writeStreamLength = (int)_writeBufferMemoryStream.Position;
 
                     // Now plug in the real packet length
                     _writeBufferMemoryStream.Position = 1;
-                    _writeBufferStreamWriter.Write(writeStreamLength - 5);
+                    _writeBufferBinaryWriter.Write(writeStreamLength - 5);
 
                     byte[] writeStreamBuffer = _writeBufferMemoryStream.GetBuffer();
 
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index a4e7a2dfc85..3c4c24bb9a3 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -200,7 +200,7 @@ internal void InternalConstruct(string pipeName)
             _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
 
             // packets get at least this large
-            _packetStream = new MemoryStream(1048576);
+            _packetStream = new MemoryStream();
             _binaryWriter = new BinaryWriter(_packetStream);
 
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
