diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 9f990c846fc..75168ae5f25 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -48,45 +48,50 @@ public void Initialize(IEventSource eventSource)
             
             Task.Run(() =>
             {
-                // Initialize FancyLoggerBuffer
-                FancyLoggerBuffer.Initialize();
-                // TODO: Fix. First line does not appear at top. Leaving empty line for now
-                FancyLoggerBuffer.WriteNewLine(string.Empty);
-                // First render
-                FancyLoggerBuffer.Render();
-                int i = 0;
-                // Rerender periodically
-                while (!FancyLoggerBuffer.IsTerminated)
+                task_Render();
+            });
+        }
+
+        void task_Render()
+        {
+            // Initialize FancyLoggerBuffer
+            FancyLoggerBuffer.Initialize();
+            // TODO: Fix. First line does not appear at top. Leaving empty line for now
+            FancyLoggerBuffer.WriteNewLine(string.Empty);
+            // First render
+            FancyLoggerBuffer.Render();
+            int i = 0;
+            // Rerender periodically
+            while (!FancyLoggerBuffer.IsTerminated)
+            {
+                i++;
+                // Delay by 1/60 seconds
+                Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
                 {
-                    i++;
-                    // Delay by 1/60 seconds
-                    Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
-                    {
-                        // Rerender projects only when needed
-                        foreach (var project in projects) project.Value.Render();
-                        // Rerender buffer
-                        FancyLoggerBuffer.Render();
-                    });
-                    // Handle keyboard input
-                    if (Console.KeyAvailable)
+                    // Rerender projects only when needed
+                    foreach (var project in projects) project.Value.Render();
+                    // Rerender buffer
+                    FancyLoggerBuffer.Render();
+                });
+                // Handle keyboard input
+                if (Console.KeyAvailable)
+                {
+                    ConsoleKey key = Console.ReadKey().Key;
+                    switch (key)
                     {
-                        ConsoleKey key = Console.ReadKey().Key;
-                        switch (key)
-                        {
-                            case ConsoleKey.UpArrow:
-                                if (FancyLoggerBuffer.TopLineIndex > 0) FancyLoggerBuffer.TopLineIndex--;
-                                FancyLoggerBuffer.ShouldRerender = true;
-                                break;
-                            case ConsoleKey.DownArrow:
-                                FancyLoggerBuffer.TopLineIndex++;
-                                FancyLoggerBuffer.ShouldRerender = true;
-                                break;
-                            default:
-                                break;
-                        }
+                        case ConsoleKey.UpArrow:
+                            if (FancyLoggerBuffer.TopLineIndex > 0) FancyLoggerBuffer.TopLineIndex--;
+                            FancyLoggerBuffer.ShouldRerender = true;
+                            break;
+                        case ConsoleKey.DownArrow:
+                            FancyLoggerBuffer.TopLineIndex++;
+                            FancyLoggerBuffer.ShouldRerender = true;
+                            break;
+                        default:
+                            break;
                     }
                 }
-            });
+            }
         }
 
         // Build
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 573a33105d7..d6713ecdb35 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -54,9 +54,16 @@ public class FancyLoggerBuffer
         private static List<FancyLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
-        // private static bool AutoScrollEnabled = true;
         internal static bool IsTerminated = false;
         internal static bool ShouldRerender = true;
+        internal static int ScrollableAreaHeight
+        {
+            get
+            {
+                // Height of the buffer -3 (titlebar, footer, and footer line)
+                return Console.BufferHeight - 3;
+            }
+        }
         public static void Initialize()
         {
             // Configure buffer, encoding and cursor
@@ -95,6 +102,7 @@ public static void Render()
             // Iterate over lines and display on terminal
             string contents = string.Empty;
             int accumulatedLineCount = 0;
+            int lineIndex = 0;
             foreach (FancyLoggerBufferLine line in Lines)
             {
                 // Continue if accum line count + next lines < scrolling area
@@ -103,15 +111,20 @@ public static void Render()
                     continue;
                 }
                 // Break if exceeds scrolling area
-                if (accumulatedLineCount - TopLineIndex > Console.BufferHeight - 3) break;
+                if (accumulatedLineCount - TopLineIndex > ScrollableAreaHeight) break;
                 foreach (string s in line.WrappedText) {
                     // Get line index relative to scroll area
-                    int lineIndex = accumulatedLineCount - TopLineIndex;
+                    lineIndex = accumulatedLineCount - TopLineIndex;
                     // Print if line in scrolling area
-                    if (lineIndex >= 0 && lineIndex < Console.BufferHeight - 3) contents += ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s;
+                    if (lineIndex >= 0 && lineIndex < ScrollableAreaHeight) contents += ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s;
                     accumulatedLineCount++;
                 }
             }
+            // Iterate for the rest of the screen
+            for (int i = lineIndex; i < ScrollableAreaHeight; i++)
+            {
+                contents += ANSIBuilder.Cursor.Position(i + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd();
+            }
             Console.Write(contents);
         }
         #endregion
