diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index cf2f7ad1cfd..28605114c61 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -1106,9 +1105,9 @@ private async Task<BuildResult> BuildProject()
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
 
             // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
-            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];
+            bool isRestoring = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is null;
 
-            var buildCheckManager = propertyEntry is null
+            var buildCheckManager = isRestoring
                 ? (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance
                 : null;
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index a9de11df4cc..12597da0a86 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -21,7 +21,7 @@ internal class BuildCheckBuildEventHandler
 
     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
 
-    private IDictionary<int, bool> _projectRestore;
+    private bool isRestoring = false;
 
     internal BuildCheckBuildEventHandler(
         IAnalysisContextFactory analyzerContextFactory,
@@ -30,7 +30,6 @@ internal BuildCheckBuildEventHandler(
         _buildCheckManager = buildCheckManager;
         _analyzerContextFactory = analyzerContextFactory;
 
-        _projectRestore = new Dictionary<int, bool>();
         _eventHandlers = new()
         {
             { typeof(BuildSubmissionStartedEventArgs), (BuildEventArgs e) => HandleBuildSubmissionStartedEvent((BuildSubmissionStartedEventArgs)e) },
@@ -50,11 +49,11 @@ internal BuildCheckBuildEventHandler(
 
     public void HandleBuildEvent(BuildEventArgs e)
     {
+        // Skip event handling during restore phase
         if (
+            isRestoring &&
             e.GetType() != typeof(BuildSubmissionStartedEventArgs) &&
-            e.BuildEventContext is not null &&
-            _projectRestore.TryGetValue(e.BuildEventContext.SubmissionId, out bool isRestoring) &&
-            isRestoring)
+            e.BuildEventContext is not null)
         {
             return;
         }
@@ -67,18 +66,14 @@ e.BuildEventContext is not null &&
 
     private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)
     {
-        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))
+        if (isRestoring)
         {
-            if (isRestoring)
-            {
-                _projectRestore[eventArgs.SubmissionId] = false;
-            }
+            isRestoring = false;
         }
         else
         {
             eventArgs.GlobalProperties.TryGetValue(MSBuildConstants.MSBuildIsRestoring, out string? restoreProperty);
-            bool isRestore = restoreProperty is not null ? Convert.ToBoolean(restoreProperty) : false;
-            _projectRestore.Add(eventArgs.SubmissionId, isRestore);
+            isRestoring = restoreProperty is not null ? Convert.ToBoolean(restoreProperty) : false;
         }
     }
 
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index fc0d52fd92e..86c1bd05d28 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -282,11 +282,13 @@ public void DoesNotRunOnRestore(bool buildInOutOfProcessNode)
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile, new List<(string, string)>() { ("BC0101", "warning") });
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
-            $"{Path.GetFileName(projectFile.Path)} /m:2 -nr:False -t:restore -check",
-            out bool success, timeoutMilliseconds: 120_000000);
+            $"{Path.GetFileName(projectFile.Path)} /m: -nr:False -t:restore -analyze",
+            out bool success);
 
         success.ShouldBeTrue();
         output.ShouldNotContain("BC0101");
+        output.ShouldNotContain("BC0102");
+        output.ShouldNotContain("BC0103");
     }
 
     private void AddCustomDataSourceToNugetConfig(string analysisCandidatePath)
