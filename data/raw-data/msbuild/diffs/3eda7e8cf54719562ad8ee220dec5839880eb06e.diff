diff --git a/NuGet.config b/NuGet.config
index c39ceddacb7..a11137a9563 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -15,37 +15,13 @@
     <add key="dotnet9" value="https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet9/nuget/v3/index.json" />
     <add key="dotnet9-transport" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9-transport/nuget/v3/index.json" />
     <add key="vs-impl" value="https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-impl/nuget/v3/index.json" />
+    <!-- We don't want other than VS OpenTelemetry libraries from vs-impl -->
+    <packageSourceMapping>
+      <packageSource key="vs-impl">
+        <package pattern="Microsoft.VisualStudio.OpenTelemetry*" />
+      </packageSource>
+    </packageSourceMapping>
   </packageSources>
-  <!-- We don't want other than VS OpenTelemetry libraries from vs-impl -->
-  <packageSourceMapping>
-    <packageSource key="vs-impl">
-      <package pattern="Microsoft.VisualStudio.OpenTelemetry*" />
-    </packageSource>
-    <packageSource key="arcade">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet-public">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet-tools">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet6">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet8">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet8-transport">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet9">
-      <package pattern="*" />
-    </packageSource>
-    <packageSource key="dotnet9-transport">
-      <package pattern="*" />
-    </packageSource>
-  </packageSourceMapping>
   <disabledPackageSources>
     <!--Begin: Package sources managed by Dependency Flow automation. Do not edit the sources below.-->
     <!--  Begin: Package sources from dotnet-runtime -->
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 8616e51a6a1..459b39d0a73 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
-  <Source Uri="https://github.com/dotnet/dotnet" Mapping="msbuild" Sha="170498a9429a5553fe7ac0ec2341d19bbb97cbe8" BarId="268722" />
+  <Source Uri="https://github.com/dotnet/dotnet" Mapping="msbuild" Sha="ad8565092bbfdd5c8b4a94a718d10b2d394f7aee" BarId="268384" />
   <ProductDependencies>
     <!-- Necessary for source-build. This allows the live version of the package to be used by source-build. -->
     <Dependency Name="Microsoft.Bcl.Cryptography" Version="9.0.0">
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 9ac693a6d28..489db4af2c1 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -984,13 +984,6 @@ private void AddCustomDataSourceToNugetConfig(string checkCandidatePath)
             // MSBuild packages are placed in a separate folder, so we need to add it as a package source.
             AddPackageSource(doc, packageSourcesNode, "MSBuildTestPackagesSource", RunnerUtilities.ArtifactsLocationAttribute.ArtifactsLocation);
 
-            // PackageSourceMapping is enabled at the repository level. For the test packages we need to add the PackageSourceMapping as well.
-            XmlNode? packageSourceMapping = doc.CreateElement("packageSourceMapping");
-            string[] packagePatterns = new string[] { "*" };
-            AddPackageSourceMapping(doc, packageSourceMapping, "CustomCheckSource", packagePatterns);
-            AddPackageSourceMapping(doc, packageSourceMapping, "MSBuildTestPackagesSource", packagePatterns);
-            doc.DocumentElement.AppendChild(packageSourceMapping);
-
             doc.Save(Path.Combine(checkCandidatePath, "nuget.config"));
         }
     }
@@ -1008,23 +1001,6 @@ private void AddPackageSource(XmlDocument doc, XmlNode? packageSourcesNode, stri
         }
     }
 
-    private void AddPackageSourceMapping(XmlDocument doc, XmlNode? packageSourceMapping, string key, string[] packagePatterns)
-    {
-        if (packageSourceMapping != null)
-        {
-            XmlElement packageSourceNode = doc.CreateElement("packageSource");
-            PopulateXmlAttribute(doc, packageSourceNode, "key", key);
-            foreach (var pattern in packagePatterns)
-            {
-                XmlElement packageNode = doc.CreateElement("package");
-                PopulateXmlAttribute(doc, packageNode, "pattern", pattern);
-                packageSourceNode.AppendChild(packageNode);
-            }
-            
-            packageSourceMapping.AppendChild(packageSourceNode);
-        }
-    }
-
     private void PopulateXmlAttribute(XmlDocument doc, XmlNode node, string attributeName, string attributeValue)
     {
         node.ShouldNotBeNull($"The attribute {attributeName} can not be populated with {attributeValue}. Xml node is null.");
