diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index ab59eede404..dc77927929d 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -1446,12 +1446,12 @@ private void TestTaskStartedEvent(string taskName, string projectFile, string pr
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword("TaskStarted", taskName);
 
             ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
-            service.LogTaskStarted(s_buildEventContext, taskName, projectFile, projectFileOfTask, Assembly.GetExecutingAssembly().GetName());
+            service.LogTaskStarted(s_buildEventContext, taskName, projectFile, projectFileOfTask, Assembly.GetExecutingAssembly().GetName().FullName);
             VerifyTaskStartedEvent(taskName, projectFile, projectFileOfTask, message, service);
 
             service.ResetProcessedBuildEvent();
             service.OnlyLogCriticalEvents = true;
-            service.LogTaskStarted(s_buildEventContext, taskName, projectFile, projectFileOfTask, Assembly.GetExecutingAssembly().GetName());
+            service.LogTaskStarted(s_buildEventContext, taskName, projectFile, projectFileOfTask, Assembly.GetExecutingAssembly().GetName().FullName);
             Assert.Null(service.ProcessedBuildEvent);
         }
 
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index a3ea85588ad..4802b80e984 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -575,7 +575,7 @@ public void LogTargetFinished(BuildEventContext targetBuildEventContext, string
         /// <param name="projectFile">The project file</param>
         /// <param name="projectFileOfTaskNode">The project file containing the task node.</param>
         /// <param name="taskAssemblyName">An assembly's unique identity where the task is implemented.</param>
-        public void LogTaskStarted(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, AssemblyName taskAssemblyName)
+        public void LogTaskStarted(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, string taskAssemblyName)
         {
         }
 
@@ -588,7 +588,7 @@ public void LogTaskStarted(BuildEventContext targetBuildEventContext, string tas
         /// <param name="projectFileOfTaskNode">The project file containing the task node.</param>
         /// <param name="taskAssemblyName">An assembly's unique identity where the task is implemented.</param>
         /// <returns>The task logging context</returns>
-        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column, AssemblyName taskAssemblyName)
+        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column, string taskAssemblyName)
         {
             return new BuildEventContext(0, 0, 0, 0);
         }
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index de8c72d5a89..df927b5355d 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -1190,7 +1190,7 @@ private void InitializeHost(bool throwOnExecute)
                 CancellationToken.None);
 
             ProjectTaskInstance taskInstance = project.Targets["foo"].Tasks.First();
-            TaskLoggingContext talc = tlc.LogTaskBatchStarted(".", taskInstance, typeof(TaskBuilderTestTask.TaskBuilderTestTaskFactory).GetTypeInfo().Assembly.GetName());
+            TaskLoggingContext talc = tlc.LogTaskBatchStarted(".", taskInstance, typeof(TaskBuilderTestTask.TaskBuilderTestTaskFactory).GetTypeInfo().Assembly.GetName().FullName);
 
             ItemDictionary<ProjectItemInstance> itemsByName = new ItemDictionary<ProjectItemInstance>();
 
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index cad6cbb73ba..9bb86c7d582 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -572,7 +572,7 @@ BuildEventContext LogProjectStarted(
         /// <param name="projectFile">The project file which is being built</param>
         /// <param name="projectFileOfTaskNode">The file in which the task is defined - typically a .targets file</param>
         /// <param name="taskAssemblyName">An assembly's unique identity where the task is implemented</param>
-        void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, AssemblyName taskAssemblyName);
+        void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, string taskAssemblyName);
 
         /// <summary>
         /// Log that a task is about to start
@@ -585,7 +585,7 @@ BuildEventContext LogProjectStarted(
         /// <param name="column">The column number in the file where the task invocation is located.</param>
         /// <param name="taskAssemblyName">An assembly's unique identity where the task is implemented.</param>
         /// <returns>The task build event context</returns>
-        BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column, AssemblyName taskAssemblyName);
+        BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column, string taskAssemblyName);
 
         /// <summary>
         /// Log that a task has just completed
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index a284d9538f4..37e47e2d955 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -691,7 +691,7 @@ public void LogTargetFinished(BuildEventContext targetBuildEventContext, string
         /// <param name="projectFileOfTaskNode">Project file which contains the task</param>
         /// <param name="taskAssemblyName">An assembly's unique identity where the task is implemented</param>
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
-        public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, AssemblyName taskAssemblyName)
+        public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, string taskAssemblyName)
         {
             ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "targetBuildEventContext is null");
             if (!OnlyLogCriticalEvents)
@@ -720,7 +720,7 @@ public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskN
         /// <param name="taskAssemblyName">An assembly's unique identity where the task is implemented</param>
         /// <returns>The build event context for the task.</returns>
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
-        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column, AssemblyName taskAssemblyName)
+        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column, string taskAssemblyName)
         {
             ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
             BuildEventContext taskBuildEventContext = new BuildEventContext(
diff --git a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
index 980f274d13e..e2f91ac9c74 100644
--- a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
@@ -109,7 +109,7 @@ internal void LogTargetBatchFinished(string projectFullPath, bool success, IEnum
         /// <summary>
         /// Log that a task is about to start
         /// </summary>
-        internal TaskLoggingContext LogTaskBatchStarted(string projectFullPath, ProjectTargetInstanceChild task, AssemblyName taskAssemblyName)
+        internal TaskLoggingContext LogTaskBatchStarted(string projectFullPath, ProjectTargetInstanceChild task, string taskAssemblyName)
         {
             ErrorUtilities.VerifyThrow(IsValid, "Should be valid");
 
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index b23bccfd181..02351060831 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -35,7 +35,7 @@ internal class TaskLoggingContext : BuildLoggingContext
         /// <summary>
         /// Constructs a task logging context from a parent target context and a task node.
         /// </summary>
-        internal TaskLoggingContext(TargetLoggingContext targetLoggingContext, string projectFullPath, ProjectTargetInstanceChild task, AssemblyName taskAssemblyName)
+        internal TaskLoggingContext(TargetLoggingContext targetLoggingContext, string projectFullPath, ProjectTargetInstanceChild task, string taskAssemblyName)
             : base(targetLoggingContext)
         {
             _targetLoggingContext = targetLoggingContext;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 1fa3e88df5c..883c8a04c2f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -424,7 +424,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                     // We need to find the task before logging the task started event so that the using task statement comes before the task started event
                     IDictionary<string, string> taskIdentityParameters = GatherTaskIdentityParameters(bucket.Expander);
                     TaskRequirements? requirements = _taskExecutionHost.FindTask(taskIdentityParameters);
-                    AssemblyName taskAssemblyName = _taskExecutionHost.FindTaskAssemblyName(taskIdentityParameters);
+                    string taskAssemblyName = _taskExecutionHost.FindTaskAssemblyName(taskIdentityParameters)?.FullName;
 
                     if (requirements != null)
                     {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 4976a6e0901..c565e9f5860 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -815,7 +815,7 @@ private BuildEventArgs ReadTaskStartedEventArgs()
                 taskFile,
                 taskName,
                 fields.Timestamp,
-                taskAssemblyNameString is null ? null : new AssemblyName(taskAssemblyNameString));
+                taskAssemblyNameString);
             e.LineNumber = fields.LineNumber;
             e.ColumnNumber = fields.ColumnNumber;
             SetCommonFields(e, fields);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 885e969db46..6bd0fb4f9c0 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -408,7 +408,7 @@ private BinaryLogRecordKind Write(TaskStartedEventArgs e)
             WriteDeduplicatedString(e.TaskName);
             WriteDeduplicatedString(e.ProjectFile);
             WriteDeduplicatedString(e.TaskFile);
-            WriteDeduplicatedString(e.TaskAssemblyName?.FullName);
+            WriteDeduplicatedString(e.TaskAssemblyName);
 
             return BinaryLogRecordKind.TaskStarted;
         }
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
index f232a69409f..40697a6f9fc 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
@@ -864,7 +864,7 @@ internal virtual void LogTargetFinished(BuildEventContext buildEventContext, str
         /// <param name="taskName"></param>
         /// <param name="projectFile"></param>
         /// <param name="projectFileOfTaskNode">project file actually containing the task</param>
-        internal virtual void LogTaskStarted(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, AssemblyName taskAssemblyName)
+        internal virtual void LogTaskStarted(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, string taskAssemblyName)
         {
             if (!OnlyLogCriticalEvents)
             {
diff --git a/src/Deprecated/Engine/Engine/TaskEngine.cs b/src/Deprecated/Engine/Engine/TaskEngine.cs
index 4258b4d3ffb..82c1e10b753 100644
--- a/src/Deprecated/Engine/Engine/TaskEngine.cs
+++ b/src/Deprecated/Engine/Engine/TaskEngine.cs
@@ -378,9 +378,7 @@ private bool ExecuteBucket(EngineProxy engineProxy, ItemBucket bucket, int bucke
                     engineProxy.BuildEventContext = buildEventContext;
                 }
 
-                AssemblyName taskAssemblyName = TaskClass is null ? null : new AssemblyName(TaskClass.Assembly.AssemblyName);
-
-                loggingServices.LogTaskStarted(buildEventContext, TaskName, parentProjectFullFileName, projectFileOfTaskNode, taskAssemblyName);
+                loggingServices.LogTaskStarted(buildEventContext, TaskName, parentProjectFullFileName, projectFileOfTaskNode, TaskClass?.Assembly?.AssemblyName);
 
                 AppDomain taskAppDomain = PrepareAppDomain();
 
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index 674433164ce..ade11900875 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -66,7 +66,7 @@ public TaskStartedEventArgs(
             string projectFile,
             string taskFile,
             string taskName,
-            AssemblyName taskAssemblyName)
+            string taskAssemblyName)
             : this(message, helpKeyword, projectFile, taskFile, taskName, DateTime.UtcNow, taskAssemblyName)
         {
         }
@@ -113,7 +113,7 @@ public TaskStartedEventArgs(
             string taskFile,
             string taskName,
             DateTime eventTimestamp,
-            AssemblyName taskAssemblyName)
+            string taskAssemblyName)
             : base(message, helpKeyword, "MSBuild", eventTimestamp)
         {
             this.taskName = taskName;
@@ -140,7 +140,7 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.WriteOptionalString(taskFile);
             writer.Write7BitEncodedInt(LineNumber);
             writer.Write7BitEncodedInt(ColumnNumber);
-            writer.WriteOptionalString(TaskAssemblyName?.FullName);
+            writer.WriteOptionalString(TaskAssemblyName);
         }
 
         /// <summary>
@@ -157,7 +157,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             taskFile = reader.ReadByte() == 0 ? null : reader.ReadString();
             LineNumber = reader.Read7BitEncodedInt();
             ColumnNumber = reader.Read7BitEncodedInt();
-            TaskAssemblyName = reader.ReadByte() == 0 ? null : new AssemblyName(reader.ReadString());
+            TaskAssemblyName = reader.ReadByte() == 0 ? null : reader.ReadString();
         }
         #endregion
 
@@ -189,7 +189,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         /// <summary>
         /// Full name of the assembly that implements the task
         /// </summary>
-        public AssemblyName TaskAssemblyName { get; private set; }
+        public string TaskAssemblyName { get; private set; }
 
         public override string Message
         {
