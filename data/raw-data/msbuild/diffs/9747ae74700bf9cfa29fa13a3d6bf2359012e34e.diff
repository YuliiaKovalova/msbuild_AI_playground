diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index a0ec7d24e57..d44d9db291e 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -110,6 +110,12 @@ public sealed class ProjectInSolution
         private readonly Dictionary<string, ProjectConfigurationInSolution> _projectConfigurations;
         private IReadOnlyDictionary<string, ProjectConfigurationInSolution> _projectConfigurationsReadOnly;
 
+        /// <summary>
+        /// A list of strings representing relative paths from the solution file to loose items.
+        /// </summary>
+        private readonly List<string> _solutionItems;
+        private IReadOnlyList<string> _solutionItemsAsReadOnly;
+
         #endregion
 
         #region Constructors
@@ -132,6 +138,7 @@ internal ProjectInSolution(SolutionFile solution)
             AspNetConfigurations = new Hashtable(StringComparer.OrdinalIgnoreCase);
 
             _projectConfigurations = new Dictionary<string, ProjectConfigurationInSolution>(StringComparer.OrdinalIgnoreCase);
+            _solutionItems = new List<string>();
         }
 
         #endregion
@@ -213,6 +220,15 @@ public string AbsolutePath
         /// </summary>
         public IReadOnlyList<string> Dependencies => _dependenciesAsReadonly ?? (_dependenciesAsReadonly = _dependencies.AsReadOnly());
 
+        /// <summary>
+        /// List of relative paths mapping to loose folders or files, as defined in the solution file.
+        /// </summary>
+        /// <remarks>
+        /// There is no grouping or ordering inherent in this list (nor is there in the solution file itself), so callers
+        /// should enforce their own grouping or ordering before using this.
+        /// </remarks>
+        public IReadOnlyList<string> SolutionItems => _solutionItemsAsReadOnly ?? (_solutionItemsAsReadOnly = _solutionItems.AsReadOnly());
+
         /// <summary>
         /// Configurations for this project, keyed off the configuration's full name, e.g. "Debug|x86"
         /// They contain only the project configurations from the solution file that fully matched (configuration and platform) against the solution configurations.
@@ -263,6 +279,15 @@ internal void AddDependency(string referencedProjectGuid)
             _dependenciesAsReadonly = null;
         }
 
+        /// <summary>
+        /// Add the relative path to the solution item to our solution items list.
+        /// </summary>
+        internal void AddSolutionItem(string relativeFilePath)
+        {
+            _solutionItems.Add(relativeFilePath);
+            _solutionItemsAsReadOnly = null;
+        }
+
         /// <summary>
         /// Set the requested project configuration. 
         /// </summary>
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index e0e9059c984..e872102e1db 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -845,6 +845,33 @@ private void ParseProject(string firstLine)
                         line = ReadLine();
                     }
                 }
+                else if (line.StartsWith("ProjectSection(SolutionItems)", StringComparison.Ordinal))
+                {
+                    // Example section:
+                    // ProjectSection(SolutionItems) = preProject
+                    //   docs\README.md = docs\README.md
+                    // EndProjectSection
+
+                    // We have a SolutionItems section.  Each subsequent line should identify
+                    // a solution item.
+                    line = ReadLine();
+                    while ((line != null) && (!line.StartsWith("EndProjectSection", StringComparison.Ordinal)))
+                    {
+                        proj.ProjectType = SolutionProjectType.SolutionFolder;
+
+                        // This should be a solution item, aka a file. The key and value should
+                        // be the same, both are the relative path from the solution file to the
+                        // solution item.
+                        Match match = s_crackPropertyLine.Value.Match(line);
+                        if (match.Success)
+                        {
+                            string relativeFilePath = match.Groups["PROPERTYNAME"].Value.Trim();
+                            proj.AddSolutionItem(relativeFilePath);
+                        }
+
+                        line = ReadLine();
+                    }
+                }
                 else if (line.StartsWith("Project(", StringComparison.Ordinal))
                 {
                     // Another Project spotted instead of EndProject for the current one - solution file is malformed
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index 9281b0c3cf8..87338cbf2dc 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,3 +1,4 @@
+Microsoft.Build.Construction.ProjectInSolution.SolutionItems.get -> System.Collections.Generic.IReadOnlyList<string>
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
@@ -10,4 +11,4 @@ Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path,
 Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
 Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
\ No newline at end of file
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 218e7d4593d..87338cbf2dc 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,3 +1,4 @@
+Microsoft.Build.Construction.ProjectInSolution.SolutionItems.get -> System.Collections.Generic.IReadOnlyList<string>
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
