diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 4b5bfe2f22a..424996bd858 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -41,20 +41,14 @@ public void Initialize(IEventSource eventSource)
             eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
             // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
             // Raised
+            // TODO: Enable next build
             // eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            // FancyLoggerBuffer.WriteNewLine("");
-
-            /*for (int i = 0; i < 300; i++)
-            {
-                string l = string.Concat( Enumerable.Repeat($"{i}-", 30));
-                FancyLoggerBuffer.WriteNewLine(l);
-            }*/
-
+            FancyLoggerBuffer.WriteNewLine("");
             FancyLoggerBuffer.Render();
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index bece30a15f6..7ae12ca13e3 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -43,12 +43,10 @@ public class FancyLoggerBuffer
         private static List<FancyLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
+        private static bool AutoScrollEnabled = true;
         private static bool IsTerminated = false;
-        // private static bool AutoScrollEnabled = true;
         public static void Initialize()
         {
-            // Use encoding
-            Console.OutputEncoding = System.Text.Encoding.UTF8;
             // Use alternate buffer
             // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
@@ -58,17 +56,35 @@ public static void Initialize()
             {
                 // Use encoding
                 Console.OutputEncoding = System.Text.Encoding.UTF8;
+                // Counter for delaying render
+                int i = 0;
+                // Execute while the buffer is active
                 while (!IsTerminated)
                 {
-                    Task.Delay((1 / 60) * 1_000).ContinueWith((t) =>
+                    // Delay by 60 fps (1/60 seconds)
+                    i++;
+                    Task.Delay((i/60) * 1_000).ContinueWith((t) =>
                     {
                         Render();
                     });
+                    // Handle keyboard input
                     if (Console.KeyAvailable)
-                    {
+                    { 
                         ConsoleKey key = Console.ReadKey().Key;
-                        if (key == ConsoleKey.UpArrow && TopLineIndex > 0) TopLineIndex--;
-                        else if (key == ConsoleKey.DownArrow) TopLineIndex++;
+                        switch (key)
+                        {
+                            case ConsoleKey.UpArrow:
+                                if (TopLineIndex > 0) TopLineIndex--;
+                                break;
+                            case ConsoleKey.DownArrow:
+                                TopLineIndex++;
+                                break;
+                            case ConsoleKey.Spacebar:
+                                AutoScrollEnabled = !AutoScrollEnabled;
+                                break;
+                            default:
+                                break;
+                        }
                     }
                 }
             });
@@ -86,6 +102,7 @@ public static void Terminate()
         #region Rendering
         public static void Render()
         {
+            if (IsTerminated) return;
             // Write Header
             Console.Write(
                 // Write header
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 27a13b24095..146dd90b665 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -85,9 +85,6 @@ public void Log()
                 if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 node.Log();
             }
-
-            // Update buffer
-            // FancyLoggerBuffer.Render();
         }
 
         public void AddTarget(TargetStartedEventArgs args)
