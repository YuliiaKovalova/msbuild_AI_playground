diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index 643b035bd18..13ac4404fb1 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -146,7 +146,7 @@ public IsolateProjectsTests(ITestOutputHelper testOutput)
             _buildParametersPrototype = new BuildParameters
             {
                 EnableNodeReuse = false,
-                IsolateProjects = IsolateProjects.True,
+                ProjectIsolationMode = ProjectIsolationMode.True,
                 DisableInProcNode = disableInProcNode
             };
         }
@@ -239,7 +239,7 @@ public void IsolationRelatedMessagesShouldNotBePresentInNonIsolatedBuilds()
                     logger.AssertLogDoesntContain("MSB4260");
                 },
                 excludeReferencesFromConstraints: true,
-                isolateProjects: IsolateProjects.False);
+                isolateProjects: ProjectIsolationMode.False);
         }
 
         [Fact]
@@ -254,13 +254,13 @@ public void IsolationRelatedMessageShouldBePresentInIsolatedBuildsWithMessaging(
                     logger.ErrorCount.ShouldBe(0);
                     logger.Errors.ShouldBeEmpty();
 
-                    // The references got built because the isolation mode is set to IsolateProjects.Message.
+                    // The references got built because the isolation mode is set to ProjectIsolationMode.MessageUponIsolationViolation.
                     logger.AssertMessageCount("Message from reference", 2);
                     logger.AllBuildEvents.OfType<ProjectStartedEventArgs>().Count().ShouldBe(3);
 
                     logger.AssertMessageCount("MSB4260", 2);
                 },
-                isolateProjects: IsolateProjects.Message);
+                isolateProjects: ProjectIsolationMode.MessageUponIsolationViolation);
         }
 
         [Theory]
@@ -406,7 +406,7 @@ private void AssertBuild(
             bool buildUndeclaredReference = false,
             bool addContinueOnError = false,
             bool excludeReferencesFromConstraints = false,
-            IsolateProjects isolateProjects = IsolateProjects.True,
+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True,
             Func<string, string> projectReferenceModifier = null,
             Func<string, string> msbuildOnDeclaredReferenceModifier = null)
         {
@@ -432,7 +432,7 @@ private void AssertBuild(
             File.WriteAllText(undeclaredReferenceFile, _undeclaredReference);
 
             var buildParameters = _buildParametersPrototype.Clone();
-            buildParameters.IsolateProjects = isolateProjects;
+            buildParameters.ProjectIsolationMode = isolateProjects;
 
             using (var buildManagerSession = new Helpers.BuildManagerSession(_env, buildParameters))
             {
@@ -495,7 +495,7 @@ public void SkippedTargetsShouldNotTriggerCacheMissEnforcement()
 </Project>
 ".Cleanup()).Path;
 
-            _buildParametersPrototype.IsolateProjects.ShouldBe(IsolateProjects.True);
+            _buildParametersPrototype.ProjectIsolationMode.ShouldBe(ProjectIsolationMode.True);
             var buildParameters = _buildParametersPrototype.Clone();
 
             using (var buildManagerSession = new Helpers.BuildManagerSession(_env, buildParameters))
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index db7894f6888..bce7c59c470 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -527,9 +527,9 @@ public void BeginBuild(BuildParameters parameters)
                 // Initialize additional build parameters.
                 _buildParameters.BuildId = GetNextBuildId();
 
-                if (_buildParameters.UsesCachedResults() && parameters.IsolateProjects == IsolateProjects.False)
+                if (_buildParameters.UsesCachedResults() && parameters.ProjectIsolationMode == ProjectIsolationMode.False)
                 {
-                    _buildParameters.IsolateProjects = IsolateProjects.True;
+                    _buildParameters.ProjectIsolationMode = ProjectIsolationMode.True;
                 }
 
                 if (_buildParameters.UsesOutputCache() && string.IsNullOrWhiteSpace(_buildParameters.OutputResultsCacheFile))
@@ -1055,7 +1055,7 @@ public void EndBuild()
 
             void SerializeCaches()
             {
-                string errorMessage = CacheSerialization.SerializeCaches(_configCache, _resultsCache, _buildParameters.OutputResultsCacheFile, _buildParameters.IsolateProjects);
+                string errorMessage = CacheSerialization.SerializeCaches(_configCache, _resultsCache, _buildParameters.OutputResultsCacheFile);
 
                 if (!string.IsNullOrEmpty(errorMessage))
                 {
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 311b638ed34..c2daead1e69 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -212,7 +212,7 @@ public class BuildParameters : ITranslatable
 
         private bool _interactive;
 
-        private IsolateProjects _isolateProjects;
+        private ProjectIsolationMode _projectIsolationMode;
 
         private string[] _inputResultsCacheFiles;
 
@@ -298,7 +298,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             WarningsAsMessages = other.WarningsAsMessages == null ? null : new HashSet<string>(other.WarningsAsMessages, StringComparer.OrdinalIgnoreCase);
             _projectLoadSettings = other._projectLoadSettings;
             _interactive = other._interactive;
-            _isolateProjects = other._isolateProjects;
+            _projectIsolationMode = other.ProjectIsolationMode;
             _inputResultsCacheFiles = other._inputResultsCacheFiles;
             _outputResultsCacheFile = other._outputResultsCacheFile;
             DiscardBuildResults = other.DiscardBuildResults;
@@ -762,16 +762,24 @@ public bool Interactive
         /// <summary>
         /// Gets or sets a value indicating the isolation mode to use.
         /// </summary>
-        public IsolateProjects IsolateProjects
+        /// <remarks>
+        /// Kept for API backwards compatibility.
+        /// </remarks>
+        public bool IsolateProjects
         {
-            get => _isolateProjects;
-            set => _isolateProjects = value;
+            get => ProjectIsolationMode == ProjectIsolationMode.True;
+            set => ProjectIsolationMode = value ? ProjectIsolationMode.True : ProjectIsolationMode.False;
         }
 
+        /// <summary>
+        /// Gets or sets a value indicating the isolation mode to use.
+        /// </summary>
+        public ProjectIsolationMode ProjectIsolationMode { get => _projectIsolationMode; set => _projectIsolationMode = value; }
+
         /// <summary>
         /// Input cache files that MSBuild will use to read build results from.
-        /// If the isolation mode is set to <see cref="IsolateProjects.False"/>,
-        /// this sets the isolation mode to <see cref="IsolateProjects.True"/>.
+        /// If the isolation mode is set to <see cref="ProjectIsolationMode.False"/>,
+        /// this sets the isolation mode to <see cref="ProjectIsolationMode.True"/>.
         /// </summary>
         public string[] InputResultsCacheFiles
         {
@@ -781,8 +789,8 @@ public string[] InputResultsCacheFiles
 
         /// <summary>
         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.
-        /// If the isolation mode is set to <see cref="IsolateProjects.False"/>,
-        /// this sets the isolation mode to <see cref="IsolateProjects.True"/>.
+        /// If the isolation mode is set to <see cref="ProjectIsolationMode.False"/>,
+        /// this sets the isolation mode to <see cref="ProjectIsolationMode.True"/>.
         /// </summary>
         public string OutputResultsCacheFile
         {
@@ -830,7 +838,7 @@ public BuildParameters Clone()
 
         internal bool UsesInputCaches() => InputResultsCacheFiles != null;
 
-        internal bool SkippedResultsDoNotCauseCacheMiss() => IsolateProjects == IsolateProjects.True;
+        internal bool SkippedResultsDoNotCauseCacheMiss() => ProjectIsolationMode == ProjectIsolationMode.True;
 
         /// <summary>
         /// Implementation of the serialization mechanism.
@@ -863,7 +871,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _logInitialPropertiesAndItems);
             translator.TranslateEnum(ref _projectLoadSettings, (int) _projectLoadSettings);
             translator.Translate(ref _interactive);
-            translator.TranslateEnum(ref _isolateProjects, (int)_isolateProjects);
+            translator.TranslateEnum(ref _projectIsolationMode, (int)_projectIsolationMode);
 
             // ProjectRootElementCache is not transmitted.
             // ResetCaches is not transmitted.
diff --git a/src/Build/BackEnd/BuildManager/IsolateProjects.cs b/src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs
similarity index 89%
rename from src/Build/BackEnd/BuildManager/IsolateProjects.cs
rename to src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs
index 426dbdb5ee5..b5b202cc60f 100644
--- a/src/Build/BackEnd/BuildManager/IsolateProjects.cs
+++ b/src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs
@@ -6,7 +6,7 @@ namespace Microsoft.Build.Execution
     /// <summary>
     /// The isolation mode to use.
     /// </summary>
-    public enum IsolateProjects
+    public enum ProjectIsolationMode
     {
         /// <summary>
         /// Do not enable isolation.
@@ -16,7 +16,7 @@ public enum IsolateProjects
         /// <summary>
         /// Enable isolation and log isolation violations as messages.
         /// </summary>
-        Message,
+        MessageUponIsolationViolation,
 
         /// <summary>
         /// Enable isolation and log isolation violations as errors.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index a920c4d3710..a41604b6efb 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -362,9 +362,9 @@ public async Task<BuildResult[]> BuildProjects(string[] projectFiles, PropertyDi
                 BuildRequestData data = new BuildRequestData(projectFiles[i], properties[i].ToDictionary(), explicitToolsVersion, targets, null);
 
                 BuildRequestConfiguration config = new BuildRequestConfiguration(data, _componentHost.BuildParameters.DefaultToolsVersion);
-                IsolateProjects isolateProjects = _componentHost.BuildParameters.IsolateProjects;
-                bool skipStaticGraphIsolationConstraints = (isolateProjects != IsolateProjects.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))
-                    || isolateProjects == IsolateProjects.Message;
+                ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;
+                bool skipStaticGraphIsolationConstraints = (isolateProjects != ProjectIsolationMode.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))
+                    || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation;
                 requests[i] = new FullyQualifiedBuildRequest(
                     config: config,
                     targets: targets,
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 1e7fb92f5c5..cbac77134a7 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -1034,8 +1034,8 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
 
         private List<string> GetUndeclaredProjects(MSBuild msbuildTask)
         {
-            IsolateProjects isolateProjects = _componentHost.BuildParameters.IsolateProjects;
-            if (isolateProjects == IsolateProjects.False || isolateProjects == IsolateProjects.Message)
+            ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;
+            if (isolateProjects == ProjectIsolationMode.False || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation)
             {
                 return null;
             }
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 9370fa14e5a..c6cd1f2ae6d 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1961,13 +1961,13 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
         {
             emitNonErrorLogs = _ => { };
 
-            IsolateProjects isolateProjects = _componentHost.BuildParameters.IsolateProjects;
+            ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;
             var configCache = (IConfigCache) _componentHost.GetComponent(BuildComponentType.ConfigCache);
 
             // do not check root requests as nothing depends on them
-            if (isolateProjects == IsolateProjects.False || request.IsRootRequest || request.SkipStaticGraphIsolationConstraints)
+            if (isolateProjects == ProjectIsolationMode.False || request.IsRootRequest || request.SkipStaticGraphIsolationConstraints)
             {
-                bool logComment = ((isolateProjects == IsolateProjects.True || isolateProjects == IsolateProjects.Message) && request.SkipStaticGraphIsolationConstraints);
+                bool logComment = ((isolateProjects == ProjectIsolationMode.True || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation) && request.SkipStaticGraphIsolationConstraints);
                 if (logComment)
                 {
                     // retrieving the configs is not quite free, so avoid computing them eagerly
@@ -2054,7 +2054,7 @@ internal void RecordResultToCurrentCacheIfConfigNotInOverrideCache(BuildResult r
         {
             // Record these results to the cache only if their config isn't in the
             // override cache, which can happen if we are building in isolation mode
-            // (IsolateProjects.Message), and the received result was built by an
+            // (ProjectIsolationMode.MessageUponIsolationViolation), and the received result was built by an
             // isolation-violating dependency project.
             if (_configCache is not ConfigCacheWithOverride
                 || !((ConfigCacheWithOverride)_configCache).HasConfigurationInOverrideCache(result.ConfigurationId))
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 6c80df4f8b8..49341a7b919 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -375,9 +375,9 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
                 // See if any required properties were not set
                 foreach (KeyValuePair<string, string> requiredParameter in requiredParameters)
                 {
-                    IsolateProjects isolateProjects = _buildComponentHost.BuildParameters.IsolateProjects;
+                    ProjectIsolationMode isolateProjects = _buildComponentHost.BuildParameters.ProjectIsolationMode;
 
-                    string resourceName = isolateProjects == IsolateProjects.Message ? "RequiredPropertyNotSetErrorMessagingIsolationMode" : "RequiredPropertyNotSetError";
+                    string resourceName = isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation ? "RequiredPropertyNotSetErrorMessagingIsolationMode" : "RequiredPropertyNotSetError";
                     ProjectErrorUtilities.VerifyThrowInvalidProject(
                         setParameters.ContainsKey(requiredParameter.Key),
                         _taskLocation,
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 670fd52adad..588fa5a9a54 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -148,7 +148,7 @@
     <Compile Include="BackEnd\BuildManager\BuildParameters.cs" />
     <Compile Include="BackEnd\BuildManager\CacheSerialization.cs" />
     <Compile Include="BackEnd\BuildManager\CacheAggregator.cs" />
-    <Compile Include="BackEnd\BuildManager\IsolateProjects.cs" />
+    <Compile Include="BackEnd\BuildManager\ProjectIsolationMode.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientPacketPump.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientExitType.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientExitResult.cs" />
@@ -161,7 +161,6 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
-    <Compile Include="IsolateProjects.cs" />
     <Compile Include="Logging\FancyLogger\*.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index c1fcf3ee4c5..b3c5f8f4275 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1019,7 +1019,7 @@ public void InvalidToolsVersionErrors()
                                         profilerLogger: null,
                                         enableProfiler: false,
                                         interactive: false,
-                                        isolateProjects: IsolateProjects.False,
+                                        isolateProjects: ProjectIsolationMode.False,
                                         graphBuildOptions: null,
                                         lowPriority: false,
                                         inputResultsCaches: null,
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 01546bc499a..cabcc8e6cea 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -702,7 +702,7 @@ string[] commandLine
                 ProfilerLogger profilerLogger = null;
                 bool enableProfiler = false;
                 bool interactive = false;
-                IsolateProjects isolateProjects = IsolateProjects.False;
+                ProjectIsolationMode isolateProjects = ProjectIsolationMode.False;
                 GraphBuildOptions graphBuildOptions = null;
                 bool lowPriority = false;
                 string[] inputResultsCaches = null;
@@ -1120,7 +1120,7 @@ internal static bool BuildProject
             ProfilerLogger profilerLogger,
             bool enableProfiler,
             bool interactive,
-            IsolateProjects isolateProjects,
+            ProjectIsolationMode isolateProjects,
             GraphBuildOptions graphBuildOptions,
             bool lowPriority,
             string[] inputResultsCaches,
@@ -1296,7 +1296,7 @@ string[] commandLine
                     parameters.WarningsNotAsErrors = warningsNotAsErrors;
                     parameters.WarningsAsMessages = warningsAsMessages;
                     parameters.Interactive = interactive;
-                    parameters.IsolateProjects = isolateProjects;
+                    parameters.ProjectIsolationMode = isolateProjects;
                     parameters.InputResultsCacheFiles = inputResultsCaches;
                     parameters.OutputResultsCacheFile = outputResultsCache;
 
@@ -2226,7 +2226,7 @@ private static bool ProcessCommandLineSwitches
             ref ProfilerLogger profilerLogger,
             ref bool enableProfiler,
             ref Dictionary<string, string> restoreProperties,
-            ref IsolateProjects isolateProjects,
+            ref ProjectIsolationMode isolateProjects,
             ref GraphBuildOptions graphBuild,
             ref string[] inputResultsCaches,
             ref string outputResultsCache,
@@ -2545,17 +2545,17 @@ private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLin
             return indexOfColon < 0 || indexOfColon == val.Length - 1;
         }
 
-        internal static IsolateProjects ProcessIsolateProjectsSwitch(string[] parameters)
+        internal static ProjectIsolationMode ProcessIsolateProjectsSwitch(string[] parameters)
         {
 
             // Before /isolate had parameters, it was treated as a boolean switch.
             // Preserve that in case anyone is using /isolate:{false|true}
             if (parameters.Length == 1 && bool.TryParse(parameters[0], out bool boolValue))
             {
-                return boolValue ? IsolateProjects.True : IsolateProjects.False;
+                return boolValue ? ProjectIsolationMode.True : ProjectIsolationMode.False;
             }
 
-            IsolateProjects isolateProjects = IsolateProjects.True;
+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True;
             foreach (string parameter in parameters)
             {
                 if (string.IsNullOrWhiteSpace(parameter))
@@ -2565,7 +2565,7 @@ internal static IsolateProjects ProcessIsolateProjectsSwitch(string[] parameters
 
                 if (parameter.Trim().Equals("Message", StringComparison.OrdinalIgnoreCase))
                 {
-                    isolateProjects = IsolateProjects.Message;
+                    isolateProjects = ProjectIsolationMode.MessageUponIsolationViolation;
                 }
                 else
                 {
diff --git a/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs b/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
index 3dcbff4f069..6307925b561 100644
--- a/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
+++ b/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
@@ -358,7 +358,7 @@ public void ErrorFromResourcesNoResources()
 
         /// <summary>
         /// If no resource string is passed to ErrorFromResources and
-        /// the isolation mode is set to IsolateProjects.Message, then
+        /// the isolation mode is set to ProjectIsolationMode.MessageUponIsolationViolation, then
         /// we should error because a required parameter is missing and
         /// note that this may be due to a target's referenced property
         /// being cached.
@@ -376,7 +376,7 @@ public void ErrorFromResourcesNoResourcesMessageIsolationMode()
             var logger = new MockLogger();
             _ = Helpers.BuildProjectContentUsingBuildManager(projectContents, logger, new BuildParameters()
             {
-                IsolateProjects = IsolateProjects.Message,
+                ProjectIsolationMode = ProjectIsolationMode.MessageUponIsolationViolation,
             });
             logger.AssertLogContains("MSB4047");
         }
