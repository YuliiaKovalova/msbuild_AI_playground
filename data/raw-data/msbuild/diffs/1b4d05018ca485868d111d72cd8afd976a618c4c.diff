diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 656f906ccfa..9fcfaaf0cdc 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -210,11 +210,19 @@ public void RoundtripTaskStartedEventArgs()
         public void RoundtripEnvironmentVariableReadEventArgs()
         {
             EnvironmentVariableReadEventArgs args = new("VarName", "VarValue");
-            args.BuildEventContext = new BuildEventContext(4, 5, 6, 7);
             Roundtrip(args,
                 e => e.Message,
-                e => e.EnvironmentVariableName,
-                e => e.BuildEventContext.ToString());
+                e => e.EnvironmentVariableName);
+        }
+
+        [Fact]
+        public void RoundtripExtendedEnvironmentVariableReadEventArgs()
+        {
+            ExtendedEnvironmentVariableReadEventArgs args = new("VarName", "VarValue", "file", 0, 0);
+            Roundtrip(
+                args,
+                e => e.Message,
+                e => e.EnvironmentVariableName);
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 64c352cd512..ec70983c7fe 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -4701,7 +4701,7 @@ public void VerifyPropertyTrackingLoggingDefault()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4733,7 +4733,7 @@ public void VerifyPropertyTrackingLoggingPropertyReassignment()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4764,7 +4764,7 @@ public void VerifyPropertyTrackingLoggingNone()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4796,7 +4796,7 @@ public void VerifyPropertyTrackingLoggingPropertyInitialValue()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4848,12 +4848,12 @@ public void VerifyPropertyTrackingLoggingEnvironmentVariableRead()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldNotContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE");
 
                     logger
@@ -4882,7 +4882,7 @@ public void VerifyPropertyTrackingLoggingUninitializedPropertyRead()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4913,12 +4913,12 @@ public void VerifyPropertyTrackingLoggingAll()
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
-                        .OfType<EnvironmentVariableReadEventArgs>()
+                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
                         .ShouldNotContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE");
 
                     logger
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 1cacd8e50f3..9ca91e4e5f0 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -105,11 +105,6 @@ internal sealed class EventSourceSink :
         /// This event is raised to log BuildCheck events.
         /// </summary>
         internal event BuildCheckEventHandler BuildCheckEventRaised;
-
-        /// <summary>
-        /// This event is raised to log environment variable read events.
-        /// </summary>
-        internal event ExtendedEnvironmentVariableReadEventHandler ExtendedEnvironmentVariableReadEventRaised;
         #endregion
 
         #region Properties
@@ -281,9 +276,6 @@ public void Consume(BuildEventArgs buildEvent)
                 case BuildCheckEventArgs buildCheckEvent:
                     RaiseBuildCheckEvent(null, buildCheckEvent);
                     break;
-                case ExtendedEnvironmentVariableReadEventArgs extendedEnvVariableReadEvent:
-                    RaiseExtendedEnvironmentVariableReadEvent(null, extendedEnvVariableReadEvent);
-                    break;
 
                 default:
                     ErrorUtilities.ThrowInternalError("Unknown event args type.");
@@ -323,7 +315,7 @@ internal void UnregisterAllEventHandlers()
             AnyEventRaised = null;
             TelemetryLogged = null;
             BuildCheckEventRaised = null;
-            ExtendedEnvironmentVariableReadEventRaised = null;
+            //ExtendedEnvironmentVariableReadEventRaised = null;
         }
 
         #endregion
@@ -905,44 +897,7 @@ private void RaiseBuildCheckEvent(object sender, BuildCheckEventArgs buildEvent)
 
             RaiseAnyEvent(sender, buildEvent);
         }
-
-        /// <summary>
-        /// Raises ExtendedEnvironmentVariableRead event to all registered loggers.
-        /// </summary>
-        private void RaiseExtendedEnvironmentVariableReadEvent(object sender, ExtendedEnvironmentVariableReadEventArgs buildEvent)
-        {
-            if (ExtendedEnvironmentVariableReadEventRaised != null)
-            {
-                try
-                {
-                    ExtendedEnvironmentVariableReadEventRaised(sender, buildEvent);
-                }
-                catch (LoggerException)
-                {
-                    // if a logger has failed politely, abort immediately
-                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
-                    // if a fellow logger is throwing in an event handler.
-                    this.UnregisterAllEventHandlers();
-                    throw;
-                }
-                catch (Exception exception)
-                {
-                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
-                    // if a fellow logger is throwing in an event handler.
-                    this.UnregisterAllEventHandlers();
-
-                    if (ExceptionHandling.IsCriticalException(exception))
-                    {
-                        throw;
-                    }
-
-                    InternalLoggerException.Throw(exception, buildEvent, "FatalErrorWhileLogging", false);
-                }
-            }
-
-            RaiseAnyEvent(sender, buildEvent);
-        }
-
+      
         /// <summary>
         /// Raises a catch-all build event to all registered loggers.
         /// </summary>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index d4e5cc036d3..91e0d0c4e2d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -336,8 +336,8 @@ public void ProcessEvaluationEventArgs(IAnalysisContext analysisContext, Extende
                     evr.EnvironmentVariableName,
                     evr.Message ?? string.Empty,
                     evr.File,
-                    evr.Line,
-                    evr.Column);
+                    evr.LineNumber,
+                    evr.ColumnNumber);
             }
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 22921695dea..e10f145f987 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -33,12 +33,13 @@ public enum BinaryLogRecordKind
         TargetSkipped,
         PropertyReassignment,
         UninitializedPropertyRead,
-        EnvironmentVariableRead,
         PropertyInitialValueSet,
         NameValueList,
         String,
         TaskParameter,
         ResponseFileUsed,
         AssemblyLoad,
+        EnvironmentVariableRead,
+        ExtendedEnvironmentVariableRead,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 6b652e1333e..2ba545bb2f5 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -311,6 +311,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.ProjectImported => ReadProjectImportedEventArgs(),
                 BinaryLogRecordKind.TargetSkipped => ReadTargetSkippedEventArgs(),
                 BinaryLogRecordKind.EnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
+                BinaryLogRecordKind.ExtendedEnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
                 BinaryLogRecordKind.ResponseFileUsed => ReadResponseFileUsedEventArgs(),
                 BinaryLogRecordKind.PropertyReassignment => ReadPropertyReassignmentEventArgs(),
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index d59bbb81e46..c24986bd742 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1247,9 +1247,9 @@ private void PrintMessage(BuildMessageEventArgs e, bool lightenText)
         {
             string nonNullMessage = null;
 
-            if (e is EnvironmentVariableReadEventArgs environmentPropertyReadEventArgs)
+            if (e is ExtendedEnvironmentVariableReadEventArgs extendedEnvironmentPropertyReadEventArgs)
             {
-                nonNullMessage = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", environmentPropertyReadEventArgs.EnvironmentVariableName, e.Message);
+                nonNullMessage = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", extendedEnvironmentPropertyReadEventArgs.EnvironmentVariableName, e.Message);
             }
 
             // Include file information if present.
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index 7f0185eee30..3418aba5a99 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -517,8 +517,8 @@ public override void MessageHandler(object sender, BuildMessageEventArgs e)
                     setColor(ConsoleColor.DarkGray);
                 }
 
-                string nonNullMessage = e is EnvironmentVariableReadEventArgs environmentDerivedProperty ?
-                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", environmentDerivedProperty.EnvironmentVariableName, e.Message)
+                string nonNullMessage = e is ExtendedEnvironmentVariableReadEventArgs extendedEnvironmentDerivedProperty
+                    ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", extendedEnvironmentDerivedProperty.EnvironmentVariableName, e.Message)
                     : e.Message ?? String.Empty;
 
                 // Include file information if present.
diff --git a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
index 1ea37b56da1..a44aa7a8496 100644
--- a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
+++ b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
@@ -9,14 +9,13 @@ namespace Microsoft.Build.Framework
     /// <summary>
     /// Arguments for the environment variable read event.
     /// </summary>
-    public sealed class ExtendedEnvironmentVariableReadEventArgs : BuildEventArgs, IExtendedBuildEventArgs
+    public sealed class ExtendedEnvironmentVariableReadEventArgs : EnvironmentVariableReadEventArgs, IExtendedBuildEventArgs
     {
         /// <summary>
         /// Default constructor. Used for deserialization.
         /// </summary>
-        internal ExtendedEnvironmentVariableReadEventArgs()
-            : this("undefined")
-        { }
+        public ExtendedEnvironmentVariableReadEventArgs()
+            : this("undefined") { }
 
         /// <summary>
         /// This constructor specifies only type of extended data.
@@ -51,19 +50,13 @@ public ExtendedEnvironmentVariableReadEventArgs(
             int column,
             string? helpKeyword = null,
             string? senderName = null)
-            : base(environmentVarValue, helpKeyword, senderName)
+            : base(environmentVarName, environmentVarValue, helpKeyword, senderName)
         {
-            EnvironmentVariableName = environmentVarName;
-            File = file;
-            Line = line;
-            Column = column;
+            FileName = file;
+            LineNumber = line;
+            ColumnNumber = column;
         }
 
-        /// <summary>
-        /// The name of the environment variable that was read.
-        /// </summary>
-        public string EnvironmentVariableName { get; set; } = string.Empty;
-
         /// <summary>
         /// The line number where environment variable is used.
         /// </summary>
@@ -77,7 +70,7 @@ public ExtendedEnvironmentVariableReadEventArgs(
         /// <summary>
         /// The file name where environment variable is used.
         /// </summary>
-        public string File { get; set; } = string.Empty;
+        public string FileName { get; set; } = string.Empty;
 
         internal override void WriteToStream(BinaryWriter writer)
         {
@@ -85,7 +78,7 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.Write(EnvironmentVariableName);
             writer.Write7BitEncodedInt(Line);
             writer.Write7BitEncodedInt(Column);
-            writer.WriteOptionalString(File);
+            writer.WriteOptionalString(FileName);
 
             writer.WriteExtendedBuildEventData(this);
         }
@@ -94,9 +87,9 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         {
             base.CreateFromStream(reader, version);
             EnvironmentVariableName = reader.ReadString();
-            Line = reader.Read7BitEncodedInt();
-            Column = reader.Read7BitEncodedInt();
-            File = reader.ReadOptionalString() ?? string.Empty;
+            LineNumber = reader.Read7BitEncodedInt();
+            ColumnNumber = reader.Read7BitEncodedInt();
+            FileName = reader.ReadOptionalString() ?? string.Empty;
 
             reader.ReadExtendedBuildEventData(this);
         }
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 76ed837a2fa..0d8e722a06b 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -88,11 +88,6 @@ namespace Microsoft.Build.Framework
     /// </summary>
     internal delegate void BuildCheckEventHandler(object sender, BuildCheckEventArgs e);
 
-    /// <summary>
-    /// Type of handler for ExtendedEnvironmentVariableReadEvent events.
-    /// </summary>
-    internal delegate void ExtendedEnvironmentVariableReadEventHandler(object sender, ExtendedEnvironmentVariableReadEventArgs e);
-
     /// <summary>
     /// This interface defines the events raised by the build engine.
     /// Loggers use this interface to subscribe to the events they
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index efbfc9f9b12..9159c648007 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -242,9 +242,9 @@ internal enum LoggingEventType : int
         BuildCheckAcquisitionEvent = 39,
 
         /// <summary>
-        /// Event is <see cref="ExtendedEnvironmentVariableReadEventArgs"/>.
+        /// Event is <see cref="ExtendedEnvironmentVariableReadEvent"/>.
         /// </summary>
-        ExtendedEnvironmentVariableReadEventArgs = 40
+        ExtendedEnvironmentVariableReadEvent = 40
     }
     #endregion
 
@@ -294,7 +294,7 @@ internal abstract class LogMessagePacketBase : INodePacket
              { typeof(ExtendedBuildMessageEventArgs), LoggingEventType.ExtendedBuildMessageEvent },
              { typeof(CriticalBuildMessageEventArgs), LoggingEventType.CriticalBuildMessage },
              { typeof(ExtendedCriticalBuildMessageEventArgs), LoggingEventType.ExtendedCriticalBuildMessageEvent },
-             { typeof(ExtendedEnvironmentVariableReadEventArgs), LoggingEventType.ExtendedEnvironmentVariableReadEventArgs },
+             { typeof(ExtendedEnvironmentVariableReadEventArgs), LoggingEventType.ExtendedEnvironmentVariableReadEvent },
              { typeof(MetaprojectGeneratedEventArgs), LoggingEventType.MetaprojectGenerated },
              { typeof(PropertyInitialValueSetEventArgs), LoggingEventType.PropertyInitialValueSet },
              { typeof(PropertyReassignmentEventArgs), LoggingEventType.PropertyReassignment },
@@ -690,7 +690,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.ExtendedBuildWarningEvent => new ExtendedBuildWarningEventArgs(),
                 LoggingEventType.ExtendedBuildMessageEvent => new ExtendedBuildMessageEventArgs(),
                 LoggingEventType.ExtendedCriticalBuildMessageEvent => new ExtendedCriticalBuildMessageEventArgs(),
-                LoggingEventType.ExtendedEnvironmentVariableReadEventArgs => new ExtendedEnvironmentVariableReadEventArgs(),
+                LoggingEventType.ExtendedEnvironmentVariableReadEvent => new ExtendedEnvironmentVariableReadEventArgs(),
                 LoggingEventType.ExternalProjectStartedEvent => new ExternalProjectStartedEventArgs(null, null, null, null, null),
                 LoggingEventType.ExternalProjectFinishedEvent => new ExternalProjectFinishedEventArgs(null, null, null, null, false),
                 LoggingEventType.CriticalBuildMessage => new CriticalBuildMessageEventArgs(null, null, null, -1, -1, -1, -1, null, null, null),
