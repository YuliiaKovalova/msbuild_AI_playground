diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index b76014c4bca..4ccb35c6a2d 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -73,6 +73,41 @@ public void CanUnzip()
             }
         }
 
+        [Fact]
+        public void CanUnzip_ExplicitDirectoryEntries()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder source = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFolder destination = testEnvironment.CreateFolder(createFolder: false);
+                testEnvironment.CreateFile(source, "BE78A17D30144B549D21F71D5C633F7D.txt", "file1");
+                testEnvironment.CreateFile(source, "A04FF4B88DF14860B7C73A8E75A4FB76.txt", "file2");
+                TransientTestFolder emptyDir = source.CreateDirectory("emptyDir");
+                TransientTestFolder subDir = source.CreateDirectory("subDir");
+                subDir.CreateFile("F83E9633685494E53BEF3794EDEEE6A6.txt", "file3");
+                subDir.CreateFile("21D6D4596067723B3AC5DF9A8B3CBFE7.txt", "file4");
+
+                TransientZipArchive zipArchive = TransientZipArchive.Create(source, testEnvironment.CreateFolder(createFolder: true));
+
+                Unzip unzip = new Unzip
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFolder = new TaskItem(destination.Path),
+                    OverwriteReadOnlyFiles = true,
+                    SkipUnchangedFiles = false,
+                    SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
+                };
+
+                unzip.Execute().ShouldBeTrue(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain(Path.Combine(destination.Path, "BE78A17D30144B549D21F71D5C633F7D.txt"), () => _mockEngine.Log);
+                _mockEngine.Log.ShouldContain(Path.Combine(destination.Path, "A04FF4B88DF14860B7C73A8E75A4FB76.txt"), () => _mockEngine.Log);
+                _mockEngine.Log.ShouldContain(Path.Combine(destination.Path, "subdir", "F83E9633685494E53BEF3794EDEEE6A6.txt"), () => _mockEngine.Log);
+                _mockEngine.Log.ShouldContain(Path.Combine(destination.Path, "subdir", "21D6D4596067723B3AC5DF9A8B3CBFE7.txt"), () => _mockEngine.Log);
+                Directory.Exists(Path.Combine(destination.Path, "emptyDir"));
+            }
+        }
+
         [PlatformSpecific(TestPlatforms.Windows)] // Can't figure out how to make CreateDirectory throw on non-Windows
         [Fact]
         public void LogsErrorIfDirectoryCannotBeCreated()
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 39979ca4834..b78d60de283 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -131,6 +131,15 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector
             {
                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));
 
+                // Zip archives can have directory entries listed explicitly.
+                // If this entry is a directory we should create the it and move to the next entry.
+                if (Path.GetFileName(destinationPath.FullName).Length == 0)
+                {
+                    // The entry is a directory
+                    Directory.CreateDirectory(destinationPath.FullName);
+                    continue;
+                }
+
                 if (!destinationPath.FullName.StartsWith(destinationDirectory.FullName, StringComparison.OrdinalIgnoreCase))
                 {
                     // ExtractToDirectory() throws an IOException for this but since we're extracting one file at a time
