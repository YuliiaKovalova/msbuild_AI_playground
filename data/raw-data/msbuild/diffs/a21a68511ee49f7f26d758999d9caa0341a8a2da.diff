diff --git a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs
index b679bcf105a..12d03329609 100644
--- a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs
+++ b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs
@@ -136,13 +136,23 @@ static async Task<LinkStatus> WaitForConnection(NodePipeServer pipeServer, Cance
 
         private async Task RunNodeEndpointsAsync(CancellationToken cancellationToken)
         {
+            // Setup data shared between all endpoints.
+            string pipeName = NamedPipeUtil.GetRarNodeEndpointPipeName(_handshake);
+            NodePacketFactory packetFactory = new();
+            packetFactory.RegisterPacketHandler(NodePacketType.RarNodeExecuteRequest, RarNodeExecuteRequest.FactoryForDeserialization, null);
+
             OutOfProcRarNodeEndpoint[] endpoints = new OutOfProcRarNodeEndpoint[_maxNumberOfConcurrentTasks];
 
             // Validate all endpoint pipe handles successfully initialize before running any read loops.
-            // This allows us to bail out in the event where we can't control every pipe instance. 
+            // This allows us to bail out in the event where we can't control every pipe instance.
             for (int i = 0; i < endpoints.Length; i++)
             {
-                endpoints[i] = new OutOfProcRarNodeEndpoint(endpointId: i + 1, _handshake, _maxNumberOfConcurrentTasks);
+                endpoints[i] = new OutOfProcRarNodeEndpoint(
+                        endpointId: i + 1,
+                        pipeName,
+                        _handshake,
+                        _maxNumberOfConcurrentTasks,
+                        packetFactory);
             }
 
             Task[] endpointTasks = new Task[endpoints.Length];
diff --git a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs
index 4a6cdef727a..666ce49b5c5 100644
--- a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs
+++ b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs
@@ -6,7 +6,6 @@
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Tasks.AssemblyDependency
 {
@@ -19,13 +18,15 @@ internal sealed class OutOfProcRarNodeEndpoint : IDisposable
 
         private readonly NodePipeServer _pipeServer;
 
-        internal OutOfProcRarNodeEndpoint(int endpointId, ServerNodeHandshake handshake, int maxNumberOfServerInstances)
+        internal OutOfProcRarNodeEndpoint(
+            int endpointId,
+            string pipeName,
+            ServerNodeHandshake handshake,
+            int maxNumberOfServerInstances,
+            NodePacketFactory packetFactory)
         {
             _endpointId = endpointId;
-            _pipeServer = new NodePipeServer(NamedPipeUtil.GetRarNodeEndpointPipeName(handshake), handshake, maxNumberOfServerInstances);
-
-            NodePacketFactory packetFactory = new();
-            packetFactory.RegisterPacketHandler(NodePacketType.RarNodeExecuteRequest, RarNodeExecuteRequest.FactoryForDeserialization, null);
+            _pipeServer = new NodePipeServer(pipeName, handshake, maxNumberOfServerInstances);
             _pipeServer.RegisterPacketFactory(packetFactory);
         }
 
