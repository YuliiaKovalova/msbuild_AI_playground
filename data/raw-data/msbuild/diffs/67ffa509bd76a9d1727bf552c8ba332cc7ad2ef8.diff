diff --git a/src/Tasks/Microsoft.Common.CrossTargeting.targets b/src/Tasks/Microsoft.Common.CrossTargeting.targets
index 1c6f70ed3fe..8cfe87dc672 100644
--- a/src/Tasks/Microsoft.Common.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.Common.CrossTargeting.targets
@@ -42,7 +42,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <TargetPlatformMonikers>@(_TargetFrameworkInfo->'%(TargetPlatformMonikers)')</TargetPlatformMonikers>
         <AdditionalPropertiesFromProject>$(_AdditionalPropertiesFromProject)</AdditionalPropertiesFromProject>
         <HasSingleTargetFramework>false</HasSingleTargetFramework>
-        <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->
+        <!-- indicate to caller that project is RID agnostic so that a global property $(RuntimeIdentifiers) value can be removed -->
         <IsRidAgnostic>false</IsRidAgnostic>
         <IsRidAgnostic Condition=" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' ">true</IsRidAgnostic>
         <!-- Extract necessary information for SetPlatform negotiation -->
@@ -79,18 +79,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
   ============================================================
-                                       DispatchToInnerBuilds
+                      DispatchToInnerBuilds
 
-     Builds this project with /t:$(InnerTarget) /p:TargetFramework=X for each
-     value X in $(TargetFrameworks)
+    Builds this project with /t:$(InnerTarget) /p:TargetFramework=X for each
+    value X in $(TargetFrameworks)
 
-     [IN]
-     $(TargetFrameworks) - Semicolon delimited list of target frameworks.
-     $(InnerTargets) - The targets to build for each target framework
+    [IN]
+    $(TargetFrameworks) - Semicolon delimited list of target frameworks.
+    $(InnerTargets) - The targets to build for each target framework
 
-     [OUT]
-     @(InnerOutput) - The combined output items of the inner targets across
-                      all target frameworks..
+    [OUT]
+    @(InnerOutput) - The combined output items of the inner targets across
+                    all target frameworks.
   ============================================================
   -->
   <Target Name="DispatchToInnerBuilds"
@@ -107,21 +107,21 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
   ============================================================
-                                       Build
+                            Build
 
-   Cross-targeting version of Build.
+    Cross-targeting version of Build.
 
-   [IN]
-   $(TargetFrameworks) - Semicolon delimited list of target frameworks.
+    [IN]
+    $(TargetFrameworks) - Semicolon delimited list of target frameworks.
 
-   $(InnerTargets)     - The targets to build for each target framework. Defaults
-                         to 'Build' if unset, but allows override to support
-                         `msbuild /p:InnerTargets=X;Y;Z` which will build X, Y,
-                         and Z targets for each target framework.
+    $(InnerTargets)     - The targets to build for each target framework. Defaults
+                          to 'Build' if unset, but allows override to support
+                          `msbuild /p:InnerTargets=X;Y;Z` which will build X, Y,
+                          and Z targets for each target framework.
 
-   [OUT]
-   @(InnerOutput) - The combined output items of the inner targets across
-                    all builds.
+    [OUT]
+    @(InnerOutput) - The combined output items of the inner targets across
+                     all builds.
   ============================================================
   -->
   <Target Name="Build" DependsOnTargets="_SetBuildInnerTarget;DispatchToInnerBuilds" />
@@ -135,19 +135,19 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
   ============================================================
-                                       Clean
+                            Clean
 
-   Cross-targeting version of clean.
+    Cross-targeting version of clean.
 
-   Inner-build dispatch is a clone of DispatchToInnerBuilds;
-   the only reason it's replicated is that it must be a different
-   target to be run in the same build (e.g. by Rebuild or by
-   a /t:Clean;Build invocation.
+    Inner-build dispatch is a clone of 'DispatchToInnerBuilds';
+    the only reason it's replicated is that it must be a different
+    target to be run in the same build (e.g. by Rebuild or by
+    a `/t:Clean;Build` invocation.
   ============================================================
   -->
   <Target Name="Clean"
           DependsOnTargets="_ComputeTargetFrameworkItems">
-    <!-- If this logic is changed, also update DispatchToInnerBuilds -->
+    <!-- If this logic is changed, also update 'DispatchToInnerBuilds' -->
     <MSBuild Projects="@(_InnerBuildProjects)"
              Condition="'@(_InnerBuildProjects)' != '' "
              Targets="Clean"
@@ -156,16 +156,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
   ============================================================
-                                       Rebuild
+                            Rebuild
 
-   Cross-targeting version of rebuild.
+    Cross-targeting version of rebuild.
   ============================================================
   -->
   <Target Name="Rebuild" DependsOnTargets="Clean;Build" />
 
-  <!--
-    This will import NuGet restore targets. We need restore to work before any package assets are available.
-  -->
+  <!-- This will import NuGet restore targets. We need restore to work before any package assets are available. -->
   <PropertyGroup>
     <MSBuildUseVisualStudioDirectoryLayout Condition="'$(MSBuildUseVisualStudioDirectoryLayout)'==''">$([MSBuild]::IsRunningFromVisualStudio())</MSBuildUseVisualStudioDirectoryLayout>
     <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$([MSBuild]::GetToolsDirectory32())\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</NuGetRestoreTargets>
@@ -176,9 +174,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(CustomAfterMicrosoftCommonCrossTargetingTargets)" Condition="'$(CustomAfterMicrosoftCommonCrossTargetingTargets)' != '' and Exists('$(CustomAfterMicrosoftCommonCrossTargetingTargets)')"/>
 
-  <!--
-    Allow extensions like NuGet restore to work before any package assets are available.
-  -->
+  <!-- Allow extensions like NuGet restore to work before any package assets are available. -->
   <PropertyGroup>
     <ImportByWildcardAfterMicrosoftCommonCrossTargetingTargets Condition="'$(ImportByWildcardAfterMicrosoftCommonCrossTargetingTargets)' == ''">true</ImportByWildcardAfterMicrosoftCommonCrossTargetingTargets>
   </PropertyGroup>
@@ -187,15 +183,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
           Condition="'$(ImportByWildcardAfterMicrosoftCommonCrossTargetingTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.CrossTargeting.targets\ImportAfter')"/>
 
   <!--
-    Import project extensions which usually come from packages.  Package management systems will create a file at:
-      $(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.targets
+      Import project extensions which usually come from packages.  Package management systems will create a file at:
+        '$(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.targets'
 
-    Each package management system should use a unique moniker to avoid collisions.  It is a wild-card iport so the package
-    management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
+      Each package management system should use a unique moniker to avoid collisions.  It is a wild-card iport so the package
+      management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
 
-    This is the same import that would happen in an inner (non-cross targeting) build. Package management systems are responsible for generating
-    appropriate conditions based on $(IsCrossTargetingBuild) to pull in only those package targets that are meant to participate in a cross-targeting
-    build.
+      This is the same import that would happen in an inner (non-cross targeting) build. Package management systems are responsible
+      for generating appropriate conditions based on $(IsCrossTargetingBuild) to pull in only those package targets that are meant
+      to participate in a cross-targeting build.
   -->
   <PropertyGroup>
     <ImportProjectExtensionTargets Condition="'$(ImportProjectExtensionTargets)' == ''">true</ImportProjectExtensionTargets>
@@ -208,9 +204,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </PropertyGroup>
 
   <!--
-        Determine the path to the directory build targets file if the user did not disable $(ImportDirectoryBuildTargets) and
-        they did not already specify an absolute path to use via $(DirectoryBuildTargetsPath)
-    -->
+      Determine the path to the directory build targets file if the user did not disable $(ImportDirectoryBuildTargets) and
+      they did not already specify an absolute path to use via $(DirectoryBuildTargetsPath)
+  -->
   <PropertyGroup Condition="'$(ImportDirectoryBuildTargets)' == 'true' and '$(DirectoryBuildTargetsPath)' == ''">
     <_DirectoryBuildTargetsFile Condition="'$(_DirectoryBuildTargetsFile)' == ''">Directory.Build.targets</_DirectoryBuildTargetsFile>
     <_DirectoryBuildTargetsBasePath Condition="'$(_DirectoryBuildTargetsBasePath)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), '$(_DirectoryBuildTargetsFile)'))</_DirectoryBuildTargetsBasePath>
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index a8ccbeec33e..32a850ca130 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -130,7 +130,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     (eg. obj\Debug). If this property is overridden, then setting BaseIntermediateOutputPath has no effect.
 
     Ensure any and all path property has a trailing slash, so it can be concatenated.
-    -->
+  -->
 
   <PropertyGroup>
     <!-- Example, AnyCPU -->
@@ -784,10 +784,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <!--
     ***********************************************************************************************
     ***********************************************************************************************
-                                                                Build Section
+                                            Build Section
     ***********************************************************************************************
     ***********************************************************************************************
-    -->
+  -->
 
   <Target Name="_AddOutputPathToGlobalPropertiesToRemove">
     <PropertyGroup>
@@ -797,15 +797,16 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
     ============================================================
-                                        _CheckForInvalidConfigurationAndPlatform
+              _CheckForInvalidConfigurationAndPlatform
+
+    This target checks for errors in statically defined build properties.
+    By setting BeforeTargets, we try to ensure that the target runs before any build related targets.
 
-    This target checks for errors in statically defined properties.  By setting BeforeTargets, we try
-    to ensure that the target runs before any build related targets.
     If your target requires this check and is running as a BeforeTargets of one of the first targets
     of $(BuildDependsOn), $(RebuildDependsOn), or $(CleanDependsOn) you will need to set your DependsOn
     to this target.
     ============================================================
-    -->
+  -->
   <Target
       Name="_CheckForInvalidConfigurationAndPlatform"
       BeforeTargets="$(BuildDependsOn);Build;$(RebuildDependsOn);Rebuild;$(CleanDependsOn);Clean">
@@ -827,9 +828,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <Error Condition="'$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)')" Text="The IntermediateOutputPath must end with a trailing slash." />
     <Error Condition="'$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)')" Text="The BaseIntermediateOutputPath must end with a trailing slash." />
 
-    <!-- Also update the value of PlatformTargetAsMSBuildArchitecture per the value of Prefer32Bit.  We are doing
-         this here because Prefer32Bit may be set anywhere in the targets, so we can't depend on it having the
-         correct value when we're trying to figure out PlatformTargetAsMSBuildArchitecture -->
+    <!--
+      Also update the value of PlatformTargetAsMSBuildArchitecture per the value of Prefer32Bit.  We are doing
+      this here because Prefer32Bit may be set anywhere in the targets, so we can't depend on it having the
+      correct value when we're trying to figure out PlatformTargetAsMSBuildArchitecture
+    -->
     <PropertyGroup Condition="'$(Prefer32Bit)' == 'true' and ('$(PlatformTarget)' == 'AnyCPU' or '$(PlatformTarget)' == '') and '$(PlatformTargetAsMSBuildArchitectureExplicitlySet)' != 'true'">
       <PlatformTargetAsMSBuildArchitecture>x86</PlatformTargetAsMSBuildArchitecture>
     </PropertyGroup>
@@ -847,12 +850,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <!--
       Log a warning if:
         1. $(EnableBaseIntermediateOutputPathMismatchWarning) is 'true'
-        2. $(BaseIntermediateOutputPath) was set in the body of a project after its default value was set in Microsoft.Common.props
+        2. $(BaseIntermediateOutputPath) was set in the body of a project after its default value was set in 'Microsoft.Common.props'
         3. $(BaseIntermediateOutputPath) is not the same as $(MSBuildProjectExtensionsPath)
 
       Similar to the error above, there are cases when users set $(BaseIntermediateOutputPath) in the body of their project and things build but only by coincidence.
-      MSBuild does not know if $(BaseIntermediateOutputPath) changing would cause problems so tools like NuGet must set $(EnableBaseIntermediateOutputPathMismatchWarning)
-      to 'true'.
+      MSBuild does not know if $(BaseIntermediateOutputPath) changing would cause problems so tools like NuGet must set $(EnableBaseIntermediateOutputPathMismatchWarning) to 'true'.
     -->
     <Warning Condition=" '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' "
              Code="MSB3539"
@@ -5652,9 +5654,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
     ============================================================
-                                        CleanPublishFolder
+                        CleanPublishFolder
     ============================================================
-    -->
+  -->
   <Target
       Name="CleanPublishFolder">
 
diff --git a/src/Tasks/Microsoft.Common.props b/src/Tasks/Microsoft.Common.props
index 92a65cb0f0a..5fc250c1c06 100644
--- a/src/Tasks/Microsoft.Common.props
+++ b/src/Tasks/Microsoft.Common.props
@@ -33,14 +33,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
       Prepare to import project extensions which usually come from packages.  Package management systems will create a file at:
-        $(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.props
+        '$(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.props'
 
       Each package management system should use a unique moniker to avoid collisions.  It is a wild-card import so the package
       management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
   -->
   <PropertyGroup>
     <!--
-        The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets
+        The declaration of $(BaseIntermediateOutputPath) had to be moved up from 'Microsoft.Common.CurrentVersion.targets'
         in order for the $(MSBuildProjectExtensionsPath) to use it as a default.
     -->
     <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)'=='' ">obj\</BaseIntermediateOutputPath>
@@ -49,8 +49,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <MSBuildProjectExtensionsPath Condition="'$(MSBuildProjectExtensionsPath)' == '' ">$(BaseIntermediateOutputPath)</MSBuildProjectExtensionsPath>
     <!--
-        Import paths that are relative default to be relative to the importing file.  However, since MSBuildExtensionsPath
-        defaults to BaseIntermediateOutputPath we expect it to be relative to the project directory.  So if the path is relative
+        Import paths that are relative default to be relative to the importing file.  However, since $(MSBuildExtensionsPath)
+        defaults to $(BaseIntermediateOutputPath) we expect it to be relative to the project directory.  So if the path is relative
         it needs to be made absolute based on the project directory.
     -->
     <MSBuildProjectExtensionsPath Condition="'$([System.IO.Path]::IsPathRooted($(MSBuildProjectExtensionsPath)))' == 'false'">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(MSBuildProjectExtensionsPath)'))</MSBuildProjectExtensionsPath>
@@ -61,17 +61,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).*.props" Condition="'$(ImportProjectExtensionProps)' == 'true' and exists('$(MSBuildProjectExtensionsPath)')" />
 
-  <!--
-      Import wildcard "ImportBefore" props files if we're actually in a 12.0+ project (rather than a project being
-      treated as 4.0)
-  -->
+  <!-- Import wildcard 'ImportBefore' props files if we're actually in a 12.0+ project (rather than a project being treated as 4.0) -->
   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' != ''">
     <!--
-        Wildcard imports come from $(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props.d folder.
-        This is very similar to the same extension point used in Microsoft.Common.targets, which is located in
-        the $(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ directory. Unfortunately, there
-        is already a file named "Microsoft.Common.props" in this directory so we have to have a slightly different
-        directory name to hold extensions.
+        Wildcard imports come from '$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props\' folder.
+        This is same as the extension point used in 'Microsoft.Common.targets', which is located in
+        the '$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\' directory.
     -->
     <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBeforeMicrosoftCommonProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore')"/>
     <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*" Condition="'$(ImportByWildcardBeforeMicrosoftCommonProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore')"/>
@@ -86,34 +81,38 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
       but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
       the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-      property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
+      property, $(MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
       as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
       targets.
   -->
   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(VisualStudioVersion)' != '' and '$(VisualStudioVersion)' &gt;= '12.0')">
     <!--
-        Reset VisualStudioVersion if it's 12.0+: Should be 10.0 if VS 2010 is installed or 11.0 otherwise,
+        Reset $(VisualStudioVersion) if it's 12.0+: Should be 10.0 if VS 2010 is installed or 11.0 otherwise,
         but since we don't have a good way of telling whether VS 2010 is installed, make it 11.0 if
         VS 2012 is installed or 10.0 otherwise.  The reset should be safe because if it was already
-        set to something (e.g. 11.0 in a VS 2012 command prompt) then MSBuild's internal
-        VisualStudioVersion-defaulting code should never come into the picture, so the only way it could
-        be 12.0+ when building a TV 12.0 project (because we're in this file) using MSBuild 4.5 (because
-        MSBuildAssemblyVersion hasn't been set) is if it's a TV 12.0 project on an empty command prompt.
+        set to something (e.g. 11.0 in a VS 2012 command prompt) then MSBuild's internal VS version
+        defaulting code should never come into the picture, so the only way it could be 12.0+
+        when building a TV 12.0 project (because we're in this file) using MSBuild 4.5 (because
+        $(MSBuildAssemblyVersion) hasn't been set) is if it's a TV 12.0 project on an empty command prompt.
     -->
     <VisualStudioVersion Condition="Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props')">11.0</VisualStudioVersion>
     <VisualStudioVersion Condition="!Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props')">10.0</VisualStudioVersion>
   </PropertyGroup>
 
-  <!-- If building using 4.X MSBuild, we want to act like this project is TV 4.0, so override
-      the custom extensibility target locations with the hard-coded 4.0 equivalent. -->
+  <!--
+      If building using 4.X MSBuild, we want to act like this project is TV 4.0, so override
+      the custom extensibility target locations with the hard-coded 4.0 equivalent.
+  -->
   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
     <CustomBeforeMicrosoftCommonProps Condition="'$(CustomBeforeMicrosoftCommonProps)'==''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.$(MSBuildThisFile)</CustomBeforeMicrosoftCommonProps>
     <CustomAfterMicrosoftCommonProps Condition="'$(CustomAfterMicrosoftCommonProps)'==''">$(MSBuildExtensionsPath)\v4.0\Custom.After.$(MSBuildThisFile)</CustomAfterMicrosoftCommonProps>
   </PropertyGroup>
 
-  <!-- If building using 4.X MSBuild, we want to act like this project is TV 4.0, so import
-      Microsoft.Common.props from the 4.0 location, and make sure everything else in here is
-      set up such that if it's defaulted to something there, it won't be overridden here. -->
+  <!--
+      If building using 4.X MSBuild, we want to act like this project is TV 4.0, so import
+      'Microsoft.Common.props' from the 4.0 location, and make sure everything else in here is
+      set up such that if it's defaulted to something there, it won't be overridden here.
+  -->
   <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props" Condition="'$(MSBuildAssemblyVersion)' == '' and Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props')" />
 
   <PropertyGroup>
@@ -123,15 +122,17 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
       Only import the extension targets if we're actually in a 12.0 project here (rather than one we're attempting
-      to treat as 4.0) OR if the Dev11 Microsoft.Common.props don't exist.  If it's a 12.0 project we're redirecting
-      to 4.0 and the Dev11 Microsoft.Common.props do exist, the extension targets will have been imported already
+      to treat as 4.0) OR if the Dev11 'Microsoft.Common.props' don't exist.  If it's a 12.0 project we're redirecting
+      to 4.0 and the Dev11 'Microsoft.Common.props' do exist, the extension targets will have been imported already
       so there's no need to import them twice.
   -->
   <Import Project="$(CustomBeforeMicrosoftCommonProps)" Condition="'$(CustomBeforeMicrosoftCommonProps)' != '' and Exists('$(CustomBeforeMicrosoftCommonProps)') and ('$(MSBuildAssemblyVersion)' != '' or !Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props'))" />
 
-  <!-- This is used to determine whether Microsoft.Common.targets needs to import
-      Microsoft.Common.props itself, or whether it has been imported previously,
-      e.g. by the project itself. -->
+  <!--
+      This is used to determine whether 'Microsoft.Common.targets' needs to import
+      'Microsoft.Common.props' itself, or whether it has been imported previously,
+      e.g. by the project itself.
+  -->
   <PropertyGroup>
     <MicrosoftCommonPropsHasBeenImported>true</MicrosoftCommonPropsHasBeenImported>
   </PropertyGroup>
@@ -150,24 +151,19 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <!--
       Only import the extension targets if we're actually in a 12.0 project here (rather than one we're attempting
-      to treat as 4.0) OR if the Dev11 Microsoft.Common.props don't exist.  If it's a 12.0 project we're redirecting
-      to 4.0 and the Dev11 Microsoft.Common.props do exist, the extension targets will have been imported already
+      to treat as 4.0) OR if the Dev11 'Microsoft.Common.props' don't exist.  If it's a 12.0 project we're redirecting
+      to 4.0 and the Dev11 'Microsoft.Common.props' do exist, the extension targets will have been imported already
       so there's no need to import them twice.
   -->
   <Import Project="$(CustomAfterMicrosoftCommonProps)" Condition="'$(CustomAfterMicrosoftCommonProps)' != '' and Exists('$(CustomAfterMicrosoftCommonProps)') and ('$(MSBuildAssemblyVersion)' != '' or !Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props'))" />
 
-  <!--
-      Import wildcard "ImportAfter" props files if we're actually in a 12.0+ project (rather than a project being
-      treated as 4.0)
-  -->
+  <!-- Import wildcard 'ImportAfter' props files if we're actually in a 12.0+ project (rather than a project being treated as 4.0) -->
   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' != ''">
     <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftCommonProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter')"/>
     <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftCommonProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter')"/>
   </ImportGroup>
 
-  <!--
-      Import NuGet.props file.
-  -->
+  <!-- Import 'NuGet.props' file which houses NuGet specific project extensions such as 'Directory.Packages.props' import -->
   <PropertyGroup>
     <MSBuildUseVisualStudioDirectoryLayout Condition="'$(MSBuildUseVisualStudioDirectoryLayout)'==''">$([MSBuild]::IsRunningFromVisualStudio())</MSBuildUseVisualStudioDirectoryLayout>
     <NuGetPropsFile Condition="'$(NuGetPropsFile)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$([MSBuild]::GetToolsDirectory32())\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.props</NuGetPropsFile>
diff --git a/src/Tasks/Microsoft.Common.targets b/src/Tasks/Microsoft.Common.targets
index 1293885ee03..5a18904b42f 100644
--- a/src/Tasks/Microsoft.Common.targets
+++ b/src/Tasks/Microsoft.Common.targets
@@ -41,15 +41,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     </Otherwise>
   </Choose>
 
+  <!--
+      Overrides for the Microsoft.Common.targets extension targets. Used to make sure that only the imports we specify
+      (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default.
+
+      NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.CSharp.targets because those two files
+      import Microsoft.Common.targets from the current directory and thus don't get the benefit of the redirections, so for
+      any changes to this logic in this file, please also edit the other two.
+  -->
   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <!--
-        Overrides for the Microsoft.Common.targets extension targets. Used to make sure that only the imports we specify
-        (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default.
-
-        NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.CSharp.targets because those two files
-        import Microsoft.Common.targets from the current directory and thus don't get the benefit of the redirections, so for
-        any changes to this logic in this file, please also edit the other two.
-    -->
     <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportByWildcardBeforeMicrosoftCommonTargets)</ImportByWildcardBefore40MicrosoftCommonTargets>
     <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportByWildcardBefore40MicrosoftCommonTargets>
 
@@ -71,17 +71,17 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <CustomAfterMicrosoftCommonTargets Condition="'$(CustomAfterMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.After.Microsoft.Common.targets</CustomAfterMicrosoftCommonTargets>
   </PropertyGroup>
 
+  <!--
+      Overrides for the Microsoft.NETFramework.props extension targets. Used to make sure that only the imports we specify
+      (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Required because
+      Microsoft.Common.targets imports it from the current directory, so we don't get a chance to redirect these in its
+      own redirection targets.
+
+      NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.CSharp.targets because those two files
+      import Microsoft.Common.targets from the current directory and thus don't get the benefit of these redirections either,
+      so for any changes to this logic in this file, please also edit the other two.
+  -->
   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetFrameworkIdentifier)' == 'Silverlight' or ('$(TargetFrameworkIdentifier)' == '' and ('$(TargetRuntime)' == 'Managed' or '$(TargetRuntime)' == '')))">
-    <!--
-        Overrides for the Microsoft.NETFramework.props extension targets. Used to make sure that only the imports we specify
-        (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Required because
-        Microsoft.Common.targets imports it from the current directory, so we don't get a chance to redirect these in its
-        own redirection targets.
-
-        NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.CSharp.targets because those two files
-        import Microsoft.Common.targets from the current directory and thus don't get the benefit of these redirections either,
-        so for any changes to this logic in this file, please also edit the other two.
-    -->
     <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardBeforeMicrosoftNetFrameworkProps)</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
     <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
 
@@ -151,9 +151,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
   </ImportGroup>
 
-  <!-- Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the
-       (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not
-       installed.  -->
+  <!--
+      Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the
+      (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not installed.
+  -->
   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
     <FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
   </PropertyGroup>
