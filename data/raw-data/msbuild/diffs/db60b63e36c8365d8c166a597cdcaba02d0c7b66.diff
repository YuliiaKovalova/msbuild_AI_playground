diff --git a/src/Build.UnitTests/Utilities_Tests.cs b/src/Build.UnitTests/Utilities_Tests.cs
index 7f3f2601bf4..016468e5fe2 100644
--- a/src/Build.UnitTests/Utilities_Tests.cs
+++ b/src/Build.UnitTests/Utilities_Tests.cs
@@ -94,16 +94,8 @@ public void CommentsInPreprocessing()
 </Project>");
                 File.WriteAllText(input, content);
 
-#if FEATURE_GET_COMMANDLINE
                 Assert.Equal(MSBuildApp.ExitType.Success, MSBuildApp.Execute(@"c:\bin\msbuild.exe """ + input +
                     (NativeMethodsShared.IsUnixLike ? @""" -pp:""" : @""" /pp:""") + output + @""""));
-#else
-                Assert.Equal(
-                    MSBuildApp.ExitType.Success,
-                    MSBuildApp.Execute(
-                        new[] { @"c:\bin\msbuild.exe", '"' + input + '"',
-                    '"' + (NativeMethodsShared.IsUnixLike ? "-pp:" : "/pp:") + output + '"'}));
-#endif
 
                 bool foundDoNotModify = false;
                 foreach (string line in File.ReadLines(output))
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index a327906f7ef..ce804d7da97 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -300,9 +300,7 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Environment::GetLogicalDrives", environmentType);
 
 // All the following properties only have getters
-#if FEATURE_GET_COMMANDLINE
                         availableStaticMethods.TryAdd("System.Environment::CommandLine", environmentType);
-#endif
 #if FEATURE_64BIT_ENVIRONMENT_QUERY
                         availableStaticMethods.TryAdd("System.Environment::Is64BitOperatingSystem", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::Is64BitProcess", environmentType);
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index c9dbd905e72..2acdaa2a076 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -456,31 +456,17 @@ public void GetLengthOfSwitchIndicatorTest()
         [InlineData(@"/h")]
         public void Help(string indicator)
         {
-            MSBuildApp.Execute(
-#if FEATURE_GET_COMMANDLINE
-                @$"c:\bin\msbuild.exe {indicator} "
-#else
-                new [] {@"c:\bin\msbuild.exe", indicator}
-#endif
-            ).ShouldBe(MSBuildApp.ExitType.Success);
+            MSBuildApp.Execute(@$"c:\bin\msbuild.exe {indicator} ").ShouldBe(MSBuildApp.ExitType.Success);
         }
 
         [Fact]
         public void ErrorCommandLine()
         {
-#if FEATURE_GET_COMMANDLINE
             MSBuildApp.Execute(@"c:\bin\msbuild.exe -junk").ShouldBe(MSBuildApp.ExitType.SwitchError);
 
             MSBuildApp.Execute(@"msbuild.exe -t").ShouldBe(MSBuildApp.ExitType.SwitchError);
 
             MSBuildApp.Execute(@"msbuild.exe @bogus.rsp").ShouldBe(MSBuildApp.ExitType.InitializationError);
-#else
-            MSBuildApp.Execute(new[] { @"c:\bin\msbuild.exe", "-junk" }).ShouldBe(MSBuildApp.ExitType.SwitchError);
-
-            MSBuildApp.Execute(new[] { @"msbuild.exe", "-t" }).ShouldBe(MSBuildApp.ExitType.SwitchError);
-
-            MSBuildApp.Execute(new[] { @"msbuild.exe", "@bogus.rsp" }).ShouldBe(MSBuildApp.ExitType.InitializationError);
-#endif
         }
 
         [Fact]
@@ -731,11 +717,7 @@ public void TestEnvironment()
                     sw.WriteLine(projectString);
                 }
                 //Should pass
-#if FEATURE_GET_COMMANDLINE
                 MSBuildApp.Execute(@"c:\bin\msbuild.exe " + quotedProjectFileName).ShouldBe(MSBuildApp.ExitType.Success);
-#else
-                MSBuildApp.Execute(new[] { @"c:\bin\msbuild.exe", quotedProjectFileName }).ShouldBe(MSBuildApp.ExitType.Success);
-#endif
             }
             finally
             {
@@ -763,21 +745,8 @@ public void MSBuildEngineLogger()
                 {
                     sw.WriteLine(projectString);
                 }
-#if FEATURE_GET_COMMANDLINE
                 //Should pass
                 MSBuildApp.Execute(@$"c:\bin\msbuild.exe /logger:FileLogger,""Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"";""LogFile={logFile}"" /verbosity:detailed " + quotedProjectFileName).ShouldBe(MSBuildApp.ExitType.Success);
-
-#else
-                //Should pass
-                MSBuildApp.Execute(
-                    new[]
-                        {
-                            NativeMethodsShared.IsWindows ? @"c:\bin\msbuild.exe" : "/msbuild.exe",
-                            @$"/logger:FileLogger,""Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"";""LogFile={logFile}""",
-                            "/verbosity:detailed",
-                            quotedProjectFileName
-                        }).ShouldBe(MSBuildApp.ExitType.Success);
-#endif
                 File.Exists(logFile).ShouldBeTrue();
 
                 var logFileContents = File.ReadAllText(logFile);
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 3a62d532f86..e050fa3ca62 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -208,11 +208,7 @@ private static void HandleConfigurationException(Exception ex)
         /// </remarks>
         /// <returns>0 on success, 1 on failure</returns>
         [MTAThread]
-        public static int Main(
-#if !FEATURE_GET_COMMANDLINE
-            string [] args
-#endif
-            )
+        public static int Main()
         {
             using PerformanceLogEventListener eventListener = PerformanceLogEventListener.Create();
 
@@ -222,13 +218,7 @@ string [] args
             }
 
             // return 0 on success, non-zero on failure
-            int exitCode = ((s_initialized && Execute(
-#if FEATURE_GET_COMMANDLINE
-                Environment.CommandLine
-#else
-                ConstructArrayArg(args)
-#endif
-            ) == ExitType.Success) ? 0 : 1);
+            int exitCode = ((s_initialized && Execute(Environment.CommandLine) == ExitType.Success) ? 0 : 1);
 
             if (Environment.GetEnvironmentVariable("MSBUILDDUMPPROCESSCOUNTERS") == "1")
             {
@@ -238,23 +228,6 @@ string [] args
             return exitCode;
         }
 
-#if !FEATURE_GET_COMMANDLINE
-        /// <summary>
-        /// Insert the command executable path as the first element of the args array.
-        /// </summary>
-        /// <param name="args"></param>
-        /// <returns></returns>
-        private static string[] ConstructArrayArg(string[] args)
-        {
-            string[] newArgArray = new string[args.Length + 1];
-
-            newArgArray[0] = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
-            Array.Copy(args, 0, newArgArray, 1, args.Length);
-
-            return newArgArray;
-        }
-#endif // !FEATURE_GET_COMMANDLINE
-
         /// <summary>
         /// Append output file with elapsedTime
         /// </summary>
@@ -476,13 +449,7 @@ private static string GetFriendlyCounterType(PerformanceCounterType type, string
         /// is ignored.</param>
         /// <returns>A value of type ExitType that indicates whether the build succeeded,
         /// or the manner in which it failed.</returns>
-        public static ExitType Execute(
-#if FEATURE_GET_COMMANDLINE
-            string commandLine
-#else
-            string [] commandLine
-#endif
-            )
+        public static ExitType Execute(string commandLine)
         {
             // Indicate to the engine that it can toss extraneous file content
             // when it loads microsoft.*.targets. We can't do this in the general case,
@@ -505,9 +472,7 @@ string [] commandLine
                     break;
             }
 
-#if FEATURE_GET_COMMANDLINE
             ErrorUtilities.VerifyThrowArgumentLength(commandLine, nameof(commandLine));
-#endif
 
 #if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
             AppDomain.CurrentDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
@@ -518,13 +483,7 @@ string [] commandLine
             ConsoleCancelEventHandler cancelHandler = Console_CancelKeyPress;
             try
             {
-#if FEATURE_GET_COMMANDLINE
                 MSBuildEventSource.Log.MSBuildExeStart(commandLine);
-#else
-                if (MSBuildEventSource.Log.IsEnabled()) {
-                    MSBuildEventSource.Log.MSBuildExeStart(string.Join(" ", commandLine));
-                }
-#endif
                 Console.CancelKeyPress += cancelHandler;
 
                 // check the operating system the code is running on
@@ -839,13 +798,7 @@ string [] commandLine
                 // Wait for any pending cancel, so that we get any remaining messages
                 s_cancelComplete.WaitOne();
 
-#if FEATURE_GET_COMMANDLINE
                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);
-#else
-                if (MSBuildEventSource.Log.IsEnabled()) {
-                    MSBuildEventSource.Log.MSBuildExeStop(string.Join(" ", commandLine));
-                }
-#endif
             }
             /**********************************************************************************************************************
              * WARNING: Do NOT add any more catch blocks above!
@@ -1611,24 +1564,13 @@ internal static void SetConsoleUI()
         /// <param name="switchesFromAutoResponseFile"></param>
         /// <param name="switchesNotFromAutoResponseFile"></param>
         /// <returns>Combined bag of switches.</returns>
-        private static void GatherAllSwitches(
-#if FEATURE_GET_COMMANDLINE
-            string commandLine,
-#else
-            string [] commandLine,
-#endif
+        private static void GatherAllSwitches(string commandLine,
             out CommandLineSwitches switchesFromAutoResponseFile, out CommandLineSwitches switchesNotFromAutoResponseFile)
         {
-#if FEATURE_GET_COMMANDLINE
             // split the command line on (unquoted) whitespace
             var commandLineArgs = QuotingUtilities.SplitUnquoted(commandLine);
 
             s_exeName = FileUtilities.FixFilePath(QuotingUtilities.Unquote(commandLineArgs[0]));
-#else
-            var commandLineArgs = new List<string>(commandLine);
-
-            s_exeName = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
-#endif
 
 #if USE_MSBUILD_DLL_EXTN
             var msbuildExtn = ".dll";
