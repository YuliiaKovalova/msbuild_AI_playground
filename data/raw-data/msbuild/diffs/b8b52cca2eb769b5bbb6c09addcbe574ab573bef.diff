diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 3b4e9689ffa..5ef5fdfe6e8 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -593,7 +593,7 @@ public ICollection<ILogger> Loggers
                 using (_locker.EnterUpgradeableReadLock())
                 {
                     return _loggingService.Loggers == null
-                        ? (ICollection<ILogger>)ReadOnlyEmptyCollection<ILogger>.Instance
+                        ? (ICollection<ILogger>) ReadOnlyEmptyCollection<ILogger>.Instance
                         : new List<ILogger>(_loggingService.Loggers);
                 }
             }
@@ -1070,7 +1070,7 @@ internal ICollection<Project> GetLoadedProjects(bool includeExternal, string ful
             List<Project> loaded;
             using (_locker.EnterWriteLock())
             {
-                loaded = fullPath == null ? new List<Project>(_loadedProjects) : new List<Project>(_loadedProjects.GetMatchingProjectsIfAny(fullPath));
+                    loaded = fullPath == null ? new List<Project>(_loadedProjects) : new List<Project>(_loadedProjects.GetMatchingProjectsIfAny(fullPath));
             }
 
             if (includeExternal)
@@ -1131,7 +1131,7 @@ public Project LoadProject(string fileName, IDictionary<string, string> globalPr
                 {
                     // We need to update the set of global properties to merge in the ProjectCollection global properties --
                     // otherwise we might end up declaring "not matching" a project that actually does ... and then throw
-                    // an exception when we go to actually add the newly created project to the ProjectCollection.
+                    // an exception when we go to actually add the newly created project to the ProjectCollection. 
                     // BUT remember that project global properties win -- don't override a property that already exists.
                     foreach (KeyValuePair<string, string> globalProperty in GlobalProperties)
                     {
@@ -1148,9 +1148,9 @@ public Project LoadProject(string fileName, IDictionary<string, string> globalPr
 
                 if (toolsVersion == null)
                 {
-                    // Load the project XML to get any ToolsVersion attribute.
+                    // Load the project XML to get any ToolsVersion attribute. 
                     // If there isn't already an equivalent project loaded, the real load we'll do will be satisfied from the cache.
-                    // If there is already an equivalent project loaded, we'll never need this XML -- but it'll already
+                    // If there is already an equivalent project loaded, we'll never need this XML -- but it'll already 
                     // have been loaded by that project so it will have been satisfied from the ProjectRootElementCache.
                     // Either way, no time wasted.
                     try
@@ -1327,7 +1327,7 @@ public void UnloadProject(Project project)
 
                 // Aggressively release any strings from all the contributing documents.
                 // It's fine if we cache less (by now we likely did a lot of loading and got the benefits)
-                // If we don't do this, we could be releasing the last reference to a
+                // If we don't do this, we could be releasing the last reference to a 
                 // ProjectRootElement, causing it to fall out of the weak cache leaving its strings and XML
                 // behind in the string cache.
                 project.Xml.XmlDocument.ClearAnyCachedStrings();
@@ -1475,7 +1475,7 @@ public void Dispose()
             GC.SuppressFinalize(this);
         }
 
-        #region IBuildComponent Members
+#region IBuildComponent Members
 
         /// <summary>
         /// Initializes the component with the component host.
@@ -1492,7 +1492,7 @@ void IBuildComponent.ShutdownComponent()
         {
         }
 
-        #endregion
+#endregion
 
         /// <summary>
         /// Unloads a project XML root element from the cache entirely, if it is not
@@ -1548,12 +1548,12 @@ internal void OnAfterRenameLoadedProject(string oldFullPathIfAny, Project projec
                     ErrorUtilities.VerifyThrowInvalidOperation(existed, "OM_ProjectWasNotLoaded");
                 }
 
-                // The only time this ever gets called with a null full path is when the project is first being
-                // constructed.  The mere fact that this method is being called means that this project will belong
-                // to this project collection.  As such, it has already had all necessary global properties applied
-                // when being constructed -- we don't need to do anything special here.
-                // If we did add global properties here, we would just end up either duplicating work or possibly
-                // wiping out global properties set on the project meant to override the ProjectCollection copies.
+                // The only time this ever gets called with a null full path is when the project is first being 
+                // constructed.  The mere fact that this method is being called means that this project will belong 
+                // to this project collection.  As such, it has already had all necessary global properties applied 
+                // when being constructed -- we don't need to do anything special here. 
+                // If we did add global properties here, we would just end up either duplicating work or possibly 
+                // wiping out global properties set on the project meant to override the ProjectCollection copies. 
                 _loadedProjects.AddProject(project);
 
                 if (_hostServices != null)
@@ -1908,7 +1908,7 @@ public ReusableLogger(ILogger originalLogger)
                 _originalLogger = originalLogger;
             }
 
-            #region IEventSource Members
+#region IEventSource Members
 
             /// <summary>
             /// The Message logging event
@@ -2119,7 +2119,7 @@ public void Shutdown()
                 }
             }
 
-            #endregion
+#endregion
 
             /// <summary>
             /// Registers for all of the events on the specified event source.
