diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index d9654d4e38c..479b94879f1 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -619,22 +619,23 @@ public void InvalidMaxCPUCountSwitch4()
         }
 
         [Theory]
-        [InlineData("-getProperty:Foo;Bar", true, "EvalValue", false, false, false, true)]
-        [InlineData("-getProperty:Foo;Bar -t:Build", true, "TargetValue", false, false, false, true)]
-        [InlineData("-getItem:MyItem", false, "", true, false, false, true)]
-        [InlineData("-getItem:MyItem -t:Build", false, "", true, true, false, true)]
-        [InlineData("-getItem:WrongItem -t:Build", false, "", false, false, false, true)]
-        [InlineData("-getProperty:Foo;Bar -getItem:MyItem -t:Build", true, "TargetValue", true, true, false, true)]
-        [InlineData("-getProperty:Foo;Bar -getItem:MyItem", true, "EvalValue", true, false, false, true)]
-        [InlineData("-getProperty:Foo;Bar -getTargetResult:MyTarget", true, "TargetValue", false, false, true, true)]
-        [InlineData("-getProperty:Foo;Bar", true, "EvalValue", false, false, false, false)]
-        [InlineData("-getProperty:Foo;Bar -t:Build", true, "TargetValue", false, false, false, false)]
-        [InlineData("-getItem:MyItem", false, "", true, false, false, false)]
-        [InlineData("-getItem:MyItem -t:Build", false, "", true, true, false, false)]
-        [InlineData("-getItem:WrongItem -t:Build", false, "", false, false, false, false)]
-        [InlineData("-getProperty:Foo;Bar -getItem:MyItem -t:Build", true, "TargetValue", true, true, false, false)]
-        [InlineData("-getProperty:Foo;Bar -getItem:MyItem", true, "EvalValue", true, false, false, false)]
-        [InlineData("-getProperty:Foo;Bar -getTargetResult:MyTarget", true, "TargetValue", false, false, true, false)]
+        [InlineData("-getProperty:Foo;Bar", true, "EvalValue", false, false, false, true, false)]
+        [InlineData("-getProperty:Foo;Bar -t:Build", true, "TargetValue", false, false, false, true, false)]
+        [InlineData("-getItem:MyItem", false, "", true, false, false, true, false)]
+        [InlineData("-getItem:MyItem -t:Build", false, "", true, true, false, true, false)]
+        [InlineData("-getItem:WrongItem -t:Build", false, "", false, false, false, true, false)]
+        [InlineData("-getProperty:Foo;Bar -getItem:MyItem -t:Build", true, "TargetValue", true, true, false, true, false)]
+        [InlineData("-getProperty:Foo;Bar -getItem:MyItem", true, "EvalValue", true, false, false, true, false)]
+        [InlineData("-getProperty:Foo;Bar -getTargetResult:MyTarget", true, "TargetValue", false, false, true, true, false)]
+        [InlineData("-getProperty:Foo;Bar", true, "EvalValue", false, false, false, false, false)]
+        [InlineData("-getProperty:Foo;Bar -t:Build", true, "TargetValue", false, false, false, false, false)]
+        [InlineData("-getItem:MyItem", false, "", true, false, false, false, false)]
+        [InlineData("-getItem:MyItem -t:Build", false, "", true, true, false, false, false)]
+        [InlineData("-getItem:WrongItem -t:Build", false, "", false, false, false, false, false)]
+        [InlineData("-getProperty:Foo;Bar -getItem:MyItem -t:Build", true, "TargetValue", true, true, false, false, false)]
+        [InlineData("-getProperty:Foo;Bar -getItem:MyItem", true, "EvalValue", true, false, false, false, false)]
+        [InlineData("-getProperty:Foo;Bar -getTargetResult:MyTarget", true, "TargetValue", false, false, true, false, false)]
+        [InlineData("-getTargetResult:Restore", false, "", false, false, false, false, true)]
         public void ExecuteAppWithGetPropertyItemAndTargetResult(
             string extraSwitch,
             bool fooPresent,
@@ -642,7 +643,8 @@ public void ExecuteAppWithGetPropertyItemAndTargetResult(
             bool itemIncludesAlwaysThere,
             bool itemIncludesTargetItem,
             bool targetResultPresent,
-            bool isGraphBuild)
+            bool isGraphBuild,
+            bool restoreOnly)
         {
             using TestEnvironment env = TestEnvironment.Create();
             TransientTestFile project = env.CreateFile("testProject.csproj", @"
@@ -670,11 +672,15 @@ public void ExecuteAppWithGetPropertyItemAndTargetResult(
 
   </Target>
 
+  <Target Name=""Restore"">
+
+  </Target>
+
 </Project>
 ");
             string graph = isGraphBuild ? "--graph" : "";
             string results = RunnerUtilities.ExecMSBuild($" {project.Path} {extraSwitch} {graph}", out bool success);
-            success.ShouldBeTrue();
+            success.ShouldBeTrue(results);
             if (fooPresent)
             {
                 results.ShouldContain($"\"Foo\": \"{fooResult}\"");
@@ -687,7 +693,8 @@ public void ExecuteAppWithGetPropertyItemAndTargetResult(
             results.Contains("targetItem").ShouldBe(itemIncludesTargetItem);
 
             results.Contains("MyTarget").ShouldBe(targetResultPresent);
-            results.Contains("\"Result\": \"Success\"").ShouldBe(targetResultPresent);
+            results.Contains("\"Result\": \"Success\"").ShouldBe(targetResultPresent || restoreOnly);
+            results.ShouldNotContain(ResourceUtilities.GetResourceString("BuildFailedWithPropertiesItemsOrTargetResultsRequested"));
         }
 
         /// <summary>
