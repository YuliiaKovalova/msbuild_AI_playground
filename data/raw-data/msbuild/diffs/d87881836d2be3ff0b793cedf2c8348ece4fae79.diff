diff --git a/eng/Packages.props b/eng/Packages.props
index eb7aee9b051..1b516aebaf6 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -53,6 +53,7 @@
     <PackageReference Update="xunit.console" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.core" Version="$(XUnitVersion)" />
     <PackageReference Update="StreamJsonRpc" Version="2.5.44" />
+    <PackageReference Update="MessagePackAnalyzer" Version="2.1.165" PrivateAssets="all" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 7a67734775b..4c6cce06d49 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -12,7 +12,6 @@ public partial struct BuildEngineResult
     }
     public partial class BuildErrorEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
-        protected BuildErrorEventArgs() { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -78,7 +77,6 @@ public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded
     public delegate void BuildFinishedEventHandler(object sender, Microsoft.Build.Framework.BuildFinishedEventArgs e);
     public partial class BuildMessageEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
-        protected BuildMessageEventArgs() { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -116,7 +114,6 @@ protected BuildStatusEventArgs(string message, string helpKeyword, string sender
     public delegate void BuildStatusEventHandler(object sender, Microsoft.Build.Framework.BuildStatusEventArgs e);
     public partial class BuildWarningEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
-        protected BuildWarningEventArgs() { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -134,10 +131,10 @@ public BuildWarningEventArgs(string subcategory, string code, string file, int l
     public delegate void BuildWarningEventHandler(object sender, Microsoft.Build.Framework.BuildWarningEventArgs e);
     public partial class CriticalBuildMessageEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected CriticalBuildMessageEventArgs() { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
+        protected CriticalBuildMessageEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
     }
     public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
@@ -149,13 +146,12 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public EnvironmentVariableReadEventArgs() { }
-        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public EnvironmentVariableReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string EnvironmentVariableName { get { throw null; } set { } }
     }
     public partial class ExternalProjectFinishedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
-        protected ExternalProjectFinishedEventArgs() { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded) { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -163,7 +159,6 @@ public ExternalProjectFinishedEventArgs(string message, string helpKeyword, stri
     }
     public partial class ExternalProjectStartedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
-        protected ExternalProjectStartedEventArgs() { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames) { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -364,7 +359,7 @@ public enum MessageImportance
     public partial class MetaprojectGeneratedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public string metaprojectXml;
-        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) { }
+        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
     }
     [System.AttributeUsageAttribute((System.AttributeTargets)(128), AllowMultiple=false, Inherited=false)]
     public sealed partial class OutputAttribute : System.Attribute
@@ -395,8 +390,8 @@ public ProjectFinishedEventArgs(string message, string helpKeyword, string proje
     public delegate void ProjectFinishedEventHandler(object sender, Microsoft.Build.Framework.ProjectFinishedEventArgs e);
     public partial class ProjectImportedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public ProjectImportedEventArgs() { }
-        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) { }
+        public ProjectImportedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string ImportedProjectFile { get { throw null; } set { } }
         public bool ImportIgnored { get { throw null; } set { } }
         public string UnexpandedProject { get { throw null; } set { } }
@@ -422,16 +417,16 @@ public ProjectStartedEventArgs(string message, string helpKeyword, string projec
     public delegate void ProjectStartedEventHandler(object sender, Microsoft.Build.Framework.ProjectStartedEventArgs e);
     public partial class PropertyInitialValueSetEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyInitialValueSetEventArgs() { }
-        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public PropertyInitialValueSetEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string PropertyName { get { throw null; } set { } }
         public string PropertySource { get { throw null; } set { } }
         public string PropertyValue { get { throw null; } set { } }
     }
     public partial class PropertyReassignmentEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyReassignmentEventArgs() { }
-        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public PropertyReassignmentEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string Location { get { throw null; } set { } }
         public string NewValue { get { throw null; } set { } }
         public string PreviousValue { get { throw null; } set { } }
@@ -548,8 +543,8 @@ public TargetFinishedEventArgs(string message, string helpKeyword, string target
     public delegate void TargetFinishedEventHandler(object sender, Microsoft.Build.Framework.TargetFinishedEventArgs e);
     public partial class TargetSkippedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public TargetSkippedEventArgs() { }
-        public TargetSkippedEventArgs(string message, params object[] messageArgs) { }
+        public TargetSkippedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TargetSkippedEventArgs(string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public Microsoft.Build.Framework.TargetBuiltReason BuildReason { get { throw null; } set { } }
         public string ParentTarget { get { throw null; } set { } }
         public string TargetFile { get { throw null; } set { } }
@@ -570,9 +565,9 @@ public TargetStartedEventArgs(string message, string helpKeyword, string targetN
     public delegate void TargetStartedEventHandler(object sender, Microsoft.Build.Framework.TargetStartedEventArgs e);
     public partial class TaskCommandLineEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected TaskCommandLineEventArgs() { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
+        protected TaskCommandLineEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string CommandLine { get { throw null; } }
         public string TaskName { get { throw null; } }
     }
@@ -616,8 +611,8 @@ public TelemetryEventArgs() { }
     public delegate void TelemetryEventHandler(object sender, Microsoft.Build.Framework.TelemetryEventArgs e);
     public partial class UninitializedPropertyReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public UninitializedPropertyReadEventArgs() { }
-        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public UninitializedPropertyReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string PropertyName { get { throw null; } set { } }
     }
 }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 9e3004af4bb..b507dfdb10a 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -12,7 +12,6 @@ public partial struct BuildEngineResult
     }
     public partial class BuildErrorEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
-        protected BuildErrorEventArgs() { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -78,7 +77,6 @@ public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded
     public delegate void BuildFinishedEventHandler(object sender, Microsoft.Build.Framework.BuildFinishedEventArgs e);
     public partial class BuildMessageEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
-        protected BuildMessageEventArgs() { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -116,7 +114,6 @@ protected BuildStatusEventArgs(string message, string helpKeyword, string sender
     public delegate void BuildStatusEventHandler(object sender, Microsoft.Build.Framework.BuildStatusEventArgs e);
     public partial class BuildWarningEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
-        protected BuildWarningEventArgs() { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -134,10 +131,10 @@ public BuildWarningEventArgs(string subcategory, string code, string file, int l
     public delegate void BuildWarningEventHandler(object sender, Microsoft.Build.Framework.BuildWarningEventArgs e);
     public partial class CriticalBuildMessageEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected CriticalBuildMessageEventArgs() { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
+        protected CriticalBuildMessageEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
     }
     public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
@@ -149,13 +146,12 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public EnvironmentVariableReadEventArgs() { }
-        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public EnvironmentVariableReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string EnvironmentVariableName { get { throw null; } set { } }
     }
     public partial class ExternalProjectFinishedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
-        protected ExternalProjectFinishedEventArgs() { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded) { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -163,7 +159,6 @@ public ExternalProjectFinishedEventArgs(string message, string helpKeyword, stri
     }
     public partial class ExternalProjectStartedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
-        protected ExternalProjectStartedEventArgs() { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames) { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -363,7 +358,7 @@ public enum MessageImportance
     public partial class MetaprojectGeneratedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public string metaprojectXml;
-        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) { }
+        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
     }
     [System.AttributeUsageAttribute((System.AttributeTargets)(128), AllowMultiple=false, Inherited=false)]
     public sealed partial class OutputAttribute : System.Attribute
@@ -394,8 +389,8 @@ public ProjectFinishedEventArgs(string message, string helpKeyword, string proje
     public delegate void ProjectFinishedEventHandler(object sender, Microsoft.Build.Framework.ProjectFinishedEventArgs e);
     public partial class ProjectImportedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public ProjectImportedEventArgs() { }
-        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) { }
+        public ProjectImportedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string ImportedProjectFile { get { throw null; } set { } }
         public bool ImportIgnored { get { throw null; } set { } }
         public string UnexpandedProject { get { throw null; } set { } }
@@ -421,16 +416,16 @@ public ProjectStartedEventArgs(string message, string helpKeyword, string projec
     public delegate void ProjectStartedEventHandler(object sender, Microsoft.Build.Framework.ProjectStartedEventArgs e);
     public partial class PropertyInitialValueSetEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyInitialValueSetEventArgs() { }
-        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public PropertyInitialValueSetEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string PropertyName { get { throw null; } set { } }
         public string PropertySource { get { throw null; } set { } }
         public string PropertyValue { get { throw null; } set { } }
     }
     public partial class PropertyReassignmentEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyReassignmentEventArgs() { }
-        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public PropertyReassignmentEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string Location { get { throw null; } set { } }
         public string NewValue { get { throw null; } set { } }
         public string PreviousValue { get { throw null; } set { } }
@@ -547,8 +542,8 @@ public TargetFinishedEventArgs(string message, string helpKeyword, string target
     public delegate void TargetFinishedEventHandler(object sender, Microsoft.Build.Framework.TargetFinishedEventArgs e);
     public partial class TargetSkippedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public TargetSkippedEventArgs() { }
-        public TargetSkippedEventArgs(string message, params object[] messageArgs) { }
+        public TargetSkippedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TargetSkippedEventArgs(string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public Microsoft.Build.Framework.TargetBuiltReason BuildReason { get { throw null; } set { } }
         public string ParentTarget { get { throw null; } set { } }
         public string TargetFile { get { throw null; } set { } }
@@ -569,9 +564,9 @@ public TargetStartedEventArgs(string message, string helpKeyword, string targetN
     public delegate void TargetStartedEventHandler(object sender, Microsoft.Build.Framework.TargetStartedEventArgs e);
     public partial class TaskCommandLineEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected TaskCommandLineEventArgs() { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
+        protected TaskCommandLineEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string CommandLine { get { throw null; } }
         public string TaskName { get { throw null; } }
     }
@@ -615,8 +610,8 @@ public TelemetryEventArgs() { }
     public delegate void TelemetryEventHandler(object sender, Microsoft.Build.Framework.TelemetryEventArgs e);
     public partial class UninitializedPropertyReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public UninitializedPropertyReadEventArgs() { }
-        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
+        public UninitializedPropertyReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
         public string PropertyName { get { throw null; } set { } }
     }
 }
diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index d193169b4e7..52082c1239d 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -2689,8 +2689,16 @@ public ResolveAssemblyReferenceResponse() { }
     public sealed partial class ResolveAssemblyReferenceResult
     {
         public ResolveAssemblyReferenceResult() { }
+        [MessagePack.KeyAttribute(4)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildErrorEventArgs> BuildErrorEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildMessageEventArgs> BuildMessageEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildWarningEventArgs> BuildWarningEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.CustomBuildEventArgs> CustomBuildEvents { get { throw null; } set { } }
         [MessagePack.KeyAttribute(2)]
-        public System.Collections.Generic.List<Microsoft.Build.Framework.LazyFormattedBuildEventArgs> BuildEventArgs { get { throw null; } set { } }
+        public int EventCount { get { throw null; } set { } }
         [MessagePack.KeyAttribute(1)]
         public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceResponse Response { get { throw null; } set { } }
         [MessagePack.KeyAttribute(0)]
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index f83e253d02b..8d719962051 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -2311,8 +2311,16 @@ public ResolveAssemblyReferenceResponse() { }
     public sealed partial class ResolveAssemblyReferenceResult
     {
         public ResolveAssemblyReferenceResult() { }
+        [MessagePack.KeyAttribute(4)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildErrorEventArgs> BuildErrorEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildMessageEventArgs> BuildMessageEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildWarningEventArgs> BuildWarningEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.CustomBuildEventArgs> CustomBuildEvents { get { throw null; } set { } }
         [MessagePack.KeyAttribute(2)]
-        public System.Collections.Generic.List<Microsoft.Build.Framework.LazyFormattedBuildEventArgs> BuildEventArgs { get { throw null; } set { } }
+        public int EventCount { get { throw null; } set { } }
         [MessagePack.KeyAttribute(1)]
         public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceResponse Response { get { throw null; } set { } }
         [MessagePack.KeyAttribute(0)]
diff --git a/src/Framework/BuildErrorEventArgs.cs b/src/Framework/BuildErrorEventArgs.cs
index 5d086d1850e..cdea0353c50 100644
--- a/src/Framework/BuildErrorEventArgs.cs
+++ b/src/Framework/BuildErrorEventArgs.cs
@@ -212,7 +212,7 @@ params object[] messageArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        protected BuildErrorEventArgs()
+        internal BuildErrorEventArgs()
             : base()
         {
             // do nothing
diff --git a/src/Framework/BuildMessageEventArgs.cs b/src/Framework/BuildMessageEventArgs.cs
index c31672b68a5..0a58ffaec25 100644
--- a/src/Framework/BuildMessageEventArgs.cs
+++ b/src/Framework/BuildMessageEventArgs.cs
@@ -47,7 +47,7 @@ public class BuildMessageEventArgs : LazyFormattedBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        protected BuildMessageEventArgs()
+        internal BuildMessageEventArgs()
             : base()
         {
             // do nothing
diff --git a/src/Framework/BuildWarningEventArgs.cs b/src/Framework/BuildWarningEventArgs.cs
index 0bf9641b45d..4ae72cfd965 100644
--- a/src/Framework/BuildWarningEventArgs.cs
+++ b/src/Framework/BuildWarningEventArgs.cs
@@ -25,7 +25,7 @@ public class BuildWarningEventArgs : LazyFormattedBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        protected BuildWarningEventArgs()
+        internal BuildWarningEventArgs()
             : base()
         {
             // do nothing
@@ -213,7 +213,9 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         {
             base.CreateFromStream(reader, version);
 
-            subcategory = reader.ReadByte() == 0 ? null : reader.ReadString();
+            int b = reader.ReadByte();
+
+            subcategory = b == 0 ? null : reader.ReadString();
             code = reader.ReadByte() == 0 ? null : reader.ReadString();
             file = reader.ReadByte() == 0 ? null : reader.ReadString();
 
diff --git a/src/Framework/ExternalProjectFinishedEventArgs.cs b/src/Framework/ExternalProjectFinishedEventArgs.cs
index 4fae3f9eb48..5a342d1bd7d 100644
--- a/src/Framework/ExternalProjectFinishedEventArgs.cs
+++ b/src/Framework/ExternalProjectFinishedEventArgs.cs
@@ -23,7 +23,7 @@ public class ExternalProjectFinishedEventArgs : CustomBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        protected ExternalProjectFinishedEventArgs()
+        internal ExternalProjectFinishedEventArgs()
             : base()
         {
             // nothing to do here, move along.
diff --git a/src/Framework/ExternalProjectStartedEventArgs.cs b/src/Framework/ExternalProjectStartedEventArgs.cs
index f0dea23e6ea..a340954a714 100644
--- a/src/Framework/ExternalProjectStartedEventArgs.cs
+++ b/src/Framework/ExternalProjectStartedEventArgs.cs
@@ -23,7 +23,7 @@ public class ExternalProjectStartedEventArgs : CustomBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        protected ExternalProjectStartedEventArgs()
+        internal ExternalProjectStartedEventArgs()
             : base()
         {
             // nothing to do here, move along.
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
index 213153e8720..7fbfc9738fc 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
@@ -1,4 +1,5 @@
-﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+﻿using Microsoft.Build.Framework;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -18,7 +19,10 @@ public override bool Equals(ResolveAssemblyReferenceResult x, ResolveAssemblyRef
                 return false;
 
             return x.TaskResult == y.TaskResult &&
-                CollectionEquals(x.BuildEventArgs?.Select(e => e.Message).ToList(), y.BuildEventArgs?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
+                CollectionEquals(x.BuildErrorEvents?.Select(e => e.Message).ToList(), y.BuildErrorEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
+                CollectionEquals(x.BuildMessageEvents?.Select(e => e.Message).ToList(), y.BuildMessageEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
+                CollectionEquals(x.BuildWarningEvents?.Select(e => e.Message).ToList(), y.BuildWarningEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
+                CollectionEquals(x.CustomBuildEvents?.Select(e => e.Message).ToList(), y.CustomBuildEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
                 RARResponseComparer.Instance.Equals(x.Response, y.Response);
                 
         }
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 5bb329dc29d..3488c25520f 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -3120,7 +3120,10 @@ public override bool Execute()
                     // Client is connected to the RAR node, we can execute RAR task remotely
                     ResolveAssemblyReferenceResult result = client.Execute(ResolveAssemblyReferenceInput);
                     ResolveAssemblyReferenceOutput = result.Output;
-                    LogEvents(result.BuildEventArgs);
+                    LogEvents(result.BuildWarningEvents);
+                    LogEvents(result.BuildMessageEvents);
+                    LogEvents(result.BuildErrorEvents);
+                    LogEvents(result.CustomBuildEvents);
                     return result.TaskResult;
                 }
             }
@@ -3149,6 +3152,11 @@ public override bool Execute()
 
         private void LogEvents(IEnumerable<LazyFormattedBuildEventArgs> buildEventArgs)
         {
+            if (buildEventArgs == null)
+            {
+                return;
+            }
+
             foreach (LazyFormattedBuildEventArgs buildEvent in buildEventArgs)
             {
                 switch (buildEvent)
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
index e0450eaea9f..e5f3a79410d 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
@@ -26,7 +26,19 @@ internal ResolveAssemblyReferenceResult(bool taskResult, ResolveAssemblyReferenc
         public ResolveAssemblyReferenceResponse Response { get; set; }
 
         [Key(2)]
-        public List<LazyFormattedBuildEventArgs> BuildEventArgs { get; set; }
+        public int EventCount { get; set; }
+
+        [Key(3)]
+        public List<CustomBuildEventArgs> CustomBuildEvents { get; set; }
+
+        [Key(4)]
+        public List<BuildErrorEventArgs> BuildErrorEvents {get;set;}
+
+        [Key(5)]
+        public List<BuildMessageEventArgs> BuildMessageEvents {get;set;}
+
+        [Key(6)]
+        public List<BuildWarningEventArgs> BuildWarningEvents {get;set;}
 
         [IgnoreMember]
         internal ResolveAssemblyReferenceTaskOutput Output => new ResolveAssemblyReferenceTaskOutput(Response);
diff --git a/src/Tasks/ResolveAssemblyReferences/LazyFromattedBuildEventArgsFormatter.cs b/src/Tasks/ResolveAssemblyReferences/LazyFromattedBuildEventArgsFormatter.cs
index eb608ba0c71..aedf1eae698 100644
--- a/src/Tasks/ResolveAssemblyReferences/LazyFromattedBuildEventArgsFormatter.cs
+++ b/src/Tasks/ResolveAssemblyReferences/LazyFromattedBuildEventArgsFormatter.cs
@@ -4,23 +4,38 @@
 using MessagePack;
 using MessagePack.Formatters;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Nerdbank.Streams;
 using System;
 using System.Buffers;
+using System.ComponentModel;
 using System.IO;
-using System.Runtime.Serialization;
-using System.Runtime.Serialization.Formatters.Binary;
-using System.Xml.Serialization;
+using System.Reflection;
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences
 {
-    internal sealed class LazyFromattedBuildEventArgsFormatter : IMessagePackFormatter<LazyFormattedBuildEventArgs>
+    internal abstract class BuildEventArgsFormatter<TArg> : IMessagePackFormatter<TArg> where TArg : BuildEventArgs
     {
-        internal static readonly IMessagePackFormatter Instance = new LazyFromattedBuildEventArgsFormatter();
+        private static int? _clrVersion = null;
+        private static int ClrVersion
+        {
+            get
+            {
+                if (!_clrVersion.HasValue)
+                {
+                    _clrVersion = typeof(bool).GetTypeInfo().Assembly.GetName().Version.Major;
+                }
+                return _clrVersion.Value;
+            }
+        }
+
+        public static IMessagePackFormatter<BuildErrorEventArgs> ErrorFormatter { get; } = new BuildError();
+        public static IMessagePackFormatter<BuildWarningEventArgs> WarningFormatter { get; } = new BuildWarning();
+        public static IMessagePackFormatter<BuildMessageEventArgs> MessageFormatter { get; } = new BuildMessage();
+        public static IMessagePackFormatter<CustomBuildEventArgs> CustomFormatter { get; } = new Custom();
 
-        private LazyFromattedBuildEventArgsFormatter() { }
 
-        public LazyFormattedBuildEventArgs Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
+        public TArg Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
         {
             ReadOnlySequence<byte>? buffer = reader.ReadBytes();
 
@@ -28,9 +43,10 @@ public LazyFormattedBuildEventArgs Deserialize(ref MessagePackReader reader, Mes
                 return null;
             try
             {
-                // TODO: Remove this!
-                IFormatter formatter = new BinaryFormatter();
-                return (LazyFormattedBuildEventArgs)formatter.Deserialize(buffer.Value.AsStream());
+                BinaryReader binaryReader = new BinaryReader(buffer.Value.AsStream());
+                TArg arg = GetEventArgInstance();
+                arg.CreateFromStream(binaryReader, int.MaxValue);
+                return arg;
             }
             catch (Exception)
             {
@@ -38,7 +54,7 @@ public LazyFormattedBuildEventArgs Deserialize(ref MessagePackReader reader, Mes
             }
         }
 
-        public void Serialize(ref MessagePackWriter writer, LazyFormattedBuildEventArgs value, MessagePackSerializerOptions options)
+        public void Serialize(ref MessagePackWriter writer, TArg value, MessagePackSerializerOptions options)
         {
             if (value is null)
             {
@@ -47,11 +63,91 @@ public void Serialize(ref MessagePackWriter writer, LazyFormattedBuildEventArgs
             }
 
             using MemoryStream stream = new MemoryStream();
+            using BinaryWriter binaryWriter = new BinaryWriter(stream);
 
-            // TODO: Remove this!
-            IFormatter formatter = new BinaryFormatter();
-            formatter.Serialize(stream, value);
+            value.WriteToStream(binaryWriter);
             writer.Write(stream.ToArray());
         }
+
+        protected abstract TArg GetEventArgInstance();
+
+        private class Custom : IMessagePackFormatter<CustomBuildEventArgs>
+        {
+            private static IMessagePackFormatter<ExternalProjectFinishedEventArgs> ExternalProjectFinishedFormatter = new ExternalProjectFinished();
+            private static IMessagePackFormatter<ExternalProjectStartedEventArgs> ExternalProjectStartedFormatter = new ExternalProjectStarted();
+
+            public CustomBuildEventArgs Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
+            {
+                ushort formatter = reader.ReadUInt16();
+
+                switch (formatter)
+                {
+                    case 1:
+                        return ExternalProjectStartedFormatter.Deserialize(ref reader, options);
+                    case 2:
+                        return ExternalProjectFinishedFormatter.Deserialize(ref reader, options);
+                    default:
+                        ErrorUtilities.ThrowInternalError("Unexpected formatter id");
+                        return null; // Never hits...
+                }
+            }
+
+            public void Serialize(ref MessagePackWriter writer, CustomBuildEventArgs value, MessagePackSerializerOptions options)
+            {
+                ushort formatterId = value switch
+                {
+                    ExternalProjectStartedEventArgs _ => 1,
+                    ExternalProjectFinishedEventArgs _ => 2,
+                    _ => 0
+                };
+
+                if (formatterId == 0)
+                {
+                    ErrorUtilities.ThrowArgumentOutOfRange(nameof(value));
+                }
+
+                writer.WriteUInt16(formatterId);
+
+                switch (formatterId)
+                {
+                    case 1:
+                        ExternalProjectStartedFormatter.Serialize(ref writer, value as ExternalProjectStartedEventArgs, options);
+                        break;
+                    case 2:
+                        ExternalProjectFinishedFormatter.Serialize(ref writer, value as ExternalProjectFinishedEventArgs, options);
+                        break;
+                    default:
+                        ErrorUtilities.ThrowInternalErrorUnreachable();
+                        break;
+                }
+            }
+
+            private class ExternalProjectFinished : BuildEventArgsFormatter<ExternalProjectFinishedEventArgs>, IMessagePackFormatter<ExternalProjectFinishedEventArgs>
+            {
+                protected override ExternalProjectFinishedEventArgs GetEventArgInstance() => new ExternalProjectFinishedEventArgs();
+            }
+
+            private class ExternalProjectStarted : BuildEventArgsFormatter<ExternalProjectStartedEventArgs>, IMessagePackFormatter<ExternalProjectStartedEventArgs>
+            {
+                protected override ExternalProjectStartedEventArgs GetEventArgInstance() => new ExternalProjectStartedEventArgs();
+            }
+        }
+
+
+
+        private class BuildError : BuildEventArgsFormatter<BuildErrorEventArgs>, IMessagePackFormatter<BuildErrorEventArgs>
+        {
+            protected override BuildErrorEventArgs GetEventArgInstance() => new BuildErrorEventArgs();
+        }
+
+        private class BuildMessage : BuildEventArgsFormatter<BuildMessageEventArgs>, IMessagePackFormatter<BuildMessageEventArgs>
+        {
+            protected override BuildMessageEventArgs GetEventArgInstance() => new BuildMessageEventArgs();
+        }
+
+        private class BuildWarning : BuildEventArgsFormatter<BuildWarningEventArgs>, IMessagePackFormatter<BuildWarningEventArgs>
+        {
+            protected override BuildWarningEventArgs GetEventArgInstance() => new BuildWarningEventArgs();
+        }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs b/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs
index 3d771bea55f..311af9cc1c5 100644
--- a/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs
+++ b/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs
@@ -20,9 +20,12 @@ internal static IJsonRpcMessageHandler GetRarMessageHandler(Stream stream)
             MessagePackFormatter formatter = new MessagePackFormatter();
 
             IFormatterResolver resolver = CompositeResolver.Create(
-                new[]
+                new IMessagePackFormatter[]
                 {
-                    LazyFromattedBuildEventArgsFormatter.Instance
+                    BuildEventArgsFormatter<CustomBuildEventArgs>.CustomFormatter,
+                    BuildEventArgsFormatter<BuildErrorEventArgs>.ErrorFormatter,
+                    BuildEventArgsFormatter<BuildWarningEventArgs>.WarningFormatter,
+                    BuildEventArgsFormatter<BuildMessageEventArgs>.MessageFormatter
                 },
                 new[]
                 {
diff --git a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
index 95c638c10d4..9420a2ab771 100644
--- a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Diagnostics;
 using System.IO;
 using System.IO.Pipes;
 using System.Threading;
@@ -123,10 +124,25 @@ internal async Task HandleClientAsync(Stream serverStream, CancellationToken can
             }
         }
 
+        private class ConsoleLogger : TraceListener
+        {
+            public override void Write(string message)
+            {
+                Console.Write(message);
+            }
+
+            public override void WriteLine(string message)
+            {
+                Console.WriteLine(message);
+            }
+        }
+
         private JsonRpc GetRpcServer(Stream stream, IResolveAssemblyReferenceTaskHandler handler)
         {
             IJsonRpcMessageHandler serverHandler = RpcUtils.GetRarMessageHandler(stream);
             JsonRpc rpc = new JsonRpc(serverHandler, handler);
+            //rpc.TraceSource = new TraceSource("Server", SourceLevels.Verbose);
+            //rpc.TraceSource.Listeners.Add(new ConsoleLogger());
             return rpc;
         }
 
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
index e90c1b39664..f8976b18261 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
@@ -10,7 +10,11 @@ namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
     internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine7
     {
-        public List<LazyFormattedBuildEventArgs> BuildEvent { get; } = new List<LazyFormattedBuildEventArgs>();
+        internal int EventCount => CustomBuildEvent.Count + MessageBuildEvent.Count + WarningBuildEvent.Count + ErrorBuildEvent.Count;
+        internal List<CustomBuildEventArgs> CustomBuildEvent { get; } = new List<CustomBuildEventArgs>();
+        internal List<BuildMessageEventArgs> MessageBuildEvent { get; } = new List<BuildMessageEventArgs>();
+        internal List<BuildWarningEventArgs> WarningBuildEvent { get; } = new List<BuildWarningEventArgs>();
+        internal List<BuildErrorEventArgs> ErrorBuildEvent { get; } = new List<BuildErrorEventArgs>();
 
         public bool AllowFailureWithoutError { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
 
@@ -56,17 +60,17 @@ public object GetRegisteredTaskObject(object key, RegisteredTaskObjectLifetime l
 
         public void LogCustomEvent(CustomBuildEventArgs e)
         {
-            BuildEvent.Add(e);
+            CustomBuildEvent.Add(e);
         }
 
         public void LogErrorEvent(BuildErrorEventArgs e)
         {
-            BuildEvent.Add(e);
+            ErrorBuildEvent.Add(e);
         }
 
         public void LogMessageEvent(BuildMessageEventArgs e)
         {
-            BuildEvent.Add(e);
+            MessageBuildEvent.Add(e);
         }
 
         public void LogTelemetry(string eventName, IDictionary<string, string> properties)
@@ -76,7 +80,7 @@ public void LogTelemetry(string eventName, IDictionary<string, string> propertie
 
         public void LogWarningEvent(BuildWarningEventArgs e)
         {
-            BuildEvent.Add(e);
+            WarningBuildEvent.Add(e);
         }
 
         public void Reacquire()
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
index 254aa8ca016..335ef00ffd6 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceTaskHandler.cs
@@ -1,12 +1,24 @@
 ﻿using System.Threading;
 using System.Threading.Tasks;
-
+using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
     internal sealed class ResolveAssemblyReferenceTaskHandler : IResolveAssemblyReferenceTaskHandler
     {
+        private ResolveAssemblyReferenceTaskOutput EmptyOutput => new ResolveAssemblyReference().ResolveAssemblyReferenceOutput;
+
+        private readonly ResolveAssemblyReference _task = new ResolveAssemblyReference();
+
+        private ResolveAssemblyReference GetResolveAssemblyReferenceTask(IBuildEngine buildEngine)
+        {
+            _task.BuildEngine = buildEngine;
+            _task.ResolveAssemblyReferenceOutput = EmptyOutput;
+
+            return _task;
+        }
+
         public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
         {
             return Task.FromResult(Execute(input));
@@ -17,13 +29,22 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest
         {
             ResolveAssemblyReferenceTaskInput taskInput = new ResolveAssemblyReferenceTaskInput(input);
             ResolveAssemblyReferenceBuildEngine buildEngine = new ResolveAssemblyReferenceBuildEngine();
-            ResolveAssemblyReference task = new ResolveAssemblyReference()
-            {
-                BuildEngine = buildEngine
-            };
+            ResolveAssemblyReference task = GetResolveAssemblyReferenceTask(buildEngine);
+            //ResolveAssemblyReference task = new ResolveAssemblyReference
+            //{
+            //    BuildEngine = buildEngine
+            //};
 
             ResolveAssemblyReferenceResult result = task.Execute(taskInput);
-            result.BuildEventArgs = buildEngine.BuildEvent;
+            //result.CustomBuildEvents = buildEngine.CustomBuildEvent;
+            //result.BuildMessageEvents = buildEngine.MessageBuildEvent;
+            //result.BuildWarningEvents = buildEngine.WarningBuildEvent;
+            //result.BuildErrorEvents = buildEngine.ErrorBuildEvent;
+
+            //result.EventCount = buildEngine.EventCount;
+
+            //System.Console.WriteLine("RAR task: {0}. Logged {1} events", result.TaskResult ? "Succeded" : "Failed", result.EventCount);
+
             return result;
         }
 
