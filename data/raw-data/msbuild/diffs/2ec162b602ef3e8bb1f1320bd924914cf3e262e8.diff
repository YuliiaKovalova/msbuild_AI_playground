diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 7b95b38a8af..2f6a8ee8a5a 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -88,6 +88,9 @@
     <Compile Include="..\Shared\StringExtensions.cs">
       <Link>SharedUtilities\StringExtensions.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\StringUtils.cs">
+      <Link>SharedUtilities\StringUtils.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\ReadOnlyEmptyCollection.cs">
       <Link>Collections\ReadOnlyEmptyCollection.cs</Link>
     </Compile>
diff --git a/src/Framework/StringUtils.cs b/src/Framework/StringUtils.cs
deleted file mode 100644
index ad5b7bffc6f..00000000000
--- a/src/Framework/StringUtils.cs
+++ /dev/null
@@ -1,54 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Framework;
-
-internal static class StringUtils
-{
-    /// <summary>
-    /// Generates a random string of the specified length.
-    /// The generated string is suitable for use in file paths.
-    /// The randomness distribution is given by the System.Random.
-    /// </summary>
-    /// <param name="length"></param>
-    /// <returns></returns>
-    internal static string GenerateRandomString(int length)
-    {
-        // Base64, 2^6 = 64
-        const int eachStringCharEncodesBites = 6;
-        const int eachByteHasBits = 8;
-        const double bytesNumNeededForSingleStringChar = eachStringCharEncodesBites / (double)eachByteHasBits;
-
-        int randomBytesNeeded = (int)Math.Ceiling(length * bytesNumNeededForSingleStringChar);
-        Random random = new();
-
-        byte[] randomBytes = new byte[randomBytesNeeded];
-        random.NextBytes(randomBytes);
-        // Base64: [A-Z], [a-z], [0-9], +, /, =
-        // We are replacing '/' to get a valid path
-        string randomBase64String = Convert.ToBase64String(randomBytes).Replace('/', '_');
-        return randomBase64String.Substring(0, length);
-    }
-
-    /// <summary>
-    /// Removes last occurence of <paramref name="substring"/> from <paramref name="fromString"/>, if present.
-    /// </summary>
-    /// <param name="fromString">String to be altered.</param>
-    /// <param name="substring">String to be removed.</param>
-    /// <param name="comparison">The comparison to use for finding.</param>
-    /// <returns>The original string (if no occurrences found) or a new string, with last instance of <paramref name="substring"/> removed.</returns>
-    internal static string RemoveLastInstanceOf(this string fromString, string substring, StringComparison comparison = StringComparison.Ordinal)
-    {
-        int lastOccurrenceIndex = fromString.LastIndexOf(substring, comparison);
-
-        if (lastOccurrenceIndex != -1)
-        {
-            fromString = fromString.Substring(0, lastOccurrenceIndex) +
-                         fromString.Substring(lastOccurrenceIndex + substring.Length);
-        }
-
-        return fromString;
-    }
-}
diff --git a/src/Shared/StringUtils.cs b/src/Shared/StringUtils.cs
new file mode 100644
index 00000000000..10152956f27
--- /dev/null
+++ b/src/Shared/StringUtils.cs
@@ -0,0 +1,57 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Shared
+{
+    internal static class StringUtils
+    {
+        /// <summary>
+        /// Generates a random string of the specified length.
+        /// The generated string is suitable for use in file paths.
+        /// The randomness distribution is given by the System.Random.
+        /// </summary>
+        /// <param name="length">The length of the string.</param>
+        /// <returns>Random generated string of the specified length.</returns>
+        public static string GenerateRandomString(int length)
+        {
+            // Base64, 2^6 = 64
+            const int eachStringCharEncodesBites = 6;
+            const int eachByteHasBits = 8;
+            const double bytesNumNeededForSingleStringChar = eachStringCharEncodesBites / (double)eachByteHasBits;
+
+            int randomBytesNeeded = (int)Math.Ceiling(length * bytesNumNeededForSingleStringChar);
+            Random random = new();
+
+            byte[] randomBytes = new byte[randomBytesNeeded];
+            random.NextBytes(randomBytes);
+
+            // Base64: [A-Z], [a-z], [0-9], +, /, =
+            // We are replacing '/' to get a valid path
+            string randomBase64String = Convert.ToBase64String(randomBytes).Replace('/', '_');
+
+            return randomBase64String.Substring(0, length);
+        }
+
+        /// <summary>
+        /// Removes last occurrence of <paramref name="substring"/> from <paramref name="fromString"/>, if present.
+        /// </summary>
+        /// <param name="fromString">String to be altered.</param>
+        /// <param name="substring">String to be removed.</param>
+        /// <param name="comparison">The comparison to use for finding.</param>
+        /// <returns>The original string (if no occurrences found) or a new string, with last instance of <paramref name="substring"/> removed.</returns>
+        public static string RemoveLastInstanceOf(this string fromString, string substring, StringComparison comparison = StringComparison.Ordinal)
+        {
+            int lastOccurrenceIndex = fromString.LastIndexOf(substring, comparison);
+
+            if (lastOccurrenceIndex != -1)
+            {
+                fromString = fromString.Substring(0, lastOccurrenceIndex) +
+                             fromString.Substring(lastOccurrenceIndex + substring.Length);
+            }
+
+            return fromString;
+        }
+    }
+}
diff --git a/src/Tasks/CreateCSharpManifestResourceName.cs b/src/Tasks/CreateCSharpManifestResourceName.cs
index 851865cbf8e..6f3b6b5a06d 100644
--- a/src/Tasks/CreateCSharpManifestResourceName.cs
+++ b/src/Tasks/CreateCSharpManifestResourceName.cs
@@ -109,7 +109,7 @@ internal static string CreateManifestNameImpl(
                 {
                     culture = culture,
                     cultureNeutralFilename =
-                        embeddedFileName.RemoveLastInstanceOf("." + culture, StringComparison.OrdinalIgnoreCase)
+                        embeddedFileName.RemoveLastInstanceOf("." + culture, StringComparison.OrdinalIgnoreCase),
                 };
             }
             else
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index a6f26407daf..9c4db39cb77 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -111,6 +111,9 @@
     <Compile Include="..\Shared\FileUtilities.cs">
       <Link>FileUtilities.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\StringUtils.cs">
+      <Link>StringUtils.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\EscapingUtilities.cs">
       <Link>EscapingUtilities.cs</Link>
     </Compile>
