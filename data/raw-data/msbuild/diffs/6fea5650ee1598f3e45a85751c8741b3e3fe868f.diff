diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 8deb4db94b7..3dd4465ed3a 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -1,5 +1,8 @@
 ï»¿using System;
+using System.Text;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Logging;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 
@@ -78,19 +81,45 @@ public void TestBinaryLoggerRoundtrip(string projectText)
 
             var mockLogFromBuild = new MockLogger();
 
-            // build and log into binary logger and mockLogger1
-            ObjectModelHelpers.BuildProjectExpectSuccess(projectText, binaryLogger, mockLogFromBuild);
+            var serialFromBuildText = new StringBuilder();
+            var serialFromBuild = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromBuildText.Append(t), colorSet: null, colorReset: null);
+            serialFromBuild.Parameters = "NOPERFORMANCESUMMARY";
+
+            var parallelFromBuildText = new StringBuilder();
+            var parallelFromBuild = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromBuildText.Append(t), colorSet: null, colorReset: null);
+            parallelFromBuild.Parameters = "NOPERFORMANCESUMMARY";
+
+            // build and log into binary logger, mock logger, serial and parallel console loggers
+            ObjectModelHelpers.BuildProjectExpectSuccess(projectText, binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild);
 
             var mockLogFromPlayback = new MockLogger();
 
+            var serialFromPlaybackText = new StringBuilder();
+            var serialFromPlayback = new SerialConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => serialFromPlaybackText.Append(t), colorSet: null, colorReset: null);
+            serialFromPlayback.Parameters = "NOPERFORMANCESUMMARY";
+
+            var parallelFromPlaybackText = new StringBuilder();
+            var parallelFromPlayback = new ParallelConsoleLogger(Framework.LoggerVerbosity.Diagnostic, t => parallelFromPlaybackText.Append(t), colorSet: null, colorReset: null);
+            parallelFromPlayback.Parameters = "NOPERFORMANCESUMMARY";
+
             var binaryLogReader = new BinaryLogReplayEventSource();
             mockLogFromPlayback.Initialize(binaryLogReader);
+            serialFromPlayback.Initialize(binaryLogReader);
+            parallelFromPlayback.Initialize(binaryLogReader);
 
             // read the binary log and replay into mockLogger2
             binaryLogReader.Replay(_logFile);
 
             // the binlog will have more information than recorded by the text log
-            Assert.Contains(mockLogFromBuild.FullLog, mockLogFromPlayback.FullLog);
+            mockLogFromPlayback.FullLog.ShouldContainWithoutWhitespace(mockLogFromBuild.FullLog);
+
+            var serialExpected = serialFromBuildText.ToString();
+            var serialActual = serialFromPlaybackText.ToString();
+            var parallelExpected = parallelFromBuildText.ToString();
+            var parallelActual = parallelFromPlaybackText.ToString();
+
+            serialActual.ShouldContainWithoutWhitespace(serialExpected);
+            parallelActual.ShouldContainWithoutWhitespace(parallelExpected);
         }
 
         [Fact]
