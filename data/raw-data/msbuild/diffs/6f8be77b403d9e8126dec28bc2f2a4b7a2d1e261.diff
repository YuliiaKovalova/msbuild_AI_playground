diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index 0c3f7acf40b..3cf65136c6a 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -37,7 +37,7 @@ public void BasicParseFirstProjectLine()
 
             p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\") = \"Project name\", \"Relative path to project file\", \"Unique name-GUID\"".AsSpan(),
-                 proj);
+                proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("Project name");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -61,9 +61,10 @@ public void ParseFirstProjectLine_VC()
 
                 p.ParseFirstProjectLine(
                     "Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"Project name.vcproj\", \"Relative path\\to\\Project name.vcproj\", \"Unique name-GUID\"".AsSpan(),
-                     proj);
+                    proj);
             });
         }
+
         /// <summary>
         /// Test that the first project line of a project with the C++ project guid and an
         /// arbitrary extension is seen as valid -- we assume that all C++ projects except
@@ -78,7 +79,7 @@ public void ParseFirstProjectLine_VC2()
 
             p.ParseFirstProjectLine(
                 "Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"Project name.myvctype\", \"Relative path\\to\\Project name.myvctype\", \"Unique name-GUID\"".AsSpan(),
-                 proj);
+                proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.KnownToBeMSBuildFormat);
             proj.ProjectName.ShouldBe("Project name.myvctype");
             proj.RelativePath.ShouldBe("Relative path\\to\\Project name.myvctype");
@@ -97,7 +98,7 @@ public void ParseFirstProjectLineWithDifferentSpacing()
 
             p.ParseFirstProjectLine(
                 "Project(\" {Project GUID} \")  = \" Project name \",  \" Relative path to project file \"    , \" Unique name-GUID \"".AsSpan(),
-                 proj);
+                proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("Project name");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -117,7 +118,7 @@ public void ParseFirstProjectLine_InvalidProject()
 
             p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\") = \"\", \"src\\.proj\", \"Unique name-GUID\"".AsSpan(),
-                 proj);
+                proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldStartWith("EmptyProjectName");
             proj.RelativePath.ShouldBe("src\\.proj");
@@ -168,9 +169,9 @@ public void ParseEtpProject()
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
                 solution.ProjectsInOrder[1].RelativePath.ShouldBe(@"ClassLibrary2.csproj");
             }
-            // Delete the files created during the test
             finally
             {
+                // Delete the files created during the test
                 File.Delete(proj1Path);
             }
         }
@@ -236,16 +237,15 @@ public void CanBeMSBuildFile()
                             EndProjectSection
                         EndProject";
 
-
                 SolutionFile solution = ParseSolutionHelper(solutionFileContents);
                 ProjectInSolution project = solution.ProjectsByGuid["{AD0F3D02-9925-4D57-9DAF-E0A9D936ABDB}"];
                 ProjectInSolution project2 = solution.ProjectsByGuid["{CCCCCCCC-9925-4D57-9DAF-E0A9D936ABDB}"];
                 project.CanBeMSBuildProjectFile(out _).ShouldBeFalse();
                 project2.CanBeMSBuildProjectFile(out _).ShouldBeTrue();
             }
-            // Delete the files created during the test
             finally
             {
+                // Delete the files created during the test
                 File.Delete(proj1Path);
                 File.Delete(proj2Path);
             }
@@ -359,9 +359,9 @@ public void ParseNestedEtpProjectSingleLevel()
                 solution.ProjectsInOrder[1].RelativePath.ShouldBe(@"someproj2.etp");
                 solution.ProjectsInOrder[2].RelativePath.ShouldBe(@"ClassLibrary1.csproj");
             }
-            // Delete the files created during the test
             finally
             {
+                // Delete the files created during the test
                 File.Delete(proj1Path);
                 File.Delete(proj2Path);
             }
@@ -680,7 +680,7 @@ public void ParseFirstProjectLineWhereProjectNameHasSpecialCharacters()
 
             p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\")  = \"MyProject,(=IsGreat)\",  \"Relative path to project file\"    , \"Unique name-GUID\"".AsSpan(),
-                 proj);
+                proj);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("MyProject,(=IsGreat)");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -725,11 +725,15 @@ internal static SolutionFile ParseSolutionHelper(string solutionFileContents)
             solutionFileContents = solutionFileContents.Replace('\'', '"');
             StreamReader sr = StreamHelpers.StringToStreamReader(solutionFileContents);
 
-            SolutionFile sp = new SolutionFile();
-            sp.SolutionFileDirectory = Path.GetTempPath();
-            sp.SolutionReader = sr;
-            sp.FullPath = FileUtilities.GetTemporaryFileName(".sln");
+            SolutionFile sp = new()
+            {
+                SolutionFileDirectory = Path.GetTempPath(),
+                SolutionReader = sr,
+                FullPath = FileUtilities.GetTemporaryFileName(".sln")
+            };
+
             sp.ParseSolution();
+
             // Clean up the temporary file that got created with this call
             return sp;
         }
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 32e30b33466..0a1c295102f 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -459,7 +459,6 @@ internal void AddSolutionConfiguration(string configurationName, string platform
         /// <summary>
         /// Reads a line from the StreamReader, trimming leading and trailing whitespace.
         /// </summary>
-        /// <returns></returns>
         private string ReadLine()
         {
             ErrorUtilities.VerifyThrow(SolutionReader != null, "ParseFileHeader(): reader is null!");
@@ -1395,9 +1394,9 @@ internal void ParseFirstProjectLine(ReadOnlySpan<char> firstLine, ProjectInSolut
             proj.RelativePath = relativePath;
             proj.ProjectGuid = projectGuid;
 
-            // If the project name is empty (as in some bad solutions) set it to some generated generic value.  
-            // This allows us to at least generate reasonable target names etc. instead of crashing. 
-            if (String.IsNullOrEmpty(proj.ProjectName))
+            // If the project name is empty (as in some bad solutions) set it to some generated generic value.
+            // This allows us to at least generate reasonable target names etc. instead of crashing.
+            if (string.IsNullOrEmpty(proj.ProjectName))
             {
                 proj.ProjectName = "EmptyProjectName." + Guid.NewGuid();
             }
@@ -1406,32 +1405,32 @@ internal void ParseFirstProjectLine(ReadOnlySpan<char> firstLine, ProjectInSolut
             ValidateProjectRelativePath(proj);
 
             // Figure out what type of project this is.
-            if ((String.Equals(projectTypeGuid, vbProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, csProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, cpsProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, cpsCsProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, cpsVbProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, cpsFsProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, fsProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, dbProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, vjProjectGuid, StringComparison.OrdinalIgnoreCase)) ||
-                (String.Equals(projectTypeGuid, synProjectGuid, StringComparison.OrdinalIgnoreCase)))
+            if (string.Equals(projectTypeGuid, vbProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, csProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, cpsProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, cpsCsProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, cpsVbProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, cpsFsProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, fsProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, dbProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, vjProjectGuid, StringComparison.OrdinalIgnoreCase) ||
+                string.Equals(projectTypeGuid, synProjectGuid, StringComparison.OrdinalIgnoreCase))
             {
                 proj.ProjectType = SolutionProjectType.KnownToBeMSBuildFormat;
             }
-            else if (String.Equals(projectTypeGuid, sharedProjectGuid, StringComparison.OrdinalIgnoreCase))
+            else if (string.Equals(projectTypeGuid, sharedProjectGuid, StringComparison.OrdinalIgnoreCase))
             {
                 proj.ProjectType = SolutionProjectType.SharedProject;
             }
-            else if (String.Equals(projectTypeGuid, solutionFolderGuid, StringComparison.OrdinalIgnoreCase))
+            else if (string.Equals(projectTypeGuid, solutionFolderGuid, StringComparison.OrdinalIgnoreCase))
             {
                 proj.ProjectType = SolutionProjectType.SolutionFolder;
             }
             // MSBuild format VC projects have the same project type guid as old style VC projects.
             // If it's not an old-style VC project, we'll assume it's MSBuild format
-            else if (String.Equals(projectTypeGuid, vcProjectGuid, StringComparison.OrdinalIgnoreCase))
+            else if (string.Equals(projectTypeGuid, vcProjectGuid, StringComparison.OrdinalIgnoreCase))
             {
-                if (String.Equals(proj.Extension, ".vcproj", StringComparison.OrdinalIgnoreCase))
+                if (string.Equals(proj.Extension, ".vcproj", StringComparison.OrdinalIgnoreCase))
                 {
                     if (!_parsingForConversionOnly)
                     {
@@ -1445,12 +1444,12 @@ internal void ParseFirstProjectLine(ReadOnlySpan<char> firstLine, ProjectInSolut
                     proj.ProjectType = SolutionProjectType.KnownToBeMSBuildFormat;
                 }
             }
-            else if (String.Equals(projectTypeGuid, webProjectGuid, StringComparison.OrdinalIgnoreCase))
+            else if (string.Equals(projectTypeGuid, webProjectGuid, StringComparison.OrdinalIgnoreCase))
             {
                 proj.ProjectType = SolutionProjectType.WebProject;
                 ContainsWebProjects = true;
             }
-            else if (String.Equals(projectTypeGuid, wdProjectGuid, StringComparison.OrdinalIgnoreCase))
+            else if (string.Equals(projectTypeGuid, wdProjectGuid, StringComparison.OrdinalIgnoreCase))
             {
                 proj.ProjectType = SolutionProjectType.WebDeploymentProject;
                 ContainsWebDeploymentProjects = true;
