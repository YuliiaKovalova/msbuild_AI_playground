diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index b1690999d0a..f1e5e7ca788 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1440,7 +1440,6 @@ public partial struct ProjectGraphEntryPoint
     public sealed partial class ProjectGraphNode
     {
         internal ProjectGraphNode() { }
-        public System.Collections.Generic.IReadOnlyDictionary<string, string> GlobalProperties { get { throw null; } }
         public Microsoft.Build.Execution.ProjectInstance ProjectInstance { get { throw null; } }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Experimental.Graph.ProjectGraphNode> ProjectReferences { get { throw null; } }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Experimental.Graph.ProjectGraphNode> ReferencingProjects { get { throw null; } }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index b54a999ab94..006c1cf93b9 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1435,7 +1435,6 @@ public partial struct ProjectGraphEntryPoint
     public sealed partial class ProjectGraphNode
     {
         internal ProjectGraphNode() { }
-        public System.Collections.Generic.IReadOnlyDictionary<string, string> GlobalProperties { get { throw null; } }
         public Microsoft.Build.Execution.ProjectInstance ProjectInstance { get { throw null; } }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Experimental.Graph.ProjectGraphNode> ProjectReferences { get { throw null; } }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Experimental.Graph.ProjectGraphNode> ReferencingProjects { get { throw null; } }
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index e9274080d7d..4d5ef743d0d 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -239,10 +239,10 @@ public void ConstructWithDifferentGlobalProperties()
                 // Projects 2 and 3 both reference project 4, but with different properties, so they should not point to the same node.
                 GetNodeForProject(graph, 2).ProjectReferences.First().ShouldNotBe(GetNodeForProject(graph, 3).ProjectReferences.First());
                 GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("4.proj");
-                GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties.ShouldHaveSingleItem();
-                GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties.Keys.First().ShouldBe(PropertyNames.IsGraphBuild);
+                GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.GlobalProperties.ShouldHaveSingleItem();
+                GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.GlobalProperties.Keys.First().ShouldBe(PropertyNames.IsGraphBuild);
                 GetNodeForProject(graph, 3).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("4.proj");
-                GetNodeForProject(graph, 3).ProjectReferences.First().GlobalProperties.ShouldNotBeEmpty();
+                GetNodeForProject(graph, 3).ProjectReferences.First().ProjectInstance.GlobalProperties.ShouldNotBeEmpty();
             }
         }
 
@@ -261,7 +261,7 @@ public void TestGlobalPropertiesInProjectReferences()
                 CreateProjectFile(env, 3);
                 ProjectGraph graph = new ProjectGraph(entryProject.Path);
                 graph.ProjectNodes.Count.ShouldBe(3);
-                GetNodeForProject(graph, 3).GlobalProperties["A"].ShouldBe("B");
+                GetNodeForProject(graph, 3).ProjectInstance.GlobalProperties["A"].ShouldBe("B");
             }
         }
 
@@ -369,12 +369,12 @@ public void ConstructWithCaseDifferences()
                 // Property names are case-insensitive, so projects 2 and 3 point to the same project 5 node.
                 GetNodeForProject(graph, 2).ProjectReferences.First().ShouldBe(GetNodeForProject(graph, 3).ProjectReferences.First());
                 GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("5.proj");
-                GetNodeForProject(graph, 2).ProjectReferences.First().GlobalProperties["FoO"].ShouldBe("bar");
+                GetNodeForProject(graph, 2).ProjectReferences.First().ProjectInstance.GlobalProperties["FoO"].ShouldBe("bar");
 
                 // Property values are case-sensitive, so project 4 points to a different project 5 node than proejcts 2 and 3
                 GetNodeForProject(graph, 4).ProjectReferences.First().ShouldNotBe(GetNodeForProject(graph, 2).ProjectReferences.First());
                 GetNodeForProject(graph, 4).ProjectReferences.First().ProjectInstance.FullPath.ShouldEndWith("5.proj");
-                GetNodeForProject(graph, 4).ProjectReferences.First().GlobalProperties["FoO"].ShouldBe("BAR");
+                GetNodeForProject(graph, 4).ProjectReferences.First().ProjectInstance.GlobalProperties["FoO"].ShouldBe("BAR");
             }
         }
 
@@ -438,16 +438,16 @@ public void ConstructWithMultipleEntryPointsWithDifferentGlobalProperties()
                 // The entry points should not be the same node, but should point to the same project
                 entryPointNode1.ShouldNotBe(entryPointNode2);
                 entryPointNode1.ProjectInstance.FullPath.ShouldBe(entryPointNode2.ProjectInstance.FullPath);
-                entryPointNode1.GlobalProperties["Platform"].ShouldBe("x86");
-                entryPointNode2.GlobalProperties["Platform"].ShouldBe("x64");
+                entryPointNode1.ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+                entryPointNode2.ProjectInstance.GlobalProperties["Platform"].ShouldBe("x64");
 
                 // The entry points should not have the same project reference, but should point to the same project reference file
                 entryPointNode1.ProjectReferences.Count.ShouldBe(1);
                 entryPointNode2.ProjectReferences.Count.ShouldBe(1);
                 entryPointNode1.ProjectReferences.First().ShouldNotBe(entryPointNode2.ProjectReferences.First());
                 entryPointNode1.ProjectReferences.First().ProjectInstance.FullPath.ShouldBe(entryPointNode2.ProjectReferences.First().ProjectInstance.FullPath);
-                entryPointNode1.ProjectReferences.First().GlobalProperties["Platform"].ShouldBe("x86");
-                entryPointNode2.ProjectReferences.First().GlobalProperties["Platform"].ShouldBe("x64");
+                entryPointNode1.ProjectReferences.First().ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+                entryPointNode2.ProjectReferences.First().ProjectInstance.GlobalProperties["Platform"].ShouldBe("x64");
             }
         }
 
@@ -477,14 +477,14 @@ public void ConstructWithMultipleEntryPointsWithDifferentGlobalPropertiesConverg
                 // The entry points should not be the same node, but should point to the same project
                 entryPointNode1.ShouldNotBe(entryPointNode2);
                 entryPointNode1.ProjectInstance.FullPath.ShouldBe(entryPointNode2.ProjectInstance.FullPath);
-                entryPointNode1.GlobalProperties["Platform"].ShouldBe("x86");
-                entryPointNode2.GlobalProperties["Platform"].ShouldBe("x64");
+                entryPointNode1.ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+                entryPointNode2.ProjectInstance.GlobalProperties["Platform"].ShouldBe("x64");
 
                 // The entry points should have the same project reference since they're platform-agnostic
                 entryPointNode1.ProjectReferences.Count.ShouldBe(1);
                 entryPointNode2.ProjectReferences.Count.ShouldBe(1);
                 entryPointNode1.ProjectReferences.First().ShouldBe(entryPointNode2.ProjectReferences.First());
-                entryPointNode1.ProjectReferences.First().GlobalProperties.ContainsKey("Platform").ShouldBeFalse();
+                entryPointNode1.ProjectReferences.First().ProjectInstance.GlobalProperties.ContainsKey("Platform").ShouldBeFalse();
             }
         }
 
@@ -961,7 +961,7 @@ public void AllNodesShouldHaveGraphBuildGlobalProperty(Dictionary<int, int[]> ed
 
                 foreach (var node in projectGraph.ProjectNodes)
                 {
-                    Helpers.AssertDictionariesEqual(expectedGlobalProperties, node.GlobalProperties.ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+                    Helpers.AssertDictionariesEqual(expectedGlobalProperties, node.ProjectInstance.GlobalProperties.ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
                 }
             }
         }
@@ -978,7 +978,7 @@ public void UserValuesForIsGraphBuildGlobalPropertyShouldBePreserved()
                     null,
                     new Dictionary<string, string> {{PropertyNames.IsGraphBuild, "xyz"}});
 
-                projectGraph.ProjectNodes.First().GlobalProperties[PropertyNames.IsGraphBuild].ShouldBe("xyz");
+                projectGraph.ProjectNodes.First().ProjectInstance.GlobalProperties[PropertyNames.IsGraphBuild].ShouldBe("xyz");
             }
         }
 
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index d5558f6bcca..4d43f3977a2 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -460,6 +460,11 @@ private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string>
         /// using <see cref="Project.CreateProjectInstance()"/> with the flag
         /// <see cref="ProjectInstanceSettings.Immutable"/>, the resulting ProjectGraph
         /// nodes might not be buildable.
+        ///
+        /// To avoid corruption of the graph and subsequent builds based on the graph:
+        /// - all callback parameters must be utilized for creating the ProjectInstance, without any mutations
+        /// - the project instance should not be mutated in any way, its state should be a
+        /// full fidelity representation of the project file
         /// </remarks>
         public delegate ProjectInstance ProjectInstanceFactoryFunc(
             string projectPath,
@@ -496,8 +501,7 @@ private ProjectGraphNode CreateNewNode(
             }
 
             var graphNode = new ProjectGraphNode(
-                projectInstance,
-                globalProperties);
+                projectInstance);
             _allParsedProjects[configurationMetadata] = graphNode;
             return graphNode;
         }
@@ -529,6 +533,10 @@ private bool FindGraphNodes(
 
                         foreach (var referenceConfig in GetReferenceConfigs(parsedProject.ProjectInstance))
                         {
+                             /*todo: fix the following double check-then-act concurrency bug: one thread can pass the two checks, loose context,
+                             meanwhile another thread passes the same checks with the same data and inserts its reference. The initial thread regains context
+                             and duplicates the information, leading to wasted work
+                             */
                             if (!tasksInProgress.ContainsKey(referenceConfig))
                             {
                                 if (!_allParsedProjects.ContainsKey(referenceConfig))
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 8f61b03b160..b283aa8e39e 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -15,12 +15,9 @@ public sealed class ProjectGraphNode
         private readonly List<ProjectGraphNode> _referencingProjects = new List<ProjectGraphNode>();
 
         // No public creation.
-        internal ProjectGraphNode(
-            ProjectInstance projectInstance,
-            IReadOnlyDictionary<string, string> globalProperties)
+        internal ProjectGraphNode(ProjectInstance projectInstance)
         {
             ProjectInstance = projectInstance;
-            GlobalProperties = globalProperties;
         }
 
         /// <summary>
@@ -38,13 +35,6 @@ internal ProjectGraphNode(
         /// </summary>
         public ProjectInstance ProjectInstance { get; }
 
-        /// <summary>
-        /// Gets the global properties which should be used to evaluate and execute this node in the graph.
-        /// <summary>
-        /// The global properties this node was evaluated with. See <see cref="ComputeBuildData"/> for the global properties to use when building this node.
-        /// </summary>
-        public IReadOnlyDictionary<string, string> GlobalProperties { get; }
-
         internal void AddProjectReference(ProjectGraphNode projectGraphNode) => _projectReferences.Add(projectGraphNode);
 
         internal void AddReferencingProject(ProjectGraphNode projectGraphNode) => _referencingProjects.Add(projectGraphNode);
