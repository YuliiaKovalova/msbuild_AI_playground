diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 86c9d5d7ad6..cf2bae57bad 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -85,6 +85,11 @@ internal void ProcessTaskStartedEventArgs(
 
         if (taskStartedEventArgs.BuildEventContext is not null)
         {
+            ElementLocation invocationLocation = ElementLocation.Create(
+                taskStartedEventArgs.TaskFile,
+                taskStartedEventArgs.LineNumber,
+                taskStartedEventArgs.ColumnNumber);
+
             // Add a new entry to _tasksBeingExecuted. TaskParameters are initialized empty and will be recorded
             // based on TaskParameterEventArgs we receive later.
             Dictionary<string, TaskInvocationAnalysisData.TaskParameter> taskParameters = new();
@@ -94,10 +99,8 @@ internal void ProcessTaskStartedEventArgs(
                 TaskParameters = taskParameters,
                 AnalysisData = new(
                     projectFilePath: taskStartedEventArgs.ProjectFile!,
-                    lineNumber: taskStartedEventArgs.LineNumber,
-                    columnNumber: taskStartedEventArgs.ColumnNumber,
+                    taskInvocationLocation: invocationLocation,
                     taskName: taskStartedEventArgs.TaskName,
-                    taskFile: taskStartedEventArgs.TaskFile,
                     taskAssemblyLocation: taskStartedEventArgs.TaskAssemblyLocation,
                     parameters: taskParameters),
             };
diff --git a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
index 09be1d78813..f0623e4a822 100644
--- a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
+++ b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
@@ -25,26 +25,6 @@ public abstract class AnalysisData(string projectFilePath)
     public string ProjectFilePath { get; } = projectFilePath;
 }
 
-/// <summary>
-/// Base for a data with line/column location passed from infrastructure to build analyzers.
-/// </summary>
-/// <param name="projectFilePath">Currently built project.</param>
-/// <param name="lineNumber">The relevant line number in <paramref name="projectFilePath"/> where the event happened.</param>
-/// <param name="columnNumber">The relevant column number in <paramref name="projectFilePath"/> where the event happened.</param>
-public abstract class AnalysisDataWithLocation(string projectFilePath, int lineNumber, int columnNumber)
-    : AnalysisData(projectFilePath)
-{
-    /// <summary>
-    /// Line number of the relevant location.
-    /// </summary>
-    public int LineNumber { get; } = lineNumber;
-
-    /// <summary>
-    /// Column number of the relevant location.
-    /// </summary>
-    public int ColumnNumber { get; } = columnNumber;
-}
-
 /// <summary>
 /// Data passed from infrastructure to build analyzers.
 /// </summary>
diff --git a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
index 133c2fe700b..bb863d5aa84 100644
--- a/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs
@@ -54,30 +54,28 @@ internal ParsedItemsAnalysisData(
 /// <summary>
 /// BuildCheck OM data representing a task executed by a project.
 /// </summary>
-public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation
+public sealed class TaskInvocationAnalysisData : AnalysisData
 {
     public record class TaskParameter(object? Value, bool IsOutput);
 
     internal TaskInvocationAnalysisData(
         string projectFilePath,
-        int lineNumber,
-        int columnNumber,
+        ElementLocation taskInvocationLocation,
         string taskName,
-        string taskFile,
         string taskAssemblyLocation,
-        IReadOnlyDictionary<string, TaskParameter> parameters) :
-        base(projectFilePath, lineNumber, columnNumber)
+        IReadOnlyDictionary<string, TaskParameter> parameters)
+        : base(projectFilePath)
     {
+        TaskInvocationLocation = taskInvocationLocation;
         TaskName = taskName;
-        TaskFile = taskFile;
         TaskAssemblyLocation = taskAssemblyLocation;
         Parameters = parameters;
     }
 
     /// <summary>
-    /// MSBuild file where this task was defined.
+    /// The project file and line/column number where the task is invoked.
     /// </summary>
-    public string TaskFile { get; }
+    public ElementLocation TaskInvocationLocation { get; }
 
     /// <summary>
     /// Name of the task.
diff --git a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
index 3cd1f15dacf..bd93ddcf927 100644
--- a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
@@ -95,8 +95,8 @@ private void BuildProject(string taskInvocation)
                 foreach (var data in s_testAnalyzer!.AnalysisData)
                 {
                     data.ProjectFilePath.ShouldBe(testProject.ProjectFile);
-                    data.LineNumber.ShouldBeGreaterThan(0);
-                    data.ColumnNumber.ShouldBeGreaterThan(0);
+                    data.TaskInvocationLocation.Line.ShouldBeGreaterThan(0);
+                    data.TaskInvocationLocation.Column.ShouldBeGreaterThan(0);
                 }
             }
         }
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index 288a0193524..db1f450e95b 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -171,22 +171,22 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         public string ProjectFile => projectFile;
 
         /// <summary>
-        /// MSBuild file where this task was defined.
+        /// MSBuild file in which this task was invoked.
         /// </summary>
         public string TaskFile => taskFile;
 
         /// <summary>
-        /// Line number of the task invocation in the project file
+        /// Line number of the task invocation in the project file.
         /// </summary>
         public int LineNumber { get; internal set; }
 
         /// <summary>
-        /// Column number of the task invocation in the project file
+        /// Column number of the task invocation in the project file.
         /// </summary>
         public int ColumnNumber { get; internal set; }
 
         /// <summary>
-        /// The location of the assembly containing the implementation of the task
+        /// The location of the assembly containing the implementation of the task.
         /// </summary>
         public string TaskAssemblyLocation { get; private set; }
 
