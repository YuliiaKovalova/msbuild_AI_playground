diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index f848650b1d0..535066ec94b 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -197,6 +197,11 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     {
         System.Collections.Generic.IReadOnlyDictionary<string, string> GetGlobalProperties();
     }
+    public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
+    {
+        void ReleaseCores(Microsoft.Build.Framework.ITask task, int releasedCores);
+        int RequestCores(Microsoft.Build.Framework.ITask task, int requestedCores);
+    }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
         void Cancel();
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 19a6888414a..d202cdd397d 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -197,6 +197,11 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     {
         System.Collections.Generic.IReadOnlyDictionary<string, string> GetGlobalProperties();
     }
+    public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
+    {
+        void ReleaseCores(Microsoft.Build.Framework.ITask task, int releasedCores);
+        int RequestCores(Microsoft.Build.Framework.ITask task, int requestedCores);
+    }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
         void Cancel();
diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index d739b45082b..146d06ca8bc 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -352,6 +352,7 @@ protected Task(System.Resources.ResourceManager taskResources, string helpKeywor
         public Microsoft.Build.Framework.IBuildEngine4 BuildEngine4 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine5 BuildEngine5 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine6 BuildEngine6 { get { throw null; } }
+        public Microsoft.Build.Framework.IBuildEngine7 BuildEngine7 { get { throw null; } }
         protected string HelpKeywordPrefix { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskHost HostObject { get { throw null; } set { } }
         public Microsoft.Build.Utilities.TaskLoggingHelper Log { get { throw null; } }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index 1263a5949a1..fbc4b28ef38 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -197,6 +197,7 @@ protected Task(System.Resources.ResourceManager taskResources, string helpKeywor
         public Microsoft.Build.Framework.IBuildEngine4 BuildEngine4 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine5 BuildEngine5 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine6 BuildEngine6 { get { throw null; } }
+        public Microsoft.Build.Framework.IBuildEngine7 BuildEngine7 { get { throw null; } }
         protected string HelpKeywordPrefix { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskHost HostObject { get { throw null; } set { } }
         public Microsoft.Build.Utilities.TaskLoggingHelper Log { get { throw null; } }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index dfb430410b4..77d4d8d22eb 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -34,7 +34,7 @@ internal class TaskHost :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IBuildEngine6
+        IBuildEngine7
     {
         /// <summary>
         /// True if the "secret" environment variable MSBUILDNOINPROCNODE is set. 
@@ -665,6 +665,37 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
 
         #endregion
 
+        int runningTotal = 0;
+
+        public int RequestCores(ITask task, int requestedCores)
+        {
+            Semaphore cpuCount = Semaphore.OpenExisting("cpuCount");
+            int coresAcquiredBeforeMoreCoresGetAcquired = runningTotal;
+            // Keep requesting cores until we can't anymore, or we've gotten the number of cores we wanted.
+            for (int i = 0; i < requestedCores; i++)
+            {
+                if(cpuCount.WaitOne(0))
+                {
+                    runningTotal++;
+                }
+                else
+                {
+                    break;
+                }
+            }
+
+            return runningTotal - coresAcquiredBeforeMoreCoresGetAcquired;
+        }
+
+        public void ReleaseCores(ITask task, int coresToRelease)
+        {
+            Semaphore cpuCount = Semaphore.OpenExisting("cpuCount");
+
+            coresToRelease = Math.Min(runningTotal, coresToRelease);
+
+            cpuCount.Release(coresToRelease);
+        }
+
         /// <summary>
         /// Called by the internal MSBuild task.
         /// Does not take the lock because it is called by another request builder thread.
diff --git a/src/Build/BackEnd/Node/InProcNode.cs b/src/Build/BackEnd/Node/InProcNode.cs
index b6a58044acd..f86ecad6b7c 100644
--- a/src/Build/BackEnd/Node/InProcNode.cs
+++ b/src/Build/BackEnd/Node/InProcNode.cs
@@ -17,7 +17,7 @@
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
-    /// This class represents an implementation of INode for out-of-proc nodes.
+    /// This class represents an implementation of INode for in-proc nodes.
     /// </summary>
     internal class InProcNode : INode, INodePacketFactory
     {
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index cd0d6670e86..aad33d91d9c 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -28,6 +28,7 @@
 using ObjectModel = System.Collections.ObjectModel;
 using System.Data.OleDb;
 using System.Runtime.CompilerServices;
+using System.Security.AccessControl;
 
 namespace Microsoft.Build.Evaluation
 {
diff --git a/src/Framework/IBuildEngine7.cs b/src/Framework/IBuildEngine7.cs
new file mode 100644
index 00000000000..1bf8e0b07c8
--- /dev/null
+++ b/src/Framework/IBuildEngine7.cs
@@ -0,0 +1,28 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// This interface extends IBuildEngine6 to allow tasks and build scheduler to coordinate resource (cores) usage.
+    /// </summary>
+
+    public interface IBuildEngine7 : IBuildEngine6
+    {
+        /// <summary>
+        /// If a task launches multiple parallel processes, it should ask how many cores it can use.
+        /// </summary>
+        /// <param name="requestedCores">The number of cores a task can potentially use</param>
+        /// <returns>The number of cores a task is allowed to use</returns>
+        int RequestCores(ITask task, int requestedCores);
+
+        /// <summary>
+        /// A task should notify the build manager when all or some of the requested cores are not used anymore.
+        /// When task is finished, the cores it requested are automatically released.
+        /// </summary>
+        /// <param name="releasedCores"></param>
+        void ReleaseCores(ITask task, int releasedCores);
+    }
+}
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index eb2fd268eb6..170e7e200ed 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -40,6 +40,7 @@
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
+using System.CodeDom;
 
 namespace Microsoft.Build.CommandLine
 {
@@ -1174,6 +1175,8 @@ string outputResultsCache
 #if MSBUILDENABLEVSPROFILING
                     DataCollection.CommentMarkProfile(8800, "Pending Build Request from MSBuild.exe");
 #endif
+                   new Semaphore(cpuCount, cpuCount, "cpuCount");
+
                     BuildResultCode? result = null;
                     buildManager.BeginBuild(parameters);
                     Exception exception = null;
@@ -1200,6 +1203,7 @@ string outputResultsCache
                                 else
                                 {
                                     buildRequest = new BuildRequestData(projectFile, globalProperties, toolsVersion, targets, null);
+                                    
                                 }
                             }
 
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 044ca37e250..c89e12c27e3 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -484,6 +484,7 @@
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCodeType.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCompilers.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryTaskInfo.cs" />
+    <Compile Include="SemaphoreCPUTests.cs" />
     <Compile Include="System.Design.cs" />
     <Compile Include="system.design\stronglytypedresourcebuilder.cs" />
     <Compile Include="TaskExtension.cs">
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index 32f8ed42f3c..68937800130 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -134,6 +134,7 @@
     <UsingTask TaskName="Microsoft.Build.Tasks.Move"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.MSBuild"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.ReadLinesFromFile"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
+    <UsingTask TaskName="Microsoft.Build.Tasks.SemaphoreCPUTests"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
 
     <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == ''" />
diff --git a/src/Tasks/SemaphoreCPUTests.cs b/src/Tasks/SemaphoreCPUTests.cs
new file mode 100644
index 00000000000..a0b8030a597
--- /dev/null
+++ b/src/Tasks/SemaphoreCPUTests.cs
@@ -0,0 +1,30 @@
+ï»¿using Microsoft.Build.Utilities;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Microsoft.Build.Tasks
+{
+    class SemaphoreCPUTests : Task
+    {
+        public override bool Execute()
+        {
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 3123890)} cores", Framework.MessageImportance.High);
+
+            BuildEngine7.ReleaseCores(this, 50);
+            Log.LogMessageFromText("Released some number of cores", Framework.MessageImportance.High);
+
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 10)} cores", Framework.MessageImportance.High);
+
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 30)} cores", Framework.MessageImportance.High);
+
+            BuildEngine7.ReleaseCores(this, 2);
+            Log.LogMessageFromText("Released some number of cores", Framework.MessageImportance.High);
+
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 12)} cores", Framework.MessageImportance.High);
+
+            return !Log.HasLoggedErrors;
+        }
+    }
+}
diff --git a/src/Utilities/Task.cs b/src/Utilities/Task.cs
index 76c2d030bd8..39846721d3c 100644
--- a/src/Utilities/Task.cs
+++ b/src/Utilities/Task.cs
@@ -89,6 +89,11 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)
         /// </summary>
         public IBuildEngine6 BuildEngine6 => (IBuildEngine6)BuildEngine;
 
+        /// <summary>
+        /// Retrieves the <see cref="IBuildEngine7" /> version of the build engine interface provided by the host.
+        /// </summary>
+        public IBuildEngine7 BuildEngine7 => (IBuildEngine7)BuildEngine;
+
         /// <summary>
         /// The build engine sets this property if the host IDE has associated a host object with this particular task.
         /// </summary>
