diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index c30721a2d59..c02d493c324 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1109,7 +1109,66 @@ public void HasMetadata()
 
 </Project>");
 
-            logger.AssertLogContains("[One|Three|Four]");
+            logger.AssertLogContains("[One|Three|Four|Five]");
+        }
+
+        /// <summary>
+        /// Test metadata item functions with empty string metadata and not present metadata
+        /// </summary>
+        [Fact]
+        public void MetadataFuntionTestingWithEmtpyString()
+        {
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess("""
+<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+   <ItemGroup>
+    <_Item Include="One">
+      <A>true</A>
+    </_Item>
+    <_Item Include="Two">
+      <A>false</A>
+    </_Item>
+    <_Item Include="Three">
+      <A></A>
+    </_Item>
+    <_Item Include="Four">
+      <B></B>
+    </_Item>
+  </ItemGroup>
+  <Target Name="Tests" DependsOnTargets="WithMetadataValueAFalse;WithMetadataValueAEmpty;WithOutMetadataValueAEmtpy;HasMetadataA;WithMetadataValueCEmpty;HasMetadataC;AnyHaveMetadataValueCEmpty;WithOutMetadataValueCEmpty" />
+  <Target Name="WithMetadataValueAFalse">
+    <Message Text="WithMetadataValueAFalse: [@(_Item->WithMetadataValue('A', 'false'), '|')]"/>
+  </Target>
+  <Target Name="WithMetadataValueAEmpty">
+    <Message Text="WithMetadataValueAEmpty: [@(_Item->WithMetadataValue('A', ''), '|')]"/>
+  </Target>
+  <Target Name="WithOutMetadataValueAEmtpy">
+    <Message Text="WithOutMetadataValueAEmpty: [@(_Item->WithOutMetadataValue('A', ''), '|')]"/>
+  </Target>
+  <Target Name="HasMetadataA">
+    <Message Text="HasMetadataA: [@(_Item->HasMetadata('A'), '|')]"/>
+  </Target>
+  <Target Name="WithMetadataValueCEmpty">
+    <Message Text="WithMetadataValueCEmpty: [@(_Item->WithMetadataValue('C', ''), '|')]"/>
+  </Target>
+  <Target Name="HasMetadataC">
+    <Message Text="HasMetadataC: [@(_Item->HasMetadata('C'), '|')]"/>
+  </Target>
+  <Target Name="AnyHaveMetadataValueCEmpty">
+    <Message Text="AnyHaveMetadataValueCEmpty: [@(_Item->AnyHaveMetadataValue('C', ''), '|')]"/>
+  </Target>
+  <Target Name="WithOutMetadataValueCEmpty">
+    <Message Text="WithOutMetadataValueCEmpty: [@(_Item->WithOutMetadataValue('C', ''), '|')]"/>
+  </Target>
+</Project>
+""");
+            logger.AssertLogContains("WithMetadataValueAFalse: [Two]");
+            logger.AssertLogContains("WithMetadataValueAEmpty: [Three]");
+            logger.AssertLogContains("WithOutMetadataValueAEmpty: [One|Two|Four]");
+            logger.AssertLogContains("HasMetadataA: [One|Two|Three]");
+            logger.AssertLogContains("WithMetadataValueCEmpty: []");
+            logger.AssertLogContains("HasMetadataC: []");
+            logger.AssertLogContains("AnyHaveMetadataValueCEmpty: [false]");
+            logger.AssertLogContains("WithOutMetadataValueCEmpty: [One|Two|Three|Four]");
         }
 
         [Fact]
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index ab6d9b76eb6..97b41097cfd 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2749,11 +2749,11 @@ internal static IEnumerable<Pair<string, S>> HasMetadata(Expander<P, I> expander
 
                     foreach (Pair<string, S> item in itemsOfType)
                     {
-                        string metadataValue = null;
+                        bool hasMetadata = false;
 
                         try
                         {
-                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                            hasMetadata = item.Value.HasMetadata(metadataName);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2766,7 +2766,7 @@ internal static IEnumerable<Pair<string, S>> HasMetadata(Expander<P, I> expander
 
                         // GetMetadataValueEscaped returns empty string for missing metadata,
                         // but IItem specifies it should return null
-                        if (!string.IsNullOrEmpty(metadataValue))
+                        if (hasMetadata)
                         {
                             // return a result through the enumerator
                             yield return new Pair<string, S>(item.Key, item.Value);
@@ -2791,7 +2791,10 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
 
                         try
                         {
-                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                            if (item.Value.HasMetadata(metadataName))
+                            {
+                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                            }
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2810,6 +2813,46 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
                     }
                 }
 
+                /// <summary>
+                /// Intrinsic function that returns those items don't have the given metadata value
+                /// Using a case insensitive comparison.
+                /// </summary>
+                /// 
+                internal static IEnumerable<Pair<string, S>> WithOutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)
+                {
+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, "InvalidItemFunctionSyntax", functionName, arguments == null ? 0 : arguments.Length);
+
+                    string metadataName = arguments[0];
+                    string metadataValueToFind = arguments[1];
+
+                    foreach (Pair<string, S> item in itemsOfType)
+                    {
+                        string metadataValue = null;
+
+                        try
+                        {
+                            if (item.Value.HasMetadata(metadataName))
+                            {
+                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                            }
+                        }
+                        catch (ArgumentException ex) // Blank metadata name
+                        {
+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotEvaluateItemMetadata", metadataName, ex.Message);
+                        }
+                        catch (InvalidOperationException ex)
+                        {
+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "CannotEvaluateItemMetadata", metadataName, ex.Message);
+                        }
+
+                        if (!String.Equals(metadataValue, metadataValueToFind, StringComparison.OrdinalIgnoreCase))
+                        {
+                            // return a result through the enumerator
+                            yield return new Pair<string, S>(item.Key, item.Value);
+                        }
+                    }
+                }
+
                 /// <summary>
                 /// Intrinsic function that returns a boolean to indicate if any of the items have the given metadata value
                 /// Using a case insensitive comparison.
@@ -2830,7 +2873,10 @@ internal static IEnumerable<Pair<string, S>> AnyHaveMetadataValue(Expander<P, I>
 
                             try
                             {
-                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                                if (item.Value.HasMetadata(metadataName))
+                                {
+                                    metadataValue = item.Value.GetMetadataValueEscaped(metadataName);
+                                }
                             }
                             catch (ArgumentException ex) // Blank metadata name
                             {
diff --git a/src/Build/Evaluation/IItem.cs b/src/Build/Evaluation/IItem.cs
index 1365978c41d..dbeaaa67f08 100644
--- a/src/Build/Evaluation/IItem.cs
+++ b/src/Build/Evaluation/IItem.cs
@@ -52,5 +52,7 @@ string ProjectDirectory
         /// Metadata value is the escaped value initially set.
         /// </summary>
         string GetMetadataValueEscaped(string name);
+
+        bool HasMetadata(string name);
     }
 }
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 05aa7f5e8c0..c1edb7d0def 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1602,6 +1602,11 @@ public bool Equals(TaskItem other)
             /// </remarks>
             public bool HasMetadata(string name)
             {
+                if (string.IsNullOrEmpty(name))
+                {
+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
+                }
+
                 if ((_directMetadata?.Contains(name) == true) ||
                      FileUtilities.ItemSpecModifiers.IsItemSpecModifier(name) ||
                     GetItemDefinitionMetadata(name) != null)
