diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 4f7374a90f0..573bd09b7c1 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -2806,31 +2806,19 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e
             Assert.Equal(expectedExpansion, result);
         }
 
-        [WindowsFullFrameworkOnlyTheory]
-        [InlineData("windows")]
-        [InlineData("linux")]
-        [InlineData("macos")]
-        [InlineData("osx")]
-        public void IsOSPlatformFullFramework(string platform)
-        {
-            string propertyFunction = $"$([System.OperatingSystem]::IsOSPlatform('{platform}'))";
-            string expected = platform.Equals("windows", StringComparison.OrdinalIgnoreCase) ? "True" : "False";
-            var pg = new PropertyDictionary<ProjectPropertyInstance>();
-            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
-            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);
-        }
-
-        [DotNetOnlyTheory]
+        [Theory]
         [InlineData("windows")]
         [InlineData("linux")]
         [InlineData("macos")]
         [InlineData("osx")]
-        public void IsOSPlatformDotNet(string platform)
+        public void IsOSPlatform(string platform)
         {
             string propertyFunction = $"$([System.OperatingSystem]::IsOSPlatform('{platform}'))";
             bool result = false;
 #if NET5_0_OR_GREATER
             result = System.OperatingSystem.IsOSPlatform(platform);
+#else
+            result = Microsoft.Build.Framework.OperatingSystem.IsOSPlatform(platform);
 #endif
             string expected = result ? "True" : "False";
             var pg = new PropertyDictionary<ProjectPropertyInstance>();
@@ -2838,38 +2826,21 @@ public void IsOSPlatformDotNet(string platform)
             expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);
         }
 
-        [WindowsFullFrameworkOnlyTheory]
-        [InlineData("windows", 4)]
-        [InlineData("linux", 0)]
-        [InlineData("macos", 10)]
-        [InlineData("macos", 999)]
-        [InlineData("osx", 0)]
-        public void IsOSPlatformVersionAtLeastFullFramework(string platform, int major)
-        {
-            string propertyFunction = $"$([System.OperatingSystem]::IsOSPlatformVersionAtLeast('{platform}', {major}, 0, 0, 0))";
-            bool result = false;
-#if !NET5_0_OR_GREATER
-            result = Microsoft.Build.Framework.OperatingSystem.IsOSPlatformVersionAtLeast(platform, major, 0, 0, 0);
-#endif
-            string expected = result ? "True" : "False";
-            var pg = new PropertyDictionary<ProjectPropertyInstance>();
-            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
-            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);
-        }
-
-        [DotNetOnlyTheory]
+        [Theory]
         [InlineData("windows", 4)]
         [InlineData("windows", 999)]
         [InlineData("linux", 0)]
         [InlineData("macos", 10)]
         [InlineData("macos", 999)]
         [InlineData("osx", 0)]
-        public void IsOSPlatformVersionAtLeastDotNet(string platform, int major)
+        public void IsOSPlatformVersionAtLeast(string platform, int major)
         {
             string propertyFunction = $"$([System.OperatingSystem]::IsOSPlatformVersionAtLeast('{platform}', {major}, 0, 0, 0))";
             bool result = false;
 #if NET5_0_OR_GREATER
             result = System.OperatingSystem.IsOSPlatformVersionAtLeast(platform, major, 0, 0, 0);
+#else
+            result = Microsoft.Build.Framework.OperatingSystem.IsOSPlatformVersionAtLeast(platform, major, 0, 0, 0);
 #endif
             string expected = result ? "True" : "False";
             var pg = new PropertyDictionary<ProjectPropertyInstance>();
