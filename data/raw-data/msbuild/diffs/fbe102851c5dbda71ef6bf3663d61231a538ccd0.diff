diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 0b6310c25cd..b500e0ea135 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -900,8 +900,6 @@ public ResolveAssemblyReference() { }
         public string AssemblyInformationCacheOutputPath { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskItem[] AssemblyInformationCachePaths { get { throw null; } set { } }
         public bool AutoUnify { get { throw null; } set { } }
-        public string[] CacheInputPaths { get { throw null; } set { } }
-        public string CacheOutputPath { get { throw null; } set { } }
         public string[] CandidateAssemblyFiles { get { throw null; } set { } }
         public bool CopyLocalDependenciesWhenParentReferenceInGac { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 2d63521edbb..4d931ebd3ba 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -645,8 +645,6 @@ public ResolveAssemblyReference() { }
         public string AssemblyInformationCacheOutputPath { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskItem[] AssemblyInformationCachePaths { get { throw null; } set { } }
         public bool AutoUnify { get { throw null; } set { } }
-        public string[] CacheInputPaths { get { throw null; } set { } }
-        public string CacheOutputPath { get { throw null; } set { } }
         public string[] CandidateAssemblyFiles { get { throw null; } set { } }
         public bool CopyLocalDependenciesWhenParentReferenceInGac { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 7ade206e3db..11c776b4ae6 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1863,7 +1863,7 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
 
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCaches(CacheInputPaths ?? Array.Empty<string>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
+                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
             }
             else
             {
@@ -1877,9 +1877,9 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
         /// </summary>
         private void WriteStateFile()
         {
-            if (!string.IsNullOrEmpty(CacheOutputPath))
+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
             {
-                _cache.SerializePrecomputedCache(CacheOutputPath, Log);
+                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);
             }
             else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 0815e2a5449..a1e735bf8e8 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -13,6 +13,7 @@
 using System.Runtime.Serialization;
 using System.Runtime.Versioning;
 using System.Security.Permissions;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.AssemblyDependency;
@@ -557,7 +558,7 @@ out fileState.frameworkName
         /// <summary>
         /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.
         /// </summary>
-        internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
+        internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
         {
             SystemState retVal = new SystemState();
             retVal.SetGetLastWriteTime(getLastWriteTime);
@@ -565,10 +566,10 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
             retVal.isDirty = stateFiles.Length > 0;
             HashSet<string> assembliesFound = new HashSet<string>();
 
-            foreach (string stateFile in stateFiles)
+            foreach (ITaskItem stateFile in stateFiles)
             {
                 // Verify that it's a real stateFile; log message but do not error if not
-                SystemState sysState = DeserializeCache<SystemState>(stateFile, log, false);
+                SystemState sysState = DeserializeCache<SystemState>(stateFile.ToString(), log, false);
                 if (sysState == null)
                 {
                     continue;
@@ -581,7 +582,7 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
                         FileState fileState = kvp.Value;
                         // Verify that the assembly is correct
                         Guid mvid;
-                        string fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(stateFile), relativePath));
+                        string fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(stateFile.ToString()), relativePath));
                         if (FileSystems.Default.FileExists(fullPath))
                         {
                             using (var reader = new PEReader(File.OpenRead(fullPath)))
