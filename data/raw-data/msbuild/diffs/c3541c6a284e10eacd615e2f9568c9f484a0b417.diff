diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 406ad017571..66b3cae779b 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -2144,7 +2144,7 @@ public void SetDirectMetadataShouldEvaluateMetadataValue()
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents);
 
                 var metadata = project.GetItems("I").FirstOrDefault().SetMetadataValue("M", "$(P);@(Foo)", true);
 
@@ -2170,7 +2170,7 @@ public void SetDirectMetadataWhenSameMetadataComesFromDefinitionGroupShouldAddDi
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents);
 
                 var item = project.GetItems("I").FirstOrDefault();
                 var metadata = item.SetMetadataValue("M", "V", true);
@@ -2543,7 +2543,7 @@ public void RemoveWithPropertyReferenceInMatchOnMetadata()
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content);
 
                 var items = project.ItemsIgnoringCondition.Where(i => i.ItemType.Equals("I2"));
 
@@ -2580,7 +2580,7 @@ public void RemoveWithItemReferenceInMatchOnMetadata()
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content);
 
                 var items = project.ItemsIgnoringCondition.Where(i => i.ItemType.Equals("I2"));
 
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 3b13e37087c..5ab3810ef36 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -543,7 +543,7 @@ public void NullMetadataOnOutputItems()
   </Target>
 </Project>";
 
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);
             logger.AssertLogContains("[foo: ]");
         }
 
@@ -567,7 +567,7 @@ public void NullMetadataOnLegacyOutputItems()
   </Target>
 </Project>";
 
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);
             logger.AssertLogContains("[foo: ]");
         }
 
@@ -640,14 +640,14 @@ public void NullMetadataOnOutputItems_InlineTask()
                       </Target>
                     </Project>";
 
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);
             logger.AssertLogContains("[foo: ]");
         }
 
         /// <summary>
         /// If an item being output from a task has null metadata, we shouldn't crash.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6521")]
+        [Fact(Skip = "This test fails when diagnostic logging is available, as deprecated EscapingUtilities.UnescapeAll method cannot handle null value. This is not relevant to non-deprecated version of this method.")]
         public void NullMetadataOnLegacyOutputItems_InlineTask()
         {
             string projectContents = @"
@@ -683,6 +683,47 @@ public void NullMetadataOnLegacyOutputItems_InlineTask()
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
             logger.AssertLogContains("[foo: ]");
         }
+
+        /// <summary>
+        /// If an item being output from a task has null metadata, we shouldn't crash.
+        /// </summary>
+        [Fact(Skip = "This test fails when diagnostic logging is available, as deprecated EscapingUtilities.UnescapeAll method cannot handle null value. This is not relevant to non-deprecated version of this method.")]
+        [Trait("Category", "non-mono-tests")]
+        public void NullMetadataOnLegacyOutputItems_InlineTask_Diagnostic()
+        {
+            string projectContents = @"
+                    <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
+                        <UsingTask TaskName=`NullMetadataTask_v4` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildFrameworkToolsPath)\Microsoft.Build.Tasks.v4.0.dll`>
+                            <ParameterGroup>
+                               <OutputItems ParameterType=`Microsoft.Build.Framework.ITaskItem[]` Output=`true` />
+                            </ParameterGroup>
+                            <Task>
+                                <Code>
+                                <![CDATA[
+                                    OutputItems = new ITaskItem[1];
+
+                                    IDictionary<string, string> metadata = new Dictionary<string, string>();
+                                    metadata.Add(`a`, null);
+
+                                    OutputItems[0] = new TaskItem(`foo`, (IDictionary)metadata);
+
+                                    return true;
+                                ]]>
+                                </Code>
+                            </Task>
+                        </UsingTask>
+                      <Target Name=`Build`>
+                        <NullMetadataTask_v4>
+                          <Output TaskParameter=`OutputItems` ItemName=`Outputs` />
+                        </NullMetadataTask_v4>
+
+                        <Message Text=`[%(Outputs.Identity): %(Outputs.a)]` Importance=`High` />
+                      </Target>
+                    </Project>";
+
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, loggerVerbosity: LoggerVerbosity.Diagnostic);
+            logger.AssertLogContains("[foo: ]");
+        }
 #endif
 
         /// <summary>
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index aad07daee2a..bc58b185039 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -8,6 +8,7 @@
 using System.Text;
 
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
@@ -102,7 +103,12 @@ public void TestBinaryLoggerRoundtrip(string projectText)
             parallelFromBuild.Parameters = "NOPERFORMANCESUMMARY";
 
             // build and log into binary logger, mock logger, serial and parallel console loggers
-            ObjectModelHelpers.BuildProjectExpectSuccess(projectText, binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild);
+            // no logging on evaluation
+            using (ProjectCollection collection = new())
+            {
+                Project project = ObjectModelHelpers.CreateInMemoryProject(collection, projectText);
+                project.Build(new ILogger[] { binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild }).ShouldBeTrue();
+            }
 
             var mockLogFromPlayback = new MockLogger();
 
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index db10c0e6d6d..9a9bec6d5c9 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -167,11 +167,7 @@ internal string FullLog
          * The level of detail to show in the event log.
          *
          */
-        public LoggerVerbosity Verbosity
-        {
-            get => LoggerVerbosity.Normal;
-            set {/* do nothing */}
-        }
+        public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Normal;
 
         /*
          * Property:    Parameters
@@ -226,11 +222,12 @@ public void Shutdown()
         }
         #endregion
 
-        public MockLogger(ITestOutputHelper testOutputHelper = null, bool profileEvaluation = false, bool printEventsToStdout = true)
+        public MockLogger(ITestOutputHelper testOutputHelper = null, bool profileEvaluation = false, bool printEventsToStdout = true, LoggerVerbosity verbosity = LoggerVerbosity.Normal)
         {
             _testOutputHelper = testOutputHelper;
             _profileEvaluation = profileEvaluation;
             _printEventsToStdout = printEventsToStdout;
+            Verbosity = verbosity;
         }
 
         public List<Action<object, BuildEventArgs>> AdditionalHandlers { get; set; } = new List<Action<object, BuildEventArgs>>();
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 68d24c68b48..e475a770f55 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -27,6 +27,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
@@ -671,8 +672,8 @@ internal static ProjectRootElement CreateInMemoryProjectRootElement(string proje
         /// <summary>
         /// Create a project in memory. Load up the given XML.
         /// </summary>
-        /// <param name="xml"></param>
-        /// <returns></returns>
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
         internal static Project CreateInMemoryProject(string xml)
         {
             return CreateInMemoryProject(xml, new ConsoleLogger());
@@ -681,42 +682,52 @@ internal static Project CreateInMemoryProject(string xml)
         /// <summary>
         /// Create a project in memory. Load up the given XML.
         /// </summary>
-        /// <param name="xml"></param>
-        /// <param name="logger"></param>
-        /// <returns></returns>
-        internal static Project CreateInMemoryProject(string xml, ILogger logger /* May be null */)
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <param name="loggers">The array of loggers to attach on project evaluation.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
+        internal static Project CreateInMemoryProject(string xml, params ILogger[] loggers)
         {
-            return CreateInMemoryProject(new ProjectCollection(), xml, logger);
+            return CreateInMemoryProject(new ProjectCollection(), xml, loggers);
         }
 
         /// <summary>
         /// Create an in-memory project and attach it to the passed-in engine.
         /// </summary>
-        /// <param name="engine"></param>
-        /// <param name="xml"></param>
-        /// <param name="logger">May be null</param>
-        /// <returns></returns>
-        internal static Project CreateInMemoryProject(ProjectCollection e, string xml, ILogger logger /* May be null */)
+        /// <param name="projectCollection"><see cref="ProjectCollection"/> to use for project creation.</param>
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <param name="loggers">The array of loggers to attach on project evaluation. May be null.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
+        internal static Project CreateInMemoryProject(ProjectCollection projectCollection, string xml, params ILogger[] loggers)
         {
-            return CreateInMemoryProject(e, xml, logger, null);
+            return CreateInMemoryProject(projectCollection, xml, null, loggers);
         }
 
         /// <summary>
         /// Create an in-memory project and attach it to the passed-in engine.
         /// </summary>
-        /// <param name="logger">May be null</param>
-        /// <param name="toolsVersion">May be null</param>
+        /// <param name="projectCollection"><see cref="ProjectCollection"/> to use for project creation.</param>
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <param name="toolsVersion">The tools version to use on project creation. May be null.</param>
+        /// <param name="loggers">The array of loggers to attach to project collection before evaluation. May be null.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
         internal static Project CreateInMemoryProject(
             ProjectCollection projectCollection,
             string xml,
-            ILogger logger /* May be null */,
-            string toolsVersion) /* may be null */
+            string toolsVersion /* may be null */,
+            params ILogger[] loggers)
         {
             XmlReaderSettings readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+            if (loggers != null)
+            {
+                foreach (ILogger logger in loggers)
+                {
+                    projectCollection.RegisterLogger(logger);
+                }
+            }
 
             Project project = new Project(
                 XmlReader.Create(new StringReader(CleanupFileContents(xml)), readerSettings),
-                null,
+                globalProperties: null,
                 toolsVersion,
                 projectCollection);
 
@@ -724,11 +735,6 @@ internal static Project CreateInMemoryProject(
             project.FullPath = Path.Combine(TempProjectDir, "Temporary" + guid.ToString("N") + ".csproj");
             project.ReevaluateIfNecessary();
 
-            if (logger != null)
-            {
-                project.ProjectCollection.RegisterLogger(logger);
-            }
-
             return project;
         }
 
@@ -736,48 +742,61 @@ internal static Project CreateInMemoryProject(
         /// Creates a project in memory and builds the default targets.  The build is
         /// expected to succeed.
         /// </summary>
-        /// <param name="projectContents"></param>
-        /// <returns></returns>
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <param name="testOutputHelper"><see cref="ITestOutputHelper"/> to log to.</param>
+        /// <param name="loggerVerbosity">The required logging verbosity.</param>
+        /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
         internal static MockLogger BuildProjectExpectSuccess(
             string projectContents,
-            ITestOutputHelper testOutputHelper = null)
+            ITestOutputHelper testOutputHelper = null,
+            LoggerVerbosity loggerVerbosity = LoggerVerbosity.Normal)
         {
-            MockLogger logger = new MockLogger(testOutputHelper);
+            MockLogger logger = new MockLogger(testOutputHelper, verbosity: loggerVerbosity);
             BuildProjectExpectSuccess(projectContents, logger);
             return logger;
         }
 
+        /// <summary>
+        /// Creates a project in memory and builds the default targets.  The build is
+        /// expected to succeed.
+        /// </summary>
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <param name="loggers">The array of loggers to use.</param>
         internal static void BuildProjectExpectSuccess(
             string projectContents,
             params ILogger[] loggers)
         {
-            Project project = CreateInMemoryProject(projectContents, logger: null); // logger is null so we take care of loggers ourselves
-            project.Build(loggers).ShouldBeTrue();
+            using ProjectCollection collection = new();
+            Project project = CreateInMemoryProject(collection, projectContents, loggers);
+            project.Build().ShouldBeTrue();
         }
 
         /// <summary>
         /// Creates a project in memory and builds the default targets.  The build is
         /// expected to fail.
         /// </summary>
-        /// <param name="projectContents"></param>
-        /// <returns></returns>
-        internal static MockLogger BuildProjectExpectFailure(
-            string projectContents)
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
+        internal static MockLogger BuildProjectExpectFailure(string projectContents)
         {
             MockLogger logger = new MockLogger();
             BuildProjectExpectFailure(projectContents, logger);
-
             return logger;
         }
 
+        /// <summary>
+        /// Creates a project in memory and builds the default targets.  The build is
+        /// expected to fail.
+        /// </summary>
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <param name="loggers">The array of loggers to use.</param>
         internal static void BuildProjectExpectFailure(
             string projectContents,
-            ILogger logger)
+            params ILogger[] loggers)
         {
-            Project project = CreateInMemoryProject(projectContents, logger);
-
-            bool success = project.Build(logger);
-            Assert.False(success); // "Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details"
+            using ProjectCollection collection = new();
+            Project project = CreateInMemoryProject(collection, projectContents, loggers);
+            project.Build().ShouldBeFalse("Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details\"");
         }
 
         /// <summary>
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index f4e18fa61b7..e4460509199 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -1153,7 +1153,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpt
             ILogger logger = new MockLogger(_output);
 
             ProjectCollection collection = new ProjectCollection();
-            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, logger, "4.0");
+            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, "4.0", logger);
 
             bool success = p.Build(logger);
 
@@ -1196,7 +1196,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
             globalProperties.Add("VisualStudioVersion", "10.0");
 
             ProjectCollection collection = new ProjectCollection(globalProperties);
-            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, logger, "4.0");
+            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, "4.0", logger);
 
             bool success = p.Build(logger);
 
@@ -1249,7 +1249,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs11()
             globalProperties.Add("VisualStudioVersion", "11.0");
 
             ProjectCollection collection = new ProjectCollection(globalProperties);
-            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, logger, "4.0");
+            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, "4.0", logger);
 
             bool success = p.Build(logger);
 
@@ -4197,7 +4197,7 @@ public void VerifyGetPreOneCoreSDKPropsLocation()
 
                 File.WriteAllText(Path.Combine(platformDirectory, "SDKManifest.xml"), "Test");
 
-                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents, null);
+                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents);
 
                 string propertyValue = project.GetPropertyValue("PlatformSDKLocation");
                 string propsLocation = project.GetPropertyValue("PropsLocation");
@@ -4275,7 +4275,7 @@ public void VerifyGetOneCoreSDKPropsLocation()
                 File.WriteAllText(Path.Combine(platformDirectory, "SDKManifest.xml"), "Test");
                 File.WriteAllText(Path.Combine(platformDirectory2, "Platform.xml"), "Test");
 
-                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents, null);
+                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents);
 
                 string propertyValue = project.GetPropertyValue("PlatformSDKLocation");
                 string propsLocation = project.GetPropertyValue("PropsLocation");
