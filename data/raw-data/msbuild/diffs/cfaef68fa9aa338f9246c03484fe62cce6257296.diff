diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 707587dd7b8..8a48bcdb455 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -565,6 +565,27 @@ public void RoundtripBuildCheckTracingEventArgs()
                     .Select(v => v.TotalSeconds.ToString(CultureInfo.InvariantCulture)).ToCsvString(false));
         }
 
+        [Fact]
+        public void RoundtripWorkerNodeTelemetryEventArgs()
+        {
+            string key1 = "AA";
+            TimeSpan span1 = TimeSpan.FromSeconds(5);
+            string key2 = "b";
+            TimeSpan span2 = TimeSpan.FromSeconds(15);
+            string key3 = "cCc";
+            TimeSpan span3 = TimeSpan.FromSeconds(50);
+
+            Dictionary<string, TimeSpan> stats = new() { { key1, span1 }, { key2, span2 }, { key3, span3 } };
+
+            WorkerNodeTelemetryEventArgs args = new WorkerNodeTelemetryEventArgs(stats);
+
+            Roundtrip(args,
+                e => e.TracingData.InfrastructureTracingData.Keys.Count.ToString(),
+                e => e.TracingData.InfrastructureTracingData.Keys.ToCsvString(false),
+                e => e.TracingData.InfrastructureTracingData.Values
+                    .Select(v => v.TotalSeconds.ToString(CultureInfo.InvariantCulture)).ToCsvString(false));
+        }
+
         [Theory]
         [InlineData(true)]
         [InlineData(false)]
diff --git a/src/Build/Telemetry/ITelemetryCollector.cs b/src/Build/Telemetry/ITelemetryCollector.cs
index 69aa5c501a4..138055151fc 100644
--- a/src/Build/Telemetry/ITelemetryCollector.cs
+++ b/src/Build/Telemetry/ITelemetryCollector.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Telemetry;
 
@@ -16,8 +17,6 @@ internal interface ITelemetryCollector
 {
     bool IsTelemetryCollected { get; }
 
-    void AddData();
-
     void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom,
         bool isFromNugetCache);
 
@@ -62,20 +61,17 @@ public void ShutdownComponent()
         _instance = null;
     }
 
-    public class TelemetryCollector : ITelemetryCollector
+    public class TelemetryCollector : ITelemetryCollector, IWorkerNodeTelemetryData
     {
-        private struct TaskExecutionStats(TimeSpan cumulativeExecutionTime, short executionsCount)
-        {
-            public TimeSpan CumulativeExecutionTime { get; set; } = cumulativeExecutionTime;
-            public short ExecutionsCount { get; set; } = executionsCount;
-        }
-
         private readonly Dictionary<string, TaskExecutionStats> _tasksExecutionData = new();
         private readonly Dictionary<string, bool> _targetsExecutionData = new();
 
         // in future, this might ber per event type
         public bool IsTelemetryCollected => true;
-        public void AddData() => throw new NotImplementedException();
+
+        Dictionary<string, TaskExecutionStats> IWorkerNodeTelemetryData.TasksExecutionData => _tasksExecutionData;
+
+        Dictionary<string, bool> IWorkerNodeTelemetryData.TargetsExecutionData => _targetsExecutionData;
 
         public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom, bool isFromNugetCache)
         {
@@ -119,17 +115,9 @@ private static string GetName(string name, bool isCustom, bool isFromNugetCache)
 
         public void FinalizeProcessing(LoggingContext loggingContext)
         {
-            //if (IsInProcNode)
-            //{
-            //    // We do not want to send tracing stats from in-proc node
-            //    return;
-            //}
-
-            //var checkEventStats = CreateCheckTracingStats();
-
-            //BuildCheckTracingEventArgs checkEventArg =
-            //    new(checkEventStats) { BuildEventContext = loggingContext.BuildEventContext };
-            //loggingContext.LogBuildEvent(checkEventArg);
+            WorkerNodeTelemetryEventArgs telemetryArgs = new(this)
+                { BuildEventContext = loggingContext.BuildEventContext };
+            loggingContext.LogBuildEvent(telemetryArgs);
         }
     }
 
@@ -137,7 +125,6 @@ public class NullTelemetryCollector : ITelemetryCollector
     {
         public bool IsTelemetryCollected => false;
 
-        public void AddData() { }
         public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom, bool isFromNugetCache) { }
         public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isFromNugetCache) { }
 
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 650b62c2a1b..e80c7e10900 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -249,6 +249,11 @@ internal enum LoggingEventType : int
         /// Event is <see cref="BuildCanceledEventArgs"/>
         /// </summary>
         BuildCanceledEvent = 41,
+
+        /// <summary>
+        /// Event is <see cref="WorkerNodeTelemetryEventArgs"/>
+        /// </summary>
+        WorkerNodeTelemetryEvent = 42,
     }
     #endregion
 
@@ -809,6 +814,10 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.BuildCanceledEvent;
             }
+            else if (eventType == typeof(WorkerNodeTelemetryEventArgs))
+            {
+                return LoggingEventType.WorkerNodeTelemetryEvent;
+            }
 #endif
             else if (eventType == typeof(TargetStartedEventArgs))
             {
