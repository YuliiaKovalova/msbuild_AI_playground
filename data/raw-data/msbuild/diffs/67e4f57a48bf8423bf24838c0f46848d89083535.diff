diff --git a/src/Build/BuildCheck/API/CheckConfiguration.cs b/src/Build/BuildCheck/API/CheckConfiguration.cs
index 9c4ac89749f..33950a40edc 100644
--- a/src/Build/BuildCheck/API/CheckConfiguration.cs
+++ b/src/Build/BuildCheck/API/CheckConfiguration.cs
@@ -73,7 +73,6 @@ public bool? IsEnabled {
         Severity = TryExtractSeverity(configDictionary),
     };
 
-
     private static EvaluationCheckScope? TryExtractEvaluationCheckScope(Dictionary<string, string>? config)
     {
 
diff --git a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
index 034d95d3740..823508be852 100644
--- a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
+++ b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BuildCheck.Infrastructure;
-using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Checks;
@@ -27,9 +26,9 @@ internal sealed class NoEnvironmentVariablePropertyCheck : Check
     private BuildCheckDataContext<EnvironmentVariableCheckData>? _dataContext;
 
     /// <summary>
-    /// Contains the list of reported environment variables.
+    /// Contains the list of viewed environment variables.
     /// </summary>
-    private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();
+    private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesCache = new HashSet<EnvironmentVariableIdentityKey>();
 
     private bool _isVerboseEnvVarOutput;
     private EvaluationCheckScope _scope;
@@ -47,55 +46,35 @@ public override void Initialize(ConfigurationContext configurationContext)
             _isVerboseEnvVarOutput = isVerboseEnvVarOutput.HasValue && isVerboseEnvVarOutput.Value;
         }
 
-        CheckScopeClassifier.NotifyOnScopingReadiness += (string? projectFilePath) =>
-        {
-            while (_buildCheckResults.Count > 0)
-            {
-                BuildCheckResult result = _buildCheckResults.Pop();
-                if (!CheckScopeClassifier.IsActionInObservedScope(_scope, result.Location.File, projectFilePath ?? string.Empty))
-                {
-                    continue;
-                }
-
-                _dataContext?.ReportResult(result);
-            }
-        };
+        CheckScopeClassifier.NotifyOnScopingReadiness += HandleScopeReadiness;
     }
 
     public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEnvironmentVariableReadAction(ProcessEnvironmentVariableReadAction);
 
+    public override void Dispose() => CheckScopeClassifier.NotifyOnScopingReadiness -= HandleScopeReadiness;
+
     private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<EnvironmentVariableCheckData> context)
     {
-        if (context.Data.EvaluatedEnvironmentVariables.Count != 0)
+        EnvironmentVariableIdentityKey identityKey = new(context.Data.EvaluatedEnvironmentVariable.EnvVarValue, context.Data.EvaluatedEnvironmentVariable.Location);
+        if (!_environmentVariablesCache.Contains(identityKey))
         {
-            foreach (KeyValuePair<string, (string EnvVarValue, IMSBuildElementLocation Location)> envVariableData in context.Data.EvaluatedEnvironmentVariables)
+            string buildCheckResultMessageArgs = _isVerboseEnvVarOutput ? $"'{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}' with value: '{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}'" : $"'{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}'";
+
+            // Scope information is available after evaluation of the project file. If it is not ready, we will report the check later.
+            if (CheckScopeClassifier.IsScopingReady && CheckScopeClassifier.IsActionInObservedScope(
+                _scope,
+                context.Data.EvaluatedEnvironmentVariable.Location.File,
+                context.Data.ProjectFilePath ?? string.Empty))
+            {
+                context.ReportResult(BuildCheckResult.Create(SupportedRule, context.Data.EvaluatedEnvironmentVariable.Location, buildCheckResultMessageArgs));
+            }
+            else if (_scope == EvaluationCheckScope.WorkTreeImports)
             {
-                EnvironmentVariableIdentityKey identityKey = new(envVariableData.Key, envVariableData.Value.Location);
-                if (!_environmentVariablesReported.Contains(identityKey))
-                {
-                    string buildCheckResultMessageArgs = _isVerboseEnvVarOutput ? $"'{envVariableData.Key}' with value: '{envVariableData.Value.EnvVarValue}'" : $"'{envVariableData.Key}'";
-
-                    // Scope information is available after evaluation of the project file. If it is not ready, we will report the check later.
-                    if (CheckScopeClassifier.IsScopingReady && CheckScopeClassifier.IsActionInObservedScope(_scope, envVariableData.Value.Location.File, context.Data.ProjectFilePath ?? string.Empty))
-                    {
-                        context.ReportResult(BuildCheckResult.Create(
-                            SupportedRule,
-                            ElementLocation.Create(envVariableData.Value.Location.File, envVariableData.Value.Location.Line, envVariableData.Value.Location.Column),
-                            buildCheckResultMessageArgs));
-                    }
-                    else
-                    {
-                        _dataContext = context;
-
-                        _buildCheckResults.Push(BuildCheckResult.Create(
-                            SupportedRule,
-                            ElementLocation.Create(envVariableData.Value.Location.File, envVariableData.Value.Location.Line, envVariableData.Value.Location.Column),
-                            buildCheckResultMessageArgs));
-                    }
-
-                    _environmentVariablesReported.Add(identityKey);
-                }
+                _dataContext ??= context;
+                _buildCheckResults.Push(BuildCheckResult.Create(SupportedRule, context.Data.EvaluatedEnvironmentVariable.Location, buildCheckResultMessageArgs));
             }
+
+            _environmentVariablesCache.Add(identityKey);
         }
     }
 
@@ -104,6 +83,20 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Environm
             ? bool.Parse(configVal)
             : null;
 
+    private void HandleScopeReadiness(string? projectFilePath)
+    {
+        while (_buildCheckResults.Count > 0)
+        {
+            BuildCheckResult result = _buildCheckResults.Pop();
+            if (!CheckScopeClassifier.IsActionInObservedScope(_scope, result.Location.File, projectFilePath ?? string.Empty))
+            {
+                continue;
+            }
+
+            _dataContext?.ReportResult(result);
+        }
+    }
+
     internal class EnvironmentVariableIdentityKey(string environmentVariableName, IMSBuildElementLocation location) : IEquatable<EnvironmentVariableIdentityKey>
     {
         public string EnvironmentVariableName { get; } = environmentVariableName;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index c4df14c50f5..22bc94b5bca 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -38,7 +38,6 @@ public TaskKey(BuildEventContext context)
 
     private readonly SimpleProjectRootElementCache _cache = new SimpleProjectRootElementCache();
     private readonly BuildCheckCentralContext _buildCheckCentralContext = buildCheckCentralContext;
-    private Dictionary<string, (string EnvVarValue, IMSBuildElementLocation Location)> _evaluatedEnvironmentVariables = new();
 
     /// <summary>
     /// Keeps track of in-flight tasks. Keyed by task ID as passed in <see cref="BuildEventContext.TaskId"/>.
@@ -92,17 +91,9 @@ internal void ProcessEvaluationFinishedEventArgs(
     /// </summary>
     internal void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext, string envVarName, string envVarValue, string file, int line, int column)
     {
-        if (!_evaluatedEnvironmentVariables.ContainsKey(envVarName))
-        {
-            _evaluatedEnvironmentVariables.Add(envVarName, (envVarValue, ElementLocation.Create(file, line, column)));
-
-            EnvironmentVariableCheckData checkData =
-               new(file,
-                   checkContext.BuildEventContext?.ProjectInstanceId,
-                   _evaluatedEnvironmentVariables);
+        EnvironmentVariableCheckData checkData = new(file, checkContext.BuildEventContext?.ProjectInstanceId, (envVarName, ElementLocation.Create(file, line, column)));
 
-            _buildCheckCentralContext.RunEnvironmentVariableActions(checkData, checkContext, ReportResult);
-        }
+        _buildCheckCentralContext.RunEnvironmentVariableActions(checkData, checkContext, ReportResult);
     }
 
     internal void ProcessBuildDone(ICheckContext checkContext)
diff --git a/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs b/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
index 6a862946e8b..42da4a0d41d 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 
-internal class CheckScopeClassifier : IDisposable
+internal class CheckScopeClassifier
 {
     internal static event Action<string?>? NotifyOnScopingReadiness;
 
@@ -65,19 +65,4 @@ internal static void RaiseNotifyOnScopingReadiness(string? projectFilePath)
 
     private static bool IsGeneratedNugetImport(string file) => file.EndsWith("nuget.g.props", StringComparison.OrdinalIgnoreCase) ||
         file.EndsWith("nuget.g.targets", StringComparison.OrdinalIgnoreCase);
-
-    public void Dispose()
-    {
-        // Remove all subscribers
-        if (NotifyOnScopingReadiness != null)
-        {
-            foreach (Delegate d in NotifyOnScopingReadiness.GetInvocationList())
-            {
-                NotifyOnScopingReadiness -= (Action<string>)d;
-            }
-        }
-
-        // Set the event to null
-        NotifyOnScopingReadiness = null;
-    }
 }
diff --git a/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs b/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
index 5e2f2c4c1bf..d8c7c957ff0 100644
--- a/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
+++ b/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
@@ -14,11 +13,11 @@ public class EnvironmentVariableCheckData : CheckData
     internal EnvironmentVariableCheckData(
         string projectFilePath,
         int? projectConfigurationId,
-        IReadOnlyDictionary<string, (string EnvVarValue, IMSBuildElementLocation Location)> evaluatedEnvironmentVariables)
-        : base(projectFilePath, projectConfigurationId) => EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;
+        (string EnvVarValue, IMSBuildElementLocation Location) evaluatedEnvironmentVariable)
+        : base(projectFilePath, projectConfigurationId) => EvaluatedEnvironmentVariable = evaluatedEnvironmentVariable;
 
     /// <summary>
-    /// Gets the evaluated environment variables and their metadata.
+    /// Gets the evaluated environment variable.
     /// </summary>
-    public IReadOnlyDictionary<string, (string EnvVarValue, IMSBuildElementLocation Location)> EvaluatedEnvironmentVariables { get; }
+    public (string EnvVarValue, IMSBuildElementLocation Location) EvaluatedEnvironmentVariable { get; }
 }
