diff --git a/eng/build.ps1 b/eng/build.ps1
index 0a61d9ea9b6..3917fbd4519 100644
--- a/eng/build.ps1
+++ b/eng/build.ps1
@@ -159,10 +159,10 @@ function Check-EditedFiles() {
 function Check-RequiredVersionBumps() {
   # Log VSTS errors for missing required version bumps
   $versionLineChanged = $false
-  git --no-pager diff --unified --no-color --exit-code -w origin/$env:SYSTEM_PULLREQUEST_TARGETBRANCH HEAD src\Framework\BuildEngineInterface.cs `
+  git --no-pager diff --unified --no-color --exit-code -w origin/$env:SYSTEM_PULLREQUEST_TARGETBRANCH HEAD src\Framework\EngineServices.cs `
     | Select-String -Pattern "int Version =" | ForEach-Object -process { $versionLineChanged = $true }
   if (($LASTEXITCODE -ne 0) -and (-not $versionLineChanged)) {
-    throw "##vso[task.logissue type=error] Detected changes in Framework\BuildEngineInterface.cs without a version bump.  " +
+    throw "##vso[task.logissue type=error] Detected changes in Framework\EngineServices.cs without a version bump.  " +
           "If you are making API changes, please bump the version.  " +
           "If the changes in the file are cosmetic, please add/change a comment on the Version prop to silence the error."
   }
diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index db142cbecf7..fb2f2bd0733 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -3,13 +3,6 @@
 namespace Microsoft.Build.Framework
 {
     public delegate void AnyEventHandler(object sender, Microsoft.Build.Framework.BuildEventArgs e);
-    public abstract partial class BuildEngineInterface
-    {
-        public const int Version1 = 1;
-        protected BuildEngineInterface() { }
-        public virtual int Version { get { throw null; } }
-        public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
-    }
     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
     public partial struct BuildEngineResult
     {
@@ -159,6 +152,13 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
         protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
     }
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
+    public abstract partial class EngineServices
+    {
+        public const int Version1 = 1;
+        protected EngineServices() { }
+        public virtual int Version { get { throw null; } }
+        public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
+    }
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public EnvironmentVariableReadEventArgs() { }
@@ -195,7 +195,7 @@ public partial interface IBuildEngine
     }
     public partial interface IBuildEngine10 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7, Microsoft.Build.Framework.IBuildEngine8, Microsoft.Build.Framework.IBuildEngine9
     {
-        Microsoft.Build.Framework.BuildEngineInterface EngineInterface { get; }
+        Microsoft.Build.Framework.EngineServices EngineServices { get; }
     }
     public partial interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine
     {
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 8f3e22e27de..98e39ce8b4c 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -3,13 +3,6 @@
 namespace Microsoft.Build.Framework
 {
     public delegate void AnyEventHandler(object sender, Microsoft.Build.Framework.BuildEventArgs e);
-    public abstract partial class BuildEngineInterface
-    {
-        public const int Version1 = 1;
-        protected BuildEngineInterface() { }
-        public virtual int Version { get { throw null; } }
-        public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
-    }
     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
     public partial struct BuildEngineResult
     {
@@ -159,6 +152,13 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
         protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
     }
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
+    public abstract partial class EngineServices
+    {
+        public const int Version1 = 1;
+        protected EngineServices() { }
+        public virtual int Version { get { throw null; } }
+        public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
+    }
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public EnvironmentVariableReadEventArgs() { }
@@ -195,7 +195,7 @@ public partial interface IBuildEngine
     }
     public partial interface IBuildEngine10 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7, Microsoft.Build.Framework.IBuildEngine8, Microsoft.Build.Framework.IBuildEngine9
     {
-        Microsoft.Build.Framework.BuildEngineInterface EngineInterface { get; }
+        Microsoft.Build.Framework.EngineServices EngineServices { get; }
     }
     public partial interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine
     {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index a0f66091108..1601b3e29c6 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -130,7 +130,7 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen
             _disableInprocNode = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
                 ? s_disableInprocNodeByEnvironmentVariable || host.BuildParameters.DisableInProcNode
                 : s_disableInprocNodeByEnvironmentVariable;
-            EngineInterface = new BuildEngineInterfaceImpl(this);
+            EngineServices = new EngineServicesImpl(this);
         }
 
         /// <summary>
@@ -878,11 +878,11 @@ internal void ReleaseAllCores()
         #region IBuildEngine10 Members
 
         [Serializable]
-        private sealed class BuildEngineInterfaceImpl : BuildEngineInterface
+        private sealed class EngineServicesImpl : EngineServices
         {
             private TaskHost _taskHost;
 
-            internal BuildEngineInterfaceImpl(TaskHost taskHost)
+            internal EngineServicesImpl(TaskHost taskHost)
             {
                 _taskHost = taskHost;
             }
@@ -904,7 +904,7 @@ public override bool LogsMessagesOfImportance(MessageImportance importance)
             }
         }
 
-        public BuildEngineInterface EngineInterface { get; }
+        public EngineServices EngineServices{ get; }
 
         #endregion
 
diff --git a/src/Framework/BuildEngineInterface.cs b/src/Framework/EngineServices.cs
similarity index 97%
rename from src/Framework/BuildEngineInterface.cs
rename to src/Framework/EngineServices.cs
index 27fb6c880af..b2b5fa9b281 100644
--- a/src/Framework/BuildEngineInterface.cs
+++ b/src/Framework/EngineServices.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Framework
     /// won't break when the class is extended with new members. This base implementation should be throwing <see cref="NotImplementedException"/>.
     /// </remarks>
     [Serializable]
-    public abstract class BuildEngineInterface
+    public abstract class EngineServices
     {
         /// <summary>
         /// Initial version with LogsMessagesOfImportance() as the only exposed member.
diff --git a/src/Framework/IBuildEngine10.cs b/src/Framework/IBuildEngine10.cs
index 6e2f3023c00..7a7805d9791 100644
--- a/src/Framework/IBuildEngine10.cs
+++ b/src/Framework/IBuildEngine10.cs
@@ -4,7 +4,7 @@
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    /// This interface extends <see cref="IBuildEngine9" /> to provide a reference to the <see cref="BuildEngineInterface" /> class.
+    /// This interface extends <see cref="IBuildEngine9" /> to provide a reference to the <see cref="EngineServices" /> class.
     /// Future engine API should be added to the class as opposed to introducing yet another version of the IBuildEngine interface.
     /// </summary>
     public interface IBuildEngine10 : IBuildEngine9
@@ -12,6 +12,6 @@ public interface IBuildEngine10 : IBuildEngine9
         /// <summary>
         /// Returns the new build engine interface.
         /// </summary>
-        BuildEngineInterface EngineInterface { get; }
+        EngineServices EngineServices { get; }
     }
 }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index d493c5c0b1e..9ee7405d822 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -496,7 +496,7 @@ public void ReleaseCores(int coresToRelease)
         #region IBuildEngine10 Members
 
         [Serializable]
-        private sealed class BuildEngineInterfaceImpl : BuildEngineInterface
+        private sealed class EngineServicesImpl : EngineServices
         {
             /// <summary>
             /// No logging verbosity optimization in OOP nodes.
@@ -504,7 +504,7 @@ private sealed class BuildEngineInterfaceImpl : BuildEngineInterface
             public override bool LogsMessagesOfImportance(MessageImportance importance) => true;
         }
 
-        public BuildEngineInterface EngineInterface { get; } = new BuildEngineInterfaceImpl();
+        public EngineServices EngineServices { get; } = new EngineServicesImpl();
 
         #endregion
 
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 710bef023e0..66a202fd6b8 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -247,7 +247,7 @@ public virtual string GetResourceMessage(string resourceName)
         public bool LogsMessagesOfImportance(MessageImportance importance)
         {
             return BuildEngine is not IBuildEngine10 buildEngine10
-                || buildEngine10.EngineInterface.LogsMessagesOfImportance(importance);
+                || buildEngine10.EngineServices.LogsMessagesOfImportance(importance);
         }
 
         /// <summary>
