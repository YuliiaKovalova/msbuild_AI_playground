{
  "number": 10213,
  "title": "Add documentation for the risks for version incompatibilities between msbuild and a plugin dependencies",
  "body": "### Description:\r\n\r\nWe have encountered an issue, when MSBuild was using System.CodeDom net8.0 and [the source project](https://github.com/MessagePack-CSharp/MessagePack-CSharp/pull/1832) had System.CodeDom net6.0 package dependency that was copied in the output folder.\r\nDuring the _**runtime**_ it caused the exception:\r\n\r\n```\r\ntargets/Microsoft.NET.GenerateAssemblyInfo.targets: (199, 5): The \"WriteCodeFragment\" task failed unexpectedly. \r\nSystem.IO.FileLoadException: Could not load file or assembly 'System.CodeDom, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. Could not find or load a specific file. (0x80131621) \r\nFile name: 'System.CodeDom, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' \r\n---> System.IO.FileLoadException: Could not load file or assembly 'System.CodeDom, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. \r\n  at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath) \r\n  at System.Reflection.Assembly.LoadFrom(String assemblyFile) \r\n  at Microsoft.Build.Locator.MSBuildLocator.<>c__DisplayClass15_0.<RegisterMSBuildPath>g__TryLoadAssembly|3(AssemblyName assemblyName) \r\n  at Microsoft.Build.Locator.MSBuildLocator.<>c__DisplayClass15_0.<RegisterMSBuildPath>b__2(AssemblyLoadContext _, AssemblyName assemblyName) \r\n  at System.Runtime.Loader.AssemblyLoadContext.GetFirstResolvedAssemblyFromResolvingEvent(AssemblyName assemblyName) \r\n  at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName assemblyName) \r\n  at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingResolvingEvent(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName) \r\n  at Microsoft.Build.Tasks.WriteCodeFragment.GenerateCode(String& extension) \r\n  at Microsoft.Build.Tasks.WriteCodeFragment.Execute() \r\n  at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() \r\n  at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) \r\n======================================== \r\n  at MessagePack.Generator.MessagepackCompiler.OpenMSBuildProjectAsync(String projectPath, CancellationToken cancellationToken) in /home/vsts/work/1/s/src/MessagePack.Generator/MessagepackCompiler.cs:line 96 \r\n  at MessagePack.Generator.MessagepackCompiler.RunAsync(String input, String output, String conditionalSymbol, String resolverName, String namespace, Boolean useMapMode, String multipleIfDirectiveOutputSymbols, String[] externalIgnoreTypeNames) in /home/vsts/work/1/s/src/MessagePack.Generator/MessagepackCompiler.cs:line 63 \r\n  at ConsoleAppFramework.WithFilterInvoker.RunCore(ConsoleAppContext _) \r\n  at ConsoleAppFramework.WithFilterInvoker.InvokeAsync() \r\n  at ConsoleAppFramework.ConsoleAppEngine.RunCore(Type type, MethodInfo methodInfo, Object instance, String[] args, Int32 argsOffset) \r\n  at ConsoleAppFramework.ConsoleAppEngine.RunCore(Type type, MethodInfo methodInfo, Object instance, String[] args, Int32 argsOffset) \r\n\r\n```\r\n\r\n### Suggested action\r\n\r\nDocument the versions that MSBuild binds to for each feature-band release and publish it as a part of documentation.\r\nThe ticket [#9312](https://github.com/dotnet/msbuild/issues/9312) can be used as a basement for that.\r\n",
  "state": "OPEN",
  "createdAt": "2024-06-07T10:10:47Z",
  "updatedAt": "2024-06-11T13:46:44Z",
  "closedAt": null,
  "author": {
    "login": "YuliiaKovalova"
  },
  "labels": [
    "Area: Documentation",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@vitek-karas, this issue can be interesting for you.\r\nBefore bumping to net8.0, there weren't any compatibility problems between used System.CodeDom net6.0 in the source project and net7.0 in MSBuild.\r\n\r\ncc: @baronfel ",
        "createdAt": "2024-06-07T10:12:59Z",
        "updatedAt": "2024-06-07T10:13:17Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "My guess would be that the problem is caused by:\r\n```XML\r\n <PackageReference Include=\"System.CodeDom\" ExcludeAssets=\"runtime\" />\r\n```\r\n\r\nThis brings in the 8.0 version of `System.CodeDom` but only as a compiler reference, it explicitly excludes it from the output. So when SDK builds this along with MSBuild - it will probably use the MSbuild's version (7.0) in the output. The end result is that you have a package/app which has code which references 8.0, but carries 7.0 as the implementation.\r\n\r\nI don't know why the `ExcludeAssets` was added above.\r\n\r\nThat said there are other possible reasons, this involves custom ALCs and MSBuild's custom assembly resolution logic, so that might complicate things even more.",
        "createdAt": "2024-06-07T15:15:06Z",
        "updatedAt": "2024-06-07T15:15:06Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "cc: @AArnott ",
        "createdAt": "2024-06-07T15:19:52Z",
        "updatedAt": "2024-06-07T15:19:52Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@vitek-karas I added `ExcludeAssets` above, and it worked, because I _don't_ reference System.CodeDom 8.0. I reference the 6.0 version. That makes it work with MSBuild whether MSBuild provides 6.0, 7.0, or 8.0 of the System.CodeDom dll.\r\n\r\nThe original failure was because I _shipped_ the 6.0 assembly while MSBuild wanted 8.0. Because I shipped it, .NET loaded the 6.0 version, and refused to load the 8.0 version that MSBuild itself required.",
        "createdAt": "2024-06-07T15:25:57Z",
        "updatedAt": "2024-06-07T15:25:57Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@AArnott oh - sorry, my bad. Thanks for the explanation. I missed the package version part of your PR.\r\n\r\n@YuliiaKovalova if you want I can look into this some more, but I would need to know what is the project you're building - is it the message pack executable, or something else?\r\n\r\n/cc @elinor-fung ",
        "createdAt": "2024-06-07T15:35:19Z",
        "updatedAt": "2024-06-07T15:35:19Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "@vitek-karas for the repo @YuliiaKovalova links to, which I maintain, there are two front-ends that matter:\r\n\r\n1. An executable that uses MSBuildLocator.\r\n2. An MSBuild Task.\r\n\r\nBoth of these front-end projects depend on MessagePack.Generator.Core, a library that depends on System.CodeDom.dll.",
        "createdAt": "2024-06-07T16:05:29Z",
        "updatedAt": "2024-06-07T16:05:29Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "I guess this problem then happens when the MSBuild task is loaded into some msbuild execution. It doesn't carry System.CodeDom with it, and instead relies on the one from msbuild. That would explain the behavior above.\r\n\r\nI don't know what's the detailed design of allowing msbuild tasks to carry their own versions of some of the msbuild dependencies - like System.CodeDom.",
        "createdAt": "2024-06-07T16:17:05Z",
        "updatedAt": "2024-06-07T16:17:05Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "There are two relevant things here:\r\n\r\n1. For _applications_ that use the MSBuild API, we need to be able to load MSBuild from the SDK folder, so MSBuildLocator adds a resolver to find assemblies from there. This does not, however, override the runtime behavior that prefers to load assemblies \"from next to the application\" if they exist there.\r\n1. For MSBuild task plugins, we are (usually) running in an application from the SDK folder. We use `AssemblyDependencyResolver` to respect a `.deps.json` if the task provides one which should allow using a different version of one of our dependencies in the task's ALC.\r\n\r\nThis started with the first situation: `mpc.exe` shipped CodeDOM v6.0.0.0 but an MSBuild assembly loaded from the SDK directory wanted to load CodeDOM v8.0.0.0. Removing it from the app directory via `ExcludeAssets=\"runtime\"` cleared that up.\r\n\r\nI'm not completely sure why removing the CodeDOM deployment from next to the task caused failures there; the SDK copy should be just as available in that context.",
        "createdAt": "2024-06-07T16:48:49Z",
        "updatedAt": "2024-06-07T16:48:49Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}