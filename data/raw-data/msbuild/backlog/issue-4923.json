{
  "number": 4923,
  "title": "ProjectReferences disappear if you first build GetCopyToOutputDirectoryItems",
  "body": "```\r\nmd horrifying\r\ncd horrifying\r\ndotnet new classlib -o A\r\ndotnet new classlib -o B\r\ndotnet add B reference A\r\ndotnet new sln\r\ndotnet sln add A\r\ndotnet sln add B\r\ncd B\r\nmsbuild /bl /t:GetCopyToOutputDirectoryItems;Build\r\n```\r\n\r\nWhen B is being compiled the project reference to A is dropped, so csc.exe doesn't get a reference to A.dll if you first build `GetCopyToOutputDirectoryItems` target before building the `Build` target.\r\n\r\nThis is because `_SplitProjectReferencesByFileExistence` logically depends on `AssignProjectConfiguration` which creates the `@(ProjectReferenceWithConfiguration)` item that _Split uses as input:\r\n\r\n```\r\n    <PrepareProjectReferencesDependsOn>\r\n      AssignProjectConfiguration;\r\n      _SplitProjectReferencesByFileExistence;\r\n      _GetProjectReferenceTargetFrameworkProperties\r\n    </PrepareProjectReferencesDependsOn>\r\n```\r\n\r\nHowever `GetCopyToOutputDirectoryItemsDependsOn` doesn't declare a dependency on `AssignProjectConfiguration` for _Split, and so at the time _Split first runs the `@(ProjectReferenceWithConfiguration)` item is empty:\r\n\r\n```\r\n    <GetCopyToOutputDirectoryItemsDependsOn>\r\n      AssignTargetPaths;\r\n      _SplitProjectReferencesByFileExistence;\r\n      _GetProjectReferenceTargetFrameworkProperties\r\n    </GetCopyToOutputDirectoryItemsDependsOn>\r\n```\r\n\r\nNext during the actual Build the target `_SplitProjectReferencesByFileExistence` is skipped because it was previously built successfully, and so the project references never get added.\r\n\r\nSee also https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/269",
  "state": "CLOSED",
  "createdAt": "2019-11-15T08:25:09Z",
  "updatedAt": "2024-02-21T17:06:04Z",
  "closedAt": "2021-07-09T18:40:15Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "bug",
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "https://github.com/microsoft/msbuild/issues/943 might or might not be potentially related",
        "createdAt": "2019-11-15T08:26:24Z",
        "updatedAt": "2019-11-15T08:26:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "FYI @cston I've been investigating your issue with a project reference to System.Windows.Forms disappearing and this looks like the underlying root cause. In your log the `GetCopyToOutputDirectoryItems` target gets built first; at which time `AssignProjectConfiguration` hasn't run yet, so `@(ProjectReferenceWithConfiguration)` is empty, and it's memoized so next time it wants to run it just skips, never adding the project references.",
        "createdAt": "2019-11-15T08:29:58Z",
        "updatedAt": "2019-11-15T08:29:58Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "It's also bad that `GetCopyToOutputDirectoryItemsDependsOn` stomps over previous property value without including itself, it makes it difficult to change its value.\r\n\r\nI had to do this for a workaround:\r\n```\r\n<Project>\r\n\r\n  <Import Project=\"Sdk.Props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\A\\A.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.Targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <PropertyGroup>\r\n    <GetCopyToOutputDirectoryItemsDependsOn>AssignProjectConfiguration;$(GetCopyToOutputDirectoryItemsDependsOn)</GetCopyToOutputDirectoryItemsDependsOn>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```",
        "createdAt": "2019-11-15T08:36:47Z",
        "updatedAt": "2019-11-15T08:36:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Of course there's this: https://github.com/microsoft/msbuild/issues/1468",
        "createdAt": "2019-11-15T08:44:38Z",
        "updatedAt": "2019-11-15T08:44:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@cdmihai it looks like you may have already fixed this recently:\r\nhttps://github.com/microsoft/msbuild/pull/4865\r\n\r\nCould you verify that this bug would be fixed with your change?",
        "createdAt": "2020-01-03T00:34:35Z",
        "updatedAt": "2020-01-03T00:34:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Is this related to https://github.com/microsoft/msbuild/issues/4677?",
        "createdAt": "2020-01-03T00:36:48Z",
        "updatedAt": "2020-01-03T00:36:48Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "After https://github.com/dotnet/project-system/pull/5898, this is causing design-time build failures in the Roslyn repo at least ([AB#1073852](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1073852)). So it wasn't fixed by #4865.",
        "createdAt": "2020-02-26T16:30:04Z",
        "updatedAt": "2020-02-26T16:30:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "#4865 does not change behaviour by default, because who knows what blows up. You need to set `$(MSBuildCopyContentTransitively )` to `true` to force transitive item copying, even in VS.",
        "createdAt": "2020-02-26T18:48:29Z",
        "updatedAt": "2020-02-26T18:48:29Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Hold on I thought we need to add \r\n`<GetCopyToOutputDirectoryItemsDependsOn>AssignProjectConfiguration;... ` regardless? I thought it's an underspecified dependency that still needs to be made explicit?",
        "createdAt": "2020-02-27T19:25:05Z",
        "updatedAt": "2020-02-27T19:25:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "#4865 adds that dependency when you set `$(MSBuildCopyContentTransitively)` to true. Otherwise it fallbacks to legacy behaviour and does nothing.",
        "createdAt": "2020-02-27T19:30:31Z",
        "updatedAt": "2020-02-27T19:30:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I think we should always set this?",
        "createdAt": "2020-02-27T21:39:40Z",
        "updatedAt": "2020-02-27T21:39:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The original idea was to always force recursive content copying in the next major VS version, in case it's a bigger breaking than expected, and until then, it's on demand by whoever is affected.",
        "createdAt": "2020-02-27T21:55:09Z",
        "updatedAt": "2020-02-27T21:55:09Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I see.\r\n\r\nI'm guessing we want to do this orthogonally, fix the problem now and turn on recursive copying later. Too many people are hitting this.\r\n\r\nMy recommendation!",
        "createdAt": "2020-02-28T00:25:59Z",
        "updatedAt": "2020-02-28T00:25:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I see.\r\n> \r\n> I'm guessing we want to do this orthogonally, fix the problem now and turn on recursive copying later. Too many people are hitting this.\r\n> \r\n> My recommendation!\r\n\r\nBy this you mean fix content discovery to always be transitive (by adding the undeclared target dependencies), but keep content copying with the same legacy behaviour and a property to force the various types of content copying? Might be tricky to separate them ...",
        "createdAt": "2020-02-28T01:27:15Z",
        "updatedAt": "2020-02-28T01:27:15Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I got confused, I thought transitive content copying is separate from declaring an explicit dependency on AssignProjectConfiguration. But it looks like the actual fact of declaring that GetCopyToOutputDirectoryItemsDependsOn depends on AssignProjectConfiguration turns on transitive copying? Is my understanding correct?\r\n\r\nIn that case I'd wager let's just do it and turn it on by default. It doesn't matter when to break people, I'd say the sooner the better. The non-deterministic inexplicable behavior of some items being copied sometimes but not on others is terrible. Most of the time from my experience it's already transitive (due to the fact that AssignProjectConfiguration usually runs before GetCopyToOutputDirectoryItems). When that's not the case you're pretty likely to get weird errors like this issue.\r\n\r\nIn general, the logic of which items get copied to output and which not from my experience has caused a tremendous amount of pain and friction in our ecosystem. The more deterministic, predictable and documented we make it, the better. \r\n\r\nA lot of people are optimizing their builds right now, and we don't want them to optimize against buggy defaults that will change anyway. Let's break it soon, let's document the heck out of this, and let's strive to make content copying as predictable and deterministic as possible. Also easy to control. And I want a pony too.",
        "createdAt": "2020-02-28T03:43:32Z",
        "updatedAt": "2020-02-28T03:43:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I literally thought we should do this:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/75508622-9a311e00-5999-11ea-9883-a3323831aae0.png)\r\n",
        "createdAt": "2020-02-28T03:44:47Z",
        "updatedAt": "2020-02-28T03:44:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I got confused, I thought transitive content copying is separate from declaring an explicit dependency on AssignProjectConfiguration. But it looks like the actual fact of declaring that GetCopyToOutputDirectoryItemsDependsOn depends on AssignProjectConfiguration turns on transitive copying? Is my understanding correct?\r\n\r\nThat's correct, adding the dependency makes content copying transitive. @rainersigwald for the decision to force transitive copying on now, rather than next VS release. Of course, while keeping the escape hatch.",
        "createdAt": "2020-02-28T17:58:57Z",
        "updatedAt": "2020-02-28T18:00:48Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Team triage: we're all interested in just fixing the problem (setting `MSBuildCopyContentTransitively=true`). We're concerned about VS perf, which we expect may be particularly sensitive to global-property mismatch.\r\n\r\n@davkean, can you have someone look at the project-system perf impact of setting that property?\r\n\r\nWe also need to decide where to set the property. If we set it in Common.targets, it'll apply to all project types, while the fix is only necessary in CPS after the FUTD fix. So maybe we should set this only in the .NET Core SDK.",
        "createdAt": "2020-03-02T22:32:04Z",
        "updatedAt": "2020-03-02T22:32:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> It's also bad that `GetCopyToOutputDirectoryItemsDependsOn` stomps over previous property value without including itself, it makes it difficult to change its value.\r\n> \r\n> I had to do this for a workaround:\r\n> \r\n> ```\r\n> <Project>\r\n> \r\n>   <Import Project=\"Sdk.Props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n> \r\n>   <ItemGroup>\r\n>     <ProjectReference Include=\"..\\A\\A.csproj\" />\r\n>   </ItemGroup>\r\n> \r\n>   <PropertyGroup>\r\n>     <TargetFramework>netstandard2.0</TargetFramework>\r\n>   </PropertyGroup>\r\n> \r\n>   <Import Project=\"Sdk.Targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n> \r\n>   <PropertyGroup>\r\n>     <GetCopyToOutputDirectoryItemsDependsOn>AssignProjectConfiguration;$(GetCopyToOutputDirectoryItemsDependsOn)</GetCopyToOutputDirectoryItemsDependsOn>\r\n>   </PropertyGroup>\r\n> \r\n> </Project>\r\n> ```\r\n\r\nIs there a possible workaround for this for VS 2017 15.9.20? (MSBuild 15.0)\r\nI tried to apply the described workaround and failed.",
        "createdAt": "2020-03-12T18:29:23Z",
        "updatedAt": "2020-03-12T18:29:23Z",
        "author": {
          "login": "ezverev"
        }
      },
      {
        "body": "Turns out this is fixed in 5.0+ SDK's via https://github.com/dotnet/sdk/pull/12318, and fixed in 17.0+ MSBuild's via https://github.com/dotnet/msbuild/pull/6622.",
        "createdAt": "2021-07-09T18:40:14Z",
        "updatedAt": "2021-07-09T18:40:14Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Is #943 fixed as well?",
        "createdAt": "2021-07-09T22:33:51Z",
        "updatedAt": "2021-07-09T22:33:51Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "And #1845?",
        "createdAt": "2021-07-09T22:34:31Z",
        "updatedAt": "2021-07-09T22:34:31Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Is #943 fixed as well?\r\n\r\nThis should be fixed, added to the 17.0 milestone.\r\n\r\n> And #1845?\r\n\r\nStil repros. not sure of the details though.",
        "createdAt": "2021-07-09T23:06:05Z",
        "updatedAt": "2021-07-09T23:06:05Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "We are looking to reinstate a version of the .NET Project System change that originally flagged this issue.\r\n\r\nhttps://github.com/dotnet/project-system/pull/7932\r\n\r\nI will test the change against Roslyn to make sure the design time builds are not impacted.\r\n\r\nAny concerns?",
        "createdAt": "2022-02-22T11:45:43Z",
        "updatedAt": "2022-02-22T11:45:43Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  }
}