{
  "number": 5176,
  "title": "Hard-to-diagnose failure when deploying Framework MSBuild assemblies but intending to target Core",
  "body": "### Steps to reproduce\r\n\r\n1) Build MSBuild\r\n* (`.\\build.cmd /p:CreateBootstrap=true`)\r\n2) Deploy it\r\n* In an admin command prompt, run `powershell.exe`, then `scripts\\Deploy-MSBuild.ps1`\r\n* Specify the location to the folder used by `dotnet build` (typically under Program Files\\dotnet\\sdk).\r\n3) Run `dotnet build` on anything.\r\n\r\n### Expected behavior\r\n\r\nSome indicator that you built targeting Framework but tried to run MSBuild as if you'd targeted Core.\r\n\r\n### Actual behavior\r\n\r\nBuild Failed\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\n[msbuild.log](https://github.com/microsoft/msbuild/files/4325429/msbuild.log)\r\n\r\n[msbuild.txt](https://github.com/microsoft/msbuild/files/4325437/msbuild.txt)\r\n(Change the latter to a binlog)\r\n\r\nSince this won't affect external customers, we shouldn't make it run every time someone builds. It might be reasonable to take the location and output a warning if running `Deploy-MSBuild` without specifying Core to a folder under sdk.",
  "state": "OPEN",
  "createdAt": "2020-03-12T16:47:05Z",
  "updatedAt": "2024-02-21T16:29:44Z",
  "closedAt": null,
  "author": {
    "login": "Forgind"
  },
  "labels": [
    "needs-design",
    "Area: Our Own Build",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "One other idea I had is to beef up `Deploy-MSBuild.ps1` so that it detects core/full based on heuristics and picks itself. Maybe your \"folder under sdk\" is sufficient for that?",
        "createdAt": "2020-03-16T20:38:49Z",
        "updatedAt": "2020-03-16T20:38:49Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}