{
  "number": 3439,
  "title": "Custom task [Output] property behavior when not set explicitly is confusing",
  "body": "Hello there,\r\n\r\nI ran into a custom task property's [Output] attribute behavior which I did not expect, and which I find somewhat confusing. Also, I didn't find it documented nor discussed anywhere so here I am.\r\n\r\nIn a nutshell, if I have a custom task with a property attributed with [Output], and I don't set the value of the property in the task, MSBuild property assigned to given task property retains its previous value:\r\n```\r\n  <UsingTask TaskName=\"ChangeIf\" TaskFactory=\"CodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.v4.0.dll\">\r\n    <ParameterGroup>\r\n      <Set ParameterType=\"System.Boolean\" Required=\"true\" />\r\n      <Identifiers ParameterType=\"System.String\" Output=\"true\" />\r\n    </ParameterGroup>\r\n    <Task>\r\n      <Reference Include=\"System.Core\" />\r\n      <Using Namespace=\"System\" />\r\n      <Code Type=\"Fragment\" Language=\"cs\">\r\n        <![CDATA[\r\n            if (Set)\r\n            {\r\n                Identifiers = \"1;2;3;4\";\r\n            }\r\n          ]]>\r\n      </Code>\r\n    </Task>\r\n  </UsingTask>\r\n\r\n  <Target Name=\"Test\">\r\n    <PropertyGroup>\r\n      <Ids>a;b;c</Ids>\r\n    </PropertyGroup>\r\n\r\n    <Message Text=\"Ids: $(Ids)\"/>\r\n\r\n    <ChangeIf Set=\"false\">\r\n      <Output PropertyName=\"Ids\" TaskParameter=\"Identifiers\" />\r\n    </ChangeIf>\r\n\r\n    <Message Text=\"Ids (after no set): $(Ids)\"/>\r\n...    \r\n```\r\nyields\r\n```\r\nTest:\r\n  Ids: a;b;c\r\n  Ids (after no set): a;b;c\r\n```\r\n\r\nGranted, _not setting_ output property value is somewhere between being unlikely and being a bug. But now that I ran into it I guess I'm spoiled by C#'s ```out``` behavior so I would expect _not setting_ would amount to target MSBuild property ending up empty. Moreover, a straightforward would-be fix \r\n```\r\n            else\r\n            {\r\n                Identifiers = null;\r\n            }\r\n```\r\nis not enough, one needs\r\n```\r\n            else\r\n            {\r\n                Identifiers = string.Empty;\r\n            }\r\n```\r\nto end up with what I thought I would end up with:\r\n```\r\n  Ids: a;b;c\r\n  Ids (after no set):\r\n```\r\n\r\nFeels like a small trap one can fall into unexpectedly, which perhaps could be avoided by either clarifying design intent/documentation on the matter, or by cleaning property values.\r\n\r\nCheers,\r\nL.",
  "state": "OPEN",
  "createdAt": "2018-06-21T07:53:52Z",
  "updatedAt": "2024-02-21T16:33:40Z",
  "closedAt": null,
  "author": {
    "login": "Inglobor"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}