{
  "number": 5018,
  "title": "Optimize I/O in RAR AllowedAssemblyExtension lookups",
  "body": "Currently we have the `.winmd` extension first:\r\n```\r\nAllowedAssemblyExtensions\r\n    .winmd\r\n    .dll\r\n    .exe\r\n```\r\n\r\nThis means that for every assembly in every RAR invocation RAR will try to find the `.winmd` file first. In an overwhelming majority of cases what we want is the `.dll`. \r\n\r\nI suggest reordering the `AllowedAssemblyExtensions` such that we probe for .dll first. This way we'll save an enormous amount of `File.Exists()` calls and our logs won't be as much littered with:\r\n\r\n```\r\nConsidered \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.7.2\\System.Runtime.winmd\", but it didn't exist.\r\n```",
  "state": "CLOSED",
  "createdAt": "2019-12-31T23:57:17Z",
  "updatedAt": "2024-02-21T17:05:37Z",
  "closedAt": "2021-02-23T16:03:27Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Performance",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Repurposing this bug based on the feedback we got in #5021. Offline discussion suggested that we can't take the easiest approach to looking for the DLL:\r\n\r\n> ```\r\n> [2/4 4:58 PM] @KirillOsenkov\r\n>     @davkean points out that it's for C++, where if the .dll and .winmd are side-by-side you want to pick up the .winmd first -- does that sound about right?\r\n> \u200b[2/4 4:58 PM] [redacted past MSBuild maintainer]\r\n>     Since winmd files are their own thing, not much should conflict so they could go where ever relative to things like hintpath\r\n> \u200b[2/4 4:58 PM] [redacted past MSBuild maintainer]\r\n>     Let me look at the mail threads, just a sec\r\n> [2/4 4:59 PM] @davkean\r\n>     Chris I think I remember you adding it for C++ consumption\r\n> \u200b[2/4 5:00 PM] [redacted past MSBuild maintainer]\r\n>     We added it since apps could reference winmd files, I am trying to remember if the assemblyVersion can be the same between dll and winmd, then there would be an order question there\r\n> \u200b[2/4 5:00 PM] @davkean\r\n>     No in the C++ case if you pick the dll == badness\r\n> \u200b[2/4 5:01 PM] @davkean\r\n>     dll is native\r\n> \u200b[2/4 5:01 PM] @davkean\r\n>     winmd is managed\r\n> \u200b[2/4 5:01 PM] @davkean\r\n>     you want to pick the winmd, not the dll\r\n> [2/4 5:01 PM] @davkean\r\n>     maybe you can handle that case\r\n> \u200b[2/4 5:01 PM] @davkean\r\n>     fall back to winmd\r\n> \u200b[2/4 5:01 PM] @davkean\r\n>     in the case the managed header is missing\r\n> \u200b[2/4 5:02 PM] @davkean\r\n>     Now my recollection could be broken\r\n> \u200b[2/4 5:02 PM] [redacted past MSBuild maintainer]\r\n>     Maybe I am rusty on RAR but I dont think rar deals with native assemblies.\r\n> \u200b[2/4 5:02 PM] @davkean\r\n>     It doesn't\r\n> \u200b[2/4 5:02 PM] @davkean\r\n>     but in the winmd case\r\n> \u200b[2/4 5:02 PM] @davkean\r\n>     in the consuming C++ case\r\n> \u200b[2/4 5:03 PM] @davkean\r\n>     you have to look at the winmd\r\n> \u200b[2/4 5:03 PM] @davkean\r\n>     not the dll\r\n> [2/4 5:03 PM] @davkean\r\n>     I would test that case and figure out how/what breaks after this change\r\n> \u200b[2/4 5:04 PM] @davkean\r\n>     C# can reference C++ when it produces a winmd\r\n> \u200b[2/4 5:04 PM] @davkean\r\n>     so make sure that still works after this\r\n> \u200b[2/4 5:04 PM] [redacted past MSBuild maintainer]\r\n>     I cannot find any particular mail threads about the order of the search paths for winmd.  But I agree with David that you should test to make sure that the correct file is picked up.\r\n> ...\r\n> [2/4 5:12 PM] [redacted past MSBuild maintainer]\r\n>     The only thing I could find was a comment where if we had dll and winmd sxs then we wanted to prefer the winmd.  That was it. Nothing concrete as to why.  \r\n> \u200b[2/4 5:12 PM] [redacted past MSBuild maintainer]\r\n>     There was a spec, but its on some long dead share.\r\n> \u200b[2/4 6:18 PM] @davkean\r\n>     I couldn't find additional context on this, so just using my memory to remember above so take it with a grain of salt\r\n> ```\r\n\r\nHowever, there may still be room for improvement here: we could potentially do some wildcard-based filesystem enumerations instead of one-at-a-time to reduce `File.Exists` calls. That wouldn't help the log chattiness, though.",
        "createdAt": "2020-02-24T17:08:37Z",
        "updatedAt": "2020-02-24T17:08:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Do we have some current repro which would simulate the .winmd issue? \r\nFrankly, I know little about .winmd files and their usage.  What is strange, is that `{WinMDFoldersEx:$(TargetPlatformRegistryBase),$(TargetPlatformVersion)};` line from mentioned change is no longer in Master. \r\n\r\nI was thinking about getting *.winmd in directory and test it, but that would be efficient only if there would not be hundreds on windm files in there. Do we have an estimation about common 'counts' of those?",
        "createdAt": "2020-12-03T15:58:20Z",
        "updatedAt": "2020-12-03T16:00:30Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec The repro for that is the \"normal\" all-managed-references case. In that case we know we want the `.dll`, but we probe for a nonexistent `.winmd` file in various places, waiting until we fail to find it to probe for `.dll`.\r\n\r\nThis is done around this chunk of code (and maybe elsewhere):\r\nhttps://github.com/dotnet/msbuild/blob/cd297218cc01e0fbbe4c1e27380f7d6983c5260d/src/Tasks/AssemblyDependency/Resolver.cs#L314-L331\r\n\r\nWhat I was thinking in February was along the lines of \r\n\r\n```c#\r\nvar sorter = GetSorter(executableExtensions);\r\n\r\nstring pathPrefix = Path.Combine(directory, assemblyName.Name);\r\n\r\nSort(enumerateWildcardPattern(pathPrefix + \"*\"), sorter);\r\n\r\n// resume existing behavior\r\n```\r\n\r\nWe'd have to make sure that's safe--right now the exists check is a few layers deep\r\n\r\nhttps://github.com/dotnet/msbuild/blob/cd297218cc01e0fbbe4c1e27380f7d6983c5260d/src/Tasks/AssemblyDependency/Resolver.cs#L184\r\n\r\nSo I'd need to be convinced that this doesn't change behavior. But since directory enumeration is pretty efficient compared to multiple existence probes it could be an improvement.\r\n\r\n",
        "createdAt": "2020-12-03T16:38:13Z",
        "updatedAt": "2020-12-03T16:38:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald @BenVillalobos When I tried to use ChangeWave it requires to add new project reference from `Microsoft.Build.Task` -> `Microsoft.Build`\r\nCan I move ChangeWaves code into **`Microsoft.Build.Framework`** as that one seems to be currently referenced by both `Microsoft.Build.Task` and `Microsoft.Build` ?",
        "createdAt": "2020-12-15T13:52:45Z",
        "updatedAt": "2020-12-15T13:54:46Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec Yes, but also no: @BenVillalobos is doing just that in #5864. I bet we can merge that today and then you can rebase.",
        "createdAt": "2020-12-15T15:04:50Z",
        "updatedAt": "2020-12-15T15:04:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I just updated #5864 with the last doc update it needed. Should be good to go.",
        "createdAt": "2020-12-15T19:06:24Z",
        "updatedAt": "2020-12-15T19:06:24Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@rokonec https://github.com/dotnet/msbuild/pull/5864 is merged, you can rebase now.",
        "createdAt": "2020-12-17T00:09:57Z",
        "updatedAt": "2020-12-17T00:09:57Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Changes in related PR broke [RPS](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/302845)\r\nLets investigate it...",
        "createdAt": "2021-02-16T08:52:44Z",
        "updatedAt": "2021-02-16T08:53:27Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "For now I have abandoned changes from https://github.com/dotnet/msbuild/pull/6033\r\n\r\nReasoning:\r\n- VS invokes RAR unexpectedly. For example, during opening WinForm designer it, at PRS sample projects, calls 8x RAR. Because folder-files  are cached per invocation it enumerates all related directories 8 times. This is just  one sample of surprising RAR usage by VS I have encounter, and I expect there might be others. To evaluate risk of regression of VS, all usages of RAR by VS would have to be investigated and estimated.\r\n- Some implementation of Resolver abstract class has their own cached FIleExists implementation which behaves differently then   default FileExists and FileExists from mine PR. It would be very hard, to me, to estimate if change in behavior can break some people. If would be solvable by using current behavior for those Resolvers but it invalidate usability of my changes  further.\r\n- Perf gain from these changes is not significant and is limited only to non SDK msbuild projects, which usage will most probably decrease over time.\r\n\r\nOverall, given my current knowledge of msbuild ecosystem, I believe risk-benefit factor of these changes is not making a cut.",
        "createdAt": "2021-02-22T19:19:41Z",
        "updatedAt": "2021-02-22T19:19:41Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}