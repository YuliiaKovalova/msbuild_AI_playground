{
  "number": 11247,
  "title": "BuildCheck suggestion: Evaluation time Item points to the output of a project",
  "body": "### Context\n\nInspired by https://github.com/dotnet/msbuild/issues/6198 and https://github.com/benvillalobos/msbuildism/tree/main/including-generated-files\n\nWhen adding an evaluation time item update/include that is attempting to point to build execution time produced files - such item can either plainly not work as intended or worse behave differently based on build order leading to possible undeterministic behavior of the build\n\n### Goal\n\nImplement a Check with the following rule: items updates/include happening during evaluation time are not allowed to reference outputs or intermediate outputs of projects that are part of the build.",
  "state": "OPEN",
  "createdAt": "2025-01-09T12:13:00Z",
  "updatedAt": "2025-01-21T14:40:24Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I'm not sure this is a good idea; it's perfectly ok in several cases to have an item that doesn't exist on disk yet, as long as it does before it's used. In general, you want to discover reference items from other projects by asking them (the normal p2p protocol) but for some more advanced scenarios a \"dangling reference\" is ok.\n\nThe only time I think it would be _required_ is for a task defined in another project (since the UsingTasks are processed before targets) but I bet users have done this a bunch.",
        "createdAt": "2025-01-17T19:42:55Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}