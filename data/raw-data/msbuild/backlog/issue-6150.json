{
  "number": 6150,
  "title": "ResolveSdkReferences complains about referencing UAP SDKs in a Desktop app",
  "body": "\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\nWhen you try to reference either `Microsoft.VCLibs` or `Microsoft.UniversalCRT.Debug` when the `TargetPlatformIdentifier` == `Windows`, you get errors `MSB3842` and `MSB3843`.\r\n\r\nThis is a new scenario that is uncovered due to Project Reunion, where we are making efforts to remove all differences at the project system layer between Desktop and UWP Windows.\r\n\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\nBuild succeeds\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\nBuild fails.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\nThis can be worked around by adding this:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <!-- Suppress warnings -->\r\n    <LogSDKReferenceResolutionErrorsAsWarnings>true</LogSDKReferenceResolutionErrorsAsWarnings>\r\n    <MSBuildWarningsAsMessages>\r\n      $(MSBuildWarningsAsMessages);\r\n      MSB3842;\r\n      MSB3843;\r\n    </MSBuildWarningsAsMessages>\r\n  </PropertyGroup>\r\n```\r\nBut this seems like an unnecessary big hammer. Since Desktop Windows is a complete superset of UWP Windows, it should be perfectly valid to have an SDK Reference to a UAP SDK when building Desktop, but not the other way around.\r\n\r\n### Versions & Configurations\r\nc:\\dev\\winui>msbuild -version\r\nMicrosoft (R) Build Engine version 16.9.0-preview-21065-09+34bbbedaf for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.9.0.6509\r\n### Attach a binlog\r\n[msbuild.zip](https://github.com/dotnet/msbuild/files/5966680/msbuild.zip)",
  "state": "CLOSED",
  "createdAt": "2021-02-11T16:06:49Z",
  "updatedAt": "2024-02-21T14:14:57Z",
  "closedAt": "2022-10-06T16:42:06Z",
  "author": {
    "login": "stevenbrix"
  },
  "labels": [
    "bug",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Notes for investigation: UAP appears to be an alias for UWP.",
        "createdAt": "2021-02-17T16:36:55Z",
        "updatedAt": "2021-02-17T16:36:55Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@stevenbrix can you help us set a priority on this? Is it something you think we must fix for 17.0? Just trying to figure out how to rank it in our giant list-o-work.",
        "createdAt": "2021-06-30T15:42:12Z",
        "updatedAt": "2021-06-30T15:42:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@stevenbrix Can you point me to the repo you used for this repro scenario?",
        "createdAt": "2021-06-30T23:55:06Z",
        "updatedAt": "2021-06-30T23:55:06Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hey all, I'm no longer on this team. @alwu-msft would better know  the priority of this issue.",
        "createdAt": "2021-06-30T23:57:09Z",
        "updatedAt": "2021-06-30T23:57:09Z",
        "author": {
          "login": "stevenbrix"
        }
      },
      {
        "body": "I don't have any context around this, but I'll try my best to infer something. :)\r\n\r\nAccording to the earlier referenced https://github.com/microsoft/microsoft-ui-xaml/issues/4351, this isn't directly affecting us anymore as we've implemented workarounds although there might be some doubt as to their correctness. I think you can repro this using a C++ Win32 console application that includes an `<SDKReference />` to a UWP SDK (e.g. `Microsoft.VCLibs` or `Microsoft.UniversalCRT.Debug`).\r\n\r\n@Scottj1s may remember more as he was more closely involved in that investigation.",
        "createdAt": "2021-07-01T00:35:44Z",
        "updatedAt": "2021-07-02T01:29:27Z",
        "author": {
          "login": "evelynwu-msft"
        }
      },
      {
        "body": "@alwu-msft Thanks for the tip, I was able to repro by creating a cpp console app and adding\r\n```xml\r\n  <ItemGroup>\r\n    <SdkReference Include=\"Microsoft.UniversalCRT.Debug, Version=10.0.10240.0\"/>\r\n  </ItemGroup>\r\n```\r\nto the project.\r\n\r\n> this isn't directly affecting us anymore as we've implemented workarounds\r\n\r\nWhat are those workarounds?\r\n\r\nSome brief investigation notes:\r\n---\r\nIt boils down to this check where 'Windows' (targetPlatformIdentifier) doesn't match 'UAP' (TargetPlatform). \r\n```c#\r\n                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\r\n                {\r\n                    AddResolutionErrorOrWarning(\"ResolveSDKReference.TargetPlatformIdentifierDoesNotMatch\", projectName, DisplayName, Version, targetPlatformIdentifier, TargetPlatform);\r\n                }\r\n```\r\n\r\nWhat happens in the proper case? Does TargetPlatform and targetFrameworkIdentifier resolve to the same string? What is that string? UWP? I'll try other SDKReference's and see what happens\r\n\r\n---\r\n\r\n",
        "createdAt": "2021-07-01T23:29:50Z",
        "updatedAt": "2021-07-01T23:29:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "My apologies, I'd specified the wrong project when linking the issue describing our workaround (https://github.com/microsoft/microsoft-ui-xaml/issues/4351); @Scott1js is the person who can describe the exact nature of the workaround (I'm not familiar with what he did beyond what is described in the issue).\r\n\r\nI don't know where `TargetPlatform` comes from (the SDKReference?), but `TargetPlatformIdentifier` is tied to the overall project. The argument we're making is that `UAP` should be considered a subset of `Windows`, so a `UAP` SDKReference should be usable by a project that sets `TargetPlatformIdentifier = Windows`.",
        "createdAt": "2021-07-02T01:36:59Z",
        "updatedAt": "2021-07-02T01:37:10Z",
        "author": {
          "login": "evelynwu-msft"
        }
      },
      {
        "body": "Looking at this briefly, it sounds like we're saying we should treat UAP the same as \"windows\" as far as this check is concerned, right? So it is reasonable to just specialcase UAP for the check BenVillalobos mentioned and add  ` && (!String.Equals(\"UAP\", TargetPlatform) || !String.Equals(targetPlatformIdentifier, \"Windows\"))`? Potentially with an OrdinalIgnoreCase comparator mixed in.",
        "createdAt": "2022-06-15T23:33:04Z",
        "updatedAt": "2022-06-15T23:33:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@evelynwu-msft  Double checking the status of the workaround here. I[It sounds like](https://github.com/microsoft/microsoft-ui-xaml/issues/4351#issuecomment-799759824) this workaround won't be sufficient in the future. Is that the case?",
        "createdAt": "2022-08-18T16:16:40Z",
        "updatedAt": "2022-08-18T16:16:40Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}