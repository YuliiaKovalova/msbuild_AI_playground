{
  "number": 5787,
  "title": "Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references.",
  "body": "This issue has been reported before, I believe here : https://github.com/dotnet/msbuild/issues/2221\r\nHowever unlike presented in this thread, it still appears past versions 16.3+ of MSBuild. I'm personally running `Microsoft (R) Build Engine version 16.7.0+7fb82e5b2 for .NET`\r\n\r\n### Issue Description\r\nMy windows form app can be built successfully using Visual Studio 2019, but:\r\n\r\n- Cannot be built with dotnet msbuild from command line\r\n- Cannot be built with dotnet publish from command line\r\n- Cannot be built with \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" from command line.\r\n\r\n### Steps to Reproduce\r\n\r\nHere are the arguments I used for all three of them:\r\n`-target:Publish /p:Configuration=Release /p:GenerateResourceUsePreserializedResources=True /p:OutDir=\"../Build\"`\r\n\r\n### Expected Behavior\r\n\r\nThe app builds successfully to the target folder.\r\n\r\n### Actual Behavior\r\n\r\nAll three of them output some version of the following text:\r\n```\r\nerror MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references. [my.csproj]\r\n```\r\n\r\nHowever, none of my .resx in my windows form project have any image. Only one contains non-string content, of the following nature:\r\n![image](https://user-images.githubusercontent.com/33836535/95455900-d2a4cb80-096e-11eb-9dcf-85c1bead2488.png)\r\nThe other .resx i have seems to be doing fine without any non-string resource, but not this one - deleting these elements lead to malfunction.\r\n\r\nMoreover, if I do try to embed the \"System.Resources.Extensions\" that is being mentioned here, my app does build, but said window cannot be opened.\r\n`<PackageReference Include=\"System.Resources.Extensions\" Version=\"4.7.1\" />`\r\n\r\n![image](https://user-images.githubusercontent.com/33836535/95456675-fae0fa00-096f-11eb-84db-ad717bbf936a.png)\r\n\r\n### Analysis\r\nTried every version of System.Resources.Extensions from the top, the application seems to work correctly with `<PackageReference Include=\"System.Resources.Extensions\" Version=\"4.6.0\" />` for reasons unknown to me.\r\nThis is still not a good solution. I feel like I shouldn't have to include this undesired library.\r\n\r\n### Versions & Configurations\r\n`Microsoft (R) Build Engine version 16.7.0+7fb82e5b2 for .NET`\r\nWindows 10 running Microsoft Visual Studio 2019\r\n",
  "state": "CLOSED",
  "createdAt": "2020-10-08T12:11:42Z",
  "updatedAt": "2024-02-21T14:16:39Z",
  "closedAt": "2021-12-02T15:22:01Z",
  "author": {
    "login": "Rackover"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Requiring version 4.6.0 will be fixed by https://github.com/dotnet/runtime/issues/39078 when the 5.0.0 version of `System.Resources.Extensions` is released.\r\n\r\nThis reference is required when using `GenerateResourceUsePreserializedResources`, which is the default for .NET Core projects and you're specifying explicitly. It uses a form of deserialization that avoids a number of build-time problems.\r\n\r\n> none of my .resx in my windows form project have any image\r\n\r\nDid you see something that suggested that images are relevant here? It should only really matter whether the resources are strings or not.\r\n\r\n> I feel like I shouldn't have to include this undesired library.\r\n\r\nYou can continue to build your application using the older resource-embedding techniques if you build from Visual Studio or `msbuild.exe` and target .NET Framework.",
        "createdAt": "2020-10-14T20:21:22Z",
        "updatedAt": "2020-10-14T20:21:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Doesn't msbuild.exe equivalent `dotnet msbuild` ? I thought one was a shortcut for the other.\r\n\r\nI'm trying again with targetting specifically my NET framework version (471) and removing the generation of preserialized resources, but I still cannot build.\r\n\r\n`dotnet msbuild -target:Publish /p:Configuration=Release /p:OutDir=\"../Build\" /p:TargetFramework=net471`\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.1.402\\Microsoft.Common.CurrentVersion.targets(3036,5): error MSB4216: Could not run the \"GenerateResource\" task because MSBuild could not create or connect to a task host with runtime \"CLR4\" and architecture \"x86\".  Please ensure that (1) the requested runtime and/or architecture are available on the machine, and (2) that the required executable \"C:\\Program Files\\dotnet\\sdk\\3.1.402\\MSBuild.exe\" exists and can be run. [C:\\MyProject\\MyProject.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.402\\Microsoft.Common.CurrentVersion.targets(3058,7): error MSB4028: The \"GenerateResource\" task's outputs could not be retrieved from the \"FilesWritten\" parameter. Object does not match target type. [C:\\MyProject\\MyProject.csproj]\r\n```",
        "createdAt": "2020-10-16T09:34:36Z",
        "updatedAt": "2020-10-16T09:35:37Z",
        "author": {
          "login": "Rackover"
        }
      },
      {
        "body": "> Doesn't msbuild.exe equivalent `dotnet msbuild` ? I thought one was a shortcut for the other.\r\n\r\nNo, that's not correct. `MSBuild.exe` has some functionality that isn't able to run on .NET Core. That's usually for two reasons:\r\n\r\n1. It calls a tool or an API that isn't available on .NET Core, or\r\n2. A project uses functionality that is implemented by installing things into Visual Studio.\r\n\r\nCan you share a project that has the error you're seeing?",
        "createdAt": "2020-10-16T14:46:01Z",
        "updatedAt": "2020-10-16T14:46:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I cannot share it publicly. Is there a way to send it to you privately?",
        "createdAt": "2020-10-16T14:47:45Z",
        "updatedAt": "2020-10-16T14:47:45Z",
        "author": {
          "login": "Rackover"
        }
      },
      {
        "body": "@Rackover Yes; you can file feedback at [Developer Community](https://developercommunity.visualstudio.com/spaces/8/index.html) and include confidential-to-Microsoft attachments. Please link the issue here so I can expedite routing it to our team.",
        "createdAt": "2020-10-16T15:12:39Z",
        "updatedAt": "2020-10-16T15:12:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have submitted an issue, number #1224160 under .NET category.\r\nhttps://developercommunity.visualstudio.com/content/problem/1224160/non-string-resources-require-the-systemresourcesex.html\r\n\r\nI do not know if it has been made confidential to microsoft or not - I do not think so because I see an upvote button \u2639\ufe0f \r\nThat is of little importance, to be honest - but I would love the issue & the files to be deleted once you no longer need them.",
        "createdAt": "2020-10-16T15:27:15Z",
        "updatedAt": "2020-10-16T15:27:15Z",
        "author": {
          "login": "Rackover"
        }
      },
      {
        "body": "I'm not sure either but I have now downloaded the attachment so you can remove it.",
        "createdAt": "2020-10-16T15:33:42Z",
        "updatedAt": "2020-10-16T15:33:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Your project is not a new SDK-style project (with `<Project Sdk=\"Microsoft.NET.Sdk\">` as its first line, so it cannot be built with `dotnet msbuild` and you must continue to use `msbuild.exe` to build it.",
        "createdAt": "2020-10-16T15:35:51Z",
        "updatedAt": "2020-10-16T15:35:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I must have found myself here a dozen times or more by now.\r\n\r\nI think there is a bug when building using `dotnet` where this error is generated even when building a .NET Framework project.\r\n\r\nMy command is:\r\n```\r\ndotnet publish\r\n-o <location>\r\n-f net40\r\n-r win-x86\r\n-c Release\r\n--self-contained\r\n-v m\r\n```\r\n\r\nand I have conditional `ItemGroup` and `PropertyGroup` tags that have the necessary tags:\r\n\r\n`<GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>`\r\n\r\nand\r\n\r\n`<PackageReference Include=\"System.Resources.Extensions\" Version=\"4.7.0\" />`\r\n\r\nwhen building for .netcoreapp3.1\r\n\r\nbut I get the error even when building for .NET 4, where these shouldn't be required afaik (and in fact, can't be used I think).",
        "createdAt": "2021-04-23T23:53:54Z",
        "updatedAt": "2021-04-23T23:54:10Z",
        "author": {
          "login": "DaveCousineau"
        }
      },
      {
        "body": "I will be making an nuget based .NET SDK that will set them for users eventually.\r\n\r\nBut in order to use it would will have to set it to that on the ``Sdk=`` attribute on the ``Project`` node on the very first like in an csproj with the package's version like so ``/1.0.0`` then it will fetch it from nuget.org.\r\n\r\nSo then any projects needing it would be able to use that instead and it will import the ``Microsoft.NET.Sdk`` only if it has not been imported already.\r\n\r\nHowever it will not import the WindowsDesktop Sdk so as such you would be required to use the .NET 5 or the .NET 6 preview SDks that automatically add the WindowsDesktop Sdk from within the ``Microsoft.NET.Sdk`` Sdk.\r\n\r\nAlso .NET 4.0 up to and under 4.6.1 might not be compatible of the package too. So that means if you use anything under .NET Framework 4.6.1 you would have to upgrade to 4.6.1 at least.",
        "createdAt": "2021-04-24T05:08:07Z",
        "updatedAt": "2021-04-24T05:11:29Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@DaveCousineau \r\n\r\n> but I get the error even when building for .NET 4, where these shouldn't be required afaik (and in fact, can't be used I think).\r\n\r\nThis isn't correct; the package reference **is** required when building for .NET 4.\r\n\r\nThere are two aspects of non-string resources:\r\n\r\n1. **Building** projects that use the resources, that is\r\n  a. Reading the resources in their source form,\r\n  a. Transforming (serializing) them into a destination form, and\r\n  a. Embedding that into the built assembly.\r\n2. Consuming the resources **at runtime**, that is\r\n  a. Reading the embedded resources, and\r\n  a. Deserializing the resource into a .NET object for your code to use.\r\n\r\nThe problems here arise because of _differences in serialization/deserialization_ between .NET Core/5.0+ and .NET Framework 4.x. \r\n\r\nIn **.NET Framework 4.x**, non-string resources are serialized and deserialized using [`BinaryFormatter`](https://docs.microsoft.com/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter), which [cannot be made secure](https://docs.microsoft.com/dotnet/standard/serialization/binaryformatter-security-guide). \r\n\r\nIn .NET Core/5.0+, we use different techniques. But that means that **we cannot write .NET 4.x-compatible resources from a .NET 5.0 build process**, because we don't use BinaryFormatter. We can easily serialize resources using the new serialization techniques, but they can't be read in the usual way at runtime.\r\n\r\nFortunately, the new more secure deserialization techniques can work on .NET 4.x with the addition of a new assembly that teaches the older framework how to handle them. That's why the new reference is required when targeting .NET 4.x from a `dotnet build` process.",
        "createdAt": "2021-04-26T14:41:59Z",
        "updatedAt": "2021-04-26T14:44:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@AraHaan \r\n\r\n> I will be making an nuget based .NET SDK that will set them for users eventually.\r\n\r\nI don't think an SDK is necessary here; it's a property and a PackageReference, which you can set through a normal NuGet package. However, the package would then be tied to a version of `System.Resources.Extensions`, so I don't think there's much benefit in having a single package to do this rather than the existing one-package-and-one-property approach.",
        "createdAt": "2021-04-26T14:43:45Z",
        "updatedAt": "2021-04-26T14:43:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "k thanks, but what if .NET Framework 4.x is .NET Framework 4.0? I get 'System.Resources.Extensions' is not compatible with net40.",
        "createdAt": "2021-04-26T16:01:30Z",
        "updatedAt": "2021-04-26T16:01:30Z",
        "author": {
          "login": "DaveCousineau"
        }
      },
      {
        "body": "@DaveCousineau You may wish to request support for that TargetFramework in the https://github.com/dotnet/runtime repo.\r\n\r\nYou can always use .NET Framework-based `MSBuild.exe` to build your application, instead of `dotnet build`.",
        "createdAt": "2021-04-26T16:07:01Z",
        "updatedAt": "2021-04-26T16:07:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @AraHaan\r\n> \r\n> > I will be making an nuget based .NET SDK that will set them for users eventually.\r\n> \r\n> I don't think an SDK is necessary here; it's a property and a PackageReference, which you can set through a normal NuGet package. However, the package would then be tied to a version of `System.Resources.Extensions`, so I don't think there's much benefit in having a single package to do this rather than the existing one-package-and-one-property approach.\r\n\r\nThe issue is the property does not work even when placed directly inside the csproj, and only applies when placed in a Directory.Build.targets, due to this many users do not know about this and they give up so that is why I decided to make one for those who do not know they can just change 1 line (as opposed to adding 6~10 lines) and needing to create a new file that most people never worked with before.\r\n\r\nYou might think, \"but it will apply in Directory.Build.props\" I tried that manually myself, it does not do anything at all, it only works when placed in ``Directory.Build.targets``.\r\n\r\nAs such the default .NET SDK presets it, I see no reason why projects should explicitly set it and I feel the proper functionality is for the WindowsDesktop Sdk to reference the package unconditionally as well as set the property whenever an .NET Framework TFM is referenced.\r\n\r\nAnd this is because a lot of codebases either:\r\n- refuse to make the change and consider it an .NET Sdk issue itself and as such should be set under the .NET Sdk for them.\r\n- dumb that they would have to do it manually, they want an Sdk to set it for them so they do not have to set it and create ``Directory.Build.targets`` for every single project they have. Imagine they got over 1k projects each getting this issue.\r\n- It could have been avoided by only adding ~10 lines of code in the WindowsDesktop Sdk itself (which now gets automatically included with the .NET 5 and 6 SDK's despite using older TFMs).\r\n\r\nSearch all the repositories on github using them, I can garentee you this: all of them think it's dumb to have to do it manually as opposed to it being an implicit ``PackageReference`` provided from the WindowsDesktop Sdk.\r\nAlso that ``PackageReference`` can just as easily be wildcarded to ``*-*`` like how my Sdk does that is why I will push it as an Sdk change instead of shoving the change down their throat and forcing them to provide it and cluttering their codebase in the process and making it less readable and them less able to find what they need in a timely basis.\r\n\r\nNot every project uses ``Directory.Build.*`` files either, some override things that would normally be in that file by sometimes setting them before the Sdk gets imported and then have the Sdk use that value instead and most times it works for them. It might not work for everything in the Sdk (like the ``BaseIntermediateOutputPath`` property), but depending on what they do it does get the job done. Codebases have different needs, some (like the dotnet/runtime repository) requires a ton of *.props/*.targets files in the codebase to be used at compile time, while others might only require 2 *.props files, and 1~2 .targets files due to their short or sometimes long codebases and the files shared and ``linked`` into the csproj from the root of the repository.\r\n\r\nLikewise some codebases provide their projects as an framework as well from nuget and installed using and Sdk that wildcards the actual assembly packages all at once. One of my Sdk's is an successfull example of that (however it's currently not on nuget.org due to reasons that needs worked on which is to port most arrays to Spans for better performance).\r\n\r\n> @DaveCousineau You may wish to request support for that TargetFramework in the https://github.com/dotnet/runtime repo.\r\n> \r\n> You can always use .NET Framework-based `MSBuild.exe` to build your application, instead of `dotnet build`.\r\n\r\nThen what is the point of multi-targeting by making it an Sdk style project then if they are forced to just msbuild just for 1 TFM that is within x total TFM's needed by the project?",
        "createdAt": "2021-04-26T19:14:40Z",
        "updatedAt": "2021-04-26T19:26:43Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "> The issue is the property does not work even when placed directly inside the csproj\r\n\r\nCan you please elaborate, @AraHaan? I can successfully embed an image with this project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Resources.Extensions\" Version=\"5.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhich just sets the property and adds the reference.",
        "createdAt": "2021-04-26T19:49:42Z",
        "updatedAt": "2021-04-26T19:49:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > The issue is the property does not work even when placed directly inside the csproj\r\n> \r\n> Can you please elaborate, @AraHaan? I can successfully embed an image with this project:\r\n> \r\n> ```\r\n> <Project Sdk=\"Microsoft.NET.Sdk\">\r\n> \r\n>   <PropertyGroup>\r\n>     <OutputType>Exe</OutputType>\r\n>     <TargetFramework>net48</TargetFramework>\r\n>     <GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>\r\n>   </PropertyGroup>\r\n> \r\n>   <ItemGroup>\r\n>     <PackageReference Include=\"System.Resources.Extensions\" Version=\"5.0.0\" />\r\n>   </ItemGroup>\r\n> \r\n> </Project>\r\n> ```\r\n> \r\n> Which just sets the property and adds the reference.\r\n\r\nI tried that before with a project of mine targeting both net472 and net5.0-windows and it failed for me back then (it was about a month ago now when .NET 6 Preview 1 ~ 2 was just released).",
        "createdAt": "2021-04-26T19:55:41Z",
        "updatedAt": "2021-04-26T19:56:48Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "I'm seeing everything work as I expect with `6.0.100-preview.3.21202.5`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFrameworks>net472;net5.0-windows</TargetFrameworks>\r\n    <RootNamespace>_5787</RootNamespace>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n\r\n    <GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Resources.Extensions\" Version=\"5.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```sh-session\r\n\u276f dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored S:\\repro\\dotnet\\msbuild\\issues\\5787\\5787.csproj (in 103 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  5787 -> S:\\repro\\dotnet\\msbuild\\issues\\5787\\bin\\Debug\\net5.0-windows\\5787.dll\r\n  5787 -> S:\\repro\\dotnet\\msbuild\\issues\\5787\\bin\\Debug\\net472\\5787.exe\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.81\r\n\r\n```\r\n\r\nSo if you see this again can you file a new bug with a repro project, please? It sounds like you might have a different issue than some folks here.",
        "createdAt": "2021-04-26T20:07:07Z",
        "updatedAt": "2021-04-26T20:07:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "ok",
        "createdAt": "2021-04-26T20:42:27Z",
        "updatedAt": "2021-04-26T20:42:27Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "> > @DaveCousineau You may wish to request support for that TargetFramework in the https://github.com/dotnet/runtime repo.\r\n\r\nThis is now tracked by dotnet/runtime#62282.\r\n\r\n> Then what is the point of multi-targeting by making it an Sdk style project then if they are forced to just msbuild just for 1 TFM that is within x total TFM's needed by the project?\r\n\r\nYou can use MSBuild.exe to build for all TFMs; you don't have to maintain multiple builds.\r\n\r\nSince it sounds like things are behaving as expected given the current `System.Resources.Extensions` targeting, I'm going to close this issue.",
        "createdAt": "2021-12-02T15:22:00Z",
        "updatedAt": "2021-12-02T15:22:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I just updated to Visual Studio 17.6.4 and a project that has been working for months started giving me this error.\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/26331133/8a8037ca-fd39-48b7-bac2-88d8e4e80852)\r\n",
        "createdAt": "2023-06-24T11:43:35Z",
        "updatedAt": "2023-06-24T11:43:35Z",
        "author": {
          "login": "DataJuggler"
        }
      },
      {
        "body": "@DataJuggler please file a new issue with details.",
        "createdAt": "2023-06-26T14:10:30Z",
        "updatedAt": "2023-06-26T14:10:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I added the extension System.Resources and it fixed it, it is just strange to me that it started after an update.\r\n\r\n",
        "createdAt": "2023-06-26T14:12:57Z",
        "updatedAt": "2023-06-26T14:12:57Z",
        "author": {
          "login": "DataJuggler"
        }
      },
      {
        "body": "Not sure what package @DataJuggler  meant, but I've experienced it in .NET 7 unit test project. Adding System.Resources.Extensions @7.0.0 resolved it",
        "createdAt": "2023-10-26T12:32:12Z",
        "updatedAt": "2023-10-26T12:32:12Z",
        "author": {
          "login": "pflajszer"
        }
      },
      {
        "body": "Yes, I added System.Resources.Extensions also. I forgot to update this thread.",
        "createdAt": "2023-10-26T13:21:02Z",
        "updatedAt": "2023-10-26T13:21:02Z",
        "author": {
          "login": "DataJuggler"
        }
      },
      {
        "body": "Hi @DataJuggler , may I know how do you add the package?\r\nI added in ln 43 - 44 in this csproj https://codesandbox.io/s/unruffled-sound-9svqyj?file=/file.csproj, but I still encounter error MSB3822.",
        "createdAt": "2023-11-01T09:37:00Z",
        "updatedAt": "2023-11-01T09:37:00Z",
        "author": {
          "login": "darrylsepeda"
        }
      },
      {
        "body": "Hi used NuGet Package Manager GUI in Visual Studio 2022.",
        "createdAt": "2023-11-01T12:04:57Z",
        "updatedAt": "2023-11-01T12:04:57Z",
        "author": {
          "login": "DataJuggler"
        }
      },
      {
        "body": "@darrylsepeda that project should not require the package. Please file a new bug with details about how you're building it and a binlog (https://aka.ms/msbuild/binlog) if possible.",
        "createdAt": "2023-11-01T13:45:35Z",
        "updatedAt": "2023-11-01T13:45:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald you were right, the errors were gone when I used 4.7.2 SDK (so I assume need to use the correct SDK to avoid this error).\r\n\r\nit works fine now. Thank you for your help!",
        "createdAt": "2023-11-02T07:16:51Z",
        "updatedAt": "2023-11-03T13:49:15Z",
        "author": {
          "login": "darrylsepeda"
        }
      }
    ]
  }
}