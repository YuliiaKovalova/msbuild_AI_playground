{
  "number": 1863,
  "title": "Reduce JIT cost for AppDomain-creating MSBuild Tasks",
  "body": "[MSBuild.exe's entrypoint method](https://github.com/Microsoft/msbuild/blob/master/src/MSBuild/XMake.cs#L202) should have this attribute affixed to it:\r\n\r\n```csharp\r\n[LoaderOptimization(LoaderOptimization.MultiDomain)]\r\n```\r\n\r\nThat way, MSBuild Tasks that run in that process can be optimized to share JIT results or ngen images across AppDomains (for those tasks that require their own AppDomain). \r\n\r\nThis should help alleviate the high JIT cost observed for AArnott/CodeGeneration.Roslyn#19",
  "state": "CLOSED",
  "createdAt": "2017-03-15T00:19:45Z",
  "updatedAt": "2024-02-21T17:20:46Z",
  "closedAt": "2017-03-23T16:22:56Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AndyGerlicher"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage:\r\nNone of us have used this, we'll take a look. Do you have an easy way to verify reduction in JIT you observed? And do you know if this has any negative perf when you only have a single app-domain?",
        "createdAt": "2017-03-21T22:39:04Z",
        "updatedAt": "2017-03-21T22:39:04Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@IlyaBiryukov may know of any negative perf impact. How to measure? Sure: take an ETL trace of a build of my PInvoke solution, which uses the codegeneration.roslyn package that internally builds with tasks that create sub-appdomains. I'd be happy to test a private build and report on the perf improvement.",
        "createdAt": "2017-03-22T05:29:42Z",
        "updatedAt": "2017-03-22T05:30:24Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "As far as I know, there  is no negative impact on the single domain environment. \r\nThe downside of this optimization is that assemblies loaded into the shared app domain cannot be unloaded.\r\n\r\nAlso, apart from the main entry point attribution that Andrew proposed, the app domains should be created with ```AppDomainSetup.LoaderOptimization = LoaderOptimization.MultiDomain``` to be able to share ngen-ed assemblies cross app domains.\r\n",
        "createdAt": "2017-03-23T16:03:13Z",
        "updatedAt": "2017-03-23T16:03:28Z",
        "author": {
          "login": "IlyaBiryukov"
        }
      },
      {
        "body": "@IlyaBiryukov what is \"the shared app domain\"? If it's the default appdomain, how is that different from the normal policy because AFAIK one cannot unload an assembly anyway. One can only unload AppDomains, and the default appdomain cannot be unloaded.",
        "createdAt": "2017-03-23T16:12:51Z",
        "updatedAt": "2017-03-23T16:12:51Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "This [blog entry](https://blogs.msdn.microsoft.com/junfeng/2004/08/05/domain-neutral-assemblies/) explains that a little bit.",
        "createdAt": "2017-03-23T16:15:14Z",
        "updatedAt": "2017-03-23T16:15:14Z",
        "author": {
          "login": "IlyaBiryukov"
        }
      },
      {
        "body": "dang. Well that defeats a major point of hosting an AppDomain (being able to unload the DLL so MSBuild.exe resident nodes don't lock files). It looks like `MultiDomainHost` would be a more appropriate parameter here, except since Roslyn doesn't GAC their assemblies, they wouldn't be domain neutral.\r\nGrrr...\r\n\r\nI think I can use IBuildEngine's object sharing for the life of a build though to retain an AppDomain for a full build and thus save on JIT costs without losing the ability to unload an AppDomain -- well, so long as \"GC\" for an AppDomain works as I might not be able to call Unload on it.",
        "createdAt": "2017-03-23T16:22:54Z",
        "updatedAt": "2017-03-23T16:22:54Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}