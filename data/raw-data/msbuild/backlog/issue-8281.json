{
  "number": 8281,
  "title": "[RAR] GetReferenceFromItemSpec usage can be slow and could be optimized",
  "body": "### Issue Description\r\n(https://github.com/dotnet/msbuild/blob/762ae6c6bbeb21471d4d685a061ed05b47cfcb05/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1549)\r\n\r\nThis method walks through the list of References and checks each against the provided itemSpec to find the one that matches. References is a Dictionary<AssemblyNameExtension, Reference>. It's currently used twice: [here](https://github.com/dotnet/msbuild/blob/762ae6c6bbeb21471d4d685a061ed05b47cfcb05/src/Tasks/AssemblyDependency/Reference.cs#L1080) and [here](https://github.com/dotnet/msbuild/blob/762ae6c6bbeb21471d4d685a061ed05b47cfcb05/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1505). In both cases, it's looping over a list of other items. That makes this at least an O(n^2) operation, which is ripe for improvement.\r\n\r\nOf note, we don't even necessarily use the AssemblyNameExtension GetReferenceFromItemSpec actually returns; we often just use it to get the Reference associated with it or check to see if we know about it at all.\r\n\r\nFortunately, AssemblyNameExtension implements both IEquatable<AssemblyNameExtension> and GetHashCode. That means that if you can construct a new AssemblyNameExtension with the same hash code that passes that equal check, you can access it directly out of the dictionary. That would turn an O(n^2) operation into an O(n) operation.\r\n\r\nConstructing an appropriate ANE isn't trivial, but I think the potential perf win would likely be fairly substantial, so it seems worth looking into to me.",
  "state": "OPEN",
  "createdAt": "2023-01-05T01:05:33Z",
  "updatedAt": "2023-01-31T09:31:26Z",
  "closedAt": null,
  "author": {
    "login": "Forgind"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Good First Issue",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Linking to #2015",
        "createdAt": "2023-01-31T09:31:26Z",
        "updatedAt": "2023-01-31T09:31:26Z",
        "author": {
          "login": "stan-sz"
        }
      }
    ]
  }
}