{
  "number": 6233,
  "title": "msbuild restores delisted NuGet package versions when PackageReferenve.Version ends with * to denote the latest version",
  "body": "### Issue Description\r\nWe have changed the versioning scheme of an internal NuGet package. The new scheme places the new versions below the old ones, so the latter were unlisted from the NuGet repository (we use Azure Artifacts).\r\n\r\nThe NuGet package is referenced in code using a *, like this - **61.***:\r\n```\r\n    <PackageReference Include=\"Company.Payroll.Engine.DB\">\r\n      <Version>61.*</Version>\r\n    </PackageReference>\r\n```\r\n\r\nWe run msbuild with the **RestoreForce = true** and msbuild restores the latest old version, which is unlisted.\r\n\r\nNote that running nuget.exe list command returns the correct new version, i.e. it does ignore the unlisted versions unlike msbuild.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a NuGet package and publish it to anywhere. I think the server side technology does not matter as long as it supports the NuGet API.\r\n2. Create an msbuild project and reference the NuGet package using *\r\n3. Have 2 versions of the NuGet package\r\n4. Unlist the newest version\r\n5. run msbuild /t:Restore /p:RestoreForce=true\r\n\r\n### Expected Behavior\r\nThe unlisted package is ignored - the previous package version should be restored instead.\r\n\r\n### Actual Behavior\r\nThe unlisted package is restored. Cleaning the nuget cache does not help.\r\n\r\n### Analysis\r\nI checked with Fiddler and nuget uses a different API than msbuild. Nuget uses some kind of XML API, whereas msbuild uses JSON API, specifically https://docs.microsoft.com/en-us/nuget/api/package-base-address-resource which I believe is wrong, because it returns both listed and unlisted versions (as documented in the article), without indicating what is unlisted. As such it is not suitable to resolve the * versions. Or any range versions in general.\r\n\r\n### Versions & Configurations\r\n\r\n- NuGet Version: 5.2.0.6090\r\n- Microsoft (R) Build Engine version 16.8.3+39993bd9d for .NET Framework\r\n\r\n### Attach a binlog\r\n[msbuild.zip](https://github.com/dotnet/msbuild/files/6109565/msbuild.zip)\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2021-03-09T15:28:08Z",
  "updatedAt": "2021-06-09T15:33:50Z",
  "closedAt": "2021-06-09T15:33:50Z",
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: @nkolev92 is this a NuGet issue?",
        "createdAt": "2021-03-10T16:19:43Z",
        "updatedAt": "2021-03-10T16:19:43Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "That's by design. \r\nListedness does not affect resolution, only user discoverability (searching for packages on nuget.org, PM UI). ",
        "createdAt": "2021-03-10T19:51:38Z",
        "updatedAt": "2021-03-10T19:51:38Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "I was afraid you would say so. So **nuget.exe list** would not return delisted versions, but **msbuild /restore** would happily restore it.\r\nNow I may understand it when the version is provided exactly. But when it is given as a range - don't you do discovery first? No matter how you call it - the discovery phase is there. You are calling NuGet API to discover the available versions. And if it is by design, then how come the discovery API you use returns delisted versions? By your own words - it should not.\r\n",
        "createdAt": "2021-03-10T21:00:50Z",
        "updatedAt": "2021-03-10T21:00:50Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> Now I may understand it when the version is provided exactly. But when it is given as a range - don't you do discovery first? \r\n\r\nExact version is preferred. You'd get a warning if anything else was resolved.",
        "createdAt": "2021-03-10T22:27:51Z",
        "updatedAt": "2021-03-10T22:27:51Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "I would also prefer an exact version. But we use * versions for some of our internal NuGet packages.\r\n\r\nSo, back to my question. Given a range of versions - don't you do version discovery? And if so, shouldn't delisted versions be excluded from this discovery?",
        "createdAt": "2021-03-11T05:07:25Z",
        "updatedAt": "2021-03-11T05:07:25Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "All available versions are considered when using floating versions. \r\nOnce a package has been installed, the notion of a package being listed is lost. ",
        "createdAt": "2021-03-11T17:22:56Z",
        "updatedAt": "2021-03-11T17:22:56Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "I am sorry. I still do not understand. We use **RestoreForce=true** during the restore. That means the version restored an hour ago may not be the version restored now, because the flag forces **discovery** of the new versions. That discovery happens before the resolution. My point - the discovery should not include delisted versions.\r\n\r\n\r\n",
        "createdAt": "2021-03-11T18:21:04Z",
        "updatedAt": "2021-03-11T18:21:04Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> My point - the discovery should not include delisted versions.\r\n\r\nFloating versions by design considers listed and unlisted versions. ",
        "createdAt": "2021-03-11T18:42:59Z",
        "updatedAt": "2021-03-11T18:42:59Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Is it documented anywhere?",
        "createdAt": "2021-03-11T18:49:11Z",
        "updatedAt": "2021-03-11T18:49:11Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Docs available here: https://docs.microsoft.com/en-us/nuget/nuget-org/policies/deleting-packages\r\n\r\nI couldn't find the client side one, I created an issue for that to be added there as well, https://github.com/NuGet/docs.microsoft.com-nuget/issues/2349.",
        "createdAt": "2021-03-11T19:10:19Z",
        "updatedAt": "2021-03-11T19:10:19Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Now that I know it is by design I question - why do we need package delisting at all? Seems like actually deleting the package is the only way to affect the floating versions algorithm.\r\n\r\nI think this design is flawed.",
        "createdAt": "2021-03-11T20:28:59Z",
        "updatedAt": "2021-03-11T20:28:59Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "This issue was moved to NuGet/Home#10931",
        "createdAt": "2021-06-09T15:33:50Z",
        "updatedAt": "2021-06-09T15:33:50Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}