{
  "number": 8379,
  "title": "[LiveLogger] Tweak terminal UI to focus on in-progress work",
  "body": "The current LiveLogger display can struggle with long lists of projects, pushing information about currently-building projects off of the screen. We should address this by collapsing information into three sections, focusing on in-flight projects.\r\n\r\nThe viewable area of the screen should contain three kinds of information:\r\n* [ ] A collapsed line describing the number of projects completed during this build. This should be kept up to date as more projects are completed.\r\n* [ ] Lines showing all in-progress builds that are currently blocked by other projects that are building.  This is typically the result of some Target calling the `MSBuild` task on other project(s) - we should explicitly state this on these lines. The below is an example, but the core idea is to identify the dependent projects, and the specified target. There may be zero of these lines, depending on the point in time we're looking at.\r\n```\r\n./MyApp.csproj\r\n- Waiting on `MyLib.csproj` to build the `compile` target\r\n```  \r\n* [ ] Lines showing all projects that are actually being built at this time. This output should be what we're used to seeing in LiveLogger right now - warning/error output aggregated over the course of that built target.",
  "state": "CLOSED",
  "createdAt": "2023-01-31T19:24:11Z",
  "updatedAt": "2024-02-21T14:06:40Z",
  "closedAt": "2023-02-10T06:46:01Z",
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": ".NET 8.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "For point 1, does that mean also hiding warnings and high priority messages (including output) for finished projects?",
        "createdAt": "2023-01-31T20:04:15Z",
        "updatedAt": "2023-01-31T20:04:15Z",
        "author": {
          "login": "edvilme"
        }
      },
      {
        "body": "I don't think we know that for sure yet. I lean toward keeping them (if there's room after all the more-likely-to-be-relevant-now stuff).",
        "createdAt": "2023-01-31T20:51:54Z",
        "updatedAt": "2023-01-31T20:51:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Lines showing all in-progress builds that are currently blocked by other projects that are building.  This is typically the result of some Target calling the `MSBuild` task on other project(s) - we should explicitly state this on these lines. The below is an example, but the core idea is to identify the dependent projects, and the specified target. There may be zero of these lines, depending on the point in time we're looking at.\r\n> \r\n> ```\r\n> ./MyApp.csproj\r\n> - Waiting on `MyLib.csproj` to build the `compile` target\r\n> ```\r\n\r\nI think there's a progression we can go through here. It'd be great to have that level of detail but it's not easily exposed in the logging we have today.\r\n\r\n1. Trivial: special-case the `MSBuild` task to indicate to the project that called it that it's in a \"waiting\" state (with no further specific information).\r\n2. Hopefully not too hard: scrape inputs to the MSBuild task to assemble a list of projects that are being waited on and display them\r\n3. Advanced disambiguation: we may have to do some disambiguation here that isn't easy. To map to our understanding of a project, we'd need to apply the global property changes from item metadata on the `Projects` input + the current project's global properties.\r\n4. Additional understanding of requested targets and/or linking to in-progress builds that are blocking this thing.",
        "createdAt": "2023-01-31T20:58:37Z",
        "updatedAt": "2023-01-31T20:58:37Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}