{
  "number": 8003,
  "title": "Could not copy the file \"XXXX\\apphost.exe\" because it was not found",
  "body": "### Issue Description\r\n\r\nRunning dotnet publish after deleting obj and bin directories fails until I taskkill the dotnet process.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n* Download the latest SDK installer build (I'm using 7.0.100-rtm.22470.23)\r\n* Unzip it to e.g. C:\\dotnet7 and then run the following exact steps:\r\n\r\n```\r\ncd c:\\dotnet7\r\nset path=%cd%;%path%\r\ndotnet new console -o test\r\ncd test\r\ndotnet publish -r win-x64 -c Release\r\nrmdir /S /Q obj\r\nrmdir /S /Q bin\r\ndotnet publish -r win-x64 -c Release\r\n```\r\n\r\n### Expected Behavior\r\nThe second publish succeeds, same as the first.\r\n\r\n### Actual Behavior\r\n```\r\nC:\\dotnet7\\sdk\\7.0.100-rtm.22470.23\\Microsoft.Common.CurrentVersion.targets(5145,5): error MSB3030: Could not copy the\r\nfile \"C:\\dotnet7\\test\\obj\\Release\\net7.0\\win-x64\\apphost.exe\" because it was not found. [C:\\dotnet7\\test\\test.csproj]\r\n```\r\n\r\n### Analysis\r\nSomething with the dotnet.exe process that hangs around after the first publish. If I `taskkill /im dotnet.exe /f` before the second publish, it works. It took a while to figure that out.\r\n\r\nHere's the binlog from the failed attempt: \r\n[msbuild.zip](https://github.com/dotnet/msbuild/files/9630415/msbuild.zip)\r\n\r\n\r\n### Versions & Configurations\r\n7.0.100-rtm.22470.23\r\n",
  "state": "CLOSED",
  "createdAt": "2022-09-23T02:37:33Z",
  "updatedAt": "2024-02-26T15:23:30Z",
  "closedAt": "2023-01-10T13:42:36Z",
  "author": {
    "login": "MichalStrehovsky"
  },
  "labels": [
    "bug",
    "Area: Performance",
    "Area: Server",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hmm. I don't seem to repro with those steps.\r\n\r\n```sh-session\r\n\u276f git clean -xdf\r\nRemoving bin/\r\nRemoving obj/\r\n\r\n8003\\test on main via .NET v7.0.100-rtm.22472.21 \ud83c\udfaf net7.0\r\n\u276f dotnet publish -r win-x64 -c Release -bl\r\nMSBuild version 17.4.0-preview-22466-03+48ab5664b for .NET\r\nC:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\MSBuild.dll --property:_IsPublishing=true -property:RuntimeIdentifier=win-x64 -property:_CommandLineDefinedRuntimeIdentifier=true -property:Configuration=Release -bl -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\dotnet.dll -maxcpucount -restore -target:Publish -verbosity:m .\\test.csproj\r\n  Determining projects to restore...\r\n  Restored S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\test.csproj (in 13 ms).\r\nC:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\Sdks\\Microsoft.NET.Sdk\\targe\r\nts\\Microsoft.NET.RuntimeIdentifierInference.targets(257,5): message NETSDK1057: You are using a preview version of .NET\r\n. See: https://aka.ms/dotnet-support-policy [S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\test.csproj]\r\nC:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\Sdks\\Microsoft.NET.Sdk\\targe\r\nts\\Microsoft.NET.Sdk.targets(1136,5): warning NETSDK1179: One of '--self-contained' or '--no-self-contained' options ar\r\ne required when '--runtime' is used. [S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\test.csproj]\r\n  test -> S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\bin\\Release\\net7.0\\win-x64\\test.dll\r\n  test -> S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\bin\\Release\\net7.0\\win-x64\\publish\\\r\n\r\n8003\\test on main via .NET v7.0.100-rtm.22472.21 \ud83c\udfaf net7.0\r\n\u276f .\\msbuild.binlog\r\n\r\n8003\\test on main via .NET v7.0.100-rtm.22472.21 \ud83c\udfaf net7.0\r\n\u276f cmd /c rmdir /s /q obj bin\r\n\r\n8003\\test on main via .NET v7.0.100-rtm.22472.21 \ud83c\udfaf net7.0\r\n\u276f dotnet publish -r win-x64 -c Release -bl\r\nMSBuild version 17.4.0-preview-22466-03+48ab5664b for .NET\r\nC:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\MSBuild.dll --property:_IsPublishing=true -property:RuntimeIdentifier=win-x64 -property:_CommandLineDefinedRuntimeIdentifier=true -property:Configuration=Release -bl -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\dotnet.dll -maxcpucount -restore -target:Publish -verbosity:m .\\test.csproj\r\n  Determining projects to restore...\r\n  Restored S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\test.csproj (in 3 ms).\r\nC:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\Sdks\\Microsoft.NET.Sdk\\targe\r\nts\\Microsoft.NET.RuntimeIdentifierInference.targets(257,5): message NETSDK1057: You are using a preview version of .NET\r\n. See: https://aka.ms/dotnet-support-policy [S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\test.csproj]\r\nC:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\\sdk\\7.0.100-rtm.22472.21\\Sdks\\Microsoft.NET.Sdk\\targe\r\nts\\Microsoft.NET.Sdk.targets(1136,5): warning NETSDK1179: One of '--self-contained' or '--no-self-contained' options ar\r\ne required when '--runtime' is used. [S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\test.csproj]\r\n  test -> S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\bin\\Release\\net7.0\\win-x64\\test.dll\r\n  test -> S:\\repro\\dotnet\\msbuild\\issues\\8003\\test\\bin\\Release\\net7.0\\win-x64\\publish\\\r\n```\r\n\r\nAre you getting this reliably?\r\n\r\nOne thing I notice from your binlog is\r\n\r\n```text\r\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\r\n```\r\n\r\nwhich seems to imply that the `rmdir` may not have been run or was somehow concurrent with the second build?",
        "createdAt": "2022-09-23T15:36:34Z",
        "updatedAt": "2022-09-23T15:36:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "C:\\Users\\raines\\Downloads\\dotnet-sdk-7.0.100-rtm.22472.21-win-x64\r\nS:\\repro\\dotnet\\msbuild\\issues\\8003\\test\r\n\r\nTest needs to go under the extracted dotnet. Iirc that part was important for some reason.",
        "createdAt": "2022-09-23T21:50:26Z",
        "updatedAt": "2022-09-23T21:50:26Z",
        "author": {
          "login": "MichalStrehovsky"
        }
      },
      {
        "body": "> which seems to imply that the rmdir may not have been run or was somehow concurrent with the second build?\r\n\r\nThose folders are definitely deleted. I was troubleshooting this for a while until I figured out killing all dotnet.exe instances resolves it. It's 100% repro for me and has been with various 7.0/8.0 SDK versions I tried lately.\r\n\r\nExtracting the SDK and creating projects using the SDK into the **same directory** is my \"scratch program\" workflow. It can all be quickly cleaned up because I just delete the one folder.",
        "createdAt": "2022-09-26T00:18:01Z",
        "updatedAt": "2022-09-26T00:18:01Z",
        "author": {
          "login": "MichalStrehovsky"
        }
      },
      {
        "body": "@MichalStrehovsky Is this a regression? Can you try setting environment variable `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` to 1 and see if your scenario repros?\r\n\r\n> If I taskkill /im dotnet.exe /f before the second publish, it works. It took a while to figure that out.\r\n\r\ncc @rokonec msbuild server related?",
        "createdAt": "2022-09-29T16:27:22Z",
        "updatedAt": "2022-09-29T16:30:02Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "It is a regression. The workflow stopped working recently (not much more than ~2 months ago?). I brushed it off as some intermittent issue. It took a while until I realized the exact steps to repro it and the relationship with the msbuild server (the fact that taskkill makes it start working again). `dotnet` is starting to have too much \"magic\" for my taste.\r\n\r\nSetting `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` to `1` makes it no longer repro.",
        "createdAt": "2022-09-29T23:42:01Z",
        "updatedAt": "2022-09-29T23:42:01Z",
        "author": {
          "login": "MichalStrehovsky"
        }
      },
      {
        "body": "I have discussed it with Michal. The root cause is not MSBuild server but our updated immutable-files up to date check.\r\nWe simply add dotnet root `c:\\dotnet7\\` as immutable directory so c:\\dotnet7\\test which contains test projects is also considered immutable and removing bin and obj from it will break this immutability and cause msbuild node process believe files are still there.\r\nIf `c:\\dotnet7\\test` would have contained multiple projects it would be reproducible even without msbuild server (in nodes processes).\r\nWorkaround/recommendation is not put anything projects into dotnet-root directory and let dotnet-root directory be reserved only as target for dotnet installations.\r\n@rainersigwald do we want to somehow address this issue? One solution would be to test if project directory is inside of known immutable directories and log error.",
        "createdAt": "2022-09-30T08:59:43Z",
        "updatedAt": "2022-09-30T08:59:43Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "This is an interesting one. The scenario is sufficiently nonstandard that I'm not willing to sacrifice much standard-path performance, but the regression is not great.\r\n\r\nDo you think it'd be possible/easy to disable all the immutable check stuff if an entry-point project is within one of the should-be-immutable cones @rokonec?",
        "createdAt": "2022-10-06T15:20:46Z",
        "updatedAt": "2022-10-06T15:20:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald By looking at the code, we would have to inject test and disabling logic in:\r\n- `LoggingService.LogProjectStarted`\r\n- `Evaluator.Evaluate`\r\n\r\nIf would test if project file is considered immutable and if it was, if would turn immutable check off permanently.\r\n\r\nWe shall consider if this amount of code and complexity is worth to solve this, IMO, niche use case.\r\nPlease advise.",
        "createdAt": "2022-11-03T10:31:13Z",
        "updatedAt": "2022-11-03T10:31:13Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@baronfel do you have an opinion here? I lean toward \"do nothing until/unless we get more feedback on this\" but it sure is a bad failure case if you do hit it.\r\n\r\nOne other possible option would be to try to detect whether dotnet-root is writeable (as a proxy for \"is the SDK an unzipped one\") and disable the immutable-files caching then?",
        "createdAt": "2022-11-14T20:37:05Z",
        "updatedAt": "2022-11-14T20:37:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm inclined to agree. This is the first time I've heard of folks making projects inside an SDK directory (though of course such a thing is _possible_), and I don't want to over correct on a solution without a few more data points.",
        "createdAt": "2022-11-14T21:46:13Z",
        "updatedAt": "2022-11-14T21:46:13Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I am closing this issue. We do not believe it impact enough people. We unblocked Michal with workaround and we can do same if other people experience this issue.\r\nFeel free to reopen it if needed.",
        "createdAt": "2023-01-10T13:42:36Z",
        "updatedAt": "2023-01-10T13:42:36Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I'm getting the \"Could not copy the path\\plugin.dll because it was not found\" error for hundreds of dlls in all projects under the solution while publishing the project. I'm able to build the project and run it locally though. Is this the same issue?",
        "createdAt": "2024-02-20T15:35:33Z",
        "updatedAt": "2024-02-20T15:35:33Z",
        "author": {
          "login": "mi-ttu"
        }
      },
      {
        "body": "> I'm getting the \"Could not copy the path\\plugin.dll because it was not found\" error for hundreds of dlls in all projects under the solution while publishing the project. I'm able to build the project and run it locally though. Is this the same issue?\r\n\r\n@qwerty7676mi very unlikely to be this issue, please file a new one.",
        "createdAt": "2024-02-26T15:23:28Z",
        "updatedAt": "2024-02-26T15:23:28Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}