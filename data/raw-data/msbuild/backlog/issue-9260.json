{
  "number": 9260,
  "title": "[Feature Request]: Add JsonPeek and JsonPatch tasks",
  "body": "### Summary\n\nAdd support in MSBuild for handling JSON as structured data, roughly equivalent to the `XmlPeek`, `XmlPoke`, and `XslTransformation` tasks for XML.\n\n### Background and Motivation\n\nThe [\"Command line evaluation of MSBuild properties\"](https://github.com/dotnet/msbuild/issues/3911#issuecomment-1478468822) feature will output JSON and JSON has become at least as common as XML but is not supported in MSBuild code.\n\n### Proposed Feature\n\nCreate `JsonPeek` and `JsonPatch` tasks using System.Text.Json.\r\n\r\nLike `XmlPeek` and `XslTransformation` (and unlike `XmlPoke`), the `JsonPeek` and `JsonPatch` tasks should accept input content as either strings or files.\r\n\r\n### `JsonPeek`\r\n\r\n`JsonPeek` would support querying JSON and would depend on a \"location path\" which should probably conform with the [JSONPath Draft RFC](https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base). SQL Server has a definition for [JSON Path Expressions](https://learn.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server?view=sql-server-ver16) that seems to follow the RFC and there is a [JsonPath.Net](https://www.nuget.org/packages/JsonPath.Net) implementation.\r\n\r\n`JsonPeek` would be equivalent to `XmlPeek`.\r\n\r\n### `JsonPatch`\r\n\r\n`JsonPatch` would support modifying JSON and would depend on the [JSON Patch Proposed Standard](https://datatracker.ietf.org/doc/html/rfc6902). There is a [JsonPatch.Net](https://www.nuget.org/packages/JsonPatch.Net) implementation. [JSON Patch support in ASP.NET](https://learn.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-7.0) uses Newtonsoft.Json.\r\n\r\nThe `JsonPatch` task may be considered to be like [`XslTransformation`](https://learn.microsoft.com/en-us/visualstudio/msbuild/xsltransformation-task?view=vs-2022). A weakness of [`XmlPoke`](https://learn.microsoft.com/en-us/visualstudio/msbuild/xmlpoke-task?view=vs-2022) is that it uses XPath to identify a node which it essentially can only replace. Because the patch document for JSON is generally simpler than an XSLT, `JsonPatch` is probably sufficient as an equivalent for both `XmlPoke` and `XslTransformation`.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-09-22T19:54:59Z",
  "updatedAt": "2024-02-01T10:29:16Z",
  "closedAt": null,
  "author": {
    "login": "jrdodds"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "blocked",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "IMO the limiting factor here is 1) demand, and 2) JSONPath. If it was in a core .NET library I'd be pretty happy to expose this, but I'm not willing to pull a totally new library in for it. So I consider this blocked on https://github.com/dotnet/runtime/issues/31068.",
        "createdAt": "2023-09-22T19:59:40Z",
        "updatedAt": "2023-09-22T19:59:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "And the runtime issue is blocking on the spec finalizing. Hopefully eventually this will all come to fruition.",
        "createdAt": "2023-09-22T20:22:03Z",
        "updatedAt": "2023-09-22T20:22:03Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Note JsonPeek was tracked by #8374.",
        "createdAt": "2023-10-09T17:04:08Z",
        "updatedAt": "2023-10-09T17:04:08Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}