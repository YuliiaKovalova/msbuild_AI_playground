{
  "number": 1301,
  "title": "Replace ignored IO exceptions with path syntax checking",
  "body": "MSBuild is using IO exceptions to tell whether things are strings or files. This is making it hard for other teams to debug VS (and probably has some perf implications too). We should replace the IO exceptions with path syntax checking.\r\n\r\nThe exceptions seem to be coming from `Path.GetFullPath`, but msbuild may be using other .net APIs too.\r\n\r\nTo check for valid paths we can use something like: https://github.com/Microsoft/msbuild/blob/master/src/Shared/FileUtilities.cs#L526-L536\r\nAnd then refactor all code paths that use exceptions to re-use some common piece of code that validates the path.\r\n\r\nOne way to repro this is to create an empty asp.net core web application and open it.",
  "state": "CLOSED",
  "createdAt": "2016-11-02T19:58:59Z",
  "updatedAt": "2024-02-21T17:24:36Z",
  "closedAt": "2021-04-13T07:39:41Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "It appears that `Path.GetInvalidPathChars()` and `Path.GetInvalidFileNameChars()` both clone the entire array  on every call. We need to cache their result when calling them: https://github.com/Microsoft/msbuild/blob/master/src/Shared/FileUtilities.cs#L526-L536, especially since that code is getting called for each item occurrence.\n",
        "createdAt": "2016-11-08T19:08:23Z",
        "updatedAt": "2016-11-08T19:10:03Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> It appears that Path.GetInvalidPathChars() and Path.GetInvalidFileNameChars() both clone the entire array on every call. We need to cache their result when calling them\r\n\r\nIf there's an inefficiency in the Path class it would be great to open issues in the CoreFX repo so we can fix them.",
        "createdAt": "2016-12-05T05:17:34Z",
        "updatedAt": "2016-12-05T05:17:34Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft Apparently there is a missmatch between the [internal source reference](http://index/?query=GetInvalidFileNameChars&rightProject=mscorlib&file=system%5Cio%5Cpath.cs&rightSymbol=oa3fzhufj0k2) and [github](https://github.com/dotnet/corefx/blob/c55435befeb372707558a5c441b3c64bf243948f/src/System.Runtime.Extensions/src/System/IO/Path.Windows.cs#L18). The new code does not clone anymore. I guess I should open an issue against whoever does the internal indexing :). Is corefx indexed internally?",
        "createdAt": "2016-12-05T22:27:43Z",
        "updatedAt": "2016-12-05T22:29:09Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai http://index indexes desktop framework, http://source.dot.net indexes .NET Core, which is what's on GitHub.\r\n\r\nIn .NET Core, it seems still true that [GetInvalidFileNameChars](http://source.dot.net/#System.Private.CoreLib/corefx/System/IO/Path.Windows.cs,18) and [GetInvalidPathChars](http://source.dot.net/#System.Private.CoreLib/corefx/System/IO/PathInternal.Windows.cs,61) allocate each time, \r\n\r\nInternally though it seems to [be optimized](http://source.dot.net/#System.Private.CoreLib/corefx/System/IO/PathInternal.Windows.cs,183). One way to access that internal code path looks like to do `Path.Combine(yourpath, \"\")` which will check for invalid path characters then return `yourpath`. I'm not sure of a replacement for `GetInvalidFileNameChars` but it looks like you could do the above then also check for `;`, `\\\\`, and `/`.\r\n\r\n@JeremyKuhne sound right?",
        "createdAt": "2016-12-05T22:42:00Z",
        "updatedAt": "2016-12-05T22:42:27Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Uh, that avoids the clone but does not avoid the exception. I would rip off the [implementation](http://source.dot.net/#System.Private.CoreLib/corefx/System/IO/PathInternal.Windows.cs,183) to avoid that unless @JeremyKuhne has another idea.",
        "createdAt": "2016-12-05T22:43:59Z",
        "updatedAt": "2016-12-05T22:43:59Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "The lack of caching is a security feature- if you return the actual array code could change the contents. More critical for limited trust scenarios that exist on desktop.",
        "createdAt": "2016-12-05T22:47:23Z",
        "updatedAt": "2016-12-05T22:47:23Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "If you point me to the code where you're doing the filtering I might be able to provide some feedback/suggestions.\r\n\r\nNote that trying to accurately check if something is a syntactically valid path is really hard. Checking for invalid characters is one thing you can do, but it has limited value on Unix where only null is invalid.\r\n\r\nThere are lots of other \"well-formed\" checks you can do, but I don't see that filtering many paths out. On any OS you shouldn't see segments that are longer than 255 characters, for example.\r\n\r\nOn Windows there are a lot of further rules about what makes a good path- they're all around whether you're specifying a volume correctly.",
        "createdAt": "2016-12-05T23:17:18Z",
        "updatedAt": "2016-12-05T23:17:18Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "@JeremyKuhne Why not use an ImmutableArray to represent the chars?\r\n\r\n> Note that trying to accurately check if something is a syntactically valid path is really hard\r\n\r\nBecause of this, it sounds like a good idea to have this complicated knowledge represented inside a .Net API and not duplicated in every codebase that wants to find invalid paths. And most codebases that need to do this will have some partially correct projection of the real requirements.\r\n\r\nIn terms of MSBuild, we did a [slim implementation](https://github.com/Microsoft/msbuild/blob/xplat/src/Shared/FileUtilities.cs#L614-L624) that is based on the assumption that, in MSBuild's case, most invalid paths will be due to invalid characters. For the rest we'll let the .Net APIs throw an exception and swallow the exception.",
        "createdAt": "2016-12-06T02:02:55Z",
        "updatedAt": "2016-12-06T02:04:05Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Why not use an ImmutableArray to represent the chars?\r\n\r\nWe could, but that would be an API add. The value seems a little narrow to warrant doing it, but I'm open to discussing it if you want to pursue it.\r\n\r\n> have this complicated knowledge represented inside a .Net API \r\n\r\nWe could do that as well, but part of the problem is that there is no solid solution to the problem. Even on Unix (no nulls, no segments > 255) it is only true _now_ and it doesn't hold in the inverse. You only know if something is _bad_ not _good_. You can mount filesystems that don't support 255 chars, or are limited by other \"non-native\" file system restrictions (FAT, CDFS, NTFS, etc.). And, while unlikely, if some filesystem introduces larger segments...\r\n\r\nIt gets even more complicated on Windows as any sort of driver can parse the final part of the path (past the \"volume\"). Pipes, for example, can use many more characters than NTFS will allow. The restrictions are completely up to the driver at that point. Another example, NTFS knows how to parse the aternate data streams (e.g. \"foo::bar\").\r\n\r\nI've been dialing back the checks in Path.GetFullPath() because of these reasons. We've been blocking valid, yet unusual paths. For device paths (`\\\\?\\`, `\\\\.\\`) I don't even check the path.\r\n\r\nThe only thing we could reliably tell you is \"IsAccessiblePath()\". If we can get back a FileHandle we can tell if it actually exists at the given location and that you're able to see that it does. If you get AccessDenied it may or may not exist- there is no way to tell.\r\n\r\nOne API that I _do_ plan to add is something like \"GetCanonicalPath()\". It will give you the \"canonical\" path for a given path. Essentially what GetFinalPathNameByHandle does.\r\n\r\n",
        "createdAt": "2016-12-06T18:44:36Z",
        "updatedAt": "2016-12-06T18:44:36Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "Note that `IsAccesiblePath()` that I described above is essentially `File.Exists() || Directory.Exists()`. `File.Exists()` really is (conceptually) `IsAccessibleFile()`.",
        "createdAt": "2016-12-06T18:48:18Z",
        "updatedAt": "2016-12-06T18:48:18Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "Mkay, I see. Paths in MSBuild may or may not be backed up by actual files / directories. So we can't use `IsAccesiblePath()`.\r\n\r\nI guess the next best thing to a .Net `IsInvalidPath` would be a `TryGetFullPath` which does not use exceptions, neither externally nor internally. ",
        "createdAt": "2016-12-06T19:44:11Z",
        "updatedAt": "2016-12-06T19:44:11Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "One thing that may not be obvious is that the native `GetFullPathName()` doesn't care about \"bad\" paths. It just normalizes separators, cleans up a few trivial things, and adds the current directory if it thinks it should. It will never kick back a path for bad syntax.\r\n\r\nThe Path.GetFullPath() checks were meant to be helpful with the invalid characters and path lengths and sort of incidentally pulled in a few more checks as part of the limited-trust needs for file access permissions. The checks were a bit too aggressive, blocking things like `@\"C:\\Foo \\Bar`, which are relatively easy to create.\r\n\r\nConversely the checks weren't aggressive enough- you can get back paths from Path.GetFullPath() that aren't actually valid. It is a little bit more tricky now that 9x is long gone, but definitely possible (optical media is one specific place).\r\n\r\nThe moral of my story is determining if a string is a path is fraught with peril. Realistically you're not going to get many strings that wouldn't be possible paths. Narrowing it down is expensive and error prone. On Unix it is essentially a worthless endeavor.\r\n\r\nIf I were to suggest an algorithm it would be to check the length of segments (chars between separators) and the limited set of likely bad characters on Windows (checking for control chars outside of whitespace / line feeds is sort of senseless unless you get a benefit from checking `<`). Segment length may be of limited value- I don't know how often really long strings come up for you.  Relying on Path.GetFullPath() is more costly than you need- it will allocate and spin needless cycles for your case.\r\n\r\n",
        "createdAt": "2016-12-06T20:42:24Z",
        "updatedAt": "2016-12-06T20:42:24Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "Indeed the reason for [NormalizePath](https://github.com/Microsoft/msbuild/blob/a66f1cdcfca7910f9460f44343030f238b632258/src/Shared/FileUtilities.cs#L272) was that Path.GetFullPath() showed up all over profiles otherwise.",
        "createdAt": "2016-12-06T20:56:53Z",
        "updatedAt": "2016-12-06T20:56:53Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Path.GetFullPath() showed up all over profiles otherwise.\r\n\r\nI will caution, however, that if you do need to normalize now, that you should use GetFullPath(). I put significant effort into improving the performance when I added long path support. It would be hard to improve upon it locally without significant risk.\r\n\r\nWith normalizing in general, if you find that paths are going to GetFullPath() over and over, consider changing them into their `\\\\?\\` form after they've been normalized. That will make subsequent calls effectively free. The only trick is that if you need to combine them you need to remove the `\\\\?\\` as that skips normalization (which is what Combine relies on).\r\n\r\nAll of this is Windows specific. Unix doesn't have any of the complexities involved here. There aren't multiple root volumes, alternate streams, short file names, etc.",
        "createdAt": "2016-12-06T21:08:59Z",
        "updatedAt": "2016-12-06T21:08:59Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "Thanks @JeremyKuhne and @danmosemsft. In MSBuild's case, the thing probably worth doing is guarding the calls to exception throwing IO methods with invalid character checks. From what I've head from CPS, invalid characters are the predominant case.\r\n\r\nIn the future, it would be cool if we could introduce a type system to MSBuild so that users can specify which variables should be a path (maybe even disambiguate between directories and files) and which should be a plain string. That would solve a whole class of issues with the language.",
        "createdAt": "2016-12-06T22:02:12Z",
        "updatedAt": "2016-12-06T22:02:44Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "[Perf triage]\r\n@cdmihai, I don't see a single thrown exception when opening, closing, building, and switching configurations of an empty ASP.NET Core MVC project on Dev16.10 Preview 1. The issue description does not have a callstack so can't verify it in the code but empirically it appears to be fixed. OK to close?",
        "createdAt": "2021-04-12T14:16:42Z",
        "updatedAt": "2021-04-12T14:16:42Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}