{
  "number": 9967,
  "title": "[Bug]: GetType can still be called as property function, due to case-sensitive comparison",
  "body": "### Issue Description\n\n<https://github.com/dotnet/msbuild/pull/6769> supposedly prevented calling GetType() as a property function, but it does not recognize the name if written with different letter case, e.g. `gettype`.\n\n### Steps to Reproduce\n\ndemo.proj:\r\n\r\n```XML\r\n<Project>\r\n  <PropertyGroup>\r\n    <foo>aa</foo>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"bb\">\r\n    <Message Importance=\"high\" Text=\"$(foo.gettype().FullName)\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\ndotnet msbuild demo.proj\n\n### Expected Behavior\n\n```\r\n$ dotnet msbuild demo.proj\r\nMSBuild version 17.9.6+a4ecab324 for .NET\r\ndemo.proj(7,32): error MSB4185: The function \"GetType\" on type \"System.String\" is not available for execution as an MSBuild property function.\r\n```\n\n### Actual Behavior\n\n```\r\n$ dotnet msbuild demo.proj\r\nMSBuild version 17.9.6+a4ecab324 for .NET\r\n  System.String\r\n```\n\n### Analysis\n\nPerhaps a case-insensitive comparison here would fix it: <https://github.com/dotnet/msbuild/blob/a4ecab324c0586fe69b6bdcc062264b244dd8cd0/src/Build/Evaluation/Expander.cs#L5287>\r\n\r\nAlternatively, compare the MemberInfo.Name string after the lookup, rather than the user-specified string.  That might be a larger change, though.\n\n### Versions & Configurations\n\nMSBuild version 17.9.6+a4ecab324 in .NET SDK 8.0.202",
  "state": "CLOSED",
  "createdAt": "2024-04-03T07:39:15Z",
  "updatedAt": "2024-04-05T10:06:47Z",
  "closedAt": "2024-04-05T10:06:47Z",
  "author": {
    "login": "KalleOlaviNiemitalo"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "f-alizada"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Nice find! I can't believe that match is not case sensitive in the first place.",
        "createdAt": "2024-04-03T13:46:50Z",
        "updatedAt": "2024-04-03T13:46:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Will the fix be considered a breaking change again?",
        "createdAt": "2024-04-03T14:28:27Z",
        "updatedAt": "2024-04-03T14:28:27Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I'm inclined to say no--because \"we already updated the documentation to say you can't do that\" but it's definitely a concern. @baronfel do you have thoughts?",
        "createdAt": "2024-04-03T14:29:47Z",
        "updatedAt": "2024-04-03T14:29:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another possible fix would be to block access to System.Type references in general, rather than just GetType().",
        "createdAt": "2024-04-03T14:38:37Z",
        "updatedAt": "2024-04-03T14:38:37Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I'm inclined to say 'no' for the same reason - the justification for the breaking change notes that there is no broadly-known usage of GetType any longer, so I think the impact of this would be quite low. If we get any significant user feedback that it is in use we can of course add breaking change notices quite quickly and out-of-band of the MSBuild code itself.",
        "createdAt": "2024-04-03T14:39:04Z",
        "updatedAt": "2024-04-03T14:39:04Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "If there is a possibility of low usage, shall we put the change behind the changewave?",
        "createdAt": "2024-04-03T16:18:40Z",
        "updatedAt": "2024-04-03T16:18:53Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "I see :) We have the MSBUILDENABLEALLPROPERTYFUNCTIONS, so the need of changewave is lowered. \r\nHad spent some time understanding why it is not reproducible in debug mode : \r\nhttps://github.com/dotnet/msbuild/blob/28f488a74ed75bf5f21ca93ac2463a8cb1586d79/src/Framework/LazyFormattedBuildEventArgs.cs#L183",
        "createdAt": "2024-04-04T08:16:17Z",
        "updatedAt": "2024-04-04T08:16:17Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Does that InvalidOperationException also trigger for param == \"System.String\"?  If so, that seems misguided.\r\n\r\n\"System.String\".ToString() == \"System.String\".GetType().FullName",
        "createdAt": "2024-04-04T08:42:11Z",
        "updatedAt": "2024-04-04T08:52:52Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo it was exactly the case. ",
        "createdAt": "2024-04-04T09:12:44Z",
        "updatedAt": "2024-04-04T09:12:44Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Oh, I assumed you had param == typeof(RuntimeType), thus typeof(RuntimeType).ToString() == typeof(RuntimeType).GetType().FullName.",
        "createdAt": "2024-04-04T09:15:58Z",
        "updatedAt": "2024-04-04T09:15:58Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I imagine `&& !(param is string)` would get rid of the false \"Invalid type for message formatting argument\" error.",
        "createdAt": "2024-04-04T13:47:10Z",
        "updatedAt": "2024-04-04T13:47:10Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "To be honest, I was thinking to leave it as it is, since it is in debug mode + the fix is prepared. \r\nI'm not 100% sure that this fix should be applicble only for `string`, however did not investigate details, there could be cases when ToString method overriden and returns the value == param.GetType().FullName, since the arguments is an array of object `object[] args`.",
        "createdAt": "2024-04-04T14:42:25Z",
        "updatedAt": "2024-04-04T14:42:25Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  }
}