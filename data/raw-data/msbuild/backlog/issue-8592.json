{
  "number": 8592,
  "title": "[Feature request]: Theres no nice way to Remove items in subdirs using MatchOnMetadata",
  "body": "### Issue Description\r\n\r\nGiven something like:\r\n \r\n```\r\n  <ItemGroup>\r\n    <Compile Include=\"Root/foo.cs\"/>\r\n    <Compile Include=\"Root/SubFolder/bar.cs\"/>\r\n    <Compile Include=\"Root/SubFolder/Bar/baz.cs\"/>\r\n\r\n    <RemoveFilesUnderExt Include=\"Root/SubFolder/someFile.ext\"/>\r\n\r\n    <!--No way to remove Root/SubFolder/Bar/baz.cs - would be nice with a Subdir matching option -->\r\n    <Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadata=\"Directory\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nIt would be great to have a `MatchOnMetadataOptions` matching items in subdirs, theres already matching options for paths.\r\nAFAICT theres no really nice way of doing this today, moving to a Target could work but theres nothing real to depend on before evaluation phase, so its not working nicely with the VS project system.\r\n\r\n### Steps to Reproduce\r\n\r\nAdd MatchOnMetadataOptions for subdirs\r\n\r\n### Expected Behavior\r\n\r\nBe able to remove items on matching subdir paths\r\n\r\n### Actual Behavior\r\n\r\nNothing possible\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-03-23T11:30:21Z",
  "updatedAt": "2024-01-31T08:14:43Z",
  "closedAt": null,
  "author": {
    "login": "hknielsen"
  },
  "labels": [
    "bug",
    "backlog",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't think I understand the scenario, can you elaborate a bit more? Is the difference between `RemoveFilesUnderExt` and `RemoveIgnoreFile` intentional?",
        "createdAt": "2023-03-23T13:49:29Z",
        "updatedAt": "2023-03-23T13:49:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah sorry @rainersigwald - updated it.\r\n\r\nBasically what I need is to remove items based on other items directory/path.\r\nSo the real life scenario is that I need to filter out all `Compile` items that is nested under, in the example case `.ext`.\r\nI build up item `<RemoveFilesUnderExt Include=\"**/*.ext\" />`\r\nAnd then try to remove, its possible when *.cs files are in the same directory, but cant seem to find a way to match on subdirectories as well.\r\nHope it makes sense",
        "createdAt": "2023-03-23T14:10:14Z",
        "updatedAt": "2023-03-23T14:10:39Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@hknielsen If you have an Item collection, you just remove it:\r\n\r\n```xml\r\n  <Target Name=\"test\">\r\n    <ItemGroup>\r\n      <Compile Include=\"Root\\foo.cs\"/>\r\n      <Compile Include=\"Root\\SubFolder\\bar.cs\"/>\r\n      <Compile Include=\"Root\\SubFolder\\Bar\\baz.cs\"/>\r\n      <Compile Include=\"Root\\SubFolder\\someFile.ext\"/>\r\n      <RemoveFilesUnderExt Include=\"**\\*.ext\"/>\r\n      <Compile Remove=\"@(RemoveFilesUnderExt)\" />\r\n    </ItemGroup>\r\n    <Message Text=\"Compile =%0d%0a@(Compile, '%0d%0a')\"/>\r\n  </Target>\r\n```\r\n\r\nThe output from the `Message` task will be:\r\n\r\n```xml\r\ntest:\r\n  Compile =\r\n  Root\\foo.cs\r\n  Root\\SubFolder\\bar.cs\r\n  Root\\SubFolder\\Bar\\baz.cs\r\n```\r\n\r\nNote that `Root\\SubFolder\\someFile.ext` was removed.\r\n\r\n**But, in case you didn't notice, I changed your code slightly. I switched the path separator character.**\r\n\r\nThere is an issue with normalizing the directory separator. Changing two lines in my example, by switching the Windows style `\\` back to a *nix style `/`, will show the issue:\r\n\r\n```xml\r\n      <Compile Include=\"Root/SubFolder/someFile.ext\"/>\r\n      <RemoveFilesUnderExt Include=\"**/*.ext\"/>\r\n```\r\n\r\nWhen the recursive `**` is evaluated, the directory separator is normalized to `\\` (even though I used `/`). But `Identity` is not normalized.\r\n\r\nThe `Remove` fails because\r\n`Root/SubFolder/someFile.ext` and \r\n`Root\\SubFolder\\someFile.ext`\r\ndon't match.\r\n\r\n`Identity` is not normalized because that could be a breaking change. Other metadata values including `FullPath`, `RelativeDir`, and `RecursiveDir` are normalized. \r\n\r\nTo address the issue, match on `Identity` with the `PathLike` option:\r\n\r\n```xml\r\n      <Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadata=\"Identity\" MatchOnMetadataOptions=\"PathLike\" />\r\n```\r\n\r\n**Feature Change**\r\n\r\nWhen `MatchOnMetadata` is not provided, `MatchOnMetadataOptions` is ignored with no warning or error. That is probably a defect because the `Microsoft.Build.Construction.ProjectItemElement` class throws an exception on attempts to set a value for `MatchOnMetadataOptions` without first setting a value for `MatchOnMetadata`.\r\n\r\nIt would be helpful if when `MatchOnMetadataOptions` is provided and `MatchOnMetadata` is not provided, that `MatchOnMetadata` would default to `Identity`.\r\n\r\ne.g.\r\n`<Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadata=\"Identity\" MatchOnMetadataOptions=\"PathLike\" />`\r\nand\r\n`<Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadataOptions=\"PathLike\" />`\r\nwould be equivalent.",
        "createdAt": "2023-03-23T17:26:42Z",
        "updatedAt": "2023-03-24T12:20:21Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds I did not know about the normalization, so thank you for explaining that :)\r\nMaybe I was not clear in my description.\r\n- `Compile` in my case only contains all the *.cs files\r\n- `RemoveFilesUnderExt` contains other files/items, see them as `ignore directory`\r\n\r\nThe outcome I want:\r\n- Remove all `Compile` items thats in same, and subdir of `RemoveFilesUnderExt` items.\r\n- Works nicely together with the VS Project System\r\n\r\nI can successfully Match on same directory, but subdir Im missing something for, so in my example:\r\n```\r\n    <Compile Include=\"Root/SubFolder/bar.cs\"/>\r\n    <Compile Include=\"Root/SubFolder/Bar/baz.cs\"/>\r\n    <RemoveFilesUnderExt Include=\"Root/SubFolder/someFile.ext\"/>\r\n    <Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadata=\"Directory\"/>\r\n```\r\n\r\nIt only removes `Root/SubFolder/bar.cs` and not `Root/SubFolder/Bar/baz.cs`. It makes sense, but I dont see a way to do what I want without making a Task, as theres no options I can match on that also matches on subdirectories AFAICT.\r\nMaking it as a Task, theres no `BeforeTarget` that will execute before the evaluation phase, so I can manipulate the `Compile` Items early enough, so the Project System / IDE will show the Cs files with the Removes",
        "createdAt": "2023-03-27T07:57:57Z",
        "updatedAt": "2023-03-27T11:26:21Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@hknielsen Yes, I didn't understand what you are asking for.\r\n\r\nThe set of files that are passed to the compiler and the set of files displayed in the Visual Studio Solution Explorer are two different things. If what you are trying to do is just not display files in the Solution Explorer but you still want the files to be compiled as part of your assembly, then you don't want to `Remove` from `Compile`.\r\n\r\nThere is a `Visible` metadata that is used by the Solution Explorer. `Visible=\"false\"` will tell theSolution Explorer to not display the file.\r\n\r\nThe Solution Explorer doesn't perform a build of the project to determine what files to show. The [evaluation phase](https://learn.microsoft.com/en-us/visualstudio/msbuild/build-process-overview?view=vs-2022#evaluation-phase), however, is performed. An `Update` can be used to add the `Visible` metadata.\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <Compile Update=\"Root/SubFolder/**/*.*\" Visible=\"false\"/>\r\n  </ItemGroup>\r\n```",
        "createdAt": "2023-03-27T14:28:25Z",
        "updatedAt": "2023-03-27T14:28:25Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds - I only mentioned the Project System as if I manipulated the `Compile` items in a Target, the Project System will still show the items removed as they evaluate early.",
        "createdAt": "2023-03-27T15:00:02Z",
        "updatedAt": "2023-03-27T15:00:02Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@hknielsen When you say \"... the Project System will still show the items ...\", it sounds to me like you are actually talking about the [Solution Explorer](https://learn.microsoft.com/en-us/visualstudio/ide/use-solution-explorer?view=vs-2022) window in the Visual Studio IDE and not the \"[Project System](https://github.com/dotnet/project-system#the-net-project-system-for-visual-studio)\".\r\n\r\nAssuming that you are talking about the Solution Explorer, the `Remove` needs to be in an `ItemGroup` that is outside of any target because you want the change to be applied in the evaluation phase.",
        "createdAt": "2023-03-27T16:03:00Z",
        "updatedAt": "2023-03-27T16:06:08Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> The Remove needs to be in an ItemGroup that is outside of any target because you want the change to be applied in the evaluation phase.\r\n\r\nExactly :) So to reiterate on my feature request; to have the ability to Remove Items that match on globbing from another ItemType on directory and subdir. I think \r\nTheres nothing in the above that gives me that ability.\r\nIll update the description to make that more clear",
        "createdAt": "2023-03-28T07:54:09Z",
        "updatedAt": "2023-03-28T07:54:16Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "With MSBuild 15 and later, a `Remove` can be done in an `ItemGroup` that is outside of any target.\r\n\r\nIf you want to remove everything under `Root/SubFolder`:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <Compile Remove=\"Root/SubFolder/**/*.*\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nIf you want to remove all the C# source files under `Root/SubFolder`:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <Compile Remove=\"Root/SubFolder/**/*.cs\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nIf you want to remove by specific sub-directory paths:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <!-- The trailing '/' is required to match the 'Directory' metadata. -->\r\n    <RemoveFilesUnderExt Include=\"Root/SubFolder/;Root/SubFolder/bar/\"/>\r\n    <Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadata=\"Directory\" MatchOnMetadataOptions=\"PathLike\"/>\r\n  </ItemGroup>\r\n```",
        "createdAt": "2023-03-28T12:12:19Z",
        "updatedAt": "2023-03-28T12:12:19Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@hknielsen Do the examples help? Is your need met?",
        "createdAt": "2023-04-02T19:05:16Z",
        "updatedAt": "2023-04-02T19:05:16Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Team Triage: We will leave this issue open to collect the votes to gauge the customer interest on it.",
        "createdAt": "2023-04-25T14:16:28Z",
        "updatedAt": "2023-04-25T14:16:28Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "My understanding is that the original 'ask' in this feature request is already well supported. Files in sub-directories can be removed with `Remove`, `MatchOnMetadata` is not needed or relevant, and `Remove` is supported in an `Item` that is outside of any target. My feedback is that this feature request can be closed.\r\n\r\nI would like to create a new Feature Request that when `MatchOnMetadataOptions` is provided and `MatchOnMetadata` is not provided, that `MatchOnMetadata` should be defaulted to `Identity`.\r\n\r\ne.g. the following should be supported:\r\n\r\n```xml\r\n<Compile Remove=\"@(RemoveFilesUnderExt)\" MatchOnMetadataOptions=\"PathLike\" />\r\n```\r\n\r\nI think that idea should have its own conversation and feedback.",
        "createdAt": "2023-05-26T14:41:31Z",
        "updatedAt": "2023-05-26T14:41:31Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}