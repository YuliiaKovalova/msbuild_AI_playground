{
  "number": 8542,
  "title": "Remove item from glob by full path does not work",
  "body": "### Issue Description\n\nIf an item is specified by full path in `remove` element it won't' be delete. Is it intended behavior?\r\nI have found several `remove` tags which does not do anything because of this issue in .NET SDK. Example: `ResolveProjectStaticWebAssets` in `Microsoft.NET.Sdk.Razor.StaticWebAssets.targets`.\n\n### Steps to Reproduce\n\nLets take a look on the next project:\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\t<ItemGroup>\r\n\t\t<Compile Include=\"**\" SomeMetadata=\"true\" />\r\n\t</ItemGroup>\r\n\r\n\t<Target Name=\"RemoveSomeItems\">\r\n\t\t<ItemGroup>\r\n\t\t\t<Compile Remove=\"Class1.cs\" />\r\n\t\t\t<Compile Remove=\"$(MSBuildProjectDirectory)\\Class2.cs\" />\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n\r\n</Project>\r\n```\r\n\r\nAssume we have included `Class1.cs` and `Class2.cs`. This target removes `Class1.cs`, but does not remove `Class2.cs` because `remote` is a full path to the item.\n\n### Expected Behavior\n\n `Class1.cs` and `Class2.cs` are removed\n\n### Actual Behavior\n\nOnly `Class1.cs` is removed\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-03-07T17:15:04Z",
  "updatedAt": "2024-01-31T08:14:48Z",
  "closedAt": null,
  "author": {
    "login": "xtmq"
  },
  "labels": [
    "backlog",
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@xtmq The 'actual' behavior that you observed is intended and expected.\r\n\r\nWhen an item is `Include`'d, there is a set of [well-known item metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-well-known-item-metadata?view=vs-2022) values created. One of the metadata values is `Identity`. Item operations like `Remove` match on the `Identity` of the item.\r\n\r\n`Include=\"**\"` is including all files in the project directory and in sub-directories of the project directory. The `Identity` metadata values of the two files found are `Class1.cs` and `Class2.cs`.\r\n\r\n`Remove=\"Class1.cs\"` matches `Class1.cs` and the item is removed.\r\n\r\nBut `Remove=\"$(MSBuildProjectDirectory)\\Class2.cs\"` doesn't match `Class2.cs`.\r\n\r\nWith the [Common MSBuild project items](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2022) (e.g. `Compile`, etc) the identities of items are relative to the project directory. It is best to be consistent with that approach and to create your own items as relative to the project directory.\r\n\r\nThe item's full path is available in the `FullPath` metadata value. When there is no way around matching on a full path, use the `FullPath` metadata value.",
        "createdAt": "2023-03-09T15:20:03Z",
        "updatedAt": "2023-03-09T15:20:03Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Then there are useless (or broken) `remove` statements in .net SDK :) ",
        "createdAt": "2023-03-09T18:32:45Z",
        "updatedAt": "2023-03-09T18:32:45Z",
        "author": {
          "login": "xtmq"
        }
      },
      {
        "body": "Can you provide an example?",
        "createdAt": "2023-03-09T18:51:51Z",
        "updatedAt": "2023-03-09T18:51:51Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/1643827/224126885-7448e1ca-61bc-45e3-9d64-46f98dcc46ea.png)\r\n",
        "createdAt": "2023-03-09T18:56:38Z",
        "updatedAt": "2023-03-09T18:56:38Z",
        "author": {
          "login": "xtmq"
        }
      },
      {
        "body": "In the MSBuild code in the right pane, which is from Microsoft.NET.Sdk.Razor.StaticWebAssets.targets, I see that `@(StaticWebAssets)` is output from the `DiscoverStaticwebAssets` task. That task is specific to the Razor Sdk and has been written to set the `Identity` of items in `DiscoveredstaticwebAssets` to the full path.\r\n\r\nhttps://github.com/dotnet/sdk/blob/5a2edd2ee3e84a2e15e949d7343526740c3f039d/src/RazorSdk/Tasks/StaticWebAssets/DiscoverStaticWebAssets.cs#L63\r\n\r\nIf there is an include like `<Content Include=\"wwwroot\\**\" />` in the project or the Razor Sdk, then the `<Content Remove=\"@(StaticWebAsset)\" />` will fail to match.\r\n\r\nLooks like a Razor Sdk bug to me. An issue should be created at [dotnet/sdk issues](https://github.com/dotnet/sdk/issues) for the Razor Sdk `DiscoverStaticwebAssets` task.\r\n\r\nBut this issue (88542) is not a bug.",
        "createdAt": "2023-03-09T20:42:13Z",
        "updatedAt": "2023-03-09T20:47:38Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Feel free to close the issue. I had to sure we have supported `remove` in a right way in Rider :) \r\nAnd I am pretty sure I have seen 2-3 other similar \"broken\" removes in other SDK, but can not find them right now...",
        "createdAt": "2023-03-09T21:23:07Z",
        "updatedAt": "2023-03-09T21:23:07Z",
        "author": {
          "login": "xtmq"
        }
      },
      {
        "body": "Team triage: @ghogen we want to consider documenting this behavior more clearly. ",
        "createdAt": "2023-03-14T15:08:10Z",
        "updatedAt": "2023-03-14T15:08:10Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}