{
  "number": 2134,
  "title": "[Breaking Change] Targets that run after ResolveReferences to manipulate references are broken after upgrading to 15.3",
  "body": "Version 15.3.0-pre.1.0+26524.3003.d15prerel\r\n\r\n[This target](https://github.com/dotnet/project-system/blob/master/build/Targets/VSL.Imports.targets#L340) which we copied from a package that comes in the VS SDK is broken in this build:\r\n\r\n``` XML\r\n  <!-- This is a copy of the Microsoft.VisualStudio.SDK.EmbedInteropTypes NuGet package, but only the list of\r\n       assemblies that we need. The package includes things like EnvDTE which are reasonable for consumers, but\r\n       strange since we actually _implement_ DTE and use it as an exchange type with generics in a few places. -->\r\n  <Target Name=\"LinkVSSDKEmbeddableAssemblies\" DependsOnTargets=\"ResolveReferences\" AfterTargets=\"ResolveReferences\">\r\n    <ItemGroup>\r\n      <ReferencePath Condition=\"\r\n              '%(FileName)' == 'Microsoft.VisualStudio.Shell.Embeddable'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.0'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.1.DesignTime'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.14.0.DesignTime'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.15.0.DesignTime'\r\n           or '%(Filename)' == 'Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.1.DesignTime'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.ProjectSystem.Interop'\r\n           or '%(FileName)' == 'stdole'\r\n           or '%(FileName)' == 'Microsoft.VisualStudio.CommandBars'\r\n           or '%(FileName)' == 'NuGet.SolutionRestoreManager.Interop'\r\n           or '%(FileName)' == 'NuGet.VisualStudio'\r\n              \">\r\n        <EmbedInteropTypes>true</EmbedInteropTypes>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nie Changes this target makes to the ReferencePath item are not respected at compile time.\r\n\r\nThis silently breaks the product until runtime, after building with this binary - it fails to load because Visual Studio doesn't ship with any of the .DesignTime dlls, hence why they are embedded. Manipulating `ReferencePath` is a pretty common extension point.\r\n\r\nI'm guessing this was broken in the references assembly changes - haven't fully groked what changes we made there and where we landed with all this.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-05-25T09:32:12Z",
  "updatedAt": "2024-02-21T17:18:55Z",
  "closedAt": "2017-05-26T06:09:53Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "tag @rainersigwald @AndyGerlicher ",
        "createdAt": "2017-05-25T09:50:28Z",
        "updatedAt": "2017-05-25T09:50:28Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "This is indeed a consequence of #2039. I'm not sure what to do about it.\r\n\r\nThis target is arguably wrong--it's manipulating an item after the rollup target that logically produces that item. I'd rather see it as `BeforeTargets=\"ResolveReferences\" DependsOnTargets=\"$(ResolveReferencesDependsOn)\"`, similar to what I did with the find-ref-assemblies target. Though ordering between two different targets that want to do related things is extremely tricky there.\r\n\r\nBeing \"wrong\" in a non-obvious way doesn't mean we can just break things with impunity. But we also need to be able to modify the build process.\r\n\r\nThinking about fixes.\r\n\r\n@davkean You can work around for the moment by adding a `BeforeTargets=\"FindReferenceAssembliesForReferences\"` to that target. **EDIT**: wait, that probably creates a dependency cycle. You probably have to replace the dependencies with that rather than add it.",
        "createdAt": "2017-05-25T15:11:09Z",
        "updatedAt": "2017-05-25T15:15:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "One possibility would be to move `FindReferenceAssembliesForReferences` to be `BeforeTargets=\"BeforeCompile\"` (or `_GenerateCompileInputs`?). Or to add it as an explicit named, ordered dependency in `$(CompileDependsOn)`.\r\n\r\nWould that make it happen too late for some uses? I can't think of any offhand, since `@(ReferencePathWithRefAssemblies)` is used only in `CoreCompile` at the moment--and it's new, so if someone wanted to take a dependency on it they'd have to deal with it wherever it is.\r\n\r\ncc @jcouv",
        "createdAt": "2017-05-25T15:15:47Z",
        "updatedAt": "2017-05-25T15:15:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Confirmed by patching my `15.3.0-pre.1.0+26524.0.d15rel` install that what I'm proposing in #2139 fixes the issue for the project system repo.",
        "createdAt": "2017-05-25T22:18:23Z",
        "updatedAt": "2017-05-25T22:18:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Naive question: why not just have compilation tasks use @(ReferencePath->'%(ReferenceAssembly)') and eliminate the separate item group?",
        "createdAt": "2017-05-26T00:45:21Z",
        "updatedAt": "2017-05-26T00:45:21Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera That's discussed in https://github.com/Microsoft/msbuild/issues/1986#issuecomment-297547460, but the short version is \"target incrementality\" + \"backward compat\". In retrospect, it could have been done that way by applying the transform everywhere (including in the inputs) and making the compat shim in Roslyn populate that metadata on the item.",
        "createdAt": "2017-06-01T21:27:42Z",
        "updatedAt": "2017-06-01T21:27:42Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}