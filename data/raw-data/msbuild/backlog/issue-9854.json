{
  "number": 9854,
  "title": "[Feature Request]: RoslynCodeTaskFactory compiling against .net 8.0",
  "body": "### Summary\n\nThere should be a way to create MSBuild inline tasks targeting the .net runtime of the host msbuild currently executing (e.g. from .net 8.0). As RoslynCodeTaskFactory targets only netstandard2.0 it is not possible to use various new functionalities like:\r\n\r\n* System.IO.Compression\r\n* System.Formats.Tar\r\n* System.Text.Json\r\n\n\n### Background and Motivation\n\nAs of today the RoslynCodeTaskFactory compiles against netstandard2.0 for to compatibility reasons. While this is good for some scenarios, it limits the use newer features for environments where its known that only the latest .net runtime is used (not NetFx MSBuild). \r\n\r\nWe write various (build) scripts in MsBuilds and have various targets and tasks. I now hit the problem that I cannot process some files due to the fact that I cannot add references to newer runtime libs. \r\n\n\n### Proposed Feature\n\nA new CodeTaskFactory with a different name (e.g. `RoslynCurrentRuntimeCodeTaskFactory`) should be added to `$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll` which will use the current .net SDK as target. e.g. a \"dotnet msbuild\" with .net 8 should target net8.0 and allow use of respective libraries and language features. \r\n\r\n\r\n\r\n\n\n### Alternative Designs\n\nI'm not deeply into the internals of the CodeTaskFactories but from what I've seen there are already some base classes to differenciate between C# and VB compilation. With some new properties to trigger the compilers differently it should be possible to produce an inline task with the same target as the current execution environment. \r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs\r\n\r\nThe alternative I need to target now is to create a mini csproj + program.cs and use \"dotnet run\" instead of an inline task from msbuild. \r\n\r\n\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2024-03-12T14:05:49Z",
  "updatedAt": "2024-10-10T15:57:28Z",
  "closedAt": null,
  "author": {
    "login": "Danielku15"
  },
  "labels": [
    "needs-design",
    "Feature Request",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: @baronfel do you think that this feature request is a high priority for us?",
        "createdAt": "2024-03-14T15:00:10Z",
        "updatedAt": "2024-03-14T15:00:10Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "This is a very reasonable request, though Tasks compiled in this way would not be able to run in Visual Studio. We need to complete the .NET Core TaskHost before we could reasonably do this request, but once that is done I see no reason why we shouldn't allow Task authors to target a specific .NET TFM as opposed to .NET Standard.",
        "createdAt": "2024-03-14T15:31:56Z",
        "updatedAt": "2024-03-14T15:31:56Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}