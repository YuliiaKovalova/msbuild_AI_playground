{
  "number": 10998,
  "title": "Weird progress indicators started appearing in stdout",
  "body": "Why have I started seeing the following character sequence (which seems to some progress indicator) whenever I pipe dotnet program output to a file now?\n\n```\\x1b]9;4;3;\\x1b\\\\\\x1b]9;4;0;\\x1b\\\\```\n\nProgram.cs:\n```\nConsole.WriteLine(\"Hello, World!\");\n```\n\ndotnet run > output.txt\n\noutput.txt:\n```\n\u001b]9;4;3;\u001b\\\u001b]9;4;0;\u001b\\Hello, World!\n```\n\n```\n\u276f dotnet --version\n9.0.100-rc.2.24474.11\n```\n```\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.22631\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.100-rc.2.24474.11\\\n```\n",
  "state": "CLOSED",
  "createdAt": "2024-11-03T17:19:24Z",
  "updatedAt": "2025-02-24T16:50:37Z",
  "closedAt": "2025-02-24T16:50:37Z",
  "author": {
    "login": "martinstenhoff"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "labels": [
    "Priority:1",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "This issue talks about some new console logger in .Net9\nhttps://github.com/dotnet/msbuild/issues/9950\n\nI still see these characters in the output file if build and run are done in separate steps:\n```\ndotnet build -c Release\ndotnet run -c Release --no-build -v q > .\\output.txt\n```\n\nAnd it happens in both Command Prompt and Powershell terminal\n\n",
        "createdAt": "2024-11-04T08:30:14Z",
        "author": {
          "login": "martinstenhoff"
        }
      },
      {
        "body": "This seems to be coming from how `dotnet run` calls MSBuild to run the ComputeRunArguments target; `output.txt` sometimes includes \"ComputeRunArguments (0,0s)\".\n\n```\n$ cat -A output.txt\n^[]9;4;3;^[\\^[[?25l^[[1F^M$\n  conc ^[[120G^[[26DComputeRunArguments (0,0s)^M$\n^[[?25h^[[2F^M$\n^[[J^[]9;4;0;^[\\Hello, World!^M$\n```\n\nBut surprisingly, [setting `MSBUILDTERMINALLOGGER=off` in the environment](https://learn.microsoft.com/dotnet/core/compatibility/sdk/9.0/terminal-logger#recommended-action) or adding `-terminalLogger:off` to the `dotnet run` command line does not remove these.\n\nActually, `dotnet run` explicitly instantiates the terminal logger instead of letting MSBuild check whether the `-terminalLogger` option was specified, whether the environment variable was set, and whether output was redirected: <https://github.com/dotnet/sdk/blob/8e29df2c37578a31d6a23317afd4ba4504463783/src/Cli/dotnet/commands/dotnet-run/RunCommand.cs#L336-L339>",
        "createdAt": "2024-11-04T09:31:43Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "The forced TerminalLogger came from <https://github.com/dotnet/sdk/pull/42240>.  I think `test/Microsoft.NET.Build.Tests/GivenThatWeWantToControlGeneratedAssemblyInfo.cs` would have detected the bug if the pull request hadn't also made it ignore the progress indicators.\n",
        "createdAt": "2024-11-04T10:04:51Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo thanks for the investigation :)\n\nSeems like this has been raised before and we'll have to live with this for some time after GA :(\nhttps://github.com/dotnet/msbuild/issues/10841\nhttps://github.com/dotnet/msbuild/issues/10579\n\n",
        "createdAt": "2024-11-04T12:22:18Z",
        "author": {
          "login": "martinstenhoff"
        }
      },
      {
        "body": "> dotnet/msbuild#10841\n\nThat is for older versions of Windows that don't recognise the control sequences.  I assume the fix would be to check the version number.  That won't help with redirection.\n\n> dotnet/msbuild#10579\n\nThe fix <https://github.com/dotnet/msbuild/pull/10678> makes MSBuild configure the Windows console to process control sequences if TerminalLogger is used directly, and restore the original modes later.  This also doesn't help with redirected output, where MSBuild should not write the control sequences at all.  Although the code checks whether output is redirected, and does not configure the console in that case, it writes the control sequences anyway.",
        "createdAt": "2024-11-04T13:47:05Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "A low-risk fix would be to make dotnet-run check whether output has been redirected, and not add the TerminalLogger in that case; instead add a console logger that is configured to output only errors and warnings, and those to stderr rather than stdout.\n\nIn the longer term, I hope dotnet-run can let MSBuild create the logger objects (based on command-line options, environment variables, and redirection), and then use the same objects across restore/build/run.",
        "createdAt": "2024-11-04T13:57:19Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@baronfel is MSBuild planning on some updates here?",
        "createdAt": "2024-11-12T21:35:29Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "This also currently breaks .NET custom providers in pulumi:\n\n`I1113 09:01:30.634581   44896 log.go:73] Got plugin response: stdout:\"\\x1b]9;4;3;\\x1b\\\\\"\nI1113 09:01:30.634581   44896 log.go:73] Waiting for plugin message\nI1113 09:01:30.636850   44896 log.go:73] Got plugin response: stdout:\"\\x1b]9;4;0;\\x1b\\\\\"\nI1113 09:01:30.636850   44896 log.go:73] Waiting for plugin message\nI1113 09:01:30.818760   44896 log.go:73] Got plugin response: stdout:\"61683\\n\"\nI1113 09:01:30.818760   44896 log.go:73] Waiting for plugin message\nI1113 09:01:30.818760   44896 deployment_executor.go:256] deploymentExecutor.Execute(...): error handling event: could not load provider for resource urn:pulumi:engineering_app_dev_1::engineering_app_azure::internalprovider:resources:appsettings::apiAppSettings: could not create provider urn:pulumi:engineering_app_dev_1::engineering_app_azure::pulumi:providers:internalprovider::default::effc6bd2-4b36-4c51-9b0d-175fc9573a81: load plugin for internalprovider provider 'urn:pulumi:engineering_app_dev_1::engineering_app_azure::pulumi:providers:internalprovider::default': internalprovider (resource) plugin [C:\\Projects\\Projekte\\Engineering\\Infrastructure\\Pulumi\\internalprovider\\pulumi-resource-internalprovider.exe] wrote a non-numeric port to stdout ('0'): strconv.Atoi: parsing \"\\x1b]9;4;3;\\x1b\\\\\\x1b]9;4;0;\\x1b\\\\61683\": invalid syntax\nI1113 09:01:30.818760   44896 eventsink.go:86] eventSink::Error(<{%reset%}>could not load provider for resource urn:pulumi:engineering_app_dev_1::engineering_app_azure::internalprovider:resources:appsettings::apiAppSettings: could not create provider urn:pulumi:engineering_app_dev_1::engineering_app_azure::pulumi:providers:internalprovider::default::effc6bd2-4b36-4c51-9b0d-175fc9573a81: load plugin for internalprovider provider 'urn:pulumi:engineering_app_dev_1::engineering_app_azure::pulumi:providers:internalprovider::default': internalprovider (resource) plugin [C:\\Projects\\Projekte\\Engineering\\Infrastructure\\Pulumi\\internalprovider\\pulumi-resource-internalprovider.exe] wrote a non-numeric port to stdout ('0'): strconv.Atoi: parsing \"\\x1b]9;4;3;\\x1b\\\\\\x1b]9;4;0;\\x1b\\\\61683\": invalid syntax<{%reset%}>)\n`\n\nWorkaround:\nPut a global.json with .NET 8 SDK specified in the directory of the custom provider\n",
        "createdAt": "2024-11-13T08:24:01Z",
        "author": {
          "login": "MD-V"
        }
      },
      {
        "body": "We have a host application, running .net programs. For easier debugging we do the following:\n- run directly the compiled .net program (when running in production)\n- use dotnet run --project (when running in \"dev mode\")\n\nAnd of course those programs are using the console to exchange data with the host.\n\nSo when upgrading to net 9, happily writing escape codes in the console without any switch to disable this new behavior, everything is broken. \ud83d\udc94 \n\n![Image](https://github.com/user-attachments/assets/90136685-e137-4753-816e-21ea6eb59d1e)\n\nWhere we can spot the effect of:\nhttps://github.com/dotnet/sdk/pull/42240/files#diff-6860155f1838e13335d417fc2fed7b13ac5ddf3b95d3548c6646618bc59e89e7R11\n\ncc @baronfel \n",
        "createdAt": "2024-11-13T16:29:10Z",
        "author": {
          "login": "sailro"
        }
      },
      {
        "body": "^cc @MichalPavlik\n\nIt's a real breaker for a lot of scenarios, unfortunately. (like azdo/github workflow output when `dotnet run` is used for steps, log files, etc.)",
        "createdAt": "2024-11-15T07:49:20Z",
        "author": {
          "login": "sailro"
        }
      },
      {
        "body": "> This also currently breaks .NET custom providers in pulumi:\n\nIndeed, we just ran into this when trying to add tests for .NET 9.0 in Pulumi's CI. As a workaround we'll strip the control characters https://github.com/pulumi/pulumi/pull/17783\n\nI'd love to see an upstream fix for this in the next release.",
        "createdAt": "2024-11-15T13:04:04Z",
        "author": {
          "login": "julienp"
        }
      },
      {
        "body": "This will happen when using `dotnet run` with terminal that doesn't support ANSI escape codes. I prioritized this issue, and I will fix it soon.\nUnfortunately, there is no way how to disable TL when starting `dotnet run`, right @baronfel?",
        "createdAt": "2024-11-20T09:58:51Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@MichalPavlik:\n\n- it is impacting terminals without ANSI escape code support indeed but also all redirected streams (like redirecting stdout to a file). Or even applications using console to exchange data. It's really a breaking issue right now. A lot of testing scenarios / debugging phases are using `dotnet run` instead of a compiled assembly.\n\n- there is no workaround, both `--tl:off` or setting `MSBUILDTERMINALLOGGER ` to `off` are not working when using `dotnet run`\n",
        "createdAt": "2024-11-20T10:51:52Z",
        "author": {
          "login": "sailro"
        }
      },
      {
        "body": "@sailro, that's right. I'm working on a fix that additionally respects the `MSBUILDTERMINALLOGGER` variable.",
        "createdAt": "2024-11-20T14:53:42Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@MichalPavlik some context:\n\nThere are up to three builds that happen during `dotnet run` currently:\n* an implicit `msbuild /t:Restore` that is handled entirely by MSBuild\n* an implicit `msbuild` (default Target) that is handled entirely by MSBuild\n* an implicit `msbuild /t:Some_Target_Name_I_Forget` that is called by the CLI via the MSBuild API\n\nThe purpose of the third build is to be completely invisible _unless_ there are diagnostics reported from the third build. The third build's console logger setup should ideally be exactly matched to that of the first two builds, but the CLI doesn't _know_ what MSBuild's logging argument configuration is to attempt to recreate it via the API.  This is a long-running disjoint/mismatch between MSBuild and the CLI because MSBuild doesn't expose any knowledge about its argument parsing, but it's a particular pain point here for this use case.\n\nSo there are two requests here I think,:\n* make sure that there's some programmatic way to ensure that the TL doesn't emit the 'processing' control codes\n* see if there's a way to make it easier for the CLI to tell which console-based logger (Console or TL) we should use to stay in sync with the implicit restore and build that happens during `run`.\n\n",
        "createdAt": "2024-11-20T15:10:23Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "There might also be something fixable on whether those control sequences are emitted to standard output or standard error.",
        "createdAt": "2024-11-20T15:26:12Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "To me, additional confusion comes from this document: https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/sdk#terminal-logger\n\n* It contains a list of commands that use the terminal logger by default which doesn't include `dotnet run`\n* But then `dotnet run` docs show it _does_ take the --tl option and defaults to \"auto\", so the linked document should probably include `dotnet run`\n* And then `dotnet run` doesn't (fully?) respect --tl anyway.\n\nTBH I thought we'd given up spraying VT100 escape codes into output in the 1990s, I'm not sure why we have to go through this again.\n",
        "createdAt": "2024-11-21T09:53:15Z",
        "author": {
          "login": "willdean"
        }
      }
    ]
  }
}