{
  "number": 3066,
  "title": "ResolveAssemblyReference fails in invariant mode on Alpine linux with error MSB3095",
  "body": "### Steps to reproduce\r\nCreate a dockerfile with these contents:\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-runtime-deps-alpine\r\nWORKDIR /code/build\r\n\r\nRUN apk add --no-cache \\\r\n        curl \\\r\n        icu-libs \\\r\n        openssl\r\n\r\nENV DOTNET_SDK_VERSION=2.1.300-preview2-008251\r\nRUN curl -fsSL -o /tmp/dotnet.tar.gz https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-alpine.3.6-x64.tar.gz \\\r\n    && mkdir -p /usr/share/dotnet \\\r\n    && tar xzf /tmp/dotnet.tar.gz -C /usr/share/dotnet \\\r\n    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet \\\r\n    && dotnet help\r\n\r\nRUN dotnet new console --no-restore \\\r\n    && dotnet restore --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json \\\r\n    && dotnet build --no-restore\r\n```\r\nAnd execute `docker build . -t test`\r\n\r\n### Expected  behavior\r\nI should be able to build a simple console application.\r\n\r\n### Actual behavior\r\nRAR fails with \"error MSB3095: Invalid argument. SafeHandle cannot be null\".\r\n\r\n```\r\n/usr/share/dotnet/sdk/2.1.300-preview2-008251/Microsoft.Common.CurrentVersion.targets(2052,5): error MSB3095: Invalid argument. SafeHandle cannot be null. [/code/build/build.csproj]\r\n/usr/share/dotnet/sdk/2.1.300-preview2-008251/Microsoft.Common.CurrentVersion.targets(2052,5): error MSB3095: Parameter name: pHandle [/code/build/build.csproj]\r\n```\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/vs15.6/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2052\r\n\r\n### Environment data\r\n`msbuild /version` output: Microsoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\n\r\nOS info: Alpine 3.6 x64\r\ndotnet: 2.1.300-preview2-008251\r\n",
  "state": "CLOSED",
  "createdAt": "2018-03-08T16:27:34Z",
  "updatedAt": "2024-02-21T17:14:08Z",
  "closedAt": "2018-04-03T19:19:40Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "bug",
    "Area: Tasks",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.7"
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to https://github.com/dotnet/cli/issues/8290\r\n\r\nbtw, in interactive mode, this works for me\r\n```cmd\r\ndocker run -it microsoft/dotnet:2.1-sdk-alpine\r\n```\r\n\r\nthis is dotnet runtime with SDK. After hitting enter, when you get into the container:\r\n\r\n```ash\r\ndotnet new console -n test\r\ncd test\r\ndotnet run\r\n\r\n# 'Hello World!' is printed\r\n```\r\n\r\ncc @MichaelSimons ",
        "createdAt": "2018-03-09T21:49:05Z",
        "updatedAt": "2018-03-09T21:49:05Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 - the difference between your scenario and Nate's is a difference in the globalization invariant mode.  The runtime images run with the globalization invariant mode enabled while the sdk image doesn't.",
        "createdAt": "2018-03-09T21:56:59Z",
        "updatedAt": "2018-03-09T21:56:59Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "Cool, so currently the workaround is to add:\r\n\r\n```Dockerfile\r\nENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT false\r\nENV LC_ALL en_US.UTF-8\r\nENV LANG en_US.UTF-8\r\n```\r\n\r\nin Dockerfile and\r\n\r\n```sh\r\nexport DOTNET_SYSTEM_GLOBALIZATION_INVARIANT false\r\nexport LC_ALL en_US.UTF-8\r\nexport LANG en_US.UTF-8\r\n```\r\n\r\nif you are using interactive shell.",
        "createdAt": "2018-03-11T10:19:40Z",
        "updatedAt": "2018-03-11T10:20:22Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3  - you would also need to add `icu-libs`",
        "createdAt": "2018-03-12T13:33:44Z",
        "updatedAt": "2018-03-12T13:33:44Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "Yes `icu-libs` are required even if we use alpine 3.6 tarball on a regular/official alpine docker (non `microsoft/dotnet` one):  https://github.com/dotnet/cli/issues/8767 (I used `icu` but only `icu-libs` is required which is a dependency of `icu`).",
        "createdAt": "2018-03-13T12:32:35Z",
        "updatedAt": "2018-03-13T12:32:35Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I avoided the catch clause that sucked all the information away and got\r\n\r\n```\r\nInvalid argument. System.ArgumentNullException: SafeHandle cannot be null. [/code/build/build.csproj]\r\nParameter name: pHandle [/code/build/build.csproj]\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success) [/code/build/build.csproj]\r\n   at Interop.Globalization.GetSortKey(SafeSortHandle sortHandle, String str, Int32 strLength, Byte* sortKey, Int32 sortKeyLength, CompareOptions options) [/code/build/build.csproj]\r\n   at System.Globalization.CompareInfo.GetHashCodeOfStringCore(String source, CompareOptions options) [/code/build/build.csproj]\r\n   at System.Collections.Hashtable.GetHash(Object key) [/code/build/build.csproj]\r\n   at System.Collections.Hashtable.InitHash(Object key, Int32 hashsize, UInt32& seed, UInt32& incr) [/code/build/build.csproj]\r\n   at System.Collections.Hashtable.ContainsKey(Object key) [/code/build/build.csproj]\r\n   at Microsoft.Build.Tasks.ReferenceTable.BuildSimpleNameTable() [/code/build/build.csproj]\r\n   at Microsoft.Build.Tasks.ReferenceTable.ResolveConflictsBetweenReferences() [/code/build/build.csproj]\r\n   at Microsoft.Build.Tasks.ReferenceTable.ResolveConflicts(DependentAssembly[]& idealRemappings, AssemblyNameReference[]& conflictingReferences) [/code/build/build.csproj]\r\n   at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(FileExists fileExists, DirectoryExists directoryExists, GetDirectories getDirectories, GetAssemblyName getAssemblyName, GetAssemblyMetadata getAssemblyMetadata, GetLastWriteTime getLastWriteTime, GetAssemblyRuntimeVersion getRuntimeVersion, GetAssemblyPathInGac getAssemblyPathInGac, IsWinMDFile isWinMDFile, ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader) [/code/build/build.csproj]\r\n```\r\n\r\nSo it's a non-generic Hashtable that's throwing.",
        "createdAt": "2018-03-13T20:20:33Z",
        "updatedAt": "2018-03-13T20:20:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Changing it to a generic Dictionary doesn't help, though. Same stack in CompareInfo.",
        "createdAt": "2018-03-13T20:33:58Z",
        "updatedAt": "2018-03-13T20:33:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok, so the `microsoft/dotnet:2.1-runtime-deps-alpine` image comes with \r\n\r\n```\r\nexport DOTNET_SYSTEM_GLOBALIZATION_INVARIANT='true'\r\n```\r\n\r\nWhich opts every running application into the [globalization invariant mode](https://github.com/dotnet/corefx/blob/ca9de5b0a5646479c729a8860c54215dbdb5cefa/Documentation/architecture/globalization-invariant-mode.md).\r\n\r\nThose docs say\r\n\r\n> The drawback of running in the invariant mode is applications will get poor globalization support. This new option is only recommended for developers that understand globalization and the impact of its absence.\r\n\r\n> When enabling the invariant mode, all cultures behave like the invariant culture.\r\n\r\nSo it seems odd that opting into a `CurrentCultureIgnoreCase` comparer would cause a problem.\r\n\r\nI think this is a corefx bug so I filed https://github.com/dotnet/corefx/issues/28021 with a small repro.",
        "createdAt": "2018-03-13T21:28:30Z",
        "updatedAt": "2018-03-13T21:28:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The bug in corefx aside, I am not sure why we need to set invariant globalization in Alpine Linux docker, since ICU package is available in their packages for ages and dotnet console/mvc apps just work fine with full globalization support.",
        "createdAt": "2018-03-13T22:15:57Z",
        "updatedAt": "2018-03-13T22:15:57Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 you don't have to set invariant mode in Alpine. That just happens to be the default chosen by https://github.com/dotnet/dotnet-docker. Presumably, this bug would happen in any Linux distro with invariant mode enabled.\r\n",
        "createdAt": "2018-03-13T22:26:10Z",
        "updatedAt": "2018-03-13T22:26:10Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "In https://github.com/dotnet/corefx/issues/28021 @rainersigwald has shown that with invariant set in Ubuntu, it works fine. On Alpine, invariant globalization seems to have some issue. Both Ubuntu and Alpine are tested with 2.1 package.",
        "createdAt": "2018-03-13T22:29:02Z",
        "updatedAt": "2018-03-13T22:29:02Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 The reason invariant mode is the default in the dotnet/dotnet-docker Alpine images is to keep the size of the runtime image to a minimal.  See https://github.com/dotnet/dotnet-docker-nightly/issues/500 for more details.",
        "createdAt": "2018-03-13T22:31:48Z",
        "updatedAt": "2018-03-13T22:32:01Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "I take it back @natemcmaster, it is reproducible on Debian as well as Alpine: https://github.com/dotnet/corefx/issues/28021#issuecomment-372843375",
        "createdAt": "2018-03-13T22:42:22Z",
        "updatedAt": "2018-03-13T22:42:22Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Yeah, sorry that was confusing: I used Ubuntu + runtime 2.0 and Alpine + runtime 2.1 for my examples.",
        "createdAt": "2018-03-13T22:42:41Z",
        "updatedAt": "2018-03-13T22:42:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just checked with `2.1.300-preview2-008510` and everything worked, so the CoreFX fix looks sufficient.",
        "createdAt": "2018-04-03T19:19:40Z",
        "updatedAt": "2018-04-03T19:19:40Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}