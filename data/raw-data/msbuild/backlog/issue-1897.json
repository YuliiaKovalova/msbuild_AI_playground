{
  "number": 1897,
  "title": "Allow inner builds to tell if they are being built from a cross-targeting build",
  "body": "Currently, it's possible for MSBuild props/targets (provided by nugets or otherwise) to know if a cross-targeting build is taking place by checking for the `IsCrossTargetingBuild=true` property, which trigges the outer/inner build behavior.\r\n\r\nThe inner built projects, however, have no way of knowing if they are being built as part of the outer/inner dispatching, or straight as a single `TargetFramework` chosen by the user from one of the `TargetFrameworks` configured for the project. This is relevant as soon as the [Target Framework selector](https://github.com/dotnet/roslyn-project-system/issues/1674) ships, apparently by 15.3 according to that issue's Milestone.\r\n\r\nWhat would be needed for a project to determine if its being \"single targeted\" or \"cross-targeted\" for build is a different `IsCrossTargeted=true` property passed down when the `DispatchToInnerBuilds` is dispatching the inner builds, likely as part of the [AdditionalProperties](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CrossTargeting.targets#L27).\r\n\r\nOne concrete use case I'm needing this for:\r\nThe VSSDK BuildTools nuget package provides targets and tasks for building VSIXes. But only one version of its tasks can ever be loaded as part of a build. Therefore, I want to guarantee that if `IsCrossTargeted=true`, I always build with the latest VSSDK. But if I'm not being cross-targeted, I want to build instead with the VSSDK (conditional PackageReference) I choose (i.e. if TF=net461, target VSSDK 14.x == VS2015 instead of latest/VS0217).\r\n\r\nThis would allow me to use the cross-targeting functionality in VS2017.3 to easily author a VSIX project and target from within the IDE all supported versions (i.e. by saying TF=net46 == VS2013, TF=net461 == VS2015 and TF=net462 == VS2017), which would in that case (non cross-targeted build, since TF will have a value, via the linked issue/feature and persisted in the .user) also deploy to the right VS Experimental, since the VSSDK targets for the matching VS version know how to do that.\r\n\r\nIn turn, when I build the VSIX from CI, the cross-targeting build will take place, which will pass down to the inner build that it's being cross-targeted and the effect will be in this case that the latest & greatest VSSDK build tools is always chosen, regardless of the TF, since we're in Highlander mode in that case.\r\n\r\n\r\nHopefully this makes sense :). Oh, and it would be a *blast* if this hits simultaneously with the framework selector!\r\n\r\nMy test project (after adding the `IsCrossTargetedBuild` additional property for inner build dispatch manually to my common targets:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\" InitialTargets=\"Test\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFrameworks>net462;net461</TargetFrameworks>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Dev)' != ''\">\r\n\t\t<TargetFramework Condition=\"'$(Dev)' == '14'\">net461</TargetFramework>\r\n\t\t<TargetFramework Condition=\"'$(Dev)' == '15'\">net462</TargetFramework>\r\n\t</PropertyGroup>\r\n\t<PropertyGroup Condition=\"'$(Dev)' == ''\">\r\n\t\t<Dev Condition=\"'$(TargetFramework)' == 'net461'\">14</Dev>\r\n\t\t<Dev Condition=\"'$(TargetFramework)' == 'net462'\">15</Dev>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup>\r\n\t\t<BuildToolsVersion Condition=\"'$(IsCrossTargetedBuild)' == 'true'\">15</BuildToolsVersion>\r\n\t\t<BuildToolsVersion Condition=\"'$(IsCrossTargetedBuild)' != 'true'\">$(Dev)</BuildToolsVersion>\r\n\t</PropertyGroup>\r\n\t\r\n\t<Target Name=\"Test\">\r\n\t\t<Message Importance=\"high\" Text=\"\r\nIsCrossTargetingBuild=$(IsCrossTargetingBuild)\r\nIsCrossTargetedBuild=$(IsCrossTargetedBuild)\r\nDev=$(Dev)\r\nBuildToolsVersion=$(BuildToolsVersion)\r\nTargetFramework=$(TargetFramework)\" />\r\n\t</Target>\r\n</Project>\r\n```\r\nWhen running `msbuild`:\r\n```\r\n>msbuild /nologo\r\n\r\n  IsCrossTargetingBuild=true\r\n  IsCrossTargetedBuild=\r\n  Dev=\r\n  BuildToolsVersion=\r\n  TargetFramework=\r\n\r\n  IsCrossTargetingBuild=\r\n  IsCrossTargetedBuild=true\r\n  Dev=15\r\n  BuildToolsVersion=15\r\n  TargetFramework=net462\r\n  MultiVsix -> C:\\Code\\Personal\\MultiVsix\\Test\\bin\\Debug\\net462\\MultiVsix.dll\r\n\r\n  IsCrossTargetingBuild=\r\n  IsCrossTargetedBuild=true\r\n  Dev=14\r\n  BuildToolsVersion=15\r\n  TargetFramework=net461\r\n  MultiVsix -> C:\\Code\\Personal\\MultiVsix\\Test\\bin\\Debug\\net461\\MultiVsix.dll\r\n```\r\nSince this is Highlander mode, BuildToolsVersion is 15 in both inner builds.\r\n\r\nWhen running `msbuild /t:TargetFramework=net461` or `msbuild /t:Dev=14`:\r\n```\r\n IsCrossTargetingBuild=\r\n  IsCrossTargetedBuild=\r\n  Dev=14\r\n  BuildToolsVersion=14\r\n  TargetFramework=net461\r\n  MultiVsix -> C:\\Code\\Personal\\MultiVsix\\Test\\bin\\Debug\\net461\\MultiVsix.dll\r\n```\r\n\r\nSince we know we can have the specific VSSDK build tools loaded, it now matches the target Dev/TF.",
  "state": "CLOSED",
  "createdAt": "2017-03-22T03:24:46Z",
  "updatedAt": "2024-02-21T17:20:27Z",
  "closedAt": "2017-03-22T16:52:57Z",
  "author": {
    "login": "kzu"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "After discussing this with @rainersigwald on Slack, I think there are alternative ways I can use that wouldn't risk introducing a race condition in sln builds. I could set a global property in a cross-targeting-only imported .props and then check for that in the inner builds, or run after `_ComputeTargetFrameworkItems` target and augment the `_InnerBuildProjects`.\r\n\r\nEither way, the fact that my scenario involves a top-level project (the \"app\" or VS extension in my case), which would never be referenced by other projects, therefore mitigating the risk of a race condition, means I can probably work around this without changes to MSBuild.\r\n\r\nThanks!",
        "createdAt": "2017-03-22T16:52:57Z",
        "updatedAt": "2017-03-22T16:52:57Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "I still think that there should be a way to determine if a project is built as an inner build.\r\nSuppose you want to ship an extension NuGet to with a build task as `AfterTargets=\"Build\"` that has to run:\r\n* after all inner builds have been completed when multitargeting\r\n* after the build has been completed when not multitargeting\r\n\r\nWhile adding cross targeting props to the NuGet is certainly an option, i do believe there should be an easier way to do this with one `Condition` attribute.",
        "createdAt": "2017-04-03T08:14:36Z",
        "updatedAt": "2017-04-03T08:14:36Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Here's the mechanism in 15.3 to detect if inner builds are being cross-targeted. Just place the following in your project (or an imported target)\r\n\r\n```\r\n\t<ItemDefinitionGroup>\r\n\t\t<_InnerBuildProjects>\r\n\t\t\t<Properties>IsCrossTargetedBuild=$(IsCrossTargetingBuild)</Properties>\r\n\t\t</_InnerBuildProjects>\r\n\t</ItemDefinitionGroup>\r\n```\r\n\r\nNow you can use `$(IsCrossTargetedBuild)='true'` to detect a cross-targeting build",
        "createdAt": "2017-05-12T14:40:02Z",
        "updatedAt": "2017-05-12T14:40:02Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "@kzu that will create races between inner builds invoked via solution->outer build->inner build and those invoked via solution->other project->inner build. I don't recommend it.",
        "createdAt": "2017-05-12T14:42:21Z",
        "updatedAt": "2017-05-12T14:42:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Keep in mind that this is only used (in my case at least) on the top-level entry point project (in my case, the VSIX project). Nothing references this project.",
        "createdAt": "2017-05-12T14:49:02Z",
        "updatedAt": "2017-05-12T14:49:02Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "As long as nothing has a `ProjectReference` to the given project, this should be fine.",
        "createdAt": "2017-05-12T14:54:43Z",
        "updatedAt": "2017-05-12T14:54:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I need something like this but for projects referenced to the given project (as I got a package with a build task that should only execute once for every project that references) no mater if they target multiple TFM's or not.\r\n\r\nI tried everything to have it disable the version of the same target (which executes the task that is based off of ``BeforeBuild`` being completed first) as the one that gets based off of ``DispatchToInnerBuilds`` before it is completed). In that case somehow both of them get executed even if I do not explicitly import the ``build\\<package name>.props`` file inside of the ``buildMultiTargeting\\<package name>.props`` file making this a major pain.\r\n\r\nAs such I think there really should be a change on either: the msbuild side of things, or the .NET SDK side of things.\r\n\r\nAlternatively I guess there probably is an .NET SDK way to fix this however (maybe by having it check ``TargetFrameworks`` to see if it is set to some value and if it contains any ``;``'s inside (but makes sure it does not end with ``;``).\r\n\r\nSo possibly something like this basically:\r\n- ``<IsCrossTargeted Condition=\"'$(TargetFrameworks)' != '' AND $(TargetFrameworks.Contains(';'))' AND !$(TargetFrameworks.EndsWith(';'))\">true</IsCrossTargeted>``\r\n\r\nEdit: Verified that ``IsCrossTargeted`` actully works like above when placed in ``build\\<package name>.props`` on a package side of things to trap tasks that should only execute one time even if they are referenced in other projects.\r\n\r\nSee <https://github.com/Elskom/GitBuildInfo.SourceGenerator/pull/46/files> for more details on what all I did to test this out.",
        "createdAt": "2021-06-27T06:54:04Z",
        "updatedAt": "2021-06-27T11:52:11Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "I ended up going with a slight alteration to the solution provided by @AraHaan \r\nA cross targeted project can end with a `;` (e.g. `<TargetFrameworks>net5.0;net472;</TargetFrameworks>`) and will still build.\r\nTo account for this I ended up going with this approach:\r\n\r\n```\r\n<IsMultiTargeted Condition=\"'$(TargetFrameworks)' != '' AND $(TargetFrameworks.IndexOf(';')) &gt; -1 AND $(TargetFrameworks.IndexOf(';')) != $([MSBuild]::Add($(TargetFrameworks.Length), 1))\">true</IsMultiTargeted>\r\n```\r\n",
        "createdAt": "2021-10-10T01:35:19Z",
        "updatedAt": "2021-10-10T01:54:08Z",
        "author": {
          "login": "RyanThomas73"
        }
      }
    ]
  }
}