{
  "number": 11374,
  "title": "Investigate possible build perf improvements in Copy task",
  "body": "### Context\n\nReported by @davkean:\n\n> In 40% of builds, I see something that Eric was looking at; [synchronous calls to Copy taking out thread pool threads](https://prism.vsdata.io/failure/?query=tags%3Dttperfscenarios_solutionbuild%20bc!%3Dgc%20bc!%3Dhardfault%20threadtype%3D.NETThreadPool&eventType=blockedtime&failureType=dualdirection&failureHash=3cf89148-5518-7128-36c4-d660b78553b0). The CLR will take 500ms before it adds another thread to replace each one of these (so 5 seconds to replace 10 threads), so this is likely causing thread pool starvation and a non-optimal use of CPU usage while that occurs.\n\nDue to the 'multi-process' nature of msbuild the threatpool starvation might not be such a big concern yet, but blocking the ability to run other waiting build work is of a big concern.\n\nAdditionaly there might be additional task in a same bucket - e.g. [`CopyRefAssembly`](https://github.com/dotnet/roslyn/blob/main/src/Compilers/Core/MSBuildTask/CopyRefAssembly.cs) from roslyn\n\n### Suggested approach\n\n- Attempt to perform couple experiments with implanting `TaskHost.Yield` into the Copy task (similarly to what Zip/Unzip does today) and evaluate the impact on the build\n- Attempt to see if we can improve the current paralelized copy algorithm (possbily in connection with above)\n\n### Goal\n\n`Copy` is notoriously among the top time consumers within the builds\n\n<img width=\"167\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b90197fa-8ee9-472a-b14e-0fe3706181d0\" />\n\nbeing able to use the consummed time for additional build tasks might help improve the CPU utilization and throughput of the build",
  "state": "OPEN",
  "createdAt": "2025-02-03T11:19:49Z",
  "updatedAt": "2025-04-09T14:03:27Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Intermediate results: \nI have tried to use the TaskHost.Yield. Note, that I alos needed to cast the relative paths to full paths in the copy task, otherwise the task would be not correct with yielding.\nIt seemed to make the perf numbers worse:\n\nExecutableType | RepoName | Scenario | Mean | Variance | Min | Max | EntriesNum\n-- | -- | -- | -- | -- | -- | -- | --\nmsbuildBaseline | console | inc-cold | 1769.146475 | 236.92705405928658 | 1754.182 | 1804.625 | 8\nmsbuildCompare | console | inc-cold | 2201.0507875000003 | 704154.7671284272 | 1735.255 | 4223.833 | 8\nmsbuildBaseline | console | inc-warm-2 | 1759.535913 | 83.94353865553565 | 1749.603 | 1773.42 | 8\nmsbuildCompare | console | inc-warm-2 | 2112.605788 | 186812.6687147327 | 1731.588 | 2889.776 | 8\nmsbuildBaseline | console | inc-warm-3 | 1780.352025 | 2793.367430330717 | 1740.499 | 1906.336 | 8\nmsbuildCompare | console | inc-warm-3 | 2036.194288 | 152987.75191757272 | 1723.202 | 2665.284 | 8\nmsbuildBaseline | console | re-cold | 6931.725238 | 2289.215936676945 | 6841.956 | 6985.078 | 8\nmsbuildCompare | console | re-cold | 7336.640338 | 1126301.0954113198 | 6818.043 | 9944.939 | 8\nmsbuildBaseline | console | re-warm-2 | 2099.4883250000003 | 3528.9605305792907 | 2030.63 | 2172.162 | 8\nmsbuildCompare | console | re-warm-2 | 2221.353825 | 238650.38478132503 | 1998.48 | 3416.774 | 8\nmsbuildBaseline | console | re-warm-3 | 2076.612413 | 2236.9648422298224 | 2006.563 | 2124.835 | 8\nmsbuildCompare | console | re-warm-3 | 2090.110563 | 46662.798492159855 | 1974.192 | 2609.084 | 8\nmsbuildBaseline | OC | inc-cold | 46926.74009 | 3667831.4887661226 | 44753.16 | 50388.32 | 8\nmsbuildCompare | OC | inc-cold | 58083.64743 | 11431588.924400678 | 53715.35 | 63986.05 | 8\nmsbuildBaseline | OC | inc-warm-2 | 44506.94603 | 21517971.876598634 | 40954.43 | 53774.5 | 8\nmsbuildCompare | OC | inc-warm-2 | 50251.49371 | 23730354.22078715 | 44811.54 | 60152.79 | 8\nmsbuildBaseline | OC | inc-warm-3 | 43411.29678 | 14491067.277069546 | 37683.86 | 50909.84 | 8\nmsbuildCompare | OC | inc-warm-3 | 48565.91195 | 11629769.721322827 | 43783.27 | 54055.66 | 8\nmsbuildBaseline | OC | re-cold | 155386.3945 | 91288385.06685321 | 140695.1 | 173039.5 | 8\nmsbuildCompare | OC | re-cold | 154119.0037 | 238060148.54930025 | 135042.3 | 179018.8 | 8\nmsbuildBaseline | OC | re-warm-2 | 149455.7298 | 98436786.00064546 | 139596 | 170565 | 8\nmsbuildCompare | OC | re-warm-2 | 147252.7181 | 40709282.267519765 | 138005 | 154968 | 8\nmsbuildBaseline | OC | re-warm-3 | 137027.6521 | 34227431.24941828 | 126588.9 | 146060.8 | 8\nmsbuildCompare | OC | re-warm-3 | 136856.8326 | 29005109.621725596 | 127413.2 | 141557.3 | 8\n\nNext steps: I shall try to use yielding with #11272 - it may lead to better results.",
        "createdAt": "2025-03-10T09:43:20Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Tried to use yielding with the dedicated threads for copy task, but it also does not show a perf gain. ",
        "createdAt": "2025-04-09T13:56:53Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}