{
  "number": 9841,
  "title": "[Bug] vcxproj ProjectReference from csproj triggers a build of the vcxproj but does not copy the target when modified",
  "body": "### Issue Description\n\nWhe csproj references a vcxproj updated to copy the native dll to the .net folder, the initial build will copy the dll but any subsequent build triggered from the C# project following  a modification to of the C++ will not copy the output.\r\n\r\nNote that the option that building the solution is not acceptable, we have this type of issue into a large solution when a unit tests refrecnes a native DLL and the developer usually build the unit test project only.\n\n### Steps to Reproduce\n\n- Clone the repository: https://github.com/fforjan/CSProjectAndVcxprojReferences\r\n- Open in visual studio\r\n- Build the ConsoleApp project\r\n\r\n**Notice that the NativeDll.dll is copied into the output folder, both for net472 and net80**\r\n\r\n\r\n- Modify a cpp file into the NativeDLL project\r\n- Build again the ConsoleApp project.\r\n\r\n\n\n### Expected Behavior\n\nAs one the initial build, if any projectreference is updated, the dll must be copied over ?\n\n### Actual Behavior\n\nNotice the the NativeDLL.dll is NOT updated into the output folder while the NativeDLL compilation was triggered.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nReproduced with _Microsoft Visual Studio Enterprise 2022 (64-bit) - Version 17.9.2_\r\n",
  "state": "CLOSED",
  "createdAt": "2024-03-07T19:38:46Z",
  "updatedAt": "2024-12-16T10:07:19Z",
  "closedAt": "2024-12-16T10:07:17Z",
  "author": {
    "login": "fforjan"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I can reproduce a different behavior with MSBuild in command line.\r\nThe NativeDll will never appear when using the command line, and if the NativeDLL was already present :\r\n\r\n```\r\nCSProjectAndVcxprojReferences\\ConsoleApp>msbuild\r\nMSBuild version 17.9.5+33de0b227 for .NET Framework\r\nBuild started 3/7/2024 2:30:23 PM.\r\n\r\nProject \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" on node 1 (default targets).\r\nProject \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" (1) is building \"C:\\git\\CSProjectAndVcxproj\r\nReferences\\ConsoleApp\\ConsoleApp.csproj\" (1:2) on node 1 (Build target(s)).\r\nProject \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" (1:2) is building \"C:\\git\\CSProjectAndVcxpr\r\nojReferences\\NativeDll\\NativeDll.vcxproj\" (2) on node 1 (default targets).\r\nPrepareForBuild:\r\n  Structured output is enabled. The formatting of compiler diagnostics will reflect the error hierarchy. See https://ak\r\n  a.ms/cpp/structured-output for more details.\r\nInitializeBuildStatus:\r\n  Creating \"NativeDll\\Debug\\NativeDll.tlog\\unsuccessfulbuild\" because \"AlwaysCreate\" was specified.\r\n  Touching \"NativeDll\\Debug\\NativeDll.tlog\\unsuccessfulbuild\".\r\nClCompile:\r\n  All outputs are up-to-date.\r\n  All outputs are up-to-date.\r\nLink:\r\n  All outputs are up-to-date.\r\n  NativeDll.vcxproj -> C:\\git\\CSProjectAndVcxprojReferences\\NativeDll\\Debug\\NativeDll.dll\r\nFinalizeBuildStatus:\r\n  Deleting file \"NativeDll\\Debug\\NativeDll.tlog\\unsuccessfulbuild\".\r\n  Touching \"NativeDll\\Debug\\NativeDll.tlog\\NativeDll.lastbuildstate\".\r\nDone Building Project \"C:\\git\\CSProjectAndVcxprojReferences\\NativeDll\\NativeDll.vcxproj\" (default targets).\r\n\r\nGenerateTargetFrameworkMonikerAttribute:\r\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\r\nnput files.\r\nCoreGenerateAssemblyInfo:\r\nSkipping target \"CoreGenerateAssemblyInfo\" because all output files are up-to-date with respect to the input files.\r\n_GenerateSourceLinkFile:\r\n  Source Link file 'obj\\Debug\\net8.0\\ConsoleApp.sourcelink.json' is up-to-date.\r\nCoreCompile:\r\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\r\n_CreateAppHost:\r\nSkipping target \"_CreateAppHost\" because all output files are up-to-date with respect to the input files.\r\n_CopyOutOfDateSourceItemsToOutputDirectory:\r\nSkipping target \"_CopyOutOfDateSourceItemsToOutputDirectory\" because all output files are up-to-date with respect to th\r\ne input files.\r\nCopyFilesToOutputDirectory:\r\n  ConsoleApp -> C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\bin\\Debug\\net8.0\\ConsoleApp.dll\r\nIncrementalClean:\r\n  Deleting file \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\bin\\Debug\\net8.0\\NativeDll.dll\".\r\nDone Building Project \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" (Build target(s)).\r\n\r\nProject \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" (1) is building \"C:\\git\\CSProjectAndVcxproj\r\nReferences\\ConsoleApp\\ConsoleApp.csproj\" (1:3) on node 1 (Build target(s)).\r\n_WriteAppConfigWithSupportedRuntime:\r\nSkipping target \"_WriteAppConfigWithSupportedRuntime\" because all output files are up-to-date with respect to the input\r\n files.\r\nGenerateTargetFrameworkMonikerAttribute:\r\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\r\nnput files.\r\nCoreGenerateAssemblyInfo:\r\nSkipping target \"CoreGenerateAssemblyInfo\" because all output files are up-to-date with respect to the input files.\r\n_GenerateSourceLinkFile:\r\n  Source Link file 'obj\\Debug\\net472\\ConsoleApp.sourcelink.json' is up-to-date.\r\nCoreCompile:\r\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\r\n_CopyAppConfigFile:\r\nSkipping target \"_CopyAppConfigFile\" because all output files are up-to-date with respect to the input files.\r\nCopyFilesToOutputDirectory:\r\n  ConsoleApp -> C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\bin\\Debug\\net472\\ConsoleApp.exe\r\nIncrementalClean:\r\n  Deleting file \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\bin\\Debug\\net472\\NativeDll.dll\".\r\nDone Building Project \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" (Build target(s)).\r\n\r\nDone Building Project \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\ConsoleApp.csproj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\nNotice there is an 'incrementral clean' but it doesnt copy the native dll after ?\r\nIncrementalClean:\r\n  Deleting file \"C:\\git\\CSProjectAndVcxprojReferences\\ConsoleApp\\bin\\Debug\\net472\\NativeDll.dll\".",
        "createdAt": "2024-03-07T22:31:29Z",
        "updatedAt": "2024-03-07T22:32:29Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "@GangWang01 Could you repro this issue? We suspect it might be an up-to-date check problem.",
        "createdAt": "2024-03-12T14:53:39Z",
        "updatedAt": "2024-03-12T14:53:39Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "It's easy to reproduce with the provided solution https://github.com/fforjan/CSProjectAndVcxprojReferences. As the issue mentioned, I reproduced and attached binlogs [binlogs.zip](https://github.com/dotnet/msbuild/files/14664682/binlogs.zip).\r\n1. Clone the repo and open the solution using VS 17.9.2.\r\n2. Build C# project ConsoleApp. Binlog is FirstBuildWithVS.binlog.\r\n3. Make code change to C++ file in C++ project project NativeDLL.\r\n4. Build C# project ConsoleApp. Binlog is IncrementalBuildWithVS.binlog. Note that only C++ project was built, but C# project wasn't built at all. NativeDLL.dll in bin directory of C# project wasn't the latest one.\r\n5. Repeat step 3.\r\n6. Use msbuild.exe from Developer Command Prompt to build. Binlog is IncrementalBuildWithMSbuild.binlog. Note that another issue appeared. NativeDll.dll in bin directory of C# project was deleted.\r\n\r\n\r\n",
        "createdAt": "2024-03-20T10:26:57Z",
        "updatedAt": "2024-03-20T10:26:57Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "The only difference I saw between the two binlog is that NativeDLL is populated from \"GetTargetPath\" target during P2P.  While \r\n\"Build\" did not.\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/19828377/414ed512-566b-4226-9d45-909946f217a4)\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/19828377/ebc948e6-4c22-4b67-b890-1ea144f7eab8)\r\n",
        "createdAt": "2024-03-22T07:03:16Z",
        "updatedAt": "2024-03-22T07:03:16Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Is the NativeDLL a CLI project?  If it is not, it should not be returning from GetTargetPath.  ",
        "createdAt": "2024-03-22T07:11:56Z",
        "updatedAt": "2024-03-22T07:11:56Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010  no it is a C++ library project - not sure what you mean by CLI ? - and follows https://stackoverflow.com/a/42507529 to allow copying its output to the C# project. ",
        "createdAt": "2024-03-25T21:33:50Z",
        "updatedAt": "2024-03-25T21:33:50Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "I am leaning toward NativeDll getting copied in VS as a bug.  A C# project wouldn't know what to do with a C++ output.\r\n\r\nI think the csproj has another mechanism of fetching it via the Traversal copy that has to be opt-in.  It should fetching the BuildOutputGroup target.  \r\n",
        "createdAt": "2024-03-25T23:32:51Z",
        "updatedAt": "2024-03-25T23:32:51Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "The stack overflow link as an interesting description about why it should work.\n\nBut if you have a different settings I'm happy to try.",
        "createdAt": "2024-03-26T01:14:19Z",
        "updatedAt": "2024-03-26T01:14:19Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "@rainersigwald can you help to take a look? Note that there are different problems when building with VS and msbuild.exe.",
        "createdAt": "2024-03-27T10:13:03Z",
        "updatedAt": "2024-03-27T10:13:03Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "@GangWang01  let me know if you have any update ",
        "createdAt": "2024-04-11T20:08:06Z",
        "updatedAt": "2024-04-11T20:08:06Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "@surayya-MS  any update on your side ?",
        "createdAt": "2024-04-30T17:18:15Z",
        "updatedAt": "2024-04-30T17:18:15Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "@surayya-MS  ping !",
        "createdAt": "2024-05-13T14:09:03Z",
        "updatedAt": "2024-05-13T14:09:03Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "Thanks for filing this bug @fforjan!\r\nCurrently, our team is focusing on higher-priority items, we will get to this one later.",
        "createdAt": "2024-05-13T14:24:55Z",
        "updatedAt": "2024-05-13T14:24:55Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "I believe the issue is that the .vcxproj \"Build\" target does not return the primary build output, but the \"GetTargetPath\" target _does_.\r\n\r\n```\r\n  <Target Name=\"GetTargetPath\" DependsOnTargets=\"$(GetTargetPathDependsOn)\" Returns=\"@(TargetPathWithTargetPlatformMoniker)\" />\r\n  <Target Name=\"Build\" Condition=\" '$(_InvalidConfigurationWarning)' != 'true' \" DependsOnTargets=\"$(BuildDependsOn)\" Returns=\"@(ManagedTargetPath);@(WinMDFullPath)\">\r\n```",
        "createdAt": "2024-07-24T19:10:04Z",
        "updatedAt": "2024-07-24T19:10:04Z",
        "author": {
          "login": "JoshuaRoweMsft"
        }
      },
      {
        "body": "I'm able to work around this with the following ProjectReference:\r\n\r\n```\r\n    <ProjectReference Include=\"Foo.vcxproj\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      \r\n      <OutputItemType>Content</OutputItemType>\r\n      \r\n      <!-- Native projects do not include the primary build output \r\n      as a Returns item for the \"Build\" target, so we request the GetTargetPath target\r\n      to get the primary output. -->\r\n      <Targets>Build;GetTargetPath</Targets>\r\n      <Targets Condition=\"'$(BuildProjectReferences)' == 'false'\">GetTargetPath</Targets>\r\n      \r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </ProjectReference>\r\n```\r\n",
        "createdAt": "2024-07-24T19:11:52Z",
        "updatedAt": "2024-07-24T19:11:52Z",
        "author": {
          "login": "JoshuaRoweMsft"
        }
      },
      {
        "body": "In the past, vcxproj project don't return its native output because RAR has issues processing them.  Perhaps that has changed, in which case, add it would be an option.",
        "createdAt": "2024-07-24T20:52:33Z",
        "updatedAt": "2024-07-24T20:52:33Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> In the past, vcxproj project don't return its native output because RAR has issues processing them.  Perhaps that has changed, in which case, add it would be an option.\n\nIt does seem to me that Build and GetTargetPath should at least be consistent with each other, if the .csproj can call either one depending on the value of BuildProjectReferences.",
        "createdAt": "2024-07-24T21:22:10Z",
        "updatedAt": "2024-07-24T21:22:10Z",
        "author": {
          "login": "JoshuaRowePhantom"
        }
      },
      {
        "body": "@JoshuaRoweMsft would you be able to try to update my sample to confirm it is working for you ? (i may only have time only on Friday this week)\r\n",
        "createdAt": "2024-07-25T04:55:36Z",
        "updatedAt": "2024-07-25T04:55:36Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "@JoshuaRoweMsft  I tried the workaround, although it builds the project, the DLL is NOT copied to the .net project bin folder.",
        "createdAt": "2024-08-01T23:51:51Z",
        "updatedAt": "2024-08-01T23:51:51Z",
        "author": {
          "login": "fforjan"
        }
      },
      {
        "body": "I close this ticket as a dupe for that one:\nhttps://github.com/dotnet/msbuild/issues/10931",
        "createdAt": "2024-12-16T10:07:17Z",
        "updatedAt": "2024-12-16T10:07:17Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}