{
  "number": 1483,
  "title": "Custom task fails to load in Windows.",
  "body": "Commit: 39c48801426a0aa7a18dbb43a981dd6af8765881\r\nOS: Windows 10 (1607)\r\n\r\nNote: This issue does not show up in UNIX (Ubuntu, Mac OS).\r\n\r\nI created a custom task using .NET core (1.0.0-preview2-003121): `MyTask`.\r\nHere is the `project.json` for my custom task:\r\n```\r\n{\r\n\t\"name\": \"MyTasks\",\r\n\t\"version\": \"1.0.0-*\",\r\n\t\"buildOptions\": {\r\n\t\t\"debugType\": \"portable\",\r\n\t\t\"emitEntryPoint\": false\r\n\t},\r\n\t\"dependencies\": {\r\n\t\t//NOTE: Use these versions to avoid manifest mismatches.\r\n\t\t\"Microsoft.Build.Framework\": \"0.1.0-preview-00024-160610\",\r\n\t\t\"Microsoft.Build.Utilities.Core\": \"0.1.0-preview-00024-160610\",\r\n\t\t\"System.Diagnostics.Process\": \"4.1.0\"\r\n\t},\r\n\t\"frameworks\": {\r\n\t\t\"netcoreapp1.0\": {\r\n\t\t\t\"dependencies\": {\r\n\t\t\t\t\"Microsoft.NETCore.App\": {\r\n\t\t\t\t\t\"type\": \"platform\",\r\n\t\t\t\t\t\"version\": \"1.0.0\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"imports\": \"dnxcore50\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nWhen running the msbuild instance built from source against a custom project, invoking my custom task, I get this error (trimmed):\r\n```\r\nerror MSB4061: The \"MyTask\" task could not be instantiated from \"C:\\Build\\...\\MyTask.dll\". \\r [C:\\Build\\...\\Source\\Samples\\application\\application.proj]\r\nerror MSB4061: System.IO.FileNotFoundException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\\r [C:\\Build\\...\\Source\\Samples\\application\\application.proj]\r\nerror MSB4061: File name: 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKey\r\nToken=b03f5f7f11d50a3a'\\r [C:\\Build\\...\\Source\\Samples\\application\\application.proj]\r\nerror MSB4061:    at MyTask..ctor()\\r [C:\\Build\\...\\Source\\Samples\\application\\application.proj]\r\n...\r\nerror MSB4060: The \"MyTask\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name. [C:\\Build\\...\\Source\\Samples\\application\\application.proj]\r\n```\r\n\r\nThis is how I imported the task in my MSBuild .proj file:\r\n`<UsingTask TaskName=\"MyTask\" AssemblyFile=\"$(MSBuildTempTasksPath)MyTask.dll\" />`",
  "state": "CLOSED",
  "createdAt": "2016-12-15T05:17:56Z",
  "updatedAt": "2024-02-21T17:23:21Z",
  "closedAt": "2016-12-16T19:23:21Z",
  "author": {
    "login": "JunielKatarn"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I created a .NET core class library to attempt to repro this but it works fine.  \r\n\r\nhttps://github.com/jeffkl/MSBuild-NetCore/tree/master/src/MyTask\r\n\r\nCan you try changing your project.json to be more like a class library?  Target `netstandard1.3` and depend on `NETStandard.Library` 1.6.  \r\n\r\nMy example worked for me on Windows and Linux.  Let me know if you get it to work.",
        "createdAt": "2016-12-15T16:13:55Z",
        "updatedAt": "2016-12-15T16:13:55Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Hi! As far as getting around the first issue, it works fine. Thanks!\r\nI'm curious, though. Why target `netstandard1.3` but depend on `NETStandard.Library 1.6`? Are those different \".NET Standard Libraries\"?\r\n\r\nUnfortunately, now I run into a different error.\r\nMy task code uses namespace `System.Diagnostics.Process`. Using the version matrix you suggest, forces the built DLLs to use version `4.1.0`. When using an msbuild instance (from this repository), I get a 'FileNotFound' error for that assembly (sys.diag.process), version `4.0.0`.\r\nIn short, those versions force building 4.1.0, but the current MSBuild asks for 4.0.0.\r\n\r\nHere is my updated project.json:\r\n```\r\n{\r\n\t\"name\": \"MyTask\",\r\n\t\"version\": \"1.0.0-*\",\r\n\r\n\t\"dependencies\": {},\r\n\r\n\t\"frameworks\": {\r\n\t\t\"netstandard1.3\": {\r\n\t\t\t\"dependencies\": {\r\n\t\t\t\t\"NETStandard.Library\": \"1.6.0\",\r\n\t\t\t\t\"Microsoft.Build.Framework\": \"14.3.0\",\r\n\t\t\t\t\"Microsoft.Build.Utilities.Core\": \"14.3.0\",\r\n\t\t\t\t\"System.Diagnostics.Process\": \"4.1.0\",\r\n\t\t\t\t\"System.Threading.Thread\": \"4.0.0\",\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```",
        "createdAt": "2016-12-16T08:58:39Z",
        "updatedAt": "2016-12-16T13:02:18Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "> I'm curious, though. Why target netstandard1.3 but depend on NETStandard.Library 1.6? Are those different \".NET Standard Libraries\"?\r\n\r\nI know its confusing and it took me a while to understand it.  `netstandard1.3` is a set of reference libraries with a defined set of available APIs.  When you \"target\" that as a framework, you're only allowing your application to use APIs that are available for a runtime that has them.  The two main runtimes at the moment are the .NET Framework and .NET Core.  If you target `netstandard1.3`, your application can run in .NET Framework 4.6 or .NET Core 1.0.\r\n\r\nThe real confusing part is the NuGet package `NETStandard.Library 1.6`.  This NuGet package's version is completely orthogonal to the .NET you target.  If you look at the [NuGet page for the package](https://www.nuget.org/packages/NETStandard.Library) you'll see it contains reference assemblies for `netstandard1.0`, `netstandard1.1`, `netstandard1.2`, and `netstandard1.3`.  So the `framework` listed in your project.json is what tells NuGet what reference assemblies to use.  The fact that version of the package is `1.6` is extremely confusing (and I didn't do it :))\r\n\r\nYou only want to target `netcoreapp1.0` if you're making an executable and class libraries should always target a `netstandard` platform.\r\n\r\n> In short, those versions force building 4.1.0, but the current MSBuild asks for 4.0.0.\r\n\r\nSomething else is going on then because the package [Microsoft.Build.Framework](https://www.nuget.org/packages/Microsoft.Build.Framework) does not depend on `System.Diagnostics.Process` and [Microsoft.Build.Utilities.Core](https://www.nuget.org/packages/Microsoft.Build.Utilities.Core/) depends on `System.Diagnostics.Process 4.1.0`.  I updated my sample code to use the same NuGet packages as your project.json and my task ran successfully on Windows and Linux.\r\n\r\nhttps://github.com/jeffkl/MSBuild-NetCore/commit/cb93d8cdc7834468b793e78c016a4895b1229c56\r\n\r\nI doubt this is related to anything MSBuild is doing so I should probably refer you to the [.NET Standard folks](https://github.com/dotnet/standard).",
        "createdAt": "2016-12-16T15:46:03Z",
        "updatedAt": "2016-12-16T15:46:03Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "It was related to MSBuild. Turns out I was building the wrong favor (the default one, by the way).\r\nLong story short:\r\nMSBuild/UNIX always targets .NET Core (netstandard1.3, in this specific case).\r\nMSBuild/Windows targets win7-x64 by default (See cibuild.cmd). Meaning, it targets a 'Full' .NET Framework, which is available only on Windows, and does consume some specific library versions not available/compatible with .NET Core.\r\n\r\nThe solution was building MSBuild like this:\r\n`cibuild.cmd --target CoreCLR`\r\nThen, instead of using a generated MSBuild.exe, use 'corerun.exe MSBuild.dll'.\r\n\r\nI'll close this issue now, but I think this should be pointed out in the documentation. Took me quite a while to figure out.\r\n\r\nThanks for your help, @jeffkl.\r\n\r\n@cdmihai, @rainersigwald, do you think this should be pointed in the documentation? (Windows builds default to full .NET Framework by default, risking incompatibilities with .NET Core libraries).",
        "createdAt": "2016-12-16T19:23:21Z",
        "updatedAt": "2016-12-16T19:23:21Z",
        "author": {
          "login": "JunielKatarn"
        }
      }
    ]
  }
}