{
  "number": 5486,
  "title": "NET.Sdk build runs unexpectedly",
  "body": "*edit: Issue title changed to \"_NET.Sdk build runs unexpectedly_\". In short, a project file as tiny as [this](https://github.com/gojimmypi/msbuildCustomTask/tree/tinyproject/deletePersist):\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\"  InitialTargets=\"InitFPGA\">\r\n\t\r\n\t<Target Name=\"InitFPGA\">\r\n\t\t<Exec Command=\"echo wow > init.log\">\r\n\t\t</Exec>\r\n\t</Target>\r\n\r\n</Project>\r\n```\r\nSeems to run automatically not only at Visual Studio startup time, but also gets triggered when the `init.log` file is manually deleted in File Explorer. \r\n\r\nThere's no build output, and no other indication that it runs. (other than the `init.log` that keeps re-appearing)\r\n\r\nEdit 2:\r\n\r\nThe tinyproject mentioned above is not at all happy in VS2017, maxing out CPU with msbuild running continuously:\r\n\r\n![image](https://user-images.githubusercontent.com/13059545/86525391-6da37c00-be3b-11ea-97d7-bfc84d1ebf9b.png)\r\n\r\nOriginal issue text:\r\n------\r\nThis is a simplified custom msbuild project file from a larger one that targets [building an FPGA in a WSL process](https://github.com/gojimmypi/msbuildCustomTask/blob/25e2562f027465fa001263f02ea6b519b648031f/VerilogBuild/VerilogBuild.csproj#L292). I'm using the newer SDK project files after being unable to see the long-running process from WSL in realtime, as mentioned by @rainersigwald in  https://github.com/microsoft/msbuild/issues/5451#issuecomment-649674873. Note the somewhat wonky thing I am doing to [switch the platform](https://github.com/gojimmypi/msbuildCustomTask/blob/25e2562f027465fa001263f02ea6b519b648031f/deletePersist/deletePersist.csproj#L77) back to `anycpu` just before the main `CoreCompile` target. That's because I want to be able to do this for the build configuration management:\r\n\r\n![image](https://user-images.githubusercontent.com/13059545/86517388-6c436680-bddd-11ea-89ff-80d62c2e9798.png)\r\n\r\nIdeally I'd like to omit the `CoreCompile` target altogether (it really does not like the custom platforms, of course)... but perhaps at some point the main C# app will contain some sort of diagnostic app.\r\n\r\nThe problem I am seeing is that files created by the build do not stay deleted after the clean process, nor even a manual `del` from the DOS prompt.\r\n\r\n### Steps to reproduce\r\n\r\nOpen the [deletePersist project file](https://github.com/gojimmypi/msbuildCustomTask/blob/master/deletePersist/deletePersist.csproj) in the [deletePersist directory](https://github.com/gojimmypi/msbuildCustomTask/tree/master/deletePersist) of [this repo](https://github.com/gojimmypi/msbuildCustomTask) :\r\n\r\n```\r\ngit clone https://github.com/gojimmypi/msbuildCustomTask.git\r\n``` \r\nThen build and clean in Visual Studio 2019:\r\n\r\n1. Open solution file in Visual Studio. \r\n2. Right click on project: Build \r\n3. Right click on project: Clean \r\n4. Observe `another.bit` and `top.json` files re-appear after having been removed.\r\n5. Note output screen with warning that the `\"dir top.json\" exited with code 1.` showing the file was gone.\r\n6. Wait a few moments and the files reappear.\r\n\r\nProject file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<!--\r\n  For tips on editing this file, see https://docs.microsoft.com/en-us/visualstudio/msbuild/target-build-order?view=vs-2019\r\n\r\n  see: https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-extend-the-visual-studio-build-process?view=vs-2019\r\n  \"Be sure to use different names than the predefined targets listed in the table in the previous section \r\n  (for example, we named the custom build target here CustomAfterBuild, not AfterBuild), since those predefined \r\n  targets are overridden by the SDK import which also defines them. You don't see the import of the target file \r\n  that overrides those targets, but it is implicitly added to the end of the project file when you use the Sdk \r\n  attribute method of referencing an SDK.\"\r\n-->\r\n\t<ItemGroup>\r\n\t\t<None Include=\"Properties\\AssemblyInfo.cs\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Compile Remove=\"Properties\\AssemblyInfo.cs\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Remove=\"ulx3s.bit\" />\r\n\t</ItemGroup>\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>net46</TargetFramework>\r\n\t\t<RootNamespace>VerilogLanguage</RootNamespace>\r\n\t\t<Platforms>ULX3S ECP5-12K;ULX3S ECP5-45K;ULX3S ECP5-85K;iCEBreaker</Platforms>\r\n\t\t<Configurations>Debug;Release;Upload;Verify</Configurations>\r\n\t</PropertyGroup>\r\n\r\n\r\n\t<PropertyGroup Condition=\" '$(Platform)' == 'iCEBreaker' \">\r\n\t\t<PlatformTarget>iCE40</PlatformTarget>\r\n\t</PropertyGroup>\r\n\r\n\t<!-- each $(Configuration)|$(Platform) pair needs its own PropertyGroup to appease Project - Properties - Build - Output Path -->\r\n\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|iCEBreaker'\">\r\n\t\t<OutputPath>bin\\</OutputPath>\r\n\t</PropertyGroup>\r\n\r\n\t<Target Name=\"CustomClean\" AfterTargets=\"Clean\">\r\n\t\t<Message Text=\"Cleaning Verilog Files\" />\r\n\t\t<RemoveDir Directories=\"$(OutputPath)\" />\r\n\t\t<Delete Files=\"top.json\"></Delete>\r\n\t\t<Delete Files=\"another.bit\"></Delete>\r\n\t\t<Delete Files=\"other.json\"></Delete> <!-- if this file is manually created, outside of visual studio - it will stay gone when deleted -->\r\n\t</Target>\r\n\r\n\t<!-- \r\n\t*******************************************************************************************************************************\r\n\tiCEBeeaker\r\n\t******************************************************************************************************************************* -->\r\n\t<!-- Build Debug iCEBreaker-->\r\n\t<Target Name=\"Debug_iCEBreaker\" Inputs=\"top_icebreaker.v\" Outputs=\"top_icebreaker.bin\" BeforeTargets=\"CoreCompile\" Condition=\" '$(Configuration)|$(Platform)'=='Debug|iCEBreaker' \">\r\n\t\t<Message Text=\"Build_iCEBreaker $(Configuration)|$(Platform)\" />\r\n\t\t<Exec Command=\"echo wow > top.json\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" StandardOutputImportance=\"high\">\r\n\t\t\t<Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n\t\t</Exec>\r\n\t\t<Exec Command=\"echo wow > another.bit\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" StandardOutputImportance=\"high\">\r\n\t\t\t<Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n\t\t</Exec>\r\n\t\t<Message Text=\"Done creating files!\" />\r\n\t</Target>\r\n\r\n\r\n\t<!-- Clean iCEBreaker-->\r\n\t<Target Name=\"Clean_iCEBreaker\" AfterTargets=\"Clean\">\r\n\t\t<Message Text=\"Clean_iCEBreaker $(Configuration)|$(Platform)\" />\r\n\t\t<Exec Command=\"dir top.json\" ContinueOnError=\"true\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" StandardOutputImportance=\"high\">\r\n\t\t\t<Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n\t\t</Exec>\r\n\t\t<Message Text=\"Done cleaning files!\" />\r\n\t</Target>\r\n\r\n\r\n\t<!-- For the main C# compile, we need to switch platform -->\r\n\t<Target Name=\"SwitchToAnyCpu\" BeforeTargets=\"CoreCompile\" AfterTargets=\"Build_iCEBreaker;Upload_iCEBreaker;Build_ULX3S_85K\">\r\n\t\t<Message Text=\"Platform=$(Platform)\" />\r\n\t\t<Message Text=\"PlatformTarget=$(PlatformName)\" />\r\n\t\t<PropertyGroup>\r\n\t\t\t<!-- we'll first save the current values for later use -->\r\n\t\t\t<MyStartupPlatform>$(Platform)</MyStartupPlatform>\r\n\t\t\t<MyStartupPlatformTarget>$(PlatformTarget)</MyStartupPlatformTarget>\r\n\r\n\t\t\t<!-- now we'll switch to anycpu-->\r\n\t\t\t<Platform>anycpu</Platform>\r\n\t\t\t<PlatformTarget>anycpu</PlatformTarget>\r\n\t\t</PropertyGroup>\r\n\t\t<Message Text=\"Platform=$(Platform)\" />\r\n\t\t<Message Text=\"PlatformTarget=$(PlatformTarget)\" />\r\n\t</Target>\r\n\r\n\t<!-- after the core compile, switch back to the seleted FPGA -->\r\n\t<Target Name=\"SwitchToMyStartupPlatform\" AfterTargets=\"CoreCompile\">\r\n\t\t<Message Text=\"Running SwitchToMyStartupPlatform...\" />\r\n\t\t<PropertyGroup>\r\n\t\t\t<Platform>$(MyStartupPlatform)</Platform>\r\n\t\t\t<PlatformTarget>$(MyStartupPlatformTarget)</PlatformTarget>\r\n\t\t</PropertyGroup>\r\n\t\t<Message Text=\"Platform=$(Platform)\" />\r\n\t\t<Message Text=\"PlatformTarget=$(PlatformTarget)\" />\r\n\t</Target>\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n.>dir /s /b\r\n.\\deletePersist.csproj\r\n.\\deletePersist.sln\r\n.\\Program.cs\r\n.\\Properties\r\n.\\README.md\r\n.\\Properties\\AssemblyInfo.cs\r\n.\\Properties\\PublishProfiles\r\n.\\Properties\\PublishProfiles\\FolderProfile.pubxml\r\n```\r\n\r\n### Expected behavior\r\nDeleted files stay deleted.\r\n\r\n### Actual behavior\r\nDeleted files created during build reappear. Manually created files such as `other.json` created with `copy con: other.json` at the DOS prompt will however, be deleted and stay deleted with the `Clean` process.\r\n\r\nNote how the build output shows the file missing just before completion as shown by the warning for `dir top.json`:\r\n```\r\n1>  Using \"Exec\" task from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n1>  Task \"Exec\"\r\n1>    dir top.json\r\n1>     Volume in drive C is Windows\r\n1>    File Not Found\r\n1>     Volume Serial Number is 9078-2015\r\n1>\r\n1>     Directory of C:\\temp\\msbuildCustomTask\\msbuildCustomTask\\deletePersist\r\n1>\r\n1>    C:\\temp\\msbuildCustomTask\\msbuildCustomTask\\deletePersist\\deletePersist.csproj(69,3): warning MSB3073: The command \"dir top.json\" exited with code 1.\r\n1>    The previous error was converted to a warning because the task was called with ContinueOnError=true.\r\n1>    Build continuing because \"ContinueOnError\" on the task \"Exec\" is set to \"true\".\r\n1>  Done executing task \"Exec\" -- FAILED.\r\n1>  Task \"Message\"\r\n1>    Done cleaning files!\r\n1>  Done executing task \"Message\".\r\n1>Done building target \"Clean_iCEBreaker\" in project \"deletePersist.csproj\".\r\n1>Target CleanXsdCodeGen:\r\n1>  Task \"Delete\"\r\n1>  Done executing task \"Delete\".\r\n1>Target \"_CleanPackageFiles\" skipped, due to false condition; ('$(GeneratePackageOnBuild)' == 'true') was evaluated as ('false' == 'true').\r\n1>\r\n1>Done building project \"deletePersist.csproj\".\r\n1>\r\n1>Build succeeded.\r\n1>\r\n1>C:\\temp\\msbuildCustomTask\\msbuildCustomTask\\deletePersist\\deletePersist.csproj(69,3): warning MSB3073: The command \"dir top.json\" exited with code 1.\r\n1>    1 Warning(s)\r\n1>    0 Error(s)\r\n1>\r\n1>Time Elapsed 00:00:00.31\r\n```\r\nYet, a few moments later the `top.json` and `another.bit` files will reappear.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.6.1\r\n** Copyright (c) 2020 Microsoft Corporation\r\n**********************************************************************\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise>msbuild /version\r\nMicrosoft (R) Build Engine version 16.6.0+5ff7b0c9e for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.6.0.22303\r\n```\r\n\r\nOS info:\r\n\r\nMicrosoft Windows [Version 10.0.18363.900]\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.13\r\nVisualStudio.15.Release/15.9.13+28307.718\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n```\r\nPlus this abbreviated list that may be of interest:\r\n```\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nSnapshot Debugging Extension   1.0\r\nSnapshot Debugging Visual Studio Extension Detailed Info\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28307.718\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n```",
  "state": "CLOSED",
  "createdAt": "2020-07-04T17:33:16Z",
  "updatedAt": "2025-02-04T15:08:12Z",
  "closedAt": "2025-02-04T15:08:11Z",
  "author": {
    "login": "gojimmypi"
  },
  "milestone": {
    "title": "Discussion"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Visual Studio",
    "author-responded"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Because you have specified the new target as an `InitialTargets`, it runs for _any build of any target_ in the project. That includes [design-time builds](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md) that Visual Studio uses to extract project information from the project to do internal operations like \"load the project\" and \"update the project sidebar\". Those builds can run at any time.\r\n\r\nConsider hooking a more-specific target that won't be called as often, or if that's not possible, [modify your target for design-time builds](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#designing-targets-for-use-in-design-time-builds).",
        "createdAt": "2020-07-08T16:25:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thanks for the feedback and the design-time build links... certainly an interesting read. It does have information key to resolving this.  Still, I think the documentation and/or defaults are a bit misleading and perhaps undesired:\r\n\r\nEven removing the `InitialTargets` and the project build runs [relentlessly](https://github.com/gojimmypi/msbuildCustomTask/tree/development/relentlessTask).\r\n\r\nI was hopeful that the `DesignTimeBuild` property would be the answer to this problem. The default is documented as being a blank but is apparently `true` despite the note in the [example](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#determining-whether-a-target-is-running-in-a-design-time-build):\r\n\r\n![image](https://user-images.githubusercontent.com/13059545/87232685-c7450280-c375-11ea-9d2a-299b70005c02.png)\r\n\r\nI'm trying to run tasks before the `CoreCompile`, which is *not* listed as one of the [design-time targets](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#targets-that-run-during-design-time-builds):\r\n\r\n>Whether a target is run in design-time builds is based on whether a target's `BeforeTargets` and `AfterTargets` attributes specifies a direct or indirect dependency of any of the above targets.\r\n\r\n(although perhaps `CoreCompile` is also a design-time trigger like `Compile` ?)\r\n \r\nFor example: this project file will create an `init.log` file with a value of `wow true` immediately upon just opening the project in VS:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netcoreapp3.1</TargetFramework>\r\n\t</PropertyGroup>\r\n\t\r\n\t<Target Name=\"RelentlessCommand\" BeforeTargets=\"CoreCompile\">\r\n\t\t<Exec Command=\"echo wow $(DesignTimeBuild) > init.log\">\r\n\t\t</Exec>\r\n\t</Target>\r\n\t\r\n</Project>\r\n\r\n```\r\nso ok, the default is `true`. Let's set it to `false`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netcoreapp3.1</TargetFramework>\r\n\t\t<DesignTimeBuild>false</DesignTimeBuild>\r\n\t</PropertyGroup>\r\n\t\r\n\t<Target Name=\"RelentlessCommand\" BeforeTargets=\"CoreCompile\">\r\n\t\t<Exec Command=\"echo wow $(DesignTimeBuild) > init.log\">\r\n\t\t</Exec>\r\n\t</Target>\r\n\t\r\n</Project>\r\n\r\n```\r\nDelete the `init.log` file. It automatically comes back, showing the build is still running - and still contains the value `wow true`.\r\n\r\nStill, given all of this, the workaround to [determine whether a target is running in a design-time build](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#determining-whether-a-target-is-running-in-a-design-time-build) *does* work, and this project does *not* run relentlessly:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netcoreapp3.1</TargetFramework>\r\n\t</PropertyGroup>\r\n\r\n\t<Target Name=\"AddAdditionalReferences\" BeforeTargets=\"ResolveAssemblyReferences\">\r\n\t\t<PropertyGroup Condition=\"'$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'\">\r\n\t\t\t<_AvoidExpensiveCalculation>true</_AvoidExpensiveCalculation>\r\n\t\t</PropertyGroup>\r\n\t</Target>\t\r\n\t\r\n\t<Target Name=\"RelentlessCommand\" BeforeTargets=\"CoreCompile\" Condition=\" $(_AvoidExpensiveCalculation)=='' \" >\r\n\t\t<Exec Command=\"echo wow $(DesignTimeBuild) > init.log\">\r\n\t\t</Exec>\r\n\t</Target>\r\n\t\r\n</Project>\r\n```\r\nThe `init.log` does *not* automatically come back after deleting, as desired. Whew! Cool. :)\r\n\r\nFor reference, the reason I need to run the FPGA synthesis build before the `CoreCompile` is that I have custom Platforms:\r\n\r\n```\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>net46</TargetFramework>\r\n\t\t<RootNamespace>VerilogLanguage</RootNamespace>\r\n\t\t<Platforms>ULX3S ECP5-12K;ULX3S ECP5-45K;ULX3S ECP5-85K;iCEBreaker;Orange Crab</Platforms>\r\n\t\t<Configurations>Debug;Release;Upload;Verify</Configurations>\r\n\t</PropertyGroup>\r\n```\r\nand these of course break the normal msbuild, so I switch to `anycpu` just before the compile:\r\n\r\n```\r\n\t<!-- For the main C# compile, we need to switch platform -->\r\n\t<Target Name=\"SwitchToAnyCpu\" BeforeTargets=\"CoreCompile\">\r\n\t\t<Message Text=\"Platform=$(Platform)\" />\r\n\t\t<Message Text=\"PlatformTarget=$(PlatformName)\" />\r\n\t\t<PropertyGroup>\r\n\t\t\t<!-- we'll first save the current values for later use -->\r\n\t\t\t<MyStartupPlatform>$(Platform)</MyStartupPlatform>\r\n\t\t\t<MyStartupPlatformTarget>$(PlatformTarget)</MyStartupPlatformTarget>\r\n\t\t\t\r\n\t\t\t<!-- now we'll switch to anycpu-->\r\n\t\t\t<Platform>anycpu</Platform>\r\n\t\t\t<PlatformTarget>anycpu</PlatformTarget>\r\n\t\t</PropertyGroup>\r\n\t\t<Message Text=\"Platform=$(Platform)\" />\r\n\t\t<Message Text=\"PlatformTarget=$(PlatformTarget)\" />\r\n\t</Target>\r\n\r\n```\r\nAlso, note that I do not have a `View > Other Windows > Build Logging` menu item as noted [here](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#visual-studio-2017-or-later).\r\n\r\n![image](https://user-images.githubusercontent.com/13059545/87232914-a1b8f880-c377-11ea-8097-6d3cceb2c5f1.png)\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019\r\nVersion 16.6.1\r\nVisualStudio.16.Release/16.6.1+30128.74\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n```\r\n",
        "createdAt": "2020-07-11T20:15:26Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "> so ok, the default is `true`.\r\n\r\nThe default is empty. When loading a project in Visual Studio, the project system does a design-time build, with the property set to `true`. When building on the command line or in Visual Studio, the property is not set and is empty.\r\n\r\n> Let's set it to `false`\r\n\r\nYour example here doesn't do that. It changes the _default_ value in that project to `false`, but when the project system explicitly sets `DesignTimeBuild=true` as a global property, it overrides that line in your project file. That is why you need to do the build-time check.\r\n\r\n> Also, note that I do not have a `View > Other Windows > Build Logging` menu item as noted [here](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#visual-studio-2017-or-later).\r\n\r\nDid you follow step 1 there?\r\n\r\n> 1. Install the [Project System Tools](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools) extension\r\n",
        "createdAt": "2020-07-14T20:15:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @gojimmypi, is this still an issue that you are facing?",
        "createdAt": "2024-11-05T13:47:42Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Hi @maridematte  yes, there seems to still be undesired behavior.\n\nIn VS2022 17.11.5, the [tiny project file](https://github.com/gojimmypi/msbuildCustomTask/blob/tinyproject/deletePersist/deletePersist.csproj) now gives an error at load time:\n\n![Image](https://github.com/user-attachments/assets/76a29eee-5bf3-477c-a3ca-baf3be07078a)\n\nIt is arguable whether a project file should refuse to load if there's no configuration. That's probably off topic.\n\nI updated the project like this with a configuration to appease the above error message:\n\n```\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  \n  <ItemGroup>\n    <ProjectConfiguration Include=\"Debug|x64\">\n      <Configuration>Debug</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|x64\">\n      <Configuration>Release</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n  </ItemGroup>\n\n  <Target Name=\"InitFPGA\">\n    <Exec Command=\"echo wow > init.log\" />\n  </Target>\n\n</Project>\n```\n\nIt appears the build still attempt to run at load time.  I also now see this error message repeated 20 times at project  load time:\n\n```\nerror : Designtime build failed for project 'C:\\test\\vs_build\\project.vcxproj' configuration 'Debug|x64'. IntelliSense might be unavailable.\n\tSet environment variable TRACEDESIGNTIME = true and restart Visual Studio to investigate.\n```\n\nI'd like to be able to load a project, ideally a custom build project, without the build running immediately at load time.\n\nI must have missed the \"Project System Tools\" suggestion extension; is that still advised / required? \n\nThank you.",
        "createdAt": "2024-11-05T20:20:07Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "The design time build when VS opens / loads a project is a feature that we do not plan on disabling anytime soon from my understanding. \nFor a disabling the `DesignTimeBuild` have you tried Rainer's suggestions for doing a build-time check?\n\nFor the \" Project System Tools\" suggestion, if you're using a new version of VS there are some [new steps that you can follow](https://github.com/dotnet/project-system/blob/main/docs/design-time-builds.md#getting-visual-studio-to-output-the-results-of-a-design-time-build) and get the output results of the design time build and check if the variable. ",
        "createdAt": "2024-11-06T17:19:27Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Hi @maridematte and thank you for the information.\n\nCoincidentally, I'm working on a project that also has some interesting \"design time build\" issues. In this case, I'm using [cmake-generated Visual Studio projects](https://github.com/gojimmypi/osp/tree/dev/realm/VS2022) to add support for [wolfSSL](https://github.com/wolfSSL/wolfssl) encryption to [realm-core](https://github.com/realm/realm-core) using Visual Studio 2022.\n\nI added [this](https://github.com/gojimmypi/osp/blob/998fd651b25df1c316e4b54b86058bcf77866176/realm/VS2022/ALL_BUILD.vcxproj#L3) code snippet into the `VS2022/ALL_BUILD.vcxproj` project:\n\n```\n  <Target Name=\"AddAdditionalReferences\" BeforeTargets=\"ResolveAssemblyReferences\">\n    <PropertyGroup Condition=\"'$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'\">\n        <_AvoidExpensiveCalculation>true</_AvoidExpensiveCalculation>\n        <Message>Design Time Build!</Message>\n    </PropertyGroup>\n  </Target>\n```\n\nThe curious thing here is that the entire project file seems to be regenerated when the underlying cmake files are detected as having changed. The problem of course, is that when the file is regenerated, the hand-crafted design-time code is lost.\n\nAlthough still in the general topic of builds running unexpectedly, I realize this is also quite a bit different than my original example. Still, I was wondering if you'd happen to know how to add a project `Condition=\"'$(DesignTimeBuild)' == 'true' ` for cmake files that generate Visual Studio project files?\n\nFor reference, there's some [CMake projects in Visual Studio](https://learn.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-170) information, but the design-time (or project load, or project refresh-time) is not mentioned.\n\nI'd like to be able to detect the initial reload of the project and take certain additional steps.\n\nI'll still be revisiting the non-cmake builds soon.\n\nThanks again, cheers.\n",
        "createdAt": "2024-11-21T00:00:51Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "I honestly have no knowledge of the CMake generators for MSBuild. But you can contact the CMake folks with the question [on their repo](https://gitlab.kitware.com/cmake/cmake/-/issues).",
        "createdAt": "2024-12-03T15:08:54Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Hi @maridematte \n\nI have another question on this \"build runs unexpectedly\" topic: I've been working on a Visual Studio project for Realm, specifically [this project directory](https://github.com/gojimmypi/osp/tree/dev/realm/VS2022) and one of the super annoying problems is when something (?) triggers all of the project files to convert my hand crafted, variable-based directory values into explicit, hard-coded, fixed values. For instance:\n\n![Image](https://github.com/user-attachments/assets/9e462e5e-4bcf-41dc-92d9-3a2f619892f3)\n\nI'm adding the variable values as I want to share the project files on GitHub, but I don't want my specific version path of Visual Studio (which varies by community, Professional and Enterprise editions), but also the GitHub cloned directories that contain my username, in the path.\n\nAt first, I was willing to live with just an annoying feature: once cloned and loaded, the end user would have values converted to their specific environment. Not very friendly for contributions, but ok.\n\nHowever, recently I started adding some custom property files to be included: (e.g. [realm-core-GlobalProperties.props](https://github.com/gojimmypi/osp/blob/dev/realm/VS2022/realm-core-GlobalProperties.props)). Yesterday it was working great. This morning I am greeted with the dreaded \"_all your project files have been changed, do you wish to reload them?_\". This is the message that occurs when variable paths are replaced with actual paths.  This is first I've seen this happen spontaneously while the computer was unattended.\n\nThe _really_ undesired thing is that my hand-crafted include files were also stripped out:\n\n![Image](https://github.com/user-attachments/assets/ec4e5985-ebb4-4f10-b5b2-b622e02790ba)\n\nI can work on the project files all day long, hand crafting, performing test builds, reloading, and more. I have no idea what event occurs to spontaneously restructure all of the project files (there are over 150 of them!), wiping out all changes. \n\nDo you have any idea what might be causing this, and how to prevent it? Thanks so much.\n",
        "createdAt": "2024-12-19T16:13:12Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "@gojimmypi Can you please [open a feedback ticket instead](https://docs.microsoft.com/visualstudio/ide/feedback-options)? It looks like the C++ project system is doing something unexpected there, so we'll need that team to look at it.",
        "createdAt": "2024-12-19T16:26:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald thank you for the suggestion. I submitted this related feedback ticket:\n\nhttps://developercommunity.visualstudio.com/t/NETSdk-build-runs-unexpectedly-undesir/10816622?port=1025&fsid=e8562a85-ef06-4f7a-9791-0b8dca002f7d",
        "createdAt": "2024-12-19T17:24:37Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "Since the issue is being tracked with a developer community ticket I will close this one.",
        "createdAt": "2025-02-04T15:08:11Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}