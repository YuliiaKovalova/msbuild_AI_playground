{
  "number": 4834,
  "title": "Create a .NET TaskHost so that .NET Framework MSBuild can consume .NET Tasks",
  "body": "Task declaration [supports a `Runtime` attribute](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-configure-targets-and-tasks?view=vs-2019#usingtask-attributes-and-task-parameters) that allows MSBuild-running-on-.NET-4 to call tasks that support only .NET 3.5 (by spawning an `MSBuildTaskHost.exe` that runs on .NET 3.5 and communicates with the rest of the build via IPC).\r\n\r\nSimilar support could be used to support running .NET Core (or .NET Standard 2.1+) tasks from Visual Studio with `Runtime=\"Core\"` (or something like that).",
  "state": "OPEN",
  "createdAt": "2019-10-21T14:31:36Z",
  "updatedAt": "2025-02-26T15:45:50Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    ".NET Core",
    "needs-design",
    "Feature Request",
    "Area: Engine",
    "Area: TaskHost",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "A more immediate solution would be to [allow Visual Studio to run the entire build on .NET Core](https://developercommunity2.visualstudio.com/t/Allow-building-SDK-style-projects-with-t/1331985).\r\n\r\nThat could be complemented by _failing_ if .NET Framework-based MSBuild attempted to run a task marked with `Runtime=\"Core\"`.",
        "createdAt": "2021-02-05T16:59:07Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "Is this on the roadmap?",
        "createdAt": "2021-04-18T12:47:54Z",
        "author": {
          "login": "john-larson"
        }
      },
      {
        "body": "@john-larson \"yes\" in the sense \"we still think this is a good idea worth doing sometime hopefully soon\", but \"no\" in the \"we have a planned time to work on this\".",
        "createdAt": "2021-05-05T17:19:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, just wondering if there are any ways to run the code in a newer runtime? I am looking for workarounds.",
        "createdAt": "2021-09-10T08:23:32Z",
        "author": {
          "login": "Denis535"
        }
      },
      {
        "body": "@Denis535 the best option at the moment to run code during a .NET Framework/Visual Studio-driven build is to use an executable; then you can use anything that will run on the machine.",
        "createdAt": "2021-09-10T08:48:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Similar support could be used to support running .NET Core (or .NET Standard 2.1+) tasks from Visual Studio with\u00a0`Runtime=\"Core\"`\n\nOR vice-versa, i.e. running full framework tasks from Core MSBuild via `Runtime=\"CLR2/CLR4\"`",
        "createdAt": "2021-09-10T08:59:34Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> OR vice-versa, i.e. running full framework tasks from Core MSBuild via Runtime=\"CLR2/CLR4\"\r\n\r\n@Nirmal4G that's #711",
        "createdAt": "2021-09-10T09:33:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yeah, it seems I'm the one marked the issue but forgot entirely. Silly me \ud83d\ude1c\ud83d\ude43",
        "createdAt": "2021-09-10T09:47:40Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "I am particularly interested in seeing this implemented. Is there a way for a community member to help?",
        "createdAt": "2022-10-23T15:20:16Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "@teo-tsirpanis Unfortunately, I think most of the work for this is\r\n\r\n* building consensus on direction with VS partners\r\n* deciding on some VS-specific implementation details\r\n* making VSIX authoring changes that can only be tested by triggering internal VS test builds\r\n\r\nwhich makes it pretty hard to help externally.\r\n\r\nCan you expand on your desire for the feature though? Having clear use cases can help us prioritize it internally.",
        "createdAt": "2022-10-25T15:56:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have an MSBuild task that runs after compilation and executes code from the compiled assembly using `AssemblyLoadContext`, necessiating targeting modern .NET. To support the .NET Framework edition of MSBuild Visual Studio runs I tried to do the same with `AppDomain`s but gave up; I could not make it load the assembly's dependencies, and the complete object isolation of app domains would affect the structure of my code.\r\n\r\nSo what I did is run the task out-of-process on modern .NET when we build on .NET Framework, but this presents its own challenges. The out-of-process tool has to be installed separately (to avoid increasing package size for everyone), sending logging messages requires additional ceremony ~~, and there are issues around targeting frameworks greater than the tool (the tool runs on .NET 6 and cannot load .NET 7 assemblies, while the in-process task runs on the same framework as the SDK and does not have this problem)~~.\r\n\r\nImplementing this would reduce complexity in my code and improve the user experience.",
        "createdAt": "2022-10-25T18:09:34Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "Is this feature coming in .Net 8?",
        "createdAt": "2023-08-03T20:53:00Z",
        "author": {
          "login": "Jinjinov"
        }
      },
      {
        "body": "No, it's not planned for the .NET 8 GA release this fall.",
        "createdAt": "2023-08-03T20:53:55Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}