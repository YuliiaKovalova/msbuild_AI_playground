{
  "number": 10530,
  "title": "[Bug]: dotnet (ms)build deadlocks when run from other app with RedirectStandardOutput=true and process.WaitForExit(Async) used",
  "body": "***Updated 17/08/24 with more details***\r\n\r\n### Issue Description\r\n\r\nWe are trying to build some code by calling `dotnet build` from our software and faced with dotnet process hangs under some conditions.\r\n\r\n### Steps to Reproduce\r\n\r\nCaller code\r\n\r\n```cs\r\nusing System.Diagnostics;\r\n\r\ninternal class Program\r\n{\r\n\tstatic async Task Main(string[] args)\r\n\t{\r\n\t\tvar psi = new ProcessStartInfo(\"dotnet\")\r\n\t\t{\r\n\t\t\tRedirectStandardOutput = true,\r\n\t\t};\r\n\r\n\t\tpsi.ArgumentList.Add(\"build\");\r\n\t\tpsi.ArgumentList.Add(@\"path_to_Project.csproj\");\r\n\t\tpsi.ArgumentList.Add(\"-c\");\r\n\t\tpsi.ArgumentList.Add(\"Debug\");\r\n\r\n\t\tvar process = Process.Start(psi) ?? throw new InvalidOperationException($\"Failed to run 'dotnet build' process\");\r\n\r\n\t\t// hangs here, because dotnet.exe process doesn't terminate\r\n\t\tawait process.WaitForExitAsync(default);\r\n\r\n\t\tif (process.ExitCode != 0)\r\n\t\t{\r\n\t\t\tvar errors = await process.StandardOutput.ReadToEndAsync(default);\r\n\t\t\tConsole.WriteLine(errors);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\ntest project: \r\n[1111111111111111111111111111111111111111111111111111111111111111111111.zip](https://github.com/user-attachments/files/16636537/1111111111111111111111111111111111111111111111111111111111111111111111.zip)\r\n\r\n### Expected Behavior\r\n\r\n`dotnet` process exits\r\n\r\n### Actual Behavior\r\n\r\nProcess locked awaiting something\r\n\r\n### Analysis\r\n\r\nApplication deadlocks when output, produced by build goes above some limit. If it doesn't for you - just copy-paste properties in test class to increase amount of errors which will increase amount of printed text.\r\n\r\nTo workaround issue read output stream immediately instead of waiting for application to exit:\r\n\r\n```cs\r\nvar errors = new List<string>();\r\nwhile (true)\r\n{\r\n\tvar line = await process.StandardOutput.ReadLineAsync(cancellationToken);\r\n\tif (line == null)\r\n\t{\r\n\t\tbreak;\r\n\t}\r\n\terrors.Add(line);\r\n}\r\n```\r\n\r\nThreads stacks in build process:\r\n\r\nMain Thread\r\n![image](https://github.com/user-attachments/assets/ab92024e-105d-4494-ad1a-2d34d109b9d3)\r\nPump 1\r\n![image](https://github.com/user-attachments/assets/858c5840-8b82-4814-a123-a751a5277b96)\r\nPump 2\r\n![image](https://github.com/user-attachments/assets/f6e49a06-28eb-4a56-8aaf-7224cf0772de)\r\nNode\r\n![image](https://github.com/user-attachments/assets/2f416156-c6d8-46d6-9997-0363a6b2df4a)\r\n\r\n\r\n\r\n### Versions & Configurations\r\n\r\n`dotnet --info`\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.400\r\n Commit:            36fe6dda56\r\n Workload version:  8.0.400-manifests.56cd0383\r\n MSBuild version:   17.11.3+0c8610977\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.400\\\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\n [aspire]\r\n   Installation Source: VS 17.11.35208.52\r\n   Manifest Version:    8.1.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.1.0\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: x64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  3.1.426 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.315 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.31 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.31 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  arm64 [C:\\Program Files\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\arm64\\InstallLocation]\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```",
  "state": "CLOSED",
  "createdAt": "2024-08-16T11:39:52Z",
  "updatedAt": "2024-10-24T14:31:18Z",
  "closedAt": "2024-10-24T14:31:16Z",
  "author": {
    "login": "MaceWindu"
  },
  "labels": [
    "bug",
    "needs-investigation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hmm, looks like we can use `dotnet msbuild` as workaround for now",
        "createdAt": "2024-08-16T12:56:49Z",
        "updatedAt": "2024-08-16T12:56:49Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Can you also try using dotnet build with the '--tl:off' flag? That'll disable the MSBuild Terminal Logger, which is the default starting in .Net 9. 'dotnet msbuild' doesn't use it as the default, so that could be one reason why using it works. ",
        "createdAt": "2024-08-16T13:03:22Z",
        "updatedAt": "2024-08-16T13:04:07Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Nope, tried it already. Only tl:on works, but produce unreadable output due to control sequences",
        "createdAt": "2024-08-16T13:07:07Z",
        "updatedAt": "2024-08-16T13:07:07Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "~Actually looks like `-consoleloggerparameters:Summary`, which is used by `dotnet build` also breaks `dotnet msbuild`~\r\n\r\nnot working https://github.com/dotnet/msbuild/issues/10530#issuecomment-2293581921",
        "createdAt": "2024-08-16T13:12:02Z",
        "updatedAt": "2024-08-16T14:38:35Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "~Checked other values for `consoleloggerparameters`. Following also lead to hang:~\r\n- ~`PerformanceSummary`~\r\n- ~`ShowCommandLine`~\r\n\r\n~Looks live it is not a blocker for us anymore with `dotnet msbuild`~\r\n\r\n\r\nnot working https://github.com/dotnet/msbuild/issues/10530#issuecomment-2293581921",
        "createdAt": "2024-08-16T13:21:18Z",
        "updatedAt": "2024-08-16T14:39:02Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Thanks for the great research! That helps a lot. \n\nSpeaking personally I'd encourage folks to use dotnet build wherever possible instead of dotnet msbuild because build is a 'semantic' action that we can improve over time, whereas MSBuild is the generic, open-ended toolbox/escape hatch. Of course that doesn't work right now for you, but once this gets fixed I'd hope there wouldn't be other blockers to switching back for you. ",
        "createdAt": "2024-08-16T13:36:19Z",
        "updatedAt": "2024-08-16T13:36:19Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "~Also as `dotnet build` pass parameters to msbuid, it is also possible to use `-consoleloggerparameters:WarningsOnly;ErrorsOnly` with it to make it work as another workaround.~\r\n\r\nactually no, as Summary also respected, it still hangs. Just not in my test-case\r\n",
        "createdAt": "2024-08-16T13:48:23Z",
        "updatedAt": "2024-08-16T13:58:54Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Tried to implement workaround in our code just to find out that it doesn't work. Issue reproduced with `dotnet msbuild` too with provided repro code - just need to copy-paste properties in `test.cs` to increase amount of errors. It looks like it depends on size of outputed logs somehow.",
        "createdAt": "2024-08-16T14:09:13Z",
        "updatedAt": "2024-08-16T14:09:13Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Maybe same as #6753 ? (env vars workaround doesn't work for me)",
        "createdAt": "2024-08-16T14:10:34Z",
        "updatedAt": "2024-08-16T14:12:54Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Out of ideas for workaround. Looks like I will need to use system-specific script to wrap `dotnet` call with redirect to file and then read file \ud83e\udd72 ",
        "createdAt": "2024-08-16T14:27:29Z",
        "updatedAt": "2024-08-16T14:27:29Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Looks like this works:\r\n\r\nwas:\r\n```cs\r\nawait process.WaitForExitAsync(cancellationToken);\r\n```\r\n\r\nworkaround:\r\n```cs\r\nvar errors = new List<string>();\r\nwhile (true)\r\n{\r\n\tvar line = await process.StandardOutput.ReadLineAsync(cancellationToken);\r\n\tif (line == null)\r\n\t{\r\n\t\tbreak;\r\n\t}\r\n\terrors.Add(line);\r\n}\r\n```",
        "createdAt": "2024-08-16T15:04:56Z",
        "updatedAt": "2024-08-16T15:04:56Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Updated issue report with proper analysis details",
        "createdAt": "2024-08-17T09:40:39Z",
        "updatedAt": "2024-08-17T09:40:39Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "Also could confirm that same issue applicable to Linux (used `mcr.microsoft.com/dotnet/sdk:8.0` docker image). Only difference is that after existing loop below\r\n\r\n```cs\r\nwhile (true)\r\n{\r\n\tvar line = await process.StandardOutput.ReadLineAsync(cancellationToken);\r\n\tif (line == null)\r\n\t{\r\n\t\tbreak;\r\n\t}\r\n\terrors.Add(line);\r\n}\r\n```\r\n\r\n`process.HasExisted` is false, so I need to use `WaitForExitAsync` to ensure process terminated. So final working code is:\r\n\r\n```cs\r\nvar logs = new List<string>();\r\nwhile (true)\r\n{\r\n    var line = await process.StandardOutput.ReadLineAsync(cancellationToken);\r\n    if (line == null)\r\n    {\r\n        break;\r\n    }\r\n    logs.Add(line);\r\n}\r\n\r\nawait process.WaitForExitAsync(cancellationToken);\r\n```",
        "createdAt": "2024-08-22T14:01:46Z",
        "updatedAt": "2024-08-22T14:01:46Z",
        "author": {
          "login": "MaceWindu"
        }
      },
      {
        "body": "This is not an msbuild bug; try it with *any* program that generates that much output and you will get the exact same deadlock.",
        "createdAt": "2024-10-11T14:49:13Z",
        "updatedAt": "2024-10-11T14:49:13Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "Sorry, this issue wasn't added to the iteration and slipped our attention. As it was mentioned, we are not able to fix this issue :(\n\nI would recommend to use MSBuild API instead of starting new `dotnet` process - https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-api?view=vs-2022 (and please read also `Find and use a version of MSBuild` article in that case)",
        "createdAt": "2024-10-24T14:31:16Z",
        "updatedAt": "2024-10-24T14:31:16Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  }
}