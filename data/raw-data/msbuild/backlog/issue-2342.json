{
  "number": 2342,
  "title": "Restore does not set SolutionDir properties for individual projects",
  "body": "I have one repository for my common .NET libraries that I use in multiple other projects. Other project repository include this common repository by using git submodules.\r\n\r\nThis leads to the following directory hierarchy:\r\n\r\n```\r\nMyProject\\\r\n  MyProject.sln\r\n  Directory.Build.props\r\n  src\\MyProject\\\r\n    MyProject.csproj\r\n  common\\\r\n    Common.sln\r\n    Directory.Build.props\r\n    src\\Common\\\r\n      Common.csproj\r\n```\r\n\r\n`MyProject.sln` contains Project nodes for both `MyProject.csproj` and `Common.csproj`, while `Common.sln` naturally only contains a project node for `Common.csproj`\r\n\r\nContents of `MyProject.csproj`:\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\common\\src\\Common\\Common.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nI also like having my `bin` and `obj` folders in the Solution directory so both `Directory.Build.props` files define the `BaseOutputPath` and `BaseIntermediateOutputPath` properties like this:\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project>\r\n  <PropertyGroup Label=\"BasePath\">\r\n    <BaseOutputPath>$([MSBuild]::ValueOrDefault(`$(SolutionDir)`, `$(MSBuildThisFileDirectory)`))bin\\</BaseOutputPath>\r\n    <BaseIntermediateOutputPath>$([MSBuild]::ValueOrDefault(`$(SolutionDir)`, `$(MSBuildThisFileDirectory)`))obj\\$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nWhen I open either solution in Visual Studio, restoring, building, debugging and running works perfectly fine with all intermediaries and binaries ending up where I expect them to be: in the `bin` and `obj` folders next to the Solution file I opened.\r\n\r\nHowever, when I run `dotnet restore MyProject.sln` I can see that MSBuild restores both project, but places the intermediaries for `Common.csproj` into `MyProject\\common\\obj` and not into `MyProject\\obj` as I'd expect.\r\n\r\nEven worse, when I run `dotnet build MyProject.sln`, MSBuild rightfully complains that it cannot find the Assets file `MyProject\\obj\\Common\\project.assets.json` as this file ended up in `MyProject\\common\\obj\\Common\\project.assets.json` when I ran `dotnet restore MyProject.sln`.\r\n\r\nAt a first glance, it seems like `dotnet restore` does not use the `SolutionDir` property which causes the paths in the `BasePath` property group in `Directory.Build.props` to use `$(MSBuildThisFileDirectory)` instead. This would actually be fine, but when running `dotnet build` it seems like the `SolutionDir` property actually **IS** set correctly.\r\n\r\nI would expect the `SolutionDir` property **ALWAYS** being set when MSBuild interprets a solution file. In this case this is actually quite important, since there are multiple solution files in this directory structure.\r\n\r\n----\r\n\r\n.NET Core Information:\r\n```\r\n> dotnet --info\r\n.NET Command Line Tools (2.0.0-preview2-006497)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-006497\r\n Commit SHA-1 hash:  06a2093335\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25407-01\r\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\r\n```\r\nMSBuild version:\r\n```\r\n> dotnet msbuild /version\r\nMicrosoft (R) Build Engine version 15.3.388.41745 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.3.388.41745\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-07-21T09:04:04Z",
  "updatedAt": "2024-02-21T17:17:47Z",
  "closedAt": "2018-01-29T16:23:34Z",
  "author": {
    "login": "fredrikhr"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm hitting the same issue. Did you find any workaround for this?",
        "createdAt": "2017-12-04T10:28:32Z",
        "updatedAt": "2017-12-04T10:28:32Z",
        "author": {
          "login": "cocowalla"
        }
      },
      {
        "body": "@cocowalla As far as I understand `$(SolutionDir)` is more a Visual Studio thing... So for MSBuild you should use a `Directory.Build.props` file next to your solution file and use `$(MSBuildThisFileDirectory)`.\r\n\r\nSo if you want you could do this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project>\r\n  <PropertyGroup Label=\"BasePath\">\r\n    <SolutionDir Condition=\"'$(SolutionDir)'==''\">$(MSBuildThisFileDirectory)</SolutionDir>\r\n  </PropertyGroup>\r\n</Project>\r\n```",
        "createdAt": "2017-12-04T14:20:00Z",
        "updatedAt": "2017-12-04T14:20:12Z",
        "author": {
          "login": "fredrikhr"
        }
      },
      {
        "body": "Ah, you're right: [_Defined only when building a solution in the IDE_](https://docs.microsoft.com/en-us/cpp/ide/common-macros-for-build-commands-and-properties)\r\n\r\nI've worked around this by simply switching to `$(ProjectDir)` and moving up a dir with an extra `..\\`, e.g. `$(ProjectDir)..\\`",
        "createdAt": "2017-12-04T14:43:08Z",
        "updatedAt": "2017-12-04T14:43:08Z",
        "author": {
          "login": "cocowalla"
        }
      },
      {
        "body": "Well that would work og course, ny approach will work in any situation regardless og the number of levels between Solution and Project. And ProjectDir is theoretically only a little brother to SolutionDir meaning it's dependent on the tooling and may in theory be redefined or not be defined at all.\r\n\r\nAll these MSBuild properties are actual built-ins, you cannot change, redefine or overwrite them.",
        "createdAt": "2017-12-04T15:26:34Z",
        "updatedAt": "2017-12-04T15:26:34Z",
        "author": {
          "login": "fredrikhr"
        }
      },
      {
        "body": "@couven92 thanks for the robust solution. We have several libraries that are pulled via svn:externals and all references start with `$(SolutionDir)Externals` to make this work in different directory structures. While in Visual Studio everything works, the msbuild scripts show warnings due to invalid paths (and actually do not `restore` !). Putting the `Directory.Build.props` file next to the `.sln` file resolves the problems between netcore, classic netframework libraries and msbuild. Thumbs up!",
        "createdAt": "2018-01-29T09:34:37Z",
        "updatedAt": "2018-01-29T09:34:37Z",
        "author": {
          "login": "nzain"
        }
      },
      {
        "body": "The `Directory.Build.props` file is an excellent, robust workaround. But\r\n\r\n> I would expect the `SolutionDir` property **ALWAYS** being set when MSBuild interprets a solution file. In this case this is actually quite important, since there are multiple solution files in this directory structure.\r\n\r\nis absolutely reasonable.\r\n\r\nInternally, MSBuild creates an in-memory project representation of a solution file and builds that. You can observe these by setting `MSBUILDEMITSOLUTION=1` in your environment, which will write the generated solutions to disk. When doing so, we pass the solution directory down to each individual project. For example, the Build target in small solution I just created is implemented as:\r\n\r\n```xml\r\n<Target Name=\"Build\" Outputs=\"@(CollectedBuildOutput)\">\r\n  <MSBuild Projects=\"@(ProjectReference)\" BuildInParallel=\"True\" Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\">\r\n    <Output TaskParameter=\"TargetOutputs\" ItemName=\"CollectedBuildOutput\" />\r\n  </MSBuild>\r\n</Target>\r\n```\r\n\r\nHowever, the NuGet `_GenerateRestoreGraph` target, which collects information from each project, doesn't pass that:\r\n\r\n```xml\r\n<Target Name=\"_GenerateRestoreGraph\" DependsOnTargets=\"_FilterRestoreGraphProjectInputItems;_GetAllRestoreProjectPathItems\" Returns=\"@(_RestoreGraphEntry)\">\r\n  <Message Text=\"Generating dg file\" Importance=\"low\" />\r\n  <Message Text=\"%(_RestoreProjectPathItems.Identity)\" Importance=\"low\" />\r\n  <MsBuild BuildInParallel=\"$(RestoreBuildInParallel)\" Projects=\"@(_GenerateRestoreGraphProjectEntryInput)\" Targets=\"_GenerateRestoreGraphProjectEntry\" Properties=\"$(_GenerateRestoreGraphProjectEntryInputProperties)\">\r\n    <Output TaskParameter=\"TargetOutputs\" ItemName=\"_RestoreGraphEntry\" />\r\n  </MsBuild>\r\n  <MsBuild BuildInParallel=\"$(RestoreBuildInParallel)\" Projects=\"@(_RestoreProjectPathItems)\" Targets=\"_GenerateProjectRestoreGraph\" Properties=\"$(_GenerateRestoreGraphProjectEntryInputProperties)\">\r\n    <Output TaskParameter=\"TargetOutputs\" ItemName=\"_RestoreGraphEntry\" />\r\n  </MsBuild>\r\n</Target>\r\n```\r\n\r\nIt should.\r\n\r\nI can't think of a good way to enforce at the MSBuild layer that all `MSBuild` tasks in a solution metaproject carry the right metadata--especially since it would be legal to have an MSBuild task that did something else, and really doesn't want those properties.\r\n\r\nSo I'm going to move this issue to NuGet. The fix is to change \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/b82a7274e5f58c8af2eb052b8ff98d3d29fed66e/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L278-L288\r\n\r\nto additionally pass (at least) `SolutionDir`.",
        "createdAt": "2018-01-29T16:23:06Z",
        "updatedAt": "2018-01-29T16:23:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This issue was moved to NuGet/Home#6495",
        "createdAt": "2018-01-29T16:23:33Z",
        "updatedAt": "2018-01-29T16:23:33Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}