{
  "number": 5981,
  "title": "Warning AL1073 when .resx files is compiled under x64",
  "body": "### Issue Description\r\nmsbuild reports a \"Warning AL1073 Referenced assembly 'mscorlib.dll' targets a different processor\" when you try to compile .resx files under x64.\r\n\r\n### Steps to Reproduce\r\nSimply try to compile .resx file under x64 platform.\r\n\r\n### Expected Behavior\r\nNo warning.\r\n\r\n### Actual Behavior\r\nWarning AL1073.\r\n\r\n### Analysis\r\nmsbuild seems to always call x86 al.exe even when the platform is x64.\r\nThe issue is described at this [post](https://thorarin.net/blog/post/2019/02/08/al1703-warning-mscorlib).\r\n\r\nThe workaround is to manually add the following code in your project file:\r\n```xml\r\n  <Target Name=\"FixAL1703Warning\" BeforeTargets=\"GenerateSatelliteAssemblies\" Condition=\"'$(PlatformTarget)' == 'x64'\">\r\n    <Message Text=\"Adjusting SDK tools directory to use x64 version of AL.EXE\" />\r\n    <PropertyGroup>\r\n      <TargetFrameworkSDKToolsDirectory>$(TargetFrameworkSDKToolsDirectory)$(PlatformTarget)\\</TargetFrameworkSDKToolsDirectory>\r\n    </PropertyGroup>\r\n  </Target>\r\n```\r\n\r\n### Versions & Configurations\r\nVisual Studio 2019 v16.8.3\r\nWPF .NET 5.0 project",
  "state": "CLOSED",
  "createdAt": "2020-12-21T14:48:26Z",
  "updatedAt": "2024-02-21T14:15:55Z",
  "closedAt": "2021-11-25T13:34:11Z",
  "author": {
    "login": "CyberSinh"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thank you so much for posting this workaround! This issue has been driving me nuts for a couple of days while converting our old-style csproj files to the Microsoft.NET.Sdk format.\r\n\r\nThis AL1073 warning problem has existed since forever (it is also present in .NET Framework). I used the same workaround of setting the `TargetFrameworkSDKToolsDirectory` in the old projects, but not as a target. However, that causes an error in the Microsoft.NET.Sdk projects.\r\n\r\n```\r\nwarning MSB3084: Task attempted to find \"al.exe\" in two locations. 1) Under the \"x64\\\" processor specific directory which is generated based on SdkToolsPath 2) The x86 specific directory under \"x64\\\" which is specified by the SDKToolsPath property. You may be able to solve the problem by doing one of the following:  1) Set the \"SDKToolsPath\" property to the location of the Microsoft Windows SDK.\r\n```\r\n\r\nI would like to see this fixed in msbuild itself (to save many people's headaches), but the workaround helps for now.\r\n\r\nNote: I only get the problem when I add a second localized resource file. With just one resx file everything is fine, but adding a localized file (for example `filename.resx` and `filename.fr.resx`) results in the warning. I get one warning for each additional localized file.",
        "createdAt": "2020-12-24T09:18:44Z",
        "updatedAt": "2020-12-24T09:36:24Z",
        "author": {
          "login": "jeroenvdbrink"
        }
      },
      {
        "body": "Note to self: get a repro of this.",
        "createdAt": "2021-01-13T16:57:23Z",
        "updatedAt": "2021-01-13T16:57:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks for the fix. Do you know which future update of Visual Studio will contain the fix?",
        "createdAt": "2021-04-14T22:21:28Z",
        "updatedAt": "2021-04-14T22:21:28Z",
        "author": {
          "login": "CyberSinh"
        }
      },
      {
        "body": "@CyberSinh This should release with VS 16.10 preview 2 ",
        "createdAt": "2021-04-14T22:25:34Z",
        "updatedAt": "2021-04-14T22:25:34Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I installed Visual Studio 16.10 RTM, and the issue is still here.\r\nIs that expected? Thanks.",
        "createdAt": "2021-05-25T19:37:09Z",
        "updatedAt": "2021-05-25T19:37:09Z",
        "author": {
          "login": "CyberSinh"
        }
      },
      {
        "body": "@CyberSinh Definitely not \ud83d\ude1f Could you provide [binlogs of your build](aka.ms/msbuild/binlog)? Also let me know if you'd rather provide them more securely in a feedback ticket.",
        "createdAt": "2021-05-25T19:41:17Z",
        "updatedAt": "2021-05-25T19:41:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The issue seems to be still here if the project is rebuilt. \r\n\r\nPlease find below the msbuild binlog\r\n[msbuild.binlog.log](https://github.com/dotnet/msbuild/files/6542435/msbuild.binlog.log)",
        "createdAt": "2021-05-25T21:20:18Z",
        "updatedAt": "2021-05-25T21:20:18Z",
        "author": {
          "login": "CyberSinh"
        }
      },
      {
        "body": "@CyberSinh I think I see the issue.\r\n\r\nCould you test something for me? I'm fairly confident that adding this command line argument will fix your build: `/p:SdkToolsPathMaybeWithx64Architecture=\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\x64\\\"`. If it fails, providing another binlog would help greatly.\r\n\r\nEdit: If it does fail, providing a minimal project to reproduce this issue would also help quite a bit ",
        "createdAt": "2021-05-25T21:55:42Z",
        "updatedAt": "2021-05-25T21:59:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "No more warning with your command line argument. Well done!\r\nNow, what is the definitive fix?",
        "createdAt": "2021-05-25T22:24:24Z",
        "updatedAt": "2021-05-25T22:24:24Z",
        "author": {
          "login": "CyberSinh"
        }
      },
      {
        "body": "@CyberSinh To use the variable I created in the original PR \ud83d\ude05 I overlooked it during a refactor of that PR. See https://github.com/dotnet/msbuild/pull/6484\r\n\r\nA temporary fix for your project would be to add a property group that defines `SdkToolsPathMaybeWithx64Architecture` to that same path. If your build doesn't _always_ build as x64, you can condition it based off of `PlatformTarget`. The logic for how I did it is shown here: \r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3738-L3741",
        "createdAt": "2021-05-25T22:48:50Z",
        "updatedAt": "2021-05-25T22:48:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "There is some kind of a problem with multi-targeted builds and setting `SdkToolsPathMaybeWithx64Architecture` doesn't help.\r\nPlease check out the [al1073.binlog.zip](https://github.com/dotnet/msbuild/files/6547293/al1073.binlog.zip). While the `netstandard2.0` TFM build works fine, invoking x64 al.exe for `GenerateSatelliteAssemblies` target's `AL` task, the `net5.0` one invokes the x86 one.\r\n",
        "createdAt": "2021-05-26T14:13:04Z",
        "updatedAt": "2021-05-26T14:13:04Z",
        "author": {
          "login": "onyxmaster"
        }
      },
      {
        "body": "@onyxmaster I do see that net5.0 isn't calling the x64 al.exe. Is `SdkToolsPathMaybeWithx64Architecture` set for both your netstandard2.0 and net5.0 projects? I don't see it defined in the net5.0 build.\r\n\r\nCould you do a command line build of your project and provide that binlog? Should look something like `msbuild your.sln /bl` on a dev command prompt.",
        "createdAt": "2021-05-26T19:42:56Z",
        "updatedAt": "2021-05-26T19:42:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "My apologies; it appears to be some fluke in VS 16.10. After cleaning VS temp folder `.vs` and rebuilding from scratch, the issue is gone, `SdkToolsPathMaybeWithx64Architecture` works just fine.",
        "createdAt": "2021-05-27T09:04:36Z",
        "updatedAt": "2021-05-27T09:04:36Z",
        "author": {
          "login": "onyxmaster"
        }
      },
      {
        "body": "To be clear for those hitting this, the workaround should be very similar to the workaround in the OP. Add this to your projects that need it, or into a `Directory.Build.props` file in your directory containing your projects:\r\n\r\n```xml\r\n<Target Name=\"FixAL1703Warning\" BeforeTargets=\"GenerateSatelliteAssemblies\" Condition=\"'$(PlatformTarget)' == 'x64'\">\r\n    <Message Text=\"Adjusting SDK tools directory to use x64 version of AL.EXE\" />\r\n    <PropertyGroup>\r\n      <SdkToolsPathMaybeWithx64Architecture>$(TargetFrameworkSDKToolsDirectory)$(PlatformTarget)\\</SdkToolsPathMaybeWithx64Architecture>\r\n    </PropertyGroup>\r\n</Target>\r\n```",
        "createdAt": "2021-05-27T17:26:19Z",
        "updatedAt": "2021-05-27T17:26:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "So we figured out what the fix is for this and it'll be released along with 16.11 in the coming months. The workaround (in the post just above this) should be used in 16.10 for the time being. For those hitting this pre-16.10, the original workaround in the OP should solve your issue. Will leave the issue open until the fix is out \ud83d\ude42",
        "createdAt": "2021-05-27T17:31:15Z",
        "updatedAt": "2021-05-27T17:31:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "With Visual Studio 2022, I'm getting this warning for every single C# 0x86-targeted executable project with a resource file.\r\nThis is quite irksome...",
        "createdAt": "2021-11-15T11:04:25Z",
        "updatedAt": "2021-11-15T11:13:55Z",
        "author": {
          "login": "ContentsMayVary"
        }
      },
      {
        "body": "Can someone who's running into this supply a sample project that reproduces this? Or supply [a binlog](https://aka.ms/msbuild/binlog) to  [this feedback ticket](https://developercommunity.visualstudio.com/t/Warning-AL1073-when-compiling-x86-NET-F/1582168) where it'll be confidential?\r\n\r\nIt sounds like a reverse issue of the original bug \ud83d\ude15",
        "createdAt": "2021-11-15T17:14:57Z",
        "updatedAt": "2021-11-15T17:14:57Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos see my comment: https://developercommunity.visualstudio.com/t/Warning-AL1073-when-compiling-x86-NET-F/1582168#T-N1584478",
        "createdAt": "2021-11-15T18:22:40Z",
        "updatedAt": "2021-11-15T18:22:40Z",
        "author": {
          "login": "Thieum"
        }
      },
      {
        "body": "### Workaround\r\nFor those that hit any issue related to this in the future: set the property `ALToolPath` in some `.targets` file to`TargetFrameworkSDKToolsDirectory` like so:\r\n\r\n```xml\r\n<PropertyGroup>\r\n\t\t<!-- You could also condition this based on $(PlatformTarget) -->\r\n        <AlToolPath>$(TargetFrameworkSDKToolsDirectory)</AlToolPath>\r\n</PropertyGroup>\r\n```\r\n### Why it works\r\nAlToolPath is an override for the path that the AL tool would look for. If you need AL to find the x64 tool, append `x64\\` to that path. Note the x86 version of the tool is located directly in `TargetFrameworkSDKToolsDirectory`.\r\n\r\n### The Underlying Issue\r\nThe AL task looks for its own `.exe` based on the current processor architecture. This means an x64 VS or MSBuild will find the x64 AL tool, where previously it found the x86 AL tool that caused the same issue when targeting x64.\r\n\r\nUse the workaround in the meantime while we patch this. Thanks @Thieum for supplying the repro project & binlog!",
        "createdAt": "2021-11-15T20:00:43Z",
        "updatedAt": "2021-11-15T20:01:45Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos Can the variable `ALToolPath ` be set directly in the csproj like this: https://github.com/Thieum/AL1073-Repro/commit/b1ec93c47d242392addba370e81edd14f565fed9 ?\r\n\r\nIt doesn't seem to fix the issue on my side.",
        "createdAt": "2021-11-15T20:59:31Z",
        "updatedAt": "2021-11-15T20:59:31Z",
        "author": {
          "login": "Thieum"
        }
      },
      {
        "body": "@Thieum It can be set directly in the project, but it would have to be in a target so `TargetFrameworkSDKToolsDirectory` could be defined beforehand. If it's not in a target then `TargetFrameworkSDKToolsDirectory` won't be defined by the time msbuild sets the `AlToolPath` property.",
        "createdAt": "2021-11-15T22:18:58Z",
        "updatedAt": "2021-11-15T22:18:58Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "That's the workaround that works for me inside the project:\r\n\r\n```\r\n    <Target Name=\"ALBeforeBuild\" BeforeTargets=\"PrepareForBuild\">\r\n        <PropertyGroup>\r\n            <AlToolPath>$(TargetFrameworkSDKToolsDirectory)</AlToolPath>\r\n        </PropertyGroup>\r\n    </Target>\r\n```",
        "createdAt": "2021-11-17T18:11:34Z",
        "updatedAt": "2021-11-17T18:11:34Z",
        "author": {
          "login": "Thieum"
        }
      },
      {
        "body": "If this is closed, why is the issue still there in VS 2022 v. 17.0.5?\r\n\r\nWhat am I missing?\r\n",
        "createdAt": "2022-01-24T14:46:00Z",
        "updatedAt": "2022-01-24T14:46:00Z",
        "author": {
          "login": "gallettoNL"
        }
      },
      {
        "body": "@gallettoNL the latest fix was merged into the main branch but unfortunately hasn't made it into 17.0.*. It will first appear in 17.1 which is already available as a preview.\r\nhttps://visualstudio.microsoft.com/vs/preview/",
        "createdAt": "2022-01-24T14:54:43Z",
        "updatedAt": "2022-01-24T14:54:43Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Ok, @ladipro, stanx!",
        "createdAt": "2022-01-24T14:58:28Z",
        "updatedAt": "2022-01-24T14:58:28Z",
        "author": {
          "login": "gallettoNL"
        }
      },
      {
        "body": "I can confirm that this appears to be fixed in Visual Studio 2022 version 17.1 that was recently released.",
        "createdAt": "2022-02-23T12:06:36Z",
        "updatedAt": "2022-02-23T12:06:36Z",
        "author": {
          "login": "ContentsMayVary"
        }
      },
      {
        "body": "OK thanks!\r\n\r\nWill de Haan\r\n\r\n***@***.***\r\n\r\nLievestro Software B.V.\r\n\r\nT.    +31 (0) 573 43 84 44\r\nE.    ***@***.******@***.***>\r\nI.     www.lievestro.nl<http://www.lievestro.nl/>\r\nNormaliter werk ik op maandag, dinsdag, woensdag en vrijdag voor Lievestro.\r\n\r\nOp dit bericht is een disclaimer<http://www.lievestro.nl/disclaimer> van toepassing. Aan dit bericht kunnen geen rechten worden ontleend.\r\nLievestro Software B.V. is ingeschreven bij de Kamer van Koophandel onder nummer 09158210.\r\nStatutaire zetel: Ruurlo.\r\n\r\n\r\n\r\n\r\nVan: ContentsMayVary ***@***.***>\r\nVerzonden: woensdag 23 februari 2022 13:07\r\nAan: dotnet/msbuild ***@***.***>\r\nCC: Will de Haan ***@***.***>; Mention ***@***.***>\r\nOnderwerp: Re: [dotnet/msbuild] Warning AL1073 when .resx files is compiled under x64 (#5981)\r\n\r\n\r\nI can confirm that this appears to be fixed in Visual Studio 2022 version 17.1 that was recently released.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/msbuild/issues/5981#issuecomment-1048715064>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AS5BTQMLBFQ2QSODTZ47443U4TEVTANCNFSM4VEKAURQ>.\r\nTriage notifications on the go with GitHub Mobile for iOS<https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android<https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>\r\n",
        "createdAt": "2022-03-22T15:26:56Z",
        "updatedAt": "2022-03-22T15:26:56Z",
        "author": {
          "login": "gallettoNL"
        }
      },
      {
        "body": "Version 17.3.6 have this problem when I work on .net 3.5 project\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\t\tTask attempted to find \"AxImp.exe\" in two locations. 1) Under the \"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\\" processor specific directory which is generated based on SdkToolsPath 2) The x86 specific directory under \"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\\" which is specified by the SDKToolsPath property. You may be able to solve the problem by doing one of the following:  1) Set the \"SDKToolsPath\" property to the location of the Microsoft Windows SDK.\t\t\r\n```\r\n\r\nwhat should I do?",
        "createdAt": "2023-01-25T13:33:07Z",
        "updatedAt": "2023-01-25T13:33:07Z",
        "author": {
          "login": "ericsia"
        }
      }
    ]
  }
}