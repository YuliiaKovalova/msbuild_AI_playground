{
  "number": 8008,
  "title": "Breaking change in linebreak handling in 7.0 RC1",
  "body": "### Description\n\nI'm unsure if this is an issue in `dotnet run` or in the underlying runtime/libraries, so please redirect elsewhere if needed. Also, I don't know if this is a deliberate change.\r\n\r\n### Customer impact\r\n\r\nThe impact of this change is that existing code that renders to the console produces corrupt output. It seems to be that, in the past, a Unix-style `\\n` was enough to produce normal newline behaviors, whereas this has changed and now it only works on Windows if you output `\\r\\n`. Our cross-platform compatibility has been reduced.\n\n### Reproduction Steps\n\n1. Create a new console app (`dotnet new console`)\r\n2. Change the contents of `Program.cs` to be `Console.WriteLine(\"Line1\\nLine2\");`\r\n3. Run it on Windows in either the *Terminal* app or the old-school console (i.e., `cmd.exe`) using the command `dotnet run`\r\n\n\n### Expected behavior\n\nIn 7.0 preview 7 (I tried 7.0.100-preview.7.22377.5) and earlier, the output is:\r\n\r\n```\r\nLine1\r\nLine2\r\n```\r\n\r\nThis is the expected and desired output\n\n### Actual behavior\n\nStarting from 7.0 RC1 and still happening with RC2 builds, you get:\r\n\r\n```\r\nLine1\r\n     Line2\r\n```\n\n### Regression?\n\nYes, worked in 7.0.100-preview.7.22377.5\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\nWindows 11 x64\r\nWorks in 7.0.100-preview.7.22377.5\r\nFails in 7.0.100-rc.1.22431.12 and 7.0.100-rc.2.22463.6\n\n### Other information\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2022-09-21T08:55:09Z",
  "updatedAt": "2024-02-21T17:00:04Z",
  "closedAt": "2022-09-30T22:34:52Z",
  "author": {
    "login": "SteveSandersonMS"
  },
  "labels": [
    "bug",
    "Area: Server",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "baronfel"
      },
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.4"
  },
  "comments": {
    "nodes": [
      {
        "body": "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\n\nI'm unsure if this is an issue in `dotnet run` or in the underlying runtime/libraries, so please redirect elsewhere if needed. Also, I don't know if this is a deliberate change.\r\n\r\n### Customer impact\r\n\r\nThe impact of this change is that existing code that renders to the console produces corrupt output. It seems to be that, in the past, a Unix-style `\\n` was enough to produce normal newline behaviors, whereas this has changed and now it only works on Windows if you output `\\r\\n`. Our cross-platform compatibility has been reduced.\n\n### Reproduction Steps\n\n1. Create a new console app (`dotnet new console`)\r\n2. Change the contents of `Program.cs` to be `Console.WriteLine(\"Line1\\nLine2\");`\r\n3. Run it on Windows in either the *Terminal* app or the old-school console (i.e., `cmd.exe`) using the command `dotnet run`\r\n\n\n### Expected behavior\n\nIn 7.0 preview 7 (I tried 7.0.100-preview.7.22377.5) and earlier, the output is:\r\n\r\n```\r\nLine1\r\nLine2\r\n```\r\n\r\nThis is the expected and desired output\n\n### Actual behavior\n\nStarting from 7.0 RC1 and still happening with RC2 builds, you get:\r\n\r\n```\r\nLine1\r\n     Line2\r\n```\n\n### Regression?\n\nYes, worked in 7.0.100-preview.7.22377.5\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\nWindows 11 x64\r\nWorks in 7.0.100-preview.7.22377.5\r\nFails in 7.0.100-rc.1.22431.12 and 7.0.100-rc.2.22463.6\n\n### Other information\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>SteveSandersonMS</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Console`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
        "createdAt": "2022-09-21T08:55:19Z",
        "updatedAt": "2022-09-21T08:55:19Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Looks like a `dotnet run` issue. Could not reproduce it on a published app, or when the SDK version is `6.0.400`, and on the RC1 SDK it reproduces when the app targets both .NET 6 and .NET 7.",
        "createdAt": "2022-09-21T10:10:36Z",
        "updatedAt": "2022-09-21T10:10:36Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "> Looks like a dotnet run issue\r\n\r\nYes, it does. I noticed that:\r\n\r\n * The problem does occur when you use `dotnet run`\r\n * The problem does *not* occur when you use `dotnet run --no-build`\r\n\r\n... so it seems like `dotnet run` is doing something different between these two cases. Also the problem does not occur if you directly invoke `dotnet bin\\Debug\\net7.0\\MyApp.dll`.",
        "createdAt": "2022-09-21T12:28:29Z",
        "updatedAt": "2022-09-21T12:28:29Z",
        "author": {
          "login": "SteveSandersonMS"
        }
      },
      {
        "body": "I've moved this issue over to the SDK repo since the CLI seems most likely to be the culprit.",
        "createdAt": "2022-09-21T17:16:33Z",
        "updatedAt": "2022-09-21T17:16:33Z",
        "author": {
          "login": "jeffhandley"
        }
      },
      {
        "body": "Definitely seeing this as well in rc1. I looked at [the diff between preview7 and rc1](https://github.com/dotnet/sdk/compare/v7.0.100-preview.7.22377.7...v7.0.100-rc.1.22429.2) for `dotnet-run` and nothing jumped out at me directly:\r\n\r\n![image](https://user-images.githubusercontent.com/573979/192162569-ba8dc92f-0635-4c21-aa1a-ff603d587cce.png)\r\n\r\nThis is something we _must_ fix before release, the UX is super bad right now.",
        "createdAt": "2022-09-25T19:56:29Z",
        "updatedAt": "2022-09-25T19:56:29Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I think this might be `dotnet` cli specific. I made a simple console app that Process.Start's the first argument passed to it, and another app that emits manual \\n and \\r\\n sequences to test the line breaking, and that runner application doesn't exhibit the same line break mangling that `dotnet run` does. I think that removes the runtime from consideration here.",
        "createdAt": "2022-09-26T14:52:03Z",
        "updatedAt": "2022-09-26T14:52:03Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> I think that removes the runtime from consideration here.\r\n\r\nIt definitely *seems* like CLI is more likely to be responsible, but it depends on whether there was actually a change to CLI code that triggered this. We'll know for sure when someone tracks down the bug, but until then, it remains unknown whether `dotnet run` changed in some way that caused this, or whether the underlying runtime or libraries changed  to affect how `dotnet run` behaves.",
        "createdAt": "2022-09-26T15:49:51Z",
        "updatedAt": "2022-09-26T15:49:51Z",
        "author": {
          "login": "SteveSandersonMS"
        }
      },
      {
        "body": "I don't know whether this is the cause, but MSBuild sets DISABLE_NEWLINE_AUTO_RETURN here <https://github.com/dotnet/msbuild/blob/c7d758591e31a066212058d589759c580336deff/src/Build/BackEnd/Client/MSBuildClient.cs#L365>\n\nIt came from <https://github.com/dotnet/msbuild/pull/7630>.",
        "createdAt": "2022-09-26T16:46:47Z",
        "updatedAt": "2022-09-26T16:53:49Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Brilliant, @KalleOlaviNiemitalo - that did it. I took the code from MSBuild and put it into my sample projects and was able to override the console mode to get `dotnet run` to return to its old behavior:\r\n\r\n![image](https://user-images.githubusercontent.com/573979/192347310-51f1d28b-fbe7-472d-bd73-e519a9d558af.png)\r\n\r\nI think this means that `dotnet run` needs to either tell MSBuild not to toggle VT mode on (not ideal), or reset the terminal to the starting state before invoking the runnable application. Will chat with some other folks and get feedback.  @rainersigwald @dsplaisted would appreciate y'all's thoughts here.",
        "createdAt": "2022-09-26T17:59:12Z",
        "updatedAt": "2022-09-26T18:04:34Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Also disabling MSBuild Server prevents this console mode change as well:\r\n\r\n![image](https://user-images.githubusercontent.com/573979/192348209-6611e8ff-458b-442f-bae8-d3e48f1659b6.png)\r\n\r\nNote the console mode returns to 7 in this case.",
        "createdAt": "2022-09-26T18:03:21Z",
        "updatedAt": "2022-09-26T18:03:21Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@Forgind do you remember why you wanted/needed `DISABLE_NEWLINE_AUTO_RETURN`?",
        "createdAt": "2022-09-26T18:04:56Z",
        "updatedAt": "2022-09-26T18:04:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Does MSBuild invoke the runnable application, or does .NET SDK invoke it after MSBuild has finished?",
        "createdAt": "2022-09-26T18:10:23Z",
        "updatedAt": "2022-09-26T18:10:23Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "The latter - the SDK invokes the runnable application after invoking MSBuild (typically in-process). Note that this issue will not trigger if you skip restore and/or build via the `--no-restore` and `--no-build` options.",
        "createdAt": "2022-09-26T18:13:10Z",
        "updatedAt": "2022-09-26T18:13:10Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "MSBuildClient.Execute changes the console output mode and then loops until the build finishes; I think it (not .NET SDK) should restore the mode. Although the current problem is caused by DISABLE_NEWLINE_AUTO_RETURN and not by ENABLE_VIRTUAL_TERMINAL_PROCESSING, both flags should be restored.",
        "createdAt": "2022-09-27T19:33:15Z",
        "updatedAt": "2022-09-27T19:40:01Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}