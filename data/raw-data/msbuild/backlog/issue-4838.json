{
  "number": 4838,
  "title": "Nuget dependencies not found when using reflection",
  "body": "### Steps to reproduce\r\n\r\nI have a project P1 containing a class C1 and C2. I publish it as a nuget package P1.\r\n\r\nIn an another solution, I create a console project P2, add a nuget reference to P1.\r\nThe code in the project P2 tries to find by reflection C1.\r\n\r\nFrom Visual Studio (2017 & 2019), I start the P2 project (F5). \r\n\r\n### Expected  behavior\r\n\r\nI should find the type C1.\r\n\r\n### Actual behavior\r\n\r\nC1 and the P1 assembly does not exists.\r\n\r\nIf I publish the project, the P1 dll is present and the app works fine.\r\n\r\nStill in Visual Studio, if I had a direct reference to C2 in the P2 project, then I can find C1 by reflection.\r\n\r\nVisual Studio (msbuild) seems to make 'optimizations' and does not provide correctly the nuget dependencies if they are only used by reflection.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise>msbuild /version\r\nMicrosoft (R) Build Engine version 16.3.1+1def00d3d for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.3.1.50202\r\n```\r\n\r\nOS info:\r\n![image](https://user-images.githubusercontent.com/20680042/67275102-27330a80-f4c2-11e9-9038-5bafc7963c64.png)\r\n\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2019-10-22T09:52:08Z",
  "updatedAt": "2024-02-21T16:30:29Z",
  "closedAt": null,
  "author": {
    "login": "ldubrois"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you share what your project looks like? And what the nuspec for p1 looks like as well, or the package?",
        "createdAt": "2019-10-22T16:46:51Z",
        "updatedAt": "2019-10-22T16:46:51Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "I've created a very dumb project to illustrate the point : [MS_NugetBug_Sample.zip](https://github.com/microsoft/msbuild/files/3760901/MS_NugetBug_Sample.zip)\r\n\r\nJust with F5 on P2, the type is not found. If you publish the app, the type is found.\r\n\r\nIf you uncomment the first line in P2, making an explicit reference to P1, the with F5 and publish, it does work.\r\n\r\nWhile making the sample project I've constated a difference between net core app 2.2 and net core app 3.0. The failing case in 2.2 is passing in 3.0. \r\n\r\nIn 2.2, the P1.dll file **is not** in the debug build directory, while with the exact same code, in 3.0, P1.dll **is** in the debug build directory.",
        "createdAt": "2019-10-23T07:54:24Z",
        "updatedAt": "2019-10-23T07:54:24Z",
        "author": {
          "login": "ldubrois"
        }
      },
      {
        "body": "Hi, \r\n\r\nAny news on this issue ?\r\n\r\nRegards,\r\n\r\nLuke",
        "createdAt": "2019-11-13T07:45:49Z",
        "updatedAt": "2019-11-13T07:45:49Z",
        "author": {
          "login": "ldubrois"
        }
      },
      {
        "body": "@ldubrois I'm just starting my search on this so take this with a grain of salt.\r\n\r\nThe reason reflection isn't finding your stuff is because it isn't there. The NuGet package is a .zip containing your .dlls, not the .dlls themselves. If you wanted to you could extract the .dlls out of it at runtime, but that seems hacky and I'm trying to avoid doing this myself.",
        "createdAt": "2020-03-20T17:11:56Z",
        "updatedAt": "2020-03-20T17:11:56Z",
        "author": {
          "login": "bananacles"
        }
      }
    ]
  }
}