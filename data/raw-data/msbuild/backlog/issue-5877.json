{
  "number": 5877,
  "title": "How to pass item (ITaskItem) with all metadata into the task?",
  "body": "When you use `%(Item.Identity)` syntax then `MSBuild` creates new item with the same `Identity`. So, all other metadata is lost!\r\n\r\n    <PrintItem Reference=\"%(ReferencePath.Identity)\" /> // Metadata is lost\r\n\r\n    <UsingTask TaskName=\"PrintItem\" TaskFactory=\"CodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\r\n        <ParameterGroup>\r\n            <Item ParameterType=\"Microsoft.Build.Framework.ITaskItem\" Required=\"true\" />\r\n        </ParameterGroup>\r\n        <Task>\r\n            <Using Namespace=\"System\" />\r\n            <Code Type=\"Fragment\" Language=\"cs\">\r\n                <![CDATA[\r\n                Log.LogMessage( MessageImportance.High, \"Item: {0}\", Item );\r\n                foreach (var metadata in Item.MetadataNames.Cast<string>()) {\r\n                    Log.LogMessage( MessageImportance.High, \"Metadata: {0} = {1}\", metadata, Item.GetMetadata( metadata ) );\r\n                }\r\n                ]]>\r\n            </Code>\r\n        </Task>\r\n    </UsingTask>\r\n\r\n    <ItemGroup>\r\n        <NewItem Include=\"%(Item.Identity)\" /> // Metadata is lost\r\n    </ItemGroup>\r\n\r\nIs there a way to avoid losing metadata?",
  "state": "OPEN",
  "createdAt": "2020-11-11T23:09:16Z",
  "updatedAt": "2024-01-31T08:22:40Z",
  "closedAt": null,
  "author": {
    "login": "Denis535"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This works but looks strange.\r\n\r\n    <PrintItem Reference=\"@(ReferencePath)\" Condition=\"%(ReferencePath.Identity) != ''\" />",
        "createdAt": "2020-11-11T23:11:57Z",
        "updatedAt": "2020-11-11T23:11:57Z",
        "author": {
          "login": "Denis535"
        }
      },
      {
        "body": "That's the standard idiom.",
        "createdAt": "2020-11-12T22:36:07Z",
        "updatedAt": "2020-11-12T22:36:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ideally the task accepts the list and loops over it -- that is why it looks clunky when you have to pass one at a time.",
        "createdAt": "2020-11-13T23:12:25Z",
        "updatedAt": "2020-11-13T23:12:25Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}