{
  "number": 155,
  "title": "Implement task loading for .NET Core",
  "body": "The host we are currently using for .NET Core only supports loading assemblies from the app folder.  In the future, we may want to write an [AssemblyLoadContext](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Runtime/Loader/AssemblyLoadContext.cs) and host to allow loading tasks from arbitrary paths.\n\nFor now, we can simply use Assembly.Load() with the simple name of the assembly (as [xUnit does](https://github.com/xunit/xunit/blob/4e39f2c784fae4e864c67743f825c5f811c04d42/src/xunit.runner.utility/Frameworks/v2/Xunit2.cs#L46)) to load an assembly from the app folder.\n\nClasses we'll need to update may include AssemblyTaskFactory, TaskLoader, and TaskHost.  Let's use FEATURE_ASSEMBLY_LOADFROM as the feature flag for loading assemblies from arbitrary paths, and FEATURE_APPDOMAIN for AppDomain remoting.\n\nThis will remove one of the cases where AppDomains are used (see #146).\n",
  "state": "CLOSED",
  "createdAt": "2015-08-18T18:18:44Z",
  "updatedAt": "2024-02-21T17:31:02Z",
  "closedAt": "2015-11-17T05:32:39Z",
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "Sprint 90"
  },
  "comments": {
    "nodes": [
      {
        "body": "Example of how to do this in the Roslyn code: https://github.com/dotnet/roslyn/blob/d6f8dc441a1a3b749b5082579f582892236b1584/src/Compilers/Helpers/CoreClrAnalyzerAssemblyLoader.cs\n",
        "createdAt": "2015-09-30T19:10:57Z",
        "updatedAt": "2015-09-30T19:10:57Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}