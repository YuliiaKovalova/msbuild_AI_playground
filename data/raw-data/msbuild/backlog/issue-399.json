{
  "number": 399,
  "title": "Provide a method to execute an external command without using a shell",
  "body": "The `Exec` task always spawns a shell to invoke the external command.  This is convenient, but non-portable, insecure (though not exploitable here), and requires non-portable escaping.\n\nA better solution is to provide a way to execute an external command without using a shell.  It should have the following properties:\n- Lists are respected.\n- Any character can be passed to an external command.  No manual escaping required.\n- Special characters in property values do not cause problems.\n- No shell is invoked, unless the external command _is_ the shell.\n- It should be possible to pass multiple arguments to the shell\n- The syntax should be something other than requiring a seperate XML element per argument.\n",
  "state": "OPEN",
  "createdAt": "2015-12-10T00:37:09Z",
  "updatedAt": "2025-06-02T08:26:09Z",
  "closedAt": null,
  "author": {
    "login": "DemiMarie"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "help wanted",
    "needs-design",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Something like this could be as simple as a new boolean parameter to `Exec` that controls whether it generates and runs the shell script.\n\nCan you please elaborate on why you want this?  You mention escaping a couple of times but is that the primary motivating factor?\n\nI'm also a bit confused by some of the properties you listed.  Many of them are \"free\" by invoking a task, but \"the syntax should be something other than requiring a seperate XML element per argument\" doesn't seem to fit, so I must be misunderstanding.\n",
        "createdAt": "2015-12-10T15:27:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The primary motivating factor comes from reading through MSBuild's own build files.  These use inadequate escaping when invoking external commands.\n\nOn *nix, _any_ character other than `NUL` and `/` is valid in a file name, and any character other than `NUL` is valid in a path name.  Therefore, placing filenames in quotes is not sufficient -- one must properly escape the filename for the shell that is being invoked.  This is platform-specific, tedious, and error-prone.\n\nA much better solution is to have a task that has an `ITaskItem[]` parameter.  This can handle multiple arguments correctly, without using a shell.  Redirection would be handled using explicit parameters to the task.  Pipes might require temporary files, or it might be possible to have an array of tasks connected to each other.  The existing `Exec` task sould be retained, but possibly deprecated, since it is so easy to misuse.\n",
        "createdAt": "2015-12-15T02:30:31Z",
        "author": {
          "login": "DemiMarie"
        }
      },
      {
        "body": "This is something we would consider as long as we maintain current compatibility.\n",
        "createdAt": "2016-01-26T23:47:29Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "This is potentially more interesting in a world where we have multiple runtimes. You might want to say, for example,\n\n``` XML\n<ExecProcess Executable=\"tool.exe\"\n    Host=\"corerun\"\n    Arguments=\"@(ToolArguments)\" />\n```\n\nWe could provide a well-known property for, say, `$(MSBuildCurrentRuntimeHost)` that build extenders could use.\n",
        "createdAt": "2016-06-23T14:00:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> We could provide a well-known property for, say, $(MSBuildCurrentRuntimeHost) that build extenders could use.\n\n.. and the default should be to use the current runtime host with this task.\n\nMaybe we can also provide properties for `$(NetCoreRuntimeHostPath)` and similar for Mono, which msbuild would internally resolve to the relevant paths.\n",
        "createdAt": "2016-06-23T14:20:55Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Request for current-runtime property: #720.\n\nI'm not sure the default should always be to use the current host. It should definitely be easy to call out to a platform-native application **and** to call out to a netstandard app that will run on the current runtime.\n",
        "createdAt": "2016-06-23T18:59:51Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}