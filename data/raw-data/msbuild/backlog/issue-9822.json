{
  "number": 9822,
  "title": "Make it possible to specify default enablement and severity of Rules (based on SdkAnalysisLevel)",
  "body": "### Background\n\nCurrently the rules have fixed defaults - overridable by customer in editorconfig.\nThe idea of 'WarningWaves' is to slowly enable and increase severity of specific rules - to allow users to onboard with lower noise and over time get more strictness.\nWe should not increase number of rules and their severity simply with new versions of MSBuild - that would break VS upgrading scenarios. Customers with unchanged projects/solutions should get identical reports regardless of MSBuild version they are using,\nhowever they should get more rules and more strictness based on some explicit gesture of theirs. ~~Increasing the version in TFM feels like a good candidate.~~ `SdkAnalysisLevel` was designed for this specifically.\n\n### Goal\n\n* Study the design doc - https://github.com/dotnet/designs/pull/308 and propose the solution.\n* Built-in analyzers are priority in this, as acquired analyzers [nuget/project/binary] are imported already based on an explicit gesture.\n* But if we design/code this so that type of analyzer (built-in vs acquired) doesn't matter - we can expose the functionality to both types.\n\n\n### Gotchas\n\n * For Visual Studio (so FullFW MSBuild) we very likely do not want to introduce breaking behavior without code change on user side\n * Different behavior (and even build succeeding vs failing) on commandline vs in VS might not be perceived good\n * The TFM is not know untill certain point in evaluation - so we might need buffer some potential input into analyzers or vice versa send all input unrestricted, but buffer output untill we are sure what the right configuration should be.\n * Similarly with $SdkAnalysisLevel as it is an MSBuild property. This is problematic - as until evaluation starts we would not know whether the enalyzer will be enabled or not - and some analyzers will need to request some extra data\n\n### Related\n\n* https://github.com/dotnet/designs/pull/308\n* [.NET SDK Breaking Changes proposal doc](https://microsoft.sharepoint.com/:w:/t/DotNetTeam/EZgVoZeq349Jn-tWaTWR8jwBXwNIT15NJfUJnFoF6IcfXg?e=ZvL02b)\n* [SdkAnalysisLevel proposal doc](https://microsoft.sharepoint.com/:w:/t/DotNetTeam/EeLfhyYdh4hOg-Ygb_RnXz0ByTVZww3EIsgQKGgey8kzQQ?e=YKmtJt)",
  "state": "CLOSED",
  "createdAt": "2024-03-05T14:06:50Z",
  "updatedAt": "2024-05-09T21:21:29Z",
  "closedAt": "2024-05-09T21:21:29Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Edit: We discussed offline and this is not relevant anymore.\r\n\r\n~~@JanKrivanek and @baronfel, for the disconnect between .NET SDK and VS, how would you feel about honoring the `SdkAnalysisLevel` property globally, so even in builds that don't use the .NET SDK?~~\r\n\r\n~~- Option 1: We never enable any analyzers for projects that don't use the .NET SDK or are not SDK-style at all. Users have to explicitly opt in with `.editorconfig`.~~\r\n~~- Option 2: We define the enabled-by-default set of analyzers for some of the most widely used non-SDK projects such as classic `.csproj` and `.vbproj`. We evolve this independently from `SdkAnalysisLevel` and use a different prop for it.~~\r\n~~- Option 3: Like 2 but we will call it `SdkAnalysisLevel` everywhere.~~\r\n\r\n~~Simple to dismiss with Option 1 but it seems unfortunate to not at least try to innovate outside of the .NET SDK and bring the benefits to many more users.~~\r\n",
        "createdAt": "2024-04-15T14:19:52Z",
        "updatedAt": "2024-04-19T14:48:47Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}