{
  "number": 3511,
  "title": "WPF baml out of sync after flipping assembly signing on/off",
  "body": "It happens when you have WPF project, build it, and then change SignAssembly to opposite. Resulting binaries will have embedded baml that references to previous state of assembly, so running it will result in crash.\r\n\r\n### Steps to reproduce\r\n1. Extract [WpfSign.zip](https://github.com/Microsoft/msbuild/files/2190760/WpfSign.zip). It's basic WPF hello world, with rudimentary exception display. Also it has it has strong name key file.\r\n2. Run `msbuild WpfSign.csproj`\r\n3. Run WpfSign.exe, it will show Hello World! window.\r\n4. Edit WpfSign.csproj, change `SignAssembly` to true\r\n5. Run `msbuild WpfSign.csproj` once again\r\n6. Run WpfSign.exe\r\n\r\n### Expected  behavior\r\nHello World! again.\r\n\r\n### Actual behavior\r\nWe've got exception:\r\n```\r\nSystem.Windows.Markup.XamlParseException\r\n  HResult=0x80131501\r\n  Message=Could not load file or assembly 'WpfSign, PublicKeyToken=null' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n  Source=PresentationFramework\r\n  StackTrace:\r\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\r\n   at System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\r\n   at System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream)\r\n   at System.Windows.Application.LoadBamlStreamWithSyncInfo(Stream stream, ParserContext pc)\r\n   at System.Windows.Application.LoadComponent(Uri resourceLocator, Boolean bSkipJournaledProperties)\r\n   at System.Windows.Application.DoStartup()\r\n   at System.Windows.Application.<.ctor>b__1_0(Object unused)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at WpfSign.App.Main()\r\n\r\nInner Exception 1:\r\nFileLoadException: Could not load file or assembly 'WpfSign, PublicKeyToken=null' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n```\r\n\r\n### Environment data\r\n```\r\nMicrosoft (R) Build Engine version 15.7.180.61344 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.7.180.61344\r\n```\r\nOS info:\r\nMicrosoft Windows 10\r\nVersion 1803 (OS Build 17134.165)",
  "state": "OPEN",
  "createdAt": "2018-07-13T00:38:23Z",
  "updatedAt": "2023-10-05T09:10:11Z",
  "closedAt": null,
  "author": {
    "login": "professor-k"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Is this issue somehow/somewhere closed or do we have some solution for it?",
        "createdAt": "2023-10-03T11:20:53Z",
        "updatedAt": "2023-10-03T11:20:53Z",
        "author": {
          "login": "Hujerek"
        }
      },
      {
        "body": "Just tested. It still reproduces as of .net 4.8.1 and msbuild 17.7.2. Yes, there is simple workaround: just wiping out bin/obj takes care of it. I discovered it hard way when our production builds (signed) run after develop builds (not signed) on the same build agent would crash. As same sources built on different agents, or even on same agent, but in different order would behave differently, it was extremely hard to figure out. And that's the reason why I bothered to log it. As for our case, I added piece of code that wipes bins/objs on every build, and that solved this issue (and probably some others similar too).",
        "createdAt": "2023-10-04T21:58:18Z",
        "updatedAt": "2023-10-04T21:58:18Z",
        "author": {
          "login": "professor-k"
        }
      },
      {
        "body": "Thanks, but it doesn't solve our problem. \r\nWe are using PackageReference mode for Nugets and our Nuget for signing. When the assembly is signed by using that Nuget, the BAML references aren't signed correctly. WPF assemblies contain BAML files as embedded resources (binary XAMLs) whose references are not correctly generated. As the result, that assembly cannot be loaded and following exception is raised: System.Windows.Markup.XamlParseException: 'Could not load file or assembly...\r\n\r\nWe temporarily changed the signing process of the assembly to be directly signed by .snk (not using that Nuget) to ensure the assembly is correctly signed. That works.\r\n",
        "createdAt": "2023-10-05T09:10:11Z",
        "updatedAt": "2023-10-05T09:10:11Z",
        "author": {
          "login": "Hujerek"
        }
      }
    ]
  }
}