{
  "number": 7357,
  "title": "Is there a build start property?",
  "body": "Per https://stackoverflow.com/questions/54278833/msbuild-build-start-property - we have a need to have the same (down to a second) build start property, that will be used as a label in all projects built in a traversal. Declaring a property as\r\n\r\n```xml\r\n<Now Condition=\"'$(Now)'==''\">$([System.DateTime]::Now.ToString('yyyyMMddHHmmss'))</Now>\r\n```\r\n\r\ncan have different value for different projects.",
  "state": "CLOSED",
  "createdAt": "2022-02-01T11:35:24Z",
  "updatedAt": "2024-02-21T14:09:57Z",
  "closedAt": "2022-03-29T08:07:52Z",
  "author": {
    "login": "stan-sz"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "What do you want to use it for? Can you use our [ETW traces](https://github.com/dotnet/msbuild/blob/main/documentation/specs/event-source.md)? There's one for Build, BuildProject, and MSBuildExe, which sound like different sides of what you're looking for. They come with stop events as well and extra information if that would be of value to you.",
        "createdAt": "2022-02-03T00:12:45Z",
        "updatedAt": "2022-02-03T00:12:45Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I'm looking for a way to pass the same piece of information (tag/label) that can be visible to all projects in a traversal.\r\nIn technical terms, expose https://github.com/dotnet/msbuild/blob/09bdfae164eac3b5c9027d803ffa513efaf91095/src/Build/Logging/SerialConsoleLogger.cs#L108 as MSBuild well-known property in a parseable form (so in projects we can use property functions to re-format the start time string).\r\nIdeally we'd get two new well-known properties:\r\n* `MSBuildStartTime` - the start of `msbuild.exe`\r\n* `MSBuildProjectStartTime` - the start of building current project",
        "createdAt": "2022-02-08T08:47:49Z",
        "updatedAt": "2022-02-08T08:47:49Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "@stan-sz Is the purpose of the timestamp to identify the build?\r\n\r\nAre you using a tool or service to build like Azure DevOps Pipelines? In AzDO Pipelines there is a set of environment variables passed to the build. The environment variables include `$(Build_BuildNumber)` which should be unique per build (and which can be custom configured to be a timestamp down to the second.) If you are not using Azure DevOps, I'm sure other similar tools have similar capabilities.\r\n\r\nIf you are not using a build tool and are invoking MSBuild against the .sln file, you can extend the solution with a [before.{solutionname}.sln.targets](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022#customize-the-solution-build) file. Note that the before|after.{solutionname}.sln.targets files are not honored by Visual Studio.\r\n\r\nHope that helps.",
        "createdAt": "2022-02-08T17:19:21Z",
        "updatedAt": "2022-02-08T17:19:21Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds yes, this is needed to identify the build, however, the purpose of this property would be to fall back to date/time in case the build is not executed in Azure DevOps (e.g. local builds).",
        "createdAt": "2022-02-18T10:26:37Z",
        "updatedAt": "2022-02-18T10:26:37Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "In many shops, local builds either are not given an identifier or are given a generic identifier like 'dev' or 'local'. This is because local builds are not considered 'official' and can't be used for releases. Local builds won't have the documented 'provenance' of a build linked to work items/issues, version control history, and test management.\r\n\r\nYou may know all of this already and you may have constraints that don't allow for identifying local builds differently and that is understandable. I'm only providing some context for why this is an unmet need.",
        "createdAt": "2022-02-18T15:25:59Z",
        "updatedAt": "2022-02-18T15:25:59Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds - would it be possible to have the property function evaluated in a msbuild command line (or through .rsp file) like:\r\n\r\n>msbuild ... /p:_BuildStartTime=$([System.DateTime]::Now.ToString('yyyyMMdd-HHmmss'))",
        "createdAt": "2022-12-08T15:29:57Z",
        "updatedAt": "2022-12-08T15:29:57Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "@stan-sz Values for properties passed on the command line are not evaluated for property references. I did a quick test to confirm. In your example `_BuildStartTime` will be set to the string \"$([System.DateTime]::Now.ToString('yyyyMMdd-HHmmss'))\" and not the current date/time.",
        "createdAt": "2022-12-08T15:52:35Z",
        "updatedAt": "2022-12-08T15:52:35Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Is it a reasonable feature request to have the command line args of `/p` be evaluated?",
        "createdAt": "2022-12-09T14:04:20Z",
        "updatedAt": "2022-12-09T14:04:20Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "I think that changing the behavior of `/p` would be a breaking change but a request to add a new switch might be reasonable.\r\n\r\nHowever, I think you are just trying to define the `_BuildStartTime` property early and you don't need any new features for that.\r\n\r\nAt the root of your repo you can add a [Directory.Build.props](https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022#directorybuildprops-and-directorybuildtargets) file with a property definition for `_BuildStartTime`:\r\n\r\n```XML\r\n<Project>\r\n  <!-- Chain this file with files of the same name -->\r\n  <Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))\" />\r\n\r\n  <PropertyGroup>\r\n    <_BuildStartTime Condition=\"'$(_BuildStartTime)' == ''\">$([System.DateTime]::Now.ToString('yyyyMMdd-HHmmss'))</_BuildStartTime>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nDefining a property doesn't mean that it needs to be used. `_BuildStartTime` can be left unused when the build is not local.",
        "createdAt": "2022-12-09T14:54:14Z",
        "updatedAt": "2022-12-09T14:54:14Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds that wouldn't be the _build_ start time, though--it'd be the _evaluation time of each project_, since properties are evaluated in each project.",
        "createdAt": "2022-12-09T15:06:33Z",
        "updatedAt": "2022-12-09T15:06:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes. That's true. My understanding is that would still work for @stan-sz but I could be wrong about that.",
        "createdAt": "2022-12-09T15:16:36Z",
        "updatedAt": "2022-12-09T15:16:36Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I am looking for a unique and same-for-all-projects date time value.",
        "createdAt": "2022-12-12T07:10:46Z",
        "updatedAt": "2022-12-12T07:10:46Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "The code I shared will not work then. It will generate a different value per project.\r\n\r\nWith the current implementation, I think you are back to having a project that runs first create the unique value as mentioned in the comments closing the PR.\r\n\r\nI think a feature request that would help would be to request that the `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets`, and the `Directory.Solution.props` and `Directory.Solution.targets` files are supported by builds within Visual Studio. Currently these files are only supported by command line builds. See \"[Customize the solution build](https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022#customize-the-solution-build)\". (I don't know if there already is or has been a feature request for this.)",
        "createdAt": "2022-12-12T13:12:47Z",
        "updatedAt": "2022-12-12T13:12:47Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Is there a file that msbuild creates at the start of the build that we could take the last write time of as an equivalent of build start time property?",
        "createdAt": "2023-02-16T09:19:01Z",
        "updatedAt": "2023-02-16T09:19:01Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "> Is there a file that msbuild creates at the start of the build that we could take the last write time of as an equivalent of build start time property?\r\n\r\nNo. There's no particular location that would make sense for such a file, since a build can be customized within projects to have different `OutDir` and other output folders, so we can't know when the build starts what would be a reasonable place to put it. There's also no reason for such a file currently.",
        "createdAt": "2023-02-16T14:18:37Z",
        "updatedAt": "2023-02-16T14:18:37Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}