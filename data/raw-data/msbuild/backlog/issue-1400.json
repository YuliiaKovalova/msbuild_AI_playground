{
  "number": 1400,
  "title": "Import from SDKs",
  "body": "This is related to #1392, but not a prerequisite for it.\r\n\r\nIt's currently difficult to determine what the path of an `<Import>` should be, because it requires knowing how to locate the file to be imported, using properties and relative paths.\r\n\r\n#1392 introduces the concept of an \"SDK\" in order to automatically import an `Sdk.props` before the user project and an `Sdk.targets` after it. But that's often not sufficiently granular: sometimes you need to override a target (so your definition must be ordered after the imported one), or set a property before importing an initial target.\r\n\r\n# Design\r\n```xml\r\n<Project>\r\n  <user prop here>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk/1.0.0.0\" />\r\n...\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk/1.0.0.0\" />\r\n  <user target here>\r\n</Project>\r\n```\r\n\r\nShould be syntactic sugar for something like\r\n\r\n```xml\r\n<Project>\r\n  <user prop here>\r\n  <Import Project=\"$(MSBuildSDKsPath)\\%(___MSBuildSDK.Name)\\%(___MSBuildSDK.Version)\\Sdk.props\" />\r\n...\r\n  <Import Project=\"$(MSBuildSDKsPath)\\%(___MSBuildSDK.Name)\\%(___MSBuildSDK.Version)\\Sdk.targets\" />\r\n  <user target here>\r\n</Project>\r\n```\r\n\r\nThis is a) easier to type than the existing mechanism requiring a rooted path and b) doesn't lose any generality, as #1392 does.",
  "state": "CLOSED",
  "createdAt": "2016-11-28T18:33:17Z",
  "updatedAt": "2024-02-21T17:23:56Z",
  "closedAt": "2017-02-06T16:08:28Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Feature: Sdks"
  },
  "comments": {
    "nodes": [
      {
        "body": "Similar for `UsingTask`?",
        "createdAt": "2016-12-13T19:39:51Z",
        "updatedAt": "2016-12-13T19:39:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As a workaround, I'm currently using\r\n`<Import Project=\"$(MSBuildSDKsPath)\\Microsoft.NET.SDK\\Sdk\\Sdk.targets\" />`\r\nbefore my custom targets. This works, but emits a warning which sits in the visual studio error list forever :-(\r\n\r\nWithout it not even AfterBuild was working, presumably because the implicit target import just redefined it.",
        "createdAt": "2016-12-20T08:01:01Z",
        "updatedAt": "2016-12-20T08:01:42Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "@gulbanana this is addressed in the newer implementation which is in PR now: https://github.com/Microsoft/msbuild/pull/1492\r\n\r\n",
        "createdAt": "2016-12-20T21:49:57Z",
        "updatedAt": "2016-12-20T21:49:57Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Great, I'll try it again in a later build.",
        "createdAt": "2016-12-21T04:06:02Z",
        "updatedAt": "2016-12-21T04:06:02Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "Any idea if #1492 is available on dotnet-cli dev builds?",
        "createdAt": "2017-01-17T05:55:14Z",
        "updatedAt": "2017-01-17T05:55:14Z",
        "author": {
          "login": "codito"
        }
      },
      {
        "body": "@codito Yes, it should be. Note that sometimes the \"latest\" link on the CLI homepage isn't actually the very latest.",
        "createdAt": "2017-01-17T13:01:37Z",
        "updatedAt": "2017-01-17T13:01:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I can confirm the fix is available on dotnet-cli `1.0.0-rc4-004527`. Thanks!",
        "createdAt": "2017-01-17T15:04:06Z",
        "updatedAt": "2017-01-17T15:04:06Z",
        "author": {
          "login": "codito"
        }
      },
      {
        "body": "Closing since this is implemented.\r\n\r\nOn further reflection, I don't think this is needed for `UsingTask`s. You can always have a .props file next to the task DLL that uses `$(MSBuildThisFileDirectory)` in its `UsingTask`.",
        "createdAt": "2017-02-06T16:08:28Z",
        "updatedAt": "2017-02-06T16:08:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It works great on VS2017 RTW without specifying an SDK version, like so:\r\n\r\n```xml\r\n<Project>\r\n\t<Import Project=\"SampleVsix.props\" />\r\n\t<Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\t<PropertyGroup>\r\n\t\t<TargetFrameworks Condition=\"'$(TargetFrameworks)' == ''\">net462;net461</TargetFrameworks>\r\n\t</PropertyGroup>\r\n\t<Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\t<Import Project=\"SampleVsix.targets\" />\r\n</Project>\r\n```",
        "createdAt": "2017-03-27T01:53:22Z",
        "updatedAt": "2017-03-27T01:53:22Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "This works for me as well. And in fact I have exactly the same scenario: A VSIX project that must import the language targets before the VSSDK targets.",
        "createdAt": "2017-03-30T18:52:11Z",
        "updatedAt": "2017-03-30T18:52:11Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}