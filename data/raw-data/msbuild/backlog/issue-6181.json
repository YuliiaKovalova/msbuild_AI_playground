{
  "number": 6181,
  "title": "buildMultiTargeting is not used anymore for NuGet packages",
  "body": "### Issue Description\r\nWhen building a project that targets .NET Core 3.1 and .NET 5.0 and a NuGet package is created, it always uses the package version 1.0.0. Other versions set by the build process are ignored. It works when targeting only .NET Core 3.1.\r\n\r\n### Steps to Reproduce\r\n1. Create a new project and target .NET Core 3.1 and 5.0\r\n2. Add it to a Git repository and set a version tag like `v2.0.0`\r\n3. Install the NuGet package [Unclassified.NetRevisionTask](https://github.com/ygoe/NetRevisionTask)\r\n4. Build the solution and see the package file name\r\n\r\n### Expected Behavior\r\nThe package file name should contain the version 2.0.0 from the Git tag. This is what happened in the past. I'm not using multi targeting often so I cannot say how many years it was ago that it worked.\r\n\r\n### Actual Behavior\r\nThe `Version` property set by the build process of NetRevisionTask is ignored and the package is always named 1.0.0.\r\n\r\n### Versions & Configurations\r\nVisual Studio 2019 16.8.4 on Windows 10. Happens when building from VS and from the dotnet CLI.\r\n\r\nRunning with more detailed output doesn't give useful information. `-v:normal` shows me the expected version detection but then claims that the package is up to date, even if I just deleted the while bin directory. `-v:d` buries me under tons of stuff (~5000 output lines).\r\n\r\nI can imagine that you believe that's an issue with my build tool, but I'm not an msbuild expert and this did work in the past, now it doesn't anymore. I have to assume that something was changed in the msbuild API that needs to be updated in tools that use it. I just can't find any information about that. I certainly never tried it with .NET 5 before, but it worked with older versions like .NET Core 2.0 and 2.2.",
  "state": "OPEN",
  "createdAt": "2021-02-22T13:51:44Z",
  "updatedAt": "2024-01-31T08:21:59Z",
  "closedAt": null,
  "author": {
    "login": "ygoe"
  },
  "labels": [
    "Area: Documentation",
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "You apply your changes attached to BeforeBuild, which probably does not ensure they are run at the right time(s).\r\n\r\n- when setting properties that end up in the assembly info, it may be better to use `BeforeTargets=\"GenerateAdditionalSources\"`\r\n- for values then end up being used to determine the package version, there are two contexts where that needs to happen:\r\n  1. when determining the version of the package produced by the current project\r\n  2. when determining the version of the packages produced by referenced projects (for dependencies)\r\n\r\n  To cover both, you need to add the target that sets those properties to `GetPackageVersionDependsOn`:\r\n  ```xml\r\n  <PropertyGroup>\r\n    <GetPackageVersionDependsOn>$(GetPackageVersionDependsOn);MyVersioningTarget</GetPackageVersionDependsOn>\r\n  </PropertyGroup>\r\n  ```\r\n\r\nHope this helps.\r\n\r\nAlso, to investigate msbuild issues, the [MSBuild BinLog Viewer](https://msbuildlog.com/) really is indispensable. Run your build with `-bl` to produce an msbuild.binlog file, and open that in the viewer.",
        "createdAt": "2021-02-25T15:10:17Z",
        "updatedAt": "2021-02-25T15:10:17Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "The first suggested modification doesn't change anything at all. Not for the better, not for the worse.\r\n\r\nI don't understand the second suggestion. Where should I apply it? In the build tool or in the project being built? What is a dependency here? Neither the build tool nor the project being built has any dependencies on other local projects.\r\n\r\nI've used the log viewer to inspect a build log. But I don't know what to look for. If I look for the file name of the NuGet package being created, I can see it. But I can't see the reasons that led to that name. Searching for \"InformationalVersion\" (one of the properties set by the build tool) shows me that that property has been set, but I don't know where that is in the build process. Searching for \"PackageVersion\" gives me 18000 results with all kinds of different values (\"1.0.0\", \"2020.0.1\", \"1.3.0\", \"3.1.0\", \"3.1.10\" etc.).",
        "createdAt": "2021-02-26T21:35:34Z",
        "updatedAt": "2021-02-26T21:35:34Z",
        "author": {
          "login": "ygoe"
        }
      },
      {
        "body": "The second suggestion would go in your `Unclassified.NetRevisionTask.targets`.\r\n\r\nSomething like\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <GetPackageVersionDependsOn>$(GetPackageVersionDependsOn);NrtSetVersion</GetPackageVersionDependsOn>\r\n</PropertyGroup>\r\n```\r\n\r\nThe basic issue is this: the `Build` target is run, as an MSBuild subtask, for each target framework.\r\nThe package creation runs once, in the outer task, because it needs to get combine all the outputs from the subtasks.\r\n\r\nYour `NrtSetVersion` runs just fine in those subtasks (the version info in the assemblies is perfectly fine).\r\nHowever, the information it sets is _not_ propagated to the outer task, and `NrtSetVersion` is also not run there.\r\n\r\nWith the property above added, it does get run, and the package gets version 2.0.0 if run on a v2.0.0 git tag.\r\n\r\nHowever it also issues a warning:\r\n```\r\n...\\unclassified.netrevisiontask\\0.3.0\\build\\Unclassified.NetRevisionTask.targets(29,5): warning : AssemblyInfo source file not found. Using default revision format.\r\n```\r\n\r\nThis will likely be because your task assumes it is being run in a build context and tries to access properties/items that are not set in the outer msbuild.\r\n",
        "createdAt": "2021-02-26T22:20:12Z",
        "updatedAt": "2021-02-26T22:21:50Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Digging the log further I found another target/task for the Pack operation. So I just set up the SetVersion target to *also* run before that.\r\n\r\n    <Target Name=\"NrtSetVersion\" BeforeTargets=\"GenerateAdditionalSources;GenerateNuspec\">\r\n\r\nI have no idea whether that's good design but at least it's now invoked again before packing and that seems to affect the pack task enough to result in the correct output file name. It still prints the wrong file name as in \"that file doesn't exist yet\" but I can't change that. That message seems to appear only in lower than default log levels.\r\n\r\nThen I also needed to figure out whether the SetVersion task is run during a build or a pack (for application-specific reasons), and the only way to determine that was by looking at the `NuGetPackOutput` parameter. If it's null or empty, it's a build. Otherwise, it's a pack. I ignore the actual value. Again, there might be better ways to find that out. At least it works for now. Until something changes again in MSBuild\u2026 This change might even make it fail in older versions of Visual Studio, I can't test that anymore. Users will report.\r\n\r\nInteresting is that all of this doesn't happen when targeting a single framework. The binlog doesn't show the SetVersion task being executed before GenerateNuspec anymore. But in that configuration it wasn't necessary anyway. Also, there's a third tab \"Project Graph\" now. It seems that single- vs. multi-targeting results in entirely different build plans.",
        "createdAt": "2021-02-26T22:30:02Z",
        "updatedAt": "2021-02-26T22:30:02Z",
        "author": {
          "login": "ygoe"
        }
      },
      {
        "body": "I just saw your last comment now. Yes, that's the warning I needed to get rid of by determining the build/pack phase.\r\n\r\nThe `GetPackageVersionDependsOn` modification seems to do the same as my additional `BeforeTargets`. Okay, I'll keep that then. Thank you for the explanations. I'm still wondering why this has once worked and now needed a change.",
        "createdAt": "2021-02-26T22:37:49Z",
        "updatedAt": "2021-02-26T22:37:49Z",
        "author": {
          "login": "ygoe"
        }
      },
      {
        "body": "The `GenerateNuspec` hook is what I used to have, and it works for a single-project solution.\r\nHowever if you add a second project, and reference that from the first, you will find that the packages are both 2.0.0, but the first package has a dependency on version 1.0.0 of the second package.\r\nThat is fixed by using the DependsOn approach instead.\r\n\r\nAnd the reason it may have worked before is that if you set `TargetFramework` instead of `TargetFrameworks`, that sub-msbuild stuff does not get used, so the Version set during the build will \"hang around\" until the pack phase.\r\nIt may also have broken if you ran `dotnet pack --no-build` (because it would not have triggered the BeforeBuild hook).",
        "createdAt": "2021-02-26T22:45:50Z",
        "updatedAt": "2021-02-26T22:45:50Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Not exactly the same but I have a similar problem with multi-targeting with customized builds (_without using `Microsoft.NET.Sdk`_) not importing `CrossTargeting` targets. I've a patch but not sure to link to this issue for the PR.",
        "createdAt": "2021-07-13T19:10:13Z",
        "updatedAt": "2021-07-13T19:10:13Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}