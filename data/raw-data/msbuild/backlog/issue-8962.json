{
  "number": 8962,
  "title": "Dependency on System.Drawing.Common (>= 7.0.0) blocks latest Microsoft.Build package",
  "body": "Not sure if this is the right place to report this, but while trying to update the [Microsoft.Build](https://www.nuget.org/packages/Microsoft.Build/) package on our software to the latest version, we hit an issue due to a dependency on [System.Security.Permissions](https://www.nuget.org/packages/System.Security.Permissions/), chianing to [System.Windows.Extensions](https://www.nuget.org/packages/System.Windows.Extensions/), which depends on [System.Drawing.Common >= 7.0.0](https://www.nuget.org/packages/System.Drawing.Common/).\r\n\r\nAs System.Drawing.Common >=7.0.0 doesn't support macOS / Linux anymore (6.0.0 being the latest version that supports it through a compatibility flag), this chain of dependency blocks using to the latest package on Linux & macOS builds.\r\n\r\nAny ideas if it is possible to force using the older package, or if the dependency version on [System.Windows.Extensions](https://www.nuget.org/packages/System.Windows.Extensions/#dependencies-body-tab) could be lowered to >=6.0.0 ?\r\n\r\nThanks!\r\n",
  "state": "CLOSED",
  "createdAt": "2023-06-27T12:47:03Z",
  "updatedAt": "2024-02-21T14:04:31Z",
  "closedAt": "2023-09-18T16:37:08Z",
  "author": {
    "login": "theolivenbaum"
  },
  "labels": [
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "comments": {
    "nodes": [
      {
        "body": "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nNot sure if this is the right place to report this, but while trying to update the [Microsoft.Build](https://www.nuget.org/packages/Microsoft.Build/) package on our software to the latest version, we hit an issue due to a dependency on [System.Security.Permissions](https://www.nuget.org/packages/System.Security.Permissions/), chianing to [System.Windows.Extensions](https://www.nuget.org/packages/System.Windows.Extensions/), which depends on [System.Drawing.Common >= 7.0.0](https://www.nuget.org/packages/System.Drawing.Common/).\r\n\r\nAs System.Drawing.Common >=7.0.0 doesn't support macOS / Linux anymore (6.0.0 being the latest version that supports it through a compatibility flag), this chain of dependency blocks using to the latest package on Linux & macOS builds.\r\n\r\nAny ideas if it is possible to force using the older package, or if the dependency version on [System.Windows.Extensions](https://www.nuget.org/packages/System.Windows.Extensions/#dependencies-body-tab) could be lowered to >=6.0.0 ?\r\n\r\nThanks!\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>theolivenbaum</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Infrastructure-libraries`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
        "createdAt": "2023-06-27T12:47:10Z",
        "updatedAt": "2023-06-27T12:47:10Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I don't think it'll be possible to pin to a specific older version forever; we try to track the latest versions available where possible.\r\n\r\nDo you need to update your MSBuild reference? You shouldn't generally need to, since you generally load MSBuild from a .NET SDK that contains all of its dependencies.\r\n\r\n@baronfel and I looked into dropping the dependency, which is _almost_ doable, except for\r\n\r\nhttps://github.com/dotnet/msbuild/blob/265f3419e660ccf56f1a2809fd7d7d9cf7ff359c/src/Shared/ExceptionHandling.cs#L170",
        "createdAt": "2023-06-27T21:30:34Z",
        "updatedAt": "2023-06-27T21:30:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If it's literally just that line, could you check the exception type dynamically - GetType()? Presumably this is an exceptional path. And you already depend on reflection.",
        "createdAt": "2023-06-27T21:45:21Z",
        "updatedAt": "2023-06-27T21:45:48Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@rainersigwald we would love to drop the dependency on System.Drawing.Common 6.0.0, but due to how the deprecation was managed (i.e. as a breaking change including dropping support for the compatibility flag with the 7.0.0 release), we're stuck with 6.0.0 till other libraries replace their usage with other drawing libraries. While this is slowly moving forward, there are still many that have not yet updated, which forces us to use the last version that works cross platform.\r\n\r\nI asked just because I found it very surprising that this dependency was there in the first place, and it seems it should be possible to either drop or change the constraint back to 6.0.0. \r\n\r\nAs shown in https://github.com/dotnet/sdk/issues/33472, this is might also an issue when using the latest MSBuild package on other platforms, as System.Drawing.Common >= 7.0.0 is not available there.",
        "createdAt": "2023-06-28T06:19:55Z",
        "updatedAt": "2023-06-28T06:19:55Z",
        "author": {
          "login": "theolivenbaum"
        }
      },
      {
        "body": "<https://source.dot.net/#System.Security.Permissions/System/Security/XmlSyntaxException.cs,64bad675b08e83cd,references> doesn't list anything that creates an instance of XmlSyntaxException, and the constructor is obsolete in .NET 8 since <https://github.com/dotnet/runtime/pull/84383>.  Does MSBuild really have to recognize this type?",
        "createdAt": "2023-06-28T08:07:10Z",
        "updatedAt": "2023-06-28T08:07:10Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "tagging @ericstj for thoughts as he's very familiar with unexpected dependencies on System.Drawing",
        "createdAt": "2023-06-28T14:54:38Z",
        "updatedAt": "2023-06-28T14:54:38Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> we would love to drop the dependency on System.Drawing.Common 6.0.0, but due to how the deprecation was managed (i.e. as a breaking change including dropping support for the compatibility flag with the 7.0.0 release), we're stuck with 6.0.0 till other libraries replace their usage with other drawing libraries. While this is slowly moving forward, there are still many that have not yet updated, which forces us to use the last version that works cross platform.\r\n\r\nTo be clear, I'm asking if you need to update your **MSBuild** reference, @theolivenbaum.",
        "createdAt": "2023-06-28T15:19:08Z",
        "updatedAt": "2023-06-28T15:19:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Need: probably not now, although we've always tracked the latest version as well and were surprised to see it break this time.",
        "createdAt": "2023-06-28T16:11:25Z",
        "updatedAt": "2023-06-28T16:11:25Z",
        "author": {
          "login": "theolivenbaum"
        }
      },
      {
        "body": "In 8.0 we removed some of the dependencies on `System.Drawing.Common` but we did not remove the dependency originating from `System.Security.Permissions` since we discourage the use of `System.Security.Permissions`.   The dependency from `System.Security.Permissions` to `System.Windows.Extensions` is required - for types in the public surface area.  The dependency between `System.Windows.Extensions` to `System.Drawing.Common` is only for forwarded types, and one that @ViktorHofer and I have discussed removing.  I put up a PR to do this. https://github.com/dotnet/runtime/pull/88157\r\n\r\nIt think it would be a good idea to have MSBuild avoid it's dependency on `System.Security.Permissions` entirely.  The runtime [doesn't ever throw](https://github.com/search?q=repo%3Adotnet%2Fruntime%20XmlSyntaxException&type=code) a XmlSyntaxException and I couldn't find a place where this is thrown elsewhere in the SDK.   Perhaps on .NETFramework [it's still thrown](https://referencesource.microsoft.com/#mscorlib/system/security/xmlsyntaxexception.cs,64bad675b08e83cd,references) - but you wouldn't need a `System.Security.Permissions` reference there since it's part of `mscorlib`.  Maybe you can just ifdef this code to only be present for NETFramework builds and then remove the package reference entirely.\r\n\r\nFinally a question for the OP - @theolivenbaum - does your product *actually* need to deploy `Microsoft.Build` and it's dependency closure?  Usually MSBuild as not a local dependency of an application.  For example - a common usage in tasks would have Microsoft.Build referenced with `PrivateAssets=\"All\"` with the expectation that the library be provided by the host when the task is loaded by MSBuild .  You might be able to separate your usage of Microsoft.Build from the component that needs to use `System.Drawing.Common` and avoid leaking the Microsoft.Build dependencies to other projects by making it with PrivateAssets.",
        "createdAt": "2023-06-28T18:50:13Z",
        "updatedAt": "2023-06-28T18:50:13Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "In .NET Framework, XmlSyntaxException can be thrown by internal classes System.Security.SecurityDocument, System.Security.Util.Parser, or System.Security.Util.Tokenizer. These are apparently used for deserializing Code Access Security types such as System.Security.PermissionSet, in AppDomain.Deserialize.  Perhaps the runtime calls that when parsing security attributes from assemblies (ECMA-335 6th ed. \u00a7II.22.11 DeclSecurity).\r\n\r\nThe System.Security.SecurityElement.Escape(string) method has sometimes been used for general XML escaping unrelated to security, but that one does not throw XmlSyntaxException.",
        "createdAt": "2023-06-28T19:03:28Z",
        "updatedAt": "2023-06-28T19:03:28Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> Maybe you can just ifdef this code to only be present for NETFramework builds and then remove the package reference entirely.\r\n\r\nWorks for me, let's do that.",
        "createdAt": "2023-06-29T21:42:55Z",
        "updatedAt": "2023-06-29T21:42:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What about the idea to check for the type dynamically, such as `e != null && e.GetType.FullName == \"System.Security.XmlSyntaxException\"`? Would love to drop that reference for .NET Framework too.",
        "createdAt": "2024-02-05T18:48:59Z",
        "updatedAt": "2024-02-05T18:49:27Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Finally a question for the OP - @theolivenbaum - does your product _actually_ need to deploy `Microsoft.Build` and it's dependency closure? Usually MSBuild as not a local dependency of an application. For example - a common usage in tasks would have Microsoft.Build referenced with `PrivateAssets=\"All\"` with the expectation that the library be provided by the host when the task is loaded by MSBuild . You might be able to separate your usage of Microsoft.Build from the component that needs to use `System.Drawing.Common` and avoid leaking the Microsoft.Build dependencies to other projects by making it with PrivateAssets.\r\n\r\nThanks for the tip, I'll investigate on our end. If I remember correctly, it is pulled on our build via a dependency on our [C# to JS transpiler](https://github.com/theolivenbaum/h5).",
        "createdAt": "2024-02-06T14:00:04Z",
        "updatedAt": "2024-02-06T14:00:04Z",
        "author": {
          "login": "theolivenbaum"
        }
      },
      {
        "body": "> If I remember correctly, it is pulled on our build via a dependency on our [C# to JS transpiler](https://github.com/theolivenbaum/h5).\r\n\r\nThat [explicitly disables](https://github.com/theolivenbaum/h5/blob/b62f6af95887397bb3b3f306438d1a33b13ec8a8/H5/Compiler/Translator/H5.Translator.csproj#L5) the hint from the MSBuildLocator package that tries to guide you to the approach @ericstj was suggesting (which I endorse). Looking at history it's been like that for a while. If y'all run into trouble removing that please file a new issue here--this is hard and we'd love to make it easier.",
        "createdAt": "2024-02-06T14:09:53Z",
        "updatedAt": "2024-02-06T14:09:53Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}