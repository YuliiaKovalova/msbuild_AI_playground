{
  "number": 2450,
  "title": "Resolving Nuget dependencies and other 3rd party dependencies",
  "body": "I am currently trying to remove more and more components from my project and and am sticking them into a seperate GitHub project:\r\n\r\nMain project:\r\nhttps://github.com/Dirkster99/Edi\r\n\r\nControl projects:\r\nhttps://github.com/Dirkster99/NumericUpDownLib\r\nhttps://github.com/Dirkster99/DropDownButtonLib\r\nhttps://github.com/Dirkster99/MsgBox\r\nhttps://github.com/Dirkster99/UnitComboLib\r\n\r\nand I am wondering how I can best handle problems that I encounter with libraries that are referenced from one of the library projects but not from the main executable Edi project. So, far there are 2 'obvious' options that I encountered and have tried:\r\n\r\n1 - reference all required \u00f6libraries from the main project even if the main project does not dependent directly on them\r\n\r\n2 - use build events to copy dependent files via COPY -f ... statement when library project has compiled succesfully\r\n\r\nEither option seems to have drawbacks and I am almost certain that they will not work for nuget for sure. Is there a prefered way to track this dependency graph correctly via XML in MSBuild or this problem of building and sorting all required files outside of the MSBuild scope?\r\n",
  "state": "CLOSED",
  "createdAt": "2017-08-17T17:03:20Z",
  "updatedAt": "2024-02-21T17:17:09Z",
  "closedAt": "2022-01-21T19:42:48Z",
  "author": {
    "login": "Dirkster99"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "For posterity: reference the packages in the library projects that need them; NuGet traverses ProjectReferences and will pull them into the executable transparently in most cases.",
        "createdAt": "2022-01-21T19:42:48Z",
        "updatedAt": "2022-01-21T19:42:48Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}