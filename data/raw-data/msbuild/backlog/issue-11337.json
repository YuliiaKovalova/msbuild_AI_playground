{
  "number": 11337,
  "title": "Log/Emit memory consumed during task run",
  "body": "\n### Motivation\nThis is inspired by investigation with @pavelsavara on why there are OOMs during build - https://github.com/dotnet/runtime/pull/111662\nIt is currently nontrivial to attribute the memory hitter (especially if notrivial amount of native allocations or pinning are involved as well). It would be nice if we could get some initial rough direction from binlog. But this might be interesting data for telemetry as well.\n\n### Idea\n\n`System.Diagnostics.Process` and `System.GC` can be queried for a consumed memry before and after task execution - the diffs can then be attached to TaskExecutedEventArgs.",
  "state": "OPEN",
  "createdAt": "2025-01-24T19:18:33Z",
  "updatedAt": "2025-05-05T15:16:44Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "We are running **out of memory** on AzDO agent, linux container with 4 CPU and 16GB ram. The container doesn't have swap file.\n\n![Image](https://github.com/user-attachments/assets/11c0b654-12f2-465a-81c3-a7dae897bdeb)\n\nAs a consequence our agent would be killed and wholeCI leg needs human attention. It happens too often to be ignored.\n\nIt seems msbuild/tasks is wasting memory, so it would be good to find root cause rather than throw money on the problem by using larger SKU.\n\n### Context\n- when building dotnet runtime repo\n- we already disabled MSBuild node reuse, but this CI leg is single long running msbuild, which runs hundred C# projects.\n- specifically the memory consumption grows for all MSBuild nodes when the build reaches `libs.tests` subset of the runtime build\n    - apparently there are some msbuild tasks specific to that phase of the build which use lot of memory\n    - for the WASM target, we use memory hungry LLVM/c-lang compiler toochain. \n    - Note, LLVM is not contributing to the memory footprint of the MSBuild nodes. It is native sub-process.\n- we already isolated some of the suspect custom tasks into separate process via `TaskFactory=\"TaskHostFactory\"` in https://github.com/dotnet/runtime/pull/111751\n\n### Further investigation hints\n\n- each out of 4 msbuild nodes is using whole 16GB as the expectation of the available memory (`DOTNET_GCHeapHardLimitPercent` could change that). \n- It has the default `DOTNET_GCHighMemPercent` of 90% out of 16GB. This is probably when it would consider running GC on Gen2.\n- at the peak, each of them would have private set around 2.5 sometimes 4 GB. Together with running LLVM this is too much for the VM total RAM.\n\n### private working set  vs GC heap\n\nbelow is dump from bigger windows machine, but I think it maps the problem well\nit shows private **working set of 1.5GB and managed GC heap including dead object just 652MB**\n\n![Image](https://github.com/user-attachments/assets/336f0a05-fe17-4be6-a540-6922506d1d54)\n\n![Image](https://github.com/user-attachments/assets/11bb1259-2597-41f9-a4c4-27d67899d2ff)\n\n1) I tried to force `GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce; GC.Collect();` but it didn't help.\n2) I suspected this is leaked memory mapped files, but VMMap tool doesn't confirm this\n\nAt the moment I think this is LOH fragmentation in long running process. I suspected `ZipDirectory` task, but I was not able to catch it red handed.",
        "createdAt": "2025-02-06T12:00:48Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "This is captured in the actual CI agent after trying `GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce; GC.Collect();`\n\n```\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\ncloudte+     747 22.0 16.5 275206272 2707788 ?   Sl   14:02   9:06 /__w/1/s/.dotnet/dotnet msbuild /m /clp:Summary\ncloudte+     914 15.0 13.5 275184076 2226660 ?   Sl   14:03   6:00 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:1\ncloudte+     915 18.0 13.2 275270036 2166988 ?   Sl   14:03   7:11 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:1\ncloudte+     916 13.9 14.2 275206464 2326168 ?   Sl   14:03   5:34 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:1\ncloudte+   16935 75.3  9.5 275371688 1559320 ?   Sl   14:15  21:29 /__w/1/s/.dotnet/dotnet exec VBCSCompiler.dll\ncloudte+   17004  1.5  5.5 274419428 908412 ?    Sl   14:15   0:26 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:2\ncloudte+   31868  1.8  2.3 274239292 377944 ?    Sl   14:26   0:19 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:2\ncloudte+   31913  1.3  0.5 274164876 87300 ?     Sl   14:26   0:14 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:2\ncloudte+   31975  3.0  0.5 274173072 91856 ?     Sl   14:26   0:32 /__w/1/s/.dotnet/dotnet MSBuild.dll /nodemode:2\n\nBefore GC 747 - PrivateMemorySize64: 3028312064 bytes\nBefore GC 747 - WorkingSet64: 2772774912 bytes\nBefore GC 747 - FragmentedBytes: 3464760 bytes\nBefore GC 747 - Compacted: True bytes\nBefore GC 747 - HighMemoryLoadThresholdBytes: 15090086707 bytes\nBefore GC 747 - TotalAvailableMemoryBytes: 16766763008 bytes\nBefore GC 747 - TotalCommittedBytes: 2659639296 bytes\n\nAfter GC 747 - PeakWorkingSet64: 2793672704 bytes\nAfter GC 747 - PrivateMemorySize64: 3028312064 bytes\nAfter GC 747 - WorkingSet64: 2772774912 bytes\nAfter GC 747 - FragmentedBytes: 3402512 bytes\nAfter GC 747 - Compacted: True bytes\nAfter GC 747 - HighMemoryLoadThresholdBytes: 15090086707 bytes\nAfter GC 747 - TotalAvailableMemoryBytes: 16766763008 bytes\nAfter GC 747 - TotalCommittedBytes: 2642333696 bytes\n```",
        "createdAt": "2025-02-06T12:14:29Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "This is example of the [binlog](https://artprodcus3.artifacts.visualstudio.com/A6fcc92e5-73a7-4f88-8d13-d9045b45fb27/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2RuY2VuZy1wdWJsaWMvcHJvamVjdElkL2NiYjE4MjYxLWM0OGYtNGFiYi04NjUxLThjZGNiNTQ3NDY0OS9idWlsZElkLzk0MjQ2NS9hcnRpZmFjdE5hbWUvTG9nc19CdWlsZF9BdHRlbXB0MV9icm93c2VyX3dhc21fbGludXhfUmVsZWFzZV9MaWJyYXJ5VGVzdHM1/content?format=file&subPath=%2FRelease%2FBuild.binlog), when the agent didn't get killed.\n\nThe target `_RunWasmOptPostLink` in `Wasm.Advanced.Sample.csproj` is typical victim of the OOM kill.",
        "createdAt": "2025-02-06T12:24:53Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "If this looks like a managed memory issue, collecting a GCCollectOnly trace would be helpful in diagnosing: `perfview /GCCollectOnly /nogui collect` ",
        "createdAt": "2025-02-10T21:33:08Z",
        "author": {
          "login": "mangod9"
        }
      },
      {
        "body": "[wasm-test-build-2025-02-19-PerfViewData.etl.zip](https://github.com/user-attachments/files/18870568/wasm-test-build-2025-02-19-PerfViewData.etl.zip)\n[wasm-test-build-2025-02-19-PerfViewData.log.txt](https://github.com/user-attachments/files/18870567/wasm-test-build-2025-02-19-PerfViewData.log.txt)\n\n@mangod9 I attached the trace. \nThe actual issue is happening on smaller linux machine, but perfview is windows only. \nSo, this is from larger windows machine.\nTo make it similar to CI agent I set `$env:DOTNET_GCHeapHardLimitPercent=\"19\"` and `/m:4` for MSBuild\n\nThe trace was collected for most of the duration of the build, about 60 minutes before the build stopped. The memory usage is creeping up whole time. \n\nThe processes with `/nodemode:1` are the perpetrators here. For example PID 15740\n\n![Image](https://github.com/user-attachments/assets/146b99d9-3ff9-40e8-a5bb-96bf1cc04d46)\n\n\nLater I will try to collect it from the actual CI machine via `dotnet-trace collect --profile gc-collect`. \nDownside is that I would only get trace from single process and there are multiple competing for the resources.\n",
        "createdAt": "2025-02-19T15:19:45Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "In the meantime\n\n[Build](https://dev.azure.com/dnceng-public/public/_build/results?buildId=963673&view=logs&jobId=c4f78348-88e4-5284-ad35-ce8766c7fee3&j=c4f78348-88e4-5284-ad35-ce8766c7fee3&t=081b2815-f92f-5c15-9d98-94c961ec1a9c)\n[Binlog](https://artprodcus3.artifacts.visualstudio.com/A6fcc92e5-73a7-4f88-8d13-d9045b45fb27/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2RuY2VuZy1wdWJsaWMvcHJvamVjdElkL2NiYjE4MjYxLWM0OGYtNGFiYi04NjUxLThjZGNiNTQ3NDY0OS9idWlsZElkLzk2MzY3My9hcnRpZmFjdE5hbWUvTG9nc19CdWlsZF9BdHRlbXB0MV9icm93c2VyX3dhc21fd2luZG93c19SZWxlYXNlX0xpYnJhcnlUZXN0cw2/content?format=file&subPath=%2FRelease%2FBuild.binlog)\n```\nMSBUILD : error MSB4166: Child node \"2\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"C:\\Users\\cloudtest\\AppData\\Local\\Temp\\MSBuildTemp\\\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.\nMSBUILD : error MSB4166: C:\\Users\\cloudtest\\AppData\\Local\\Temp\\MSBuildTemp\\MSBuild_pid-7920_5106df0b5bae4e1aaa8f14d10b36dee9.failure.txt:\nMSBUILD : error MSB4166: UNHANDLED EXCEPTIONS FROM PROCESS 7920:\nMSBUILD : error MSB4166: =====================\nMSBUILD : error MSB4166: 2/26/2025 2:03:00 PM\nMSBUILD : error MSB4166: Microsoft.Build.Framework.CriticalTaskException\nMSBUILD : error MSB4166:  ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\nMSBUILD : error MSB4166:    at System.Buffers.ProbabilisticMap..ctor(ReadOnlySpan`1 values)\nMSBUILD : error MSB4166:    at System.String.MakeSeparatorListAny(ReadOnlySpan`1 source, ReadOnlySpan`1 separators, ValueListBuilder`1& sepListBuilder)\nMSBUILD : error MSB4166:    at System.String.SplitInternal(ReadOnlySpan`1 separators, Int32 count, StringSplitOptions options)\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverride.CreateOverriddenPackages(String overriddenPackagesString)+MoveNext()\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverride..ctor(String packageName, IEnumerable`1 overriddenPackages)\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverride.Create(ITaskItem packageOverrideItem)\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverrideResolver`1.BuildPackageOverrides()\nMSBUILD : error MSB4166:    at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\nMSBUILD : error MSB4166:    at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\nMSBUILD : error MSB4166:    at System.Lazy`1.CreateValue()\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverrideResolver`1.Resolve(TConflictItem item1, TConflictItem item2)\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflict(TConflictItem item1, TConflictItem item2, Boolean logUnresolvedConflicts)\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflicts(IEnumerable`1 conflictItems, Func`2 getItemKey, ConflictCallback`1 foundConflict, Boolean commitWinner)\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore()\nMSBUILD : error MSB4166:    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskExecutionHost.Execute()\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(TaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\nMSBUILD : error MSB4166:    --- End of inner exception stack trace ---\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(TaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(TaskLoggingContext taskLoggingContext, ItemBucket bucket, IDictionary`2 taskIdentityParameters, TaskHost taskHost, TaskExecutionMode howToExecuteTask)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask, Dictionary`2 lookupHash)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(TaskExecutionMode mode, Lookup lookup)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(TargetLoggingContext loggingContext, BuildRequestEntry requestEntry, ITargetBuilderCallback targetBuilderCallback, ProjectTargetInstanceChild taskInstance, TaskExecutionMode mode, Lookup inferLookup, Lookup executeLookup, CancellationToken cancellationToken)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(ITaskBuilder taskBuilder, TargetLoggingContext targetLoggingContext, TaskExecutionMode mode, Lookup lookupForInference, Lookup lookupForExecution)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry requestEntry, ProjectLoggingContext projectLoggingContext, CancellationToken cancellationToken)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(ITaskBuilder taskBuilder)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.TargetBuilder.BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, ValueTuple`2[] targetNames, Lookup baseLookup, CancellationToken cancellationToken)\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.RequestBuilder.BuildProject()\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.RequestBuilder.RequestThreadProc(Boolean setThreadParameters)\nMSBUILD : error MSB4166: ===================\n```",
        "createdAt": "2025-02-26T14:25:40Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "@mangod9 here is net trace you asked for \n- 30 minutes of `dotnet-trace collect --profile gc-collect` in the actual linux CI agent. \n- This is just one of 8 MSBuild processes fighting over the same 16GB of RAM without a swap file.\n\n[trace.1740594036.zip](https://github.com/user-attachments/files/19003913/trace.1740594036.zip)\n\n![Image](https://github.com/user-attachments/assets/52a16b36-594b-4fb5-885a-cb95dee306a1)\n\n\n[Build](https://dev.azure.com/dnceng-public/public/_build/results?buildId=963951&view=logs&j=d4e38924-13a0-58bd-9074-6a4810543e7c&t=102a6595-1420-53fc-8f17-b0a3f4b1242a&l=11670)\n```\n2025-02-26T18:50:42.9241424Z --------disk---------\n2025-02-26T18:50:42.9275595Z Filesystem      Size  Used Avail Use% Mounted on\n2025-02-26T18:50:42.9277585Z overlay          98G   36G   58G  39% /\n2025-02-26T18:50:42.9278400Z tmpfs            64M     0   64M   0% /dev\n2025-02-26T18:50:42.9278692Z shm              64M     0   64M   0% /dev/shm\n2025-02-26T18:50:42.9278963Z /dev/root       248G   12G  237G   5% /__t\n2025-02-26T18:50:42.9279234Z /dev/sdb1        98G   36G   58G  39% /__w/1\n2025-02-26T18:50:42.9279528Z tmpfs           3.2G  1.3M  3.2G   1% /run/docker.sock\n2025-02-26T18:50:42.9279873Z tmpfs           7.9G     0  7.9G   0% /proc/acpi\n2025-02-26T18:50:42.9280163Z tmpfs           7.9G     0  7.9G   0% /proc/scsi\n2025-02-26T18:50:42.9280609Z tmpfs           7.9G     0  7.9G   0% /sys/firmware\n2025-02-26T18:50:42.9282433Z --------memory-------\n2025-02-26T18:50:42.9322080Z                total        used        free      shared  buff/cache   available\n2025-02-26T18:50:42.9322581Z Mem:            15Gi        14Gi       391Mi       662Mi       2.1Gi       1.5Gi\n2025-02-26T18:50:42.9322957Z Swap:             0B          0B          0B\n2025-02-26T18:50:42.9323232Z --------processes----\n2025-02-26T18:50:42.9406620Z USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n2025-02-26T18:50:42.9407635Z root           1  0.0  0.0   4664  3200 ?        Ss   18:07   0:00 bash -c '/__a/externals/node20_1/bin/node' --version && echo 'container-startup-using-node-20' && '/__a/externals/node20_1/bin/node' -e 'setInterval(function(){}, 24 * 60 * 60 * 1000);' || '/__a/externals/node16/bin/node' --version && echo 'container-startup-using-node-16' && '/__a/externals/node16/bin/node' -e 'setInterval(function(){}, 24 * 60 * 60 * 1000);' || echo 'container-startup-failed'\n2025-02-26T18:50:42.9408537Z root           8  0.0  0.0 725932 10368 ?        Sl   18:07   0:00 /__a/externals/node20_1/bin/node -e setInterval(function(){}, 24 * 60 * 60 * 1000);\n2025-02-26T18:50:42.9409118Z cloudte+     103  0.0  0.0 858284 12160 ?        Ssl  18:10   0:00 /__a/externals/node20_1/bin/node /__w/_temp/containerHandlerInvoker.js\n2025-02-26T18:50:42.9409653Z cloudte+     115  0.0  0.0 991740 15144 ?        Sl   18:10   0:00 /__a/externals/node20_1/bin/node /__w/_tasks/CmdLine_d9bafed4-0b18-4f58-968d-86655b4d2ce9/2.250.1/cmdline.js\n2025-02-26T18:50:42.9410316Z cloudte+     122  0.0  0.0   4804  3072 ?        S    18:10   0:00 /usr/bin/bash --noprofile --norc /__w/_temp/e787c1c4-5fc8-4899-9452-6fcf1359313f.sh\n2025-02-26T18:50:42.9411061Z cloudte+     123  0.0  0.0   4804  3456 ?        S    18:10   0:00 bash /__w/1/s/build.sh -ci -arch wasm -os browser -s mono+libs+host+packs+libs.tests -c Release /p:ArchiveTests=true /p:MonoEnableAssertMessages=true /p:BrowserHost=linux /p:RunSmokeTestsOnly=False /p:InstallChromeForTests=true /p:InstallFirefoxForTests=true /p:AotHostArchitecture=x64 /p:AotHostOS=linux\n2025-02-26T18:50:42.9412279Z cloudte+     127  0.0  0.0   4936  3584 ?        S    18:10   0:00 bash /__w/1/s/eng/build.sh -ci -arch wasm -os browser -s mono+libs+host+packs+libs.tests -c Release /p:ArchiveTests=true /p:MonoEnableAssertMessages=true /p:BrowserHost=linux /p:RunSmokeTestsOnly=False /p:InstallChromeForTests=true /p:InstallFirefoxForTests=true /p:AotHostArchitecture=x64 /p:AotHostOS=linux\n2025-02-26T18:50:42.9413127Z cloudte+     161  0.0  0.0   4804  3456 ?        S    18:10   0:00 bash /__w/1/s/eng/stats.sh\n2025-02-26T18:50:42.9413884Z cloudte+     242  0.0  0.0   5332  3712 ?        S    18:10   0:00 bash /__w/1/s/eng/common/build.sh -restore -build /p:TargetOS=browser /p:Subset=mono+libs+host+packs+libs.tests -configuration Release -tl:false /p:TargetArchitecture=wasm /p:BuildArchitecture=x64 /p:CMakeArgs=\"\" -ci /p:ArchiveTests=true /p:MonoEnableAssertMessages=true /p:BrowserHost=linux /p:RunSmokeTestsOnly=False /p:InstallChromeForTests=true /p:InstallFirefoxForTests=true /p:AotHostArchitecture=x64 /p:AotHostOS=linux\n2025-02-26T18:50:42.9415851Z cloudte+     773 23.7 16.4 275254876 2692952 ?   Sl   18:10   9:31 /__w/1/s/.dotnet/dotnet msbuild /m /nologo /clp:Summary /v:minimal /nr:false /warnaserror /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=true /__w/1/s/.packages/microsoft.dotnet.arcade.sdk/10.0.0-beta.25113.2/tools/Build.proj /bl:\"/__w/1/s/artifacts/log/Release/Build.binlog\" /p:Configuration=Release /p:RepoRoot=/__w/1/s/ /p:Restore=true /p:Build=true /p:DotNetBuildRepo=false /p:DotNetBuildSourceOnly=false /p:Rebuild=false /p:Test=false /p:Pack=false /p:IntegrationTest=false /p:PerformanceTest=false /p:Sign=false /p:Publish=false /p:TargetOS=browser /p:Subset=mono+libs+host+packs+libs.tests -tl:false /p:TargetArchitecture=wasm /p:BuildArchitecture=x64 /p:CMakeArgs=\"\" /p:ArchiveTests=true /p:MonoEnableAssertMessages=true /p:BrowserHost=linux /p:RunSmokeTestsOnly=False /p:InstallChromeForTests=true /p:InstallFirefoxForTests=true /p:AotHostArchitecture=x64 /p:AotHostOS=linux -logger:/__w/1/s/.packages/microsoft.dotnet.arcade.sdk/10.0.0-beta.25113.2/tools/net/Microsoft.DotNet.ArcadeLogging.dll\n2025-02-26T18:50:42.9417507Z cloudte+     974 14.8 13.4 275253448 2200400 ?   Sl   18:12   5:44 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /noautoresponse /nologo /nodemode:1 /nodeReuse:false /low:false\n2025-02-26T18:50:42.9418218Z cloudte+     975 13.2 14.2 275202588 2329352 ?   Sl   18:12   5:06 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /noautoresponse /nologo /nodemode:1 /nodeReuse:false /low:false\n2025-02-26T18:50:42.9418955Z cloudte+     976 14.2 13.1 275236036 2150800 ?   Sl   18:12   5:29 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /noautoresponse /nologo /nodemode:1 /nodeReuse:false /low:false\n2025-02-26T18:50:42.9420095Z cloudte+   16965 78.0  7.7 275362648 1261096 ?   Sl   18:23  21:26 /__w/1/s/.dotnet/dotnet exec /__w/1/s/.packages/microsoft.net.compilers.toolset/4.14.0-2.25121.3/tasks/netcore/bincore/VBCSCompiler.dll -pipename:rG_xkd4PaK+xrT4f+KHnVh9jL_pAFV5AB14Vguq2OYM\n2025-02-26T18:50:42.9420759Z cloudte+   17021  1.5  2.1 274427724 353520 ?    Sl   18:23   0:25 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /nologo /nodemode:2 /nodereuse:False /low:False\n2025-02-26T18:50:42.9421338Z cloudte+   31225  2.5  4.2 274558792 698476 ?    Sl   18:33   0:25 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /nologo /nodemode:2 /nodereuse:False /low:False\n2025-02-26T18:50:42.9422032Z cloudte+   31309  2.3  0.7 274296196 116396 ?    Sl   18:34   0:23 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /nologo /nodemode:2 /nodereuse:False /low:False\n2025-02-26T18:50:42.9422601Z cloudte+   31370  1.5  0.6 274222264 100584 ?    Sl   18:34   0:15 /__w/1/s/.dotnet/dotnet /__w/1/s/.dotnet/sdk/10.0.100-alpha.1.25077.2/MSBuild.dll /nologo /nodemode:2 /nodereuse:False /low:False\n2025-02-26T18:50:42.9423036Z cloudte+   38074  0.0  0.0   4724  3072 ?        R    18:50   0:00 ps -aux\n```",
        "createdAt": "2025-02-27T07:13:38Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "@mangod9 has anyone had time to look at the trace/",
        "createdAt": "2025-03-03T20:56:08Z",
        "author": {
          "login": "lewing"
        }
      },
      {
        "body": "Tracing idea: the MSBuild central node could piggyback on the built-in runtime metrics over the existing eventpipe connection that the runtime supports, and aggregate those into the logs.",
        "createdAt": "2025-03-03T20:58:29Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "As a part of our telemetry effort, we exposed memory consumed by task runs (aggregated by task type, computed by subtracting `GC.GetTotalMemory(false)` before and after). @pavelsavara @pragmanomos \n\nThe feature requires MSBuild VS 17.14 Preview 2+/.NET 10 Preview 2/3 and can be enabled with env vars as follows:\n`$env:MSBUILD_TELEMETRY_SAMPLE_RATE=1.0; $env:MSBUILDOUTPUTNODESTELEMETRY=\"1\" ; dotnet.exe build project.csproj`  in case of MSBuild.exe coming from VS it would also send this data to VS Kusto\n\nthough we refactored it later so in 17.15+ MSBUILDFLUSHNODESTELEMETRYINTOCONSOLE will be the variable for outputting to console",
        "createdAt": "2025-04-03T14:52:38Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "I can see it would go to console. It would be good to also put it into binlog.\n\nhttps://github.com/dotnet/msbuild/blob/06179d08bf90f1cdc6cc283b865adcdac457ea3c/src/Build/TelemetryInfra/InternalTelemetryConsumingLogger.cs#L48-L79\n\n",
        "createdAt": "2025-04-04T07:55:55Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "`$env:MSBUILDOUTPUTNODESTELEMETRY=\"1\"`",
        "createdAt": "2025-04-04T09:10:48Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "The metrics is useful. Top offenders are `GenerateDepsFile` is at 25GB over 1056 runs. \ud83d\ude2e \n\n```\nGenerateDepsFile,Custom:False,IsFromNugetCache:False,IsFromMetaProject:False - 25098269.32kB\nGenerateDepsFile,Custom:False,IsFromNugetCache:False,IsFromMetaProject:False - 1056\n\nMicrosoft.DotNet.ApiCompat.Task.ValidateAssembliesTask,Custom:False,IsFromNugetCache:True,IsFromMetaProject:False - 552612.85kB\nMicrosoft.DotNet.ApiCompat.Task.ValidateAssembliesTask,Custom:False,IsFromNugetCache:True,IsFromMetaProject:False - 59\n\nResolveRuntimePackAssets,Custom:False,IsFromNugetCache:False,IsFromMetaProject:False - 418514.09kB\nResolveRuntimePackAssets,Custom:False,IsFromNugetCache:False,IsFromMetaProject:False - 451\n\nMicrosoft.NET.Build.Tasks.GetPublishItemsOutputGroupOutputs,Custom:False,IsFromNugetCache:False,IsFromMetaProject:False - 330920.34kB\nMicrosoft.NET.Build.Tasks.GetPublishItemsOutputGroupOutputs,Custom:False,IsFromNugetCache:False,IsFromMetaProject:False - 228\n```\n\nIt would be convenient to also report average. \nBut from only average, we don't know if from 1000 calls, there is one that is problamatic, or the whole task is problematic.\nSo maybe also reporting top 1 run would help ?\n",
        "createdAt": "2025-04-09T08:33:00Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "We have workaround and the root cause is tasks in the SDK/nuget.\nI created https://github.com/dotnet/sdk/issues/48814 to fix the root cause.\n\nThis could be closed from my perspective, but I'm not sure there is more to be done from msbuild team perspective.",
        "createdAt": "2025-05-05T15:12:15Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "From the MSBuild perspective this is still an interesting feature request where we want to gather feedback from other customers if they'd benefit from this being in binlog (where it logically belongs as opposed to this telemetry workaround). Leaving open.",
        "createdAt": "2025-05-05T15:16:43Z",
        "author": {
          "login": "JanProvaznik"
        }
      }
    ]
  }
}