{
  "number": 1709,
  "title": "Failed build leaves MSBuild processes lying around",
  "body": "I have a (closed-source) .NET Core project that uses some custom MSBuild tasks. The tasks are cross-built for both `netcoreapp1.1` and .NET Framework 4.6, so that they will work properly in both `dotnet build` and Visual Studio.\r\n\r\nHowever, when I run the build from within VS and it fails, three or four `MSBuild.exe` processes remain lying around, holding the DLL containing the tasks open, requiring me to `taskkill` them before I can replace the DLL with a version containing fixes for debugging. `dotnet build` does not appear to do this. I am using VS 2017 RC4 build 26206. As far as I can recall, this did not occur on previous builds of VS2017.",
  "state": "CLOSED",
  "createdAt": "2017-02-16T03:01:19Z",
  "updatedAt": "2024-02-21T17:21:51Z",
  "closedAt": "2017-02-16T05:59:09Z",
  "author": {
    "login": "wjk"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This feature is called node reuse. You can turn it off on the command-line by running `MSBuild.exe /nodeReuse:false` (or just `/nr:false`). If you want it to not happen in Visual Studio you can set environment variable `MSBUILDDISABLENODEREUSE=1`. This features (for various reasons) is not supported in the .NET Core version of MSBuild so it will never happen.\r\n\r\nThat being said, the feature is there for performance. Your builds will be quite a bit slower with this turned off. It was added to avoid the overhead of process creation (with many projects and many cores it can be significant) and JIT.\r\n\r\nI'm going to close this since it's by design. Hopefully this answers your question though? If you think there's really a behavior change between VS2015 and VS2017 feel free to re-open with repro steps. There should be no change.",
        "createdAt": "2017-02-16T05:59:09Z",
        "updatedAt": "2017-02-16T05:59:09Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "> three or four MSBuild.exe processes remain lying around, holding the DLL containing the tasks open, requiring me to taskkill them\r\n\r\nI am running into this at the moment with VS 15.2 (26430.16). In a small solution after debugging a WPF application a couple of times.\r\n\r\n@AndyGerlicher are you aware of a recent issue in VS that might couse this? One thing that should be mentioned probably is I use https://github.com/Fody/PropertyChanged that hooks into the build process.",
        "createdAt": "2017-08-23T06:10:37Z",
        "updatedAt": "2017-08-23T06:10:37Z",
        "author": {
          "login": "mpseidel"
        }
      },
      {
        "body": "@mpseidel Have you figured out how to fix this problem?\r\n\r\nI'm also using *FodyPropertyChanged* and VS2017.",
        "createdAt": "2017-11-07T10:55:32Z",
        "updatedAt": "2017-11-07T10:55:32Z",
        "author": {
          "login": "gabrielpra1"
        }
      },
      {
        "body": "@gabrielpra1 hey - I've set the environment variable\r\n\r\nMSBUILDDISABLENODEREUSE = 1\r\n\r\nThat had solved the issue for me back then - haven't worked on that project for a while now. \r\n\r\nhttps://github.com/Microsoft/msbuild/wiki/MSBuild-Tips-&-Tricks#msbuildexe-nrfalse",
        "createdAt": "2017-11-07T11:03:00Z",
        "updatedAt": "2017-11-07T11:03:22Z",
        "author": {
          "login": "mpseidel"
        }
      },
      {
        "body": "This is also happening to me, in any build, no matter if it succeeds or fails. Disable node reuse didn't help.\r\nAny idea what else can I try?",
        "createdAt": "2018-01-16T14:49:07Z",
        "updatedAt": "2018-01-16T14:49:07Z",
        "author": {
          "login": "fedeazzato"
        }
      },
      {
        "body": "I have the same Problem as @fedeazzato . The **MSBuild.exe** is still running after a build.\r\n\r\n---\r\n\r\nIf running msbuild from command line with: **/nodeReuse:false** everything works as expected, but using\r\n\r\n```XML\r\n<Project TreatAsLocalProperty=\"NodeReuse\" ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <MSBUILDDISABLENODEREUSE>True</MSBUILDDISABLENODEREUSE> or <MSBUILDDISABLENODEREUSE>1</MSBUILDDISABLENODEREUSE>\r\n    <NodeReuse>False</NodeReuse>\r\n```\r\nand compiling from **visualStudio** the **MSBuild.exe** is still running afterwards!",
        "createdAt": "2018-05-24T06:45:47Z",
        "updatedAt": "2018-05-24T06:45:47Z",
        "author": {
          "login": "djonasdev"
        }
      },
      {
        "body": "@dojo90 Have you tried setting the `MSBUILDDISABLENODEREUSE` globally (Option 1 [here](https://techdocs.ed-fi.org/display/ODSAPI20/Step+4.+Prepare+the+Development+Environment#Step4.PreparetheDevelopmentEnvironment-ConfigureMSBuild))? That worked for me.",
        "createdAt": "2018-05-24T12:36:01Z",
        "updatedAt": "2018-05-24T12:48:11Z",
        "author": {
          "login": "gabrielpra1"
        }
      },
      {
        "body": "@AndyGerlicher I'm running into this in VS despite setting `MSBUILDDISABLENODEREUSE=1` globally. Specifically, a `UsingTask` is unable to copy its `AssemblyFile` because the target is locked by a previous invocation of MSBuild.",
        "createdAt": "2018-11-20T00:18:00Z",
        "updatedAt": "2018-11-20T00:19:34Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "I think it goes back to this old Q&A: [Visual Studio 2008 locks custom MSBuild Task assemblies](https://stackoverflow.com/questions/3371545/visual-studio-2008-locks-custom-msbuild-task-assemblies). The fundamental issue seems to be that there's no way to tell `UsingTask` to load the task in a disposable `AppContext`, so the assembly ends up being loaded by the `AppContext` that VS keeps around... or something like that. After banging on this for a couple days, I'm coming to the conclusion that there is no way to use custom MSBuild tasks in a VS project without resorting to weird hacks like launching them from an inline task.",
        "createdAt": "2018-11-21T00:17:13Z",
        "updatedAt": "2018-11-21T00:17:40Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "> @gabrielpra1 hey - I've set the environment variable\r\n> \r\n> MSBUILDDISABLENODEREUSE = 1\r\n> \r\n> That had solved the issue for me back then - haven't worked on that project for a while now.\r\n> \r\n> https://github.com/Microsoft/msbuild/wiki/MSBuild-Tips-&-Tricks#msbuildexe-nrfalse\r\n\r\n$env:MSBUILDDISABLENODEREUSE = 1\r\nThis worked great in a Powershell solution build script, thank you!\r\nMSBuild processes are gone after the build script has completed now.",
        "createdAt": "2019-03-21T20:06:52Z",
        "updatedAt": "2019-03-21T20:06:52Z",
        "author": {
          "login": "francisrohner"
        }
      },
      {
        "body": "> This feature is called node reuse. You can turn it off on the command-line by running `MSBuild.exe /nodeReuse:false` (or just `/nr:false`). If you want it to not happen in Visual Studio you can set environment variable `MSBUILDDISABLENODEREUSE=1`. This features (for various reasons) is not supported in the .NET Core version of MSBuild so it will never happen.\r\n> \r\n> That being said, the feature is there for performance. Your builds will be quite a bit slower with this turned off. It was added to avoid the overhead of process creation (with many projects and many cores it can be significant) and JIT.\r\n> \r\n> I'm going to close this since it's by design. Hopefully this answers your question though? If you think there's really a behavior change between VS2015 and VS2017 feel free to re-open with repro steps. There should be no change.\r\n\r\nOK, I understand that node-reuse can help speed up design.  However, is there a chance that MSBuild can periodically unload dll\r\ns and libraries it no longer needs (such as if it's not presently in the 'Building' state?)\r\n\r\nThis \"feature\" causes massive problems for CI.  A little tweak to \"periodically unload unused dll's\" would be a great improvement.  You are correct, node reuse is a massive overhead saver.  However, it does not need to hang on to DLLs, e.g., for NuGet packages, when not in the `Building` state.",
        "createdAt": "2021-03-01T15:10:24Z",
        "updatedAt": "2021-03-01T15:10:24Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "Just to be clear, the perf effect is only to save a few 100ms at the build start. As such it is not relevant in CI at all and IMO should always be disabled there. Perhaps in retrospect it would have been better to be opt-in and VS could opt in.",
        "createdAt": "2021-03-01T16:43:03Z",
        "updatedAt": "2021-03-01T16:43:03Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "\n  \n   \n \n \n  \n   Maybe make it a Tools -> Options check box?\n  \n  \n   \n  \n  \n   -Brian\n  \n  \n   \n    On 03/01/2021 11:43 AM Dan Moseley <notifications@github.com> wrote:\n   \n   \n    \n   \n   \n    \n   \n   \n   Just to be clear, the perf effect is only to save a few 100ms at the build start. As such it is not relevant in CI at all and IMO should always be disabled there. Perhaps in retrospect it would have been better to be opt-in and VS could opt in.\n   \u2014You are receiving this because you commented.Reply to this email directly, view it on GitHub, or unsubscribe.",
        "createdAt": "2021-03-01T16:45:41Z",
        "updatedAt": "2021-03-01T16:45:41Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "Just FYI another option is to disable it in `Directory.Build.rsp`. See an example here: https://github.com/microsoft/MSBuildSdks/blob/50c49ad46b29f017626510061ef51a1c194f4874/Directory.Build.rsp#L4\r\n\r\nThis will affect all command-line only builds and not VS.",
        "createdAt": "2021-03-01T17:15:27Z",
        "updatedAt": "2021-03-01T17:15:27Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "When will this be fixed on a per project level? This issue is known and was called out since VS2008 every year.\r\n\r\nIt can't really be that hard. The MSBuild processes started by Visual Studio are explicitly called *WITH* then /nodeReuse:true argument.\r\n\r\nI'm quite sick and tired of this issue. Had it a few times over the years and every time i look for a solution which doesn't require me to set a global environment variable does work only for MSBuild from the commandline but not in VS.\r\n\r\nBad, Microsoft, very bad. No, really, very bad.",
        "createdAt": "2021-04-11T15:31:10Z",
        "updatedAt": "2021-04-11T15:31:10Z",
        "author": {
          "login": "Algorithman"
        }
      }
    ]
  }
}