{
  "number": 2532,
  "title": "error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.",
  "body": "I'm trying to build a solution using msbuild command line and I keep getting this error:\r\n\r\n`error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.`\r\n\r\nThe version of msbuild is the latest from microsoft visual studio 2017 tools. I'm using Windows Server 2012 R2 and the project uses .NET Core 2.0.\r\n\r\nThis is the command that I'm using:\r\n\r\n`msbuild.exe /p:Configuration=Release /t:restore C:\\Projects\\MyProject.sln`",
  "state": "CLOSED",
  "createdAt": "2017-09-16T18:58:13Z",
  "updatedAt": "2024-06-13T14:26:32Z",
  "closedAt": "2018-11-19T23:35:13Z",
  "author": {
    "login": "lgmguto"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I fixed this by creating a path variable \"MSBuildSDKsPath\" with the value \r\n\"C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\"\r\n\r\nI don't know why msbuild can't find this path by default, but this fixed the issue for us\r\n",
        "createdAt": "2017-10-11T12:33:57Z",
        "updatedAt": "2017-10-11T12:33:57Z",
        "author": {
          "login": "fanicia"
        }
      },
      {
        "body": "Same here on Win7",
        "createdAt": "2017-10-13T12:24:46Z",
        "updatedAt": "2017-10-13T12:24:46Z",
        "author": {
          "login": "DNF-SaS"
        }
      },
      {
        "body": "Anyone who's still having trouble here, could you try unsetting `MSBuildSDKsPath` and see if the issue still repros. If it does, could you set `COREHOST_TRACE=1`, reproduce the issue, and then paste the trace output here?",
        "createdAt": "2017-11-09T23:11:15Z",
        "updatedAt": "2017-11-09T23:11:15Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "@fanicia  thank you!!!",
        "createdAt": "2017-11-10T03:53:19Z",
        "updatedAt": "2017-11-10T03:53:19Z",
        "author": {
          "login": "mayconpires"
        }
      },
      {
        "body": "@mayconpires : Any chance you could try setting `COREHOST_TRACE=1` per my comment above to give us some data about why this is happening?",
        "createdAt": "2017-11-10T04:42:58Z",
        "updatedAt": "2017-11-10T04:42:58Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "@DustinCampbell i just tried unchecking the variable on one of our CI servers.... and now it works without it ??? \r\n\r\nI have changed a bunch of stuff on there since i wrote the comment though, so idk :P ",
        "createdAt": "2017-11-10T07:54:43Z",
        "updatedAt": "2017-11-10T07:54:43Z",
        "author": {
          "login": "fanicia"
        }
      },
      {
        "body": "I still have the issue for v`15.4.8.50001` but setting `COREHOST_TRACE=1` does not make any difference in the console output for msbuild.exe.\r\n\r\n*Edit:\r\nInitially `dotnet build solution.sln` resulted in same error in output (but still reported 'Build succeeded'). When trying with above `COREHOST_TRACE`, `dotnet build` spit out tons of log output I could not redirect to a file and now, for whatever reason, `dotnet build solution.sln` works fine. Invoking msbuild.exe directly still causes the same error (on server2, on server1 it works fine for same solution).\r\n\r\n(I also get `error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found`, furthermore we had sdk junction paths in for `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\MsBuild\\15.0\\Sdks` and `...\\MsBuild\\Sdks` which both had target to `C:\\Program Files\\dotnet\\sdk\\1.0.1\\Sdks` (1.0.1 had been uninstalled), I removed the 2 junction folders and repaired vs2017 build tools, reinstalled netCore 2.0.2 and rebooted. Still same issue.)",
        "createdAt": "2017-11-10T08:09:57Z",
        "updatedAt": "2017-11-10T09:20:27Z",
        "author": {
          "login": "greenmooseSE"
        }
      },
      {
        "body": "To clarify. I was also in the case where i was able to build with `dotnet build`, but `msbuild /t:rebuild` didn't work",
        "createdAt": "2017-11-10T13:11:25Z",
        "updatedAt": "2017-11-10T13:11:25Z",
        "author": {
          "login": "fanicia"
        }
      },
      {
        "body": "> I still have the issue for v15.4.8.50001 but setting COREHOST_TRACE=1 does not make any difference in the console output for msbuild.exe.\r\n\r\nThis suggests to me that your msbuild.exe copy does not have the following:\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\SdkResolvers\\Microsoft.DotNet.MSBuildSdkResolver\r\n\r\n",
        "createdAt": "2017-11-10T20:23:17Z",
        "updatedAt": "2017-11-10T20:23:17Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Is everyone reporting this using \"Build Tools for Visual Studio 2017\" https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017\r\n\r\nrather than full VS?",
        "createdAt": "2017-11-10T20:25:46Z",
        "updatedAt": "2017-11-10T20:25:46Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Make sure to install the .NET Core workload:\r\n\r\n![image](https://user-images.githubusercontent.com/75470/32677399-1b27b982-c613-11e7-8c15-efff41b8f330.png)\r\n",
        "createdAt": "2017-11-10T20:32:09Z",
        "updatedAt": "2017-11-10T20:32:09Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Workload selection applies to full VS as well:\r\n\r\n![image](https://user-images.githubusercontent.com/75470/32677727-6bda5bfe-c614-11e7-9648-c428f6dcd156.png)\r\n",
        "createdAt": "2017-11-10T20:37:09Z",
        "updatedAt": "2017-11-10T20:41:12Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "If you have Build tools SKU: \r\n - You cannot get Microsoft.NET.Sdk or Microsoft.NET.Sdk.Web to resolve without the .NET Core workload installed.\r\n\r\nIf you have full VS: \r\n- You can get Microsoft.NET.Sdk to resolve without the .NET Core or ASP.NET workloads installed, but it will be locked to version 1.x instead of resolving the latest version or global.json implied version.\r\n\r\n- You cannot get Microsoft.NET.Sdk.Web to resolve without the .NET Core workload or ASP.NET workloads installed.\r\n",
        "createdAt": "2017-11-10T20:51:59Z",
        "updatedAt": "2017-11-10T21:01:53Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera I am using the buildtools, not the full VS. Meaning the .Net Core cross-platform development you have highligted",
        "createdAt": "2017-11-10T21:03:37Z",
        "updatedAt": "2017-11-10T21:03:37Z",
        "author": {
          "login": "fanicia"
        }
      },
      {
        "body": "> Meaning the .Net Core cross-platform development you have highligted\r\n\r\n... are installed?",
        "createdAt": "2017-11-10T21:13:10Z",
        "updatedAt": "2017-11-10T21:13:10Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "^yes",
        "createdAt": "2017-11-10T21:30:42Z",
        "updatedAt": "2017-11-10T21:30:42Z",
        "author": {
          "login": "fanicia"
        }
      },
      {
        "body": "You said it started working after changes to build machine. Is it possible the workload installation s one of those changes?",
        "createdAt": "2017-11-10T21:32:12Z",
        "updatedAt": "2017-11-10T21:32:12Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "i dont think so. i was having trouble adding a required nuget package to the solution... will be able to give more info when im in office next week",
        "createdAt": "2017-11-10T21:58:53Z",
        "updatedAt": "2017-11-10T21:58:53Z",
        "author": {
          "login": "fanicia"
        }
      },
      {
        "body": "@nguerrera Thanks. That was indeed our problem on server2, it was missing the .net core workload. After including it, it works fine!",
        "createdAt": "2017-11-13T09:47:04Z",
        "updatedAt": "2017-11-13T09:47:04Z",
        "author": {
          "login": "greenmooseSE"
        }
      },
      {
        "body": "I am using VS 2017 15.4.5 and unless I SetEnvironmentVariable's I get errors in a Test Project and the documents don't load. If I set it I still get errors loading the projects but they do load. When I build with Visual Studio I get no errors.\r\n```\r\n        Const SolutionPartialPath As String = \"roslyn-master\\src\\Samples\\Samples.sln\"\r\n        Const BasicCodeAnalysisPartialPath As String = \"Roslyn-master\\src\\Compilers\\VisualBasic\\Portable\"\r\n        <TestMethod()> Public Sub ElementTypeUnitTestAsync()\r\n            Dim registryKey As String\r\n            If Environment.Is64BitProcess Then\r\n                registryKey = \"SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VS7\"\r\n            Else\r\n                registryKey = \"SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VS7\"\r\n            End If\r\n            Using subKey As RegistryKey = Registry.LocalMachine.OpenSubKey(registryKey)\r\n                Dim visualStudioPath As String = TryCast(subKey.GetValue(\"15.0\"), String)\r\n                If Not String.IsNullOrEmpty(visualStudioPath) Then\r\n                    Environment.SetEnvironmentVariable(\"VSINSTALLDIR\", visualStudioPath)\r\n                    Environment.SetEnvironmentVariable(\"VisualStudioVersion\", \"15.0\")\r\n                    Environment.SetEnvironmentVariable(\"MSBuildSDKsPath\", \"C:\\Program Files\\dotnet\\sdk\\2.0.3\\Sdks\")\r\n                End If\r\n            End Using\r\n\r\n            Dim myDoc As String = My.Computer.FileSystem.SpecialDirectories.MyDocuments\r\n            Dim SampleSolutionPath As String = Path.Combine(myDoc, SolutionPartialPath)\r\n\r\n            Dim MS_Workspace As MSBuildWorkspace = MSBuildWorkspace.Create()\r\n            AddHandler MS_Workspace.WorkspaceFailed, Sub(sender As Object, e As WorkspaceDiagnosticEventArgs)\r\n                                                         Debug.WriteLine(e.Diagnostic.ToString())\r\n                                                     End Sub\r\n            Dim NewSolution As Solution = MS_Workspace.OpenSolutionAsync(SampleSolutionPath).Result\r\n\r\n            For Each Project In NewSolution.Projects\r\n                Debug.WriteLine($\"Project = {Project.Name}\")\r\n                If Project.Name = \"BasicCodeAnalysis\" Then\r\n                    WalkProject(Project)\r\n                    Exit For\r\n                End If\r\n            Next\r\n        End Sub\r\n```\r\nSome of the errors\r\n```\r\nC:\\Users\\PaulM\\.nuget\\packages\\microsoft.net.compilers\\2.3.1\\tools\\Microsoft.VisualBasic.Core.targets: (73, 5): The \"Vbc\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.\r\n[Failure] Msbuild failed when processing the file '...roslyn-master\\src\\Samples\\UnitTestProject1\\UnitTestProject1.vbproj' with message: The imported project \"...VSIXProject2\\CodeRefactoring1.Test\\bin\\Debug\\Roslyn\\Microsoft.VisualBasic.Core.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  ...VSIXProject2\\CodeRefactoring1.Test\\bin\\Debug\\Microsoft.VisualBasic.CurrentVersion.targets\r\n```",
        "createdAt": "2017-11-29T06:31:34Z",
        "updatedAt": "2017-11-29T06:31:34Z",
        "author": {
          "login": "paul1956"
        }
      },
      {
        "body": "Hi @nguerrera \r\n\r\nI have visual studio Build tools installed. I am trying to  install .NET Core workload using choco. But that is failing. Is there any official page where i can download .NET Core workload? ",
        "createdAt": "2018-01-15T11:06:52Z",
        "updatedAt": "2018-01-15T11:06:52Z",
        "author": {
          "login": "venkateswaris"
        }
      },
      {
        "body": "@venkateswaris The official way to install the .NET Core workload is either through the Build Tools installer UI or its command line options. Documentation for the command line is [here](https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio) and a list of workloads for the Build Tools installer is [here](https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools). In your case you probably want to ensure that the `Microsoft.VisualStudio.Workload.NetCoreBuildTools` workload is installed.",
        "createdAt": "2018-01-16T18:35:47Z",
        "updatedAt": "2018-01-16T18:35:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm still getting this error with all three if the fixes mentioned above. All the build tools packages are the latest and visual studio is updated to the latest version as well.\r\n\r\n1. Path Variable MSBuildSDKsPath\r\n2. Build Tools for Visual Studio 2017 \r\n3. Full Visual Studio 2017 installed with .NET Core Build Tools\r\n\r\n[13:47:48][Step 4/9] Executing task: BuildSource\r\n[13:47:49][Step 4/9] Microsoft (R) Build Engine version 15.5.180.51428 for .NET Core\r\n[13:47:49][Step 4/9] Copyright (C) Microsoft Corporation. All rights reserved.\r\n[13:47:49][Step 4/9] \r\n[13:47:49][Step 4/9] C:\\BuildAgent\\work\\MyProj.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.\r\n[13:47:49][Step 4/9] An error occurred when executing task 'BuildSource'.\r\n[13:47:49][Step 4/9] Error: One or more errors occurred.\r\n[13:47:49][Step 4/9] \t.NET Core CLI: Process returned an error (exit code 1).\r\n[13:47:49][Step 4/9] Process exited with code 1",
        "createdAt": "2018-02-12T21:52:07Z",
        "updatedAt": "2018-02-12T21:53:06Z",
        "author": {
          "login": "bigswede74"
        }
      },
      {
        "body": "> 1. Path Variable MSBuildSDKsPath\r\n\r\n@bigswede74 What is PATH and what is MSBuildSdksPath?\r\n\r\nDo you have C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\SdkResolvers\\Microsoft.DotNet.MSBuildSdkResolver ?",
        "createdAt": "2018-02-12T21:53:49Z",
        "updatedAt": "2018-02-12T21:54:49Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera I have added the PATH MSBuildSdksPath=C:\\Program Files\\dotnet\\sdk\\2.1.4\\Sdks.\r\n\r\nI do have the SdkResolver on the file system at the location above.",
        "createdAt": "2018-02-12T21:58:30Z",
        "updatedAt": "2018-02-12T21:58:30Z",
        "author": {
          "login": "bigswede74"
        }
      },
      {
        "body": "> @nguerrera I have added the PATH MSBuildSdksPath=C:\\Program Files\\dotnet\\sdk\\2.1.4\\Sdks.\r\n\r\nYou should not need MSBuildSdksPath to be set at all.\r\n\r\nIs C:\\Program Files\\dotnet\\ in your PATH environment variable?",
        "createdAt": "2018-02-12T22:11:16Z",
        "updatedAt": "2018-02-12T22:11:16Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera yes I have the path variable C:\\Program Files\\dotnet\\.",
        "createdAt": "2018-02-12T22:25:30Z",
        "updatedAt": "2018-02-12T22:26:09Z",
        "author": {
          "login": "bigswede74"
        }
      },
      {
        "body": "Try this on Visual Studio command prompt:\r\n\r\nset COREHOST_TRACE=1\r\nmsbuild C:\\BuildAgent\\work\\MyProj.csproj 2> resolver.log\r\n\r\nShare resolver.log",
        "createdAt": "2018-02-12T22:35:07Z",
        "updatedAt": "2018-02-12T22:35:07Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera the resolver file is attached.\r\n\r\n[resolver.log](https://github.com/Microsoft/msbuild/files/1717968/resolver.log)\r\n",
        "createdAt": "2018-02-12T22:44:18Z",
        "updatedAt": "2018-02-12T22:44:18Z",
        "author": {
          "login": "bigswede74"
        }
      },
      {
        "body": "Just a FYI, it might help somebody else.\r\nOur setup:\r\n - new csproj targeting net46\r\n - TeamCity\r\n - Build failing with `error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found`\r\n\r\nWhat helped:\r\n - Instal `.NET Core build tools`, as suggested by @nguerrera \r\n - ***Restart TeamCity agent***\r\n\r\nWithout restarting the agent it will still fail...",
        "createdAt": "2018-02-20T23:00:17Z",
        "updatedAt": "2018-02-20T23:00:17Z",
        "author": {
          "login": "vcaraulean"
        }
      },
      {
        "body": "@nguerrera I'd prefer not to have to install .NET Core + SDK's + Runtimes just to build a .NET 4.6 class library.\r\n\r\nedit: I see from @vcaraulean's post that it's just the .net core build tools, but still. Please try and untangle these unnessessary cross sdk/framework dependencies.",
        "createdAt": "2018-04-03T13:24:55Z",
        "updatedAt": "2018-04-03T13:27:27Z",
        "author": {
          "login": "brunis"
        }
      },
      {
        "body": "The only solution that worked for this was this comment: https://github.com/dotnet/docfx/issues/1752#issuecomment-323385945\r\n\r\nSo basically I needed to add the config and change the MsBuild Path to the one inside the SDK, not use the MSBuild that's part of Visual Studio 2015.\r\n\r\n```c#\r\n // https://github.com/dotnet/docfx/issues/1752#issuecomment-323385945\r\nEnvironment.SetEnvironmentVariable(\"MSBuildSDKsPath\", \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.104\\\\Sdks\");\r\nEnvironment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.104\\\\MSBuild.dll\");\r\n```",
        "createdAt": "2018-04-13T10:36:06Z",
        "updatedAt": "2018-04-13T10:43:31Z",
        "author": {
          "login": "pjmagee"
        }
      },
      {
        "body": "**well nice job** . nguerrera .. i tried it building sln from **MSBuild.exe**\r\naccrodingly what u have said for **installing must**..\r\n\r\n![buildtools](https://user-images.githubusercontent.com/40666445/42382619-7dda669c-8152-11e8-9c07-c61966e82976.png)\r\n\r\n\r\n indeed i checked it wasn't installed\r\nafter installed and launched it worked from Developer Command 2017...\r\n\r\n![build tools](https://user-images.githubusercontent.com/40666445/42382742-ddd9e4fa-8152-11e8-9783-6023add77e77.JPG)\r\n\r\nFinally From **MSBuild.exe**\r\n![success build](https://user-images.githubusercontent.com/40666445/42382859-2679711c-8153-11e8-884a-178df92d4e43.JPG)\r\n\r\n\r\n",
        "createdAt": "2018-07-06T13:56:45Z",
        "updatedAt": "2018-07-06T14:01:30Z",
        "author": {
          "login": "Amit-Kumar-Sonkar"
        }
      },
      {
        "body": "I have updated the .NET Core Build Tools to v15.7.4 and still get the following error when trying to compile.\r\n\r\nerror MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.",
        "createdAt": "2018-07-09T16:31:18Z",
        "updatedAt": "2018-07-09T16:32:16Z",
        "author": {
          "login": "bigswede74"
        }
      },
      {
        "body": "If this is still an issue, this may help: https://blog.rsuter.com/missing-sdk-when-using-the-microsoft-build-package-in-net-core/",
        "createdAt": "2018-08-31T17:07:24Z",
        "updatedAt": "2018-08-31T17:07:24Z",
        "author": {
          "login": "RicoSuter"
        }
      },
      {
        "body": "> \r\n> \r\n> I fixed this by creating a path variable \"MSBuildSDKsPath\" with the value\r\n> \"C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\"\r\n> \r\n> I don't know why msbuild can't find this path by default, but this fixed the issue for us\r\n\r\nHow did you get that wrong path?  they are in C:\\Program Files\\dotnet\\sdk\\  ",
        "createdAt": "2018-10-17T08:47:40Z",
        "updatedAt": "2018-10-17T08:47:40Z",
        "author": {
          "login": "brunis"
        }
      },
      {
        "body": "I tried building my .NET Core project programmatically using `Microsoft.Build`, I got this error, after setting appropriate environment variables I got stackoverflow exception and \"new guard page for stack cannot be created\"\r\n\r\nI tried using ` BuildManager.DefaultBuildManager`, `Project` and `ProjectInstance`. \r\n\r\n**EDIT:**\r\n\r\nApparently the crash was caused because I needed to install more Nuget packages!\r\n\r\nAfter adding these packages it works fine!:\r\n\r\n```\r\n <PackageReference Include=\"Microsoft.Build\" Version=\"15.8.166\" />\r\n    <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.8.166\" />\r\n    <PackageReference Include=\"Microsoft.Build.Tasks.Core\" Version=\"15.8.166\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.8.166\" />\r\n```",
        "createdAt": "2018-11-09T19:48:25Z",
        "updatedAt": "2018-11-12T00:23:41Z",
        "author": {
          "login": "bugproof"
        }
      },
      {
        "body": "@Sigvaard you'll probably have an easier time if you use MSBuildLocator. See https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application?view=vs-2017.",
        "createdAt": "2018-11-19T23:34:26Z",
        "updatedAt": "2018-11-19T23:34:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm going to close this since it encompasses multiple situations; if you run into a problem with this symptom, please file a new bug with repro steps.",
        "createdAt": "2018-11-19T23:35:13Z",
        "updatedAt": "2018-11-19T23:35:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \tI'm targeting .NET Core, MSBuildLocator targets .NET Framework 4.6 and I can't use it in my project.",
        "createdAt": "2018-11-20T10:35:23Z",
        "updatedAt": "2018-11-20T10:35:23Z",
        "author": {
          "login": "bugproof"
        }
      },
      {
        "body": "@Sigvaard You'll want to follow Microsoft/MSBuildLocator#30 and Microsoft/MSBuildLocator#51 then.",
        "createdAt": "2018-11-20T14:53:15Z",
        "updatedAt": "2018-11-20T14:53:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I got this error after installing SSDT as a separate instance. I notice that it seems to defaulting to this version (which doesn't have everything installed):\r\n\r\nMSBuild auto-detection: using msbuild version '15.9.21.664' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\SQL\\MSBuild\\15.0\\bin'.\r\n\r\nHow would I switch back?",
        "createdAt": "2019-01-31T13:54:53Z",
        "updatedAt": "2019-01-31T13:55:19Z",
        "author": {
          "login": "Garwin4j"
        }
      },
      {
        "body": "Why has this issue been closed, none of the fixes listed here have worked. I have tried all of them and yet I still see the error.",
        "createdAt": "2019-02-08T22:37:09Z",
        "updatedAt": "2019-02-08T22:37:09Z",
        "author": {
          "login": "bigswede74"
        }
      },
      {
        "body": "@bigswede74 for the reason @raines stated, the same error can occur in many different circumstances. Please open a new issue and describe your full setup and repro steps. Thank you.",
        "createdAt": "2019-02-08T23:13:06Z",
        "updatedAt": "2019-02-08T23:13:06Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "For some reason .NET Core 3 preview's MSBuild.dll breaks it again and I have to set the path (`MSBUILD_EXE_PATH`) to 2.2. (I'm using @RSuter fix). I'm using MSBuild API to load the projects and it fails if `MSBUILD_EXE_PATH` is set to 3.0 MSBuild.dll",
        "createdAt": "2019-03-25T09:07:06Z",
        "updatedAt": "2019-03-25T09:07:06Z",
        "author": {
          "login": "bugproof"
        }
      },
      {
        "body": "@dark2201 Can you please open a new issue, describing the conditions you're in and the exact error? Please tag me when you do.",
        "createdAt": "2019-03-25T18:45:11Z",
        "updatedAt": "2019-03-25T18:45:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I ran OmniSharp with `COREHOST_TRACE=1` as suggested by @DustinCampbell and could see the following messsage\r\n```\r\nSearching SDK directory in [/usr/local/bin]\r\n--- Resolving SDK version from SDK dir [/usr/local/bin/sdk]\r\nChecking if resolved SDK dir [/usr/local/bin/sdk/-1.-1.-1] exists\r\nIt was not possible to find any SDK version\r\n```\r\nFWIW, on my machine, dotnet in installed in `/usr/lib64/dotnet` and has a link in `/usr/bin`.\r\nI looked inside the `/usr/local/bin` directory and found a dead symbolic link `/opt/dotnet`. I removed the symbolic link, and MSBuild now properly resolves the SDK.",
        "createdAt": "2019-03-28T16:05:26Z",
        "updatedAt": "2019-03-28T16:05:26Z",
        "author": {
          "login": "mickaelistria"
        }
      },
      {
        "body": "I used my local installation \r\n\r\n> \r\n> \r\n> > 1. Path Variable MSBuildSDKsPath\r\n> \r\n> @bigswede74 What is PATH and what is MSBuildSdksPath?\r\n> \r\n> Do you have C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\SdkResolvers\\Microsoft.DotNet.MSBuildSdkResolver ?\r\n\r\nI used my local VS 2017 installation and copied resolver to build server and problem was fixed.",
        "createdAt": "2019-08-23T10:57:35Z",
        "updatedAt": "2019-08-23T10:58:05Z",
        "author": {
          "login": "cyberkito"
        }
      },
      {
        "body": "Tried first MSBuildSdksPath no success\r\nUpdated the build tools 2017 to latest version did not work also\r\nCopying my local VS 2017 C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\SdkResolvers to build server solved for me the issue also!\r\n\r\nIdeally an update for build tools for visual studio 2017 package should fix this",
        "createdAt": "2019-09-16T16:58:15Z",
        "updatedAt": "2019-09-16T16:58:15Z",
        "author": {
          "login": "uciprian"
        }
      },
      {
        "body": "@uciprian do you have the \".NET Core Build Tools\" workload enabled for your build tools installation?",
        "createdAt": "2019-09-16T17:02:58Z",
        "updatedAt": "2019-09-16T17:02:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I stumbled into this problem today, building an app that use roslyn, [here](https://github.com/devel0/repros/tree/9dfd0018b73a1ee3276b796ceefdd75422d1a3e1/netcore/roslyn-01) there is a repro repository with a Dockerfile based upon mcr.microsoft.com/dotnet/core/sdk:3.0.100-rc1-bionic image.\r\n\r\nThe program tries to analyze a simple console test source and generate warning at [this line](https://github.com/devel0/repros/blob/master/netcore/roslyn-01/analyzer/Program.cs#L27), following is the execution of the docker image that can be built and run using [this script](https://github.com/devel0/repros/blob/master/netcore/roslyn-01/run.sh) contained in the repository\r\n\r\n```\r\nSuccessfully tagged repros/netcore-roslyn-01:latest\r\n------------ENTRYPOINT\r\n3.0.100-rc1-014190 [/usr/share/dotnet/sdk]\r\ndotnet executable = [/usr/bin/dotnet]\r\nPATH              = [/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin]\r\nDOTNET_ROOT       = [/usr/share/dotnet]\r\nMSBuildSDKsPath   = [/usr/share/dotnet/sdk/3.0.100-rc1-014190/Sdks]\r\n---> OpenProject\r\nMsbuild failed when processing the file '/src/test/test.csproj' with message: The imported project \"/app/Current/Microsoft.Common.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  /usr/share/dotnet/sdk/3.0.100-rc1-014190/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\r\n---> GetCompilation\r\nhas documents = False\r\n```\r\n\r\n**UPDATE**\r\n\r\nfixed by adding MSBUILD_EXE_PATH ( see [here](https://github.com/devel0/repros/blob/56b3b89d6e317e9ce1d592289b5bff598f326298/netcore/roslyn-01/myentrypoint.sh#L7-L11) )",
        "createdAt": "2019-09-17T17:12:02Z",
        "updatedAt": "2019-09-28T23:46:41Z",
        "author": {
          "login": "devel0"
        }
      },
      {
        "body": "> I ran OmniSharp with `COREHOST_TRACE=1` as suggested by @DustinCampbell and could see the following messsage\r\n> \r\n> ```\r\n> Searching SDK directory in [/usr/local/bin]\r\n> --- Resolving SDK version from SDK dir [/usr/local/bin/sdk]\r\n> Checking if resolved SDK dir [/usr/local/bin/sdk/-1.-1.-1] exists\r\n> It was not possible to find any SDK version\r\n> ```\r\n> \r\n> FWIW, on my machine, dotnet in installed in `/usr/lib64/dotnet` and has a link in `/usr/bin`.\r\n> I looked inside the `/usr/local/bin` directory and found a dead symbolic link `/opt/dotnet`. I removed the symbolic link, and MSBuild now properly resolves the SDK.\r\n\r\nI did all kind of stuff, this is the only thing that worked form me",
        "createdAt": "2019-10-09T06:09:45Z",
        "updatedAt": "2019-10-09T06:09:45Z",
        "author": {
          "login": "epgeroy"
        }
      },
      {
        "body": "> I ran OmniSharp with `COREHOST_TRACE=1` as suggested by @DustinCampbell and could see the following messsage\r\n> \r\n> ```\r\n> Searching SDK directory in [/usr/local/bin]\r\n> --- Resolving SDK version from SDK dir [/usr/local/bin/sdk]\r\n> Checking if resolved SDK dir [/usr/local/bin/sdk/-1.-1.-1] exists\r\n> It was not possible to find any SDK version\r\n> ```\r\n> \r\n> FWIW, on my machine, dotnet in installed in `/usr/lib64/dotnet` and has a link in `/usr/bin`.\r\n> I looked inside the `/usr/local/bin` directory and found a dead symbolic link `/opt/dotnet`. I removed the symbolic link, and MSBuild now properly resolves the SDK.\r\n\r\nThis Works Like a charm . Thanks ",
        "createdAt": "2019-12-06T07:15:01Z",
        "updatedAt": "2019-12-06T07:15:01Z",
        "author": {
          "login": "saeedtabrizi"
        }
      },
      {
        "body": "add environment variables MSBuildSDKsPath with value \"C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\" does not work for me.\r\n\r\ncopy SdkResolvers from local to build server works for me",
        "createdAt": "2020-03-01T13:20:36Z",
        "updatedAt": "2020-03-01T13:20:36Z",
        "author": {
          "login": "cwhsu1984"
        }
      },
      {
        "body": "For me it worked by running `dotnet build` instead of using `msbuild`",
        "createdAt": "2020-03-03T08:48:00Z",
        "updatedAt": "2020-03-03T08:48:00Z",
        "author": {
          "login": "mkonars"
        }
      },
      {
        "body": "@venkateswaris \r\n\r\nIf you install via choco, you need to include workloads you would normally include via the GUI: \r\n\r\nhttps://github.com/dotnet/msbuild/issues/2532#issuecomment-343578403\r\n\r\nFor me, I used this choco command:\r\n\r\n```\r\nchoco install visualstudio2019buildtools --package-parameters \"--allWorkloads --includeRecommended --includeOptional --passive --locale en-US\"\r\n```",
        "createdAt": "2020-07-22T23:36:31Z",
        "updatedAt": "2020-07-22T23:36:31Z",
        "author": {
          "login": "atniomn"
        }
      },
      {
        "body": "> Anyone who's still having trouble here, could you try unsetting `MSBuildSDKsPath` and see if the issue still repros. \r\n\r\nThis solved it for me, because previously I had a mixture of standard dotnet SDK installs (via Visual Studio), but also via scoop package manager. I had since removed scoop's version, but the environment variable was still pointing to the scoop directory. Just deleting the `MSBuildSDKsPath` environment variable thus solved it for me.\r\n\r\nIt would have been nice if the tool output this:\r\n` error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found IN THIS FREEKING DIRECTORY: C:\\asdf\\asdf\\asdf\\`\r\n\r\n",
        "createdAt": "2022-03-20T14:52:50Z",
        "updatedAt": "2022-03-20T14:52:50Z",
        "author": {
          "login": "igitur"
        }
      },
      {
        "body": "Before adding the `MSBuildSDKsPath` env variable you might first want to see if the _dotnet.exe_ is working. You can navigate to where _dotnet.exe_ is (in my case it was \"C:\\Program Files\\dotnet\") and then execute the command you want to run. I was able to run `dotnet tool install -g csharpier` correctly after this. Adding the env variable didn't help.",
        "createdAt": "2022-09-06T22:44:15Z",
        "updatedAt": "2022-09-06T22:44:15Z",
        "author": {
          "login": "adelriosantiago"
        }
      },
      {
        "body": "In my case this error was caused by a nearly empty SDK directory under `%ProgramFiles%\\dotnet\\sdk`: https://github.com/dotnet/sdk/issues/41022",
        "createdAt": "2024-06-13T14:26:31Z",
        "updatedAt": "2024-06-13T14:26:31Z",
        "author": {
          "login": "loop-evgeny"
        }
      }
    ]
  }
}