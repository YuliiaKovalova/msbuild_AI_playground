{
  "number": 616,
  "title": "Linux, MSBuild does not support the task factory \"CodeTaskFactory\" ",
  "body": "I got the below error message when I tried to build csproj file in coreclr project.\n\n```\nerror MSB4801: The task factory \"CodeTaskFactory\" could not be loaded because this version of MSBuild does not support it. [/home/jyoung/git/dotnet/coreclr_buildtestsh/tests/src/GC/Regressions/v2.0-beta2/462651/462651.csproj]\n```\n\nThe MSBuild.exe version is 14.1 and it is downloaded by init-tools.sh from nuget.\n\n```\nroot@jyoung-Samsung-DeskTop-System:/home/jyoung/git/dotnet/coreclr_buildtestsh/Tools# ./corerun MSBuild.exe /version\nMicrosoft (R) Build Engine version 14.1.0.0\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n14.1.0.0\n```\n\nCoreClr creates GenerateParamList in CLRTest.Execute.targets like below.\nBut as I know, the latest version does not support Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll.\nInstead we can use Microsoft.Build.Tasks.Core.dll. So I changed it but it still failed and the error msg was the same.\n\n```\n<UsingTask                                                                    \n    TaskName=\"GenerateParamList\"                                                \n    TaskFactory=\"CodeTaskFactory\"                                               \n    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.v4.0.dll\">          \n```\n\nWhat can I do to fix it ?\n\n(I tired to build msbuild too, because it also uses UsingTask element. But it built successfully and there is no distinction btw init-tools.sh in coreclr and init-tools.sh in msbuild. I think this issue might be related to CoreCLR envrionment. But I couldn't find it...)\n",
  "state": "CLOSED",
  "createdAt": "2016-05-13T06:43:28Z",
  "updatedAt": "2024-02-21T17:28:17Z",
  "closedAt": "2016-05-15T23:07:22Z",
  "author": {
    "login": "jyoungyun"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@jyoungyun Unfortunately, MSBuild on .NET Core does not support `CodeTaskFactory`. This is because `CodeTaskFactory` is built using the deprecated `System.CodeDom.Compiler` APIs, that are only available in the full .NET Framework, which is Windows-only. (`CodeTaskFactory` _can_ in theory be rewritten on top of the open-source [Roslyn](https://github.com/dotnet/roslyn) project, but that entails significant work and has not yet been attempted.)\n",
        "createdAt": "2016-05-15T00:03:52Z",
        "updatedAt": "2016-05-15T00:03:52Z",
        "author": {
          "login": "wjk"
        }
      },
      {
        "body": "@wjk Thank you for your comments! I can't get any info about this error. But I can build MSBuild successfully on Linux and it also uses UsingTask with CodeTaskFactory. What is the difference btw MSBuild and CoreCLR? (MSBuild uses the element in source file by comparison with targets file in CoreCLR. Does it make difference?)\n",
        "createdAt": "2016-05-15T14:03:57Z",
        "updatedAt": "2016-05-15T14:03:57Z",
        "author": {
          "login": "jyoungyun"
        }
      },
      {
        "body": "Most likely when you build MSBuild on Linux, it has been compiled against Mono instead of .NET Core. Unlike .NET Core, Mono supports `System.CodeDom.Compiler`.\n",
        "createdAt": "2016-05-15T19:29:07Z",
        "updatedAt": "2016-05-15T19:29:07Z",
        "author": {
          "login": "wjk"
        }
      },
      {
        "body": "@wjk Got it. I need to find other way to replace CodeTaskFactory. Your comments are a lot of help to me. Thank you!\n",
        "createdAt": "2016-05-15T23:06:43Z",
        "updatedAt": "2016-05-15T23:14:19Z",
        "author": {
          "login": "jyoungyun"
        }
      },
      {
        "body": "@jyoungyun You can always compile your own task assembly as a DLL and load it from there, instead of compiling the assembly at build time with `CodeTaskFactory`. The full-framework instructions at https://msdn.microsoft.com/en-us/library/t9883dzc.aspx look good, except that the project should a) target the CoreCLR/.NET Standard 1.3 and b) reference the CoreCLR, 14.1 versions of MSBuild assemblies.\n",
        "createdAt": "2016-05-16T14:56:15Z",
        "updatedAt": "2016-05-16T14:56:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thank you for your comments! I'm trying to create a task assembly as a DLL. And I'm going to use UsingTask element to load the task, it makes the same result with CodeTaskFactory I think.\n",
        "createdAt": "2016-05-16T16:28:50Z",
        "updatedAt": "2016-05-16T16:28:50Z",
        "author": {
          "login": "jyoungyun"
        }
      },
      {
        "body": "@rainersigwald, will task that reference 14.1 versions of MSBuild assemblies work with Visual Studio 2013 or earlier? What is recommended way to create msbuild task, that will work in earlier VS version alongside with dotnet build?",
        "createdAt": "2017-09-07T14:38:27Z",
        "updatedAt": "2017-09-07T14:38:27Z",
        "author": {
          "login": "iskiselev"
        }
      },
      {
        "body": "For those arriving from search, see also: https://github.com/jeffkl/RoslynCodeTaskFactory",
        "createdAt": "2017-12-20T18:08:57Z",
        "updatedAt": "2017-12-20T18:08:57Z",
        "author": {
          "login": "dls314"
        }
      },
      {
        "body": "@iskiselev There's no good way to write a single task assembly that works on MSBuild 4 or 12 _and_ on .NET Core MSBuild. I'd suggest shipping multiple assemblies, one compiled against an old MSBuild and one compiled against the 14.1 assemblies, and using two `<UsingTask>`s conditioned on `$(MSBuildAssemblyVersion)`.",
        "createdAt": "2017-12-20T18:19:47Z",
        "updatedAt": "2017-12-20T18:19:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I know this topic is closed.  I installed RoslynCodeTaskFactory and it works perfectly, but with one problem - there's a catch-22 isn't there?\r\n\r\n- User 1 updates Project X with PackageReference + new UsingTask with RoslynCodeTaskFactory\r\n- User 2 pulls the change, build fails because RoslynCodeTaskFactory doesn't exist, 'UsingTask' statement cannot succeed unless  RoslynCodeTaskFactory already installed...\r\n\r\nIt's unacceptable to me to commit changes that will break builds, am I doing something wrong, or should RoslynCodeTaskFactory be integrated into the default dotnet msbuild tools?",
        "createdAt": "2018-03-19T12:36:34Z",
        "updatedAt": "2018-03-19T12:36:34Z",
        "author": {
          "login": "ro-jo"
        }
      },
      {
        "body": "@ro-jo The `<UsingTask />` should have a condition on it so that its not created unless packages have been restored.  My sample has the condition on there but people miss it.  **Condition=\" '$(RoslynCodeTaskFactory)' != '' \"**\r\n\r\n```xml\r\n<UsingTask  \r\n    TaskName=\"DoNothing\"  \r\n    TaskFactory=\"CodeTaskFactory\"  \r\n    AssemblyFile=\"$(RoslynCodeTaskFactory)\"\r\n    Condition=\" '$(RoslynCodeTaskFactory)' != '' \">\r\n```\r\n\r\nUsers must restore packages before building to ensure a successful result.  RoslynCodeTaskFactory is no different then any package in that way.  If you reference `Newtonsoft.Json` but a user does not restore first, they will get compilation errors.\r\n\r\n`dotnet build` does an implicit restore for you unless you specify `--no-restore`.  So by adding a condition and users just running `dotnet build`, everything should work perfectly.  On Windows, Visual Studio does a restore before building and `MSBuild.exe` has a `/restore` argument that runs a restore prior to building. ",
        "createdAt": "2018-03-19T14:13:17Z",
        "updatedAt": "2018-03-19T14:13:17Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Firstly - thanks for providing CodeTaskFactory - it's the most useful of all MSBuild tasks.  In fact it's probably the only task anyone needs.\r\n\r\nI had the condition, everything looked ok but still NuGet restore wasn't pulling the package, and even after I installed it manually, ` $(RoslynCodeTaskFactory)` was empty... \r\n\r\nI was calling my 'UsingTask' with `AfterTargets = 'PrepareForBuild'`, I thought it might be the reason, so changed it to `AfterTargets='Restore'` - still didn't work.\r\n\r\nThen I noticed that for some reason 'InitialTargets' in the project file had been set to the target that was calling the CodeTaskFactory 'UsingTask'.  I deleted it and everything works as expected.  I just didn't notice the change.  It wasn't put there by VS or anything, one of our team did it - **sorry**.\r\n",
        "createdAt": "2018-03-19T17:34:34Z",
        "updatedAt": "2018-03-19T17:34:34Z",
        "author": {
          "login": "ro-jo"
        }
      },
      {
        "body": "Any chance CodeTaskFactory will work one day on Core without 3rd party packages?",
        "createdAt": "2018-05-20T08:07:11Z",
        "updatedAt": "2018-05-20T08:07:11Z",
        "author": {
          "login": "abatishchev"
        }
      },
      {
        "body": "https://github.com/Microsoft/msbuild/pull/3175",
        "createdAt": "2018-05-20T08:15:47Z",
        "updatedAt": "2018-05-20T08:15:47Z",
        "author": {
          "login": "eduherminio"
        }
      },
      {
        "body": "Cool! Do you know what version of Core is going to include that?",
        "createdAt": "2018-05-20T08:18:33Z",
        "updatedAt": "2018-05-20T08:18:33Z",
        "author": {
          "login": "abatishchev"
        }
      },
      {
        "body": "I [guess](https://github.com/Microsoft/msbuild/tree/vs15.8/src/Tasks/RoslynCodeTaskFactory) it will be included in next VS minor release (v15.8), can you confirm it @jeffkl?",
        "createdAt": "2018-05-20T08:28:31Z",
        "updatedAt": "2018-05-20T08:28:31Z",
        "author": {
          "login": "eduherminio"
        }
      },
      {
        "body": "> Cool! Do you know what version of Core is going to include that?\r\n\r\n`RoslynCodeTaskFactory` will be available in daily builds of .NET Core CLI after https://github.com/dotnet/cli/pull/9279 goes in.\r\n\r\n\r\n\r\n> I guess it will be included in next VS minor release (v15.8), can you confirm it @jeffkl?\r\n\r\nYes, the `RoslynCodeTaskFactory` will first be available in Visual Studio 2017 15.8 Preview 2.  I think that it will be out in the next week or so.  My guess is that Visual Studio 2017 15.8 RTM will ship in the summer.\r\n\r\n",
        "createdAt": "2018-05-21T14:40:27Z",
        "updatedAt": "2018-05-21T14:40:27Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl\r\nCodeTaskFactory already works in visual studio with core projects (from .Net runtime).  It's needed in builds run from the .Net core command line.  Am I missing something?",
        "createdAt": "2018-05-22T10:04:01Z",
        "updatedAt": "2018-05-22T10:04:01Z",
        "author": {
          "login": "ro-jo"
        }
      },
      {
        "body": "Yeah its a little confusing.  Visual Studio uses MSBuild.exe which is compiled against .NET Framework 4.6.  The .NET Core SDK is a collection of build targets and tasks that can run on .NET Framework or .NET Core and emit assemblies that can target either.\r\n\r\nSo you only truly run .NET Core MSBuild when you run `dotnet build`.  The .NET Core MSBuild can't use the `CodeTaskFactory` because it uses `CodeDom` which does not support compiling assemblies cross-platform (it throws a runtime exception that the platform is not supported on Linux and Mac).\r\n\r\nThe `RoslynCodeTaskFactory` generates code, references `netstandard.dll`, and uses the managed compilers that are next to MSBuild.  This means it can run the same on .NET Framework and .NET Core.  \r\n\r\nWe did want to just make `CodeTaskFactory` work on .NET Core but it would have been a very intrusive change which would have a high likelihood of a regression.  The last thing we want is for people to upgrade to the latest MSBuild and their build is broken \u2639\ufe0f.  So we chose to introduce a new task factory that you have to opt-in to.  That way we don't break anyone.",
        "createdAt": "2018-05-22T15:17:54Z",
        "updatedAt": "2018-05-22T15:17:54Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Why don't rename the new RoslynCodeTaskFactory to just CodeTaskFactory so nobody would notice?\r\n\r\nAnd another question, please. When the new task will be available on build servers? That's what interests me, rather than when it's shipped with VS. as nothing is worse than when a build works fine locally and not at all on the build server (Windows container on VSTS in my case).",
        "createdAt": "2018-05-22T15:24:58Z",
        "updatedAt": "2018-05-22T15:24:58Z",
        "author": {
          "login": "abatishchev"
        }
      },
      {
        "body": "> Why don't rename the new RoslynCodeTaskFactory to just CodeTaskFactory so nobody would notice?\r\n\r\nIf there's a bug or difference in how `RoslynCodeTaskFactory` works, you could take a 10 year old code base, upgrade to the latest MSBuild, and no longer be able to build.  That is what I'm trying to avoid.  If you need to use inline tasks on .NET Core, you've never been able to before.  So to start using a new thing, you'll need to use a different task factory.  And if you don't care, you don't change the task factory name and we have no chance of breaking you.\r\n\r\n> When the new task will be available on build servers?\r\n\r\nI am not certain how often build servers are updated.  I know that AppVeyor has a Visual Studio Preview version which is updated regularly.  `RoslynCodeTaskFactory` will be publicly available in 15.8 Preview 2.  Each build system will need to update to that version before you'll be able to use it.  And of course, if you really can't wait, you can use [my NuGet package](https://github.com/jeffkl/RoslynCodeTaskFactory) immediately.",
        "createdAt": "2018-05-22T15:30:16Z",
        "updatedAt": "2018-05-22T15:30:16Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}