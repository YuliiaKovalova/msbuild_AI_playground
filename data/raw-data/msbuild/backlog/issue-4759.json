{
  "number": 4759,
  "title": "CreateManifestResourceNames load failure in 16.3 for third-party languages that use it",
  "body": "\r\nThis issue has appeared since updating to 16.3 and appears related to #4597\r\n\r\nOur third-party language build task has derived from CreateManifestResourceNames for years (probably since the original MSBuild). A change has added a new internal property:\r\n\r\nhttps://github.com/BenVillalobos/msbuild/blob/ded7c259dcd3e1c25e342af42916bbe4e3a3a0cf/src/Tasks/CreateCSharpManifestResourceName.cs#L20\r\n\r\nUsers updating to 16.3 will get a load fail on our build tasks,  or compiling from source will give a compilation error. The workaround I have (and which F# already does and is referred to in the PR) is to derive from the C# task instead (CreateCSharpManifestResourceNames).\r\n\r\nThat doesn't feel entirely correct as the default value of the property will be '.cs' and I suppose at some point in the future it may be desirable to want to override this (and I assume also for F#).\r\n\r\nThe various resolutions to this I can see:\r\n\r\n1. Carry on with the workaround of deriving from CreateCSharpManifestResourceNames. Right now, the additional functionality added is not relevant.\r\n2. Write our own version of CreateManifestResourceNames. Even though MSBuild is now open source, my initial investigation of this shows up more issues with internal type use, making this not so straightforward as I'd hoped.\r\n3. Modify the SourceFileExtension property to be 'protected'.\r\n\r\nThis last resolution would be my preferred solution but I see from the code review comments that this property was changed from 'public' to 'internal'. Any chance of changing it to 'protected'?\r\n\r\nAre there any other suggestions or comments?\r\n \r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2019-09-25T08:35:59Z",
  "updatedAt": "2024-02-21T17:06:56Z",
  "closedAt": "2019-10-16T22:51:23Z",
  "author": {
    "login": "sae42"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.4"
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @rainersigwald @BenVillalobos ",
        "createdAt": "2019-09-25T19:56:00Z",
        "updatedAt": "2019-09-25T19:56:00Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@sae42 There is no reason we can't change the modifier to protected. Will get a PR going soon.",
        "createdAt": "2019-10-15T21:19:18Z",
        "updatedAt": "2019-10-15T21:19:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I suspect that if it was originally made **internal** the best solution is for it to be **public**, not protected; but whatever works. Will the fix make it to 16.4?",
        "createdAt": "2019-10-15T21:56:35Z",
        "updatedAt": "2019-10-15T21:56:35Z",
        "author": {
          "login": "renerod"
        }
      },
      {
        "body": "@BenVillalobos Thanks!\r\n@renerod I suggested protected just to be consistent with the other abstract members in the base class (IsSourceFile and CreateManifestName). ",
        "createdAt": "2019-10-16T07:00:46Z",
        "updatedAt": "2019-10-16T07:00:46Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "@sae42 I agree, it's just that **internal** suggested (to me) that SourceFileExtension was being referred to from some other class in the assembly, and making it **protected** might cause a regression bug. That's why **public** makes more sense to me. Either public or protected works for me (and I suspect for you too), so whichever of the two @BenVillalobos decides is fine.",
        "createdAt": "2019-10-16T13:14:40Z",
        "updatedAt": "2019-10-16T13:14:40Z",
        "author": {
          "login": "renerod"
        }
      },
      {
        "body": "@renerod this will definitely make it into 16.4. Preview 3 at the soonest. As per https://github.com/microsoft/msbuild/pull/4821#issuecomment-542820765, we'll keep it as protected unless there's a very realistic case for a regression that's flying over our heads at the moment.",
        "createdAt": "2019-10-16T18:20:22Z",
        "updatedAt": "2019-10-16T18:20:22Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Awesome, thanks!",
        "createdAt": "2019-10-16T20:34:05Z",
        "updatedAt": "2019-10-16T20:34:05Z",
        "author": {
          "login": "renerod"
        }
      }
    ]
  }
}