{
  "number": 5913,
  "title": "InvalidProjectFileException in ProjectCollection.LoadProject()",
  "body": "### Issue Description\r\n\r\nI am trying to load .csproj file with msbuild 14 API, and on a machine with both VS2019 **16.8.2** and VS2019 **16.8.0 Preview 4.0** installed, I get\r\n_Microsoft.Build.Exceptions.InvalidProjectFileException: 'The tools version \"14.0\" is unrecognized. Available tools versions are \"2.0\", \"3.5\", \"4.0\"_\r\nin the following code:\r\n```\r\nnew ProjectCollection().LoadProject(\"HelloWorld.csproj\");\r\n```\r\nwhere _HelloWorld.csproj_ looks like \r\n\r\n```\r\n<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n...\r\n</Project>\r\n```\r\nThis error goes away whan I install _Build tools for VS2015_ on my machine.\r\n**However**, this code works fine on a clean Windows 10 VM with no additional software/SDKs installed.\r\nCould we get a clear guidance on how to use msbuild API/NuGet packages for project file manipulation on machines with no VS/build tools installed?\r\n\r\nHere are the packages I am using:\r\n\r\n```\r\n    <PackageReference Include=\"System.Threading.Tasks.Dataflow\" Version=\"4.5.24\" Condition=\"$(DefineConstants.Contains(';NETFRAMEWORK'))\" />\r\n    <PackageReference Include=\"Microsoft.Build\" Version=\"14.3.0\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"14.3.0\" />\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n- Download the following project: [ToolsVersionTest.zip](https://github.com/dotnet/msbuild/files/5598432/ToolsVersionTest.zip)\r\n- Open it in VS, compile and run it\r\n\r\n### Expected Behavior\r\nThe program exits with no exception.\r\n\r\n### Actual Behavior\r\nAn exception _Microsoft.Build.Exceptions.InvalidProjectFileException: 'The tools version \"14.0\" is unrecognized. Available tools versions are \"2.0\", \"3.5\", \"4.0\"_ is thrown.\r\n\r\n### Versions & Configurations\r\nMicrosoft (R) Build Engine version 16.8.2+25e4d540b for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.8.2.56705\r\n\r\nBoth VS2019 **16.8.2** and VS2019 **16.8.0 Preview 4.0** are installed",
  "state": "CLOSED",
  "createdAt": "2020-11-25T18:00:47Z",
  "updatedAt": "2020-12-16T17:15:04Z",
  "closedAt": "2020-12-16T17:15:04Z",
  "author": {
    "login": "yevgeni-zolotko"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Can you provide more context on what you want to do and why? Ideally you want to load a project like visual studio would. This link might help: https://docs.microsoft.com/visualstudio/msbuild/updating-an-existing-application",
        "createdAt": "2020-12-02T17:11:50Z",
        "updatedAt": "2020-12-02T17:11:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos \r\n\r\n> Can you provide more context on what you want to do and why?\r\n\r\nWe make application scripting components for .NET developers. For our script projects we use the .csproj format. In our demo application, we allow users to change the script projects (i.e. add references, files, etc). Then user can save the modified project into a .csproj file. To implement saving the project, we are using msbuild libraries, namely the aforementioned APIs.",
        "createdAt": "2020-12-03T08:19:59Z",
        "updatedAt": "2020-12-03T08:19:59Z",
        "author": {
          "login": "yevgeni-zolotko"
        }
      },
      {
        "body": "Team Triage: Because you're referencing MSBuild 14.3, that requires having VS Build Tools version 14, 2015 installed. Can you try using MSBuildLocator? https://github.com/Microsoft/MSBuildLocator",
        "createdAt": "2020-12-09T16:44:03Z",
        "updatedAt": "2020-12-09T16:44:03Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos Thank you for the advise on using MSBuildLocator.\r\nBut what really of interest to us is (quoting the original question, added emphasis):\r\n> Could we get a clear guidance on how to use msbuild API/NuGet packages for project file manipulation on machines with __no VS/build tools installed?__\r\n\r\nCould you please confirm it is currently impossible to use msbuild programmatically with no VS Build Tools installed, or otherwise? Would it help if we upgraded to an msbuild version newer than 14.3?",
        "createdAt": "2020-12-10T13:39:52Z",
        "updatedAt": "2020-12-10T13:39:52Z",
        "author": {
          "login": "yevgeni-zolotko"
        }
      },
      {
        "body": "Team triage: MSBuild is more complicated than many other assemblies. It's essentially a programming language API plus an implementation of that API plus common targets that run in build. The MSBuild engine handles actually executing tasks and targets, but it doesn't have visibility into a lot of other parts of the build. It also includes a set of common targets that run for each build, and sets of targets that often run but don't run every time. If you load a project that you want to load or manipulate, we need to be able to import everything it imports. That includes .targets and .props that aren't necessarily findable or open-source. Missing those means that although you could call MSBuild, it wouldn't do what you would expect.\r\n\r\nAs a result, it's impossible to use arbitrary parts of MSBuild's API without getting the whole package from VS, build tools, or the .NET SDK. MSBuildLocator can help find and load MSBuild if it's downloaded, though the finding part doesn't work as well with VS < 15.0. You can still register MSBuild using RegisterMSBuildPath.",
        "createdAt": "2020-12-16T16:54:02Z",
        "updatedAt": "2020-12-16T16:54:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Thank you for your reply.",
        "createdAt": "2020-12-16T17:15:00Z",
        "updatedAt": "2020-12-16T17:15:00Z",
        "author": {
          "login": "yevgeni-zolotko"
        }
      }
    ]
  }
}