{
  "number": 5709,
  "title": "TargetPlatformIdentifier is not inferred for .NET Core C++/CLI Projects - prevents successful builds",
  "body": "`TargetPlatformIdentifier` is not inferred in .NET Core C++/CLI projects correctly. This affects (a) restore of C++/CLI .vcxproj and (b) creation of a new .NET Core C++/CLI .vcxproj in Visual Studio. \r\n\r\nIn both instances, the problem looks like this: \r\n\r\nRestore log: \r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(93,5): error MSB4184: The expression \"[Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('', 10.0.19041.0)\" cannot be evaluated. Parameter \"targetPlatformIdentifier\" cannot have zero length. [D:\\src\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\System.Printing\\System.Printing.vcxproj]\r\n\r\nNew Project creation failure: \r\n\r\n![HMF6WMg0ke](https://user-images.githubusercontent.com/20246435/92186731-87961680-ee0c-11ea-8cba-0099fe2a234a.gif)\r\n\r\n\r\nThe project actually gets created - it just *seems* like a failure. It's possible to open the project in Visual Studio. Trying to **build** the project leads to failure again - \r\n\r\n>Build started...\r\n1>------ Build started: Project: CppCliClassLibrary3, Configuration: Debug Win32 ------\r\n1>The expression \"[Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('', 10.0.19041.0)\" cannot be evaluated. Parameter \"targetPlatformIdentifier\" cannot have zero length.  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\r\n1>Error: The expression \"[Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('', 10.0.19041.0)\" cannot be evaluated. Parameter \"targetPlatformIdentifier\" cannot have zero length.  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n\r\n\r\n==\r\n\r\nI believe this is a regression introduced by #5624 (/cc @sfoslund). \r\n\r\nIn addition to generically blocking C++/CLI scenarios from working well with .NET 5, I also predict that this will impede [dotnet/wpf](https://github.com/dotnet/wpf)'s ability to update its repo-wide `global.json` to point to a newer version of the .NET 5 SDK. \r\n\r\n/cc @ryalanms, @dsplaisted, @richaverma1 \r\n",
  "state": "CLOSED",
  "createdAt": "2020-09-04T00:46:54Z",
  "updatedAt": "2020-09-05T01:18:01Z",
  "closedAt": "2020-09-04T05:04:06Z",
  "author": {
    "login": "vatsan-madhavan"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": " /cc @wli3 also. I thought https://github.com/dotnet/sdk/issues/12916 fixed it.",
        "createdAt": "2020-09-04T01:55:21Z",
        "updatedAt": "2020-09-04T01:55:21Z",
        "author": {
          "login": "richaverma1"
        }
      },
      {
        "body": "Why targetplatformversion need to get set for c++/CLI? Only thing it does is to get cswinrt, which is c# projection.",
        "createdAt": "2020-09-04T02:12:24Z",
        "updatedAt": "2020-09-04T02:12:24Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "Weird. A created project can build. But not in new project.",
        "createdAt": "2020-09-04T02:14:41Z",
        "updatedAt": "2020-09-04T02:14:41Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "@vatsan-madhavan this is rc1 build?",
        "createdAt": "2020-09-04T02:16:12Z",
        "updatedAt": "2020-09-04T02:16:12Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "> Weird. A created project can build. But not in new project.\n\nI suspect that a restored project can build (I had mixed luck). ",
        "createdAt": "2020-09-04T02:19:23Z",
        "updatedAt": "2020-09-04T02:20:21Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "No repro for the latest val build. This bug does exist in older version.\r\n![cppcli](https://user-images.githubusercontent.com/6993335/92201406-524fef80-ee31-11ea-8696-cd231d0be79c.gif)\r\n",
        "createdAt": "2020-09-04T05:04:06Z",
        "updatedAt": "2020-09-04T05:04:06Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "What about it makes it a no-repro? I mean, where is the TargetPlatformIdentifier being set ? ",
        "createdAt": "2020-09-04T06:50:21Z",
        "updatedAt": "2020-09-04T06:50:21Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "@wli3, I am encountering the same problem with the following setting.\r\nIs there a workaround for us?\r\n\r\n```\r\nMicrosoft Visual Studio Community 2019 Preview\r\nVersion 16.8.0 Preview 2.1\r\nVisualStudio.16.Preview/16.8.0-pre.2.1+30428.66\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2019   00435-60000-00000-AA383\r\nMicrosoft Visual C++ 2019\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual Studio VC Package   1.0\r\n```\r\n\r\n\r\n\r\n",
        "createdAt": "2020-09-04T15:16:00Z",
        "updatedAt": "2020-09-04T15:16:00Z",
        "author": {
          "login": "CBenghi"
        }
      },
      {
        "body": "So #5624 changed the logic and added an extra check for `$(_EnableDefaultWindowsPlatform) != false`\r\n\r\nhttps://github.com/dotnet/msbuild/blob/c7790e1ed37c2e6cb4fc38e76c06ed1fb15d3148/src/Tasks/Microsoft.Common.CurrentVersion.targets#L89\r\n\r\n\r\nIn [Microsoft.NET.TargetFrameworkInference.targets@L161-L165](https://github.com/dotnet/sdk/blob/fa41a211d36cf5c7cf918113d6d0397ba718f08a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.TargetFrameworkInference.targets#L161-L165), I see this **at present**: \r\n\r\n```xml\r\n  <!--C++/CLI has its own logic of determine TargetPlatformIdentifier and TargetPlatformVersion-->\r\n  <PropertyGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and '$(Language)' != 'C++'\">\r\n    <_EnableDefaultWindowsPlatform>false</_EnableDefaultWindowsPlatform>\r\n    <UseOSWinMdReferences>false</UseOSWinMdReferences>\r\n  </PropertyGroup>\r\n```\r\n\r\nIn the [version](https://github.com/dotnet/sdk/blob/d6494f982ce5ed1d39b685a6568a9950899c9fa7/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.TargetFrameworkInference.targets#L164-L167) of the SDK where I encountered the bug, this is what I saw though:\r\n\r\n```xml\r\n  <PropertyGroup  Condition=\"'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0))\">\r\n    <_EnableDefaultWindowsPlatform>false</_EnableDefaultWindowsPlatform>\r\n    <UseOSWinMdReferences>false</UseOSWinMdReferences>\r\n  </PropertyGroup>\r\n```\r\n\r\nThat probably explains the fact that the bug is fixed - the current version of the SDK has a condition that looks for `$(Language) != 'C++'` before settings `_EnableDefaultWindowsPlatform=false`. This didn't happen in older SDK's - thus the bug. \r\n\r\n==\r\n\r\n\r\nI expect that a newer SDK would overcome this problem (haven't tried this yet, but it stands to reason...)\r\n\r\n",
        "createdAt": "2020-09-04T17:08:14Z",
        "updatedAt": "2020-09-04T17:13:24Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "This should be fixed in RC1.  #13111 is the PR that fixed it.",
        "createdAt": "2020-09-05T01:18:00Z",
        "updatedAt": "2020-09-05T01:18:00Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}