{
  "number": 585,
  "title": "Support line continuation characters on Unix",
  "body": "In some recent work I've had need to execute an external program, so the `<Exec/>` task comes in handy:\n\n```\n<Exec Command=\"configure\" />\n```\n\nThe problem, though, is that the command I _really_ need to execute is _long_ -- resulting in a line which is nearly 596 characters long:\n\n```\n<Exec\n       Command=\"configure LD=&quote;...&quote; ... # plus hundreds more characters...\"\n/>\n```\n\nI want shorter lines, both to make it easier to read, and to simplify version control review and validation (long lines make for terrible diffs).\n\nThere are (at least?) two ways to make for shorter lines:\n1. Use more variables\n   \n   ```\n   <PropertyGroup>\n     <Ld>LD=&quot;@(Runtimes->'%(Ld)')&quot;</Ld>\n     <!-- ... -->\n   </PropertyGroup>\n   <Exec\n       Command=\"configure $(Ld) ...\"\n   />\n   ```\n2. Use line continuations:\n   \n   ```\n   <Exec\n       Command=\"configure ^\n         LD=&quot;...&quot; ^\n         ...\"\n   />\n   ```\n\nTruth be told, I tried (1) first, but that doesn't work with xbuild on OS X (doh!).\n\nSo I try the Unix variant on (2):\n\n```\n<Exec\n    Command=\"configure \\\n      LD=&quot;...&quot; \\\n      ...\"\n/>\n```\n\n...which promptly fails because `\\` is replaced with `/` at all instances in _both_ xbuild and msbuild (which is why I'm bringing it up here... ;-).\n\nWhat would be useful is some way of using line-continuation characters in a portable fashion. I can think of two ways to support this:\n1. On Unix, replace `^<newline>` with `\\<newline>`. This would allow us to use the Windows line-continuation character of `^` in a portable fashion.\n   \n   The problem with this is if there are any shells or commands for which a trailing `^` is appropriate, though I can't think of any programs which use `^` in this manner offhand.\n2. Fix the `s#\\#/#g` replacement that MSBuild performs so that `\\<newline>` can be used within the `//Exec/@Command` attribute. Then, we could use `Conditional` to have one command for Windows and a different command for Unix:\n   \n   ```\n   <Exec\n       Condition=\"' $(OS' == 'Windows_NT' \"\n       Command=\"this is a ^\n         very long command\"\n   />\n   <Exec\n       Condition=\"' $(OS' != 'Windows_NT' \"\n       Command=\"this is a \\\n         very long command\"\n   />\n   ```\n",
  "state": "OPEN",
  "createdAt": "2016-04-20T16:58:59Z",
  "updatedAt": "2024-02-21T16:38:41Z",
  "closedAt": null,
  "author": {
    "login": "jonpryor"
  },
  "labels": [
    "help wanted",
    "xplat",
    "needs-design",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "This isn't the only pain we've had from backslash-replacement (see also #422). At first glance I lean toward your option 1, but a relevant question is how often you get a really long command line that's identical cross-platform--if you usually have to substitute strings anyway, having a separate escape character seems ok.\n\nRe: trailing `^`: it's used in [git revision specifications](https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection#Ancestry-References), but that's the only thing I can think of offhand.\n",
        "createdAt": "2016-04-20T17:12:47Z",
        "updatedAt": "2016-04-20T17:12:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For issues like #422, I was thinking that an acceptable solution might be to use xml entity code (`&#92;` for `\\`) and the slash fixup should be done _before_ these codes are unescaped. That way the default behavior would be to convert the slashes (`s,\\,/,`), but if the user needs a particular usage to not be converted, then they can use the xml entity code.\n",
        "createdAt": "2016-04-20T17:27:33Z",
        "updatedAt": "2016-04-20T17:27:33Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "I wonder if converting `^` to `\\` might be a slippery slope - start converting more and more things from `cmd` to `sh` style? It might be better to \"force\" the user to use separate `Exec` instances, per OS. If the line continuation character is the only issue, then they could put that in a property? And combined with my earlier comment, it should work for both `^` and `\\`.\n",
        "createdAt": "2016-04-20T17:30:56Z",
        "updatedAt": "2016-04-20T17:30:56Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "...and now that we've open-sourced things, I can link to [the line in question](https://github.com/xamarin/xamarin-android/blob/a9f69ad/build-tools/mono-runtimes/mono-runtimes.targets#L22).\n\nIt's 591 characters wide.\n",
        "createdAt": "2016-05-02T14:22:08Z",
        "updatedAt": "2016-05-02T14:22:08Z",
        "author": {
          "login": "jonpryor"
        }
      },
      {
        "body": "@jonpryor It doesn't mean we shouldn't do this, but one pattern I've seen to work around this without line-continuations is something like this:\n\n``` XML\n<PropertyGroup>\n  <ConfigureCommand>path\\to\\executable first_argument</ConfigureCommand>\n  <ConfigureCommand>$(ConfigureCommand) another_argument</ConfigureCommand>\n  <ConfigureCommand>$(ConfigureCommand) yet_another_argument</ConfigureCommand>\n  <ConfigureCommand>$(ConfigureCommand) still_another_argument</ConfigureCommand>\n</PropertyGroup>\n\n<Exec Command=\"$(ConfigureCommand)\" />\n```\n\nWith a bunch of successive appends, so that while the actual command itself is super long and unwieldy, its construction in MSBuild is a bit more constrained. This is similar to your initial workaround 1, so it might hit the same problem as xbuild, unfortunately.\n\n(Seeing an example brought this to mind, thanks!)\n",
        "createdAt": "2016-05-02T15:03:43Z",
        "updatedAt": "2016-05-02T15:03:43Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}