{
  "number": 10718,
  "title": "Investigate adding `checkbinarycompat` to check binary incompatibilities",
  "body": "It seems like we should be catching regressions such as https://github.com/dotnet/msbuild/pull/10650 at build time, to ensure MSBuild binaries align with NuGet binaries.\r\n\r\nConsider using https://www.nuget.org/packages/checkbinarycompat\r\n\r\nThe readme contains extensive documentation on how to use and how it works, but basically you point it to a directory full of binaries and .app.config files and it checks that for every assembly, type and member reference it actually resolves in the destination assembly, and it checks binding redirect ranges for all entries in the app.config file. ",
  "state": "OPEN",
  "createdAt": "2024-09-28T04:52:26Z",
  "updatedAt": "2024-11-26T08:37:48Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm debugging the problem with System.Text.Json.dll and I'm not sure I understand what's going on.\r\n\r\nI'm seeing a bunch of .dlls loaded twice:\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.ProjectModel.dll\r\nC:\\Program Files\\dotnet\\sdk\\9.0.100-rc.1.24452.12\\Sdks\\Microsoft.NET.Sdk\\tools\\net472\\NuGet.ProjectModel.dll\r\n```\r\n\r\nThe one in the SDK indeed references 8.0.0.4. The one in VS references 7.0.0.3.\r\n\r\nApparently there's also the NuGetFrameworkWrapper appdomain? But both of the above .dlls are in the default appdomain?\r\n\r\nAnd NuGet.Frameworks.dll is loaded three times? 1 from SDK and 1 from VS in the primary appdomain and 1 from VS in the NuGet appdomain?\r\n\r\nI feel like this is a recipe for disaster. We need to understand what is going on here:\r\n![image](https://github.com/user-attachments/assets/4aeeb507-e85d-475e-99fd-208970844f9d)\r\n\r\n\r\n",
        "createdAt": "2024-09-28T05:19:59Z",
        "updatedAt": "2024-09-28T05:21:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "As for checkbinarycompat, we should determine which .dlls are getting loaded into MSBuild.exe at runtime and from which locations, copy them all into a temp folder, then copy MSBuild.exe.config into that folder, then run checkbinarycompat on that folder. This will ensure that the actual combination of the assemblies loaded together at runtime is being tested together.",
        "createdAt": "2024-09-28T05:23:13Z",
        "updatedAt": "2024-09-28T05:23:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "But honestly the more important task I think is to ensure dlls are not double-loaded, so probably needs another AssemblyResolve handler similar to MSBuild Locator that when the SDK requests a dll it gets loaded from the VS location (or the other way around)\r\n\r\ncc @rainersigwald @baronfel ",
        "createdAt": "2024-09-28T05:24:25Z",
        "updatedAt": "2024-09-28T05:24:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> But honestly the more important task I think is to ensure dlls are not double-loaded\r\n\r\nI don't think I agree and in fact would treat this as a non-goal. From a functional perspective it's ok for tasks to bring their own, higher copies of assemblies that VS/the SDK provide, _as long as no reference requires a binding redirect_. In addition, the engine may choose to play tricks (like `NuGetFrameworkWrapper`) to reduce runtime costs.",
        "createdAt": "2024-09-30T14:51:37Z",
        "updatedAt": "2024-09-30T14:51:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hmm, so are you saying the double loading is OK? Can we envision a setup where we only load NuGet assemblies from a single place? I know for a fact that double loading is a world of risk, but if we're getting lucky normally and you're OK with living dangerously that's fine by me, of course.\r\n\r\nJust surprised nobody is screaming and panicking at the sight of double loaded assemblies. Maybe it's just me and my scars. I've seen things you people wouldn't believe.",
        "createdAt": "2024-09-30T16:09:54Z",
        "updatedAt": "2024-09-30T16:09:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "also, AppDomains, yuck",
        "createdAt": "2024-09-30T16:10:40Z",
        "updatedAt": "2024-09-30T16:10:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Yeah we're definitely aiming for least-worst here.\r\n\r\n> Can we envision a setup where we only load NuGet assemblies from a single place?\r\n\r\nProbably not, I can't really see a way to isolate VS and the SDK from each other while preserving this.",
        "createdAt": "2024-09-30T16:14:38Z",
        "updatedAt": "2024-09-30T16:14:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "OK, then this issue is still about looking at whether we can do checkbinarycompat to catch these issues earlier (Shift Left baby!)",
        "createdAt": "2024-09-30T21:15:42Z",
        "updatedAt": "2024-09-30T21:15:42Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Team triage: We need to manually verify dotnet 9 GA sdk with high prio. With lower prio we need to automate the check. ",
        "createdAt": "2024-10-01T13:41:58Z",
        "updatedAt": "2024-10-01T13:41:58Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "(thought by @rainersigwald:)\n\nIn scope of this task we want to check closure of msbuild and tasks shipped.\n\nFor future we we should think about facilitating automation of that control for custom authored tasks",
        "createdAt": "2024-10-07T15:09:08Z",
        "updatedAt": "2024-10-07T15:09:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Note that the .NET SDK has [APICompat](https://learn.microsoft.com/en-us/dotnet/fundamentals/apicompat/overview) for that which AFAIK is already enabled in dotnet/msbuild. That tool checks api compatibility and allows certain changes that aren't source and/or binary breaking.",
        "createdAt": "2024-10-14T10:35:16Z",
        "updatedAt": "2024-10-14T10:35:16Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@ViktorHofer APICompat is insufficient for our needs--this is guarding against a break that _wasn't_ a \"breaking\" change anywhere but broke users anyway.",
        "createdAt": "2024-10-14T14:26:09Z",
        "updatedAt": "2024-10-14T14:26:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "With bootstrapped core(<repo root>\\artifacts\\bin\\bootstrap\\core) after executing build.cmd using latest main that specifies dotnet 9.0.100-rc.2.24474.11, I did the check with the tool `checkbinarycompat`.\n\nThe tool has different behaviors if msbuild-related file specs are different. See [Reports.zip](https://github.com/user-attachments/files/17434649/Reports.zip)\n\n- check the bootstrap core directory with command `checkbinarycompat -s -l`: The check doesn't find dependencies' version mismatch for msbuild assemblies which could be found using the pattern `**\\Microsoft.Build*.dll` below for file specs. The version mismatch looks like \"\nAssembly \\`Microsoft.Build.Tasks.Core\\` is referencing \\`System.CodeDom, Version=8.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51\\` but found \\`System.CodeDom, Version=9.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51\\` at \\`sdk\\9.0.100-rc.2.24474.11\\System.CodeDom.dll\\`\"\n- check msbuild assemblies with command `checkbinarycompat **\\Microsoft.Build*.dll -s -l`: Though it could find some dependencies' version mismatch, some are not correct. For example, \"Assembly \\`Microsoft.Build.Framework\\` is referencing \\`System.Collections.Immutable, Version=9.0.0.0, PublicKeyToken=b03f5f7f11d50a3a\\` but found \\`System.Collections.Immutable, Version=8.0.0.0, PublicKeyToken=b03f5f7f11d50a3a\\` at \\`sdk\\9.0.100-rc.2.24474.11\\DotnetTools\\dotnet-format\\BuildHost-net472\\System.Collections.Immutable.dll\\`\", actually msbuild is referencing System.Collections.Immutable 8.0.0 currently. However, we can take it as reference reminding to upgrade the dependency.\n- check msbuild.dll/msbuild.dll.config with command `checkbinarycompat **\\MSBuild.dll* -s -l`: No msbuild.dll issue found and this is consistent with checking the directory. For app.config `MSBuild.dll.config`, checking the directory has the correct report.\n\nNote that why I didn't used semicolon-separated patterns for file specs, it's because `checkbinarycompat **\\Microsoft.Build*.dll;**\\MSBuild.dll* -s -l` reports no issue found. I think this is a bug for the tool.\n\n[ReportAsReference.txt](https://github.com/user-attachments/files/17434791/ReportAsReference.txt) is combined report as reference.\n\n\n\n",
        "createdAt": "2024-10-18T11:39:54Z",
        "updatedAt": "2024-10-30T06:21:20Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "A couple of tips for using checkbinarycompat.\n\nFirst, make a response file with the list of directories and binaries that you'd like to scan together. \n\nFor example make a file called `binarycompat.rsp`:\n```\n#.dotnet\\sdk\\*\\Sdks\\Microsoft.Build.Tasks.Git\\tools\\net472\\Microsoft.Build.Tasks.Git.dll\n#.dotnet\\sdk\\*\\Sdks\\Microsoft.NET.Sdk\\tools\\net472\n#!.dotnet\\sdk\\*\\Sdks\\Microsoft.NET.Sdk\\tools\\net472\\NuGet*.dll\n#.dotnet\\sdk\\*\\Sdks\\Microsoft.SourceLink.*\\tools\\net472\nartifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\nartifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\nartifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\nartifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Roslyn\\Microsoft.Build.Tasks.CodeAnalysis.dll\nartifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\SdkResolvers\\**\\*.dll\n#C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\n```\n\nYou can use `#` as a comment and `!` as an exclude filter. Then just run using:\n\n`checkbinarycompat @binarycompat.rsp | clip`\n\nIt will pipe the output of the tool to the clipboard, you can then paste into any text editor to see where the tool picked up each .dll from.\n\nWith the rsp file as above and the latest build of MSBuild main branch I get this report:\n\n```\nApp.config: 'MSBuild.exe.config': couldn't find assembly 'Microsoft.Build.Conversion.Core' with version 15.1.0.0.\nApp.config: 'MSBuild.exe.config': couldn't find assembly 'Microsoft.Build.Engine' with version 15.1.0.0.\nApp.config: 'MSBuild.exe.config': couldn't find assembly 'Microsoft.NET.StringTools.net35' with version 1.0.0.0.\nApp.config: 'MSBuild.exe.config': couldn't find assembly 'System.ValueTuple' with version 4.0.0.0. Found versions: 4.0.3.0\nApp.config: 'MSBuild.exe.config': couldn't find assembly 'XamlBuildTask' with version 17.0.0.0.\nApp.config: 'MSBuild.exe.config': dependentAssembly for FxCopTask doesn't have a bindingRedirect subelement\nApp.config: 'MSBuild.exe.config': dependentAssembly for Microsoft.Deployment.DotNet.Releases doesn't have a bindingRedirect subelement\nApp.config: 'MSBuild.exe.config': dependentAssembly for Microsoft.DotNet.MSBuildSdkResolver doesn't have a bindingRedirect subelement\nApp.config: 'MSBuild.exe.config': dependentAssembly for Microsoft.VisualStudio.CodeAnalysis doesn't have a bindingRedirect subelement\nApp.config: 'MSBuild.exe.config': dependentAssembly for Microsoft.VisualStudio.CodeAnalysis.Sdk doesn't have a bindingRedirect subelement\nApp.config: 'MSBuild.exe.config': oldVersion range for Microsoft.Activities.Build is in incorrect format\nAssembly `BuildXL.Utilities.Core` is referencing `System.Threading.Channels, Version=7.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51` but found `System.Threading.Channels, Version=8.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51` at `artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\System.Threading.Channels.dll`\nIn assembly 'NuGet.Build.Tasks, Version=6.12.0.127, PublicKeyToken=31bf3856ad364e35': Failed to resolve assembly reference to 'Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, PublicKeyToken=b03f5f7f11d50a3a'\nIn assembly 'NuGet.Build.Tasks.Console, Version=6.12.0.127, PublicKeyToken=31bf3856ad364e35': Failed to resolve assembly reference to 'Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, PublicKeyToken=b03f5f7f11d50a3a'\n```\n\nYou can have several rsp files, each for a testing scenario that you care about. I recommend picking directories together to mimic the exact set of .dlls loaded at runtime. For this you can run devenv.exe or msbuild.exe under debugger, and view the Debug -> Windows -> Modules tool window for the list of full paths loaded into the process, like in my screenshot above.\n\nTo ensure it will actually catch real issues we need to reproduce the exact configuration that resulted in https://github.com/dotnet/msbuild/pull/10650 and ensure we get the warning about the wrong System.Text.Json binding redirect.\n\nWhen you say there's a bug in the tool, I'm going to need proof: a zip file with a minimal repro: just the absolute minimal number assemblies that when scanned together result in a different report that you expect. I doubt there's a bug, but I've been wrong before.",
        "createdAt": "2024-10-22T02:45:21Z",
        "updatedAt": "2024-10-22T02:47:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Also I recommend several command line tools to aid in these types of investigations:\n\nhttps://nuget.org/packages/lbi\nhttps://nuget.org/packages/refdump\nhttps://nuget.org/packages/ff\nhttps://nuget.org/packages/checkbinarycompat\n\nEach of them is a dotnet global tool, so you can install using for example `dotnet tool update -g lbi`.\n\n### lbi\nlbi finds and groups assemblies in a directory recursively:\n\n![Image](https://github.com/user-attachments/assets/b36a29fc-4288-468b-a7de-2330d59877c9)\n\n### refdump\nrefdump finds all assemblies that reference a given assembly:\n\n![Image](https://github.com/user-attachments/assets/384d6bbb-dbbe-4678-8953-fabd5e54275b)\n\n### ff\nff is just a fast file finder",
        "createdAt": "2024-10-22T02:51:46Z",
        "updatedAt": "2024-10-22T02:51:46Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Thanks @KirillOsenkov for the tips!\n\nWe need to check with dotnet 9 sdk. `artifacts\\bin\\bootstrap\\core` is the target directory which has newly built msbuild assemblies and config file copied into installed dotnet sdk there.\nWith this response file, the report [BinaryCompatReport_MSBuildFiles.txt](https://github.com/user-attachments/files/17567239/BinaryCompatReport_MSBuildFiles.txt)  looks better.\n```\ncore\\sdk\\**\\Microsoft.Build*.dll\ncore\\sdk\\**\\MSBuild.dll\ncore\\sdk\\**\\MSBuild.dll.config\n```\n\nFor checking all the assemblies and config files under `artifacts\\bin\\bootstrap\\core` using the response file below, it could not report the dependencies' version mismatch for msbuild assemblies, for example \"Assembly \\`Microsoft.Build.Tasks.Core\\` is referencing \\`System.CodeDom, Version=8.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51\\` but found \\`System.CodeDom, Version=9.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51\\` at \\`core\\sdk\\9.0.100-rc.2.24474.11\\System.CodeDom.dll\\`\". See [BinaryCompatReport_dotnet.txt](https://github.com/user-attachments/files/17567345/BinaryCompatReport_dotnet.txt).\n```\ncore\\**\\*.dll\ncore\\**\\*.config\n```",
        "createdAt": "2024-10-30T06:56:06Z",
        "updatedAt": "2024-10-30T06:56:06Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "\nWith this response file, the report [BinaryCompatReport_MSBuildFiles.txt](https://github.com/user-attachments/files/17567239/BinaryCompatReport_MSBuildFiles.txt) looks better.\n> \n> ```\n> core\\sdk\\**\\Microsoft.Build*.dll\n> core\\sdk\\**\\MSBuild.dll\n> core\\sdk\\**\\MSBuild.dll.config\n> ```\n\nI plan to upgrade the versions according to the report and run the tool `checkbinarycompat` to check again. Unfortunately, internal nuget feeds hasn't have the latest versions yet.\nTo work around I tried to add nuget.org feed https://api.nuget.org/v3/index.json and updated System.CodeDom from 8.0.0 to 9.0.0-rc.2.24473.5 which is currently latest but no released 9.0.0. Build succeeded. But running the tool to check the report still had \"Assembly \\`Microsoft.Build.Tasks.Core\\` is referencing \\`System.CodeDom, Version=8.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51\\` but found \\`System.CodeDom, Version=9.0.0.0, PublicKeyToken=cc7b13ffcd2ddd51\\` at \\`core\\sdk\\9.0.100-rc.2.24474.11\\System.CodeDom.dll\\`\".",
        "createdAt": "2024-10-30T11:41:43Z",
        "updatedAt": "2024-10-30T11:41:43Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "Thanks @GangWang01! I think we're good for .NET 9. We should continue to investigate how to push this knowledge to our users for arbitrary task creation.",
        "createdAt": "2024-10-31T20:41:12Z",
        "updatedAt": "2024-10-31T20:41:12Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}