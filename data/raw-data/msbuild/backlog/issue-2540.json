{
  "number": 2540,
  "title": "How to run MSBuild target only once before build?",
  "body": "I have a multi targeting project with custom MSBuild target. \r\n```xml\r\n<Target Name=\"MyTarget\" BeforeTargets=\"BeforeCompile\">\r\n```\r\nThe target is executed multiple times during build. Once for each target framework. Is there any way to make sure it will run only once?",
  "state": "OPEN",
  "createdAt": "2017-09-21T14:57:34Z",
  "updatedAt": "2024-02-21T16:35:43Z",
  "closedAt": null,
  "author": {
    "login": "djanosik"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I have the same issue with a custom MSBuild task that shuld run only once per build cycle, but instead runs for every target framework. Is there maybe another target for this purpose?",
        "createdAt": "2017-09-30T20:29:20Z",
        "updatedAt": "2017-09-30T20:29:20Z",
        "author": {
          "login": "BalassaMarton"
        }
      },
      {
        "body": "Any update on this? My use-case is that I am building a custom non-MS project once per build (unrelated to target frameworks) and then I just want the output of the project to get copied in to `bin\\Debug\\<target_framework_specific_dir>`. Currently there is no way to do that. I will have to either add a `Condition` in `Target` saying to build just once and then not sure how i can copy it to other target framework's out directory.",
        "createdAt": "2017-11-22T08:00:44Z",
        "updatedAt": "2017-11-22T08:00:44Z",
        "author": {
          "login": "kunalspathak"
        }
      },
      {
        "body": "I came up with a workaround, have a look at my `.targets` and `.props` files here:\r\nhttps://github.com/BalassaMarton/MSBump/tree/master/MSBump\r\nThis solution uses a lock file to prevent the target from running when inside a multi-targeting build.",
        "createdAt": "2017-11-22T09:12:37Z",
        "updatedAt": "2017-11-22T09:12:37Z",
        "author": {
          "login": "BalassaMarton"
        }
      },
      {
        "body": "Easiest way is to change the `BeforeTargets` to hook to the specific targets:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"CustomOnOuterBuild\" BeforeTargets=\"DispatchToInnerBuilds\">\r\n    <Message Importance=\"high\" Text=\"I'm running in the outer build (before). TFs: $(TargetFrameworks), TF: $(TargetFramework)\" />\r\n  </Target>\r\n\r\n  <Target Name=\"CustomOnInnerBuild\" BeforeTargets=\"BeforeBuild\">\r\n    <Message Importance=\"high\" Text=\"I'm running in the inner build (before). TFs: $(TargetFrameworks), TF: $(TargetFramework)\" />\r\n  </Target>\r\n\r\n  <Target Name=\"CustomOnAfterBuild\" AfterTargets=\"Build\">\r\n    <Message Importance=\"high\" Text=\"I'm running in the outer build (after).  TFs: $(TargetFrameworks), TF: $(TargetFramework)\" Condition=\" '$(IsCrossTargetingBuild)' == 'true' \" />\r\n    <Message Importance=\"high\" Text=\"I'm running in the innter build (after). TFs: $(TargetFrameworks), TF: $(TargetFramework)\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \" />\r\n  </Target>\r\n```\r\n\r\nShould print\r\n```\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  I'm running in the outer build (before). TFs: netstandard1.3;netstandard2.0, TF:\r\n  I'm running in the inner build (before). TFs: netstandard1.3;netstandard2.0, TF: netstandard1.3\r\n  I'm running in the inner build (before). TFs: netstandard1.3;netstandard2.0, TF: netstandard2.0\r\n  testlib -> /Users/martin.ullrich/tmp/testlib/bin/Debug/netstandard1.3/testlib.dll\r\n  I'm running in the innter build (after). TFs: netstandard1.3;netstandard2.0, TF: netstandard1.3\r\n  testlib -> /Users/martin.ullrich/tmp/testlib/bin/Debug/netstandard2.0/testlib.dll\r\n  I'm running in the innter build (after). TFs: netstandard1.3;netstandard2.0, TF: netstandard2.0\r\n  I'm running in the outer build (after).  TFs: netstandard1.3;netstandard2.0, TF:\r\n```\r\n\r\nWhile you could also use `BeforeTargets=\"Build\"` on the outer build target, this will run after the build since the multi-targeting Build target depends on the inner builds.\r\n\r\n@djanosik the compile targets (`BeforeCompile` and friends) are only executed in the inner builds so you'd need to hook on a different target as well.",
        "createdAt": "2017-11-22T09:49:55Z",
        "updatedAt": "2017-11-22T09:50:08Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli The \"outer build (after)\" message does not appear when the target is defined in a targets file in my NuGet package. Any idea how to detect \"after outer\" in that case? The other messages work, so I'm suspicious that IsCrossTargetingBuild isn't working in this case.",
        "createdAt": "2019-11-18T23:00:10Z",
        "updatedAt": "2019-11-18T23:00:10Z",
        "author": {
          "login": "JVimes"
        }
      },
      {
        "body": "NuGet targets only contribute to the inner builds since NuGet only resolves assets (including msbuild targets) per target framework involved. You can see the generated import statements in the obj\\*.g.nuget.props|targets files.",
        "createdAt": "2019-11-19T07:59:35Z",
        "updatedAt": "2019-11-19T07:59:35Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "If you want to contribute to project logic in general without actually needing a target framework, maybe [MSBuild SDKs](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk?WT.mc_id=DT-MVP-5002999) are what you are looking for.\r\nThese can basically be NuGet packages with \u00b4Sdk\\Sdk.props` and `Sdk\\Sdk.targets` files that will be imported by MSBuild itself and doesn't interfere with the nuget package graph of the project (that way it also works for packages.config projects ^^)",
        "createdAt": "2019-11-19T08:02:38Z",
        "updatedAt": "2019-11-19T08:02:38Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "> NuGet targets only contribute to the inner builds since NuGet only resolves assets (including msbuild targets) per target framework involved. You can see the generated import statements in the obj*.g.nuget.props|targets files.\r\n\r\nThis is true for normal props/targets in the `build/` folder, but you can have a `buildMultitargeting/` folder in the package that is imported only for the \"outer\" no-`TargetFramework` build.\r\n\r\nI don't think using an SDK helps here.",
        "createdAt": "2019-11-19T20:28:50Z",
        "updatedAt": "2019-11-19T20:28:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald `buildMultitargeting/` makes nearly all the [common macros](https://docs.microsoft.com/en-us/cpp/build/reference/common-macros-for-build-commands-and-properties?view=vs-2019) empty, including anything that would imply which project the package is in or where \"bin/release\" is actually located. Any ideas?\r\n\r\nEdit: Also, buildMultitargeting does not support non-SDK-style projects. Using both causes my target to run multiple times. And I found no way to differentiate between non-SDK-style project build and inner builds in my NuGet task. I gave up hope.",
        "createdAt": "2019-11-19T22:25:23Z",
        "updatedAt": "2019-11-20T20:35:14Z",
        "author": {
          "login": "JVimes"
        }
      },
      {
        "body": "```\r\nCondition=\"'$(TargetFrameworks)' == '' OR $(TargetFrameworks.EndsWith($(TargetFramework)))\" \r\n```",
        "createdAt": "2020-01-18T22:38:40Z",
        "updatedAt": "2020-01-18T22:38:40Z",
        "author": {
          "login": "SimonCropp"
        }
      }
    ]
  }
}