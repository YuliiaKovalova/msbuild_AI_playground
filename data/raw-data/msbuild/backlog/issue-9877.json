{
  "number": 9877,
  "title": "[Bug]: Can't use string functions with $(TargetFramework) if TargetFrameworks defined through Directory.Build.props",
  "body": "### Issue Description\n\nCan't use string functions (`Substring`, `IndexOf`) with `$(TargetFramework)` if `<TargetFrameworks>` defined through Directory.Build.props. Because `$(TargetFramework)` is undefined in this case:\r\n\r\n> error MSB4184: The expression \"\"\".Substring(0, -1)\" cannot be evaluated. Length cannot be less than zero. Parameter name: length\r\n\r\nNote, that `$(TargetFramework)` without string functions working well (defined).\n\n### Steps to Reproduce\n\nDirectory.Build.props:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project>\r\n    <PropertyGroup>\r\n         <TFmW>net7.0-windows;net8.0-windows</TFmW>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\nsome .Net project with *.csproj containing:\r\n```xml\r\n<PropertyGroup>\r\n    <TargetFrameworks>$(TFmW)</TargetFrameworks>\r\n</PropertyGroup>\r\n\r\n<ItemGroup>\r\n    <Reference Include=\"somedll\">\r\n<!-- working -->\r\n        <HintPath>..\\somedll\\bin\\$(Configuration)\\$(TargetFramework)\\somedll.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"somedll2\">\r\n<!-- NOT working! -->    \r\n        <HintPath>..\\somedll2\\bin\\$(Configuration)\\$(TargetFramework.Substring(0, $(TargetFramework.IndexOf('-'))))\\somedll2.dll</HintPath>\r\n    </Reference>\r\n</ItemGroup>\r\n```\n\n### Expected Behavior\n\nNo errors - `$(TargetFramework)` must be usable with string functions.\n\n### Actual Behavior\n\n`$(TargetFramework)` is undefined for string functions:\r\n> error MSB4184: The expression \"\"\".Substring(0, -1)\" cannot be evaluated. Length cannot be less than zero. Parameter name: length\n\n### Analysis\n\n- If we are using `$(TargetFramework)` without string functions everything is good.\r\n- If we define `TargetFrameworks` directly in csproj (without Directory.Build.props):\r\n  ```xml\r\n  <PropertyGroup>\r\n      <TargetFrameworks>net7.0-windows;net8.0-windows</TargetFrameworks>\r\n  </PropertyGroup>\r\n  ```\r\n  all string functions works well with `$(TargetFramework)`.\n\n### Versions & Configurations\n\nMSBuild version 17.8.5+b5265ef37 for .NET Framework\r\n17.8.5.5502\r\n\r\nWithin visual studio - same problem.",
  "state": "CLOSED",
  "createdAt": "2024-03-18T08:28:39Z",
  "updatedAt": "2024-03-19T08:26:35Z",
  "closedAt": "2024-03-18T11:38:45Z",
  "author": {
    "login": "kirsan31"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't think this is a bug.  I'd try `<ItemGroup Condition=\" $(TargetFramework) != '' \">`; the outer build won't need the Reference items anyway.",
        "createdAt": "2024-03-18T08:59:10Z",
        "updatedAt": "2024-03-18T08:59:10Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> I'd try `<ItemGroup Condition=\" $(TargetFramework) != '' \">`\r\n\r\nAnd place such an IF for every `TargetFramework`??? \ud83d\ude2d\ud83d\ude2d\ud83d\ude2d\r\nThe goal is to change `TargetFrameworks` only in **one** place (Directory.Build.props) when it's needed for many projects. But your suggestion will make it even more difficult than just changing `TargetFrameworks` in all of these projects.",
        "createdAt": "2024-03-18T09:03:35Z",
        "updatedAt": "2024-03-18T11:03:33Z",
        "author": {
          "login": "kirsan31"
        }
      },
      {
        "body": "> And place such an IF for every `TargetFramework`??? \ud83d\ude2d\ud83d\ude2d\ud83d\ude2d\n\nNo, only for the empty value.\n",
        "createdAt": "2024-03-18T10:54:16Z",
        "updatedAt": "2024-03-18T10:54:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo \r\n> No, only for the empty value.\r\n\r\nOh, then I misunderstood you \ud83e\udd26\u200d\u2642\ufe0fI tried - it works - thanks!\r\nCan you explain to me why in this case it is trying to process an empty string?\r\n\r\n\r\n\r\n",
        "createdAt": "2024-03-18T11:03:15Z",
        "updatedAt": "2024-03-18T11:03:15Z",
        "author": {
          "login": "kirsan31"
        }
      },
      {
        "body": "When you build a project that defines the TargetFrameworks property rather than TargetFramework, .NET SDK [detects this situation](https://github.com/dotnet/sdk/blob/9992441ffa504a2a429299397b14834d3a4adb92/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L14-L17) and considers the build a crosstargeting (outer) build; and the [DispatchToInnerBuilds target](https://github.com/dotnet/msbuild/blob/1a342f9c469593505c8ab411f8676dc1bdabf093/src/Tasks/Microsoft.Common.CrossTargeting.targets#L125-L135) runs a series of inner builds in which it defines TargetFramework with [each value from $(TargetFrameworks)](https://github.com/dotnet/msbuild/blob/1a342f9c469593505c8ab411f8676dc1bdabf093/src/Tasks/Microsoft.Common.CrossTargeting.targets#L58-L67).  But before MSBuild runs any targets, it has already evaluated the ItemGroup elements in your project; and if those end up calling Substring with out-of-range arguments, then it blows up as you saw.",
        "createdAt": "2024-03-18T11:36:37Z",
        "updatedAt": "2024-03-18T11:36:37Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo \r\nSorry to bother you again but you say:\r\n\r\n> But before MSBuild runs any targets, it has already evaluated the ItemGroup elements in your project; and if those end up calling Substring with out-of-range arguments, then it blows up as you saw.\r\n\r\nMy initial point was that this **only** happens when we using Directory.Build.props but if we set TargetFrameworks directly - this is not happening.",
        "createdAt": "2024-03-19T07:42:48Z",
        "updatedAt": "2024-03-19T07:42:48Z",
        "author": {
          "login": "kirsan31"
        }
      },
      {
        "body": "@kirsan31, I cannot reproduce that difference.\r\n\r\nmsbuild9877.csproj without Directory.Build.props:\r\n\r\n```xml\r\n<Project>\r\n<PropertyGroup>\r\n    <TargetFrameworks>net7.0-windows;net8.0-windows</TargetFrameworks>\r\n</PropertyGroup>\r\n\r\n<ItemGroup>\r\n    <Reference Include=\"somedll\">\r\n<!-- working -->\r\n        <HintPath>..\\somedll\\bin\\$(Configuration)\\$(TargetFramework)\\somedll.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"somedll2\">\r\n<!-- NOT working! -->    \r\n        <HintPath>..\\somedll2\\bin\\$(Configuration)\\$(TargetFramework.Substring(0, $(TargetFramework.IndexOf('-'))))\\somedll2.dll</HintPath>\r\n    </Reference>\r\n</ItemGroup>\r\n</Project>\r\n```\r\n\r\nAttempt to build:\r\n\r\n```\r\n$ dotnet msbuild\r\nMSBuild version 17.9.6+a4ecab324 for .NET\r\n[REDACTED]\\msbuild9877.csproj(13,9): error MSB4184: The expression \"\"\".Substring(0, -1)\" cannot be evaluated. length ('-1') must be a non-negative value. (Parameter 'length') Actual value was -1.\r\n```\r\n\r\nIt fails with the same error even if TargetFrameworks is set directly in the project file.",
        "createdAt": "2024-03-19T07:48:08Z",
        "updatedAt": "2024-03-19T07:48:08Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo your are right \ud83e\udd26\u200d\u2642\ufe0f\ud83e\udd26\u200d\u2642\ufe0f\ud83e\udd26\u200d\u2642\ufe0fThe only explanation I think that yesterday I compared  TargetFramework**s** from Directory.Build.props with directly stetted  TargetFramework \ud83d\ude33\r\nReally sorry to bother you \ud83d\ude4f",
        "createdAt": "2024-03-19T08:26:34Z",
        "updatedAt": "2024-03-19T08:26:34Z",
        "author": {
          "login": "kirsan31"
        }
      }
    ]
  }
}