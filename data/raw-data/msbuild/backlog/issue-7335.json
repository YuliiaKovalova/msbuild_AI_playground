{
  "number": 7335,
  "title": "Add a runtime check for Microsoft.IO.Redist",
  "body": "Since https://github.com/dotnet/msbuild/pull/6771 merged, the net472 build uses Microsoft.IO.Redist (M.IO.R) instead of System.IO. This is a problem when running the net472 build on Linux or MacOS, since M.IO.R pinvokes into Kernel32 which is a Windows library.\r\n\r\n```\r\n1093 System.EntryPointNotFoundException: GetFullPathNameW assembly:<unknown assembly> type:<unknown type> member:(null) \r\n1094 at (wrapper managed-to-native) Interop+Kernel32.GetFullPathNameW(char&,uint,char&,intptr) \r\n1095 at System.IO.PathHelper.GetFullPathName (System.ReadOnlySpan`1[T] path, System.Text.ValueStringBuilder& builder) [0x0001c] in <d528d43e4d354c288aa6a5ce49a5eba7>:0 \r\n1096 at System.IO.PathHelper.Normalize (System.String path) [0x00021] in <d528d43e4d354c288aa6a5ce49a5eba7>:0 \r\n1097 at Microsoft.IO.Path.GetFullPathInternal (System.String path) [0x0000f] in <d528d43e4d354c288aa6a5ce49a5eba7>:0 \r\n1098 at Microsoft.IO.Path.GetFullPath (System.String path) [0x00044] in <d528d43e4d354c288aa6a5ce49a5eba7>:0 \r\n```\r\n\r\nIt would be good to have a runtime check and fallback to System.IO on non-windows platforms.",
  "state": "CLOSED",
  "createdAt": "2022-01-25T20:00:31Z",
  "updatedAt": "2024-02-21T14:10:06Z",
  "closedAt": "2022-03-24T14:07:36Z",
  "author": {
    "login": "JoeRobich"
  },
  "labels": [
    "xplat",
    "Partner request",
    "Mono",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "@AR-May, does this sound like something that you could do?",
        "createdAt": "2022-02-07T18:28:30Z",
        "updatedAt": "2022-02-07T18:28:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "`Microsoft.IO.Redist` has been discontinued (dotnet/runtime#58359). With Visual Studio's imminent move to .NET Core-based MSBuild in #7258, perhaps it's time to discontinue it from MSBuild too. If it's so decided I will try it out.",
        "createdAt": "2022-02-14T11:40:06Z",
        "updatedAt": "2022-02-14T11:40:06Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "@teo-tsirpanis We have many releases of MSBuild in our future that will run on .NET Framework in Visual Studio, which has only recently adopted `Microsoft.IO.Redist` for performance reasons. I see some \"was this vetted with dependent teams?\" questions in issues linked from your PR but I'm very surprised by this change. @adamsitnik did I miss some deprecation communication there?\r\n\r\n#7258 does not represent a commitment to move off .NET Framework; it's more work along the lines of #7257 to create a more capable and unified MSBuild deployment scenario. We clarified that by editing the issue.",
        "createdAt": "2022-02-14T21:41:58Z",
        "updatedAt": "2022-02-14T21:41:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> did I miss some deprecation communication there\r\n\r\nYou have not, as we haven't made it yet.\r\n\r\nWe have tried to find users of it (https://github.com/dotnet/runtime/issues/54919#issuecomment-870870457), but we did not find any. Since it was increasing the complexity (#if defs for .NET and .NET Framework) and maintenance (the logic had to be tested for both runtimes) we decided to stop shipping it. It means that we won't be adding new APIs to it, but if you hit a bug in the version that we have shipped with .NET 6, we are (most likely) going to fix it.\r\n\r\ncc @jeffhandley ",
        "createdAt": "2022-02-15T16:22:49Z",
        "updatedAt": "2022-02-15T16:22:49Z",
        "author": {
          "login": "adamsitnik"
        }
      }
    ]
  }
}