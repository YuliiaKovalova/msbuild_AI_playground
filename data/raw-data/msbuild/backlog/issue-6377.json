{
  "number": 6377,
  "title": "InvalidProjectFileException (MSB0001: Internal MSBuild Error: A required NuGet assembly was not found)",
  "body": "### Issue Description\r\nUsing recent MSBuild previews, loading projects in units tests (via `new ProjectInstance`) is failing for me with this error:\r\n\r\n```\r\n  Error Message:\r\n   Microsoft.Build.Exceptions.InvalidProjectFileException : The expression \"[MSBuild]::GetTargetFrameworkIdentifier(net5.0)\" cannot be evaluated. MSB0001: Internal MSBuild Error: A required NuGet assembly was not found. Expected Path: C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.2.21155.3  C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.2.21155.3\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets\r\n  Stack Trace:\r\n     at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject[T1,T2](IElementLocation elementLocation, String resourceName, T1 arg0, T2 arg1)\r\n   at Microsoft.Build.Evaluation.Expander`2.Function`1.Execute(Object objectInstance, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertyBody(String propertyBody, Object propertyValue, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, IFileSystem fileSystem)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveTypedAndEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, IFileSystem fileSystem)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, IFileSystem fileSystem)\r\n   at Microsoft.Build.Evaluation.Expander`2.ExpandIntoStringLeaveEscaped(String expression, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluatePropertyElement(ProjectPropertyElement propertyElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluatePropertyGroupElement(ProjectPropertyGroupElement propertyGroupElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCacheBase projectRootElementCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationContext evaluationContext, Boolean interactive)\r\n   at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, String explicitToolsVersion, String explicitSubToolsetVersion, Int32 visualStudioVersionFromSolution, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile)\r\n   at ProjectInstanceRepro.Program.LoadTestProject() in D:\\scratch\\ProjectInstanceRepro\\ProjectInstanceRepro\\Program.cs:line 22\r\n   at ProjectInstanceRepro.Program.Main() in D:\\scratch\\ProjectInstanceRepro\\ProjectInstanceRepro\\Program.cs:line 17\r\n   at TestProj.UnitTest1.Test1() in D:\\scratch\\ProjectInstanceRepro\\TestProj\\UnitTest1.cs:line 12\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nI've created a small repro at [mjrousos/ProjectInstanceRepro](https://github.com/mjrousos/ProjectInstanceRepro).\r\n\r\nNotice that running the 'ProjectInstanceRepro' app succeeds but running `dotnet test` on either test project (which just invoke ProjectInstanceRepro's main method) fails.\r\n\r\n### Expected Behavior\r\nThe project instance should load successfully.\r\n\r\n### Actual Behavior\r\nThe error shown above.\r\n\r\n### Versions & Configurations\r\nThis appears to repro in both 5.0.300-preview.21180.15 and 6.0.100-preview.2.21155.3.",
  "state": "CLOSED",
  "createdAt": "2021-04-27T17:55:16Z",
  "updatedAt": "2024-02-21T14:13:46Z",
  "closedAt": "2021-05-12T15:05:44Z",
  "author": {
    "login": "mjrousos"
  },
  "labels": [
    "bug",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Related to https://github.com/microsoft/MSBuildLocator/pull/115",
        "createdAt": "2021-04-28T15:37:27Z",
        "updatedAt": "2021-04-28T15:37:27Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "With debugging help from @rainersigwald, it seems the problem is more related to #6126.\r\n\r\nThe TryLoadAssembly function from MSBuildLocator is invoked several times but never for a NuGet assembly. The last assembly it tries to load is StringTools. After that, it gets [here](https://github.com/dotnet/msbuild/blob/5b9216a75e98e19eba84e04a5f30bd35a68f317a/src/Build/Utilities/NuGetFrameworkWrapper.cs#L30-L32) where it tries to load Nuget.Frameworks.\r\n\r\nWe inspected the values of BuildEnvironmentHelper.Instance.Mode and BuildEnvironmentHelper.VisualStudio, and they did not match, so we assumed it would go to the else part. BuildEnvironmentHlper.Instance.CurrentMSBuildToolsDirectory seemed correct as well. This all seems right.\r\n\r\nSomehow, assemblyDirectory did not get the right value. Rather than a path to the NuGet assembly as was present in CurrentMSBuildToolsDirectory, it was set to \"Platform\". Then the Assembly.LoadFrom call failed, leading to the InternalErrorException.\r\n\r\nBased on that exception, I would have assumed that Platform would be in the error message, but it was not. You can see that it expected the NuGet assembly at the correct path (and it's there, at least on my computer), but it didn't find it, perhaps because assemblyDirectory was briefly reset to \"Platform\" just for the Assembly.LoadFrom call? That part mystifies me.\r\n\r\n@brianrob, do you have any idea what's going on?",
        "createdAt": "2021-04-29T19:33:48Z",
        "updatedAt": "2021-04-29T19:33:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hello, just wanted to follow-up if there were any updates regarding this issue. This is currently blocking the dotnet/aspnetcore SDK update (https://github.com/dotnet/aspnetcore/pull/32298), and consequently consumption of other bug fixes (ex. https://github.com/dotnet/aspnetcore/issues/32237)\r\n\r\n@forgind . @brianrob",
        "createdAt": "2021-05-05T19:17:10Z",
        "updatedAt": "2021-05-05T19:17:10Z",
        "author": {
          "login": "TanayParikh"
        }
      },
      {
        "body": "Also tagging @marcpopMSFT here.",
        "createdAt": "2021-05-06T18:19:02Z",
        "updatedAt": "2021-05-06T18:19:02Z",
        "author": {
          "login": "Pilchie"
        }
      },
      {
        "body": "Sorry @forgind, I missed this in my e-mail.  Just looking briefly at this, it's definitely in a place that got touched in .NET 6.  However, it looks like it also repros with .NET 5 as well per @mjrousos note above.\r\n\r\n> This appears to repro in both 5.0.300-preview.21180.15 and 6.0.100-preview.2.21155.3.\r\n\r\nDid the loading changes get backported by chance?",
        "createdAt": "2021-05-06T18:30:15Z",
        "updatedAt": "2021-05-06T18:30:15Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "@brianrob the same MSBuild is in .net 6 preview 4 and 5.0.300 as we hadn't forked for 17.0 yet.  That'll be different for .NET 6 preview 5 and onward so the change is in both.",
        "createdAt": "2021-05-06T18:35:27Z",
        "updatedAt": "2021-05-06T18:35:27Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "MSBuild 16.10 is in both of those releases, and that's what main was when you checked in. We can consider backing out the change in 16.10/5.0.300 and fixing forward for 17.0/6.0.100 if we can't figure it out quickly.",
        "createdAt": "2021-05-06T18:35:30Z",
        "updatedAt": "2021-05-06T18:35:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @marcpopMSFT and @rainersigwald.  It looks like the issue here is that there is already a different version of NuGet.Frameworks.dll loaded into the process in the default assembly load context.  Thus, the second load fails because you can't load the same assembly with a different version into the same assembly load context.\r\n\r\nIt looks like the initial load happens in the app, and then the app invokes MSBuild, which results in the second load attempt.\r\n\r\nHistorically, this worked because MSBuild loaded NuGet.Frameworks.dll using LoadFile which is a completely different runtime load context (different from assembly load context).  We switched to using LoadFrom in order to get the performance benefits that come with this (in the case of this change, less jitting).  I am suspicious though that keeping this performance improvement is going to require a bigger change, because MSBuild has taken a dependency on a particular version of NuGet.Frameworks.dll (the one in the sdk directory), but can also be loaded into any arbitrary app that might have loaded a different one.\r\n\r\n@rainersigwald, is it reasonable to just use the already loaded NuGet.Frameworks.dll if one is already loaded, or do we have a dependency on this particular version?  Regardless, there is definitely a race here to load the version of NuGet.Frameworks.dll that you want, and so we may need to back this out and re-design.",
        "createdAt": "2021-05-06T20:10:03Z",
        "updatedAt": "2021-05-06T20:10:03Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "Aha, I see a bit more about what's going on. [Microsoft.TestPlatform.ObjectModel](https://www.nuget.org/packages/Microsoft.TestPlatform.ObjectModel/16.8.3) has a dependency on `NuGet.Frameworks (>= 5.0.0)`, and is pulled into the test project. Then that NuGet.Frameworks version is put into the test output folder and loaded when tests run because _the test framework does it_.\r\n\r\nSo Brian's description is exactly what's happening.\r\n\r\n> is it reasonable to just use the already loaded NuGet.Frameworks.dll if one is already loaded, or do we have a dependency on this particular version?\r\n\r\nWe have a dependency on some APIs that aren't in every conceivable NuGet.Frameworks.dll, though we could _probably_ get by with \"any version newer than X\" for some value of X barring breaking NuGet changes. But X will vary based on MSBuild version.\r\n\r\nI think I'm leaning toward \"back out and think harder\" since this is causing pain to our ASP.NET friends.",
        "createdAt": "2021-05-06T22:15:04Z",
        "updatedAt": "2021-05-06T22:15:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@brianrob Is it possible to fall back to `LoadFile` if `LoadFrom` fails? I wouldn't mind the perf hit in that case I don't think.",
        "createdAt": "2021-05-06T22:16:52Z",
        "updatedAt": "2021-05-06T22:16:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This also presents a workaround possibility: exactly match the SDK nuget.frameworks version. For the minimized repro and my 300 preview build this wasn't too too hard: https://github.com/mjrousos/ProjectInstanceRepro/pull/1\r\n\r\nIt's not good in general of course though.",
        "createdAt": "2021-05-06T22:45:43Z",
        "updatedAt": "2021-05-06T22:45:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think the answer is yes - we could fall back to `LoadFile`, but there is another potential pitfall here.  There's a race - whoever loads their version of `NuGet.Frameworks.dll` wins.  So, if MSBuild loads first, then whoever tries next will fail, unless it's part of a `Task` in which case it will be loaded into the plugin assembly load context.  I suspect that we need to back this out and re-think.  Ideally, we remove the dependency on `NuGet.Frameworks.dll` from MSBuild because it doesn't version with MSBuild, but that's likely a bigger conversation.  Do you want me to author a revert for this?",
        "createdAt": "2021-05-06T23:48:36Z",
        "updatedAt": "2021-05-06T23:48:36Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "Yes please. Can you base on and target vs16.10?\n",
        "createdAt": "2021-05-07T00:44:16Z",
        "updatedAt": "2021-05-07T00:44:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Posted https://github.com/dotnet/msbuild/pull/6423 to revert the changes.",
        "createdAt": "2021-05-07T04:22:47Z",
        "updatedAt": "2021-05-07T04:22:47Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "Team Triage: Closing as the fix is merged and will flow into main soon.",
        "createdAt": "2021-05-12T15:05:44Z",
        "updatedAt": "2021-05-12T15:05:44Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}