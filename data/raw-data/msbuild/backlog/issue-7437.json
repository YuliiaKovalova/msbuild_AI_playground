{
  "number": 7437,
  "title": "Suggest:  Once = true attribute for Targets to allow target only executed once per solution. in Directory.Build.targets",
  "body": "**Shortly,**\r\n1. If you have a Target that executed after build in Directory.Build.targets file.\r\n2. It will executed for each csproj Project\r\n3. Its awesome to do an attribute like `<Target Name = \"CleanSolution\" Once=true> </Target>`\r\n4. It only executed once. (Whether we build single project or whole solution)\r\n\r\nI came back here really when I try to execute a target only once. I try to add a lock file. But It need much deal with stop build, So I try to count the current working project and increase flag file (File that contains numeric value). I increase file in when <Target> called. Then when (flag file number = project counts - 1). the target are called. So it will called once. But actually it didn't work well. During sometimes Build are stop. I need to delete flag file and re-create it again. Too long journey that never worked for me.\r\n\r\nI found some people ask about that. But answers suggest using DispatchToInnerBuilds. (Which are not very clear to me....)\r\nFrom comment found in link \r\nhttps://stackoverflow.com/questions/46675782/how-to-make-an-msbuild-target-that-only-runs-once-instead-of-once-before-target\r\n\r\n**DispatchToInnerBuilds seems to only work for projects with TargetFrameworks**\r\n\r\nSo please is there any feature/or maybe you need to implement something like that:\r\n\r\n```\r\n\t<Target Name=\"CleanSolution\" Once=\"true\" AfterTargets=\"AfterBuild\">\r\n\t\t<Exec Command=\"del /Q /F &quot;$(OutputPath)*.pdb&quot;,&quot;$(OutputPath)*.xml&quot;\"/>\r\n\t</Target>\r\n```\r\n\r\nThank you much MSBuild, Visual Studio team. We appreciate your great efforts!",
  "state": "CLOSED",
  "createdAt": "2022-03-04T16:02:22Z",
  "updatedAt": "2024-02-21T14:09:30Z",
  "closedAt": "2022-03-17T20:58:41Z",
  "author": {
    "login": "softwarekamal"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Hi @softwarekamal,\r\nI think you want to use `$(TargetName)`. But I'll get to that.\r\n\r\nMSBuild is project oriented and within a project a target will only run once. Having a `Once` attribute on `Target` doesn't make sense.\r\n\r\nWhen MSBuild is given a .sln file, it create a 'meta project' from the .sln and then runs that generated project. The projects that are members of the .sln are run in separate contexts from the 'meta project'.\r\n\r\nYou can see the generated meta project by setting the environment variable `MSBUILDEMITSOLUTION` to 1 as documented in [Troubleshooting](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-build-specific-targets-in-solutions-by-using-msbuild-exe?view=vs-2022#troubleshooting).\r\n\r\nIn a sense what you are actually asking for, is to have a custom target be run as part of the sln meta project.\r\n\r\nFrom the command line you can already do this by creating `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` files as documented in [Customize the solution build](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022#customize-the-solution-build). Unfortunately when building within Visual Studio, these files are not used.\r\n\r\nA better 'ask' than adding a `Once` attribute to `Target`, might be to request that Visual Studio support the before|after.*.sln.targets files so that Visual Studio and command line builds are more consistent.\r\n\r\nBut all that said, for your example MSBuild code, I would advise:\r\n\r\n- If possible, adjust your project settings to prevent creating the unwanted files. The generation of the .pdb and .xml files can be turned off.\r\n- Use `$(OutputPath)$(TargetName).pdb` and `$(OutputPath)$(TargetName).xml`. $(TargetName) is a standard property and is the base name of the primary output file for the current project. By specifying $(TargetName), it is actually okay and desirable to run the target for each csproj project.\r\n- Use the [Delete task](https://docs.microsoft.com/en-us/visualstudio/msbuild/delete-task) instead of an Exec.\r\n\r\nThanks",
        "createdAt": "2022-03-04T18:50:59Z",
        "updatedAt": "2022-03-04T18:50:59Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Hello [jrdodds](https://github.com/jrdodds)\r\nThank you much for your fast reply. I search for solution targets. But actually looks it can't run inside Visual Studio. \r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022#customize-the-solution-build\r\n\r\n> solution build in this way applies only to command-line builds with MSBuild.exe. It does not apply to builds inside Visual Studio\r\n\r\nI give a test but when I rebuild solution. the Solution Target not executed....\r\n![image](https://user-images.githubusercontent.com/33269552/156843999-11e8518b-619b-470c-a8ad-8b6301785c50.png)\r\n\r\n",
        "createdAt": "2022-03-04T21:27:59Z",
        "updatedAt": "2022-03-04T21:27:59Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "Yes. When I wrote \"Unfortunately when building within Visual Studio, these files are not used\", that is what I was making reference to.",
        "createdAt": "2022-03-05T00:14:16Z",
        "updatedAt": "2022-03-05T00:14:16Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Have you tried the following?\r\n\r\n```\r\n\t<Target Name=\"CleanSolution\" AfterTargets=\"AfterBuild\">\r\n            <Delete Files=\"$(OutDir)$(TargetName).pdb;$(OutDir)$(TargetName).xml\" />\r\n\t</Target>\r\n```",
        "createdAt": "2022-03-05T00:16:57Z",
        "updatedAt": "2022-03-05T00:16:57Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Hello [jrdodds](https://github.com/jrdodds),\r\nThank you much for your effort dear\r\n\r\nYes command work. But if you use third-party .dll libraries the *.xml files still generated for these libraries.\r\n\r\nIf you have 4 projects that references these (3rd parties dlls)\r\nThe .xml and .pdb still exists for 3rd parties libraries\r\n\r\nShould I use loop or something like <Delete Files=\"@(DeleteAfterBuild)\" />\r\nhttps://stackoverflow.com/questions/851647/how-to-delete-multiple-files-with-msbuild-web-deployment-project",
        "createdAt": "2022-03-06T13:04:55Z",
        "updatedAt": "2022-03-06T13:04:55Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "Hi @softwarekamal,\r\nMSBuild is declarative and has no loops (like standard SQL). An `ItemGroup` is used to create a set of items which can then be provided to a task like `Delete`.\r\n\r\nAre the third party DLLs being referenced as NuGet packages?\r\n\r\nAre you using the same output directory (i.e. `$(OutDir)`) for every project in your solution or does each project have its own output directory?\r\n\r\nThanks",
        "createdAt": "2022-03-06T15:52:47Z",
        "updatedAt": "2022-03-06T15:52:47Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Hello dear,\r\nYes I use the same output directory,\r\n\r\nI try command your provided `<Delete> ` It worked with combination with this question:\r\nhttps://stackoverflow.com/questions/851647/how-to-delete-multiple-files-with-msbuild-web-deployment-project\r\n\r\nFinal result is: (I feel more code to achieve result)\r\n```\r\n\t<Target Name=\"CleanUnusedFilesAfterBuild\" AfterTargets=\"AfterBuild\">\r\n\t\t<ItemGroup>\r\n\t\t\t<FileToDelete Include=\"$(OutputPath)\\*.pdb\"/>\r\n\t\t\t<FileToDelete Include=\"$(OutputPath)\\*.xml\"/>\r\n\t\t</ItemGroup>\r\n\t\t<Delete Files=\"@(FileToDelete)\"/>\r\n\t</Target>\r\n```\r\n\r\nI wonder why short code `<Delete Files = \"$(OutputPath)\\*.xml\"/`> not worked...",
        "createdAt": "2022-03-06T17:07:27Z",
        "updatedAt": "2022-03-06T17:07:27Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "```\r\n\t<Target Name=\"CleanUnusedFilesAfterBuild\" AfterTargets=\"AfterBuild\">\r\n\t\t<ItemGroup>\r\n\t\t\t<FileToDelete Include=\"$(OutputPath)\\*.pdb\"/>\r\n\t\t\t<FileToDelete Include=\"$(OutputPath)\\*.xml\"/>\r\n\t\t</ItemGroup>\r\n\t\t<Delete Files=\"@(FileToDelete)\"/>\r\n\t</Target>\r\n```\r\n\r\nand\r\n\r\n```\r\n\t<Target Name=\"CleanUnusedFilesAfterBuild\" AfterTargets=\"AfterBuild\">\r\n\t\t<Delete Files=\"$(OutputPath)\\*.pdb;$(OutputPath)\\*.xml\"/>\r\n\t</Target>\r\n```\r\n\r\nshould be equivalent.\r\n\r\nBut I would use the first version, even though it is longer. I think the first version is slightly easier to understand and maintain.",
        "createdAt": "2022-03-06T17:52:57Z",
        "updatedAt": "2022-03-06T17:52:57Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Deleting outputs during build will lead to your projects being eternally out of date and always being built, which will negatively impact your productivity.\n\nSome ideas to consider:\n\n- Rather than delete XML and PDB files, configure the projects not to produce these in the first place. \n\n- It seems like you're trying to tidy up the output directory. I'm guessing this is for some kind of publishing or packaging purpose. Could you customise the Publish operation rather than the Build one?",
        "createdAt": "2022-03-06T21:38:56Z",
        "updatedAt": "2022-03-06T21:38:56Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@softwarekamal, I agree with @drewnoakes.\r\n\r\nAlso note that the PDB (Program DataBase) files are used by the debugger and removing the .pdb files from Debug builds is probably not a good idea.",
        "createdAt": "2022-03-06T22:46:12Z",
        "updatedAt": "2022-03-06T22:46:12Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Hello [drewnoakes](https://github.com/drewnoakes) and [jrdodds](https://github.com/jrdodds)\r\nYou both are really helped me enough!\r\nThe output path became nightmare. When I try to remove (files generated by compiler). Sometimes I got error message can't copy Foo.xml file messages, \r\n\r\nAs you mentioned [drewnoakes](https://github.com/drewnoakes) The projects always being built. plus I got error tons of errors during I try to remove *pdb file with AfterBuild target. while it also produced by other project. Its really fun scenario I try to do.\r\n\r\n> Unable to delete file \"Build\\bin\\Debug\\CefSharp.Core.Runtime.pdb\". The process cannot access the file 'Source\\Build\\bin\\Debug\\CefSharp.Core.Runtime.pdb' because it is being used by another process.\r\n\r\nSo. All I need in Release Configuration I need delete *.xml, *.pdb, etc. And yes I try to publishing without any redundant files.\r\nYes I can prevent *.pdb files for solution projects only. not 3rd party tools. It must copied, That's why I wish to execute a delete *.pdb after whole solution build. Otherwise sometimes I will got above error in quote \"\"\r\n\r\nShould I create a batch.bat file for that... and just click on it when I need to clean the bin/Release folder from redundant files?\r\n\r\nAfter I build a solution. I got many redundant files and folders. Which I can't prevent them from published. as its shipped with any 3rd party toolkits ex:- nuget, etc. ( I need to remove *.pdb, *.xml, localization folders (en, es, etc) ) and some other extensions that I can't prevent visual studio to generate them. That's why I must find a click-once/or MSBuild Targets that executes once to do that.\r\n\r\nThank you much both.\r\nI still need something to do in .targets file to executes only once per whole solution!",
        "createdAt": "2022-03-06T23:53:25Z",
        "updatedAt": "2022-03-06T23:53:25Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "Perhaps you need to consider a different approach, rather than deleting the files, perhaps removing them from the list of files that's copied would be better.\r\n\r\nExample might look something like:\r\n\r\n```c#\r\n<Target Name=\"ExcludeFilesAfterResolveAssemblyReferences\" AfterTargets=\"ResolveAssemblyReferences\" Condition=\"'$(Configuration)' == 'Release'\">\r\n    <ItemGroup>\r\n      <_ReferenceCopyLocalFiltered Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(Filename)%(Extension)' == 'MyDll.pdb'\" />\r\n      <_ReferenceCopyLocalFiltered Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(Filename)%(Extension)' == 'MyDll.xml'\" />\r\n      <ReferenceCopyLocalPaths Remove=\"@(_ReferenceCopyLocalFiltered)\" />\r\n    </ItemGroup>\r\n</Target>\r\n```\r\n\r\nYou'd have to workout the exact syntax for your scenario. \r\n\r\nJust an idea.",
        "createdAt": "2022-03-08T00:05:28Z",
        "updatedAt": "2022-03-08T00:05:28Z",
        "author": {
          "login": "amaitland"
        }
      },
      {
        "body": "I haven't read all of the above, but here's a neat trick for making a target only build once:\r\nMake a project that does nothing but build the one target. This can be very simple\u2014not even an SDK.\r\nOther projects, rather than building the same target, can build the project with <MSBuild Projects=\"...\"... />. Targets already only build once per build per project per set of global variables, so if you remove any extra global variables, it should make that target build just once per build as desired.\r\n\r\nHope that helps!",
        "createdAt": "2022-03-10T18:01:07Z",
        "updatedAt": "2022-03-10T18:01:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "At this point this issue is not a defect or an enhancement to MSBuild. It is a 'how to' question.",
        "createdAt": "2022-03-11T17:46:52Z",
        "updatedAt": "2022-03-11T17:46:52Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "True. Moved it to the Discussion milestone.",
        "createdAt": "2022-03-11T17:48:08Z",
        "updatedAt": "2022-03-11T17:48:08Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hello @amaitland,\r\nI tested your code. But nothing worked. I try following to make sure it can delete a specific DLL or something. But the DLL exported after build in Release.\r\n\r\n```\r\n\t<Target Name=\"ExcludeFilesAfterResolveAssemblyReferences\" AfterTargets=\"ResolveAssemblyReferences\" Condition=\"'$(Configuration)' == 'Release'\">\r\n\t\t<ItemGroup>\r\n\t\t\t<_ReferenceCopyLocalFiltered Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(Filename)%(Extension)' == 'CefSharp.BrowserSubprocess.Core.dll'\" />\r\n\t\t\t<_ReferenceCopyLocalFiltered Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(Filename)%(Extension)' == 'MyDll.xml'\" />\r\n\t\t\t<ReferenceCopyLocalPaths Remove=\"@(_ReferenceCopyLocalFiltered)\" />\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n```\r\n\r\nCan you help please on that?",
        "createdAt": "2022-03-11T20:26:47Z",
        "updatedAt": "2022-03-11T20:26:47Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "Hello [Forgind](https://github.com/Forgind),\r\nPlease  I don't really understand how to apply that...\r\nIf you refer to my [comment ](https://github.com/dotnet/msbuild/issues/7437#issuecomment-1060067517)\r\n\r\n> The projects always being built. plus I got error tons of errors during I try to remove *pdb file with AfterBuild target. while it also produced by other project.\r\n\r\nAm not 100% understand how ResolveAssemblyReferences target works. And I wish I can, I need to remove specific files and folders that I can't prevent them from generating. That's why I need execute a simple Target only once to remove these files/folders. \r\n\r\nThis is the last solution I came with. But I still sometimes when build I got error in Quotes \"\" above. \r\n\r\n```\r\n\t<Target Name=\"CleanUnusedFilesAfterBuild\" Condition=\"'$(Configuration)' == 'Release'\" AfterTargets=\"AfterBuild\">\r\n\t\t<!-- Remove *.xml, *.pdb files -->\r\n\t\t<ItemGroup>\r\n\t\t\t<FileToDelete Include=\"$(OutputPath)\\*.pdb\"/>\r\n\t\t\t<FileToDelete Include=\"$(OutputPath)\\*.xml\"/>\r\n\t\t</ItemGroup>\t\t\r\n\t\t<Delete Files=\"@(FileToDelete)\"/>\r\n\r\n\t\t<RemoveDir Directories=\"$(OutputPath)\\ru;$(OutputPath)\\de;$(OutputPath)\\es;$(OutputPath)\\ja\"/>\r\n\t\t<RemoveDir Directories=\"$(OutputPath)\\locals\"/>\r\n\t</Target>\r\n```\r\n\r\nThank you much men, Am waiting for more satisfied workaround.\r\n\r\n\r\n",
        "createdAt": "2022-03-11T20:38:38Z",
        "updatedAt": "2022-03-11T20:38:38Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "Hello [Forgind](https://github.com/Forgind),\r\n> Make a project that does nothing but build the one target. This can be very simple\u2014not even an SDK.\r\n\r\nAlso your scenario maybe works in solution build. But sometimes I need build only specific project. \r\n(So I need a **Shared Target** concept). Which can work in **solution level build** or **project level build**. (Only once).\r\nThat's why I think creating empty project to do one target maybe not work in project build level. (I'm not sure!)\r\n\r\nAm waiting for more explanation for your [idea](https://github.com/dotnet/msbuild/issues/7437#issuecomment-1064343213)! :)\r\n\r\nThank you much men.",
        "createdAt": "2022-03-11T20:44:08Z",
        "updatedAt": "2022-03-11T20:45:15Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "> I tested your code. But nothing worked. I try following to make sure it can delete a specific DLL or something. But the DLL exported after build in Release.\r\n\r\n@softwarekamal I'd suggest having msbuild create a structure log and using https://msbuildlog.com/#usingbl to debug, you can then look at the different targets and their item groups. Work out exactly what you need for your scenario.\r\n\r\nhttps://github.com/cefsharp/CefSharp/blob/cefsharp/99/NuGet/CefSharp.Common.targets#L10 contains the actual targets I use in CefSharp for different scenarios. \r\n\r\nI don't work for Microsoft, someone here will likely be able to provide better support than I.",
        "createdAt": "2022-03-11T20:58:53Z",
        "updatedAt": "2022-03-11T20:58:53Z",
        "author": {
          "login": "amaitland"
        }
      },
      {
        "body": "It should work without a solution, too. I attached a simple group of 3 projects to illustrate the idea. (`dotnet build temp.csproj` to see it in action)\r\n\r\ntemp.csproj builds runOnce.proj and middle.proj as well as printing something. middle.proj prints something then builds runOnce.proj. runOnce.proj prints something. Since both temp.csproj and middle.proj build runOnce.proj (and specify to build that target in particular), it should print twice, but because MSBuild only runs a target once per project per set of global properties, it only prints once then skips it.\r\n\r\nNote that unless your project is as simple as mine, you'd likely have to make sure you don't accidentally pass global properties to your equivalent of runOnce.proj, but I'm sure you get the idea.\r\n\r\n[temp.zip](https://github.com/dotnet/msbuild/files/8235643/temp.zip)\r\n",
        "createdAt": "2022-03-11T20:59:52Z",
        "updatedAt": "2022-03-11T20:59:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hello @Forgind,\r\nIt works perfect!, But please I can't access OutputPath property in runOnce.proj it shown empty in Output window.\r\n_NOTE: I use normal .NET Framework VS build not dotnet build._\r\n\r\nI upload what I tried here https://github.com/softwarekamal/tempNewRepo\r\nPlease can you look at Directory.Build.targets  why OutputPath not printed in runOnce.proj\r\n\r\nFinally, can you describe please what you mean by:\r\n> but because MSBuild only runs a target once per project per set of global properties, it only prints once then skips it.\r\nDo you mean if we use `<MSBuild>` task in all projects or general Directory.Build.targets file The target only called once? Is this default behavior? or a hack made in example.....\r\n\r\nThank you much dear.\r\n\r\n",
        "createdAt": "2022-03-12T01:30:14Z",
        "updatedAt": "2022-03-12T01:38:53Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "Hello @amaitland, Your solution are 99.9% now But ->\r\nI try the ResolveAssemblyReferences target. Its really awesome and works 99%. After I search for that I find follows:\r\n\r\nI find next code from https://nietras.com/2020/10/01/embedded-assembly-loading/\r\n```\r\n<Target Name=\"RemoveSatelliteAssemblies\" AfterTargets=\"ResolveAssemblyReferences\">\r\n\t\t<ItemGroup>\r\n\t\t\t<!-- get list of assemblies marked as CopyToLocal -->\r\n\t\t\t<FilesToExclude Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(Extension)' == '.xml' OR '%(Extension)' == '.pdb'\" />\r\n\t\t\t<ReferenceCopyLocalPaths Remove=\"@(FilesToExclude)\"  />\r\n\t\t</ItemGroup>\r\n\r\n\t\t<Message Text=\"Excluded @(FilesToExclude->'%(Filename)%(Extension)', ', ')\" Importance=\"high\"/>\r\n\t</Target>\r\n```\r\n\r\nOk this is cool for xml, pdb files? How to exclude custom folders for example \\locals, \\en, etc.\r\nPlease any workaround?\r\n\r\nThank you much dear",
        "createdAt": "2022-03-12T03:09:50Z",
        "updatedAt": "2022-03-12T03:10:36Z",
        "author": {
          "login": "softwarekamal"
        }
      },
      {
        "body": "After long journey. The MSBuild is a nightmare. I deleted 3rd parties library itself. rather than $(OutputPath), and learn from some mistakes.\r\n\r\nI finally combine multiple solutions together from\r\nI combine @jrdodds [Solution](https://github.com/dotnet/msbuild/issues/7437#issuecomment-1059619357)\r\nwith @amaitland [Solution](https://github.com/dotnet/msbuild/issues/7437#issuecomment-1061267484)\r\n\r\nHere's final results\r\n\r\n```\r\n\t<Target Name=\"RemoveUnusedReferences\" AfterTargets=\"ResolveAssemblyReferences\">\r\n\t\t<ItemGroup>\r\n\t\t\t<!-- Remove .xml, .pdb and localizations files -->\r\n\t\t\t<FilesToExclude Include=\"@(_ReferenceRelatedPaths)\"/>\r\n\t\t\t<FilesToExclude Include=\"@(ReferenceSatellitePaths)\"/>\r\n\t\t\t<ReferenceCopyLocalPaths Remove=\"@(FilesToExclude)\"/>\r\n\t\t</ItemGroup>\r\n\r\n\t\t<Message Text=\"Excluded Files @(FilesToExclude -> '%(FileName)%(Extension)', ', ')\"\r\n\t\t\t\t Importance=\"high\"/>\r\n\t</Target>\r\n\t<Target Name=\"RemoveUnusedCopiedfiles\" AfterTargets=\"CopyFilesToOutputDirectory\">\r\n\t\t<!-- Remove *.xml, *.pdb, other unused files that copied from packages-->\r\n\t\t<ItemGroup>\r\n\t\t\t<FileToDelete Include=\"@(_SourceItemsToCopyToOutputDirectory -> '$(OutputPath)%(FileName)%(Extension)')\" Condition=\"%(Extension) == '.pdb' OR %(Extension) == '.xml'\"/>\r\n\t\t</ItemGroup>\r\n\t\t<Delete Files=\"@(FileToDelete)\"/>\t\t\r\n\t\t<Message Text=\"Deleted Files @(FileToDelete -> '%(FullPath)', ', ')\"\r\n\t\t\t\t Importance=\"high\"/>\r\n\t\t\t\t\t   \r\n\t\t<!-- Remove other unused files -->\r\n\t\t<Delete Files=\"$(MSBuildProjectDirectory)\\$(MSBuildProjectName).nuspec\"/>\r\n\t</Target>\r\n```\r\n\r\nWell, If there's any enhancement to code above. you can post it here and close the issue in meantime.",
        "createdAt": "2022-03-12T17:30:20Z",
        "updatedAt": "2022-03-12T17:30:20Z",
        "author": {
          "login": "softwarekamal"
        }
      }
    ]
  }
}