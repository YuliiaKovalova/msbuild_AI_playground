{
  "number": 9709,
  "title": "IncrementalClean can delete a needed file from output",
  "body": "If a project has its output directory outside the project directory, and it copies a dependent file to output for more than one reason (say, via None as well as via RAR), and you remove one reason, building the project deletes the file from output, even though the file still needs to be there. Building the project again brings the file back.\r\n\r\n1. unzip this into `C:\\temp\\IncrementalClean` or any other empty directory: [IncrementalClean.zip](https://github.com/dotnet/msbuild/files/14149551/IncrementalClean.zip)\r\n2. `msbuild /r`\r\n3. ensure `C:\\temp\\IncrementalClean\\bin\\B\\A.dll` exists (hereafter it's just called \"The File\")\r\n4. open `C:\\temp\\IncrementalClean\\B\\B.csproj` and comment out line 13 (to ensure the None item is not added), save file\r\n5. `msbuild`\r\n6. observe that The File was deleted by the `IncrementalBuild` target\r\n7. `msbuild`\r\n8. The File is back again\r\n\r\nThis is because `@(ReferenceCopyLocalPaths)` is not added to `@(FileWrites)`, it is added to `@(FileWritesShareable)`. If a .dll is copied to output because it was in `@(ReferenceCopyLocalPaths)`, it is not added to `B.csproj.FileListAbsolute.txt`.\r\n\r\nIn our repro, The File was added to FileListAbsolute.txt during step 2, because the `None` items added it to `@(FileWrites)`. In step 5, the file is still copied by `_CopyFilesMarkedCopyLocal`, but since it's no longer in `@(FileWrites)`, but it is in `@(_CleanPriorFileWrites)`, `IncrementalClean` deletes it. In step 8 The File is copied back by `_CopyFilesMarkedCopyLocal`, but since it's neither in current nor prior file writes, IncrementalClean doesn't delete it.\r\n\r\nBasically I'd say it's an unfortunate confluence of the output directory being outside the project cone and `FileWritesShareable` not being added to `FileWrites`. I think this is the problematic logic that assumes the bin folder is inside the project directory:\r\nhttps://github.com/dotnet/msbuild/blob/07fd5d51f25134ea3ab3620c66f6501a74df2921/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5615-L5627\r\n\r\nI doubt there's a safe fix that we can do to fix the bug but I'm filing it just the same.",
  "state": "OPEN",
  "createdAt": "2024-02-03T03:51:02Z",
  "updatedAt": "2024-11-22T17:04:02Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "backlog",
    "Area: Common Targets",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "What is the recommended workaround? / @KirillOsenkov How do you workaround this bug? I think I am hitting this in an indirect way due to how Microsoft.Data.SqlClient.SNI imports native files in a net462 context. Technically, this is the guidance recommended by Microsoft. See https://learn.microsoft.com/en-us/nuget/create-packages/native-files-in-net-packages#projects-targeting-net-framework\n\nI think the generalization is you don't need \"If a project has its _output directory_ outside the project directory\" to reproduce this problem. Any clean checkout that transitively imports targets from a nuget package under `buildTransitive\\<any netfx tfm>\\<PackageName>.targets` will have this problem, I think.\n\nI've tested:\n\n* indirect references where project A ships A.exe and contains project B reference shipping B.dll _and_ a reference to Microsoft.Data.SqlClient.SNI\n* direct references where project A ships A.exe and contains direct reference to Microsoft.Data.SqlClient.SNI\n",
        "createdAt": "2024-11-22T14:27:13Z",
        "updatedAt": "2024-11-22T14:27:44Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "I just add `<Target Name=\"IncrementalClean\" />` to my Directory.Build.targets to neuter the in the box one.\n\nIf I need to clean I just git clean -xdf",
        "createdAt": "2024-11-22T17:00:44Z",
        "updatedAt": "2024-11-22T17:00:44Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "and yes, Microsoft.Data.SqlClient.SNI is a poorly authored NuGet package, might consider setting ExcludeAssets=\"all\" PrivateAssets=\"all\" GeneratePathProperty=\"true\" and manually consuming the parts you need",
        "createdAt": "2024-11-22T17:04:00Z",
        "updatedAt": "2024-11-22T17:04:00Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}