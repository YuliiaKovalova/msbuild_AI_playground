{
  "number": 5707,
  "title": "MSB4096 seems too strict: A Include=\"@(B)\" C=\"%(D)\" requires all existing A to have metadata D",
  "body": "### Issue Description\r\n\r\nI think I'm getting `MSB4096` in this situation even though in this context, it isn't a problem. Repro `build.proj` that gets `MSB4096`:\r\n\r\n```xml\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <PackageReference Include=\"Foo\" Version=\"1.0.0\" />\r\n      <Other Include=\"Other\" ExactVersion=\"1.0.0\" />\r\n      <PackageReference Include=\"@(Other)\" Version=\"[%(ExactVersion)]\" /> <!-- MSB4096: must be Other.ExactVersion -->\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nMSB4096's message is actionable and the workaround is easy, but it doesn't seem necessary based on my understanding of MSBuild, and I want to make sure I'm not missing some situation where the `Version` metadata actually has the potential to get replaced in a way I don't expect.\r\n\r\n(I expect to be called out on this in a code review: my diff changes `ExactVersion` to `Other.ExactVersion` for no obvious reason. \ud83d\ude04 My PR goes from not having any pre-existing `PackageReference`s to adding `Foo`, causing `MSB4096`. Then I have to replace `ExactVersion` with `Other.ExactVersion` to fix that--this ends up being spooky action at a distance, and hard to review.)\r\n\r\n### Steps to Reproduce\r\n\r\nWith above repro project:\r\n\r\n```\r\n$ dotnet msbuild /bl\r\n```\r\n\r\n### Expected Behavior\r\n\r\nSuccess\r\n\r\n### Actual Behavior\r\n\r\n```\r\nerror MSB4096: The item \"Foo\" in item list \"PackageReference\" does not define a value for\r\nmetadata \"ExactVersion\".  In order to use this metadata, either qualify it by specifying\r\n%(PackageReference.ExactVersion), or ensure that all items in this list define a value for\r\nthis metadata.\r\n```\r\n\r\n### Workaround\r\n\r\nReplace the last item list line with `<PackageReference Include=\"@(Other)\" Version=\"[%(Other.ExactVersion)]\" />`.\r\n\r\n### Versions & Configurations\r\n\r\n```\r\n$ dotnet msbuild /version\r\nMicrosoft (R) Build Engine version 16.7.0-preview-20360-03+188921e2f for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.7.0.36003\r\n```\r\n\r\n### Attach a binlog\r\n\r\n[metadata-must-exist-even-if-unused.zip](https://github.com/dotnet/msbuild/files/5170331/metadata-must-exist-even-if-unused.zip)",
  "state": "OPEN",
  "createdAt": "2020-09-03T18:50:54Z",
  "updatedAt": "2024-01-31T08:23:03Z",
  "closedAt": null,
  "author": {
    "login": "dagood"
  },
  "labels": [
    "bug",
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: \r\n![image](https://user-images.githubusercontent.com/4691428/93364712-ba251380-f7fd-11ea-8ab4-dd2061eda47b.png)\r\nSo, if the metadata exists on `PackageReference` then it is used from `Other`. That doesn't make sense. It does seem like we can just remove the warning, but we need to think that through.",
        "createdAt": "2020-09-16T16:25:15Z",
        "updatedAt": "2020-09-16T16:25:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Interesting experiment! I actually expected the result you got with my current mental model of MSBuild--the `%(ExactVersion)` always being \"linked\" to `@(Other)`. But I see how it's confusing vs. the behavior of:\r\n`<PackageReference Version=\"[%(ExactVersion)]\" />`\r\nThe root issue as I see it is that there are two types of \"implicit `this`\", and they're colliding here in an awkward way. I'm not sure if there's some MSBuild precedent for which behavior to expect here--both sound fine to me. I haven't seen much in the docs about these kinds of item metadata batching anyway.",
        "createdAt": "2020-09-16T17:18:27Z",
        "updatedAt": "2020-09-16T17:18:27Z",
        "author": {
          "login": "dagood"
        }
      }
    ]
  }
}