{
  "number": 3429,
  "title": "msbuild cannot build new style csproj when targetting net462",
  "body": "### Steps to reproduce\r\n\r\nProblem demo'd at the repo at https://github.com/SidShetye/msbuild-newcsproj-issue\r\n\r\n### Expected  behavior\r\n\r\nbuild the project like VS2017 gui does on the same machine\r\n\r\n### Actual behavior\r\n\r\nbuild fails even though there are no nuget dependencies\r\n\r\n```\r\nBuild FAILED.\r\n\r\n    \"C:\\temp\\new-old-proj-mix-soln\\ClassLibraryFw462NewProj\\ClassLibraryFw462NewProj.csproj\" (build target) (1) ->\r\n    (ResolvePackageAssets target) ->\r\n        C:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(198,5): error :\r\n    Assets file 'C:\\temp\\new-old-proj-mix-soln\\ClassLibraryFw462NewProj\\obj\\project.assets.json' not found. Run a NuGet package restore\r\n        to generate this file. [C:\\temp\\new-old-proj-mix-soln\\ClassLibraryFw462NewProj\\ClassLibraryFw462NewProj.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n15.7.179.6572\r\n```\r\n\r\nOS info: Win 10 x64 v1803 (OS Build 17134.112)\r\nVS 2017 (15.7.4)\r\n",
  "state": "CLOSED",
  "createdAt": "2018-06-19T23:48:17Z",
  "updatedAt": "2024-02-21T17:12:39Z",
  "closedAt": "2018-06-20T19:38:12Z",
  "author": {
    "login": "SidShetye"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the detailed report!\r\n\r\nAll projects that use `Microsoft.NET.Sdk` require NuGet restore before build. You can accomplish this with a small change to your build script:\r\n\r\n```diff\r\ndiff --git a/DemoProblem.ps1 b/DemoProblem.ps1\r\nindex ae1b278..fbcee89 100644\r\n--- a/DemoProblem.ps1\r\n+++ b/DemoProblem.ps1\r\n@@ -37,7 +37,7 @@ gci . -Recurse -Include bin,obj | % { ri -Recurse -Force $_.FullName }\r\n # And now it barfs :/\r\n # building in VS2017 (15.7.4) works just fine though\r\n $cwd=$PSScriptRoot # just point to current directory / soln dir\r\n-msbuild .\\ClassLibraryFw462NewProj\\ClassLibraryFw462NewProj.csproj /p:SolutionDir=$cwd /p:Configuration=Debug /m /t:build\r\n+msbuild .\\ClassLibraryFw462NewProj\\ClassLibraryFw462NewProj.csproj /p:SolutionDir=$cwd /p:Configuration=Debug /m /t:build /restore\r\n \r\n # dump our msbuild version too\r\n msbuild /version\r\n\\ No newline at end of file\r\n```\r\n\r\nThe VS build does NuGet restore independently and silently, which is why it works transparently.",
        "createdAt": "2018-06-20T19:16:47Z",
        "updatedAt": "2018-06-20T19:16:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Moving to the sdk repo to see if there's interest in optimizing for the no-`PackageReference` case.",
        "createdAt": "2018-06-20T19:37:55Z",
        "updatedAt": "2018-06-20T19:37:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This issue was moved to dotnet/sdk#2347",
        "createdAt": "2018-06-20T19:38:12Z",
        "updatedAt": "2018-06-20T19:38:12Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}