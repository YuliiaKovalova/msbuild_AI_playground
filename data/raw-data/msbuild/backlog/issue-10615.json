{
  "number": 10615,
  "title": "[Bug]: Evaluation of a project with an `ProjectCachePlugin` item impacts the next build, regardless of its involvement in the build. ",
  "body": "### Issue Description\r\n\r\nMerely evaluating a Project (even in a private `ProjectCollection`) that produces an `ProjectCachePlugin` item has the nasty side-effect of impacting the next build, even though that project is never built. \r\nAnd in particular, it breaks attempts to programmatically enable [the MSBuildCache plugin](https://github.com/microsoft/MSBuildCache) because it is very particular about only being initialized once, yet it is loaded twice in my testing because MSBuild allowed a single evaluation of an isolated project to also impact the build.\r\n\r\n### Steps to Reproduce\r\n\r\nThis code breaks the next build, yet is a natural way to reuse the plugin's defaults as defined in the plugin's nuget package:\r\n\r\n```cs\r\nbuildParameters.ProjectCacheDescriptor = CreateCacheDescriptor();\r\n\r\nprivate static ProjectCacheDescriptor? CreateCacheDescriptor()\r\n{\r\n    const string nugetPackageCache = @\"C:\\.tools\\.nuget\\packages\";\r\n    const string pluginPackageId = \"microsoft.msbuildcache.local\";\r\n    const string pluginPackageVersion = \"0.1.287-preview\";\r\n    ProjectCollection projectCollection = new();\r\n    ProjectRootElement pre = ProjectRootElement.Create(projectCollection);\r\n    pre.AddImport(Path.Combine(nugetPackageCache, pluginPackageId, pluginPackageVersion, \"build\", $\"{pluginPackageId}.props\"));\r\n    pre.AddImport(Path.Combine(nugetPackageCache, pluginPackageId, pluginPackageVersion, \"build\", $\"{pluginPackageId}.targets\"));\r\n    var project = Microsoft.Build.Evaluation.Project.FromProjectRootElement(pre, new ProjectOptions { });\r\n\r\n    ProjectItem? pluginItem = project.GetItems(\"ProjectCachePlugin\").FirstOrDefault();\r\n    if (pluginItem is null)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    string pluginPath = pluginItem.GetMetadataValue(\"FullPath\");\r\n    Dictionary<string, string> settings = new(StringComparer.OrdinalIgnoreCase);\r\n    foreach(ProjectMetadata metadatum in pluginItem.DirectMetadata)\r\n    {\r\n        settings[metadatum.Name] = metadatum.EvaluatedValue;\r\n    }\r\n\r\n    settings[\"IdenticalDuplicateOutputPatterns\"] = \"**\";\r\n\r\n    return ProjectCacheDescriptor.FromAssemblyPath(pluginPath, settings);\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nA successful build.\r\n\r\n### Actual Behavior\r\n\r\nThe build fails with this message:\r\n\r\n> Another instance of MSBuildCache is already running in this build. This is typically due to a misconfiguration of the plugin settings, in particular different plugin settings across projects.\r\n\r\n### Analysis\r\n\r\n@dfederm says msbuild stores the plugin in a mutable static (evil) just from seeing an `ProjectCachePlugin` item in _any_ project evaluation.\r\n\r\n### Versions & Configurations\r\n\r\nDev17.12 (35228.240.main)",
  "state": "OPEN",
  "createdAt": "2024-09-03T22:17:46Z",
  "updatedAt": "2024-10-10T15:56:40Z",
  "closedAt": null,
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "bug",
    "Area: Engine",
    "Area: Project Cache",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@dfederm could you take a look at this issue?",
        "createdAt": "2024-09-10T14:23:43Z",
        "updatedAt": "2024-09-10T14:23:43Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Yep, I'll look at some point. I worked with Andrew on this and am just using this issue for tracking so I don't forget.",
        "createdAt": "2024-09-10T15:15:19Z",
        "updatedAt": "2024-09-10T15:15:19Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  }
}