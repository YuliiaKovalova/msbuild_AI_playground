{
  "number": 2989,
  "title": "Log a warning when an undefined property is used",
  "body": "When an undefined property is used, consider logging a warning or at least a message. In Strict Mode, fail the build.",
  "state": "OPEN",
  "createdAt": "2018-02-12T21:18:22Z",
  "updatedAt": "2024-04-01T18:21:20Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Debuggability",
    "Feature: Warning Waves",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Such a warning would be _incredibly_ noisy.\r\n\r\nIt would also have to be special cased for the if-not-set-set-to-my-default case\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <FunProperty Condition=\"'$(FunProperty)' == ''\">FunDefault</FunProperty>\r\n</PropertyGroup>\r\n```\r\n\r\nI think we already have logic to detect that case somewhere, but I don't remember why . ..",
        "createdAt": "2018-02-12T21:22:01Z",
        "updatedAt": "2018-02-12T21:22:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "You can make a differentiation between when it's used directly like in `'$(FunProperty)'` or in expression `'$(FunProperty)\\foo'`. \r\nBetter pattern to check is property was defined might also help",
        "createdAt": "2018-02-12T22:11:04Z",
        "updatedAt": "2018-02-12T22:19:29Z",
        "author": {
          "login": "pakrym"
        }
      },
      {
        "body": "yeah like we have `Exists` for files and directories, have `Defined` for properties.\r\n\r\n```\r\n<PropertyGroup>\r\n  <FunProperty Condition=\"!Defined(FunProperty)\">FunDefault</FunProperty>\r\n</PropertyGroup>\r\n```",
        "createdAt": "2018-02-12T22:32:18Z",
        "updatedAt": "2018-02-12T22:33:18Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "See related https://github.com/microsoft/msbuild/issues/5015",
        "createdAt": "2019-12-31T22:17:09Z",
        "updatedAt": "2019-12-31T22:17:09Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This can be enabled with `MSBUILDWARNONUNINITIALIZEDPROPERTY`. I presume it wasn't made default when that was implemented in the Stone Age because of noisiness (but we can always reevaluate).",
        "createdAt": "2020-05-01T11:53:39Z",
        "updatedAt": "2020-05-01T11:53:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Could have syntax to assert a non-empty value? `$(RequiredProperty!)`?\r\n\r\nThere might be an existing way to check like `<Error Text=\"Property Missing\" Condition=\"'$(RequiredProperty)' == ''\" />` but that has to go in a target not a property group, and you have to refer to the property by name multiple times which kind of defeats the purpose of the check.",
        "createdAt": "2024-03-20T21:42:14Z",
        "updatedAt": "2024-03-20T21:42:26Z",
        "author": {
          "login": "DaveCousineau"
        }
      },
      {
        "body": "> Could have syntax to assert a non-empty value? `$(RequiredProperty!)`?\r\n\r\nI _really_ like this idea, other than all the usual \"if we change syntax it makes errors from using a slightly-too-old MSBuild really hard to understand\" caveats.",
        "createdAt": "2024-04-01T18:21:19Z",
        "updatedAt": "2024-04-01T18:21:19Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}