{
  "number": 6303,
  "title": "Consider logging assembly loads into the binlog",
  "body": "We often have issues when MSBuild binaries are loaded from the GAC etc. Or NuGet/SDK binaries loaded from the wrong location. I think it would be beneficial to subscribe to AppDomain.CurrentDomain.AssemblyLoad and log all assembly loads, including full path to the .dll, assembly name, MVID, and maybe some attributes such as AssemblyFileVersion (which often contains the Git SHA).",
  "state": "CLOSED",
  "createdAt": "2021-03-26T02:39:23Z",
  "updatedAt": "2023-02-24T11:09:31Z",
  "closedAt": "2023-02-24T11:09:30Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "Good First Issue",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": "8.0P1"
  },
  "comments": {
    "nodes": [
      {
        "body": "We could also show a warning/error if any assembly from the interesting list is loaded from the GAC.",
        "createdAt": "2021-03-26T02:40:32Z",
        "updatedAt": "2021-03-26T02:40:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Related: https://github.com/dotnet/msbuild/issues/584",
        "createdAt": "2021-04-14T20:54:11Z",
        "updatedAt": "2021-04-14T20:54:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Few questions here:\r\n* Should actually all assemblies be logged this way (so enumerate all loaded assemblies prior subscribing to AssemblyLoad)?\r\n* Should this be per build? So if node is reused we likely want to retrigger events for already loaded assemblies - don't we?\r\n\r\nI'd say we want this per build and for all assemblies (so we don't miss cases where assembly was loaded by previous build on a same node). Thoughts?",
        "createdAt": "2023-01-04T11:33:30Z",
        "updatedAt": "2023-01-04T11:33:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "oof, good questions. Also for desktop there's also AppDomains (MarkupCompile tooling) that I suggest we pretend doesn't exist for the purposes of this bug ;)\r\n\r\nI wish there was a \"node initialized for build\" point in time where we could enumerate all assemblies loaded into the node process at the beginning. But I can't think of one.\r\n\r\nBarring that, we could enumerate all loaded assemblies in the central node at the beginning of the build, but it's of limited used I guess (since we can already infer which MSBuild we're using because we log the path to MSBuild.exe). So we would be getting pretty much the same predictable list every time.\r\n\r\nMore interesting is the assemblies loaded by tasks and analyzers, i.e. all third-party assemblies. So maybe for starters don't worry about assemblies that are already loaded, and just focus on logging the ones loaded dynamically \"at runtime\". Ideally if there was a way to associate the assembly load event with a task that triggered it (maybe there's a \"CurrentBuildContext\" somewhere, so we could log a new event with the Node Id, Project Id, Target Id and Task Id, so we could attribute the load to a particular task running).\r\n\r\nAlso consider if we're running in a non-command-line scenario (doubt we can run inside the devenv process, maybe for evaluation?) Should we be logging assembly loads during evaluation? So many questions.",
        "createdAt": "2023-01-04T19:12:47Z",
        "updatedAt": "2023-01-04T19:12:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "An interesting thought in terms of implementation:\r\n\r\nwe could subscribe to AssemblyLoad in the task runner before a task starts executing, and unsubscribe after it's finished, and log all loads we saw while the task was running. This way we know exactly what the BuildEventContext is for the task, so messages will be nicely hanging off the task.\r\n\r\nWe're probably going to need to bump the binlog format for this, and introduce a new AssemblyLoadEventArgs deriving from MessageEventArgs. Never a fan of bumping the binlog format, but appears justified in this case.\r\n\r\nAre analyzers always ran as part of a task? Will we catch assemblies loaded by analyzers? What about custom tasks?",
        "createdAt": "2023-01-04T19:17:56Z",
        "updatedAt": "2023-01-04T19:17:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I thought Analyzers were passed directly to the relevant compiler calls (Csc, etc), then the compiler itself was on the hook for loading those (and all of their dependencies). So as a result, no analyzers should be loaded as part of the build evaluation/execution itself, only as part of the compiler invocation.",
        "createdAt": "2023-01-04T19:23:56Z",
        "updatedAt": "2023-01-04T19:23:56Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Right, I thought so. Typically we should be shelling out to the compiler server process. But I was wondering if there are cases where stuff loads in-proc. Maybe like dotnet format, or linters or something. Just brainstorming. For now it feels like assemblies can be loaded either for custom tasks or during a task execution. During experimentation we should probably subscribe to everything and log all loads, and run it on a few builds to see what the typical scenarios are. ",
        "createdAt": "2023-01-04T19:36:38Z",
        "updatedAt": "2023-01-04T19:36:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}