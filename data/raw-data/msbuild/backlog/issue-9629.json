{
  "number": 9629,
  "title": "Analyzers prototyping - Instrumentation module",
  "body": "### Context\r\n\r\n#9627\r\n\r\nThis module will handle monitoring and summarization of overhead added by analyzers infrastructure and individual analyzers (will be usefull during build performance investigation). API is yet to be determined but sample is added for illustration\r\n\r\n### Things to be investigated and decided\r\n* We should have opt-in-able output in binlogs, but do we maybe want to trace to ETW as well? (we can leverage the Microsoft.Diagnostic.Tracing to facilitate the collectiong and just have custom events consumer)\r\n* Multiple nodes processes considerations\r\n* Roslyn current implementation and what can we reuse (https://github.com/search?q=repo%3Adotnet%2Froslyn%20ReportAnalyzer&type=code)\r\n\r\n### Possible tracing API\r\n\r\n```csharp\r\n    public struct ScopeId { }\r\n\r\n    public static class Tracing\r\n    {\r\n        ScopeId RegisterScope(string name, ScopeId? parent) { }\r\n        IDisposable EnterScope(ScopeId scope) { }\r\n        void ExitScope(ScopeId scope) { }\r\n        TracingSummary GetSummary() { }\r\n    }\r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2024-01-11T12:07:16Z",
  "updatedAt": "2024-06-25T15:14:10Z",
  "closedAt": "2024-05-02T13:47:43Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Some isnpiration from the Roslyn implementation:\n\n```console\n> dotnet new console\n> dotnet build /p:ReportAnalyzer=true /bl\n> .\\msbuild.binlog\n```\n\n\n![Image](https://github.com/dotnet/msbuild/assets/3809076/ce85f354-de12-4eb5-8f3d-9df4f03b3401)\n\nWe do not have to necessarily be same level of detail or structuring in binlog in the V1, though.\n\nWe can just flush the stats as a single message or a series of messages, and then have a separate workitem for making those better organized in the Binlog Viewer (similarly as the Roslyn stats have a special case presentation logic: https://github.com/KirillOsenkov/MSBuildStructuredLog/blob/4116c37b386613684c270893f2d0a606f82b465d/src/StructuredLogger/Analyzers/CscTaskAnalyzer.cs#L9) \n\n",
        "createdAt": "2024-03-08T11:28:01Z",
        "updatedAt": "2024-03-08T11:28:01Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Consider the use of System.Diagnostics.Activity here instead of Tracing directly - a lot of the runtime/tooling have embraced Activities as a more convenient and user-accessible way of tracking not only the duration of a unit of work, but also metadata for that unit of work that might be useful (a la structured logging!) and the parent/child relationships of that unit of work to other units of work. This level of instrumentation is pretty common in our (MS) application frameworks and libraries now. We've got some conceptual docs for it [here](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/distributed-tracing-concepts), and I'm happy to talk more about it - we're making pretty big bets on it BCL-wide.\r\n\r\n",
        "createdAt": "2024-03-14T15:15:08Z",
        "updatedAt": "2024-03-14T15:15:08Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}