{
  "number": 3691,
  "title": "Add command line options to manipulate imports",
  "body": "msbuild implicitly import files during various stages. there is no (obvious) way to inspect or modify what is imported, at the moment. \r\n\r\nfor example (https://github.com/dotnet/sdk/issues/887), sometimes we find overriding a property with /p flag is too late, but the only chance of early import relies on heuristics in finding `Directory.Build.props` -- a wildcard that might be \"too greedy\" (https://github.com/Microsoft/msbuild/issues/762).\r\n\r\ncan we get command line options to manipulate such behaviors? e.g. if specified, overrides the above heuristic and use a given file instead, or list the files imported, etc.\r\n\r\nAlso see https://github.com/Microsoft/msbuild/issues/3166 and https://github.com/dotnet/roslyn/blob/master/src/Workspaces/CoreTestUtilities/Resources/Directory.Build.props",
  "state": "OPEN",
  "createdAt": "2018-09-02T17:09:15Z",
  "updatedAt": "2024-02-21T16:33:07Z",
  "closedAt": null,
  "author": {
    "login": "yatli"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "In theory, `-p:DirectoryBuildPropsPath=/path/to/some.props` should already work.\r\n\r\nWould be interesting to change `_DirectoryBuildPropsFile` to a public property to allow changing the file name. \r\nCurrently `-p:_DirectoryBuildPropsFile=foo.props` should already work and change the file name from `Directory.Build.props` to `foo.props` while maintaining the hierarchy search logic.\r\nIs that what you are looking for?",
        "createdAt": "2018-09-03T04:13:00Z",
        "updatedAt": "2018-09-03T04:13:00Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "There's also a `ImportDirectoryBuildProps` one could set to `false`",
        "createdAt": "2018-09-03T04:14:07Z",
        "updatedAt": "2018-09-03T04:14:07Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "hi @dasMulli!\r\n\r\nYeah, that property would solve my problem. \r\nI remember seeing this somewhere, but was too afraid that a `/p` flag will come in too late. Will give it a try.\r\nAlso, we could figure out what's imported via `/pp` and look through the import comments. It's just not that obvious. :)\r\n\r\nbtw, will it still look up the hierarchy until root if I override the `DirectoryBuildPropsPath` with a custom name? from your example, intuitively, it won't do this because an absolute path is given.",
        "createdAt": "2018-09-03T07:19:49Z",
        "updatedAt": "2018-09-03T07:19:49Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "No, `DirectoryBuildPropsPath` is the full path, `_DirectoryBuildPropsFile` would do the lookup but it's not really a public property (hence the underscore).\r\nIt would be interesting if MSBuild maintainers would be accepting a change to make this property public (remove the underscore). \r\nPersonally, I'd rather not and require users to always use `Directory.Build.props` for consistency. In there, build authors can add additional logic to search for other files or import other known files.\r\n\r\n`/p`(`-p`) sets global properties which are present from the beginning and can't be overwritten by the static portion of project files (with an exception involving `<Project TreatAsLocalProperty=\"\u2026\">`) so you don't need to worry about it applying too late.",
        "createdAt": "2018-09-03T07:40:27Z",
        "updatedAt": "2018-09-03T07:40:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "overriding `DirectoryBuildPropsPath` works for me, thanks @dasMulli !\r\n\r\nI too would rather not let users create arbitrary recursive lookups. `Directory.Build.props` at least looks like a build system-related file, while arbitrary `.props` file may be everywhere in the filesystem.\r\n\r\nI'm still not very sure about `/p` flag (also discussed here: https://github.com/Microsoft/msbuild/issues/1603)\r\n\r\nIf I specify `/p:BaseIntermediateOutputPath=` at command line, I get inconsistent result -- the intermediate path indeed moved to the desired location, but `project.json` etc. remained in the `obj` folder, hence my concern about \"too late\". :)",
        "createdAt": "2018-09-04T15:27:04Z",
        "updatedAt": "2018-09-04T15:27:04Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "The `BaseIntermediateOutputPath` trouble isn't/wasn't related to the order of definitions but rather NuGet and MSBuild using different properties for essentially the same concerns.\r\nIf you still have troubles with it, I'd suggest logging a fresh issue somewhere to discuss implications. The most difficult part about it is making sure that restore runs and builds have the same global properties set via CLI parameters. I believe `Directory.Build.props` may be the best option here to ensure a consistent experience. \r\n\r\n> Directory.Build.props at least looks like a build system-related file\r\n\r\nIt is also more in-line with `Directory.Build.rsp` which is not implemented in MSBuild files (common props/targets) but in MSBuild itself, thus the name can't really be changed in a \"good/consistent/compatible\" way.",
        "createdAt": "2018-09-04T16:05:44Z",
        "updatedAt": "2018-09-04T16:05:44Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "ad `BaseIntermediateOutputPath`: also see https://github.com/Microsoft/msbuild/issues/3695.\r\nTL;DR don't set it for solutions.\r\nBut I think it should work for stand-alone projects. Or not using a rooted property / common location.",
        "createdAt": "2018-09-04T16:09:25Z",
        "updatedAt": "2018-09-04T16:09:25Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "The issue https://github.com/Microsoft/msbuild/issues/3695 describes a problem very similar to mine. Even if I both override `BaseIntermediateOutputPath` and then specify `/p` during a `dotnet restore proj_path`, it simply ignores the settings and writes `project.assets.json` and the friends to `proj/obj/`.",
        "createdAt": "2018-09-06T04:19:21Z",
        "updatedAt": "2018-09-06T04:19:21Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "I think this issue can be closed now -- recommend documenting `DirectoryBuildPropsPath` somewhere though. Thanks @dasMulli for clarifying everything!",
        "createdAt": "2018-09-12T06:34:01Z",
        "updatedAt": "2018-09-12T06:34:01Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "btw I'm rolling a cmake-dotnet integration module, FYI:\r\n\r\nhttps://github.com/Z3Prover/z3/issues/1423\r\n\r\nhttps://github.com/Microsoft/GraphEngine/blob/master/cmake/FindDotnet.cmake",
        "createdAt": "2018-09-12T06:34:41Z",
        "updatedAt": "2018-09-12T06:34:41Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "@dasMulli some new findings here, even if I override `DirectoryBuildPropsPath`, during package restore, `Directory.Build.props` is choosen and my custom props file is ignored.\r\n\r\nThis brings complexity to parameterized package reference, e.g. `<PackageReference Include=\"...\" Version=\"$(SOME_DEP_VERSION)\" />` -- as our package version is refreshed on build, we have to update the root `Directory.Build.props` also on build -- and this breaks the out-of-tree building principle.\r\n\r\n_(edited)_\r\n",
        "createdAt": "2018-11-07T08:28:50Z",
        "updatedAt": "2018-11-08T05:30:58Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "@yatli that sounds more like a caching issue.. do you use `-restore` to restore and build during the build or `-t:Restore;Build`? (which doesn't work if you change xml content in between)\r\nDo you have a sample project that reproduces this behaviour?",
        "createdAt": "2018-11-07T08:36:47Z",
        "updatedAt": "2018-11-07T08:36:47Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli I use `dotnet restore /p:....`.\r\n\r\nlooks like `DirectoryBuildPropsPath` expects a full path, and it correctly picks up the custom props when I give it a proper path.",
        "createdAt": "2018-11-08T05:45:02Z",
        "updatedAt": "2018-11-08T05:45:02Z",
        "author": {
          "login": "yatli"
        }
      },
      {
        "body": "yeah if it isn't a full path, it will be relative to the project directory. And if you do it on a solution, it will be relative to each project individually..",
        "createdAt": "2018-11-08T07:08:37Z",
        "updatedAt": "2018-11-08T07:08:37Z",
        "author": {
          "login": "dasMulli"
        }
      }
    ]
  }
}