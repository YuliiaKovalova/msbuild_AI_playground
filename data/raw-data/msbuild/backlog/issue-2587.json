{
  "number": 2587,
  "title": "Lookup/ItemDictionary make up a huge amount of allocations/CPU item",
  "body": "What's happening is that the initial capability/current capability is not correct, and we're resizing the underlying items dictionary, possible multiple times with the same ImportItems call.\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/31216769-78ac158c-aa00-11e7-80f4-be86bf869cdf.png)\r\n\r\nNot sure of a good way to fix this - there's no way to resize a dictionary after it's created.\r\n",
  "state": "OPEN",
  "createdAt": "2017-10-05T08:09:10Z",
  "updatedAt": "2025-06-02T08:28:14Z",
  "closedAt": null,
  "author": {
    "login": "davkean"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": ":memo: As of this writing, the collections referenced in this comment are in their earliest stages (API review), but I'm keeping an eye open for cases where they may help solve real-world problems.\r\n\r\n:bulb: `ItemDictionary<T>` appears to be a candidate for the [`SortedTreeList<T>`](tunnelvisionlabs/dotnet-trees#12) collection, which may be able serve the combined purpose of both dictionaries and the linked lists in `ItemDictionary<T>`. Outside of that approach, a more direct replacement with [`TreeDictionary<TKey, TValue>`](tunnelvisionlabs/dotnet-trees#11) would address the immediate concerns of this issue with less code churn.\r\n\r\n\u26a0\ufe0f The locks used in `ItemDictionary<T>` are incorrect and/or misleading. Given the increased sensitivity of B+-tree data structures to corruption and/or unpredictable behavior when used incorrectly in a multi-threaded environment, this would obviously *need* to be fixed before the above is an option.",
        "createdAt": "2017-10-05T12:14:12Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Having spent a non-trivial time walking through this code, I'm convinced that ItemDictionary/Lookup needs to be rethought/rewritten with more appropriate collections. 11% of allocations and 6.5% comes from Lookup.\r\n\r\nMemory:\r\n![image](https://user-images.githubusercontent.com/1103906/31428154-91a3f1a4-aeb5-11e7-9d8e-a68d149122c0.png)\r\n\r\nCPU: \r\n![image](https://user-images.githubusercontent.com/1103906/31428239-e2b26ea4-aeb5-11e7-891e-a42cdbb6c150.png)\r\n\r\nWe spent a large non-trivial amount of time creating and merging collections, huge amount of allocations are us resizing the underlying Dictionary<TKey, TValue> because we couldn't figure out the up-front size. I'm going to change this bug to be about that.\r\n",
        "createdAt": "2017-10-11T08:03:58Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Just interesting why the hell Dictionary needs to be resized? Can't instead of resizing we allocate just another array and use list of arrays instead of a single?",
        "createdAt": "2017-10-11T09:32:38Z",
        "author": {
          "login": "yahorsi"
        }
      },
      {
        "body": "Tradeoff - that would increase the size of Dictionary, and eventually something has to increase the size of the list of arrays and we're back to square one. Though that would help avoiding the large object heap- but if your dictionary is 85k you're probably better off with a different object.",
        "createdAt": "2017-10-11T09:40:09Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "You don't have to use List to store Arrays, simple linked list would be enough here. Anyway any collection is good at some particular use case. E.g. if collection is resized a lot then that collection is probably a bad choice for that scenario? \r\n\r\nPS: Can't we specify Capacity here?",
        "createdAt": "2017-10-11T09:49:02Z",
        "author": {
          "login": "yahorsi"
        }
      },
      {
        "body": "I'm assuming you don't mean a linked link as the entire back storing (which would be O(n) lookup) but rather as the store for the underlying arrays. If so, yes, that's heading towards Immutable collection territory - which is what I'm thinking.\r\n\r\nI've made changes to set capacity in places - but we due to the way it was written, we don't know how much data we're going to add these dictionaries by the end of the scopes of evaluation, so we can't pick the \"right size\".",
        "createdAt": "2017-10-11T10:39:14Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Note @davkean 's request was implemented for .NET Core 2.1, so for that target you can call EnsureCapacity\r\n\r\nhttps://github.com/dotnet/core/blob/master/release-notes/2.1/api-diff/2.0-vs-2.1_System.Collections.Generic.md",
        "createdAt": "2018-06-16T04:58:32Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Labeling with size:1 as the cost of the initial investigation. Will open a follow-up issue if more work is identified.",
        "createdAt": "2021-10-12T12:56:36Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "12/2021 numbers as measured when clean-building the Ocelot solution:\r\n\r\n|   | Lookup | ItemDictionary  |\r\n|---|---|---|\r\n| CPU | 1.8% | 1.1% |\r\n| Memory | 7.8% | 6.0% |\r\n\r\nNot as bad anymore but definitely worth optimizing.",
        "createdAt": "2021-12-13T22:04:28Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Back to backlog as I will not have time to work on this in the near future.",
        "createdAt": "2022-01-10T15:03:15Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}